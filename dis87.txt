
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	e8 fc ff ff ff       	call   10000007 <start()+0x7>	10000007: R_386_PC32	begin()
1000000b:	90                   	nop
1000000c:	c9                   	leave  
1000000d:	c3                   	ret    

1000000e <floatToLong(Float80)>:
1000000e:	b8 00 00 00 00       	mov    eax,0x0
10000013:	ba 00 00 00 00       	mov    edx,0x0
10000018:	c3                   	ret    

10000019 <longToFloat(long long)>:
10000019:	55                   	push   ebp
1000001a:	89 e5                	mov    ebp,esp
1000001c:	83 ec 18             	sub    esp,0x18
1000001f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000022:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000025:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000028:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
1000002b:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
1000002e:	80 f5 00             	xor    ch,0x0
10000031:	89 c8                	mov    eax,ecx
10000033:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000036:	80 f5 00             	xor    ch,0x0
10000039:	89 ca                	mov    edx,ecx
1000003b:	09 d0                	or     eax,edx
1000003d:	85 c0                	test   eax,eax
1000003f:	75 30                	jne    10000071 <longToFloat(long long)+0x58>
10000041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000044:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
10000047:	83 e2 7f             	and    edx,0x7f
1000004a:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
1000004d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000050:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
10000053:	25 00 80 ff ff       	and    eax,0xffff8000
10000058:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
1000005c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000005f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000065:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000006c:	e9 84 00 00 00       	jmp    100000f5 <longToFloat(long long)+0xdc>
10000071:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10000075:	79 18                	jns    1000008f <longToFloat(long long)+0x76>
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
1000007d:	83 ca 80             	or     edx,0xffffff80
10000080:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
10000083:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
10000086:	83 55 ec 00          	adc    DWORD PTR [ebp-0x14],0x0
1000008a:	f7 5d ec             	neg    DWORD PTR [ebp-0x14]
1000008d:	eb 0c                	jmp    1000009b <longToFloat(long long)+0x82>
1000008f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000092:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
10000095:	83 e2 7f             	and    edx,0x7f
10000098:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
1000009b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100000a2:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100000a6:	78 15                	js     100000bd <longToFloat(long long)+0xa4>
100000a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100000ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100000ae:	01 c0                	add    eax,eax
100000b0:	11 d2                	adc    edx,edx
100000b2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100000b5:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100000b8:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000bb:	eb e5                	jmp    100000a2 <longToFloat(long long)+0x89>
100000bd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100000c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100000c3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100000c6:	89 01                	mov    DWORD PTR [ecx],eax
100000c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
100000cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000ce:	ba 3e 40 00 00       	mov    edx,0x403e
100000d3:	29 c2                	sub    edx,eax
100000d5:	89 d0                	mov    eax,edx
100000d7:	25 ff 7f 00 00       	and    eax,0x7fff
100000dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100000df:	25 ff 7f 00 00       	and    eax,0x7fff
100000e4:	89 c1                	mov    ecx,eax
100000e6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
100000e9:	25 00 80 ff ff       	and    eax,0xffff8000
100000ee:	09 c8                	or     eax,ecx
100000f0:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
100000f4:	90                   	nop
100000f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000f8:	c9                   	leave  
100000f9:	c2 04 00             	ret    0x4

100000fc <get0()>:
100000fc:	55                   	push   ebp
100000fd:	89 e5                	mov    ebp,esp
100000ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000102:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
10000105:	83 e2 7f             	and    edx,0x7f
10000108:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
1000010b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000010e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000011b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000011e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
10000121:	25 00 80 ff ff       	and    eax,0xffff8000
10000126:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
1000012a:	90                   	nop
1000012b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000012e:	5d                   	pop    ebp
1000012f:	c2 04 00             	ret    0x4

10000132 <get1()>:
10000132:	55                   	push   ebp
10000133:	89 e5                	mov    ebp,esp
10000135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000138:	83 ec 04             	sub    esp,0x4
1000013b:	6a 00                	push   0x0
1000013d:	6a 00                	push   0x0
1000013f:	50                   	push   eax
10000140:	e8 fc ff ff ff       	call   10000141 <get1()+0xf>	10000141: R_386_PC32	longToFloat(long long)
10000145:	83 c4 0c             	add    esp,0xc
10000148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000014b:	c9                   	leave  
1000014c:	c2 04 00             	ret    0x4

1000014f <fpuPush(Float80)>:
1000014f:	55                   	push   ebp
10000150:	89 e5                	mov    ebp,esp
10000152:	57                   	push   edi
10000153:	56                   	push   esi
10000154:	53                   	push   ebx
10000155:	83 ec 0c             	sub    esp,0xc
10000158:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000015a: R_386_32	fpuSP
1000015e:	8d 42 01             	lea    eax,[edx+0x1]
10000161:	a3 00 00 00 00       	mov    ds:0x0,eax	10000162: R_386_32	fpuSP
10000166:	89 d0                	mov    eax,edx
10000168:	01 c0                	add    eax,eax
1000016a:	01 d0                	add    eax,edx
1000016c:	c1 e0 02             	shl    eax,0x2
1000016f:	05 00 00 00 00       	add    eax,0x0	10000170: R_386_32	fpuStack
10000174:	89 c2                	mov    edx,eax
10000176:	8d 5d 08             	lea    ebx,[ebp+0x8]
10000179:	b8 03 00 00 00       	mov    eax,0x3
1000017e:	89 d7                	mov    edi,edx
10000180:	89 de                	mov    esi,ebx
10000182:	89 c1                	mov    ecx,eax
10000184:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000186:	a1 00 00 00 00       	mov    eax,ds:0x0	10000187: R_386_32	fpuSP
1000018b:	83 f8 08             	cmp    eax,0x8
1000018e:	75 10                	jne    100001a0 <fpuPush(Float80)+0x51>
10000190:	83 ec 0c             	sub    esp,0xc
10000193:	68 ac 03 00 10       	push   0x100003ac	10000194: R_386_32	.text
10000198:	e8 fc ff ff ff       	call   10000199 <fpuPush(Float80)+0x4a>	10000199: R_386_PC32	Krnl::panic(char const*)
1000019d:	83 c4 10             	add    esp,0x10
100001a0:	90                   	nop
100001a1:	8d 65 f4             	lea    esp,[ebp-0xc]
100001a4:	5b                   	pop    ebx
100001a5:	5e                   	pop    esi
100001a6:	5f                   	pop    edi
100001a7:	5d                   	pop    ebp
100001a8:	c3                   	ret    

100001a9 <fpuPop()>:
100001a9:	55                   	push   ebp
100001aa:	89 e5                	mov    ebp,esp
100001ac:	57                   	push   edi
100001ad:	56                   	push   esi
100001ae:	53                   	push   ebx
100001af:	83 ec 0c             	sub    esp,0xc
100001b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100001b3: R_386_32	fpuSP
100001b7:	85 c0                	test   eax,eax
100001b9:	75 10                	jne    100001cb <fpuPop()+0x22>
100001bb:	83 ec 0c             	sub    esp,0xc
100001be:	68 ba 03 00 10       	push   0x100003ba	100001bf: R_386_32	.text
100001c3:	e8 fc ff ff ff       	call   100001c4 <fpuPop()+0x1b>	100001c4: R_386_PC32	Krnl::panic(char const*)
100001c8:	83 c4 10             	add    esp,0x10
100001cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100001cc: R_386_32	fpuSP
100001d0:	48                   	dec    eax
100001d1:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d2: R_386_32	fpuSP
100001d6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001d8: R_386_32	fpuSP
100001dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100001df:	89 d0                	mov    eax,edx
100001e1:	01 c0                	add    eax,eax
100001e3:	01 d0                	add    eax,edx
100001e5:	c1 e0 02             	shl    eax,0x2
100001e8:	05 00 00 00 00       	add    eax,0x0	100001e9: R_386_32	fpuStack
100001ed:	89 ca                	mov    edx,ecx
100001ef:	89 c3                	mov    ebx,eax
100001f1:	b8 03 00 00 00       	mov    eax,0x3
100001f6:	89 d7                	mov    edi,edx
100001f8:	89 de                	mov    esi,ebx
100001fa:	89 c1                	mov    ecx,eax
100001fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100001fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000201:	8d 65 f4             	lea    esp,[ebp-0xc]
10000204:	5b                   	pop    ebx
10000205:	5e                   	pop    esi
10000206:	5f                   	pop    edi
10000207:	5d                   	pop    ebp
10000208:	c2 04 00             	ret    0x4

1000020b <x87Handler(regs*)>:
1000020b:	55                   	push   ebp
1000020c:	89 e5                	mov    ebp,esp
1000020e:	57                   	push   edi
1000020f:	56                   	push   esi
10000210:	53                   	push   ebx
10000211:	83 ec 2c             	sub    esp,0x2c
10000214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000217:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
1000021a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000021d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000220:	83 c0 02             	add    eax,0x2
10000223:	8a 00                	mov    al,BYTE PTR [eax]
10000225:	0f b6 c8             	movzx  ecx,al
10000228:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000022b:	40                   	inc    eax
1000022c:	8a 00                	mov    al,BYTE PTR [eax]
1000022e:	0f b6 d0             	movzx  edx,al
10000231:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000234:	8a 00                	mov    al,BYTE PTR [eax]
10000236:	0f b6 c0             	movzx  eax,al
10000239:	51                   	push   ecx
1000023a:	52                   	push   edx
1000023b:	50                   	push   eax
1000023c:	68 c9 03 00 10       	push   0x100003c9	1000023d: R_386_32	.text
10000241:	e8 fc ff ff ff       	call   10000242 <x87Handler(regs*)+0x37>	10000242: R_386_PC32	Dbg::kprintf(char const*, ...)
10000246:	83 c4 10             	add    esp,0x10
10000249:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000024c:	8a 00                	mov    al,BYTE PTR [eax]
1000024e:	3c d9                	cmp    al,0xd9
10000250:	0f 85 9f 00 00 00    	jne    100002f5 <x87Handler(regs*)+0xea>
10000256:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000259:	40                   	inc    eax
1000025a:	8a 00                	mov    al,BYTE PTR [eax]
1000025c:	0f b6 c0             	movzx  eax,al
1000025f:	2d e8 00 00 00       	sub    eax,0xe8
10000264:	83 f8 06             	cmp    eax,0x6
10000267:	0f 87 87 00 00 00    	ja     100002f4 <x87Handler(regs*)+0xe9>
1000026d:	8b 04 85 d8 03 00 10 	mov    eax,DWORD PTR [eax*4+0x100003d8]	10000270: R_386_32	.text
10000274:	ff e0                	jmp    eax
10000276:	8d 45 cc             	lea    eax,[ebp-0x34]
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	50                   	push   eax
1000027d:	e8 fc ff ff ff       	call   1000027e <x87Handler(regs*)+0x73>	1000027e: R_386_PC32	get1()
10000282:	83 c4 0c             	add    esp,0xc
10000285:	83 ec 04             	sub    esp,0x4
10000288:	83 ec 0c             	sub    esp,0xc
1000028b:	89 e0                	mov    eax,esp
1000028d:	89 c3                	mov    ebx,eax
1000028f:	8d 45 cc             	lea    eax,[ebp-0x34]
10000292:	ba 03 00 00 00       	mov    edx,0x3
10000297:	89 df                	mov    edi,ebx
10000299:	89 c6                	mov    esi,eax
1000029b:	89 d1                	mov    ecx,edx
1000029d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000029f:	e8 fc ff ff ff       	call   100002a0 <x87Handler(regs*)+0x95>	100002a0: R_386_PC32	fpuPush(Float80)
100002a4:	83 c4 10             	add    esp,0x10
100002a7:	b0 01                	mov    al,0x1
100002a9:	eb 4c                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002ab:	b0 00                	mov    al,0x0
100002ad:	eb 48                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002af:	b0 00                	mov    al,0x0
100002b1:	eb 44                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002b3:	b0 00                	mov    al,0x0
100002b5:	eb 40                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002b7:	b0 00                	mov    al,0x0
100002b9:	eb 3c                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002bb:	b0 00                	mov    al,0x0
100002bd:	eb 38                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002bf:	8d 45 d8             	lea    eax,[ebp-0x28]
100002c2:	83 ec 0c             	sub    esp,0xc
100002c5:	50                   	push   eax
100002c6:	e8 fc ff ff ff       	call   100002c7 <x87Handler(regs*)+0xbc>	100002c7: R_386_PC32	get0()
100002cb:	83 c4 0c             	add    esp,0xc
100002ce:	83 ec 04             	sub    esp,0x4
100002d1:	83 ec 0c             	sub    esp,0xc
100002d4:	89 e0                	mov    eax,esp
100002d6:	89 c3                	mov    ebx,eax
100002d8:	8d 45 d8             	lea    eax,[ebp-0x28]
100002db:	ba 03 00 00 00       	mov    edx,0x3
100002e0:	89 df                	mov    edi,ebx
100002e2:	89 c6                	mov    esi,eax
100002e4:	89 d1                	mov    ecx,edx
100002e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002e8:	e8 fc ff ff ff       	call   100002e9 <x87Handler(regs*)+0xde>	100002e9: R_386_PC32	fpuPush(Float80)
100002ed:	83 c4 10             	add    esp,0x10
100002f0:	b0 01                	mov    al,0x1
100002f2:	eb 03                	jmp    100002f7 <x87Handler(regs*)+0xec>
100002f4:	90                   	nop
100002f5:	b0 00                	mov    al,0x0
100002f7:	8d 65 f4             	lea    esp,[ebp-0xc]
100002fa:	5b                   	pop    ebx
100002fb:	5e                   	pop    esi
100002fc:	5f                   	pop    edi
100002fd:	5d                   	pop    ebp
100002fe:	c3                   	ret    

100002ff <begin()>:
100002ff:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000301: R_386_32	x87FaultIntercept
	10000305: R_386_32	x87Handler(regs*)
10000309:	90                   	nop
1000030a:	c3                   	ret    
1000030b:	90                   	nop

1000030c <PHYS_RAM_TABLE_SIZE>:
1000030c:	13 05 00 00                                         ....

10000310 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10000310:	24 05 00 00                                         $...

10000314 <PHYS_RAM_TABLE>:
10000314:	00 06 00 00                                         ....

10000318 <PHYS_DMA_MEMORY_1>:
10000318:	00 00 01 00                                         ....

1000031c <PHYS_PHYS_PAGE_BITMAP>:
1000031c:	00 00 02 00                                         ....

10000320 <PHYS_VIRT_PAGE_BITMAP>:
10000320:	00 00 04 00                                         ....

10000324 <PHYS_DMA_MEMORY_2>:
10000324:	00 00 06 00                                         ....

10000328 <PHYS_ALLOCED_VIRT_PAGES>:
10000328:	00 00 10 00                                         ....

1000032c <PHYS_KRNL_PAGE_DIRECTORY>:
1000032c:	00 10 00 00                                         ....

10000330 <VIRT_KERNEL_BASE>:
10000330:	00 00 00 c0                                         ....

10000334 <VIRT_LOW_MEGS>:
10000334:	00 00 00 c2                                         ....

10000338 <VIRT_CPU_SPECIFIC>:
10000338:	00 00 40 c2                                         ..@.

1000033c <VIRT_RECURSIVE_SPOT_1>:
1000033c:	00 00 80 c2                                         ....

10000340 <VIRT_RECURSIVE_SPOT_2>:
10000340:	00 00 c0 c2                                         ....

10000344 <VIRT_DMA_MEMORY_1>:
10000344:	00 00 01 c2                                         ....

10000348 <SIZE_DMA_MEMORY_1>:
10000348:	00 00 01 00                                         ....

1000034c <VIRT_DMA_MEMORY_2>:
1000034c:	00 00 06 c2                                         ....

10000350 <SIZE_DMA_MEMORY_2>:
10000350:	00 00 02 00                                         ....

10000354 <VIRT_KRNL_PAGE_DIRECTORY>:
10000354:	00 10 00 c2                                         ....

10000358 <VIRT_PHYS_PAGE_BITMAP>:
10000358:	00 00 02 c2                                         ....

1000035c <SIZE_PHYS_PAGE_BITMAP>:
1000035c:	00 00 02 00                                         ....

10000360 <VIRT_VIRT_PAGE_BITMAP>:
10000360:	00 00 04 c2                                         ....

10000364 <SIZE_VIRT_PAGE_BITMAP>:
10000364:	00 80 00 00                                         ....

10000368 <VIRT_RAM_TABLE>:
10000368:	00 06 00 c2                                         ....

1000036c <VIRT_RAM_TABLE_SIZE>:
1000036c:	13 05 00 c2                                         ....

10000370 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10000370:	24 05 00 c2                                         $...

10000374 <SIZE_APP_STACK_USER>:
10000374:	00 00 18 00                                         ....

10000378 <SIZE_APP_STACK_KRNL>:
10000378:	00 00 08 00                                         ....

1000037c <SIZE_APP_STACK_TOTAL>:
1000037c:	00 00 20 00                                         .. .

10000380 <VIRT_APP_DATA>:
10000380:	00 00 00 10                                         ....

10000384 <VIRT_APP_STACK_USER_TOP>:
10000384:	00 00 00 02                                         ....

10000388 <VIRT_APP_STACK_KRNL_TOP>:
10000388:	00 00 e8 01                                         ....

1000038c <VIRT_HEAP_MIN>:
1000038c:	00 00 00 c8                                         ....

10000390 <VIRT_HEAP_MAX>:
10000390:	ff ff ff ef                                         ....

10000394 <VIRT_SBRK_MIN>:
10000394:	00 00 00 f0                                         ....

10000398 <VIRT_SBRK_MAX>:
10000398:	00 00 c0 ff                                         ....

1000039c <VIRT_ALLOCED_VIRT_PAGES>:
1000039c:	00 00 10 c2                                         ....

100003a0 <VIRT_ACPI_DRIVER>:
100003a0:	00 40 48 c2                                         .@H.

100003a4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100003a4:	96 00 00 00                                         ....

100003a8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100003a8:	2c 01 00 00 46 50 55 20 4f 56 45 52 46 4c 4f 57     ,...FPU OVERFLOW
100003b8:	2e 00 46 50 55 20 55 4e 44 45 52 46 4c 4f 57 2e     ..FPU UNDERFLOW.
100003c8:	00 78 38 37 3a 20 25 58 20 25 58 20 25 58 0a 00     .x87: %X %X %X..
100003d8:	76 02 00 10 ab 02 00 10 af 02 00 10 b3 02 00 10     v...............	100003d8: R_386_32	.text
	100003dc: R_386_32	.text
	100003e0: R_386_32	.text
	100003e4: R_386_32	.text
100003e8:	b7 02 00 10 bb 02 00 10 bf 02 00 10                 ............	100003e8: R_386_32	.text
	100003ec: R_386_32	.text
	100003f0: R_386_32	.text
