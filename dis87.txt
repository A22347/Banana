
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuUnorderedCompare(_Float80, _Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	83 ec 44             	sub    esp,0x44
10000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000277:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000027a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000280:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000284:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000287:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
1000028a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
1000028d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000290:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000294:	8d 7d c0             	lea    edi,[ebp-0x40]
10000297:	b9 03 00 00 00       	mov    ecx,0x3
1000029c:	8d 75 08             	lea    esi,[ebp+0x8]
1000029f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002a1:	8d 7d cc             	lea    edi,[ebp-0x34]
100002a4:	8d 75 14             	lea    esi,[ebp+0x14]
100002a7:	b9 03 00 00 00       	mov    ecx,0x3
100002ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ae:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002b1:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002b4:	89 c2                	mov    edx,eax
100002b6:	31 da                	xor    edx,ebx
100002b8:	09 d1                	or     ecx,edx
100002ba:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002be:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002ca:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002d0:	39 d1                	cmp    ecx,edx
100002d2:	75 08                	jne    100002dc <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002d4:	31 d2                	xor    edx,edx
100002d6:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
100002da:	75 1c                	jne    100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002dc:	b2 01                	mov    dl,0x1
100002de:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
100002e2:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
100002e6:	72 10                	jb     100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002e8:	0f 94 c1             	sete   cl
100002eb:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
100002ee:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
100002f1:	19 d8                	sbb    eax,ebx
100002f3:	0f 92 c2             	setb   dl
100002f6:	21 ca                	and    edx,ecx
100002f8:	a0 01 00 00 00       	mov    al,ds:0x1	100002f9: R_386_32	fpuState
100002fd:	83 e0 ba             	and    eax,0xffffffba
10000300:	8d 7d d8             	lea    edi,[ebp-0x28]
10000303:	b9 03 00 00 00       	mov    ecx,0x3
10000308:	8d 75 08             	lea    esi,[ebp+0x8]
1000030b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000030d:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000310:	b9 03 00 00 00       	mov    ecx,0x3
10000315:	8d 75 14             	lea    esi,[ebp+0x14]
10000318:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000031a:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
1000031d:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000323:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000326:	81 e1 ff ff ff 00    	and    ecx,0xffffff
1000032c:	39 cb                	cmp    ebx,ecx
1000032e:	0f 94 c1             	sete   cl
10000331:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000334:	c1 e1 06             	shl    ecx,0x6
10000337:	09 d0                	or     eax,edx
10000339:	09 c8                	or     eax,ecx
1000033b:	a2 01 00 00 00       	mov    ds:0x1,al	1000033c: R_386_32	fpuState
10000340:	83 c4 44             	add    esp,0x44
10000343:	5b                   	pop    ebx
10000344:	5e                   	pop    esi
10000345:	5f                   	pop    edi
10000346:	5d                   	pop    ebp
10000347:	c3                   	ret    

10000348 <fpuNormalise(_Float80)>:
10000348:	55                   	push   ebp
10000349:	89 e5                	mov    ebp,esp
1000034b:	57                   	push   edi
1000034c:	56                   	push   esi
1000034d:	53                   	push   ebx
1000034e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000354:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000357:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000035a:	8d 72 01             	lea    esi,[edx+0x1]
1000035d:	89 df                	mov    edi,ebx
1000035f:	c1 ef 1e             	shr    edi,0x1e
10000362:	74 0e                	je     10000372 <fpuNormalise(_Float80)+0x2a>
10000364:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000368:	d1 eb                	shr    ebx,1
1000036a:	89 f2                	mov    edx,esi
1000036c:	eb ec                	jmp    1000035a <fpuNormalise(_Float80)+0x12>
1000036e:	01 c9                	add    ecx,ecx
10000370:	11 db                	adc    ebx,ebx
10000372:	0f ba e3 1d          	bt     ebx,0x1d
10000376:	72 1d                	jb     10000395 <fpuNormalise(_Float80)+0x4d>
10000378:	4a                   	dec    edx
10000379:	89 de                	mov    esi,ebx
1000037b:	09 ce                	or     esi,ecx
1000037d:	75 ef                	jne    1000036e <fpuNormalise(_Float80)+0x26>
1000037f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000386:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
1000038d:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000393:	eb 0a                	jmp    1000039f <fpuNormalise(_Float80)+0x57>
10000395:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000398:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
1000039b:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000039f:	8d 75 0c             	lea    esi,[ebp+0xc]
100003a2:	b9 03 00 00 00       	mov    ecx,0x3
100003a7:	89 c7                	mov    edi,eax
100003a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ab:	5b                   	pop    ebx
100003ac:	5e                   	pop    esi
100003ad:	5f                   	pop    edi
100003ae:	5d                   	pop    ebp
100003af:	c2 04 00             	ret    0x4

100003b2 <fpuAdd(_Float80, _Float80)>:
100003b2:	55                   	push   ebp
100003b3:	89 e5                	mov    ebp,esp
100003b5:	57                   	push   edi
100003b6:	56                   	push   esi
100003b7:	53                   	push   ebx
100003b8:	83 ec 2c             	sub    esp,0x2c
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003c1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003c4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003ca:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003ce:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003d1:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003d4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100003d7:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100003da:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100003dd:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100003e0:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003e4:	66 39 c8             	cmp    ax,cx
100003e7:	72 2d                	jb     10000416 <fpuAdd(_Float80, _Float80)+0x64>
100003e9:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100003ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100003ef:	19 f8                	sbb    eax,edi
100003f1:	73 09                	jae    100003fc <fpuAdd(_Float80, _Float80)+0x4a>
100003f3:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003f7:	66 39 c8             	cmp    ax,cx
100003fa:	74 24                	je     10000420 <fpuAdd(_Float80, _Float80)+0x6e>
100003fc:	88 d8                	mov    al,bl
100003fe:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000401:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000404:	89 f0                	mov    eax,esi
10000406:	89 fa                	mov    edx,edi
10000408:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000040b:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000040e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000411:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000414:	eb 0a                	jmp    10000420 <fpuAdd(_Float80, _Float80)+0x6e>
10000416:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000041a:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000041e:	89 c1                	mov    ecx,eax
10000420:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000423:	29 c8                	sub    eax,ecx
10000425:	88 c1                	mov    cl,al
10000427:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000042a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000042d:	0f ad d0             	shrd   eax,edx,cl
10000430:	d3 ea                	shr    edx,cl
10000432:	f6 c1 20             	test   cl,0x20
10000435:	74 04                	je     1000043b <fpuAdd(_Float80, _Float80)+0x89>
10000437:	89 d0                	mov    eax,edx
10000439:	31 d2                	xor    edx,edx
1000043b:	89 d1                	mov    ecx,edx
1000043d:	89 c2                	mov    edx,eax
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000447:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000044a:	75 13                	jne    1000045f <fpuAdd(_Float80, _Float80)+0xad>
1000044c:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
1000044f:	89 d0                	mov    eax,edx
10000451:	89 ca                	mov    edx,ecx
10000453:	01 f0                	add    eax,esi
10000455:	11 fa                	adc    edx,edi
10000457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000045a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000045d:	eb 58                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000045f:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000463:	74 24                	je     10000489 <fpuAdd(_Float80, _Float80)+0xd7>
10000465:	39 d6                	cmp    esi,edx
10000467:	89 f8                	mov    eax,edi
10000469:	19 c8                	sbb    eax,ecx
1000046b:	89 d0                	mov    eax,edx
1000046d:	89 ca                	mov    edx,ecx
1000046f:	73 0c                	jae    1000047d <fpuAdd(_Float80, _Float80)+0xcb>
10000471:	29 f0                	sub    eax,esi
10000473:	19 fa                	sbb    edx,edi
10000475:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000478:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000047b:	eb 26                	jmp    100004a3 <fpuAdd(_Float80, _Float80)+0xf1>
1000047d:	29 c6                	sub    esi,eax
1000047f:	19 cf                	sbb    edi,ecx
10000481:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000484:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000487:	eb 2a                	jmp    100004b3 <fpuAdd(_Float80, _Float80)+0x101>
10000489:	84 db                	test   bl,bl
1000048b:	74 2a                	je     100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000048d:	39 f2                	cmp    edx,esi
1000048f:	89 c8                	mov    eax,ecx
10000491:	19 f8                	sbb    eax,edi
10000493:	89 d0                	mov    eax,edx
10000495:	89 ca                	mov    edx,ecx
10000497:	73 10                	jae    100004a9 <fpuAdd(_Float80, _Float80)+0xf7>
10000499:	29 c6                	sub    esi,eax
1000049b:	19 cf                	sbb    edi,ecx
1000049d:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004a0:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004a3:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004a7:	eb 0e                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
100004a9:	29 f0                	sub    eax,esi
100004ab:	19 fa                	sbb    edx,edi
100004ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004b0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004b7:	83 ec 0c             	sub    esp,0xc
100004ba:	8d 75 dc             	lea    esi,[ebp-0x24]
100004bd:	b9 03 00 00 00       	mov    ecx,0x3
100004c2:	89 e7                	mov    edi,esp
100004c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004c9:	e8 fc ff ff ff       	call   100004ca <fpuAdd(_Float80, _Float80)+0x118>	100004ca: R_386_PC32	fpuNormalise(_Float80)
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004d4:	5b                   	pop    ebx
100004d5:	5e                   	pop    esi
100004d6:	5f                   	pop    edi
100004d7:	5d                   	pop    ebp
100004d8:	c2 04 00             	ret    0x4

100004db <fpuAbs(_Float80)>:
100004db:	55                   	push   ebp
100004dc:	89 e5                	mov    ebp,esp
100004de:	57                   	push   edi
100004df:	56                   	push   esi
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100004e7:	8d 75 0c             	lea    esi,[ebp+0xc]
100004ea:	b9 03 00 00 00       	mov    ecx,0x3
100004ef:	89 c7                	mov    edi,eax
100004f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004f3:	5e                   	pop    esi
100004f4:	5f                   	pop    edi
100004f5:	5d                   	pop    ebp
100004f6:	c2 04 00             	ret    0x4

100004f9 <fpuChs(_Float80)>:
100004f9:	55                   	push   ebp
100004fa:	89 e5                	mov    ebp,esp
100004fc:	57                   	push   edi
100004fd:	56                   	push   esi
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000505:	8d 75 0c             	lea    esi,[ebp+0xc]
10000508:	b9 03 00 00 00       	mov    ecx,0x3
1000050d:	89 c7                	mov    edi,eax
1000050f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000511:	5e                   	pop    esi
10000512:	5f                   	pop    edi
10000513:	5d                   	pop    ebp
10000514:	c2 04 00             	ret    0x4

10000517 <fpuSub(_Float80, _Float80)>:
10000517:	55                   	push   ebp
10000518:	89 e5                	mov    ebp,esp
1000051a:	57                   	push   edi
1000051b:	56                   	push   esi
1000051c:	53                   	push   ebx
1000051d:	83 ec 1c             	sub    esp,0x1c
10000520:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000523:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000527:	8d 75 18             	lea    esi,[ebp+0x18]
1000052a:	b9 03 00 00 00       	mov    ecx,0x3
1000052f:	89 e7                	mov    edi,esp
10000531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000533:	83 ec 0c             	sub    esp,0xc
10000536:	8d 75 0c             	lea    esi,[ebp+0xc]
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	89 e7                	mov    edi,esp
10000540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000542:	53                   	push   ebx
10000543:	e8 fc ff ff ff       	call   10000544 <fpuSub(_Float80, _Float80)+0x2d>	10000544: R_386_PC32	fpuAdd(_Float80, _Float80)
10000548:	89 d8                	mov    eax,ebx
1000054a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000054d:	5b                   	pop    ebx
1000054e:	5e                   	pop    esi
1000054f:	5f                   	pop    edi
10000550:	5d                   	pop    ebp
10000551:	c2 04 00             	ret    0x4

10000554 <fpuReverseSub(_Float80, _Float80)>:
10000554:	55                   	push   ebp
10000555:	89 e5                	mov    ebp,esp
10000557:	57                   	push   edi
10000558:	56                   	push   esi
10000559:	53                   	push   ebx
1000055a:	83 ec 1c             	sub    esp,0x1c
1000055d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000560:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000564:	8d 75 0c             	lea    esi,[ebp+0xc]
10000567:	b9 03 00 00 00       	mov    ecx,0x3
1000056c:	89 e7                	mov    edi,esp
1000056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000570:	83 ec 0c             	sub    esp,0xc
10000573:	8d 75 18             	lea    esi,[ebp+0x18]
10000576:	b9 03 00 00 00       	mov    ecx,0x3
1000057b:	89 e7                	mov    edi,esp
1000057d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000057f:	53                   	push   ebx
10000580:	e8 fc ff ff ff       	call   10000581 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000581: R_386_PC32	fpuAdd(_Float80, _Float80)
10000585:	89 d8                	mov    eax,ebx
10000587:	8d 65 f4             	lea    esp,[ebp-0xc]
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	5d                   	pop    ebp
1000058e:	c2 04 00             	ret    0x4

10000591 <fpuMultiply(_Float80, _Float80)>:
10000591:	55                   	push   ebp
10000592:	89 e5                	mov    ebp,esp
10000594:	57                   	push   edi
10000595:	56                   	push   esi
10000596:	53                   	push   ebx
10000597:	83 ec 38             	sub    esp,0x38
1000059a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000059d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a3:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005a7:	c1 ea 1f             	shr    edx,0x1f
100005aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005b0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005b3:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005b6:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005ba:	c1 ef 1f             	shr    edi,0x1f
100005bd:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005c0:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005c3:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005c6:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005c9:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005cc:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005d1:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005d5:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100005d8:	0f af ce             	imul   ecx,esi
100005db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100005de:	0f af d7             	imul   edx,edi
100005e1:	01 d1                	add    ecx,edx
100005e3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100005e6:	f7 e6                	mul    esi
100005e8:	01 ca                	add    edx,ecx
100005ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100005ed:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100005f0:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f3:	b9 03 00 00 00       	mov    ecx,0x3
100005f8:	89 e7                	mov    edi,esp
100005fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fc:	53                   	push   ebx
100005fd:	e8 fc ff ff ff       	call   100005fe <fpuMultiply(_Float80, _Float80)+0x6d>	100005fe: R_386_PC32	fpuNormalise(_Float80)
10000602:	89 d8                	mov    eax,ebx
10000604:	8d 65 f4             	lea    esp,[ebp-0xc]
10000607:	5b                   	pop    ebx
10000608:	5e                   	pop    esi
10000609:	5f                   	pop    edi
1000060a:	5d                   	pop    ebp
1000060b:	c2 04 00             	ret    0x4

1000060e <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000060e:	55                   	push   ebp
1000060f:	89 e5                	mov    ebp,esp
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	53                   	push   ebx
10000614:	83 ec 24             	sub    esp,0x24
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000061d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000620:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000626:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000629:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000062c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000062f:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000636:	83 c8 ff             	or     eax,0xffffffff
10000639:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000640:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000647:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000064e:	31 d2                	xor    edx,edx
10000650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000653:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000656:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000659:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000065c:	83 f8 ff             	cmp    eax,0xffffffff
1000065f:	75 22                	jne    10000683 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000661:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000664:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000667:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000066a:	0f ad f3             	shrd   ebx,esi,cl
1000066d:	d3 ee                	shr    esi,cl
1000066f:	f6 c1 20             	test   cl,0x20
10000672:	74 04                	je     10000678 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000674:	89 f3                	mov    ebx,esi
10000676:	31 f6                	xor    esi,esi
10000678:	89 d9                	mov    ecx,ebx
1000067a:	83 e1 01             	and    ecx,0x1
1000067d:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000680:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000686:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000689:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000068c:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000068f:	72 38                	jb     100006c9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
10000691:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000694:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000697:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
1000069a:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000069d:	83 f8 ff             	cmp    eax,0xffffffff
100006a0:	75 0d                	jne    100006af <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006a2:	81 ca 00 00 00 20    	or     edx,0x20000000
100006a8:	b8 3d 00 00 00       	mov    eax,0x3d
100006ad:	eb 1f                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006af:	88 c1                	mov    cl,al
100006b1:	89 ce                	mov    esi,ecx
100006b3:	c1 ee 05             	shr    esi,0x5
100006b6:	83 e6 01             	and    esi,0x1
100006b9:	89 f3                	mov    ebx,esi
100006bb:	83 f3 01             	xor    ebx,0x1
100006be:	d3 e3                	shl    ebx,cl
100006c0:	d3 e6                	shl    esi,cl
100006c2:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006c5:	09 f2                	or     edx,esi
100006c7:	eb 05                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006c9:	83 f8 ff             	cmp    eax,0xffffffff
100006cc:	74 01                	je     100006cf <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006ce:	48                   	dec    eax
100006cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006d2:	85 c0                	test   eax,eax
100006d4:	0f 85 76 ff ff ff    	jne    10000650 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100006da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100006dd:	83 c4 24             	add    esp,0x24
100006e0:	5b                   	pop    ebx
100006e1:	5e                   	pop    esi
100006e2:	5f                   	pop    edi
100006e3:	5d                   	pop    ebp
100006e4:	c3                   	ret    

100006e5 <fpuDivide(_Float80, _Float80)>:
100006e5:	55                   	push   ebp
100006e6:	89 e5                	mov    ebp,esp
100006e8:	57                   	push   edi
100006e9:	56                   	push   esi
100006ea:	53                   	push   ebx
100006eb:	83 ec 1c             	sub    esp,0x1c
100006ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006f1:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100006f4:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
100006f7:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
100006fa:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100006fd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000700:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000706:	e8 fc ff ff ff       	call   10000707 <fpuDivide(_Float80, _Float80)+0x22>	10000707: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000070b:	59                   	pop    ecx
1000070c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000070f:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000715:	66 05 00 40          	add    ax,0x4000
10000719:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000071c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000720:	8d 75 dc             	lea    esi,[ebp-0x24]
10000723:	b9 03 00 00 00       	mov    ecx,0x3
10000728:	89 e7                	mov    edi,esp
1000072a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000072c:	53                   	push   ebx
1000072d:	e8 fc ff ff ff       	call   1000072e <fpuDivide(_Float80, _Float80)+0x49>	1000072e: R_386_PC32	fpuNormalise(_Float80)
10000732:	89 d8                	mov    eax,ebx
10000734:	8d 65 f4             	lea    esp,[ebp-0xc]
10000737:	5b                   	pop    ebx
10000738:	5e                   	pop    esi
10000739:	5f                   	pop    edi
1000073a:	5d                   	pop    ebp
1000073b:	c2 04 00             	ret    0x4

1000073e <fpuReciprocal(_Float80)>:
1000073e:	55                   	push   ebp
1000073f:	89 e5                	mov    ebp,esp
10000741:	57                   	push   edi
10000742:	56                   	push   esi
10000743:	53                   	push   ebx
10000744:	83 ec 2c             	sub    esp,0x2c
10000747:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000074a:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000074e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000755:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000075c:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000762:	8d 75 0c             	lea    esi,[ebp+0xc]
10000765:	b9 03 00 00 00       	mov    ecx,0x3
1000076a:	89 e7                	mov    edi,esp
1000076c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076e:	83 ec 0c             	sub    esp,0xc
10000771:	8d 75 dc             	lea    esi,[ebp-0x24]
10000774:	b9 03 00 00 00       	mov    ecx,0x3
10000779:	89 e7                	mov    edi,esp
1000077b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000077d:	53                   	push   ebx
1000077e:	e8 fc ff ff ff       	call   1000077f <fpuReciprocal(_Float80)+0x41>	1000077f: R_386_PC32	fpuDivide(_Float80, _Float80)
10000783:	89 d8                	mov    eax,ebx
10000785:	8d 65 f4             	lea    esp,[ebp-0xc]
10000788:	5b                   	pop    ebx
10000789:	5e                   	pop    esi
1000078a:	5f                   	pop    edi
1000078b:	5d                   	pop    ebp
1000078c:	c2 04 00             	ret    0x4

1000078f <fpuSquare(_Float80)>:
1000078f:	55                   	push   ebp
10000790:	89 e5                	mov    ebp,esp
10000792:	57                   	push   edi
10000793:	56                   	push   esi
10000794:	53                   	push   ebx
10000795:	83 ec 1c             	sub    esp,0x1c
10000798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000079b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000079e:	b9 03 00 00 00       	mov    ecx,0x3
100007a3:	89 e7                	mov    edi,esp
100007a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a7:	83 ec 0c             	sub    esp,0xc
100007aa:	8d 75 0c             	lea    esi,[ebp+0xc]
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	53                   	push   ebx
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSquare(_Float80)+0x29>	100007b8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007bc:	89 d8                	mov    eax,ebx
100007be:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c1:	5b                   	pop    ebx
100007c2:	5e                   	pop    esi
100007c3:	5f                   	pop    edi
100007c4:	5d                   	pop    ebp
100007c5:	c2 04 00             	ret    0x4

100007c8 <fpuInverseSqrt(_Float80)>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	57                   	push   edi
100007cc:	56                   	push   esi
100007cd:	53                   	push   ebx
100007ce:	83 ec 5c             	sub    esp,0x5c
100007d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007d4:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100007d8:	31 d2                	xor    edx,edx
100007da:	b9 03 00 00 00       	mov    ecx,0x3
100007df:	31 db                	xor    ebx,ebx
100007e1:	01 c9                	add    ecx,ecx
100007e3:	11 db                	adc    ebx,ebx
100007e5:	42                   	inc    edx
100007e6:	83 fa 3c             	cmp    edx,0x3c
100007e9:	75 f6                	jne    100007e1 <fpuInverseSqrt(_Float80)+0x19>
100007eb:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100007ee:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
100007f1:	8d 75 0c             	lea    esi,[ebp+0xc]
100007f4:	b9 03 00 00 00       	mov    ecx,0x3
100007f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007fe:	0f b7 d0             	movzx  edx,ax
10000801:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000807:	d1 fa                	sar    edx,1
10000809:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000080e:	29 d1                	sub    ecx,edx
10000810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000813:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000817:	48                   	dec    eax
10000818:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000081c:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000823:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000826:	83 ec 0c             	sub    esp,0xc
10000829:	b9 03 00 00 00       	mov    ecx,0x3
1000082e:	89 e7                	mov    edi,esp
10000830:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000835:	53                   	push   ebx
10000836:	e8 fc ff ff ff       	call   10000837 <fpuInverseSqrt(_Float80)+0x6f>	10000837: R_386_PC32	fpuSquare(_Float80)
1000083b:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
1000083f:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000843:	8d 45 d0             	lea    eax,[ebp-0x30]
10000846:	83 ec 14             	sub    esp,0x14
10000849:	8d 75 0c             	lea    esi,[ebp+0xc]
1000084c:	b9 03 00 00 00       	mov    ecx,0x3
10000851:	89 e7                	mov    edi,esp
10000853:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 de                	mov    esi,ebx
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	50                   	push   eax
10000864:	e8 fc ff ff ff       	call   10000865 <fpuInverseSqrt(_Float80)+0x9d>	10000865: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000869:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
1000086f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000872:	83 c4 1c             	add    esp,0x1c
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000087f:	89 c6                	mov    esi,eax
10000881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000883:	83 ec 0c             	sub    esp,0xc
10000886:	8d 75 b8             	lea    esi,[ebp-0x48]
10000889:	b9 03 00 00 00       	mov    ecx,0x3
1000088e:	89 e7                	mov    edi,esp
10000890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000892:	52                   	push   edx
10000893:	e8 fc ff ff ff       	call   10000894 <fpuInverseSqrt(_Float80)+0xcc>	10000894: R_386_PC32	fpuSub(_Float80, _Float80)
10000898:	8d 5d a8             	lea    ebx,[ebp-0x58]
1000089b:	50                   	push   eax
1000089c:	b9 03 00 00 00       	mov    ecx,0x3
100008a1:	89 e7                	mov    edi,esp
100008a3:	8d 55 dc             	lea    edx,[ebp-0x24]
100008a6:	89 d6                	mov    esi,edx
100008a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008aa:	83 ec 0c             	sub    esp,0xc
100008ad:	b9 03 00 00 00       	mov    ecx,0x3
100008b2:	89 e7                	mov    edi,esp
100008b4:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b9:	53                   	push   ebx
100008ba:	e8 fc ff ff ff       	call   100008bb <fpuInverseSqrt(_Float80)+0xf3>	100008bb: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008c7:	89 de                	mov    esi,ebx
100008c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008cb:	83 c4 2c             	add    esp,0x2c
100008ce:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008d1:	0f 85 4c ff ff ff    	jne    10000823 <fpuInverseSqrt(_Float80)+0x5b>
100008d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008da:	8d 65 f4             	lea    esp,[ebp-0xc]
100008dd:	5b                   	pop    ebx
100008de:	5e                   	pop    esi
100008df:	5f                   	pop    edi
100008e0:	5d                   	pop    ebp
100008e1:	c2 04 00             	ret    0x4

100008e4 <fpuSqrt(_Float80)>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	57                   	push   edi
100008e8:	56                   	push   esi
100008e9:	53                   	push   ebx
100008ea:	83 ec 38             	sub    esp,0x38
100008ed:	8d 5d d0             	lea    ebx,[ebp-0x30]
100008f0:	8d 75 0c             	lea    esi,[ebp+0xc]
100008f3:	b9 03 00 00 00       	mov    ecx,0x3
100008f8:	89 e7                	mov    edi,esp
100008fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <fpuSqrt(_Float80)+0x1a>	100008fe: R_386_PC32	fpuInverseSqrt(_Float80)
10000902:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000906:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000090d:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000914:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000091a:	83 ec 14             	sub    esp,0x14
1000091d:	b9 03 00 00 00       	mov    ecx,0x3
10000922:	89 e7                	mov    edi,esp
10000924:	89 de                	mov    esi,ebx
10000926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000928:	83 ec 0c             	sub    esp,0xc
1000092b:	8d 75 dc             	lea    esi,[ebp-0x24]
1000092e:	b9 03 00 00 00       	mov    ecx,0x3
10000933:	89 e7                	mov    edi,esp
10000935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093a:	e8 fc ff ff ff       	call   1000093b <fpuSqrt(_Float80)+0x57>	1000093b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8d 65 f4             	lea    esp,[ebp-0xc]
10000945:	5b                   	pop    ebx
10000946:	5e                   	pop    esi
10000947:	5f                   	pop    edi
10000948:	5d                   	pop    ebp
10000949:	c2 04 00             	ret    0x4

1000094c <fpuGetReg(int)>:
1000094c:	55                   	push   ebp
1000094d:	89 e5                	mov    ebp,esp
1000094f:	57                   	push   edi
10000950:	56                   	push   esi
10000951:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000954:	83 fe 07             	cmp    esi,0x7
10000957:	76 10                	jbe    10000969 <fpuGetReg(int)+0x1d>
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	68 ec 22 00 10       	push   0x100022ec	1000095d: R_386_32	.text
10000961:	e8 fc ff ff ff       	call   10000962 <fpuGetReg(int)+0x16>	10000962: R_386_PC32	Krnl::panic(char const*)
10000966:	83 c4 10             	add    esp,0x10
10000969:	a0 01 00 00 00       	mov    al,ds:0x1	1000096a: R_386_32	fpuState
1000096e:	c0 e8 03             	shr    al,0x3
10000971:	83 e0 07             	and    eax,0x7
10000974:	01 f0                	add    eax,esi
10000976:	b9 08 00 00 00       	mov    ecx,0x8
1000097b:	99                   	cdq    
1000097c:	f7 f9                	idiv   ecx
1000097e:	6b c2 0c             	imul   eax,edx,0xc
10000981:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000983: R_386_32	fpuState
10000987:	b9 03 00 00 00       	mov    ecx,0x3
1000098c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000098f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8d 65 f8             	lea    esp,[ebp-0x8]
10000997:	5e                   	pop    esi
10000998:	5f                   	pop    edi
10000999:	5d                   	pop    ebp
1000099a:	c2 04 00             	ret    0x4

1000099d <fpuSetReg(int, _Float80)>:
1000099d:	55                   	push   ebp
1000099e:	89 e5                	mov    ebp,esp
100009a0:	57                   	push   edi
100009a1:	56                   	push   esi
100009a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009a5:	83 ff 07             	cmp    edi,0x7
100009a8:	76 10                	jbe    100009ba <fpuSetReg(int, _Float80)+0x1d>
100009aa:	83 ec 0c             	sub    esp,0xc
100009ad:	68 ec 22 00 10       	push   0x100022ec	100009ae: R_386_32	.text
100009b2:	e8 fc ff ff ff       	call   100009b3 <fpuSetReg(int, _Float80)+0x16>	100009b3: R_386_PC32	Krnl::panic(char const*)
100009b7:	83 c4 10             	add    esp,0x10
100009ba:	a0 01 00 00 00       	mov    al,ds:0x1	100009bb: R_386_32	fpuState
100009bf:	c0 e8 03             	shr    al,0x3
100009c2:	83 e0 07             	and    eax,0x7
100009c5:	01 f8                	add    eax,edi
100009c7:	b9 08 00 00 00       	mov    ecx,0x8
100009cc:	99                   	cdq    
100009cd:	f7 f9                	idiv   ecx
100009cf:	6b c2 0c             	imul   eax,edx,0xc
100009d2:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009d4: R_386_32	fpuState
100009d8:	8d 75 0c             	lea    esi,[ebp+0xc]
100009db:	b9 03 00 00 00       	mov    ecx,0x3
100009e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009e2:	8d 65 f8             	lea    esp,[ebp-0x8]
100009e5:	5e                   	pop    esi
100009e6:	5f                   	pop    edi
100009e7:	5d                   	pop    ebp
100009e8:	c3                   	ret    

100009e9 <fpuInternalTo32(_Float80)>:
100009e9:	55                   	push   ebp
100009ea:	89 e5                	mov    ebp,esp
100009ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100009ef:	66 81 f9 7e 40       	cmp    cx,0x407e
100009f4:	76 0c                	jbe    10000a02 <fpuInternalTo32(_Float80)+0x19>
100009f6:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f8: R_386_32	fpuState
100009fd:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a02:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a06:	19 d2                	sbb    edx,edx
10000a08:	f7 d2                	not    edx
10000a0a:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a13:	c1 e8 06             	shr    eax,0x6
10000a16:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a1b:	c1 e1 17             	shl    ecx,0x17
10000a1e:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a24:	09 c8                	or     eax,ecx
10000a26:	09 d0                	or     eax,edx
10000a28:	5d                   	pop    ebp
10000a29:	c3                   	ret    

10000a2a <fpuInternalTo64(_Float80)>:
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	57                   	push   edi
10000a2e:	56                   	push   esi
10000a2f:	53                   	push   ebx
10000a30:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a33:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a38:	76 0c                	jbe    10000a46 <fpuInternalTo64(_Float80)+0x1c>
10000a3a:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a3c: R_386_32	fpuState
10000a41:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a46:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a4a:	19 c9                	sbb    ecx,ecx
10000a4c:	f7 d1                	not    ecx
10000a4e:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a5a:	0f ac d0 09          	shrd   eax,edx,0x9
10000a5e:	c1 ea 09             	shr    edx,0x9
10000a61:	89 c6                	mov    esi,eax
10000a63:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a69:	c1 e3 14             	shl    ebx,0x14
10000a6c:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a72:	09 da                	or     edx,ebx
10000a74:	09 ca                	or     edx,ecx
10000a76:	89 f0                	mov    eax,esi
10000a78:	5b                   	pop    ebx
10000a79:	5e                   	pop    esi
10000a7a:	5f                   	pop    edi
10000a7b:	5d                   	pop    ebp
10000a7c:	c3                   	ret    

10000a7d <fpu32ToInternal(unsigned int)>:
10000a7d:	55                   	push   ebp
10000a7e:	89 e5                	mov    ebp,esp
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a86:	89 d1                	mov    ecx,edx
10000a88:	c1 e9 1f             	shr    ecx,0x1f
10000a8b:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000a8e:	89 d1                	mov    ecx,edx
10000a90:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000a96:	c1 e1 06             	shl    ecx,0x6
10000a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a9f:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000aa5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000aa8:	c1 ea 17             	shr    edx,0x17
10000aab:	0f b6 d2             	movzx  edx,dl
10000aae:	66 81 c2 81 3f       	add    dx,0x3f81
10000ab3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ab7:	5d                   	pop    ebp
10000ab8:	c2 04 00             	ret    0x4

10000abb <fpu64ToInternal(unsigned long long)>:
10000abb:	55                   	push   ebp
10000abc:	89 e5                	mov    ebp,esp
10000abe:	57                   	push   edi
10000abf:	56                   	push   esi
10000ac0:	53                   	push   ebx
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000aca:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000acd:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000ad0:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000ad3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ad6:	c1 ea 1f             	shr    edx,0x1f
10000ad9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000adc:	89 f7                	mov    edi,esi
10000ade:	89 de                	mov    esi,ebx
10000ae0:	0f a4 f7 09          	shld   edi,esi,0x9
10000ae4:	c1 e6 09             	shl    esi,0x9
10000ae7:	89 f1                	mov    ecx,esi
10000ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000aef:	89 fa                	mov    edx,edi
10000af1:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000af7:	89 08                	mov    DWORD PTR [eax],ecx
10000af9:	81 ca 00 00 00 20    	or     edx,0x20000000
10000aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b05:	c1 ea 14             	shr    edx,0x14
10000b08:	66 81 e2 ff 07       	and    dx,0x7ff
10000b0d:	66 81 c2 01 3c       	add    dx,0x3c01
10000b12:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b16:	83 c4 0c             	add    esp,0xc
10000b19:	5b                   	pop    ebx
10000b1a:	5e                   	pop    esi
10000b1b:	5f                   	pop    edi
10000b1c:	5d                   	pop    ebp
10000b1d:	c2 04 00             	ret    0x4

10000b20 <fpuPush(_Float80)>:
10000b20:	55                   	push   ebp
10000b21:	89 e5                	mov    ebp,esp
10000b23:	57                   	push   edi
10000b24:	56                   	push   esi
10000b25:	a0 01 00 00 00       	mov    al,ds:0x1	10000b26: R_386_32	fpuState
10000b2a:	88 c1                	mov    cl,al
10000b2c:	c0 e9 03             	shr    cl,0x3
10000b2f:	89 cf                	mov    edi,ecx
10000b31:	83 e7 07             	and    edi,0x7
10000b34:	83 c7 07             	add    edi,0x7
10000b37:	89 fa                	mov    edx,edi
10000b39:	83 e2 07             	and    edx,0x7
10000b3c:	c1 e2 03             	shl    edx,0x3
10000b3f:	83 e0 c7             	and    eax,0xffffffc7
10000b42:	09 d0                	or     eax,edx
10000b44:	a2 01 00 00 00       	mov    ds:0x1,al	10000b45: R_386_32	fpuState
10000b49:	83 e7 07             	and    edi,0x7
10000b4c:	6b ff 0c             	imul   edi,edi,0xc
10000b4f:	81 c7 04 00 00 00    	add    edi,0x4	10000b51: R_386_32	fpuState
10000b55:	b9 03 00 00 00       	mov    ecx,0x3
10000b5a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b5f:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b60: R_386_32	fpuState
10000b64:	83 f8 08             	cmp    eax,0x8
10000b67:	75 09                	jne    10000b72 <fpuPush(_Float80)+0x52>
10000b69:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b6b: R_386_32	fpuState
10000b70:	eb 06                	jmp    10000b78 <fpuPush(_Float80)+0x58>
10000b72:	40                   	inc    eax
10000b73:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b74: R_386_32	fpuState
10000b78:	5e                   	pop    esi
10000b79:	5f                   	pop    edi
10000b7a:	5d                   	pop    ebp
10000b7b:	c3                   	ret    

10000b7c <fpuPop()>:
10000b7c:	55                   	push   ebp
10000b7d:	89 e5                	mov    ebp,esp
10000b7f:	57                   	push   edi
10000b80:	56                   	push   esi
10000b81:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000b83: R_386_32	fpuState
10000b87:	88 d0                	mov    al,dl
10000b89:	c0 e8 03             	shr    al,0x3
10000b8c:	83 e0 07             	and    eax,0x7
10000b8f:	6b f0 0c             	imul   esi,eax,0xc
10000b92:	81 c6 04 00 00 00    	add    esi,0x4	10000b94: R_386_32	fpuState
10000b98:	b9 03 00 00 00       	mov    ecx,0x3
10000b9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba2:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000ba9:	83 e0 38             	and    eax,0x38
10000bac:	83 e2 c7             	and    edx,0xffffffc7
10000baf:	09 c2                	or     edx,eax
10000bb1:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bb3: R_386_32	fpuState
10000bb7:	a1 64 00 00 00       	mov    eax,ds:0x64	10000bb8: R_386_32	fpuState
10000bbc:	85 c0                	test   eax,eax
10000bbe:	74 08                	je     10000bc8 <fpuPop()+0x4c>
10000bc0:	48                   	dec    eax
10000bc1:	a3 64 00 00 00       	mov    ds:0x64,eax	10000bc2: R_386_32	fpuState
10000bc6:	eb 07                	jmp    10000bcf <fpuPop()+0x53>
10000bc8:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bca: R_386_32	fpuState
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	5e                   	pop    esi
10000bd3:	5f                   	pop    edi
10000bd4:	5d                   	pop    ebp
10000bd5:	c2 04 00             	ret    0x4

10000bd8 <x87Handler(regs*)>:
10000bd8:	55                   	push   ebp
10000bd9:	89 e5                	mov    ebp,esp
10000bdb:	57                   	push   edi
10000bdc:	56                   	push   esi
10000bdd:	53                   	push   ebx
10000bde:	81 ec 2c 06 00 00    	sub    esp,0x62c
10000be4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000be7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bea:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
10000bf0:	c6 85 e2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61e],0x0
10000bf7:	c7 85 e4 f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x2
10000c01:	8d 85 e3 f9 ff ff    	lea    eax,[ebp-0x61d]
10000c07:	50                   	push   eax
10000c08:	8d 85 e2 f9 ff ff    	lea    eax,[ebp-0x61e]
10000c0e:	50                   	push   eax
10000c0f:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10000c15:	50                   	push   eax
10000c16:	53                   	push   ebx
10000c17:	e8 fc ff ff ff       	call   10000c18 <x87Handler(regs*)+0x40>	10000c18: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c1c:	89 85 d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],eax
10000c22:	58                   	pop    eax
10000c23:	5a                   	pop    edx
10000c24:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
10000c27:	68 ff 22 00 10       	push   0x100022ff	10000c28: R_386_32	.text
10000c2c:	e8 fc ff ff ff       	call   10000c2d <x87Handler(regs*)+0x55>	10000c2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c31:	59                   	pop    ecx
10000c32:	5e                   	pop    esi
10000c33:	ff b5 d4 f9 ff ff    	push   DWORD PTR [ebp-0x62c]
10000c39:	68 0e 23 00 10       	push   0x1000230e	10000c3a: R_386_32	.text
10000c3e:	e8 fc ff ff ff       	call   10000c3f <x87Handler(regs*)+0x67>	10000c3f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c43:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c49:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000c4d:	89 04 24             	mov    DWORD PTR [esp],eax
10000c50:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c56:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000c5a:	50                   	push   eax
10000c5b:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c61:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c65:	50                   	push   eax
10000c66:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000c6f:	50                   	push   eax
10000c70:	68 3c 23 00 10       	push   0x1000233c	10000c71: R_386_32	.text
10000c75:	e8 fc ff ff ff       	call   10000c76 <x87Handler(regs*)+0x9e>	10000c76: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c7a:	83 c4 18             	add    esp,0x18
10000c7d:	ff b5 d0 f9 ff ff    	push   DWORD PTR [ebp-0x630]
10000c83:	68 4e 23 00 10       	push   0x1000234e	10000c84: R_386_32	.text
10000c88:	e8 fc ff ff ff       	call   10000c89 <x87Handler(regs*)+0xb1>	10000c89: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c8d:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c93:	8a 10                	mov    dl,BYTE PTR [eax]
10000c95:	83 c4 10             	add    esp,0x10
10000c98:	80 fa d9             	cmp    dl,0xd9
10000c9b:	0f 85 b6 03 00 00    	jne    10001057 <x87Handler(regs*)+0x47f>
10000ca1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000ca5:	8d 50 20             	lea    edx,[eax+0x20]
10000ca8:	80 fa 0e             	cmp    dl,0xe
10000cab:	0f 87 fa 01 00 00    	ja     10000eab <x87Handler(regs*)+0x2d3>
10000cb1:	0f b6 d2             	movzx  edx,dl
10000cb4:	ff 24 95 68 23 00 10 	jmp    DWORD PTR [edx*4+0x10002368]	10000cb7: R_386_32	.text
10000cbb:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000cc1:	57                   	push   edi
10000cc2:	57                   	push   edi
10000cc3:	6a 00                	push   0x0
10000cc5:	56                   	push   esi
10000cc6:	e8 fc ff ff ff       	call   10000cc7 <x87Handler(regs*)+0xef>	10000cc7: R_386_PC32	fpuGetReg(int)
10000ccb:	8d 95 f4 f9 ff ff    	lea    edx,[ebp-0x60c]
10000cd1:	b9 03 00 00 00       	mov    ecx,0x3
10000cd6:	89 e7                	mov    edi,esp
10000cd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cda:	52                   	push   edx
10000cdb:	e8 fc ff ff ff       	call   10000cdc <x87Handler(regs*)+0x104>	10000cdc: R_386_PC32	fpuChs(_Float80)
10000ce0:	b9 03 00 00 00       	mov    ecx,0x3
10000ce5:	89 e7                	mov    edi,esp
10000ce7:	89 d6                	mov    esi,edx
10000ce9:	eb 49                	jmp    10000d34 <x87Handler(regs*)+0x15c>
10000ceb:	8d 85 00 fa ff ff    	lea    eax,[ebp-0x600]
10000cf1:	51                   	push   ecx
10000cf2:	51                   	push   ecx
10000cf3:	6a 00                	push   0x0
10000cf5:	50                   	push   eax
10000cf6:	e8 fc ff ff ff       	call   10000cf7 <x87Handler(regs*)+0x11f>	10000cf7: R_386_PC32	fpuGetReg(int)
10000cfb:	8b 85 00 fa ff ff    	mov    eax,DWORD PTR [ebp-0x600]
10000d01:	8b 95 04 fa ff ff    	mov    edx,DWORD PTR [ebp-0x5fc]
10000d07:	89 85 0c fa ff ff    	mov    DWORD PTR [ebp-0x5f4],eax
10000d0d:	89 95 10 fa ff ff    	mov    DWORD PTR [ebp-0x5f0],edx
10000d13:	8b 85 08 fa ff ff    	mov    eax,DWORD PTR [ebp-0x5f8]
10000d19:	66 89 85 14 fa ff ff 	mov    WORD PTR [ebp-0x5ec],ax
10000d20:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000d27:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000d2d:	b9 03 00 00 00       	mov    ecx,0x3
10000d32:	89 e7                	mov    edi,esp
10000d34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d36:	6a 00                	push   0x0
10000d38:	e8 fc ff ff ff       	call   10000d39 <x87Handler(regs*)+0x161>	10000d39: R_386_PC32	fpuSetReg(int, _Float80)
10000d3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000d41:	83 c4 10             	add    esp,0x10
10000d44:	b0 01                	mov    al,0x1
10000d46:	e9 83 15 00 00       	jmp    100022ce <x87Handler(regs*)+0x16f6>
10000d4b:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000d52:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000d5c:	c7 85 1c fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x5e4],0x20000000
10000d66:	66 c7 85 20 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5e0],0x4000
10000d6f:	83 ec 10             	sub    esp,0x10
10000d72:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000d78:	eb 2d                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000d7a:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000d81:	c7 85 24 fa ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x5dc],0xf346e2be
10000d8b:	c7 85 28 fa ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x5d8],0x35269e12
10000d95:	66 c7 85 2c fa ff ff 01 40 	mov    WORD PTR [ebp-0x5d4],0x4001
10000d9e:	83 ec 10             	sub    esp,0x10
10000da1:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000da7:	b9 03 00 00 00       	mov    ecx,0x3
10000dac:	89 e7                	mov    edi,esp
10000dae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000db0:	e8 fc ff ff ff       	call   10000db1 <x87Handler(regs*)+0x1d9>	10000db1: R_386_PC32	fpuPush(_Float80)
10000db5:	eb 86                	jmp    10000d3d <x87Handler(regs*)+0x165>
10000db7:	c6 85 3a fa ff ff 00 	mov    BYTE PTR [ebp-0x5c6],0x0
10000dbe:	c7 85 30 fa ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x5d0],0x5705fc1c
10000dc8:	c7 85 34 fa ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5cc],0x2e2a8eca
10000dd2:	66 c7 85 38 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5c8],0x4000
10000ddb:	83 ec 10             	sub    esp,0x10
10000dde:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10000de4:	eb c1                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000de6:	c6 85 46 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ba],0x0
10000ded:	c7 85 3c fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x5c4],0x885a308c
10000df7:	c7 85 40 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5c0],0x3243f6a8
10000e01:	66 c7 85 44 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5bc],0x4001
10000e0a:	83 ec 10             	sub    esp,0x10
10000e0d:	8d b5 3c fa ff ff    	lea    esi,[ebp-0x5c4]
10000e13:	eb 92                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e15:	c6 85 52 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ae],0x0
10000e1c:	c7 85 48 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5b8],0x3ef3fde6
10000e26:	c7 85 4c fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5b4],0x268826a1
10000e30:	66 c7 85 50 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5b0],0x3ffe
10000e39:	83 ec 10             	sub    esp,0x10
10000e3c:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
10000e42:	e9 60 ff ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e47:	c6 85 5e fa ff ff 00 	mov    BYTE PTR [ebp-0x5a2],0x0
10000e4e:	c7 85 54 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5ac],0xf473de68
10000e58:	c7 85 58 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5a8],0x2c5c85fd
10000e62:	66 c7 85 5c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5a4],0x3fff
10000e6b:	83 ec 10             	sub    esp,0x10
10000e6e:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
10000e74:	e9 2e ff ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e79:	c6 85 6a fa ff ff 00 	mov    BYTE PTR [ebp-0x596],0x0
10000e80:	c7 85 60 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5a0],0x0
10000e8a:	c7 85 64 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x59c],0x0
10000e94:	66 c7 85 68 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x598],0x3fff
10000e9d:	83 ec 10             	sub    esp,0x10
10000ea0:	8d b5 60 fa ff ff    	lea    esi,[ebp-0x5a0]
10000ea6:	e9 fc fe ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000eab:	8d 50 40             	lea    edx,[eax+0x40]
10000eae:	80 fa 07             	cmp    dl,0x7
10000eb1:	77 27                	ja     10000eda <x87Handler(regs*)+0x302>
10000eb3:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
10000eb9:	57                   	push   edi
10000eba:	57                   	push   edi
10000ebb:	2d c0 00 00 00       	sub    eax,0xc0
10000ec0:	50                   	push   eax
10000ec1:	56                   	push   esi
10000ec2:	e8 fc ff ff ff       	call   10000ec3 <x87Handler(regs*)+0x2eb>	10000ec3: R_386_PC32	fpuGetReg(int)
10000ec7:	83 ec 14             	sub    esp,0x14
10000eca:	b9 03 00 00 00       	mov    ecx,0x3
10000ecf:	89 e7                	mov    edi,esp
10000ed1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ed3:	e8 fc ff ff ff       	call   10000ed4 <x87Handler(regs*)+0x2fc>	10000ed4: R_386_PC32	fpuPush(_Float80)
10000ed8:	eb 63                	jmp    10000f3d <x87Handler(regs*)+0x365>
10000eda:	8d 50 38             	lea    edx,[eax+0x38]
10000edd:	80 fa 07             	cmp    dl,0x7
10000ee0:	77 64                	ja     10000f46 <x87Handler(regs*)+0x36e>
10000ee2:	8d 55 dc             	lea    edx,[ebp-0x24]
10000ee5:	56                   	push   esi
10000ee6:	56                   	push   esi
10000ee7:	2d c8 00 00 00       	sub    eax,0xc8
10000eec:	50                   	push   eax
10000eed:	52                   	push   edx
10000eee:	e8 fc ff ff ff       	call   10000eef <x87Handler(regs*)+0x317>	10000eef: R_386_PC32	fpuGetReg(int)
10000ef3:	8d b5 80 fb ff ff    	lea    esi,[ebp-0x480]
10000ef9:	83 ec 0c             	sub    esp,0xc
10000efc:	6a 00                	push   0x0
10000efe:	56                   	push   esi
10000eff:	e8 fc ff ff ff       	call   10000f00 <x87Handler(regs*)+0x328>	10000f00: R_386_PC32	fpuGetReg(int)
10000f04:	83 c4 10             	add    esp,0x10
10000f07:	b9 03 00 00 00       	mov    ecx,0x3
10000f0c:	89 e7                	mov    edi,esp
10000f0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f10:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000f16:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000f1a:	2d c8 00 00 00       	sub    eax,0xc8
10000f1f:	50                   	push   eax
10000f20:	e8 fc ff ff ff       	call   10000f21 <x87Handler(regs*)+0x349>	10000f21: R_386_PC32	fpuSetReg(int, _Float80)
10000f25:	83 ec 0c             	sub    esp,0xc
10000f28:	b9 03 00 00 00       	mov    ecx,0x3
10000f2d:	89 e7                	mov    edi,esp
10000f2f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000f32:	89 d6                	mov    esi,edx
10000f34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f36:	6a 00                	push   0x0
10000f38:	e8 fc ff ff ff       	call   10000f39 <x87Handler(regs*)+0x361>	10000f39: R_386_PC32	fpuSetReg(int, _Float80)
10000f3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f41:	e9 c6 00 00 00       	jmp    1000100c <x87Handler(regs*)+0x434>
10000f46:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10000f4c:	84 d2                	test   dl,dl
10000f4e:	75 1b                	jne    10000f6b <x87Handler(regs*)+0x393>
10000f50:	8d b5 20 fe ff ff    	lea    esi,[ebp-0x1e0]
10000f56:	50                   	push   eax
10000f57:	50                   	push   eax
10000f58:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10000f5e:	ff 30                	push   DWORD PTR [eax]
10000f60:	56                   	push   esi
10000f61:	e8 fc ff ff ff       	call   10000f62 <x87Handler(regs*)+0x38a>	10000f62: R_386_PC32	fpu32ToInternal(unsigned int)
10000f66:	e9 87 00 00 00       	jmp    10000ff2 <x87Handler(regs*)+0x41a>
10000f6b:	80 fa 03             	cmp    dl,0x3
10000f6e:	75 2a                	jne    10000f9a <x87Handler(regs*)+0x3c2>
10000f70:	8d b5 2c fe ff ff    	lea    esi,[ebp-0x1d4]
10000f76:	83 ec 0c             	sub    esp,0xc
10000f79:	56                   	push   esi
10000f7a:	e8 fc ff ff ff       	call   10000f7b <x87Handler(regs*)+0x3a3>	10000f7b: R_386_PC32	fpuPop()
10000f7f:	83 ec 14             	sub    esp,0x14
10000f82:	b9 03 00 00 00       	mov    ecx,0x3
10000f87:	89 e7                	mov    edi,esp
10000f89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f8b:	e8 fc ff ff ff       	call   10000f8c <x87Handler(regs*)+0x3b4>	10000f8c: R_386_PC32	fpuInternalTo32(_Float80)
10000f90:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10000f96:	89 01                	mov    DWORD PTR [ecx],eax
10000f98:	eb 69                	jmp    10001003 <x87Handler(regs*)+0x42b>
10000f9a:	80 fa 05             	cmp    dl,0x5
10000f9d:	75 14                	jne    10000fb3 <x87Handler(regs*)+0x3db>
10000f9f:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10000fa5:	66 8b 00             	mov    ax,WORD PTR [eax]
10000fa8:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000faa: R_386_32	fpuState
10000fae:	e9 96 00 00 00       	jmp    10001049 <x87Handler(regs*)+0x471>
10000fb3:	31 c0                	xor    eax,eax
10000fb5:	80 fa 07             	cmp    dl,0x7
10000fb8:	0f 85 10 13 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10000fbe:	66 a1 02 00 00 00    	mov    ax,ds:0x2	10000fc0: R_386_32	fpuState
10000fc4:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10000fca:	66 89 07             	mov    WORD PTR [edi],ax
10000fcd:	eb 7a                	jmp    10001049 <x87Handler(regs*)+0x471>
10000fcf:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10000fd5:	84 d2                	test   dl,dl
10000fd7:	0f 85 2a 12 00 00    	jne    10002207 <x87Handler(regs*)+0x162f>
10000fdd:	8d 75 ac             	lea    esi,[ebp-0x54]
10000fe0:	51                   	push   ecx
10000fe1:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10000fe7:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000fea:	ff 30                	push   DWORD PTR [eax]
10000fec:	56                   	push   esi
10000fed:	e8 fc ff ff ff       	call   10000fee <x87Handler(regs*)+0x416>	10000fee: R_386_PC32	fpu64ToInternal(unsigned long long)
10000ff2:	83 ec 14             	sub    esp,0x14
10000ff5:	b9 03 00 00 00       	mov    ecx,0x3
10000ffa:	89 e7                	mov    edi,esp
10000ffc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ffe:	e8 fc ff ff ff       	call   10000fff <x87Handler(regs*)+0x427>	10000fff: R_386_PC32	fpuPush(_Float80)
10001003:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001009:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000100c:	83 c4 20             	add    esp,0x20
1000100f:	e9 30 fd ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001014:	80 fa 02             	cmp    dl,0x2
10001017:	0f 85 40 0e 00 00    	jne    10001e5d <x87Handler(regs*)+0x1285>
1000101d:	8d b5 8c fe ff ff    	lea    esi,[ebp-0x174]
10001023:	50                   	push   eax
10001024:	50                   	push   eax
10001025:	6a 00                	push   0x0
10001027:	56                   	push   esi
10001028:	e8 fc ff ff ff       	call   10001029 <x87Handler(regs*)+0x451>	10001029: R_386_PC32	fpuGetReg(int)
1000102d:	83 ec 14             	sub    esp,0x14
10001030:	b9 03 00 00 00       	mov    ecx,0x3
10001035:	89 e7                	mov    edi,esp
10001037:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001039:	e8 fc ff ff ff       	call   1000103a <x87Handler(regs*)+0x462>	1000103a: R_386_PC32	fpuFloatToLong(_Float80)
1000103e:	83 c4 20             	add    esp,0x20
10001041:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
10001047:	89 02                	mov    DWORD PTR [edx],eax
10001049:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000104f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001052:	e9 ed fc ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001057:	80 fa d8             	cmp    dl,0xd8
1000105a:	0f 85 56 03 00 00    	jne    100013b6 <x87Handler(regs*)+0x7de>
10001060:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001066:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000106a:	8d 50 40             	lea    edx,[eax+0x40]
1000106d:	80 fa 07             	cmp    dl,0x7
10001070:	77 64                	ja     100010d6 <x87Handler(regs*)+0x4fe>
10001072:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
10001078:	57                   	push   edi
10001079:	57                   	push   edi
1000107a:	2d c0 00 00 00       	sub    eax,0xc0
1000107f:	50                   	push   eax
10001080:	56                   	push   esi
10001081:	e8 fc ff ff ff       	call   10001082 <x87Handler(regs*)+0x4aa>	10001082: R_386_PC32	fpuGetReg(int)
10001086:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	6a 00                	push   0x0
10001091:	52                   	push   edx
10001092:	e8 fc ff ff ff       	call   10001093 <x87Handler(regs*)+0x4bb>	10001093: R_386_PC32	fpuGetReg(int)
10001097:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
1000109d:	52                   	push   edx
1000109e:	b9 03 00 00 00       	mov    ecx,0x3
100010a3:	89 e7                	mov    edi,esp
100010a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010a7:	83 ec 0c             	sub    esp,0xc
100010aa:	b9 03 00 00 00       	mov    ecx,0x3
100010af:	89 e7                	mov    edi,esp
100010b1:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100010b7:	89 d6                	mov    esi,edx
100010b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010bb:	50                   	push   eax
100010bc:	e8 fc ff ff ff       	call   100010bd <x87Handler(regs*)+0x4e5>	100010bd: R_386_PC32	fpuAdd(_Float80, _Float80)
100010c1:	83 c4 20             	add    esp,0x20
100010c4:	b9 03 00 00 00       	mov    ecx,0x3
100010c9:	89 e7                	mov    edi,esp
100010cb:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100010d1:	e9 e0 01 00 00       	jmp    100012b6 <x87Handler(regs*)+0x6de>
100010d6:	8d 50 38             	lea    edx,[eax+0x38]
100010d9:	80 fa 07             	cmp    dl,0x7
100010dc:	77 64                	ja     10001142 <x87Handler(regs*)+0x56a>
100010de:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
100010e4:	52                   	push   edx
100010e5:	52                   	push   edx
100010e6:	2d c8 00 00 00       	sub    eax,0xc8
100010eb:	50                   	push   eax
100010ec:	56                   	push   esi
100010ed:	e8 fc ff ff ff       	call   100010ee <x87Handler(regs*)+0x516>	100010ee: R_386_PC32	fpuGetReg(int)
100010f2:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
100010f8:	83 ec 0c             	sub    esp,0xc
100010fb:	6a 00                	push   0x0
100010fd:	52                   	push   edx
100010fe:	e8 fc ff ff ff       	call   100010ff <x87Handler(regs*)+0x527>	100010ff: R_386_PC32	fpuGetReg(int)
10001103:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
10001109:	51                   	push   ecx
1000110a:	b9 03 00 00 00       	mov    ecx,0x3
1000110f:	89 e7                	mov    edi,esp
10001111:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001113:	83 ec 0c             	sub    esp,0xc
10001116:	b9 03 00 00 00       	mov    ecx,0x3
1000111b:	89 e7                	mov    edi,esp
1000111d:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
10001123:	89 d6                	mov    esi,edx
10001125:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001127:	50                   	push   eax
10001128:	e8 fc ff ff ff       	call   10001129 <x87Handler(regs*)+0x551>	10001129: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000112d:	83 c4 20             	add    esp,0x20
10001130:	b9 03 00 00 00       	mov    ecx,0x3
10001135:	89 e7                	mov    edi,esp
10001137:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
1000113d:	e9 74 01 00 00       	jmp    100012b6 <x87Handler(regs*)+0x6de>
10001142:	8d 50 30             	lea    edx,[eax+0x30]
10001145:	80 fa 07             	cmp    dl,0x7
10001148:	77 45                	ja     1000118f <x87Handler(regs*)+0x5b7>
1000114a:	8d b5 b4 fa ff ff    	lea    esi,[ebp-0x54c]
10001150:	57                   	push   edi
10001151:	57                   	push   edi
10001152:	2d d0 00 00 00       	sub    eax,0xd0
10001157:	50                   	push   eax
10001158:	56                   	push   esi
10001159:	e8 fc ff ff ff       	call   1000115a <x87Handler(regs*)+0x582>	1000115a: R_386_PC32	fpuGetReg(int)
1000115e:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
10001164:	83 ec 0c             	sub    esp,0xc
10001167:	6a 00                	push   0x0
10001169:	50                   	push   eax
1000116a:	e8 fc ff ff ff       	call   1000116b <x87Handler(regs*)+0x593>	1000116b: R_386_PC32	fpuGetReg(int)
1000116f:	50                   	push   eax
10001170:	50                   	push   eax
10001171:	b9 03 00 00 00       	mov    ecx,0x3
10001176:	89 e7                	mov    edi,esp
10001178:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000117a:	83 ec 0c             	sub    esp,0xc
1000117d:	b9 03 00 00 00       	mov    ecx,0x3
10001182:	89 e7                	mov    edi,esp
10001184:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000118a:	e9 c6 07 00 00       	jmp    10001955 <x87Handler(regs*)+0xd7d>
1000118f:	8d 50 28             	lea    edx,[eax+0x28]
10001192:	80 fa 07             	cmp    dl,0x7
10001195:	77 45                	ja     100011dc <x87Handler(regs*)+0x604>
10001197:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
1000119d:	52                   	push   edx
1000119e:	52                   	push   edx
1000119f:	2d d8 00 00 00       	sub    eax,0xd8
100011a4:	50                   	push   eax
100011a5:	56                   	push   esi
100011a6:	e8 fc ff ff ff       	call   100011a7 <x87Handler(regs*)+0x5cf>	100011a7: R_386_PC32	fpuGetReg(int)
100011ab:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100011b1:	83 ec 0c             	sub    esp,0xc
100011b4:	6a 00                	push   0x0
100011b6:	50                   	push   eax
100011b7:	e8 fc ff ff ff       	call   100011b8 <x87Handler(regs*)+0x5e0>	100011b8: R_386_PC32	fpuGetReg(int)
100011bc:	51                   	push   ecx
100011bd:	51                   	push   ecx
100011be:	b9 03 00 00 00       	mov    ecx,0x3
100011c3:	89 e7                	mov    edi,esp
100011c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011c7:	83 ec 0c             	sub    esp,0xc
100011ca:	b9 03 00 00 00       	mov    ecx,0x3
100011cf:	89 e7                	mov    edi,esp
100011d1:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100011d7:	e9 d7 07 00 00       	jmp    100019b3 <x87Handler(regs*)+0xddb>
100011dc:	8d 50 20             	lea    edx,[eax+0x20]
100011df:	80 fa 07             	cmp    dl,0x7
100011e2:	77 61                	ja     10001245 <x87Handler(regs*)+0x66d>
100011e4:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
100011ea:	51                   	push   ecx
100011eb:	51                   	push   ecx
100011ec:	2d e0 00 00 00       	sub    eax,0xe0
100011f1:	50                   	push   eax
100011f2:	56                   	push   esi
100011f3:	e8 fc ff ff ff       	call   100011f4 <x87Handler(regs*)+0x61c>	100011f4: R_386_PC32	fpuGetReg(int)
100011f8:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
100011fe:	83 ec 0c             	sub    esp,0xc
10001201:	6a 00                	push   0x0
10001203:	52                   	push   edx
10001204:	e8 fc ff ff ff       	call   10001205 <x87Handler(regs*)+0x62d>	10001205: R_386_PC32	fpuGetReg(int)
10001209:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
1000120f:	57                   	push   edi
10001210:	b9 03 00 00 00       	mov    ecx,0x3
10001215:	89 e7                	mov    edi,esp
10001217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001219:	83 ec 0c             	sub    esp,0xc
1000121c:	b9 03 00 00 00       	mov    ecx,0x3
10001221:	89 e7                	mov    edi,esp
10001223:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001229:	89 d6                	mov    esi,edx
1000122b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000122d:	50                   	push   eax
1000122e:	e8 fc ff ff ff       	call   1000122f <x87Handler(regs*)+0x657>	1000122f: R_386_PC32	fpuSub(_Float80, _Float80)
10001233:	83 c4 20             	add    esp,0x20
10001236:	b9 03 00 00 00       	mov    ecx,0x3
1000123b:	89 e7                	mov    edi,esp
1000123d:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
10001243:	eb 71                	jmp    100012b6 <x87Handler(regs*)+0x6de>
10001245:	8d 50 18             	lea    edx,[eax+0x18]
10001248:	80 fa 07             	cmp    dl,0x7
1000124b:	77 70                	ja     100012bd <x87Handler(regs*)+0x6e5>
1000124d:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
10001253:	50                   	push   eax
10001254:	50                   	push   eax
10001255:	6a 00                	push   0x0
10001257:	56                   	push   esi
10001258:	e8 fc ff ff ff       	call   10001259 <x87Handler(regs*)+0x681>	10001259: R_386_PC32	fpuGetReg(int)
1000125d:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
10001263:	83 ec 0c             	sub    esp,0xc
10001266:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000126c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001270:	2d e8 00 00 00       	sub    eax,0xe8
10001275:	50                   	push   eax
10001276:	52                   	push   edx
10001277:	e8 fc ff ff ff       	call   10001278 <x87Handler(regs*)+0x6a0>	10001278: R_386_PC32	fpuGetReg(int)
1000127c:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
10001282:	52                   	push   edx
10001283:	b9 03 00 00 00       	mov    ecx,0x3
10001288:	89 e7                	mov    edi,esp
1000128a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000128c:	83 ec 0c             	sub    esp,0xc
1000128f:	b9 03 00 00 00       	mov    ecx,0x3
10001294:	89 e7                	mov    edi,esp
10001296:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
1000129c:	89 d6                	mov    esi,edx
1000129e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012a0:	50                   	push   eax
100012a1:	e8 fc ff ff ff       	call   100012a2 <x87Handler(regs*)+0x6ca>	100012a2: R_386_PC32	fpuSub(_Float80, _Float80)
100012a6:	83 c4 20             	add    esp,0x20
100012a9:	b9 03 00 00 00       	mov    ecx,0x3
100012ae:	89 e7                	mov    edi,esp
100012b0:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100012b6:	89 c6                	mov    esi,eax
100012b8:	e9 77 fa ff ff       	jmp    10000d34 <x87Handler(regs*)+0x15c>
100012bd:	8d 50 10             	lea    edx,[eax+0x10]
100012c0:	80 fa 07             	cmp    dl,0x7
100012c3:	77 61                	ja     10001326 <x87Handler(regs*)+0x74e>
100012c5:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
100012cb:	51                   	push   ecx
100012cc:	51                   	push   ecx
100012cd:	2d f0 00 00 00       	sub    eax,0xf0
100012d2:	50                   	push   eax
100012d3:	56                   	push   esi
100012d4:	e8 fc ff ff ff       	call   100012d5 <x87Handler(regs*)+0x6fd>	100012d5: R_386_PC32	fpuGetReg(int)
100012d9:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
100012df:	83 ec 0c             	sub    esp,0xc
100012e2:	6a 00                	push   0x0
100012e4:	52                   	push   edx
100012e5:	e8 fc ff ff ff       	call   100012e6 <x87Handler(regs*)+0x70e>	100012e6: R_386_PC32	fpuGetReg(int)
100012ea:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
100012f0:	57                   	push   edi
100012f1:	b9 03 00 00 00       	mov    ecx,0x3
100012f6:	89 e7                	mov    edi,esp
100012f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012fa:	83 ec 0c             	sub    esp,0xc
100012fd:	b9 03 00 00 00       	mov    ecx,0x3
10001302:	89 e7                	mov    edi,esp
10001304:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
1000130a:	89 d6                	mov    esi,edx
1000130c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000130e:	50                   	push   eax
1000130f:	e8 fc ff ff ff       	call   10001310 <x87Handler(regs*)+0x738>	10001310: R_386_PC32	fpuDivide(_Float80, _Float80)
10001314:	83 c4 20             	add    esp,0x20
10001317:	b9 03 00 00 00       	mov    ecx,0x3
1000131c:	89 e7                	mov    edi,esp
1000131e:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
10001324:	eb 71                	jmp    10001397 <x87Handler(regs*)+0x7bf>
10001326:	3c f7                	cmp    al,0xf7
10001328:	0f 86 89 07 00 00    	jbe    10001ab7 <x87Handler(regs*)+0xedf>
1000132e:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
10001334:	50                   	push   eax
10001335:	50                   	push   eax
10001336:	6a 00                	push   0x0
10001338:	56                   	push   esi
10001339:	e8 fc ff ff ff       	call   1000133a <x87Handler(regs*)+0x762>	1000133a: R_386_PC32	fpuGetReg(int)
1000133e:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001344:	83 ec 0c             	sub    esp,0xc
10001347:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000134d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001351:	2d f8 00 00 00       	sub    eax,0xf8
10001356:	50                   	push   eax
10001357:	52                   	push   edx
10001358:	e8 fc ff ff ff       	call   10001359 <x87Handler(regs*)+0x781>	10001359: R_386_PC32	fpuGetReg(int)
1000135d:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
10001363:	52                   	push   edx
10001364:	b9 03 00 00 00       	mov    ecx,0x3
10001369:	89 e7                	mov    edi,esp
1000136b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000136d:	83 ec 0c             	sub    esp,0xc
10001370:	b9 03 00 00 00       	mov    ecx,0x3
10001375:	89 e7                	mov    edi,esp
10001377:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
1000137d:	89 d6                	mov    esi,edx
1000137f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001381:	50                   	push   eax
10001382:	e8 fc ff ff ff       	call   10001383 <x87Handler(regs*)+0x7ab>	10001383: R_386_PC32	fpuDivide(_Float80, _Float80)
10001387:	83 c4 20             	add    esp,0x20
1000138a:	b9 03 00 00 00       	mov    ecx,0x3
1000138f:	89 e7                	mov    edi,esp
10001391:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
10001397:	89 c6                	mov    esi,eax
10001399:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000139b:	6a 00                	push   0x0
1000139d:	e8 fc ff ff ff       	call   1000139e <x87Handler(regs*)+0x7c6>	1000139e: R_386_PC32	fpuSetReg(int, _Float80)
100013a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100013a6:	8d 45 dc             	lea    eax,[ebp-0x24]
100013a9:	89 04 24             	mov    DWORD PTR [esp],eax
100013ac:	e8 fc ff ff ff       	call   100013ad <x87Handler(regs*)+0x7d5>	100013ad: R_386_PC32	fpuPop()
100013b1:	e9 8b 0c 00 00       	jmp    10002041 <x87Handler(regs*)+0x1469>
100013b6:	80 fa dc             	cmp    dl,0xdc
100013b9:	0f 85 94 01 00 00    	jne    10001553 <x87Handler(regs*)+0x97b>
100013bf:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100013c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100013c9:	8d 50 40             	lea    edx,[eax+0x40]
100013cc:	80 fa 07             	cmp    dl,0x7
100013cf:	77 77                	ja     10001448 <x87Handler(regs*)+0x870>
100013d1:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
100013d7:	52                   	push   edx
100013d8:	52                   	push   edx
100013d9:	2d c0 00 00 00       	sub    eax,0xc0
100013de:	50                   	push   eax
100013df:	56                   	push   esi
100013e0:	e8 fc ff ff ff       	call   100013e1 <x87Handler(regs*)+0x809>	100013e1: R_386_PC32	fpuGetReg(int)
100013e5:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
100013eb:	83 ec 0c             	sub    esp,0xc
100013ee:	6a 00                	push   0x0
100013f0:	52                   	push   edx
100013f1:	e8 fc ff ff ff       	call   100013f2 <x87Handler(regs*)+0x81a>	100013f2: R_386_PC32	fpuGetReg(int)
100013f6:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
100013fc:	51                   	push   ecx
100013fd:	b9 03 00 00 00       	mov    ecx,0x3
10001402:	89 e7                	mov    edi,esp
10001404:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001406:	83 ec 0c             	sub    esp,0xc
10001409:	b9 03 00 00 00       	mov    ecx,0x3
1000140e:	89 e7                	mov    edi,esp
10001410:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001416:	89 d6                	mov    esi,edx
10001418:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000141a:	50                   	push   eax
1000141b:	e8 fc ff ff ff       	call   1000141c <x87Handler(regs*)+0x844>	1000141c: R_386_PC32	fpuAdd(_Float80, _Float80)
10001420:	83 c4 20             	add    esp,0x20
10001423:	b9 03 00 00 00       	mov    ecx,0x3
10001428:	89 e7                	mov    edi,esp
1000142a:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
10001430:	89 c6                	mov    esi,eax
10001432:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001434:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000143a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000143e:	2d c0 00 00 00       	sub    eax,0xc0
10001443:	e9 8a 04 00 00       	jmp    100018d2 <x87Handler(regs*)+0xcfa>
10001448:	8d 50 38             	lea    edx,[eax+0x38]
1000144b:	80 fa 07             	cmp    dl,0x7
1000144e:	77 77                	ja     100014c7 <x87Handler(regs*)+0x8ef>
10001450:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
10001456:	51                   	push   ecx
10001457:	51                   	push   ecx
10001458:	2d c8 00 00 00       	sub    eax,0xc8
1000145d:	50                   	push   eax
1000145e:	56                   	push   esi
1000145f:	e8 fc ff ff ff       	call   10001460 <x87Handler(regs*)+0x888>	10001460: R_386_PC32	fpuGetReg(int)
10001464:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
1000146a:	83 ec 0c             	sub    esp,0xc
1000146d:	6a 00                	push   0x0
1000146f:	52                   	push   edx
10001470:	e8 fc ff ff ff       	call   10001471 <x87Handler(regs*)+0x899>	10001471: R_386_PC32	fpuGetReg(int)
10001475:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
1000147b:	57                   	push   edi
1000147c:	b9 03 00 00 00       	mov    ecx,0x3
10001481:	89 e7                	mov    edi,esp
10001483:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001485:	83 ec 0c             	sub    esp,0xc
10001488:	b9 03 00 00 00       	mov    ecx,0x3
1000148d:	89 e7                	mov    edi,esp
1000148f:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
10001495:	89 d6                	mov    esi,edx
10001497:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001499:	50                   	push   eax
1000149a:	e8 fc ff ff ff       	call   1000149b <x87Handler(regs*)+0x8c3>	1000149b: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000149f:	83 c4 20             	add    esp,0x20
100014a2:	b9 03 00 00 00       	mov    ecx,0x3
100014a7:	89 e7                	mov    edi,esp
100014a9:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100014af:	89 c6                	mov    esi,eax
100014b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014b3:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100014b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014bd:	2d c8 00 00 00       	sub    eax,0xc8
100014c2:	e9 0b 04 00 00       	jmp    100018d2 <x87Handler(regs*)+0xcfa>
100014c7:	83 c0 18             	add    eax,0x18
100014ca:	3c 07                	cmp    al,0x7
100014cc:	0f 87 c6 09 00 00    	ja     10001e98 <x87Handler(regs*)+0x12c0>
100014d2:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
100014d8:	50                   	push   eax
100014d9:	50                   	push   eax
100014da:	6a 00                	push   0x0
100014dc:	56                   	push   esi
100014dd:	e8 fc ff ff ff       	call   100014de <x87Handler(regs*)+0x906>	100014de: R_386_PC32	fpuGetReg(int)
100014e2:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
100014e8:	83 ec 0c             	sub    esp,0xc
100014eb:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100014f1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014f5:	2d e8 00 00 00       	sub    eax,0xe8
100014fa:	50                   	push   eax
100014fb:	52                   	push   edx
100014fc:	e8 fc ff ff ff       	call   100014fd <x87Handler(regs*)+0x925>	100014fd: R_386_PC32	fpuGetReg(int)
10001501:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001507:	52                   	push   edx
10001508:	b9 03 00 00 00       	mov    ecx,0x3
1000150d:	89 e7                	mov    edi,esp
1000150f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001511:	83 ec 0c             	sub    esp,0xc
10001514:	b9 03 00 00 00       	mov    ecx,0x3
10001519:	89 e7                	mov    edi,esp
1000151b:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
10001521:	89 d6                	mov    esi,edx
10001523:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001525:	50                   	push   eax
10001526:	e8 fc ff ff ff       	call   10001527 <x87Handler(regs*)+0x94f>	10001527: R_386_PC32	fpuSub(_Float80, _Float80)
1000152b:	83 c4 20             	add    esp,0x20
1000152e:	b9 03 00 00 00       	mov    ecx,0x3
10001533:	89 e7                	mov    edi,esp
10001535:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
1000153b:	89 c6                	mov    esi,eax
1000153d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000153f:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001545:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001549:	2d e8 00 00 00       	sub    eax,0xe8
1000154e:	e9 7f 03 00 00       	jmp    100018d2 <x87Handler(regs*)+0xcfa>
10001553:	80 fa de             	cmp    dl,0xde
10001556:	0f 85 33 03 00 00    	jne    1000188f <x87Handler(regs*)+0xcb7>
1000155c:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001562:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10001566:	8d 42 40             	lea    eax,[edx+0x40]
10001569:	3c 07                	cmp    al,0x7
1000156b:	0f 87 8d 00 00 00    	ja     100015fe <x87Handler(regs*)+0xa26>
10001571:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
10001577:	51                   	push   ecx
10001578:	51                   	push   ecx
10001579:	81 ea c0 00 00 00    	sub    edx,0xc0
1000157f:	52                   	push   edx
10001580:	56                   	push   esi
10001581:	e8 fc ff ff ff       	call   10001582 <x87Handler(regs*)+0x9aa>	10001582: R_386_PC32	fpuGetReg(int)
10001586:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
1000158c:	83 ec 0c             	sub    esp,0xc
1000158f:	6a 00                	push   0x0
10001591:	52                   	push   edx
10001592:	e8 fc ff ff ff       	call   10001593 <x87Handler(regs*)+0x9bb>	10001593: R_386_PC32	fpuGetReg(int)
10001597:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
1000159d:	57                   	push   edi
1000159e:	b9 03 00 00 00       	mov    ecx,0x3
100015a3:	89 e7                	mov    edi,esp
100015a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015a7:	83 ec 0c             	sub    esp,0xc
100015aa:	b9 03 00 00 00       	mov    ecx,0x3
100015af:	89 e7                	mov    edi,esp
100015b1:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100015b7:	89 d6                	mov    esi,edx
100015b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015bb:	50                   	push   eax
100015bc:	e8 fc ff ff ff       	call   100015bd <x87Handler(regs*)+0x9e5>	100015bd: R_386_PC32	fpuAdd(_Float80, _Float80)
100015c1:	83 c4 20             	add    esp,0x20
100015c4:	b9 03 00 00 00       	mov    ecx,0x3
100015c9:	89 e7                	mov    edi,esp
100015cb:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100015d1:	89 c6                	mov    esi,eax
100015d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015d5:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100015db:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100015df:	2d c0 00 00 00       	sub    eax,0xc0
100015e4:	50                   	push   eax
100015e5:	e8 fc ff ff ff       	call   100015e6 <x87Handler(regs*)+0xa0e>	100015e6: R_386_PC32	fpuSetReg(int, _Float80)
100015ea:	8d 45 dc             	lea    eax,[ebp-0x24]
100015ed:	89 04 24             	mov    DWORD PTR [esp],eax
100015f0:	e8 fc ff ff ff       	call   100015f1 <x87Handler(regs*)+0xa19>	100015f1: R_386_PC32	fpuPop()
100015f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100015f9:	e9 43 0a 00 00       	jmp    10002041 <x87Handler(regs*)+0x1469>
100015fe:	8d 42 20             	lea    eax,[edx+0x20]
10001601:	3c 07                	cmp    al,0x7
10001603:	77 78                	ja     1000167d <x87Handler(regs*)+0xaa5>
10001605:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
1000160b:	50                   	push   eax
1000160c:	50                   	push   eax
1000160d:	81 ea e0 00 00 00    	sub    edx,0xe0
10001613:	52                   	push   edx
10001614:	56                   	push   esi
10001615:	e8 fc ff ff ff       	call   10001616 <x87Handler(regs*)+0xa3e>	10001616: R_386_PC32	fpuGetReg(int)
1000161a:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
10001620:	83 ec 0c             	sub    esp,0xc
10001623:	6a 00                	push   0x0
10001625:	52                   	push   edx
10001626:	e8 fc ff ff ff       	call   10001627 <x87Handler(regs*)+0xa4f>	10001627: R_386_PC32	fpuGetReg(int)
1000162b:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001631:	52                   	push   edx
10001632:	b9 03 00 00 00       	mov    ecx,0x3
10001637:	89 e7                	mov    edi,esp
10001639:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000163b:	83 ec 0c             	sub    esp,0xc
1000163e:	b9 03 00 00 00       	mov    ecx,0x3
10001643:	89 e7                	mov    edi,esp
10001645:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
1000164b:	89 d6                	mov    esi,edx
1000164d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000164f:	50                   	push   eax
10001650:	e8 fc ff ff ff       	call   10001651 <x87Handler(regs*)+0xa79>	10001651: R_386_PC32	fpuSub(_Float80, _Float80)
10001655:	83 c4 20             	add    esp,0x20
10001658:	b9 03 00 00 00       	mov    ecx,0x3
1000165d:	89 e7                	mov    edi,esp
1000165f:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001665:	89 c6                	mov    esi,eax
10001667:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001669:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000166f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001673:	2d e0 00 00 00       	sub    eax,0xe0
10001678:	e9 67 ff ff ff       	jmp    100015e4 <x87Handler(regs*)+0xa0c>
1000167d:	8d 42 18             	lea    eax,[edx+0x18]
10001680:	3c 07                	cmp    al,0x7
10001682:	0f 87 81 00 00 00    	ja     10001709 <x87Handler(regs*)+0xb31>
10001688:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
1000168e:	51                   	push   ecx
1000168f:	51                   	push   ecx
10001690:	6a 00                	push   0x0
10001692:	56                   	push   esi
10001693:	e8 fc ff ff ff       	call   10001694 <x87Handler(regs*)+0xabc>	10001694: R_386_PC32	fpuGetReg(int)
10001698:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
1000169e:	83 ec 0c             	sub    esp,0xc
100016a1:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100016a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016ab:	2d e8 00 00 00       	sub    eax,0xe8
100016b0:	50                   	push   eax
100016b1:	52                   	push   edx
100016b2:	e8 fc ff ff ff       	call   100016b3 <x87Handler(regs*)+0xadb>	100016b3: R_386_PC32	fpuGetReg(int)
100016b7:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100016bd:	57                   	push   edi
100016be:	b9 03 00 00 00       	mov    ecx,0x3
100016c3:	89 e7                	mov    edi,esp
100016c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016c7:	83 ec 0c             	sub    esp,0xc
100016ca:	b9 03 00 00 00       	mov    ecx,0x3
100016cf:	89 e7                	mov    edi,esp
100016d1:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100016d7:	89 d6                	mov    esi,edx
100016d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016db:	50                   	push   eax
100016dc:	e8 fc ff ff ff       	call   100016dd <x87Handler(regs*)+0xb05>	100016dd: R_386_PC32	fpuSub(_Float80, _Float80)
100016e1:	83 c4 20             	add    esp,0x20
100016e4:	b9 03 00 00 00       	mov    ecx,0x3
100016e9:	89 e7                	mov    edi,esp
100016eb:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100016f1:	89 c6                	mov    esi,eax
100016f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016f5:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100016fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016ff:	2d e8 00 00 00       	sub    eax,0xe8
10001704:	e9 db fe ff ff       	jmp    100015e4 <x87Handler(regs*)+0xa0c>
10001709:	8d 42 38             	lea    eax,[edx+0x38]
1000170c:	3c 07                	cmp    al,0x7
1000170e:	77 78                	ja     10001788 <x87Handler(regs*)+0xbb0>
10001710:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
10001716:	50                   	push   eax
10001717:	50                   	push   eax
10001718:	81 ea c8 00 00 00    	sub    edx,0xc8
1000171e:	52                   	push   edx
1000171f:	56                   	push   esi
10001720:	e8 fc ff ff ff       	call   10001721 <x87Handler(regs*)+0xb49>	10001721: R_386_PC32	fpuGetReg(int)
10001725:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
1000172b:	83 ec 0c             	sub    esp,0xc
1000172e:	6a 00                	push   0x0
10001730:	52                   	push   edx
10001731:	e8 fc ff ff ff       	call   10001732 <x87Handler(regs*)+0xb5a>	10001732: R_386_PC32	fpuGetReg(int)
10001736:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
1000173c:	52                   	push   edx
1000173d:	b9 03 00 00 00       	mov    ecx,0x3
10001742:	89 e7                	mov    edi,esp
10001744:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001746:	83 ec 0c             	sub    esp,0xc
10001749:	b9 03 00 00 00       	mov    ecx,0x3
1000174e:	89 e7                	mov    edi,esp
10001750:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001756:	89 d6                	mov    esi,edx
10001758:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000175a:	50                   	push   eax
1000175b:	e8 fc ff ff ff       	call   1000175c <x87Handler(regs*)+0xb84>	1000175c: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001760:	83 c4 20             	add    esp,0x20
10001763:	b9 03 00 00 00       	mov    ecx,0x3
10001768:	89 e7                	mov    edi,esp
1000176a:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
10001770:	89 c6                	mov    esi,eax
10001772:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001774:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000177a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000177e:	2d c8 00 00 00       	sub    eax,0xc8
10001783:	e9 01 01 00 00       	jmp    10001889 <x87Handler(regs*)+0xcb1>
10001788:	80 fa f7             	cmp    dl,0xf7
1000178b:	76 7e                	jbe    1000180b <x87Handler(regs*)+0xc33>
1000178d:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
10001793:	51                   	push   ecx
10001794:	51                   	push   ecx
10001795:	6a 00                	push   0x0
10001797:	56                   	push   esi
10001798:	e8 fc ff ff ff       	call   10001799 <x87Handler(regs*)+0xbc1>	10001799: R_386_PC32	fpuGetReg(int)
1000179d:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100017a3:	83 ec 0c             	sub    esp,0xc
100017a6:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100017ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017b0:	2d f8 00 00 00       	sub    eax,0xf8
100017b5:	50                   	push   eax
100017b6:	52                   	push   edx
100017b7:	e8 fc ff ff ff       	call   100017b8 <x87Handler(regs*)+0xbe0>	100017b8: R_386_PC32	fpuGetReg(int)
100017bc:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
100017c2:	57                   	push   edi
100017c3:	b9 03 00 00 00       	mov    ecx,0x3
100017c8:	89 e7                	mov    edi,esp
100017ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017cc:	83 ec 0c             	sub    esp,0xc
100017cf:	b9 03 00 00 00       	mov    ecx,0x3
100017d4:	89 e7                	mov    edi,esp
100017d6:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100017dc:	89 d6                	mov    esi,edx
100017de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e0:	50                   	push   eax
100017e1:	e8 fc ff ff ff       	call   100017e2 <x87Handler(regs*)+0xc0a>	100017e2: R_386_PC32	fpuDivide(_Float80, _Float80)
100017e6:	83 c4 20             	add    esp,0x20
100017e9:	b9 03 00 00 00       	mov    ecx,0x3
100017ee:	89 e7                	mov    edi,esp
100017f0:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
100017f6:	89 c6                	mov    esi,eax
100017f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017fa:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001800:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001804:	2d f8 00 00 00       	sub    eax,0xf8
10001809:	eb 7e                	jmp    10001889 <x87Handler(regs*)+0xcb1>
1000180b:	8d 42 10             	lea    eax,[edx+0x10]
1000180e:	3c 07                	cmp    al,0x7
10001810:	0f 87 09 02 00 00    	ja     10001a1f <x87Handler(regs*)+0xe47>
10001816:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
1000181c:	50                   	push   eax
1000181d:	50                   	push   eax
1000181e:	81 ea f0 00 00 00    	sub    edx,0xf0
10001824:	52                   	push   edx
10001825:	56                   	push   esi
10001826:	e8 fc ff ff ff       	call   10001827 <x87Handler(regs*)+0xc4f>	10001827: R_386_PC32	fpuGetReg(int)
1000182b:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001831:	83 ec 0c             	sub    esp,0xc
10001834:	6a 00                	push   0x0
10001836:	52                   	push   edx
10001837:	e8 fc ff ff ff       	call   10001838 <x87Handler(regs*)+0xc60>	10001838: R_386_PC32	fpuGetReg(int)
1000183c:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001842:	52                   	push   edx
10001843:	b9 03 00 00 00       	mov    ecx,0x3
10001848:	89 e7                	mov    edi,esp
1000184a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000184c:	83 ec 0c             	sub    esp,0xc
1000184f:	b9 03 00 00 00       	mov    ecx,0x3
10001854:	89 e7                	mov    edi,esp
10001856:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
1000185c:	89 d6                	mov    esi,edx
1000185e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001860:	50                   	push   eax
10001861:	e8 fc ff ff ff       	call   10001862 <x87Handler(regs*)+0xc8a>	10001862: R_386_PC32	fpuDivide(_Float80, _Float80)
10001866:	83 c4 20             	add    esp,0x20
10001869:	b9 03 00 00 00       	mov    ecx,0x3
1000186e:	89 e7                	mov    edi,esp
10001870:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001876:	89 c6                	mov    esi,eax
10001878:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000187a:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001880:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001884:	2d f0 00 00 00       	sub    eax,0xf0
10001889:	50                   	push   eax
1000188a:	e9 0e fb ff ff       	jmp    1000139d <x87Handler(regs*)+0x7c5>
1000188f:	80 fa dd             	cmp    dl,0xdd
10001892:	0f 85 30 01 00 00    	jne    100019c8 <x87Handler(regs*)+0xdf0>
10001898:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000189e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018a2:	8d 50 30             	lea    edx,[eax+0x30]
100018a5:	80 fa 07             	cmp    dl,0x7
100018a8:	77 2e                	ja     100018d8 <x87Handler(regs*)+0xd00>
100018aa:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
100018b0:	50                   	push   eax
100018b1:	50                   	push   eax
100018b2:	6a 00                	push   0x0
100018b4:	56                   	push   esi
100018b5:	e8 fc ff ff ff       	call   100018b6 <x87Handler(regs*)+0xcde>	100018b6: R_386_PC32	fpuGetReg(int)
100018ba:	b9 03 00 00 00       	mov    ecx,0x3
100018bf:	89 e7                	mov    edi,esp
100018c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018c3:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100018c9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018cd:	2d d0 00 00 00       	sub    eax,0xd0
100018d2:	50                   	push   eax
100018d3:	e9 60 f4 ff ff       	jmp    10000d38 <x87Handler(regs*)+0x160>
100018d8:	8d 50 28             	lea    edx,[eax+0x28]
100018db:	80 fa 07             	cmp    dl,0x7
100018de:	77 2d                	ja     1000190d <x87Handler(regs*)+0xd35>
100018e0:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
100018e6:	50                   	push   eax
100018e7:	50                   	push   eax
100018e8:	6a 00                	push   0x0
100018ea:	56                   	push   esi
100018eb:	e8 fc ff ff ff       	call   100018ec <x87Handler(regs*)+0xd14>	100018ec: R_386_PC32	fpuGetReg(int)
100018f0:	b9 03 00 00 00       	mov    ecx,0x3
100018f5:	89 e7                	mov    edi,esp
100018f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018f9:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100018ff:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001903:	2d d8 00 00 00       	sub    eax,0xd8
10001908:	e9 d7 fc ff ff       	jmp    100015e4 <x87Handler(regs*)+0xa0c>
1000190d:	8d 50 20             	lea    edx,[eax+0x20]
10001910:	80 fa 07             	cmp    dl,0x7
10001913:	77 52                	ja     10001967 <x87Handler(regs*)+0xd8f>
10001915:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
1000191b:	57                   	push   edi
1000191c:	57                   	push   edi
1000191d:	2d e0 00 00 00       	sub    eax,0xe0
10001922:	50                   	push   eax
10001923:	56                   	push   esi
10001924:	e8 fc ff ff ff       	call   10001925 <x87Handler(regs*)+0xd4d>	10001925: R_386_PC32	fpuGetReg(int)
10001929:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
1000192f:	83 ec 0c             	sub    esp,0xc
10001932:	6a 00                	push   0x0
10001934:	50                   	push   eax
10001935:	e8 fc ff ff ff       	call   10001936 <x87Handler(regs*)+0xd5e>	10001936: R_386_PC32	fpuGetReg(int)
1000193a:	50                   	push   eax
1000193b:	50                   	push   eax
1000193c:	b9 03 00 00 00       	mov    ecx,0x3
10001941:	89 e7                	mov    edi,esp
10001943:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001945:	83 ec 0c             	sub    esp,0xc
10001948:	b9 03 00 00 00       	mov    ecx,0x3
1000194d:	89 e7                	mov    edi,esp
1000194f:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001955:	89 c6                	mov    esi,eax
10001957:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001959:	e8 fc ff ff ff       	call   1000195a <x87Handler(regs*)+0xd82>	1000195a: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000195e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001962:	e9 6b 06 00 00       	jmp    10001fd2 <x87Handler(regs*)+0x13fa>
10001967:	8d 50 18             	lea    edx,[eax+0x18]
1000196a:	80 fa 07             	cmp    dl,0x7
1000196d:	0f 87 5c f6 ff ff    	ja     10000fcf <x87Handler(regs*)+0x3f7>
10001973:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
10001979:	52                   	push   edx
1000197a:	52                   	push   edx
1000197b:	2d e8 00 00 00       	sub    eax,0xe8
10001980:	50                   	push   eax
10001981:	56                   	push   esi
10001982:	e8 fc ff ff ff       	call   10001983 <x87Handler(regs*)+0xdab>	10001983: R_386_PC32	fpuGetReg(int)
10001987:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
1000198d:	83 ec 0c             	sub    esp,0xc
10001990:	6a 00                	push   0x0
10001992:	50                   	push   eax
10001993:	e8 fc ff ff ff       	call   10001994 <x87Handler(regs*)+0xdbc>	10001994: R_386_PC32	fpuGetReg(int)
10001998:	51                   	push   ecx
10001999:	51                   	push   ecx
1000199a:	b9 03 00 00 00       	mov    ecx,0x3
1000199f:	89 e7                	mov    edi,esp
100019a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019a3:	83 ec 0c             	sub    esp,0xc
100019a6:	b9 03 00 00 00       	mov    ecx,0x3
100019ab:	89 e7                	mov    edi,esp
100019ad:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
100019b3:	89 c6                	mov    esi,eax
100019b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019b7:	e8 fc ff ff ff       	call   100019b8 <x87Handler(regs*)+0xde0>	100019b8: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100019bc:	8d 45 dc             	lea    eax,[ebp-0x24]
100019bf:	83 c4 24             	add    esp,0x24
100019c2:	50                   	push   eax
100019c3:	e9 28 fc ff ff       	jmp    100015f0 <x87Handler(regs*)+0xa18>
100019c8:	80 fa da             	cmp    dl,0xda
100019cb:	0f 85 b9 00 00 00    	jne    10001a8a <x87Handler(regs*)+0xeb2>
100019d1:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100019d7:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
100019db:	0f 85 63 03 00 00    	jne    10001d44 <x87Handler(regs*)+0x116c>
100019e1:	8d b5 18 fd ff ff    	lea    esi,[ebp-0x2e8]
100019e7:	50                   	push   eax
100019e8:	50                   	push   eax
100019e9:	6a 01                	push   0x1
100019eb:	56                   	push   esi
100019ec:	e8 fc ff ff ff       	call   100019ed <x87Handler(regs*)+0xe15>	100019ed: R_386_PC32	fpuGetReg(int)
100019f1:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
100019f7:	83 ec 0c             	sub    esp,0xc
100019fa:	6a 00                	push   0x0
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <x87Handler(regs*)+0xe26>	100019fe: R_386_PC32	fpuGetReg(int)
10001a02:	50                   	push   eax
10001a03:	50                   	push   eax
10001a04:	b9 03 00 00 00       	mov    ecx,0x3
10001a09:	89 e7                	mov    edi,esp
10001a0b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a0d:	83 ec 0c             	sub    esp,0xc
10001a10:	b9 03 00 00 00       	mov    ecx,0x3
10001a15:	89 e7                	mov    edi,esp
10001a17:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001a1d:	eb 47                	jmp    10001a66 <x87Handler(regs*)+0xe8e>
10001a1f:	31 c0                	xor    eax,eax
10001a21:	80 fa d9             	cmp    dl,0xd9
10001a24:	0f 85 a4 08 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10001a2a:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001a30:	51                   	push   ecx
10001a31:	51                   	push   ecx
10001a32:	6a 01                	push   0x1
10001a34:	56                   	push   esi
10001a35:	e8 fc ff ff ff       	call   10001a36 <x87Handler(regs*)+0xe5e>	10001a36: R_386_PC32	fpuGetReg(int)
10001a3a:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001a40:	83 ec 0c             	sub    esp,0xc
10001a43:	6a 00                	push   0x0
10001a45:	50                   	push   eax
10001a46:	e8 fc ff ff ff       	call   10001a47 <x87Handler(regs*)+0xe6f>	10001a47: R_386_PC32	fpuGetReg(int)
10001a4b:	57                   	push   edi
10001a4c:	57                   	push   edi
10001a4d:	b9 03 00 00 00       	mov    ecx,0x3
10001a52:	89 e7                	mov    edi,esp
10001a54:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a56:	83 ec 0c             	sub    esp,0xc
10001a59:	b9 03 00 00 00       	mov    ecx,0x3
10001a5e:	89 e7                	mov    edi,esp
10001a60:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001a66:	89 c6                	mov    esi,eax
10001a68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a6a:	e8 fc ff ff ff       	call   10001a6b <x87Handler(regs*)+0xe93>	10001a6b: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001a6f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a73:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001a76:	83 c4 24             	add    esp,0x24
10001a79:	53                   	push   ebx
10001a7a:	e8 fc ff ff ff       	call   10001a7b <x87Handler(regs*)+0xea3>	10001a7b: R_386_PC32	fpuPop()
10001a7f:	53                   	push   ebx
10001a80:	e8 fc ff ff ff       	call   10001a81 <x87Handler(regs*)+0xea9>	10001a81: R_386_PC32	fpuPop()
10001a85:	e9 b7 05 00 00       	jmp    10002041 <x87Handler(regs*)+0x1469>
10001a8a:	80 fa df             	cmp    dl,0xdf
10001a8d:	0f 85 99 03 00 00    	jne    10001e2c <x87Handler(regs*)+0x1254>
10001a93:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001a99:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001a9d:	0f 85 cf 07 00 00    	jne    10002272 <x87Handler(regs*)+0x169a>
10001aa3:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001aa6: R_386_32	fpuState
10001aaa:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001aae:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001ab2:	e9 8d f2 ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001ab7:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001abd:	84 d2                	test   dl,dl
10001abf:	75 66                	jne    10001b27 <x87Handler(regs*)+0xf4f>
10001ac1:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001ac7:	50                   	push   eax
10001ac8:	50                   	push   eax
10001ac9:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001acf:	ff 30                	push   DWORD PTR [eax]
10001ad1:	56                   	push   esi
10001ad2:	e8 fc ff ff ff       	call   10001ad3 <x87Handler(regs*)+0xefb>	10001ad3: R_386_PC32	fpu32ToInternal(unsigned int)
10001ad7:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001add:	83 ec 0c             	sub    esp,0xc
10001ae0:	6a 00                	push   0x0
10001ae2:	52                   	push   edx
10001ae3:	e8 fc ff ff ff       	call   10001ae4 <x87Handler(regs*)+0xf0c>	10001ae4: R_386_PC32	fpuGetReg(int)
10001ae8:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001aee:	52                   	push   edx
10001aef:	b9 03 00 00 00       	mov    ecx,0x3
10001af4:	89 e7                	mov    edi,esp
10001af6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001af8:	83 ec 0c             	sub    esp,0xc
10001afb:	b9 03 00 00 00       	mov    ecx,0x3
10001b00:	89 e7                	mov    edi,esp
10001b02:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b08:	89 d6                	mov    esi,edx
10001b0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b0c:	50                   	push   eax
10001b0d:	e8 fc ff ff ff       	call   10001b0e <x87Handler(regs*)+0xf36>	10001b0e: R_386_PC32	fpuAdd(_Float80, _Float80)
10001b12:	83 c4 20             	add    esp,0x20
10001b15:	b9 03 00 00 00       	mov    ecx,0x3
10001b1a:	89 e7                	mov    edi,esp
10001b1c:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b22:	e9 64 06 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001b27:	80 fa 01             	cmp    dl,0x1
10001b2a:	75 66                	jne    10001b92 <x87Handler(regs*)+0xfba>
10001b2c:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001b32:	51                   	push   ecx
10001b33:	51                   	push   ecx
10001b34:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001b3a:	ff 30                	push   DWORD PTR [eax]
10001b3c:	56                   	push   esi
10001b3d:	e8 fc ff ff ff       	call   10001b3e <x87Handler(regs*)+0xf66>	10001b3e: R_386_PC32	fpu32ToInternal(unsigned int)
10001b42:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001b48:	83 ec 0c             	sub    esp,0xc
10001b4b:	6a 00                	push   0x0
10001b4d:	52                   	push   edx
10001b4e:	e8 fc ff ff ff       	call   10001b4f <x87Handler(regs*)+0xf77>	10001b4f: R_386_PC32	fpuGetReg(int)
10001b53:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001b59:	57                   	push   edi
10001b5a:	b9 03 00 00 00       	mov    ecx,0x3
10001b5f:	89 e7                	mov    edi,esp
10001b61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b63:	83 ec 0c             	sub    esp,0xc
10001b66:	b9 03 00 00 00       	mov    ecx,0x3
10001b6b:	89 e7                	mov    edi,esp
10001b6d:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001b73:	89 d6                	mov    esi,edx
10001b75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b77:	50                   	push   eax
10001b78:	e8 fc ff ff ff       	call   10001b79 <x87Handler(regs*)+0xfa1>	10001b79: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001b7d:	83 c4 20             	add    esp,0x20
10001b80:	b9 03 00 00 00       	mov    ecx,0x3
10001b85:	89 e7                	mov    edi,esp
10001b87:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001b8d:	e9 f9 05 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001b92:	80 fa 04             	cmp    dl,0x4
10001b95:	75 66                	jne    10001bfd <x87Handler(regs*)+0x1025>
10001b97:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001b9d:	50                   	push   eax
10001b9e:	50                   	push   eax
10001b9f:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001ba5:	ff 30                	push   DWORD PTR [eax]
10001ba7:	56                   	push   esi
10001ba8:	e8 fc ff ff ff       	call   10001ba9 <x87Handler(regs*)+0xfd1>	10001ba9: R_386_PC32	fpu32ToInternal(unsigned int)
10001bad:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001bb3:	83 ec 0c             	sub    esp,0xc
10001bb6:	6a 00                	push   0x0
10001bb8:	52                   	push   edx
10001bb9:	e8 fc ff ff ff       	call   10001bba <x87Handler(regs*)+0xfe2>	10001bba: R_386_PC32	fpuGetReg(int)
10001bbe:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001bc4:	52                   	push   edx
10001bc5:	b9 03 00 00 00       	mov    ecx,0x3
10001bca:	89 e7                	mov    edi,esp
10001bcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bce:	83 ec 0c             	sub    esp,0xc
10001bd1:	b9 03 00 00 00       	mov    ecx,0x3
10001bd6:	89 e7                	mov    edi,esp
10001bd8:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001bde:	89 d6                	mov    esi,edx
10001be0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001be2:	50                   	push   eax
10001be3:	e8 fc ff ff ff       	call   10001be4 <x87Handler(regs*)+0x100c>	10001be4: R_386_PC32	fpuSub(_Float80, _Float80)
10001be8:	83 c4 20             	add    esp,0x20
10001beb:	b9 03 00 00 00       	mov    ecx,0x3
10001bf0:	89 e7                	mov    edi,esp
10001bf2:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001bf8:	e9 8e 05 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001bfd:	80 fa 05             	cmp    dl,0x5
10001c00:	75 66                	jne    10001c68 <x87Handler(regs*)+0x1090>
10001c02:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001c08:	51                   	push   ecx
10001c09:	51                   	push   ecx
10001c0a:	6a 00                	push   0x0
10001c0c:	56                   	push   esi
10001c0d:	e8 fc ff ff ff       	call   10001c0e <x87Handler(regs*)+0x1036>	10001c0e: R_386_PC32	fpuGetReg(int)
10001c12:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001c18:	83 ec 0c             	sub    esp,0xc
10001c1b:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10001c21:	ff 31                	push   DWORD PTR [ecx]
10001c23:	50                   	push   eax
10001c24:	e8 fc ff ff ff       	call   10001c25 <x87Handler(regs*)+0x104d>	10001c25: R_386_PC32	fpu32ToInternal(unsigned int)
10001c29:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001c2f:	57                   	push   edi
10001c30:	b9 03 00 00 00       	mov    ecx,0x3
10001c35:	89 e7                	mov    edi,esp
10001c37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c39:	83 ec 0c             	sub    esp,0xc
10001c3c:	b9 03 00 00 00       	mov    ecx,0x3
10001c41:	89 e7                	mov    edi,esp
10001c43:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001c49:	89 c6                	mov    esi,eax
10001c4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c4d:	52                   	push   edx
10001c4e:	e8 fc ff ff ff       	call   10001c4f <x87Handler(regs*)+0x1077>	10001c4f: R_386_PC32	fpuSub(_Float80, _Float80)
10001c53:	83 c4 20             	add    esp,0x20
10001c56:	b9 03 00 00 00       	mov    ecx,0x3
10001c5b:	89 e7                	mov    edi,esp
10001c5d:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001c63:	e9 86 05 00 00       	jmp    100021ee <x87Handler(regs*)+0x1616>
10001c68:	80 fa 06             	cmp    dl,0x6
10001c6b:	75 66                	jne    10001cd3 <x87Handler(regs*)+0x10fb>
10001c6d:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10001c73:	50                   	push   eax
10001c74:	50                   	push   eax
10001c75:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001c7b:	ff 30                	push   DWORD PTR [eax]
10001c7d:	56                   	push   esi
10001c7e:	e8 fc ff ff ff       	call   10001c7f <x87Handler(regs*)+0x10a7>	10001c7f: R_386_PC32	fpu32ToInternal(unsigned int)
10001c83:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001c89:	83 ec 0c             	sub    esp,0xc
10001c8c:	6a 00                	push   0x0
10001c8e:	52                   	push   edx
10001c8f:	e8 fc ff ff ff       	call   10001c90 <x87Handler(regs*)+0x10b8>	10001c90: R_386_PC32	fpuGetReg(int)
10001c94:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001c9a:	52                   	push   edx
10001c9b:	b9 03 00 00 00       	mov    ecx,0x3
10001ca0:	89 e7                	mov    edi,esp
10001ca2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ca4:	83 ec 0c             	sub    esp,0xc
10001ca7:	b9 03 00 00 00       	mov    ecx,0x3
10001cac:	89 e7                	mov    edi,esp
10001cae:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001cb4:	89 d6                	mov    esi,edx
10001cb6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cb8:	50                   	push   eax
10001cb9:	e8 fc ff ff ff       	call   10001cba <x87Handler(regs*)+0x10e2>	10001cba: R_386_PC32	fpuDivide(_Float80, _Float80)
10001cbe:	83 c4 20             	add    esp,0x20
10001cc1:	b9 03 00 00 00       	mov    ecx,0x3
10001cc6:	89 e7                	mov    edi,esp
10001cc8:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001cce:	e9 b8 04 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001cd3:	31 c0                	xor    eax,eax
10001cd5:	80 fa 07             	cmp    dl,0x7
10001cd8:	0f 85 f0 05 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10001cde:	8d b5 fc fd ff ff    	lea    esi,[ebp-0x204]
10001ce4:	50                   	push   eax
10001ce5:	50                   	push   eax
10001ce6:	6a 00                	push   0x0
10001ce8:	56                   	push   esi
10001ce9:	e8 fc ff ff ff       	call   10001cea <x87Handler(regs*)+0x1112>	10001cea: R_386_PC32	fpuGetReg(int)
10001cee:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001cf4:	83 ec 0c             	sub    esp,0xc
10001cf7:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10001cfd:	ff 37                	push   DWORD PTR [edi]
10001cff:	50                   	push   eax
10001d00:	e8 fc ff ff ff       	call   10001d01 <x87Handler(regs*)+0x1129>	10001d01: R_386_PC32	fpu32ToInternal(unsigned int)
10001d05:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001d0b:	50                   	push   eax
10001d0c:	b9 03 00 00 00       	mov    ecx,0x3
10001d11:	89 e7                	mov    edi,esp
10001d13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d15:	83 ec 0c             	sub    esp,0xc
10001d18:	b9 03 00 00 00       	mov    ecx,0x3
10001d1d:	89 e7                	mov    edi,esp
10001d1f:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d25:	89 c6                	mov    esi,eax
10001d27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d29:	52                   	push   edx
10001d2a:	e8 fc ff ff ff       	call   10001d2b <x87Handler(regs*)+0x1153>	10001d2b: R_386_PC32	fpuDivide(_Float80, _Float80)
10001d2f:	83 c4 20             	add    esp,0x20
10001d32:	b9 03 00 00 00       	mov    ecx,0x3
10001d37:	89 e7                	mov    edi,esp
10001d39:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001d3f:	e9 aa 04 00 00       	jmp    100021ee <x87Handler(regs*)+0x1616>
10001d44:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001d4a:	80 fa 01             	cmp    dl,0x1
10001d4d:	75 69                	jne    10001db8 <x87Handler(regs*)+0x11e0>
10001d4f:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001d55:	51                   	push   ecx
10001d56:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001d5c:	8b 00                	mov    eax,DWORD PTR [eax]
10001d5e:	31 d2                	xor    edx,edx
10001d60:	52                   	push   edx
10001d61:	50                   	push   eax
10001d62:	56                   	push   esi
10001d63:	e8 fc ff ff ff       	call   10001d64 <x87Handler(regs*)+0x118c>	10001d64: R_386_PC32	fpuLongToFloat(long long)
10001d68:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001d6e:	83 ec 0c             	sub    esp,0xc
10001d71:	6a 00                	push   0x0
10001d73:	52                   	push   edx
10001d74:	e8 fc ff ff ff       	call   10001d75 <x87Handler(regs*)+0x119d>	10001d75: R_386_PC32	fpuGetReg(int)
10001d79:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001d7f:	57                   	push   edi
10001d80:	b9 03 00 00 00       	mov    ecx,0x3
10001d85:	89 e7                	mov    edi,esp
10001d87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d89:	83 ec 0c             	sub    esp,0xc
10001d8c:	b9 03 00 00 00       	mov    ecx,0x3
10001d91:	89 e7                	mov    edi,esp
10001d93:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001d99:	89 d6                	mov    esi,edx
10001d9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d9d:	50                   	push   eax
10001d9e:	e8 fc ff ff ff       	call   10001d9f <x87Handler(regs*)+0x11c7>	10001d9f: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001da3:	83 c4 20             	add    esp,0x20
10001da6:	b9 03 00 00 00       	mov    ecx,0x3
10001dab:	89 e7                	mov    edi,esp
10001dad:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001db3:	e9 d3 03 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001db8:	31 c0                	xor    eax,eax
10001dba:	80 fa 04             	cmp    dl,0x4
10001dbd:	0f 85 0b 05 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10001dc3:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001dc9:	50                   	push   eax
10001dca:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001dd0:	8b 00                	mov    eax,DWORD PTR [eax]
10001dd2:	31 d2                	xor    edx,edx
10001dd4:	52                   	push   edx
10001dd5:	50                   	push   eax
10001dd6:	56                   	push   esi
10001dd7:	e8 fc ff ff ff       	call   10001dd8 <x87Handler(regs*)+0x1200>	10001dd8: R_386_PC32	fpuLongToFloat(long long)
10001ddc:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10001de2:	83 ec 0c             	sub    esp,0xc
10001de5:	6a 00                	push   0x0
10001de7:	52                   	push   edx
10001de8:	e8 fc ff ff ff       	call   10001de9 <x87Handler(regs*)+0x1211>	10001de9: R_386_PC32	fpuGetReg(int)
10001ded:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10001df3:	52                   	push   edx
10001df4:	b9 03 00 00 00       	mov    ecx,0x3
10001df9:	89 e7                	mov    edi,esp
10001dfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dfd:	83 ec 0c             	sub    esp,0xc
10001e00:	b9 03 00 00 00       	mov    ecx,0x3
10001e05:	89 e7                	mov    edi,esp
10001e07:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10001e0d:	89 d6                	mov    esi,edx
10001e0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e11:	50                   	push   eax
10001e12:	e8 fc ff ff ff       	call   10001e13 <x87Handler(regs*)+0x123b>	10001e13: R_386_PC32	fpuSub(_Float80, _Float80)
10001e17:	83 c4 20             	add    esp,0x20
10001e1a:	b9 03 00 00 00       	mov    ecx,0x3
10001e1f:	89 e7                	mov    edi,esp
10001e21:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10001e27:	e9 5f 03 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001e2c:	31 c0                	xor    eax,eax
10001e2e:	80 fa db             	cmp    dl,0xdb
10001e31:	0f 85 97 04 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10001e37:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001e3d:	84 d2                	test   dl,dl
10001e3f:	0f 85 cf f1 ff ff    	jne    10001014 <x87Handler(regs*)+0x43c>
10001e45:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001e4b:	50                   	push   eax
10001e4c:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001e52:	8b 00                	mov    eax,DWORD PTR [eax]
10001e54:	31 d2                	xor    edx,edx
10001e56:	52                   	push   edx
10001e57:	50                   	push   eax
10001e58:	e9 2f 04 00 00       	jmp    1000228c <x87Handler(regs*)+0x16b4>
10001e5d:	31 c0                	xor    eax,eax
10001e5f:	80 fa 03             	cmp    dl,0x3
10001e62:	0f 85 66 04 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10001e68:	8d b5 98 fe ff ff    	lea    esi,[ebp-0x168]
10001e6e:	83 ec 0c             	sub    esp,0xc
10001e71:	56                   	push   esi
10001e72:	e8 fc ff ff ff       	call   10001e73 <x87Handler(regs*)+0x129b>	10001e73: R_386_PC32	fpuPop()
10001e77:	83 ec 14             	sub    esp,0x14
10001e7a:	b9 03 00 00 00       	mov    ecx,0x3
10001e7f:	89 e7                	mov    edi,esp
10001e81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e83:	e8 fc ff ff ff       	call   10001e84 <x87Handler(regs*)+0x12ac>	10001e84: R_386_PC32	fpuFloatToLong(_Float80)
10001e88:	83 c4 20             	add    esp,0x20
10001e8b:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10001e91:	89 01                	mov    DWORD PTR [ecx],eax
10001e93:	e9 b1 f1 ff ff       	jmp    10001049 <x87Handler(regs*)+0x471>
10001e98:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001e9e:	84 d2                	test   dl,dl
10001ea0:	75 68                	jne    10001f0a <x87Handler(regs*)+0x1332>
10001ea2:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001ea8:	51                   	push   ecx
10001ea9:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001eaf:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001eb2:	ff 30                	push   DWORD PTR [eax]
10001eb4:	56                   	push   esi
10001eb5:	e8 fc ff ff ff       	call   10001eb6 <x87Handler(regs*)+0x12de>	10001eb6: R_386_PC32	fpu64ToInternal(unsigned long long)
10001eba:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001ec0:	83 ec 0c             	sub    esp,0xc
10001ec3:	6a 00                	push   0x0
10001ec5:	52                   	push   edx
10001ec6:	e8 fc ff ff ff       	call   10001ec7 <x87Handler(regs*)+0x12ef>	10001ec7: R_386_PC32	fpuGetReg(int)
10001ecb:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001ed1:	57                   	push   edi
10001ed2:	b9 03 00 00 00       	mov    ecx,0x3
10001ed7:	89 e7                	mov    edi,esp
10001ed9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001edb:	83 ec 0c             	sub    esp,0xc
10001ede:	b9 03 00 00 00       	mov    ecx,0x3
10001ee3:	89 e7                	mov    edi,esp
10001ee5:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001eeb:	89 d6                	mov    esi,edx
10001eed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001eef:	50                   	push   eax
10001ef0:	e8 fc ff ff ff       	call   10001ef1 <x87Handler(regs*)+0x1319>	10001ef1: R_386_PC32	fpuAdd(_Float80, _Float80)
10001ef5:	83 c4 20             	add    esp,0x20
10001ef8:	b9 03 00 00 00       	mov    ecx,0x3
10001efd:	89 e7                	mov    edi,esp
10001eff:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f05:	e9 81 02 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001f0a:	80 fa 01             	cmp    dl,0x1
10001f0d:	75 68                	jne    10001f77 <x87Handler(regs*)+0x139f>
10001f0f:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f15:	50                   	push   eax
10001f16:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001f1c:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f1f:	ff 30                	push   DWORD PTR [eax]
10001f21:	56                   	push   esi
10001f22:	e8 fc ff ff ff       	call   10001f23 <x87Handler(regs*)+0x134b>	10001f23: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f27:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10001f2d:	83 ec 0c             	sub    esp,0xc
10001f30:	6a 00                	push   0x0
10001f32:	52                   	push   edx
10001f33:	e8 fc ff ff ff       	call   10001f34 <x87Handler(regs*)+0x135c>	10001f34: R_386_PC32	fpuGetReg(int)
10001f38:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10001f3e:	52                   	push   edx
10001f3f:	b9 03 00 00 00       	mov    ecx,0x3
10001f44:	89 e7                	mov    edi,esp
10001f46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f48:	83 ec 0c             	sub    esp,0xc
10001f4b:	b9 03 00 00 00       	mov    ecx,0x3
10001f50:	89 e7                	mov    edi,esp
10001f52:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10001f58:	89 d6                	mov    esi,edx
10001f5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f5c:	50                   	push   eax
10001f5d:	e8 fc ff ff ff       	call   10001f5e <x87Handler(regs*)+0x1386>	10001f5e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f62:	83 c4 20             	add    esp,0x20
10001f65:	b9 03 00 00 00       	mov    ecx,0x3
10001f6a:	89 e7                	mov    edi,esp
10001f6c:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10001f72:	e9 14 02 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
10001f77:	80 fa 02             	cmp    dl,0x2
10001f7a:	75 5e                	jne    10001fda <x87Handler(regs*)+0x1402>
10001f7c:	8d b5 ec fe ff ff    	lea    esi,[ebp-0x114]
10001f82:	50                   	push   eax
10001f83:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001f89:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f8c:	ff 30                	push   DWORD PTR [eax]
10001f8e:	56                   	push   esi
10001f8f:	e8 fc ff ff ff       	call   10001f90 <x87Handler(regs*)+0x13b8>	10001f90: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f94:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001f9a:	83 ec 0c             	sub    esp,0xc
10001f9d:	6a 00                	push   0x0
10001f9f:	50                   	push   eax
10001fa0:	e8 fc ff ff ff       	call   10001fa1 <x87Handler(regs*)+0x13c9>	10001fa1: R_386_PC32	fpuGetReg(int)
10001fa5:	50                   	push   eax
10001fa6:	50                   	push   eax
10001fa7:	b9 03 00 00 00       	mov    ecx,0x3
10001fac:	89 e7                	mov    edi,esp
10001fae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fb0:	83 ec 0c             	sub    esp,0xc
10001fb3:	b9 03 00 00 00       	mov    ecx,0x3
10001fb8:	89 e7                	mov    edi,esp
10001fba:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001fc0:	89 c6                	mov    esi,eax
10001fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fc4:	e8 fc ff ff ff       	call   10001fc5 <x87Handler(regs*)+0x13ed>	10001fc5: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fc9:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001fcf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001fd2:	83 c4 30             	add    esp,0x30
10001fd5:	e9 6a ed ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001fda:	80 fa 03             	cmp    dl,0x3
10001fdd:	75 6a                	jne    10002049 <x87Handler(regs*)+0x1471>
10001fdf:	8d b5 04 ff ff ff    	lea    esi,[ebp-0xfc]
10001fe5:	51                   	push   ecx
10001fe6:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001fec:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001fef:	ff 30                	push   DWORD PTR [eax]
10001ff1:	56                   	push   esi
10001ff2:	e8 fc ff ff ff       	call   10001ff3 <x87Handler(regs*)+0x141b>	10001ff3: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ff7:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10001ffd:	83 ec 0c             	sub    esp,0xc
10002000:	6a 00                	push   0x0
10002002:	50                   	push   eax
10002003:	e8 fc ff ff ff       	call   10002004 <x87Handler(regs*)+0x142c>	10002004: R_386_PC32	fpuGetReg(int)
10002008:	57                   	push   edi
10002009:	57                   	push   edi
1000200a:	b9 03 00 00 00       	mov    ecx,0x3
1000200f:	89 e7                	mov    edi,esp
10002011:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002013:	83 ec 0c             	sub    esp,0xc
10002016:	b9 03 00 00 00       	mov    ecx,0x3
1000201b:	89 e7                	mov    edi,esp
1000201d:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002023:	89 c6                	mov    esi,eax
10002025:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002027:	e8 fc ff ff ff       	call   10002028 <x87Handler(regs*)+0x1450>	10002028: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000202c:	8d 45 dc             	lea    eax,[ebp-0x24]
1000202f:	83 c4 24             	add    esp,0x24
10002032:	50                   	push   eax
10002033:	e8 fc ff ff ff       	call   10002034 <x87Handler(regs*)+0x145c>	10002034: R_386_PC32	fpuPop()
10002038:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000203e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002041:	83 c4 0c             	add    esp,0xc
10002044:	e9 fb ec ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10002049:	80 fa 04             	cmp    dl,0x4
1000204c:	75 68                	jne    100020b6 <x87Handler(regs*)+0x14de>
1000204e:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
10002054:	50                   	push   eax
10002055:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
1000205b:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000205e:	ff 30                	push   DWORD PTR [eax]
10002060:	56                   	push   esi
10002061:	e8 fc ff ff ff       	call   10002062 <x87Handler(regs*)+0x148a>	10002062: R_386_PC32	fpu64ToInternal(unsigned long long)
10002066:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
1000206c:	83 ec 0c             	sub    esp,0xc
1000206f:	6a 00                	push   0x0
10002071:	52                   	push   edx
10002072:	e8 fc ff ff ff       	call   10002073 <x87Handler(regs*)+0x149b>	10002073: R_386_PC32	fpuGetReg(int)
10002077:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
1000207d:	52                   	push   edx
1000207e:	b9 03 00 00 00       	mov    ecx,0x3
10002083:	89 e7                	mov    edi,esp
10002085:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002087:	83 ec 0c             	sub    esp,0xc
1000208a:	b9 03 00 00 00       	mov    ecx,0x3
1000208f:	89 e7                	mov    edi,esp
10002091:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002097:	89 d6                	mov    esi,edx
10002099:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000209b:	50                   	push   eax
1000209c:	e8 fc ff ff ff       	call   1000209d <x87Handler(regs*)+0x14c5>	1000209d: R_386_PC32	fpuSub(_Float80, _Float80)
100020a1:	83 c4 20             	add    esp,0x20
100020a4:	b9 03 00 00 00       	mov    ecx,0x3
100020a9:	89 e7                	mov    edi,esp
100020ab:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
100020b1:	e9 d5 00 00 00       	jmp    1000218b <x87Handler(regs*)+0x15b3>
100020b6:	80 fa 05             	cmp    dl,0x5
100020b9:	75 68                	jne    10002123 <x87Handler(regs*)+0x154b>
100020bb:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
100020c1:	51                   	push   ecx
100020c2:	51                   	push   ecx
100020c3:	6a 00                	push   0x0
100020c5:	56                   	push   esi
100020c6:	e8 fc ff ff ff       	call   100020c7 <x87Handler(regs*)+0x14ef>	100020c7: R_386_PC32	fpuGetReg(int)
100020cb:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100020d1:	57                   	push   edi
100020d2:	57                   	push   edi
100020d3:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
100020d9:	ff 77 04             	push   DWORD PTR [edi+0x4]
100020dc:	ff 37                	push   DWORD PTR [edi]
100020de:	50                   	push   eax
100020df:	e8 fc ff ff ff       	call   100020e0 <x87Handler(regs*)+0x1508>	100020e0: R_386_PC32	fpu64ToInternal(unsigned long long)
100020e4:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100020ea:	50                   	push   eax
100020eb:	b9 03 00 00 00       	mov    ecx,0x3
100020f0:	89 e7                	mov    edi,esp
100020f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020f4:	83 ec 0c             	sub    esp,0xc
100020f7:	b9 03 00 00 00       	mov    ecx,0x3
100020fc:	89 e7                	mov    edi,esp
100020fe:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10002104:	89 c6                	mov    esi,eax
10002106:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002108:	52                   	push   edx
10002109:	e8 fc ff ff ff       	call   1000210a <x87Handler(regs*)+0x1532>	1000210a: R_386_PC32	fpuSub(_Float80, _Float80)
1000210e:	83 c4 20             	add    esp,0x20
10002111:	b9 03 00 00 00       	mov    ecx,0x3
10002116:	89 e7                	mov    edi,esp
10002118:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
1000211e:	e9 cb 00 00 00       	jmp    100021ee <x87Handler(regs*)+0x1616>
10002123:	80 fa 06             	cmp    dl,0x6
10002126:	75 67                	jne    1000218f <x87Handler(regs*)+0x15b7>
10002128:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
1000212e:	57                   	push   edi
1000212f:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002135:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002138:	ff 30                	push   DWORD PTR [eax]
1000213a:	56                   	push   esi
1000213b:	e8 fc ff ff ff       	call   1000213c <x87Handler(regs*)+0x1564>	1000213c: R_386_PC32	fpu64ToInternal(unsigned long long)
10002140:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002146:	83 ec 0c             	sub    esp,0xc
10002149:	6a 00                	push   0x0
1000214b:	52                   	push   edx
1000214c:	e8 fc ff ff ff       	call   1000214d <x87Handler(regs*)+0x1575>	1000214d: R_386_PC32	fpuGetReg(int)
10002151:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002157:	52                   	push   edx
10002158:	b9 03 00 00 00       	mov    ecx,0x3
1000215d:	89 e7                	mov    edi,esp
1000215f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002161:	83 ec 0c             	sub    esp,0xc
10002164:	b9 03 00 00 00       	mov    ecx,0x3
10002169:	89 e7                	mov    edi,esp
1000216b:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002171:	89 d6                	mov    esi,edx
10002173:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002175:	50                   	push   eax
10002176:	e8 fc ff ff ff       	call   10002177 <x87Handler(regs*)+0x159f>	10002177: R_386_PC32	fpuDivide(_Float80, _Float80)
1000217b:	83 c4 20             	add    esp,0x20
1000217e:	b9 03 00 00 00       	mov    ecx,0x3
10002183:	89 e7                	mov    edi,esp
10002185:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
1000218b:	89 c6                	mov    esi,eax
1000218d:	eb 61                	jmp    100021f0 <x87Handler(regs*)+0x1618>
1000218f:	31 c0                	xor    eax,eax
10002191:	80 fa 07             	cmp    dl,0x7
10002194:	0f 85 34 01 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
1000219a:	8d 75 88             	lea    esi,[ebp-0x78]
1000219d:	57                   	push   edi
1000219e:	57                   	push   edi
1000219f:	6a 00                	push   0x0
100021a1:	56                   	push   esi
100021a2:	e8 fc ff ff ff       	call   100021a3 <x87Handler(regs*)+0x15cb>	100021a3: R_386_PC32	fpuGetReg(int)
100021a7:	8d 45 94             	lea    eax,[ebp-0x6c]
100021aa:	52                   	push   edx
100021ab:	52                   	push   edx
100021ac:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
100021b2:	ff 72 04             	push   DWORD PTR [edx+0x4]
100021b5:	ff 32                	push   DWORD PTR [edx]
100021b7:	50                   	push   eax
100021b8:	e8 fc ff ff ff       	call   100021b9 <x87Handler(regs*)+0x15e1>	100021b9: R_386_PC32	fpu64ToInternal(unsigned long long)
100021bd:	8d 55 a0             	lea    edx,[ebp-0x60]
100021c0:	51                   	push   ecx
100021c1:	b9 03 00 00 00       	mov    ecx,0x3
100021c6:	89 e7                	mov    edi,esp
100021c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021ca:	83 ec 0c             	sub    esp,0xc
100021cd:	b9 03 00 00 00       	mov    ecx,0x3
100021d2:	89 e7                	mov    edi,esp
100021d4:	8d 45 94             	lea    eax,[ebp-0x6c]
100021d7:	89 c6                	mov    esi,eax
100021d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021db:	52                   	push   edx
100021dc:	e8 fc ff ff ff       	call   100021dd <x87Handler(regs*)+0x1605>	100021dd: R_386_PC32	fpuDivide(_Float80, _Float80)
100021e1:	83 c4 20             	add    esp,0x20
100021e4:	b9 03 00 00 00       	mov    ecx,0x3
100021e9:	89 e7                	mov    edi,esp
100021eb:	8d 55 a0             	lea    edx,[ebp-0x60]
100021ee:	89 d6                	mov    esi,edx
100021f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021f2:	6a 00                	push   0x0
100021f4:	e8 fc ff ff ff       	call   100021f5 <x87Handler(regs*)+0x161d>	100021f5: R_386_PC32	fpuSetReg(int, _Float80)
100021f9:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100021ff:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002202:	e9 3a eb ff ff       	jmp    10000d41 <x87Handler(regs*)+0x169>
10002207:	80 fa 02             	cmp    dl,0x2
1000220a:	75 2e                	jne    1000223a <x87Handler(regs*)+0x1662>
1000220c:	8d 75 b8             	lea    esi,[ebp-0x48]
1000220f:	52                   	push   edx
10002210:	52                   	push   edx
10002211:	6a 00                	push   0x0
10002213:	56                   	push   esi
10002214:	e8 fc ff ff ff       	call   10002215 <x87Handler(regs*)+0x163d>	10002215: R_386_PC32	fpuGetReg(int)
10002219:	83 ec 14             	sub    esp,0x14
1000221c:	b9 03 00 00 00       	mov    ecx,0x3
10002221:	89 e7                	mov    edi,esp
10002223:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002225:	e8 fc ff ff ff       	call   10002226 <x87Handler(regs*)+0x164e>	10002226: R_386_PC32	fpuInternalTo64(_Float80)
1000222a:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10002230:	89 01                	mov    DWORD PTR [ecx],eax
10002232:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10002235:	e9 c9 ed ff ff       	jmp    10001003 <x87Handler(regs*)+0x42b>
1000223a:	31 c0                	xor    eax,eax
1000223c:	80 fa 03             	cmp    dl,0x3
1000223f:	0f 85 89 00 00 00    	jne    100022ce <x87Handler(regs*)+0x16f6>
10002245:	8d 75 c4             	lea    esi,[ebp-0x3c]
10002248:	83 ec 0c             	sub    esp,0xc
1000224b:	56                   	push   esi
1000224c:	e8 fc ff ff ff       	call   1000224d <x87Handler(regs*)+0x1675>	1000224d: R_386_PC32	fpuPop()
10002251:	83 ec 14             	sub    esp,0x14
10002254:	b9 03 00 00 00       	mov    ecx,0x3
10002259:	89 e7                	mov    edi,esp
1000225b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000225d:	e8 fc ff ff ff       	call   1000225e <x87Handler(regs*)+0x1686>	1000225e: R_386_PC32	fpuInternalTo64(_Float80)
10002262:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10002268:	89 07                	mov    DWORD PTR [edi],eax
1000226a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
1000226d:	e9 91 ed ff ff       	jmp    10001003 <x87Handler(regs*)+0x42b>
10002272:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10002278:	80 fa 05             	cmp    dl,0x5
1000227b:	75 1a                	jne    10002297 <x87Handler(regs*)+0x16bf>
1000227d:	8d 75 d0             	lea    esi,[ebp-0x30]
10002280:	50                   	push   eax
10002281:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002287:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000228a:	ff 30                	push   DWORD PTR [eax]
1000228c:	56                   	push   esi
1000228d:	e8 fc ff ff ff       	call   1000228e <x87Handler(regs*)+0x16b6>	1000228e: R_386_PC32	fpuULongToFloat(unsigned long long)
10002292:	e9 5b ed ff ff       	jmp    10000ff2 <x87Handler(regs*)+0x41a>
10002297:	31 c0                	xor    eax,eax
10002299:	80 fa 07             	cmp    dl,0x7
1000229c:	75 30                	jne    100022ce <x87Handler(regs*)+0x16f6>
1000229e:	8d 75 dc             	lea    esi,[ebp-0x24]
100022a1:	83 ec 0c             	sub    esp,0xc
100022a4:	56                   	push   esi
100022a5:	e8 fc ff ff ff       	call   100022a6 <x87Handler(regs*)+0x16ce>	100022a6: R_386_PC32	fpuPop()
100022aa:	83 ec 14             	sub    esp,0x14
100022ad:	b9 03 00 00 00       	mov    ecx,0x3
100022b2:	89 e7                	mov    edi,esp
100022b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022b6:	e8 fc ff ff ff       	call   100022b7 <x87Handler(regs*)+0x16df>	100022b7: R_386_PC32	fpuFloatToLong(_Float80)
100022bb:	83 c4 20             	add    esp,0x20
100022be:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
100022c4:	89 01                	mov    DWORD PTR [ecx],eax
100022c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
100022c9:	e9 7b ed ff ff       	jmp    10001049 <x87Handler(regs*)+0x471>
100022ce:	8d 65 f4             	lea    esp,[ebp-0xc]
100022d1:	5b                   	pop    ebx
100022d2:	5e                   	pop    esi
100022d3:	5f                   	pop    edi
100022d4:	5d                   	pop    ebp
100022d5:	c3                   	ret    

100022d6 <begin()>:
100022d6:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100022d8: R_386_32	x87FaultIntercept
	100022dc: R_386_32	x87Handler(regs*)
100022e0:	c3                   	ret    

100022e1 <_GLOBAL__sub_I__Z5startv>:
100022e1:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	100022e3: R_386_32	fpuState
100022eb:	c3                   	ret    
100022ec:	65 6d                	gs ins DWORD PTR es:[edi],dx
100022ee:	38 30                	cmp    BYTE PTR [eax],dh
100022f0:	38 37                	cmp    BYTE PTR [edi],dh
100022f2:	20 62 61             	and    BYTE PTR [edx+0x61],ah
100022f5:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100022f9:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
100022fd:	74 00                	je     100022ff <_GLOBAL__sub_I__Z5startv+0x1e>
100022ff:	72 2d                	jb     1000232e <_GLOBAL__sub_I__Z5startv+0x4d>
10002301:	3e 65 73 70          	ds gs jae 10002375 <_GLOBAL__sub_I__Z5startv+0x94>
10002305:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
1000230b:	58                   	pop    eax
1000230c:	0a 00                	or     al,BYTE PTR [eax]
1000230e:	78 38                	js     10002348 <_GLOBAL__sub_I__Z5startv+0x67>
10002310:	37                   	aaa    
10002311:	20 68 61             	and    BYTE PTR [eax+0x61],ch
10002314:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002315:	64 6c                	fs ins BYTE PTR es:[edi],dx
10002317:	65 72 20             	gs jb  1000233a <_GLOBAL__sub_I__Z5startv+0x59>
1000231a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
1000231d:	6c                   	ins    BYTE PTR es:[edi],dx
1000231e:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
10002323:	74 68                	je     1000238d <_GLOBAL__sub_I__Z5startv+0xac>
10002325:	20 66 61             	and    BYTE PTR [esi+0x61],ah
10002328:	75 6c                	jne    10002396 <_GLOBAL__sub_I__Z5startv+0xb5>
1000232a:	74 69                	je     10002395 <_GLOBAL__sub_I__Z5startv+0xb4>
1000232c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000232d:	67 20 45 49          	and    BYTE PTR [di+0x49],al
10002331:	50                   	push   eax
10002332:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
10002335:	20 30                	and    BYTE PTR [eax],dh
10002337:	78 25                	js     1000235e <_GLOBAL__sub_I__Z5startv+0x7d>
10002339:	58                   	pop    eax
1000233a:	0a 00                	or     al,BYTE PTR [eax]
1000233c:	78 38                	js     10002376 <_GLOBAL__sub_I__Z5startv+0x95>
1000233e:	37                   	aaa    
1000233f:	3a 20                	cmp    ah,BYTE PTR [eax]
10002341:	25 58 20 25 58       	and    eax,0x58252058
10002346:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
1000234c:	0a 00                	or     al,BYTE PTR [eax]
1000234e:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
10002353:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
10002358:	64 72 65             	fs jb  100023c0 <_DYNAMIC+0x14>
1000235b:	73 73                	jae    100023d0 <_DYNAMIC+0x24>
1000235d:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10002363:	58                   	pop    eax
10002364:	0a 00                	or     al,BYTE PTR [eax]
10002366:	66 90                	xchg   ax,ax
10002368:	bb 0c 00 10 eb       	mov    ebx,0xeb10000c	10002368: R_386_32	.text
	1000236c: R_386_32	.text
1000236d:	0c 00                	or     al,0x0
1000236f:	10 ab 0e 00 10 ab    	adc    BYTE PTR [ebx-0x54effff2],ch	10002370: R_386_32	.text
	10002374: R_386_32	.text
10002375:	0e                   	push   cs
10002376:	00 10                	add    BYTE PTR [eax],dl
10002378:	ab                   	stos   DWORD PTR es:[edi],eax	10002378: R_386_32	.text
10002379:	0e                   	push   cs
1000237a:	00 10                	add    BYTE PTR [eax],dl
1000237c:	ab                   	stos   DWORD PTR es:[edi],eax	1000237c: R_386_32	.text
1000237d:	0e                   	push   cs
1000237e:	00 10                	add    BYTE PTR [eax],dl
10002380:	ab                   	stos   DWORD PTR es:[edi],eax	10002380: R_386_32	.text
10002381:	0e                   	push   cs
10002382:	00 10                	add    BYTE PTR [eax],dl
10002384:	ab                   	stos   DWORD PTR es:[edi],eax	10002384: R_386_32	.text
10002385:	0e                   	push   cs
10002386:	00 10                	add    BYTE PTR [eax],dl
10002388:	4b                   	dec    ebx	10002388: R_386_32	.text
10002389:	0d 00 10 7a 0d       	or     eax,0xd7a1000	1000238c: R_386_32	.text
1000238e:	00 10                	add    BYTE PTR [eax],dl
10002390:	b7 0d                	mov    bh,0xd	10002390: R_386_32	.text
10002392:	00 10                	add    BYTE PTR [eax],dl
10002394:	e6 0d                	out    0xd,al	10002394: R_386_32	.text
10002396:	00 10                	add    BYTE PTR [eax],dl
10002398:	15 0e 00 10 47       	adc    eax,0x4710000e	10002398: R_386_32	.text
	1000239c: R_386_32	.text
1000239d:	0e                   	push   cs
1000239e:	00 10                	add    BYTE PTR [eax],dl
100023a0:	79 0e                	jns    100023b0 <_DYNAMIC+0x4>	100023a0: R_386_32	.text
100023a2:	00 10                	add    BYTE PTR [eax],dl
