
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuUnorderedCompare(_Float80, _Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	83 ec 44             	sub    esp,0x44
10000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000277:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000027a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000280:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000284:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000287:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
1000028a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
1000028d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000290:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000294:	8d 7d c0             	lea    edi,[ebp-0x40]
10000297:	b9 03 00 00 00       	mov    ecx,0x3
1000029c:	8d 75 08             	lea    esi,[ebp+0x8]
1000029f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002a1:	8d 7d cc             	lea    edi,[ebp-0x34]
100002a4:	8d 75 14             	lea    esi,[ebp+0x14]
100002a7:	b9 03 00 00 00       	mov    ecx,0x3
100002ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ae:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002b1:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002b4:	89 c2                	mov    edx,eax
100002b6:	31 da                	xor    edx,ebx
100002b8:	09 d1                	or     ecx,edx
100002ba:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002be:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002ca:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002d0:	39 d1                	cmp    ecx,edx
100002d2:	75 08                	jne    100002dc <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002d4:	31 d2                	xor    edx,edx
100002d6:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
100002da:	75 1c                	jne    100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002dc:	b2 01                	mov    dl,0x1
100002de:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
100002e2:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
100002e6:	72 10                	jb     100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002e8:	0f 94 c1             	sete   cl
100002eb:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
100002ee:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
100002f1:	19 d8                	sbb    eax,ebx
100002f3:	0f 92 c2             	setb   dl
100002f6:	21 ca                	and    edx,ecx
100002f8:	a0 01 00 00 00       	mov    al,ds:0x1	100002f9: R_386_32	fpuState
100002fd:	83 e0 ba             	and    eax,0xffffffba
10000300:	8d 7d d8             	lea    edi,[ebp-0x28]
10000303:	b9 03 00 00 00       	mov    ecx,0x3
10000308:	8d 75 08             	lea    esi,[ebp+0x8]
1000030b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000030d:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000310:	b9 03 00 00 00       	mov    ecx,0x3
10000315:	8d 75 14             	lea    esi,[ebp+0x14]
10000318:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000031a:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
1000031d:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000323:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000326:	81 e1 ff ff ff 00    	and    ecx,0xffffff
1000032c:	39 cb                	cmp    ebx,ecx
1000032e:	0f 94 c1             	sete   cl
10000331:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000334:	c1 e1 06             	shl    ecx,0x6
10000337:	09 d0                	or     eax,edx
10000339:	09 c8                	or     eax,ecx
1000033b:	a2 01 00 00 00       	mov    ds:0x1,al	1000033c: R_386_32	fpuState
10000340:	83 c4 44             	add    esp,0x44
10000343:	5b                   	pop    ebx
10000344:	5e                   	pop    esi
10000345:	5f                   	pop    edi
10000346:	5d                   	pop    ebp
10000347:	c3                   	ret    

10000348 <fpuNormalise(_Float80)>:
10000348:	55                   	push   ebp
10000349:	89 e5                	mov    ebp,esp
1000034b:	57                   	push   edi
1000034c:	56                   	push   esi
1000034d:	53                   	push   ebx
1000034e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000354:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000357:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000035a:	8d 72 01             	lea    esi,[edx+0x1]
1000035d:	89 df                	mov    edi,ebx
1000035f:	c1 ef 1e             	shr    edi,0x1e
10000362:	74 0e                	je     10000372 <fpuNormalise(_Float80)+0x2a>
10000364:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000368:	d1 eb                	shr    ebx,1
1000036a:	89 f2                	mov    edx,esi
1000036c:	eb ec                	jmp    1000035a <fpuNormalise(_Float80)+0x12>
1000036e:	01 c9                	add    ecx,ecx
10000370:	11 db                	adc    ebx,ebx
10000372:	0f ba e3 1d          	bt     ebx,0x1d
10000376:	72 1d                	jb     10000395 <fpuNormalise(_Float80)+0x4d>
10000378:	4a                   	dec    edx
10000379:	89 de                	mov    esi,ebx
1000037b:	09 ce                	or     esi,ecx
1000037d:	75 ef                	jne    1000036e <fpuNormalise(_Float80)+0x26>
1000037f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000386:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
1000038d:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000393:	eb 0a                	jmp    1000039f <fpuNormalise(_Float80)+0x57>
10000395:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000398:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
1000039b:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000039f:	8d 75 0c             	lea    esi,[ebp+0xc]
100003a2:	b9 03 00 00 00       	mov    ecx,0x3
100003a7:	89 c7                	mov    edi,eax
100003a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ab:	5b                   	pop    ebx
100003ac:	5e                   	pop    esi
100003ad:	5f                   	pop    edi
100003ae:	5d                   	pop    ebp
100003af:	c2 04 00             	ret    0x4

100003b2 <fpuAdd(_Float80, _Float80)>:
100003b2:	55                   	push   ebp
100003b3:	89 e5                	mov    ebp,esp
100003b5:	57                   	push   edi
100003b6:	56                   	push   esi
100003b7:	53                   	push   ebx
100003b8:	83 ec 2c             	sub    esp,0x2c
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003c1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003c4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003ca:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003ce:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003d1:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003d4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100003d7:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100003da:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100003dd:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100003e0:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003e4:	66 39 c8             	cmp    ax,cx
100003e7:	72 2d                	jb     10000416 <fpuAdd(_Float80, _Float80)+0x64>
100003e9:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100003ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100003ef:	19 f8                	sbb    eax,edi
100003f1:	73 09                	jae    100003fc <fpuAdd(_Float80, _Float80)+0x4a>
100003f3:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003f7:	66 39 c8             	cmp    ax,cx
100003fa:	74 24                	je     10000420 <fpuAdd(_Float80, _Float80)+0x6e>
100003fc:	88 d8                	mov    al,bl
100003fe:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000401:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000404:	89 f0                	mov    eax,esi
10000406:	89 fa                	mov    edx,edi
10000408:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000040b:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000040e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000411:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000414:	eb 0a                	jmp    10000420 <fpuAdd(_Float80, _Float80)+0x6e>
10000416:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000041a:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000041e:	89 c1                	mov    ecx,eax
10000420:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000423:	29 c8                	sub    eax,ecx
10000425:	88 c1                	mov    cl,al
10000427:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000042a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000042d:	0f ad d0             	shrd   eax,edx,cl
10000430:	d3 ea                	shr    edx,cl
10000432:	f6 c1 20             	test   cl,0x20
10000435:	74 04                	je     1000043b <fpuAdd(_Float80, _Float80)+0x89>
10000437:	89 d0                	mov    eax,edx
10000439:	31 d2                	xor    edx,edx
1000043b:	89 d1                	mov    ecx,edx
1000043d:	89 c2                	mov    edx,eax
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000447:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000044a:	75 13                	jne    1000045f <fpuAdd(_Float80, _Float80)+0xad>
1000044c:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
1000044f:	89 d0                	mov    eax,edx
10000451:	89 ca                	mov    edx,ecx
10000453:	01 f0                	add    eax,esi
10000455:	11 fa                	adc    edx,edi
10000457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000045a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000045d:	eb 58                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000045f:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000463:	74 24                	je     10000489 <fpuAdd(_Float80, _Float80)+0xd7>
10000465:	39 d6                	cmp    esi,edx
10000467:	89 f8                	mov    eax,edi
10000469:	19 c8                	sbb    eax,ecx
1000046b:	89 d0                	mov    eax,edx
1000046d:	89 ca                	mov    edx,ecx
1000046f:	73 0c                	jae    1000047d <fpuAdd(_Float80, _Float80)+0xcb>
10000471:	29 f0                	sub    eax,esi
10000473:	19 fa                	sbb    edx,edi
10000475:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000478:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000047b:	eb 26                	jmp    100004a3 <fpuAdd(_Float80, _Float80)+0xf1>
1000047d:	29 c6                	sub    esi,eax
1000047f:	19 cf                	sbb    edi,ecx
10000481:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000484:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000487:	eb 2a                	jmp    100004b3 <fpuAdd(_Float80, _Float80)+0x101>
10000489:	84 db                	test   bl,bl
1000048b:	74 2a                	je     100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000048d:	39 f2                	cmp    edx,esi
1000048f:	89 c8                	mov    eax,ecx
10000491:	19 f8                	sbb    eax,edi
10000493:	89 d0                	mov    eax,edx
10000495:	89 ca                	mov    edx,ecx
10000497:	73 10                	jae    100004a9 <fpuAdd(_Float80, _Float80)+0xf7>
10000499:	29 c6                	sub    esi,eax
1000049b:	19 cf                	sbb    edi,ecx
1000049d:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004a0:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004a3:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004a7:	eb 0e                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
100004a9:	29 f0                	sub    eax,esi
100004ab:	19 fa                	sbb    edx,edi
100004ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004b0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004b7:	83 ec 0c             	sub    esp,0xc
100004ba:	8d 75 dc             	lea    esi,[ebp-0x24]
100004bd:	b9 03 00 00 00       	mov    ecx,0x3
100004c2:	89 e7                	mov    edi,esp
100004c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004c9:	e8 fc ff ff ff       	call   100004ca <fpuAdd(_Float80, _Float80)+0x118>	100004ca: R_386_PC32	fpuNormalise(_Float80)
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004d4:	5b                   	pop    ebx
100004d5:	5e                   	pop    esi
100004d6:	5f                   	pop    edi
100004d7:	5d                   	pop    ebp
100004d8:	c2 04 00             	ret    0x4

100004db <fpuAbs(_Float80)>:
100004db:	55                   	push   ebp
100004dc:	89 e5                	mov    ebp,esp
100004de:	57                   	push   edi
100004df:	56                   	push   esi
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100004e7:	8d 75 0c             	lea    esi,[ebp+0xc]
100004ea:	b9 03 00 00 00       	mov    ecx,0x3
100004ef:	89 c7                	mov    edi,eax
100004f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004f3:	5e                   	pop    esi
100004f4:	5f                   	pop    edi
100004f5:	5d                   	pop    ebp
100004f6:	c2 04 00             	ret    0x4

100004f9 <fpuChs(_Float80)>:
100004f9:	55                   	push   ebp
100004fa:	89 e5                	mov    ebp,esp
100004fc:	57                   	push   edi
100004fd:	56                   	push   esi
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000505:	8d 75 0c             	lea    esi,[ebp+0xc]
10000508:	b9 03 00 00 00       	mov    ecx,0x3
1000050d:	89 c7                	mov    edi,eax
1000050f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000511:	5e                   	pop    esi
10000512:	5f                   	pop    edi
10000513:	5d                   	pop    ebp
10000514:	c2 04 00             	ret    0x4

10000517 <fpuSub(_Float80, _Float80)>:
10000517:	55                   	push   ebp
10000518:	89 e5                	mov    ebp,esp
1000051a:	57                   	push   edi
1000051b:	56                   	push   esi
1000051c:	53                   	push   ebx
1000051d:	83 ec 1c             	sub    esp,0x1c
10000520:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000523:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000527:	8d 75 18             	lea    esi,[ebp+0x18]
1000052a:	b9 03 00 00 00       	mov    ecx,0x3
1000052f:	89 e7                	mov    edi,esp
10000531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000533:	83 ec 0c             	sub    esp,0xc
10000536:	8d 75 0c             	lea    esi,[ebp+0xc]
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	89 e7                	mov    edi,esp
10000540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000542:	53                   	push   ebx
10000543:	e8 fc ff ff ff       	call   10000544 <fpuSub(_Float80, _Float80)+0x2d>	10000544: R_386_PC32	fpuAdd(_Float80, _Float80)
10000548:	89 d8                	mov    eax,ebx
1000054a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000054d:	5b                   	pop    ebx
1000054e:	5e                   	pop    esi
1000054f:	5f                   	pop    edi
10000550:	5d                   	pop    ebp
10000551:	c2 04 00             	ret    0x4

10000554 <fpuReverseSub(_Float80, _Float80)>:
10000554:	55                   	push   ebp
10000555:	89 e5                	mov    ebp,esp
10000557:	57                   	push   edi
10000558:	56                   	push   esi
10000559:	53                   	push   ebx
1000055a:	83 ec 1c             	sub    esp,0x1c
1000055d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000560:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000564:	8d 75 0c             	lea    esi,[ebp+0xc]
10000567:	b9 03 00 00 00       	mov    ecx,0x3
1000056c:	89 e7                	mov    edi,esp
1000056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000570:	83 ec 0c             	sub    esp,0xc
10000573:	8d 75 18             	lea    esi,[ebp+0x18]
10000576:	b9 03 00 00 00       	mov    ecx,0x3
1000057b:	89 e7                	mov    edi,esp
1000057d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000057f:	53                   	push   ebx
10000580:	e8 fc ff ff ff       	call   10000581 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000581: R_386_PC32	fpuAdd(_Float80, _Float80)
10000585:	89 d8                	mov    eax,ebx
10000587:	8d 65 f4             	lea    esp,[ebp-0xc]
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	5d                   	pop    ebp
1000058e:	c2 04 00             	ret    0x4

10000591 <fpuMultiply(_Float80, _Float80)>:
10000591:	55                   	push   ebp
10000592:	89 e5                	mov    ebp,esp
10000594:	57                   	push   edi
10000595:	56                   	push   esi
10000596:	53                   	push   ebx
10000597:	83 ec 38             	sub    esp,0x38
1000059a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000059d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a3:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005a7:	c1 ea 1f             	shr    edx,0x1f
100005aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005b0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005b3:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005b6:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005ba:	c1 ef 1f             	shr    edi,0x1f
100005bd:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005c0:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005c3:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005c6:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005c9:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005cc:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005d1:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005d5:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100005d8:	0f af ce             	imul   ecx,esi
100005db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100005de:	0f af d7             	imul   edx,edi
100005e1:	01 d1                	add    ecx,edx
100005e3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100005e6:	f7 e6                	mul    esi
100005e8:	01 ca                	add    edx,ecx
100005ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100005ed:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100005f0:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f3:	b9 03 00 00 00       	mov    ecx,0x3
100005f8:	89 e7                	mov    edi,esp
100005fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fc:	53                   	push   ebx
100005fd:	e8 fc ff ff ff       	call   100005fe <fpuMultiply(_Float80, _Float80)+0x6d>	100005fe: R_386_PC32	fpuNormalise(_Float80)
10000602:	89 d8                	mov    eax,ebx
10000604:	8d 65 f4             	lea    esp,[ebp-0xc]
10000607:	5b                   	pop    ebx
10000608:	5e                   	pop    esi
10000609:	5f                   	pop    edi
1000060a:	5d                   	pop    ebp
1000060b:	c2 04 00             	ret    0x4

1000060e <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000060e:	55                   	push   ebp
1000060f:	89 e5                	mov    ebp,esp
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	53                   	push   ebx
10000614:	83 ec 24             	sub    esp,0x24
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000061d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000620:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000626:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000629:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000062c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000062f:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000636:	83 c8 ff             	or     eax,0xffffffff
10000639:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000640:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000647:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000064e:	31 d2                	xor    edx,edx
10000650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000653:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000656:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000659:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000065c:	83 f8 ff             	cmp    eax,0xffffffff
1000065f:	75 22                	jne    10000683 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000661:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000664:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000667:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000066a:	0f ad f3             	shrd   ebx,esi,cl
1000066d:	d3 ee                	shr    esi,cl
1000066f:	f6 c1 20             	test   cl,0x20
10000672:	74 04                	je     10000678 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000674:	89 f3                	mov    ebx,esi
10000676:	31 f6                	xor    esi,esi
10000678:	89 d9                	mov    ecx,ebx
1000067a:	83 e1 01             	and    ecx,0x1
1000067d:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000680:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000686:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000689:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000068c:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000068f:	72 38                	jb     100006c9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
10000691:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000694:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000697:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
1000069a:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000069d:	83 f8 ff             	cmp    eax,0xffffffff
100006a0:	75 0d                	jne    100006af <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006a2:	81 ca 00 00 00 20    	or     edx,0x20000000
100006a8:	b8 3d 00 00 00       	mov    eax,0x3d
100006ad:	eb 1f                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006af:	88 c1                	mov    cl,al
100006b1:	89 ce                	mov    esi,ecx
100006b3:	c1 ee 05             	shr    esi,0x5
100006b6:	83 e6 01             	and    esi,0x1
100006b9:	89 f3                	mov    ebx,esi
100006bb:	83 f3 01             	xor    ebx,0x1
100006be:	d3 e3                	shl    ebx,cl
100006c0:	d3 e6                	shl    esi,cl
100006c2:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006c5:	09 f2                	or     edx,esi
100006c7:	eb 05                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006c9:	83 f8 ff             	cmp    eax,0xffffffff
100006cc:	74 01                	je     100006cf <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006ce:	48                   	dec    eax
100006cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006d2:	85 c0                	test   eax,eax
100006d4:	0f 85 76 ff ff ff    	jne    10000650 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100006da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100006dd:	83 c4 24             	add    esp,0x24
100006e0:	5b                   	pop    ebx
100006e1:	5e                   	pop    esi
100006e2:	5f                   	pop    edi
100006e3:	5d                   	pop    ebp
100006e4:	c3                   	ret    

100006e5 <fpuDivide(_Float80, _Float80)>:
100006e5:	55                   	push   ebp
100006e6:	89 e5                	mov    ebp,esp
100006e8:	57                   	push   edi
100006e9:	56                   	push   esi
100006ea:	53                   	push   ebx
100006eb:	83 ec 1c             	sub    esp,0x1c
100006ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006f1:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100006f4:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
100006f7:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
100006fa:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100006fd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000700:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000706:	e8 fc ff ff ff       	call   10000707 <fpuDivide(_Float80, _Float80)+0x22>	10000707: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000070b:	59                   	pop    ecx
1000070c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000070f:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000715:	66 05 00 40          	add    ax,0x4000
10000719:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000071c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000720:	8d 75 dc             	lea    esi,[ebp-0x24]
10000723:	b9 03 00 00 00       	mov    ecx,0x3
10000728:	89 e7                	mov    edi,esp
1000072a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000072c:	53                   	push   ebx
1000072d:	e8 fc ff ff ff       	call   1000072e <fpuDivide(_Float80, _Float80)+0x49>	1000072e: R_386_PC32	fpuNormalise(_Float80)
10000732:	89 d8                	mov    eax,ebx
10000734:	8d 65 f4             	lea    esp,[ebp-0xc]
10000737:	5b                   	pop    ebx
10000738:	5e                   	pop    esi
10000739:	5f                   	pop    edi
1000073a:	5d                   	pop    ebp
1000073b:	c2 04 00             	ret    0x4

1000073e <fpuReciprocal(_Float80)>:
1000073e:	55                   	push   ebp
1000073f:	89 e5                	mov    ebp,esp
10000741:	57                   	push   edi
10000742:	56                   	push   esi
10000743:	53                   	push   ebx
10000744:	83 ec 2c             	sub    esp,0x2c
10000747:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000074a:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000074e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000755:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000075c:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000762:	8d 75 0c             	lea    esi,[ebp+0xc]
10000765:	b9 03 00 00 00       	mov    ecx,0x3
1000076a:	89 e7                	mov    edi,esp
1000076c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076e:	83 ec 0c             	sub    esp,0xc
10000771:	8d 75 dc             	lea    esi,[ebp-0x24]
10000774:	b9 03 00 00 00       	mov    ecx,0x3
10000779:	89 e7                	mov    edi,esp
1000077b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000077d:	53                   	push   ebx
1000077e:	e8 fc ff ff ff       	call   1000077f <fpuReciprocal(_Float80)+0x41>	1000077f: R_386_PC32	fpuDivide(_Float80, _Float80)
10000783:	89 d8                	mov    eax,ebx
10000785:	8d 65 f4             	lea    esp,[ebp-0xc]
10000788:	5b                   	pop    ebx
10000789:	5e                   	pop    esi
1000078a:	5f                   	pop    edi
1000078b:	5d                   	pop    ebp
1000078c:	c2 04 00             	ret    0x4

1000078f <fpuSquare(_Float80)>:
1000078f:	55                   	push   ebp
10000790:	89 e5                	mov    ebp,esp
10000792:	57                   	push   edi
10000793:	56                   	push   esi
10000794:	53                   	push   ebx
10000795:	83 ec 1c             	sub    esp,0x1c
10000798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000079b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000079e:	b9 03 00 00 00       	mov    ecx,0x3
100007a3:	89 e7                	mov    edi,esp
100007a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a7:	83 ec 0c             	sub    esp,0xc
100007aa:	8d 75 0c             	lea    esi,[ebp+0xc]
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	53                   	push   ebx
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSquare(_Float80)+0x29>	100007b8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007bc:	89 d8                	mov    eax,ebx
100007be:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c1:	5b                   	pop    ebx
100007c2:	5e                   	pop    esi
100007c3:	5f                   	pop    edi
100007c4:	5d                   	pop    ebp
100007c5:	c2 04 00             	ret    0x4

100007c8 <fpuInverseSqrt(_Float80)>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	57                   	push   edi
100007cc:	56                   	push   esi
100007cd:	53                   	push   ebx
100007ce:	83 ec 5c             	sub    esp,0x5c
100007d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007d4:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100007d8:	31 d2                	xor    edx,edx
100007da:	b9 03 00 00 00       	mov    ecx,0x3
100007df:	31 db                	xor    ebx,ebx
100007e1:	01 c9                	add    ecx,ecx
100007e3:	11 db                	adc    ebx,ebx
100007e5:	42                   	inc    edx
100007e6:	83 fa 3c             	cmp    edx,0x3c
100007e9:	75 f6                	jne    100007e1 <fpuInverseSqrt(_Float80)+0x19>
100007eb:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100007ee:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
100007f1:	8d 75 0c             	lea    esi,[ebp+0xc]
100007f4:	b9 03 00 00 00       	mov    ecx,0x3
100007f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007fe:	0f b7 d0             	movzx  edx,ax
10000801:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000807:	d1 fa                	sar    edx,1
10000809:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000080e:	29 d1                	sub    ecx,edx
10000810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000813:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000817:	48                   	dec    eax
10000818:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000081c:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000823:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000826:	83 ec 0c             	sub    esp,0xc
10000829:	b9 03 00 00 00       	mov    ecx,0x3
1000082e:	89 e7                	mov    edi,esp
10000830:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000835:	53                   	push   ebx
10000836:	e8 fc ff ff ff       	call   10000837 <fpuInverseSqrt(_Float80)+0x6f>	10000837: R_386_PC32	fpuSquare(_Float80)
1000083b:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
1000083f:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000843:	8d 45 d0             	lea    eax,[ebp-0x30]
10000846:	83 ec 14             	sub    esp,0x14
10000849:	8d 75 0c             	lea    esi,[ebp+0xc]
1000084c:	b9 03 00 00 00       	mov    ecx,0x3
10000851:	89 e7                	mov    edi,esp
10000853:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 de                	mov    esi,ebx
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	50                   	push   eax
10000864:	e8 fc ff ff ff       	call   10000865 <fpuInverseSqrt(_Float80)+0x9d>	10000865: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000869:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
1000086f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000872:	83 c4 1c             	add    esp,0x1c
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000087f:	89 c6                	mov    esi,eax
10000881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000883:	83 ec 0c             	sub    esp,0xc
10000886:	8d 75 b8             	lea    esi,[ebp-0x48]
10000889:	b9 03 00 00 00       	mov    ecx,0x3
1000088e:	89 e7                	mov    edi,esp
10000890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000892:	52                   	push   edx
10000893:	e8 fc ff ff ff       	call   10000894 <fpuInverseSqrt(_Float80)+0xcc>	10000894: R_386_PC32	fpuSub(_Float80, _Float80)
10000898:	8d 5d a8             	lea    ebx,[ebp-0x58]
1000089b:	50                   	push   eax
1000089c:	b9 03 00 00 00       	mov    ecx,0x3
100008a1:	89 e7                	mov    edi,esp
100008a3:	8d 55 dc             	lea    edx,[ebp-0x24]
100008a6:	89 d6                	mov    esi,edx
100008a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008aa:	83 ec 0c             	sub    esp,0xc
100008ad:	b9 03 00 00 00       	mov    ecx,0x3
100008b2:	89 e7                	mov    edi,esp
100008b4:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b9:	53                   	push   ebx
100008ba:	e8 fc ff ff ff       	call   100008bb <fpuInverseSqrt(_Float80)+0xf3>	100008bb: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008c7:	89 de                	mov    esi,ebx
100008c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008cb:	83 c4 2c             	add    esp,0x2c
100008ce:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008d1:	0f 85 4c ff ff ff    	jne    10000823 <fpuInverseSqrt(_Float80)+0x5b>
100008d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008da:	8d 65 f4             	lea    esp,[ebp-0xc]
100008dd:	5b                   	pop    ebx
100008de:	5e                   	pop    esi
100008df:	5f                   	pop    edi
100008e0:	5d                   	pop    ebp
100008e1:	c2 04 00             	ret    0x4

100008e4 <fpuSqrt(_Float80)>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	57                   	push   edi
100008e8:	56                   	push   esi
100008e9:	53                   	push   ebx
100008ea:	83 ec 38             	sub    esp,0x38
100008ed:	8d 5d d0             	lea    ebx,[ebp-0x30]
100008f0:	8d 75 0c             	lea    esi,[ebp+0xc]
100008f3:	b9 03 00 00 00       	mov    ecx,0x3
100008f8:	89 e7                	mov    edi,esp
100008fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <fpuSqrt(_Float80)+0x1a>	100008fe: R_386_PC32	fpuInverseSqrt(_Float80)
10000902:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000906:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000090d:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000914:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000091a:	83 ec 14             	sub    esp,0x14
1000091d:	b9 03 00 00 00       	mov    ecx,0x3
10000922:	89 e7                	mov    edi,esp
10000924:	89 de                	mov    esi,ebx
10000926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000928:	83 ec 0c             	sub    esp,0xc
1000092b:	8d 75 dc             	lea    esi,[ebp-0x24]
1000092e:	b9 03 00 00 00       	mov    ecx,0x3
10000933:	89 e7                	mov    edi,esp
10000935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093a:	e8 fc ff ff ff       	call   1000093b <fpuSqrt(_Float80)+0x57>	1000093b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8d 65 f4             	lea    esp,[ebp-0xc]
10000945:	5b                   	pop    ebx
10000946:	5e                   	pop    esi
10000947:	5f                   	pop    edi
10000948:	5d                   	pop    ebp
10000949:	c2 04 00             	ret    0x4

1000094c <fpuGetReg(int)>:
1000094c:	55                   	push   ebp
1000094d:	89 e5                	mov    ebp,esp
1000094f:	57                   	push   edi
10000950:	56                   	push   esi
10000951:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000954:	83 fe 07             	cmp    esi,0x7
10000957:	76 10                	jbe    10000969 <fpuGetReg(int)+0x1d>
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	68 12 23 00 10       	push   0x10002312	1000095d: R_386_32	.text
10000961:	e8 fc ff ff ff       	call   10000962 <fpuGetReg(int)+0x16>	10000962: R_386_PC32	Krnl::panic(char const*)
10000966:	83 c4 10             	add    esp,0x10
10000969:	a0 01 00 00 00       	mov    al,ds:0x1	1000096a: R_386_32	fpuState
1000096e:	c0 e8 03             	shr    al,0x3
10000971:	83 e0 07             	and    eax,0x7
10000974:	01 f0                	add    eax,esi
10000976:	b9 08 00 00 00       	mov    ecx,0x8
1000097b:	99                   	cdq    
1000097c:	f7 f9                	idiv   ecx
1000097e:	6b c2 0c             	imul   eax,edx,0xc
10000981:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000983: R_386_32	fpuState
10000987:	b9 03 00 00 00       	mov    ecx,0x3
1000098c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000098f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8d 65 f8             	lea    esp,[ebp-0x8]
10000997:	5e                   	pop    esi
10000998:	5f                   	pop    edi
10000999:	5d                   	pop    ebp
1000099a:	c2 04 00             	ret    0x4

1000099d <fpuSetReg(int, _Float80)>:
1000099d:	55                   	push   ebp
1000099e:	89 e5                	mov    ebp,esp
100009a0:	57                   	push   edi
100009a1:	56                   	push   esi
100009a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009a5:	83 ff 07             	cmp    edi,0x7
100009a8:	76 10                	jbe    100009ba <fpuSetReg(int, _Float80)+0x1d>
100009aa:	83 ec 0c             	sub    esp,0xc
100009ad:	68 12 23 00 10       	push   0x10002312	100009ae: R_386_32	.text
100009b2:	e8 fc ff ff ff       	call   100009b3 <fpuSetReg(int, _Float80)+0x16>	100009b3: R_386_PC32	Krnl::panic(char const*)
100009b7:	83 c4 10             	add    esp,0x10
100009ba:	a0 01 00 00 00       	mov    al,ds:0x1	100009bb: R_386_32	fpuState
100009bf:	c0 e8 03             	shr    al,0x3
100009c2:	83 e0 07             	and    eax,0x7
100009c5:	01 f8                	add    eax,edi
100009c7:	b9 08 00 00 00       	mov    ecx,0x8
100009cc:	99                   	cdq    
100009cd:	f7 f9                	idiv   ecx
100009cf:	6b c2 0c             	imul   eax,edx,0xc
100009d2:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009d4: R_386_32	fpuState
100009d8:	8d 75 0c             	lea    esi,[ebp+0xc]
100009db:	b9 03 00 00 00       	mov    ecx,0x3
100009e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009e2:	8d 65 f8             	lea    esp,[ebp-0x8]
100009e5:	5e                   	pop    esi
100009e6:	5f                   	pop    edi
100009e7:	5d                   	pop    ebp
100009e8:	c3                   	ret    

100009e9 <fpuInternalTo32(_Float80)>:
100009e9:	55                   	push   ebp
100009ea:	89 e5                	mov    ebp,esp
100009ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100009ef:	66 81 f9 7e 40       	cmp    cx,0x407e
100009f4:	76 0c                	jbe    10000a02 <fpuInternalTo32(_Float80)+0x19>
100009f6:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f8: R_386_32	fpuState
100009fd:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a02:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a06:	19 d2                	sbb    edx,edx
10000a08:	f7 d2                	not    edx
10000a0a:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a13:	c1 e8 06             	shr    eax,0x6
10000a16:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a1b:	c1 e1 17             	shl    ecx,0x17
10000a1e:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a24:	09 c8                	or     eax,ecx
10000a26:	09 d0                	or     eax,edx
10000a28:	5d                   	pop    ebp
10000a29:	c3                   	ret    

10000a2a <fpuInternalTo64(_Float80)>:
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	57                   	push   edi
10000a2e:	56                   	push   esi
10000a2f:	53                   	push   ebx
10000a30:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a33:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a38:	76 0c                	jbe    10000a46 <fpuInternalTo64(_Float80)+0x1c>
10000a3a:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a3c: R_386_32	fpuState
10000a41:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a46:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a4a:	19 c9                	sbb    ecx,ecx
10000a4c:	f7 d1                	not    ecx
10000a4e:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a5a:	0f ac d0 09          	shrd   eax,edx,0x9
10000a5e:	c1 ea 09             	shr    edx,0x9
10000a61:	89 c6                	mov    esi,eax
10000a63:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a69:	c1 e3 14             	shl    ebx,0x14
10000a6c:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a72:	09 da                	or     edx,ebx
10000a74:	09 ca                	or     edx,ecx
10000a76:	89 f0                	mov    eax,esi
10000a78:	5b                   	pop    ebx
10000a79:	5e                   	pop    esi
10000a7a:	5f                   	pop    edi
10000a7b:	5d                   	pop    ebp
10000a7c:	c3                   	ret    

10000a7d <fpu32ToInternal(unsigned int)>:
10000a7d:	55                   	push   ebp
10000a7e:	89 e5                	mov    ebp,esp
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a86:	89 d1                	mov    ecx,edx
10000a88:	c1 e9 1f             	shr    ecx,0x1f
10000a8b:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000a8e:	89 d1                	mov    ecx,edx
10000a90:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000a96:	c1 e1 06             	shl    ecx,0x6
10000a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a9f:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000aa5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000aa8:	c1 ea 17             	shr    edx,0x17
10000aab:	0f b6 d2             	movzx  edx,dl
10000aae:	66 81 c2 81 3f       	add    dx,0x3f81
10000ab3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ab7:	5d                   	pop    ebp
10000ab8:	c2 04 00             	ret    0x4

10000abb <fpu64ToInternal(unsigned long long)>:
10000abb:	55                   	push   ebp
10000abc:	89 e5                	mov    ebp,esp
10000abe:	57                   	push   edi
10000abf:	56                   	push   esi
10000ac0:	53                   	push   ebx
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000aca:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000acd:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000ad0:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000ad3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ad6:	c1 ea 1f             	shr    edx,0x1f
10000ad9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000adc:	89 f7                	mov    edi,esi
10000ade:	89 de                	mov    esi,ebx
10000ae0:	0f a4 f7 09          	shld   edi,esi,0x9
10000ae4:	c1 e6 09             	shl    esi,0x9
10000ae7:	89 f1                	mov    ecx,esi
10000ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000aef:	89 fa                	mov    edx,edi
10000af1:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000af7:	89 08                	mov    DWORD PTR [eax],ecx
10000af9:	81 ca 00 00 00 20    	or     edx,0x20000000
10000aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b05:	c1 ea 14             	shr    edx,0x14
10000b08:	66 81 e2 ff 07       	and    dx,0x7ff
10000b0d:	66 81 c2 01 3c       	add    dx,0x3c01
10000b12:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b16:	83 c4 0c             	add    esp,0xc
10000b19:	5b                   	pop    ebx
10000b1a:	5e                   	pop    esi
10000b1b:	5f                   	pop    edi
10000b1c:	5d                   	pop    ebp
10000b1d:	c2 04 00             	ret    0x4

10000b20 <fpuPush(_Float80)>:
10000b20:	55                   	push   ebp
10000b21:	89 e5                	mov    ebp,esp
10000b23:	57                   	push   edi
10000b24:	56                   	push   esi
10000b25:	a0 01 00 00 00       	mov    al,ds:0x1	10000b26: R_386_32	fpuState
10000b2a:	88 c1                	mov    cl,al
10000b2c:	c0 e9 03             	shr    cl,0x3
10000b2f:	89 cf                	mov    edi,ecx
10000b31:	83 e7 07             	and    edi,0x7
10000b34:	83 c7 07             	add    edi,0x7
10000b37:	89 fa                	mov    edx,edi
10000b39:	83 e2 07             	and    edx,0x7
10000b3c:	c1 e2 03             	shl    edx,0x3
10000b3f:	83 e0 c7             	and    eax,0xffffffc7
10000b42:	09 d0                	or     eax,edx
10000b44:	a2 01 00 00 00       	mov    ds:0x1,al	10000b45: R_386_32	fpuState
10000b49:	83 e7 07             	and    edi,0x7
10000b4c:	6b ff 0c             	imul   edi,edi,0xc
10000b4f:	81 c7 04 00 00 00    	add    edi,0x4	10000b51: R_386_32	fpuState
10000b55:	b9 03 00 00 00       	mov    ecx,0x3
10000b5a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b5f:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b60: R_386_32	fpuState
10000b64:	83 f8 08             	cmp    eax,0x8
10000b67:	75 09                	jne    10000b72 <fpuPush(_Float80)+0x52>
10000b69:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b6b: R_386_32	fpuState
10000b70:	eb 06                	jmp    10000b78 <fpuPush(_Float80)+0x58>
10000b72:	40                   	inc    eax
10000b73:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b74: R_386_32	fpuState
10000b78:	5e                   	pop    esi
10000b79:	5f                   	pop    edi
10000b7a:	5d                   	pop    ebp
10000b7b:	c3                   	ret    

10000b7c <fpuPop()>:
10000b7c:	55                   	push   ebp
10000b7d:	89 e5                	mov    ebp,esp
10000b7f:	57                   	push   edi
10000b80:	56                   	push   esi
10000b81:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000b83: R_386_32	fpuState
10000b87:	88 d0                	mov    al,dl
10000b89:	c0 e8 03             	shr    al,0x3
10000b8c:	83 e0 07             	and    eax,0x7
10000b8f:	6b f0 0c             	imul   esi,eax,0xc
10000b92:	81 c6 04 00 00 00    	add    esi,0x4	10000b94: R_386_32	fpuState
10000b98:	b9 03 00 00 00       	mov    ecx,0x3
10000b9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba2:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000ba9:	83 e0 38             	and    eax,0x38
10000bac:	83 e2 c7             	and    edx,0xffffffc7
10000baf:	09 c2                	or     edx,eax
10000bb1:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bb3: R_386_32	fpuState
10000bb7:	a1 64 00 00 00       	mov    eax,ds:0x64	10000bb8: R_386_32	fpuState
10000bbc:	85 c0                	test   eax,eax
10000bbe:	74 08                	je     10000bc8 <fpuPop()+0x4c>
10000bc0:	48                   	dec    eax
10000bc1:	a3 64 00 00 00       	mov    ds:0x64,eax	10000bc2: R_386_32	fpuState
10000bc6:	eb 07                	jmp    10000bcf <fpuPop()+0x53>
10000bc8:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bca: R_386_32	fpuState
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	5e                   	pop    esi
10000bd3:	5f                   	pop    edi
10000bd4:	5d                   	pop    ebp
10000bd5:	c2 04 00             	ret    0x4

10000bd8 <x87Handler(regs*)>:
10000bd8:	55                   	push   ebp
10000bd9:	89 e5                	mov    ebp,esp
10000bdb:	57                   	push   edi
10000bdc:	56                   	push   esi
10000bdd:	53                   	push   ebx
10000bde:	81 ec 6c 06 00 00    	sub    esp,0x66c
10000be4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000be7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bea:	89 85 90 f9 ff ff    	mov    DWORD PTR [ebp-0x670],eax
10000bf0:	c6 85 a6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x65a],0x0
10000bf7:	c7 85 a8 f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x658],0x2
10000c01:	8d 85 a7 f9 ff ff    	lea    eax,[ebp-0x659]
10000c07:	50                   	push   eax
10000c08:	8d 85 a6 f9 ff ff    	lea    eax,[ebp-0x65a]
10000c0e:	50                   	push   eax
10000c0f:	8d 85 a8 f9 ff ff    	lea    eax,[ebp-0x658]
10000c15:	50                   	push   eax
10000c16:	53                   	push   ebx
10000c17:	e8 fc ff ff ff       	call   10000c18 <x87Handler(regs*)+0x40>	10000c18: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c1c:	89 85 94 f9 ff ff    	mov    DWORD PTR [ebp-0x66c],eax
10000c22:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000c28:	8a 10                	mov    dl,BYTE PTR [eax]
10000c2a:	83 c4 10             	add    esp,0x10
10000c2d:	80 fa d9             	cmp    dl,0xd9
10000c30:	0f 85 7e 03 00 00    	jne    10000fb4 <x87Handler(regs*)+0x3dc>
10000c36:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c3a:	8d 50 20             	lea    edx,[eax+0x20]
10000c3d:	80 fa 0e             	cmp    dl,0xe
10000c40:	0f 87 fa 01 00 00    	ja     10000e40 <x87Handler(regs*)+0x268>
10000c46:	0f b6 d2             	movzx  edx,dl
10000c49:	ff 24 95 28 23 00 10 	jmp    DWORD PTR [edx*4+0x10002328]	10000c4c: R_386_32	.text
10000c50:	8d b5 ac f9 ff ff    	lea    esi,[ebp-0x654]
10000c56:	57                   	push   edi
10000c57:	57                   	push   edi
10000c58:	6a 00                	push   0x0
10000c5a:	56                   	push   esi
10000c5b:	e8 fc ff ff ff       	call   10000c5c <x87Handler(regs*)+0x84>	10000c5c: R_386_PC32	fpuGetReg(int)
10000c60:	8d 95 b8 f9 ff ff    	lea    edx,[ebp-0x648]
10000c66:	b9 03 00 00 00       	mov    ecx,0x3
10000c6b:	89 e7                	mov    edi,esp
10000c6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c6f:	52                   	push   edx
10000c70:	e8 fc ff ff ff       	call   10000c71 <x87Handler(regs*)+0x99>	10000c71: R_386_PC32	fpuChs(_Float80)
10000c75:	b9 03 00 00 00       	mov    ecx,0x3
10000c7a:	89 e7                	mov    edi,esp
10000c7c:	89 d6                	mov    esi,edx
10000c7e:	eb 49                	jmp    10000cc9 <x87Handler(regs*)+0xf1>
10000c80:	8d 85 c4 f9 ff ff    	lea    eax,[ebp-0x63c]
10000c86:	51                   	push   ecx
10000c87:	51                   	push   ecx
10000c88:	6a 00                	push   0x0
10000c8a:	50                   	push   eax
10000c8b:	e8 fc ff ff ff       	call   10000c8c <x87Handler(regs*)+0xb4>	10000c8c: R_386_PC32	fpuGetReg(int)
10000c90:	8b 85 c4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x63c]
10000c96:	8b 95 c8 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x638]
10000c9c:	89 85 d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],eax
10000ca2:	89 95 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],edx
10000ca8:	8b 85 cc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x634]
10000cae:	66 89 85 d8 f9 ff ff 	mov    WORD PTR [ebp-0x628],ax
10000cb5:	c6 85 da f9 ff ff 00 	mov    BYTE PTR [ebp-0x626],0x0
10000cbc:	8d b5 d0 f9 ff ff    	lea    esi,[ebp-0x630]
10000cc2:	b9 03 00 00 00       	mov    ecx,0x3
10000cc7:	89 e7                	mov    edi,esp
10000cc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ccb:	6a 00                	push   0x0
10000ccd:	e8 fc ff ff ff       	call   10000cce <x87Handler(regs*)+0xf6>	10000cce: R_386_PC32	fpuSetReg(int, _Float80)
10000cd2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000cd6:	83 c4 10             	add    esp,0x10
10000cd9:	b0 01                	mov    al,0x1
10000cdb:	e9 14 16 00 00       	jmp    100022f4 <x87Handler(regs*)+0x171c>
10000ce0:	c6 85 e6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61a],0x0
10000ce7:	c7 85 dc f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x624],0x0
10000cf1:	c7 85 e0 f9 ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x620],0x20000000
10000cfb:	66 c7 85 e4 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x61c],0x4000
10000d04:	83 ec 10             	sub    esp,0x10
10000d07:	8d b5 dc f9 ff ff    	lea    esi,[ebp-0x624]
10000d0d:	eb 2d                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d0f:	c6 85 f2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x60e],0x0
10000d16:	c7 85 e8 f9 ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x618],0xf346e2be
10000d20:	c7 85 ec f9 ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x614],0x35269e12
10000d2a:	66 c7 85 f0 f9 ff ff 01 40 	mov    WORD PTR [ebp-0x610],0x4001
10000d33:	83 ec 10             	sub    esp,0x10
10000d36:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000d3c:	b9 03 00 00 00       	mov    ecx,0x3
10000d41:	89 e7                	mov    edi,esp
10000d43:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d45:	e8 fc ff ff ff       	call   10000d46 <x87Handler(regs*)+0x16e>	10000d46: R_386_PC32	fpuPush(_Float80)
10000d4a:	eb 86                	jmp    10000cd2 <x87Handler(regs*)+0xfa>
10000d4c:	c6 85 fe f9 ff ff 00 	mov    BYTE PTR [ebp-0x602],0x0
10000d53:	c7 85 f4 f9 ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x60c],0x5705fc1c
10000d5d:	c7 85 f8 f9 ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x608],0x2e2a8eca
10000d67:	66 c7 85 fc f9 ff ff 00 40 	mov    WORD PTR [ebp-0x604],0x4000
10000d70:	83 ec 10             	sub    esp,0x10
10000d73:	8d b5 f4 f9 ff ff    	lea    esi,[ebp-0x60c]
10000d79:	eb c1                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d7b:	c6 85 0a fa ff ff 00 	mov    BYTE PTR [ebp-0x5f6],0x0
10000d82:	c7 85 00 fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x600],0x885a308c
10000d8c:	c7 85 04 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5fc],0x3243f6a8
10000d96:	66 c7 85 08 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5f8],0x4001
10000d9f:	83 ec 10             	sub    esp,0x10
10000da2:	8d b5 00 fa ff ff    	lea    esi,[ebp-0x600]
10000da8:	eb 92                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000daa:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000db1:	c7 85 0c fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5f4],0x3ef3fde6
10000dbb:	c7 85 10 fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5f0],0x268826a1
10000dc5:	66 c7 85 14 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5ec],0x3ffe
10000dce:	83 ec 10             	sub    esp,0x10
10000dd1:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000dd7:	e9 60 ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000ddc:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000de3:	c7 85 18 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5e8],0xf473de68
10000ded:	c7 85 1c fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5e4],0x2c5c85fd
10000df7:	66 c7 85 20 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5e0],0x3fff
10000e00:	83 ec 10             	sub    esp,0x10
10000e03:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000e09:	e9 2e ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e0e:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000e15:	c7 85 24 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5dc],0x0
10000e1f:	c7 85 28 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5d8],0x0
10000e29:	66 c7 85 2c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5d4],0x3fff
10000e32:	83 ec 10             	sub    esp,0x10
10000e35:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000e3b:	e9 fc fe ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e40:	8d 50 40             	lea    edx,[eax+0x40]
10000e43:	80 fa 07             	cmp    dl,0x7
10000e46:	77 27                	ja     10000e6f <x87Handler(regs*)+0x297>
10000e48:	8d b5 38 fb ff ff    	lea    esi,[ebp-0x4c8]
10000e4e:	57                   	push   edi
10000e4f:	57                   	push   edi
10000e50:	2d c0 00 00 00       	sub    eax,0xc0
10000e55:	50                   	push   eax
10000e56:	56                   	push   esi
10000e57:	e8 fc ff ff ff       	call   10000e58 <x87Handler(regs*)+0x280>	10000e58: R_386_PC32	fpuGetReg(int)
10000e5c:	83 ec 14             	sub    esp,0x14
10000e5f:	b9 03 00 00 00       	mov    ecx,0x3
10000e64:	89 e7                	mov    edi,esp
10000e66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e68:	e8 fc ff ff ff       	call   10000e69 <x87Handler(regs*)+0x291>	10000e69: R_386_PC32	fpuPush(_Float80)
10000e6d:	eb 63                	jmp    10000ed2 <x87Handler(regs*)+0x2fa>
10000e6f:	8d 50 38             	lea    edx,[eax+0x38]
10000e72:	80 fa 07             	cmp    dl,0x7
10000e75:	77 64                	ja     10000edb <x87Handler(regs*)+0x303>
10000e77:	8d 55 dc             	lea    edx,[ebp-0x24]
10000e7a:	56                   	push   esi
10000e7b:	56                   	push   esi
10000e7c:	2d c8 00 00 00       	sub    eax,0xc8
10000e81:	50                   	push   eax
10000e82:	52                   	push   edx
10000e83:	e8 fc ff ff ff       	call   10000e84 <x87Handler(regs*)+0x2ac>	10000e84: R_386_PC32	fpuGetReg(int)
10000e88:	8d b5 44 fb ff ff    	lea    esi,[ebp-0x4bc]
10000e8e:	83 ec 0c             	sub    esp,0xc
10000e91:	6a 00                	push   0x0
10000e93:	56                   	push   esi
10000e94:	e8 fc ff ff ff       	call   10000e95 <x87Handler(regs*)+0x2bd>	10000e95: R_386_PC32	fpuGetReg(int)
10000e99:	83 c4 10             	add    esp,0x10
10000e9c:	b9 03 00 00 00       	mov    ecx,0x3
10000ea1:	89 e7                	mov    edi,esp
10000ea3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ea5:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000eab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000eaf:	2d c8 00 00 00       	sub    eax,0xc8
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <x87Handler(regs*)+0x2de>	10000eb6: R_386_PC32	fpuSetReg(int, _Float80)
10000eba:	83 ec 0c             	sub    esp,0xc
10000ebd:	b9 03 00 00 00       	mov    ecx,0x3
10000ec2:	89 e7                	mov    edi,esp
10000ec4:	8d 55 dc             	lea    edx,[ebp-0x24]
10000ec7:	89 d6                	mov    esi,edx
10000ec9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ecb:	6a 00                	push   0x0
10000ecd:	e8 fc ff ff ff       	call   10000ece <x87Handler(regs*)+0x2f6>	10000ece: R_386_PC32	fpuSetReg(int, _Float80)
10000ed2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000ed6:	e9 8e 00 00 00       	jmp    10000f69 <x87Handler(regs*)+0x391>
10000edb:	8a 85 a7 f9 ff ff    	mov    al,BYTE PTR [ebp-0x659]
10000ee1:	84 c0                	test   al,al
10000ee3:	75 18                	jne    10000efd <x87Handler(regs*)+0x325>
10000ee5:	8d b5 e4 fd ff ff    	lea    esi,[ebp-0x21c]
10000eeb:	51                   	push   ecx
10000eec:	51                   	push   ecx
10000eed:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000ef3:	ff 30                	push   DWORD PTR [eax]
10000ef5:	56                   	push   esi
10000ef6:	e8 fc ff ff ff       	call   10000ef7 <x87Handler(regs*)+0x31f>	10000ef7: R_386_PC32	fpu32ToInternal(unsigned int)
10000efb:	eb 52                	jmp    10000f4f <x87Handler(regs*)+0x377>
10000efd:	3c 03                	cmp    al,0x3
10000eff:	0f 84 a1 00 00 00    	je     10000fa6 <x87Handler(regs*)+0x3ce>
10000f05:	3c 05                	cmp    al,0x5
10000f07:	75 14                	jne    10000f1d <x87Handler(regs*)+0x345>
10000f09:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f0f:	66 8b 00             	mov    ax,WORD PTR [eax]
10000f12:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000f14: R_386_32	fpuState
10000f18:	e9 89 00 00 00       	jmp    10000fa6 <x87Handler(regs*)+0x3ce>
10000f1d:	3c 07                	cmp    al,0x7
10000f1f:	0f 84 81 00 00 00    	je     10000fa6 <x87Handler(regs*)+0x3ce>
10000f25:	31 c0                	xor    eax,eax
10000f27:	e9 c8 13 00 00       	jmp    100022f4 <x87Handler(regs*)+0x171c>
10000f2c:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10000f32:	84 d2                	test   dl,dl
10000f34:	0f 85 75 12 00 00    	jne    100021af <x87Handler(regs*)+0x15d7>
10000f3a:	8d 75 88             	lea    esi,[ebp-0x78]
10000f3d:	50                   	push   eax
10000f3e:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f44:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000f47:	ff 30                	push   DWORD PTR [eax]
10000f49:	56                   	push   esi
10000f4a:	e8 fc ff ff ff       	call   10000f4b <x87Handler(regs*)+0x373>	10000f4b: R_386_PC32	fpu64ToInternal(unsigned long long)
10000f4f:	83 ec 14             	sub    esp,0x14
10000f52:	b9 03 00 00 00       	mov    ecx,0x3
10000f57:	89 e7                	mov    edi,esp
10000f59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f5b:	e8 fc ff ff ff       	call   10000f5c <x87Handler(regs*)+0x384>	10000f5c: R_386_PC32	fpuPush(_Float80)
10000f60:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10000f66:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000f69:	83 c4 20             	add    esp,0x20
10000f6c:	e9 68 fd ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10000f71:	80 fa 02             	cmp    dl,0x2
10000f74:	0f 85 a9 0e 00 00    	jne    10001e23 <x87Handler(regs*)+0x124b>
10000f7a:	8d b5 68 fe ff ff    	lea    esi,[ebp-0x198]
10000f80:	50                   	push   eax
10000f81:	50                   	push   eax
10000f82:	6a 00                	push   0x0
10000f84:	56                   	push   esi
10000f85:	e8 fc ff ff ff       	call   10000f86 <x87Handler(regs*)+0x3ae>	10000f86: R_386_PC32	fpuGetReg(int)
10000f8a:	83 ec 14             	sub    esp,0x14
10000f8d:	b9 03 00 00 00       	mov    ecx,0x3
10000f92:	89 e7                	mov    edi,esp
10000f94:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f96:	e8 fc ff ff ff       	call   10000f97 <x87Handler(regs*)+0x3bf>	10000f97: R_386_PC32	fpuFloatToLong(_Float80)
10000f9b:	83 c4 20             	add    esp,0x20
10000f9e:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000fa4:	89 02                	mov    DWORD PTR [edx],eax
10000fa6:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10000fac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000faf:	e9 25 fd ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10000fb4:	80 fa d8             	cmp    dl,0xd8
10000fb7:	0f 85 56 03 00 00    	jne    10001313 <x87Handler(regs*)+0x73b>
10000fbd:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000fc3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000fc7:	8d 50 40             	lea    edx,[eax+0x40]
10000fca:	80 fa 07             	cmp    dl,0x7
10000fcd:	77 64                	ja     10001033 <x87Handler(regs*)+0x45b>
10000fcf:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10000fd5:	57                   	push   edi
10000fd6:	57                   	push   edi
10000fd7:	2d c0 00 00 00       	sub    eax,0xc0
10000fdc:	50                   	push   eax
10000fdd:	56                   	push   esi
10000fde:	e8 fc ff ff ff       	call   10000fdf <x87Handler(regs*)+0x407>	10000fdf: R_386_PC32	fpuGetReg(int)
10000fe3:	8d 95 3c fa ff ff    	lea    edx,[ebp-0x5c4]
10000fe9:	83 ec 0c             	sub    esp,0xc
10000fec:	6a 00                	push   0x0
10000fee:	52                   	push   edx
10000fef:	e8 fc ff ff ff       	call   10000ff0 <x87Handler(regs*)+0x418>	10000ff0: R_386_PC32	fpuGetReg(int)
10000ff4:	8d 85 48 fa ff ff    	lea    eax,[ebp-0x5b8]
10000ffa:	52                   	push   edx
10000ffb:	b9 03 00 00 00       	mov    ecx,0x3
10001000:	89 e7                	mov    edi,esp
10001002:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001004:	83 ec 0c             	sub    esp,0xc
10001007:	b9 03 00 00 00       	mov    ecx,0x3
1000100c:	89 e7                	mov    edi,esp
1000100e:	8d 95 3c fa ff ff    	lea    edx,[ebp-0x5c4]
10001014:	89 d6                	mov    esi,edx
10001016:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001018:	50                   	push   eax
10001019:	e8 fc ff ff ff       	call   1000101a <x87Handler(regs*)+0x442>	1000101a: R_386_PC32	fpuAdd(_Float80, _Float80)
1000101e:	83 c4 20             	add    esp,0x20
10001021:	b9 03 00 00 00       	mov    ecx,0x3
10001026:	89 e7                	mov    edi,esp
10001028:	8d 85 48 fa ff ff    	lea    eax,[ebp-0x5b8]
1000102e:	e9 e0 01 00 00       	jmp    10001213 <x87Handler(regs*)+0x63b>
10001033:	8d 50 38             	lea    edx,[eax+0x38]
10001036:	80 fa 07             	cmp    dl,0x7
10001039:	77 64                	ja     1000109f <x87Handler(regs*)+0x4c7>
1000103b:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
10001041:	52                   	push   edx
10001042:	52                   	push   edx
10001043:	2d c8 00 00 00       	sub    eax,0xc8
10001048:	50                   	push   eax
10001049:	56                   	push   esi
1000104a:	e8 fc ff ff ff       	call   1000104b <x87Handler(regs*)+0x473>	1000104b: R_386_PC32	fpuGetReg(int)
1000104f:	8d 95 60 fa ff ff    	lea    edx,[ebp-0x5a0]
10001055:	83 ec 0c             	sub    esp,0xc
10001058:	6a 00                	push   0x0
1000105a:	52                   	push   edx
1000105b:	e8 fc ff ff ff       	call   1000105c <x87Handler(regs*)+0x484>	1000105c: R_386_PC32	fpuGetReg(int)
10001060:	8d 85 6c fa ff ff    	lea    eax,[ebp-0x594]
10001066:	51                   	push   ecx
10001067:	b9 03 00 00 00       	mov    ecx,0x3
1000106c:	89 e7                	mov    edi,esp
1000106e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001070:	83 ec 0c             	sub    esp,0xc
10001073:	b9 03 00 00 00       	mov    ecx,0x3
10001078:	89 e7                	mov    edi,esp
1000107a:	8d 95 60 fa ff ff    	lea    edx,[ebp-0x5a0]
10001080:	89 d6                	mov    esi,edx
10001082:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001084:	50                   	push   eax
10001085:	e8 fc ff ff ff       	call   10001086 <x87Handler(regs*)+0x4ae>	10001086: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000108a:	83 c4 20             	add    esp,0x20
1000108d:	b9 03 00 00 00       	mov    ecx,0x3
10001092:	89 e7                	mov    edi,esp
10001094:	8d 85 6c fa ff ff    	lea    eax,[ebp-0x594]
1000109a:	e9 74 01 00 00       	jmp    10001213 <x87Handler(regs*)+0x63b>
1000109f:	8d 50 30             	lea    edx,[eax+0x30]
100010a2:	80 fa 07             	cmp    dl,0x7
100010a5:	77 45                	ja     100010ec <x87Handler(regs*)+0x514>
100010a7:	8d b5 78 fa ff ff    	lea    esi,[ebp-0x588]
100010ad:	57                   	push   edi
100010ae:	57                   	push   edi
100010af:	2d d0 00 00 00       	sub    eax,0xd0
100010b4:	50                   	push   eax
100010b5:	56                   	push   esi
100010b6:	e8 fc ff ff ff       	call   100010b7 <x87Handler(regs*)+0x4df>	100010b7: R_386_PC32	fpuGetReg(int)
100010bb:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100010c1:	83 ec 0c             	sub    esp,0xc
100010c4:	6a 00                	push   0x0
100010c6:	50                   	push   eax
100010c7:	e8 fc ff ff ff       	call   100010c8 <x87Handler(regs*)+0x4f0>	100010c8: R_386_PC32	fpuGetReg(int)
100010cc:	50                   	push   eax
100010cd:	50                   	push   eax
100010ce:	b9 03 00 00 00       	mov    ecx,0x3
100010d3:	89 e7                	mov    edi,esp
100010d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010d7:	83 ec 0c             	sub    esp,0xc
100010da:	b9 03 00 00 00       	mov    ecx,0x3
100010df:	89 e7                	mov    edi,esp
100010e1:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100010e7:	e9 c6 07 00 00       	jmp    100018b2 <x87Handler(regs*)+0xcda>
100010ec:	8d 50 28             	lea    edx,[eax+0x28]
100010ef:	80 fa 07             	cmp    dl,0x7
100010f2:	77 45                	ja     10001139 <x87Handler(regs*)+0x561>
100010f4:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
100010fa:	52                   	push   edx
100010fb:	52                   	push   edx
100010fc:	2d d8 00 00 00       	sub    eax,0xd8
10001101:	50                   	push   eax
10001102:	56                   	push   esi
10001103:	e8 fc ff ff ff       	call   10001104 <x87Handler(regs*)+0x52c>	10001104: R_386_PC32	fpuGetReg(int)
10001108:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
1000110e:	83 ec 0c             	sub    esp,0xc
10001111:	6a 00                	push   0x0
10001113:	50                   	push   eax
10001114:	e8 fc ff ff ff       	call   10001115 <x87Handler(regs*)+0x53d>	10001115: R_386_PC32	fpuGetReg(int)
10001119:	51                   	push   ecx
1000111a:	51                   	push   ecx
1000111b:	b9 03 00 00 00       	mov    ecx,0x3
10001120:	89 e7                	mov    edi,esp
10001122:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001124:	83 ec 0c             	sub    esp,0xc
10001127:	b9 03 00 00 00       	mov    ecx,0x3
1000112c:	89 e7                	mov    edi,esp
1000112e:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
10001134:	e9 d7 07 00 00       	jmp    10001910 <x87Handler(regs*)+0xd38>
10001139:	8d 50 20             	lea    edx,[eax+0x20]
1000113c:	80 fa 07             	cmp    dl,0x7
1000113f:	77 61                	ja     100011a2 <x87Handler(regs*)+0x5ca>
10001141:	8d b5 a8 fa ff ff    	lea    esi,[ebp-0x558]
10001147:	51                   	push   ecx
10001148:	51                   	push   ecx
10001149:	2d e0 00 00 00       	sub    eax,0xe0
1000114e:	50                   	push   eax
1000114f:	56                   	push   esi
10001150:	e8 fc ff ff ff       	call   10001151 <x87Handler(regs*)+0x579>	10001151: R_386_PC32	fpuGetReg(int)
10001155:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
1000115b:	83 ec 0c             	sub    esp,0xc
1000115e:	6a 00                	push   0x0
10001160:	52                   	push   edx
10001161:	e8 fc ff ff ff       	call   10001162 <x87Handler(regs*)+0x58a>	10001162: R_386_PC32	fpuGetReg(int)
10001166:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000116c:	57                   	push   edi
1000116d:	b9 03 00 00 00       	mov    ecx,0x3
10001172:	89 e7                	mov    edi,esp
10001174:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001176:	83 ec 0c             	sub    esp,0xc
10001179:	b9 03 00 00 00       	mov    ecx,0x3
1000117e:	89 e7                	mov    edi,esp
10001180:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
10001186:	89 d6                	mov    esi,edx
10001188:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000118a:	50                   	push   eax
1000118b:	e8 fc ff ff ff       	call   1000118c <x87Handler(regs*)+0x5b4>	1000118c: R_386_PC32	fpuSub(_Float80, _Float80)
10001190:	83 c4 20             	add    esp,0x20
10001193:	b9 03 00 00 00       	mov    ecx,0x3
10001198:	89 e7                	mov    edi,esp
1000119a:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100011a0:	eb 71                	jmp    10001213 <x87Handler(regs*)+0x63b>
100011a2:	8d 50 18             	lea    edx,[eax+0x18]
100011a5:	80 fa 07             	cmp    dl,0x7
100011a8:	77 70                	ja     1000121a <x87Handler(regs*)+0x642>
100011aa:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
100011b0:	50                   	push   eax
100011b1:	50                   	push   eax
100011b2:	6a 00                	push   0x0
100011b4:	56                   	push   esi
100011b5:	e8 fc ff ff ff       	call   100011b6 <x87Handler(regs*)+0x5de>	100011b6: R_386_PC32	fpuGetReg(int)
100011ba:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
100011c0:	83 ec 0c             	sub    esp,0xc
100011c3:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100011c9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100011cd:	2d e8 00 00 00       	sub    eax,0xe8
100011d2:	50                   	push   eax
100011d3:	52                   	push   edx
100011d4:	e8 fc ff ff ff       	call   100011d5 <x87Handler(regs*)+0x5fd>	100011d5: R_386_PC32	fpuGetReg(int)
100011d9:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
100011df:	52                   	push   edx
100011e0:	b9 03 00 00 00       	mov    ecx,0x3
100011e5:	89 e7                	mov    edi,esp
100011e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011e9:	83 ec 0c             	sub    esp,0xc
100011ec:	b9 03 00 00 00       	mov    ecx,0x3
100011f1:	89 e7                	mov    edi,esp
100011f3:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
100011f9:	89 d6                	mov    esi,edx
100011fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011fd:	50                   	push   eax
100011fe:	e8 fc ff ff ff       	call   100011ff <x87Handler(regs*)+0x627>	100011ff: R_386_PC32	fpuSub(_Float80, _Float80)
10001203:	83 c4 20             	add    esp,0x20
10001206:	b9 03 00 00 00       	mov    ecx,0x3
1000120b:	89 e7                	mov    edi,esp
1000120d:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
10001213:	89 c6                	mov    esi,eax
10001215:	e9 af fa ff ff       	jmp    10000cc9 <x87Handler(regs*)+0xf1>
1000121a:	8d 50 10             	lea    edx,[eax+0x10]
1000121d:	80 fa 07             	cmp    dl,0x7
10001220:	77 61                	ja     10001283 <x87Handler(regs*)+0x6ab>
10001222:	8d b5 f0 fa ff ff    	lea    esi,[ebp-0x510]
10001228:	51                   	push   ecx
10001229:	51                   	push   ecx
1000122a:	2d f0 00 00 00       	sub    eax,0xf0
1000122f:	50                   	push   eax
10001230:	56                   	push   esi
10001231:	e8 fc ff ff ff       	call   10001232 <x87Handler(regs*)+0x65a>	10001232: R_386_PC32	fpuGetReg(int)
10001236:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
1000123c:	83 ec 0c             	sub    esp,0xc
1000123f:	6a 00                	push   0x0
10001241:	52                   	push   edx
10001242:	e8 fc ff ff ff       	call   10001243 <x87Handler(regs*)+0x66b>	10001243: R_386_PC32	fpuGetReg(int)
10001247:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
1000124d:	57                   	push   edi
1000124e:	b9 03 00 00 00       	mov    ecx,0x3
10001253:	89 e7                	mov    edi,esp
10001255:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001257:	83 ec 0c             	sub    esp,0xc
1000125a:	b9 03 00 00 00       	mov    ecx,0x3
1000125f:	89 e7                	mov    edi,esp
10001261:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
10001267:	89 d6                	mov    esi,edx
10001269:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000126b:	50                   	push   eax
1000126c:	e8 fc ff ff ff       	call   1000126d <x87Handler(regs*)+0x695>	1000126d: R_386_PC32	fpuDivide(_Float80, _Float80)
10001271:	83 c4 20             	add    esp,0x20
10001274:	b9 03 00 00 00       	mov    ecx,0x3
10001279:	89 e7                	mov    edi,esp
1000127b:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
10001281:	eb 71                	jmp    100012f4 <x87Handler(regs*)+0x71c>
10001283:	3c f7                	cmp    al,0xf7
10001285:	0f 86 86 07 00 00    	jbe    10001a11 <x87Handler(regs*)+0xe39>
1000128b:	8d b5 14 fb ff ff    	lea    esi,[ebp-0x4ec]
10001291:	50                   	push   eax
10001292:	50                   	push   eax
10001293:	6a 00                	push   0x0
10001295:	56                   	push   esi
10001296:	e8 fc ff ff ff       	call   10001297 <x87Handler(regs*)+0x6bf>	10001297: R_386_PC32	fpuGetReg(int)
1000129b:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
100012a1:	83 ec 0c             	sub    esp,0xc
100012a4:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100012aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100012ae:	2d f8 00 00 00       	sub    eax,0xf8
100012b3:	50                   	push   eax
100012b4:	52                   	push   edx
100012b5:	e8 fc ff ff ff       	call   100012b6 <x87Handler(regs*)+0x6de>	100012b6: R_386_PC32	fpuGetReg(int)
100012ba:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
100012c0:	52                   	push   edx
100012c1:	b9 03 00 00 00       	mov    ecx,0x3
100012c6:	89 e7                	mov    edi,esp
100012c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012ca:	83 ec 0c             	sub    esp,0xc
100012cd:	b9 03 00 00 00       	mov    ecx,0x3
100012d2:	89 e7                	mov    edi,esp
100012d4:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
100012da:	89 d6                	mov    esi,edx
100012dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <x87Handler(regs*)+0x708>	100012e0: R_386_PC32	fpuDivide(_Float80, _Float80)
100012e4:	83 c4 20             	add    esp,0x20
100012e7:	b9 03 00 00 00       	mov    ecx,0x3
100012ec:	89 e7                	mov    edi,esp
100012ee:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
100012f4:	89 c6                	mov    esi,eax
100012f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012f8:	6a 00                	push   0x0
100012fa:	e8 fc ff ff ff       	call   100012fb <x87Handler(regs*)+0x723>	100012fb: R_386_PC32	fpuSetReg(int, _Float80)
100012ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001303:	8d 45 dc             	lea    eax,[ebp-0x24]
10001306:	89 04 24             	mov    DWORD PTR [esp],eax
10001309:	e8 fc ff ff ff       	call   1000130a <x87Handler(regs*)+0x732>	1000130a: R_386_PC32	fpuPop()
1000130e:	e9 d8 0c 00 00       	jmp    10001feb <x87Handler(regs*)+0x1413>
10001313:	80 fa dc             	cmp    dl,0xdc
10001316:	0f 85 94 01 00 00    	jne    100014b0 <x87Handler(regs*)+0x8d8>
1000131c:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001322:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001326:	8d 50 40             	lea    edx,[eax+0x40]
10001329:	80 fa 07             	cmp    dl,0x7
1000132c:	77 77                	ja     100013a5 <x87Handler(regs*)+0x7cd>
1000132e:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
10001334:	52                   	push   edx
10001335:	52                   	push   edx
10001336:	2d c0 00 00 00       	sub    eax,0xc0
1000133b:	50                   	push   eax
1000133c:	56                   	push   esi
1000133d:	e8 fc ff ff ff       	call   1000133e <x87Handler(regs*)+0x766>	1000133e: R_386_PC32	fpuGetReg(int)
10001342:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001348:	83 ec 0c             	sub    esp,0xc
1000134b:	6a 00                	push   0x0
1000134d:	52                   	push   edx
1000134e:	e8 fc ff ff ff       	call   1000134f <x87Handler(regs*)+0x777>	1000134f: R_386_PC32	fpuGetReg(int)
10001353:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
10001359:	51                   	push   ecx
1000135a:	b9 03 00 00 00       	mov    ecx,0x3
1000135f:	89 e7                	mov    edi,esp
10001361:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001363:	83 ec 0c             	sub    esp,0xc
10001366:	b9 03 00 00 00       	mov    ecx,0x3
1000136b:	89 e7                	mov    edi,esp
1000136d:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001373:	89 d6                	mov    esi,edx
10001375:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001377:	50                   	push   eax
10001378:	e8 fc ff ff ff       	call   10001379 <x87Handler(regs*)+0x7a1>	10001379: R_386_PC32	fpuAdd(_Float80, _Float80)
1000137d:	83 c4 20             	add    esp,0x20
10001380:	b9 03 00 00 00       	mov    ecx,0x3
10001385:	89 e7                	mov    edi,esp
10001387:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
1000138d:	89 c6                	mov    esi,eax
1000138f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001391:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001397:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000139b:	2d c0 00 00 00       	sub    eax,0xc0
100013a0:	e9 8a 04 00 00       	jmp    1000182f <x87Handler(regs*)+0xc57>
100013a5:	8d 50 38             	lea    edx,[eax+0x38]
100013a8:	80 fa 07             	cmp    dl,0x7
100013ab:	77 77                	ja     10001424 <x87Handler(regs*)+0x84c>
100013ad:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
100013b3:	51                   	push   ecx
100013b4:	51                   	push   ecx
100013b5:	2d c8 00 00 00       	sub    eax,0xc8
100013ba:	50                   	push   eax
100013bb:	56                   	push   esi
100013bc:	e8 fc ff ff ff       	call   100013bd <x87Handler(regs*)+0x7e5>	100013bd: R_386_PC32	fpuGetReg(int)
100013c1:	8d 95 80 fb ff ff    	lea    edx,[ebp-0x480]
100013c7:	83 ec 0c             	sub    esp,0xc
100013ca:	6a 00                	push   0x0
100013cc:	52                   	push   edx
100013cd:	e8 fc ff ff ff       	call   100013ce <x87Handler(regs*)+0x7f6>	100013ce: R_386_PC32	fpuGetReg(int)
100013d2:	8d 85 8c fb ff ff    	lea    eax,[ebp-0x474]
100013d8:	57                   	push   edi
100013d9:	b9 03 00 00 00       	mov    ecx,0x3
100013de:	89 e7                	mov    edi,esp
100013e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013e2:	83 ec 0c             	sub    esp,0xc
100013e5:	b9 03 00 00 00       	mov    ecx,0x3
100013ea:	89 e7                	mov    edi,esp
100013ec:	8d 95 80 fb ff ff    	lea    edx,[ebp-0x480]
100013f2:	89 d6                	mov    esi,edx
100013f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013f6:	50                   	push   eax
100013f7:	e8 fc ff ff ff       	call   100013f8 <x87Handler(regs*)+0x820>	100013f8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100013fc:	83 c4 20             	add    esp,0x20
100013ff:	b9 03 00 00 00       	mov    ecx,0x3
10001404:	89 e7                	mov    edi,esp
10001406:	8d 85 8c fb ff ff    	lea    eax,[ebp-0x474]
1000140c:	89 c6                	mov    esi,eax
1000140e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001410:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001416:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000141a:	2d c8 00 00 00       	sub    eax,0xc8
1000141f:	e9 0b 04 00 00       	jmp    1000182f <x87Handler(regs*)+0xc57>
10001424:	83 c0 18             	add    eax,0x18
10001427:	3c 07                	cmp    al,0x7
10001429:	0f 87 13 0a 00 00    	ja     10001e42 <x87Handler(regs*)+0x126a>
1000142f:	8d b5 98 fb ff ff    	lea    esi,[ebp-0x468]
10001435:	57                   	push   edi
10001436:	57                   	push   edi
10001437:	6a 00                	push   0x0
10001439:	56                   	push   esi
1000143a:	e8 fc ff ff ff       	call   1000143b <x87Handler(regs*)+0x863>	1000143b: R_386_PC32	fpuGetReg(int)
1000143f:	8d 95 a4 fb ff ff    	lea    edx,[ebp-0x45c]
10001445:	83 ec 0c             	sub    esp,0xc
10001448:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000144e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001452:	2d e8 00 00 00       	sub    eax,0xe8
10001457:	50                   	push   eax
10001458:	52                   	push   edx
10001459:	e8 fc ff ff ff       	call   1000145a <x87Handler(regs*)+0x882>	1000145a: R_386_PC32	fpuGetReg(int)
1000145e:	8d 85 b0 fb ff ff    	lea    eax,[ebp-0x450]
10001464:	52                   	push   edx
10001465:	b9 03 00 00 00       	mov    ecx,0x3
1000146a:	89 e7                	mov    edi,esp
1000146c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000146e:	83 ec 0c             	sub    esp,0xc
10001471:	b9 03 00 00 00       	mov    ecx,0x3
10001476:	89 e7                	mov    edi,esp
10001478:	8d 95 a4 fb ff ff    	lea    edx,[ebp-0x45c]
1000147e:	89 d6                	mov    esi,edx
10001480:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001482:	50                   	push   eax
10001483:	e8 fc ff ff ff       	call   10001484 <x87Handler(regs*)+0x8ac>	10001484: R_386_PC32	fpuSub(_Float80, _Float80)
10001488:	83 c4 20             	add    esp,0x20
1000148b:	b9 03 00 00 00       	mov    ecx,0x3
10001490:	89 e7                	mov    edi,esp
10001492:	8d 85 b0 fb ff ff    	lea    eax,[ebp-0x450]
10001498:	89 c6                	mov    esi,eax
1000149a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000149c:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100014a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014a6:	2d e8 00 00 00       	sub    eax,0xe8
100014ab:	e9 7f 03 00 00       	jmp    1000182f <x87Handler(regs*)+0xc57>
100014b0:	80 fa de             	cmp    dl,0xde
100014b3:	0f 85 33 03 00 00    	jne    100017ec <x87Handler(regs*)+0xc14>
100014b9:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100014bf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014c3:	8d 50 40             	lea    edx,[eax+0x40]
100014c6:	80 fa 07             	cmp    dl,0x7
100014c9:	0f 87 8c 00 00 00    	ja     1000155b <x87Handler(regs*)+0x983>
100014cf:	8d b5 bc fb ff ff    	lea    esi,[ebp-0x444]
100014d5:	52                   	push   edx
100014d6:	52                   	push   edx
100014d7:	2d c0 00 00 00       	sub    eax,0xc0
100014dc:	50                   	push   eax
100014dd:	56                   	push   esi
100014de:	e8 fc ff ff ff       	call   100014df <x87Handler(regs*)+0x907>	100014df: R_386_PC32	fpuGetReg(int)
100014e3:	8d 95 c8 fb ff ff    	lea    edx,[ebp-0x438]
100014e9:	83 ec 0c             	sub    esp,0xc
100014ec:	6a 00                	push   0x0
100014ee:	52                   	push   edx
100014ef:	e8 fc ff ff ff       	call   100014f0 <x87Handler(regs*)+0x918>	100014f0: R_386_PC32	fpuGetReg(int)
100014f4:	8d 85 d4 fb ff ff    	lea    eax,[ebp-0x42c]
100014fa:	51                   	push   ecx
100014fb:	b9 03 00 00 00       	mov    ecx,0x3
10001500:	89 e7                	mov    edi,esp
10001502:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001504:	83 ec 0c             	sub    esp,0xc
10001507:	b9 03 00 00 00       	mov    ecx,0x3
1000150c:	89 e7                	mov    edi,esp
1000150e:	8d 95 c8 fb ff ff    	lea    edx,[ebp-0x438]
10001514:	89 d6                	mov    esi,edx
10001516:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001518:	50                   	push   eax
10001519:	e8 fc ff ff ff       	call   1000151a <x87Handler(regs*)+0x942>	1000151a: R_386_PC32	fpuAdd(_Float80, _Float80)
1000151e:	83 c4 20             	add    esp,0x20
10001521:	b9 03 00 00 00       	mov    ecx,0x3
10001526:	89 e7                	mov    edi,esp
10001528:	8d 85 d4 fb ff ff    	lea    eax,[ebp-0x42c]
1000152e:	89 c6                	mov    esi,eax
10001530:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001532:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001538:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000153c:	2d c0 00 00 00       	sub    eax,0xc0
10001541:	50                   	push   eax
10001542:	e8 fc ff ff ff       	call   10001543 <x87Handler(regs*)+0x96b>	10001543: R_386_PC32	fpuSetReg(int, _Float80)
10001547:	8d 45 dc             	lea    eax,[ebp-0x24]
1000154a:	89 04 24             	mov    DWORD PTR [esp],eax
1000154d:	e8 fc ff ff ff       	call   1000154e <x87Handler(regs*)+0x976>	1000154e: R_386_PC32	fpuPop()
10001552:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001556:	e9 90 0a 00 00       	jmp    10001feb <x87Handler(regs*)+0x1413>
1000155b:	8d 50 20             	lea    edx,[eax+0x20]
1000155e:	80 fa 07             	cmp    dl,0x7
10001561:	77 77                	ja     100015da <x87Handler(regs*)+0xa02>
10001563:	8d b5 e0 fb ff ff    	lea    esi,[ebp-0x420]
10001569:	51                   	push   ecx
1000156a:	51                   	push   ecx
1000156b:	2d e0 00 00 00       	sub    eax,0xe0
10001570:	50                   	push   eax
10001571:	56                   	push   esi
10001572:	e8 fc ff ff ff       	call   10001573 <x87Handler(regs*)+0x99b>	10001573: R_386_PC32	fpuGetReg(int)
10001577:	8d 95 ec fb ff ff    	lea    edx,[ebp-0x414]
1000157d:	83 ec 0c             	sub    esp,0xc
10001580:	6a 00                	push   0x0
10001582:	52                   	push   edx
10001583:	e8 fc ff ff ff       	call   10001584 <x87Handler(regs*)+0x9ac>	10001584: R_386_PC32	fpuGetReg(int)
10001588:	8d 85 f8 fb ff ff    	lea    eax,[ebp-0x408]
1000158e:	57                   	push   edi
1000158f:	b9 03 00 00 00       	mov    ecx,0x3
10001594:	89 e7                	mov    edi,esp
10001596:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001598:	83 ec 0c             	sub    esp,0xc
1000159b:	b9 03 00 00 00       	mov    ecx,0x3
100015a0:	89 e7                	mov    edi,esp
100015a2:	8d 95 ec fb ff ff    	lea    edx,[ebp-0x414]
100015a8:	89 d6                	mov    esi,edx
100015aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015ac:	50                   	push   eax
100015ad:	e8 fc ff ff ff       	call   100015ae <x87Handler(regs*)+0x9d6>	100015ae: R_386_PC32	fpuSub(_Float80, _Float80)
100015b2:	83 c4 20             	add    esp,0x20
100015b5:	b9 03 00 00 00       	mov    ecx,0x3
100015ba:	89 e7                	mov    edi,esp
100015bc:	8d 85 f8 fb ff ff    	lea    eax,[ebp-0x408]
100015c2:	89 c6                	mov    esi,eax
100015c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015c6:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100015cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100015d0:	2d e0 00 00 00       	sub    eax,0xe0
100015d5:	e9 67 ff ff ff       	jmp    10001541 <x87Handler(regs*)+0x969>
100015da:	8d 50 18             	lea    edx,[eax+0x18]
100015dd:	80 fa 07             	cmp    dl,0x7
100015e0:	0f 87 81 00 00 00    	ja     10001667 <x87Handler(regs*)+0xa8f>
100015e6:	8d b5 04 fc ff ff    	lea    esi,[ebp-0x3fc]
100015ec:	50                   	push   eax
100015ed:	50                   	push   eax
100015ee:	6a 00                	push   0x0
100015f0:	56                   	push   esi
100015f1:	e8 fc ff ff ff       	call   100015f2 <x87Handler(regs*)+0xa1a>	100015f2: R_386_PC32	fpuGetReg(int)
100015f6:	8d 95 10 fc ff ff    	lea    edx,[ebp-0x3f0]
100015fc:	83 ec 0c             	sub    esp,0xc
100015ff:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001605:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001609:	2d e8 00 00 00       	sub    eax,0xe8
1000160e:	50                   	push   eax
1000160f:	52                   	push   edx
10001610:	e8 fc ff ff ff       	call   10001611 <x87Handler(regs*)+0xa39>	10001611: R_386_PC32	fpuGetReg(int)
10001615:	8d 85 1c fc ff ff    	lea    eax,[ebp-0x3e4]
1000161b:	52                   	push   edx
1000161c:	b9 03 00 00 00       	mov    ecx,0x3
10001621:	89 e7                	mov    edi,esp
10001623:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001625:	83 ec 0c             	sub    esp,0xc
10001628:	b9 03 00 00 00       	mov    ecx,0x3
1000162d:	89 e7                	mov    edi,esp
1000162f:	8d 95 10 fc ff ff    	lea    edx,[ebp-0x3f0]
10001635:	89 d6                	mov    esi,edx
10001637:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001639:	50                   	push   eax
1000163a:	e8 fc ff ff ff       	call   1000163b <x87Handler(regs*)+0xa63>	1000163b: R_386_PC32	fpuSub(_Float80, _Float80)
1000163f:	83 c4 20             	add    esp,0x20
10001642:	b9 03 00 00 00       	mov    ecx,0x3
10001647:	89 e7                	mov    edi,esp
10001649:	8d 85 1c fc ff ff    	lea    eax,[ebp-0x3e4]
1000164f:	89 c6                	mov    esi,eax
10001651:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001653:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001659:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000165d:	2d e8 00 00 00       	sub    eax,0xe8
10001662:	e9 da fe ff ff       	jmp    10001541 <x87Handler(regs*)+0x969>
10001667:	8d 50 38             	lea    edx,[eax+0x38]
1000166a:	80 fa 07             	cmp    dl,0x7
1000166d:	77 77                	ja     100016e6 <x87Handler(regs*)+0xb0e>
1000166f:	8d b5 28 fc ff ff    	lea    esi,[ebp-0x3d8]
10001675:	51                   	push   ecx
10001676:	51                   	push   ecx
10001677:	2d c8 00 00 00       	sub    eax,0xc8
1000167c:	50                   	push   eax
1000167d:	56                   	push   esi
1000167e:	e8 fc ff ff ff       	call   1000167f <x87Handler(regs*)+0xaa7>	1000167f: R_386_PC32	fpuGetReg(int)
10001683:	8d 95 34 fc ff ff    	lea    edx,[ebp-0x3cc]
10001689:	83 ec 0c             	sub    esp,0xc
1000168c:	6a 00                	push   0x0
1000168e:	52                   	push   edx
1000168f:	e8 fc ff ff ff       	call   10001690 <x87Handler(regs*)+0xab8>	10001690: R_386_PC32	fpuGetReg(int)
10001694:	8d 85 40 fc ff ff    	lea    eax,[ebp-0x3c0]
1000169a:	57                   	push   edi
1000169b:	b9 03 00 00 00       	mov    ecx,0x3
100016a0:	89 e7                	mov    edi,esp
100016a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016a4:	83 ec 0c             	sub    esp,0xc
100016a7:	b9 03 00 00 00       	mov    ecx,0x3
100016ac:	89 e7                	mov    edi,esp
100016ae:	8d 95 34 fc ff ff    	lea    edx,[ebp-0x3cc]
100016b4:	89 d6                	mov    esi,edx
100016b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016b8:	50                   	push   eax
100016b9:	e8 fc ff ff ff       	call   100016ba <x87Handler(regs*)+0xae2>	100016ba: R_386_PC32	fpuMultiply(_Float80, _Float80)
100016be:	83 c4 20             	add    esp,0x20
100016c1:	b9 03 00 00 00       	mov    ecx,0x3
100016c6:	89 e7                	mov    edi,esp
100016c8:	8d 85 40 fc ff ff    	lea    eax,[ebp-0x3c0]
100016ce:	89 c6                	mov    esi,eax
100016d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016d2:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100016d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016dc:	2d c8 00 00 00       	sub    eax,0xc8
100016e1:	e9 00 01 00 00       	jmp    100017e6 <x87Handler(regs*)+0xc0e>
100016e6:	3c f7                	cmp    al,0xf7
100016e8:	76 7e                	jbe    10001768 <x87Handler(regs*)+0xb90>
100016ea:	8d b5 4c fc ff ff    	lea    esi,[ebp-0x3b4]
100016f0:	57                   	push   edi
100016f1:	57                   	push   edi
100016f2:	6a 00                	push   0x0
100016f4:	56                   	push   esi
100016f5:	e8 fc ff ff ff       	call   100016f6 <x87Handler(regs*)+0xb1e>	100016f6: R_386_PC32	fpuGetReg(int)
100016fa:	8d 95 58 fc ff ff    	lea    edx,[ebp-0x3a8]
10001700:	83 ec 0c             	sub    esp,0xc
10001703:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001709:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000170d:	2d f8 00 00 00       	sub    eax,0xf8
10001712:	50                   	push   eax
10001713:	52                   	push   edx
10001714:	e8 fc ff ff ff       	call   10001715 <x87Handler(regs*)+0xb3d>	10001715: R_386_PC32	fpuGetReg(int)
10001719:	8d 85 64 fc ff ff    	lea    eax,[ebp-0x39c]
1000171f:	52                   	push   edx
10001720:	b9 03 00 00 00       	mov    ecx,0x3
10001725:	89 e7                	mov    edi,esp
10001727:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001729:	83 ec 0c             	sub    esp,0xc
1000172c:	b9 03 00 00 00       	mov    ecx,0x3
10001731:	89 e7                	mov    edi,esp
10001733:	8d 95 58 fc ff ff    	lea    edx,[ebp-0x3a8]
10001739:	89 d6                	mov    esi,edx
1000173b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000173d:	50                   	push   eax
1000173e:	e8 fc ff ff ff       	call   1000173f <x87Handler(regs*)+0xb67>	1000173f: R_386_PC32	fpuDivide(_Float80, _Float80)
10001743:	83 c4 20             	add    esp,0x20
10001746:	b9 03 00 00 00       	mov    ecx,0x3
1000174b:	89 e7                	mov    edi,esp
1000174d:	8d 85 64 fc ff ff    	lea    eax,[ebp-0x39c]
10001753:	89 c6                	mov    esi,eax
10001755:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001757:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000175d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001761:	2d f8 00 00 00       	sub    eax,0xf8
10001766:	eb 7e                	jmp    100017e6 <x87Handler(regs*)+0xc0e>
10001768:	8d 50 10             	lea    edx,[eax+0x10]
1000176b:	80 fa 07             	cmp    dl,0x7
1000176e:	0f 87 08 02 00 00    	ja     1000197c <x87Handler(regs*)+0xda4>
10001774:	8d b5 70 fc ff ff    	lea    esi,[ebp-0x390]
1000177a:	52                   	push   edx
1000177b:	52                   	push   edx
1000177c:	2d f0 00 00 00       	sub    eax,0xf0
10001781:	50                   	push   eax
10001782:	56                   	push   esi
10001783:	e8 fc ff ff ff       	call   10001784 <x87Handler(regs*)+0xbac>	10001784: R_386_PC32	fpuGetReg(int)
10001788:	8d 95 7c fc ff ff    	lea    edx,[ebp-0x384]
1000178e:	83 ec 0c             	sub    esp,0xc
10001791:	6a 00                	push   0x0
10001793:	52                   	push   edx
10001794:	e8 fc ff ff ff       	call   10001795 <x87Handler(regs*)+0xbbd>	10001795: R_386_PC32	fpuGetReg(int)
10001799:	8d 85 88 fc ff ff    	lea    eax,[ebp-0x378]
1000179f:	51                   	push   ecx
100017a0:	b9 03 00 00 00       	mov    ecx,0x3
100017a5:	89 e7                	mov    edi,esp
100017a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017a9:	83 ec 0c             	sub    esp,0xc
100017ac:	b9 03 00 00 00       	mov    ecx,0x3
100017b1:	89 e7                	mov    edi,esp
100017b3:	8d 95 7c fc ff ff    	lea    edx,[ebp-0x384]
100017b9:	89 d6                	mov    esi,edx
100017bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017bd:	50                   	push   eax
100017be:	e8 fc ff ff ff       	call   100017bf <x87Handler(regs*)+0xbe7>	100017bf: R_386_PC32	fpuDivide(_Float80, _Float80)
100017c3:	83 c4 20             	add    esp,0x20
100017c6:	b9 03 00 00 00       	mov    ecx,0x3
100017cb:	89 e7                	mov    edi,esp
100017cd:	8d 85 88 fc ff ff    	lea    eax,[ebp-0x378]
100017d3:	89 c6                	mov    esi,eax
100017d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017d7:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100017dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017e1:	2d f0 00 00 00       	sub    eax,0xf0
100017e6:	50                   	push   eax
100017e7:	e9 0e fb ff ff       	jmp    100012fa <x87Handler(regs*)+0x722>
100017ec:	80 fa dd             	cmp    dl,0xdd
100017ef:	0f 85 30 01 00 00    	jne    10001925 <x87Handler(regs*)+0xd4d>
100017f5:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100017fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017ff:	8d 50 30             	lea    edx,[eax+0x30]
10001802:	80 fa 07             	cmp    dl,0x7
10001805:	77 2e                	ja     10001835 <x87Handler(regs*)+0xc5d>
10001807:	8d b5 94 fc ff ff    	lea    esi,[ebp-0x36c]
1000180d:	50                   	push   eax
1000180e:	50                   	push   eax
1000180f:	6a 00                	push   0x0
10001811:	56                   	push   esi
10001812:	e8 fc ff ff ff       	call   10001813 <x87Handler(regs*)+0xc3b>	10001813: R_386_PC32	fpuGetReg(int)
10001817:	b9 03 00 00 00       	mov    ecx,0x3
1000181c:	89 e7                	mov    edi,esp
1000181e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001820:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001826:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000182a:	2d d0 00 00 00       	sub    eax,0xd0
1000182f:	50                   	push   eax
10001830:	e9 98 f4 ff ff       	jmp    10000ccd <x87Handler(regs*)+0xf5>
10001835:	8d 50 28             	lea    edx,[eax+0x28]
10001838:	80 fa 07             	cmp    dl,0x7
1000183b:	77 2d                	ja     1000186a <x87Handler(regs*)+0xc92>
1000183d:	8d b5 a0 fc ff ff    	lea    esi,[ebp-0x360]
10001843:	50                   	push   eax
10001844:	50                   	push   eax
10001845:	6a 00                	push   0x0
10001847:	56                   	push   esi
10001848:	e8 fc ff ff ff       	call   10001849 <x87Handler(regs*)+0xc71>	10001849: R_386_PC32	fpuGetReg(int)
1000184d:	b9 03 00 00 00       	mov    ecx,0x3
10001852:	89 e7                	mov    edi,esp
10001854:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001856:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000185c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001860:	2d d8 00 00 00       	sub    eax,0xd8
10001865:	e9 d7 fc ff ff       	jmp    10001541 <x87Handler(regs*)+0x969>
1000186a:	8d 50 20             	lea    edx,[eax+0x20]
1000186d:	80 fa 07             	cmp    dl,0x7
10001870:	77 52                	ja     100018c4 <x87Handler(regs*)+0xcec>
10001872:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
10001878:	57                   	push   edi
10001879:	57                   	push   edi
1000187a:	2d e0 00 00 00       	sub    eax,0xe0
1000187f:	50                   	push   eax
10001880:	56                   	push   esi
10001881:	e8 fc ff ff ff       	call   10001882 <x87Handler(regs*)+0xcaa>	10001882: R_386_PC32	fpuGetReg(int)
10001886:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
1000188c:	83 ec 0c             	sub    esp,0xc
1000188f:	6a 00                	push   0x0
10001891:	50                   	push   eax
10001892:	e8 fc ff ff ff       	call   10001893 <x87Handler(regs*)+0xcbb>	10001893: R_386_PC32	fpuGetReg(int)
10001897:	50                   	push   eax
10001898:	50                   	push   eax
10001899:	b9 03 00 00 00       	mov    ecx,0x3
1000189e:	89 e7                	mov    edi,esp
100018a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018a2:	83 ec 0c             	sub    esp,0xc
100018a5:	b9 03 00 00 00       	mov    ecx,0x3
100018aa:	89 e7                	mov    edi,esp
100018ac:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
100018b2:	89 c6                	mov    esi,eax
100018b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018b6:	e8 fc ff ff ff       	call   100018b7 <x87Handler(regs*)+0xcdf>	100018b7: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100018bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100018bf:	e9 b8 06 00 00       	jmp    10001f7c <x87Handler(regs*)+0x13a4>
100018c4:	8d 50 18             	lea    edx,[eax+0x18]
100018c7:	80 fa 07             	cmp    dl,0x7
100018ca:	0f 87 5c f6 ff ff    	ja     10000f2c <x87Handler(regs*)+0x354>
100018d0:	8d b5 c4 fc ff ff    	lea    esi,[ebp-0x33c]
100018d6:	52                   	push   edx
100018d7:	52                   	push   edx
100018d8:	2d e8 00 00 00       	sub    eax,0xe8
100018dd:	50                   	push   eax
100018de:	56                   	push   esi
100018df:	e8 fc ff ff ff       	call   100018e0 <x87Handler(regs*)+0xd08>	100018e0: R_386_PC32	fpuGetReg(int)
100018e4:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
100018ea:	83 ec 0c             	sub    esp,0xc
100018ed:	6a 00                	push   0x0
100018ef:	50                   	push   eax
100018f0:	e8 fc ff ff ff       	call   100018f1 <x87Handler(regs*)+0xd19>	100018f1: R_386_PC32	fpuGetReg(int)
100018f5:	51                   	push   ecx
100018f6:	51                   	push   ecx
100018f7:	b9 03 00 00 00       	mov    ecx,0x3
100018fc:	89 e7                	mov    edi,esp
100018fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001900:	83 ec 0c             	sub    esp,0xc
10001903:	b9 03 00 00 00       	mov    ecx,0x3
10001908:	89 e7                	mov    edi,esp
1000190a:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
10001910:	89 c6                	mov    esi,eax
10001912:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001914:	e8 fc ff ff ff       	call   10001915 <x87Handler(regs*)+0xd3d>	10001915: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001919:	8d 45 dc             	lea    eax,[ebp-0x24]
1000191c:	83 c4 24             	add    esp,0x24
1000191f:	50                   	push   eax
10001920:	e9 28 fc ff ff       	jmp    1000154d <x87Handler(regs*)+0x975>
10001925:	80 fa da             	cmp    dl,0xda
10001928:	0f 85 b6 00 00 00    	jne    100019e4 <x87Handler(regs*)+0xe0c>
1000192e:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001934:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001938:	0f 85 60 03 00 00    	jne    10001c9e <x87Handler(regs*)+0x10c6>
1000193e:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
10001944:	50                   	push   eax
10001945:	50                   	push   eax
10001946:	6a 01                	push   0x1
10001948:	56                   	push   esi
10001949:	e8 fc ff ff ff       	call   1000194a <x87Handler(regs*)+0xd72>	1000194a: R_386_PC32	fpuGetReg(int)
1000194e:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
10001954:	83 ec 0c             	sub    esp,0xc
10001957:	6a 00                	push   0x0
10001959:	50                   	push   eax
1000195a:	e8 fc ff ff ff       	call   1000195b <x87Handler(regs*)+0xd83>	1000195b: R_386_PC32	fpuGetReg(int)
1000195f:	50                   	push   eax
10001960:	50                   	push   eax
10001961:	b9 03 00 00 00       	mov    ecx,0x3
10001966:	89 e7                	mov    edi,esp
10001968:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000196a:	83 ec 0c             	sub    esp,0xc
1000196d:	b9 03 00 00 00       	mov    ecx,0x3
10001972:	89 e7                	mov    edi,esp
10001974:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
1000197a:	eb 44                	jmp    100019c0 <x87Handler(regs*)+0xde8>
1000197c:	3c d9                	cmp    al,0xd9
1000197e:	0f 85 96 08 00 00    	jne    1000221a <x87Handler(regs*)+0x1642>
10001984:	8d b5 f4 fc ff ff    	lea    esi,[ebp-0x30c]
1000198a:	51                   	push   ecx
1000198b:	51                   	push   ecx
1000198c:	6a 01                	push   0x1
1000198e:	56                   	push   esi
1000198f:	e8 fc ff ff ff       	call   10001990 <x87Handler(regs*)+0xdb8>	10001990: R_386_PC32	fpuGetReg(int)
10001994:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
1000199a:	83 ec 0c             	sub    esp,0xc
1000199d:	6a 00                	push   0x0
1000199f:	50                   	push   eax
100019a0:	e8 fc ff ff ff       	call   100019a1 <x87Handler(regs*)+0xdc9>	100019a1: R_386_PC32	fpuGetReg(int)
100019a5:	57                   	push   edi
100019a6:	57                   	push   edi
100019a7:	b9 03 00 00 00       	mov    ecx,0x3
100019ac:	89 e7                	mov    edi,esp
100019ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019b0:	83 ec 0c             	sub    esp,0xc
100019b3:	b9 03 00 00 00       	mov    ecx,0x3
100019b8:	89 e7                	mov    edi,esp
100019ba:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
100019c0:	89 c6                	mov    esi,eax
100019c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019c4:	e8 fc ff ff ff       	call   100019c5 <x87Handler(regs*)+0xded>	100019c5: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100019c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100019cd:	8d 5d dc             	lea    ebx,[ebp-0x24]
100019d0:	83 c4 24             	add    esp,0x24
100019d3:	53                   	push   ebx
100019d4:	e8 fc ff ff ff       	call   100019d5 <x87Handler(regs*)+0xdfd>	100019d5: R_386_PC32	fpuPop()
100019d9:	53                   	push   ebx
100019da:	e8 fc ff ff ff       	call   100019db <x87Handler(regs*)+0xe03>	100019db: R_386_PC32	fpuPop()
100019df:	e9 07 06 00 00       	jmp    10001feb <x87Handler(regs*)+0x1413>
100019e4:	80 fa df             	cmp    dl,0xdf
100019e7:	0f 85 05 04 00 00    	jne    10001df2 <x87Handler(regs*)+0x121a>
100019ed:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100019f3:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
100019f7:	0f 85 9b 08 00 00    	jne    10002298 <x87Handler(regs*)+0x16c0>
100019fd:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001a00: R_386_32	fpuState
10001a04:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001a08:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a0c:	e9 c8 f2 ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001a11:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001a17:	84 d2                	test   dl,dl
10001a19:	75 66                	jne    10001a81 <x87Handler(regs*)+0xea9>
10001a1b:	8d b5 0c fd ff ff    	lea    esi,[ebp-0x2f4]
10001a21:	50                   	push   eax
10001a22:	50                   	push   eax
10001a23:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001a29:	ff 30                	push   DWORD PTR [eax]
10001a2b:	56                   	push   esi
10001a2c:	e8 fc ff ff ff       	call   10001a2d <x87Handler(regs*)+0xe55>	10001a2d: R_386_PC32	fpu32ToInternal(unsigned int)
10001a31:	8d 95 18 fd ff ff    	lea    edx,[ebp-0x2e8]
10001a37:	83 ec 0c             	sub    esp,0xc
10001a3a:	6a 00                	push   0x0
10001a3c:	52                   	push   edx
10001a3d:	e8 fc ff ff ff       	call   10001a3e <x87Handler(regs*)+0xe66>	10001a3e: R_386_PC32	fpuGetReg(int)
10001a42:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001a48:	52                   	push   edx
10001a49:	b9 03 00 00 00       	mov    ecx,0x3
10001a4e:	89 e7                	mov    edi,esp
10001a50:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a52:	83 ec 0c             	sub    esp,0xc
10001a55:	b9 03 00 00 00       	mov    ecx,0x3
10001a5a:	89 e7                	mov    edi,esp
10001a5c:	8d 95 18 fd ff ff    	lea    edx,[ebp-0x2e8]
10001a62:	89 d6                	mov    esi,edx
10001a64:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a66:	50                   	push   eax
10001a67:	e8 fc ff ff ff       	call   10001a68 <x87Handler(regs*)+0xe90>	10001a68: R_386_PC32	fpuAdd(_Float80, _Float80)
10001a6c:	83 c4 20             	add    esp,0x20
10001a6f:	b9 03 00 00 00       	mov    ecx,0x3
10001a74:	89 e7                	mov    edi,esp
10001a76:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001a7c:	e9 fe 07 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001a81:	80 fa 01             	cmp    dl,0x1
10001a84:	75 66                	jne    10001aec <x87Handler(regs*)+0xf14>
10001a86:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001a8c:	51                   	push   ecx
10001a8d:	51                   	push   ecx
10001a8e:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001a94:	ff 30                	push   DWORD PTR [eax]
10001a96:	56                   	push   esi
10001a97:	e8 fc ff ff ff       	call   10001a98 <x87Handler(regs*)+0xec0>	10001a98: R_386_PC32	fpu32ToInternal(unsigned int)
10001a9c:	8d 95 3c fd ff ff    	lea    edx,[ebp-0x2c4]
10001aa2:	83 ec 0c             	sub    esp,0xc
10001aa5:	6a 00                	push   0x0
10001aa7:	52                   	push   edx
10001aa8:	e8 fc ff ff ff       	call   10001aa9 <x87Handler(regs*)+0xed1>	10001aa9: R_386_PC32	fpuGetReg(int)
10001aad:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001ab3:	57                   	push   edi
10001ab4:	b9 03 00 00 00       	mov    ecx,0x3
10001ab9:	89 e7                	mov    edi,esp
10001abb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001abd:	83 ec 0c             	sub    esp,0xc
10001ac0:	b9 03 00 00 00       	mov    ecx,0x3
10001ac5:	89 e7                	mov    edi,esp
10001ac7:	8d 95 3c fd ff ff    	lea    edx,[ebp-0x2c4]
10001acd:	89 d6                	mov    esi,edx
10001acf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ad1:	50                   	push   eax
10001ad2:	e8 fc ff ff ff       	call   10001ad3 <x87Handler(regs*)+0xefb>	10001ad3: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001ad7:	83 c4 20             	add    esp,0x20
10001ada:	b9 03 00 00 00       	mov    ecx,0x3
10001adf:	89 e7                	mov    edi,esp
10001ae1:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001ae7:	e9 93 07 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001aec:	80 fa 04             	cmp    dl,0x4
10001aef:	75 66                	jne    10001b57 <x87Handler(regs*)+0xf7f>
10001af1:	8d b5 54 fd ff ff    	lea    esi,[ebp-0x2ac]
10001af7:	50                   	push   eax
10001af8:	50                   	push   eax
10001af9:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001aff:	ff 30                	push   DWORD PTR [eax]
10001b01:	56                   	push   esi
10001b02:	e8 fc ff ff ff       	call   10001b03 <x87Handler(regs*)+0xf2b>	10001b03: R_386_PC32	fpu32ToInternal(unsigned int)
10001b07:	8d 95 60 fd ff ff    	lea    edx,[ebp-0x2a0]
10001b0d:	83 ec 0c             	sub    esp,0xc
10001b10:	6a 00                	push   0x0
10001b12:	52                   	push   edx
10001b13:	e8 fc ff ff ff       	call   10001b14 <x87Handler(regs*)+0xf3c>	10001b14: R_386_PC32	fpuGetReg(int)
10001b18:	8d 85 6c fd ff ff    	lea    eax,[ebp-0x294]
10001b1e:	52                   	push   edx
10001b1f:	b9 03 00 00 00       	mov    ecx,0x3
10001b24:	89 e7                	mov    edi,esp
10001b26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b28:	83 ec 0c             	sub    esp,0xc
10001b2b:	b9 03 00 00 00       	mov    ecx,0x3
10001b30:	89 e7                	mov    edi,esp
10001b32:	8d 95 60 fd ff ff    	lea    edx,[ebp-0x2a0]
10001b38:	89 d6                	mov    esi,edx
10001b3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b3c:	50                   	push   eax
10001b3d:	e8 fc ff ff ff       	call   10001b3e <x87Handler(regs*)+0xf66>	10001b3e: R_386_PC32	fpuSub(_Float80, _Float80)
10001b42:	83 c4 20             	add    esp,0x20
10001b45:	b9 03 00 00 00       	mov    ecx,0x3
10001b4a:	89 e7                	mov    edi,esp
10001b4c:	8d 85 6c fd ff ff    	lea    eax,[ebp-0x294]
10001b52:	e9 28 07 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001b57:	80 fa 05             	cmp    dl,0x5
10001b5a:	75 66                	jne    10001bc2 <x87Handler(regs*)+0xfea>
10001b5c:	8d b5 78 fd ff ff    	lea    esi,[ebp-0x288]
10001b62:	51                   	push   ecx
10001b63:	51                   	push   ecx
10001b64:	6a 00                	push   0x0
10001b66:	56                   	push   esi
10001b67:	e8 fc ff ff ff       	call   10001b68 <x87Handler(regs*)+0xf90>	10001b68: R_386_PC32	fpuGetReg(int)
10001b6c:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001b72:	83 ec 0c             	sub    esp,0xc
10001b75:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001b7b:	ff 32                	push   DWORD PTR [edx]
10001b7d:	50                   	push   eax
10001b7e:	e8 fc ff ff ff       	call   10001b7f <x87Handler(regs*)+0xfa7>	10001b7f: R_386_PC32	fpu32ToInternal(unsigned int)
10001b83:	8d 95 90 fd ff ff    	lea    edx,[ebp-0x270]
10001b89:	57                   	push   edi
10001b8a:	b9 03 00 00 00       	mov    ecx,0x3
10001b8f:	89 e7                	mov    edi,esp
10001b91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b93:	83 ec 0c             	sub    esp,0xc
10001b96:	b9 03 00 00 00       	mov    ecx,0x3
10001b9b:	89 e7                	mov    edi,esp
10001b9d:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001ba3:	89 c6                	mov    esi,eax
10001ba5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ba7:	52                   	push   edx
10001ba8:	e8 fc ff ff ff       	call   10001ba9 <x87Handler(regs*)+0xfd1>	10001ba9: R_386_PC32	fpuSub(_Float80, _Float80)
10001bad:	83 c4 20             	add    esp,0x20
10001bb0:	b9 03 00 00 00       	mov    ecx,0x3
10001bb5:	89 e7                	mov    edi,esp
10001bb7:	8d 95 90 fd ff ff    	lea    edx,[ebp-0x270]
10001bbd:	e9 e6 05 00 00       	jmp    100021a8 <x87Handler(regs*)+0x15d0>
10001bc2:	80 fa 06             	cmp    dl,0x6
10001bc5:	75 66                	jne    10001c2d <x87Handler(regs*)+0x1055>
10001bc7:	8d b5 9c fd ff ff    	lea    esi,[ebp-0x264]
10001bcd:	50                   	push   eax
10001bce:	50                   	push   eax
10001bcf:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001bd5:	ff 30                	push   DWORD PTR [eax]
10001bd7:	56                   	push   esi
10001bd8:	e8 fc ff ff ff       	call   10001bd9 <x87Handler(regs*)+0x1001>	10001bd9: R_386_PC32	fpu32ToInternal(unsigned int)
10001bdd:	8d 95 a8 fd ff ff    	lea    edx,[ebp-0x258]
10001be3:	83 ec 0c             	sub    esp,0xc
10001be6:	6a 00                	push   0x0
10001be8:	52                   	push   edx
10001be9:	e8 fc ff ff ff       	call   10001bea <x87Handler(regs*)+0x1012>	10001bea: R_386_PC32	fpuGetReg(int)
10001bee:	8d 85 b4 fd ff ff    	lea    eax,[ebp-0x24c]
10001bf4:	52                   	push   edx
10001bf5:	b9 03 00 00 00       	mov    ecx,0x3
10001bfa:	89 e7                	mov    edi,esp
10001bfc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bfe:	83 ec 0c             	sub    esp,0xc
10001c01:	b9 03 00 00 00       	mov    ecx,0x3
10001c06:	89 e7                	mov    edi,esp
10001c08:	8d 95 a8 fd ff ff    	lea    edx,[ebp-0x258]
10001c0e:	89 d6                	mov    esi,edx
10001c10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c12:	50                   	push   eax
10001c13:	e8 fc ff ff ff       	call   10001c14 <x87Handler(regs*)+0x103c>	10001c14: R_386_PC32	fpuDivide(_Float80, _Float80)
10001c18:	83 c4 20             	add    esp,0x20
10001c1b:	b9 03 00 00 00       	mov    ecx,0x3
10001c20:	89 e7                	mov    edi,esp
10001c22:	8d 85 b4 fd ff ff    	lea    eax,[ebp-0x24c]
10001c28:	e9 52 06 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001c2d:	31 c0                	xor    eax,eax
10001c2f:	80 fa 07             	cmp    dl,0x7
10001c32:	0f 85 bc 06 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10001c38:	8d b5 c0 fd ff ff    	lea    esi,[ebp-0x240]
10001c3e:	57                   	push   edi
10001c3f:	57                   	push   edi
10001c40:	6a 00                	push   0x0
10001c42:	56                   	push   esi
10001c43:	e8 fc ff ff ff       	call   10001c44 <x87Handler(regs*)+0x106c>	10001c44: R_386_PC32	fpuGetReg(int)
10001c48:	8d 85 cc fd ff ff    	lea    eax,[ebp-0x234]
10001c4e:	83 ec 0c             	sub    esp,0xc
10001c51:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001c57:	ff 32                	push   DWORD PTR [edx]
10001c59:	50                   	push   eax
10001c5a:	e8 fc ff ff ff       	call   10001c5b <x87Handler(regs*)+0x1083>	10001c5b: R_386_PC32	fpu32ToInternal(unsigned int)
10001c5f:	8d 95 d8 fd ff ff    	lea    edx,[ebp-0x228]
10001c65:	50                   	push   eax
10001c66:	b9 03 00 00 00       	mov    ecx,0x3
10001c6b:	89 e7                	mov    edi,esp
10001c6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c6f:	83 ec 0c             	sub    esp,0xc
10001c72:	b9 03 00 00 00       	mov    ecx,0x3
10001c77:	89 e7                	mov    edi,esp
10001c79:	8d 85 cc fd ff ff    	lea    eax,[ebp-0x234]
10001c7f:	89 c6                	mov    esi,eax
10001c81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c83:	52                   	push   edx
10001c84:	e8 fc ff ff ff       	call   10001c85 <x87Handler(regs*)+0x10ad>	10001c85: R_386_PC32	fpuDivide(_Float80, _Float80)
10001c89:	83 c4 20             	add    esp,0x20
10001c8c:	b9 03 00 00 00       	mov    ecx,0x3
10001c91:	89 e7                	mov    edi,esp
10001c93:	8d 95 d8 fd ff ff    	lea    edx,[ebp-0x228]
10001c99:	e9 0a 05 00 00       	jmp    100021a8 <x87Handler(regs*)+0x15d0>
10001c9e:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001ca4:	80 fa 01             	cmp    dl,0x1
10001ca7:	75 69                	jne    10001d12 <x87Handler(regs*)+0x113a>
10001ca9:	8d b5 f0 fd ff ff    	lea    esi,[ebp-0x210]
10001caf:	50                   	push   eax
10001cb0:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001cb6:	8b 00                	mov    eax,DWORD PTR [eax]
10001cb8:	31 d2                	xor    edx,edx
10001cba:	52                   	push   edx
10001cbb:	50                   	push   eax
10001cbc:	56                   	push   esi
10001cbd:	e8 fc ff ff ff       	call   10001cbe <x87Handler(regs*)+0x10e6>	10001cbe: R_386_PC32	fpuLongToFloat(long long)
10001cc2:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001cc8:	83 ec 0c             	sub    esp,0xc
10001ccb:	6a 00                	push   0x0
10001ccd:	52                   	push   edx
10001cce:	e8 fc ff ff ff       	call   10001ccf <x87Handler(regs*)+0x10f7>	10001ccf: R_386_PC32	fpuGetReg(int)
10001cd3:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001cd9:	52                   	push   edx
10001cda:	b9 03 00 00 00       	mov    ecx,0x3
10001cdf:	89 e7                	mov    edi,esp
10001ce1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ce3:	83 ec 0c             	sub    esp,0xc
10001ce6:	b9 03 00 00 00       	mov    ecx,0x3
10001ceb:	89 e7                	mov    edi,esp
10001ced:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001cf3:	89 d6                	mov    esi,edx
10001cf5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cf7:	50                   	push   eax
10001cf8:	e8 fc ff ff ff       	call   10001cf9 <x87Handler(regs*)+0x1121>	10001cf9: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001cfd:	83 c4 20             	add    esp,0x20
10001d00:	b9 03 00 00 00       	mov    ecx,0x3
10001d05:	89 e7                	mov    edi,esp
10001d07:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d0d:	e9 6d 05 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001d12:	80 fa 04             	cmp    dl,0x4
10001d15:	75 69                	jne    10001d80 <x87Handler(regs*)+0x11a8>
10001d17:	8d b5 14 fe ff ff    	lea    esi,[ebp-0x1ec]
10001d1d:	51                   	push   ecx
10001d1e:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001d24:	8b 00                	mov    eax,DWORD PTR [eax]
10001d26:	31 d2                	xor    edx,edx
10001d28:	52                   	push   edx
10001d29:	50                   	push   eax
10001d2a:	56                   	push   esi
10001d2b:	e8 fc ff ff ff       	call   10001d2c <x87Handler(regs*)+0x1154>	10001d2c: R_386_PC32	fpuLongToFloat(long long)
10001d30:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001d36:	83 ec 0c             	sub    esp,0xc
10001d39:	6a 00                	push   0x0
10001d3b:	52                   	push   edx
10001d3c:	e8 fc ff ff ff       	call   10001d3d <x87Handler(regs*)+0x1165>	10001d3d: R_386_PC32	fpuGetReg(int)
10001d41:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001d47:	57                   	push   edi
10001d48:	b9 03 00 00 00       	mov    ecx,0x3
10001d4d:	89 e7                	mov    edi,esp
10001d4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d51:	83 ec 0c             	sub    esp,0xc
10001d54:	b9 03 00 00 00       	mov    ecx,0x3
10001d59:	89 e7                	mov    edi,esp
10001d5b:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001d61:	89 d6                	mov    esi,edx
10001d63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d65:	50                   	push   eax
10001d66:	e8 fc ff ff ff       	call   10001d67 <x87Handler(regs*)+0x118f>	10001d67: R_386_PC32	fpuSub(_Float80, _Float80)
10001d6b:	83 c4 20             	add    esp,0x20
10001d6e:	b9 03 00 00 00       	mov    ecx,0x3
10001d73:	89 e7                	mov    edi,esp
10001d75:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001d7b:	e9 ff 04 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001d80:	31 c0                	xor    eax,eax
10001d82:	80 fa 07             	cmp    dl,0x7
10001d85:	0f 85 69 05 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10001d8b:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001d91:	50                   	push   eax
10001d92:	50                   	push   eax
10001d93:	6a 00                	push   0x0
10001d95:	56                   	push   esi
10001d96:	e8 fc ff ff ff       	call   10001d97 <x87Handler(regs*)+0x11bf>	10001d97: R_386_PC32	fpuGetReg(int)
10001d9b:	50                   	push   eax
10001d9c:	50                   	push   eax
10001d9d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001da3:	8b 00                	mov    eax,DWORD PTR [eax]
10001da5:	31 d2                	xor    edx,edx
10001da7:	52                   	push   edx
10001da8:	50                   	push   eax
10001da9:	8d 85 44 fe ff ff    	lea    eax,[ebp-0x1bc]
10001daf:	50                   	push   eax
10001db0:	e8 fc ff ff ff       	call   10001db1 <x87Handler(regs*)+0x11d9>	10001db1: R_386_PC32	fpuLongToFloat(long long)
10001db5:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001dbb:	52                   	push   edx
10001dbc:	b9 03 00 00 00       	mov    ecx,0x3
10001dc1:	89 e7                	mov    edi,esp
10001dc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dc5:	83 ec 0c             	sub    esp,0xc
10001dc8:	b9 03 00 00 00       	mov    ecx,0x3
10001dcd:	89 e7                	mov    edi,esp
10001dcf:	8d b5 44 fe ff ff    	lea    esi,[ebp-0x1bc]
10001dd5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dd7:	50                   	push   eax
10001dd8:	e8 fc ff ff ff       	call   10001dd9 <x87Handler(regs*)+0x1201>	10001dd9: R_386_PC32	fpuDivide(_Float80, _Float80)
10001ddd:	83 c4 20             	add    esp,0x20
10001de0:	b9 03 00 00 00       	mov    ecx,0x3
10001de5:	89 e7                	mov    edi,esp
10001de7:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001ded:	e9 8d 04 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001df2:	31 c0                	xor    eax,eax
10001df4:	80 fa db             	cmp    dl,0xdb
10001df7:	0f 85 f7 04 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10001dfd:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001e03:	84 d2                	test   dl,dl
10001e05:	0f 85 66 f1 ff ff    	jne    10000f71 <x87Handler(regs*)+0x399>
10001e0b:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001e11:	50                   	push   eax
10001e12:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e18:	8b 00                	mov    eax,DWORD PTR [eax]
10001e1a:	31 d2                	xor    edx,edx
10001e1c:	52                   	push   edx
10001e1d:	50                   	push   eax
10001e1e:	e9 8f 04 00 00       	jmp    100022b2 <x87Handler(regs*)+0x16da>
10001e23:	31 c0                	xor    eax,eax
10001e25:	80 fa 03             	cmp    dl,0x3
10001e28:	0f 85 c6 04 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10001e2e:	8d b5 74 fe ff ff    	lea    esi,[ebp-0x18c]
10001e34:	83 ec 0c             	sub    esp,0xc
10001e37:	56                   	push   esi
10001e38:	e8 fc ff ff ff       	call   10001e39 <x87Handler(regs*)+0x1261>	10001e39: R_386_PC32	fpuPop()
10001e3d:	e9 48 f1 ff ff       	jmp    10000f8a <x87Handler(regs*)+0x3b2>
10001e42:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001e48:	84 d2                	test   dl,dl
10001e4a:	75 68                	jne    10001eb4 <x87Handler(regs*)+0x12dc>
10001e4c:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001e52:	51                   	push   ecx
10001e53:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e59:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e5c:	ff 30                	push   DWORD PTR [eax]
10001e5e:	56                   	push   esi
10001e5f:	e8 fc ff ff ff       	call   10001e60 <x87Handler(regs*)+0x1288>	10001e60: R_386_PC32	fpu64ToInternal(unsigned long long)
10001e64:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001e6a:	83 ec 0c             	sub    esp,0xc
10001e6d:	6a 00                	push   0x0
10001e6f:	52                   	push   edx
10001e70:	e8 fc ff ff ff       	call   10001e71 <x87Handler(regs*)+0x1299>	10001e71: R_386_PC32	fpuGetReg(int)
10001e75:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001e7b:	57                   	push   edi
10001e7c:	b9 03 00 00 00       	mov    ecx,0x3
10001e81:	89 e7                	mov    edi,esp
10001e83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e85:	83 ec 0c             	sub    esp,0xc
10001e88:	b9 03 00 00 00       	mov    ecx,0x3
10001e8d:	89 e7                	mov    edi,esp
10001e8f:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001e95:	89 d6                	mov    esi,edx
10001e97:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e99:	50                   	push   eax
10001e9a:	e8 fc ff ff ff       	call   10001e9b <x87Handler(regs*)+0x12c3>	10001e9b: R_386_PC32	fpuAdd(_Float80, _Float80)
10001e9f:	83 c4 20             	add    esp,0x20
10001ea2:	b9 03 00 00 00       	mov    ecx,0x3
10001ea7:	89 e7                	mov    edi,esp
10001ea9:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001eaf:	e9 cb 03 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001eb4:	80 fa 01             	cmp    dl,0x1
10001eb7:	75 68                	jne    10001f21 <x87Handler(regs*)+0x1349>
10001eb9:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001ebf:	50                   	push   eax
10001ec0:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001ec6:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001ec9:	ff 30                	push   DWORD PTR [eax]
10001ecb:	56                   	push   esi
10001ecc:	e8 fc ff ff ff       	call   10001ecd <x87Handler(regs*)+0x12f5>	10001ecd: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ed1:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001ed7:	83 ec 0c             	sub    esp,0xc
10001eda:	6a 00                	push   0x0
10001edc:	52                   	push   edx
10001edd:	e8 fc ff ff ff       	call   10001ede <x87Handler(regs*)+0x1306>	10001ede: R_386_PC32	fpuGetReg(int)
10001ee2:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001ee8:	52                   	push   edx
10001ee9:	b9 03 00 00 00       	mov    ecx,0x3
10001eee:	89 e7                	mov    edi,esp
10001ef0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ef2:	83 ec 0c             	sub    esp,0xc
10001ef5:	b9 03 00 00 00       	mov    ecx,0x3
10001efa:	89 e7                	mov    edi,esp
10001efc:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f02:	89 d6                	mov    esi,edx
10001f04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f06:	50                   	push   eax
10001f07:	e8 fc ff ff ff       	call   10001f08 <x87Handler(regs*)+0x1330>	10001f08: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f0c:	83 c4 20             	add    esp,0x20
10001f0f:	b9 03 00 00 00       	mov    ecx,0x3
10001f14:	89 e7                	mov    edi,esp
10001f16:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f1c:	e9 5e 03 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10001f21:	80 fa 02             	cmp    dl,0x2
10001f24:	75 5e                	jne    10001f84 <x87Handler(regs*)+0x13ac>
10001f26:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f2c:	50                   	push   eax
10001f2d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001f33:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f36:	ff 30                	push   DWORD PTR [eax]
10001f38:	56                   	push   esi
10001f39:	e8 fc ff ff ff       	call   10001f3a <x87Handler(regs*)+0x1362>	10001f3a: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f3e:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001f44:	83 ec 0c             	sub    esp,0xc
10001f47:	6a 00                	push   0x0
10001f49:	50                   	push   eax
10001f4a:	e8 fc ff ff ff       	call   10001f4b <x87Handler(regs*)+0x1373>	10001f4b: R_386_PC32	fpuGetReg(int)
10001f4f:	50                   	push   eax
10001f50:	50                   	push   eax
10001f51:	b9 03 00 00 00       	mov    ecx,0x3
10001f56:	89 e7                	mov    edi,esp
10001f58:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f5a:	83 ec 0c             	sub    esp,0xc
10001f5d:	b9 03 00 00 00       	mov    ecx,0x3
10001f62:	89 e7                	mov    edi,esp
10001f64:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001f6a:	89 c6                	mov    esi,eax
10001f6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f6e:	e8 fc ff ff ff       	call   10001f6f <x87Handler(regs*)+0x1397>	10001f6f: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001f73:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10001f79:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001f7c:	83 c4 30             	add    esp,0x30
10001f7f:	e9 55 ed ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001f84:	80 fa 03             	cmp    dl,0x3
10001f87:	75 6a                	jne    10001ff3 <x87Handler(regs*)+0x141b>
10001f89:	8d b5 e0 fe ff ff    	lea    esi,[ebp-0x120]
10001f8f:	51                   	push   ecx
10001f90:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001f96:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f99:	ff 30                	push   DWORD PTR [eax]
10001f9b:	56                   	push   esi
10001f9c:	e8 fc ff ff ff       	call   10001f9d <x87Handler(regs*)+0x13c5>	10001f9d: R_386_PC32	fpu64ToInternal(unsigned long long)
10001fa1:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10001fa7:	83 ec 0c             	sub    esp,0xc
10001faa:	6a 00                	push   0x0
10001fac:	50                   	push   eax
10001fad:	e8 fc ff ff ff       	call   10001fae <x87Handler(regs*)+0x13d6>	10001fae: R_386_PC32	fpuGetReg(int)
10001fb2:	57                   	push   edi
10001fb3:	57                   	push   edi
10001fb4:	b9 03 00 00 00       	mov    ecx,0x3
10001fb9:	89 e7                	mov    edi,esp
10001fbb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fbd:	83 ec 0c             	sub    esp,0xc
10001fc0:	b9 03 00 00 00       	mov    ecx,0x3
10001fc5:	89 e7                	mov    edi,esp
10001fc7:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10001fcd:	89 c6                	mov    esi,eax
10001fcf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fd1:	e8 fc ff ff ff       	call   10001fd2 <x87Handler(regs*)+0x13fa>	10001fd2: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fd6:	8d 45 dc             	lea    eax,[ebp-0x24]
10001fd9:	83 c4 24             	add    esp,0x24
10001fdc:	50                   	push   eax
10001fdd:	e8 fc ff ff ff       	call   10001fde <x87Handler(regs*)+0x1406>	10001fde: R_386_PC32	fpuPop()
10001fe2:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10001fe8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001feb:	83 c4 0c             	add    esp,0xc
10001fee:	e9 e6 ec ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001ff3:	80 fa 04             	cmp    dl,0x4
10001ff6:	75 68                	jne    10002060 <x87Handler(regs*)+0x1488>
10001ff8:	8d b5 f8 fe ff ff    	lea    esi,[ebp-0x108]
10001ffe:	50                   	push   eax
10001fff:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002005:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002008:	ff 30                	push   DWORD PTR [eax]
1000200a:	56                   	push   esi
1000200b:	e8 fc ff ff ff       	call   1000200c <x87Handler(regs*)+0x1434>	1000200c: R_386_PC32	fpu64ToInternal(unsigned long long)
10002010:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
10002016:	83 ec 0c             	sub    esp,0xc
10002019:	6a 00                	push   0x0
1000201b:	52                   	push   edx
1000201c:	e8 fc ff ff ff       	call   1000201d <x87Handler(regs*)+0x1445>	1000201d: R_386_PC32	fpuGetReg(int)
10002021:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002027:	52                   	push   edx
10002028:	b9 03 00 00 00       	mov    ecx,0x3
1000202d:	89 e7                	mov    edi,esp
1000202f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002031:	83 ec 0c             	sub    esp,0xc
10002034:	b9 03 00 00 00       	mov    ecx,0x3
10002039:	89 e7                	mov    edi,esp
1000203b:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
10002041:	89 d6                	mov    esi,edx
10002043:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002045:	50                   	push   eax
10002046:	e8 fc ff ff ff       	call   10002047 <x87Handler(regs*)+0x146f>	10002047: R_386_PC32	fpuSub(_Float80, _Float80)
1000204b:	83 c4 20             	add    esp,0x20
1000204e:	b9 03 00 00 00       	mov    ecx,0x3
10002053:	89 e7                	mov    edi,esp
10002055:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
1000205b:	e9 1f 02 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
10002060:	80 fa 05             	cmp    dl,0x5
10002063:	75 68                	jne    100020cd <x87Handler(regs*)+0x14f5>
10002065:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
1000206b:	51                   	push   ecx
1000206c:	51                   	push   ecx
1000206d:	6a 00                	push   0x0
1000206f:	56                   	push   esi
10002070:	e8 fc ff ff ff       	call   10002071 <x87Handler(regs*)+0x1499>	10002071: R_386_PC32	fpuGetReg(int)
10002075:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
1000207b:	57                   	push   edi
1000207c:	57                   	push   edi
1000207d:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10002083:	ff 72 04             	push   DWORD PTR [edx+0x4]
10002086:	ff 32                	push   DWORD PTR [edx]
10002088:	50                   	push   eax
10002089:	e8 fc ff ff ff       	call   1000208a <x87Handler(regs*)+0x14b2>	1000208a: R_386_PC32	fpu64ToInternal(unsigned long long)
1000208e:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
10002094:	50                   	push   eax
10002095:	b9 03 00 00 00       	mov    ecx,0x3
1000209a:	89 e7                	mov    edi,esp
1000209c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000209e:	83 ec 0c             	sub    esp,0xc
100020a1:	b9 03 00 00 00       	mov    ecx,0x3
100020a6:	89 e7                	mov    edi,esp
100020a8:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
100020ae:	89 c6                	mov    esi,eax
100020b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020b2:	52                   	push   edx
100020b3:	e8 fc ff ff ff       	call   100020b4 <x87Handler(regs*)+0x14dc>	100020b4: R_386_PC32	fpuSub(_Float80, _Float80)
100020b8:	83 c4 20             	add    esp,0x20
100020bb:	b9 03 00 00 00       	mov    ecx,0x3
100020c0:	89 e7                	mov    edi,esp
100020c2:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
100020c8:	e9 db 00 00 00       	jmp    100021a8 <x87Handler(regs*)+0x15d0>
100020cd:	80 fa 06             	cmp    dl,0x6
100020d0:	75 68                	jne    1000213a <x87Handler(regs*)+0x1562>
100020d2:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
100020d8:	57                   	push   edi
100020d9:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100020df:	ff 70 04             	push   DWORD PTR [eax+0x4]
100020e2:	ff 30                	push   DWORD PTR [eax]
100020e4:	56                   	push   esi
100020e5:	e8 fc ff ff ff       	call   100020e6 <x87Handler(regs*)+0x150e>	100020e6: R_386_PC32	fpu64ToInternal(unsigned long long)
100020ea:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
100020f0:	83 ec 0c             	sub    esp,0xc
100020f3:	6a 00                	push   0x0
100020f5:	52                   	push   edx
100020f6:	e8 fc ff ff ff       	call   100020f7 <x87Handler(regs*)+0x151f>	100020f7: R_386_PC32	fpuGetReg(int)
100020fb:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
10002101:	52                   	push   edx
10002102:	b9 03 00 00 00       	mov    ecx,0x3
10002107:	89 e7                	mov    edi,esp
10002109:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000210b:	83 ec 0c             	sub    esp,0xc
1000210e:	b9 03 00 00 00       	mov    ecx,0x3
10002113:	89 e7                	mov    edi,esp
10002115:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
1000211b:	89 d6                	mov    esi,edx
1000211d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000211f:	50                   	push   eax
10002120:	e8 fc ff ff ff       	call   10002121 <x87Handler(regs*)+0x1549>	10002121: R_386_PC32	fpuDivide(_Float80, _Float80)
10002125:	83 c4 20             	add    esp,0x20
10002128:	b9 03 00 00 00       	mov    ecx,0x3
1000212d:	89 e7                	mov    edi,esp
1000212f:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
10002135:	e9 45 01 00 00       	jmp    1000227f <x87Handler(regs*)+0x16a7>
1000213a:	31 c0                	xor    eax,eax
1000213c:	80 fa 07             	cmp    dl,0x7
1000213f:	0f 85 af 01 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10002145:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
1000214b:	50                   	push   eax
1000214c:	50                   	push   eax
1000214d:	6a 00                	push   0x0
1000214f:	56                   	push   esi
10002150:	e8 fc ff ff ff       	call   10002151 <x87Handler(regs*)+0x1579>	10002151: R_386_PC32	fpuGetReg(int)
10002155:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
1000215b:	52                   	push   edx
1000215c:	52                   	push   edx
1000215d:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10002163:	ff 72 04             	push   DWORD PTR [edx+0x4]
10002166:	ff 32                	push   DWORD PTR [edx]
10002168:	50                   	push   eax
10002169:	e8 fc ff ff ff       	call   1000216a <x87Handler(regs*)+0x1592>	1000216a: R_386_PC32	fpu64ToInternal(unsigned long long)
1000216e:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
10002174:	51                   	push   ecx
10002175:	b9 03 00 00 00       	mov    ecx,0x3
1000217a:	89 e7                	mov    edi,esp
1000217c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000217e:	83 ec 0c             	sub    esp,0xc
10002181:	b9 03 00 00 00       	mov    ecx,0x3
10002186:	89 e7                	mov    edi,esp
10002188:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
1000218e:	89 c6                	mov    esi,eax
10002190:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002192:	52                   	push   edx
10002193:	e8 fc ff ff ff       	call   10002194 <x87Handler(regs*)+0x15bc>	10002194: R_386_PC32	fpuDivide(_Float80, _Float80)
10002198:	83 c4 20             	add    esp,0x20
1000219b:	b9 03 00 00 00       	mov    ecx,0x3
100021a0:	89 e7                	mov    edi,esp
100021a2:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100021a8:	89 d6                	mov    esi,edx
100021aa:	e9 d2 00 00 00       	jmp    10002281 <x87Handler(regs*)+0x16a9>
100021af:	80 fa 02             	cmp    dl,0x2
100021b2:	75 2e                	jne    100021e2 <x87Handler(regs*)+0x160a>
100021b4:	8d 75 94             	lea    esi,[ebp-0x6c]
100021b7:	57                   	push   edi
100021b8:	57                   	push   edi
100021b9:	6a 00                	push   0x0
100021bb:	56                   	push   esi
100021bc:	e8 fc ff ff ff       	call   100021bd <x87Handler(regs*)+0x15e5>	100021bd: R_386_PC32	fpuGetReg(int)
100021c1:	83 ec 14             	sub    esp,0x14
100021c4:	b9 03 00 00 00       	mov    ecx,0x3
100021c9:	89 e7                	mov    edi,esp
100021cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021cd:	e8 fc ff ff ff       	call   100021ce <x87Handler(regs*)+0x15f6>	100021ce: R_386_PC32	fpuInternalTo64(_Float80)
100021d2:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
100021d8:	89 01                	mov    DWORD PTR [ecx],eax
100021da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
100021dd:	e9 7e ed ff ff       	jmp    10000f60 <x87Handler(regs*)+0x388>
100021e2:	31 c0                	xor    eax,eax
100021e4:	80 fa 03             	cmp    dl,0x3
100021e7:	0f 85 07 01 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
100021ed:	8d 75 a0             	lea    esi,[ebp-0x60]
100021f0:	83 ec 0c             	sub    esp,0xc
100021f3:	56                   	push   esi
100021f4:	e8 fc ff ff ff       	call   100021f5 <x87Handler(regs*)+0x161d>	100021f5: R_386_PC32	fpuPop()
100021f9:	83 ec 14             	sub    esp,0x14
100021fc:	b9 03 00 00 00       	mov    ecx,0x3
10002201:	89 e7                	mov    edi,esp
10002203:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002205:	e8 fc ff ff ff       	call   10002206 <x87Handler(regs*)+0x162e>	10002206: R_386_PC32	fpuInternalTo64(_Float80)
1000220a:	8b bd 94 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x66c]
10002210:	89 07                	mov    DWORD PTR [edi],eax
10002212:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10002215:	e9 46 ed ff ff       	jmp    10000f60 <x87Handler(regs*)+0x388>
1000221a:	31 c0                	xor    eax,eax
1000221c:	80 bd a7 f9 ff ff 01 	cmp    BYTE PTR [ebp-0x659],0x1
10002223:	0f 85 cb 00 00 00    	jne    100022f4 <x87Handler(regs*)+0x171c>
10002229:	8d 75 ac             	lea    esi,[ebp-0x54]
1000222c:	52                   	push   edx
1000222d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002233:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002236:	31 d2                	xor    edx,edx
10002238:	52                   	push   edx
10002239:	50                   	push   eax
1000223a:	56                   	push   esi
1000223b:	e8 fc ff ff ff       	call   1000223c <x87Handler(regs*)+0x1664>	1000223c: R_386_PC32	fpuLongToFloat(long long)
10002240:	8d 55 b8             	lea    edx,[ebp-0x48]
10002243:	83 ec 0c             	sub    esp,0xc
10002246:	6a 00                	push   0x0
10002248:	52                   	push   edx
10002249:	e8 fc ff ff ff       	call   1000224a <x87Handler(regs*)+0x1672>	1000224a: R_386_PC32	fpuGetReg(int)
1000224e:	8d 45 c4             	lea    eax,[ebp-0x3c]
10002251:	51                   	push   ecx
10002252:	b9 03 00 00 00       	mov    ecx,0x3
10002257:	89 e7                	mov    edi,esp
10002259:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000225b:	83 ec 0c             	sub    esp,0xc
1000225e:	b9 03 00 00 00       	mov    ecx,0x3
10002263:	89 e7                	mov    edi,esp
10002265:	8d 55 b8             	lea    edx,[ebp-0x48]
10002268:	89 d6                	mov    esi,edx
1000226a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000226c:	50                   	push   eax
1000226d:	e8 fc ff ff ff       	call   1000226e <x87Handler(regs*)+0x1696>	1000226e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10002272:	83 c4 20             	add    esp,0x20
10002275:	b9 03 00 00 00       	mov    ecx,0x3
1000227a:	89 e7                	mov    edi,esp
1000227c:	8d 45 c4             	lea    eax,[ebp-0x3c]
1000227f:	89 c6                	mov    esi,eax
10002281:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002283:	6a 00                	push   0x0
10002285:	e8 fc ff ff ff       	call   10002286 <x87Handler(regs*)+0x16ae>	10002286: R_386_PC32	fpuSetReg(int, _Float80)
1000228a:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10002290:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002293:	e9 3e ea ff ff       	jmp    10000cd6 <x87Handler(regs*)+0xfe>
10002298:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
1000229e:	80 fa 05             	cmp    dl,0x5
100022a1:	75 1a                	jne    100022bd <x87Handler(regs*)+0x16e5>
100022a3:	8d 75 d0             	lea    esi,[ebp-0x30]
100022a6:	50                   	push   eax
100022a7:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100022ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
100022b0:	ff 30                	push   DWORD PTR [eax]
100022b2:	56                   	push   esi
100022b3:	e8 fc ff ff ff       	call   100022b4 <x87Handler(regs*)+0x16dc>	100022b4: R_386_PC32	fpuULongToFloat(unsigned long long)
100022b8:	e9 92 ec ff ff       	jmp    10000f4f <x87Handler(regs*)+0x377>
100022bd:	31 c0                	xor    eax,eax
100022bf:	80 fa 07             	cmp    dl,0x7
100022c2:	75 30                	jne    100022f4 <x87Handler(regs*)+0x171c>
100022c4:	8d 75 dc             	lea    esi,[ebp-0x24]
100022c7:	83 ec 0c             	sub    esp,0xc
100022ca:	56                   	push   esi
100022cb:	e8 fc ff ff ff       	call   100022cc <x87Handler(regs*)+0x16f4>	100022cc: R_386_PC32	fpuPop()
100022d0:	83 ec 14             	sub    esp,0x14
100022d3:	b9 03 00 00 00       	mov    ecx,0x3
100022d8:	89 e7                	mov    edi,esp
100022da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022dc:	e8 fc ff ff ff       	call   100022dd <x87Handler(regs*)+0x1705>	100022dd: R_386_PC32	fpuFloatToLong(_Float80)
100022e1:	83 c4 20             	add    esp,0x20
100022e4:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
100022ea:	89 01                	mov    DWORD PTR [ecx],eax
100022ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
100022ef:	e9 b2 ec ff ff       	jmp    10000fa6 <x87Handler(regs*)+0x3ce>
100022f4:	8d 65 f4             	lea    esp,[ebp-0xc]
100022f7:	5b                   	pop    ebx
100022f8:	5e                   	pop    esi
100022f9:	5f                   	pop    edi
100022fa:	5d                   	pop    ebp
100022fb:	c3                   	ret    

100022fc <begin()>:
100022fc:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100022fe: R_386_32	x87FaultIntercept
	10002302: R_386_32	x87Handler(regs*)
10002306:	c3                   	ret    

10002307 <_GLOBAL__sub_I__Z5startv>:
10002307:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10002309: R_386_32	fpuState
10002311:	c3                   	ret    
10002312:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002314:	38 30                	cmp    BYTE PTR [eax],dh
10002316:	38 37                	cmp    BYTE PTR [edi],dh
10002318:	20 62 61             	and    BYTE PTR [edx+0x61],ah
1000231b:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
1000231f:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
10002323:	74 00                	je     10002325 <_GLOBAL__sub_I__Z5startv+0x1e>
10002325:	66 90                	xchg   ax,ax
10002327:	90                   	nop
10002328:	50                   	push   eax	10002328: R_386_32	.text
10002329:	0c 00                	or     al,0x0
1000232b:	10 80 0c 00 10 40    	adc    BYTE PTR [eax+0x4010000c],al	1000232c: R_386_32	.text
	10002330: R_386_32	.text
10002331:	0e                   	push   cs
10002332:	00 10                	add    BYTE PTR [eax],dl
10002334:	40                   	inc    eax	10002334: R_386_32	.text
10002335:	0e                   	push   cs
10002336:	00 10                	add    BYTE PTR [eax],dl
10002338:	40                   	inc    eax	10002338: R_386_32	.text
10002339:	0e                   	push   cs
1000233a:	00 10                	add    BYTE PTR [eax],dl
1000233c:	40                   	inc    eax	1000233c: R_386_32	.text
1000233d:	0e                   	push   cs
1000233e:	00 10                	add    BYTE PTR [eax],dl
10002340:	40                   	inc    eax	10002340: R_386_32	.text
10002341:	0e                   	push   cs
10002342:	00 10                	add    BYTE PTR [eax],dl
10002344:	40                   	inc    eax	10002344: R_386_32	.text
10002345:	0e                   	push   cs
10002346:	00 10                	add    BYTE PTR [eax],dl
10002348:	e0 0c                	loopne 10002356 <_GLOBAL__sub_I__Z5startv+0x4f>	10002348: R_386_32	.text
1000234a:	00 10                	add    BYTE PTR [eax],dl
1000234c:	0f 0d 00             	prefetch BYTE PTR [eax]	1000234c: R_386_32	.text
1000234f:	10 4c 0d 00          	adc    BYTE PTR [ebp+ecx*1+0x0],cl	10002350: R_386_32	.text
10002353:	10 7b 0d             	adc    BYTE PTR [ebx+0xd],bh	10002354: R_386_32	.text
10002356:	00 10                	add    BYTE PTR [eax],dl
10002358:	aa                   	stos   BYTE PTR es:[edi],al	10002358: R_386_32	.text
10002359:	0d 00 10 dc 0d       	or     eax,0xddc1000	1000235c: R_386_32	.text
1000235e:	00 10                	add    BYTE PTR [eax],dl
10002360:	0e                   	push   cs	10002360: R_386_32	.text
10002361:	0e                   	push   cs
10002362:	00 10                	add    BYTE PTR [eax],dl
