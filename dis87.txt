
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuNormalise(_Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000274:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000277:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000027a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000027d:	0f ba e3 1d          	bt     ebx,0x1d
10000281:	72 23                	jb     100002a6 <fpuNormalise(_Float80)+0x3b>
10000283:	4a                   	dec    edx
10000284:	89 de                	mov    esi,ebx
10000286:	09 ce                	or     esi,ecx
10000288:	75 16                	jne    100002a0 <fpuNormalise(_Float80)+0x35>
1000028a:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000291:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
10000298:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
1000029e:	eb 10                	jmp    100002b0 <fpuNormalise(_Float80)+0x45>
100002a0:	01 c9                	add    ecx,ecx
100002a2:	11 db                	adc    ebx,ebx
100002a4:	eb d7                	jmp    1000027d <fpuNormalise(_Float80)+0x12>
100002a6:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
100002a9:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
100002ac:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
100002b0:	8d 75 0c             	lea    esi,[ebp+0xc]
100002b3:	b9 03 00 00 00       	mov    ecx,0x3
100002b8:	89 c7                	mov    edi,eax
100002ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002bc:	5b                   	pop    ebx
100002bd:	5e                   	pop    esi
100002be:	5f                   	pop    edi
100002bf:	5d                   	pop    ebp
100002c0:	c2 04 00             	ret    0x4

100002c3 <fpuAdd(_Float80, _Float80)>:
100002c3:	55                   	push   ebp
100002c4:	89 e5                	mov    ebp,esp
100002c6:	57                   	push   edi
100002c7:	56                   	push   esi
100002c8:	53                   	push   ebx
100002c9:	83 ec 2c             	sub    esp,0x2c
100002cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100002d2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100002d5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100002d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100002db:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100002df:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100002e2:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100002e5:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100002e8:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100002eb:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100002ee:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100002f1:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100002f5:	66 39 c8             	cmp    ax,cx
100002f8:	72 2d                	jb     10000327 <fpuAdd(_Float80, _Float80)+0x64>
100002fa:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100002fd:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000300:	19 f8                	sbb    eax,edi
10000302:	73 09                	jae    1000030d <fpuAdd(_Float80, _Float80)+0x4a>
10000304:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000308:	66 39 c8             	cmp    ax,cx
1000030b:	74 24                	je     10000331 <fpuAdd(_Float80, _Float80)+0x6e>
1000030d:	88 d8                	mov    al,bl
1000030f:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000312:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000315:	89 f0                	mov    eax,esi
10000317:	89 fa                	mov    edx,edi
10000319:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000031c:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000031f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000322:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000325:	eb 0a                	jmp    10000331 <fpuAdd(_Float80, _Float80)+0x6e>
10000327:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000032b:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000032f:	89 c1                	mov    ecx,eax
10000331:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000334:	29 c8                	sub    eax,ecx
10000336:	88 c1                	mov    cl,al
10000338:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000033b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000033e:	0f ad d0             	shrd   eax,edx,cl
10000341:	d3 ea                	shr    edx,cl
10000343:	f6 c1 20             	test   cl,0x20
10000346:	74 04                	je     1000034c <fpuAdd(_Float80, _Float80)+0x89>
10000348:	89 d0                	mov    eax,edx
1000034a:	31 d2                	xor    edx,edx
1000034c:	89 d1                	mov    ecx,edx
1000034e:	89 c2                	mov    edx,eax
10000350:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000354:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000358:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000035b:	75 13                	jne    10000370 <fpuAdd(_Float80, _Float80)+0xad>
1000035d:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
10000360:	89 d0                	mov    eax,edx
10000362:	89 ca                	mov    edx,ecx
10000364:	01 f0                	add    eax,esi
10000366:	11 fa                	adc    edx,edi
10000368:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000036b:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000036e:	eb 58                	jmp    100003c8 <fpuAdd(_Float80, _Float80)+0x105>
10000370:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000374:	74 24                	je     1000039a <fpuAdd(_Float80, _Float80)+0xd7>
10000376:	39 d6                	cmp    esi,edx
10000378:	89 f8                	mov    eax,edi
1000037a:	19 c8                	sbb    eax,ecx
1000037c:	89 d0                	mov    eax,edx
1000037e:	89 ca                	mov    edx,ecx
10000380:	73 0c                	jae    1000038e <fpuAdd(_Float80, _Float80)+0xcb>
10000382:	29 f0                	sub    eax,esi
10000384:	19 fa                	sbb    edx,edi
10000386:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000389:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000038c:	eb 26                	jmp    100003b4 <fpuAdd(_Float80, _Float80)+0xf1>
1000038e:	29 c6                	sub    esi,eax
10000390:	19 cf                	sbb    edi,ecx
10000392:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000395:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000398:	eb 2a                	jmp    100003c4 <fpuAdd(_Float80, _Float80)+0x101>
1000039a:	84 db                	test   bl,bl
1000039c:	74 2a                	je     100003c8 <fpuAdd(_Float80, _Float80)+0x105>
1000039e:	39 f2                	cmp    edx,esi
100003a0:	89 c8                	mov    eax,ecx
100003a2:	19 f8                	sbb    eax,edi
100003a4:	89 d0                	mov    eax,edx
100003a6:	89 ca                	mov    edx,ecx
100003a8:	73 10                	jae    100003ba <fpuAdd(_Float80, _Float80)+0xf7>
100003aa:	29 c6                	sub    esi,eax
100003ac:	19 cf                	sbb    edi,ecx
100003ae:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100003b1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100003b4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100003b8:	eb 0e                	jmp    100003c8 <fpuAdd(_Float80, _Float80)+0x105>
100003ba:	29 f0                	sub    eax,esi
100003bc:	19 fa                	sbb    edx,edi
100003be:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100003c1:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100003c4:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100003c8:	83 ec 0c             	sub    esp,0xc
100003cb:	8d 75 dc             	lea    esi,[ebp-0x24]
100003ce:	b9 03 00 00 00       	mov    ecx,0x3
100003d3:	89 e7                	mov    edi,esp
100003d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003da:	e8 fc ff ff ff       	call   100003db <fpuAdd(_Float80, _Float80)+0x118>	100003db: R_386_PC32	fpuNormalise(_Float80)
100003df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003e2:	8d 65 f4             	lea    esp,[ebp-0xc]
100003e5:	5b                   	pop    ebx
100003e6:	5e                   	pop    esi
100003e7:	5f                   	pop    edi
100003e8:	5d                   	pop    ebp
100003e9:	c2 04 00             	ret    0x4

100003ec <fpuAbs(_Float80)>:
100003ec:	55                   	push   ebp
100003ed:	89 e5                	mov    ebp,esp
100003ef:	57                   	push   edi
100003f0:	56                   	push   esi
100003f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f4:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100003f8:	8d 75 0c             	lea    esi,[ebp+0xc]
100003fb:	b9 03 00 00 00       	mov    ecx,0x3
10000400:	89 c7                	mov    edi,eax
10000402:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000404:	5e                   	pop    esi
10000405:	5f                   	pop    edi
10000406:	5d                   	pop    ebp
10000407:	c2 04 00             	ret    0x4

1000040a <fpuChs(_Float80)>:
1000040a:	55                   	push   ebp
1000040b:	89 e5                	mov    ebp,esp
1000040d:	57                   	push   edi
1000040e:	56                   	push   esi
1000040f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000412:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000416:	8d 75 0c             	lea    esi,[ebp+0xc]
10000419:	b9 03 00 00 00       	mov    ecx,0x3
1000041e:	89 c7                	mov    edi,eax
10000420:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000422:	5e                   	pop    esi
10000423:	5f                   	pop    edi
10000424:	5d                   	pop    ebp
10000425:	c2 04 00             	ret    0x4

10000428 <fpuSub(_Float80, _Float80)>:
10000428:	55                   	push   ebp
10000429:	89 e5                	mov    ebp,esp
1000042b:	57                   	push   edi
1000042c:	56                   	push   esi
1000042d:	53                   	push   ebx
1000042e:	83 ec 1c             	sub    esp,0x1c
10000431:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000434:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000438:	8d 75 18             	lea    esi,[ebp+0x18]
1000043b:	b9 03 00 00 00       	mov    ecx,0x3
10000440:	89 e7                	mov    edi,esp
10000442:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000444:	83 ec 0c             	sub    esp,0xc
10000447:	8d 75 0c             	lea    esi,[ebp+0xc]
1000044a:	b9 03 00 00 00       	mov    ecx,0x3
1000044f:	89 e7                	mov    edi,esp
10000451:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000453:	53                   	push   ebx
10000454:	e8 fc ff ff ff       	call   10000455 <fpuSub(_Float80, _Float80)+0x2d>	10000455: R_386_PC32	fpuAdd(_Float80, _Float80)
10000459:	89 d8                	mov    eax,ebx
1000045b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000045e:	5b                   	pop    ebx
1000045f:	5e                   	pop    esi
10000460:	5f                   	pop    edi
10000461:	5d                   	pop    ebp
10000462:	c2 04 00             	ret    0x4

10000465 <fpuReverseSub(_Float80, _Float80)>:
10000465:	55                   	push   ebp
10000466:	89 e5                	mov    ebp,esp
10000468:	57                   	push   edi
10000469:	56                   	push   esi
1000046a:	53                   	push   ebx
1000046b:	83 ec 1c             	sub    esp,0x1c
1000046e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000471:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000475:	8d 75 0c             	lea    esi,[ebp+0xc]
10000478:	b9 03 00 00 00       	mov    ecx,0x3
1000047d:	89 e7                	mov    edi,esp
1000047f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000481:	83 ec 0c             	sub    esp,0xc
10000484:	8d 75 18             	lea    esi,[ebp+0x18]
10000487:	b9 03 00 00 00       	mov    ecx,0x3
1000048c:	89 e7                	mov    edi,esp
1000048e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000490:	53                   	push   ebx
10000491:	e8 fc ff ff ff       	call   10000492 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000492: R_386_PC32	fpuAdd(_Float80, _Float80)
10000496:	89 d8                	mov    eax,ebx
10000498:	8d 65 f4             	lea    esp,[ebp-0xc]
1000049b:	5b                   	pop    ebx
1000049c:	5e                   	pop    esi
1000049d:	5f                   	pop    edi
1000049e:	5d                   	pop    ebp
1000049f:	c2 04 00             	ret    0x4

100004a2 <fpuMultiply(_Float80, _Float80)>:
100004a2:	55                   	push   ebp
100004a3:	89 e5                	mov    ebp,esp
100004a5:	57                   	push   edi
100004a6:	56                   	push   esi
100004a7:	53                   	push   ebx
100004a8:	83 ec 38             	sub    esp,0x38
100004ab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100004ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100004b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100004b4:	0f ac d0 1f          	shrd   eax,edx,0x1f
100004b8:	c1 ea 1f             	shr    edx,0x1f
100004bb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100004be:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100004c1:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100004c4:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100004c7:	0f ac fe 1f          	shrd   esi,edi,0x1f
100004cb:	c1 ef 1f             	shr    edi,0x1f
100004ce:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100004d1:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100004d4:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100004d7:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100004da:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100004dd:	66 81 e9 ff 3f       	sub    cx,0x3fff
100004e2:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100004e6:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100004e9:	0f af ce             	imul   ecx,esi
100004ec:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100004ef:	0f af d7             	imul   edx,edi
100004f2:	01 d1                	add    ecx,edx
100004f4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100004f7:	f7 e6                	mul    esi
100004f9:	01 ca                	add    edx,ecx
100004fb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004fe:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000501:	8d 75 dc             	lea    esi,[ebp-0x24]
10000504:	b9 03 00 00 00       	mov    ecx,0x3
10000509:	89 e7                	mov    edi,esp
1000050b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000050d:	53                   	push   ebx
1000050e:	e8 fc ff ff ff       	call   1000050f <fpuMultiply(_Float80, _Float80)+0x6d>	1000050f: R_386_PC32	fpuNormalise(_Float80)
10000513:	89 d8                	mov    eax,ebx
10000515:	8d 65 f4             	lea    esp,[ebp-0xc]
10000518:	5b                   	pop    ebx
10000519:	5e                   	pop    esi
1000051a:	5f                   	pop    edi
1000051b:	5d                   	pop    ebp
1000051c:	c2 04 00             	ret    0x4

1000051f <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000051f:	55                   	push   ebp
10000520:	89 e5                	mov    ebp,esp
10000522:	57                   	push   edi
10000523:	56                   	push   esi
10000524:	53                   	push   ebx
10000525:	83 ec 24             	sub    esp,0x24
10000528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000052e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000531:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000534:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000537:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000053a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000053d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10000540:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000547:	83 c8 ff             	or     eax,0xffffffff
1000054a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000551:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000558:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000055f:	31 d2                	xor    edx,edx
10000561:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000564:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000567:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
1000056a:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000056d:	83 f8 ff             	cmp    eax,0xffffffff
10000570:	75 22                	jne    10000594 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000572:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000575:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000578:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000057b:	0f ad f3             	shrd   ebx,esi,cl
1000057e:	d3 ee                	shr    esi,cl
10000580:	f6 c1 20             	test   cl,0x20
10000583:	74 04                	je     10000589 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000585:	89 f3                	mov    ebx,esi
10000587:	31 f6                	xor    esi,esi
10000589:	89 d9                	mov    ecx,ebx
1000058b:	83 e1 01             	and    ecx,0x1
1000058e:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000591:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000594:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000597:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
1000059a:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000059d:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
100005a0:	72 38                	jb     100005da <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
100005a2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100005a5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
100005a8:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
100005ab:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
100005ae:	83 f8 ff             	cmp    eax,0xffffffff
100005b1:	75 0d                	jne    100005c0 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100005b3:	81 ca 00 00 00 20    	or     edx,0x20000000
100005b9:	b8 3d 00 00 00       	mov    eax,0x3d
100005be:	eb 1f                	jmp    100005df <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100005c0:	88 c1                	mov    cl,al
100005c2:	89 ce                	mov    esi,ecx
100005c4:	c1 ee 05             	shr    esi,0x5
100005c7:	83 e6 01             	and    esi,0x1
100005ca:	89 f3                	mov    ebx,esi
100005cc:	83 f3 01             	xor    ebx,0x1
100005cf:	d3 e3                	shl    ebx,cl
100005d1:	d3 e6                	shl    esi,cl
100005d3:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100005d6:	09 f2                	or     edx,esi
100005d8:	eb 05                	jmp    100005df <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100005da:	83 f8 ff             	cmp    eax,0xffffffff
100005dd:	74 01                	je     100005e0 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100005df:	48                   	dec    eax
100005e0:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100005e3:	85 c0                	test   eax,eax
100005e5:	0f 85 76 ff ff ff    	jne    10000561 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100005eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100005ee:	83 c4 24             	add    esp,0x24
100005f1:	5b                   	pop    ebx
100005f2:	5e                   	pop    esi
100005f3:	5f                   	pop    edi
100005f4:	5d                   	pop    ebp
100005f5:	c3                   	ret    

100005f6 <fpuDivide(_Float80, _Float80)>:
100005f6:	55                   	push   ebp
100005f7:	89 e5                	mov    ebp,esp
100005f9:	57                   	push   edi
100005fa:	56                   	push   esi
100005fb:	53                   	push   ebx
100005fc:	83 ec 1c             	sub    esp,0x1c
100005ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000602:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
10000605:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
10000608:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
1000060b:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
1000060e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000611:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000614:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000617:	e8 fc ff ff ff       	call   10000618 <fpuDivide(_Float80, _Float80)+0x22>	10000618: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000061c:	59                   	pop    ecx
1000061d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000620:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000623:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000626:	66 05 00 40          	add    ax,0x4000
1000062a:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000062d:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000631:	8d 75 dc             	lea    esi,[ebp-0x24]
10000634:	b9 03 00 00 00       	mov    ecx,0x3
10000639:	89 e7                	mov    edi,esp
1000063b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000063d:	53                   	push   ebx
1000063e:	e8 fc ff ff ff       	call   1000063f <fpuDivide(_Float80, _Float80)+0x49>	1000063f: R_386_PC32	fpuNormalise(_Float80)
10000643:	89 d8                	mov    eax,ebx
10000645:	8d 65 f4             	lea    esp,[ebp-0xc]
10000648:	5b                   	pop    ebx
10000649:	5e                   	pop    esi
1000064a:	5f                   	pop    edi
1000064b:	5d                   	pop    ebp
1000064c:	c2 04 00             	ret    0x4

1000064f <fpuReciprocal(_Float80)>:
1000064f:	55                   	push   ebp
10000650:	89 e5                	mov    ebp,esp
10000652:	57                   	push   edi
10000653:	56                   	push   esi
10000654:	53                   	push   ebx
10000655:	83 ec 2c             	sub    esp,0x2c
10000658:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000065b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000065f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000666:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000066d:	66 c7 45 e4 ff 3f    	mov    WORD PTR [ebp-0x1c],0x3fff
10000673:	8d 75 0c             	lea    esi,[ebp+0xc]
10000676:	b9 03 00 00 00       	mov    ecx,0x3
1000067b:	89 e7                	mov    edi,esp
1000067d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000067f:	83 ec 0c             	sub    esp,0xc
10000682:	8d 75 dc             	lea    esi,[ebp-0x24]
10000685:	b9 03 00 00 00       	mov    ecx,0x3
1000068a:	89 e7                	mov    edi,esp
1000068c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000068e:	53                   	push   ebx
1000068f:	e8 fc ff ff ff       	call   10000690 <fpuReciprocal(_Float80)+0x41>	10000690: R_386_PC32	fpuDivide(_Float80, _Float80)
10000694:	89 d8                	mov    eax,ebx
10000696:	8d 65 f4             	lea    esp,[ebp-0xc]
10000699:	5b                   	pop    ebx
1000069a:	5e                   	pop    esi
1000069b:	5f                   	pop    edi
1000069c:	5d                   	pop    ebp
1000069d:	c2 04 00             	ret    0x4

100006a0 <fpuSquare(_Float80)>:
100006a0:	55                   	push   ebp
100006a1:	89 e5                	mov    ebp,esp
100006a3:	57                   	push   edi
100006a4:	56                   	push   esi
100006a5:	53                   	push   ebx
100006a6:	83 ec 1c             	sub    esp,0x1c
100006a9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006ac:	8d 75 0c             	lea    esi,[ebp+0xc]
100006af:	b9 03 00 00 00       	mov    ecx,0x3
100006b4:	89 e7                	mov    edi,esp
100006b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006b8:	83 ec 0c             	sub    esp,0xc
100006bb:	8d 75 0c             	lea    esi,[ebp+0xc]
100006be:	b9 03 00 00 00       	mov    ecx,0x3
100006c3:	89 e7                	mov    edi,esp
100006c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006c7:	53                   	push   ebx
100006c8:	e8 fc ff ff ff       	call   100006c9 <fpuSquare(_Float80)+0x29>	100006c9: R_386_PC32	fpuMultiply(_Float80, _Float80)
100006cd:	89 d8                	mov    eax,ebx
100006cf:	8d 65 f4             	lea    esp,[ebp-0xc]
100006d2:	5b                   	pop    ebx
100006d3:	5e                   	pop    esi
100006d4:	5f                   	pop    edi
100006d5:	5d                   	pop    ebp
100006d6:	c2 04 00             	ret    0x4

100006d9 <fpuInverseSqrt(_Float80)>:
100006d9:	55                   	push   ebp
100006da:	89 e5                	mov    ebp,esp
100006dc:	57                   	push   edi
100006dd:	56                   	push   esi
100006de:	53                   	push   ebx
100006df:	83 ec 5c             	sub    esp,0x5c
100006e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100006e5:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100006e9:	31 d2                	xor    edx,edx
100006eb:	b9 03 00 00 00       	mov    ecx,0x3
100006f0:	31 db                	xor    ebx,ebx
100006f2:	01 c9                	add    ecx,ecx
100006f4:	11 db                	adc    ebx,ebx
100006f6:	42                   	inc    edx
100006f7:	83 fa 3c             	cmp    edx,0x3c
100006fa:	75 f6                	jne    100006f2 <fpuInverseSqrt(_Float80)+0x19>
100006fc:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100006ff:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10000702:	8d 75 0c             	lea    esi,[ebp+0xc]
10000705:	b9 03 00 00 00       	mov    ecx,0x3
1000070a:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000070d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000070f:	0f b7 d0             	movzx  edx,ax
10000712:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000718:	d1 fa                	sar    edx,1
1000071a:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000071f:	29 d1                	sub    ecx,edx
10000721:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000724:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000728:	48                   	dec    eax
10000729:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000072d:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000734:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000737:	83 ec 0c             	sub    esp,0xc
1000073a:	b9 03 00 00 00       	mov    ecx,0x3
1000073f:	89 e7                	mov    edi,esp
10000741:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000744:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000746:	53                   	push   ebx
10000747:	e8 fc ff ff ff       	call   10000748 <fpuInverseSqrt(_Float80)+0x6f>	10000748: R_386_PC32	fpuSquare(_Float80)
1000074c:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
10000750:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000754:	8d 45 d0             	lea    eax,[ebp-0x30]
10000757:	83 ec 14             	sub    esp,0x14
1000075a:	8d 75 0c             	lea    esi,[ebp+0xc]
1000075d:	b9 03 00 00 00       	mov    ecx,0x3
10000762:	89 e7                	mov    edi,esp
10000764:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000766:	83 ec 0c             	sub    esp,0xc
10000769:	b9 03 00 00 00       	mov    ecx,0x3
1000076e:	89 e7                	mov    edi,esp
10000770:	89 de                	mov    esi,ebx
10000772:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000774:	50                   	push   eax
10000775:	e8 fc ff ff ff       	call   10000776 <fpuInverseSqrt(_Float80)+0x9d>	10000776: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000077a:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
10000780:	8d 55 dc             	lea    edx,[ebp-0x24]
10000783:	83 c4 1c             	add    esp,0x1c
10000786:	b9 03 00 00 00       	mov    ecx,0x3
1000078b:	89 e7                	mov    edi,esp
1000078d:	8d 45 d0             	lea    eax,[ebp-0x30]
10000790:	89 c6                	mov    esi,eax
10000792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000794:	83 ec 0c             	sub    esp,0xc
10000797:	8d 75 b8             	lea    esi,[ebp-0x48]
1000079a:	b9 03 00 00 00       	mov    ecx,0x3
1000079f:	89 e7                	mov    edi,esp
100007a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a3:	52                   	push   edx
100007a4:	e8 fc ff ff ff       	call   100007a5 <fpuInverseSqrt(_Float80)+0xcc>	100007a5: R_386_PC32	fpuSub(_Float80, _Float80)
100007a9:	8d 5d a8             	lea    ebx,[ebp-0x58]
100007ac:	50                   	push   eax
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	8d 55 dc             	lea    edx,[ebp-0x24]
100007b7:	89 d6                	mov    esi,edx
100007b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	b9 03 00 00 00       	mov    ecx,0x3
100007c3:	89 e7                	mov    edi,esp
100007c5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100007c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007ca:	53                   	push   ebx
100007cb:	e8 fc ff ff ff       	call   100007cc <fpuInverseSqrt(_Float80)+0xf3>	100007cc: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007d0:	b9 03 00 00 00       	mov    ecx,0x3
100007d5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007d8:	89 de                	mov    esi,ebx
100007da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007dc:	83 c4 2c             	add    esp,0x2c
100007df:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100007e2:	0f 85 4c ff ff ff    	jne    10000734 <fpuInverseSqrt(_Float80)+0x5b>
100007e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007eb:	8d 65 f4             	lea    esp,[ebp-0xc]
100007ee:	5b                   	pop    ebx
100007ef:	5e                   	pop    esi
100007f0:	5f                   	pop    edi
100007f1:	5d                   	pop    ebp
100007f2:	c2 04 00             	ret    0x4

100007f5 <fpuSqrt(_Float80)>:
100007f5:	55                   	push   ebp
100007f6:	89 e5                	mov    ebp,esp
100007f8:	57                   	push   edi
100007f9:	56                   	push   esi
100007fa:	53                   	push   ebx
100007fb:	83 ec 38             	sub    esp,0x38
100007fe:	8d 5d d0             	lea    ebx,[ebp-0x30]
10000801:	8d 75 0c             	lea    esi,[ebp+0xc]
10000804:	b9 03 00 00 00       	mov    ecx,0x3
10000809:	89 e7                	mov    edi,esp
1000080b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000080d:	53                   	push   ebx
1000080e:	e8 fc ff ff ff       	call   1000080f <fpuSqrt(_Float80)+0x1a>	1000080f: R_386_PC32	fpuInverseSqrt(_Float80)
10000813:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000817:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000081e:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000825:	66 c7 45 e4 ff 3f    	mov    WORD PTR [ebp-0x1c],0x3fff
1000082b:	83 ec 14             	sub    esp,0x14
1000082e:	b9 03 00 00 00       	mov    ecx,0x3
10000833:	89 e7                	mov    edi,esp
10000835:	89 de                	mov    esi,ebx
10000837:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000839:	83 ec 0c             	sub    esp,0xc
1000083c:	8d 75 dc             	lea    esi,[ebp-0x24]
1000083f:	b9 03 00 00 00       	mov    ecx,0x3
10000844:	89 e7                	mov    edi,esp
10000846:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000084b:	e8 fc ff ff ff       	call   1000084c <fpuSqrt(_Float80)+0x57>	1000084c: R_386_PC32	fpuDivide(_Float80, _Float80)
10000850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000853:	8d 65 f4             	lea    esp,[ebp-0xc]
10000856:	5b                   	pop    ebx
10000857:	5e                   	pop    esi
10000858:	5f                   	pop    edi
10000859:	5d                   	pop    ebp
1000085a:	c2 04 00             	ret    0x4

1000085d <fpuGetReg(int)>:
1000085d:	55                   	push   ebp
1000085e:	89 e5                	mov    ebp,esp
10000860:	57                   	push   edi
10000861:	56                   	push   esi
10000862:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000865:	83 fe 07             	cmp    esi,0x7
10000868:	76 10                	jbe    1000087a <fpuGetReg(int)+0x1d>
1000086a:	83 ec 0c             	sub    esp,0xc
1000086d:	68 bc 24 00 10       	push   0x100024bc	1000086e: R_386_32	.text
10000872:	e8 fc ff ff ff       	call   10000873 <fpuGetReg(int)+0x16>	10000873: R_386_PC32	Krnl::panic(char const*)
10000877:	83 c4 10             	add    esp,0x10
1000087a:	a0 01 00 00 00       	mov    al,ds:0x1	1000087b: R_386_32	fpuState
1000087f:	c0 e8 03             	shr    al,0x3
10000882:	83 e0 07             	and    eax,0x7
10000885:	01 f0                	add    eax,esi
10000887:	b9 08 00 00 00       	mov    ecx,0x8
1000088c:	99                   	cdq    
1000088d:	f7 f9                	idiv   ecx
1000088f:	6b c2 0c             	imul   eax,edx,0xc
10000892:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000894: R_386_32	fpuState
10000898:	b9 03 00 00 00       	mov    ecx,0x3
1000089d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a5:	8d 65 f8             	lea    esp,[ebp-0x8]
100008a8:	5e                   	pop    esi
100008a9:	5f                   	pop    edi
100008aa:	5d                   	pop    ebp
100008ab:	c2 04 00             	ret    0x4

100008ae <fpuSetReg(int, _Float80)>:
100008ae:	55                   	push   ebp
100008af:	89 e5                	mov    ebp,esp
100008b1:	57                   	push   edi
100008b2:	56                   	push   esi
100008b3:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008b6:	83 ff 07             	cmp    edi,0x7
100008b9:	76 10                	jbe    100008cb <fpuSetReg(int, _Float80)+0x1d>
100008bb:	83 ec 0c             	sub    esp,0xc
100008be:	68 bc 24 00 10       	push   0x100024bc	100008bf: R_386_32	.text
100008c3:	e8 fc ff ff ff       	call   100008c4 <fpuSetReg(int, _Float80)+0x16>	100008c4: R_386_PC32	Krnl::panic(char const*)
100008c8:	83 c4 10             	add    esp,0x10
100008cb:	a0 01 00 00 00       	mov    al,ds:0x1	100008cc: R_386_32	fpuState
100008d0:	c0 e8 03             	shr    al,0x3
100008d3:	83 e0 07             	and    eax,0x7
100008d6:	01 f8                	add    eax,edi
100008d8:	b9 08 00 00 00       	mov    ecx,0x8
100008dd:	99                   	cdq    
100008de:	f7 f9                	idiv   ecx
100008e0:	6b c2 0c             	imul   eax,edx,0xc
100008e3:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100008e5: R_386_32	fpuState
100008e9:	8d 75 0c             	lea    esi,[ebp+0xc]
100008ec:	b9 03 00 00 00       	mov    ecx,0x3
100008f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f3:	8d 65 f8             	lea    esp,[ebp-0x8]
100008f6:	5e                   	pop    esi
100008f7:	5f                   	pop    edi
100008f8:	5d                   	pop    ebp
100008f9:	c3                   	ret    

100008fa <fpuInternalTo32(_Float80)>:
100008fa:	55                   	push   ebp
100008fb:	89 e5                	mov    ebp,esp
100008fd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000900:	66 81 f9 7e 40       	cmp    cx,0x407e
10000905:	76 0c                	jbe    10000913 <fpuInternalTo32(_Float80)+0x19>
10000907:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000909: R_386_32	fpuState
1000090e:	b9 7f 00 00 00       	mov    ecx,0x7f
10000913:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000917:	19 d2                	sbb    edx,edx
10000919:	f7 d2                	not    edx
1000091b:	81 e2 00 00 00 80    	and    edx,0x80000000
10000921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000924:	c1 e8 06             	shr    eax,0x6
10000927:	25 ff ff 7f 03       	and    eax,0x37fffff
1000092c:	c1 e1 17             	shl    ecx,0x17
1000092f:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000935:	09 c8                	or     eax,ecx
10000937:	09 d0                	or     eax,edx
10000939:	5d                   	pop    ebp
1000093a:	c3                   	ret    

1000093b <fpu32ToInternal(unsigned int)>:
1000093b:	55                   	push   ebp
1000093c:	89 e5                	mov    ebp,esp
1000093e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000941:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000944:	89 d1                	mov    ecx,edx
10000946:	c1 e9 1f             	shr    ecx,0x1f
10000949:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
1000094c:	89 d1                	mov    ecx,edx
1000094e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000954:	c1 e1 06             	shl    ecx,0x6
10000957:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000095d:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000963:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000966:	c1 ea 17             	shr    edx,0x17
10000969:	0f b6 d2             	movzx  edx,dl
1000096c:	66 81 c2 81 3f       	add    dx,0x3f81
10000971:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000975:	5d                   	pop    ebp
10000976:	c2 04 00             	ret    0x4

10000979 <fpu64ToInternal(unsigned long long)>:
10000979:	55                   	push   ebp
1000097a:	89 e5                	mov    ebp,esp
1000097c:	57                   	push   edi
1000097d:	56                   	push   esi
1000097e:	53                   	push   ebx
1000097f:	83 ec 0c             	sub    esp,0xc
10000982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000985:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000988:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
1000098b:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
1000098e:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000991:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000994:	c1 ea 1f             	shr    edx,0x1f
10000997:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
1000099a:	89 f7                	mov    edi,esi
1000099c:	89 de                	mov    esi,ebx
1000099e:	0f a4 f7 09          	shld   edi,esi,0x9
100009a2:	c1 e6 09             	shl    esi,0x9
100009a5:	89 f1                	mov    ecx,esi
100009a7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
100009ad:	89 fa                	mov    edx,edi
100009af:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
100009b5:	89 08                	mov    DWORD PTR [eax],ecx
100009b7:	81 ca 00 00 00 20    	or     edx,0x20000000
100009bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100009c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100009c3:	c1 ea 14             	shr    edx,0x14
100009c6:	66 81 e2 ff 07       	and    dx,0x7ff
100009cb:	66 81 c2 01 3c       	add    dx,0x3c01
100009d0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100009d4:	83 c4 0c             	add    esp,0xc
100009d7:	5b                   	pop    ebx
100009d8:	5e                   	pop    esi
100009d9:	5f                   	pop    edi
100009da:	5d                   	pop    ebp
100009db:	c2 04 00             	ret    0x4

100009de <fpuInternalTo64(_Float80)>:
100009de:	55                   	push   ebp
100009df:	89 e5                	mov    ebp,esp
100009e1:	57                   	push   edi
100009e2:	56                   	push   esi
100009e3:	53                   	push   ebx
100009e4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100009e7:	66 81 fb fe 43       	cmp    bx,0x43fe
100009ec:	76 0c                	jbe    100009fa <fpuInternalTo64(_Float80)+0x1c>
100009ee:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f0: R_386_32	fpuState
100009f5:	bb ff 03 00 00       	mov    ebx,0x3ff
100009fa:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
100009fe:	19 c9                	sbb    ecx,ecx
10000a00:	f7 d1                	not    ecx
10000a02:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a0e:	0f ac d0 09          	shrd   eax,edx,0x9
10000a12:	c1 ea 09             	shr    edx,0x9
10000a15:	89 c6                	mov    esi,eax
10000a17:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a1d:	c1 e3 14             	shl    ebx,0x14
10000a20:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a26:	09 da                	or     edx,ebx
10000a28:	09 ca                	or     edx,ecx
10000a2a:	89 f0                	mov    eax,esi
10000a2c:	5b                   	pop    ebx
10000a2d:	5e                   	pop    esi
10000a2e:	5f                   	pop    edi
10000a2f:	5d                   	pop    ebp
10000a30:	c3                   	ret    

10000a31 <fpuPush(_Float80)>:
10000a31:	55                   	push   ebp
10000a32:	89 e5                	mov    ebp,esp
10000a34:	57                   	push   edi
10000a35:	56                   	push   esi
10000a36:	a0 01 00 00 00       	mov    al,ds:0x1	10000a37: R_386_32	fpuState
10000a3b:	88 c1                	mov    cl,al
10000a3d:	c0 e9 03             	shr    cl,0x3
10000a40:	89 cf                	mov    edi,ecx
10000a42:	83 e7 07             	and    edi,0x7
10000a45:	83 c7 07             	add    edi,0x7
10000a48:	89 fa                	mov    edx,edi
10000a4a:	83 e2 07             	and    edx,0x7
10000a4d:	c1 e2 03             	shl    edx,0x3
10000a50:	83 e0 c7             	and    eax,0xffffffc7
10000a53:	09 d0                	or     eax,edx
10000a55:	a2 01 00 00 00       	mov    ds:0x1,al	10000a56: R_386_32	fpuState
10000a5a:	83 e7 07             	and    edi,0x7
10000a5d:	6b ff 0c             	imul   edi,edi,0xc
10000a60:	81 c7 04 00 00 00    	add    edi,0x4	10000a62: R_386_32	fpuState
10000a66:	b9 03 00 00 00       	mov    ecx,0x3
10000a6b:	8d 75 08             	lea    esi,[ebp+0x8]
10000a6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a70:	a1 64 00 00 00       	mov    eax,ds:0x64	10000a71: R_386_32	fpuState
10000a75:	83 f8 08             	cmp    eax,0x8
10000a78:	75 09                	jne    10000a83 <fpuPush(_Float80)+0x52>
10000a7a:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000a7c: R_386_32	fpuState
10000a81:	eb 06                	jmp    10000a89 <fpuPush(_Float80)+0x58>
10000a83:	40                   	inc    eax
10000a84:	a3 64 00 00 00       	mov    ds:0x64,eax	10000a85: R_386_32	fpuState
10000a89:	5e                   	pop    esi
10000a8a:	5f                   	pop    edi
10000a8b:	5d                   	pop    ebp
10000a8c:	c3                   	ret    

10000a8d <fpuPop()>:
10000a8d:	55                   	push   ebp
10000a8e:	89 e5                	mov    ebp,esp
10000a90:	57                   	push   edi
10000a91:	56                   	push   esi
10000a92:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000a94: R_386_32	fpuState
10000a98:	88 d0                	mov    al,dl
10000a9a:	c0 e8 03             	shr    al,0x3
10000a9d:	83 e0 07             	and    eax,0x7
10000aa0:	6b f0 0c             	imul   esi,eax,0xc
10000aa3:	81 c6 04 00 00 00    	add    esi,0x4	10000aa5: R_386_32	fpuState
10000aa9:	b9 03 00 00 00       	mov    ecx,0x3
10000aae:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ab1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ab3:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000aba:	83 e0 38             	and    eax,0x38
10000abd:	83 e2 c7             	and    edx,0xffffffc7
10000ac0:	09 c2                	or     edx,eax
10000ac2:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000ac4: R_386_32	fpuState
10000ac8:	a1 64 00 00 00       	mov    eax,ds:0x64	10000ac9: R_386_32	fpuState
10000acd:	85 c0                	test   eax,eax
10000acf:	74 08                	je     10000ad9 <fpuPop()+0x4c>
10000ad1:	48                   	dec    eax
10000ad2:	a3 64 00 00 00       	mov    ds:0x64,eax	10000ad3: R_386_32	fpuState
10000ad7:	eb 07                	jmp    10000ae0 <fpuPop()+0x53>
10000ad9:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000adb: R_386_32	fpuState
10000ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae3:	5e                   	pop    esi
10000ae4:	5f                   	pop    edi
10000ae5:	5d                   	pop    ebp
10000ae6:	c2 04 00             	ret    0x4

10000ae9 <fpuUnorderedCompare(_Float80, _Float80)>:
10000ae9:	55                   	push   ebp
10000aea:	89 e5                	mov    ebp,esp
10000aec:	57                   	push   edi
10000aed:	56                   	push   esi
10000aee:	53                   	push   ebx
10000aef:	83 ec 44             	sub    esp,0x44
10000af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af5:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10000af8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000afb:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000afe:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000b02:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000b05:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
10000b08:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
10000b0b:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000b0e:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000b12:	8d 7d c0             	lea    edi,[ebp-0x40]
10000b15:	b9 03 00 00 00       	mov    ecx,0x3
10000b1a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b1f:	8d 7d cc             	lea    edi,[ebp-0x34]
10000b22:	8d 75 14             	lea    esi,[ebp+0x14]
10000b25:	b9 03 00 00 00       	mov    ecx,0x3
10000b2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b2c:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10000b2f:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
10000b32:	89 c2                	mov    edx,eax
10000b34:	31 da                	xor    edx,ebx
10000b36:	09 d1                	or     ecx,edx
10000b38:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
10000b3c:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
10000b3f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000b45:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000b48:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000b4e:	39 d1                	cmp    ecx,edx
10000b50:	75 08                	jne    10000b5a <fpuUnorderedCompare(_Float80, _Float80)+0x71>
10000b52:	31 d2                	xor    edx,edx
10000b54:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
10000b58:	75 1c                	jne    10000b76 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000b5a:	b2 01                	mov    dl,0x1
10000b5c:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
10000b60:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
10000b64:	72 10                	jb     10000b76 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000b66:	0f 94 c1             	sete   cl
10000b69:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
10000b6c:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
10000b6f:	19 d8                	sbb    eax,ebx
10000b71:	0f 92 c2             	setb   dl
10000b74:	21 ca                	and    edx,ecx
10000b76:	a0 01 00 00 00       	mov    al,ds:0x1	10000b77: R_386_32	fpuState
10000b7b:	83 e0 ba             	and    eax,0xffffffba
10000b7e:	8d 7d d8             	lea    edi,[ebp-0x28]
10000b81:	b9 03 00 00 00       	mov    ecx,0x3
10000b86:	8d 75 08             	lea    esi,[ebp+0x8]
10000b89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b8b:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000b8e:	b9 03 00 00 00       	mov    ecx,0x3
10000b93:	8d 75 14             	lea    esi,[ebp+0x14]
10000b96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b98:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10000b9b:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000ba1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000ba4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000baa:	39 cb                	cmp    ebx,ecx
10000bac:	0f 94 c1             	sete   cl
10000baf:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000bb2:	c1 e1 06             	shl    ecx,0x6
10000bb5:	09 d0                	or     eax,edx
10000bb7:	09 c8                	or     eax,ecx
10000bb9:	a2 01 00 00 00       	mov    ds:0x1,al	10000bba: R_386_32	fpuState
10000bbe:	83 c4 44             	add    esp,0x44
10000bc1:	5b                   	pop    ebx
10000bc2:	5e                   	pop    esi
10000bc3:	5f                   	pop    edi
10000bc4:	5d                   	pop    ebp
10000bc5:	c3                   	ret    

10000bc6 <x87Handler(regs*)>:
10000bc6:	55                   	push   ebp
10000bc7:	89 e5                	mov    ebp,esp
10000bc9:	57                   	push   edi
10000bca:	56                   	push   esi
10000bcb:	53                   	push   ebx
10000bcc:	81 ec 1c 06 00 00    	sub    esp,0x61c
10000bd2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000bd5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bd8:	89 85 e0 f9 ff ff    	mov    DWORD PTR [ebp-0x620],eax
10000bde:	8a 48 01             	mov    cl,BYTE PTR [eax+0x1]
10000be1:	89 ca                	mov    edx,ecx
10000be3:	66 c1 ea 03          	shr    dx,0x3
10000be7:	83 e2 07             	and    edx,0x7
10000bea:	88 c8                	mov    al,cl
10000bec:	c0 e8 06             	shr    al,0x6
10000bef:	3c 03                	cmp    al,0x3
10000bf1:	0f 84 7a 02 00 00    	je     10000e71 <x87Handler(regs*)+0x2ab>
10000bf7:	83 e1 07             	and    ecx,0x7
10000bfa:	80 f9 04             	cmp    cl,0x4
10000bfd:	0f 84 c4 00 00 00    	je     10000cc7 <x87Handler(regs*)+0x101>
10000c03:	84 c0                	test   al,al
10000c05:	75 09                	jne    10000c10 <x87Handler(regs*)+0x4a>
10000c07:	80 f9 05             	cmp    cl,0x5
10000c0a:	0f 84 99 00 00 00    	je     10000ca9 <x87Handler(regs*)+0xe3>
10000c10:	84 c9                	test   cl,cl
10000c12:	75 05                	jne    10000c19 <x87Handler(regs*)+0x53>
10000c14:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
10000c17:	eb 44                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c19:	80 f9 01             	cmp    cl,0x1
10000c1c:	75 05                	jne    10000c23 <x87Handler(regs*)+0x5d>
10000c1e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
10000c21:	eb 3a                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c23:	80 f9 02             	cmp    cl,0x2
10000c26:	75 05                	jne    10000c2d <x87Handler(regs*)+0x67>
10000c28:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
10000c2b:	eb 30                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c2d:	c7 85 e4 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x0
10000c37:	80 f9 03             	cmp    cl,0x3
10000c3a:	75 05                	jne    10000c41 <x87Handler(regs*)+0x7b>
10000c3c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
10000c3f:	eb 1c                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c41:	80 f9 05             	cmp    cl,0x5
10000c44:	75 05                	jne    10000c4b <x87Handler(regs*)+0x85>
10000c46:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
10000c49:	eb 12                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c4b:	80 f9 06             	cmp    cl,0x6
10000c4e:	75 05                	jne    10000c55 <x87Handler(regs*)+0x8f>
10000c50:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
10000c53:	eb 08                	jmp    10000c5d <x87Handler(regs*)+0x97>
10000c55:	80 f9 07             	cmp    cl,0x7
10000c58:	75 09                	jne    10000c63 <x87Handler(regs*)+0x9d>
10000c5a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
10000c5d:	89 bd e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],edi
10000c63:	3c 01                	cmp    al,0x1
10000c65:	75 1f                	jne    10000c86 <x87Handler(regs*)+0xc0>
10000c67:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000c6d:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
10000c71:	01 85 e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],eax
10000c77:	c7 85 dc f9 ff ff 03 00 00 00 	mov    DWORD PTR [ebp-0x624],0x3
10000c81:	e9 ff 01 00 00       	jmp    10000e85 <x87Handler(regs*)+0x2bf>
10000c86:	c7 85 dc f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x624],0x2
10000c90:	3c 02                	cmp    al,0x2
10000c92:	0f 85 ed 01 00 00    	jne    10000e85 <x87Handler(regs*)+0x2bf>
10000c98:	8b bd e0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x620]
10000c9e:	8b 7f 02             	mov    edi,DWORD PTR [edi+0x2]
10000ca1:	01 bd e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],edi
10000ca7:	eb 0f                	jmp    10000cb8 <x87Handler(regs*)+0xf2>
10000ca9:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000caf:	8b 40 02             	mov    eax,DWORD PTR [eax+0x2]
10000cb2:	89 85 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],eax
10000cb8:	c7 85 dc f9 ff ff 06 00 00 00 	mov    DWORD PTR [ebp-0x624],0x6
10000cc2:	e9 be 01 00 00       	jmp    10000e85 <x87Handler(regs*)+0x2bf>
10000cc7:	88 95 d9 f9 ff ff    	mov    BYTE PTR [ebp-0x627],dl
10000ccd:	8b 95 e0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x620]
10000cd3:	8a 4a 02             	mov    cl,BYTE PTR [edx+0x2]
10000cd6:	89 ce                	mov    esi,ecx
10000cd8:	66 c1 ee 03          	shr    si,0x3
10000cdc:	83 e6 07             	and    esi,0x7
10000cdf:	66 89 b5 dc f9 ff ff 	mov    WORD PTR [ebp-0x624],si
10000ce6:	88 ca                	mov    dl,cl
10000ce8:	83 e2 07             	and    edx,0x7
10000ceb:	88 95 e4 f9 ff ff    	mov    BYTE PTR [ebp-0x61c],dl
10000cf1:	c0 e9 06             	shr    cl,0x6
10000cf4:	0f b6 f1             	movzx  esi,cl
10000cf7:	88 8d da f9 ff ff    	mov    BYTE PTR [ebp-0x626],cl
10000cfd:	57                   	push   edi
10000cfe:	57                   	push   edi
10000cff:	0f b6 fa             	movzx  edi,dl
10000d02:	57                   	push   edi
10000d03:	0f b6 bd dc f9 ff ff 	movzx  edi,BYTE PTR [ebp-0x624]
10000d0a:	57                   	push   edi
10000d0b:	56                   	push   esi
10000d0c:	6a 04                	push   0x4
10000d0e:	0f b6 f0             	movzx  esi,al
10000d11:	88 85 db f9 ff ff    	mov    BYTE PTR [ebp-0x625],al
10000d17:	56                   	push   esi
10000d18:	68 cf 24 00 10       	push   0x100024cf	10000d19: R_386_32	.text
10000d1d:	e8 fc ff ff ff       	call   10000d1e <x87Handler(regs*)+0x158>	10000d1e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d22:	83 c4 20             	add    esp,0x20
10000d25:	80 bd e4 f9 ff ff 00 	cmp    BYTE PTR [ebp-0x61c],0x0
10000d2c:	8a 85 db f9 ff ff    	mov    al,BYTE PTR [ebp-0x625]
10000d32:	8a 8d da f9 ff ff    	mov    cl,BYTE PTR [ebp-0x626]
10000d38:	8a 95 d9 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x627]
10000d3e:	75 05                	jne    10000d45 <x87Handler(regs*)+0x17f>
10000d40:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
10000d43:	eb 57                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d45:	80 bd e4 f9 ff ff 01 	cmp    BYTE PTR [ebp-0x61c],0x1
10000d4c:	75 05                	jne    10000d53 <x87Handler(regs*)+0x18d>
10000d4e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
10000d51:	eb 49                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d53:	80 bd e4 f9 ff ff 02 	cmp    BYTE PTR [ebp-0x61c],0x2
10000d5a:	75 05                	jne    10000d61 <x87Handler(regs*)+0x19b>
10000d5c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
10000d5f:	eb 3b                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d61:	80 bd e4 f9 ff ff 03 	cmp    BYTE PTR [ebp-0x61c],0x3
10000d68:	75 05                	jne    10000d6f <x87Handler(regs*)+0x1a9>
10000d6a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
10000d6d:	eb 2d                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d6f:	80 bd e4 f9 ff ff 04 	cmp    BYTE PTR [ebp-0x61c],0x4
10000d76:	75 05                	jne    10000d7d <x87Handler(regs*)+0x1b7>
10000d78:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
10000d7b:	eb 1f                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d7d:	80 bd e4 f9 ff ff 05 	cmp    BYTE PTR [ebp-0x61c],0x5
10000d84:	75 05                	jne    10000d8b <x87Handler(regs*)+0x1c5>
10000d86:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
10000d89:	eb 11                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d8b:	80 bd e4 f9 ff ff 06 	cmp    BYTE PTR [ebp-0x61c],0x6
10000d92:	75 05                	jne    10000d99 <x87Handler(regs*)+0x1d3>
10000d94:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
10000d97:	eb 03                	jmp    10000d9c <x87Handler(regs*)+0x1d6>
10000d99:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
10000d9c:	80 bd dc f9 ff ff 00 	cmp    BYTE PTR [ebp-0x624],0x0
10000da3:	75 05                	jne    10000daa <x87Handler(regs*)+0x1e4>
10000da5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
10000da8:	eb 54                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000daa:	80 bd dc f9 ff ff 01 	cmp    BYTE PTR [ebp-0x624],0x1
10000db1:	75 05                	jne    10000db8 <x87Handler(regs*)+0x1f2>
10000db3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
10000db6:	eb 46                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000db8:	80 bd dc f9 ff ff 02 	cmp    BYTE PTR [ebp-0x624],0x2
10000dbf:	75 05                	jne    10000dc6 <x87Handler(regs*)+0x200>
10000dc1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10000dc4:	eb 38                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000dc6:	80 bd dc f9 ff ff 03 	cmp    BYTE PTR [ebp-0x624],0x3
10000dcd:	75 05                	jne    10000dd4 <x87Handler(regs*)+0x20e>
10000dcf:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10000dd2:	eb 2a                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000dd4:	31 f6                	xor    esi,esi
10000dd6:	80 bd dc f9 ff ff 04 	cmp    BYTE PTR [ebp-0x624],0x4
10000ddd:	74 1f                	je     10000dfe <x87Handler(regs*)+0x238>
10000ddf:	80 bd dc f9 ff ff 05 	cmp    BYTE PTR [ebp-0x624],0x5
10000de6:	75 05                	jne    10000ded <x87Handler(regs*)+0x227>
10000de8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
10000deb:	eb 11                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000ded:	80 bd dc f9 ff ff 06 	cmp    BYTE PTR [ebp-0x624],0x6
10000df4:	75 05                	jne    10000dfb <x87Handler(regs*)+0x235>
10000df6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10000df9:	eb 03                	jmp    10000dfe <x87Handler(regs*)+0x238>
10000dfb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
10000dfe:	84 c0                	test   al,al
10000e00:	75 1c                	jne    10000e1e <x87Handler(regs*)+0x258>
10000e02:	80 bd e4 f9 ff ff 05 	cmp    BYTE PTR [ebp-0x61c],0x5
10000e09:	75 13                	jne    10000e1e <x87Handler(regs*)+0x258>
10000e0b:	d3 e6                	shl    esi,cl
10000e0d:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e13:	03 70 03             	add    esi,DWORD PTR [eax+0x3]
10000e16:	89 b5 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],esi
10000e1c:	eb 47                	jmp    10000e65 <x87Handler(regs*)+0x29f>
10000e1e:	01 fe                	add    esi,edi
10000e20:	d3 e6                	shl    esi,cl
10000e22:	89 b5 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],esi
10000e28:	c7 85 dc f9 ff ff 03 00 00 00 	mov    DWORD PTR [ebp-0x624],0x3
10000e32:	84 c0                	test   al,al
10000e34:	74 4f                	je     10000e85 <x87Handler(regs*)+0x2bf>
10000e36:	fe c8                	dec    al
10000e38:	75 1c                	jne    10000e56 <x87Handler(regs*)+0x290>
10000e3a:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e40:	0f be 40 03          	movsx  eax,BYTE PTR [eax+0x3]
10000e44:	01 85 e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],eax
10000e4a:	c7 85 dc f9 ff ff 04 00 00 00 	mov    DWORD PTR [ebp-0x624],0x4
10000e54:	eb 2f                	jmp    10000e85 <x87Handler(regs*)+0x2bf>
10000e56:	8b bd e0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x620]
10000e5c:	8b 7f 03             	mov    edi,DWORD PTR [edi+0x3]
10000e5f:	01 bd e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],edi
10000e65:	c7 85 dc f9 ff ff 07 00 00 00 	mov    DWORD PTR [ebp-0x624],0x7
10000e6f:	eb 14                	jmp    10000e85 <x87Handler(regs*)+0x2bf>
10000e71:	c7 85 dc f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x624],0x2
10000e7b:	c7 85 e4 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x0
10000e85:	88 95 db f9 ff ff    	mov    BYTE PTR [ebp-0x625],dl
10000e8b:	56                   	push   esi
10000e8c:	56                   	push   esi
10000e8d:	ff b5 e0 f9 ff ff    	push   DWORD PTR [ebp-0x620]
10000e93:	68 0a 25 00 10       	push   0x1000250a	10000e94: R_386_32	.text
10000e98:	e8 fc ff ff ff       	call   10000e99 <x87Handler(regs*)+0x2d3>	10000e99: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e9d:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000ea3:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000ea7:	89 04 24             	mov    DWORD PTR [esp],eax
10000eaa:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000eb0:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000eb4:	50                   	push   eax
10000eb5:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000ebb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000ebf:	50                   	push   eax
10000ec0:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000ec6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000ec9:	50                   	push   eax
10000eca:	68 38 25 00 10       	push   0x10002538	10000ecb: R_386_32	.text
10000ecf:	e8 fc ff ff ff       	call   10000ed0 <x87Handler(regs*)+0x30a>	10000ed0: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ed4:	83 c4 18             	add    esp,0x18
10000ed7:	ff b5 e4 f9 ff ff    	push   DWORD PTR [ebp-0x61c]
10000edd:	68 4a 25 00 10       	push   0x1000254a	10000ede: R_386_32	.text
10000ee2:	e8 fc ff ff ff       	call   10000ee3 <x87Handler(regs*)+0x31d>	10000ee3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ee7:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000eed:	8a 08                	mov    cl,BYTE PTR [eax]
10000eef:	83 c4 10             	add    esp,0x10
10000ef2:	80 f9 d9             	cmp    cl,0xd9
10000ef5:	8a 95 db f9 ff ff    	mov    dl,BYTE PTR [ebp-0x625]
10000efb:	0f 85 41 02 00 00    	jne    10001142 <x87Handler(regs*)+0x57c>
10000f01:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000f05:	8d 48 20             	lea    ecx,[eax+0x20]
10000f08:	80 f9 0e             	cmp    cl,0xe
10000f0b:	0f 87 fb 01 00 00    	ja     1000110c <x87Handler(regs*)+0x546>
10000f11:	0f b6 c9             	movzx  ecx,cl
10000f14:	ff 24 8d 64 25 00 10 	jmp    DWORD PTR [ecx*4+0x10002564]	10000f17: R_386_32	.text
10000f1b:	8d b5 f4 f9 ff ff    	lea    esi,[ebp-0x60c]
10000f21:	51                   	push   ecx
10000f22:	51                   	push   ecx
10000f23:	6a 00                	push   0x0
10000f25:	56                   	push   esi
10000f26:	e8 fc ff ff ff       	call   10000f27 <x87Handler(regs*)+0x361>	10000f27: R_386_PC32	fpuGetReg(int)
10000f2b:	8d 95 00 fa ff ff    	lea    edx,[ebp-0x600]
10000f31:	b9 03 00 00 00       	mov    ecx,0x3
10000f36:	89 e7                	mov    edi,esp
10000f38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f3a:	52                   	push   edx
10000f3b:	e8 fc ff ff ff       	call   10000f3c <x87Handler(regs*)+0x376>	10000f3c: R_386_PC32	fpuChs(_Float80)
10000f40:	b9 03 00 00 00       	mov    ecx,0x3
10000f45:	89 e7                	mov    edi,esp
10000f47:	89 d6                	mov    esi,edx
10000f49:	eb 49                	jmp    10000f94 <x87Handler(regs*)+0x3ce>
10000f4b:	8d 85 0c fa ff ff    	lea    eax,[ebp-0x5f4]
10000f51:	52                   	push   edx
10000f52:	52                   	push   edx
10000f53:	6a 00                	push   0x0
10000f55:	50                   	push   eax
10000f56:	e8 fc ff ff ff       	call   10000f57 <x87Handler(regs*)+0x391>	10000f57: R_386_PC32	fpuGetReg(int)
10000f5b:	8b 85 0c fa ff ff    	mov    eax,DWORD PTR [ebp-0x5f4]
10000f61:	8b 95 10 fa ff ff    	mov    edx,DWORD PTR [ebp-0x5f0]
10000f67:	89 85 18 fa ff ff    	mov    DWORD PTR [ebp-0x5e8],eax
10000f6d:	89 95 1c fa ff ff    	mov    DWORD PTR [ebp-0x5e4],edx
10000f73:	8b 85 14 fa ff ff    	mov    eax,DWORD PTR [ebp-0x5ec]
10000f79:	66 89 85 20 fa ff ff 	mov    WORD PTR [ebp-0x5e0],ax
10000f80:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000f87:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000f8d:	b9 03 00 00 00       	mov    ecx,0x3
10000f92:	89 e7                	mov    edi,esp
10000f94:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f96:	6a 00                	push   0x0
10000f98:	e8 fc ff ff ff       	call   10000f99 <x87Handler(regs*)+0x3d3>	10000f99: R_386_PC32	fpuSetReg(int, _Float80)
10000f9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000fa1:	e9 fe 14 00 00       	jmp    100024a4 <x87Handler(regs*)+0x18de>
10000fa6:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000fad:	c7 85 24 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5dc],0x0
10000fb7:	c7 85 28 fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x5d8],0x20000000
10000fc1:	66 c7 85 2c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5d4],0x3fff
10000fca:	83 ec 10             	sub    esp,0x10
10000fcd:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000fd3:	e9 21 01 00 00       	jmp    100010f9 <x87Handler(regs*)+0x533>
10000fd8:	c6 85 3a fa ff ff 00 	mov    BYTE PTR [ebp-0x5c6],0x0
10000fdf:	c7 85 30 fa ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x5d0],0xf346e2be
10000fe9:	c7 85 34 fa ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x5cc],0x35269e12
10000ff3:	66 c7 85 38 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5c8],0x4001
10000ffc:	83 ec 10             	sub    esp,0x10
10000fff:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10001005:	e9 ef 00 00 00       	jmp    100010f9 <x87Handler(regs*)+0x533>
1000100a:	c6 85 46 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ba],0x0
10001011:	c7 85 3c fa ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x5c4],0x5705fc1c
1000101b:	c7 85 40 fa ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5c0],0x2e2a8eca
10001025:	66 c7 85 44 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5bc],0x4000
1000102e:	83 ec 10             	sub    esp,0x10
10001031:	8d b5 3c fa ff ff    	lea    esi,[ebp-0x5c4]
10001037:	e9 bd 00 00 00       	jmp    100010f9 <x87Handler(regs*)+0x533>
1000103c:	c6 85 52 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ae],0x0
10001043:	c7 85 48 fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x5b8],0x885a308c
1000104d:	c7 85 4c fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5b4],0x3243f6a8
10001057:	66 c7 85 50 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5b0],0x4001
10001060:	83 ec 10             	sub    esp,0x10
10001063:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
10001069:	e9 8b 00 00 00       	jmp    100010f9 <x87Handler(regs*)+0x533>
1000106e:	c6 85 5e fa ff ff 00 	mov    BYTE PTR [ebp-0x5a2],0x0
10001075:	c7 85 54 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5ac],0x3ef3fde6
1000107f:	c7 85 58 fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5a8],0x268826a1
10001089:	66 c7 85 5c fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5a4],0x3ffe
10001092:	83 ec 10             	sub    esp,0x10
10001095:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
1000109b:	eb 5c                	jmp    100010f9 <x87Handler(regs*)+0x533>
1000109d:	c6 85 6a fa ff ff 00 	mov    BYTE PTR [ebp-0x596],0x0
100010a4:	c7 85 60 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5a0],0xf473de68
100010ae:	c7 85 64 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x59c],0x2c5c85fd
100010b8:	66 c7 85 68 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x598],0x3fff
100010c1:	83 ec 10             	sub    esp,0x10
100010c4:	8d b5 60 fa ff ff    	lea    esi,[ebp-0x5a0]
100010ca:	eb 2d                	jmp    100010f9 <x87Handler(regs*)+0x533>
100010cc:	c6 85 76 fa ff ff 00 	mov    BYTE PTR [ebp-0x58a],0x0
100010d3:	c7 85 6c fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x594],0x0
100010dd:	c7 85 70 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x590],0x0
100010e7:	66 c7 85 74 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x58c],0x3fff
100010f0:	83 ec 10             	sub    esp,0x10
100010f3:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
100010f9:	b9 03 00 00 00       	mov    ecx,0x3
100010fe:	89 e7                	mov    edi,esp
10001100:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001102:	e8 fc ff ff ff       	call   10001103 <x87Handler(regs*)+0x53d>	10001103: R_386_PC32	fpuPush(_Float80)
10001107:	e9 91 fe ff ff       	jmp    10000f9d <x87Handler(regs*)+0x3d7>
1000110c:	8d 48 40             	lea    ecx,[eax+0x40]
1000110f:	80 f9 07             	cmp    cl,0x7
10001112:	0f 87 ed 07 00 00    	ja     10001905 <x87Handler(regs*)+0xd3f>
10001118:	8d b5 78 fa ff ff    	lea    esi,[ebp-0x588]
1000111e:	57                   	push   edi
1000111f:	57                   	push   edi
10001120:	2d c0 00 00 00       	sub    eax,0xc0
10001125:	50                   	push   eax
10001126:	56                   	push   esi
10001127:	e8 fc ff ff ff       	call   10001128 <x87Handler(regs*)+0x562>	10001128: R_386_PC32	fpuGetReg(int)
1000112c:	83 ec 14             	sub    esp,0x14
1000112f:	b9 03 00 00 00       	mov    ecx,0x3
10001134:	89 e7                	mov    edi,esp
10001136:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001138:	e8 fc ff ff ff       	call   10001139 <x87Handler(regs*)+0x573>	10001139: R_386_PC32	fpuPush(_Float80)
1000113d:	e9 2a 08 00 00       	jmp    1000196c <x87Handler(regs*)+0xda6>
10001142:	80 f9 d8             	cmp    cl,0xd8
10001145:	75 7a                	jne    100011c1 <x87Handler(regs*)+0x5fb>
10001147:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
1000114d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001151:	8d 48 40             	lea    ecx,[eax+0x40]
10001154:	80 f9 07             	cmp    cl,0x7
10001157:	0f 87 90 01 00 00    	ja     100012ed <x87Handler(regs*)+0x727>
1000115d:	8d b5 84 fa ff ff    	lea    esi,[ebp-0x57c]
10001163:	52                   	push   edx
10001164:	52                   	push   edx
10001165:	2d c0 00 00 00       	sub    eax,0xc0
1000116a:	50                   	push   eax
1000116b:	56                   	push   esi
1000116c:	e8 fc ff ff ff       	call   1000116d <x87Handler(regs*)+0x5a7>	1000116d: R_386_PC32	fpuGetReg(int)
10001171:	8d 95 90 fa ff ff    	lea    edx,[ebp-0x570]
10001177:	83 ec 0c             	sub    esp,0xc
1000117a:	6a 00                	push   0x0
1000117c:	52                   	push   edx
1000117d:	e8 fc ff ff ff       	call   1000117e <x87Handler(regs*)+0x5b8>	1000117e: R_386_PC32	fpuGetReg(int)
10001182:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
10001188:	51                   	push   ecx
10001189:	b9 03 00 00 00       	mov    ecx,0x3
1000118e:	89 e7                	mov    edi,esp
10001190:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001192:	83 ec 0c             	sub    esp,0xc
10001195:	b9 03 00 00 00       	mov    ecx,0x3
1000119a:	89 e7                	mov    edi,esp
1000119c:	8d 95 90 fa ff ff    	lea    edx,[ebp-0x570]
100011a2:	89 d6                	mov    esi,edx
100011a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011a6:	50                   	push   eax
100011a7:	e8 fc ff ff ff       	call   100011a8 <x87Handler(regs*)+0x5e2>	100011a8: R_386_PC32	fpuAdd(_Float80, _Float80)
100011ac:	83 c4 20             	add    esp,0x20
100011af:	b9 03 00 00 00       	mov    ecx,0x3
100011b4:	89 e7                	mov    edi,esp
100011b6:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
100011bc:	e9 93 01 00 00       	jmp    10001354 <x87Handler(regs*)+0x78e>
100011c1:	80 f9 dc             	cmp    cl,0xdc
100011c4:	0f 85 8d 00 00 00    	jne    10001257 <x87Handler(regs*)+0x691>
100011ca:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100011d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100011d4:	8d 48 40             	lea    ecx,[eax+0x40]
100011d7:	80 f9 07             	cmp    cl,0x7
100011da:	0f 87 f2 01 00 00    	ja     100013d2 <x87Handler(regs*)+0x80c>
100011e0:	8d b5 a8 fa ff ff    	lea    esi,[ebp-0x558]
100011e6:	51                   	push   ecx
100011e7:	51                   	push   ecx
100011e8:	2d c0 00 00 00       	sub    eax,0xc0
100011ed:	50                   	push   eax
100011ee:	56                   	push   esi
100011ef:	e8 fc ff ff ff       	call   100011f0 <x87Handler(regs*)+0x62a>	100011f0: R_386_PC32	fpuGetReg(int)
100011f4:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
100011fa:	83 ec 0c             	sub    esp,0xc
100011fd:	6a 00                	push   0x0
100011ff:	52                   	push   edx
10001200:	e8 fc ff ff ff       	call   10001201 <x87Handler(regs*)+0x63b>	10001201: R_386_PC32	fpuGetReg(int)
10001205:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000120b:	57                   	push   edi
1000120c:	b9 03 00 00 00       	mov    ecx,0x3
10001211:	89 e7                	mov    edi,esp
10001213:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001215:	83 ec 0c             	sub    esp,0xc
10001218:	b9 03 00 00 00       	mov    ecx,0x3
1000121d:	89 e7                	mov    edi,esp
1000121f:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
10001225:	89 d6                	mov    esi,edx
10001227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001229:	50                   	push   eax
1000122a:	e8 fc ff ff ff       	call   1000122b <x87Handler(regs*)+0x665>	1000122b: R_386_PC32	fpuAdd(_Float80, _Float80)
1000122f:	83 c4 20             	add    esp,0x20
10001232:	b9 03 00 00 00       	mov    ecx,0x3
10001237:	89 e7                	mov    edi,esp
10001239:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000123f:	89 c6                	mov    esi,eax
10001241:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001243:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001249:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000124d:	2d c0 00 00 00       	sub    eax,0xc0
10001252:	e9 03 02 00 00       	jmp    1000145a <x87Handler(regs*)+0x894>
10001257:	80 f9 de             	cmp    cl,0xde
1000125a:	0f 85 15 07 00 00    	jne    10001975 <x87Handler(regs*)+0xdaf>
10001260:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001266:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
1000126a:	8d 42 40             	lea    eax,[edx+0x40]
1000126d:	3c 07                	cmp    al,0x7
1000126f:	0f 87 eb 01 00 00    	ja     10001460 <x87Handler(regs*)+0x89a>
10001275:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
1000127b:	57                   	push   edi
1000127c:	57                   	push   edi
1000127d:	81 ea c0 00 00 00    	sub    edx,0xc0
10001283:	52                   	push   edx
10001284:	56                   	push   esi
10001285:	e8 fc ff ff ff       	call   10001286 <x87Handler(regs*)+0x6c0>	10001286: R_386_PC32	fpuGetReg(int)
1000128a:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
10001290:	83 ec 0c             	sub    esp,0xc
10001293:	6a 00                	push   0x0
10001295:	52                   	push   edx
10001296:	e8 fc ff ff ff       	call   10001297 <x87Handler(regs*)+0x6d1>	10001297: R_386_PC32	fpuGetReg(int)
1000129b:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
100012a1:	52                   	push   edx
100012a2:	b9 03 00 00 00       	mov    ecx,0x3
100012a7:	89 e7                	mov    edi,esp
100012a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012ab:	83 ec 0c             	sub    esp,0xc
100012ae:	b9 03 00 00 00       	mov    ecx,0x3
100012b3:	89 e7                	mov    edi,esp
100012b5:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
100012bb:	89 d6                	mov    esi,edx
100012bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012bf:	50                   	push   eax
100012c0:	e8 fc ff ff ff       	call   100012c1 <x87Handler(regs*)+0x6fb>	100012c1: R_386_PC32	fpuAdd(_Float80, _Float80)
100012c5:	83 c4 20             	add    esp,0x20
100012c8:	b9 03 00 00 00       	mov    ecx,0x3
100012cd:	89 e7                	mov    edi,esp
100012cf:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
100012d5:	89 c6                	mov    esi,eax
100012d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012d9:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100012df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100012e3:	2d c0 00 00 00       	sub    eax,0xc0
100012e8:	e9 f1 01 00 00       	jmp    100014de <x87Handler(regs*)+0x918>
100012ed:	8d 48 20             	lea    ecx,[eax+0x20]
100012f0:	80 f9 07             	cmp    cl,0x7
100012f3:	77 66                	ja     1000135b <x87Handler(regs*)+0x795>
100012f5:	8d b5 f0 fa ff ff    	lea    esi,[ebp-0x510]
100012fb:	52                   	push   edx
100012fc:	52                   	push   edx
100012fd:	2d e0 00 00 00       	sub    eax,0xe0
10001302:	50                   	push   eax
10001303:	56                   	push   esi
10001304:	e8 fc ff ff ff       	call   10001305 <x87Handler(regs*)+0x73f>	10001305: R_386_PC32	fpuGetReg(int)
10001309:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
1000130f:	83 ec 0c             	sub    esp,0xc
10001312:	6a 00                	push   0x0
10001314:	52                   	push   edx
10001315:	e8 fc ff ff ff       	call   10001316 <x87Handler(regs*)+0x750>	10001316: R_386_PC32	fpuGetReg(int)
1000131a:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
10001320:	51                   	push   ecx
10001321:	b9 03 00 00 00       	mov    ecx,0x3
10001326:	89 e7                	mov    edi,esp
10001328:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000132a:	83 ec 0c             	sub    esp,0xc
1000132d:	b9 03 00 00 00       	mov    ecx,0x3
10001332:	89 e7                	mov    edi,esp
10001334:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
1000133a:	89 d6                	mov    esi,edx
1000133c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000133e:	50                   	push   eax
1000133f:	e8 fc ff ff ff       	call   10001340 <x87Handler(regs*)+0x77a>	10001340: R_386_PC32	fpuSub(_Float80, _Float80)
10001344:	83 c4 20             	add    esp,0x20
10001347:	b9 03 00 00 00       	mov    ecx,0x3
1000134c:	89 e7                	mov    edi,esp
1000134e:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
10001354:	89 c6                	mov    esi,eax
10001356:	e9 39 fc ff ff       	jmp    10000f94 <x87Handler(regs*)+0x3ce>
1000135b:	8d 48 18             	lea    ecx,[eax+0x18]
1000135e:	80 f9 07             	cmp    cl,0x7
10001361:	0f 87 1d 02 00 00    	ja     10001584 <x87Handler(regs*)+0x9be>
10001367:	8d b5 14 fb ff ff    	lea    esi,[ebp-0x4ec]
1000136d:	51                   	push   ecx
1000136e:	51                   	push   ecx
1000136f:	6a 00                	push   0x0
10001371:	56                   	push   esi
10001372:	e8 fc ff ff ff       	call   10001373 <x87Handler(regs*)+0x7ad>	10001373: R_386_PC32	fpuGetReg(int)
10001377:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
1000137d:	83 ec 0c             	sub    esp,0xc
10001380:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001386:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000138a:	2d e8 00 00 00       	sub    eax,0xe8
1000138f:	50                   	push   eax
10001390:	52                   	push   edx
10001391:	e8 fc ff ff ff       	call   10001392 <x87Handler(regs*)+0x7cc>	10001392: R_386_PC32	fpuGetReg(int)
10001396:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
1000139c:	57                   	push   edi
1000139d:	b9 03 00 00 00       	mov    ecx,0x3
100013a2:	89 e7                	mov    edi,esp
100013a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013a6:	83 ec 0c             	sub    esp,0xc
100013a9:	b9 03 00 00 00       	mov    ecx,0x3
100013ae:	89 e7                	mov    edi,esp
100013b0:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
100013b6:	89 d6                	mov    esi,edx
100013b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013ba:	50                   	push   eax
100013bb:	e8 fc ff ff ff       	call   100013bc <x87Handler(regs*)+0x7f6>	100013bc: R_386_PC32	fpuSub(_Float80, _Float80)
100013c0:	83 c4 20             	add    esp,0x20
100013c3:	b9 03 00 00 00       	mov    ecx,0x3
100013c8:	89 e7                	mov    edi,esp
100013ca:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
100013d0:	eb 82                	jmp    10001354 <x87Handler(regs*)+0x78e>
100013d2:	8d 48 18             	lea    ecx,[eax+0x18]
100013d5:	80 f9 07             	cmp    cl,0x7
100013d8:	0f 87 16 02 00 00    	ja     100015f4 <x87Handler(regs*)+0xa2e>
100013de:	8d b5 38 fb ff ff    	lea    esi,[ebp-0x4c8]
100013e4:	50                   	push   eax
100013e5:	50                   	push   eax
100013e6:	6a 00                	push   0x0
100013e8:	56                   	push   esi
100013e9:	e8 fc ff ff ff       	call   100013ea <x87Handler(regs*)+0x824>	100013ea: R_386_PC32	fpuGetReg(int)
100013ee:	8d 95 44 fb ff ff    	lea    edx,[ebp-0x4bc]
100013f4:	83 ec 0c             	sub    esp,0xc
100013f7:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100013fd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001401:	2d e8 00 00 00       	sub    eax,0xe8
10001406:	50                   	push   eax
10001407:	52                   	push   edx
10001408:	e8 fc ff ff ff       	call   10001409 <x87Handler(regs*)+0x843>	10001409: R_386_PC32	fpuGetReg(int)
1000140d:	8d 85 50 fb ff ff    	lea    eax,[ebp-0x4b0]
10001413:	52                   	push   edx
10001414:	b9 03 00 00 00       	mov    ecx,0x3
10001419:	89 e7                	mov    edi,esp
1000141b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000141d:	83 ec 0c             	sub    esp,0xc
10001420:	b9 03 00 00 00       	mov    ecx,0x3
10001425:	89 e7                	mov    edi,esp
10001427:	8d 95 44 fb ff ff    	lea    edx,[ebp-0x4bc]
1000142d:	89 d6                	mov    esi,edx
1000142f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001431:	50                   	push   eax
10001432:	e8 fc ff ff ff       	call   10001433 <x87Handler(regs*)+0x86d>	10001433: R_386_PC32	fpuSub(_Float80, _Float80)
10001437:	83 c4 20             	add    esp,0x20
1000143a:	b9 03 00 00 00       	mov    ecx,0x3
1000143f:	89 e7                	mov    edi,esp
10001441:	8d 85 50 fb ff ff    	lea    eax,[ebp-0x4b0]
10001447:	89 c6                	mov    esi,eax
10001449:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000144b:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001451:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001455:	2d e8 00 00 00       	sub    eax,0xe8
1000145a:	50                   	push   eax
1000145b:	e9 38 fb ff ff       	jmp    10000f98 <x87Handler(regs*)+0x3d2>
10001460:	8d 42 20             	lea    eax,[edx+0x20]
10001463:	3c 07                	cmp    al,0x7
10001465:	0f 87 8d 00 00 00    	ja     100014f8 <x87Handler(regs*)+0x932>
1000146b:	8d b5 5c fb ff ff    	lea    esi,[ebp-0x4a4]
10001471:	51                   	push   ecx
10001472:	51                   	push   ecx
10001473:	81 ea e0 00 00 00    	sub    edx,0xe0
10001479:	52                   	push   edx
1000147a:	56                   	push   esi
1000147b:	e8 fc ff ff ff       	call   1000147c <x87Handler(regs*)+0x8b6>	1000147c: R_386_PC32	fpuGetReg(int)
10001480:	8d 95 68 fb ff ff    	lea    edx,[ebp-0x498]
10001486:	83 ec 0c             	sub    esp,0xc
10001489:	6a 00                	push   0x0
1000148b:	52                   	push   edx
1000148c:	e8 fc ff ff ff       	call   1000148d <x87Handler(regs*)+0x8c7>	1000148d: R_386_PC32	fpuGetReg(int)
10001491:	8d 85 74 fb ff ff    	lea    eax,[ebp-0x48c]
10001497:	57                   	push   edi
10001498:	b9 03 00 00 00       	mov    ecx,0x3
1000149d:	89 e7                	mov    edi,esp
1000149f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014a1:	83 ec 0c             	sub    esp,0xc
100014a4:	b9 03 00 00 00       	mov    ecx,0x3
100014a9:	89 e7                	mov    edi,esp
100014ab:	8d 95 68 fb ff ff    	lea    edx,[ebp-0x498]
100014b1:	89 d6                	mov    esi,edx
100014b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014b5:	50                   	push   eax
100014b6:	e8 fc ff ff ff       	call   100014b7 <x87Handler(regs*)+0x8f1>	100014b7: R_386_PC32	fpuSub(_Float80, _Float80)
100014bb:	83 c4 20             	add    esp,0x20
100014be:	b9 03 00 00 00       	mov    ecx,0x3
100014c3:	89 e7                	mov    edi,esp
100014c5:	8d 85 74 fb ff ff    	lea    eax,[ebp-0x48c]
100014cb:	89 c6                	mov    esi,eax
100014cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014cf:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100014d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014d9:	2d e0 00 00 00       	sub    eax,0xe0
100014de:	50                   	push   eax
100014df:	e8 fc ff ff ff       	call   100014e0 <x87Handler(regs*)+0x91a>	100014e0: R_386_PC32	fpuSetReg(int, _Float80)
100014e4:	8d 45 dc             	lea    eax,[ebp-0x24]
100014e7:	89 04 24             	mov    DWORD PTR [esp],eax
100014ea:	e8 fc ff ff ff       	call   100014eb <x87Handler(regs*)+0x925>	100014eb: R_386_PC32	fpuPop()
100014ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100014f3:	e9 14 08 00 00       	jmp    10001d0c <x87Handler(regs*)+0x1146>
100014f8:	8d 42 18             	lea    eax,[edx+0x18]
100014fb:	3c 07                	cmp    al,0x7
100014fd:	0f 87 74 01 00 00    	ja     10001677 <x87Handler(regs*)+0xab1>
10001503:	8d b5 80 fb ff ff    	lea    esi,[ebp-0x480]
10001509:	57                   	push   edi
1000150a:	57                   	push   edi
1000150b:	6a 00                	push   0x0
1000150d:	56                   	push   esi
1000150e:	e8 fc ff ff ff       	call   1000150f <x87Handler(regs*)+0x949>	1000150f: R_386_PC32	fpuGetReg(int)
10001513:	8d 95 8c fb ff ff    	lea    edx,[ebp-0x474]
10001519:	83 ec 0c             	sub    esp,0xc
1000151c:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001522:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001526:	2d e8 00 00 00       	sub    eax,0xe8
1000152b:	50                   	push   eax
1000152c:	52                   	push   edx
1000152d:	e8 fc ff ff ff       	call   1000152e <x87Handler(regs*)+0x968>	1000152e: R_386_PC32	fpuGetReg(int)
10001532:	8d 85 98 fb ff ff    	lea    eax,[ebp-0x468]
10001538:	52                   	push   edx
10001539:	b9 03 00 00 00       	mov    ecx,0x3
1000153e:	89 e7                	mov    edi,esp
10001540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001542:	83 ec 0c             	sub    esp,0xc
10001545:	b9 03 00 00 00       	mov    ecx,0x3
1000154a:	89 e7                	mov    edi,esp
1000154c:	8d 95 8c fb ff ff    	lea    edx,[ebp-0x474]
10001552:	89 d6                	mov    esi,edx
10001554:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001556:	50                   	push   eax
10001557:	e8 fc ff ff ff       	call   10001558 <x87Handler(regs*)+0x992>	10001558: R_386_PC32	fpuSub(_Float80, _Float80)
1000155c:	83 c4 20             	add    esp,0x20
1000155f:	b9 03 00 00 00       	mov    ecx,0x3
10001564:	89 e7                	mov    edi,esp
10001566:	8d 85 98 fb ff ff    	lea    eax,[ebp-0x468]
1000156c:	89 c6                	mov    esi,eax
1000156e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001570:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001576:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000157a:	2d e8 00 00 00       	sub    eax,0xe8
1000157f:	e9 5a ff ff ff       	jmp    100014de <x87Handler(regs*)+0x918>
10001584:	8d 48 38             	lea    ecx,[eax+0x38]
10001587:	80 f9 07             	cmp    cl,0x7
1000158a:	0f 87 6a 01 00 00    	ja     100016fa <x87Handler(regs*)+0xb34>
10001590:	8d b5 a4 fb ff ff    	lea    esi,[ebp-0x45c]
10001596:	52                   	push   edx
10001597:	52                   	push   edx
10001598:	2d c8 00 00 00       	sub    eax,0xc8
1000159d:	50                   	push   eax
1000159e:	56                   	push   esi
1000159f:	e8 fc ff ff ff       	call   100015a0 <x87Handler(regs*)+0x9da>	100015a0: R_386_PC32	fpuGetReg(int)
100015a4:	8d 95 b0 fb ff ff    	lea    edx,[ebp-0x450]
100015aa:	83 ec 0c             	sub    esp,0xc
100015ad:	6a 00                	push   0x0
100015af:	52                   	push   edx
100015b0:	e8 fc ff ff ff       	call   100015b1 <x87Handler(regs*)+0x9eb>	100015b1: R_386_PC32	fpuGetReg(int)
100015b5:	8d 85 bc fb ff ff    	lea    eax,[ebp-0x444]
100015bb:	51                   	push   ecx
100015bc:	b9 03 00 00 00       	mov    ecx,0x3
100015c1:	89 e7                	mov    edi,esp
100015c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015c5:	83 ec 0c             	sub    esp,0xc
100015c8:	b9 03 00 00 00       	mov    ecx,0x3
100015cd:	89 e7                	mov    edi,esp
100015cf:	8d 95 b0 fb ff ff    	lea    edx,[ebp-0x450]
100015d5:	89 d6                	mov    esi,edx
100015d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015d9:	50                   	push   eax
100015da:	e8 fc ff ff ff       	call   100015db <x87Handler(regs*)+0xa15>	100015db: R_386_PC32	fpuMultiply(_Float80, _Float80)
100015df:	83 c4 20             	add    esp,0x20
100015e2:	b9 03 00 00 00       	mov    ecx,0x3
100015e7:	89 e7                	mov    edi,esp
100015e9:	8d 85 bc fb ff ff    	lea    eax,[ebp-0x444]
100015ef:	e9 60 fd ff ff       	jmp    10001354 <x87Handler(regs*)+0x78e>
100015f4:	8d 48 38             	lea    ecx,[eax+0x38]
100015f7:	80 f9 07             	cmp    cl,0x7
100015fa:	0f 87 3e 06 00 00    	ja     10001c3e <x87Handler(regs*)+0x1078>
10001600:	8d b5 c8 fb ff ff    	lea    esi,[ebp-0x438]
10001606:	51                   	push   ecx
10001607:	51                   	push   ecx
10001608:	2d c8 00 00 00       	sub    eax,0xc8
1000160d:	50                   	push   eax
1000160e:	56                   	push   esi
1000160f:	e8 fc ff ff ff       	call   10001610 <x87Handler(regs*)+0xa4a>	10001610: R_386_PC32	fpuGetReg(int)
10001614:	8d 95 d4 fb ff ff    	lea    edx,[ebp-0x42c]
1000161a:	83 ec 0c             	sub    esp,0xc
1000161d:	6a 00                	push   0x0
1000161f:	52                   	push   edx
10001620:	e8 fc ff ff ff       	call   10001621 <x87Handler(regs*)+0xa5b>	10001621: R_386_PC32	fpuGetReg(int)
10001625:	8d 85 e0 fb ff ff    	lea    eax,[ebp-0x420]
1000162b:	57                   	push   edi
1000162c:	b9 03 00 00 00       	mov    ecx,0x3
10001631:	89 e7                	mov    edi,esp
10001633:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001635:	83 ec 0c             	sub    esp,0xc
10001638:	b9 03 00 00 00       	mov    ecx,0x3
1000163d:	89 e7                	mov    edi,esp
1000163f:	8d 95 d4 fb ff ff    	lea    edx,[ebp-0x42c]
10001645:	89 d6                	mov    esi,edx
10001647:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001649:	50                   	push   eax
1000164a:	e8 fc ff ff ff       	call   1000164b <x87Handler(regs*)+0xa85>	1000164b: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000164f:	83 c4 20             	add    esp,0x20
10001652:	b9 03 00 00 00       	mov    ecx,0x3
10001657:	89 e7                	mov    edi,esp
10001659:	8d 85 e0 fb ff ff    	lea    eax,[ebp-0x420]
1000165f:	89 c6                	mov    esi,eax
10001661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001663:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001669:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000166d:	2d c8 00 00 00       	sub    eax,0xc8
10001672:	e9 e3 fd ff ff       	jmp    1000145a <x87Handler(regs*)+0x894>
10001677:	8d 42 38             	lea    eax,[edx+0x38]
1000167a:	3c 07                	cmp    al,0x7
1000167c:	0f 87 e8 00 00 00    	ja     1000176a <x87Handler(regs*)+0xba4>
10001682:	8d b5 ec fb ff ff    	lea    esi,[ebp-0x414]
10001688:	50                   	push   eax
10001689:	50                   	push   eax
1000168a:	81 ea c8 00 00 00    	sub    edx,0xc8
10001690:	52                   	push   edx
10001691:	56                   	push   esi
10001692:	e8 fc ff ff ff       	call   10001693 <x87Handler(regs*)+0xacd>	10001693: R_386_PC32	fpuGetReg(int)
10001697:	8d 95 f8 fb ff ff    	lea    edx,[ebp-0x408]
1000169d:	83 ec 0c             	sub    esp,0xc
100016a0:	6a 00                	push   0x0
100016a2:	52                   	push   edx
100016a3:	e8 fc ff ff ff       	call   100016a4 <x87Handler(regs*)+0xade>	100016a4: R_386_PC32	fpuGetReg(int)
100016a8:	8d 85 04 fc ff ff    	lea    eax,[ebp-0x3fc]
100016ae:	52                   	push   edx
100016af:	b9 03 00 00 00       	mov    ecx,0x3
100016b4:	89 e7                	mov    edi,esp
100016b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016b8:	83 ec 0c             	sub    esp,0xc
100016bb:	b9 03 00 00 00       	mov    ecx,0x3
100016c0:	89 e7                	mov    edi,esp
100016c2:	8d 95 f8 fb ff ff    	lea    edx,[ebp-0x408]
100016c8:	89 d6                	mov    esi,edx
100016ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016cc:	50                   	push   eax
100016cd:	e8 fc ff ff ff       	call   100016ce <x87Handler(regs*)+0xb08>	100016ce: R_386_PC32	fpuMultiply(_Float80, _Float80)
100016d2:	83 c4 20             	add    esp,0x20
100016d5:	b9 03 00 00 00       	mov    ecx,0x3
100016da:	89 e7                	mov    edi,esp
100016dc:	8d 85 04 fc ff ff    	lea    eax,[ebp-0x3fc]
100016e2:	89 c6                	mov    esi,eax
100016e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016e6:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100016ec:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016f0:	2d c8 00 00 00       	sub    eax,0xc8
100016f5:	e9 f1 01 00 00       	jmp    100018eb <x87Handler(regs*)+0xd25>
100016fa:	8d 48 10             	lea    ecx,[eax+0x10]
100016fd:	80 f9 07             	cmp    cl,0x7
10001700:	0f 87 ee 00 00 00    	ja     100017f4 <x87Handler(regs*)+0xc2e>
10001706:	8d b5 10 fc ff ff    	lea    esi,[ebp-0x3f0]
1000170c:	51                   	push   ecx
1000170d:	51                   	push   ecx
1000170e:	2d f0 00 00 00       	sub    eax,0xf0
10001713:	50                   	push   eax
10001714:	56                   	push   esi
10001715:	e8 fc ff ff ff       	call   10001716 <x87Handler(regs*)+0xb50>	10001716: R_386_PC32	fpuGetReg(int)
1000171a:	8d 95 1c fc ff ff    	lea    edx,[ebp-0x3e4]
10001720:	83 ec 0c             	sub    esp,0xc
10001723:	6a 00                	push   0x0
10001725:	52                   	push   edx
10001726:	e8 fc ff ff ff       	call   10001727 <x87Handler(regs*)+0xb61>	10001727: R_386_PC32	fpuGetReg(int)
1000172b:	8d 85 28 fc ff ff    	lea    eax,[ebp-0x3d8]
10001731:	57                   	push   edi
10001732:	b9 03 00 00 00       	mov    ecx,0x3
10001737:	89 e7                	mov    edi,esp
10001739:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000173b:	83 ec 0c             	sub    esp,0xc
1000173e:	b9 03 00 00 00       	mov    ecx,0x3
10001743:	89 e7                	mov    edi,esp
10001745:	8d 95 1c fc ff ff    	lea    edx,[ebp-0x3e4]
1000174b:	89 d6                	mov    esi,edx
1000174d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000174f:	50                   	push   eax
10001750:	e8 fc ff ff ff       	call   10001751 <x87Handler(regs*)+0xb8b>	10001751: R_386_PC32	fpuDivide(_Float80, _Float80)
10001755:	83 c4 20             	add    esp,0x20
10001758:	b9 03 00 00 00       	mov    ecx,0x3
1000175d:	89 e7                	mov    edi,esp
1000175f:	8d 85 28 fc ff ff    	lea    eax,[ebp-0x3d8]
10001765:	e9 fb 00 00 00       	jmp    10001865 <x87Handler(regs*)+0xc9f>
1000176a:	80 fa f7             	cmp    dl,0xf7
1000176d:	0f 86 fa 00 00 00    	jbe    1000186d <x87Handler(regs*)+0xca7>
10001773:	8d b5 34 fc ff ff    	lea    esi,[ebp-0x3cc]
10001779:	50                   	push   eax
1000177a:	50                   	push   eax
1000177b:	6a 00                	push   0x0
1000177d:	56                   	push   esi
1000177e:	e8 fc ff ff ff       	call   1000177f <x87Handler(regs*)+0xbb9>	1000177f: R_386_PC32	fpuGetReg(int)
10001783:	8d 95 40 fc ff ff    	lea    edx,[ebp-0x3c0]
10001789:	83 ec 0c             	sub    esp,0xc
1000178c:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001792:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001796:	2d f8 00 00 00       	sub    eax,0xf8
1000179b:	50                   	push   eax
1000179c:	52                   	push   edx
1000179d:	e8 fc ff ff ff       	call   1000179e <x87Handler(regs*)+0xbd8>	1000179e: R_386_PC32	fpuGetReg(int)
100017a2:	8d 85 4c fc ff ff    	lea    eax,[ebp-0x3b4]
100017a8:	52                   	push   edx
100017a9:	b9 03 00 00 00       	mov    ecx,0x3
100017ae:	89 e7                	mov    edi,esp
100017b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017b2:	83 ec 0c             	sub    esp,0xc
100017b5:	b9 03 00 00 00       	mov    ecx,0x3
100017ba:	89 e7                	mov    edi,esp
100017bc:	8d 95 40 fc ff ff    	lea    edx,[ebp-0x3c0]
100017c2:	89 d6                	mov    esi,edx
100017c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017c6:	50                   	push   eax
100017c7:	e8 fc ff ff ff       	call   100017c8 <x87Handler(regs*)+0xc02>	100017c8: R_386_PC32	fpuDivide(_Float80, _Float80)
100017cc:	83 c4 20             	add    esp,0x20
100017cf:	b9 03 00 00 00       	mov    ecx,0x3
100017d4:	89 e7                	mov    edi,esp
100017d6:	8d 85 4c fc ff ff    	lea    eax,[ebp-0x3b4]
100017dc:	89 c6                	mov    esi,eax
100017de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e0:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100017e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017ea:	2d f8 00 00 00       	sub    eax,0xf8
100017ef:	e9 f7 00 00 00       	jmp    100018eb <x87Handler(regs*)+0xd25>
100017f4:	3c f7                	cmp    al,0xf7
100017f6:	0f 86 fa 01 00 00    	jbe    100019f6 <x87Handler(regs*)+0xe30>
100017fc:	8d b5 58 fc ff ff    	lea    esi,[ebp-0x3a8]
10001802:	51                   	push   ecx
10001803:	51                   	push   ecx
10001804:	6a 00                	push   0x0
10001806:	56                   	push   esi
10001807:	e8 fc ff ff ff       	call   10001808 <x87Handler(regs*)+0xc42>	10001808: R_386_PC32	fpuGetReg(int)
1000180c:	8d 95 64 fc ff ff    	lea    edx,[ebp-0x39c]
10001812:	83 ec 0c             	sub    esp,0xc
10001815:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
1000181b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000181f:	2d f8 00 00 00       	sub    eax,0xf8
10001824:	50                   	push   eax
10001825:	52                   	push   edx
10001826:	e8 fc ff ff ff       	call   10001827 <x87Handler(regs*)+0xc61>	10001827: R_386_PC32	fpuGetReg(int)
1000182b:	8d 85 70 fc ff ff    	lea    eax,[ebp-0x390]
10001831:	57                   	push   edi
10001832:	b9 03 00 00 00       	mov    ecx,0x3
10001837:	89 e7                	mov    edi,esp
10001839:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000183b:	83 ec 0c             	sub    esp,0xc
1000183e:	b9 03 00 00 00       	mov    ecx,0x3
10001843:	89 e7                	mov    edi,esp
10001845:	8d 95 64 fc ff ff    	lea    edx,[ebp-0x39c]
1000184b:	89 d6                	mov    esi,edx
1000184d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000184f:	50                   	push   eax
10001850:	e8 fc ff ff ff       	call   10001851 <x87Handler(regs*)+0xc8b>	10001851: R_386_PC32	fpuDivide(_Float80, _Float80)
10001855:	83 c4 20             	add    esp,0x20
10001858:	b9 03 00 00 00       	mov    ecx,0x3
1000185d:	89 e7                	mov    edi,esp
1000185f:	8d 85 70 fc ff ff    	lea    eax,[ebp-0x390]
10001865:	89 c6                	mov    esi,eax
10001867:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001869:	6a 00                	push   0x0
1000186b:	eb 7f                	jmp    100018ec <x87Handler(regs*)+0xd26>
1000186d:	8d 42 10             	lea    eax,[edx+0x10]
10001870:	3c 07                	cmp    al,0x7
10001872:	0f 87 2e 03 00 00    	ja     10001ba6 <x87Handler(regs*)+0xfe0>
10001878:	8d b5 7c fc ff ff    	lea    esi,[ebp-0x384]
1000187e:	57                   	push   edi
1000187f:	57                   	push   edi
10001880:	81 ea f0 00 00 00    	sub    edx,0xf0
10001886:	52                   	push   edx
10001887:	56                   	push   esi
10001888:	e8 fc ff ff ff       	call   10001889 <x87Handler(regs*)+0xcc3>	10001889: R_386_PC32	fpuGetReg(int)
1000188d:	8d 95 88 fc ff ff    	lea    edx,[ebp-0x378]
10001893:	83 ec 0c             	sub    esp,0xc
10001896:	6a 00                	push   0x0
10001898:	52                   	push   edx
10001899:	e8 fc ff ff ff       	call   1000189a <x87Handler(regs*)+0xcd4>	1000189a: R_386_PC32	fpuGetReg(int)
1000189e:	8d 85 94 fc ff ff    	lea    eax,[ebp-0x36c]
100018a4:	52                   	push   edx
100018a5:	b9 03 00 00 00       	mov    ecx,0x3
100018aa:	89 e7                	mov    edi,esp
100018ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018ae:	83 ec 0c             	sub    esp,0xc
100018b1:	b9 03 00 00 00       	mov    ecx,0x3
100018b6:	89 e7                	mov    edi,esp
100018b8:	8d 95 88 fc ff ff    	lea    edx,[ebp-0x378]
100018be:	89 d6                	mov    esi,edx
100018c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018c2:	50                   	push   eax
100018c3:	e8 fc ff ff ff       	call   100018c4 <x87Handler(regs*)+0xcfe>	100018c4: R_386_PC32	fpuDivide(_Float80, _Float80)
100018c8:	83 c4 20             	add    esp,0x20
100018cb:	b9 03 00 00 00       	mov    ecx,0x3
100018d0:	89 e7                	mov    edi,esp
100018d2:	8d 85 94 fc ff ff    	lea    eax,[ebp-0x36c]
100018d8:	89 c6                	mov    esi,eax
100018da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018dc:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100018e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018e6:	2d f0 00 00 00       	sub    eax,0xf0
100018eb:	50                   	push   eax
100018ec:	e8 fc ff ff ff       	call   100018ed <x87Handler(regs*)+0xd27>	100018ed: R_386_PC32	fpuSetReg(int, _Float80)
100018f1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100018f5:	8d 45 dc             	lea    eax,[ebp-0x24]
100018f8:	89 04 24             	mov    DWORD PTR [esp],eax
100018fb:	e8 fc ff ff ff       	call   100018fc <x87Handler(regs*)+0xd36>	100018fc: R_386_PC32	fpuPop()
10001900:	e9 07 04 00 00       	jmp    10001d0c <x87Handler(regs*)+0x1146>
10001905:	8d 48 38             	lea    ecx,[eax+0x38]
10001908:	80 f9 07             	cmp    cl,0x7
1000190b:	0f 87 03 04 00 00    	ja     10001d14 <x87Handler(regs*)+0x114e>
10001911:	8d 55 dc             	lea    edx,[ebp-0x24]
10001914:	51                   	push   ecx
10001915:	51                   	push   ecx
10001916:	2d c8 00 00 00       	sub    eax,0xc8
1000191b:	50                   	push   eax
1000191c:	52                   	push   edx
1000191d:	e8 fc ff ff ff       	call   1000191e <x87Handler(regs*)+0xd58>	1000191e: R_386_PC32	fpuGetReg(int)
10001922:	8d b5 a0 fc ff ff    	lea    esi,[ebp-0x360]
10001928:	83 ec 0c             	sub    esp,0xc
1000192b:	6a 00                	push   0x0
1000192d:	56                   	push   esi
1000192e:	e8 fc ff ff ff       	call   1000192f <x87Handler(regs*)+0xd69>	1000192f: R_386_PC32	fpuGetReg(int)
10001933:	83 c4 10             	add    esp,0x10
10001936:	b9 03 00 00 00       	mov    ecx,0x3
1000193b:	89 e7                	mov    edi,esp
1000193d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000193f:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001945:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001949:	2d c8 00 00 00       	sub    eax,0xc8
1000194e:	50                   	push   eax
1000194f:	e8 fc ff ff ff       	call   10001950 <x87Handler(regs*)+0xd8a>	10001950: R_386_PC32	fpuSetReg(int, _Float80)
10001954:	83 ec 0c             	sub    esp,0xc
10001957:	b9 03 00 00 00       	mov    ecx,0x3
1000195c:	89 e7                	mov    edi,esp
1000195e:	8d 55 dc             	lea    edx,[ebp-0x24]
10001961:	89 d6                	mov    esi,edx
10001963:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001965:	6a 00                	push   0x0
10001967:	e8 fc ff ff ff       	call   10001968 <x87Handler(regs*)+0xda2>	10001968: R_386_PC32	fpuSetReg(int, _Float80)
1000196c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001970:	e9 2a 05 00 00       	jmp    10001e9f <x87Handler(regs*)+0x12d9>
10001975:	80 f9 dd             	cmp    cl,0xdd
10001978:	0f 85 d1 01 00 00    	jne    10001b4f <x87Handler(regs*)+0xf89>
1000197e:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001984:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001988:	8d 48 30             	lea    ecx,[eax+0x30]
1000198b:	80 f9 07             	cmp    cl,0x7
1000198e:	77 2d                	ja     100019bd <x87Handler(regs*)+0xdf7>
10001990:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
10001996:	50                   	push   eax
10001997:	50                   	push   eax
10001998:	6a 00                	push   0x0
1000199a:	56                   	push   esi
1000199b:	e8 fc ff ff ff       	call   1000199c <x87Handler(regs*)+0xdd6>	1000199c: R_386_PC32	fpuGetReg(int)
100019a0:	b9 03 00 00 00       	mov    ecx,0x3
100019a5:	89 e7                	mov    edi,esp
100019a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019a9:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100019af:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100019b3:	2d d0 00 00 00       	sub    eax,0xd0
100019b8:	e9 9d fa ff ff       	jmp    1000145a <x87Handler(regs*)+0x894>
100019bd:	8d 48 28             	lea    ecx,[eax+0x28]
100019c0:	80 f9 07             	cmp    cl,0x7
100019c3:	0f 87 cb 00 00 00    	ja     10001a94 <x87Handler(regs*)+0xece>
100019c9:	8d b5 b8 fc ff ff    	lea    esi,[ebp-0x348]
100019cf:	50                   	push   eax
100019d0:	50                   	push   eax
100019d1:	6a 00                	push   0x0
100019d3:	56                   	push   esi
100019d4:	e8 fc ff ff ff       	call   100019d5 <x87Handler(regs*)+0xe0f>	100019d5: R_386_PC32	fpuGetReg(int)
100019d9:	b9 03 00 00 00       	mov    ecx,0x3
100019de:	89 e7                	mov    edi,esp
100019e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019e2:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100019e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100019ec:	2d d8 00 00 00       	sub    eax,0xd8
100019f1:	e9 e8 fa ff ff       	jmp    100014de <x87Handler(regs*)+0x918>
100019f6:	8d 48 30             	lea    ecx,[eax+0x30]
100019f9:	80 f9 07             	cmp    cl,0x7
100019fc:	77 45                	ja     10001a43 <x87Handler(regs*)+0xe7d>
100019fe:	8d b5 c4 fc ff ff    	lea    esi,[ebp-0x33c]
10001a04:	57                   	push   edi
10001a05:	57                   	push   edi
10001a06:	2d d0 00 00 00       	sub    eax,0xd0
10001a0b:	50                   	push   eax
10001a0c:	56                   	push   esi
10001a0d:	e8 fc ff ff ff       	call   10001a0e <x87Handler(regs*)+0xe48>	10001a0e: R_386_PC32	fpuGetReg(int)
10001a12:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
10001a18:	83 ec 0c             	sub    esp,0xc
10001a1b:	6a 00                	push   0x0
10001a1d:	50                   	push   eax
10001a1e:	e8 fc ff ff ff       	call   10001a1f <x87Handler(regs*)+0xe59>	10001a1f: R_386_PC32	fpuGetReg(int)
10001a23:	50                   	push   eax
10001a24:	50                   	push   eax
10001a25:	b9 03 00 00 00       	mov    ecx,0x3
10001a2a:	89 e7                	mov    edi,esp
10001a2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a2e:	83 ec 0c             	sub    esp,0xc
10001a31:	b9 03 00 00 00       	mov    ecx,0x3
10001a36:	89 e7                	mov    edi,esp
10001a38:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
10001a3e:	e9 99 00 00 00       	jmp    10001adc <x87Handler(regs*)+0xf16>
10001a43:	8d 48 28             	lea    ecx,[eax+0x28]
10001a46:	80 f9 07             	cmp    cl,0x7
10001a49:	0f 87 58 04 00 00    	ja     10001ea7 <x87Handler(regs*)+0x12e1>
10001a4f:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
10001a55:	52                   	push   edx
10001a56:	52                   	push   edx
10001a57:	2d d8 00 00 00       	sub    eax,0xd8
10001a5c:	50                   	push   eax
10001a5d:	56                   	push   esi
10001a5e:	e8 fc ff ff ff       	call   10001a5f <x87Handler(regs*)+0xe99>	10001a5f: R_386_PC32	fpuGetReg(int)
10001a63:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
10001a69:	83 ec 0c             	sub    esp,0xc
10001a6c:	6a 00                	push   0x0
10001a6e:	50                   	push   eax
10001a6f:	e8 fc ff ff ff       	call   10001a70 <x87Handler(regs*)+0xeaa>	10001a70: R_386_PC32	fpuGetReg(int)
10001a74:	51                   	push   ecx
10001a75:	51                   	push   ecx
10001a76:	b9 03 00 00 00       	mov    ecx,0x3
10001a7b:	89 e7                	mov    edi,esp
10001a7d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a7f:	83 ec 0c             	sub    esp,0xc
10001a82:	b9 03 00 00 00       	mov    ecx,0x3
10001a87:	89 e7                	mov    edi,esp
10001a89:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
10001a8f:	e9 a6 00 00 00       	jmp    10001b3a <x87Handler(regs*)+0xf74>
10001a94:	8d 48 20             	lea    ecx,[eax+0x20]
10001a97:	80 f9 07             	cmp    cl,0x7
10001a9a:	77 52                	ja     10001aee <x87Handler(regs*)+0xf28>
10001a9c:	8d b5 f4 fc ff ff    	lea    esi,[ebp-0x30c]
10001aa2:	57                   	push   edi
10001aa3:	57                   	push   edi
10001aa4:	2d e0 00 00 00       	sub    eax,0xe0
10001aa9:	50                   	push   eax
10001aaa:	56                   	push   esi
10001aab:	e8 fc ff ff ff       	call   10001aac <x87Handler(regs*)+0xee6>	10001aac: R_386_PC32	fpuGetReg(int)
10001ab0:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
10001ab6:	83 ec 0c             	sub    esp,0xc
10001ab9:	6a 00                	push   0x0
10001abb:	50                   	push   eax
10001abc:	e8 fc ff ff ff       	call   10001abd <x87Handler(regs*)+0xef7>	10001abd: R_386_PC32	fpuGetReg(int)
10001ac1:	50                   	push   eax
10001ac2:	50                   	push   eax
10001ac3:	b9 03 00 00 00       	mov    ecx,0x3
10001ac8:	89 e7                	mov    edi,esp
10001aca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001acc:	83 ec 0c             	sub    esp,0xc
10001acf:	b9 03 00 00 00       	mov    ecx,0x3
10001ad4:	89 e7                	mov    edi,esp
10001ad6:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
10001adc:	89 c6                	mov    esi,eax
10001ade:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ae0:	e8 fc ff ff ff       	call   10001ae1 <x87Handler(regs*)+0xf1b>	10001ae1: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001ae5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001ae9:	e9 ab 01 00 00       	jmp    10001c99 <x87Handler(regs*)+0x10d3>
10001aee:	8d 48 18             	lea    ecx,[eax+0x18]
10001af1:	80 f9 07             	cmp    cl,0x7
10001af4:	0f 87 b4 02 00 00    	ja     10001dae <x87Handler(regs*)+0x11e8>
10001afa:	8d b5 0c fd ff ff    	lea    esi,[ebp-0x2f4]
10001b00:	52                   	push   edx
10001b01:	52                   	push   edx
10001b02:	2d e8 00 00 00       	sub    eax,0xe8
10001b07:	50                   	push   eax
10001b08:	56                   	push   esi
10001b09:	e8 fc ff ff ff       	call   10001b0a <x87Handler(regs*)+0xf44>	10001b0a: R_386_PC32	fpuGetReg(int)
10001b0e:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001b14:	83 ec 0c             	sub    esp,0xc
10001b17:	6a 00                	push   0x0
10001b19:	50                   	push   eax
10001b1a:	e8 fc ff ff ff       	call   10001b1b <x87Handler(regs*)+0xf55>	10001b1b: R_386_PC32	fpuGetReg(int)
10001b1f:	51                   	push   ecx
10001b20:	51                   	push   ecx
10001b21:	b9 03 00 00 00       	mov    ecx,0x3
10001b26:	89 e7                	mov    edi,esp
10001b28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b2a:	83 ec 0c             	sub    esp,0xc
10001b2d:	b9 03 00 00 00       	mov    ecx,0x3
10001b32:	89 e7                	mov    edi,esp
10001b34:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001b3a:	89 c6                	mov    esi,eax
10001b3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b3e:	e8 fc ff ff ff       	call   10001b3f <x87Handler(regs*)+0xf79>	10001b3f: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001b43:	8d 45 dc             	lea    eax,[ebp-0x24]
10001b46:	83 c4 24             	add    esp,0x24
10001b49:	50                   	push   eax
10001b4a:	e9 9b f9 ff ff       	jmp    100014ea <x87Handler(regs*)+0x924>
10001b4f:	80 f9 da             	cmp    cl,0xda
10001b52:	0f 85 b9 00 00 00    	jne    10001c11 <x87Handler(regs*)+0x104b>
10001b58:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001b5e:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001b62:	0f 85 0a 08 00 00    	jne    10002372 <x87Handler(regs*)+0x17ac>
10001b68:	8d b5 24 fd ff ff    	lea    esi,[ebp-0x2dc]
10001b6e:	50                   	push   eax
10001b6f:	50                   	push   eax
10001b70:	6a 01                	push   0x1
10001b72:	56                   	push   esi
10001b73:	e8 fc ff ff ff       	call   10001b74 <x87Handler(regs*)+0xfae>	10001b74: R_386_PC32	fpuGetReg(int)
10001b78:	8d 85 30 fd ff ff    	lea    eax,[ebp-0x2d0]
10001b7e:	83 ec 0c             	sub    esp,0xc
10001b81:	6a 00                	push   0x0
10001b83:	50                   	push   eax
10001b84:	e8 fc ff ff ff       	call   10001b85 <x87Handler(regs*)+0xfbf>	10001b85: R_386_PC32	fpuGetReg(int)
10001b89:	50                   	push   eax
10001b8a:	50                   	push   eax
10001b8b:	b9 03 00 00 00       	mov    ecx,0x3
10001b90:	89 e7                	mov    edi,esp
10001b92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b94:	83 ec 0c             	sub    esp,0xc
10001b97:	b9 03 00 00 00       	mov    ecx,0x3
10001b9c:	89 e7                	mov    edi,esp
10001b9e:	8d 85 30 fd ff ff    	lea    eax,[ebp-0x2d0]
10001ba4:	eb 47                	jmp    10001bed <x87Handler(regs*)+0x1027>
10001ba6:	31 c0                	xor    eax,eax
10001ba8:	80 fa d9             	cmp    dl,0xd9
10001bab:	0f 85 f8 08 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001bb1:	8d b5 3c fd ff ff    	lea    esi,[ebp-0x2c4]
10001bb7:	57                   	push   edi
10001bb8:	57                   	push   edi
10001bb9:	6a 01                	push   0x1
10001bbb:	56                   	push   esi
10001bbc:	e8 fc ff ff ff       	call   10001bbd <x87Handler(regs*)+0xff7>	10001bbd: R_386_PC32	fpuGetReg(int)
10001bc1:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001bc7:	83 ec 0c             	sub    esp,0xc
10001bca:	6a 00                	push   0x0
10001bcc:	50                   	push   eax
10001bcd:	e8 fc ff ff ff       	call   10001bce <x87Handler(regs*)+0x1008>	10001bce: R_386_PC32	fpuGetReg(int)
10001bd2:	50                   	push   eax
10001bd3:	50                   	push   eax
10001bd4:	b9 03 00 00 00       	mov    ecx,0x3
10001bd9:	89 e7                	mov    edi,esp
10001bdb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bdd:	83 ec 0c             	sub    esp,0xc
10001be0:	b9 03 00 00 00       	mov    ecx,0x3
10001be5:	89 e7                	mov    edi,esp
10001be7:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001bed:	89 c6                	mov    esi,eax
10001bef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bf1:	e8 fc ff ff ff       	call   10001bf2 <x87Handler(regs*)+0x102c>	10001bf2: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001bf6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001bfa:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001bfd:	83 c4 24             	add    esp,0x24
10001c00:	53                   	push   ebx
10001c01:	e8 fc ff ff ff       	call   10001c02 <x87Handler(regs*)+0x103c>	10001c02: R_386_PC32	fpuPop()
10001c06:	53                   	push   ebx
10001c07:	e8 fc ff ff ff       	call   10001c08 <x87Handler(regs*)+0x1042>	10001c08: R_386_PC32	fpuPop()
10001c0c:	e9 fb 00 00 00       	jmp    10001d0c <x87Handler(regs*)+0x1146>
10001c11:	80 f9 df             	cmp    cl,0xdf
10001c14:	0f 85 1f 01 00 00    	jne    10001d39 <x87Handler(regs*)+0x1173>
10001c1a:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001c20:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001c24:	0f 85 42 01 00 00    	jne    10001d6c <x87Handler(regs*)+0x11a6>
10001c2a:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001c2d: R_386_32	fpuState
10001c31:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001c35:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001c39:	e9 69 08 00 00       	jmp    100024a7 <x87Handler(regs*)+0x18e1>
10001c3e:	80 fa 02             	cmp    dl,0x2
10001c41:	75 5e                	jne    10001ca1 <x87Handler(regs*)+0x10db>
10001c43:	8d b5 54 fd ff ff    	lea    esi,[ebp-0x2ac]
10001c49:	52                   	push   edx
10001c4a:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001c50:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001c53:	ff 30                	push   DWORD PTR [eax]
10001c55:	56                   	push   esi
10001c56:	e8 fc ff ff ff       	call   10001c57 <x87Handler(regs*)+0x1091>	10001c57: R_386_PC32	fpu64ToInternal(unsigned long long)
10001c5b:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001c61:	83 ec 0c             	sub    esp,0xc
10001c64:	6a 00                	push   0x0
10001c66:	50                   	push   eax
10001c67:	e8 fc ff ff ff       	call   10001c68 <x87Handler(regs*)+0x10a2>	10001c68: R_386_PC32	fpuGetReg(int)
10001c6c:	51                   	push   ecx
10001c6d:	51                   	push   ecx
10001c6e:	b9 03 00 00 00       	mov    ecx,0x3
10001c73:	89 e7                	mov    edi,esp
10001c75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c77:	83 ec 0c             	sub    esp,0xc
10001c7a:	b9 03 00 00 00       	mov    ecx,0x3
10001c7f:	89 e7                	mov    edi,esp
10001c81:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001c87:	89 c6                	mov    esi,eax
10001c89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c8b:	e8 fc ff ff ff       	call   10001c8c <x87Handler(regs*)+0x10c6>	10001c8c: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001c90:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
10001c96:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001c99:	83 c4 30             	add    esp,0x30
10001c9c:	e9 06 08 00 00       	jmp    100024a7 <x87Handler(regs*)+0x18e1>
10001ca1:	80 fa 03             	cmp    dl,0x3
10001ca4:	0f 85 d6 02 00 00    	jne    10001f80 <x87Handler(regs*)+0x13ba>
10001caa:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001cb0:	50                   	push   eax
10001cb1:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001cb7:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001cba:	ff 30                	push   DWORD PTR [eax]
10001cbc:	56                   	push   esi
10001cbd:	e8 fc ff ff ff       	call   10001cbe <x87Handler(regs*)+0x10f8>	10001cbe: R_386_PC32	fpu64ToInternal(unsigned long long)
10001cc2:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001cc8:	83 ec 0c             	sub    esp,0xc
10001ccb:	6a 00                	push   0x0
10001ccd:	50                   	push   eax
10001cce:	e8 fc ff ff ff       	call   10001ccf <x87Handler(regs*)+0x1109>	10001ccf: R_386_PC32	fpuGetReg(int)
10001cd3:	50                   	push   eax
10001cd4:	50                   	push   eax
10001cd5:	b9 03 00 00 00       	mov    ecx,0x3
10001cda:	89 e7                	mov    edi,esp
10001cdc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cde:	83 ec 0c             	sub    esp,0xc
10001ce1:	b9 03 00 00 00       	mov    ecx,0x3
10001ce6:	89 e7                	mov    edi,esp
10001ce8:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001cee:	89 c6                	mov    esi,eax
10001cf0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cf2:	e8 fc ff ff ff       	call   10001cf3 <x87Handler(regs*)+0x112d>	10001cf3: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001cf7:	8d 45 dc             	lea    eax,[ebp-0x24]
10001cfa:	83 c4 24             	add    esp,0x24
10001cfd:	50                   	push   eax
10001cfe:	e8 fc ff ff ff       	call   10001cff <x87Handler(regs*)+0x1139>	10001cff: R_386_PC32	fpuPop()
10001d03:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
10001d09:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001d0c:	83 c4 0c             	add    esp,0xc
10001d0f:	e9 93 07 00 00       	jmp    100024a7 <x87Handler(regs*)+0x18e1>
10001d14:	66 a1 02 00 00 00    	mov    ax,ds:0x2	10001d16: R_386_32	fpuState
10001d1a:	80 fa 07             	cmp    dl,0x7
10001d1d:	74 79                	je     10001d98 <x87Handler(regs*)+0x11d2>
10001d1f:	80 fa 05             	cmp    dl,0x5
10001d22:	0f 85 a7 00 00 00    	jne    10001dcf <x87Handler(regs*)+0x1209>
10001d28:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001d2e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001d31:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10001d33: R_386_32	fpuState
10001d37:	eb 67                	jmp    10001da0 <x87Handler(regs*)+0x11da>
10001d39:	31 c0                	xor    eax,eax
10001d3b:	80 f9 db             	cmp    cl,0xdb
10001d3e:	0f 85 65 07 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001d44:	80 fa 02             	cmp    dl,0x2
10001d47:	75 12                	jne    10001d5b <x87Handler(regs*)+0x1195>
10001d49:	8d b5 84 fd ff ff    	lea    esi,[ebp-0x27c]
10001d4f:	50                   	push   eax
10001d50:	50                   	push   eax
10001d51:	6a 00                	push   0x0
10001d53:	56                   	push   esi
10001d54:	e8 fc ff ff ff       	call   10001d55 <x87Handler(regs*)+0x118f>	10001d55: R_386_PC32	fpuGetReg(int)
10001d59:	eb 29                	jmp    10001d84 <x87Handler(regs*)+0x11be>
10001d5b:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001d61:	80 fa 03             	cmp    dl,0x3
10001d64:	0f 85 f8 00 00 00    	jne    10001e62 <x87Handler(regs*)+0x129c>
10001d6a:	eb 0f                	jmp    10001d7b <x87Handler(regs*)+0x11b5>
10001d6c:	80 fa 07             	cmp    dl,0x7
10001d6f:	0f 85 ce 00 00 00    	jne    10001e43 <x87Handler(regs*)+0x127d>
10001d75:	8d b5 9c fd ff ff    	lea    esi,[ebp-0x264]
10001d7b:	83 ec 0c             	sub    esp,0xc
10001d7e:	56                   	push   esi
10001d7f:	e8 fc ff ff ff       	call   10001d80 <x87Handler(regs*)+0x11ba>	10001d80: R_386_PC32	fpuPop()
10001d84:	83 ec 14             	sub    esp,0x14
10001d87:	b9 03 00 00 00       	mov    ecx,0x3
10001d8c:	89 e7                	mov    edi,esp
10001d8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d90:	e8 fc ff ff ff       	call   10001d91 <x87Handler(regs*)+0x11cb>	10001d91: R_386_PC32	fpuFloatToLong(_Float80)
10001d95:	83 c4 20             	add    esp,0x20
10001d98:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10001d9e:	88 02                	mov    BYTE PTR [edx],al
10001da0:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
10001da6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001da9:	e9 f9 06 00 00       	jmp    100024a7 <x87Handler(regs*)+0x18e1>
10001dae:	84 d2                	test   dl,dl
10001db0:	75 42                	jne    10001df4 <x87Handler(regs*)+0x122e>
10001db2:	8d b5 a8 fd ff ff    	lea    esi,[ebp-0x258]
10001db8:	50                   	push   eax
10001db9:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001dbf:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001dc2:	ff 30                	push   DWORD PTR [eax]
10001dc4:	56                   	push   esi
10001dc5:	e8 fc ff ff ff       	call   10001dc6 <x87Handler(regs*)+0x1200>	10001dc6: R_386_PC32	fpu64ToInternal(unsigned long long)
10001dca:	e9 b6 00 00 00       	jmp    10001e85 <x87Handler(regs*)+0x12bf>
10001dcf:	31 c0                	xor    eax,eax
10001dd1:	84 d2                	test   dl,dl
10001dd3:	0f 85 d0 06 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001dd9:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001ddf:	50                   	push   eax
10001de0:	50                   	push   eax
10001de1:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001de7:	ff 30                	push   DWORD PTR [eax]
10001de9:	56                   	push   esi
10001dea:	e8 fc ff ff ff       	call   10001deb <x87Handler(regs*)+0x1225>	10001deb: R_386_PC32	fpu32ToInternal(unsigned int)
10001def:	e9 91 00 00 00       	jmp    10001e85 <x87Handler(regs*)+0x12bf>
10001df4:	80 fa 02             	cmp    dl,0x2
10001df7:	75 12                	jne    10001e0b <x87Handler(regs*)+0x1245>
10001df9:	8d b5 c0 fd ff ff    	lea    esi,[ebp-0x240]
10001dff:	50                   	push   eax
10001e00:	50                   	push   eax
10001e01:	6a 00                	push   0x0
10001e03:	56                   	push   esi
10001e04:	e8 fc ff ff ff       	call   10001e05 <x87Handler(regs*)+0x123f>	10001e05: R_386_PC32	fpuGetReg(int)
10001e09:	eb 1a                	jmp    10001e25 <x87Handler(regs*)+0x125f>
10001e0b:	31 c0                	xor    eax,eax
10001e0d:	80 fa 03             	cmp    dl,0x3
10001e10:	0f 85 93 06 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001e16:	8d b5 cc fd ff ff    	lea    esi,[ebp-0x234]
10001e1c:	83 ec 0c             	sub    esp,0xc
10001e1f:	56                   	push   esi
10001e20:	e8 fc ff ff ff       	call   10001e21 <x87Handler(regs*)+0x125b>	10001e21: R_386_PC32	fpuPop()
10001e25:	83 ec 14             	sub    esp,0x14
10001e28:	b9 03 00 00 00       	mov    ecx,0x3
10001e2d:	89 e7                	mov    edi,esp
10001e2f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e31:	e8 fc ff ff ff       	call   10001e32 <x87Handler(regs*)+0x126c>	10001e32: R_386_PC32	fpuInternalTo64(_Float80)
10001e36:	8b bd e4 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x61c]
10001e3c:	89 07                	mov    DWORD PTR [edi],eax
10001e3e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10001e41:	eb 53                	jmp    10001e96 <x87Handler(regs*)+0x12d0>
10001e43:	31 c0                	xor    eax,eax
10001e45:	80 fa 05             	cmp    dl,0x5
10001e48:	0f 85 5b 06 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001e4e:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10001e54:	57                   	push   edi
10001e55:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001e5b:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e5e:	ff 30                	push   DWORD PTR [eax]
10001e60:	eb 1d                	jmp    10001e7f <x87Handler(regs*)+0x12b9>
10001e62:	31 c0                	xor    eax,eax
10001e64:	84 d2                	test   dl,dl
10001e66:	0f 85 3d 06 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
10001e6c:	8d b5 e4 fd ff ff    	lea    esi,[ebp-0x21c]
10001e72:	51                   	push   ecx
10001e73:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001e79:	8b 00                	mov    eax,DWORD PTR [eax]
10001e7b:	31 d2                	xor    edx,edx
10001e7d:	52                   	push   edx
10001e7e:	50                   	push   eax
10001e7f:	56                   	push   esi
10001e80:	e8 fc ff ff ff       	call   10001e81 <x87Handler(regs*)+0x12bb>	10001e81: R_386_PC32	fpuULongToFloat(unsigned long long)
10001e85:	83 ec 14             	sub    esp,0x14
10001e88:	b9 03 00 00 00       	mov    ecx,0x3
10001e8d:	89 e7                	mov    edi,esp
10001e8f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e91:	e8 fc ff ff ff       	call   10001e92 <x87Handler(regs*)+0x12cc>	10001e92: R_386_PC32	fpuPush(_Float80)
10001e96:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
10001e9c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001e9f:	83 c4 20             	add    esp,0x20
10001ea2:	e9 00 06 00 00       	jmp    100024a7 <x87Handler(regs*)+0x18e1>
10001ea7:	84 d2                	test   dl,dl
10001ea9:	75 66                	jne    10001f11 <x87Handler(regs*)+0x134b>
10001eab:	8d b5 f0 fd ff ff    	lea    esi,[ebp-0x210]
10001eb1:	50                   	push   eax
10001eb2:	50                   	push   eax
10001eb3:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001eb9:	ff 30                	push   DWORD PTR [eax]
10001ebb:	56                   	push   esi
10001ebc:	e8 fc ff ff ff       	call   10001ebd <x87Handler(regs*)+0x12f7>	10001ebd: R_386_PC32	fpu32ToInternal(unsigned int)
10001ec1:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001ec7:	83 ec 0c             	sub    esp,0xc
10001eca:	6a 00                	push   0x0
10001ecc:	52                   	push   edx
10001ecd:	e8 fc ff ff ff       	call   10001ece <x87Handler(regs*)+0x1308>	10001ece: R_386_PC32	fpuGetReg(int)
10001ed2:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001ed8:	52                   	push   edx
10001ed9:	b9 03 00 00 00       	mov    ecx,0x3
10001ede:	89 e7                	mov    edi,esp
10001ee0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ee2:	83 ec 0c             	sub    esp,0xc
10001ee5:	b9 03 00 00 00       	mov    ecx,0x3
10001eea:	89 e7                	mov    edi,esp
10001eec:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001ef2:	89 d6                	mov    esi,edx
10001ef4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ef6:	50                   	push   eax
10001ef7:	e8 fc ff ff ff       	call   10001ef8 <x87Handler(regs*)+0x1332>	10001ef8: R_386_PC32	fpuAdd(_Float80, _Float80)
10001efc:	83 c4 20             	add    esp,0x20
10001eff:	b9 03 00 00 00       	mov    ecx,0x3
10001f04:	89 e7                	mov    edi,esp
10001f06:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001f0c:	e9 7f 05 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
10001f11:	80 fa 01             	cmp    dl,0x1
10001f14:	0f 85 d7 00 00 00    	jne    10001ff1 <x87Handler(regs*)+0x142b>
10001f1a:	8d b5 14 fe ff ff    	lea    esi,[ebp-0x1ec]
10001f20:	51                   	push   ecx
10001f21:	51                   	push   ecx
10001f22:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001f28:	ff 30                	push   DWORD PTR [eax]
10001f2a:	56                   	push   esi
10001f2b:	e8 fc ff ff ff       	call   10001f2c <x87Handler(regs*)+0x1366>	10001f2c: R_386_PC32	fpu32ToInternal(unsigned int)
10001f30:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001f36:	83 ec 0c             	sub    esp,0xc
10001f39:	6a 00                	push   0x0
10001f3b:	52                   	push   edx
10001f3c:	e8 fc ff ff ff       	call   10001f3d <x87Handler(regs*)+0x1377>	10001f3d: R_386_PC32	fpuGetReg(int)
10001f41:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001f47:	57                   	push   edi
10001f48:	b9 03 00 00 00       	mov    ecx,0x3
10001f4d:	89 e7                	mov    edi,esp
10001f4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f51:	83 ec 0c             	sub    esp,0xc
10001f54:	b9 03 00 00 00       	mov    ecx,0x3
10001f59:	89 e7                	mov    edi,esp
10001f5b:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001f61:	89 d6                	mov    esi,edx
10001f63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f65:	50                   	push   eax
10001f66:	e8 fc ff ff ff       	call   10001f67 <x87Handler(regs*)+0x13a1>	10001f67: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f6b:	83 c4 20             	add    esp,0x20
10001f6e:	b9 03 00 00 00       	mov    ecx,0x3
10001f73:	89 e7                	mov    edi,esp
10001f75:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001f7b:	e9 10 05 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
10001f80:	80 fa 01             	cmp    dl,0x1
10001f83:	0f 85 d7 00 00 00    	jne    10002060 <x87Handler(regs*)+0x149a>
10001f89:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001f8f:	50                   	push   eax
10001f90:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001f96:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f99:	ff 30                	push   DWORD PTR [eax]
10001f9b:	56                   	push   esi
10001f9c:	e8 fc ff ff ff       	call   10001f9d <x87Handler(regs*)+0x13d7>	10001f9d: R_386_PC32	fpu64ToInternal(unsigned long long)
10001fa1:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001fa7:	83 ec 0c             	sub    esp,0xc
10001faa:	6a 00                	push   0x0
10001fac:	52                   	push   edx
10001fad:	e8 fc ff ff ff       	call   10001fae <x87Handler(regs*)+0x13e8>	10001fae: R_386_PC32	fpuGetReg(int)
10001fb2:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001fb8:	52                   	push   edx
10001fb9:	b9 03 00 00 00       	mov    ecx,0x3
10001fbe:	89 e7                	mov    edi,esp
10001fc0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fc2:	83 ec 0c             	sub    esp,0xc
10001fc5:	b9 03 00 00 00       	mov    ecx,0x3
10001fca:	89 e7                	mov    edi,esp
10001fcc:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001fd2:	89 d6                	mov    esi,edx
10001fd4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fd6:	50                   	push   eax
10001fd7:	e8 fc ff ff ff       	call   10001fd8 <x87Handler(regs*)+0x1412>	10001fd8: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001fdc:	83 c4 20             	add    esp,0x20
10001fdf:	b9 03 00 00 00       	mov    ecx,0x3
10001fe4:	89 e7                	mov    edi,esp
10001fe6:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001fec:	e9 9f 04 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
10001ff1:	80 fa 06             	cmp    dl,0x6
10001ff4:	0f 85 d7 00 00 00    	jne    100020d1 <x87Handler(regs*)+0x150b>
10001ffa:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10002000:	51                   	push   ecx
10002001:	51                   	push   ecx
10002002:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002008:	ff 30                	push   DWORD PTR [eax]
1000200a:	56                   	push   esi
1000200b:	e8 fc ff ff ff       	call   1000200c <x87Handler(regs*)+0x1446>	1000200c: R_386_PC32	fpu32ToInternal(unsigned int)
10002010:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10002016:	83 ec 0c             	sub    esp,0xc
10002019:	6a 00                	push   0x0
1000201b:	52                   	push   edx
1000201c:	e8 fc ff ff ff       	call   1000201d <x87Handler(regs*)+0x1457>	1000201d: R_386_PC32	fpuGetReg(int)
10002021:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10002027:	57                   	push   edi
10002028:	b9 03 00 00 00       	mov    ecx,0x3
1000202d:	89 e7                	mov    edi,esp
1000202f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002031:	83 ec 0c             	sub    esp,0xc
10002034:	b9 03 00 00 00       	mov    ecx,0x3
10002039:	89 e7                	mov    edi,esp
1000203b:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10002041:	89 d6                	mov    esi,edx
10002043:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002045:	50                   	push   eax
10002046:	e8 fc ff ff ff       	call   10002047 <x87Handler(regs*)+0x1481>	10002047: R_386_PC32	fpuDivide(_Float80, _Float80)
1000204b:	83 c4 20             	add    esp,0x20
1000204e:	b9 03 00 00 00       	mov    ecx,0x3
10002053:	89 e7                	mov    edi,esp
10002055:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
1000205b:	e9 30 04 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
10002060:	80 fa 06             	cmp    dl,0x6
10002063:	0f 85 d7 00 00 00    	jne    10002140 <x87Handler(regs*)+0x157a>
10002069:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
1000206f:	50                   	push   eax
10002070:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002076:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002079:	ff 30                	push   DWORD PTR [eax]
1000207b:	56                   	push   esi
1000207c:	e8 fc ff ff ff       	call   1000207d <x87Handler(regs*)+0x14b7>	1000207d: R_386_PC32	fpu64ToInternal(unsigned long long)
10002081:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10002087:	83 ec 0c             	sub    esp,0xc
1000208a:	6a 00                	push   0x0
1000208c:	52                   	push   edx
1000208d:	e8 fc ff ff ff       	call   1000208e <x87Handler(regs*)+0x14c8>	1000208e: R_386_PC32	fpuGetReg(int)
10002092:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10002098:	52                   	push   edx
10002099:	b9 03 00 00 00       	mov    ecx,0x3
1000209e:	89 e7                	mov    edi,esp
100020a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020a2:	83 ec 0c             	sub    esp,0xc
100020a5:	b9 03 00 00 00       	mov    ecx,0x3
100020aa:	89 e7                	mov    edi,esp
100020ac:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
100020b2:	89 d6                	mov    esi,edx
100020b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020b6:	50                   	push   eax
100020b7:	e8 fc ff ff ff       	call   100020b8 <x87Handler(regs*)+0x14f2>	100020b8: R_386_PC32	fpuDivide(_Float80, _Float80)
100020bc:	83 c4 20             	add    esp,0x20
100020bf:	b9 03 00 00 00       	mov    ecx,0x3
100020c4:	89 e7                	mov    edi,esp
100020c6:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
100020cc:	e9 bf 03 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
100020d1:	80 fa 04             	cmp    dl,0x4
100020d4:	0f 85 d7 00 00 00    	jne    100021b1 <x87Handler(regs*)+0x15eb>
100020da:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
100020e0:	51                   	push   ecx
100020e1:	51                   	push   ecx
100020e2:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100020e8:	ff 30                	push   DWORD PTR [eax]
100020ea:	56                   	push   esi
100020eb:	e8 fc ff ff ff       	call   100020ec <x87Handler(regs*)+0x1526>	100020ec: R_386_PC32	fpu32ToInternal(unsigned int)
100020f0:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
100020f6:	83 ec 0c             	sub    esp,0xc
100020f9:	6a 00                	push   0x0
100020fb:	52                   	push   edx
100020fc:	e8 fc ff ff ff       	call   100020fd <x87Handler(regs*)+0x1537>	100020fd: R_386_PC32	fpuGetReg(int)
10002101:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10002107:	57                   	push   edi
10002108:	b9 03 00 00 00       	mov    ecx,0x3
1000210d:	89 e7                	mov    edi,esp
1000210f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002111:	83 ec 0c             	sub    esp,0xc
10002114:	b9 03 00 00 00       	mov    ecx,0x3
10002119:	89 e7                	mov    edi,esp
1000211b:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10002121:	89 d6                	mov    esi,edx
10002123:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002125:	50                   	push   eax
10002126:	e8 fc ff ff ff       	call   10002127 <x87Handler(regs*)+0x1561>	10002127: R_386_PC32	fpuSub(_Float80, _Float80)
1000212b:	83 c4 20             	add    esp,0x20
1000212e:	b9 03 00 00 00       	mov    ecx,0x3
10002133:	89 e7                	mov    edi,esp
10002135:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000213b:	e9 50 03 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
10002140:	80 fa 04             	cmp    dl,0x4
10002143:	0f 85 d7 00 00 00    	jne    10002220 <x87Handler(regs*)+0x165a>
10002149:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
1000214f:	50                   	push   eax
10002150:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002156:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002159:	ff 30                	push   DWORD PTR [eax]
1000215b:	56                   	push   esi
1000215c:	e8 fc ff ff ff       	call   1000215d <x87Handler(regs*)+0x1597>	1000215d: R_386_PC32	fpu64ToInternal(unsigned long long)
10002161:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002167:	83 ec 0c             	sub    esp,0xc
1000216a:	6a 00                	push   0x0
1000216c:	52                   	push   edx
1000216d:	e8 fc ff ff ff       	call   1000216e <x87Handler(regs*)+0x15a8>	1000216e: R_386_PC32	fpuGetReg(int)
10002172:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10002178:	52                   	push   edx
10002179:	b9 03 00 00 00       	mov    ecx,0x3
1000217e:	89 e7                	mov    edi,esp
10002180:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002182:	83 ec 0c             	sub    esp,0xc
10002185:	b9 03 00 00 00       	mov    ecx,0x3
1000218a:	89 e7                	mov    edi,esp
1000218c:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002192:	89 d6                	mov    esi,edx
10002194:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002196:	50                   	push   eax
10002197:	e8 fc ff ff ff       	call   10002198 <x87Handler(regs*)+0x15d2>	10002198: R_386_PC32	fpuSub(_Float80, _Float80)
1000219c:	83 c4 20             	add    esp,0x20
1000219f:	b9 03 00 00 00       	mov    ecx,0x3
100021a4:	89 e7                	mov    edi,esp
100021a6:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
100021ac:	e9 df 02 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
100021b1:	80 fa 05             	cmp    dl,0x5
100021b4:	0f 85 d7 00 00 00    	jne    10002291 <x87Handler(regs*)+0x16cb>
100021ba:	8d b5 ec fe ff ff    	lea    esi,[ebp-0x114]
100021c0:	57                   	push   edi
100021c1:	57                   	push   edi
100021c2:	6a 00                	push   0x0
100021c4:	56                   	push   esi
100021c5:	e8 fc ff ff ff       	call   100021c6 <x87Handler(regs*)+0x1600>	100021c6: R_386_PC32	fpuGetReg(int)
100021ca:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100021d0:	83 ec 0c             	sub    esp,0xc
100021d3:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
100021d9:	ff 32                	push   DWORD PTR [edx]
100021db:	50                   	push   eax
100021dc:	e8 fc ff ff ff       	call   100021dd <x87Handler(regs*)+0x1617>	100021dd: R_386_PC32	fpu32ToInternal(unsigned int)
100021e1:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
100021e7:	50                   	push   eax
100021e8:	b9 03 00 00 00       	mov    ecx,0x3
100021ed:	89 e7                	mov    edi,esp
100021ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021f1:	83 ec 0c             	sub    esp,0xc
100021f4:	b9 03 00 00 00       	mov    ecx,0x3
100021f9:	89 e7                	mov    edi,esp
100021fb:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10002201:	89 c6                	mov    esi,eax
10002203:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002205:	52                   	push   edx
10002206:	e8 fc ff ff ff       	call   10002207 <x87Handler(regs*)+0x1641>	10002207: R_386_PC32	fpuSub(_Float80, _Float80)
1000220b:	83 c4 20             	add    esp,0x20
1000220e:	b9 03 00 00 00       	mov    ecx,0x3
10002213:	89 e7                	mov    edi,esp
10002215:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
1000221b:	e9 4b 01 00 00       	jmp    1000236b <x87Handler(regs*)+0x17a5>
10002220:	80 fa 05             	cmp    dl,0x5
10002223:	0f 85 d6 00 00 00    	jne    100022ff <x87Handler(regs*)+0x1739>
10002229:	8d b5 10 ff ff ff    	lea    esi,[ebp-0xf0]
1000222f:	50                   	push   eax
10002230:	50                   	push   eax
10002231:	6a 00                	push   0x0
10002233:	56                   	push   esi
10002234:	e8 fc ff ff ff       	call   10002235 <x87Handler(regs*)+0x166f>	10002235: R_386_PC32	fpuGetReg(int)
10002239:	8d 85 1c ff ff ff    	lea    eax,[ebp-0xe4]
1000223f:	52                   	push   edx
10002240:	52                   	push   edx
10002241:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10002247:	ff 72 04             	push   DWORD PTR [edx+0x4]
1000224a:	ff 32                	push   DWORD PTR [edx]
1000224c:	50                   	push   eax
1000224d:	e8 fc ff ff ff       	call   1000224e <x87Handler(regs*)+0x1688>	1000224e: R_386_PC32	fpu64ToInternal(unsigned long long)
10002252:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002258:	51                   	push   ecx
10002259:	b9 03 00 00 00       	mov    ecx,0x3
1000225e:	89 e7                	mov    edi,esp
10002260:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002262:	83 ec 0c             	sub    esp,0xc
10002265:	b9 03 00 00 00       	mov    ecx,0x3
1000226a:	89 e7                	mov    edi,esp
1000226c:	8d 85 1c ff ff ff    	lea    eax,[ebp-0xe4]
10002272:	89 c6                	mov    esi,eax
10002274:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002276:	52                   	push   edx
10002277:	e8 fc ff ff ff       	call   10002278 <x87Handler(regs*)+0x16b2>	10002278: R_386_PC32	fpuSub(_Float80, _Float80)
1000227c:	83 c4 20             	add    esp,0x20
1000227f:	b9 03 00 00 00       	mov    ecx,0x3
10002284:	89 e7                	mov    edi,esp
10002286:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
1000228c:	e9 da 00 00 00       	jmp    1000236b <x87Handler(regs*)+0x17a5>
10002291:	31 c0                	xor    eax,eax
10002293:	80 fa 07             	cmp    dl,0x7
10002296:	0f 85 0d 02 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
1000229c:	8d b5 34 ff ff ff    	lea    esi,[ebp-0xcc]
100022a2:	50                   	push   eax
100022a3:	50                   	push   eax
100022a4:	6a 00                	push   0x0
100022a6:	56                   	push   esi
100022a7:	e8 fc ff ff ff       	call   100022a8 <x87Handler(regs*)+0x16e2>	100022a8: R_386_PC32	fpuGetReg(int)
100022ac:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100022b2:	83 ec 0c             	sub    esp,0xc
100022b5:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
100022bb:	ff 32                	push   DWORD PTR [edx]
100022bd:	50                   	push   eax
100022be:	e8 fc ff ff ff       	call   100022bf <x87Handler(regs*)+0x16f9>	100022bf: R_386_PC32	fpu32ToInternal(unsigned int)
100022c3:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
100022c9:	50                   	push   eax
100022ca:	b9 03 00 00 00       	mov    ecx,0x3
100022cf:	89 e7                	mov    edi,esp
100022d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022d3:	83 ec 0c             	sub    esp,0xc
100022d6:	b9 03 00 00 00       	mov    ecx,0x3
100022db:	89 e7                	mov    edi,esp
100022dd:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100022e3:	89 c6                	mov    esi,eax
100022e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022e7:	52                   	push   edx
100022e8:	e8 fc ff ff ff       	call   100022e9 <x87Handler(regs*)+0x1723>	100022e9: R_386_PC32	fpuDivide(_Float80, _Float80)
100022ed:	83 c4 20             	add    esp,0x20
100022f0:	b9 03 00 00 00       	mov    ecx,0x3
100022f5:	89 e7                	mov    edi,esp
100022f7:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
100022fd:	eb 6c                	jmp    1000236b <x87Handler(regs*)+0x17a5>
100022ff:	80 fa 07             	cmp    dl,0x7
10002302:	0f 85 2e 01 00 00    	jne    10002436 <x87Handler(regs*)+0x1870>
10002308:	8d b5 58 ff ff ff    	lea    esi,[ebp-0xa8]
1000230e:	51                   	push   ecx
1000230f:	51                   	push   ecx
10002310:	6a 00                	push   0x0
10002312:	56                   	push   esi
10002313:	e8 fc ff ff ff       	call   10002314 <x87Handler(regs*)+0x174e>	10002314: R_386_PC32	fpuGetReg(int)
10002318:	8d 85 64 ff ff ff    	lea    eax,[ebp-0x9c]
1000231e:	57                   	push   edi
1000231f:	57                   	push   edi
10002320:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10002326:	ff 72 04             	push   DWORD PTR [edx+0x4]
10002329:	ff 32                	push   DWORD PTR [edx]
1000232b:	50                   	push   eax
1000232c:	e8 fc ff ff ff       	call   1000232d <x87Handler(regs*)+0x1767>	1000232d: R_386_PC32	fpu64ToInternal(unsigned long long)
10002331:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002337:	50                   	push   eax
10002338:	b9 03 00 00 00       	mov    ecx,0x3
1000233d:	89 e7                	mov    edi,esp
1000233f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002341:	83 ec 0c             	sub    esp,0xc
10002344:	b9 03 00 00 00       	mov    ecx,0x3
10002349:	89 e7                	mov    edi,esp
1000234b:	8d 85 64 ff ff ff    	lea    eax,[ebp-0x9c]
10002351:	89 c6                	mov    esi,eax
10002353:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002355:	52                   	push   edx
10002356:	e8 fc ff ff ff       	call   10002357 <x87Handler(regs*)+0x1791>	10002357: R_386_PC32	fpuDivide(_Float80, _Float80)
1000235b:	83 c4 20             	add    esp,0x20
1000235e:	b9 03 00 00 00       	mov    ecx,0x3
10002363:	89 e7                	mov    edi,esp
10002365:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
1000236b:	89 d6                	mov    esi,edx
1000236d:	e9 20 01 00 00       	jmp    10002492 <x87Handler(regs*)+0x18cc>
10002372:	80 fa 01             	cmp    dl,0x1
10002375:	75 5d                	jne    100023d4 <x87Handler(regs*)+0x180e>
10002377:	8d b5 7c ff ff ff    	lea    esi,[ebp-0x84]
1000237d:	50                   	push   eax
1000237e:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002384:	8b 00                	mov    eax,DWORD PTR [eax]
10002386:	31 d2                	xor    edx,edx
10002388:	52                   	push   edx
10002389:	50                   	push   eax
1000238a:	56                   	push   esi
1000238b:	e8 fc ff ff ff       	call   1000238c <x87Handler(regs*)+0x17c6>	1000238c: R_386_PC32	fpuLongToFloat(long long)
10002390:	8d 55 88             	lea    edx,[ebp-0x78]
10002393:	83 ec 0c             	sub    esp,0xc
10002396:	6a 00                	push   0x0
10002398:	52                   	push   edx
10002399:	e8 fc ff ff ff       	call   1000239a <x87Handler(regs*)+0x17d4>	1000239a: R_386_PC32	fpuGetReg(int)
1000239e:	8d 45 94             	lea    eax,[ebp-0x6c]
100023a1:	52                   	push   edx
100023a2:	b9 03 00 00 00       	mov    ecx,0x3
100023a7:	89 e7                	mov    edi,esp
100023a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023ab:	83 ec 0c             	sub    esp,0xc
100023ae:	b9 03 00 00 00       	mov    ecx,0x3
100023b3:	89 e7                	mov    edi,esp
100023b5:	8d 55 88             	lea    edx,[ebp-0x78]
100023b8:	89 d6                	mov    esi,edx
100023ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023bc:	50                   	push   eax
100023bd:	e8 fc ff ff ff       	call   100023be <x87Handler(regs*)+0x17f8>	100023be: R_386_PC32	fpuMultiply(_Float80, _Float80)
100023c2:	83 c4 20             	add    esp,0x20
100023c5:	b9 03 00 00 00       	mov    ecx,0x3
100023ca:	89 e7                	mov    edi,esp
100023cc:	8d 45 94             	lea    eax,[ebp-0x6c]
100023cf:	e9 bc 00 00 00       	jmp    10002490 <x87Handler(regs*)+0x18ca>
100023d4:	31 c0                	xor    eax,eax
100023d6:	80 fa 04             	cmp    dl,0x4
100023d9:	0f 85 ca 00 00 00    	jne    100024a9 <x87Handler(regs*)+0x18e3>
100023df:	8d 75 a0             	lea    esi,[ebp-0x60]
100023e2:	51                   	push   ecx
100023e3:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100023e9:	8b 00                	mov    eax,DWORD PTR [eax]
100023eb:	31 d2                	xor    edx,edx
100023ed:	52                   	push   edx
100023ee:	50                   	push   eax
100023ef:	56                   	push   esi
100023f0:	e8 fc ff ff ff       	call   100023f1 <x87Handler(regs*)+0x182b>	100023f1: R_386_PC32	fpuLongToFloat(long long)
100023f5:	8d 55 ac             	lea    edx,[ebp-0x54]
100023f8:	83 ec 0c             	sub    esp,0xc
100023fb:	6a 00                	push   0x0
100023fd:	52                   	push   edx
100023fe:	e8 fc ff ff ff       	call   100023ff <x87Handler(regs*)+0x1839>	100023ff: R_386_PC32	fpuGetReg(int)
10002403:	8d 45 b8             	lea    eax,[ebp-0x48]
10002406:	57                   	push   edi
10002407:	b9 03 00 00 00       	mov    ecx,0x3
1000240c:	89 e7                	mov    edi,esp
1000240e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002410:	83 ec 0c             	sub    esp,0xc
10002413:	b9 03 00 00 00       	mov    ecx,0x3
10002418:	89 e7                	mov    edi,esp
1000241a:	8d 55 ac             	lea    edx,[ebp-0x54]
1000241d:	89 d6                	mov    esi,edx
1000241f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002421:	50                   	push   eax
10002422:	e8 fc ff ff ff       	call   10002423 <x87Handler(regs*)+0x185d>	10002423: R_386_PC32	fpuSub(_Float80, _Float80)
10002427:	83 c4 20             	add    esp,0x20
1000242a:	b9 03 00 00 00       	mov    ecx,0x3
1000242f:	89 e7                	mov    edi,esp
10002431:	8d 45 b8             	lea    eax,[ebp-0x48]
10002434:	eb 5a                	jmp    10002490 <x87Handler(regs*)+0x18ca>
10002436:	31 c0                	xor    eax,eax
10002438:	84 d2                	test   dl,dl
1000243a:	75 6d                	jne    100024a9 <x87Handler(regs*)+0x18e3>
1000243c:	8d 75 c4             	lea    esi,[ebp-0x3c]
1000243f:	50                   	push   eax
10002440:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002446:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002449:	ff 30                	push   DWORD PTR [eax]
1000244b:	56                   	push   esi
1000244c:	e8 fc ff ff ff       	call   1000244d <x87Handler(regs*)+0x1887>	1000244d: R_386_PC32	fpu64ToInternal(unsigned long long)
10002451:	8d 55 d0             	lea    edx,[ebp-0x30]
10002454:	83 ec 0c             	sub    esp,0xc
10002457:	6a 00                	push   0x0
10002459:	52                   	push   edx
1000245a:	e8 fc ff ff ff       	call   1000245b <x87Handler(regs*)+0x1895>	1000245b: R_386_PC32	fpuGetReg(int)
1000245f:	8d 45 dc             	lea    eax,[ebp-0x24]
10002462:	52                   	push   edx
10002463:	b9 03 00 00 00       	mov    ecx,0x3
10002468:	89 e7                	mov    edi,esp
1000246a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000246c:	83 ec 0c             	sub    esp,0xc
1000246f:	b9 03 00 00 00       	mov    ecx,0x3
10002474:	89 e7                	mov    edi,esp
10002476:	8d 55 d0             	lea    edx,[ebp-0x30]
10002479:	89 d6                	mov    esi,edx
1000247b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000247d:	50                   	push   eax
1000247e:	e8 fc ff ff ff       	call   1000247f <x87Handler(regs*)+0x18b9>	1000247f: R_386_PC32	fpuAdd(_Float80, _Float80)
10002483:	83 c4 20             	add    esp,0x20
10002486:	b9 03 00 00 00       	mov    ecx,0x3
1000248b:	89 e7                	mov    edi,esp
1000248d:	8d 45 dc             	lea    eax,[ebp-0x24]
10002490:	89 c6                	mov    esi,eax
10002492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002494:	6a 00                	push   0x0
10002496:	e8 fc ff ff ff       	call   10002497 <x87Handler(regs*)+0x18d1>	10002497: R_386_PC32	fpuSetReg(int, _Float80)
1000249b:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
100024a1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100024a4:	83 c4 10             	add    esp,0x10
100024a7:	b0 01                	mov    al,0x1
100024a9:	8d 65 f4             	lea    esp,[ebp-0xc]
100024ac:	5b                   	pop    ebx
100024ad:	5e                   	pop    esi
100024ae:	5f                   	pop    edi
100024af:	5d                   	pop    ebp
100024b0:	c3                   	ret    

100024b1 <begin()>:
100024b1:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100024b3: R_386_32	x87FaultIntercept
	100024b7: R_386_32	x87Handler(regs*)
100024bb:	c3                   	ret    
100024bc:	65 6d                	gs ins DWORD PTR es:[edi],dx
100024be:	38 30                	cmp    BYTE PTR [eax],dh
100024c0:	38 37                	cmp    BYTE PTR [edi],dh
100024c2:	20 62 61             	and    BYTE PTR [edx+0x61],ah
100024c5:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100024c9:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
100024cd:	74 00                	je     100024cf <begin()+0x1e>
100024cf:	53                   	push   ebx
100024d0:	49                   	dec    ecx
100024d1:	42                   	inc    edx
100024d2:	2e 20 6d 6f          	and    BYTE PTR cs:[ebp+0x6f],ch
100024d6:	64 20 3d 20 25 64 2c 	and    BYTE PTR fs:0x2c642520,bh
100024dd:	20 72 6d             	and    BYTE PTR [edx+0x6d],dh
100024e0:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
100024e6:	20 73 63             	and    BYTE PTR [ebx+0x63],dh
100024e9:	61                   	popa   
100024ea:	6c                   	ins    BYTE PTR es:[edi],dx
100024eb:	65 20 3d 20 25 64 2c 	and    BYTE PTR gs:0x2c642520,bh
100024f2:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
100024f5:	64 65 78 20          	fs gs js 10002519 <begin()+0x68>
100024f9:	3d 20 25 64 2c       	cmp    eax,0x2c642520
100024fe:	20 62 61             	and    BYTE PTR [edx+0x61],ah
10002501:	73 65                	jae    10002568 <begin()+0xb7>
10002503:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002509:	00 78 38             	add    BYTE PTR [eax+0x38],bh
1000250c:	37                   	aaa    
1000250d:	20 68 61             	and    BYTE PTR [eax+0x61],ch
10002510:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002511:	64 6c                	fs ins BYTE PTR es:[edi],dx
10002513:	65 72 20             	gs jb  10002536 <begin()+0x85>
10002516:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002519:	6c                   	ins    BYTE PTR es:[edi],dx
1000251a:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
1000251f:	74 68                	je     10002589 <begin()+0xd8>
10002521:	20 66 61             	and    BYTE PTR [esi+0x61],ah
10002524:	75 6c                	jne    10002592 <begin()+0xe1>
10002526:	74 69                	je     10002591 <begin()+0xe0>
10002528:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002529:	67 20 45 49          	and    BYTE PTR [di+0x49],al
1000252d:	50                   	push   eax
1000252e:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
10002531:	20 30                	and    BYTE PTR [eax],dh
10002533:	78 25                	js     1000255a <begin()+0xa9>
10002535:	58                   	pop    eax
10002536:	0a 00                	or     al,BYTE PTR [eax]
10002538:	78 38                	js     10002572 <begin()+0xc1>
1000253a:	37                   	aaa    
1000253b:	3a 20                	cmp    ah,BYTE PTR [eax]
1000253d:	25 58 20 25 58       	and    eax,0x58252058
10002542:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
10002548:	0a 00                	or     al,BYTE PTR [eax]
1000254a:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
1000254f:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
10002554:	64 72 65             	fs jb  100025bc <_GLOBAL__sub_I__Z5startv+0x1c>
10002557:	73 73                	jae    100025cc <_GLOBAL__sub_I__Z5startv+0x2c>
10002559:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
1000255f:	58                   	pop    eax
10002560:	0a 00                	or     al,BYTE PTR [eax]
10002562:	66 90                	xchg   ax,ax
10002564:	1b 0f                	sbb    ecx,DWORD PTR [edi]	10002564: R_386_32	.text
10002566:	00 10                	add    BYTE PTR [eax],dl
10002568:	4b                   	dec    ebx	10002568: R_386_32	.text
10002569:	0f 00 10             	lldt   WORD PTR [eax]
1000256c:	0c 11                	or     al,0x11	1000256c: R_386_32	.text
1000256e:	00 10                	add    BYTE PTR [eax],dl
10002570:	0c 11                	or     al,0x11	10002570: R_386_32	.text
10002572:	00 10                	add    BYTE PTR [eax],dl
10002574:	0c 11                	or     al,0x11	10002574: R_386_32	.text
10002576:	00 10                	add    BYTE PTR [eax],dl
10002578:	0c 11                	or     al,0x11	10002578: R_386_32	.text
1000257a:	00 10                	add    BYTE PTR [eax],dl
1000257c:	0c 11                	or     al,0x11	1000257c: R_386_32	.text
1000257e:	00 10                	add    BYTE PTR [eax],dl
10002580:	0c 11                	or     al,0x11	10002580: R_386_32	.text
10002582:	00 10                	add    BYTE PTR [eax],dl
10002584:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]	10002584: R_386_32	.text
10002585:	0f 00 10             	lldt   WORD PTR [eax]
10002588:	d8 0f                	fmul   DWORD PTR [edi]	10002588: R_386_32	.text
1000258a:	00 10                	add    BYTE PTR [eax],dl
1000258c:	0a 10                	or     dl,BYTE PTR [eax]	1000258c: R_386_32	.text
1000258e:	00 10                	add    BYTE PTR [eax],dl
10002590:	3c 10                	cmp    al,0x10	10002590: R_386_32	.text
10002592:	00 10                	add    BYTE PTR [eax],dl
10002594:	6e                   	outs   dx,BYTE PTR ds:[esi]	10002594: R_386_32	.text
10002595:	10 00                	adc    BYTE PTR [eax],al
10002597:	10 9d 10 00 10 cc    	adc    BYTE PTR [ebp-0x33effff0],bl	10002598: R_386_32	.text
	1000259c: R_386_32	.text
1000259d:	10 00                	adc    BYTE PTR [eax],al
1000259f:	10                   	.byte 0x10

Disassembly of section .text.startup:

100025a0 <_GLOBAL__sub_I__Z5startv>:
100025a0:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	100025a2: R_386_32	fpuState
100025aa:	c3                   	ret    
