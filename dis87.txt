
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	56                   	push   esi
1000000c:	53                   	push   ebx
1000000d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000011:	8d 90 01 c0 ff ff    	lea    edx,[eax-0x3fff]
10000017:	66 83 fa 3e          	cmp    dx,0x3e
1000001b:	77 31                	ja     1000004e <fpuFloatToLong(_Float80)+0x43>
1000001d:	b9 3d 40 00 00       	mov    ecx,0x403d
10000022:	29 c1                	sub    ecx,eax
10000024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000028:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000002c:	0f ad d0             	shrd   eax,edx,cl
1000002f:	d3 ea                	shr    edx,cl
10000031:	f6 c1 20             	test   cl,0x20
10000034:	74 04                	je     1000003a <fpuFloatToLong(_Float80)+0x2f>
10000036:	89 d0                	mov    eax,edx
10000038:	31 d2                	xor    edx,edx
1000003a:	89 c3                	mov    ebx,eax
1000003c:	89 d6                	mov    esi,edx
1000003e:	80 7c 24 16 00       	cmp    BYTE PTR [esp+0x16],0x0
10000043:	74 13                	je     10000058 <fpuFloatToLong(_Float80)+0x4d>
10000045:	f7 db                	neg    ebx
10000047:	83 d6 00             	adc    esi,0x0
1000004a:	f7 de                	neg    esi
1000004c:	eb 0a                	jmp    10000058 <fpuFloatToLong(_Float80)+0x4d>
1000004e:	bb 00 00 00 00       	mov    ebx,0x0
10000053:	be 00 00 00 00       	mov    esi,0x0
10000058:	89 d8                	mov    eax,ebx
1000005a:	89 f2                	mov    edx,esi
1000005c:	5b                   	pop    ebx
1000005d:	5e                   	pop    esi
1000005e:	c3                   	ret    

1000005f <fpuLongToFloat(long long)>:
1000005f:	57                   	push   edi
10000060:	56                   	push   esi
10000061:	53                   	push   ebx
10000062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000066:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000006a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000006e:	89 f9                	mov    ecx,edi
10000070:	09 f1                	or     ecx,esi
10000072:	75 1d                	jne    10000091 <fpuLongToFloat(long long)+0x32>
10000074:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000078:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
1000007e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000084:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000008b:	5b                   	pop    ebx
1000008c:	5e                   	pop    esi
1000008d:	5f                   	pop    edi
1000008e:	c2 04 00             	ret    0x4
10000091:	85 ff                	test   edi,edi
10000093:	78 35                	js     100000ca <fpuLongToFloat(long long)+0x6b>
10000095:	b2 00                	mov    dl,0x0
10000097:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
1000009a:	89 f1                	mov    ecx,esi
1000009c:	89 fb                	mov    ebx,edi
1000009e:	f7 c7 00 00 00 20    	test   edi,0x20000000
100000a4:	75 2f                	jne    100000d5 <fpuLongToFloat(long long)+0x76>
100000a6:	ba 00 00 00 00       	mov    edx,0x0
100000ab:	01 c9                	add    ecx,ecx
100000ad:	11 db                	adc    ebx,ebx
100000af:	42                   	inc    edx
100000b0:	f7 c3 00 00 00 20    	test   ebx,0x20000000
100000b6:	74 f3                	je     100000ab <fpuLongToFloat(long long)+0x4c>
100000b8:	89 08                	mov    DWORD PTR [eax],ecx
100000ba:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000bd:	b9 3d 40 00 00       	mov    ecx,0x403d
100000c2:	29 d1                	sub    ecx,edx
100000c4:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
100000c8:	eb c1                	jmp    1000008b <fpuLongToFloat(long long)+0x2c>
100000ca:	f7 de                	neg    esi
100000cc:	83 d7 00             	adc    edi,0x0
100000cf:	f7 df                	neg    edi
100000d1:	b2 01                	mov    dl,0x1
100000d3:	eb c2                	jmp    10000097 <fpuLongToFloat(long long)+0x38>
100000d5:	ba 00 00 00 00       	mov    edx,0x0
100000da:	eb dc                	jmp    100000b8 <fpuLongToFloat(long long)+0x59>

100000dc <fpuGet0()>:
100000dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100000e0:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000f1:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100000f7:	c2 04 00             	ret    0x4

100000fa <fpuGet1()>:
100000fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100000fe:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000102:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000108:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000010f:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000115:	c2 04 00             	ret    0x4

10000118 <fpuGetPi()>:
10000118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000011c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000120:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000126:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000012d:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000133:	c2 04 00             	ret    0x4

10000136 <fpuGetLog2E()>:
10000136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000013a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013e:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
10000144:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
1000014b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGetLogE2()>:
10000154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000158:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015c:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
10000162:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
10000169:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
1000016f:	c2 04 00             	ret    0x4

10000172 <fpuGetLog210()>:
10000172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000176:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017a:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
10000180:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
10000187:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000018d:	c2 04 00             	ret    0x4

10000190 <fpuGetLog102()>:
10000190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000194:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000198:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
1000019e:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
100001a5:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
100001ab:	c2 04 00             	ret    0x4

100001ae <fpuIsSecondLarger(_Float80, _Float80)>:
100001ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100001b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100001b6:	66 39 c2             	cmp    dx,ax
100001b9:	77 16                	ja     100001d1 <fpuIsSecondLarger(_Float80, _Float80)+0x23>
100001bb:	72 17                	jb     100001d4 <fpuIsSecondLarger(_Float80, _Float80)+0x26>
100001bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100001c1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
100001c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100001c9:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
100001cd:	0f 92 c0             	setb   al
100001d0:	c3                   	ret    
100001d1:	b0 01                	mov    al,0x1
100001d3:	c3                   	ret    
100001d4:	b0 00                	mov    al,0x0
100001d6:	c3                   	ret    

100001d7 <fpuNormalise(_Float80)>:
100001d7:	57                   	push   edi
100001d8:	56                   	push   esi
100001d9:	53                   	push   ebx
100001da:	83 ec 08             	sub    esp,0x8
100001dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100001e1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
100001e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100001e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100001ed:	f7 c7 00 00 00 20    	test   edi,0x20000000
100001f3:	75 56                	jne    1000024b <fpuNormalise(_Float80)+0x74>
100001f5:	89 fb                	mov    ebx,edi
100001f7:	09 f3                	or     ebx,esi
100001f9:	74 2a                	je     10000225 <fpuNormalise(_Float80)+0x4e>
100001fb:	4a                   	dec    edx
100001fc:	89 f1                	mov    ecx,esi
100001fe:	89 fb                	mov    ebx,edi
10000200:	01 f1                	add    ecx,esi
10000202:	11 fb                	adc    ebx,edi
10000204:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000207:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
1000020b:	89 ce                	mov    esi,ecx
1000020d:	89 df                	mov    edi,ebx
1000020f:	f7 44 24 04 00 00 00 20 	test   DWORD PTR [esp+0x4],0x20000000
10000217:	75 32                	jne    1000024b <fpuNormalise(_Float80)+0x74>
10000219:	4a                   	dec    edx
1000021a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000021d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
10000221:	09 cb                	or     ebx,ecx
10000223:	75 d7                	jne    100001fc <fpuNormalise(_Float80)+0x25>
10000225:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
1000022d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10000235:	66 c7 44 24 24 00 00 	mov    WORD PTR [esp+0x24],0x0
1000023c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10000240:	b9 03 00 00 00       	mov    ecx,0x3
10000245:	89 c7                	mov    edi,eax
10000247:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000249:	eb 1a                	jmp    10000265 <fpuNormalise(_Float80)+0x8e>
1000024b:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
1000024f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10000253:	66 89 54 24 24       	mov    WORD PTR [esp+0x24],dx
10000258:	8d 74 24 1c          	lea    esi,[esp+0x1c]
1000025c:	b9 03 00 00 00       	mov    ecx,0x3
10000261:	89 c7                	mov    edi,eax
10000263:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000265:	83 c4 08             	add    esp,0x8
10000268:	5b                   	pop    ebx
10000269:	5e                   	pop    esi
1000026a:	5f                   	pop    edi
1000026b:	c2 04 00             	ret    0x4

1000026e <fpuAdd(_Float80, _Float80)>:
1000026e:	55                   	push   ebp
1000026f:	57                   	push   edi
10000270:	56                   	push   esi
10000271:	53                   	push   ebx
10000272:	83 ec 2c             	sub    esp,0x2c
10000275:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
10000279:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
1000027d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10000281:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
10000285:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000289:	8a 54 24 4e          	mov    dl,BYTE PTR [esp+0x4e]
1000028d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
10000291:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
10000295:	89 3c 24             	mov    DWORD PTR [esp],edi
10000298:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
1000029c:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100002a0:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
100002a5:	8a 4c 24 5a          	mov    cl,BYTE PTR [esp+0x5a]
100002a9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
100002ad:	66 3b 44 24 0c       	cmp    ax,WORD PTR [esp+0xc]
100002b2:	0f 82 dd 00 00 00    	jb     10000395 <fpuAdd(_Float80, _Float80)+0x127>
100002b8:	0f 87 0c 01 00 00    	ja     100003ca <fpuAdd(_Float80, _Float80)+0x15c>
100002be:	3b 1c 24             	cmp    ebx,DWORD PTR [esp]
100002c1:	89 f7                	mov    edi,esi
100002c3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
100002c7:	0f 83 fd 00 00 00    	jae    100003ca <fpuAdd(_Float80, _Float80)+0x15c>
100002cd:	89 d5                	mov    ebp,edx
100002cf:	88 ca                	mov    dl,cl
100002d1:	89 e9                	mov    ecx,ebp
100002d3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
100002d7:	89 c5                	mov    ebp,eax
100002d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100002dd:	66 89 6c 24 0c       	mov    WORD PTR [esp+0xc],bp
100002e2:	89 f7                	mov    edi,esi
100002e4:	89 de                	mov    esi,ebx
100002e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100002e9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
100002ed:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100002f1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
100002f5:	89 34 24             	mov    DWORD PTR [esp],esi
100002f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100002fc:	e9 c9 00 00 00       	jmp    100003ca <fpuAdd(_Float80, _Float80)+0x15c>
10000301:	88 54 24 26          	mov    BYTE PTR [esp+0x26],dl
10000305:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
10000309:	13 7c 24 14          	adc    edi,DWORD PTR [esp+0x14]
1000030d:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10000311:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10000315:	83 ec 0c             	sub    esp,0xc
10000318:	8d 74 24 28          	lea    esi,[esp+0x28]
1000031c:	b9 03 00 00 00       	mov    ecx,0x3
10000321:	89 e7                	mov    edi,esp
10000323:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000325:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000329:	e8 fc ff ff ff       	call   1000032a <fpuAdd(_Float80, _Float80)+0xbc>	1000032a: R_386_PC32	fpuNormalise(_Float80)
1000032e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10000332:	83 c4 38             	add    esp,0x38
10000335:	5b                   	pop    ebx
10000336:	5e                   	pop    esi
10000337:	5f                   	pop    edi
10000338:	5d                   	pop    ebp
10000339:	c2 04 00             	ret    0x4
1000033c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000340:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000344:	29 f0                	sub    eax,esi
10000346:	19 fa                	sbb    edx,edi
10000348:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000034c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10000350:	c6 44 24 26 00       	mov    BYTE PTR [esp+0x26],0x0
10000355:	eb be                	jmp    10000315 <fpuAdd(_Float80, _Float80)+0xa7>
10000357:	84 d2                	test   dl,dl
10000359:	74 ba                	je     10000315 <fpuAdd(_Float80, _Float80)+0xa7>
1000035b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000035f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000363:	39 c6                	cmp    esi,eax
10000365:	89 f9                	mov    ecx,edi
10000367:	19 d1                	sbb    ecx,edx
10000369:	73 13                	jae    1000037e <fpuAdd(_Float80, _Float80)+0x110>
1000036b:	29 f0                	sub    eax,esi
1000036d:	19 fa                	sbb    edx,edi
1000036f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10000377:	c6 44 24 26 01       	mov    BYTE PTR [esp+0x26],0x1
1000037c:	eb 97                	jmp    10000315 <fpuAdd(_Float80, _Float80)+0xa7>
1000037e:	2b 74 24 10          	sub    esi,DWORD PTR [esp+0x10]
10000382:	1b 7c 24 14          	sbb    edi,DWORD PTR [esp+0x14]
10000386:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
1000038a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
1000038e:	c6 44 24 26 00       	mov    BYTE PTR [esp+0x26],0x0
10000393:	eb 80                	jmp    10000315 <fpuAdd(_Float80, _Float80)+0xa7>
10000395:	89 d5                	mov    ebp,edx
10000397:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
1000039b:	89 e9                	mov    ecx,ebp
1000039d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
100003a1:	89 c5                	mov    ebp,eax
100003a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100003a7:	66 89 6c 24 0c       	mov    WORD PTR [esp+0xc],bp
100003ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100003b0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100003b4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100003b7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
100003bb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100003bf:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
100003c3:	89 34 24             	mov    DWORD PTR [esp],esi
100003c6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
100003ca:	88 c3                	mov    bl,al
100003cc:	2b 5c 24 0c          	sub    ebx,DWORD PTR [esp+0xc]
100003d0:	88 d9                	mov    cl,bl
100003d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
100003d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100003d9:	0f ad fe             	shrd   esi,edi,cl
100003dc:	d3 ef                	shr    edi,cl
100003de:	f6 c3 20             	test   bl,0x20
100003e1:	74 04                	je     100003e7 <fpuAdd(_Float80, _Float80)+0x179>
100003e3:	89 fe                	mov    esi,edi
100003e5:	31 ff                	xor    edi,edi
100003e7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
100003ec:	3a 54 24 0f          	cmp    dl,BYTE PTR [esp+0xf]
100003f0:	0f 84 0b ff ff ff    	je     10000301 <fpuAdd(_Float80, _Float80)+0x93>
100003f6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
100003fb:	0f 84 56 ff ff ff    	je     10000357 <fpuAdd(_Float80, _Float80)+0xe9>
10000401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000405:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10000409:	39 f0                	cmp    eax,esi
1000040b:	89 d1                	mov    ecx,edx
1000040d:	19 f9                	sbb    ecx,edi
1000040f:	0f 83 27 ff ff ff    	jae    1000033c <fpuAdd(_Float80, _Float80)+0xce>
10000415:	29 c6                	sub    esi,eax
10000417:	19 d7                	sbb    edi,edx
10000419:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
1000041d:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10000421:	c6 44 24 26 01       	mov    BYTE PTR [esp+0x26],0x1
10000426:	e9 ea fe ff ff       	jmp    10000315 <fpuAdd(_Float80, _Float80)+0xa7>

1000042b <fpuAbs(_Float80)>:
1000042b:	57                   	push   edi
1000042c:	56                   	push   esi
1000042d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000431:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
10000436:	8d 74 24 10          	lea    esi,[esp+0x10]
1000043a:	b9 03 00 00 00       	mov    ecx,0x3
1000043f:	89 c7                	mov    edi,eax
10000441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000443:	5e                   	pop    esi
10000444:	5f                   	pop    edi
10000445:	c2 04 00             	ret    0x4

10000448 <fpuSub(_Float80, _Float80)>:
10000448:	57                   	push   edi
10000449:	56                   	push   esi
1000044a:	53                   	push   ebx
1000044b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000044f:	80 74 24 2a 01       	xor    BYTE PTR [esp+0x2a],0x1
10000454:	83 ec 10             	sub    esp,0x10
10000457:	8d 74 24 30          	lea    esi,[esp+0x30]
1000045b:	b9 03 00 00 00       	mov    ecx,0x3
10000460:	89 e7                	mov    edi,esp
10000462:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000464:	83 ec 0c             	sub    esp,0xc
10000467:	8d 74 24 30          	lea    esi,[esp+0x30]
1000046b:	b9 03 00 00 00       	mov    ecx,0x3
10000470:	89 e7                	mov    edi,esp
10000472:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000474:	53                   	push   ebx
10000475:	e8 fc ff ff ff       	call   10000476 <fpuSub(_Float80, _Float80)+0x2e>	10000476: R_386_PC32	fpuAdd(_Float80, _Float80)
1000047a:	83 c4 1c             	add    esp,0x1c
1000047d:	89 d8                	mov    eax,ebx
1000047f:	5b                   	pop    ebx
10000480:	5e                   	pop    esi
10000481:	5f                   	pop    edi
10000482:	c2 04 00             	ret    0x4

10000485 <fpuReverseSub(_Float80, _Float80)>:
10000485:	57                   	push   edi
10000486:	56                   	push   esi
10000487:	53                   	push   ebx
10000488:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000048c:	80 74 24 1e 01       	xor    BYTE PTR [esp+0x1e],0x1
10000491:	83 ec 10             	sub    esp,0x10
10000494:	8d 74 24 24          	lea    esi,[esp+0x24]
10000498:	b9 03 00 00 00       	mov    ecx,0x3
1000049d:	89 e7                	mov    edi,esp
1000049f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004a1:	83 ec 0c             	sub    esp,0xc
100004a4:	8d 74 24 3c          	lea    esi,[esp+0x3c]
100004a8:	b9 03 00 00 00       	mov    ecx,0x3
100004ad:	89 e7                	mov    edi,esp
100004af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004b1:	53                   	push   ebx
100004b2:	e8 fc ff ff ff       	call   100004b3 <fpuReverseSub(_Float80, _Float80)+0x2e>	100004b3: R_386_PC32	fpuAdd(_Float80, _Float80)
100004b7:	83 c4 1c             	add    esp,0x1c
100004ba:	89 d8                	mov    eax,ebx
100004bc:	5b                   	pop    ebx
100004bd:	5e                   	pop    esi
100004be:	5f                   	pop    edi
100004bf:	c2 04 00             	ret    0x4

100004c2 <fpuMultiply(_Float80, _Float80)>:
100004c2:	57                   	push   edi
100004c3:	56                   	push   esi
100004c4:	53                   	push   ebx
100004c5:	83 ec 24             	sub    esp,0x24
100004c8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
100004cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100004d0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
100004d4:	0f ac d0 1f          	shrd   eax,edx,0x1f
100004d8:	c1 ea 1f             	shr    edx,0x1f
100004db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100004df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100004e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
100004e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
100004eb:	0f ac fe 1f          	shrd   esi,edi,0x1f
100004ef:	c1 ef 1f             	shr    edi,0x1f
100004f2:	8a 44 24 4e          	mov    al,BYTE PTR [esp+0x4e]
100004f6:	38 44 24 42          	cmp    BYTE PTR [esp+0x42],al
100004fa:	0f 95 44 24 22       	setne  BYTE PTR [esp+0x22]
100004ff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10000503:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
10000507:	81 e9 ff 3f 00 00    	sub    ecx,0x3fff
1000050d:	66 89 4c 24 20       	mov    WORD PTR [esp+0x20],cx
10000512:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10000516:	0f af ce             	imul   ecx,esi
10000519:	89 fa                	mov    edx,edi
1000051b:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
10000520:	01 d1                	add    ecx,edx
10000522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000526:	f7 e6                	mul    esi
10000528:	01 ca                	add    edx,ecx
1000052a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000052e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000532:	8d 74 24 18          	lea    esi,[esp+0x18]
10000536:	b9 03 00 00 00       	mov    ecx,0x3
1000053b:	89 e7                	mov    edi,esp
1000053d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000053f:	53                   	push   ebx
10000540:	e8 fc ff ff ff       	call   10000541 <fpuMultiply(_Float80, _Float80)+0x7f>	10000541: R_386_PC32	fpuNormalise(_Float80)
10000545:	89 d8                	mov    eax,ebx
10000547:	83 c4 24             	add    esp,0x24
1000054a:	5b                   	pop    ebx
1000054b:	5e                   	pop    esi
1000054c:	5f                   	pop    edi
1000054d:	c2 04 00             	ret    0x4

10000550 <fpuMantissaDivision(unsigned long long, unsigned long long)>:
10000550:	55                   	push   ebp
10000551:	57                   	push   edi
10000552:	56                   	push   esi
10000553:	53                   	push   ebx
10000554:	83 ec 24             	sub    esp,0x24
10000557:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000055b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
1000055f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000563:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10000567:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
1000056b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
1000056f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000573:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10000577:	bd 3d 00 00 00       	mov    ebp,0x3d
1000057c:	bb ff ff ff ff       	mov    ebx,0xffffffff
10000581:	be 00 00 00 00       	mov    esi,0x0
10000586:	bf 00 00 00 00       	mov    edi,0x0
1000058b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10000593:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000059b:	eb 4c                	jmp    100005e9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x99>
1000059d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100005a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100005a5:	89 e9                	mov    ecx,ebp
100005a7:	0f ad fe             	shrd   esi,edi,cl
100005aa:	d3 ef                	shr    edi,cl
100005ac:	f6 c1 20             	test   cl,0x20
100005af:	74 02                	je     100005b3 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x63>
100005b1:	89 fe                	mov    esi,edi
100005b3:	89 f1                	mov    ecx,esi
100005b5:	83 e1 01             	and    ecx,0x1
100005b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100005bc:	0b 0c 24             	or     ecx,DWORD PTR [esp]
100005bf:	89 ce                	mov    esi,ecx
100005c1:	89 d7                	mov    edi,edx
100005c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100005c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100005cb:	39 c1                	cmp    ecx,eax
100005cd:	89 f9                	mov    ecx,edi
100005cf:	19 d1                	sbb    ecx,edx
100005d1:	72 15                	jb     100005e8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x98>
100005d3:	2b 74 24 08          	sub    esi,DWORD PTR [esp+0x8]
100005d7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
100005db:	81 4c 24 10 00 00 00 20 	or     DWORD PTR [esp+0x10],0x20000000
100005e3:	bb 3c 00 00 00       	mov    ebx,0x3c
100005e8:	4d                   	dec    ebp
100005e9:	89 f0                	mov    eax,esi
100005eb:	89 fa                	mov    edx,edi
100005ed:	01 f0                	add    eax,esi
100005ef:	11 fa                	adc    edx,edi
100005f1:	89 c6                	mov    esi,eax
100005f3:	89 d7                	mov    edi,edx
100005f5:	89 04 24             	mov    DWORD PTR [esp],eax
100005f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
100005fc:	83 fb ff             	cmp    ebx,0xffffffff
100005ff:	74 9c                	je     1000059d <fpuMantissaDivision(unsigned long long, unsigned long long)+0x4d>
10000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000605:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000609:	39 04 24             	cmp    DWORD PTR [esp],eax
1000060c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000610:	19 d1                	sbb    ecx,edx
10000612:	72 2e                	jb     10000642 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xf2>
10000614:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000617:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000061b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
1000061f:	1b 54 24 0c          	sbb    edx,DWORD PTR [esp+0xc]
10000623:	89 c6                	mov    esi,eax
10000625:	89 d7                	mov    edi,edx
10000627:	88 d9                	mov    cl,bl
10000629:	31 c0                	xor    eax,eax
1000062b:	31 d2                	xor    edx,edx
1000062d:	f6 c3 20             	test   bl,0x20
10000630:	0f 94 c0             	sete   al
10000633:	0f 95 c2             	setne  dl
10000636:	d3 e0                	shl    eax,cl
10000638:	d3 e2                	shl    edx,cl
1000063a:	09 44 24 14          	or     DWORD PTR [esp+0x14],eax
1000063e:	09 54 24 10          	or     DWORD PTR [esp+0x10],edx
10000642:	85 db                	test   ebx,ebx
10000644:	78 a2                	js     100005e8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x98>
10000646:	4b                   	dec    ebx
10000647:	75 9f                	jne    100005e8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x98>
10000649:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000064d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000651:	83 c4 24             	add    esp,0x24
10000654:	5b                   	pop    ebx
10000655:	5e                   	pop    esi
10000656:	5f                   	pop    edi
10000657:	5d                   	pop    ebp
10000658:	c3                   	ret    

10000659 <fpuDivide(_Float80, _Float80)>:
10000659:	55                   	push   ebp
1000065a:	57                   	push   edi
1000065b:	56                   	push   esi
1000065c:	53                   	push   ebx
1000065d:	83 ec 1c             	sub    esp,0x1c
10000660:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000664:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10000668:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
1000066c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10000670:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
10000674:	89 d1                	mov    ecx,edx
10000676:	89 c2                	mov    edx,eax
10000678:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
1000067c:	8a 44 24 4a          	mov    al,BYTE PTR [esp+0x4a]
10000680:	38 44 24 3e          	cmp    BYTE PTR [esp+0x3e],al
10000684:	0f 95 44 24 16       	setne  BYTE PTR [esp+0x16]
10000689:	89 14 24             	mov    DWORD PTR [esp],edx
1000068c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10000690:	51                   	push   ecx
10000691:	52                   	push   edx
10000692:	57                   	push   edi
10000693:	56                   	push   esi
10000694:	e8 fc ff ff ff       	call   10000695 <fpuDivide(_Float80, _Float80)+0x3c>	10000695: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
10000699:	83 c4 10             	add    esp,0x10
1000069c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100006a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
100006a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
100006a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100006ab:	39 c6                	cmp    esi,eax
100006ad:	19 d7                	sbb    edi,edx
100006af:	73 34                	jae    100006e5 <fpuDivide(_Float80, _Float80)+0x8c>
100006b1:	81 c3 00 40 00 00    	add    ebx,0x4000
100006b7:	29 eb                	sub    ebx,ebp
100006b9:	66 89 5c 24 14       	mov    WORD PTR [esp+0x14],bx
100006be:	83 ec 0c             	sub    esp,0xc
100006c1:	8d 74 24 18          	lea    esi,[esp+0x18]
100006c5:	b9 03 00 00 00       	mov    ecx,0x3
100006ca:	89 e7                	mov    edi,esp
100006cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006d2:	e8 fc ff ff ff       	call   100006d3 <fpuDivide(_Float80, _Float80)+0x7a>	100006d3: R_386_PC32	fpuNormalise(_Float80)
100006d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006db:	83 c4 28             	add    esp,0x28
100006de:	5b                   	pop    ebx
100006df:	5e                   	pop    esi
100006e0:	5f                   	pop    edi
100006e1:	5d                   	pop    ebp
100006e2:	c2 04 00             	ret    0x4
100006e5:	81 c3 00 40 00 00    	add    ebx,0x4000
100006eb:	29 eb                	sub    ebx,ebp
100006ed:	eb ca                	jmp    100006b9 <fpuDivide(_Float80, _Float80)+0x60>

100006ef <fpuReciprocal(_Float80)>:
100006ef:	57                   	push   edi
100006f0:	56                   	push   esi
100006f1:	53                   	push   ebx
100006f2:	83 ec 20             	sub    esp,0x20
100006f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100006f9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
100006fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10000706:	c7 44 24 18 00 00 00 20 	mov    DWORD PTR [esp+0x18],0x20000000
1000070e:	66 c7 44 24 1c ff 3f 	mov    WORD PTR [esp+0x1c],0x3fff
10000715:	8d 74 24 34          	lea    esi,[esp+0x34]
10000719:	b9 03 00 00 00       	mov    ecx,0x3
1000071e:	89 e7                	mov    edi,esp
10000720:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000722:	83 ec 0c             	sub    esp,0xc
10000725:	8d 74 24 20          	lea    esi,[esp+0x20]
10000729:	b9 03 00 00 00       	mov    ecx,0x3
1000072e:	89 e7                	mov    edi,esp
10000730:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000732:	53                   	push   ebx
10000733:	e8 fc ff ff ff       	call   10000734 <fpuReciprocal(_Float80)+0x45>	10000734: R_386_PC32	fpuDivide(_Float80, _Float80)
10000738:	89 d8                	mov    eax,ebx
1000073a:	83 c4 2c             	add    esp,0x2c
1000073d:	5b                   	pop    ebx
1000073e:	5e                   	pop    esi
1000073f:	5f                   	pop    edi
10000740:	c2 04 00             	ret    0x4

10000743 <fpuSquare(_Float80)>:
10000743:	57                   	push   edi
10000744:	56                   	push   esi
10000745:	53                   	push   ebx
10000746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000074a:	83 ec 10             	sub    esp,0x10
1000074d:	8d 74 24 24          	lea    esi,[esp+0x24]
10000751:	b9 03 00 00 00       	mov    ecx,0x3
10000756:	89 e7                	mov    edi,esp
10000758:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000075a:	83 ec 0c             	sub    esp,0xc
1000075d:	8d 74 24 30          	lea    esi,[esp+0x30]
10000761:	b9 03 00 00 00       	mov    ecx,0x3
10000766:	89 e7                	mov    edi,esp
10000768:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076a:	53                   	push   ebx
1000076b:	e8 fc ff ff ff       	call   1000076c <fpuSquare(_Float80)+0x29>	1000076c: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000770:	83 c4 1c             	add    esp,0x1c
10000773:	89 d8                	mov    eax,ebx
10000775:	5b                   	pop    ebx
10000776:	5e                   	pop    esi
10000777:	5f                   	pop    edi
10000778:	c2 04 00             	ret    0x4

1000077b <fpuInverseSqrt(_Float80)>:
1000077b:	55                   	push   ebp
1000077c:	57                   	push   edi
1000077d:	56                   	push   esi
1000077e:	53                   	push   ebx
1000077f:	81 ec 30 01 00 00    	sub    esp,0x130
10000785:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
1000078c:	6a 00                	push   0x0
1000078e:	6a 03                	push   0x3
10000790:	8d 44 24 24          	lea    eax,[esp+0x24]
10000794:	50                   	push   eax
10000795:	e8 fc ff ff ff       	call   10000796 <fpuInverseSqrt(_Float80)+0x1b>	10000796: R_386_PC32	fpuLongToFloat(long long)
1000079a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000079e:	8d 68 ff             	lea    ebp,[eax-0x1]
100007a1:	8d b4 24 50 01 00 00 	lea    esi,[esp+0x150]
100007a8:	b9 03 00 00 00       	mov    ecx,0x3
100007ad:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	0f b7 c3             	movzx  eax,bx
100007b9:	2d ff 3f 00 00       	sub    eax,0x3fff
100007be:	d1 f8                	sar    eax,1
100007c0:	ba ff 3f 00 00       	mov    edx,0x3fff
100007c5:	29 c2                	sub    edx,eax
100007c7:	89 d0                	mov    eax,edx
100007c9:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
100007d0:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
100007d4:	b9 03 00 00 00       	mov    ecx,0x3
100007d9:	89 e7                	mov    edi,esp
100007db:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
100007e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007e4:	8d 44 24 30          	lea    eax,[esp+0x30]
100007e8:	50                   	push   eax
100007e9:	e8 fc ff ff ff       	call   100007ea <fpuInverseSqrt(_Float80)+0x6f>	100007ea: R_386_PC32	fpuSquare(_Float80)
100007ee:	4b                   	dec    ebx
100007ef:	66 89 9c 24 58 01 00 00 	mov    WORD PTR [esp+0x158],bx
100007f7:	8d 5c 24 3c          	lea    ebx,[esp+0x3c]
100007fb:	83 ec 0c             	sub    esp,0xc
100007fe:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000805:	b9 03 00 00 00       	mov    ecx,0x3
1000080a:	89 e7                	mov    edi,esp
1000080c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000080e:	83 ec 0c             	sub    esp,0xc
10000811:	b9 03 00 00 00       	mov    ecx,0x3
10000816:	89 e7                	mov    edi,esp
10000818:	8d 74 24 48          	lea    esi,[esp+0x48]
1000081c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000081e:	53                   	push   ebx
1000081f:	e8 fc ff ff ff       	call   10000820 <fpuInverseSqrt(_Float80)+0xa5>	10000820: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000824:	66 89 6c 24 44       	mov    WORD PTR [esp+0x44],bp
10000829:	8d 6c 24 60          	lea    ebp,[esp+0x60]
1000082d:	83 c4 14             	add    esp,0x14
10000830:	b9 03 00 00 00       	mov    ecx,0x3
10000835:	89 e7                	mov    edi,esp
10000837:	89 de                	mov    esi,ebx
10000839:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000083b:	83 ec 0c             	sub    esp,0xc
1000083e:	b9 03 00 00 00       	mov    ecx,0x3
10000843:	89 e7                	mov    edi,esp
10000845:	8d 74 24 34          	lea    esi,[esp+0x34]
10000849:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000084b:	55                   	push   ebp
1000084c:	e8 fc ff ff ff       	call   1000084d <fpuInverseSqrt(_Float80)+0xd2>	1000084d: R_386_PC32	fpuSub(_Float80, _Float80)
10000851:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 ee                	mov    esi,ebp
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	83 ec 0c             	sub    esp,0xc
10000866:	b9 03 00 00 00       	mov    ecx,0x3
1000086b:	89 e7                	mov    edi,esp
1000086d:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000874:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000876:	53                   	push   ebx
10000877:	e8 fc ff ff ff       	call   10000878 <fpuInverseSqrt(_Float80)+0xfd>	10000878: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000087c:	b9 03 00 00 00       	mov    ecx,0x3
10000881:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000888:	89 de                	mov    esi,ebx
1000088a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000088c:	8d 6c 24 7c          	lea    ebp,[esp+0x7c]
10000890:	83 c4 28             	add    esp,0x28
10000893:	b9 03 00 00 00       	mov    ecx,0x3
10000898:	89 e7                	mov    edi,esp
1000089a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
100008a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008a3:	55                   	push   ebp
100008a4:	e8 fc ff ff ff       	call   100008a5 <fpuInverseSqrt(_Float80)+0x12a>	100008a5: R_386_PC32	fpuSquare(_Float80)
100008a9:	83 ec 0c             	sub    esp,0xc
100008ac:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
100008b3:	b9 03 00 00 00       	mov    ecx,0x3
100008b8:	89 e7                	mov    edi,esp
100008ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008bc:	83 ec 0c             	sub    esp,0xc
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	89 e7                	mov    edi,esp
100008c6:	89 ee                	mov    esi,ebp
100008c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008ca:	8d 44 24 78          	lea    eax,[esp+0x78]
100008ce:	50                   	push   eax
100008cf:	e8 fc ff ff ff       	call   100008d0 <fpuInverseSqrt(_Float80)+0x155>	100008d0: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008d4:	8d ac 24 84 00 00 00 	lea    ebp,[esp+0x84]
100008db:	83 c4 14             	add    esp,0x14
100008de:	b9 03 00 00 00       	mov    ecx,0x3
100008e3:	89 e7                	mov    edi,esp
100008e5:	8d 74 24 64          	lea    esi,[esp+0x64]
100008e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008eb:	83 ec 0c             	sub    esp,0xc
100008ee:	b9 03 00 00 00       	mov    ecx,0x3
100008f3:	89 e7                	mov    edi,esp
100008f5:	8d 74 24 34          	lea    esi,[esp+0x34]
100008f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fb:	55                   	push   ebp
100008fc:	e8 fc ff ff ff       	call   100008fd <fpuInverseSqrt(_Float80)+0x182>	100008fd: R_386_PC32	fpuSub(_Float80, _Float80)
10000901:	83 ec 0c             	sub    esp,0xc
10000904:	b9 03 00 00 00       	mov    ecx,0x3
10000909:	89 e7                	mov    edi,esp
1000090b:	89 ee                	mov    esi,ebp
1000090d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000090f:	83 ec 0c             	sub    esp,0xc
10000912:	b9 03 00 00 00       	mov    ecx,0x3
10000917:	89 e7                	mov    edi,esp
10000919:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000920:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000922:	53                   	push   ebx
10000923:	e8 fc ff ff ff       	call   10000924 <fpuInverseSqrt(_Float80)+0x1a9>	10000924: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000928:	b9 03 00 00 00       	mov    ecx,0x3
1000092d:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000934:	89 de                	mov    esi,ebx
10000936:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000938:	8d ac 24 a0 00 00 00 	lea    ebp,[esp+0xa0]
1000093f:	83 c4 28             	add    esp,0x28
10000942:	b9 03 00 00 00       	mov    ecx,0x3
10000947:	89 e7                	mov    edi,esp
10000949:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
10000950:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000952:	55                   	push   ebp
10000953:	e8 fc ff ff ff       	call   10000954 <fpuInverseSqrt(_Float80)+0x1d9>	10000954: R_386_PC32	fpuSquare(_Float80)
10000958:	83 ec 0c             	sub    esp,0xc
1000095b:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000962:	b9 03 00 00 00       	mov    ecx,0x3
10000967:	89 e7                	mov    edi,esp
10000969:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000096b:	83 ec 0c             	sub    esp,0xc
1000096e:	b9 03 00 00 00       	mov    ecx,0x3
10000973:	89 e7                	mov    edi,esp
10000975:	89 ee                	mov    esi,ebp
10000977:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000979:	8d 84 24 9c 00 00 00 	lea    eax,[esp+0x9c]
10000980:	50                   	push   eax
10000981:	e8 fc ff ff ff       	call   10000982 <fpuInverseSqrt(_Float80)+0x207>	10000982: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000986:	8d ac 24 a8 00 00 00 	lea    ebp,[esp+0xa8]
1000098d:	83 c4 14             	add    esp,0x14
10000990:	b9 03 00 00 00       	mov    ecx,0x3
10000995:	89 e7                	mov    edi,esp
10000997:	8d b4 24 88 00 00 00 	lea    esi,[esp+0x88]
1000099e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009a0:	83 ec 0c             	sub    esp,0xc
100009a3:	b9 03 00 00 00       	mov    ecx,0x3
100009a8:	89 e7                	mov    edi,esp
100009aa:	8d 74 24 34          	lea    esi,[esp+0x34]
100009ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009b0:	55                   	push   ebp
100009b1:	e8 fc ff ff ff       	call   100009b2 <fpuInverseSqrt(_Float80)+0x237>	100009b2: R_386_PC32	fpuSub(_Float80, _Float80)
100009b6:	83 ec 0c             	sub    esp,0xc
100009b9:	b9 03 00 00 00       	mov    ecx,0x3
100009be:	89 e7                	mov    edi,esp
100009c0:	89 ee                	mov    esi,ebp
100009c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009c4:	83 ec 0c             	sub    esp,0xc
100009c7:	b9 03 00 00 00       	mov    ecx,0x3
100009cc:	89 e7                	mov    edi,esp
100009ce:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
100009d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009d7:	53                   	push   ebx
100009d8:	e8 fc ff ff ff       	call   100009d9 <fpuInverseSqrt(_Float80)+0x25e>	100009d9: R_386_PC32	fpuMultiply(_Float80, _Float80)
100009dd:	b9 03 00 00 00       	mov    ecx,0x3
100009e2:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
100009e9:	89 de                	mov    esi,ebx
100009eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009ed:	8d ac 24 c4 00 00 00 	lea    ebp,[esp+0xc4]
100009f4:	83 c4 28             	add    esp,0x28
100009f7:	b9 03 00 00 00       	mov    ecx,0x3
100009fc:	89 e7                	mov    edi,esp
100009fe:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
10000a05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a07:	55                   	push   ebp
10000a08:	e8 fc ff ff ff       	call   10000a09 <fpuInverseSqrt(_Float80)+0x28e>	10000a09: R_386_PC32	fpuSquare(_Float80)
10000a0d:	83 ec 0c             	sub    esp,0xc
10000a10:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000a17:	b9 03 00 00 00       	mov    ecx,0x3
10000a1c:	89 e7                	mov    edi,esp
10000a1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a20:	83 ec 0c             	sub    esp,0xc
10000a23:	b9 03 00 00 00       	mov    ecx,0x3
10000a28:	89 e7                	mov    edi,esp
10000a2a:	89 ee                	mov    esi,ebp
10000a2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a2e:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
10000a35:	50                   	push   eax
10000a36:	e8 fc ff ff ff       	call   10000a37 <fpuInverseSqrt(_Float80)+0x2bc>	10000a37: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000a3b:	8d ac 24 cc 00 00 00 	lea    ebp,[esp+0xcc]
10000a42:	83 c4 14             	add    esp,0x14
10000a45:	b9 03 00 00 00       	mov    ecx,0x3
10000a4a:	89 e7                	mov    edi,esp
10000a4c:	8d b4 24 ac 00 00 00 	lea    esi,[esp+0xac]
10000a53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a55:	83 ec 0c             	sub    esp,0xc
10000a58:	b9 03 00 00 00       	mov    ecx,0x3
10000a5d:	89 e7                	mov    edi,esp
10000a5f:	8d 74 24 34          	lea    esi,[esp+0x34]
10000a63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a65:	55                   	push   ebp
10000a66:	e8 fc ff ff ff       	call   10000a67 <fpuInverseSqrt(_Float80)+0x2ec>	10000a67: R_386_PC32	fpuSub(_Float80, _Float80)
10000a6b:	83 ec 0c             	sub    esp,0xc
10000a6e:	b9 03 00 00 00       	mov    ecx,0x3
10000a73:	89 e7                	mov    edi,esp
10000a75:	89 ee                	mov    esi,ebp
10000a77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a79:	83 ec 0c             	sub    esp,0xc
10000a7c:	b9 03 00 00 00       	mov    ecx,0x3
10000a81:	89 e7                	mov    edi,esp
10000a83:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000a8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a8c:	53                   	push   ebx
10000a8d:	e8 fc ff ff ff       	call   10000a8e <fpuInverseSqrt(_Float80)+0x313>	10000a8e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000a92:	b9 03 00 00 00       	mov    ecx,0x3
10000a97:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000a9e:	89 de                	mov    esi,ebx
10000aa0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000aa2:	8d ac 24 e8 00 00 00 	lea    ebp,[esp+0xe8]
10000aa9:	83 c4 28             	add    esp,0x28
10000aac:	b9 03 00 00 00       	mov    ecx,0x3
10000ab1:	89 e7                	mov    edi,esp
10000ab3:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
10000aba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000abc:	55                   	push   ebp
10000abd:	e8 fc ff ff ff       	call   10000abe <fpuInverseSqrt(_Float80)+0x343>	10000abe: R_386_PC32	fpuSquare(_Float80)
10000ac2:	83 ec 0c             	sub    esp,0xc
10000ac5:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000acc:	b9 03 00 00 00       	mov    ecx,0x3
10000ad1:	89 e7                	mov    edi,esp
10000ad3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ad5:	83 ec 0c             	sub    esp,0xc
10000ad8:	b9 03 00 00 00       	mov    ecx,0x3
10000add:	89 e7                	mov    edi,esp
10000adf:	89 ee                	mov    esi,ebp
10000ae1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ae3:	8d 84 24 e4 00 00 00 	lea    eax,[esp+0xe4]
10000aea:	50                   	push   eax
10000aeb:	e8 fc ff ff ff       	call   10000aec <fpuInverseSqrt(_Float80)+0x371>	10000aec: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000af0:	8d ac 24 f0 00 00 00 	lea    ebp,[esp+0xf0]
10000af7:	83 c4 14             	add    esp,0x14
10000afa:	b9 03 00 00 00       	mov    ecx,0x3
10000aff:	89 e7                	mov    edi,esp
10000b01:	8d b4 24 d0 00 00 00 	lea    esi,[esp+0xd0]
10000b08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b0a:	83 ec 0c             	sub    esp,0xc
10000b0d:	b9 03 00 00 00       	mov    ecx,0x3
10000b12:	89 e7                	mov    edi,esp
10000b14:	8d 74 24 34          	lea    esi,[esp+0x34]
10000b18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b1a:	55                   	push   ebp
10000b1b:	e8 fc ff ff ff       	call   10000b1c <fpuInverseSqrt(_Float80)+0x3a1>	10000b1c: R_386_PC32	fpuSub(_Float80, _Float80)
10000b20:	83 ec 0c             	sub    esp,0xc
10000b23:	b9 03 00 00 00       	mov    ecx,0x3
10000b28:	89 e7                	mov    edi,esp
10000b2a:	89 ee                	mov    esi,ebp
10000b2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b2e:	83 ec 0c             	sub    esp,0xc
10000b31:	b9 03 00 00 00       	mov    ecx,0x3
10000b36:	89 e7                	mov    edi,esp
10000b38:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000b3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b41:	53                   	push   ebx
10000b42:	e8 fc ff ff ff       	call   10000b43 <fpuInverseSqrt(_Float80)+0x3c8>	10000b43: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000b47:	b9 03 00 00 00       	mov    ecx,0x3
10000b4c:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000b53:	89 de                	mov    esi,ebx
10000b55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b57:	8d ac 24 0c 01 00 00 	lea    ebp,[esp+0x10c]
10000b5e:	83 c4 28             	add    esp,0x28
10000b61:	b9 03 00 00 00       	mov    ecx,0x3
10000b66:	89 e7                	mov    edi,esp
10000b68:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
10000b6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b71:	55                   	push   ebp
10000b72:	e8 fc ff ff ff       	call   10000b73 <fpuInverseSqrt(_Float80)+0x3f8>	10000b73: R_386_PC32	fpuSquare(_Float80)
10000b77:	83 ec 0c             	sub    esp,0xc
10000b7a:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000b81:	b9 03 00 00 00       	mov    ecx,0x3
10000b86:	89 e7                	mov    edi,esp
10000b88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b8a:	83 ec 0c             	sub    esp,0xc
10000b8d:	b9 03 00 00 00       	mov    ecx,0x3
10000b92:	89 e7                	mov    edi,esp
10000b94:	89 ee                	mov    esi,ebp
10000b96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b98:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
10000b9f:	50                   	push   eax
10000ba0:	e8 fc ff ff ff       	call   10000ba1 <fpuInverseSqrt(_Float80)+0x426>	10000ba1: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000ba5:	8d ac 24 14 01 00 00 	lea    ebp,[esp+0x114]
10000bac:	83 c4 14             	add    esp,0x14
10000baf:	b9 03 00 00 00       	mov    ecx,0x3
10000bb4:	89 e7                	mov    edi,esp
10000bb6:	8d b4 24 f4 00 00 00 	lea    esi,[esp+0xf4]
10000bbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bbf:	83 ec 0c             	sub    esp,0xc
10000bc2:	b9 03 00 00 00       	mov    ecx,0x3
10000bc7:	89 e7                	mov    edi,esp
10000bc9:	8d 74 24 34          	lea    esi,[esp+0x34]
10000bcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bcf:	55                   	push   ebp
10000bd0:	e8 fc ff ff ff       	call   10000bd1 <fpuInverseSqrt(_Float80)+0x456>	10000bd1: R_386_PC32	fpuSub(_Float80, _Float80)
10000bd5:	83 ec 0c             	sub    esp,0xc
10000bd8:	b9 03 00 00 00       	mov    ecx,0x3
10000bdd:	89 e7                	mov    edi,esp
10000bdf:	89 ee                	mov    esi,ebp
10000be1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000be3:	83 ec 0c             	sub    esp,0xc
10000be6:	b9 03 00 00 00       	mov    ecx,0x3
10000beb:	89 e7                	mov    edi,esp
10000bed:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000bf4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bf6:	53                   	push   ebx
10000bf7:	e8 fc ff ff ff       	call   10000bf8 <fpuInverseSqrt(_Float80)+0x47d>	10000bf8: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000bfc:	b9 03 00 00 00       	mov    ecx,0x3
10000c01:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000c08:	89 de                	mov    esi,ebx
10000c0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c0c:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
10000c13:	83 c4 28             	add    esp,0x28
10000c16:	b9 03 00 00 00       	mov    ecx,0x3
10000c1b:	89 e7                	mov    edi,esp
10000c1d:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
10000c24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c26:	55                   	push   ebp
10000c27:	e8 fc ff ff ff       	call   10000c28 <fpuInverseSqrt(_Float80)+0x4ad>	10000c28: R_386_PC32	fpuSquare(_Float80)
10000c2c:	83 ec 0c             	sub    esp,0xc
10000c2f:	8d b4 24 5c 01 00 00 	lea    esi,[esp+0x15c]
10000c36:	b9 03 00 00 00       	mov    ecx,0x3
10000c3b:	89 e7                	mov    edi,esp
10000c3d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c3f:	83 ec 0c             	sub    esp,0xc
10000c42:	b9 03 00 00 00       	mov    ecx,0x3
10000c47:	89 e7                	mov    edi,esp
10000c49:	89 ee                	mov    esi,ebp
10000c4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c4d:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
10000c54:	50                   	push   eax
10000c55:	e8 fc ff ff ff       	call   10000c56 <fpuInverseSqrt(_Float80)+0x4db>	10000c56: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000c5a:	8d ac 24 38 01 00 00 	lea    ebp,[esp+0x138]
10000c61:	83 c4 14             	add    esp,0x14
10000c64:	b9 03 00 00 00       	mov    ecx,0x3
10000c69:	89 e7                	mov    edi,esp
10000c6b:	8d b4 24 18 01 00 00 	lea    esi,[esp+0x118]
10000c72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c74:	83 ec 0c             	sub    esp,0xc
10000c77:	b9 03 00 00 00       	mov    ecx,0x3
10000c7c:	89 e7                	mov    edi,esp
10000c7e:	8d 74 24 34          	lea    esi,[esp+0x34]
10000c82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c84:	55                   	push   ebp
10000c85:	e8 fc ff ff ff       	call   10000c86 <fpuInverseSqrt(_Float80)+0x50b>	10000c86: R_386_PC32	fpuSub(_Float80, _Float80)
10000c8a:	83 ec 0c             	sub    esp,0xc
10000c8d:	b9 03 00 00 00       	mov    ecx,0x3
10000c92:	89 e7                	mov    edi,esp
10000c94:	89 ee                	mov    esi,ebp
10000c96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c98:	83 ec 0c             	sub    esp,0xc
10000c9b:	b9 03 00 00 00       	mov    ecx,0x3
10000ca0:	89 e7                	mov    edi,esp
10000ca2:	8b b4 24 74 01 00 00 	mov    esi,DWORD PTR [esp+0x174]
10000ca9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cab:	53                   	push   ebx
10000cac:	e8 fc ff ff ff       	call   10000cad <fpuInverseSqrt(_Float80)+0x532>	10000cad: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000cb1:	b9 03 00 00 00       	mov    ecx,0x3
10000cb6:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
10000cbd:	89 de                	mov    esi,ebx
10000cbf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cc1:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
10000cc8:	81 c4 60 01 00 00    	add    esp,0x160
10000cce:	5b                   	pop    ebx
10000ccf:	5e                   	pop    esi
10000cd0:	5f                   	pop    edi
10000cd1:	5d                   	pop    ebp
10000cd2:	c2 04 00             	ret    0x4

10000cd5 <fpuSqrt(_Float80)>:
10000cd5:	55                   	push   ebp
10000cd6:	57                   	push   edi
10000cd7:	56                   	push   esi
10000cd8:	53                   	push   ebx
10000cd9:	83 ec 2c             	sub    esp,0x2c
10000cdc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
10000ce0:	8d 6c 24 08          	lea    ebp,[esp+0x8]
10000ce4:	83 ec 0c             	sub    esp,0xc
10000ce7:	8d 74 24 50          	lea    esi,[esp+0x50]
10000ceb:	b9 03 00 00 00       	mov    ecx,0x3
10000cf0:	89 e7                	mov    edi,esp
10000cf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cf4:	55                   	push   ebp
10000cf5:	e8 fc ff ff ff       	call   10000cf6 <fpuSqrt(_Float80)+0x21>	10000cf6: R_386_PC32	fpuInverseSqrt(_Float80)
10000cfa:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
10000cff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10000d07:	c7 44 24 24 00 00 00 20 	mov    DWORD PTR [esp+0x24],0x20000000
10000d0f:	66 c7 44 24 28 ff 3f 	mov    WORD PTR [esp+0x28],0x3fff
10000d16:	83 ec 14             	sub    esp,0x14
10000d19:	b9 03 00 00 00       	mov    ecx,0x3
10000d1e:	89 e7                	mov    edi,esp
10000d20:	89 ee                	mov    esi,ebp
10000d22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d24:	83 ec 0c             	sub    esp,0xc
10000d27:	8d 74 24 40          	lea    esi,[esp+0x40]
10000d2b:	b9 03 00 00 00       	mov    ecx,0x3
10000d30:	89 e7                	mov    edi,esp
10000d32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d34:	53                   	push   ebx
10000d35:	e8 fc ff ff ff       	call   10000d36 <fpuSqrt(_Float80)+0x61>	10000d36: R_386_PC32	fpuDivide(_Float80, _Float80)
10000d3a:	89 d8                	mov    eax,ebx
10000d3c:	83 c4 58             	add    esp,0x58
10000d3f:	5b                   	pop    ebx
10000d40:	5e                   	pop    esi
10000d41:	5f                   	pop    edi
10000d42:	5d                   	pop    ebp
10000d43:	c2 04 00             	ret    0x4

10000d46 <fpuPush(_Float80)>:
10000d46:	57                   	push   edi
10000d47:	56                   	push   esi
10000d48:	83 ec 04             	sub    esp,0x4
10000d4b:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d4c: R_386_32	fpuSP
10000d50:	8d 50 01             	lea    edx,[eax+0x1]
10000d53:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10000d55: R_386_32	fpuSP
10000d59:	8d 0c 00             	lea    ecx,[eax+eax*1]
10000d5c:	01 c8                	add    eax,ecx
10000d5e:	8d 04 85 00 00 00 00 	lea    eax,[eax*4+0x0]	10000d61: R_386_32	fpuStack
10000d65:	b9 03 00 00 00       	mov    ecx,0x3
10000d6a:	89 c7                	mov    edi,eax
10000d6c:	8d 74 24 10          	lea    esi,[esp+0x10]
10000d70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d72:	83 fa 08             	cmp    edx,0x8
10000d75:	74 06                	je     10000d7d <fpuPush(_Float80)+0x37>
10000d77:	83 c4 04             	add    esp,0x4
10000d7a:	5e                   	pop    esi
10000d7b:	5f                   	pop    edi
10000d7c:	c3                   	ret    
10000d7d:	83 ec 0c             	sub    esp,0xc
10000d80:	68 a2 0f 00 10       	push   0x10000fa2	10000d81: R_386_32	.text
10000d85:	e8 fc ff ff ff       	call   10000d86 <fpuPush(_Float80)+0x40>	10000d86: R_386_PC32	Krnl::panic(char const*)
10000d8a:	83 c4 10             	add    esp,0x10
10000d8d:	eb e8                	jmp    10000d77 <fpuPush(_Float80)+0x31>

10000d8f <x87Handler(regs*)>:
10000d8f:	57                   	push   edi
10000d90:	56                   	push   esi
10000d91:	53                   	push   ebx
10000d92:	83 ec 60             	sub    esp,0x60
10000d95:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10000d99:	8b 58 38             	mov    ebx,DWORD PTR [eax+0x38]
10000d9c:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10000da0:	50                   	push   eax
10000da1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
10000da5:	50                   	push   eax
10000da6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10000da9:	50                   	push   eax
10000daa:	68 b0 0f 00 10       	push   0x10000fb0	10000dab: R_386_32	.text
10000daf:	e8 fc ff ff ff       	call   10000db0 <x87Handler(regs*)+0x21>	10000db0: R_386_PC32	Dbg::kprintf(char const*, ...)
10000db4:	83 c4 10             	add    esp,0x10
10000db7:	80 3b d9             	cmp    BYTE PTR [ebx],0xd9
10000dba:	74 09                	je     10000dc5 <x87Handler(regs*)+0x36>
10000dbc:	b0 00                	mov    al,0x0
10000dbe:	83 c4 60             	add    esp,0x60
10000dc1:	5b                   	pop    ebx
10000dc2:	5e                   	pop    esi
10000dc3:	5f                   	pop    edi
10000dc4:	c3                   	ret    
10000dc5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
10000dc8:	83 c0 18             	add    eax,0x18
10000dcb:	3c 06                	cmp    al,0x6
10000dcd:	0f 87 a4 01 00 00    	ja     10000f77 <x87Handler(regs*)+0x1e8>
10000dd3:	0f b6 c0             	movzx  eax,al
10000dd6:	ff 24 85 c0 0f 00 10 	jmp    DWORD PTR [eax*4+0x10000fc0]	10000dd9: R_386_32	.text
10000ddd:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
10000de2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10000dea:	c7 44 24 10 00 00 00 20 	mov    DWORD PTR [esp+0x10],0x20000000
10000df2:	66 c7 44 24 14 ff 3f 	mov    WORD PTR [esp+0x14],0x3fff
10000df9:	83 ec 10             	sub    esp,0x10
10000dfc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10000e00:	b9 03 00 00 00       	mov    ecx,0x3
10000e05:	89 e7                	mov    edi,esp
10000e07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e09:	e8 fc ff ff ff       	call   10000e0a <x87Handler(regs*)+0x7b>	10000e0a: R_386_PC32	fpuPush(_Float80)
10000e0e:	83 c4 10             	add    esp,0x10
10000e11:	b0 01                	mov    al,0x1
10000e13:	eb a9                	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000e15:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
10000e1a:	c7 44 24 18 be e2 46 f3 	mov    DWORD PTR [esp+0x18],0xf346e2be
10000e22:	c7 44 24 1c 12 9e 26 35 	mov    DWORD PTR [esp+0x1c],0x35269e12
10000e2a:	66 c7 44 24 20 01 40 	mov    WORD PTR [esp+0x20],0x4001
10000e31:	83 ec 10             	sub    esp,0x10
10000e34:	8d 74 24 28          	lea    esi,[esp+0x28]
10000e38:	b9 03 00 00 00       	mov    ecx,0x3
10000e3d:	89 e7                	mov    edi,esp
10000e3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e41:	e8 fc ff ff ff       	call   10000e42 <x87Handler(regs*)+0xb3>	10000e42: R_386_PC32	fpuPush(_Float80)
10000e46:	83 c4 10             	add    esp,0x10
10000e49:	b0 01                	mov    al,0x1
10000e4b:	e9 6e ff ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000e50:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
10000e55:	c7 44 24 24 1c fc 05 57 	mov    DWORD PTR [esp+0x24],0x5705fc1c
10000e5d:	c7 44 24 28 ca 8e 2a 2e 	mov    DWORD PTR [esp+0x28],0x2e2a8eca
10000e65:	66 c7 44 24 2c 00 40 	mov    WORD PTR [esp+0x2c],0x4000
10000e6c:	83 ec 10             	sub    esp,0x10
10000e6f:	8d 74 24 34          	lea    esi,[esp+0x34]
10000e73:	b9 03 00 00 00       	mov    ecx,0x3
10000e78:	89 e7                	mov    edi,esp
10000e7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e7c:	e8 fc ff ff ff       	call   10000e7d <x87Handler(regs*)+0xee>	10000e7d: R_386_PC32	fpuPush(_Float80)
10000e81:	83 c4 10             	add    esp,0x10
10000e84:	b0 01                	mov    al,0x1
10000e86:	e9 33 ff ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000e8b:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
10000e90:	c7 44 24 30 8c 30 5a 88 	mov    DWORD PTR [esp+0x30],0x885a308c
10000e98:	c7 44 24 34 a8 f6 43 32 	mov    DWORD PTR [esp+0x34],0x3243f6a8
10000ea0:	66 c7 44 24 38 01 40 	mov    WORD PTR [esp+0x38],0x4001
10000ea7:	83 ec 10             	sub    esp,0x10
10000eaa:	8d 74 24 40          	lea    esi,[esp+0x40]
10000eae:	b9 03 00 00 00       	mov    ecx,0x3
10000eb3:	89 e7                	mov    edi,esp
10000eb5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000eb7:	e8 fc ff ff ff       	call   10000eb8 <x87Handler(regs*)+0x129>	10000eb8: R_386_PC32	fpuPush(_Float80)
10000ebc:	83 c4 10             	add    esp,0x10
10000ebf:	b0 01                	mov    al,0x1
10000ec1:	e9 f8 fe ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000ec6:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
10000ecb:	c7 44 24 3c e6 fd f3 3e 	mov    DWORD PTR [esp+0x3c],0x3ef3fde6
10000ed3:	c7 44 24 40 a1 26 88 26 	mov    DWORD PTR [esp+0x40],0x268826a1
10000edb:	66 c7 44 24 44 fe 3f 	mov    WORD PTR [esp+0x44],0x3ffe
10000ee2:	83 ec 10             	sub    esp,0x10
10000ee5:	8d 74 24 4c          	lea    esi,[esp+0x4c]
10000ee9:	b9 03 00 00 00       	mov    ecx,0x3
10000eee:	89 e7                	mov    edi,esp
10000ef0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ef2:	e8 fc ff ff ff       	call   10000ef3 <x87Handler(regs*)+0x164>	10000ef3: R_386_PC32	fpuPush(_Float80)
10000ef7:	83 c4 10             	add    esp,0x10
10000efa:	b0 01                	mov    al,0x1
10000efc:	e9 bd fe ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000f01:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
10000f06:	c7 44 24 48 68 de 73 f4 	mov    DWORD PTR [esp+0x48],0xf473de68
10000f0e:	c7 44 24 4c fd 85 5c 2c 	mov    DWORD PTR [esp+0x4c],0x2c5c85fd
10000f16:	66 c7 44 24 50 ff 3f 	mov    WORD PTR [esp+0x50],0x3fff
10000f1d:	83 ec 10             	sub    esp,0x10
10000f20:	8d 74 24 58          	lea    esi,[esp+0x58]
10000f24:	b9 03 00 00 00       	mov    ecx,0x3
10000f29:	89 e7                	mov    edi,esp
10000f2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f2d:	e8 fc ff ff ff       	call   10000f2e <x87Handler(regs*)+0x19f>	10000f2e: R_386_PC32	fpuPush(_Float80)
10000f32:	83 c4 10             	add    esp,0x10
10000f35:	b0 01                	mov    al,0x1
10000f37:	e9 82 fe ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000f3c:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
10000f41:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
10000f49:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
10000f51:	66 c7 44 24 5c ff 3f 	mov    WORD PTR [esp+0x5c],0x3fff
10000f58:	83 ec 10             	sub    esp,0x10
10000f5b:	8d 74 24 64          	lea    esi,[esp+0x64]
10000f5f:	b9 03 00 00 00       	mov    ecx,0x3
10000f64:	89 e7                	mov    edi,esp
10000f66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f68:	e8 fc ff ff ff       	call   10000f69 <x87Handler(regs*)+0x1da>	10000f69: R_386_PC32	fpuPush(_Float80)
10000f6d:	83 c4 10             	add    esp,0x10
10000f70:	b0 01                	mov    al,0x1
10000f72:	e9 47 fe ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>
10000f77:	b0 00                	mov    al,0x0
10000f79:	e9 40 fe ff ff       	jmp    10000dbe <x87Handler(regs*)+0x2f>

10000f7e <fpuPop()>:
10000f7e:	57                   	push   edi
10000f7f:	56                   	push   esi
10000f80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000f84:	be 00 00 00 00       	mov    esi,0x0	10000f85: R_386_32	fpuStack
10000f89:	b9 03 00 00 00       	mov    ecx,0x3
10000f8e:	89 c7                	mov    edi,eax
10000f90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f92:	5e                   	pop    esi
10000f93:	5f                   	pop    edi
10000f94:	c2 04 00             	ret    0x4

10000f97 <begin()>:
10000f97:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000f99: R_386_32	x87FaultIntercept
	10000f9d: R_386_32	x87Handler(regs*)
10000fa1:	c3                   	ret    
10000fa2:	46                   	inc    esi
10000fa3:	50                   	push   eax
10000fa4:	55                   	push   ebp
10000fa5:	20 4f 56             	and    BYTE PTR [edi+0x56],cl
10000fa8:	45                   	inc    ebp
10000fa9:	52                   	push   edx
10000faa:	46                   	inc    esi
10000fab:	4c                   	dec    esp
10000fac:	4f                   	dec    edi
10000fad:	57                   	push   edi
10000fae:	2e 00 78 38          	add    BYTE PTR cs:[eax+0x38],bh
10000fb2:	37                   	aaa    
10000fb3:	3a 20                	cmp    ah,BYTE PTR [eax]
10000fb5:	25 58 20 25 58       	and    eax,0x58252058
10000fba:	20 25 58 0a 00 90    	and    BYTE PTR ds:0x90000a58,ah
10000fc0:	dd 0d 00 10 15 0e    	fisttp QWORD PTR ds:0xe151000	10000fc0: R_386_32	.text
	10000fc4: R_386_32	.text
10000fc6:	00 10                	add    BYTE PTR [eax],dl
10000fc8:	50                   	push   eax	10000fc8: R_386_32	.text
10000fc9:	0e                   	push   cs
10000fca:	00 10                	add    BYTE PTR [eax],dl
10000fcc:	8b 0e                	mov    ecx,DWORD PTR [esi]	10000fcc: R_386_32	.text
10000fce:	00 10                	add    BYTE PTR [eax],dl
10000fd0:	c6                   	(bad)  	10000fd0: R_386_32	.text
10000fd1:	0e                   	push   cs
10000fd2:	00 10                	add    BYTE PTR [eax],dl
10000fd4:	01 0f                	add    DWORD PTR [edi],ecx	10000fd4: R_386_32	.text
10000fd6:	00 10                	add    BYTE PTR [eax],dl
10000fd8:	3c 0f                	cmp    al,0xf	10000fd8: R_386_32	.text
10000fda:	00 10                	add    BYTE PTR [eax],dl
