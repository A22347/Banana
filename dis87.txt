
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuUnorderedCompare(_Float80, _Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	83 ec 44             	sub    esp,0x44
10000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000277:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000027a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000280:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000284:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000287:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
1000028a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
1000028d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000290:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000294:	8d 7d c0             	lea    edi,[ebp-0x40]
10000297:	b9 03 00 00 00       	mov    ecx,0x3
1000029c:	8d 75 08             	lea    esi,[ebp+0x8]
1000029f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002a1:	8d 7d cc             	lea    edi,[ebp-0x34]
100002a4:	8d 75 14             	lea    esi,[ebp+0x14]
100002a7:	b9 03 00 00 00       	mov    ecx,0x3
100002ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ae:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002b1:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002b4:	89 c2                	mov    edx,eax
100002b6:	31 da                	xor    edx,ebx
100002b8:	09 d1                	or     ecx,edx
100002ba:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002be:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002ca:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002d0:	39 d1                	cmp    ecx,edx
100002d2:	75 08                	jne    100002dc <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002d4:	31 d2                	xor    edx,edx
100002d6:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
100002da:	75 1c                	jne    100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002dc:	b2 01                	mov    dl,0x1
100002de:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
100002e2:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
100002e6:	72 10                	jb     100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002e8:	0f 94 c1             	sete   cl
100002eb:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
100002ee:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
100002f1:	19 d8                	sbb    eax,ebx
100002f3:	0f 92 c2             	setb   dl
100002f6:	21 ca                	and    edx,ecx
100002f8:	a0 01 00 00 00       	mov    al,ds:0x1	100002f9: R_386_32	fpuState
100002fd:	83 e0 ba             	and    eax,0xffffffba
10000300:	8d 7d d8             	lea    edi,[ebp-0x28]
10000303:	b9 03 00 00 00       	mov    ecx,0x3
10000308:	8d 75 08             	lea    esi,[ebp+0x8]
1000030b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000030d:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000310:	b9 03 00 00 00       	mov    ecx,0x3
10000315:	8d 75 14             	lea    esi,[ebp+0x14]
10000318:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000031a:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
1000031d:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000323:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000326:	81 e1 ff ff ff 00    	and    ecx,0xffffff
1000032c:	39 cb                	cmp    ebx,ecx
1000032e:	0f 94 c1             	sete   cl
10000331:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000334:	c1 e1 06             	shl    ecx,0x6
10000337:	09 d0                	or     eax,edx
10000339:	09 c8                	or     eax,ecx
1000033b:	a2 01 00 00 00       	mov    ds:0x1,al	1000033c: R_386_32	fpuState
10000340:	83 c4 44             	add    esp,0x44
10000343:	5b                   	pop    ebx
10000344:	5e                   	pop    esi
10000345:	5f                   	pop    edi
10000346:	5d                   	pop    ebp
10000347:	c3                   	ret    

10000348 <fpuNormalise(_Float80)>:
10000348:	55                   	push   ebp
10000349:	89 e5                	mov    ebp,esp
1000034b:	57                   	push   edi
1000034c:	56                   	push   esi
1000034d:	53                   	push   ebx
1000034e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000354:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000357:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000035a:	8d 72 01             	lea    esi,[edx+0x1]
1000035d:	89 df                	mov    edi,ebx
1000035f:	c1 ef 1e             	shr    edi,0x1e
10000362:	74 0e                	je     10000372 <fpuNormalise(_Float80)+0x2a>
10000364:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000368:	d1 eb                	shr    ebx,1
1000036a:	89 f2                	mov    edx,esi
1000036c:	eb ec                	jmp    1000035a <fpuNormalise(_Float80)+0x12>
1000036e:	01 c9                	add    ecx,ecx
10000370:	11 db                	adc    ebx,ebx
10000372:	0f ba e3 1d          	bt     ebx,0x1d
10000376:	72 1d                	jb     10000395 <fpuNormalise(_Float80)+0x4d>
10000378:	4a                   	dec    edx
10000379:	89 de                	mov    esi,ebx
1000037b:	09 ce                	or     esi,ecx
1000037d:	75 ef                	jne    1000036e <fpuNormalise(_Float80)+0x26>
1000037f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000386:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
1000038d:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000393:	eb 0a                	jmp    1000039f <fpuNormalise(_Float80)+0x57>
10000395:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000398:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
1000039b:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000039f:	8d 75 0c             	lea    esi,[ebp+0xc]
100003a2:	b9 03 00 00 00       	mov    ecx,0x3
100003a7:	89 c7                	mov    edi,eax
100003a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ab:	5b                   	pop    ebx
100003ac:	5e                   	pop    esi
100003ad:	5f                   	pop    edi
100003ae:	5d                   	pop    ebp
100003af:	c2 04 00             	ret    0x4

100003b2 <fpuAdd(_Float80, _Float80)>:
100003b2:	55                   	push   ebp
100003b3:	89 e5                	mov    ebp,esp
100003b5:	57                   	push   edi
100003b6:	56                   	push   esi
100003b7:	53                   	push   ebx
100003b8:	83 ec 2c             	sub    esp,0x2c
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003c1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003c4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003ca:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003ce:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003d1:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003d4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100003d7:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100003da:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100003dd:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100003e0:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003e4:	66 39 c8             	cmp    ax,cx
100003e7:	72 2d                	jb     10000416 <fpuAdd(_Float80, _Float80)+0x64>
100003e9:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100003ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100003ef:	19 f8                	sbb    eax,edi
100003f1:	73 09                	jae    100003fc <fpuAdd(_Float80, _Float80)+0x4a>
100003f3:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003f7:	66 39 c8             	cmp    ax,cx
100003fa:	74 24                	je     10000420 <fpuAdd(_Float80, _Float80)+0x6e>
100003fc:	88 d8                	mov    al,bl
100003fe:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000401:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000404:	89 f0                	mov    eax,esi
10000406:	89 fa                	mov    edx,edi
10000408:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000040b:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000040e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000411:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000414:	eb 0a                	jmp    10000420 <fpuAdd(_Float80, _Float80)+0x6e>
10000416:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000041a:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000041e:	89 c1                	mov    ecx,eax
10000420:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000423:	29 c8                	sub    eax,ecx
10000425:	88 c1                	mov    cl,al
10000427:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000042a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000042d:	0f ad d0             	shrd   eax,edx,cl
10000430:	d3 ea                	shr    edx,cl
10000432:	f6 c1 20             	test   cl,0x20
10000435:	74 04                	je     1000043b <fpuAdd(_Float80, _Float80)+0x89>
10000437:	89 d0                	mov    eax,edx
10000439:	31 d2                	xor    edx,edx
1000043b:	89 d1                	mov    ecx,edx
1000043d:	89 c2                	mov    edx,eax
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000447:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000044a:	75 13                	jne    1000045f <fpuAdd(_Float80, _Float80)+0xad>
1000044c:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
1000044f:	89 d0                	mov    eax,edx
10000451:	89 ca                	mov    edx,ecx
10000453:	01 f0                	add    eax,esi
10000455:	11 fa                	adc    edx,edi
10000457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000045a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000045d:	eb 58                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000045f:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000463:	74 24                	je     10000489 <fpuAdd(_Float80, _Float80)+0xd7>
10000465:	39 d6                	cmp    esi,edx
10000467:	89 f8                	mov    eax,edi
10000469:	19 c8                	sbb    eax,ecx
1000046b:	89 d0                	mov    eax,edx
1000046d:	89 ca                	mov    edx,ecx
1000046f:	73 0c                	jae    1000047d <fpuAdd(_Float80, _Float80)+0xcb>
10000471:	29 f0                	sub    eax,esi
10000473:	19 fa                	sbb    edx,edi
10000475:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000478:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000047b:	eb 26                	jmp    100004a3 <fpuAdd(_Float80, _Float80)+0xf1>
1000047d:	29 c6                	sub    esi,eax
1000047f:	19 cf                	sbb    edi,ecx
10000481:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000484:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000487:	eb 2a                	jmp    100004b3 <fpuAdd(_Float80, _Float80)+0x101>
10000489:	84 db                	test   bl,bl
1000048b:	74 2a                	je     100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000048d:	39 f2                	cmp    edx,esi
1000048f:	89 c8                	mov    eax,ecx
10000491:	19 f8                	sbb    eax,edi
10000493:	89 d0                	mov    eax,edx
10000495:	89 ca                	mov    edx,ecx
10000497:	73 10                	jae    100004a9 <fpuAdd(_Float80, _Float80)+0xf7>
10000499:	29 c6                	sub    esi,eax
1000049b:	19 cf                	sbb    edi,ecx
1000049d:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004a0:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004a3:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004a7:	eb 0e                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
100004a9:	29 f0                	sub    eax,esi
100004ab:	19 fa                	sbb    edx,edi
100004ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004b0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004b7:	83 ec 0c             	sub    esp,0xc
100004ba:	8d 75 dc             	lea    esi,[ebp-0x24]
100004bd:	b9 03 00 00 00       	mov    ecx,0x3
100004c2:	89 e7                	mov    edi,esp
100004c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004c9:	e8 fc ff ff ff       	call   100004ca <fpuAdd(_Float80, _Float80)+0x118>	100004ca: R_386_PC32	fpuNormalise(_Float80)
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004d4:	5b                   	pop    ebx
100004d5:	5e                   	pop    esi
100004d6:	5f                   	pop    edi
100004d7:	5d                   	pop    ebp
100004d8:	c2 04 00             	ret    0x4

100004db <fpuAbs(_Float80)>:
100004db:	55                   	push   ebp
100004dc:	89 e5                	mov    ebp,esp
100004de:	57                   	push   edi
100004df:	56                   	push   esi
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100004e7:	8d 75 0c             	lea    esi,[ebp+0xc]
100004ea:	b9 03 00 00 00       	mov    ecx,0x3
100004ef:	89 c7                	mov    edi,eax
100004f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004f3:	5e                   	pop    esi
100004f4:	5f                   	pop    edi
100004f5:	5d                   	pop    ebp
100004f6:	c2 04 00             	ret    0x4

100004f9 <fpuChs(_Float80)>:
100004f9:	55                   	push   ebp
100004fa:	89 e5                	mov    ebp,esp
100004fc:	57                   	push   edi
100004fd:	56                   	push   esi
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000505:	8d 75 0c             	lea    esi,[ebp+0xc]
10000508:	b9 03 00 00 00       	mov    ecx,0x3
1000050d:	89 c7                	mov    edi,eax
1000050f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000511:	5e                   	pop    esi
10000512:	5f                   	pop    edi
10000513:	5d                   	pop    ebp
10000514:	c2 04 00             	ret    0x4

10000517 <fpuSub(_Float80, _Float80)>:
10000517:	55                   	push   ebp
10000518:	89 e5                	mov    ebp,esp
1000051a:	57                   	push   edi
1000051b:	56                   	push   esi
1000051c:	53                   	push   ebx
1000051d:	83 ec 1c             	sub    esp,0x1c
10000520:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000523:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000527:	8d 75 18             	lea    esi,[ebp+0x18]
1000052a:	b9 03 00 00 00       	mov    ecx,0x3
1000052f:	89 e7                	mov    edi,esp
10000531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000533:	83 ec 0c             	sub    esp,0xc
10000536:	8d 75 0c             	lea    esi,[ebp+0xc]
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	89 e7                	mov    edi,esp
10000540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000542:	53                   	push   ebx
10000543:	e8 fc ff ff ff       	call   10000544 <fpuSub(_Float80, _Float80)+0x2d>	10000544: R_386_PC32	fpuAdd(_Float80, _Float80)
10000548:	89 d8                	mov    eax,ebx
1000054a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000054d:	5b                   	pop    ebx
1000054e:	5e                   	pop    esi
1000054f:	5f                   	pop    edi
10000550:	5d                   	pop    ebp
10000551:	c2 04 00             	ret    0x4

10000554 <fpuReverseSub(_Float80, _Float80)>:
10000554:	55                   	push   ebp
10000555:	89 e5                	mov    ebp,esp
10000557:	57                   	push   edi
10000558:	56                   	push   esi
10000559:	53                   	push   ebx
1000055a:	83 ec 1c             	sub    esp,0x1c
1000055d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000560:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000564:	8d 75 0c             	lea    esi,[ebp+0xc]
10000567:	b9 03 00 00 00       	mov    ecx,0x3
1000056c:	89 e7                	mov    edi,esp
1000056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000570:	83 ec 0c             	sub    esp,0xc
10000573:	8d 75 18             	lea    esi,[ebp+0x18]
10000576:	b9 03 00 00 00       	mov    ecx,0x3
1000057b:	89 e7                	mov    edi,esp
1000057d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000057f:	53                   	push   ebx
10000580:	e8 fc ff ff ff       	call   10000581 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000581: R_386_PC32	fpuAdd(_Float80, _Float80)
10000585:	89 d8                	mov    eax,ebx
10000587:	8d 65 f4             	lea    esp,[ebp-0xc]
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	5d                   	pop    ebp
1000058e:	c2 04 00             	ret    0x4

10000591 <fpuMultiply(_Float80, _Float80)>:
10000591:	55                   	push   ebp
10000592:	89 e5                	mov    ebp,esp
10000594:	57                   	push   edi
10000595:	56                   	push   esi
10000596:	53                   	push   ebx
10000597:	83 ec 38             	sub    esp,0x38
1000059a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000059d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a3:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005a7:	c1 ea 1f             	shr    edx,0x1f
100005aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005b0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005b3:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005b6:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005ba:	c1 ef 1f             	shr    edi,0x1f
100005bd:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005c0:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005c3:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005c6:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005c9:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005cc:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005d1:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005d5:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100005d8:	0f af ce             	imul   ecx,esi
100005db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100005de:	0f af d7             	imul   edx,edi
100005e1:	01 d1                	add    ecx,edx
100005e3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100005e6:	f7 e6                	mul    esi
100005e8:	01 ca                	add    edx,ecx
100005ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100005ed:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100005f0:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f3:	b9 03 00 00 00       	mov    ecx,0x3
100005f8:	89 e7                	mov    edi,esp
100005fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fc:	53                   	push   ebx
100005fd:	e8 fc ff ff ff       	call   100005fe <fpuMultiply(_Float80, _Float80)+0x6d>	100005fe: R_386_PC32	fpuNormalise(_Float80)
10000602:	89 d8                	mov    eax,ebx
10000604:	8d 65 f4             	lea    esp,[ebp-0xc]
10000607:	5b                   	pop    ebx
10000608:	5e                   	pop    esi
10000609:	5f                   	pop    edi
1000060a:	5d                   	pop    ebp
1000060b:	c2 04 00             	ret    0x4

1000060e <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000060e:	55                   	push   ebp
1000060f:	89 e5                	mov    ebp,esp
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	53                   	push   ebx
10000614:	83 ec 24             	sub    esp,0x24
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000061d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000620:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000626:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000629:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000062c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000062f:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000636:	83 c8 ff             	or     eax,0xffffffff
10000639:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000640:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000647:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000064e:	31 d2                	xor    edx,edx
10000650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000653:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000656:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000659:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000065c:	83 f8 ff             	cmp    eax,0xffffffff
1000065f:	75 22                	jne    10000683 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000661:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000664:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000667:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000066a:	0f ad f3             	shrd   ebx,esi,cl
1000066d:	d3 ee                	shr    esi,cl
1000066f:	f6 c1 20             	test   cl,0x20
10000672:	74 04                	je     10000678 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000674:	89 f3                	mov    ebx,esi
10000676:	31 f6                	xor    esi,esi
10000678:	89 d9                	mov    ecx,ebx
1000067a:	83 e1 01             	and    ecx,0x1
1000067d:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000680:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000686:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000689:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000068c:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000068f:	72 38                	jb     100006c9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
10000691:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000694:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000697:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
1000069a:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000069d:	83 f8 ff             	cmp    eax,0xffffffff
100006a0:	75 0d                	jne    100006af <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006a2:	81 ca 00 00 00 20    	or     edx,0x20000000
100006a8:	b8 3d 00 00 00       	mov    eax,0x3d
100006ad:	eb 1f                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006af:	88 c1                	mov    cl,al
100006b1:	89 ce                	mov    esi,ecx
100006b3:	c1 ee 05             	shr    esi,0x5
100006b6:	83 e6 01             	and    esi,0x1
100006b9:	89 f3                	mov    ebx,esi
100006bb:	83 f3 01             	xor    ebx,0x1
100006be:	d3 e3                	shl    ebx,cl
100006c0:	d3 e6                	shl    esi,cl
100006c2:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006c5:	09 f2                	or     edx,esi
100006c7:	eb 05                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006c9:	83 f8 ff             	cmp    eax,0xffffffff
100006cc:	74 01                	je     100006cf <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006ce:	48                   	dec    eax
100006cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006d2:	85 c0                	test   eax,eax
100006d4:	0f 85 76 ff ff ff    	jne    10000650 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100006da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100006dd:	83 c4 24             	add    esp,0x24
100006e0:	5b                   	pop    ebx
100006e1:	5e                   	pop    esi
100006e2:	5f                   	pop    edi
100006e3:	5d                   	pop    ebp
100006e4:	c3                   	ret    

100006e5 <fpuDivide(_Float80, _Float80)>:
100006e5:	55                   	push   ebp
100006e6:	89 e5                	mov    ebp,esp
100006e8:	57                   	push   edi
100006e9:	56                   	push   esi
100006ea:	53                   	push   ebx
100006eb:	83 ec 1c             	sub    esp,0x1c
100006ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006f1:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100006f4:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
100006f7:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
100006fa:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100006fd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000700:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000706:	e8 fc ff ff ff       	call   10000707 <fpuDivide(_Float80, _Float80)+0x22>	10000707: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000070b:	59                   	pop    ecx
1000070c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000070f:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000715:	66 05 00 40          	add    ax,0x4000
10000719:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000071c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000720:	8d 75 dc             	lea    esi,[ebp-0x24]
10000723:	b9 03 00 00 00       	mov    ecx,0x3
10000728:	89 e7                	mov    edi,esp
1000072a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000072c:	53                   	push   ebx
1000072d:	e8 fc ff ff ff       	call   1000072e <fpuDivide(_Float80, _Float80)+0x49>	1000072e: R_386_PC32	fpuNormalise(_Float80)
10000732:	89 d8                	mov    eax,ebx
10000734:	8d 65 f4             	lea    esp,[ebp-0xc]
10000737:	5b                   	pop    ebx
10000738:	5e                   	pop    esi
10000739:	5f                   	pop    edi
1000073a:	5d                   	pop    ebp
1000073b:	c2 04 00             	ret    0x4

1000073e <fpuReciprocal(_Float80)>:
1000073e:	55                   	push   ebp
1000073f:	89 e5                	mov    ebp,esp
10000741:	57                   	push   edi
10000742:	56                   	push   esi
10000743:	53                   	push   ebx
10000744:	83 ec 2c             	sub    esp,0x2c
10000747:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000074a:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000074e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000755:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000075c:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000762:	8d 75 0c             	lea    esi,[ebp+0xc]
10000765:	b9 03 00 00 00       	mov    ecx,0x3
1000076a:	89 e7                	mov    edi,esp
1000076c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076e:	83 ec 0c             	sub    esp,0xc
10000771:	8d 75 dc             	lea    esi,[ebp-0x24]
10000774:	b9 03 00 00 00       	mov    ecx,0x3
10000779:	89 e7                	mov    edi,esp
1000077b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000077d:	53                   	push   ebx
1000077e:	e8 fc ff ff ff       	call   1000077f <fpuReciprocal(_Float80)+0x41>	1000077f: R_386_PC32	fpuDivide(_Float80, _Float80)
10000783:	89 d8                	mov    eax,ebx
10000785:	8d 65 f4             	lea    esp,[ebp-0xc]
10000788:	5b                   	pop    ebx
10000789:	5e                   	pop    esi
1000078a:	5f                   	pop    edi
1000078b:	5d                   	pop    ebp
1000078c:	c2 04 00             	ret    0x4

1000078f <fpuSquare(_Float80)>:
1000078f:	55                   	push   ebp
10000790:	89 e5                	mov    ebp,esp
10000792:	57                   	push   edi
10000793:	56                   	push   esi
10000794:	53                   	push   ebx
10000795:	83 ec 1c             	sub    esp,0x1c
10000798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000079b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000079e:	b9 03 00 00 00       	mov    ecx,0x3
100007a3:	89 e7                	mov    edi,esp
100007a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a7:	83 ec 0c             	sub    esp,0xc
100007aa:	8d 75 0c             	lea    esi,[ebp+0xc]
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	53                   	push   ebx
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSquare(_Float80)+0x29>	100007b8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007bc:	89 d8                	mov    eax,ebx
100007be:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c1:	5b                   	pop    ebx
100007c2:	5e                   	pop    esi
100007c3:	5f                   	pop    edi
100007c4:	5d                   	pop    ebp
100007c5:	c2 04 00             	ret    0x4

100007c8 <fpuInverseSqrt(_Float80)>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	57                   	push   edi
100007cc:	56                   	push   esi
100007cd:	53                   	push   ebx
100007ce:	83 ec 5c             	sub    esp,0x5c
100007d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007d4:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100007d8:	31 d2                	xor    edx,edx
100007da:	b9 03 00 00 00       	mov    ecx,0x3
100007df:	31 db                	xor    ebx,ebx
100007e1:	01 c9                	add    ecx,ecx
100007e3:	11 db                	adc    ebx,ebx
100007e5:	42                   	inc    edx
100007e6:	83 fa 3c             	cmp    edx,0x3c
100007e9:	75 f6                	jne    100007e1 <fpuInverseSqrt(_Float80)+0x19>
100007eb:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100007ee:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
100007f1:	8d 75 0c             	lea    esi,[ebp+0xc]
100007f4:	b9 03 00 00 00       	mov    ecx,0x3
100007f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007fe:	0f b7 d0             	movzx  edx,ax
10000801:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000807:	d1 fa                	sar    edx,1
10000809:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000080e:	29 d1                	sub    ecx,edx
10000810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000813:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000817:	48                   	dec    eax
10000818:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000081c:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000823:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000826:	83 ec 0c             	sub    esp,0xc
10000829:	b9 03 00 00 00       	mov    ecx,0x3
1000082e:	89 e7                	mov    edi,esp
10000830:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000835:	53                   	push   ebx
10000836:	e8 fc ff ff ff       	call   10000837 <fpuInverseSqrt(_Float80)+0x6f>	10000837: R_386_PC32	fpuSquare(_Float80)
1000083b:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
1000083f:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000843:	8d 45 d0             	lea    eax,[ebp-0x30]
10000846:	83 ec 14             	sub    esp,0x14
10000849:	8d 75 0c             	lea    esi,[ebp+0xc]
1000084c:	b9 03 00 00 00       	mov    ecx,0x3
10000851:	89 e7                	mov    edi,esp
10000853:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 de                	mov    esi,ebx
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	50                   	push   eax
10000864:	e8 fc ff ff ff       	call   10000865 <fpuInverseSqrt(_Float80)+0x9d>	10000865: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000869:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
1000086f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000872:	83 c4 1c             	add    esp,0x1c
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000087f:	89 c6                	mov    esi,eax
10000881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000883:	83 ec 0c             	sub    esp,0xc
10000886:	8d 75 b8             	lea    esi,[ebp-0x48]
10000889:	b9 03 00 00 00       	mov    ecx,0x3
1000088e:	89 e7                	mov    edi,esp
10000890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000892:	52                   	push   edx
10000893:	e8 fc ff ff ff       	call   10000894 <fpuInverseSqrt(_Float80)+0xcc>	10000894: R_386_PC32	fpuSub(_Float80, _Float80)
10000898:	8d 5d a8             	lea    ebx,[ebp-0x58]
1000089b:	50                   	push   eax
1000089c:	b9 03 00 00 00       	mov    ecx,0x3
100008a1:	89 e7                	mov    edi,esp
100008a3:	8d 55 dc             	lea    edx,[ebp-0x24]
100008a6:	89 d6                	mov    esi,edx
100008a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008aa:	83 ec 0c             	sub    esp,0xc
100008ad:	b9 03 00 00 00       	mov    ecx,0x3
100008b2:	89 e7                	mov    edi,esp
100008b4:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b9:	53                   	push   ebx
100008ba:	e8 fc ff ff ff       	call   100008bb <fpuInverseSqrt(_Float80)+0xf3>	100008bb: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008c7:	89 de                	mov    esi,ebx
100008c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008cb:	83 c4 2c             	add    esp,0x2c
100008ce:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008d1:	0f 85 4c ff ff ff    	jne    10000823 <fpuInverseSqrt(_Float80)+0x5b>
100008d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008da:	8d 65 f4             	lea    esp,[ebp-0xc]
100008dd:	5b                   	pop    ebx
100008de:	5e                   	pop    esi
100008df:	5f                   	pop    edi
100008e0:	5d                   	pop    ebp
100008e1:	c2 04 00             	ret    0x4

100008e4 <fpuSqrt(_Float80)>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	57                   	push   edi
100008e8:	56                   	push   esi
100008e9:	53                   	push   ebx
100008ea:	83 ec 38             	sub    esp,0x38
100008ed:	8d 5d d0             	lea    ebx,[ebp-0x30]
100008f0:	8d 75 0c             	lea    esi,[ebp+0xc]
100008f3:	b9 03 00 00 00       	mov    ecx,0x3
100008f8:	89 e7                	mov    edi,esp
100008fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <fpuSqrt(_Float80)+0x1a>	100008fe: R_386_PC32	fpuInverseSqrt(_Float80)
10000902:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000906:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000090d:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000914:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000091a:	83 ec 14             	sub    esp,0x14
1000091d:	b9 03 00 00 00       	mov    ecx,0x3
10000922:	89 e7                	mov    edi,esp
10000924:	89 de                	mov    esi,ebx
10000926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000928:	83 ec 0c             	sub    esp,0xc
1000092b:	8d 75 dc             	lea    esi,[ebp-0x24]
1000092e:	b9 03 00 00 00       	mov    ecx,0x3
10000933:	89 e7                	mov    edi,esp
10000935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093a:	e8 fc ff ff ff       	call   1000093b <fpuSqrt(_Float80)+0x57>	1000093b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8d 65 f4             	lea    esp,[ebp-0xc]
10000945:	5b                   	pop    ebx
10000946:	5e                   	pop    esi
10000947:	5f                   	pop    edi
10000948:	5d                   	pop    ebp
10000949:	c2 04 00             	ret    0x4

1000094c <fpuGetReg(int)>:
1000094c:	55                   	push   ebp
1000094d:	89 e5                	mov    ebp,esp
1000094f:	57                   	push   edi
10000950:	56                   	push   esi
10000951:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000954:	83 fe 07             	cmp    esi,0x7
10000957:	76 10                	jbe    10000969 <fpuGetReg(int)+0x1d>
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	68 82 23 00 10       	push   0x10002382	1000095d: R_386_32	.text
10000961:	e8 fc ff ff ff       	call   10000962 <fpuGetReg(int)+0x16>	10000962: R_386_PC32	Krnl::panic(char const*)
10000966:	83 c4 10             	add    esp,0x10
10000969:	a0 01 00 00 00       	mov    al,ds:0x1	1000096a: R_386_32	fpuState
1000096e:	c0 e8 03             	shr    al,0x3
10000971:	83 e0 07             	and    eax,0x7
10000974:	01 f0                	add    eax,esi
10000976:	b9 08 00 00 00       	mov    ecx,0x8
1000097b:	99                   	cdq    
1000097c:	f7 f9                	idiv   ecx
1000097e:	6b c2 0c             	imul   eax,edx,0xc
10000981:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000983: R_386_32	fpuState
10000987:	b9 03 00 00 00       	mov    ecx,0x3
1000098c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000098f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8d 65 f8             	lea    esp,[ebp-0x8]
10000997:	5e                   	pop    esi
10000998:	5f                   	pop    edi
10000999:	5d                   	pop    ebp
1000099a:	c2 04 00             	ret    0x4

1000099d <fpuSetReg(int, _Float80)>:
1000099d:	55                   	push   ebp
1000099e:	89 e5                	mov    ebp,esp
100009a0:	57                   	push   edi
100009a1:	56                   	push   esi
100009a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009a5:	83 ff 07             	cmp    edi,0x7
100009a8:	76 10                	jbe    100009ba <fpuSetReg(int, _Float80)+0x1d>
100009aa:	83 ec 0c             	sub    esp,0xc
100009ad:	68 82 23 00 10       	push   0x10002382	100009ae: R_386_32	.text
100009b2:	e8 fc ff ff ff       	call   100009b3 <fpuSetReg(int, _Float80)+0x16>	100009b3: R_386_PC32	Krnl::panic(char const*)
100009b7:	83 c4 10             	add    esp,0x10
100009ba:	a0 01 00 00 00       	mov    al,ds:0x1	100009bb: R_386_32	fpuState
100009bf:	c0 e8 03             	shr    al,0x3
100009c2:	83 e0 07             	and    eax,0x7
100009c5:	01 f8                	add    eax,edi
100009c7:	b9 08 00 00 00       	mov    ecx,0x8
100009cc:	99                   	cdq    
100009cd:	f7 f9                	idiv   ecx
100009cf:	6b c2 0c             	imul   eax,edx,0xc
100009d2:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009d4: R_386_32	fpuState
100009d8:	8d 75 0c             	lea    esi,[ebp+0xc]
100009db:	b9 03 00 00 00       	mov    ecx,0x3
100009e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009e2:	8d 65 f8             	lea    esp,[ebp-0x8]
100009e5:	5e                   	pop    esi
100009e6:	5f                   	pop    edi
100009e7:	5d                   	pop    ebp
100009e8:	c3                   	ret    

100009e9 <fpuInternalTo32(_Float80)>:
100009e9:	55                   	push   ebp
100009ea:	89 e5                	mov    ebp,esp
100009ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100009ef:	66 81 f9 7e 40       	cmp    cx,0x407e
100009f4:	76 0c                	jbe    10000a02 <fpuInternalTo32(_Float80)+0x19>
100009f6:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f8: R_386_32	fpuState
100009fd:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a02:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a06:	19 d2                	sbb    edx,edx
10000a08:	f7 d2                	not    edx
10000a0a:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a13:	c1 e8 06             	shr    eax,0x6
10000a16:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a1b:	c1 e1 17             	shl    ecx,0x17
10000a1e:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a24:	09 c8                	or     eax,ecx
10000a26:	09 d0                	or     eax,edx
10000a28:	5d                   	pop    ebp
10000a29:	c3                   	ret    

10000a2a <fpuInternalTo64(_Float80)>:
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	57                   	push   edi
10000a2e:	56                   	push   esi
10000a2f:	53                   	push   ebx
10000a30:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a33:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a38:	76 0c                	jbe    10000a46 <fpuInternalTo64(_Float80)+0x1c>
10000a3a:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a3c: R_386_32	fpuState
10000a41:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a46:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a4a:	19 c9                	sbb    ecx,ecx
10000a4c:	f7 d1                	not    ecx
10000a4e:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a5a:	0f ac d0 09          	shrd   eax,edx,0x9
10000a5e:	c1 ea 09             	shr    edx,0x9
10000a61:	89 c6                	mov    esi,eax
10000a63:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a69:	c1 e3 14             	shl    ebx,0x14
10000a6c:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a72:	09 da                	or     edx,ebx
10000a74:	09 ca                	or     edx,ecx
10000a76:	89 f0                	mov    eax,esi
10000a78:	5b                   	pop    ebx
10000a79:	5e                   	pop    esi
10000a7a:	5f                   	pop    edi
10000a7b:	5d                   	pop    ebp
10000a7c:	c3                   	ret    

10000a7d <fpu32ToInternal(unsigned int)>:
10000a7d:	55                   	push   ebp
10000a7e:	89 e5                	mov    ebp,esp
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a86:	89 d1                	mov    ecx,edx
10000a88:	c1 e9 1f             	shr    ecx,0x1f
10000a8b:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000a8e:	89 d1                	mov    ecx,edx
10000a90:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000a96:	c1 e1 06             	shl    ecx,0x6
10000a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a9f:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000aa5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000aa8:	c1 ea 17             	shr    edx,0x17
10000aab:	0f b6 d2             	movzx  edx,dl
10000aae:	66 81 c2 81 3f       	add    dx,0x3f81
10000ab3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ab7:	5d                   	pop    ebp
10000ab8:	c2 04 00             	ret    0x4

10000abb <fpu64ToInternal(unsigned long long)>:
10000abb:	55                   	push   ebp
10000abc:	89 e5                	mov    ebp,esp
10000abe:	57                   	push   edi
10000abf:	56                   	push   esi
10000ac0:	53                   	push   ebx
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000aca:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000acd:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000ad0:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000ad3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ad6:	c1 ea 1f             	shr    edx,0x1f
10000ad9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000adc:	89 f7                	mov    edi,esi
10000ade:	89 de                	mov    esi,ebx
10000ae0:	0f a4 f7 09          	shld   edi,esi,0x9
10000ae4:	c1 e6 09             	shl    esi,0x9
10000ae7:	89 f1                	mov    ecx,esi
10000ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000aef:	89 fa                	mov    edx,edi
10000af1:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000af7:	89 08                	mov    DWORD PTR [eax],ecx
10000af9:	81 ca 00 00 00 20    	or     edx,0x20000000
10000aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b05:	c1 ea 14             	shr    edx,0x14
10000b08:	66 81 e2 ff 07       	and    dx,0x7ff
10000b0d:	66 81 c2 01 3c       	add    dx,0x3c01
10000b12:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b16:	83 c4 0c             	add    esp,0xc
10000b19:	5b                   	pop    ebx
10000b1a:	5e                   	pop    esi
10000b1b:	5f                   	pop    edi
10000b1c:	5d                   	pop    ebp
10000b1d:	c2 04 00             	ret    0x4

10000b20 <fpuPush(_Float80)>:
10000b20:	55                   	push   ebp
10000b21:	89 e5                	mov    ebp,esp
10000b23:	57                   	push   edi
10000b24:	56                   	push   esi
10000b25:	a0 01 00 00 00       	mov    al,ds:0x1	10000b26: R_386_32	fpuState
10000b2a:	88 c1                	mov    cl,al
10000b2c:	c0 e9 03             	shr    cl,0x3
10000b2f:	89 cf                	mov    edi,ecx
10000b31:	83 e7 07             	and    edi,0x7
10000b34:	83 c7 07             	add    edi,0x7
10000b37:	89 fa                	mov    edx,edi
10000b39:	83 e2 07             	and    edx,0x7
10000b3c:	c1 e2 03             	shl    edx,0x3
10000b3f:	83 e0 c7             	and    eax,0xffffffc7
10000b42:	09 d0                	or     eax,edx
10000b44:	a2 01 00 00 00       	mov    ds:0x1,al	10000b45: R_386_32	fpuState
10000b49:	83 e7 07             	and    edi,0x7
10000b4c:	6b ff 0c             	imul   edi,edi,0xc
10000b4f:	81 c7 04 00 00 00    	add    edi,0x4	10000b51: R_386_32	fpuState
10000b55:	b9 03 00 00 00       	mov    ecx,0x3
10000b5a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b5f:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b60: R_386_32	fpuState
10000b64:	83 f8 08             	cmp    eax,0x8
10000b67:	75 09                	jne    10000b72 <fpuPush(_Float80)+0x52>
10000b69:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b6b: R_386_32	fpuState
10000b70:	eb 06                	jmp    10000b78 <fpuPush(_Float80)+0x58>
10000b72:	40                   	inc    eax
10000b73:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b74: R_386_32	fpuState
10000b78:	5e                   	pop    esi
10000b79:	5f                   	pop    edi
10000b7a:	5d                   	pop    ebp
10000b7b:	c3                   	ret    

10000b7c <fpuPop()>:
10000b7c:	55                   	push   ebp
10000b7d:	89 e5                	mov    ebp,esp
10000b7f:	57                   	push   edi
10000b80:	56                   	push   esi
10000b81:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000b83: R_386_32	fpuState
10000b87:	88 d0                	mov    al,dl
10000b89:	c0 e8 03             	shr    al,0x3
10000b8c:	83 e0 07             	and    eax,0x7
10000b8f:	6b f0 0c             	imul   esi,eax,0xc
10000b92:	81 c6 04 00 00 00    	add    esi,0x4	10000b94: R_386_32	fpuState
10000b98:	b9 03 00 00 00       	mov    ecx,0x3
10000b9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba2:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000ba9:	83 e0 38             	and    eax,0x38
10000bac:	83 e2 c7             	and    edx,0xffffffc7
10000baf:	09 c2                	or     edx,eax
10000bb1:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bb3: R_386_32	fpuState
10000bb7:	a1 64 00 00 00       	mov    eax,ds:0x64	10000bb8: R_386_32	fpuState
10000bbc:	85 c0                	test   eax,eax
10000bbe:	74 08                	je     10000bc8 <fpuPop()+0x4c>
10000bc0:	48                   	dec    eax
10000bc1:	a3 64 00 00 00       	mov    ds:0x64,eax	10000bc2: R_386_32	fpuState
10000bc6:	eb 07                	jmp    10000bcf <fpuPop()+0x53>
10000bc8:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bca: R_386_32	fpuState
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	5e                   	pop    esi
10000bd3:	5f                   	pop    edi
10000bd4:	5d                   	pop    ebp
10000bd5:	c2 04 00             	ret    0x4

10000bd8 <x87Handler(regs*)>:
10000bd8:	55                   	push   ebp
10000bd9:	89 e5                	mov    ebp,esp
10000bdb:	57                   	push   edi
10000bdc:	56                   	push   esi
10000bdd:	53                   	push   ebx
10000bde:	81 ec 6c 06 00 00    	sub    esp,0x66c
10000be4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000be7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bea:	89 85 90 f9 ff ff    	mov    DWORD PTR [ebp-0x670],eax
10000bf0:	c6 85 9a f9 ff ff 00 	mov    BYTE PTR [ebp-0x666],0x0
10000bf7:	c7 85 9c f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x664],0x2
10000c01:	8d 85 9b f9 ff ff    	lea    eax,[ebp-0x665]
10000c07:	50                   	push   eax
10000c08:	8d 85 9a f9 ff ff    	lea    eax,[ebp-0x666]
10000c0e:	50                   	push   eax
10000c0f:	8d 85 9c f9 ff ff    	lea    eax,[ebp-0x664]
10000c15:	50                   	push   eax
10000c16:	53                   	push   ebx
10000c17:	e8 fc ff ff ff       	call   10000c18 <x87Handler(regs*)+0x40>	10000c18: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c1c:	89 85 94 f9 ff ff    	mov    DWORD PTR [ebp-0x66c],eax
10000c22:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000c28:	8a 10                	mov    dl,BYTE PTR [eax]
10000c2a:	83 c4 10             	add    esp,0x10
10000c2d:	80 fa d9             	cmp    dl,0xd9
10000c30:	0f 85 e8 03 00 00    	jne    1000101e <x87Handler(regs*)+0x446>
10000c36:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c3a:	8d 50 20             	lea    edx,[eax+0x20]
10000c3d:	80 fa 0e             	cmp    dl,0xe
10000c40:	0f 87 fa 01 00 00    	ja     10000e40 <x87Handler(regs*)+0x268>
10000c46:	0f b6 d2             	movzx  edx,dl
10000c49:	ff 24 95 a8 23 00 10 	jmp    DWORD PTR [edx*4+0x100023a8]	10000c4c: R_386_32	.text
10000c50:	8d b5 a0 f9 ff ff    	lea    esi,[ebp-0x660]
10000c56:	57                   	push   edi
10000c57:	57                   	push   edi
10000c58:	6a 00                	push   0x0
10000c5a:	56                   	push   esi
10000c5b:	e8 fc ff ff ff       	call   10000c5c <x87Handler(regs*)+0x84>	10000c5c: R_386_PC32	fpuGetReg(int)
10000c60:	8d 95 ac f9 ff ff    	lea    edx,[ebp-0x654]
10000c66:	b9 03 00 00 00       	mov    ecx,0x3
10000c6b:	89 e7                	mov    edi,esp
10000c6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c6f:	52                   	push   edx
10000c70:	e8 fc ff ff ff       	call   10000c71 <x87Handler(regs*)+0x99>	10000c71: R_386_PC32	fpuChs(_Float80)
10000c75:	b9 03 00 00 00       	mov    ecx,0x3
10000c7a:	89 e7                	mov    edi,esp
10000c7c:	89 d6                	mov    esi,edx
10000c7e:	eb 49                	jmp    10000cc9 <x87Handler(regs*)+0xf1>
10000c80:	8d 85 b8 f9 ff ff    	lea    eax,[ebp-0x648]
10000c86:	51                   	push   ecx
10000c87:	51                   	push   ecx
10000c88:	6a 00                	push   0x0
10000c8a:	50                   	push   eax
10000c8b:	e8 fc ff ff ff       	call   10000c8c <x87Handler(regs*)+0xb4>	10000c8c: R_386_PC32	fpuGetReg(int)
10000c90:	8b 85 b8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x648]
10000c96:	8b 95 bc f9 ff ff    	mov    edx,DWORD PTR [ebp-0x644]
10000c9c:	89 85 c4 f9 ff ff    	mov    DWORD PTR [ebp-0x63c],eax
10000ca2:	89 95 c8 f9 ff ff    	mov    DWORD PTR [ebp-0x638],edx
10000ca8:	8b 85 c0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x640]
10000cae:	66 89 85 cc f9 ff ff 	mov    WORD PTR [ebp-0x634],ax
10000cb5:	c6 85 ce f9 ff ff 00 	mov    BYTE PTR [ebp-0x632],0x0
10000cbc:	8d b5 c4 f9 ff ff    	lea    esi,[ebp-0x63c]
10000cc2:	b9 03 00 00 00       	mov    ecx,0x3
10000cc7:	89 e7                	mov    edi,esp
10000cc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ccb:	6a 00                	push   0x0
10000ccd:	e8 fc ff ff ff       	call   10000cce <x87Handler(regs*)+0xf6>	10000cce: R_386_PC32	fpuSetReg(int, _Float80)
10000cd2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000cd6:	83 c4 10             	add    esp,0x10
10000cd9:	b0 01                	mov    al,0x1
10000cdb:	e9 84 16 00 00       	jmp    10002364 <x87Handler(regs*)+0x178c>
10000ce0:	c6 85 da f9 ff ff 00 	mov    BYTE PTR [ebp-0x626],0x0
10000ce7:	c7 85 d0 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x630],0x0
10000cf1:	c7 85 d4 f9 ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x62c],0x20000000
10000cfb:	66 c7 85 d8 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x628],0x4000
10000d04:	83 ec 10             	sub    esp,0x10
10000d07:	8d b5 d0 f9 ff ff    	lea    esi,[ebp-0x630]
10000d0d:	eb 2d                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d0f:	c6 85 e6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61a],0x0
10000d16:	c7 85 dc f9 ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x624],0xf346e2be
10000d20:	c7 85 e0 f9 ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x620],0x35269e12
10000d2a:	66 c7 85 e4 f9 ff ff 01 40 	mov    WORD PTR [ebp-0x61c],0x4001
10000d33:	83 ec 10             	sub    esp,0x10
10000d36:	8d b5 dc f9 ff ff    	lea    esi,[ebp-0x624]
10000d3c:	b9 03 00 00 00       	mov    ecx,0x3
10000d41:	89 e7                	mov    edi,esp
10000d43:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d45:	e8 fc ff ff ff       	call   10000d46 <x87Handler(regs*)+0x16e>	10000d46: R_386_PC32	fpuPush(_Float80)
10000d4a:	eb 86                	jmp    10000cd2 <x87Handler(regs*)+0xfa>
10000d4c:	c6 85 f2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x60e],0x0
10000d53:	c7 85 e8 f9 ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x618],0x5705fc1c
10000d5d:	c7 85 ec f9 ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x614],0x2e2a8eca
10000d67:	66 c7 85 f0 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x610],0x4000
10000d70:	83 ec 10             	sub    esp,0x10
10000d73:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000d79:	eb c1                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d7b:	c6 85 fe f9 ff ff 00 	mov    BYTE PTR [ebp-0x602],0x0
10000d82:	c7 85 f4 f9 ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x60c],0x885a308c
10000d8c:	c7 85 f8 f9 ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x608],0x3243f6a8
10000d96:	66 c7 85 fc f9 ff ff 01 40 	mov    WORD PTR [ebp-0x604],0x4001
10000d9f:	83 ec 10             	sub    esp,0x10
10000da2:	8d b5 f4 f9 ff ff    	lea    esi,[ebp-0x60c]
10000da8:	eb 92                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000daa:	c6 85 0a fa ff ff 00 	mov    BYTE PTR [ebp-0x5f6],0x0
10000db1:	c7 85 00 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x600],0x3ef3fde6
10000dbb:	c7 85 04 fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5fc],0x268826a1
10000dc5:	66 c7 85 08 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5f8],0x3ffe
10000dce:	83 ec 10             	sub    esp,0x10
10000dd1:	8d b5 00 fa ff ff    	lea    esi,[ebp-0x600]
10000dd7:	e9 60 ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000ddc:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000de3:	c7 85 0c fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5f4],0xf473de68
10000ded:	c7 85 10 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5f0],0x2c5c85fd
10000df7:	66 c7 85 14 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5ec],0x3fff
10000e00:	83 ec 10             	sub    esp,0x10
10000e03:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000e09:	e9 2e ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e0e:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000e15:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000e1f:	c7 85 1c fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e4],0x0
10000e29:	66 c7 85 20 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5e0],0x3fff
10000e32:	83 ec 10             	sub    esp,0x10
10000e35:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000e3b:	e9 fc fe ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e40:	8d 50 40             	lea    edx,[eax+0x40]
10000e43:	80 fa 07             	cmp    dl,0x7
10000e46:	77 27                	ja     10000e6f <x87Handler(regs*)+0x297>
10000e48:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
10000e4e:	57                   	push   edi
10000e4f:	57                   	push   edi
10000e50:	2d c0 00 00 00       	sub    eax,0xc0
10000e55:	50                   	push   eax
10000e56:	56                   	push   esi
10000e57:	e8 fc ff ff ff       	call   10000e58 <x87Handler(regs*)+0x280>	10000e58: R_386_PC32	fpuGetReg(int)
10000e5c:	83 ec 14             	sub    esp,0x14
10000e5f:	b9 03 00 00 00       	mov    ecx,0x3
10000e64:	89 e7                	mov    edi,esp
10000e66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e68:	e8 fc ff ff ff       	call   10000e69 <x87Handler(regs*)+0x291>	10000e69: R_386_PC32	fpuPush(_Float80)
10000e6d:	eb 63                	jmp    10000ed2 <x87Handler(regs*)+0x2fa>
10000e6f:	8d 50 38             	lea    edx,[eax+0x38]
10000e72:	80 fa 07             	cmp    dl,0x7
10000e75:	77 64                	ja     10000edb <x87Handler(regs*)+0x303>
10000e77:	8d 55 dc             	lea    edx,[ebp-0x24]
10000e7a:	56                   	push   esi
10000e7b:	56                   	push   esi
10000e7c:	2d c8 00 00 00       	sub    eax,0xc8
10000e81:	50                   	push   eax
10000e82:	52                   	push   edx
10000e83:	e8 fc ff ff ff       	call   10000e84 <x87Handler(regs*)+0x2ac>	10000e84: R_386_PC32	fpuGetReg(int)
10000e88:	8d b5 38 fb ff ff    	lea    esi,[ebp-0x4c8]
10000e8e:	83 ec 0c             	sub    esp,0xc
10000e91:	6a 00                	push   0x0
10000e93:	56                   	push   esi
10000e94:	e8 fc ff ff ff       	call   10000e95 <x87Handler(regs*)+0x2bd>	10000e95: R_386_PC32	fpuGetReg(int)
10000e99:	83 c4 10             	add    esp,0x10
10000e9c:	b9 03 00 00 00       	mov    ecx,0x3
10000ea1:	89 e7                	mov    edi,esp
10000ea3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ea5:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000eab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000eaf:	2d c8 00 00 00       	sub    eax,0xc8
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <x87Handler(regs*)+0x2de>	10000eb6: R_386_PC32	fpuSetReg(int, _Float80)
10000eba:	83 ec 0c             	sub    esp,0xc
10000ebd:	b9 03 00 00 00       	mov    ecx,0x3
10000ec2:	89 e7                	mov    edi,esp
10000ec4:	8d 55 dc             	lea    edx,[ebp-0x24]
10000ec7:	89 d6                	mov    esi,edx
10000ec9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ecb:	6a 00                	push   0x0
10000ecd:	e8 fc ff ff ff       	call   10000ece <x87Handler(regs*)+0x2f6>	10000ece: R_386_PC32	fpuSetReg(int, _Float80)
10000ed2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000ed6:	e9 f8 00 00 00       	jmp    10000fd3 <x87Handler(regs*)+0x3fb>
10000edb:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10000ee1:	84 d2                	test   dl,dl
10000ee3:	75 4f                	jne    10000f34 <x87Handler(regs*)+0x35c>
10000ee5:	83 ec 0c             	sub    esp,0xc
10000ee8:	68 95 23 00 10       	push   0x10002395	10000ee9: R_386_32	.text
10000eed:	e8 fc ff ff ff       	call   10000eee <x87Handler(regs*)+0x316>	10000eee: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ef2:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10000ef8:	59                   	pop    ecx
10000ef9:	5f                   	pop    edi
10000efa:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f00:	ff 30                	push   DWORD PTR [eax]
10000f02:	56                   	push   esi
10000f03:	e8 fc ff ff ff       	call   10000f04 <x87Handler(regs*)+0x32c>	10000f04: R_386_PC32	fpu32ToInternal(unsigned int)
10000f08:	83 ec 14             	sub    esp,0x14
10000f0b:	b9 03 00 00 00       	mov    ecx,0x3
10000f10:	89 e7                	mov    edi,esp
10000f12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f14:	e8 fc ff ff ff       	call   10000f15 <x87Handler(regs*)+0x33d>	10000f15: R_386_PC32	fpuPush(_Float80)
10000f19:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10000f1f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000f22:	83 c4 14             	add    esp,0x14
10000f25:	68 9f 23 00 10       	push   0x1000239f	10000f26: R_386_32	.text
10000f2a:	e8 fc ff ff ff       	call   10000f2b <x87Handler(regs*)+0x353>	10000f2b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f2f:	e9 a2 fd ff ff       	jmp    10000cd6 <x87Handler(regs*)+0xfe>
10000f34:	80 fa 03             	cmp    dl,0x3
10000f37:	75 2a                	jne    10000f63 <x87Handler(regs*)+0x38b>
10000f39:	8d b5 e4 fd ff ff    	lea    esi,[ebp-0x21c]
10000f3f:	83 ec 0c             	sub    esp,0xc
10000f42:	56                   	push   esi
10000f43:	e8 fc ff ff ff       	call   10000f44 <x87Handler(regs*)+0x36c>	10000f44: R_386_PC32	fpuPop()
10000f48:	83 ec 14             	sub    esp,0x14
10000f4b:	b9 03 00 00 00       	mov    ecx,0x3
10000f50:	89 e7                	mov    edi,esp
10000f52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f54:	e8 fc ff ff ff       	call   10000f55 <x87Handler(regs*)+0x37d>	10000f55: R_386_PC32	fpuInternalTo32(_Float80)
10000f59:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000f5f:	89 02                	mov    DWORD PTR [edx],eax
10000f61:	eb 67                	jmp    10000fca <x87Handler(regs*)+0x3f2>
10000f63:	80 fa 05             	cmp    dl,0x5
10000f66:	75 14                	jne    10000f7c <x87Handler(regs*)+0x3a4>
10000f68:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f6e:	66 8b 00             	mov    ax,WORD PTR [eax]
10000f71:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000f73: R_386_32	fpuState
10000f77:	e9 94 00 00 00       	jmp    10001010 <x87Handler(regs*)+0x438>
10000f7c:	31 c0                	xor    eax,eax
10000f7e:	80 fa 07             	cmp    dl,0x7
10000f81:	0f 85 dd 13 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10000f87:	66 a1 02 00 00 00    	mov    ax,ds:0x2	10000f89: R_386_32	fpuState
10000f8d:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000f93:	66 89 02             	mov    WORD PTR [edx],ax
10000f96:	eb 78                	jmp    10001010 <x87Handler(regs*)+0x438>
10000f98:	80 fa 02             	cmp    dl,0x2
10000f9b:	0f 85 a0 12 00 00    	jne    10002241 <x87Handler(regs*)+0x1669>
10000fa1:	8d 75 94             	lea    esi,[ebp-0x6c]
10000fa4:	57                   	push   edi
10000fa5:	57                   	push   edi
10000fa6:	6a 00                	push   0x0
10000fa8:	56                   	push   esi
10000fa9:	e8 fc ff ff ff       	call   10000faa <x87Handler(regs*)+0x3d2>	10000faa: R_386_PC32	fpuGetReg(int)
10000fae:	83 ec 14             	sub    esp,0x14
10000fb1:	b9 03 00 00 00       	mov    ecx,0x3
10000fb6:	89 e7                	mov    edi,esp
10000fb8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fba:	e8 fc ff ff ff       	call   10000fbb <x87Handler(regs*)+0x3e3>	10000fbb: R_386_PC32	fpuInternalTo64(_Float80)
10000fbf:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
10000fc5:	89 01                	mov    DWORD PTR [ecx],eax
10000fc7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10000fca:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10000fd0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000fd3:	83 c4 20             	add    esp,0x20
10000fd6:	e9 fe fc ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10000fdb:	80 fa 02             	cmp    dl,0x2
10000fde:	0f 85 a9 0e 00 00    	jne    10001e8d <x87Handler(regs*)+0x12b5>
10000fe4:	8d b5 68 fe ff ff    	lea    esi,[ebp-0x198]
10000fea:	50                   	push   eax
10000feb:	50                   	push   eax
10000fec:	6a 00                	push   0x0
10000fee:	56                   	push   esi
10000fef:	e8 fc ff ff ff       	call   10000ff0 <x87Handler(regs*)+0x418>	10000ff0: R_386_PC32	fpuGetReg(int)
10000ff4:	83 ec 14             	sub    esp,0x14
10000ff7:	b9 03 00 00 00       	mov    ecx,0x3
10000ffc:	89 e7                	mov    edi,esp
10000ffe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001000:	e8 fc ff ff ff       	call   10001001 <x87Handler(regs*)+0x429>	10001001: R_386_PC32	fpuFloatToLong(_Float80)
10001005:	83 c4 20             	add    esp,0x20
10001008:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
1000100e:	89 02                	mov    DWORD PTR [edx],eax
10001010:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10001016:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001019:	e9 bb fc ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
1000101e:	80 fa d8             	cmp    dl,0xd8
10001021:	0f 85 56 03 00 00    	jne    1000137d <x87Handler(regs*)+0x7a5>
10001027:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000102d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001031:	8d 50 40             	lea    edx,[eax+0x40]
10001034:	80 fa 07             	cmp    dl,0x7
10001037:	77 64                	ja     1000109d <x87Handler(regs*)+0x4c5>
10001039:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
1000103f:	57                   	push   edi
10001040:	57                   	push   edi
10001041:	2d c0 00 00 00       	sub    eax,0xc0
10001046:	50                   	push   eax
10001047:	56                   	push   esi
10001048:	e8 fc ff ff ff       	call   10001049 <x87Handler(regs*)+0x471>	10001049: R_386_PC32	fpuGetReg(int)
1000104d:	8d 95 30 fa ff ff    	lea    edx,[ebp-0x5d0]
10001053:	83 ec 0c             	sub    esp,0xc
10001056:	6a 00                	push   0x0
10001058:	52                   	push   edx
10001059:	e8 fc ff ff ff       	call   1000105a <x87Handler(regs*)+0x482>	1000105a: R_386_PC32	fpuGetReg(int)
1000105e:	8d 85 3c fa ff ff    	lea    eax,[ebp-0x5c4]
10001064:	52                   	push   edx
10001065:	b9 03 00 00 00       	mov    ecx,0x3
1000106a:	89 e7                	mov    edi,esp
1000106c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000106e:	83 ec 0c             	sub    esp,0xc
10001071:	b9 03 00 00 00       	mov    ecx,0x3
10001076:	89 e7                	mov    edi,esp
10001078:	8d 95 30 fa ff ff    	lea    edx,[ebp-0x5d0]
1000107e:	89 d6                	mov    esi,edx
10001080:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001082:	50                   	push   eax
10001083:	e8 fc ff ff ff       	call   10001084 <x87Handler(regs*)+0x4ac>	10001084: R_386_PC32	fpuAdd(_Float80, _Float80)
10001088:	83 c4 20             	add    esp,0x20
1000108b:	b9 03 00 00 00       	mov    ecx,0x3
10001090:	89 e7                	mov    edi,esp
10001092:	8d 85 3c fa ff ff    	lea    eax,[ebp-0x5c4]
10001098:	e9 e0 01 00 00       	jmp    1000127d <x87Handler(regs*)+0x6a5>
1000109d:	8d 50 38             	lea    edx,[eax+0x38]
100010a0:	80 fa 07             	cmp    dl,0x7
100010a3:	77 64                	ja     10001109 <x87Handler(regs*)+0x531>
100010a5:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
100010ab:	52                   	push   edx
100010ac:	52                   	push   edx
100010ad:	2d c8 00 00 00       	sub    eax,0xc8
100010b2:	50                   	push   eax
100010b3:	56                   	push   esi
100010b4:	e8 fc ff ff ff       	call   100010b5 <x87Handler(regs*)+0x4dd>	100010b5: R_386_PC32	fpuGetReg(int)
100010b9:	8d 95 54 fa ff ff    	lea    edx,[ebp-0x5ac]
100010bf:	83 ec 0c             	sub    esp,0xc
100010c2:	6a 00                	push   0x0
100010c4:	52                   	push   edx
100010c5:	e8 fc ff ff ff       	call   100010c6 <x87Handler(regs*)+0x4ee>	100010c6: R_386_PC32	fpuGetReg(int)
100010ca:	8d 85 60 fa ff ff    	lea    eax,[ebp-0x5a0]
100010d0:	51                   	push   ecx
100010d1:	b9 03 00 00 00       	mov    ecx,0x3
100010d6:	89 e7                	mov    edi,esp
100010d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010da:	83 ec 0c             	sub    esp,0xc
100010dd:	b9 03 00 00 00       	mov    ecx,0x3
100010e2:	89 e7                	mov    edi,esp
100010e4:	8d 95 54 fa ff ff    	lea    edx,[ebp-0x5ac]
100010ea:	89 d6                	mov    esi,edx
100010ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010ee:	50                   	push   eax
100010ef:	e8 fc ff ff ff       	call   100010f0 <x87Handler(regs*)+0x518>	100010f0: R_386_PC32	fpuMultiply(_Float80, _Float80)
100010f4:	83 c4 20             	add    esp,0x20
100010f7:	b9 03 00 00 00       	mov    ecx,0x3
100010fc:	89 e7                	mov    edi,esp
100010fe:	8d 85 60 fa ff ff    	lea    eax,[ebp-0x5a0]
10001104:	e9 74 01 00 00       	jmp    1000127d <x87Handler(regs*)+0x6a5>
10001109:	8d 50 30             	lea    edx,[eax+0x30]
1000110c:	80 fa 07             	cmp    dl,0x7
1000110f:	77 45                	ja     10001156 <x87Handler(regs*)+0x57e>
10001111:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
10001117:	57                   	push   edi
10001118:	57                   	push   edi
10001119:	2d d0 00 00 00       	sub    eax,0xd0
1000111e:	50                   	push   eax
1000111f:	56                   	push   esi
10001120:	e8 fc ff ff ff       	call   10001121 <x87Handler(regs*)+0x549>	10001121: R_386_PC32	fpuGetReg(int)
10001125:	8d 85 78 fa ff ff    	lea    eax,[ebp-0x588]
1000112b:	83 ec 0c             	sub    esp,0xc
1000112e:	6a 00                	push   0x0
10001130:	50                   	push   eax
10001131:	e8 fc ff ff ff       	call   10001132 <x87Handler(regs*)+0x55a>	10001132: R_386_PC32	fpuGetReg(int)
10001136:	50                   	push   eax
10001137:	50                   	push   eax
10001138:	b9 03 00 00 00       	mov    ecx,0x3
1000113d:	89 e7                	mov    edi,esp
1000113f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001141:	83 ec 0c             	sub    esp,0xc
10001144:	b9 03 00 00 00       	mov    ecx,0x3
10001149:	89 e7                	mov    edi,esp
1000114b:	8d 85 78 fa ff ff    	lea    eax,[ebp-0x588]
10001151:	e9 c6 07 00 00       	jmp    1000191c <x87Handler(regs*)+0xd44>
10001156:	8d 50 28             	lea    edx,[eax+0x28]
10001159:	80 fa 07             	cmp    dl,0x7
1000115c:	77 45                	ja     100011a3 <x87Handler(regs*)+0x5cb>
1000115e:	8d b5 84 fa ff ff    	lea    esi,[ebp-0x57c]
10001164:	52                   	push   edx
10001165:	52                   	push   edx
10001166:	2d d8 00 00 00       	sub    eax,0xd8
1000116b:	50                   	push   eax
1000116c:	56                   	push   esi
1000116d:	e8 fc ff ff ff       	call   1000116e <x87Handler(regs*)+0x596>	1000116e: R_386_PC32	fpuGetReg(int)
10001172:	8d 85 90 fa ff ff    	lea    eax,[ebp-0x570]
10001178:	83 ec 0c             	sub    esp,0xc
1000117b:	6a 00                	push   0x0
1000117d:	50                   	push   eax
1000117e:	e8 fc ff ff ff       	call   1000117f <x87Handler(regs*)+0x5a7>	1000117f: R_386_PC32	fpuGetReg(int)
10001183:	51                   	push   ecx
10001184:	51                   	push   ecx
10001185:	b9 03 00 00 00       	mov    ecx,0x3
1000118a:	89 e7                	mov    edi,esp
1000118c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000118e:	83 ec 0c             	sub    esp,0xc
10001191:	b9 03 00 00 00       	mov    ecx,0x3
10001196:	89 e7                	mov    edi,esp
10001198:	8d 85 90 fa ff ff    	lea    eax,[ebp-0x570]
1000119e:	e9 d7 07 00 00       	jmp    1000197a <x87Handler(regs*)+0xda2>
100011a3:	8d 50 20             	lea    edx,[eax+0x20]
100011a6:	80 fa 07             	cmp    dl,0x7
100011a9:	77 61                	ja     1000120c <x87Handler(regs*)+0x634>
100011ab:	8d b5 9c fa ff ff    	lea    esi,[ebp-0x564]
100011b1:	51                   	push   ecx
100011b2:	51                   	push   ecx
100011b3:	2d e0 00 00 00       	sub    eax,0xe0
100011b8:	50                   	push   eax
100011b9:	56                   	push   esi
100011ba:	e8 fc ff ff ff       	call   100011bb <x87Handler(regs*)+0x5e3>	100011bb: R_386_PC32	fpuGetReg(int)
100011bf:	8d 95 a8 fa ff ff    	lea    edx,[ebp-0x558]
100011c5:	83 ec 0c             	sub    esp,0xc
100011c8:	6a 00                	push   0x0
100011ca:	52                   	push   edx
100011cb:	e8 fc ff ff ff       	call   100011cc <x87Handler(regs*)+0x5f4>	100011cc: R_386_PC32	fpuGetReg(int)
100011d0:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
100011d6:	57                   	push   edi
100011d7:	b9 03 00 00 00       	mov    ecx,0x3
100011dc:	89 e7                	mov    edi,esp
100011de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011e0:	83 ec 0c             	sub    esp,0xc
100011e3:	b9 03 00 00 00       	mov    ecx,0x3
100011e8:	89 e7                	mov    edi,esp
100011ea:	8d 95 a8 fa ff ff    	lea    edx,[ebp-0x558]
100011f0:	89 d6                	mov    esi,edx
100011f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011f4:	50                   	push   eax
100011f5:	e8 fc ff ff ff       	call   100011f6 <x87Handler(regs*)+0x61e>	100011f6: R_386_PC32	fpuSub(_Float80, _Float80)
100011fa:	83 c4 20             	add    esp,0x20
100011fd:	b9 03 00 00 00       	mov    ecx,0x3
10001202:	89 e7                	mov    edi,esp
10001204:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
1000120a:	eb 71                	jmp    1000127d <x87Handler(regs*)+0x6a5>
1000120c:	8d 50 18             	lea    edx,[eax+0x18]
1000120f:	80 fa 07             	cmp    dl,0x7
10001212:	77 70                	ja     10001284 <x87Handler(regs*)+0x6ac>
10001214:	8d b5 c0 fa ff ff    	lea    esi,[ebp-0x540]
1000121a:	50                   	push   eax
1000121b:	50                   	push   eax
1000121c:	6a 00                	push   0x0
1000121e:	56                   	push   esi
1000121f:	e8 fc ff ff ff       	call   10001220 <x87Handler(regs*)+0x648>	10001220: R_386_PC32	fpuGetReg(int)
10001224:	8d 95 cc fa ff ff    	lea    edx,[ebp-0x534]
1000122a:	83 ec 0c             	sub    esp,0xc
1000122d:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001233:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001237:	2d e8 00 00 00       	sub    eax,0xe8
1000123c:	50                   	push   eax
1000123d:	52                   	push   edx
1000123e:	e8 fc ff ff ff       	call   1000123f <x87Handler(regs*)+0x667>	1000123f: R_386_PC32	fpuGetReg(int)
10001243:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
10001249:	52                   	push   edx
1000124a:	b9 03 00 00 00       	mov    ecx,0x3
1000124f:	89 e7                	mov    edi,esp
10001251:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001253:	83 ec 0c             	sub    esp,0xc
10001256:	b9 03 00 00 00       	mov    ecx,0x3
1000125b:	89 e7                	mov    edi,esp
1000125d:	8d 95 cc fa ff ff    	lea    edx,[ebp-0x534]
10001263:	89 d6                	mov    esi,edx
10001265:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001267:	50                   	push   eax
10001268:	e8 fc ff ff ff       	call   10001269 <x87Handler(regs*)+0x691>	10001269: R_386_PC32	fpuSub(_Float80, _Float80)
1000126d:	83 c4 20             	add    esp,0x20
10001270:	b9 03 00 00 00       	mov    ecx,0x3
10001275:	89 e7                	mov    edi,esp
10001277:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
1000127d:	89 c6                	mov    esi,eax
1000127f:	e9 45 fa ff ff       	jmp    10000cc9 <x87Handler(regs*)+0xf1>
10001284:	8d 50 10             	lea    edx,[eax+0x10]
10001287:	80 fa 07             	cmp    dl,0x7
1000128a:	77 61                	ja     100012ed <x87Handler(regs*)+0x715>
1000128c:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
10001292:	51                   	push   ecx
10001293:	51                   	push   ecx
10001294:	2d f0 00 00 00       	sub    eax,0xf0
10001299:	50                   	push   eax
1000129a:	56                   	push   esi
1000129b:	e8 fc ff ff ff       	call   1000129c <x87Handler(regs*)+0x6c4>	1000129c: R_386_PC32	fpuGetReg(int)
100012a0:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
100012a6:	83 ec 0c             	sub    esp,0xc
100012a9:	6a 00                	push   0x0
100012ab:	52                   	push   edx
100012ac:	e8 fc ff ff ff       	call   100012ad <x87Handler(regs*)+0x6d5>	100012ad: R_386_PC32	fpuGetReg(int)
100012b1:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
100012b7:	57                   	push   edi
100012b8:	b9 03 00 00 00       	mov    ecx,0x3
100012bd:	89 e7                	mov    edi,esp
100012bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012c1:	83 ec 0c             	sub    esp,0xc
100012c4:	b9 03 00 00 00       	mov    ecx,0x3
100012c9:	89 e7                	mov    edi,esp
100012cb:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
100012d1:	89 d6                	mov    esi,edx
100012d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012d5:	50                   	push   eax
100012d6:	e8 fc ff ff ff       	call   100012d7 <x87Handler(regs*)+0x6ff>	100012d7: R_386_PC32	fpuDivide(_Float80, _Float80)
100012db:	83 c4 20             	add    esp,0x20
100012de:	b9 03 00 00 00       	mov    ecx,0x3
100012e3:	89 e7                	mov    edi,esp
100012e5:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
100012eb:	eb 71                	jmp    1000135e <x87Handler(regs*)+0x786>
100012ed:	3c f7                	cmp    al,0xf7
100012ef:	0f 86 86 07 00 00    	jbe    10001a7b <x87Handler(regs*)+0xea3>
100012f5:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
100012fb:	50                   	push   eax
100012fc:	50                   	push   eax
100012fd:	6a 00                	push   0x0
100012ff:	56                   	push   esi
10001300:	e8 fc ff ff ff       	call   10001301 <x87Handler(regs*)+0x729>	10001301: R_386_PC32	fpuGetReg(int)
10001305:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
1000130b:	83 ec 0c             	sub    esp,0xc
1000130e:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001318:	2d f8 00 00 00       	sub    eax,0xf8
1000131d:	50                   	push   eax
1000131e:	52                   	push   edx
1000131f:	e8 fc ff ff ff       	call   10001320 <x87Handler(regs*)+0x748>	10001320: R_386_PC32	fpuGetReg(int)
10001324:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
1000132a:	52                   	push   edx
1000132b:	b9 03 00 00 00       	mov    ecx,0x3
10001330:	89 e7                	mov    edi,esp
10001332:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001334:	83 ec 0c             	sub    esp,0xc
10001337:	b9 03 00 00 00       	mov    ecx,0x3
1000133c:	89 e7                	mov    edi,esp
1000133e:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
10001344:	89 d6                	mov    esi,edx
10001346:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001348:	50                   	push   eax
10001349:	e8 fc ff ff ff       	call   1000134a <x87Handler(regs*)+0x772>	1000134a: R_386_PC32	fpuDivide(_Float80, _Float80)
1000134e:	83 c4 20             	add    esp,0x20
10001351:	b9 03 00 00 00       	mov    ecx,0x3
10001356:	89 e7                	mov    edi,esp
10001358:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
1000135e:	89 c6                	mov    esi,eax
10001360:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001362:	6a 00                	push   0x0
10001364:	e8 fc ff ff ff       	call   10001365 <x87Handler(regs*)+0x78d>	10001365: R_386_PC32	fpuSetReg(int, _Float80)
10001369:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000136d:	8d 45 dc             	lea    eax,[ebp-0x24]
10001370:	89 04 24             	mov    DWORD PTR [esp],eax
10001373:	e8 fc ff ff ff       	call   10001374 <x87Handler(regs*)+0x79c>	10001374: R_386_PC32	fpuPop()
10001378:	e9 d8 0c 00 00       	jmp    10002055 <x87Handler(regs*)+0x147d>
1000137d:	80 fa dc             	cmp    dl,0xdc
10001380:	0f 85 94 01 00 00    	jne    1000151a <x87Handler(regs*)+0x942>
10001386:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000138c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001390:	8d 50 40             	lea    edx,[eax+0x40]
10001393:	80 fa 07             	cmp    dl,0x7
10001396:	77 77                	ja     1000140f <x87Handler(regs*)+0x837>
10001398:	8d b5 44 fb ff ff    	lea    esi,[ebp-0x4bc]
1000139e:	52                   	push   edx
1000139f:	52                   	push   edx
100013a0:	2d c0 00 00 00       	sub    eax,0xc0
100013a5:	50                   	push   eax
100013a6:	56                   	push   esi
100013a7:	e8 fc ff ff ff       	call   100013a8 <x87Handler(regs*)+0x7d0>	100013a8: R_386_PC32	fpuGetReg(int)
100013ac:	8d 95 50 fb ff ff    	lea    edx,[ebp-0x4b0]
100013b2:	83 ec 0c             	sub    esp,0xc
100013b5:	6a 00                	push   0x0
100013b7:	52                   	push   edx
100013b8:	e8 fc ff ff ff       	call   100013b9 <x87Handler(regs*)+0x7e1>	100013b9: R_386_PC32	fpuGetReg(int)
100013bd:	8d 85 5c fb ff ff    	lea    eax,[ebp-0x4a4]
100013c3:	51                   	push   ecx
100013c4:	b9 03 00 00 00       	mov    ecx,0x3
100013c9:	89 e7                	mov    edi,esp
100013cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013cd:	83 ec 0c             	sub    esp,0xc
100013d0:	b9 03 00 00 00       	mov    ecx,0x3
100013d5:	89 e7                	mov    edi,esp
100013d7:	8d 95 50 fb ff ff    	lea    edx,[ebp-0x4b0]
100013dd:	89 d6                	mov    esi,edx
100013df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013e1:	50                   	push   eax
100013e2:	e8 fc ff ff ff       	call   100013e3 <x87Handler(regs*)+0x80b>	100013e3: R_386_PC32	fpuAdd(_Float80, _Float80)
100013e7:	83 c4 20             	add    esp,0x20
100013ea:	b9 03 00 00 00       	mov    ecx,0x3
100013ef:	89 e7                	mov    edi,esp
100013f1:	8d 85 5c fb ff ff    	lea    eax,[ebp-0x4a4]
100013f7:	89 c6                	mov    esi,eax
100013f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013fb:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001401:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001405:	2d c0 00 00 00       	sub    eax,0xc0
1000140a:	e9 8a 04 00 00       	jmp    10001899 <x87Handler(regs*)+0xcc1>
1000140f:	8d 50 38             	lea    edx,[eax+0x38]
10001412:	80 fa 07             	cmp    dl,0x7
10001415:	77 77                	ja     1000148e <x87Handler(regs*)+0x8b6>
10001417:	8d b5 68 fb ff ff    	lea    esi,[ebp-0x498]
1000141d:	51                   	push   ecx
1000141e:	51                   	push   ecx
1000141f:	2d c8 00 00 00       	sub    eax,0xc8
10001424:	50                   	push   eax
10001425:	56                   	push   esi
10001426:	e8 fc ff ff ff       	call   10001427 <x87Handler(regs*)+0x84f>	10001427: R_386_PC32	fpuGetReg(int)
1000142b:	8d 95 74 fb ff ff    	lea    edx,[ebp-0x48c]
10001431:	83 ec 0c             	sub    esp,0xc
10001434:	6a 00                	push   0x0
10001436:	52                   	push   edx
10001437:	e8 fc ff ff ff       	call   10001438 <x87Handler(regs*)+0x860>	10001438: R_386_PC32	fpuGetReg(int)
1000143c:	8d 85 80 fb ff ff    	lea    eax,[ebp-0x480]
10001442:	57                   	push   edi
10001443:	b9 03 00 00 00       	mov    ecx,0x3
10001448:	89 e7                	mov    edi,esp
1000144a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000144c:	83 ec 0c             	sub    esp,0xc
1000144f:	b9 03 00 00 00       	mov    ecx,0x3
10001454:	89 e7                	mov    edi,esp
10001456:	8d 95 74 fb ff ff    	lea    edx,[ebp-0x48c]
1000145c:	89 d6                	mov    esi,edx
1000145e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001460:	50                   	push   eax
10001461:	e8 fc ff ff ff       	call   10001462 <x87Handler(regs*)+0x88a>	10001462: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001466:	83 c4 20             	add    esp,0x20
10001469:	b9 03 00 00 00       	mov    ecx,0x3
1000146e:	89 e7                	mov    edi,esp
10001470:	8d 85 80 fb ff ff    	lea    eax,[ebp-0x480]
10001476:	89 c6                	mov    esi,eax
10001478:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000147a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001480:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001484:	2d c8 00 00 00       	sub    eax,0xc8
10001489:	e9 0b 04 00 00       	jmp    10001899 <x87Handler(regs*)+0xcc1>
1000148e:	83 c0 18             	add    eax,0x18
10001491:	3c 07                	cmp    al,0x7
10001493:	0f 87 13 0a 00 00    	ja     10001eac <x87Handler(regs*)+0x12d4>
10001499:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
1000149f:	57                   	push   edi
100014a0:	57                   	push   edi
100014a1:	6a 00                	push   0x0
100014a3:	56                   	push   esi
100014a4:	e8 fc ff ff ff       	call   100014a5 <x87Handler(regs*)+0x8cd>	100014a5: R_386_PC32	fpuGetReg(int)
100014a9:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
100014af:	83 ec 0c             	sub    esp,0xc
100014b2:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100014b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014bc:	2d e8 00 00 00       	sub    eax,0xe8
100014c1:	50                   	push   eax
100014c2:	52                   	push   edx
100014c3:	e8 fc ff ff ff       	call   100014c4 <x87Handler(regs*)+0x8ec>	100014c4: R_386_PC32	fpuGetReg(int)
100014c8:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
100014ce:	52                   	push   edx
100014cf:	b9 03 00 00 00       	mov    ecx,0x3
100014d4:	89 e7                	mov    edi,esp
100014d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014d8:	83 ec 0c             	sub    esp,0xc
100014db:	b9 03 00 00 00       	mov    ecx,0x3
100014e0:	89 e7                	mov    edi,esp
100014e2:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
100014e8:	89 d6                	mov    esi,edx
100014ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014ec:	50                   	push   eax
100014ed:	e8 fc ff ff ff       	call   100014ee <x87Handler(regs*)+0x916>	100014ee: R_386_PC32	fpuSub(_Float80, _Float80)
100014f2:	83 c4 20             	add    esp,0x20
100014f5:	b9 03 00 00 00       	mov    ecx,0x3
100014fa:	89 e7                	mov    edi,esp
100014fc:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
10001502:	89 c6                	mov    esi,eax
10001504:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001506:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000150c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001510:	2d e8 00 00 00       	sub    eax,0xe8
10001515:	e9 7f 03 00 00       	jmp    10001899 <x87Handler(regs*)+0xcc1>
1000151a:	80 fa de             	cmp    dl,0xde
1000151d:	0f 85 33 03 00 00    	jne    10001856 <x87Handler(regs*)+0xc7e>
10001523:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001529:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000152d:	8d 50 40             	lea    edx,[eax+0x40]
10001530:	80 fa 07             	cmp    dl,0x7
10001533:	0f 87 8c 00 00 00    	ja     100015c5 <x87Handler(regs*)+0x9ed>
10001539:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
1000153f:	52                   	push   edx
10001540:	52                   	push   edx
10001541:	2d c0 00 00 00       	sub    eax,0xc0
10001546:	50                   	push   eax
10001547:	56                   	push   esi
10001548:	e8 fc ff ff ff       	call   10001549 <x87Handler(regs*)+0x971>	10001549: R_386_PC32	fpuGetReg(int)
1000154d:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
10001553:	83 ec 0c             	sub    esp,0xc
10001556:	6a 00                	push   0x0
10001558:	52                   	push   edx
10001559:	e8 fc ff ff ff       	call   1000155a <x87Handler(regs*)+0x982>	1000155a: R_386_PC32	fpuGetReg(int)
1000155e:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
10001564:	51                   	push   ecx
10001565:	b9 03 00 00 00       	mov    ecx,0x3
1000156a:	89 e7                	mov    edi,esp
1000156c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000156e:	83 ec 0c             	sub    esp,0xc
10001571:	b9 03 00 00 00       	mov    ecx,0x3
10001576:	89 e7                	mov    edi,esp
10001578:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
1000157e:	89 d6                	mov    esi,edx
10001580:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001582:	50                   	push   eax
10001583:	e8 fc ff ff ff       	call   10001584 <x87Handler(regs*)+0x9ac>	10001584: R_386_PC32	fpuAdd(_Float80, _Float80)
10001588:	83 c4 20             	add    esp,0x20
1000158b:	b9 03 00 00 00       	mov    ecx,0x3
10001590:	89 e7                	mov    edi,esp
10001592:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
10001598:	89 c6                	mov    esi,eax
1000159a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000159c:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100015a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100015a6:	2d c0 00 00 00       	sub    eax,0xc0
100015ab:	50                   	push   eax
100015ac:	e8 fc ff ff ff       	call   100015ad <x87Handler(regs*)+0x9d5>	100015ad: R_386_PC32	fpuSetReg(int, _Float80)
100015b1:	8d 45 dc             	lea    eax,[ebp-0x24]
100015b4:	89 04 24             	mov    DWORD PTR [esp],eax
100015b7:	e8 fc ff ff ff       	call   100015b8 <x87Handler(regs*)+0x9e0>	100015b8: R_386_PC32	fpuPop()
100015bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100015c0:	e9 90 0a 00 00       	jmp    10002055 <x87Handler(regs*)+0x147d>
100015c5:	8d 50 20             	lea    edx,[eax+0x20]
100015c8:	80 fa 07             	cmp    dl,0x7
100015cb:	77 77                	ja     10001644 <x87Handler(regs*)+0xa6c>
100015cd:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
100015d3:	51                   	push   ecx
100015d4:	51                   	push   ecx
100015d5:	2d e0 00 00 00       	sub    eax,0xe0
100015da:	50                   	push   eax
100015db:	56                   	push   esi
100015dc:	e8 fc ff ff ff       	call   100015dd <x87Handler(regs*)+0xa05>	100015dd: R_386_PC32	fpuGetReg(int)
100015e1:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
100015e7:	83 ec 0c             	sub    esp,0xc
100015ea:	6a 00                	push   0x0
100015ec:	52                   	push   edx
100015ed:	e8 fc ff ff ff       	call   100015ee <x87Handler(regs*)+0xa16>	100015ee: R_386_PC32	fpuGetReg(int)
100015f2:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
100015f8:	57                   	push   edi
100015f9:	b9 03 00 00 00       	mov    ecx,0x3
100015fe:	89 e7                	mov    edi,esp
10001600:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001602:	83 ec 0c             	sub    esp,0xc
10001605:	b9 03 00 00 00       	mov    ecx,0x3
1000160a:	89 e7                	mov    edi,esp
1000160c:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
10001612:	89 d6                	mov    esi,edx
10001614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001616:	50                   	push   eax
10001617:	e8 fc ff ff ff       	call   10001618 <x87Handler(regs*)+0xa40>	10001618: R_386_PC32	fpuSub(_Float80, _Float80)
1000161c:	83 c4 20             	add    esp,0x20
1000161f:	b9 03 00 00 00       	mov    ecx,0x3
10001624:	89 e7                	mov    edi,esp
10001626:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
1000162c:	89 c6                	mov    esi,eax
1000162e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001630:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001636:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000163a:	2d e0 00 00 00       	sub    eax,0xe0
1000163f:	e9 67 ff ff ff       	jmp    100015ab <x87Handler(regs*)+0x9d3>
10001644:	8d 50 18             	lea    edx,[eax+0x18]
10001647:	80 fa 07             	cmp    dl,0x7
1000164a:	0f 87 81 00 00 00    	ja     100016d1 <x87Handler(regs*)+0xaf9>
10001650:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
10001656:	50                   	push   eax
10001657:	50                   	push   eax
10001658:	6a 00                	push   0x0
1000165a:	56                   	push   esi
1000165b:	e8 fc ff ff ff       	call   1000165c <x87Handler(regs*)+0xa84>	1000165c: R_386_PC32	fpuGetReg(int)
10001660:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
10001666:	83 ec 0c             	sub    esp,0xc
10001669:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000166f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001673:	2d e8 00 00 00       	sub    eax,0xe8
10001678:	50                   	push   eax
10001679:	52                   	push   edx
1000167a:	e8 fc ff ff ff       	call   1000167b <x87Handler(regs*)+0xaa3>	1000167b: R_386_PC32	fpuGetReg(int)
1000167f:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
10001685:	52                   	push   edx
10001686:	b9 03 00 00 00       	mov    ecx,0x3
1000168b:	89 e7                	mov    edi,esp
1000168d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000168f:	83 ec 0c             	sub    esp,0xc
10001692:	b9 03 00 00 00       	mov    ecx,0x3
10001697:	89 e7                	mov    edi,esp
10001699:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
1000169f:	89 d6                	mov    esi,edx
100016a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016a3:	50                   	push   eax
100016a4:	e8 fc ff ff ff       	call   100016a5 <x87Handler(regs*)+0xacd>	100016a5: R_386_PC32	fpuSub(_Float80, _Float80)
100016a9:	83 c4 20             	add    esp,0x20
100016ac:	b9 03 00 00 00       	mov    ecx,0x3
100016b1:	89 e7                	mov    edi,esp
100016b3:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100016b9:	89 c6                	mov    esi,eax
100016bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016bd:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100016c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016c7:	2d e8 00 00 00       	sub    eax,0xe8
100016cc:	e9 da fe ff ff       	jmp    100015ab <x87Handler(regs*)+0x9d3>
100016d1:	8d 50 38             	lea    edx,[eax+0x38]
100016d4:	80 fa 07             	cmp    dl,0x7
100016d7:	77 77                	ja     10001750 <x87Handler(regs*)+0xb78>
100016d9:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
100016df:	51                   	push   ecx
100016e0:	51                   	push   ecx
100016e1:	2d c8 00 00 00       	sub    eax,0xc8
100016e6:	50                   	push   eax
100016e7:	56                   	push   esi
100016e8:	e8 fc ff ff ff       	call   100016e9 <x87Handler(regs*)+0xb11>	100016e9: R_386_PC32	fpuGetReg(int)
100016ed:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
100016f3:	83 ec 0c             	sub    esp,0xc
100016f6:	6a 00                	push   0x0
100016f8:	52                   	push   edx
100016f9:	e8 fc ff ff ff       	call   100016fa <x87Handler(regs*)+0xb22>	100016fa: R_386_PC32	fpuGetReg(int)
100016fe:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001704:	57                   	push   edi
10001705:	b9 03 00 00 00       	mov    ecx,0x3
1000170a:	89 e7                	mov    edi,esp
1000170c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000170e:	83 ec 0c             	sub    esp,0xc
10001711:	b9 03 00 00 00       	mov    ecx,0x3
10001716:	89 e7                	mov    edi,esp
10001718:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
1000171e:	89 d6                	mov    esi,edx
10001720:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001722:	50                   	push   eax
10001723:	e8 fc ff ff ff       	call   10001724 <x87Handler(regs*)+0xb4c>	10001724: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001728:	83 c4 20             	add    esp,0x20
1000172b:	b9 03 00 00 00       	mov    ecx,0x3
10001730:	89 e7                	mov    edi,esp
10001732:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001738:	89 c6                	mov    esi,eax
1000173a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000173c:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001742:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001746:	2d c8 00 00 00       	sub    eax,0xc8
1000174b:	e9 00 01 00 00       	jmp    10001850 <x87Handler(regs*)+0xc78>
10001750:	3c f7                	cmp    al,0xf7
10001752:	76 7e                	jbe    100017d2 <x87Handler(regs*)+0xbfa>
10001754:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
1000175a:	57                   	push   edi
1000175b:	57                   	push   edi
1000175c:	6a 00                	push   0x0
1000175e:	56                   	push   esi
1000175f:	e8 fc ff ff ff       	call   10001760 <x87Handler(regs*)+0xb88>	10001760: R_386_PC32	fpuGetReg(int)
10001764:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
1000176a:	83 ec 0c             	sub    esp,0xc
1000176d:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001773:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001777:	2d f8 00 00 00       	sub    eax,0xf8
1000177c:	50                   	push   eax
1000177d:	52                   	push   edx
1000177e:	e8 fc ff ff ff       	call   1000177f <x87Handler(regs*)+0xba7>	1000177f: R_386_PC32	fpuGetReg(int)
10001783:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
10001789:	52                   	push   edx
1000178a:	b9 03 00 00 00       	mov    ecx,0x3
1000178f:	89 e7                	mov    edi,esp
10001791:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001793:	83 ec 0c             	sub    esp,0xc
10001796:	b9 03 00 00 00       	mov    ecx,0x3
1000179b:	89 e7                	mov    edi,esp
1000179d:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100017a3:	89 d6                	mov    esi,edx
100017a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017a7:	50                   	push   eax
100017a8:	e8 fc ff ff ff       	call   100017a9 <x87Handler(regs*)+0xbd1>	100017a9: R_386_PC32	fpuDivide(_Float80, _Float80)
100017ad:	83 c4 20             	add    esp,0x20
100017b0:	b9 03 00 00 00       	mov    ecx,0x3
100017b5:	89 e7                	mov    edi,esp
100017b7:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100017bd:	89 c6                	mov    esi,eax
100017bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017c1:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100017c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017cb:	2d f8 00 00 00       	sub    eax,0xf8
100017d0:	eb 7e                	jmp    10001850 <x87Handler(regs*)+0xc78>
100017d2:	8d 50 10             	lea    edx,[eax+0x10]
100017d5:	80 fa 07             	cmp    dl,0x7
100017d8:	0f 87 08 02 00 00    	ja     100019e6 <x87Handler(regs*)+0xe0e>
100017de:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
100017e4:	52                   	push   edx
100017e5:	52                   	push   edx
100017e6:	2d f0 00 00 00       	sub    eax,0xf0
100017eb:	50                   	push   eax
100017ec:	56                   	push   esi
100017ed:	e8 fc ff ff ff       	call   100017ee <x87Handler(regs*)+0xc16>	100017ee: R_386_PC32	fpuGetReg(int)
100017f2:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
100017f8:	83 ec 0c             	sub    esp,0xc
100017fb:	6a 00                	push   0x0
100017fd:	52                   	push   edx
100017fe:	e8 fc ff ff ff       	call   100017ff <x87Handler(regs*)+0xc27>	100017ff: R_386_PC32	fpuGetReg(int)
10001803:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
10001809:	51                   	push   ecx
1000180a:	b9 03 00 00 00       	mov    ecx,0x3
1000180f:	89 e7                	mov    edi,esp
10001811:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001813:	83 ec 0c             	sub    esp,0xc
10001816:	b9 03 00 00 00       	mov    ecx,0x3
1000181b:	89 e7                	mov    edi,esp
1000181d:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001823:	89 d6                	mov    esi,edx
10001825:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001827:	50                   	push   eax
10001828:	e8 fc ff ff ff       	call   10001829 <x87Handler(regs*)+0xc51>	10001829: R_386_PC32	fpuDivide(_Float80, _Float80)
1000182d:	83 c4 20             	add    esp,0x20
10001830:	b9 03 00 00 00       	mov    ecx,0x3
10001835:	89 e7                	mov    edi,esp
10001837:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
1000183d:	89 c6                	mov    esi,eax
1000183f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001841:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001847:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000184b:	2d f0 00 00 00       	sub    eax,0xf0
10001850:	50                   	push   eax
10001851:	e9 0e fb ff ff       	jmp    10001364 <x87Handler(regs*)+0x78c>
10001856:	80 fa dd             	cmp    dl,0xdd
10001859:	0f 85 30 01 00 00    	jne    1000198f <x87Handler(regs*)+0xdb7>
1000185f:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001865:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001869:	8d 50 30             	lea    edx,[eax+0x30]
1000186c:	80 fa 07             	cmp    dl,0x7
1000186f:	77 2e                	ja     1000189f <x87Handler(regs*)+0xcc7>
10001871:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
10001877:	50                   	push   eax
10001878:	50                   	push   eax
10001879:	6a 00                	push   0x0
1000187b:	56                   	push   esi
1000187c:	e8 fc ff ff ff       	call   1000187d <x87Handler(regs*)+0xca5>	1000187d: R_386_PC32	fpuGetReg(int)
10001881:	b9 03 00 00 00       	mov    ecx,0x3
10001886:	89 e7                	mov    edi,esp
10001888:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000188a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001890:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001894:	2d d0 00 00 00       	sub    eax,0xd0
10001899:	50                   	push   eax
1000189a:	e9 2e f4 ff ff       	jmp    10000ccd <x87Handler(regs*)+0xf5>
1000189f:	8d 50 28             	lea    edx,[eax+0x28]
100018a2:	80 fa 07             	cmp    dl,0x7
100018a5:	77 2d                	ja     100018d4 <x87Handler(regs*)+0xcfc>
100018a7:	8d b5 94 fc ff ff    	lea    esi,[ebp-0x36c]
100018ad:	50                   	push   eax
100018ae:	50                   	push   eax
100018af:	6a 00                	push   0x0
100018b1:	56                   	push   esi
100018b2:	e8 fc ff ff ff       	call   100018b3 <x87Handler(regs*)+0xcdb>	100018b3: R_386_PC32	fpuGetReg(int)
100018b7:	b9 03 00 00 00       	mov    ecx,0x3
100018bc:	89 e7                	mov    edi,esp
100018be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018c0:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100018c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018ca:	2d d8 00 00 00       	sub    eax,0xd8
100018cf:	e9 d7 fc ff ff       	jmp    100015ab <x87Handler(regs*)+0x9d3>
100018d4:	8d 50 20             	lea    edx,[eax+0x20]
100018d7:	80 fa 07             	cmp    dl,0x7
100018da:	77 52                	ja     1000192e <x87Handler(regs*)+0xd56>
100018dc:	8d b5 a0 fc ff ff    	lea    esi,[ebp-0x360]
100018e2:	57                   	push   edi
100018e3:	57                   	push   edi
100018e4:	2d e0 00 00 00       	sub    eax,0xe0
100018e9:	50                   	push   eax
100018ea:	56                   	push   esi
100018eb:	e8 fc ff ff ff       	call   100018ec <x87Handler(regs*)+0xd14>	100018ec: R_386_PC32	fpuGetReg(int)
100018f0:	8d 85 ac fc ff ff    	lea    eax,[ebp-0x354]
100018f6:	83 ec 0c             	sub    esp,0xc
100018f9:	6a 00                	push   0x0
100018fb:	50                   	push   eax
100018fc:	e8 fc ff ff ff       	call   100018fd <x87Handler(regs*)+0xd25>	100018fd: R_386_PC32	fpuGetReg(int)
10001901:	50                   	push   eax
10001902:	50                   	push   eax
10001903:	b9 03 00 00 00       	mov    ecx,0x3
10001908:	89 e7                	mov    edi,esp
1000190a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000190c:	83 ec 0c             	sub    esp,0xc
1000190f:	b9 03 00 00 00       	mov    ecx,0x3
10001914:	89 e7                	mov    edi,esp
10001916:	8d 85 ac fc ff ff    	lea    eax,[ebp-0x354]
1000191c:	89 c6                	mov    esi,eax
1000191e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001920:	e8 fc ff ff ff       	call   10001921 <x87Handler(regs*)+0xd49>	10001921: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001925:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001929:	e9 b8 06 00 00       	jmp    10001fe6 <x87Handler(regs*)+0x140e>
1000192e:	8d 50 18             	lea    edx,[eax+0x18]
10001931:	80 fa 07             	cmp    dl,0x7
10001934:	0f 87 df 08 00 00    	ja     10002219 <x87Handler(regs*)+0x1641>
1000193a:	8d b5 b8 fc ff ff    	lea    esi,[ebp-0x348]
10001940:	52                   	push   edx
10001941:	52                   	push   edx
10001942:	2d e8 00 00 00       	sub    eax,0xe8
10001947:	50                   	push   eax
10001948:	56                   	push   esi
10001949:	e8 fc ff ff ff       	call   1000194a <x87Handler(regs*)+0xd72>	1000194a: R_386_PC32	fpuGetReg(int)
1000194e:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001954:	83 ec 0c             	sub    esp,0xc
10001957:	6a 00                	push   0x0
10001959:	50                   	push   eax
1000195a:	e8 fc ff ff ff       	call   1000195b <x87Handler(regs*)+0xd83>	1000195b: R_386_PC32	fpuGetReg(int)
1000195f:	51                   	push   ecx
10001960:	51                   	push   ecx
10001961:	b9 03 00 00 00       	mov    ecx,0x3
10001966:	89 e7                	mov    edi,esp
10001968:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000196a:	83 ec 0c             	sub    esp,0xc
1000196d:	b9 03 00 00 00       	mov    ecx,0x3
10001972:	89 e7                	mov    edi,esp
10001974:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
1000197a:	89 c6                	mov    esi,eax
1000197c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000197e:	e8 fc ff ff ff       	call   1000197f <x87Handler(regs*)+0xda7>	1000197f: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001983:	8d 45 dc             	lea    eax,[ebp-0x24]
10001986:	83 c4 24             	add    esp,0x24
10001989:	50                   	push   eax
1000198a:	e9 28 fc ff ff       	jmp    100015b7 <x87Handler(regs*)+0x9df>
1000198f:	80 fa da             	cmp    dl,0xda
10001992:	0f 85 b6 00 00 00    	jne    10001a4e <x87Handler(regs*)+0xe76>
10001998:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000199e:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
100019a2:	0f 85 60 03 00 00    	jne    10001d08 <x87Handler(regs*)+0x1130>
100019a8:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
100019ae:	50                   	push   eax
100019af:	50                   	push   eax
100019b0:	6a 01                	push   0x1
100019b2:	56                   	push   esi
100019b3:	e8 fc ff ff ff       	call   100019b4 <x87Handler(regs*)+0xddc>	100019b4: R_386_PC32	fpuGetReg(int)
100019b8:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
100019be:	83 ec 0c             	sub    esp,0xc
100019c1:	6a 00                	push   0x0
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <x87Handler(regs*)+0xded>	100019c5: R_386_PC32	fpuGetReg(int)
100019c9:	50                   	push   eax
100019ca:	50                   	push   eax
100019cb:	b9 03 00 00 00       	mov    ecx,0x3
100019d0:	89 e7                	mov    edi,esp
100019d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019d4:	83 ec 0c             	sub    esp,0xc
100019d7:	b9 03 00 00 00       	mov    ecx,0x3
100019dc:	89 e7                	mov    edi,esp
100019de:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
100019e4:	eb 44                	jmp    10001a2a <x87Handler(regs*)+0xe52>
100019e6:	3c d9                	cmp    al,0xd9
100019e8:	0f 85 8b 08 00 00    	jne    10002279 <x87Handler(regs*)+0x16a1>
100019ee:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
100019f4:	51                   	push   ecx
100019f5:	51                   	push   ecx
100019f6:	6a 01                	push   0x1
100019f8:	56                   	push   esi
100019f9:	e8 fc ff ff ff       	call   100019fa <x87Handler(regs*)+0xe22>	100019fa: R_386_PC32	fpuGetReg(int)
100019fe:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001a04:	83 ec 0c             	sub    esp,0xc
10001a07:	6a 00                	push   0x0
10001a09:	50                   	push   eax
10001a0a:	e8 fc ff ff ff       	call   10001a0b <x87Handler(regs*)+0xe33>	10001a0b: R_386_PC32	fpuGetReg(int)
10001a0f:	57                   	push   edi
10001a10:	57                   	push   edi
10001a11:	b9 03 00 00 00       	mov    ecx,0x3
10001a16:	89 e7                	mov    edi,esp
10001a18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a1a:	83 ec 0c             	sub    esp,0xc
10001a1d:	b9 03 00 00 00       	mov    ecx,0x3
10001a22:	89 e7                	mov    edi,esp
10001a24:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001a2a:	89 c6                	mov    esi,eax
10001a2c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a2e:	e8 fc ff ff ff       	call   10001a2f <x87Handler(regs*)+0xe57>	10001a2f: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001a33:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a37:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001a3a:	83 c4 24             	add    esp,0x24
10001a3d:	53                   	push   ebx
10001a3e:	e8 fc ff ff ff       	call   10001a3f <x87Handler(regs*)+0xe67>	10001a3f: R_386_PC32	fpuPop()
10001a43:	53                   	push   ebx
10001a44:	e8 fc ff ff ff       	call   10001a45 <x87Handler(regs*)+0xe6d>	10001a45: R_386_PC32	fpuPop()
10001a49:	e9 07 06 00 00       	jmp    10002055 <x87Handler(regs*)+0x147d>
10001a4e:	80 fa df             	cmp    dl,0xdf
10001a51:	0f 85 05 04 00 00    	jne    10001e5c <x87Handler(regs*)+0x1284>
10001a57:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001a5d:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001a61:	0f 85 90 08 00 00    	jne    100022f7 <x87Handler(regs*)+0x171f>
10001a67:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001a6a: R_386_32	fpuState
10001a6e:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001a72:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a76:	e9 5e f2 ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001a7b:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001a81:	84 d2                	test   dl,dl
10001a83:	75 66                	jne    10001aeb <x87Handler(regs*)+0xf13>
10001a85:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
10001a8b:	50                   	push   eax
10001a8c:	50                   	push   eax
10001a8d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001a93:	ff 30                	push   DWORD PTR [eax]
10001a95:	56                   	push   esi
10001a96:	e8 fc ff ff ff       	call   10001a97 <x87Handler(regs*)+0xebf>	10001a97: R_386_PC32	fpu32ToInternal(unsigned int)
10001a9b:	8d 95 0c fd ff ff    	lea    edx,[ebp-0x2f4]
10001aa1:	83 ec 0c             	sub    esp,0xc
10001aa4:	6a 00                	push   0x0
10001aa6:	52                   	push   edx
10001aa7:	e8 fc ff ff ff       	call   10001aa8 <x87Handler(regs*)+0xed0>	10001aa8: R_386_PC32	fpuGetReg(int)
10001aac:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001ab2:	52                   	push   edx
10001ab3:	b9 03 00 00 00       	mov    ecx,0x3
10001ab8:	89 e7                	mov    edi,esp
10001aba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001abc:	83 ec 0c             	sub    esp,0xc
10001abf:	b9 03 00 00 00       	mov    ecx,0x3
10001ac4:	89 e7                	mov    edi,esp
10001ac6:	8d 95 0c fd ff ff    	lea    edx,[ebp-0x2f4]
10001acc:	89 d6                	mov    esi,edx
10001ace:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ad0:	50                   	push   eax
10001ad1:	e8 fc ff ff ff       	call   10001ad2 <x87Handler(regs*)+0xefa>	10001ad2: R_386_PC32	fpuAdd(_Float80, _Float80)
10001ad6:	83 c4 20             	add    esp,0x20
10001ad9:	b9 03 00 00 00       	mov    ecx,0x3
10001ade:	89 e7                	mov    edi,esp
10001ae0:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001ae6:	e9 f3 07 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001aeb:	80 fa 01             	cmp    dl,0x1
10001aee:	75 66                	jne    10001b56 <x87Handler(regs*)+0xf7e>
10001af0:	8d b5 24 fd ff ff    	lea    esi,[ebp-0x2dc]
10001af6:	51                   	push   ecx
10001af7:	51                   	push   ecx
10001af8:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001afe:	ff 30                	push   DWORD PTR [eax]
10001b00:	56                   	push   esi
10001b01:	e8 fc ff ff ff       	call   10001b02 <x87Handler(regs*)+0xf2a>	10001b02: R_386_PC32	fpu32ToInternal(unsigned int)
10001b06:	8d 95 30 fd ff ff    	lea    edx,[ebp-0x2d0]
10001b0c:	83 ec 0c             	sub    esp,0xc
10001b0f:	6a 00                	push   0x0
10001b11:	52                   	push   edx
10001b12:	e8 fc ff ff ff       	call   10001b13 <x87Handler(regs*)+0xf3b>	10001b13: R_386_PC32	fpuGetReg(int)
10001b17:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001b1d:	57                   	push   edi
10001b1e:	b9 03 00 00 00       	mov    ecx,0x3
10001b23:	89 e7                	mov    edi,esp
10001b25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b27:	83 ec 0c             	sub    esp,0xc
10001b2a:	b9 03 00 00 00       	mov    ecx,0x3
10001b2f:	89 e7                	mov    edi,esp
10001b31:	8d 95 30 fd ff ff    	lea    edx,[ebp-0x2d0]
10001b37:	89 d6                	mov    esi,edx
10001b39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b3b:	50                   	push   eax
10001b3c:	e8 fc ff ff ff       	call   10001b3d <x87Handler(regs*)+0xf65>	10001b3d: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001b41:	83 c4 20             	add    esp,0x20
10001b44:	b9 03 00 00 00       	mov    ecx,0x3
10001b49:	89 e7                	mov    edi,esp
10001b4b:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001b51:	e9 88 07 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001b56:	80 fa 04             	cmp    dl,0x4
10001b59:	75 66                	jne    10001bc1 <x87Handler(regs*)+0xfe9>
10001b5b:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001b61:	50                   	push   eax
10001b62:	50                   	push   eax
10001b63:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001b69:	ff 30                	push   DWORD PTR [eax]
10001b6b:	56                   	push   esi
10001b6c:	e8 fc ff ff ff       	call   10001b6d <x87Handler(regs*)+0xf95>	10001b6d: R_386_PC32	fpu32ToInternal(unsigned int)
10001b71:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b77:	83 ec 0c             	sub    esp,0xc
10001b7a:	6a 00                	push   0x0
10001b7c:	52                   	push   edx
10001b7d:	e8 fc ff ff ff       	call   10001b7e <x87Handler(regs*)+0xfa6>	10001b7e: R_386_PC32	fpuGetReg(int)
10001b82:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b88:	52                   	push   edx
10001b89:	b9 03 00 00 00       	mov    ecx,0x3
10001b8e:	89 e7                	mov    edi,esp
10001b90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b92:	83 ec 0c             	sub    esp,0xc
10001b95:	b9 03 00 00 00       	mov    ecx,0x3
10001b9a:	89 e7                	mov    edi,esp
10001b9c:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001ba2:	89 d6                	mov    esi,edx
10001ba4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ba6:	50                   	push   eax
10001ba7:	e8 fc ff ff ff       	call   10001ba8 <x87Handler(regs*)+0xfd0>	10001ba8: R_386_PC32	fpuSub(_Float80, _Float80)
10001bac:	83 c4 20             	add    esp,0x20
10001baf:	b9 03 00 00 00       	mov    ecx,0x3
10001bb4:	89 e7                	mov    edi,esp
10001bb6:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001bbc:	e9 1d 07 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001bc1:	80 fa 05             	cmp    dl,0x5
10001bc4:	75 66                	jne    10001c2c <x87Handler(regs*)+0x1054>
10001bc6:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001bcc:	51                   	push   ecx
10001bcd:	51                   	push   ecx
10001bce:	6a 00                	push   0x0
10001bd0:	56                   	push   esi
10001bd1:	e8 fc ff ff ff       	call   10001bd2 <x87Handler(regs*)+0xffa>	10001bd2: R_386_PC32	fpuGetReg(int)
10001bd6:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001bdc:	83 ec 0c             	sub    esp,0xc
10001bdf:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001be5:	ff 32                	push   DWORD PTR [edx]
10001be7:	50                   	push   eax
10001be8:	e8 fc ff ff ff       	call   10001be9 <x87Handler(regs*)+0x1011>	10001be9: R_386_PC32	fpu32ToInternal(unsigned int)
10001bed:	8d 95 84 fd ff ff    	lea    edx,[ebp-0x27c]
10001bf3:	57                   	push   edi
10001bf4:	b9 03 00 00 00       	mov    ecx,0x3
10001bf9:	89 e7                	mov    edi,esp
10001bfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bfd:	83 ec 0c             	sub    esp,0xc
10001c00:	b9 03 00 00 00       	mov    ecx,0x3
10001c05:	89 e7                	mov    edi,esp
10001c07:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001c0d:	89 c6                	mov    esi,eax
10001c0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c11:	52                   	push   edx
10001c12:	e8 fc ff ff ff       	call   10001c13 <x87Handler(regs*)+0x103b>	10001c13: R_386_PC32	fpuSub(_Float80, _Float80)
10001c17:	83 c4 20             	add    esp,0x20
10001c1a:	b9 03 00 00 00       	mov    ecx,0x3
10001c1f:	89 e7                	mov    edi,esp
10001c21:	8d 95 84 fd ff ff    	lea    edx,[ebp-0x27c]
10001c27:	e9 e6 05 00 00       	jmp    10002212 <x87Handler(regs*)+0x163a>
10001c2c:	80 fa 06             	cmp    dl,0x6
10001c2f:	75 66                	jne    10001c97 <x87Handler(regs*)+0x10bf>
10001c31:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001c37:	50                   	push   eax
10001c38:	50                   	push   eax
10001c39:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001c3f:	ff 30                	push   DWORD PTR [eax]
10001c41:	56                   	push   esi
10001c42:	e8 fc ff ff ff       	call   10001c43 <x87Handler(regs*)+0x106b>	10001c43: R_386_PC32	fpu32ToInternal(unsigned int)
10001c47:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001c4d:	83 ec 0c             	sub    esp,0xc
10001c50:	6a 00                	push   0x0
10001c52:	52                   	push   edx
10001c53:	e8 fc ff ff ff       	call   10001c54 <x87Handler(regs*)+0x107c>	10001c54: R_386_PC32	fpuGetReg(int)
10001c58:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c5e:	52                   	push   edx
10001c5f:	b9 03 00 00 00       	mov    ecx,0x3
10001c64:	89 e7                	mov    edi,esp
10001c66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c68:	83 ec 0c             	sub    esp,0xc
10001c6b:	b9 03 00 00 00       	mov    ecx,0x3
10001c70:	89 e7                	mov    edi,esp
10001c72:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001c78:	89 d6                	mov    esi,edx
10001c7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c7c:	50                   	push   eax
10001c7d:	e8 fc ff ff ff       	call   10001c7e <x87Handler(regs*)+0x10a6>	10001c7e: R_386_PC32	fpuDivide(_Float80, _Float80)
10001c82:	83 c4 20             	add    esp,0x20
10001c85:	b9 03 00 00 00       	mov    ecx,0x3
10001c8a:	89 e7                	mov    edi,esp
10001c8c:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c92:	e9 47 06 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001c97:	31 c0                	xor    eax,eax
10001c99:	80 fa 07             	cmp    dl,0x7
10001c9c:	0f 85 c2 06 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10001ca2:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001ca8:	50                   	push   eax
10001ca9:	50                   	push   eax
10001caa:	6a 00                	push   0x0
10001cac:	56                   	push   esi
10001cad:	e8 fc ff ff ff       	call   10001cae <x87Handler(regs*)+0x10d6>	10001cae: R_386_PC32	fpuGetReg(int)
10001cb2:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001cb8:	83 ec 0c             	sub    esp,0xc
10001cbb:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001cc1:	ff 32                	push   DWORD PTR [edx]
10001cc3:	50                   	push   eax
10001cc4:	e8 fc ff ff ff       	call   10001cc5 <x87Handler(regs*)+0x10ed>	10001cc5: R_386_PC32	fpu32ToInternal(unsigned int)
10001cc9:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001ccf:	50                   	push   eax
10001cd0:	b9 03 00 00 00       	mov    ecx,0x3
10001cd5:	89 e7                	mov    edi,esp
10001cd7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cd9:	83 ec 0c             	sub    esp,0xc
10001cdc:	b9 03 00 00 00       	mov    ecx,0x3
10001ce1:	89 e7                	mov    edi,esp
10001ce3:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001ce9:	89 c6                	mov    esi,eax
10001ceb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ced:	52                   	push   edx
10001cee:	e8 fc ff ff ff       	call   10001cef <x87Handler(regs*)+0x1117>	10001cef: R_386_PC32	fpuDivide(_Float80, _Float80)
10001cf3:	83 c4 20             	add    esp,0x20
10001cf6:	b9 03 00 00 00       	mov    ecx,0x3
10001cfb:	89 e7                	mov    edi,esp
10001cfd:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001d03:	e9 0a 05 00 00       	jmp    10002212 <x87Handler(regs*)+0x163a>
10001d08:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001d0e:	80 fa 01             	cmp    dl,0x1
10001d11:	75 69                	jne    10001d7c <x87Handler(regs*)+0x11a4>
10001d13:	8d b5 f0 fd ff ff    	lea    esi,[ebp-0x210]
10001d19:	50                   	push   eax
10001d1a:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001d20:	8b 00                	mov    eax,DWORD PTR [eax]
10001d22:	31 d2                	xor    edx,edx
10001d24:	52                   	push   edx
10001d25:	50                   	push   eax
10001d26:	56                   	push   esi
10001d27:	e8 fc ff ff ff       	call   10001d28 <x87Handler(regs*)+0x1150>	10001d28: R_386_PC32	fpuLongToFloat(long long)
10001d2c:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d32:	83 ec 0c             	sub    esp,0xc
10001d35:	6a 00                	push   0x0
10001d37:	52                   	push   edx
10001d38:	e8 fc ff ff ff       	call   10001d39 <x87Handler(regs*)+0x1161>	10001d39: R_386_PC32	fpuGetReg(int)
10001d3d:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d43:	52                   	push   edx
10001d44:	b9 03 00 00 00       	mov    ecx,0x3
10001d49:	89 e7                	mov    edi,esp
10001d4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d4d:	83 ec 0c             	sub    esp,0xc
10001d50:	b9 03 00 00 00       	mov    ecx,0x3
10001d55:	89 e7                	mov    edi,esp
10001d57:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d5d:	89 d6                	mov    esi,edx
10001d5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d61:	50                   	push   eax
10001d62:	e8 fc ff ff ff       	call   10001d63 <x87Handler(regs*)+0x118b>	10001d63: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001d67:	83 c4 20             	add    esp,0x20
10001d6a:	b9 03 00 00 00       	mov    ecx,0x3
10001d6f:	89 e7                	mov    edi,esp
10001d71:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d77:	e9 62 05 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001d7c:	80 fa 04             	cmp    dl,0x4
10001d7f:	75 69                	jne    10001dea <x87Handler(regs*)+0x1212>
10001d81:	8d b5 14 fe ff ff    	lea    esi,[ebp-0x1ec]
10001d87:	51                   	push   ecx
10001d88:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001d8e:	8b 00                	mov    eax,DWORD PTR [eax]
10001d90:	31 d2                	xor    edx,edx
10001d92:	52                   	push   edx
10001d93:	50                   	push   eax
10001d94:	56                   	push   esi
10001d95:	e8 fc ff ff ff       	call   10001d96 <x87Handler(regs*)+0x11be>	10001d96: R_386_PC32	fpuLongToFloat(long long)
10001d9a:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001da0:	83 ec 0c             	sub    esp,0xc
10001da3:	6a 00                	push   0x0
10001da5:	52                   	push   edx
10001da6:	e8 fc ff ff ff       	call   10001da7 <x87Handler(regs*)+0x11cf>	10001da7: R_386_PC32	fpuGetReg(int)
10001dab:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001db1:	57                   	push   edi
10001db2:	b9 03 00 00 00       	mov    ecx,0x3
10001db7:	89 e7                	mov    edi,esp
10001db9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dbb:	83 ec 0c             	sub    esp,0xc
10001dbe:	b9 03 00 00 00       	mov    ecx,0x3
10001dc3:	89 e7                	mov    edi,esp
10001dc5:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001dcb:	89 d6                	mov    esi,edx
10001dcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dcf:	50                   	push   eax
10001dd0:	e8 fc ff ff ff       	call   10001dd1 <x87Handler(regs*)+0x11f9>	10001dd1: R_386_PC32	fpuSub(_Float80, _Float80)
10001dd5:	83 c4 20             	add    esp,0x20
10001dd8:	b9 03 00 00 00       	mov    ecx,0x3
10001ddd:	89 e7                	mov    edi,esp
10001ddf:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001de5:	e9 f4 04 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001dea:	31 c0                	xor    eax,eax
10001dec:	80 fa 07             	cmp    dl,0x7
10001def:	0f 85 6f 05 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10001df5:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001dfb:	50                   	push   eax
10001dfc:	50                   	push   eax
10001dfd:	6a 00                	push   0x0
10001dff:	56                   	push   esi
10001e00:	e8 fc ff ff ff       	call   10001e01 <x87Handler(regs*)+0x1229>	10001e01: R_386_PC32	fpuGetReg(int)
10001e05:	50                   	push   eax
10001e06:	50                   	push   eax
10001e07:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e0d:	8b 00                	mov    eax,DWORD PTR [eax]
10001e0f:	31 d2                	xor    edx,edx
10001e11:	52                   	push   edx
10001e12:	50                   	push   eax
10001e13:	8d 85 44 fe ff ff    	lea    eax,[ebp-0x1bc]
10001e19:	50                   	push   eax
10001e1a:	e8 fc ff ff ff       	call   10001e1b <x87Handler(regs*)+0x1243>	10001e1b: R_386_PC32	fpuLongToFloat(long long)
10001e1f:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001e25:	52                   	push   edx
10001e26:	b9 03 00 00 00       	mov    ecx,0x3
10001e2b:	89 e7                	mov    edi,esp
10001e2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e2f:	83 ec 0c             	sub    esp,0xc
10001e32:	b9 03 00 00 00       	mov    ecx,0x3
10001e37:	89 e7                	mov    edi,esp
10001e39:	8d b5 44 fe ff ff    	lea    esi,[ebp-0x1bc]
10001e3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e41:	50                   	push   eax
10001e42:	e8 fc ff ff ff       	call   10001e43 <x87Handler(regs*)+0x126b>	10001e43: R_386_PC32	fpuDivide(_Float80, _Float80)
10001e47:	83 c4 20             	add    esp,0x20
10001e4a:	b9 03 00 00 00       	mov    ecx,0x3
10001e4f:	89 e7                	mov    edi,esp
10001e51:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001e57:	e9 82 04 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001e5c:	31 c0                	xor    eax,eax
10001e5e:	80 fa db             	cmp    dl,0xdb
10001e61:	0f 85 fd 04 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10001e67:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001e6d:	84 d2                	test   dl,dl
10001e6f:	0f 85 66 f1 ff ff    	jne    10000fdb <x87Handler(regs*)+0x403>
10001e75:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001e7b:	50                   	push   eax
10001e7c:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e82:	8b 00                	mov    eax,DWORD PTR [eax]
10001e84:	31 d2                	xor    edx,edx
10001e86:	52                   	push   edx
10001e87:	50                   	push   eax
10001e88:	e9 84 04 00 00       	jmp    10002311 <x87Handler(regs*)+0x1739>
10001e8d:	31 c0                	xor    eax,eax
10001e8f:	80 fa 03             	cmp    dl,0x3
10001e92:	0f 85 cc 04 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10001e98:	8d b5 74 fe ff ff    	lea    esi,[ebp-0x18c]
10001e9e:	83 ec 0c             	sub    esp,0xc
10001ea1:	56                   	push   esi
10001ea2:	e8 fc ff ff ff       	call   10001ea3 <x87Handler(regs*)+0x12cb>	10001ea3: R_386_PC32	fpuPop()
10001ea7:	e9 48 f1 ff ff       	jmp    10000ff4 <x87Handler(regs*)+0x41c>
10001eac:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001eb2:	84 d2                	test   dl,dl
10001eb4:	75 68                	jne    10001f1e <x87Handler(regs*)+0x1346>
10001eb6:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001ebc:	51                   	push   ecx
10001ebd:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001ec3:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001ec6:	ff 30                	push   DWORD PTR [eax]
10001ec8:	56                   	push   esi
10001ec9:	e8 fc ff ff ff       	call   10001eca <x87Handler(regs*)+0x12f2>	10001eca: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ece:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001ed4:	83 ec 0c             	sub    esp,0xc
10001ed7:	6a 00                	push   0x0
10001ed9:	52                   	push   edx
10001eda:	e8 fc ff ff ff       	call   10001edb <x87Handler(regs*)+0x1303>	10001edb: R_386_PC32	fpuGetReg(int)
10001edf:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001ee5:	57                   	push   edi
10001ee6:	b9 03 00 00 00       	mov    ecx,0x3
10001eeb:	89 e7                	mov    edi,esp
10001eed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001eef:	83 ec 0c             	sub    esp,0xc
10001ef2:	b9 03 00 00 00       	mov    ecx,0x3
10001ef7:	89 e7                	mov    edi,esp
10001ef9:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001eff:	89 d6                	mov    esi,edx
10001f01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f03:	50                   	push   eax
10001f04:	e8 fc ff ff ff       	call   10001f05 <x87Handler(regs*)+0x132d>	10001f05: R_386_PC32	fpuAdd(_Float80, _Float80)
10001f09:	83 c4 20             	add    esp,0x20
10001f0c:	b9 03 00 00 00       	mov    ecx,0x3
10001f11:	89 e7                	mov    edi,esp
10001f13:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001f19:	e9 c0 03 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001f1e:	80 fa 01             	cmp    dl,0x1
10001f21:	75 68                	jne    10001f8b <x87Handler(regs*)+0x13b3>
10001f23:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001f29:	50                   	push   eax
10001f2a:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001f30:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f33:	ff 30                	push   DWORD PTR [eax]
10001f35:	56                   	push   esi
10001f36:	e8 fc ff ff ff       	call   10001f37 <x87Handler(regs*)+0x135f>	10001f37: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f3b:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f41:	83 ec 0c             	sub    esp,0xc
10001f44:	6a 00                	push   0x0
10001f46:	52                   	push   edx
10001f47:	e8 fc ff ff ff       	call   10001f48 <x87Handler(regs*)+0x1370>	10001f48: R_386_PC32	fpuGetReg(int)
10001f4c:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f52:	52                   	push   edx
10001f53:	b9 03 00 00 00       	mov    ecx,0x3
10001f58:	89 e7                	mov    edi,esp
10001f5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f5c:	83 ec 0c             	sub    esp,0xc
10001f5f:	b9 03 00 00 00       	mov    ecx,0x3
10001f64:	89 e7                	mov    edi,esp
10001f66:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f6c:	89 d6                	mov    esi,edx
10001f6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f70:	50                   	push   eax
10001f71:	e8 fc ff ff ff       	call   10001f72 <x87Handler(regs*)+0x139a>	10001f72: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f76:	83 c4 20             	add    esp,0x20
10001f79:	b9 03 00 00 00       	mov    ecx,0x3
10001f7e:	89 e7                	mov    edi,esp
10001f80:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f86:	e9 53 03 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
10001f8b:	80 fa 02             	cmp    dl,0x2
10001f8e:	75 5e                	jne    10001fee <x87Handler(regs*)+0x1416>
10001f90:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f96:	50                   	push   eax
10001f97:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001f9d:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001fa0:	ff 30                	push   DWORD PTR [eax]
10001fa2:	56                   	push   esi
10001fa3:	e8 fc ff ff ff       	call   10001fa4 <x87Handler(regs*)+0x13cc>	10001fa4: R_386_PC32	fpu64ToInternal(unsigned long long)
10001fa8:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001fae:	83 ec 0c             	sub    esp,0xc
10001fb1:	6a 00                	push   0x0
10001fb3:	50                   	push   eax
10001fb4:	e8 fc ff ff ff       	call   10001fb5 <x87Handler(regs*)+0x13dd>	10001fb5: R_386_PC32	fpuGetReg(int)
10001fb9:	50                   	push   eax
10001fba:	50                   	push   eax
10001fbb:	b9 03 00 00 00       	mov    ecx,0x3
10001fc0:	89 e7                	mov    edi,esp
10001fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fc4:	83 ec 0c             	sub    esp,0xc
10001fc7:	b9 03 00 00 00       	mov    ecx,0x3
10001fcc:	89 e7                	mov    edi,esp
10001fce:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001fd4:	89 c6                	mov    esi,eax
10001fd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fd8:	e8 fc ff ff ff       	call   10001fd9 <x87Handler(regs*)+0x1401>	10001fd9: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fdd:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10001fe3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001fe6:	83 c4 30             	add    esp,0x30
10001fe9:	e9 eb ec ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001fee:	80 fa 03             	cmp    dl,0x3
10001ff1:	75 6a                	jne    1000205d <x87Handler(regs*)+0x1485>
10001ff3:	8d b5 e0 fe ff ff    	lea    esi,[ebp-0x120]
10001ff9:	51                   	push   ecx
10001ffa:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002000:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002003:	ff 30                	push   DWORD PTR [eax]
10002005:	56                   	push   esi
10002006:	e8 fc ff ff ff       	call   10002007 <x87Handler(regs*)+0x142f>	10002007: R_386_PC32	fpu64ToInternal(unsigned long long)
1000200b:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10002011:	83 ec 0c             	sub    esp,0xc
10002014:	6a 00                	push   0x0
10002016:	50                   	push   eax
10002017:	e8 fc ff ff ff       	call   10002018 <x87Handler(regs*)+0x1440>	10002018: R_386_PC32	fpuGetReg(int)
1000201c:	57                   	push   edi
1000201d:	57                   	push   edi
1000201e:	b9 03 00 00 00       	mov    ecx,0x3
10002023:	89 e7                	mov    edi,esp
10002025:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002027:	83 ec 0c             	sub    esp,0xc
1000202a:	b9 03 00 00 00       	mov    ecx,0x3
1000202f:	89 e7                	mov    edi,esp
10002031:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10002037:	89 c6                	mov    esi,eax
10002039:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000203b:	e8 fc ff ff ff       	call   1000203c <x87Handler(regs*)+0x1464>	1000203c: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10002040:	8d 45 dc             	lea    eax,[ebp-0x24]
10002043:	83 c4 24             	add    esp,0x24
10002046:	50                   	push   eax
10002047:	e8 fc ff ff ff       	call   10002048 <x87Handler(regs*)+0x1470>	10002048: R_386_PC32	fpuPop()
1000204c:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10002052:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002055:	83 c4 0c             	add    esp,0xc
10002058:	e9 7c ec ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
1000205d:	80 fa 04             	cmp    dl,0x4
10002060:	75 68                	jne    100020ca <x87Handler(regs*)+0x14f2>
10002062:	8d b5 f8 fe ff ff    	lea    esi,[ebp-0x108]
10002068:	50                   	push   eax
10002069:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000206f:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002072:	ff 30                	push   DWORD PTR [eax]
10002074:	56                   	push   esi
10002075:	e8 fc ff ff ff       	call   10002076 <x87Handler(regs*)+0x149e>	10002076: R_386_PC32	fpu64ToInternal(unsigned long long)
1000207a:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
10002080:	83 ec 0c             	sub    esp,0xc
10002083:	6a 00                	push   0x0
10002085:	52                   	push   edx
10002086:	e8 fc ff ff ff       	call   10002087 <x87Handler(regs*)+0x14af>	10002087: R_386_PC32	fpuGetReg(int)
1000208b:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002091:	52                   	push   edx
10002092:	b9 03 00 00 00       	mov    ecx,0x3
10002097:	89 e7                	mov    edi,esp
10002099:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000209b:	83 ec 0c             	sub    esp,0xc
1000209e:	b9 03 00 00 00       	mov    ecx,0x3
100020a3:	89 e7                	mov    edi,esp
100020a5:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
100020ab:	89 d6                	mov    esi,edx
100020ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020af:	50                   	push   eax
100020b0:	e8 fc ff ff ff       	call   100020b1 <x87Handler(regs*)+0x14d9>	100020b1: R_386_PC32	fpuSub(_Float80, _Float80)
100020b5:	83 c4 20             	add    esp,0x20
100020b8:	b9 03 00 00 00       	mov    ecx,0x3
100020bd:	89 e7                	mov    edi,esp
100020bf:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
100020c5:	e9 14 02 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
100020ca:	80 fa 05             	cmp    dl,0x5
100020cd:	75 68                	jne    10002137 <x87Handler(regs*)+0x155f>
100020cf:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
100020d5:	51                   	push   ecx
100020d6:	51                   	push   ecx
100020d7:	6a 00                	push   0x0
100020d9:	56                   	push   esi
100020da:	e8 fc ff ff ff       	call   100020db <x87Handler(regs*)+0x1503>	100020db: R_386_PC32	fpuGetReg(int)
100020df:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
100020e5:	57                   	push   edi
100020e6:	57                   	push   edi
100020e7:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
100020ed:	ff 72 04             	push   DWORD PTR [edx+0x4]
100020f0:	ff 32                	push   DWORD PTR [edx]
100020f2:	50                   	push   eax
100020f3:	e8 fc ff ff ff       	call   100020f4 <x87Handler(regs*)+0x151c>	100020f4: R_386_PC32	fpu64ToInternal(unsigned long long)
100020f8:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
100020fe:	50                   	push   eax
100020ff:	b9 03 00 00 00       	mov    ecx,0x3
10002104:	89 e7                	mov    edi,esp
10002106:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002108:	83 ec 0c             	sub    esp,0xc
1000210b:	b9 03 00 00 00       	mov    ecx,0x3
10002110:	89 e7                	mov    edi,esp
10002112:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
10002118:	89 c6                	mov    esi,eax
1000211a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000211c:	52                   	push   edx
1000211d:	e8 fc ff ff ff       	call   1000211e <x87Handler(regs*)+0x1546>	1000211e: R_386_PC32	fpuSub(_Float80, _Float80)
10002122:	83 c4 20             	add    esp,0x20
10002125:	b9 03 00 00 00       	mov    ecx,0x3
1000212a:	89 e7                	mov    edi,esp
1000212c:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
10002132:	e9 db 00 00 00       	jmp    10002212 <x87Handler(regs*)+0x163a>
10002137:	80 fa 06             	cmp    dl,0x6
1000213a:	75 68                	jne    100021a4 <x87Handler(regs*)+0x15cc>
1000213c:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
10002142:	57                   	push   edi
10002143:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002149:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000214c:	ff 30                	push   DWORD PTR [eax]
1000214e:	56                   	push   esi
1000214f:	e8 fc ff ff ff       	call   10002150 <x87Handler(regs*)+0x1578>	10002150: R_386_PC32	fpu64ToInternal(unsigned long long)
10002154:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
1000215a:	83 ec 0c             	sub    esp,0xc
1000215d:	6a 00                	push   0x0
1000215f:	52                   	push   edx
10002160:	e8 fc ff ff ff       	call   10002161 <x87Handler(regs*)+0x1589>	10002161: R_386_PC32	fpuGetReg(int)
10002165:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
1000216b:	52                   	push   edx
1000216c:	b9 03 00 00 00       	mov    ecx,0x3
10002171:	89 e7                	mov    edi,esp
10002173:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002175:	83 ec 0c             	sub    esp,0xc
10002178:	b9 03 00 00 00       	mov    ecx,0x3
1000217d:	89 e7                	mov    edi,esp
1000217f:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10002185:	89 d6                	mov    esi,edx
10002187:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002189:	50                   	push   eax
1000218a:	e8 fc ff ff ff       	call   1000218b <x87Handler(regs*)+0x15b3>	1000218b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000218f:	83 c4 20             	add    esp,0x20
10002192:	b9 03 00 00 00       	mov    ecx,0x3
10002197:	89 e7                	mov    edi,esp
10002199:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
1000219f:	e9 3a 01 00 00       	jmp    100022de <x87Handler(regs*)+0x1706>
100021a4:	31 c0                	xor    eax,eax
100021a6:	80 fa 07             	cmp    dl,0x7
100021a9:	0f 85 b5 01 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
100021af:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
100021b5:	50                   	push   eax
100021b6:	50                   	push   eax
100021b7:	6a 00                	push   0x0
100021b9:	56                   	push   esi
100021ba:	e8 fc ff ff ff       	call   100021bb <x87Handler(regs*)+0x15e3>	100021bb: R_386_PC32	fpuGetReg(int)
100021bf:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100021c5:	52                   	push   edx
100021c6:	52                   	push   edx
100021c7:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
100021cd:	ff 72 04             	push   DWORD PTR [edx+0x4]
100021d0:	ff 32                	push   DWORD PTR [edx]
100021d2:	50                   	push   eax
100021d3:	e8 fc ff ff ff       	call   100021d4 <x87Handler(regs*)+0x15fc>	100021d4: R_386_PC32	fpu64ToInternal(unsigned long long)
100021d8:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100021de:	51                   	push   ecx
100021df:	b9 03 00 00 00       	mov    ecx,0x3
100021e4:	89 e7                	mov    edi,esp
100021e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021e8:	83 ec 0c             	sub    esp,0xc
100021eb:	b9 03 00 00 00       	mov    ecx,0x3
100021f0:	89 e7                	mov    edi,esp
100021f2:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100021f8:	89 c6                	mov    esi,eax
100021fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021fc:	52                   	push   edx
100021fd:	e8 fc ff ff ff       	call   100021fe <x87Handler(regs*)+0x1626>	100021fe: R_386_PC32	fpuDivide(_Float80, _Float80)
10002202:	83 c4 20             	add    esp,0x20
10002205:	b9 03 00 00 00       	mov    ecx,0x3
1000220a:	89 e7                	mov    edi,esp
1000220c:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
10002212:	89 d6                	mov    esi,edx
10002214:	e9 c7 00 00 00       	jmp    100022e0 <x87Handler(regs*)+0x1708>
10002219:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
1000221f:	84 d2                	test   dl,dl
10002221:	0f 85 71 ed ff ff    	jne    10000f98 <x87Handler(regs*)+0x3c0>
10002227:	8d 75 88             	lea    esi,[ebp-0x78]
1000222a:	50                   	push   eax
1000222b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002231:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002234:	ff 30                	push   DWORD PTR [eax]
10002236:	56                   	push   esi
10002237:	e8 fc ff ff ff       	call   10002238 <x87Handler(regs*)+0x1660>	10002238: R_386_PC32	fpu64ToInternal(unsigned long long)
1000223c:	e9 d6 00 00 00       	jmp    10002317 <x87Handler(regs*)+0x173f>
10002241:	31 c0                	xor    eax,eax
10002243:	80 fa 03             	cmp    dl,0x3
10002246:	0f 85 18 01 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
1000224c:	8d 75 a0             	lea    esi,[ebp-0x60]
1000224f:	83 ec 0c             	sub    esp,0xc
10002252:	56                   	push   esi
10002253:	e8 fc ff ff ff       	call   10002254 <x87Handler(regs*)+0x167c>	10002254: R_386_PC32	fpuPop()
10002258:	83 ec 14             	sub    esp,0x14
1000225b:	b9 03 00 00 00       	mov    ecx,0x3
10002260:	89 e7                	mov    edi,esp
10002262:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002264:	e8 fc ff ff ff       	call   10002265 <x87Handler(regs*)+0x168d>	10002265: R_386_PC32	fpuInternalTo64(_Float80)
10002269:	8b bd 94 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x66c]
1000226f:	89 07                	mov    DWORD PTR [edi],eax
10002271:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10002274:	e9 51 ed ff ff       	jmp    10000fca <x87Handler(regs*)+0x3f2>
10002279:	31 c0                	xor    eax,eax
1000227b:	80 bd 9b f9 ff ff 01 	cmp    BYTE PTR [ebp-0x665],0x1
10002282:	0f 85 dc 00 00 00    	jne    10002364 <x87Handler(regs*)+0x178c>
10002288:	8d 75 ac             	lea    esi,[ebp-0x54]
1000228b:	52                   	push   edx
1000228c:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002292:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002295:	31 d2                	xor    edx,edx
10002297:	52                   	push   edx
10002298:	50                   	push   eax
10002299:	56                   	push   esi
1000229a:	e8 fc ff ff ff       	call   1000229b <x87Handler(regs*)+0x16c3>	1000229b: R_386_PC32	fpuLongToFloat(long long)
1000229f:	8d 55 b8             	lea    edx,[ebp-0x48]
100022a2:	83 ec 0c             	sub    esp,0xc
100022a5:	6a 00                	push   0x0
100022a7:	52                   	push   edx
100022a8:	e8 fc ff ff ff       	call   100022a9 <x87Handler(regs*)+0x16d1>	100022a9: R_386_PC32	fpuGetReg(int)
100022ad:	8d 45 c4             	lea    eax,[ebp-0x3c]
100022b0:	51                   	push   ecx
100022b1:	b9 03 00 00 00       	mov    ecx,0x3
100022b6:	89 e7                	mov    edi,esp
100022b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022ba:	83 ec 0c             	sub    esp,0xc
100022bd:	b9 03 00 00 00       	mov    ecx,0x3
100022c2:	89 e7                	mov    edi,esp
100022c4:	8d 55 b8             	lea    edx,[ebp-0x48]
100022c7:	89 d6                	mov    esi,edx
100022c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022cb:	50                   	push   eax
100022cc:	e8 fc ff ff ff       	call   100022cd <x87Handler(regs*)+0x16f5>	100022cd: R_386_PC32	fpuMultiply(_Float80, _Float80)
100022d1:	83 c4 20             	add    esp,0x20
100022d4:	b9 03 00 00 00       	mov    ecx,0x3
100022d9:	89 e7                	mov    edi,esp
100022db:	8d 45 c4             	lea    eax,[ebp-0x3c]
100022de:	89 c6                	mov    esi,eax
100022e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022e2:	6a 00                	push   0x0
100022e4:	e8 fc ff ff ff       	call   100022e5 <x87Handler(regs*)+0x170d>	100022e5: R_386_PC32	fpuSetReg(int, _Float80)
100022e9:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
100022ef:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100022f2:	e9 df e9 ff ff       	jmp    10000cd6 <x87Handler(regs*)+0xfe>
100022f7:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
100022fd:	80 fa 05             	cmp    dl,0x5
10002300:	75 2b                	jne    1000232d <x87Handler(regs*)+0x1755>
10002302:	8d 75 d0             	lea    esi,[ebp-0x30]
10002305:	50                   	push   eax
10002306:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000230c:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000230f:	ff 30                	push   DWORD PTR [eax]
10002311:	56                   	push   esi
10002312:	e8 fc ff ff ff       	call   10002313 <x87Handler(regs*)+0x173b>	10002313: R_386_PC32	fpuULongToFloat(unsigned long long)
10002317:	83 ec 14             	sub    esp,0x14
1000231a:	b9 03 00 00 00       	mov    ecx,0x3
1000231f:	89 e7                	mov    edi,esp
10002321:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002323:	e8 fc ff ff ff       	call   10002324 <x87Handler(regs*)+0x174c>	10002324: R_386_PC32	fpuPush(_Float80)
10002328:	e9 9d ec ff ff       	jmp    10000fca <x87Handler(regs*)+0x3f2>
1000232d:	31 c0                	xor    eax,eax
1000232f:	80 fa 07             	cmp    dl,0x7
10002332:	75 30                	jne    10002364 <x87Handler(regs*)+0x178c>
10002334:	8d 75 dc             	lea    esi,[ebp-0x24]
10002337:	83 ec 0c             	sub    esp,0xc
1000233a:	56                   	push   esi
1000233b:	e8 fc ff ff ff       	call   1000233c <x87Handler(regs*)+0x1764>	1000233c: R_386_PC32	fpuPop()
10002340:	83 ec 14             	sub    esp,0x14
10002343:	b9 03 00 00 00       	mov    ecx,0x3
10002348:	89 e7                	mov    edi,esp
1000234a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000234c:	e8 fc ff ff ff       	call   1000234d <x87Handler(regs*)+0x1775>	1000234d: R_386_PC32	fpuFloatToLong(_Float80)
10002351:	83 c4 20             	add    esp,0x20
10002354:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
1000235a:	89 01                	mov    DWORD PTR [ecx],eax
1000235c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
1000235f:	e9 ac ec ff ff       	jmp    10001010 <x87Handler(regs*)+0x438>
10002364:	8d 65 f4             	lea    esp,[ebp-0xc]
10002367:	5b                   	pop    ebx
10002368:	5e                   	pop    esi
10002369:	5f                   	pop    edi
1000236a:	5d                   	pop    ebp
1000236b:	c3                   	ret    

1000236c <begin()>:
1000236c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000236e: R_386_32	x87FaultIntercept
	10002372: R_386_32	x87Handler(regs*)
10002376:	c3                   	ret    

10002377 <_GLOBAL__sub_I__Z5startv>:
10002377:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10002379: R_386_32	fpuState
10002381:	c3                   	ret    
10002382:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002384:	38 30                	cmp    BYTE PTR [eax],dh
10002386:	38 37                	cmp    BYTE PTR [edi],dh
10002388:	20 62 61             	and    BYTE PTR [edx+0x61],ah
1000238b:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
1000238f:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
10002393:	74 00                	je     10002395 <_GLOBAL__sub_I__Z5startv+0x1e>
10002395:	48                   	dec    eax
10002396:	65 6c                	gs ins BYTE PTR es:[edi],dx
10002398:	6c                   	ins    BYTE PTR es:[edi],dx
10002399:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000239a:	2e 2e 2e 20 00       	cs cs and BYTE PTR cs:[eax],al
1000239f:	57                   	push   edi
100023a0:	6f                   	outs   dx,DWORD PTR ds:[esi]
100023a1:	72 6c                	jb     1000240f <_DYNAMIC+0x23>
100023a3:	64 21 0a             	and    DWORD PTR fs:[edx],ecx
100023a6:	00 90 50 0c 00 10    	add    BYTE PTR [eax+0x10000c50],dl	100023a8: R_386_32	.text
100023ac:	80 0c 00 10          	or     BYTE PTR [eax+eax*1],0x10	100023ac: R_386_32	.text
100023b0:	40                   	inc    eax	100023b0: R_386_32	.text
100023b1:	0e                   	push   cs
100023b2:	00 10                	add    BYTE PTR [eax],dl
100023b4:	40                   	inc    eax	100023b4: R_386_32	.text
100023b5:	0e                   	push   cs
100023b6:	00 10                	add    BYTE PTR [eax],dl
100023b8:	40                   	inc    eax	100023b8: R_386_32	.text
100023b9:	0e                   	push   cs
100023ba:	00 10                	add    BYTE PTR [eax],dl
100023bc:	40                   	inc    eax	100023bc: R_386_32	.text
100023bd:	0e                   	push   cs
100023be:	00 10                	add    BYTE PTR [eax],dl
100023c0:	40                   	inc    eax	100023c0: R_386_32	.text
100023c1:	0e                   	push   cs
100023c2:	00 10                	add    BYTE PTR [eax],dl
100023c4:	40                   	inc    eax	100023c4: R_386_32	.text
100023c5:	0e                   	push   cs
100023c6:	00 10                	add    BYTE PTR [eax],dl
100023c8:	e0 0c                	loopne 100023d6 <_GLOBAL__sub_I__Z5startv+0x5f>	100023c8: R_386_32	.text
100023ca:	00 10                	add    BYTE PTR [eax],dl
100023cc:	0f 0d 00             	prefetch BYTE PTR [eax]	100023cc: R_386_32	.text
100023cf:	10 4c 0d 00          	adc    BYTE PTR [ebp+ecx*1+0x0],cl	100023d0: R_386_32	.text
100023d3:	10 7b 0d             	adc    BYTE PTR [ebx+0xd],bh	100023d4: R_386_32	.text
100023d6:	00 10                	add    BYTE PTR [eax],dl
100023d8:	aa                   	stos   BYTE PTR es:[edi],al	100023d8: R_386_32	.text
100023d9:	0d 00 10 dc 0d       	or     eax,0xddc1000	100023dc: R_386_32	.text
100023de:	00 10                	add    BYTE PTR [eax],dl
100023e0:	0e                   	push   cs	100023e0: R_386_32	.text
100023e1:	0e                   	push   cs
100023e2:	00 10                	add    BYTE PTR [eax],dl
