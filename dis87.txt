
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuLongToFloat(long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	09 ce                	or     esi,ecx
1000006b:	75 19                	jne    10000086 <fpuLongToFloat(long long)+0x2d>
1000006d:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuLongToFloat(long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	85 db                	test   ebx,ebx
1000008a:	79 09                	jns    10000095 <fpuLongToFloat(long long)+0x3c>
1000008c:	f7 d9                	neg    ecx
1000008e:	83 d3 00             	adc    ebx,0x0
10000091:	f7 db                	neg    ebx
10000093:	b2 01                	mov    dl,0x1
10000095:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuLongToFloat(long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuLongToFloat(long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	ba 3d 40 00 00       	mov    edx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuGet0()>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c3:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000d4:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100000da:	5d                   	pop    ebp
100000db:	c2 04 00             	ret    0x4

100000de <fpuGet1()>:
100000de:	55                   	push   ebp
100000df:	89 e5                	mov    ebp,esp
100000e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e4:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000ee:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
100000f5:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100000fb:	5d                   	pop    ebp
100000fc:	c2 04 00             	ret    0x4

100000ff <fpuGetPi()>:
100000ff:	55                   	push   ebp
10000100:	89 e5                	mov    ebp,esp
10000102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000105:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000109:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
1000010f:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
10000116:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000011c:	5d                   	pop    ebp
1000011d:	c2 04 00             	ret    0x4

10000120 <fpuGetLog2E()>:
10000120:	55                   	push   ebp
10000121:	89 e5                	mov    ebp,esp
10000123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000126:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000012a:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
10000130:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
10000137:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
1000013d:	5d                   	pop    ebp
1000013e:	c2 04 00             	ret    0x4

10000141 <fpuGetLogE2()>:
10000141:	55                   	push   ebp
10000142:	89 e5                	mov    ebp,esp
10000144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000147:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000014b:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
10000151:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
10000158:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
1000015e:	5d                   	pop    ebp
1000015f:	c2 04 00             	ret    0x4

10000162 <fpuGetLog210()>:
10000162:	55                   	push   ebp
10000163:	89 e5                	mov    ebp,esp
10000165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000168:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000016c:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
10000172:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
10000179:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000017f:	5d                   	pop    ebp
10000180:	c2 04 00             	ret    0x4

10000183 <fpuGetLog102()>:
10000183:	55                   	push   ebp
10000184:	89 e5                	mov    ebp,esp
10000186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000189:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000018d:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000193:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
1000019a:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
100001a0:	5d                   	pop    ebp
100001a1:	c2 04 00             	ret    0x4

100001a4 <fpuIsSecondLarger(_Float80, _Float80)>:
100001a4:	55                   	push   ebp
100001a5:	89 e5                	mov    ebp,esp
100001a7:	b0 01                	mov    al,0x1
100001a9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100001ac:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
100001b0:	77 13                	ja     100001c5 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
100001b2:	b0 00                	mov    al,0x0
100001b4:	72 0f                	jb     100001c5 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
100001b6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100001b9:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
100001bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100001bf:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
100001c2:	0f 92 c0             	setb   al
100001c5:	5d                   	pop    ebp
100001c6:	c3                   	ret    

100001c7 <fpuAreEqual(_Float80, _Float80)>:
100001c7:	55                   	push   ebp
100001c8:	89 e5                	mov    ebp,esp
100001ca:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100001cd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100001d3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
100001d6:	81 e2 ff ff ff 00    	and    edx,0xffffff
100001dc:	31 c0                	xor    eax,eax
100001de:	39 d1                	cmp    ecx,edx
100001e0:	75 11                	jne    100001f3 <fpuAreEqual(_Float80, _Float80)+0x2c>
100001e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100001e5:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
100001e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100001eb:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
100001ee:	09 c2                	or     edx,eax
100001f0:	0f 94 c0             	sete   al
100001f3:	5d                   	pop    ebp
100001f4:	c3                   	ret    

100001f5 <fpuNormalise(_Float80)>:
100001f5:	55                   	push   ebp
100001f6:	89 e5                	mov    ebp,esp
100001f8:	57                   	push   edi
100001f9:	56                   	push   esi
100001fa:	53                   	push   ebx
100001fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001fe:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000201:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000204:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000207:	0f ba e3 1d          	bt     ebx,0x1d
1000020b:	72 23                	jb     10000230 <fpuNormalise(_Float80)+0x3b>
1000020d:	4a                   	dec    edx
1000020e:	89 de                	mov    esi,ebx
10000210:	09 ce                	or     esi,ecx
10000212:	75 16                	jne    1000022a <fpuNormalise(_Float80)+0x35>
10000214:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
1000021b:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
10000222:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000228:	eb 10                	jmp    1000023a <fpuNormalise(_Float80)+0x45>
1000022a:	01 c9                	add    ecx,ecx
1000022c:	11 db                	adc    ebx,ebx
1000022e:	eb d7                	jmp    10000207 <fpuNormalise(_Float80)+0x12>
10000230:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000233:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
10000236:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000023a:	8d 75 0c             	lea    esi,[ebp+0xc]
1000023d:	b9 03 00 00 00       	mov    ecx,0x3
10000242:	89 c7                	mov    edi,eax
10000244:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000246:	5b                   	pop    ebx
10000247:	5e                   	pop    esi
10000248:	5f                   	pop    edi
10000249:	5d                   	pop    ebp
1000024a:	c2 04 00             	ret    0x4

1000024d <fpuAdd(_Float80, _Float80)>:
1000024d:	55                   	push   ebp
1000024e:	89 e5                	mov    ebp,esp
10000250:	57                   	push   edi
10000251:	56                   	push   esi
10000252:	53                   	push   ebx
10000253:	83 ec 2c             	sub    esp,0x2c
10000256:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000259:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000025c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000025f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000262:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000265:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
10000269:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
1000026c:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
1000026f:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10000272:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
10000275:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
10000278:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
1000027b:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000027f:	66 39 c8             	cmp    ax,cx
10000282:	72 2d                	jb     100002b1 <fpuAdd(_Float80, _Float80)+0x64>
10000284:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
10000287:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000028a:	19 f8                	sbb    eax,edi
1000028c:	73 09                	jae    10000297 <fpuAdd(_Float80, _Float80)+0x4a>
1000028e:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000292:	66 39 c8             	cmp    ax,cx
10000295:	74 24                	je     100002bb <fpuAdd(_Float80, _Float80)+0x6e>
10000297:	88 d8                	mov    al,bl
10000299:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
1000029c:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
1000029f:	89 f0                	mov    eax,esi
100002a1:	89 fa                	mov    edx,edi
100002a3:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
100002a6:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
100002a9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100002ac:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100002af:	eb 0a                	jmp    100002bb <fpuAdd(_Float80, _Float80)+0x6e>
100002b1:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100002b5:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
100002b9:	89 c1                	mov    ecx,eax
100002bb:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
100002be:	29 c8                	sub    eax,ecx
100002c0:	88 c1                	mov    cl,al
100002c2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100002c5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
100002c8:	0f ad d0             	shrd   eax,edx,cl
100002cb:	d3 ea                	shr    edx,cl
100002cd:	f6 c1 20             	test   cl,0x20
100002d0:	74 04                	je     100002d6 <fpuAdd(_Float80, _Float80)+0x89>
100002d2:	89 d0                	mov    eax,edx
100002d4:	31 d2                	xor    edx,edx
100002d6:	89 d1                	mov    ecx,edx
100002d8:	89 c2                	mov    edx,eax
100002da:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100002de:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
100002e2:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
100002e5:	75 13                	jne    100002fa <fpuAdd(_Float80, _Float80)+0xad>
100002e7:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
100002ea:	89 d0                	mov    eax,edx
100002ec:	89 ca                	mov    edx,ecx
100002ee:	01 f0                	add    eax,esi
100002f0:	11 fa                	adc    edx,edi
100002f2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100002f5:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100002f8:	eb 58                	jmp    10000352 <fpuAdd(_Float80, _Float80)+0x105>
100002fa:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
100002fe:	74 24                	je     10000324 <fpuAdd(_Float80, _Float80)+0xd7>
10000300:	39 d6                	cmp    esi,edx
10000302:	89 f8                	mov    eax,edi
10000304:	19 c8                	sbb    eax,ecx
10000306:	89 d0                	mov    eax,edx
10000308:	89 ca                	mov    edx,ecx
1000030a:	73 0c                	jae    10000318 <fpuAdd(_Float80, _Float80)+0xcb>
1000030c:	29 f0                	sub    eax,esi
1000030e:	19 fa                	sbb    edx,edi
10000310:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000313:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000316:	eb 26                	jmp    1000033e <fpuAdd(_Float80, _Float80)+0xf1>
10000318:	29 c6                	sub    esi,eax
1000031a:	19 cf                	sbb    edi,ecx
1000031c:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000031f:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000322:	eb 2a                	jmp    1000034e <fpuAdd(_Float80, _Float80)+0x101>
10000324:	84 db                	test   bl,bl
10000326:	74 2a                	je     10000352 <fpuAdd(_Float80, _Float80)+0x105>
10000328:	39 f2                	cmp    edx,esi
1000032a:	89 c8                	mov    eax,ecx
1000032c:	19 f8                	sbb    eax,edi
1000032e:	89 d0                	mov    eax,edx
10000330:	89 ca                	mov    edx,ecx
10000332:	73 10                	jae    10000344 <fpuAdd(_Float80, _Float80)+0xf7>
10000334:	29 c6                	sub    esi,eax
10000336:	19 cf                	sbb    edi,ecx
10000338:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000033b:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
1000033e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
10000342:	eb 0e                	jmp    10000352 <fpuAdd(_Float80, _Float80)+0x105>
10000344:	29 f0                	sub    eax,esi
10000346:	19 fa                	sbb    edx,edi
10000348:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000034b:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000034e:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000352:	83 ec 0c             	sub    esp,0xc
10000355:	8d 75 dc             	lea    esi,[ebp-0x24]
10000358:	b9 03 00 00 00       	mov    ecx,0x3
1000035d:	89 e7                	mov    edi,esp
1000035f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000361:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000364:	e8 fc ff ff ff       	call   10000365 <fpuAdd(_Float80, _Float80)+0x118>	10000365: R_386_PC32	fpuNormalise(_Float80)
10000369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000036f:	5b                   	pop    ebx
10000370:	5e                   	pop    esi
10000371:	5f                   	pop    edi
10000372:	5d                   	pop    ebp
10000373:	c2 04 00             	ret    0x4

10000376 <fpuAbs(_Float80)>:
10000376:	55                   	push   ebp
10000377:	89 e5                	mov    ebp,esp
10000379:	57                   	push   edi
1000037a:	56                   	push   esi
1000037b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037e:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
10000382:	8d 75 0c             	lea    esi,[ebp+0xc]
10000385:	b9 03 00 00 00       	mov    ecx,0x3
1000038a:	89 c7                	mov    edi,eax
1000038c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000038e:	5e                   	pop    esi
1000038f:	5f                   	pop    edi
10000390:	5d                   	pop    ebp
10000391:	c2 04 00             	ret    0x4

10000394 <fpuSub(_Float80, _Float80)>:
10000394:	55                   	push   ebp
10000395:	89 e5                	mov    ebp,esp
10000397:	57                   	push   edi
10000398:	56                   	push   esi
10000399:	53                   	push   ebx
1000039a:	83 ec 1c             	sub    esp,0x1c
1000039d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100003a0:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
100003a4:	8d 75 18             	lea    esi,[ebp+0x18]
100003a7:	b9 03 00 00 00       	mov    ecx,0x3
100003ac:	89 e7                	mov    edi,esp
100003ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003b0:	83 ec 0c             	sub    esp,0xc
100003b3:	8d 75 0c             	lea    esi,[ebp+0xc]
100003b6:	b9 03 00 00 00       	mov    ecx,0x3
100003bb:	89 e7                	mov    edi,esp
100003bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003bf:	53                   	push   ebx
100003c0:	e8 fc ff ff ff       	call   100003c1 <fpuSub(_Float80, _Float80)+0x2d>	100003c1: R_386_PC32	fpuAdd(_Float80, _Float80)
100003c5:	89 d8                	mov    eax,ebx
100003c7:	8d 65 f4             	lea    esp,[ebp-0xc]
100003ca:	5b                   	pop    ebx
100003cb:	5e                   	pop    esi
100003cc:	5f                   	pop    edi
100003cd:	5d                   	pop    ebp
100003ce:	c2 04 00             	ret    0x4

100003d1 <fpuReverseSub(_Float80, _Float80)>:
100003d1:	55                   	push   ebp
100003d2:	89 e5                	mov    ebp,esp
100003d4:	57                   	push   edi
100003d5:	56                   	push   esi
100003d6:	53                   	push   ebx
100003d7:	83 ec 1c             	sub    esp,0x1c
100003da:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100003dd:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
100003e1:	8d 75 0c             	lea    esi,[ebp+0xc]
100003e4:	b9 03 00 00 00       	mov    ecx,0x3
100003e9:	89 e7                	mov    edi,esp
100003eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ed:	83 ec 0c             	sub    esp,0xc
100003f0:	8d 75 18             	lea    esi,[ebp+0x18]
100003f3:	b9 03 00 00 00       	mov    ecx,0x3
100003f8:	89 e7                	mov    edi,esp
100003fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003fc:	53                   	push   ebx
100003fd:	e8 fc ff ff ff       	call   100003fe <fpuReverseSub(_Float80, _Float80)+0x2d>	100003fe: R_386_PC32	fpuAdd(_Float80, _Float80)
10000402:	89 d8                	mov    eax,ebx
10000404:	8d 65 f4             	lea    esp,[ebp-0xc]
10000407:	5b                   	pop    ebx
10000408:	5e                   	pop    esi
10000409:	5f                   	pop    edi
1000040a:	5d                   	pop    ebp
1000040b:	c2 04 00             	ret    0x4

1000040e <fpuMultiply(_Float80, _Float80)>:
1000040e:	55                   	push   ebp
1000040f:	89 e5                	mov    ebp,esp
10000411:	57                   	push   edi
10000412:	56                   	push   esi
10000413:	53                   	push   ebx
10000414:	83 ec 38             	sub    esp,0x38
10000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000041a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000041d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000420:	0f ac d0 1f          	shrd   eax,edx,0x1f
10000424:	c1 ea 1f             	shr    edx,0x1f
10000427:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000042a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
1000042d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10000430:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
10000433:	0f ac fe 1f          	shrd   esi,edi,0x1f
10000437:	c1 ef 1f             	shr    edi,0x1f
1000043a:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
1000043d:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
10000440:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
10000443:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
10000446:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
10000449:	66 81 e9 ff 3f       	sub    cx,0x3fff
1000044e:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
10000452:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10000455:	0f af ce             	imul   ecx,esi
10000458:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
1000045b:	0f af d7             	imul   edx,edi
1000045e:	01 d1                	add    ecx,edx
10000460:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000463:	f7 e6                	mul    esi
10000465:	01 ca                	add    edx,ecx
10000467:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000046a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000046d:	8d 75 dc             	lea    esi,[ebp-0x24]
10000470:	b9 03 00 00 00       	mov    ecx,0x3
10000475:	89 e7                	mov    edi,esp
10000477:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000479:	53                   	push   ebx
1000047a:	e8 fc ff ff ff       	call   1000047b <fpuMultiply(_Float80, _Float80)+0x6d>	1000047b: R_386_PC32	fpuNormalise(_Float80)
1000047f:	89 d8                	mov    eax,ebx
10000481:	8d 65 f4             	lea    esp,[ebp-0xc]
10000484:	5b                   	pop    ebx
10000485:	5e                   	pop    esi
10000486:	5f                   	pop    edi
10000487:	5d                   	pop    ebp
10000488:	c2 04 00             	ret    0x4

1000048b <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000048b:	55                   	push   ebp
1000048c:	89 e5                	mov    ebp,esp
1000048e:	57                   	push   edi
1000048f:	56                   	push   esi
10000490:	53                   	push   ebx
10000491:	83 ec 24             	sub    esp,0x24
10000494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000497:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000049a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000049d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100004a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100004a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100004a6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100004a9:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100004ac:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
100004b3:	83 c8 ff             	or     eax,0xffffffff
100004b6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100004bd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100004c4:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
100004cb:	31 d2                	xor    edx,edx
100004cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
100004d0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
100004d3:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
100004d6:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
100004d9:	83 f8 ff             	cmp    eax,0xffffffff
100004dc:	75 22                	jne    10000500 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
100004de:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
100004e1:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
100004e4:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
100004e7:	0f ad f3             	shrd   ebx,esi,cl
100004ea:	d3 ee                	shr    esi,cl
100004ec:	f6 c1 20             	test   cl,0x20
100004ef:	74 04                	je     100004f5 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
100004f1:	89 f3                	mov    ebx,esi
100004f3:	31 f6                	xor    esi,esi
100004f5:	89 d9                	mov    ecx,ebx
100004f7:	83 e1 01             	and    ecx,0x1
100004fa:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
100004fd:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000500:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000503:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000506:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000509:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000050c:	72 38                	jb     10000546 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
1000050e:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000511:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000514:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
10000517:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000051a:	83 f8 ff             	cmp    eax,0xffffffff
1000051d:	75 0d                	jne    1000052c <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
1000051f:	81 ca 00 00 00 20    	or     edx,0x20000000
10000525:	b8 3d 00 00 00       	mov    eax,0x3d
1000052a:	eb 1f                	jmp    1000054b <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
1000052c:	88 c1                	mov    cl,al
1000052e:	89 ce                	mov    esi,ecx
10000530:	c1 ee 05             	shr    esi,0x5
10000533:	83 e6 01             	and    esi,0x1
10000536:	89 f3                	mov    ebx,esi
10000538:	83 f3 01             	xor    ebx,0x1
1000053b:	d3 e3                	shl    ebx,cl
1000053d:	d3 e6                	shl    esi,cl
1000053f:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
10000542:	09 f2                	or     edx,esi
10000544:	eb 05                	jmp    1000054b <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
10000546:	83 f8 ff             	cmp    eax,0xffffffff
10000549:	74 01                	je     1000054c <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
1000054b:	48                   	dec    eax
1000054c:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
1000054f:	85 c0                	test   eax,eax
10000551:	0f 85 76 ff ff ff    	jne    100004cd <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
10000557:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000055a:	83 c4 24             	add    esp,0x24
1000055d:	5b                   	pop    ebx
1000055e:	5e                   	pop    esi
1000055f:	5f                   	pop    edi
10000560:	5d                   	pop    ebp
10000561:	c3                   	ret    

10000562 <fpuDivide(_Float80, _Float80)>:
10000562:	55                   	push   ebp
10000563:	89 e5                	mov    ebp,esp
10000565:	57                   	push   edi
10000566:	56                   	push   esi
10000567:	53                   	push   ebx
10000568:	83 ec 1c             	sub    esp,0x1c
1000056b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000056e:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
10000571:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
10000574:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
10000577:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
1000057a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000057d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000580:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000583:	e8 fc ff ff ff       	call   10000584 <fpuDivide(_Float80, _Float80)+0x22>	10000584: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
10000588:	59                   	pop    ecx
10000589:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000058c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000058f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000592:	66 05 00 40          	add    ax,0x4000
10000596:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
10000599:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
1000059d:	8d 75 dc             	lea    esi,[ebp-0x24]
100005a0:	b9 03 00 00 00       	mov    ecx,0x3
100005a5:	89 e7                	mov    edi,esp
100005a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005a9:	53                   	push   ebx
100005aa:	e8 fc ff ff ff       	call   100005ab <fpuDivide(_Float80, _Float80)+0x49>	100005ab: R_386_PC32	fpuNormalise(_Float80)
100005af:	89 d8                	mov    eax,ebx
100005b1:	8d 65 f4             	lea    esp,[ebp-0xc]
100005b4:	5b                   	pop    ebx
100005b5:	5e                   	pop    esi
100005b6:	5f                   	pop    edi
100005b7:	5d                   	pop    ebp
100005b8:	c2 04 00             	ret    0x4

100005bb <fpuReciprocal(_Float80)>:
100005bb:	55                   	push   ebp
100005bc:	89 e5                	mov    ebp,esp
100005be:	57                   	push   edi
100005bf:	56                   	push   esi
100005c0:	53                   	push   ebx
100005c1:	83 ec 2c             	sub    esp,0x2c
100005c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100005c7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100005cb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100005d2:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
100005d9:	66 c7 45 e4 ff 3f    	mov    WORD PTR [ebp-0x1c],0x3fff
100005df:	8d 75 0c             	lea    esi,[ebp+0xc]
100005e2:	b9 03 00 00 00       	mov    ecx,0x3
100005e7:	89 e7                	mov    edi,esp
100005e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005eb:	83 ec 0c             	sub    esp,0xc
100005ee:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f1:	b9 03 00 00 00       	mov    ecx,0x3
100005f6:	89 e7                	mov    edi,esp
100005f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fa:	53                   	push   ebx
100005fb:	e8 fc ff ff ff       	call   100005fc <fpuReciprocal(_Float80)+0x41>	100005fc: R_386_PC32	fpuDivide(_Float80, _Float80)
10000600:	89 d8                	mov    eax,ebx
10000602:	8d 65 f4             	lea    esp,[ebp-0xc]
10000605:	5b                   	pop    ebx
10000606:	5e                   	pop    esi
10000607:	5f                   	pop    edi
10000608:	5d                   	pop    ebp
10000609:	c2 04 00             	ret    0x4

1000060c <fpuSquare(_Float80)>:
1000060c:	55                   	push   ebp
1000060d:	89 e5                	mov    ebp,esp
1000060f:	57                   	push   edi
10000610:	56                   	push   esi
10000611:	53                   	push   ebx
10000612:	83 ec 1c             	sub    esp,0x1c
10000615:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000618:	8d 75 0c             	lea    esi,[ebp+0xc]
1000061b:	b9 03 00 00 00       	mov    ecx,0x3
10000620:	89 e7                	mov    edi,esp
10000622:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000624:	83 ec 0c             	sub    esp,0xc
10000627:	8d 75 0c             	lea    esi,[ebp+0xc]
1000062a:	b9 03 00 00 00       	mov    ecx,0x3
1000062f:	89 e7                	mov    edi,esp
10000631:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000633:	53                   	push   ebx
10000634:	e8 fc ff ff ff       	call   10000635 <fpuSquare(_Float80)+0x29>	10000635: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000639:	89 d8                	mov    eax,ebx
1000063b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000063e:	5b                   	pop    ebx
1000063f:	5e                   	pop    esi
10000640:	5f                   	pop    edi
10000641:	5d                   	pop    ebp
10000642:	c2 04 00             	ret    0x4

10000645 <fpuInverseSqrt(_Float80)>:
10000645:	55                   	push   ebp
10000646:	89 e5                	mov    ebp,esp
10000648:	57                   	push   edi
10000649:	56                   	push   esi
1000064a:	53                   	push   ebx
1000064b:	83 ec 5c             	sub    esp,0x5c
1000064e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000651:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
10000655:	31 d2                	xor    edx,edx
10000657:	b9 03 00 00 00       	mov    ecx,0x3
1000065c:	31 db                	xor    ebx,ebx
1000065e:	01 c9                	add    ecx,ecx
10000660:	11 db                	adc    ebx,ebx
10000662:	42                   	inc    edx
10000663:	83 fa 3c             	cmp    edx,0x3c
10000666:	75 f6                	jne    1000065e <fpuInverseSqrt(_Float80)+0x19>
10000668:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
1000066b:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
1000066e:	8d 75 0c             	lea    esi,[ebp+0xc]
10000671:	b9 03 00 00 00       	mov    ecx,0x3
10000676:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000679:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000067b:	0f b7 d0             	movzx  edx,ax
1000067e:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000684:	d1 fa                	sar    edx,1
10000686:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000068b:	29 d1                	sub    ecx,edx
1000068d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000690:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000694:	48                   	dec    eax
10000695:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
10000699:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
100006a0:	8d 5d c4             	lea    ebx,[ebp-0x3c]
100006a3:	83 ec 0c             	sub    esp,0xc
100006a6:	b9 03 00 00 00       	mov    ecx,0x3
100006ab:	89 e7                	mov    edi,esp
100006ad:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100006b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006b2:	53                   	push   ebx
100006b3:	e8 fc ff ff ff       	call   100006b4 <fpuInverseSqrt(_Float80)+0x6f>	100006b4: R_386_PC32	fpuSquare(_Float80)
100006b8:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
100006bc:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
100006c0:	8d 45 d0             	lea    eax,[ebp-0x30]
100006c3:	83 ec 14             	sub    esp,0x14
100006c6:	8d 75 0c             	lea    esi,[ebp+0xc]
100006c9:	b9 03 00 00 00       	mov    ecx,0x3
100006ce:	89 e7                	mov    edi,esp
100006d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006d2:	83 ec 0c             	sub    esp,0xc
100006d5:	b9 03 00 00 00       	mov    ecx,0x3
100006da:	89 e7                	mov    edi,esp
100006dc:	89 de                	mov    esi,ebx
100006de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006e0:	50                   	push   eax
100006e1:	e8 fc ff ff ff       	call   100006e2 <fpuInverseSqrt(_Float80)+0x9d>	100006e2: R_386_PC32	fpuMultiply(_Float80, _Float80)
100006e6:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
100006ec:	8d 55 dc             	lea    edx,[ebp-0x24]
100006ef:	83 c4 1c             	add    esp,0x1c
100006f2:	b9 03 00 00 00       	mov    ecx,0x3
100006f7:	89 e7                	mov    edi,esp
100006f9:	8d 45 d0             	lea    eax,[ebp-0x30]
100006fc:	89 c6                	mov    esi,eax
100006fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000700:	83 ec 0c             	sub    esp,0xc
10000703:	8d 75 b8             	lea    esi,[ebp-0x48]
10000706:	b9 03 00 00 00       	mov    ecx,0x3
1000070b:	89 e7                	mov    edi,esp
1000070d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000070f:	52                   	push   edx
10000710:	e8 fc ff ff ff       	call   10000711 <fpuInverseSqrt(_Float80)+0xcc>	10000711: R_386_PC32	fpuSub(_Float80, _Float80)
10000715:	8d 5d a8             	lea    ebx,[ebp-0x58]
10000718:	50                   	push   eax
10000719:	b9 03 00 00 00       	mov    ecx,0x3
1000071e:	89 e7                	mov    edi,esp
10000720:	8d 55 dc             	lea    edx,[ebp-0x24]
10000723:	89 d6                	mov    esi,edx
10000725:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000727:	83 ec 0c             	sub    esp,0xc
1000072a:	b9 03 00 00 00       	mov    ecx,0x3
1000072f:	89 e7                	mov    edi,esp
10000731:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000734:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000736:	53                   	push   ebx
10000737:	e8 fc ff ff ff       	call   10000738 <fpuInverseSqrt(_Float80)+0xf3>	10000738: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000073c:	b9 03 00 00 00       	mov    ecx,0x3
10000741:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000744:	89 de                	mov    esi,ebx
10000746:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000748:	83 c4 2c             	add    esp,0x2c
1000074b:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
1000074e:	0f 85 4c ff ff ff    	jne    100006a0 <fpuInverseSqrt(_Float80)+0x5b>
10000754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000757:	8d 65 f4             	lea    esp,[ebp-0xc]
1000075a:	5b                   	pop    ebx
1000075b:	5e                   	pop    esi
1000075c:	5f                   	pop    edi
1000075d:	5d                   	pop    ebp
1000075e:	c2 04 00             	ret    0x4

10000761 <fpuSqrt(_Float80)>:
10000761:	55                   	push   ebp
10000762:	89 e5                	mov    ebp,esp
10000764:	57                   	push   edi
10000765:	56                   	push   esi
10000766:	53                   	push   ebx
10000767:	83 ec 38             	sub    esp,0x38
1000076a:	8d 5d d0             	lea    ebx,[ebp-0x30]
1000076d:	8d 75 0c             	lea    esi,[ebp+0xc]
10000770:	b9 03 00 00 00       	mov    ecx,0x3
10000775:	89 e7                	mov    edi,esp
10000777:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000779:	53                   	push   ebx
1000077a:	e8 fc ff ff ff       	call   1000077b <fpuSqrt(_Float80)+0x1a>	1000077b: R_386_PC32	fpuInverseSqrt(_Float80)
1000077f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000783:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000078a:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000791:	66 c7 45 e4 ff 3f    	mov    WORD PTR [ebp-0x1c],0x3fff
10000797:	83 ec 14             	sub    esp,0x14
1000079a:	b9 03 00 00 00       	mov    ecx,0x3
1000079f:	89 e7                	mov    edi,esp
100007a1:	89 de                	mov    esi,ebx
100007a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a5:	83 ec 0c             	sub    esp,0xc
100007a8:	8d 75 dc             	lea    esi,[ebp-0x24]
100007ab:	b9 03 00 00 00       	mov    ecx,0x3
100007b0:	89 e7                	mov    edi,esp
100007b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSqrt(_Float80)+0x57>	100007b8: R_386_PC32	fpuDivide(_Float80, _Float80)
100007bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c2:	5b                   	pop    ebx
100007c3:	5e                   	pop    esi
100007c4:	5f                   	pop    edi
100007c5:	5d                   	pop    ebp
100007c6:	c2 04 00             	ret    0x4

100007c9 <fpuGetReg(int)>:
100007c9:	55                   	push   ebp
100007ca:	89 e5                	mov    ebp,esp
100007cc:	57                   	push   edi
100007cd:	56                   	push   esi
100007ce:	a0 01 00 00 00       	mov    al,ds:0x1	100007cf: R_386_32	fpuState
100007d3:	c0 e8 03             	shr    al,0x3
100007d6:	83 e0 07             	and    eax,0x7
100007d9:	03 45 0c             	add    eax,DWORD PTR [ebp+0xc]
100007dc:	b9 08 00 00 00       	mov    ecx,0x8
100007e1:	99                   	cdq    
100007e2:	f7 f9                	idiv   ecx
100007e4:	6b c2 0c             	imul   eax,edx,0xc
100007e7:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	100007e9: R_386_32	fpuState
100007ed:	b9 03 00 00 00       	mov    ecx,0x3
100007f2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007fa:	5e                   	pop    esi
100007fb:	5f                   	pop    edi
100007fc:	5d                   	pop    ebp
100007fd:	c2 04 00             	ret    0x4

10000800 <fpuInternalTo32(_Float80)>:
10000800:	55                   	push   ebp
10000801:	89 e5                	mov    ebp,esp
10000803:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000806:	66 81 f9 7e 40       	cmp    cx,0x407e
1000080b:	76 0c                	jbe    10000819 <fpuInternalTo32(_Float80)+0x19>
1000080d:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	1000080f: R_386_32	fpuState
10000814:	b9 7f 00 00 00       	mov    ecx,0x7f
10000819:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
1000081d:	19 d2                	sbb    edx,edx
1000081f:	f7 d2                	not    edx
10000821:	81 e2 00 00 00 80    	and    edx,0x80000000
10000827:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000082a:	c1 e8 06             	shr    eax,0x6
1000082d:	25 ff ff 7f 03       	and    eax,0x37fffff
10000832:	c1 e1 17             	shl    ecx,0x17
10000835:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
1000083b:	09 c8                	or     eax,ecx
1000083d:	09 d0                	or     eax,edx
1000083f:	5d                   	pop    ebp
10000840:	c3                   	ret    

10000841 <fpuInternalTo64(_Float80)>:
10000841:	55                   	push   ebp
10000842:	89 e5                	mov    ebp,esp
10000844:	57                   	push   edi
10000845:	56                   	push   esi
10000846:	53                   	push   ebx
10000847:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000084a:	66 81 fb fe 43       	cmp    bx,0x43fe
1000084f:	76 0c                	jbe    1000085d <fpuInternalTo64(_Float80)+0x1c>
10000851:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000853: R_386_32	fpuState
10000858:	bb ff 03 00 00       	mov    ebx,0x3ff
1000085d:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000861:	19 c9                	sbb    ecx,ecx
10000863:	f7 d1                	not    ecx
10000865:	81 e1 00 00 00 80    	and    ecx,0x80000000
1000086b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000086e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000871:	0f ac d0 09          	shrd   eax,edx,0x9
10000875:	c1 ea 09             	shr    edx,0x9
10000878:	89 c6                	mov    esi,eax
1000087a:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000880:	c1 e3 14             	shl    ebx,0x14
10000883:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000889:	09 da                	or     edx,ebx
1000088b:	09 ca                	or     edx,ecx
1000088d:	89 f0                	mov    eax,esi
1000088f:	5b                   	pop    ebx
10000890:	5e                   	pop    esi
10000891:	5f                   	pop    edi
10000892:	5d                   	pop    ebp
10000893:	c3                   	ret    

10000894 <fpuPush(_Float80)>:
10000894:	55                   	push   ebp
10000895:	89 e5                	mov    ebp,esp
10000897:	57                   	push   edi
10000898:	56                   	push   esi
10000899:	a0 01 00 00 00       	mov    al,ds:0x1	1000089a: R_386_32	fpuState
1000089e:	88 c1                	mov    cl,al
100008a0:	c0 e9 03             	shr    cl,0x3
100008a3:	89 cf                	mov    edi,ecx
100008a5:	83 e7 07             	and    edi,0x7
100008a8:	83 c7 07             	add    edi,0x7
100008ab:	89 fa                	mov    edx,edi
100008ad:	83 e2 07             	and    edx,0x7
100008b0:	c1 e2 03             	shl    edx,0x3
100008b3:	83 e0 c7             	and    eax,0xffffffc7
100008b6:	09 d0                	or     eax,edx
100008b8:	a2 01 00 00 00       	mov    ds:0x1,al	100008b9: R_386_32	fpuState
100008bd:	83 e7 07             	and    edi,0x7
100008c0:	6b ff 0c             	imul   edi,edi,0xc
100008c3:	81 c7 04 00 00 00    	add    edi,0x4	100008c5: R_386_32	fpuState
100008c9:	b9 03 00 00 00       	mov    ecx,0x3
100008ce:	8d 75 08             	lea    esi,[ebp+0x8]
100008d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008d3:	a1 64 00 00 00       	mov    eax,ds:0x64	100008d4: R_386_32	fpuState
100008d8:	83 f8 08             	cmp    eax,0x8
100008db:	75 09                	jne    100008e6 <fpuPush(_Float80)+0x52>
100008dd:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	100008df: R_386_32	fpuState
100008e4:	eb 06                	jmp    100008ec <fpuPush(_Float80)+0x58>
100008e6:	40                   	inc    eax
100008e7:	a3 64 00 00 00       	mov    ds:0x64,eax	100008e8: R_386_32	fpuState
100008ec:	5e                   	pop    esi
100008ed:	5f                   	pop    edi
100008ee:	5d                   	pop    ebp
100008ef:	c3                   	ret    

100008f0 <x87Handler(regs*)>:
100008f0:	55                   	push   ebp
100008f1:	89 e5                	mov    ebp,esp
100008f3:	57                   	push   edi
100008f4:	56                   	push   esi
100008f5:	53                   	push   ebx
100008f6:	83 ec 7c             	sub    esp,0x7c
100008f9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100008fc:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
100008ff:	8a 47 01             	mov    al,BYTE PTR [edi+0x1]
10000902:	88 85 7c ff ff ff    	mov    BYTE PTR [ebp-0x84],al
10000908:	c0 e8 06             	shr    al,0x6
1000090b:	88 85 7f ff ff ff    	mov    BYTE PTR [ebp-0x81],al
10000911:	3c 03                	cmp    al,0x3
10000913:	0f 84 06 02 00 00    	je     10000b1f <x87Handler(regs*)+0x22f>
10000919:	8a 8d 7c ff ff ff    	mov    cl,BYTE PTR [ebp-0x84]
1000091f:	83 e1 07             	and    ecx,0x7
10000922:	80 f9 04             	cmp    cl,0x4
10000925:	0f 84 ad 00 00 00    	je     100009d8 <x87Handler(regs*)+0xe8>
1000092b:	84 c0                	test   al,al
1000092d:	0f 95 c2             	setne  dl
10000930:	80 f9 05             	cmp    cl,0x5
10000933:	0f 95 c0             	setne  al
10000936:	08 d0                	or     al,dl
10000938:	0f 84 88 00 00 00    	je     100009c6 <x87Handler(regs*)+0xd6>
1000093e:	84 c9                	test   cl,cl
10000940:	75 05                	jne    10000947 <x87Handler(regs*)+0x57>
10000942:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10000945:	eb 41                	jmp    10000988 <x87Handler(regs*)+0x98>
10000947:	80 f9 01             	cmp    cl,0x1
1000094a:	75 05                	jne    10000951 <x87Handler(regs*)+0x61>
1000094c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
1000094f:	eb 37                	jmp    10000988 <x87Handler(regs*)+0x98>
10000951:	80 f9 02             	cmp    cl,0x2
10000954:	75 05                	jne    1000095b <x87Handler(regs*)+0x6b>
10000956:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10000959:	eb 2d                	jmp    10000988 <x87Handler(regs*)+0x98>
1000095b:	c7 45 84 00 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x0
10000962:	80 f9 03             	cmp    cl,0x3
10000965:	75 05                	jne    1000096c <x87Handler(regs*)+0x7c>
10000967:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
1000096a:	eb 1c                	jmp    10000988 <x87Handler(regs*)+0x98>
1000096c:	80 f9 05             	cmp    cl,0x5
1000096f:	75 05                	jne    10000976 <x87Handler(regs*)+0x86>
10000971:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
10000974:	eb 12                	jmp    10000988 <x87Handler(regs*)+0x98>
10000976:	80 f9 06             	cmp    cl,0x6
10000979:	75 05                	jne    10000980 <x87Handler(regs*)+0x90>
1000097b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
1000097e:	eb 08                	jmp    10000988 <x87Handler(regs*)+0x98>
10000980:	80 f9 07             	cmp    cl,0x7
10000983:	75 06                	jne    1000098b <x87Handler(regs*)+0x9b>
10000985:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10000988:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
1000098b:	80 bd 7f ff ff ff 01 	cmp    BYTE PTR [ebp-0x81],0x1
10000992:	75 13                	jne    100009a7 <x87Handler(regs*)+0xb7>
10000994:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
10000998:	01 45 84             	add    DWORD PTR [ebp-0x7c],eax
1000099b:	c7 45 80 03 00 00 00 	mov    DWORD PTR [ebp-0x80],0x3
100009a2:	e9 91 01 00 00       	jmp    10000b38 <x87Handler(regs*)+0x248>
100009a7:	80 bd 7f ff ff ff 02 	cmp    BYTE PTR [ebp-0x81],0x2
100009ae:	0f 85 7d 01 00 00    	jne    10000b31 <x87Handler(regs*)+0x241>
100009b4:	8b 77 02             	mov    esi,DWORD PTR [edi+0x2]
100009b7:	01 75 84             	add    DWORD PTR [ebp-0x7c],esi
100009ba:	c7 45 80 06 00 00 00 	mov    DWORD PTR [ebp-0x80],0x6
100009c1:	e9 72 01 00 00       	jmp    10000b38 <x87Handler(regs*)+0x248>
100009c6:	8b 77 02             	mov    esi,DWORD PTR [edi+0x2]
100009c9:	89 75 84             	mov    DWORD PTR [ebp-0x7c],esi
100009cc:	c7 45 80 06 00 00 00 	mov    DWORD PTR [ebp-0x80],0x6
100009d3:	e9 62 01 00 00       	jmp    10000b3a <x87Handler(regs*)+0x24a>
100009d8:	8a 4f 02             	mov    cl,BYTE PTR [edi+0x2]
100009db:	89 c8                	mov    eax,ecx
100009dd:	66 c1 e8 03          	shr    ax,0x3
100009e1:	83 e0 07             	and    eax,0x7
100009e4:	88 ca                	mov    dl,cl
100009e6:	83 e2 07             	and    edx,0x7
100009e9:	88 55 84             	mov    BYTE PTR [ebp-0x7c],dl
100009ec:	c0 e9 06             	shr    cl,0x6
100009ef:	0f b6 d1             	movzx  edx,cl
100009f2:	88 8d 7e ff ff ff    	mov    BYTE PTR [ebp-0x82],cl
100009f8:	51                   	push   ecx
100009f9:	51                   	push   ecx
100009fa:	0f b6 75 84          	movzx  esi,BYTE PTR [ebp-0x7c]
100009fe:	56                   	push   esi
100009ff:	0f b6 f0             	movzx  esi,al
10000a02:	88 45 80             	mov    BYTE PTR [ebp-0x80],al
10000a05:	56                   	push   esi
10000a06:	52                   	push   edx
10000a07:	6a 04                	push   0x4
10000a09:	0f b6 95 7f ff ff ff 	movzx  edx,BYTE PTR [ebp-0x81]
10000a10:	52                   	push   edx
10000a11:	68 92 0d 00 10       	push   0x10000d92	10000a12: R_386_32	.text
10000a16:	e8 fc ff ff ff       	call   10000a17 <x87Handler(regs*)+0x127>	10000a17: R_386_PC32	Dbg::kprintf(char const*, ...)
10000a1b:	83 c4 20             	add    esp,0x20
10000a1e:	80 7d 84 00          	cmp    BYTE PTR [ebp-0x7c],0x0
10000a22:	8a 45 80             	mov    al,BYTE PTR [ebp-0x80]
10000a25:	8a 8d 7e ff ff ff    	mov    cl,BYTE PTR [ebp-0x82]
10000a2b:	75 05                	jne    10000a32 <x87Handler(regs*)+0x142>
10000a2d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
10000a30:	eb 45                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a32:	80 7d 84 01          	cmp    BYTE PTR [ebp-0x7c],0x1
10000a36:	75 05                	jne    10000a3d <x87Handler(regs*)+0x14d>
10000a38:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
10000a3b:	eb 3a                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a3d:	80 7d 84 02          	cmp    BYTE PTR [ebp-0x7c],0x2
10000a41:	75 05                	jne    10000a48 <x87Handler(regs*)+0x158>
10000a43:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10000a46:	eb 2f                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a48:	80 7d 84 03          	cmp    BYTE PTR [ebp-0x7c],0x3
10000a4c:	75 05                	jne    10000a53 <x87Handler(regs*)+0x163>
10000a4e:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10000a51:	eb 24                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a53:	80 7d 84 04          	cmp    BYTE PTR [ebp-0x7c],0x4
10000a57:	75 05                	jne    10000a5e <x87Handler(regs*)+0x16e>
10000a59:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
10000a5c:	eb 19                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a5e:	80 7d 84 05          	cmp    BYTE PTR [ebp-0x7c],0x5
10000a62:	75 05                	jne    10000a69 <x87Handler(regs*)+0x179>
10000a64:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
10000a67:	eb 0e                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a69:	80 7d 84 06          	cmp    BYTE PTR [ebp-0x7c],0x6
10000a6d:	75 05                	jne    10000a74 <x87Handler(regs*)+0x184>
10000a6f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10000a72:	eb 03                	jmp    10000a77 <x87Handler(regs*)+0x187>
10000a74:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
10000a77:	84 c0                	test   al,al
10000a79:	75 05                	jne    10000a80 <x87Handler(regs*)+0x190>
10000a7b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
10000a7e:	eb 36                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000a80:	3c 01                	cmp    al,0x1
10000a82:	75 05                	jne    10000a89 <x87Handler(regs*)+0x199>
10000a84:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
10000a87:	eb 2d                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000a89:	3c 02                	cmp    al,0x2
10000a8b:	75 05                	jne    10000a92 <x87Handler(regs*)+0x1a2>
10000a8d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
10000a90:	eb 24                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000a92:	3c 03                	cmp    al,0x3
10000a94:	75 05                	jne    10000a9b <x87Handler(regs*)+0x1ab>
10000a96:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
10000a99:	eb 1b                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000a9b:	31 d2                	xor    edx,edx
10000a9d:	3c 04                	cmp    al,0x4
10000a9f:	74 15                	je     10000ab6 <x87Handler(regs*)+0x1c6>
10000aa1:	3c 05                	cmp    al,0x5
10000aa3:	75 05                	jne    10000aaa <x87Handler(regs*)+0x1ba>
10000aa5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10000aa8:	eb 0c                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000aaa:	3c 06                	cmp    al,0x6
10000aac:	75 05                	jne    10000ab3 <x87Handler(regs*)+0x1c3>
10000aae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
10000ab1:	eb 03                	jmp    10000ab6 <x87Handler(regs*)+0x1c6>
10000ab3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
10000ab6:	80 bd 7f ff ff ff 00 	cmp    BYTE PTR [ebp-0x81],0x0
10000abd:	0f 94 c0             	sete   al
10000ac0:	80 7d 84 05          	cmp    BYTE PTR [ebp-0x7c],0x5
10000ac4:	0f 94 45 84          	sete   BYTE PTR [ebp-0x7c]
10000ac8:	22 45 84             	and    al,BYTE PTR [ebp-0x7c]
10000acb:	74 13                	je     10000ae0 <x87Handler(regs*)+0x1f0>
10000acd:	89 d0                	mov    eax,edx
10000acf:	d3 e0                	shl    eax,cl
10000ad1:	03 47 03             	add    eax,DWORD PTR [edi+0x3]
10000ad4:	89 45 84             	mov    DWORD PTR [ebp-0x7c],eax
10000ad7:	c7 45 80 07 00 00 00 	mov    DWORD PTR [ebp-0x80],0x7
10000ade:	eb 58                	jmp    10000b38 <x87Handler(regs*)+0x248>
10000ae0:	01 f2                	add    edx,esi
10000ae2:	d3 e2                	shl    edx,cl
10000ae4:	89 55 84             	mov    DWORD PTR [ebp-0x7c],edx
10000ae7:	c7 45 80 03 00 00 00 	mov    DWORD PTR [ebp-0x80],0x3
10000aee:	80 bd 7f ff ff ff 00 	cmp    BYTE PTR [ebp-0x81],0x0
10000af5:	74 43                	je     10000b3a <x87Handler(regs*)+0x24a>
10000af7:	80 bd 7f ff ff ff 01 	cmp    BYTE PTR [ebp-0x81],0x1
10000afe:	75 10                	jne    10000b10 <x87Handler(regs*)+0x220>
10000b00:	0f be 57 03          	movsx  edx,BYTE PTR [edi+0x3]
10000b04:	01 55 84             	add    DWORD PTR [ebp-0x7c],edx
10000b07:	c7 45 80 04 00 00 00 	mov    DWORD PTR [ebp-0x80],0x4
10000b0e:	eb 2a                	jmp    10000b3a <x87Handler(regs*)+0x24a>
10000b10:	8b 4f 03             	mov    ecx,DWORD PTR [edi+0x3]
10000b13:	01 4d 84             	add    DWORD PTR [ebp-0x7c],ecx
10000b16:	c7 45 80 07 00 00 00 	mov    DWORD PTR [ebp-0x80],0x7
10000b1d:	eb 1b                	jmp    10000b3a <x87Handler(regs*)+0x24a>
10000b1f:	c7 45 80 02 00 00 00 	mov    DWORD PTR [ebp-0x80],0x2
10000b26:	b0 01                	mov    al,0x1
10000b28:	c7 45 84 00 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x0
10000b2f:	eb 09                	jmp    10000b3a <x87Handler(regs*)+0x24a>
10000b31:	c7 45 80 02 00 00 00 	mov    DWORD PTR [ebp-0x80],0x2
10000b38:	31 c0                	xor    eax,eax
10000b3a:	88 85 7f ff ff ff    	mov    BYTE PTR [ebp-0x81],al
10000b40:	52                   	push   edx
10000b41:	52                   	push   edx
10000b42:	57                   	push   edi
10000b43:	68 cd 0d 00 10       	push   0x10000dcd	10000b44: R_386_32	.text
10000b48:	e8 fc ff ff ff       	call   10000b49 <x87Handler(regs*)+0x259>	10000b49: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b4d:	0f b6 57 03          	movzx  edx,BYTE PTR [edi+0x3]
10000b51:	89 14 24             	mov    DWORD PTR [esp],edx
10000b54:	0f b6 57 02          	movzx  edx,BYTE PTR [edi+0x2]
10000b58:	52                   	push   edx
10000b59:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
10000b5d:	52                   	push   edx
10000b5e:	0f b6 17             	movzx  edx,BYTE PTR [edi]
10000b61:	52                   	push   edx
10000b62:	68 fb 0d 00 10       	push   0x10000dfb	10000b63: R_386_32	.text
10000b67:	e8 fc ff ff ff       	call   10000b68 <x87Handler(regs*)+0x278>	10000b68: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b6c:	83 c4 18             	add    esp,0x18
10000b6f:	ff 75 84             	push   DWORD PTR [ebp-0x7c]
10000b72:	68 0d 0e 00 10       	push   0x10000e0d	10000b73: R_386_32	.text
10000b77:	e8 fc ff ff ff       	call   10000b78 <x87Handler(regs*)+0x288>	10000b78: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b7c:	8a 17                	mov    dl,BYTE PTR [edi]
10000b7e:	83 c4 10             	add    esp,0x10
10000b81:	80 fa d9             	cmp    dl,0xd9
10000b84:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [ebp-0x81]
10000b8a:	0f 85 27 01 00 00    	jne    10000cb7 <x87Handler(regs*)+0x3c7>
10000b90:	8a 47 01             	mov    al,BYTE PTR [edi+0x1]
10000b93:	83 c0 18             	add    eax,0x18
10000b96:	c6 85 7f ff ff ff 00 	mov    BYTE PTR [ebp-0x81],0x0
10000b9d:	3c 06                	cmp    al,0x6
10000b9f:	0f 87 78 01 00 00    	ja     10000d1d <x87Handler(regs*)+0x42d>
10000ba5:	0f b6 c0             	movzx  eax,al
10000ba8:	ff 24 85 40 0e 00 10 	jmp    DWORD PTR [eax*4+0x10000e40]	10000bab: R_386_32	.text
10000baf:	c6 45 92 00          	mov    BYTE PTR [ebp-0x6e],0x0
10000bb3:	c7 45 88 00 00 00 00 	mov    DWORD PTR [ebp-0x78],0x0
10000bba:	c7 45 8c 00 00 00 20 	mov    DWORD PTR [ebp-0x74],0x20000000
10000bc1:	66 c7 45 90 ff 3f    	mov    WORD PTR [ebp-0x70],0x3fff
10000bc7:	83 ec 10             	sub    esp,0x10
10000bca:	8d 75 88             	lea    esi,[ebp-0x78]
10000bcd:	eb 1e                	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000bcf:	c6 45 9e 00          	mov    BYTE PTR [ebp-0x62],0x0
10000bd3:	c7 45 94 be e2 46 f3 	mov    DWORD PTR [ebp-0x6c],0xf346e2be
10000bda:	c7 45 98 12 9e 26 35 	mov    DWORD PTR [ebp-0x68],0x35269e12
10000be1:	66 c7 45 9c 01 40    	mov    WORD PTR [ebp-0x64],0x4001
10000be7:	83 ec 10             	sub    esp,0x10
10000bea:	8d 75 94             	lea    esi,[ebp-0x6c]
10000bed:	b9 03 00 00 00       	mov    ecx,0x3
10000bf2:	89 e7                	mov    edi,esp
10000bf4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bf6:	e8 fc ff ff ff       	call   10000bf7 <x87Handler(regs*)+0x307>	10000bf7: R_386_PC32	fpuPush(_Float80)
10000bfb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000bff:	83 c4 10             	add    esp,0x10
10000c02:	c6 85 7f ff ff ff 01 	mov    BYTE PTR [ebp-0x81],0x1
10000c09:	e9 0f 01 00 00       	jmp    10000d1d <x87Handler(regs*)+0x42d>
10000c0e:	c6 45 aa 00          	mov    BYTE PTR [ebp-0x56],0x0
10000c12:	c7 45 a0 1c fc 05 57 	mov    DWORD PTR [ebp-0x60],0x5705fc1c
10000c19:	c7 45 a4 ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5c],0x2e2a8eca
10000c20:	66 c7 45 a8 00 40    	mov    WORD PTR [ebp-0x58],0x4000
10000c26:	83 ec 10             	sub    esp,0x10
10000c29:	8d 75 a0             	lea    esi,[ebp-0x60]
10000c2c:	eb bf                	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000c2e:	c6 45 b6 00          	mov    BYTE PTR [ebp-0x4a],0x0
10000c32:	c7 45 ac 8c 30 5a 88 	mov    DWORD PTR [ebp-0x54],0x885a308c
10000c39:	c7 45 b0 a8 f6 43 32 	mov    DWORD PTR [ebp-0x50],0x3243f6a8
10000c40:	66 c7 45 b4 01 40    	mov    WORD PTR [ebp-0x4c],0x4001
10000c46:	83 ec 10             	sub    esp,0x10
10000c49:	8d 75 ac             	lea    esi,[ebp-0x54]
10000c4c:	eb 9f                	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000c4e:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
10000c52:	c7 45 b8 e6 fd f3 3e 	mov    DWORD PTR [ebp-0x48],0x3ef3fde6
10000c59:	c7 45 bc a1 26 88 26 	mov    DWORD PTR [ebp-0x44],0x268826a1
10000c60:	66 c7 45 c0 fe 3f    	mov    WORD PTR [ebp-0x40],0x3ffe
10000c66:	83 ec 10             	sub    esp,0x10
10000c69:	8d 75 b8             	lea    esi,[ebp-0x48]
10000c6c:	e9 7c ff ff ff       	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000c71:	c6 45 ce 00          	mov    BYTE PTR [ebp-0x32],0x0
10000c75:	c7 45 c4 68 de 73 f4 	mov    DWORD PTR [ebp-0x3c],0xf473de68
10000c7c:	c7 45 c8 fd 85 5c 2c 	mov    DWORD PTR [ebp-0x38],0x2c5c85fd
10000c83:	66 c7 45 cc ff 3f    	mov    WORD PTR [ebp-0x34],0x3fff
10000c89:	83 ec 10             	sub    esp,0x10
10000c8c:	8d 75 c4             	lea    esi,[ebp-0x3c]
10000c8f:	e9 59 ff ff ff       	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000c94:	c6 45 da 00          	mov    BYTE PTR [ebp-0x26],0x0
10000c98:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000c9f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000ca6:	66 c7 45 d8 ff 3f    	mov    WORD PTR [ebp-0x28],0x3fff
10000cac:	83 ec 10             	sub    esp,0x10
10000caf:	8d 75 d0             	lea    esi,[ebp-0x30]
10000cb2:	e9 36 ff ff ff       	jmp    10000bed <x87Handler(regs*)+0x2fd>
10000cb7:	8b 8d 7c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x84]
10000cbd:	66 c1 e9 03          	shr    cx,0x3
10000cc1:	83 e1 07             	and    ecx,0x7
10000cc4:	80 f9 03             	cmp    cl,0x3
10000cc7:	0f 94 c1             	sete   cl
10000cca:	80 fa dd             	cmp    dl,0xdd
10000ccd:	0f 94 c2             	sete   dl
10000cd0:	20 d1                	and    cl,dl
10000cd2:	88 8d 7f ff ff ff    	mov    BYTE PTR [ebp-0x81],cl
10000cd8:	74 43                	je     10000d1d <x87Handler(regs*)+0x42d>
10000cda:	84 c0                	test   al,al
10000cdc:	74 10                	je     10000cee <x87Handler(regs*)+0x3fe>
10000cde:	83 ec 0c             	sub    esp,0xc
10000ce1:	68 25 0e 00 10       	push   0x10000e25	10000ce2: R_386_32	.text
10000ce6:	e8 fc ff ff ff       	call   10000ce7 <x87Handler(regs*)+0x3f7>	10000ce7: R_386_PC32	Krnl::panic(char const*)
10000ceb:	83 c4 10             	add    esp,0x10
10000cee:	8d 75 dc             	lea    esi,[ebp-0x24]
10000cf1:	50                   	push   eax
10000cf2:	50                   	push   eax
10000cf3:	6a 00                	push   0x0
10000cf5:	56                   	push   esi
10000cf6:	e8 fc ff ff ff       	call   10000cf7 <x87Handler(regs*)+0x407>	10000cf7: R_386_PC32	fpuGetReg(int)
10000cfb:	83 ec 14             	sub    esp,0x14
10000cfe:	b9 03 00 00 00       	mov    ecx,0x3
10000d03:	89 e7                	mov    edi,esp
10000d05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d07:	e8 fc ff ff ff       	call   10000d08 <x87Handler(regs*)+0x418>	10000d08: R_386_PC32	fpuInternalTo64(_Float80)
10000d0c:	8b 7d 84             	mov    edi,DWORD PTR [ebp-0x7c]
10000d0f:	89 07                	mov    DWORD PTR [edi],eax
10000d11:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10000d14:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10000d17:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000d1a:	83 c4 20             	add    esp,0x20
10000d1d:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [ebp-0x81]
10000d23:	8d 65 f4             	lea    esp,[ebp-0xc]
10000d26:	5b                   	pop    ebx
10000d27:	5e                   	pop    esi
10000d28:	5f                   	pop    edi
10000d29:	5d                   	pop    ebp
10000d2a:	c3                   	ret    

10000d2b <fpuPop()>:
10000d2b:	55                   	push   ebp
10000d2c:	89 e5                	mov    ebp,esp
10000d2e:	57                   	push   edi
10000d2f:	56                   	push   esi
10000d30:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000d32: R_386_32	fpuState
10000d36:	88 d0                	mov    al,dl
10000d38:	c0 e8 03             	shr    al,0x3
10000d3b:	83 e0 07             	and    eax,0x7
10000d3e:	6b f0 0c             	imul   esi,eax,0xc
10000d41:	81 c6 04 00 00 00    	add    esi,0x4	10000d43: R_386_32	fpuState
10000d47:	b9 03 00 00 00       	mov    ecx,0x3
10000d4c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000d4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d51:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000d58:	83 e0 38             	and    eax,0x38
10000d5b:	83 e2 c7             	and    edx,0xffffffc7
10000d5e:	09 c2                	or     edx,eax
10000d60:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000d62: R_386_32	fpuState
10000d66:	a1 64 00 00 00       	mov    eax,ds:0x64	10000d67: R_386_32	fpuState
10000d6b:	85 c0                	test   eax,eax
10000d6d:	74 08                	je     10000d77 <fpuPop()+0x4c>
10000d6f:	48                   	dec    eax
10000d70:	a3 64 00 00 00       	mov    ds:0x64,eax	10000d71: R_386_32	fpuState
10000d75:	eb 07                	jmp    10000d7e <fpuPop()+0x53>
10000d77:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000d79: R_386_32	fpuState
10000d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d81:	5e                   	pop    esi
10000d82:	5f                   	pop    edi
10000d83:	5d                   	pop    ebp
10000d84:	c2 04 00             	ret    0x4

10000d87 <begin()>:
10000d87:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000d89: R_386_32	x87FaultIntercept
	10000d8d: R_386_32	x87Handler(regs*)
10000d91:	c3                   	ret    
10000d92:	53                   	push   ebx
10000d93:	49                   	dec    ecx
10000d94:	42                   	inc    edx
10000d95:	2e 20 6d 6f          	and    BYTE PTR cs:[ebp+0x6f],ch
10000d99:	64 20 3d 20 25 64 2c 	and    BYTE PTR fs:0x2c642520,bh
10000da0:	20 72 6d             	and    BYTE PTR [edx+0x6d],dh
10000da3:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
10000da9:	20 73 63             	and    BYTE PTR [ebx+0x63],dh
10000dac:	61                   	popa   
10000dad:	6c                   	ins    BYTE PTR es:[edi],dx
10000dae:	65 20 3d 20 25 64 2c 	and    BYTE PTR gs:0x2c642520,bh
10000db5:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
10000db8:	64 65 78 20          	fs gs js 10000ddc <begin()+0x55>
10000dbc:	3d 20 25 64 2c       	cmp    eax,0x2c642520
10000dc1:	20 62 61             	and    BYTE PTR [edx+0x61],ah
10000dc4:	73 65                	jae    10000e2b <begin()+0xa4>
10000dc6:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000dcc:	00 78 38             	add    BYTE PTR [eax+0x38],bh
10000dcf:	37                   	aaa    
10000dd0:	20 68 61             	and    BYTE PTR [eax+0x61],ch
10000dd3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dd4:	64 6c                	fs ins BYTE PTR es:[edi],dx
10000dd6:	65 72 20             	gs jb  10000df9 <begin()+0x72>
10000dd9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10000ddc:	6c                   	ins    BYTE PTR es:[edi],dx
10000ddd:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
10000de2:	74 68                	je     10000e4c <begin()+0xc5>
10000de4:	20 66 61             	and    BYTE PTR [esi+0x61],ah
10000de7:	75 6c                	jne    10000e55 <begin()+0xce>
10000de9:	74 69                	je     10000e54 <begin()+0xcd>
10000deb:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dec:	67 20 45 49          	and    BYTE PTR [di+0x49],al
10000df0:	50                   	push   eax
10000df1:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
10000df4:	20 30                	and    BYTE PTR [eax],dh
10000df6:	78 25                	js     10000e1d <begin()+0x96>
10000df8:	58                   	pop    eax
10000df9:	0a 00                	or     al,BYTE PTR [eax]
10000dfb:	78 38                	js     10000e35 <begin()+0xae>
10000dfd:	37                   	aaa    
10000dfe:	3a 20                	cmp    ah,BYTE PTR [eax]
10000e00:	25 58 20 25 58       	and    eax,0x58252058
10000e05:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
10000e0b:	0a 00                	or     al,BYTE PTR [eax]
10000e0d:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
10000e12:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
10000e17:	64 72 65             	fs jb  10000e7f <_GLOBAL__sub_I__Z5startv+0x23>
10000e1a:	73 73                	jae    10000e8f <_GLOBAL__sub_I__Z5startv+0x33>
10000e1c:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10000e22:	58                   	pop    eax
10000e23:	0a 00                	or     al,BYTE PTR [eax]
10000e25:	65 6d                	gs ins DWORD PTR es:[edi],dx
10000e27:	38 30                	cmp    BYTE PTR [eax],dh
10000e29:	38 37                	cmp    BYTE PTR [edi],dh
10000e2b:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e2e:	74 20                	je     10000e50 <begin()+0xc9>
10000e30:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
10000e37:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e38:	74 65                	je     10000e9f <_GLOBAL__sub_I__Z5startv+0x43>
10000e3a:	64 20 28             	and    BYTE PTR fs:[eax],ch
10000e3d:	31 29                	xor    DWORD PTR [ecx],ebp
10000e3f:	00 af 0b 00 10 cf    	add    BYTE PTR [edi-0x30effff5],ch	10000e40: R_386_32	.text
	10000e44: R_386_32	.text
10000e45:	0b 00                	or     eax,DWORD PTR [eax]
10000e47:	10 0e                	adc    BYTE PTR [esi],cl	10000e48: R_386_32	.text
10000e49:	0c 00                	or     al,0x0
10000e4b:	10 2e                	adc    BYTE PTR [esi],ch	10000e4c: R_386_32	.text
10000e4d:	0c 00                	or     al,0x0
10000e4f:	10 4e 0c             	adc    BYTE PTR [esi+0xc],cl	10000e50: R_386_32	.text
10000e52:	00 10                	add    BYTE PTR [eax],dl
10000e54:	71 0c                	jno    10000e62 <_GLOBAL__sub_I__Z5startv+0x6>	10000e54: R_386_32	.text
10000e56:	00 10                	add    BYTE PTR [eax],dl
10000e58:	94                   	xchg   esp,eax	10000e58: R_386_32	.text
10000e59:	0c 00                	or     al,0x0
10000e5b:	10                   	.byte 0x10

Disassembly of section .text.startup:

10000e5c <_GLOBAL__sub_I__Z5startv>:
10000e5c:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10000e5e: R_386_32	fpuState
10000e66:	c3                   	ret    
