
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	83 ec 1c             	sub    esp,0x1c
10000014:	0f b7 5d 10          	movzx  ebx,WORD PTR [ebp+0x10]
10000018:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001e:	31 c0                	xor    eax,eax
10000020:	31 d2                	xor    edx,edx
10000022:	66 83 f9 3e          	cmp    cx,0x3e
10000026:	77 52                	ja     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000028:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000002b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
1000002e:	8d 83 01 c0 ff ff    	lea    eax,[ebx-0x3fff]
10000034:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000037:	99                   	cdq    
10000038:	b9 3e 00 00 00       	mov    ecx,0x3e
1000003d:	31 db                	xor    ebx,ebx
1000003f:	29 c1                	sub    ecx,eax
10000041:	19 d3                	sbb    ebx,edx
10000043:	53                   	push   ebx
10000044:	51                   	push   ecx
10000045:	57                   	push   edi
10000046:	68 ba 24 00 10       	push   0x100024ba	10000047: R_386_32	.text
1000004b:	e8 fc ff ff ff       	call   1000004c <fpuFloatToLong(_Float80)+0x41>	1000004c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000050:	b9 3e 00 00 00       	mov    ecx,0x3e
10000055:	2b 4d e4             	sub    ecx,DWORD PTR [ebp-0x1c]
10000058:	89 f0                	mov    eax,esi
1000005a:	89 fa                	mov    edx,edi
1000005c:	0f ad d0             	shrd   eax,edx,cl
1000005f:	d3 ea                	shr    edx,cl
10000061:	f6 c1 20             	test   cl,0x20
10000064:	74 04                	je     1000006a <fpuFloatToLong(_Float80)+0x5f>
10000066:	89 d0                	mov    eax,edx
10000068:	31 d2                	xor    edx,edx
1000006a:	83 c4 10             	add    esp,0x10
1000006d:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000071:	74 07                	je     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000073:	f7 d8                	neg    eax
10000075:	83 d2 00             	adc    edx,0x0
10000078:	f7 da                	neg    edx
1000007a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000007d:	5b                   	pop    ebx
1000007e:	5e                   	pop    esi
1000007f:	5f                   	pop    edi
10000080:	5d                   	pop    ebp
10000081:	c3                   	ret    

10000082 <fpuULongToFloat(unsigned long long)>:
10000082:	55                   	push   ebp
10000083:	89 e5                	mov    ebp,esp
10000085:	56                   	push   esi
10000086:	53                   	push   ebx
10000087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000008a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000008d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000090:	89 de                	mov    esi,ebx
10000092:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000096:	09 ce                	or     esi,ecx
10000098:	75 15                	jne    100000af <fpuULongToFloat(unsigned long long)+0x2d>
1000009a:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000ad:	eb 31                	jmp    100000e0 <fpuULongToFloat(unsigned long long)+0x5e>
100000af:	31 d2                	xor    edx,edx
100000b1:	89 de                	mov    esi,ebx
100000b3:	c1 ee 1e             	shr    esi,0x1e
100000b6:	74 09                	je     100000c1 <fpuULongToFloat(unsigned long long)+0x3f>
100000b8:	42                   	inc    edx
100000b9:	0f ac d9 01          	shrd   ecx,ebx,0x1
100000bd:	d1 eb                	shr    ebx,1
100000bf:	eb f0                	jmp    100000b1 <fpuULongToFloat(unsigned long long)+0x2f>
100000c1:	31 f6                	xor    esi,esi
100000c3:	0f ba e3 1d          	bt     ebx,0x1d
100000c7:	72 07                	jb     100000d0 <fpuULongToFloat(unsigned long long)+0x4e>
100000c9:	01 c9                	add    ecx,ecx
100000cb:	11 db                	adc    ebx,ebx
100000cd:	46                   	inc    esi
100000ce:	eb f3                	jmp    100000c3 <fpuULongToFloat(unsigned long long)+0x41>
100000d0:	89 08                	mov    DWORD PTR [eax],ecx
100000d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000d5:	66 81 c2 3d 40       	add    dx,0x403d
100000da:	29 f2                	sub    edx,esi
100000dc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000e0:	5b                   	pop    ebx
100000e1:	5e                   	pop    esi
100000e2:	5d                   	pop    ebp
100000e3:	c2 04 00             	ret    0x4

100000e6 <fpuLongToFloat(long long)>:
100000e6:	55                   	push   ebp
100000e7:	89 e5                	mov    ebp,esp
100000e9:	56                   	push   esi
100000ea:	53                   	push   ebx
100000eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000ee:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000f1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000f4:	89 de                	mov    esi,ebx
100000f6:	09 ce                	or     esi,ecx
100000f8:	75 19                	jne    10000113 <fpuLongToFloat(long long)+0x2d>
100000fa:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000fe:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000104:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000010a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000111:	eb 43                	jmp    10000156 <fpuLongToFloat(long long)+0x70>
10000113:	31 d2                	xor    edx,edx
10000115:	85 db                	test   ebx,ebx
10000117:	79 09                	jns    10000122 <fpuLongToFloat(long long)+0x3c>
10000119:	f7 d9                	neg    ecx
1000011b:	83 d3 00             	adc    ebx,0x0
1000011e:	f7 db                	neg    ebx
10000120:	b2 01                	mov    dl,0x1
10000122:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000125:	31 d2                	xor    edx,edx
10000127:	89 de                	mov    esi,ebx
10000129:	c1 ee 1e             	shr    esi,0x1e
1000012c:	74 09                	je     10000137 <fpuLongToFloat(long long)+0x51>
1000012e:	42                   	inc    edx
1000012f:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000133:	d1 eb                	shr    ebx,1
10000135:	eb f0                	jmp    10000127 <fpuLongToFloat(long long)+0x41>
10000137:	31 f6                	xor    esi,esi
10000139:	0f ba e3 1d          	bt     ebx,0x1d
1000013d:	72 07                	jb     10000146 <fpuLongToFloat(long long)+0x60>
1000013f:	01 c9                	add    ecx,ecx
10000141:	11 db                	adc    ebx,ebx
10000143:	46                   	inc    esi
10000144:	eb f3                	jmp    10000139 <fpuLongToFloat(long long)+0x53>
10000146:	89 08                	mov    DWORD PTR [eax],ecx
10000148:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
1000014b:	66 81 c2 3d 40       	add    dx,0x403d
10000150:	29 f2                	sub    edx,esi
10000152:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000156:	5b                   	pop    ebx
10000157:	5e                   	pop    esi
10000158:	5d                   	pop    ebp
10000159:	c2 04 00             	ret    0x4

1000015c <fpuGet0()>:
1000015c:	55                   	push   ebp
1000015d:	89 e5                	mov    ebp,esp
1000015f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000162:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000016c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000173:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000179:	5d                   	pop    ebp
1000017a:	c2 04 00             	ret    0x4

1000017d <fpuGet1()>:
1000017d:	55                   	push   ebp
1000017e:	89 e5                	mov    ebp,esp
10000180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000183:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000187:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000018d:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
10000194:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
1000019a:	5d                   	pop    ebp
1000019b:	c2 04 00             	ret    0x4

1000019e <fpuGetPi()>:
1000019e:	55                   	push   ebp
1000019f:	89 e5                	mov    ebp,esp
100001a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a4:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a8:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
100001ae:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
100001b5:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001bb:	5d                   	pop    ebp
100001bc:	c2 04 00             	ret    0x4

100001bf <fpuGetLog2E()>:
100001bf:	55                   	push   ebp
100001c0:	89 e5                	mov    ebp,esp
100001c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c5:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c9:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001cf:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001d6:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001dc:	5d                   	pop    ebp
100001dd:	c2 04 00             	ret    0x4

100001e0 <fpuGetLogE2()>:
100001e0:	55                   	push   ebp
100001e1:	89 e5                	mov    ebp,esp
100001e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e6:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001ea:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001f0:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001f7:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001fd:	5d                   	pop    ebp
100001fe:	c2 04 00             	ret    0x4

10000201 <fpuGetLog210()>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000207:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000020b:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
10000211:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
10000218:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000021e:	5d                   	pop    ebp
1000021f:	c2 04 00             	ret    0x4

10000222 <fpuGetLog102()>:
10000222:	55                   	push   ebp
10000223:	89 e5                	mov    ebp,esp
10000225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000228:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000022c:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000232:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000239:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
1000023f:	5d                   	pop    ebp
10000240:	c2 04 00             	ret    0x4

10000243 <fpuIsSecondLarger(_Float80, _Float80)>:
10000243:	55                   	push   ebp
10000244:	89 e5                	mov    ebp,esp
10000246:	b0 01                	mov    al,0x1
10000248:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000024b:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
1000024f:	77 13                	ja     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000251:	b0 00                	mov    al,0x0
10000253:	72 0f                	jb     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000255:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000258:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
1000025b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000025e:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000261:	0f 92 c0             	setb   al
10000264:	5d                   	pop    ebp
10000265:	c3                   	ret    

10000266 <fpuAreEqual(_Float80, _Float80)>:
10000266:	55                   	push   ebp
10000267:	89 e5                	mov    ebp,esp
10000269:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000026c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000272:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10000275:	81 e2 ff ff ff 00    	and    edx,0xffffff
1000027b:	31 c0                	xor    eax,eax
1000027d:	39 d1                	cmp    ecx,edx
1000027f:	75 11                	jne    10000292 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000281:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000284:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
10000287:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000028a:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
1000028d:	09 c2                	or     edx,eax
1000028f:	0f 94 c0             	sete   al
10000292:	5d                   	pop    ebp
10000293:	c3                   	ret    

10000294 <fpuUnorderedCompare(_Float80, _Float80)>:
10000294:	55                   	push   ebp
10000295:	89 e5                	mov    ebp,esp
10000297:	57                   	push   edi
10000298:	56                   	push   esi
10000299:	53                   	push   ebx
1000029a:	83 ec 44             	sub    esp,0x44
1000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100002a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
100002a9:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
100002ad:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
100002b0:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
100002b3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
100002b6:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
100002b9:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
100002bd:	8d 7d c0             	lea    edi,[ebp-0x40]
100002c0:	b9 03 00 00 00       	mov    ecx,0x3
100002c5:	8d 75 08             	lea    esi,[ebp+0x8]
100002c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ca:	8d 7d cc             	lea    edi,[ebp-0x34]
100002cd:	8d 75 14             	lea    esi,[ebp+0x14]
100002d0:	b9 03 00 00 00       	mov    ecx,0x3
100002d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002d7:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002da:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002dd:	89 c2                	mov    edx,eax
100002df:	31 da                	xor    edx,ebx
100002e1:	09 d1                	or     ecx,edx
100002e3:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002e7:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002ea:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002f3:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002f9:	39 d1                	cmp    ecx,edx
100002fb:	75 08                	jne    10000305 <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002fd:	31 d2                	xor    edx,edx
100002ff:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
10000303:	75 1c                	jne    10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000305:	b2 01                	mov    dl,0x1
10000307:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
1000030b:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
1000030f:	72 10                	jb     10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000311:	0f 94 c1             	sete   cl
10000314:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
10000317:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
1000031a:	19 d8                	sbb    eax,ebx
1000031c:	0f 92 c2             	setb   dl
1000031f:	21 ca                	and    edx,ecx
10000321:	a0 01 00 00 00       	mov    al,ds:0x1	10000322: R_386_32	fpuState
10000326:	83 e0 ba             	and    eax,0xffffffba
10000329:	8d 7d d8             	lea    edi,[ebp-0x28]
1000032c:	b9 03 00 00 00       	mov    ecx,0x3
10000331:	8d 75 08             	lea    esi,[ebp+0x8]
10000334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000336:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000339:	b9 03 00 00 00       	mov    ecx,0x3
1000033e:	8d 75 14             	lea    esi,[ebp+0x14]
10000341:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000343:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10000346:	81 e3 ff ff ff 00    	and    ebx,0xffffff
1000034c:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000034f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000355:	39 cb                	cmp    ebx,ecx
10000357:	0f 94 c1             	sete   cl
1000035a:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
1000035d:	c1 e1 06             	shl    ecx,0x6
10000360:	09 d0                	or     eax,edx
10000362:	09 c8                	or     eax,ecx
10000364:	a2 01 00 00 00       	mov    ds:0x1,al	10000365: R_386_32	fpuState
10000369:	83 c4 44             	add    esp,0x44
1000036c:	5b                   	pop    ebx
1000036d:	5e                   	pop    esi
1000036e:	5f                   	pop    edi
1000036f:	5d                   	pop    ebp
10000370:	c3                   	ret    

10000371 <fpuNormalise(_Float80)>:
10000371:	55                   	push   ebp
10000372:	89 e5                	mov    ebp,esp
10000374:	57                   	push   edi
10000375:	56                   	push   esi
10000376:	53                   	push   ebx
10000377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000037d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000380:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000383:	8d 72 01             	lea    esi,[edx+0x1]
10000386:	89 df                	mov    edi,ebx
10000388:	c1 ef 1e             	shr    edi,0x1e
1000038b:	74 0e                	je     1000039b <fpuNormalise(_Float80)+0x2a>
1000038d:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000391:	d1 eb                	shr    ebx,1
10000393:	89 f2                	mov    edx,esi
10000395:	eb ec                	jmp    10000383 <fpuNormalise(_Float80)+0x12>
10000397:	01 c9                	add    ecx,ecx
10000399:	11 db                	adc    ebx,ebx
1000039b:	0f ba e3 1d          	bt     ebx,0x1d
1000039f:	72 1d                	jb     100003be <fpuNormalise(_Float80)+0x4d>
100003a1:	4a                   	dec    edx
100003a2:	89 de                	mov    esi,ebx
100003a4:	09 ce                	or     esi,ecx
100003a6:	75 ef                	jne    10000397 <fpuNormalise(_Float80)+0x26>
100003a8:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
100003af:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
100003b6:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
100003bc:	eb 0a                	jmp    100003c8 <fpuNormalise(_Float80)+0x57>
100003be:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
100003c1:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
100003c4:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
100003c8:	8d 75 0c             	lea    esi,[ebp+0xc]
100003cb:	b9 03 00 00 00       	mov    ecx,0x3
100003d0:	89 c7                	mov    edi,eax
100003d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003d4:	5b                   	pop    ebx
100003d5:	5e                   	pop    esi
100003d6:	5f                   	pop    edi
100003d7:	5d                   	pop    ebp
100003d8:	c2 04 00             	ret    0x4

100003db <fpuAdd(_Float80, _Float80)>:
100003db:	55                   	push   ebp
100003dc:	89 e5                	mov    ebp,esp
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	53                   	push   ebx
100003e1:	83 ec 2c             	sub    esp,0x2c
100003e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003ea:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003ed:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003f3:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003f7:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003fa:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003fd:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10000400:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
10000403:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
10000406:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
10000409:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000040d:	66 39 c8             	cmp    ax,cx
10000410:	72 2d                	jb     1000043f <fpuAdd(_Float80, _Float80)+0x64>
10000412:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
10000415:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000418:	19 f8                	sbb    eax,edi
1000041a:	73 09                	jae    10000425 <fpuAdd(_Float80, _Float80)+0x4a>
1000041c:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000420:	66 39 c8             	cmp    ax,cx
10000423:	74 24                	je     10000449 <fpuAdd(_Float80, _Float80)+0x6e>
10000425:	88 d8                	mov    al,bl
10000427:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
1000042a:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
1000042d:	89 f0                	mov    eax,esi
1000042f:	89 fa                	mov    edx,edi
10000431:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
10000434:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
10000437:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000043a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000043d:	eb 0a                	jmp    10000449 <fpuAdd(_Float80, _Float80)+0x6e>
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
10000447:	89 c1                	mov    ecx,eax
10000449:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
1000044c:	29 c8                	sub    eax,ecx
1000044e:	88 c1                	mov    cl,al
10000450:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10000453:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10000456:	0f ad d0             	shrd   eax,edx,cl
10000459:	d3 ea                	shr    edx,cl
1000045b:	f6 c1 20             	test   cl,0x20
1000045e:	74 04                	je     10000464 <fpuAdd(_Float80, _Float80)+0x89>
10000460:	89 d0                	mov    eax,edx
10000462:	31 d2                	xor    edx,edx
10000464:	89 d1                	mov    ecx,edx
10000466:	89 c2                	mov    edx,eax
10000468:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000046c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000470:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
10000473:	75 13                	jne    10000488 <fpuAdd(_Float80, _Float80)+0xad>
10000475:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
10000478:	89 d0                	mov    eax,edx
1000047a:	89 ca                	mov    edx,ecx
1000047c:	01 f0                	add    eax,esi
1000047e:	11 fa                	adc    edx,edi
10000480:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000483:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000486:	eb 58                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
10000488:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
1000048c:	74 24                	je     100004b2 <fpuAdd(_Float80, _Float80)+0xd7>
1000048e:	39 d6                	cmp    esi,edx
10000490:	89 f8                	mov    eax,edi
10000492:	19 c8                	sbb    eax,ecx
10000494:	89 d0                	mov    eax,edx
10000496:	89 ca                	mov    edx,ecx
10000498:	73 0c                	jae    100004a6 <fpuAdd(_Float80, _Float80)+0xcb>
1000049a:	29 f0                	sub    eax,esi
1000049c:	19 fa                	sbb    edx,edi
1000049e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004a1:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004a4:	eb 26                	jmp    100004cc <fpuAdd(_Float80, _Float80)+0xf1>
100004a6:	29 c6                	sub    esi,eax
100004a8:	19 cf                	sbb    edi,ecx
100004aa:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004ad:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004b0:	eb 2a                	jmp    100004dc <fpuAdd(_Float80, _Float80)+0x101>
100004b2:	84 db                	test   bl,bl
100004b4:	74 2a                	je     100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004b6:	39 f2                	cmp    edx,esi
100004b8:	89 c8                	mov    eax,ecx
100004ba:	19 f8                	sbb    eax,edi
100004bc:	89 d0                	mov    eax,edx
100004be:	89 ca                	mov    edx,ecx
100004c0:	73 10                	jae    100004d2 <fpuAdd(_Float80, _Float80)+0xf7>
100004c2:	29 c6                	sub    esi,eax
100004c4:	19 cf                	sbb    edi,ecx
100004c6:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004c9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004cc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004d0:	eb 0e                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004d2:	29 f0                	sub    eax,esi
100004d4:	19 fa                	sbb    edx,edi
100004d6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004d9:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004dc:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004e0:	83 ec 0c             	sub    esp,0xc
100004e3:	8d 75 dc             	lea    esi,[ebp-0x24]
100004e6:	b9 03 00 00 00       	mov    ecx,0x3
100004eb:	89 e7                	mov    edi,esp
100004ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004f2:	e8 fc ff ff ff       	call   100004f3 <fpuAdd(_Float80, _Float80)+0x118>	100004f3: R_386_PC32	fpuNormalise(_Float80)
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	8d 65 f4             	lea    esp,[ebp-0xc]
100004fd:	5b                   	pop    ebx
100004fe:	5e                   	pop    esi
100004ff:	5f                   	pop    edi
10000500:	5d                   	pop    ebp
10000501:	c2 04 00             	ret    0x4

10000504 <fpuAbs(_Float80)>:
10000504:	55                   	push   ebp
10000505:	89 e5                	mov    ebp,esp
10000507:	57                   	push   edi
10000508:	56                   	push   esi
10000509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050c:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
10000510:	8d 75 0c             	lea    esi,[ebp+0xc]
10000513:	b9 03 00 00 00       	mov    ecx,0x3
10000518:	89 c7                	mov    edi,eax
1000051a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000051c:	5e                   	pop    esi
1000051d:	5f                   	pop    edi
1000051e:	5d                   	pop    ebp
1000051f:	c2 04 00             	ret    0x4

10000522 <fpuChs(_Float80)>:
10000522:	55                   	push   ebp
10000523:	89 e5                	mov    ebp,esp
10000525:	57                   	push   edi
10000526:	56                   	push   esi
10000527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052a:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
1000052e:	8d 75 0c             	lea    esi,[ebp+0xc]
10000531:	b9 03 00 00 00       	mov    ecx,0x3
10000536:	89 c7                	mov    edi,eax
10000538:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000053a:	5e                   	pop    esi
1000053b:	5f                   	pop    edi
1000053c:	5d                   	pop    ebp
1000053d:	c2 04 00             	ret    0x4

10000540 <fpuSub(_Float80, _Float80)>:
10000540:	55                   	push   ebp
10000541:	89 e5                	mov    ebp,esp
10000543:	57                   	push   edi
10000544:	56                   	push   esi
10000545:	53                   	push   ebx
10000546:	83 ec 1c             	sub    esp,0x1c
10000549:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000054c:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000550:	8d 75 18             	lea    esi,[ebp+0x18]
10000553:	b9 03 00 00 00       	mov    ecx,0x3
10000558:	89 e7                	mov    edi,esp
1000055a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000055c:	83 ec 0c             	sub    esp,0xc
1000055f:	8d 75 0c             	lea    esi,[ebp+0xc]
10000562:	b9 03 00 00 00       	mov    ecx,0x3
10000567:	89 e7                	mov    edi,esp
10000569:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000056b:	53                   	push   ebx
1000056c:	e8 fc ff ff ff       	call   1000056d <fpuSub(_Float80, _Float80)+0x2d>	1000056d: R_386_PC32	fpuAdd(_Float80, _Float80)
10000571:	89 d8                	mov    eax,ebx
10000573:	8d 65 f4             	lea    esp,[ebp-0xc]
10000576:	5b                   	pop    ebx
10000577:	5e                   	pop    esi
10000578:	5f                   	pop    edi
10000579:	5d                   	pop    ebp
1000057a:	c2 04 00             	ret    0x4

1000057d <fpuReverseSub(_Float80, _Float80)>:
1000057d:	55                   	push   ebp
1000057e:	89 e5                	mov    ebp,esp
10000580:	57                   	push   edi
10000581:	56                   	push   esi
10000582:	53                   	push   ebx
10000583:	83 ec 1c             	sub    esp,0x1c
10000586:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000589:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
1000058d:	8d 75 0c             	lea    esi,[ebp+0xc]
10000590:	b9 03 00 00 00       	mov    ecx,0x3
10000595:	89 e7                	mov    edi,esp
10000597:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000599:	83 ec 0c             	sub    esp,0xc
1000059c:	8d 75 18             	lea    esi,[ebp+0x18]
1000059f:	b9 03 00 00 00       	mov    ecx,0x3
100005a4:	89 e7                	mov    edi,esp
100005a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005a8:	53                   	push   ebx
100005a9:	e8 fc ff ff ff       	call   100005aa <fpuReverseSub(_Float80, _Float80)+0x2d>	100005aa: R_386_PC32	fpuAdd(_Float80, _Float80)
100005ae:	89 d8                	mov    eax,ebx
100005b0:	8d 65 f4             	lea    esp,[ebp-0xc]
100005b3:	5b                   	pop    ebx
100005b4:	5e                   	pop    esi
100005b5:	5f                   	pop    edi
100005b6:	5d                   	pop    ebp
100005b7:	c2 04 00             	ret    0x4

100005ba <fpuMultiply(_Float80, _Float80)>:
100005ba:	55                   	push   ebp
100005bb:	89 e5                	mov    ebp,esp
100005bd:	57                   	push   edi
100005be:	56                   	push   esi
100005bf:	53                   	push   ebx
100005c0:	83 ec 38             	sub    esp,0x38
100005c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100005c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005c9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005cc:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005d0:	c1 ea 1f             	shr    edx,0x1f
100005d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005dc:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005df:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005e3:	c1 ef 1f             	shr    edi,0x1f
100005e6:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005e9:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005ec:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005ef:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005f2:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005f5:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005fa:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005fe:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10000601:	0f af ce             	imul   ecx,esi
10000604:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10000607:	0f af d7             	imul   edx,edi
1000060a:	01 d1                	add    ecx,edx
1000060c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000060f:	f7 e6                	mul    esi
10000611:	01 ca                	add    edx,ecx
10000613:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000616:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000619:	8d 75 dc             	lea    esi,[ebp-0x24]
1000061c:	b9 03 00 00 00       	mov    ecx,0x3
10000621:	89 e7                	mov    edi,esp
10000623:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000625:	53                   	push   ebx
10000626:	e8 fc ff ff ff       	call   10000627 <fpuMultiply(_Float80, _Float80)+0x6d>	10000627: R_386_PC32	fpuNormalise(_Float80)
1000062b:	89 d8                	mov    eax,ebx
1000062d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000630:	5b                   	pop    ebx
10000631:	5e                   	pop    esi
10000632:	5f                   	pop    edi
10000633:	5d                   	pop    ebp
10000634:	c2 04 00             	ret    0x4

10000637 <fpuMantissaDivision(unsigned long long, unsigned long long)>:
10000637:	55                   	push   ebp
10000638:	89 e5                	mov    ebp,esp
1000063a:	57                   	push   edi
1000063b:	56                   	push   esi
1000063c:	53                   	push   ebx
1000063d:	83 ec 24             	sub    esp,0x24
10000640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000643:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000646:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000649:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
1000064c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000064f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000652:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000655:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10000658:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
1000065f:	83 c8 ff             	or     eax,0xffffffff
10000662:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000669:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000670:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000677:	31 d2                	xor    edx,edx
10000679:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
1000067c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000067f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000682:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
10000685:	83 f8 ff             	cmp    eax,0xffffffff
10000688:	75 22                	jne    100006ac <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
1000068a:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
1000068d:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000690:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
10000693:	0f ad f3             	shrd   ebx,esi,cl
10000696:	d3 ee                	shr    esi,cl
10000698:	f6 c1 20             	test   cl,0x20
1000069b:	74 04                	je     100006a1 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
1000069d:	89 f3                	mov    ebx,esi
1000069f:	31 f6                	xor    esi,esi
100006a1:	89 d9                	mov    ecx,ebx
100006a3:	83 e1 01             	and    ecx,0x1
100006a6:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
100006a9:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100006ac:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006af:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
100006b2:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
100006b5:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
100006b8:	72 38                	jb     100006f2 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
100006ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
100006c0:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
100006c3:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
100006c6:	83 f8 ff             	cmp    eax,0xffffffff
100006c9:	75 0d                	jne    100006d8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006cb:	81 ca 00 00 00 20    	or     edx,0x20000000
100006d1:	b8 3d 00 00 00       	mov    eax,0x3d
100006d6:	eb 1f                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006d8:	88 c1                	mov    cl,al
100006da:	89 ce                	mov    esi,ecx
100006dc:	c1 ee 05             	shr    esi,0x5
100006df:	83 e6 01             	and    esi,0x1
100006e2:	89 f3                	mov    ebx,esi
100006e4:	83 f3 01             	xor    ebx,0x1
100006e7:	d3 e3                	shl    ebx,cl
100006e9:	d3 e6                	shl    esi,cl
100006eb:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006ee:	09 f2                	or     edx,esi
100006f0:	eb 05                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006f2:	83 f8 ff             	cmp    eax,0xffffffff
100006f5:	74 01                	je     100006f8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006f7:	48                   	dec    eax
100006f8:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006fb:	85 c0                	test   eax,eax
100006fd:	0f 85 76 ff ff ff    	jne    10000679 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
10000703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000706:	83 c4 24             	add    esp,0x24
10000709:	5b                   	pop    ebx
1000070a:	5e                   	pop    esi
1000070b:	5f                   	pop    edi
1000070c:	5d                   	pop    ebp
1000070d:	c3                   	ret    

1000070e <fpuDivide(_Float80, _Float80)>:
1000070e:	55                   	push   ebp
1000070f:	89 e5                	mov    ebp,esp
10000711:	57                   	push   edi
10000712:	56                   	push   esi
10000713:	53                   	push   ebx
10000714:	83 ec 1c             	sub    esp,0x1c
10000717:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000071a:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
1000071d:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
10000720:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
10000723:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000726:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000729:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000072c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000072f:	e8 fc ff ff ff       	call   10000730 <fpuDivide(_Float80, _Float80)+0x22>	10000730: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
10000734:	59                   	pop    ecx
10000735:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000738:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000073b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000073e:	66 05 00 40          	add    ax,0x4000
10000742:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
10000745:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000749:	8d 75 dc             	lea    esi,[ebp-0x24]
1000074c:	b9 03 00 00 00       	mov    ecx,0x3
10000751:	89 e7                	mov    edi,esp
10000753:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000755:	53                   	push   ebx
10000756:	e8 fc ff ff ff       	call   10000757 <fpuDivide(_Float80, _Float80)+0x49>	10000757: R_386_PC32	fpuNormalise(_Float80)
1000075b:	89 d8                	mov    eax,ebx
1000075d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000760:	5b                   	pop    ebx
10000761:	5e                   	pop    esi
10000762:	5f                   	pop    edi
10000763:	5d                   	pop    ebp
10000764:	c2 04 00             	ret    0x4

10000767 <fpuReciprocal(_Float80)>:
10000767:	55                   	push   ebp
10000768:	89 e5                	mov    ebp,esp
1000076a:	57                   	push   edi
1000076b:	56                   	push   esi
1000076c:	53                   	push   ebx
1000076d:	83 ec 2c             	sub    esp,0x2c
10000770:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000773:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000777:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000077e:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000785:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000078b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000078e:	b9 03 00 00 00       	mov    ecx,0x3
10000793:	89 e7                	mov    edi,esp
10000795:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	8d 75 dc             	lea    esi,[ebp-0x24]
1000079d:	b9 03 00 00 00       	mov    ecx,0x3
100007a2:	89 e7                	mov    edi,esp
100007a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a6:	53                   	push   ebx
100007a7:	e8 fc ff ff ff       	call   100007a8 <fpuReciprocal(_Float80)+0x41>	100007a8: R_386_PC32	fpuDivide(_Float80, _Float80)
100007ac:	89 d8                	mov    eax,ebx
100007ae:	8d 65 f4             	lea    esp,[ebp-0xc]
100007b1:	5b                   	pop    ebx
100007b2:	5e                   	pop    esi
100007b3:	5f                   	pop    edi
100007b4:	5d                   	pop    ebp
100007b5:	c2 04 00             	ret    0x4

100007b8 <fpuSquare(_Float80)>:
100007b8:	55                   	push   ebp
100007b9:	89 e5                	mov    ebp,esp
100007bb:	57                   	push   edi
100007bc:	56                   	push   esi
100007bd:	53                   	push   ebx
100007be:	83 ec 1c             	sub    esp,0x1c
100007c1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100007c4:	8d 75 0c             	lea    esi,[ebp+0xc]
100007c7:	b9 03 00 00 00       	mov    ecx,0x3
100007cc:	89 e7                	mov    edi,esp
100007ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007d0:	83 ec 0c             	sub    esp,0xc
100007d3:	8d 75 0c             	lea    esi,[ebp+0xc]
100007d6:	b9 03 00 00 00       	mov    ecx,0x3
100007db:	89 e7                	mov    edi,esp
100007dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007df:	53                   	push   ebx
100007e0:	e8 fc ff ff ff       	call   100007e1 <fpuSquare(_Float80)+0x29>	100007e1: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007e5:	89 d8                	mov    eax,ebx
100007e7:	8d 65 f4             	lea    esp,[ebp-0xc]
100007ea:	5b                   	pop    ebx
100007eb:	5e                   	pop    esi
100007ec:	5f                   	pop    edi
100007ed:	5d                   	pop    ebp
100007ee:	c2 04 00             	ret    0x4

100007f1 <fpuInverseSqrt(_Float80)>:
100007f1:	55                   	push   ebp
100007f2:	89 e5                	mov    ebp,esp
100007f4:	57                   	push   edi
100007f5:	56                   	push   esi
100007f6:	53                   	push   ebx
100007f7:	83 ec 5c             	sub    esp,0x5c
100007fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007fd:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
10000801:	31 d2                	xor    edx,edx
10000803:	b9 03 00 00 00       	mov    ecx,0x3
10000808:	31 db                	xor    ebx,ebx
1000080a:	01 c9                	add    ecx,ecx
1000080c:	11 db                	adc    ebx,ebx
1000080e:	42                   	inc    edx
1000080f:	83 fa 3c             	cmp    edx,0x3c
10000812:	75 f6                	jne    1000080a <fpuInverseSqrt(_Float80)+0x19>
10000814:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
10000817:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
1000081a:	8d 75 0c             	lea    esi,[ebp+0xc]
1000081d:	b9 03 00 00 00       	mov    ecx,0x3
10000822:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000825:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000827:	0f b7 d0             	movzx  edx,ax
1000082a:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000830:	d1 fa                	sar    edx,1
10000832:	b9 ff 3f 00 00       	mov    ecx,0x3fff
10000837:	29 d1                	sub    ecx,edx
10000839:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000083c:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000840:	48                   	dec    eax
10000841:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
10000845:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
1000084c:	8d 5d c4             	lea    ebx,[ebp-0x3c]
1000084f:	83 ec 0c             	sub    esp,0xc
10000852:	b9 03 00 00 00       	mov    ecx,0x3
10000857:	89 e7                	mov    edi,esp
10000859:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000085c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000085e:	53                   	push   ebx
1000085f:	e8 fc ff ff ff       	call   10000860 <fpuInverseSqrt(_Float80)+0x6f>	10000860: R_386_PC32	fpuSquare(_Float80)
10000864:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
10000868:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
1000086c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000086f:	83 ec 14             	sub    esp,0x14
10000872:	8d 75 0c             	lea    esi,[ebp+0xc]
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000087e:	83 ec 0c             	sub    esp,0xc
10000881:	b9 03 00 00 00       	mov    ecx,0x3
10000886:	89 e7                	mov    edi,esp
10000888:	89 de                	mov    esi,ebx
1000088a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000088c:	50                   	push   eax
1000088d:	e8 fc ff ff ff       	call   1000088e <fpuInverseSqrt(_Float80)+0x9d>	1000088e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000892:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
10000898:	8d 55 dc             	lea    edx,[ebp-0x24]
1000089b:	83 c4 1c             	add    esp,0x1c
1000089e:	b9 03 00 00 00       	mov    ecx,0x3
100008a3:	89 e7                	mov    edi,esp
100008a5:	8d 45 d0             	lea    eax,[ebp-0x30]
100008a8:	89 c6                	mov    esi,eax
100008aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008ac:	83 ec 0c             	sub    esp,0xc
100008af:	8d 75 b8             	lea    esi,[ebp-0x48]
100008b2:	b9 03 00 00 00       	mov    ecx,0x3
100008b7:	89 e7                	mov    edi,esp
100008b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008bb:	52                   	push   edx
100008bc:	e8 fc ff ff ff       	call   100008bd <fpuInverseSqrt(_Float80)+0xcc>	100008bd: R_386_PC32	fpuSub(_Float80, _Float80)
100008c1:	8d 5d a8             	lea    ebx,[ebp-0x58]
100008c4:	50                   	push   eax
100008c5:	b9 03 00 00 00       	mov    ecx,0x3
100008ca:	89 e7                	mov    edi,esp
100008cc:	8d 55 dc             	lea    edx,[ebp-0x24]
100008cf:	89 d6                	mov    esi,edx
100008d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008d3:	83 ec 0c             	sub    esp,0xc
100008d6:	b9 03 00 00 00       	mov    ecx,0x3
100008db:	89 e7                	mov    edi,esp
100008dd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008e2:	53                   	push   ebx
100008e3:	e8 fc ff ff ff       	call   100008e4 <fpuInverseSqrt(_Float80)+0xf3>	100008e4: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008e8:	b9 03 00 00 00       	mov    ecx,0x3
100008ed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008f0:	89 de                	mov    esi,ebx
100008f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f4:	83 c4 2c             	add    esp,0x2c
100008f7:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008fa:	0f 85 4c ff ff ff    	jne    1000084c <fpuInverseSqrt(_Float80)+0x5b>
10000900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000903:	8d 65 f4             	lea    esp,[ebp-0xc]
10000906:	5b                   	pop    ebx
10000907:	5e                   	pop    esi
10000908:	5f                   	pop    edi
10000909:	5d                   	pop    ebp
1000090a:	c2 04 00             	ret    0x4

1000090d <fpuSqrt(_Float80)>:
1000090d:	55                   	push   ebp
1000090e:	89 e5                	mov    ebp,esp
10000910:	57                   	push   edi
10000911:	56                   	push   esi
10000912:	53                   	push   ebx
10000913:	83 ec 38             	sub    esp,0x38
10000916:	8d 5d d0             	lea    ebx,[ebp-0x30]
10000919:	8d 75 0c             	lea    esi,[ebp+0xc]
1000091c:	b9 03 00 00 00       	mov    ecx,0x3
10000921:	89 e7                	mov    edi,esp
10000923:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000925:	53                   	push   ebx
10000926:	e8 fc ff ff ff       	call   10000927 <fpuSqrt(_Float80)+0x1a>	10000927: R_386_PC32	fpuInverseSqrt(_Float80)
1000092b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000092f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000936:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000093d:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000943:	83 ec 14             	sub    esp,0x14
10000946:	b9 03 00 00 00       	mov    ecx,0x3
1000094b:	89 e7                	mov    edi,esp
1000094d:	89 de                	mov    esi,ebx
1000094f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000951:	83 ec 0c             	sub    esp,0xc
10000954:	8d 75 dc             	lea    esi,[ebp-0x24]
10000957:	b9 03 00 00 00       	mov    ecx,0x3
1000095c:	89 e7                	mov    edi,esp
1000095e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000960:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000963:	e8 fc ff ff ff       	call   10000964 <fpuSqrt(_Float80)+0x57>	10000964: R_386_PC32	fpuDivide(_Float80, _Float80)
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000096e:	5b                   	pop    ebx
1000096f:	5e                   	pop    esi
10000970:	5f                   	pop    edi
10000971:	5d                   	pop    ebp
10000972:	c2 04 00             	ret    0x4

10000975 <fpuGetReg(int)>:
10000975:	55                   	push   ebp
10000976:	89 e5                	mov    ebp,esp
10000978:	57                   	push   edi
10000979:	56                   	push   esi
1000097a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
1000097d:	83 fe 07             	cmp    esi,0x7
10000980:	76 10                	jbe    10000992 <fpuGetReg(int)+0x1d>
10000982:	83 ec 0c             	sub    esp,0xc
10000985:	68 da 24 00 10       	push   0x100024da	10000986: R_386_32	.text
1000098a:	e8 fc ff ff ff       	call   1000098b <fpuGetReg(int)+0x16>	1000098b: R_386_PC32	Krnl::panic(char const*)
1000098f:	83 c4 10             	add    esp,0x10
10000992:	a0 01 00 00 00       	mov    al,ds:0x1	10000993: R_386_32	fpuState
10000997:	c0 e8 03             	shr    al,0x3
1000099a:	83 e0 07             	and    eax,0x7
1000099d:	01 f0                	add    eax,esi
1000099f:	b9 08 00 00 00       	mov    ecx,0x8
100009a4:	99                   	cdq    
100009a5:	f7 f9                	idiv   ecx
100009a7:	6b c2 0c             	imul   eax,edx,0xc
100009aa:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	100009ac: R_386_32	fpuState
100009b0:	b9 03 00 00 00       	mov    ecx,0x3
100009b5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8d 65 f8             	lea    esp,[ebp-0x8]
100009c0:	5e                   	pop    esi
100009c1:	5f                   	pop    edi
100009c2:	5d                   	pop    ebp
100009c3:	c2 04 00             	ret    0x4

100009c6 <fpuSetReg(int, _Float80)>:
100009c6:	55                   	push   ebp
100009c7:	89 e5                	mov    ebp,esp
100009c9:	57                   	push   edi
100009ca:	56                   	push   esi
100009cb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009ce:	83 ff 07             	cmp    edi,0x7
100009d1:	76 10                	jbe    100009e3 <fpuSetReg(int, _Float80)+0x1d>
100009d3:	83 ec 0c             	sub    esp,0xc
100009d6:	68 da 24 00 10       	push   0x100024da	100009d7: R_386_32	.text
100009db:	e8 fc ff ff ff       	call   100009dc <fpuSetReg(int, _Float80)+0x16>	100009dc: R_386_PC32	Krnl::panic(char const*)
100009e0:	83 c4 10             	add    esp,0x10
100009e3:	a0 01 00 00 00       	mov    al,ds:0x1	100009e4: R_386_32	fpuState
100009e8:	c0 e8 03             	shr    al,0x3
100009eb:	83 e0 07             	and    eax,0x7
100009ee:	01 f8                	add    eax,edi
100009f0:	b9 08 00 00 00       	mov    ecx,0x8
100009f5:	99                   	cdq    
100009f6:	f7 f9                	idiv   ecx
100009f8:	6b c2 0c             	imul   eax,edx,0xc
100009fb:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009fd: R_386_32	fpuState
10000a01:	8d 75 0c             	lea    esi,[ebp+0xc]
10000a04:	b9 03 00 00 00       	mov    ecx,0x3
10000a09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a0b:	8d 65 f8             	lea    esp,[ebp-0x8]
10000a0e:	5e                   	pop    esi
10000a0f:	5f                   	pop    edi
10000a10:	5d                   	pop    ebp
10000a11:	c3                   	ret    

10000a12 <fpuInternalTo32(_Float80)>:
10000a12:	55                   	push   ebp
10000a13:	89 e5                	mov    ebp,esp
10000a15:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000a18:	66 81 f9 7e 40       	cmp    cx,0x407e
10000a1d:	76 0c                	jbe    10000a2b <fpuInternalTo32(_Float80)+0x19>
10000a1f:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a21: R_386_32	fpuState
10000a26:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a2b:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a2f:	19 d2                	sbb    edx,edx
10000a31:	f7 d2                	not    edx
10000a33:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a3c:	c1 e8 06             	shr    eax,0x6
10000a3f:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a44:	c1 e1 17             	shl    ecx,0x17
10000a47:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a4d:	09 c8                	or     eax,ecx
10000a4f:	09 d0                	or     eax,edx
10000a51:	5d                   	pop    ebp
10000a52:	c3                   	ret    

10000a53 <fpuInternalTo64(_Float80)>:
10000a53:	55                   	push   ebp
10000a54:	89 e5                	mov    ebp,esp
10000a56:	57                   	push   edi
10000a57:	56                   	push   esi
10000a58:	53                   	push   ebx
10000a59:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a5c:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a61:	76 0c                	jbe    10000a6f <fpuInternalTo64(_Float80)+0x1c>
10000a63:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a65: R_386_32	fpuState
10000a6a:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a6f:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a73:	19 c9                	sbb    ecx,ecx
10000a75:	f7 d1                	not    ecx
10000a77:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a83:	0f ac d0 09          	shrd   eax,edx,0x9
10000a87:	c1 ea 09             	shr    edx,0x9
10000a8a:	89 c6                	mov    esi,eax
10000a8c:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a92:	c1 e3 14             	shl    ebx,0x14
10000a95:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a9b:	09 da                	or     edx,ebx
10000a9d:	09 ca                	or     edx,ecx
10000a9f:	89 f0                	mov    eax,esi
10000aa1:	5b                   	pop    ebx
10000aa2:	5e                   	pop    esi
10000aa3:	5f                   	pop    edi
10000aa4:	5d                   	pop    ebp
10000aa5:	c3                   	ret    

10000aa6 <fpu32ToInternal(unsigned int)>:
10000aa6:	55                   	push   ebp
10000aa7:	89 e5                	mov    ebp,esp
10000aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000aaf:	89 d1                	mov    ecx,edx
10000ab1:	c1 e9 1f             	shr    ecx,0x1f
10000ab4:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000ab7:	89 d1                	mov    ecx,edx
10000ab9:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000abf:	c1 e1 06             	shl    ecx,0x6
10000ac2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000ac8:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000ace:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000ad1:	c1 ea 17             	shr    edx,0x17
10000ad4:	0f b6 d2             	movzx  edx,dl
10000ad7:	66 81 c2 81 3f       	add    dx,0x3f81
10000adc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ae0:	5d                   	pop    ebp
10000ae1:	c2 04 00             	ret    0x4

10000ae4 <fpu64ToInternal(unsigned long long)>:
10000ae4:	55                   	push   ebp
10000ae5:	89 e5                	mov    ebp,esp
10000ae7:	57                   	push   edi
10000ae8:	56                   	push   esi
10000ae9:	53                   	push   ebx
10000aea:	83 ec 0c             	sub    esp,0xc
10000aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000af3:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000af6:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000af9:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000afc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000aff:	c1 ea 1f             	shr    edx,0x1f
10000b02:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000b05:	89 f7                	mov    edi,esi
10000b07:	89 de                	mov    esi,ebx
10000b09:	0f a4 f7 09          	shld   edi,esi,0x9
10000b0d:	c1 e6 09             	shl    esi,0x9
10000b10:	89 f1                	mov    ecx,esi
10000b12:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000b18:	89 fa                	mov    edx,edi
10000b1a:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000b20:	89 08                	mov    DWORD PTR [eax],ecx
10000b22:	81 ca 00 00 00 20    	or     edx,0x20000000
10000b28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b2e:	c1 ea 14             	shr    edx,0x14
10000b31:	66 81 e2 ff 07       	and    dx,0x7ff
10000b36:	66 81 c2 01 3c       	add    dx,0x3c01
10000b3b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b3f:	83 c4 0c             	add    esp,0xc
10000b42:	5b                   	pop    ebx
10000b43:	5e                   	pop    esi
10000b44:	5f                   	pop    edi
10000b45:	5d                   	pop    ebp
10000b46:	c2 04 00             	ret    0x4

10000b49 <fpuPush(_Float80)>:
10000b49:	55                   	push   ebp
10000b4a:	89 e5                	mov    ebp,esp
10000b4c:	57                   	push   edi
10000b4d:	56                   	push   esi
10000b4e:	a0 01 00 00 00       	mov    al,ds:0x1	10000b4f: R_386_32	fpuState
10000b53:	88 c1                	mov    cl,al
10000b55:	c0 e9 03             	shr    cl,0x3
10000b58:	89 cf                	mov    edi,ecx
10000b5a:	83 e7 07             	and    edi,0x7
10000b5d:	83 c7 07             	add    edi,0x7
10000b60:	89 fa                	mov    edx,edi
10000b62:	83 e2 07             	and    edx,0x7
10000b65:	c1 e2 03             	shl    edx,0x3
10000b68:	83 e0 c7             	and    eax,0xffffffc7
10000b6b:	09 d0                	or     eax,edx
10000b6d:	a2 01 00 00 00       	mov    ds:0x1,al	10000b6e: R_386_32	fpuState
10000b72:	83 e7 07             	and    edi,0x7
10000b75:	6b ff 0c             	imul   edi,edi,0xc
10000b78:	81 c7 04 00 00 00    	add    edi,0x4	10000b7a: R_386_32	fpuState
10000b7e:	b9 03 00 00 00       	mov    ecx,0x3
10000b83:	8d 75 08             	lea    esi,[ebp+0x8]
10000b86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b88:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b89: R_386_32	fpuState
10000b8d:	83 f8 08             	cmp    eax,0x8
10000b90:	75 09                	jne    10000b9b <fpuPush(_Float80)+0x52>
10000b92:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b94: R_386_32	fpuState
10000b99:	eb 06                	jmp    10000ba1 <fpuPush(_Float80)+0x58>
10000b9b:	40                   	inc    eax
10000b9c:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b9d: R_386_32	fpuState
10000ba1:	5e                   	pop    esi
10000ba2:	5f                   	pop    edi
10000ba3:	5d                   	pop    ebp
10000ba4:	c3                   	ret    

10000ba5 <fpuPop()>:
10000ba5:	55                   	push   ebp
10000ba6:	89 e5                	mov    ebp,esp
10000ba8:	57                   	push   edi
10000ba9:	56                   	push   esi
10000baa:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000bac: R_386_32	fpuState
10000bb0:	88 d0                	mov    al,dl
10000bb2:	c0 e8 03             	shr    al,0x3
10000bb5:	83 e0 07             	and    eax,0x7
10000bb8:	6b f0 0c             	imul   esi,eax,0xc
10000bbb:	81 c6 04 00 00 00    	add    esi,0x4	10000bbd: R_386_32	fpuState
10000bc1:	b9 03 00 00 00       	mov    ecx,0x3
10000bc6:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000bc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bcb:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000bd2:	83 e0 38             	and    eax,0x38
10000bd5:	83 e2 c7             	and    edx,0xffffffc7
10000bd8:	09 c2                	or     edx,eax
10000bda:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bdc: R_386_32	fpuState
10000be0:	a1 64 00 00 00       	mov    eax,ds:0x64	10000be1: R_386_32	fpuState
10000be5:	85 c0                	test   eax,eax
10000be7:	74 08                	je     10000bf1 <fpuPop()+0x4c>
10000be9:	48                   	dec    eax
10000bea:	a3 64 00 00 00       	mov    ds:0x64,eax	10000beb: R_386_32	fpuState
10000bef:	eb 07                	jmp    10000bf8 <fpuPop()+0x53>
10000bf1:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bf3: R_386_32	fpuState
10000bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfb:	5e                   	pop    esi
10000bfc:	5f                   	pop    edi
10000bfd:	5d                   	pop    ebp
10000bfe:	c2 04 00             	ret    0x4

10000c01 <decodeAddress(regs*, int*, bool*, unsigned char*)>:
10000c01:	55                   	push   ebp
10000c02:	89 e5                	mov    ebp,esp
10000c04:	57                   	push   edi
10000c05:	56                   	push   esi
10000c06:	53                   	push   ebx
10000c07:	51                   	push   ecx
10000c08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c0b:	8b 72 38             	mov    esi,DWORD PTR [edx+0x38]
10000c0e:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10000c11:	88 c8                	mov    al,cl
10000c13:	c0 e8 06             	shr    al,0x6
10000c16:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c19:	89 c8                	mov    eax,ecx
10000c1b:	66 c1 e8 03          	shr    ax,0x3
10000c1f:	83 e0 07             	and    eax,0x7
10000c22:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
10000c25:	88 03                	mov    BYTE PTR [ebx],al
10000c27:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
10000c2b:	0f 84 8d 01 00 00    	je     10000dbe <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1bd>
10000c31:	83 e1 07             	and    ecx,0x7
10000c34:	80 f9 04             	cmp    cl,0x4
10000c37:	0f 84 95 00 00 00    	je     10000cd2 <decodeAddress(regs*, int*, bool*, unsigned char*)+0xd1>
10000c3d:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
10000c41:	0f 95 c0             	setne  al
10000c44:	80 f9 05             	cmp    cl,0x5
10000c47:	0f 95 c3             	setne  bl
10000c4a:	08 c3                	or     bl,al
10000c4c:	74 77                	je     10000cc5 <decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
10000c4e:	84 c9                	test   cl,cl
10000c50:	75 05                	jne    10000c57 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x56>
10000c52:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
10000c55:	eb 3c                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c57:	80 f9 01             	cmp    cl,0x1
10000c5a:	75 05                	jne    10000c61 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x60>
10000c5c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
10000c5f:	eb 32                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c61:	80 f9 02             	cmp    cl,0x2
10000c64:	75 05                	jne    10000c6b <decodeAddress(regs*, int*, bool*, unsigned char*)+0x6a>
10000c66:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
10000c69:	eb 28                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c6b:	31 c0                	xor    eax,eax
10000c6d:	80 f9 03             	cmp    cl,0x3
10000c70:	75 05                	jne    10000c77 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x76>
10000c72:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
10000c75:	eb 1c                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c77:	80 f9 05             	cmp    cl,0x5
10000c7a:	75 05                	jne    10000c81 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x80>
10000c7c:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
10000c7f:	eb 12                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c81:	80 f9 06             	cmp    cl,0x6
10000c84:	75 05                	jne    10000c8b <decodeAddress(regs*, int*, bool*, unsigned char*)+0x8a>
10000c86:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
10000c89:	eb 08                	jmp    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c8b:	80 f9 07             	cmp    cl,0x7
10000c8e:	75 03                	jne    10000c93 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
10000c90:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
10000c93:	80 7d f3 01          	cmp    BYTE PTR [ebp-0xd],0x1
10000c97:	75 10                	jne    10000ca9 <decodeAddress(regs*, int*, bool*, unsigned char*)+0xa8>
10000c99:	0f be 56 02          	movsx  edx,BYTE PTR [esi+0x2]
10000c9d:	01 d0                	add    eax,edx
10000c9f:	ba 03 00 00 00       	mov    edx,0x3
10000ca4:	e9 20 01 00 00       	jmp    10000dc9 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c8>
10000ca9:	ba 02 00 00 00       	mov    edx,0x2
10000cae:	80 7d f3 02          	cmp    BYTE PTR [ebp-0xd],0x2
10000cb2:	0f 85 11 01 00 00    	jne    10000dc9 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c8>
10000cb8:	03 46 02             	add    eax,DWORD PTR [esi+0x2]
10000cbb:	ba 06 00 00 00       	mov    edx,0x6
10000cc0:	e9 04 01 00 00       	jmp    10000dc9 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c8>
10000cc5:	8b 46 02             	mov    eax,DWORD PTR [esi+0x2]
10000cc8:	ba 06 00 00 00       	mov    edx,0x6
10000ccd:	e9 f9 00 00 00       	jmp    10000dcb <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
10000cd2:	8a 46 02             	mov    al,BYTE PTR [esi+0x2]
10000cd5:	88 c3                	mov    bl,al
10000cd7:	c0 eb 06             	shr    bl,0x6
10000cda:	88 5d f2             	mov    BYTE PTR [ebp-0xe],bl
10000cdd:	89 c3                	mov    ebx,eax
10000cdf:	66 c1 eb 03          	shr    bx,0x3
10000ce3:	83 e3 07             	and    ebx,0x7
10000ce6:	24 07                	and    al,0x7
10000ce8:	88 c1                	mov    cl,al
10000cea:	75 05                	jne    10000cf1 <decodeAddress(regs*, int*, bool*, unsigned char*)+0xf0>
10000cec:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
10000cef:	eb 39                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000cf1:	3c 01                	cmp    al,0x1
10000cf3:	75 05                	jne    10000cfa <decodeAddress(regs*, int*, bool*, unsigned char*)+0xf9>
10000cf5:	8b 7a 28             	mov    edi,DWORD PTR [edx+0x28]
10000cf8:	eb 30                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000cfa:	3c 02                	cmp    al,0x2
10000cfc:	75 05                	jne    10000d03 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x102>
10000cfe:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
10000d01:	eb 27                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000d03:	3c 03                	cmp    al,0x3
10000d05:	75 05                	jne    10000d0c <decodeAddress(regs*, int*, bool*, unsigned char*)+0x10b>
10000d07:	8b 7a 20             	mov    edi,DWORD PTR [edx+0x20]
10000d0a:	eb 1e                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000d0c:	3c 04                	cmp    al,0x4
10000d0e:	75 05                	jne    10000d15 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x114>
10000d10:	8b 7a 44             	mov    edi,DWORD PTR [edx+0x44]
10000d13:	eb 15                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000d15:	3c 05                	cmp    al,0x5
10000d17:	75 05                	jne    10000d1e <decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
10000d19:	8b 7a 18             	mov    edi,DWORD PTR [edx+0x18]
10000d1c:	eb 0c                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000d1e:	3c 06                	cmp    al,0x6
10000d20:	75 05                	jne    10000d27 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x126>
10000d22:	8b 7a 14             	mov    edi,DWORD PTR [edx+0x14]
10000d25:	eb 03                	jmp    10000d2a <decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
10000d27:	8b 7a 10             	mov    edi,DWORD PTR [edx+0x10]
10000d2a:	84 db                	test   bl,bl
10000d2c:	75 05                	jne    10000d33 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x132>
10000d2e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
10000d31:	eb 3c                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d33:	80 fb 01             	cmp    bl,0x1
10000d36:	75 05                	jne    10000d3d <decodeAddress(regs*, int*, bool*, unsigned char*)+0x13c>
10000d38:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
10000d3b:	eb 32                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d3d:	80 fb 02             	cmp    bl,0x2
10000d40:	75 05                	jne    10000d47 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
10000d42:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
10000d45:	eb 28                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d47:	80 fb 03             	cmp    bl,0x3
10000d4a:	75 05                	jne    10000d51 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
10000d4c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
10000d4f:	eb 1e                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d51:	31 c0                	xor    eax,eax
10000d53:	80 fb 04             	cmp    bl,0x4
10000d56:	74 17                	je     10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d58:	80 fb 05             	cmp    bl,0x5
10000d5b:	75 05                	jne    10000d62 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x161>
10000d5d:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
10000d60:	eb 0d                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d62:	80 fb 06             	cmp    bl,0x6
10000d65:	75 05                	jne    10000d6c <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16b>
10000d67:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
10000d6a:	eb 03                	jmp    10000d6f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x16e>
10000d6c:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
10000d6f:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
10000d73:	0f 94 c2             	sete   dl
10000d76:	80 f9 05             	cmp    cl,0x5
10000d79:	0f 94 c3             	sete   bl
10000d7c:	20 d3                	and    bl,dl
10000d7e:	74 0f                	je     10000d8f <decodeAddress(regs*, int*, bool*, unsigned char*)+0x18e>
10000d80:	8a 4d f2             	mov    cl,BYTE PTR [ebp-0xe]
10000d83:	d3 e0                	shl    eax,cl
10000d85:	03 46 03             	add    eax,DWORD PTR [esi+0x3]
10000d88:	ba 07 00 00 00       	mov    edx,0x7
10000d8d:	eb 3a                	jmp    10000dc9 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c8>
10000d8f:	01 f8                	add    eax,edi
10000d91:	8a 4d f2             	mov    cl,BYTE PTR [ebp-0xe]
10000d94:	d3 e0                	shl    eax,cl
10000d96:	ba 03 00 00 00       	mov    edx,0x3
10000d9b:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
10000d9f:	74 2a                	je     10000dcb <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
10000da1:	80 7d f3 01          	cmp    BYTE PTR [ebp-0xd],0x1
10000da5:	75 0d                	jne    10000db4 <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b3>
10000da7:	0f be 56 03          	movsx  edx,BYTE PTR [esi+0x3]
10000dab:	01 d0                	add    eax,edx
10000dad:	ba 04 00 00 00       	mov    edx,0x4
10000db2:	eb 17                	jmp    10000dcb <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
10000db4:	03 46 03             	add    eax,DWORD PTR [esi+0x3]
10000db7:	ba 07 00 00 00       	mov    edx,0x7
10000dbc:	eb 0d                	jmp    10000dcb <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
10000dbe:	ba 02 00 00 00       	mov    edx,0x2
10000dc3:	b3 01                	mov    bl,0x1
10000dc5:	31 c0                	xor    eax,eax
10000dc7:	eb 02                	jmp    10000dcb <decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
10000dc9:	31 db                	xor    ebx,ebx
10000dcb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000dce:	89 11                	mov    DWORD PTR [ecx],edx
10000dd0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000dd3:	88 1a                	mov    BYTE PTR [edx],bl
10000dd5:	5a                   	pop    edx
10000dd6:	5b                   	pop    ebx
10000dd7:	5e                   	pop    esi
10000dd8:	5f                   	pop    edi
10000dd9:	5d                   	pop    ebp
10000dda:	c3                   	ret    

10000ddb <x87Handler(regs*)>:
10000ddb:	55                   	push   ebp
10000ddc:	89 e5                	mov    ebp,esp
10000dde:	57                   	push   edi
10000ddf:	56                   	push   esi
10000de0:	53                   	push   ebx
10000de1:	81 ec 2c 06 00 00    	sub    esp,0x62c
10000de7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000dea:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000ded:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
10000df3:	c6 85 e2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61e],0x0
10000dfa:	c7 85 e4 f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x2
10000e04:	8d 85 e3 f9 ff ff    	lea    eax,[ebp-0x61d]
10000e0a:	50                   	push   eax
10000e0b:	8d 85 e2 f9 ff ff    	lea    eax,[ebp-0x61e]
10000e11:	50                   	push   eax
10000e12:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10000e18:	50                   	push   eax
10000e19:	53                   	push   ebx
10000e1a:	e8 fc ff ff ff       	call   10000e1b <x87Handler(regs*)+0x40>	10000e1b: R_386_PC32	decodeAddress(regs*, int*, bool*, unsigned char*)
10000e1f:	89 85 d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],eax
10000e25:	58                   	pop    eax
10000e26:	5a                   	pop    edx
10000e27:	ff b5 d4 f9 ff ff    	push   DWORD PTR [ebp-0x62c]
10000e2d:	68 ed 24 00 10       	push   0x100024ed	10000e2e: R_386_32	.text
10000e32:	e8 fc ff ff ff       	call   10000e33 <x87Handler(regs*)+0x58>	10000e33: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e37:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000e3d:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000e41:	89 04 24             	mov    DWORD PTR [esp],eax
10000e44:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000e4a:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000e4e:	50                   	push   eax
10000e4f:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000e55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000e59:	50                   	push   eax
10000e5a:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000e60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000e63:	50                   	push   eax
10000e64:	68 1b 25 00 10       	push   0x1000251b	10000e65: R_386_32	.text
10000e69:	e8 fc ff ff ff       	call   10000e6a <x87Handler(regs*)+0x8f>	10000e6a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e6e:	83 c4 18             	add    esp,0x18
10000e71:	ff b5 d0 f9 ff ff    	push   DWORD PTR [ebp-0x630]
10000e77:	68 2d 25 00 10       	push   0x1000252d	10000e78: R_386_32	.text
10000e7c:	e8 fc ff ff ff       	call   10000e7d <x87Handler(regs*)+0xa2>	10000e7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e81:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000e87:	8a 10                	mov    dl,BYTE PTR [eax]
10000e89:	83 c4 10             	add    esp,0x10
10000e8c:	80 fa d9             	cmp    dl,0xd9
10000e8f:	0f 85 d9 03 00 00    	jne    1000126e <x87Handler(regs*)+0x493>
10000e95:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000e99:	8d 50 20             	lea    edx,[eax+0x20]
10000e9c:	80 fa 0e             	cmp    dl,0xe
10000e9f:	0f 87 fa 01 00 00    	ja     1000109f <x87Handler(regs*)+0x2c4>
10000ea5:	0f b6 d2             	movzx  edx,dl
10000ea8:	ff 24 95 48 25 00 10 	jmp    DWORD PTR [edx*4+0x10002548]	10000eab: R_386_32	.text
10000eaf:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000eb5:	57                   	push   edi
10000eb6:	57                   	push   edi
10000eb7:	6a 00                	push   0x0
10000eb9:	56                   	push   esi
10000eba:	e8 fc ff ff ff       	call   10000ebb <x87Handler(regs*)+0xe0>	10000ebb: R_386_PC32	fpuGetReg(int)
10000ebf:	8d 95 f4 f9 ff ff    	lea    edx,[ebp-0x60c]
10000ec5:	b9 03 00 00 00       	mov    ecx,0x3
10000eca:	89 e7                	mov    edi,esp
10000ecc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ece:	52                   	push   edx
10000ecf:	e8 fc ff ff ff       	call   10000ed0 <x87Handler(regs*)+0xf5>	10000ed0: R_386_PC32	fpuChs(_Float80)
10000ed4:	b9 03 00 00 00       	mov    ecx,0x3
10000ed9:	89 e7                	mov    edi,esp
10000edb:	89 d6                	mov    esi,edx
10000edd:	eb 49                	jmp    10000f28 <x87Handler(regs*)+0x14d>
10000edf:	8d 85 00 fa ff ff    	lea    eax,[ebp-0x600]
10000ee5:	51                   	push   ecx
10000ee6:	51                   	push   ecx
10000ee7:	6a 00                	push   0x0
10000ee9:	50                   	push   eax
10000eea:	e8 fc ff ff ff       	call   10000eeb <x87Handler(regs*)+0x110>	10000eeb: R_386_PC32	fpuGetReg(int)
10000eef:	8b 85 00 fa ff ff    	mov    eax,DWORD PTR [ebp-0x600]
10000ef5:	8b 95 04 fa ff ff    	mov    edx,DWORD PTR [ebp-0x5fc]
10000efb:	89 85 0c fa ff ff    	mov    DWORD PTR [ebp-0x5f4],eax
10000f01:	89 95 10 fa ff ff    	mov    DWORD PTR [ebp-0x5f0],edx
10000f07:	8b 85 08 fa ff ff    	mov    eax,DWORD PTR [ebp-0x5f8]
10000f0d:	66 89 85 14 fa ff ff 	mov    WORD PTR [ebp-0x5ec],ax
10000f14:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000f1b:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000f21:	b9 03 00 00 00       	mov    ecx,0x3
10000f26:	89 e7                	mov    edi,esp
10000f28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f2a:	6a 00                	push   0x0
10000f2c:	e8 fc ff ff ff       	call   10000f2d <x87Handler(regs*)+0x152>	10000f2d: R_386_PC32	fpuSetReg(int, _Float80)
10000f31:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f35:	83 c4 10             	add    esp,0x10
10000f38:	b0 01                	mov    al,0x1
10000f3a:	e9 5d 15 00 00       	jmp    1000249c <x87Handler(regs*)+0x16c1>
10000f3f:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000f46:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000f50:	c7 85 1c fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x5e4],0x20000000
10000f5a:	66 c7 85 20 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5e0],0x4000
10000f63:	83 ec 10             	sub    esp,0x10
10000f66:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000f6c:	eb 2d                	jmp    10000f9b <x87Handler(regs*)+0x1c0>
10000f6e:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000f75:	c7 85 24 fa ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x5dc],0xf346e2be
10000f7f:	c7 85 28 fa ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x5d8],0x35269e12
10000f89:	66 c7 85 2c fa ff ff 01 40 	mov    WORD PTR [ebp-0x5d4],0x4001
10000f92:	83 ec 10             	sub    esp,0x10
10000f95:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000f9b:	b9 03 00 00 00       	mov    ecx,0x3
10000fa0:	89 e7                	mov    edi,esp
10000fa2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fa4:	e8 fc ff ff ff       	call   10000fa5 <x87Handler(regs*)+0x1ca>	10000fa5: R_386_PC32	fpuPush(_Float80)
10000fa9:	eb 86                	jmp    10000f31 <x87Handler(regs*)+0x156>
10000fab:	c6 85 3a fa ff ff 00 	mov    BYTE PTR [ebp-0x5c6],0x0
10000fb2:	c7 85 30 fa ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x5d0],0x5705fc1c
10000fbc:	c7 85 34 fa ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5cc],0x2e2a8eca
10000fc6:	66 c7 85 38 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5c8],0x4000
10000fcf:	83 ec 10             	sub    esp,0x10
10000fd2:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10000fd8:	eb c1                	jmp    10000f9b <x87Handler(regs*)+0x1c0>
10000fda:	c6 85 46 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ba],0x0
10000fe1:	c7 85 3c fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x5c4],0x885a308c
10000feb:	c7 85 40 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5c0],0x3243f6a8
10000ff5:	66 c7 85 44 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5bc],0x4001
10000ffe:	83 ec 10             	sub    esp,0x10
10001001:	8d b5 3c fa ff ff    	lea    esi,[ebp-0x5c4]
10001007:	eb 92                	jmp    10000f9b <x87Handler(regs*)+0x1c0>
10001009:	c6 85 52 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ae],0x0
10001010:	c7 85 48 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5b8],0x3ef3fde6
1000101a:	c7 85 4c fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5b4],0x268826a1
10001024:	66 c7 85 50 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5b0],0x3ffe
1000102d:	83 ec 10             	sub    esp,0x10
10001030:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
10001036:	e9 60 ff ff ff       	jmp    10000f9b <x87Handler(regs*)+0x1c0>
1000103b:	c6 85 5e fa ff ff 00 	mov    BYTE PTR [ebp-0x5a2],0x0
10001042:	c7 85 54 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5ac],0xf473de68
1000104c:	c7 85 58 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5a8],0x2c5c85fd
10001056:	66 c7 85 5c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5a4],0x3fff
1000105f:	83 ec 10             	sub    esp,0x10
10001062:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
10001068:	e9 2e ff ff ff       	jmp    10000f9b <x87Handler(regs*)+0x1c0>
1000106d:	c6 85 6a fa ff ff 00 	mov    BYTE PTR [ebp-0x596],0x0
10001074:	c7 85 60 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5a0],0x0
1000107e:	c7 85 64 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x59c],0x0
10001088:	66 c7 85 68 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x598],0x3fff
10001091:	83 ec 10             	sub    esp,0x10
10001094:	8d b5 60 fa ff ff    	lea    esi,[ebp-0x5a0]
1000109a:	e9 fc fe ff ff       	jmp    10000f9b <x87Handler(regs*)+0x1c0>
1000109f:	8d 50 40             	lea    edx,[eax+0x40]
100010a2:	80 fa 07             	cmp    dl,0x7
100010a5:	77 27                	ja     100010ce <x87Handler(regs*)+0x2f3>
100010a7:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
100010ad:	57                   	push   edi
100010ae:	57                   	push   edi
100010af:	2d c0 00 00 00       	sub    eax,0xc0
100010b4:	50                   	push   eax
100010b5:	56                   	push   esi
100010b6:	e8 fc ff ff ff       	call   100010b7 <x87Handler(regs*)+0x2dc>	100010b7: R_386_PC32	fpuGetReg(int)
100010bb:	83 ec 14             	sub    esp,0x14
100010be:	b9 03 00 00 00       	mov    ecx,0x3
100010c3:	89 e7                	mov    edi,esp
100010c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010c7:	e8 fc ff ff ff       	call   100010c8 <x87Handler(regs*)+0x2ed>	100010c8: R_386_PC32	fpuPush(_Float80)
100010cc:	eb 63                	jmp    10001131 <x87Handler(regs*)+0x356>
100010ce:	8d 50 38             	lea    edx,[eax+0x38]
100010d1:	80 fa 07             	cmp    dl,0x7
100010d4:	77 64                	ja     1000113a <x87Handler(regs*)+0x35f>
100010d6:	8d 55 dc             	lea    edx,[ebp-0x24]
100010d9:	56                   	push   esi
100010da:	56                   	push   esi
100010db:	2d c8 00 00 00       	sub    eax,0xc8
100010e0:	50                   	push   eax
100010e1:	52                   	push   edx
100010e2:	e8 fc ff ff ff       	call   100010e3 <x87Handler(regs*)+0x308>	100010e3: R_386_PC32	fpuGetReg(int)
100010e7:	8d b5 80 fb ff ff    	lea    esi,[ebp-0x480]
100010ed:	83 ec 0c             	sub    esp,0xc
100010f0:	6a 00                	push   0x0
100010f2:	56                   	push   esi
100010f3:	e8 fc ff ff ff       	call   100010f4 <x87Handler(regs*)+0x319>	100010f4: R_386_PC32	fpuGetReg(int)
100010f8:	83 c4 10             	add    esp,0x10
100010fb:	b9 03 00 00 00       	mov    ecx,0x3
10001100:	89 e7                	mov    edi,esp
10001102:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001104:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000110a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000110e:	2d c8 00 00 00       	sub    eax,0xc8
10001113:	50                   	push   eax
10001114:	e8 fc ff ff ff       	call   10001115 <x87Handler(regs*)+0x33a>	10001115: R_386_PC32	fpuSetReg(int, _Float80)
10001119:	83 ec 0c             	sub    esp,0xc
1000111c:	b9 03 00 00 00       	mov    ecx,0x3
10001121:	89 e7                	mov    edi,esp
10001123:	8d 55 dc             	lea    edx,[ebp-0x24]
10001126:	89 d6                	mov    esi,edx
10001128:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000112a:	6a 00                	push   0x0
1000112c:	e8 fc ff ff ff       	call   1000112d <x87Handler(regs*)+0x352>	1000112d: R_386_PC32	fpuSetReg(int, _Float80)
10001131:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001135:	e9 2c 01 00 00       	jmp    10001266 <x87Handler(regs*)+0x48b>
1000113a:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001140:	84 d2                	test   dl,dl
10001142:	75 1b                	jne    1000115f <x87Handler(regs*)+0x384>
10001144:	8d b5 20 fe ff ff    	lea    esi,[ebp-0x1e0]
1000114a:	50                   	push   eax
1000114b:	50                   	push   eax
1000114c:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001152:	ff 30                	push   DWORD PTR [eax]
10001154:	56                   	push   esi
10001155:	e8 fc ff ff ff       	call   10001156 <x87Handler(regs*)+0x37b>	10001156: R_386_PC32	fpu32ToInternal(unsigned int)
1000115a:	e9 bd 00 00 00       	jmp    1000121c <x87Handler(regs*)+0x441>
1000115f:	80 fa 03             	cmp    dl,0x3
10001162:	75 22                	jne    10001186 <x87Handler(regs*)+0x3ab>
10001164:	8d b5 2c fe ff ff    	lea    esi,[ebp-0x1d4]
1000116a:	83 ec 0c             	sub    esp,0xc
1000116d:	56                   	push   esi
1000116e:	e8 fc ff ff ff       	call   1000116f <x87Handler(regs*)+0x394>	1000116f: R_386_PC32	fpuPop()
10001173:	83 ec 14             	sub    esp,0x14
10001176:	b9 03 00 00 00       	mov    ecx,0x3
1000117b:	89 e7                	mov    edi,esp
1000117d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000117f:	e8 fc ff ff ff       	call   10001180 <x87Handler(regs*)+0x3a5>	10001180: R_386_PC32	fpuInternalTo32(_Float80)
10001184:	eb 69                	jmp    100011ef <x87Handler(regs*)+0x414>
10001186:	80 fa 05             	cmp    dl,0x5
10001189:	75 11                	jne    1000119c <x87Handler(regs*)+0x3c1>
1000118b:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001191:	66 8b 00             	mov    ax,WORD PTR [eax]
10001194:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10001196: R_386_32	fpuState
1000119a:	eb 1a                	jmp    100011b6 <x87Handler(regs*)+0x3db>
1000119c:	31 c0                	xor    eax,eax
1000119e:	80 fa 07             	cmp    dl,0x7
100011a1:	0f 85 f5 12 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
100011a7:	66 a1 02 00 00 00    	mov    ax,ds:0x2	100011a9: R_386_32	fpuState
100011ad:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
100011b3:	66 89 07             	mov    WORD PTR [edi],ax
100011b6:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100011bc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100011bf:	e9 74 fd ff ff       	jmp    10000f38 <x87Handler(regs*)+0x15d>
100011c4:	31 c0                	xor    eax,eax
100011c6:	80 fa 03             	cmp    dl,0x3
100011c9:	0f 85 cd 12 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
100011cf:	8d b5 98 fe ff ff    	lea    esi,[ebp-0x168]
100011d5:	83 ec 0c             	sub    esp,0xc
100011d8:	56                   	push   esi
100011d9:	e8 fc ff ff ff       	call   100011da <x87Handler(regs*)+0x3ff>	100011da: R_386_PC32	fpuPop()
100011de:	83 ec 14             	sub    esp,0x14
100011e1:	b9 03 00 00 00       	mov    ecx,0x3
100011e6:	89 e7                	mov    edi,esp
100011e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011ea:	e8 fc ff ff ff       	call   100011eb <x87Handler(regs*)+0x410>	100011eb: R_386_PC32	fpuFloatToLong(_Float80)
100011ef:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
100011f5:	89 01                	mov    DWORD PTR [ecx],eax
100011f7:	eb 64                	jmp    1000125d <x87Handler(regs*)+0x482>
100011f9:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
100011ff:	84 d2                	test   dl,dl
10001201:	0f 85 dc 11 00 00    	jne    100023e3 <x87Handler(regs*)+0x1608>
10001207:	8d 75 ac             	lea    esi,[ebp-0x54]
1000120a:	51                   	push   ecx
1000120b:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001211:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001214:	ff 30                	push   DWORD PTR [eax]
10001216:	56                   	push   esi
10001217:	e8 fc ff ff ff       	call   10001218 <x87Handler(regs*)+0x43d>	10001218: R_386_PC32	fpu64ToInternal(unsigned long long)
1000121c:	83 ec 14             	sub    esp,0x14
1000121f:	b9 03 00 00 00       	mov    ecx,0x3
10001224:	89 e7                	mov    edi,esp
10001226:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001228:	e8 fc ff ff ff       	call   10001229 <x87Handler(regs*)+0x44e>	10001229: R_386_PC32	fpuPush(_Float80)
1000122d:	eb 2e                	jmp    1000125d <x87Handler(regs*)+0x482>
1000122f:	80 fa 02             	cmp    dl,0x2
10001232:	75 90                	jne    100011c4 <x87Handler(regs*)+0x3e9>
10001234:	8d b5 8c fe ff ff    	lea    esi,[ebp-0x174]
1000123a:	50                   	push   eax
1000123b:	50                   	push   eax
1000123c:	6a 00                	push   0x0
1000123e:	56                   	push   esi
1000123f:	e8 fc ff ff ff       	call   10001240 <x87Handler(regs*)+0x465>	10001240: R_386_PC32	fpuGetReg(int)
10001244:	83 ec 14             	sub    esp,0x14
10001247:	b9 03 00 00 00       	mov    ecx,0x3
1000124c:	89 e7                	mov    edi,esp
1000124e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001250:	e8 fc ff ff ff       	call   10001251 <x87Handler(regs*)+0x476>	10001251: R_386_PC32	fpuFloatToLong(_Float80)
10001255:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
1000125b:	89 02                	mov    DWORD PTR [edx],eax
1000125d:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001263:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001266:	83 c4 20             	add    esp,0x20
10001269:	e9 ca fc ff ff       	jmp    10000f38 <x87Handler(regs*)+0x15d>
1000126e:	80 fa d8             	cmp    dl,0xd8
10001271:	0f 85 56 03 00 00    	jne    100015cd <x87Handler(regs*)+0x7f2>
10001277:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000127d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001281:	8d 50 40             	lea    edx,[eax+0x40]
10001284:	80 fa 07             	cmp    dl,0x7
10001287:	77 64                	ja     100012ed <x87Handler(regs*)+0x512>
10001289:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
1000128f:	57                   	push   edi
10001290:	57                   	push   edi
10001291:	2d c0 00 00 00       	sub    eax,0xc0
10001296:	50                   	push   eax
10001297:	56                   	push   esi
10001298:	e8 fc ff ff ff       	call   10001299 <x87Handler(regs*)+0x4be>	10001299: R_386_PC32	fpuGetReg(int)
1000129d:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100012a3:	83 ec 0c             	sub    esp,0xc
100012a6:	6a 00                	push   0x0
100012a8:	52                   	push   edx
100012a9:	e8 fc ff ff ff       	call   100012aa <x87Handler(regs*)+0x4cf>	100012aa: R_386_PC32	fpuGetReg(int)
100012ae:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100012b4:	52                   	push   edx
100012b5:	b9 03 00 00 00       	mov    ecx,0x3
100012ba:	89 e7                	mov    edi,esp
100012bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012be:	83 ec 0c             	sub    esp,0xc
100012c1:	b9 03 00 00 00       	mov    ecx,0x3
100012c6:	89 e7                	mov    edi,esp
100012c8:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100012ce:	89 d6                	mov    esi,edx
100012d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012d2:	50                   	push   eax
100012d3:	e8 fc ff ff ff       	call   100012d4 <x87Handler(regs*)+0x4f9>	100012d4: R_386_PC32	fpuAdd(_Float80, _Float80)
100012d8:	83 c4 20             	add    esp,0x20
100012db:	b9 03 00 00 00       	mov    ecx,0x3
100012e0:	89 e7                	mov    edi,esp
100012e2:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100012e8:	e9 e0 01 00 00       	jmp    100014cd <x87Handler(regs*)+0x6f2>
100012ed:	8d 50 38             	lea    edx,[eax+0x38]
100012f0:	80 fa 07             	cmp    dl,0x7
100012f3:	77 64                	ja     10001359 <x87Handler(regs*)+0x57e>
100012f5:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
100012fb:	52                   	push   edx
100012fc:	52                   	push   edx
100012fd:	2d c8 00 00 00       	sub    eax,0xc8
10001302:	50                   	push   eax
10001303:	56                   	push   esi
10001304:	e8 fc ff ff ff       	call   10001305 <x87Handler(regs*)+0x52a>	10001305: R_386_PC32	fpuGetReg(int)
10001309:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
1000130f:	83 ec 0c             	sub    esp,0xc
10001312:	6a 00                	push   0x0
10001314:	52                   	push   edx
10001315:	e8 fc ff ff ff       	call   10001316 <x87Handler(regs*)+0x53b>	10001316: R_386_PC32	fpuGetReg(int)
1000131a:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
10001320:	51                   	push   ecx
10001321:	b9 03 00 00 00       	mov    ecx,0x3
10001326:	89 e7                	mov    edi,esp
10001328:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000132a:	83 ec 0c             	sub    esp,0xc
1000132d:	b9 03 00 00 00       	mov    ecx,0x3
10001332:	89 e7                	mov    edi,esp
10001334:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
1000133a:	89 d6                	mov    esi,edx
1000133c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000133e:	50                   	push   eax
1000133f:	e8 fc ff ff ff       	call   10001340 <x87Handler(regs*)+0x565>	10001340: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001344:	83 c4 20             	add    esp,0x20
10001347:	b9 03 00 00 00       	mov    ecx,0x3
1000134c:	89 e7                	mov    edi,esp
1000134e:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
10001354:	e9 74 01 00 00       	jmp    100014cd <x87Handler(regs*)+0x6f2>
10001359:	8d 50 30             	lea    edx,[eax+0x30]
1000135c:	80 fa 07             	cmp    dl,0x7
1000135f:	77 45                	ja     100013a6 <x87Handler(regs*)+0x5cb>
10001361:	8d b5 b4 fa ff ff    	lea    esi,[ebp-0x54c]
10001367:	57                   	push   edi
10001368:	57                   	push   edi
10001369:	2d d0 00 00 00       	sub    eax,0xd0
1000136e:	50                   	push   eax
1000136f:	56                   	push   esi
10001370:	e8 fc ff ff ff       	call   10001371 <x87Handler(regs*)+0x596>	10001371: R_386_PC32	fpuGetReg(int)
10001375:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000137b:	83 ec 0c             	sub    esp,0xc
1000137e:	6a 00                	push   0x0
10001380:	50                   	push   eax
10001381:	e8 fc ff ff ff       	call   10001382 <x87Handler(regs*)+0x5a7>	10001382: R_386_PC32	fpuGetReg(int)
10001386:	50                   	push   eax
10001387:	50                   	push   eax
10001388:	b9 03 00 00 00       	mov    ecx,0x3
1000138d:	89 e7                	mov    edi,esp
1000138f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001391:	83 ec 0c             	sub    esp,0xc
10001394:	b9 03 00 00 00       	mov    ecx,0x3
10001399:	89 e7                	mov    edi,esp
1000139b:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100013a1:	e9 c6 07 00 00       	jmp    10001b6c <x87Handler(regs*)+0xd91>
100013a6:	8d 50 28             	lea    edx,[eax+0x28]
100013a9:	80 fa 07             	cmp    dl,0x7
100013ac:	77 45                	ja     100013f3 <x87Handler(regs*)+0x618>
100013ae:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
100013b4:	52                   	push   edx
100013b5:	52                   	push   edx
100013b6:	2d d8 00 00 00       	sub    eax,0xd8
100013bb:	50                   	push   eax
100013bc:	56                   	push   esi
100013bd:	e8 fc ff ff ff       	call   100013be <x87Handler(regs*)+0x5e3>	100013be: R_386_PC32	fpuGetReg(int)
100013c2:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100013c8:	83 ec 0c             	sub    esp,0xc
100013cb:	6a 00                	push   0x0
100013cd:	50                   	push   eax
100013ce:	e8 fc ff ff ff       	call   100013cf <x87Handler(regs*)+0x5f4>	100013cf: R_386_PC32	fpuGetReg(int)
100013d3:	51                   	push   ecx
100013d4:	51                   	push   ecx
100013d5:	b9 03 00 00 00       	mov    ecx,0x3
100013da:	89 e7                	mov    edi,esp
100013dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013de:	83 ec 0c             	sub    esp,0xc
100013e1:	b9 03 00 00 00       	mov    ecx,0x3
100013e6:	89 e7                	mov    edi,esp
100013e8:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100013ee:	e9 d7 07 00 00       	jmp    10001bca <x87Handler(regs*)+0xdef>
100013f3:	8d 50 20             	lea    edx,[eax+0x20]
100013f6:	80 fa 07             	cmp    dl,0x7
100013f9:	77 61                	ja     1000145c <x87Handler(regs*)+0x681>
100013fb:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
10001401:	51                   	push   ecx
10001402:	51                   	push   ecx
10001403:	2d e0 00 00 00       	sub    eax,0xe0
10001408:	50                   	push   eax
10001409:	56                   	push   esi
1000140a:	e8 fc ff ff ff       	call   1000140b <x87Handler(regs*)+0x630>	1000140b: R_386_PC32	fpuGetReg(int)
1000140f:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001415:	83 ec 0c             	sub    esp,0xc
10001418:	6a 00                	push   0x0
1000141a:	52                   	push   edx
1000141b:	e8 fc ff ff ff       	call   1000141c <x87Handler(regs*)+0x641>	1000141c: R_386_PC32	fpuGetReg(int)
10001420:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
10001426:	57                   	push   edi
10001427:	b9 03 00 00 00       	mov    ecx,0x3
1000142c:	89 e7                	mov    edi,esp
1000142e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001430:	83 ec 0c             	sub    esp,0xc
10001433:	b9 03 00 00 00       	mov    ecx,0x3
10001438:	89 e7                	mov    edi,esp
1000143a:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001440:	89 d6                	mov    esi,edx
10001442:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001444:	50                   	push   eax
10001445:	e8 fc ff ff ff       	call   10001446 <x87Handler(regs*)+0x66b>	10001446: R_386_PC32	fpuSub(_Float80, _Float80)
1000144a:	83 c4 20             	add    esp,0x20
1000144d:	b9 03 00 00 00       	mov    ecx,0x3
10001452:	89 e7                	mov    edi,esp
10001454:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
1000145a:	eb 71                	jmp    100014cd <x87Handler(regs*)+0x6f2>
1000145c:	8d 50 18             	lea    edx,[eax+0x18]
1000145f:	80 fa 07             	cmp    dl,0x7
10001462:	77 70                	ja     100014d4 <x87Handler(regs*)+0x6f9>
10001464:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
1000146a:	50                   	push   eax
1000146b:	50                   	push   eax
1000146c:	6a 00                	push   0x0
1000146e:	56                   	push   esi
1000146f:	e8 fc ff ff ff       	call   10001470 <x87Handler(regs*)+0x695>	10001470: R_386_PC32	fpuGetReg(int)
10001474:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
1000147a:	83 ec 0c             	sub    esp,0xc
1000147d:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001487:	2d e8 00 00 00       	sub    eax,0xe8
1000148c:	50                   	push   eax
1000148d:	52                   	push   edx
1000148e:	e8 fc ff ff ff       	call   1000148f <x87Handler(regs*)+0x6b4>	1000148f: R_386_PC32	fpuGetReg(int)
10001493:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
10001499:	52                   	push   edx
1000149a:	b9 03 00 00 00       	mov    ecx,0x3
1000149f:	89 e7                	mov    edi,esp
100014a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014a3:	83 ec 0c             	sub    esp,0xc
100014a6:	b9 03 00 00 00       	mov    ecx,0x3
100014ab:	89 e7                	mov    edi,esp
100014ad:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100014b3:	89 d6                	mov    esi,edx
100014b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014b7:	50                   	push   eax
100014b8:	e8 fc ff ff ff       	call   100014b9 <x87Handler(regs*)+0x6de>	100014b9: R_386_PC32	fpuSub(_Float80, _Float80)
100014bd:	83 c4 20             	add    esp,0x20
100014c0:	b9 03 00 00 00       	mov    ecx,0x3
100014c5:	89 e7                	mov    edi,esp
100014c7:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100014cd:	89 c6                	mov    esi,eax
100014cf:	e9 54 fa ff ff       	jmp    10000f28 <x87Handler(regs*)+0x14d>
100014d4:	8d 50 10             	lea    edx,[eax+0x10]
100014d7:	80 fa 07             	cmp    dl,0x7
100014da:	77 61                	ja     1000153d <x87Handler(regs*)+0x762>
100014dc:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
100014e2:	51                   	push   ecx
100014e3:	51                   	push   ecx
100014e4:	2d f0 00 00 00       	sub    eax,0xf0
100014e9:	50                   	push   eax
100014ea:	56                   	push   esi
100014eb:	e8 fc ff ff ff       	call   100014ec <x87Handler(regs*)+0x711>	100014ec: R_386_PC32	fpuGetReg(int)
100014f0:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
100014f6:	83 ec 0c             	sub    esp,0xc
100014f9:	6a 00                	push   0x0
100014fb:	52                   	push   edx
100014fc:	e8 fc ff ff ff       	call   100014fd <x87Handler(regs*)+0x722>	100014fd: R_386_PC32	fpuGetReg(int)
10001501:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
10001507:	57                   	push   edi
10001508:	b9 03 00 00 00       	mov    ecx,0x3
1000150d:	89 e7                	mov    edi,esp
1000150f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001511:	83 ec 0c             	sub    esp,0xc
10001514:	b9 03 00 00 00       	mov    ecx,0x3
10001519:	89 e7                	mov    edi,esp
1000151b:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
10001521:	89 d6                	mov    esi,edx
10001523:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001525:	50                   	push   eax
10001526:	e8 fc ff ff ff       	call   10001527 <x87Handler(regs*)+0x74c>	10001527: R_386_PC32	fpuDivide(_Float80, _Float80)
1000152b:	83 c4 20             	add    esp,0x20
1000152e:	b9 03 00 00 00       	mov    ecx,0x3
10001533:	89 e7                	mov    edi,esp
10001535:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
1000153b:	eb 71                	jmp    100015ae <x87Handler(regs*)+0x7d3>
1000153d:	3c f7                	cmp    al,0xf7
1000153f:	0f 86 89 07 00 00    	jbe    10001cce <x87Handler(regs*)+0xef3>
10001545:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
1000154b:	50                   	push   eax
1000154c:	50                   	push   eax
1000154d:	6a 00                	push   0x0
1000154f:	56                   	push   esi
10001550:	e8 fc ff ff ff       	call   10001551 <x87Handler(regs*)+0x776>	10001551: R_386_PC32	fpuGetReg(int)
10001555:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
1000155b:	83 ec 0c             	sub    esp,0xc
1000155e:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001564:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001568:	2d f8 00 00 00       	sub    eax,0xf8
1000156d:	50                   	push   eax
1000156e:	52                   	push   edx
1000156f:	e8 fc ff ff ff       	call   10001570 <x87Handler(regs*)+0x795>	10001570: R_386_PC32	fpuGetReg(int)
10001574:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
1000157a:	52                   	push   edx
1000157b:	b9 03 00 00 00       	mov    ecx,0x3
10001580:	89 e7                	mov    edi,esp
10001582:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001584:	83 ec 0c             	sub    esp,0xc
10001587:	b9 03 00 00 00       	mov    ecx,0x3
1000158c:	89 e7                	mov    edi,esp
1000158e:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001594:	89 d6                	mov    esi,edx
10001596:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001598:	50                   	push   eax
10001599:	e8 fc ff ff ff       	call   1000159a <x87Handler(regs*)+0x7bf>	1000159a: R_386_PC32	fpuDivide(_Float80, _Float80)
1000159e:	83 c4 20             	add    esp,0x20
100015a1:	b9 03 00 00 00       	mov    ecx,0x3
100015a6:	89 e7                	mov    edi,esp
100015a8:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100015ae:	89 c6                	mov    esi,eax
100015b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015b2:	6a 00                	push   0x0
100015b4:	e8 fc ff ff ff       	call   100015b5 <x87Handler(regs*)+0x7da>	100015b5: R_386_PC32	fpuSetReg(int, _Float80)
100015b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100015bd:	8d 45 dc             	lea    eax,[ebp-0x24]
100015c0:	89 04 24             	mov    DWORD PTR [esp],eax
100015c3:	e8 fc ff ff ff       	call   100015c4 <x87Handler(regs*)+0x7e9>	100015c4: R_386_PC32	fpuPop()
100015c8:	e9 50 0c 00 00       	jmp    1000221d <x87Handler(regs*)+0x1442>
100015cd:	80 fa dc             	cmp    dl,0xdc
100015d0:	0f 85 94 01 00 00    	jne    1000176a <x87Handler(regs*)+0x98f>
100015d6:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100015dc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100015e0:	8d 50 40             	lea    edx,[eax+0x40]
100015e3:	80 fa 07             	cmp    dl,0x7
100015e6:	77 77                	ja     1000165f <x87Handler(regs*)+0x884>
100015e8:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
100015ee:	52                   	push   edx
100015ef:	52                   	push   edx
100015f0:	2d c0 00 00 00       	sub    eax,0xc0
100015f5:	50                   	push   eax
100015f6:	56                   	push   esi
100015f7:	e8 fc ff ff ff       	call   100015f8 <x87Handler(regs*)+0x81d>	100015f8: R_386_PC32	fpuGetReg(int)
100015fc:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001602:	83 ec 0c             	sub    esp,0xc
10001605:	6a 00                	push   0x0
10001607:	52                   	push   edx
10001608:	e8 fc ff ff ff       	call   10001609 <x87Handler(regs*)+0x82e>	10001609: R_386_PC32	fpuGetReg(int)
1000160d:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
10001613:	51                   	push   ecx
10001614:	b9 03 00 00 00       	mov    ecx,0x3
10001619:	89 e7                	mov    edi,esp
1000161b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000161d:	83 ec 0c             	sub    esp,0xc
10001620:	b9 03 00 00 00       	mov    ecx,0x3
10001625:	89 e7                	mov    edi,esp
10001627:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
1000162d:	89 d6                	mov    esi,edx
1000162f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001631:	50                   	push   eax
10001632:	e8 fc ff ff ff       	call   10001633 <x87Handler(regs*)+0x858>	10001633: R_386_PC32	fpuAdd(_Float80, _Float80)
10001637:	83 c4 20             	add    esp,0x20
1000163a:	b9 03 00 00 00       	mov    ecx,0x3
1000163f:	89 e7                	mov    edi,esp
10001641:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
10001647:	89 c6                	mov    esi,eax
10001649:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000164b:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001651:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001655:	2d c0 00 00 00       	sub    eax,0xc0
1000165a:	e9 8a 04 00 00       	jmp    10001ae9 <x87Handler(regs*)+0xd0e>
1000165f:	8d 50 38             	lea    edx,[eax+0x38]
10001662:	80 fa 07             	cmp    dl,0x7
10001665:	77 77                	ja     100016de <x87Handler(regs*)+0x903>
10001667:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
1000166d:	51                   	push   ecx
1000166e:	51                   	push   ecx
1000166f:	2d c8 00 00 00       	sub    eax,0xc8
10001674:	50                   	push   eax
10001675:	56                   	push   esi
10001676:	e8 fc ff ff ff       	call   10001677 <x87Handler(regs*)+0x89c>	10001677: R_386_PC32	fpuGetReg(int)
1000167b:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
10001681:	83 ec 0c             	sub    esp,0xc
10001684:	6a 00                	push   0x0
10001686:	52                   	push   edx
10001687:	e8 fc ff ff ff       	call   10001688 <x87Handler(regs*)+0x8ad>	10001688: R_386_PC32	fpuGetReg(int)
1000168c:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
10001692:	57                   	push   edi
10001693:	b9 03 00 00 00       	mov    ecx,0x3
10001698:	89 e7                	mov    edi,esp
1000169a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000169c:	83 ec 0c             	sub    esp,0xc
1000169f:	b9 03 00 00 00       	mov    ecx,0x3
100016a4:	89 e7                	mov    edi,esp
100016a6:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
100016ac:	89 d6                	mov    esi,edx
100016ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016b0:	50                   	push   eax
100016b1:	e8 fc ff ff ff       	call   100016b2 <x87Handler(regs*)+0x8d7>	100016b2: R_386_PC32	fpuMultiply(_Float80, _Float80)
100016b6:	83 c4 20             	add    esp,0x20
100016b9:	b9 03 00 00 00       	mov    ecx,0x3
100016be:	89 e7                	mov    edi,esp
100016c0:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100016c6:	89 c6                	mov    esi,eax
100016c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016ca:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100016d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016d4:	2d c8 00 00 00       	sub    eax,0xc8
100016d9:	e9 0b 04 00 00       	jmp    10001ae9 <x87Handler(regs*)+0xd0e>
100016de:	83 c0 18             	add    eax,0x18
100016e1:	3c 07                	cmp    al,0x7
100016e3:	0f 87 8b 09 00 00    	ja     10002074 <x87Handler(regs*)+0x1299>
100016e9:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
100016ef:	50                   	push   eax
100016f0:	50                   	push   eax
100016f1:	6a 00                	push   0x0
100016f3:	56                   	push   esi
100016f4:	e8 fc ff ff ff       	call   100016f5 <x87Handler(regs*)+0x91a>	100016f5: R_386_PC32	fpuGetReg(int)
100016f9:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
100016ff:	83 ec 0c             	sub    esp,0xc
10001702:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001708:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000170c:	2d e8 00 00 00       	sub    eax,0xe8
10001711:	50                   	push   eax
10001712:	52                   	push   edx
10001713:	e8 fc ff ff ff       	call   10001714 <x87Handler(regs*)+0x939>	10001714: R_386_PC32	fpuGetReg(int)
10001718:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
1000171e:	52                   	push   edx
1000171f:	b9 03 00 00 00       	mov    ecx,0x3
10001724:	89 e7                	mov    edi,esp
10001726:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001728:	83 ec 0c             	sub    esp,0xc
1000172b:	b9 03 00 00 00       	mov    ecx,0x3
10001730:	89 e7                	mov    edi,esp
10001732:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
10001738:	89 d6                	mov    esi,edx
1000173a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000173c:	50                   	push   eax
1000173d:	e8 fc ff ff ff       	call   1000173e <x87Handler(regs*)+0x963>	1000173e: R_386_PC32	fpuSub(_Float80, _Float80)
10001742:	83 c4 20             	add    esp,0x20
10001745:	b9 03 00 00 00       	mov    ecx,0x3
1000174a:	89 e7                	mov    edi,esp
1000174c:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001752:	89 c6                	mov    esi,eax
10001754:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001756:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000175c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001760:	2d e8 00 00 00       	sub    eax,0xe8
10001765:	e9 7f 03 00 00       	jmp    10001ae9 <x87Handler(regs*)+0xd0e>
1000176a:	80 fa de             	cmp    dl,0xde
1000176d:	0f 85 33 03 00 00    	jne    10001aa6 <x87Handler(regs*)+0xccb>
10001773:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001779:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
1000177d:	8d 42 40             	lea    eax,[edx+0x40]
10001780:	3c 07                	cmp    al,0x7
10001782:	0f 87 8d 00 00 00    	ja     10001815 <x87Handler(regs*)+0xa3a>
10001788:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
1000178e:	51                   	push   ecx
1000178f:	51                   	push   ecx
10001790:	81 ea c0 00 00 00    	sub    edx,0xc0
10001796:	52                   	push   edx
10001797:	56                   	push   esi
10001798:	e8 fc ff ff ff       	call   10001799 <x87Handler(regs*)+0x9be>	10001799: R_386_PC32	fpuGetReg(int)
1000179d:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100017a3:	83 ec 0c             	sub    esp,0xc
100017a6:	6a 00                	push   0x0
100017a8:	52                   	push   edx
100017a9:	e8 fc ff ff ff       	call   100017aa <x87Handler(regs*)+0x9cf>	100017aa: R_386_PC32	fpuGetReg(int)
100017ae:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100017b4:	57                   	push   edi
100017b5:	b9 03 00 00 00       	mov    ecx,0x3
100017ba:	89 e7                	mov    edi,esp
100017bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017be:	83 ec 0c             	sub    esp,0xc
100017c1:	b9 03 00 00 00       	mov    ecx,0x3
100017c6:	89 e7                	mov    edi,esp
100017c8:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100017ce:	89 d6                	mov    esi,edx
100017d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017d2:	50                   	push   eax
100017d3:	e8 fc ff ff ff       	call   100017d4 <x87Handler(regs*)+0x9f9>	100017d4: R_386_PC32	fpuAdd(_Float80, _Float80)
100017d8:	83 c4 20             	add    esp,0x20
100017db:	b9 03 00 00 00       	mov    ecx,0x3
100017e0:	89 e7                	mov    edi,esp
100017e2:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100017e8:	89 c6                	mov    esi,eax
100017ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017ec:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100017f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017f6:	2d c0 00 00 00       	sub    eax,0xc0
100017fb:	50                   	push   eax
100017fc:	e8 fc ff ff ff       	call   100017fd <x87Handler(regs*)+0xa22>	100017fd: R_386_PC32	fpuSetReg(int, _Float80)
10001801:	8d 45 dc             	lea    eax,[ebp-0x24]
10001804:	89 04 24             	mov    DWORD PTR [esp],eax
10001807:	e8 fc ff ff ff       	call   10001808 <x87Handler(regs*)+0xa2d>	10001808: R_386_PC32	fpuPop()
1000180c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001810:	e9 08 0a 00 00       	jmp    1000221d <x87Handler(regs*)+0x1442>
10001815:	8d 42 20             	lea    eax,[edx+0x20]
10001818:	3c 07                	cmp    al,0x7
1000181a:	77 78                	ja     10001894 <x87Handler(regs*)+0xab9>
1000181c:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
10001822:	50                   	push   eax
10001823:	50                   	push   eax
10001824:	81 ea e0 00 00 00    	sub    edx,0xe0
1000182a:	52                   	push   edx
1000182b:	56                   	push   esi
1000182c:	e8 fc ff ff ff       	call   1000182d <x87Handler(regs*)+0xa52>	1000182d: R_386_PC32	fpuGetReg(int)
10001831:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
10001837:	83 ec 0c             	sub    esp,0xc
1000183a:	6a 00                	push   0x0
1000183c:	52                   	push   edx
1000183d:	e8 fc ff ff ff       	call   1000183e <x87Handler(regs*)+0xa63>	1000183e: R_386_PC32	fpuGetReg(int)
10001842:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001848:	52                   	push   edx
10001849:	b9 03 00 00 00       	mov    ecx,0x3
1000184e:	89 e7                	mov    edi,esp
10001850:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001852:	83 ec 0c             	sub    esp,0xc
10001855:	b9 03 00 00 00       	mov    ecx,0x3
1000185a:	89 e7                	mov    edi,esp
1000185c:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
10001862:	89 d6                	mov    esi,edx
10001864:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001866:	50                   	push   eax
10001867:	e8 fc ff ff ff       	call   10001868 <x87Handler(regs*)+0xa8d>	10001868: R_386_PC32	fpuSub(_Float80, _Float80)
1000186c:	83 c4 20             	add    esp,0x20
1000186f:	b9 03 00 00 00       	mov    ecx,0x3
10001874:	89 e7                	mov    edi,esp
10001876:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
1000187c:	89 c6                	mov    esi,eax
1000187e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001880:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001886:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000188a:	2d e0 00 00 00       	sub    eax,0xe0
1000188f:	e9 67 ff ff ff       	jmp    100017fb <x87Handler(regs*)+0xa20>
10001894:	8d 42 18             	lea    eax,[edx+0x18]
10001897:	3c 07                	cmp    al,0x7
10001899:	0f 87 81 00 00 00    	ja     10001920 <x87Handler(regs*)+0xb45>
1000189f:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
100018a5:	51                   	push   ecx
100018a6:	51                   	push   ecx
100018a7:	6a 00                	push   0x0
100018a9:	56                   	push   esi
100018aa:	e8 fc ff ff ff       	call   100018ab <x87Handler(regs*)+0xad0>	100018ab: R_386_PC32	fpuGetReg(int)
100018af:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100018b5:	83 ec 0c             	sub    esp,0xc
100018b8:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100018be:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018c2:	2d e8 00 00 00       	sub    eax,0xe8
100018c7:	50                   	push   eax
100018c8:	52                   	push   edx
100018c9:	e8 fc ff ff ff       	call   100018ca <x87Handler(regs*)+0xaef>	100018ca: R_386_PC32	fpuGetReg(int)
100018ce:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100018d4:	57                   	push   edi
100018d5:	b9 03 00 00 00       	mov    ecx,0x3
100018da:	89 e7                	mov    edi,esp
100018dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018de:	83 ec 0c             	sub    esp,0xc
100018e1:	b9 03 00 00 00       	mov    ecx,0x3
100018e6:	89 e7                	mov    edi,esp
100018e8:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100018ee:	89 d6                	mov    esi,edx
100018f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018f2:	50                   	push   eax
100018f3:	e8 fc ff ff ff       	call   100018f4 <x87Handler(regs*)+0xb19>	100018f4: R_386_PC32	fpuSub(_Float80, _Float80)
100018f8:	83 c4 20             	add    esp,0x20
100018fb:	b9 03 00 00 00       	mov    ecx,0x3
10001900:	89 e7                	mov    edi,esp
10001902:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
10001908:	89 c6                	mov    esi,eax
1000190a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000190c:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001912:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001916:	2d e8 00 00 00       	sub    eax,0xe8
1000191b:	e9 db fe ff ff       	jmp    100017fb <x87Handler(regs*)+0xa20>
10001920:	8d 42 38             	lea    eax,[edx+0x38]
10001923:	3c 07                	cmp    al,0x7
10001925:	77 78                	ja     1000199f <x87Handler(regs*)+0xbc4>
10001927:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
1000192d:	50                   	push   eax
1000192e:	50                   	push   eax
1000192f:	81 ea c8 00 00 00    	sub    edx,0xc8
10001935:	52                   	push   edx
10001936:	56                   	push   esi
10001937:	e8 fc ff ff ff       	call   10001938 <x87Handler(regs*)+0xb5d>	10001938: R_386_PC32	fpuGetReg(int)
1000193c:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001942:	83 ec 0c             	sub    esp,0xc
10001945:	6a 00                	push   0x0
10001947:	52                   	push   edx
10001948:	e8 fc ff ff ff       	call   10001949 <x87Handler(regs*)+0xb6e>	10001949: R_386_PC32	fpuGetReg(int)
1000194d:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
10001953:	52                   	push   edx
10001954:	b9 03 00 00 00       	mov    ecx,0x3
10001959:	89 e7                	mov    edi,esp
1000195b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000195d:	83 ec 0c             	sub    esp,0xc
10001960:	b9 03 00 00 00       	mov    ecx,0x3
10001965:	89 e7                	mov    edi,esp
10001967:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
1000196d:	89 d6                	mov    esi,edx
1000196f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001971:	50                   	push   eax
10001972:	e8 fc ff ff ff       	call   10001973 <x87Handler(regs*)+0xb98>	10001973: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001977:	83 c4 20             	add    esp,0x20
1000197a:	b9 03 00 00 00       	mov    ecx,0x3
1000197f:	89 e7                	mov    edi,esp
10001981:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
10001987:	89 c6                	mov    esi,eax
10001989:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000198b:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001991:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001995:	2d c8 00 00 00       	sub    eax,0xc8
1000199a:	e9 01 01 00 00       	jmp    10001aa0 <x87Handler(regs*)+0xcc5>
1000199f:	80 fa f7             	cmp    dl,0xf7
100019a2:	76 7e                	jbe    10001a22 <x87Handler(regs*)+0xc47>
100019a4:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
100019aa:	51                   	push   ecx
100019ab:	51                   	push   ecx
100019ac:	6a 00                	push   0x0
100019ae:	56                   	push   esi
100019af:	e8 fc ff ff ff       	call   100019b0 <x87Handler(regs*)+0xbd5>	100019b0: R_386_PC32	fpuGetReg(int)
100019b4:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100019ba:	83 ec 0c             	sub    esp,0xc
100019bd:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100019c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100019c7:	2d f8 00 00 00       	sub    eax,0xf8
100019cc:	50                   	push   eax
100019cd:	52                   	push   edx
100019ce:	e8 fc ff ff ff       	call   100019cf <x87Handler(regs*)+0xbf4>	100019cf: R_386_PC32	fpuGetReg(int)
100019d3:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
100019d9:	57                   	push   edi
100019da:	b9 03 00 00 00       	mov    ecx,0x3
100019df:	89 e7                	mov    edi,esp
100019e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019e3:	83 ec 0c             	sub    esp,0xc
100019e6:	b9 03 00 00 00       	mov    ecx,0x3
100019eb:	89 e7                	mov    edi,esp
100019ed:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100019f3:	89 d6                	mov    esi,edx
100019f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019f7:	50                   	push   eax
100019f8:	e8 fc ff ff ff       	call   100019f9 <x87Handler(regs*)+0xc1e>	100019f9: R_386_PC32	fpuDivide(_Float80, _Float80)
100019fd:	83 c4 20             	add    esp,0x20
10001a00:	b9 03 00 00 00       	mov    ecx,0x3
10001a05:	89 e7                	mov    edi,esp
10001a07:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
10001a0d:	89 c6                	mov    esi,eax
10001a0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a11:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001a17:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001a1b:	2d f8 00 00 00       	sub    eax,0xf8
10001a20:	eb 7e                	jmp    10001aa0 <x87Handler(regs*)+0xcc5>
10001a22:	8d 42 10             	lea    eax,[edx+0x10]
10001a25:	3c 07                	cmp    al,0x7
10001a27:	0f 87 09 02 00 00    	ja     10001c36 <x87Handler(regs*)+0xe5b>
10001a2d:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
10001a33:	50                   	push   eax
10001a34:	50                   	push   eax
10001a35:	81 ea f0 00 00 00    	sub    edx,0xf0
10001a3b:	52                   	push   edx
10001a3c:	56                   	push   esi
10001a3d:	e8 fc ff ff ff       	call   10001a3e <x87Handler(regs*)+0xc63>	10001a3e: R_386_PC32	fpuGetReg(int)
10001a42:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001a48:	83 ec 0c             	sub    esp,0xc
10001a4b:	6a 00                	push   0x0
10001a4d:	52                   	push   edx
10001a4e:	e8 fc ff ff ff       	call   10001a4f <x87Handler(regs*)+0xc74>	10001a4f: R_386_PC32	fpuGetReg(int)
10001a53:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001a59:	52                   	push   edx
10001a5a:	b9 03 00 00 00       	mov    ecx,0x3
10001a5f:	89 e7                	mov    edi,esp
10001a61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a63:	83 ec 0c             	sub    esp,0xc
10001a66:	b9 03 00 00 00       	mov    ecx,0x3
10001a6b:	89 e7                	mov    edi,esp
10001a6d:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001a73:	89 d6                	mov    esi,edx
10001a75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a77:	50                   	push   eax
10001a78:	e8 fc ff ff ff       	call   10001a79 <x87Handler(regs*)+0xc9e>	10001a79: R_386_PC32	fpuDivide(_Float80, _Float80)
10001a7d:	83 c4 20             	add    esp,0x20
10001a80:	b9 03 00 00 00       	mov    ecx,0x3
10001a85:	89 e7                	mov    edi,esp
10001a87:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001a8d:	89 c6                	mov    esi,eax
10001a8f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a91:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001a97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001a9b:	2d f0 00 00 00       	sub    eax,0xf0
10001aa0:	50                   	push   eax
10001aa1:	e9 0e fb ff ff       	jmp    100015b4 <x87Handler(regs*)+0x7d9>
10001aa6:	80 fa dd             	cmp    dl,0xdd
10001aa9:	0f 85 30 01 00 00    	jne    10001bdf <x87Handler(regs*)+0xe04>
10001aaf:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001ab5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001ab9:	8d 50 30             	lea    edx,[eax+0x30]
10001abc:	80 fa 07             	cmp    dl,0x7
10001abf:	77 2e                	ja     10001aef <x87Handler(regs*)+0xd14>
10001ac1:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
10001ac7:	50                   	push   eax
10001ac8:	50                   	push   eax
10001ac9:	6a 00                	push   0x0
10001acb:	56                   	push   esi
10001acc:	e8 fc ff ff ff       	call   10001acd <x87Handler(regs*)+0xcf2>	10001acd: R_386_PC32	fpuGetReg(int)
10001ad1:	b9 03 00 00 00       	mov    ecx,0x3
10001ad6:	89 e7                	mov    edi,esp
10001ad8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ada:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001ae0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001ae4:	2d d0 00 00 00       	sub    eax,0xd0
10001ae9:	50                   	push   eax
10001aea:	e9 3d f4 ff ff       	jmp    10000f2c <x87Handler(regs*)+0x151>
10001aef:	8d 50 28             	lea    edx,[eax+0x28]
10001af2:	80 fa 07             	cmp    dl,0x7
10001af5:	77 2d                	ja     10001b24 <x87Handler(regs*)+0xd49>
10001af7:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
10001afd:	50                   	push   eax
10001afe:	50                   	push   eax
10001aff:	6a 00                	push   0x0
10001b01:	56                   	push   esi
10001b02:	e8 fc ff ff ff       	call   10001b03 <x87Handler(regs*)+0xd28>	10001b03: R_386_PC32	fpuGetReg(int)
10001b07:	b9 03 00 00 00       	mov    ecx,0x3
10001b0c:	89 e7                	mov    edi,esp
10001b0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b10:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001b16:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001b1a:	2d d8 00 00 00       	sub    eax,0xd8
10001b1f:	e9 d7 fc ff ff       	jmp    100017fb <x87Handler(regs*)+0xa20>
10001b24:	8d 50 20             	lea    edx,[eax+0x20]
10001b27:	80 fa 07             	cmp    dl,0x7
10001b2a:	77 52                	ja     10001b7e <x87Handler(regs*)+0xda3>
10001b2c:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
10001b32:	57                   	push   edi
10001b33:	57                   	push   edi
10001b34:	2d e0 00 00 00       	sub    eax,0xe0
10001b39:	50                   	push   eax
10001b3a:	56                   	push   esi
10001b3b:	e8 fc ff ff ff       	call   10001b3c <x87Handler(regs*)+0xd61>	10001b3c: R_386_PC32	fpuGetReg(int)
10001b40:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001b46:	83 ec 0c             	sub    esp,0xc
10001b49:	6a 00                	push   0x0
10001b4b:	50                   	push   eax
10001b4c:	e8 fc ff ff ff       	call   10001b4d <x87Handler(regs*)+0xd72>	10001b4d: R_386_PC32	fpuGetReg(int)
10001b51:	50                   	push   eax
10001b52:	50                   	push   eax
10001b53:	b9 03 00 00 00       	mov    ecx,0x3
10001b58:	89 e7                	mov    edi,esp
10001b5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b5c:	83 ec 0c             	sub    esp,0xc
10001b5f:	b9 03 00 00 00       	mov    ecx,0x3
10001b64:	89 e7                	mov    edi,esp
10001b66:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001b6c:	89 c6                	mov    esi,eax
10001b6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b70:	e8 fc ff ff ff       	call   10001b71 <x87Handler(regs*)+0xd96>	10001b71: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001b75:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001b79:	e9 30 06 00 00       	jmp    100021ae <x87Handler(regs*)+0x13d3>
10001b7e:	8d 50 18             	lea    edx,[eax+0x18]
10001b81:	80 fa 07             	cmp    dl,0x7
10001b84:	0f 87 6f f6 ff ff    	ja     100011f9 <x87Handler(regs*)+0x41e>
10001b8a:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
10001b90:	52                   	push   edx
10001b91:	52                   	push   edx
10001b92:	2d e8 00 00 00       	sub    eax,0xe8
10001b97:	50                   	push   eax
10001b98:	56                   	push   esi
10001b99:	e8 fc ff ff ff       	call   10001b9a <x87Handler(regs*)+0xdbf>	10001b9a: R_386_PC32	fpuGetReg(int)
10001b9e:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
10001ba4:	83 ec 0c             	sub    esp,0xc
10001ba7:	6a 00                	push   0x0
10001ba9:	50                   	push   eax
10001baa:	e8 fc ff ff ff       	call   10001bab <x87Handler(regs*)+0xdd0>	10001bab: R_386_PC32	fpuGetReg(int)
10001baf:	51                   	push   ecx
10001bb0:	51                   	push   ecx
10001bb1:	b9 03 00 00 00       	mov    ecx,0x3
10001bb6:	89 e7                	mov    edi,esp
10001bb8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bba:	83 ec 0c             	sub    esp,0xc
10001bbd:	b9 03 00 00 00       	mov    ecx,0x3
10001bc2:	89 e7                	mov    edi,esp
10001bc4:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
10001bca:	89 c6                	mov    esi,eax
10001bcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bce:	e8 fc ff ff ff       	call   10001bcf <x87Handler(regs*)+0xdf4>	10001bcf: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001bd3:	8d 45 dc             	lea    eax,[ebp-0x24]
10001bd6:	83 c4 24             	add    esp,0x24
10001bd9:	50                   	push   eax
10001bda:	e9 28 fc ff ff       	jmp    10001807 <x87Handler(regs*)+0xa2c>
10001bdf:	80 fa da             	cmp    dl,0xda
10001be2:	0f 85 b9 00 00 00    	jne    10001ca1 <x87Handler(regs*)+0xec6>
10001be8:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001bee:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001bf2:	0f 85 63 03 00 00    	jne    10001f5b <x87Handler(regs*)+0x1180>
10001bf8:	8d b5 18 fd ff ff    	lea    esi,[ebp-0x2e8]
10001bfe:	50                   	push   eax
10001bff:	50                   	push   eax
10001c00:	6a 01                	push   0x1
10001c02:	56                   	push   esi
10001c03:	e8 fc ff ff ff       	call   10001c04 <x87Handler(regs*)+0xe29>	10001c04: R_386_PC32	fpuGetReg(int)
10001c08:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001c0e:	83 ec 0c             	sub    esp,0xc
10001c11:	6a 00                	push   0x0
10001c13:	50                   	push   eax
10001c14:	e8 fc ff ff ff       	call   10001c15 <x87Handler(regs*)+0xe3a>	10001c15: R_386_PC32	fpuGetReg(int)
10001c19:	50                   	push   eax
10001c1a:	50                   	push   eax
10001c1b:	b9 03 00 00 00       	mov    ecx,0x3
10001c20:	89 e7                	mov    edi,esp
10001c22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c24:	83 ec 0c             	sub    esp,0xc
10001c27:	b9 03 00 00 00       	mov    ecx,0x3
10001c2c:	89 e7                	mov    edi,esp
10001c2e:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001c34:	eb 47                	jmp    10001c7d <x87Handler(regs*)+0xea2>
10001c36:	31 c0                	xor    eax,eax
10001c38:	80 fa d9             	cmp    dl,0xd9
10001c3b:	0f 85 5b 08 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
10001c41:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001c47:	51                   	push   ecx
10001c48:	51                   	push   ecx
10001c49:	6a 01                	push   0x1
10001c4b:	56                   	push   esi
10001c4c:	e8 fc ff ff ff       	call   10001c4d <x87Handler(regs*)+0xe72>	10001c4d: R_386_PC32	fpuGetReg(int)
10001c51:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001c57:	83 ec 0c             	sub    esp,0xc
10001c5a:	6a 00                	push   0x0
10001c5c:	50                   	push   eax
10001c5d:	e8 fc ff ff ff       	call   10001c5e <x87Handler(regs*)+0xe83>	10001c5e: R_386_PC32	fpuGetReg(int)
10001c62:	57                   	push   edi
10001c63:	57                   	push   edi
10001c64:	b9 03 00 00 00       	mov    ecx,0x3
10001c69:	89 e7                	mov    edi,esp
10001c6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c6d:	83 ec 0c             	sub    esp,0xc
10001c70:	b9 03 00 00 00       	mov    ecx,0x3
10001c75:	89 e7                	mov    edi,esp
10001c77:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001c7d:	89 c6                	mov    esi,eax
10001c7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c81:	e8 fc ff ff ff       	call   10001c82 <x87Handler(regs*)+0xea7>	10001c82: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001c86:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001c8a:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001c8d:	83 c4 24             	add    esp,0x24
10001c90:	53                   	push   ebx
10001c91:	e8 fc ff ff ff       	call   10001c92 <x87Handler(regs*)+0xeb7>	10001c92: R_386_PC32	fpuPop()
10001c96:	53                   	push   ebx
10001c97:	e8 fc ff ff ff       	call   10001c98 <x87Handler(regs*)+0xebd>	10001c98: R_386_PC32	fpuPop()
10001c9c:	e9 7c 05 00 00       	jmp    1000221d <x87Handler(regs*)+0x1442>
10001ca1:	80 fa df             	cmp    dl,0xdf
10001ca4:	0f 85 99 03 00 00    	jne    10002043 <x87Handler(regs*)+0x1268>
10001caa:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001cb0:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001cb4:	0f 85 89 07 00 00    	jne    10002443 <x87Handler(regs*)+0x1668>
10001cba:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001cbd: R_386_32	fpuState
10001cc1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001cc5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001cc9:	e9 6a f2 ff ff       	jmp    10000f38 <x87Handler(regs*)+0x15d>
10001cce:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001cd4:	84 d2                	test   dl,dl
10001cd6:	75 66                	jne    10001d3e <x87Handler(regs*)+0xf63>
10001cd8:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001cde:	50                   	push   eax
10001cdf:	50                   	push   eax
10001ce0:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001ce6:	ff 30                	push   DWORD PTR [eax]
10001ce8:	56                   	push   esi
10001ce9:	e8 fc ff ff ff       	call   10001cea <x87Handler(regs*)+0xf0f>	10001cea: R_386_PC32	fpu32ToInternal(unsigned int)
10001cee:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001cf4:	83 ec 0c             	sub    esp,0xc
10001cf7:	6a 00                	push   0x0
10001cf9:	52                   	push   edx
10001cfa:	e8 fc ff ff ff       	call   10001cfb <x87Handler(regs*)+0xf20>	10001cfb: R_386_PC32	fpuGetReg(int)
10001cff:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001d05:	52                   	push   edx
10001d06:	b9 03 00 00 00       	mov    ecx,0x3
10001d0b:	89 e7                	mov    edi,esp
10001d0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d0f:	83 ec 0c             	sub    esp,0xc
10001d12:	b9 03 00 00 00       	mov    ecx,0x3
10001d17:	89 e7                	mov    edi,esp
10001d19:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001d1f:	89 d6                	mov    esi,edx
10001d21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d23:	50                   	push   eax
10001d24:	e8 fc ff ff ff       	call   10001d25 <x87Handler(regs*)+0xf4a>	10001d25: R_386_PC32	fpuAdd(_Float80, _Float80)
10001d29:	83 c4 20             	add    esp,0x20
10001d2c:	b9 03 00 00 00       	mov    ecx,0x3
10001d31:	89 e7                	mov    edi,esp
10001d33:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001d39:	e9 29 06 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10001d3e:	80 fa 01             	cmp    dl,0x1
10001d41:	75 66                	jne    10001da9 <x87Handler(regs*)+0xfce>
10001d43:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001d49:	51                   	push   ecx
10001d4a:	51                   	push   ecx
10001d4b:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001d51:	ff 30                	push   DWORD PTR [eax]
10001d53:	56                   	push   esi
10001d54:	e8 fc ff ff ff       	call   10001d55 <x87Handler(regs*)+0xf7a>	10001d55: R_386_PC32	fpu32ToInternal(unsigned int)
10001d59:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001d5f:	83 ec 0c             	sub    esp,0xc
10001d62:	6a 00                	push   0x0
10001d64:	52                   	push   edx
10001d65:	e8 fc ff ff ff       	call   10001d66 <x87Handler(regs*)+0xf8b>	10001d66: R_386_PC32	fpuGetReg(int)
10001d6a:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001d70:	57                   	push   edi
10001d71:	b9 03 00 00 00       	mov    ecx,0x3
10001d76:	89 e7                	mov    edi,esp
10001d78:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d7a:	83 ec 0c             	sub    esp,0xc
10001d7d:	b9 03 00 00 00       	mov    ecx,0x3
10001d82:	89 e7                	mov    edi,esp
10001d84:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001d8a:	89 d6                	mov    esi,edx
10001d8c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d8e:	50                   	push   eax
10001d8f:	e8 fc ff ff ff       	call   10001d90 <x87Handler(regs*)+0xfb5>	10001d90: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001d94:	83 c4 20             	add    esp,0x20
10001d97:	b9 03 00 00 00       	mov    ecx,0x3
10001d9c:	89 e7                	mov    edi,esp
10001d9e:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001da4:	e9 be 05 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10001da9:	80 fa 04             	cmp    dl,0x4
10001dac:	75 66                	jne    10001e14 <x87Handler(regs*)+0x1039>
10001dae:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001db4:	50                   	push   eax
10001db5:	50                   	push   eax
10001db6:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001dbc:	ff 30                	push   DWORD PTR [eax]
10001dbe:	56                   	push   esi
10001dbf:	e8 fc ff ff ff       	call   10001dc0 <x87Handler(regs*)+0xfe5>	10001dc0: R_386_PC32	fpu32ToInternal(unsigned int)
10001dc4:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001dca:	83 ec 0c             	sub    esp,0xc
10001dcd:	6a 00                	push   0x0
10001dcf:	52                   	push   edx
10001dd0:	e8 fc ff ff ff       	call   10001dd1 <x87Handler(regs*)+0xff6>	10001dd1: R_386_PC32	fpuGetReg(int)
10001dd5:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001ddb:	52                   	push   edx
10001ddc:	b9 03 00 00 00       	mov    ecx,0x3
10001de1:	89 e7                	mov    edi,esp
10001de3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001de5:	83 ec 0c             	sub    esp,0xc
10001de8:	b9 03 00 00 00       	mov    ecx,0x3
10001ded:	89 e7                	mov    edi,esp
10001def:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001df5:	89 d6                	mov    esi,edx
10001df7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001df9:	50                   	push   eax
10001dfa:	e8 fc ff ff ff       	call   10001dfb <x87Handler(regs*)+0x1020>	10001dfb: R_386_PC32	fpuSub(_Float80, _Float80)
10001dff:	83 c4 20             	add    esp,0x20
10001e02:	b9 03 00 00 00       	mov    ecx,0x3
10001e07:	89 e7                	mov    edi,esp
10001e09:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001e0f:	e9 53 05 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10001e14:	80 fa 05             	cmp    dl,0x5
10001e17:	75 66                	jne    10001e7f <x87Handler(regs*)+0x10a4>
10001e19:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001e1f:	51                   	push   ecx
10001e20:	51                   	push   ecx
10001e21:	6a 00                	push   0x0
10001e23:	56                   	push   esi
10001e24:	e8 fc ff ff ff       	call   10001e25 <x87Handler(regs*)+0x104a>	10001e25: R_386_PC32	fpuGetReg(int)
10001e29:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001e2f:	83 ec 0c             	sub    esp,0xc
10001e32:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10001e38:	ff 31                	push   DWORD PTR [ecx]
10001e3a:	50                   	push   eax
10001e3b:	e8 fc ff ff ff       	call   10001e3c <x87Handler(regs*)+0x1061>	10001e3c: R_386_PC32	fpu32ToInternal(unsigned int)
10001e40:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001e46:	57                   	push   edi
10001e47:	b9 03 00 00 00       	mov    ecx,0x3
10001e4c:	89 e7                	mov    edi,esp
10001e4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e50:	83 ec 0c             	sub    esp,0xc
10001e53:	b9 03 00 00 00       	mov    ecx,0x3
10001e58:	89 e7                	mov    edi,esp
10001e5a:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001e60:	89 c6                	mov    esi,eax
10001e62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e64:	52                   	push   edx
10001e65:	e8 fc ff ff ff       	call   10001e66 <x87Handler(regs*)+0x108b>	10001e66: R_386_PC32	fpuSub(_Float80, _Float80)
10001e6a:	83 c4 20             	add    esp,0x20
10001e6d:	b9 03 00 00 00       	mov    ecx,0x3
10001e72:	89 e7                	mov    edi,esp
10001e74:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001e7a:	e9 4b 05 00 00       	jmp    100023ca <x87Handler(regs*)+0x15ef>
10001e7f:	80 fa 06             	cmp    dl,0x6
10001e82:	75 66                	jne    10001eea <x87Handler(regs*)+0x110f>
10001e84:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10001e8a:	50                   	push   eax
10001e8b:	50                   	push   eax
10001e8c:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001e92:	ff 30                	push   DWORD PTR [eax]
10001e94:	56                   	push   esi
10001e95:	e8 fc ff ff ff       	call   10001e96 <x87Handler(regs*)+0x10bb>	10001e96: R_386_PC32	fpu32ToInternal(unsigned int)
10001e9a:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001ea0:	83 ec 0c             	sub    esp,0xc
10001ea3:	6a 00                	push   0x0
10001ea5:	52                   	push   edx
10001ea6:	e8 fc ff ff ff       	call   10001ea7 <x87Handler(regs*)+0x10cc>	10001ea7: R_386_PC32	fpuGetReg(int)
10001eab:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001eb1:	52                   	push   edx
10001eb2:	b9 03 00 00 00       	mov    ecx,0x3
10001eb7:	89 e7                	mov    edi,esp
10001eb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ebb:	83 ec 0c             	sub    esp,0xc
10001ebe:	b9 03 00 00 00       	mov    ecx,0x3
10001ec3:	89 e7                	mov    edi,esp
10001ec5:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001ecb:	89 d6                	mov    esi,edx
10001ecd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ecf:	50                   	push   eax
10001ed0:	e8 fc ff ff ff       	call   10001ed1 <x87Handler(regs*)+0x10f6>	10001ed1: R_386_PC32	fpuDivide(_Float80, _Float80)
10001ed5:	83 c4 20             	add    esp,0x20
10001ed8:	b9 03 00 00 00       	mov    ecx,0x3
10001edd:	89 e7                	mov    edi,esp
10001edf:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001ee5:	e9 7d 04 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10001eea:	31 c0                	xor    eax,eax
10001eec:	80 fa 07             	cmp    dl,0x7
10001eef:	0f 85 a7 05 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
10001ef5:	8d b5 fc fd ff ff    	lea    esi,[ebp-0x204]
10001efb:	50                   	push   eax
10001efc:	50                   	push   eax
10001efd:	6a 00                	push   0x0
10001eff:	56                   	push   esi
10001f00:	e8 fc ff ff ff       	call   10001f01 <x87Handler(regs*)+0x1126>	10001f01: R_386_PC32	fpuGetReg(int)
10001f05:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001f0b:	83 ec 0c             	sub    esp,0xc
10001f0e:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10001f14:	ff 37                	push   DWORD PTR [edi]
10001f16:	50                   	push   eax
10001f17:	e8 fc ff ff ff       	call   10001f18 <x87Handler(regs*)+0x113d>	10001f18: R_386_PC32	fpu32ToInternal(unsigned int)
10001f1c:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001f22:	50                   	push   eax
10001f23:	b9 03 00 00 00       	mov    ecx,0x3
10001f28:	89 e7                	mov    edi,esp
10001f2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f2c:	83 ec 0c             	sub    esp,0xc
10001f2f:	b9 03 00 00 00       	mov    ecx,0x3
10001f34:	89 e7                	mov    edi,esp
10001f36:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001f3c:	89 c6                	mov    esi,eax
10001f3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f40:	52                   	push   edx
10001f41:	e8 fc ff ff ff       	call   10001f42 <x87Handler(regs*)+0x1167>	10001f42: R_386_PC32	fpuDivide(_Float80, _Float80)
10001f46:	83 c4 20             	add    esp,0x20
10001f49:	b9 03 00 00 00       	mov    ecx,0x3
10001f4e:	89 e7                	mov    edi,esp
10001f50:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001f56:	e9 6f 04 00 00       	jmp    100023ca <x87Handler(regs*)+0x15ef>
10001f5b:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001f61:	80 fa 01             	cmp    dl,0x1
10001f64:	75 69                	jne    10001fcf <x87Handler(regs*)+0x11f4>
10001f66:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001f6c:	51                   	push   ecx
10001f6d:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001f73:	8b 00                	mov    eax,DWORD PTR [eax]
10001f75:	31 d2                	xor    edx,edx
10001f77:	52                   	push   edx
10001f78:	50                   	push   eax
10001f79:	56                   	push   esi
10001f7a:	e8 fc ff ff ff       	call   10001f7b <x87Handler(regs*)+0x11a0>	10001f7b: R_386_PC32	fpuLongToFloat(long long)
10001f7f:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001f85:	83 ec 0c             	sub    esp,0xc
10001f88:	6a 00                	push   0x0
10001f8a:	52                   	push   edx
10001f8b:	e8 fc ff ff ff       	call   10001f8c <x87Handler(regs*)+0x11b1>	10001f8c: R_386_PC32	fpuGetReg(int)
10001f90:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001f96:	57                   	push   edi
10001f97:	b9 03 00 00 00       	mov    ecx,0x3
10001f9c:	89 e7                	mov    edi,esp
10001f9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fa0:	83 ec 0c             	sub    esp,0xc
10001fa3:	b9 03 00 00 00       	mov    ecx,0x3
10001fa8:	89 e7                	mov    edi,esp
10001faa:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001fb0:	89 d6                	mov    esi,edx
10001fb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fb4:	50                   	push   eax
10001fb5:	e8 fc ff ff ff       	call   10001fb6 <x87Handler(regs*)+0x11db>	10001fb6: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001fba:	83 c4 20             	add    esp,0x20
10001fbd:	b9 03 00 00 00       	mov    ecx,0x3
10001fc2:	89 e7                	mov    edi,esp
10001fc4:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001fca:	e9 98 03 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10001fcf:	31 c0                	xor    eax,eax
10001fd1:	80 fa 04             	cmp    dl,0x4
10001fd4:	0f 85 c2 04 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
10001fda:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001fe0:	50                   	push   eax
10001fe1:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001fe7:	8b 00                	mov    eax,DWORD PTR [eax]
10001fe9:	31 d2                	xor    edx,edx
10001feb:	52                   	push   edx
10001fec:	50                   	push   eax
10001fed:	56                   	push   esi
10001fee:	e8 fc ff ff ff       	call   10001fef <x87Handler(regs*)+0x1214>	10001fef: R_386_PC32	fpuLongToFloat(long long)
10001ff3:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10001ff9:	83 ec 0c             	sub    esp,0xc
10001ffc:	6a 00                	push   0x0
10001ffe:	52                   	push   edx
10001fff:	e8 fc ff ff ff       	call   10002000 <x87Handler(regs*)+0x1225>	10002000: R_386_PC32	fpuGetReg(int)
10002004:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
1000200a:	52                   	push   edx
1000200b:	b9 03 00 00 00       	mov    ecx,0x3
10002010:	89 e7                	mov    edi,esp
10002012:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002014:	83 ec 0c             	sub    esp,0xc
10002017:	b9 03 00 00 00       	mov    ecx,0x3
1000201c:	89 e7                	mov    edi,esp
1000201e:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10002024:	89 d6                	mov    esi,edx
10002026:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002028:	50                   	push   eax
10002029:	e8 fc ff ff ff       	call   1000202a <x87Handler(regs*)+0x124f>	1000202a: R_386_PC32	fpuSub(_Float80, _Float80)
1000202e:	83 c4 20             	add    esp,0x20
10002031:	b9 03 00 00 00       	mov    ecx,0x3
10002036:	89 e7                	mov    edi,esp
10002038:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
1000203e:	e9 24 03 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10002043:	31 c0                	xor    eax,eax
10002045:	80 fa db             	cmp    dl,0xdb
10002048:	0f 85 4e 04 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
1000204e:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10002054:	84 d2                	test   dl,dl
10002056:	0f 85 d3 f1 ff ff    	jne    1000122f <x87Handler(regs*)+0x454>
1000205c:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10002062:	50                   	push   eax
10002063:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002069:	8b 00                	mov    eax,DWORD PTR [eax]
1000206b:	31 d2                	xor    edx,edx
1000206d:	52                   	push   edx
1000206e:	50                   	push   eax
1000206f:	e9 e9 03 00 00       	jmp    1000245d <x87Handler(regs*)+0x1682>
10002074:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
1000207a:	84 d2                	test   dl,dl
1000207c:	75 68                	jne    100020e6 <x87Handler(regs*)+0x130b>
1000207e:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10002084:	51                   	push   ecx
10002085:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
1000208b:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000208e:	ff 30                	push   DWORD PTR [eax]
10002090:	56                   	push   esi
10002091:	e8 fc ff ff ff       	call   10002092 <x87Handler(regs*)+0x12b7>	10002092: R_386_PC32	fpu64ToInternal(unsigned long long)
10002096:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
1000209c:	83 ec 0c             	sub    esp,0xc
1000209f:	6a 00                	push   0x0
100020a1:	52                   	push   edx
100020a2:	e8 fc ff ff ff       	call   100020a3 <x87Handler(regs*)+0x12c8>	100020a3: R_386_PC32	fpuGetReg(int)
100020a7:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
100020ad:	57                   	push   edi
100020ae:	b9 03 00 00 00       	mov    ecx,0x3
100020b3:	89 e7                	mov    edi,esp
100020b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020b7:	83 ec 0c             	sub    esp,0xc
100020ba:	b9 03 00 00 00       	mov    ecx,0x3
100020bf:	89 e7                	mov    edi,esp
100020c1:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
100020c7:	89 d6                	mov    esi,edx
100020c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020cb:	50                   	push   eax
100020cc:	e8 fc ff ff ff       	call   100020cd <x87Handler(regs*)+0x12f2>	100020cd: R_386_PC32	fpuAdd(_Float80, _Float80)
100020d1:	83 c4 20             	add    esp,0x20
100020d4:	b9 03 00 00 00       	mov    ecx,0x3
100020d9:	89 e7                	mov    edi,esp
100020db:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
100020e1:	e9 81 02 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
100020e6:	80 fa 01             	cmp    dl,0x1
100020e9:	75 68                	jne    10002153 <x87Handler(regs*)+0x1378>
100020eb:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
100020f1:	50                   	push   eax
100020f2:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
100020f8:	ff 70 04             	push   DWORD PTR [eax+0x4]
100020fb:	ff 30                	push   DWORD PTR [eax]
100020fd:	56                   	push   esi
100020fe:	e8 fc ff ff ff       	call   100020ff <x87Handler(regs*)+0x1324>	100020ff: R_386_PC32	fpu64ToInternal(unsigned long long)
10002103:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002109:	83 ec 0c             	sub    esp,0xc
1000210c:	6a 00                	push   0x0
1000210e:	52                   	push   edx
1000210f:	e8 fc ff ff ff       	call   10002110 <x87Handler(regs*)+0x1335>	10002110: R_386_PC32	fpuGetReg(int)
10002114:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
1000211a:	52                   	push   edx
1000211b:	b9 03 00 00 00       	mov    ecx,0x3
10002120:	89 e7                	mov    edi,esp
10002122:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002124:	83 ec 0c             	sub    esp,0xc
10002127:	b9 03 00 00 00       	mov    ecx,0x3
1000212c:	89 e7                	mov    edi,esp
1000212e:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002134:	89 d6                	mov    esi,edx
10002136:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002138:	50                   	push   eax
10002139:	e8 fc ff ff ff       	call   1000213a <x87Handler(regs*)+0x135f>	1000213a: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000213e:	83 c4 20             	add    esp,0x20
10002141:	b9 03 00 00 00       	mov    ecx,0x3
10002146:	89 e7                	mov    edi,esp
10002148:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
1000214e:	e9 14 02 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10002153:	80 fa 02             	cmp    dl,0x2
10002156:	75 5e                	jne    100021b6 <x87Handler(regs*)+0x13db>
10002158:	8d b5 ec fe ff ff    	lea    esi,[ebp-0x114]
1000215e:	50                   	push   eax
1000215f:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002165:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002168:	ff 30                	push   DWORD PTR [eax]
1000216a:	56                   	push   esi
1000216b:	e8 fc ff ff ff       	call   1000216c <x87Handler(regs*)+0x1391>	1000216c: R_386_PC32	fpu64ToInternal(unsigned long long)
10002170:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10002176:	83 ec 0c             	sub    esp,0xc
10002179:	6a 00                	push   0x0
1000217b:	50                   	push   eax
1000217c:	e8 fc ff ff ff       	call   1000217d <x87Handler(regs*)+0x13a2>	1000217d: R_386_PC32	fpuGetReg(int)
10002181:	50                   	push   eax
10002182:	50                   	push   eax
10002183:	b9 03 00 00 00       	mov    ecx,0x3
10002188:	89 e7                	mov    edi,esp
1000218a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000218c:	83 ec 0c             	sub    esp,0xc
1000218f:	b9 03 00 00 00       	mov    ecx,0x3
10002194:	89 e7                	mov    edi,esp
10002196:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000219c:	89 c6                	mov    esi,eax
1000219e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021a0:	e8 fc ff ff ff       	call   100021a1 <x87Handler(regs*)+0x13c6>	100021a1: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100021a5:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100021ab:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100021ae:	83 c4 30             	add    esp,0x30
100021b1:	e9 82 ed ff ff       	jmp    10000f38 <x87Handler(regs*)+0x15d>
100021b6:	80 fa 03             	cmp    dl,0x3
100021b9:	75 6a                	jne    10002225 <x87Handler(regs*)+0x144a>
100021bb:	8d b5 04 ff ff ff    	lea    esi,[ebp-0xfc]
100021c1:	51                   	push   ecx
100021c2:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
100021c8:	ff 70 04             	push   DWORD PTR [eax+0x4]
100021cb:	ff 30                	push   DWORD PTR [eax]
100021cd:	56                   	push   esi
100021ce:	e8 fc ff ff ff       	call   100021cf <x87Handler(regs*)+0x13f4>	100021cf: R_386_PC32	fpu64ToInternal(unsigned long long)
100021d3:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
100021d9:	83 ec 0c             	sub    esp,0xc
100021dc:	6a 00                	push   0x0
100021de:	50                   	push   eax
100021df:	e8 fc ff ff ff       	call   100021e0 <x87Handler(regs*)+0x1405>	100021e0: R_386_PC32	fpuGetReg(int)
100021e4:	57                   	push   edi
100021e5:	57                   	push   edi
100021e6:	b9 03 00 00 00       	mov    ecx,0x3
100021eb:	89 e7                	mov    edi,esp
100021ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021ef:	83 ec 0c             	sub    esp,0xc
100021f2:	b9 03 00 00 00       	mov    ecx,0x3
100021f7:	89 e7                	mov    edi,esp
100021f9:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
100021ff:	89 c6                	mov    esi,eax
10002201:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002203:	e8 fc ff ff ff       	call   10002204 <x87Handler(regs*)+0x1429>	10002204: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10002208:	8d 45 dc             	lea    eax,[ebp-0x24]
1000220b:	83 c4 24             	add    esp,0x24
1000220e:	50                   	push   eax
1000220f:	e8 fc ff ff ff       	call   10002210 <x87Handler(regs*)+0x1435>	10002210: R_386_PC32	fpuPop()
10002214:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000221a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000221d:	83 c4 0c             	add    esp,0xc
10002220:	e9 13 ed ff ff       	jmp    10000f38 <x87Handler(regs*)+0x15d>
10002225:	80 fa 04             	cmp    dl,0x4
10002228:	75 68                	jne    10002292 <x87Handler(regs*)+0x14b7>
1000222a:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
10002230:	50                   	push   eax
10002231:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002237:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000223a:	ff 30                	push   DWORD PTR [eax]
1000223c:	56                   	push   esi
1000223d:	e8 fc ff ff ff       	call   1000223e <x87Handler(regs*)+0x1463>	1000223e: R_386_PC32	fpu64ToInternal(unsigned long long)
10002242:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002248:	83 ec 0c             	sub    esp,0xc
1000224b:	6a 00                	push   0x0
1000224d:	52                   	push   edx
1000224e:	e8 fc ff ff ff       	call   1000224f <x87Handler(regs*)+0x1474>	1000224f: R_386_PC32	fpuGetReg(int)
10002253:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
10002259:	52                   	push   edx
1000225a:	b9 03 00 00 00       	mov    ecx,0x3
1000225f:	89 e7                	mov    edi,esp
10002261:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002263:	83 ec 0c             	sub    esp,0xc
10002266:	b9 03 00 00 00       	mov    ecx,0x3
1000226b:	89 e7                	mov    edi,esp
1000226d:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002273:	89 d6                	mov    esi,edx
10002275:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002277:	50                   	push   eax
10002278:	e8 fc ff ff ff       	call   10002279 <x87Handler(regs*)+0x149e>	10002279: R_386_PC32	fpuSub(_Float80, _Float80)
1000227d:	83 c4 20             	add    esp,0x20
10002280:	b9 03 00 00 00       	mov    ecx,0x3
10002285:	89 e7                	mov    edi,esp
10002287:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
1000228d:	e9 d5 00 00 00       	jmp    10002367 <x87Handler(regs*)+0x158c>
10002292:	80 fa 05             	cmp    dl,0x5
10002295:	75 68                	jne    100022ff <x87Handler(regs*)+0x1524>
10002297:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
1000229d:	51                   	push   ecx
1000229e:	51                   	push   ecx
1000229f:	6a 00                	push   0x0
100022a1:	56                   	push   esi
100022a2:	e8 fc ff ff ff       	call   100022a3 <x87Handler(regs*)+0x14c8>	100022a3: R_386_PC32	fpuGetReg(int)
100022a7:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100022ad:	57                   	push   edi
100022ae:	57                   	push   edi
100022af:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
100022b5:	ff 77 04             	push   DWORD PTR [edi+0x4]
100022b8:	ff 37                	push   DWORD PTR [edi]
100022ba:	50                   	push   eax
100022bb:	e8 fc ff ff ff       	call   100022bc <x87Handler(regs*)+0x14e1>	100022bc: R_386_PC32	fpu64ToInternal(unsigned long long)
100022c0:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100022c6:	50                   	push   eax
100022c7:	b9 03 00 00 00       	mov    ecx,0x3
100022cc:	89 e7                	mov    edi,esp
100022ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022d0:	83 ec 0c             	sub    esp,0xc
100022d3:	b9 03 00 00 00       	mov    ecx,0x3
100022d8:	89 e7                	mov    edi,esp
100022da:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100022e0:	89 c6                	mov    esi,eax
100022e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022e4:	52                   	push   edx
100022e5:	e8 fc ff ff ff       	call   100022e6 <x87Handler(regs*)+0x150b>	100022e6: R_386_PC32	fpuSub(_Float80, _Float80)
100022ea:	83 c4 20             	add    esp,0x20
100022ed:	b9 03 00 00 00       	mov    ecx,0x3
100022f2:	89 e7                	mov    edi,esp
100022f4:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100022fa:	e9 cb 00 00 00       	jmp    100023ca <x87Handler(regs*)+0x15ef>
100022ff:	80 fa 06             	cmp    dl,0x6
10002302:	75 67                	jne    1000236b <x87Handler(regs*)+0x1590>
10002304:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
1000230a:	57                   	push   edi
1000230b:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002311:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002314:	ff 30                	push   DWORD PTR [eax]
10002316:	56                   	push   esi
10002317:	e8 fc ff ff ff       	call   10002318 <x87Handler(regs*)+0x153d>	10002318: R_386_PC32	fpu64ToInternal(unsigned long long)
1000231c:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002322:	83 ec 0c             	sub    esp,0xc
10002325:	6a 00                	push   0x0
10002327:	52                   	push   edx
10002328:	e8 fc ff ff ff       	call   10002329 <x87Handler(regs*)+0x154e>	10002329: R_386_PC32	fpuGetReg(int)
1000232d:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002333:	52                   	push   edx
10002334:	b9 03 00 00 00       	mov    ecx,0x3
10002339:	89 e7                	mov    edi,esp
1000233b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000233d:	83 ec 0c             	sub    esp,0xc
10002340:	b9 03 00 00 00       	mov    ecx,0x3
10002345:	89 e7                	mov    edi,esp
10002347:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
1000234d:	89 d6                	mov    esi,edx
1000234f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002351:	50                   	push   eax
10002352:	e8 fc ff ff ff       	call   10002353 <x87Handler(regs*)+0x1578>	10002353: R_386_PC32	fpuDivide(_Float80, _Float80)
10002357:	83 c4 20             	add    esp,0x20
1000235a:	b9 03 00 00 00       	mov    ecx,0x3
1000235f:	89 e7                	mov    edi,esp
10002361:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002367:	89 c6                	mov    esi,eax
10002369:	eb 61                	jmp    100023cc <x87Handler(regs*)+0x15f1>
1000236b:	31 c0                	xor    eax,eax
1000236d:	80 fa 07             	cmp    dl,0x7
10002370:	0f 85 26 01 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
10002376:	8d 75 88             	lea    esi,[ebp-0x78]
10002379:	57                   	push   edi
1000237a:	57                   	push   edi
1000237b:	6a 00                	push   0x0
1000237d:	56                   	push   esi
1000237e:	e8 fc ff ff ff       	call   1000237f <x87Handler(regs*)+0x15a4>	1000237f: R_386_PC32	fpuGetReg(int)
10002383:	8d 45 94             	lea    eax,[ebp-0x6c]
10002386:	52                   	push   edx
10002387:	52                   	push   edx
10002388:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
1000238e:	ff 72 04             	push   DWORD PTR [edx+0x4]
10002391:	ff 32                	push   DWORD PTR [edx]
10002393:	50                   	push   eax
10002394:	e8 fc ff ff ff       	call   10002395 <x87Handler(regs*)+0x15ba>	10002395: R_386_PC32	fpu64ToInternal(unsigned long long)
10002399:	8d 55 a0             	lea    edx,[ebp-0x60]
1000239c:	51                   	push   ecx
1000239d:	b9 03 00 00 00       	mov    ecx,0x3
100023a2:	89 e7                	mov    edi,esp
100023a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023a6:	83 ec 0c             	sub    esp,0xc
100023a9:	b9 03 00 00 00       	mov    ecx,0x3
100023ae:	89 e7                	mov    edi,esp
100023b0:	8d 45 94             	lea    eax,[ebp-0x6c]
100023b3:	89 c6                	mov    esi,eax
100023b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023b7:	52                   	push   edx
100023b8:	e8 fc ff ff ff       	call   100023b9 <x87Handler(regs*)+0x15de>	100023b9: R_386_PC32	fpuDivide(_Float80, _Float80)
100023bd:	83 c4 20             	add    esp,0x20
100023c0:	b9 03 00 00 00       	mov    ecx,0x3
100023c5:	89 e7                	mov    edi,esp
100023c7:	8d 55 a0             	lea    edx,[ebp-0x60]
100023ca:	89 d6                	mov    esi,edx
100023cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023ce:	6a 00                	push   0x0
100023d0:	e8 fc ff ff ff       	call   100023d1 <x87Handler(regs*)+0x15f6>	100023d1: R_386_PC32	fpuSetReg(int, _Float80)
100023d5:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100023db:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100023de:	e9 52 eb ff ff       	jmp    10000f35 <x87Handler(regs*)+0x15a>
100023e3:	80 fa 02             	cmp    dl,0x2
100023e6:	75 23                	jne    1000240b <x87Handler(regs*)+0x1630>
100023e8:	8d 75 b8             	lea    esi,[ebp-0x48]
100023eb:	52                   	push   edx
100023ec:	52                   	push   edx
100023ed:	6a 00                	push   0x0
100023ef:	56                   	push   esi
100023f0:	e8 fc ff ff ff       	call   100023f1 <x87Handler(regs*)+0x1616>	100023f1: R_386_PC32	fpuGetReg(int)
100023f5:	83 ec 14             	sub    esp,0x14
100023f8:	b9 03 00 00 00       	mov    ecx,0x3
100023fd:	89 e7                	mov    edi,esp
100023ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002401:	e8 fc ff ff ff       	call   10002402 <x87Handler(regs*)+0x1627>	10002402: R_386_PC32	fpuInternalTo64(_Float80)
10002406:	e9 81 00 00 00       	jmp    1000248c <x87Handler(regs*)+0x16b1>
1000240b:	31 c0                	xor    eax,eax
1000240d:	80 fa 03             	cmp    dl,0x3
10002410:	0f 85 86 00 00 00    	jne    1000249c <x87Handler(regs*)+0x16c1>
10002416:	8d 75 c4             	lea    esi,[ebp-0x3c]
10002419:	83 ec 0c             	sub    esp,0xc
1000241c:	56                   	push   esi
1000241d:	e8 fc ff ff ff       	call   1000241e <x87Handler(regs*)+0x1643>	1000241e: R_386_PC32	fpuPop()
10002422:	83 ec 14             	sub    esp,0x14
10002425:	b9 03 00 00 00       	mov    ecx,0x3
1000242a:	89 e7                	mov    edi,esp
1000242c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000242e:	e8 fc ff ff ff       	call   1000242f <x87Handler(regs*)+0x1654>	1000242f: R_386_PC32	fpuInternalTo64(_Float80)
10002433:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10002439:	89 07                	mov    DWORD PTR [edi],eax
1000243b:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
1000243e:	e9 1a ee ff ff       	jmp    1000125d <x87Handler(regs*)+0x482>
10002443:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10002449:	80 fa 05             	cmp    dl,0x5
1000244c:	75 1a                	jne    10002468 <x87Handler(regs*)+0x168d>
1000244e:	8d 75 d0             	lea    esi,[ebp-0x30]
10002451:	50                   	push   eax
10002452:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002458:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000245b:	ff 30                	push   DWORD PTR [eax]
1000245d:	56                   	push   esi
1000245e:	e8 fc ff ff ff       	call   1000245f <x87Handler(regs*)+0x1684>	1000245f: R_386_PC32	fpuULongToFloat(unsigned long long)
10002463:	e9 b4 ed ff ff       	jmp    1000121c <x87Handler(regs*)+0x441>
10002468:	31 c0                	xor    eax,eax
1000246a:	80 fa 07             	cmp    dl,0x7
1000246d:	75 2d                	jne    1000249c <x87Handler(regs*)+0x16c1>
1000246f:	8d 75 dc             	lea    esi,[ebp-0x24]
10002472:	83 ec 0c             	sub    esp,0xc
10002475:	56                   	push   esi
10002476:	e8 fc ff ff ff       	call   10002477 <x87Handler(regs*)+0x169c>	10002477: R_386_PC32	fpuPop()
1000247b:	83 ec 14             	sub    esp,0x14
1000247e:	b9 03 00 00 00       	mov    ecx,0x3
10002483:	89 e7                	mov    edi,esp
10002485:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002487:	e8 fc ff ff ff       	call   10002488 <x87Handler(regs*)+0x16ad>	10002488: R_386_PC32	fpuFloatToLong(_Float80)
1000248c:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10002492:	89 01                	mov    DWORD PTR [ecx],eax
10002494:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10002497:	e9 c1 ed ff ff       	jmp    1000125d <x87Handler(regs*)+0x482>
1000249c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000249f:	5b                   	pop    ebx
100024a0:	5e                   	pop    esi
100024a1:	5f                   	pop    edi
100024a2:	5d                   	pop    ebp
100024a3:	c3                   	ret    

100024a4 <begin()>:
100024a4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100024a6: R_386_32	x87FaultIntercept
	100024aa: R_386_32	x87Handler(regs*)
100024ae:	c3                   	ret    

100024af <_GLOBAL__sub_I__Z5startv>:
100024af:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	100024b1: R_386_32	fpuState
100024b9:	c3                   	ret    
100024ba:	46                   	inc    esi
100024bb:	6c                   	ins    BYTE PTR es:[edi],dx
100024bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024bd:	61                   	popa   
100024be:	74 2d                	je     100024ed <_GLOBAL__sub_I__Z5startv+0x3e>
100024c0:	3e 49                	ds dec ecx
100024c2:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024c3:	74 3a                	je     100024ff <_GLOBAL__sub_I__Z5startv+0x50>
100024c5:	20 30                	and    BYTE PTR [eax],dh
100024c7:	78 25                	js     100024ee <_GLOBAL__sub_I__Z5startv+0x3f>
100024c9:	58                   	pop    eax
100024ca:	30 30                	xor    BYTE PTR [eax],dh
100024cc:	30 30                	xor    BYTE PTR [eax],dh
100024ce:	30 30                	xor    BYTE PTR [eax],dh
100024d0:	30 30                	xor    BYTE PTR [eax],dh
100024d2:	20 3e                	and    BYTE PTR [esi],bh
100024d4:	3e 20 25 64 0a 00 65 	and    BYTE PTR ds:0x65000a64,ah
100024db:	6d                   	ins    DWORD PTR es:[edi],dx
100024dc:	38 30                	cmp    BYTE PTR [eax],dh
100024de:	38 37                	cmp    BYTE PTR [edi],dh
100024e0:	20 62 61             	and    BYTE PTR [edx+0x61],ah
100024e3:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100024e7:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
100024eb:	74 00                	je     100024ed <_GLOBAL__sub_I__Z5startv+0x3e>
100024ed:	78 38                	js     10002527 <_GLOBAL__sub_I__Z5startv+0x78>
100024ef:	37                   	aaa    
100024f0:	20 68 61             	and    BYTE PTR [eax+0x61],ch
100024f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024f4:	64 6c                	fs ins BYTE PTR es:[edi],dx
100024f6:	65 72 20             	gs jb  10002519 <_GLOBAL__sub_I__Z5startv+0x6a>
100024f9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100024fc:	6c                   	ins    BYTE PTR es:[edi],dx
100024fd:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
10002502:	74 68                	je     1000256c <_GLOBAL__sub_I__Z5startv+0xbd>
10002504:	20 66 61             	and    BYTE PTR [esi+0x61],ah
10002507:	75 6c                	jne    10002575 <_GLOBAL__sub_I__Z5startv+0xc6>
10002509:	74 69                	je     10002574 <_GLOBAL__sub_I__Z5startv+0xc5>
1000250b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000250c:	67 20 45 49          	and    BYTE PTR [di+0x49],al
10002510:	50                   	push   eax
10002511:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
10002514:	20 30                	and    BYTE PTR [eax],dh
10002516:	78 25                	js     1000253d <_GLOBAL__sub_I__Z5startv+0x8e>
10002518:	58                   	pop    eax
10002519:	0a 00                	or     al,BYTE PTR [eax]
1000251b:	78 38                	js     10002555 <_GLOBAL__sub_I__Z5startv+0xa6>
1000251d:	37                   	aaa    
1000251e:	3a 20                	cmp    ah,BYTE PTR [eax]
10002520:	25 58 20 25 58       	and    eax,0x58252058
10002525:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
1000252b:	0a 00                	or     al,BYTE PTR [eax]
1000252d:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
10002532:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
10002537:	64 72 65             	fs jb  1000259f <_DYNAMIC+0x13>
1000253a:	73 73                	jae    100025af <_DYNAMIC+0x23>
1000253c:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10002542:	58                   	pop    eax
10002543:	0a 00                	or     al,BYTE PTR [eax]
10002545:	66 90                	xchg   ax,ax
10002547:	90                   	nop
10002548:	af                   	scas   eax,DWORD PTR es:[edi]	10002548: R_386_32	.text
10002549:	0e                   	push   cs
1000254a:	00 10                	add    BYTE PTR [eax],dl
1000254c:	df 0e                	fisttp WORD PTR [esi]	1000254c: R_386_32	.text
1000254e:	00 10                	add    BYTE PTR [eax],dl
10002550:	9f                   	lahf   	10002550: R_386_32	.text
10002551:	10 00                	adc    BYTE PTR [eax],al
10002553:	10 9f 10 00 10 9f    	adc    BYTE PTR [edi-0x60effff0],bl	10002554: R_386_32	.text
	10002558: R_386_32	.text
10002559:	10 00                	adc    BYTE PTR [eax],al
1000255b:	10 9f 10 00 10 9f    	adc    BYTE PTR [edi-0x60effff0],bl	1000255c: R_386_32	.text
	10002560: R_386_32	.text
10002561:	10 00                	adc    BYTE PTR [eax],al
10002563:	10 9f 10 00 10 3f    	adc    BYTE PTR [edi+0x3f100010],bl	10002564: R_386_32	.text
	10002568: R_386_32	.text
10002569:	0f 00 10             	lldt   WORD PTR [eax]
1000256c:	6e                   	outs   dx,BYTE PTR ds:[esi]	1000256c: R_386_32	.text
1000256d:	0f 00 10             	lldt   WORD PTR [eax]
10002570:	ab                   	stos   DWORD PTR es:[edi],eax	10002570: R_386_32	.text
10002571:	0f 00 10             	lldt   WORD PTR [eax]
10002574:	da 0f                	fimul  DWORD PTR [edi]	10002574: R_386_32	.text
10002576:	00 10                	add    BYTE PTR [eax],dl
10002578:	09 10                	or     DWORD PTR [eax],edx	10002578: R_386_32	.text
1000257a:	00 10                	add    BYTE PTR [eax],dl
1000257c:	3b 10                	cmp    edx,DWORD PTR [eax]	1000257c: R_386_32	.text
1000257e:	00 10                	add    BYTE PTR [eax],dl
10002580:	6d                   	ins    DWORD PTR es:[edi],dx	10002580: R_386_32	.text
10002581:	10 00                	adc    BYTE PTR [eax],al
10002583:	10                   	.byte 0x10
