
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuUnorderedCompare(_Float80, _Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	83 ec 44             	sub    esp,0x44
10000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000277:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000027a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000280:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000284:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000287:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
1000028a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
1000028d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000290:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000294:	8d 7d c0             	lea    edi,[ebp-0x40]
10000297:	b9 03 00 00 00       	mov    ecx,0x3
1000029c:	8d 75 08             	lea    esi,[ebp+0x8]
1000029f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002a1:	8d 7d cc             	lea    edi,[ebp-0x34]
100002a4:	8d 75 14             	lea    esi,[ebp+0x14]
100002a7:	b9 03 00 00 00       	mov    ecx,0x3
100002ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ae:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002b1:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002b4:	89 c2                	mov    edx,eax
100002b6:	31 da                	xor    edx,ebx
100002b8:	09 d1                	or     ecx,edx
100002ba:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002be:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002ca:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002d0:	39 d1                	cmp    ecx,edx
100002d2:	75 08                	jne    100002dc <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002d4:	31 d2                	xor    edx,edx
100002d6:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
100002da:	75 1c                	jne    100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002dc:	b2 01                	mov    dl,0x1
100002de:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
100002e2:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
100002e6:	72 10                	jb     100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002e8:	0f 94 c1             	sete   cl
100002eb:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
100002ee:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
100002f1:	19 d8                	sbb    eax,ebx
100002f3:	0f 92 c2             	setb   dl
100002f6:	21 ca                	and    edx,ecx
100002f8:	a0 01 00 00 00       	mov    al,ds:0x1	100002f9: R_386_32	fpuState
100002fd:	83 e0 ba             	and    eax,0xffffffba
10000300:	8d 7d d8             	lea    edi,[ebp-0x28]
10000303:	b9 03 00 00 00       	mov    ecx,0x3
10000308:	8d 75 08             	lea    esi,[ebp+0x8]
1000030b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000030d:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000310:	b9 03 00 00 00       	mov    ecx,0x3
10000315:	8d 75 14             	lea    esi,[ebp+0x14]
10000318:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000031a:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
1000031d:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000323:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000326:	81 e1 ff ff ff 00    	and    ecx,0xffffff
1000032c:	39 cb                	cmp    ebx,ecx
1000032e:	0f 94 c1             	sete   cl
10000331:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000334:	c1 e1 06             	shl    ecx,0x6
10000337:	09 d0                	or     eax,edx
10000339:	09 c8                	or     eax,ecx
1000033b:	a2 01 00 00 00       	mov    ds:0x1,al	1000033c: R_386_32	fpuState
10000340:	83 c4 44             	add    esp,0x44
10000343:	5b                   	pop    ebx
10000344:	5e                   	pop    esi
10000345:	5f                   	pop    edi
10000346:	5d                   	pop    ebp
10000347:	c3                   	ret    

10000348 <fpuNormalise(_Float80)>:
10000348:	55                   	push   ebp
10000349:	89 e5                	mov    ebp,esp
1000034b:	57                   	push   edi
1000034c:	56                   	push   esi
1000034d:	53                   	push   ebx
1000034e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000354:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000357:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000035a:	8d 72 01             	lea    esi,[edx+0x1]
1000035d:	89 df                	mov    edi,ebx
1000035f:	c1 ef 1e             	shr    edi,0x1e
10000362:	74 0e                	je     10000372 <fpuNormalise(_Float80)+0x2a>
10000364:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000368:	d1 eb                	shr    ebx,1
1000036a:	89 f2                	mov    edx,esi
1000036c:	eb ec                	jmp    1000035a <fpuNormalise(_Float80)+0x12>
1000036e:	01 c9                	add    ecx,ecx
10000370:	11 db                	adc    ebx,ebx
10000372:	0f ba e3 1d          	bt     ebx,0x1d
10000376:	72 1d                	jb     10000395 <fpuNormalise(_Float80)+0x4d>
10000378:	4a                   	dec    edx
10000379:	89 de                	mov    esi,ebx
1000037b:	09 ce                	or     esi,ecx
1000037d:	75 ef                	jne    1000036e <fpuNormalise(_Float80)+0x26>
1000037f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000386:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
1000038d:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000393:	eb 0a                	jmp    1000039f <fpuNormalise(_Float80)+0x57>
10000395:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000398:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
1000039b:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000039f:	8d 75 0c             	lea    esi,[ebp+0xc]
100003a2:	b9 03 00 00 00       	mov    ecx,0x3
100003a7:	89 c7                	mov    edi,eax
100003a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ab:	5b                   	pop    ebx
100003ac:	5e                   	pop    esi
100003ad:	5f                   	pop    edi
100003ae:	5d                   	pop    ebp
100003af:	c2 04 00             	ret    0x4

100003b2 <fpuAdd(_Float80, _Float80)>:
100003b2:	55                   	push   ebp
100003b3:	89 e5                	mov    ebp,esp
100003b5:	57                   	push   edi
100003b6:	56                   	push   esi
100003b7:	53                   	push   ebx
100003b8:	83 ec 2c             	sub    esp,0x2c
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003c1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003c4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003ca:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003ce:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003d1:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003d4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100003d7:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100003da:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100003dd:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100003e0:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003e4:	66 39 c8             	cmp    ax,cx
100003e7:	72 2d                	jb     10000416 <fpuAdd(_Float80, _Float80)+0x64>
100003e9:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100003ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100003ef:	19 f8                	sbb    eax,edi
100003f1:	73 09                	jae    100003fc <fpuAdd(_Float80, _Float80)+0x4a>
100003f3:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003f7:	66 39 c8             	cmp    ax,cx
100003fa:	74 24                	je     10000420 <fpuAdd(_Float80, _Float80)+0x6e>
100003fc:	88 d8                	mov    al,bl
100003fe:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000401:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000404:	89 f0                	mov    eax,esi
10000406:	89 fa                	mov    edx,edi
10000408:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000040b:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000040e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000411:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000414:	eb 0a                	jmp    10000420 <fpuAdd(_Float80, _Float80)+0x6e>
10000416:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000041a:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000041e:	89 c1                	mov    ecx,eax
10000420:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000423:	29 c8                	sub    eax,ecx
10000425:	88 c1                	mov    cl,al
10000427:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000042a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000042d:	0f ad d0             	shrd   eax,edx,cl
10000430:	d3 ea                	shr    edx,cl
10000432:	f6 c1 20             	test   cl,0x20
10000435:	74 04                	je     1000043b <fpuAdd(_Float80, _Float80)+0x89>
10000437:	89 d0                	mov    eax,edx
10000439:	31 d2                	xor    edx,edx
1000043b:	89 d1                	mov    ecx,edx
1000043d:	89 c2                	mov    edx,eax
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000447:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000044a:	75 13                	jne    1000045f <fpuAdd(_Float80, _Float80)+0xad>
1000044c:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
1000044f:	89 d0                	mov    eax,edx
10000451:	89 ca                	mov    edx,ecx
10000453:	01 f0                	add    eax,esi
10000455:	11 fa                	adc    edx,edi
10000457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000045a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000045d:	eb 58                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000045f:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000463:	74 24                	je     10000489 <fpuAdd(_Float80, _Float80)+0xd7>
10000465:	39 d6                	cmp    esi,edx
10000467:	89 f8                	mov    eax,edi
10000469:	19 c8                	sbb    eax,ecx
1000046b:	89 d0                	mov    eax,edx
1000046d:	89 ca                	mov    edx,ecx
1000046f:	73 0c                	jae    1000047d <fpuAdd(_Float80, _Float80)+0xcb>
10000471:	29 f0                	sub    eax,esi
10000473:	19 fa                	sbb    edx,edi
10000475:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000478:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000047b:	eb 26                	jmp    100004a3 <fpuAdd(_Float80, _Float80)+0xf1>
1000047d:	29 c6                	sub    esi,eax
1000047f:	19 cf                	sbb    edi,ecx
10000481:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000484:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000487:	eb 2a                	jmp    100004b3 <fpuAdd(_Float80, _Float80)+0x101>
10000489:	84 db                	test   bl,bl
1000048b:	74 2a                	je     100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000048d:	39 f2                	cmp    edx,esi
1000048f:	89 c8                	mov    eax,ecx
10000491:	19 f8                	sbb    eax,edi
10000493:	89 d0                	mov    eax,edx
10000495:	89 ca                	mov    edx,ecx
10000497:	73 10                	jae    100004a9 <fpuAdd(_Float80, _Float80)+0xf7>
10000499:	29 c6                	sub    esi,eax
1000049b:	19 cf                	sbb    edi,ecx
1000049d:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004a0:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004a3:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004a7:	eb 0e                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
100004a9:	29 f0                	sub    eax,esi
100004ab:	19 fa                	sbb    edx,edi
100004ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004b0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004b7:	83 ec 0c             	sub    esp,0xc
100004ba:	8d 75 dc             	lea    esi,[ebp-0x24]
100004bd:	b9 03 00 00 00       	mov    ecx,0x3
100004c2:	89 e7                	mov    edi,esp
100004c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004c9:	e8 fc ff ff ff       	call   100004ca <fpuAdd(_Float80, _Float80)+0x118>	100004ca: R_386_PC32	fpuNormalise(_Float80)
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004d4:	5b                   	pop    ebx
100004d5:	5e                   	pop    esi
100004d6:	5f                   	pop    edi
100004d7:	5d                   	pop    ebp
100004d8:	c2 04 00             	ret    0x4

100004db <fpuAbs(_Float80)>:
100004db:	55                   	push   ebp
100004dc:	89 e5                	mov    ebp,esp
100004de:	57                   	push   edi
100004df:	56                   	push   esi
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100004e7:	8d 75 0c             	lea    esi,[ebp+0xc]
100004ea:	b9 03 00 00 00       	mov    ecx,0x3
100004ef:	89 c7                	mov    edi,eax
100004f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004f3:	5e                   	pop    esi
100004f4:	5f                   	pop    edi
100004f5:	5d                   	pop    ebp
100004f6:	c2 04 00             	ret    0x4

100004f9 <fpuChs(_Float80)>:
100004f9:	55                   	push   ebp
100004fa:	89 e5                	mov    ebp,esp
100004fc:	57                   	push   edi
100004fd:	56                   	push   esi
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000505:	8d 75 0c             	lea    esi,[ebp+0xc]
10000508:	b9 03 00 00 00       	mov    ecx,0x3
1000050d:	89 c7                	mov    edi,eax
1000050f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000511:	5e                   	pop    esi
10000512:	5f                   	pop    edi
10000513:	5d                   	pop    ebp
10000514:	c2 04 00             	ret    0x4

10000517 <fpuSub(_Float80, _Float80)>:
10000517:	55                   	push   ebp
10000518:	89 e5                	mov    ebp,esp
1000051a:	57                   	push   edi
1000051b:	56                   	push   esi
1000051c:	53                   	push   ebx
1000051d:	83 ec 1c             	sub    esp,0x1c
10000520:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000523:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000527:	8d 75 18             	lea    esi,[ebp+0x18]
1000052a:	b9 03 00 00 00       	mov    ecx,0x3
1000052f:	89 e7                	mov    edi,esp
10000531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000533:	83 ec 0c             	sub    esp,0xc
10000536:	8d 75 0c             	lea    esi,[ebp+0xc]
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	89 e7                	mov    edi,esp
10000540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000542:	53                   	push   ebx
10000543:	e8 fc ff ff ff       	call   10000544 <fpuSub(_Float80, _Float80)+0x2d>	10000544: R_386_PC32	fpuAdd(_Float80, _Float80)
10000548:	89 d8                	mov    eax,ebx
1000054a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000054d:	5b                   	pop    ebx
1000054e:	5e                   	pop    esi
1000054f:	5f                   	pop    edi
10000550:	5d                   	pop    ebp
10000551:	c2 04 00             	ret    0x4

10000554 <fpuReverseSub(_Float80, _Float80)>:
10000554:	55                   	push   ebp
10000555:	89 e5                	mov    ebp,esp
10000557:	57                   	push   edi
10000558:	56                   	push   esi
10000559:	53                   	push   ebx
1000055a:	83 ec 1c             	sub    esp,0x1c
1000055d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000560:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000564:	8d 75 0c             	lea    esi,[ebp+0xc]
10000567:	b9 03 00 00 00       	mov    ecx,0x3
1000056c:	89 e7                	mov    edi,esp
1000056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000570:	83 ec 0c             	sub    esp,0xc
10000573:	8d 75 18             	lea    esi,[ebp+0x18]
10000576:	b9 03 00 00 00       	mov    ecx,0x3
1000057b:	89 e7                	mov    edi,esp
1000057d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000057f:	53                   	push   ebx
10000580:	e8 fc ff ff ff       	call   10000581 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000581: R_386_PC32	fpuAdd(_Float80, _Float80)
10000585:	89 d8                	mov    eax,ebx
10000587:	8d 65 f4             	lea    esp,[ebp-0xc]
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	5d                   	pop    ebp
1000058e:	c2 04 00             	ret    0x4

10000591 <fpuMultiply(_Float80, _Float80)>:
10000591:	55                   	push   ebp
10000592:	89 e5                	mov    ebp,esp
10000594:	57                   	push   edi
10000595:	56                   	push   esi
10000596:	53                   	push   ebx
10000597:	83 ec 38             	sub    esp,0x38
1000059a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000059d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a3:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005a7:	c1 ea 1f             	shr    edx,0x1f
100005aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005b0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005b3:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005b6:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005ba:	c1 ef 1f             	shr    edi,0x1f
100005bd:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005c0:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005c3:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005c6:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005c9:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005cc:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005d1:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005d5:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100005d8:	0f af ce             	imul   ecx,esi
100005db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100005de:	0f af d7             	imul   edx,edi
100005e1:	01 d1                	add    ecx,edx
100005e3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100005e6:	f7 e6                	mul    esi
100005e8:	01 ca                	add    edx,ecx
100005ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100005ed:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100005f0:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f3:	b9 03 00 00 00       	mov    ecx,0x3
100005f8:	89 e7                	mov    edi,esp
100005fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fc:	53                   	push   ebx
100005fd:	e8 fc ff ff ff       	call   100005fe <fpuMultiply(_Float80, _Float80)+0x6d>	100005fe: R_386_PC32	fpuNormalise(_Float80)
10000602:	89 d8                	mov    eax,ebx
10000604:	8d 65 f4             	lea    esp,[ebp-0xc]
10000607:	5b                   	pop    ebx
10000608:	5e                   	pop    esi
10000609:	5f                   	pop    edi
1000060a:	5d                   	pop    ebp
1000060b:	c2 04 00             	ret    0x4

1000060e <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000060e:	55                   	push   ebp
1000060f:	89 e5                	mov    ebp,esp
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	53                   	push   ebx
10000614:	83 ec 24             	sub    esp,0x24
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000061d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000620:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000626:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000629:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000062c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000062f:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000636:	83 c8 ff             	or     eax,0xffffffff
10000639:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000640:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000647:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000064e:	31 d2                	xor    edx,edx
10000650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000653:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000656:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000659:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000065c:	83 f8 ff             	cmp    eax,0xffffffff
1000065f:	75 22                	jne    10000683 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000661:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000664:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000667:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000066a:	0f ad f3             	shrd   ebx,esi,cl
1000066d:	d3 ee                	shr    esi,cl
1000066f:	f6 c1 20             	test   cl,0x20
10000672:	74 04                	je     10000678 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000674:	89 f3                	mov    ebx,esi
10000676:	31 f6                	xor    esi,esi
10000678:	89 d9                	mov    ecx,ebx
1000067a:	83 e1 01             	and    ecx,0x1
1000067d:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000680:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000686:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000689:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000068c:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000068f:	72 38                	jb     100006c9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
10000691:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000694:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000697:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
1000069a:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000069d:	83 f8 ff             	cmp    eax,0xffffffff
100006a0:	75 0d                	jne    100006af <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006a2:	81 ca 00 00 00 20    	or     edx,0x20000000
100006a8:	b8 3d 00 00 00       	mov    eax,0x3d
100006ad:	eb 1f                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006af:	88 c1                	mov    cl,al
100006b1:	89 ce                	mov    esi,ecx
100006b3:	c1 ee 05             	shr    esi,0x5
100006b6:	83 e6 01             	and    esi,0x1
100006b9:	89 f3                	mov    ebx,esi
100006bb:	83 f3 01             	xor    ebx,0x1
100006be:	d3 e3                	shl    ebx,cl
100006c0:	d3 e6                	shl    esi,cl
100006c2:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006c5:	09 f2                	or     edx,esi
100006c7:	eb 05                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006c9:	83 f8 ff             	cmp    eax,0xffffffff
100006cc:	74 01                	je     100006cf <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006ce:	48                   	dec    eax
100006cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006d2:	85 c0                	test   eax,eax
100006d4:	0f 85 76 ff ff ff    	jne    10000650 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100006da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100006dd:	83 c4 24             	add    esp,0x24
100006e0:	5b                   	pop    ebx
100006e1:	5e                   	pop    esi
100006e2:	5f                   	pop    edi
100006e3:	5d                   	pop    ebp
100006e4:	c3                   	ret    

100006e5 <fpuDivide(_Float80, _Float80)>:
100006e5:	55                   	push   ebp
100006e6:	89 e5                	mov    ebp,esp
100006e8:	57                   	push   edi
100006e9:	56                   	push   esi
100006ea:	53                   	push   ebx
100006eb:	83 ec 1c             	sub    esp,0x1c
100006ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006f1:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100006f4:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
100006f7:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
100006fa:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100006fd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000700:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000706:	e8 fc ff ff ff       	call   10000707 <fpuDivide(_Float80, _Float80)+0x22>	10000707: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000070b:	59                   	pop    ecx
1000070c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000070f:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000715:	66 05 00 40          	add    ax,0x4000
10000719:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000071c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000720:	8d 75 dc             	lea    esi,[ebp-0x24]
10000723:	b9 03 00 00 00       	mov    ecx,0x3
10000728:	89 e7                	mov    edi,esp
1000072a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000072c:	53                   	push   ebx
1000072d:	e8 fc ff ff ff       	call   1000072e <fpuDivide(_Float80, _Float80)+0x49>	1000072e: R_386_PC32	fpuNormalise(_Float80)
10000732:	89 d8                	mov    eax,ebx
10000734:	8d 65 f4             	lea    esp,[ebp-0xc]
10000737:	5b                   	pop    ebx
10000738:	5e                   	pop    esi
10000739:	5f                   	pop    edi
1000073a:	5d                   	pop    ebp
1000073b:	c2 04 00             	ret    0x4

1000073e <fpuReciprocal(_Float80)>:
1000073e:	55                   	push   ebp
1000073f:	89 e5                	mov    ebp,esp
10000741:	57                   	push   edi
10000742:	56                   	push   esi
10000743:	53                   	push   ebx
10000744:	83 ec 2c             	sub    esp,0x2c
10000747:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000074a:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000074e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000755:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000075c:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000762:	8d 75 0c             	lea    esi,[ebp+0xc]
10000765:	b9 03 00 00 00       	mov    ecx,0x3
1000076a:	89 e7                	mov    edi,esp
1000076c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076e:	83 ec 0c             	sub    esp,0xc
10000771:	8d 75 dc             	lea    esi,[ebp-0x24]
10000774:	b9 03 00 00 00       	mov    ecx,0x3
10000779:	89 e7                	mov    edi,esp
1000077b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000077d:	53                   	push   ebx
1000077e:	e8 fc ff ff ff       	call   1000077f <fpuReciprocal(_Float80)+0x41>	1000077f: R_386_PC32	fpuDivide(_Float80, _Float80)
10000783:	89 d8                	mov    eax,ebx
10000785:	8d 65 f4             	lea    esp,[ebp-0xc]
10000788:	5b                   	pop    ebx
10000789:	5e                   	pop    esi
1000078a:	5f                   	pop    edi
1000078b:	5d                   	pop    ebp
1000078c:	c2 04 00             	ret    0x4

1000078f <fpuSquare(_Float80)>:
1000078f:	55                   	push   ebp
10000790:	89 e5                	mov    ebp,esp
10000792:	57                   	push   edi
10000793:	56                   	push   esi
10000794:	53                   	push   ebx
10000795:	83 ec 1c             	sub    esp,0x1c
10000798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000079b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000079e:	b9 03 00 00 00       	mov    ecx,0x3
100007a3:	89 e7                	mov    edi,esp
100007a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a7:	83 ec 0c             	sub    esp,0xc
100007aa:	8d 75 0c             	lea    esi,[ebp+0xc]
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	53                   	push   ebx
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSquare(_Float80)+0x29>	100007b8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007bc:	89 d8                	mov    eax,ebx
100007be:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c1:	5b                   	pop    ebx
100007c2:	5e                   	pop    esi
100007c3:	5f                   	pop    edi
100007c4:	5d                   	pop    ebp
100007c5:	c2 04 00             	ret    0x4

100007c8 <fpuInverseSqrt(_Float80)>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	57                   	push   edi
100007cc:	56                   	push   esi
100007cd:	53                   	push   ebx
100007ce:	83 ec 5c             	sub    esp,0x5c
100007d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007d4:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100007d8:	31 d2                	xor    edx,edx
100007da:	b9 03 00 00 00       	mov    ecx,0x3
100007df:	31 db                	xor    ebx,ebx
100007e1:	01 c9                	add    ecx,ecx
100007e3:	11 db                	adc    ebx,ebx
100007e5:	42                   	inc    edx
100007e6:	83 fa 3c             	cmp    edx,0x3c
100007e9:	75 f6                	jne    100007e1 <fpuInverseSqrt(_Float80)+0x19>
100007eb:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100007ee:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
100007f1:	8d 75 0c             	lea    esi,[ebp+0xc]
100007f4:	b9 03 00 00 00       	mov    ecx,0x3
100007f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007fe:	0f b7 d0             	movzx  edx,ax
10000801:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000807:	d1 fa                	sar    edx,1
10000809:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000080e:	29 d1                	sub    ecx,edx
10000810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000813:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000817:	48                   	dec    eax
10000818:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000081c:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000823:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000826:	83 ec 0c             	sub    esp,0xc
10000829:	b9 03 00 00 00       	mov    ecx,0x3
1000082e:	89 e7                	mov    edi,esp
10000830:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000835:	53                   	push   ebx
10000836:	e8 fc ff ff ff       	call   10000837 <fpuInverseSqrt(_Float80)+0x6f>	10000837: R_386_PC32	fpuSquare(_Float80)
1000083b:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
1000083f:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000843:	8d 45 d0             	lea    eax,[ebp-0x30]
10000846:	83 ec 14             	sub    esp,0x14
10000849:	8d 75 0c             	lea    esi,[ebp+0xc]
1000084c:	b9 03 00 00 00       	mov    ecx,0x3
10000851:	89 e7                	mov    edi,esp
10000853:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 de                	mov    esi,ebx
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	50                   	push   eax
10000864:	e8 fc ff ff ff       	call   10000865 <fpuInverseSqrt(_Float80)+0x9d>	10000865: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000869:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
1000086f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000872:	83 c4 1c             	add    esp,0x1c
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000087f:	89 c6                	mov    esi,eax
10000881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000883:	83 ec 0c             	sub    esp,0xc
10000886:	8d 75 b8             	lea    esi,[ebp-0x48]
10000889:	b9 03 00 00 00       	mov    ecx,0x3
1000088e:	89 e7                	mov    edi,esp
10000890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000892:	52                   	push   edx
10000893:	e8 fc ff ff ff       	call   10000894 <fpuInverseSqrt(_Float80)+0xcc>	10000894: R_386_PC32	fpuSub(_Float80, _Float80)
10000898:	8d 5d a8             	lea    ebx,[ebp-0x58]
1000089b:	50                   	push   eax
1000089c:	b9 03 00 00 00       	mov    ecx,0x3
100008a1:	89 e7                	mov    edi,esp
100008a3:	8d 55 dc             	lea    edx,[ebp-0x24]
100008a6:	89 d6                	mov    esi,edx
100008a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008aa:	83 ec 0c             	sub    esp,0xc
100008ad:	b9 03 00 00 00       	mov    ecx,0x3
100008b2:	89 e7                	mov    edi,esp
100008b4:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b9:	53                   	push   ebx
100008ba:	e8 fc ff ff ff       	call   100008bb <fpuInverseSqrt(_Float80)+0xf3>	100008bb: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008c7:	89 de                	mov    esi,ebx
100008c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008cb:	83 c4 2c             	add    esp,0x2c
100008ce:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008d1:	0f 85 4c ff ff ff    	jne    10000823 <fpuInverseSqrt(_Float80)+0x5b>
100008d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008da:	8d 65 f4             	lea    esp,[ebp-0xc]
100008dd:	5b                   	pop    ebx
100008de:	5e                   	pop    esi
100008df:	5f                   	pop    edi
100008e0:	5d                   	pop    ebp
100008e1:	c2 04 00             	ret    0x4

100008e4 <fpuSqrt(_Float80)>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	57                   	push   edi
100008e8:	56                   	push   esi
100008e9:	53                   	push   ebx
100008ea:	83 ec 38             	sub    esp,0x38
100008ed:	8d 5d d0             	lea    ebx,[ebp-0x30]
100008f0:	8d 75 0c             	lea    esi,[ebp+0xc]
100008f3:	b9 03 00 00 00       	mov    ecx,0x3
100008f8:	89 e7                	mov    edi,esp
100008fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <fpuSqrt(_Float80)+0x1a>	100008fe: R_386_PC32	fpuInverseSqrt(_Float80)
10000902:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000906:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000090d:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000914:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000091a:	83 ec 14             	sub    esp,0x14
1000091d:	b9 03 00 00 00       	mov    ecx,0x3
10000922:	89 e7                	mov    edi,esp
10000924:	89 de                	mov    esi,ebx
10000926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000928:	83 ec 0c             	sub    esp,0xc
1000092b:	8d 75 dc             	lea    esi,[ebp-0x24]
1000092e:	b9 03 00 00 00       	mov    ecx,0x3
10000933:	89 e7                	mov    edi,esp
10000935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093a:	e8 fc ff ff ff       	call   1000093b <fpuSqrt(_Float80)+0x57>	1000093b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8d 65 f4             	lea    esp,[ebp-0xc]
10000945:	5b                   	pop    ebx
10000946:	5e                   	pop    esi
10000947:	5f                   	pop    edi
10000948:	5d                   	pop    ebp
10000949:	c2 04 00             	ret    0x4

1000094c <fpuGetReg(int)>:
1000094c:	55                   	push   ebp
1000094d:	89 e5                	mov    ebp,esp
1000094f:	57                   	push   edi
10000950:	56                   	push   esi
10000951:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000954:	83 fe 07             	cmp    esi,0x7
10000957:	76 10                	jbe    10000969 <fpuGetReg(int)+0x1d>
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	68 7d 23 00 10       	push   0x1000237d	1000095d: R_386_32	.text
10000961:	e8 fc ff ff ff       	call   10000962 <fpuGetReg(int)+0x16>	10000962: R_386_PC32	Krnl::panic(char const*)
10000966:	83 c4 10             	add    esp,0x10
10000969:	a0 01 00 00 00       	mov    al,ds:0x1	1000096a: R_386_32	fpuState
1000096e:	c0 e8 03             	shr    al,0x3
10000971:	83 e0 07             	and    eax,0x7
10000974:	01 f0                	add    eax,esi
10000976:	b9 08 00 00 00       	mov    ecx,0x8
1000097b:	99                   	cdq    
1000097c:	f7 f9                	idiv   ecx
1000097e:	6b c2 0c             	imul   eax,edx,0xc
10000981:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000983: R_386_32	fpuState
10000987:	b9 03 00 00 00       	mov    ecx,0x3
1000098c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000098f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8d 65 f8             	lea    esp,[ebp-0x8]
10000997:	5e                   	pop    esi
10000998:	5f                   	pop    edi
10000999:	5d                   	pop    ebp
1000099a:	c2 04 00             	ret    0x4

1000099d <fpuSetReg(int, _Float80)>:
1000099d:	55                   	push   ebp
1000099e:	89 e5                	mov    ebp,esp
100009a0:	57                   	push   edi
100009a1:	56                   	push   esi
100009a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009a5:	83 ff 07             	cmp    edi,0x7
100009a8:	76 10                	jbe    100009ba <fpuSetReg(int, _Float80)+0x1d>
100009aa:	83 ec 0c             	sub    esp,0xc
100009ad:	68 7d 23 00 10       	push   0x1000237d	100009ae: R_386_32	.text
100009b2:	e8 fc ff ff ff       	call   100009b3 <fpuSetReg(int, _Float80)+0x16>	100009b3: R_386_PC32	Krnl::panic(char const*)
100009b7:	83 c4 10             	add    esp,0x10
100009ba:	a0 01 00 00 00       	mov    al,ds:0x1	100009bb: R_386_32	fpuState
100009bf:	c0 e8 03             	shr    al,0x3
100009c2:	83 e0 07             	and    eax,0x7
100009c5:	01 f8                	add    eax,edi
100009c7:	b9 08 00 00 00       	mov    ecx,0x8
100009cc:	99                   	cdq    
100009cd:	f7 f9                	idiv   ecx
100009cf:	6b c2 0c             	imul   eax,edx,0xc
100009d2:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009d4: R_386_32	fpuState
100009d8:	8d 75 0c             	lea    esi,[ebp+0xc]
100009db:	b9 03 00 00 00       	mov    ecx,0x3
100009e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009e2:	8d 65 f8             	lea    esp,[ebp-0x8]
100009e5:	5e                   	pop    esi
100009e6:	5f                   	pop    edi
100009e7:	5d                   	pop    ebp
100009e8:	c3                   	ret    

100009e9 <fpuInternalTo32(_Float80)>:
100009e9:	55                   	push   ebp
100009ea:	89 e5                	mov    ebp,esp
100009ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100009ef:	66 81 f9 7e 40       	cmp    cx,0x407e
100009f4:	76 0c                	jbe    10000a02 <fpuInternalTo32(_Float80)+0x19>
100009f6:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f8: R_386_32	fpuState
100009fd:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a02:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a06:	19 d2                	sbb    edx,edx
10000a08:	f7 d2                	not    edx
10000a0a:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a13:	c1 e8 06             	shr    eax,0x6
10000a16:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a1b:	c1 e1 17             	shl    ecx,0x17
10000a1e:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a24:	09 c8                	or     eax,ecx
10000a26:	09 d0                	or     eax,edx
10000a28:	5d                   	pop    ebp
10000a29:	c3                   	ret    

10000a2a <fpuInternalTo64(_Float80)>:
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	57                   	push   edi
10000a2e:	56                   	push   esi
10000a2f:	53                   	push   ebx
10000a30:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a33:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a38:	76 0c                	jbe    10000a46 <fpuInternalTo64(_Float80)+0x1c>
10000a3a:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a3c: R_386_32	fpuState
10000a41:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a46:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a4a:	19 c9                	sbb    ecx,ecx
10000a4c:	f7 d1                	not    ecx
10000a4e:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a5a:	0f ac d0 09          	shrd   eax,edx,0x9
10000a5e:	c1 ea 09             	shr    edx,0x9
10000a61:	89 c6                	mov    esi,eax
10000a63:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a69:	c1 e3 14             	shl    ebx,0x14
10000a6c:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a72:	09 da                	or     edx,ebx
10000a74:	09 ca                	or     edx,ecx
10000a76:	89 f0                	mov    eax,esi
10000a78:	5b                   	pop    ebx
10000a79:	5e                   	pop    esi
10000a7a:	5f                   	pop    edi
10000a7b:	5d                   	pop    ebp
10000a7c:	c3                   	ret    

10000a7d <fpu32ToInternal(unsigned int)>:
10000a7d:	55                   	push   ebp
10000a7e:	89 e5                	mov    ebp,esp
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a86:	89 d1                	mov    ecx,edx
10000a88:	c1 e9 1f             	shr    ecx,0x1f
10000a8b:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000a8e:	89 d1                	mov    ecx,edx
10000a90:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000a96:	c1 e1 06             	shl    ecx,0x6
10000a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a9f:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000aa5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000aa8:	c1 ea 17             	shr    edx,0x17
10000aab:	0f b6 d2             	movzx  edx,dl
10000aae:	66 81 c2 81 3f       	add    dx,0x3f81
10000ab3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ab7:	5d                   	pop    ebp
10000ab8:	c2 04 00             	ret    0x4

10000abb <fpu64ToInternal(unsigned long long)>:
10000abb:	55                   	push   ebp
10000abc:	89 e5                	mov    ebp,esp
10000abe:	57                   	push   edi
10000abf:	56                   	push   esi
10000ac0:	53                   	push   ebx
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000aca:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000acd:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000ad0:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000ad3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ad6:	c1 ea 1f             	shr    edx,0x1f
10000ad9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000adc:	89 f7                	mov    edi,esi
10000ade:	89 de                	mov    esi,ebx
10000ae0:	0f a4 f7 09          	shld   edi,esi,0x9
10000ae4:	c1 e6 09             	shl    esi,0x9
10000ae7:	89 f1                	mov    ecx,esi
10000ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000aef:	89 fa                	mov    edx,edi
10000af1:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000af7:	89 08                	mov    DWORD PTR [eax],ecx
10000af9:	81 ca 00 00 00 20    	or     edx,0x20000000
10000aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b05:	c1 ea 14             	shr    edx,0x14
10000b08:	66 81 e2 ff 07       	and    dx,0x7ff
10000b0d:	66 81 c2 01 3c       	add    dx,0x3c01
10000b12:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b16:	83 c4 0c             	add    esp,0xc
10000b19:	5b                   	pop    ebx
10000b1a:	5e                   	pop    esi
10000b1b:	5f                   	pop    edi
10000b1c:	5d                   	pop    ebp
10000b1d:	c2 04 00             	ret    0x4

10000b20 <fpuPush(_Float80)>:
10000b20:	55                   	push   ebp
10000b21:	89 e5                	mov    ebp,esp
10000b23:	57                   	push   edi
10000b24:	56                   	push   esi
10000b25:	a0 01 00 00 00       	mov    al,ds:0x1	10000b26: R_386_32	fpuState
10000b2a:	88 c1                	mov    cl,al
10000b2c:	c0 e9 03             	shr    cl,0x3
10000b2f:	89 cf                	mov    edi,ecx
10000b31:	83 e7 07             	and    edi,0x7
10000b34:	83 c7 07             	add    edi,0x7
10000b37:	89 fa                	mov    edx,edi
10000b39:	83 e2 07             	and    edx,0x7
10000b3c:	c1 e2 03             	shl    edx,0x3
10000b3f:	83 e0 c7             	and    eax,0xffffffc7
10000b42:	09 d0                	or     eax,edx
10000b44:	a2 01 00 00 00       	mov    ds:0x1,al	10000b45: R_386_32	fpuState
10000b49:	83 e7 07             	and    edi,0x7
10000b4c:	6b ff 0c             	imul   edi,edi,0xc
10000b4f:	81 c7 04 00 00 00    	add    edi,0x4	10000b51: R_386_32	fpuState
10000b55:	b9 03 00 00 00       	mov    ecx,0x3
10000b5a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b5f:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b60: R_386_32	fpuState
10000b64:	83 f8 08             	cmp    eax,0x8
10000b67:	75 09                	jne    10000b72 <fpuPush(_Float80)+0x52>
10000b69:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b6b: R_386_32	fpuState
10000b70:	eb 06                	jmp    10000b78 <fpuPush(_Float80)+0x58>
10000b72:	40                   	inc    eax
10000b73:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b74: R_386_32	fpuState
10000b78:	5e                   	pop    esi
10000b79:	5f                   	pop    edi
10000b7a:	5d                   	pop    ebp
10000b7b:	c3                   	ret    

10000b7c <fpuPop()>:
10000b7c:	55                   	push   ebp
10000b7d:	89 e5                	mov    ebp,esp
10000b7f:	57                   	push   edi
10000b80:	56                   	push   esi
10000b81:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000b83: R_386_32	fpuState
10000b87:	88 d0                	mov    al,dl
10000b89:	c0 e8 03             	shr    al,0x3
10000b8c:	83 e0 07             	and    eax,0x7
10000b8f:	6b f0 0c             	imul   esi,eax,0xc
10000b92:	81 c6 04 00 00 00    	add    esi,0x4	10000b94: R_386_32	fpuState
10000b98:	b9 03 00 00 00       	mov    ecx,0x3
10000b9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba2:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000ba9:	83 e0 38             	and    eax,0x38
10000bac:	83 e2 c7             	and    edx,0xffffffc7
10000baf:	09 c2                	or     edx,eax
10000bb1:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bb3: R_386_32	fpuState
10000bb7:	a1 64 00 00 00       	mov    eax,ds:0x64	10000bb8: R_386_32	fpuState
10000bbc:	85 c0                	test   eax,eax
10000bbe:	74 08                	je     10000bc8 <fpuPop()+0x4c>
10000bc0:	48                   	dec    eax
10000bc1:	a3 64 00 00 00       	mov    ds:0x64,eax	10000bc2: R_386_32	fpuState
10000bc6:	eb 07                	jmp    10000bcf <fpuPop()+0x53>
10000bc8:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bca: R_386_32	fpuState
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	5e                   	pop    esi
10000bd3:	5f                   	pop    edi
10000bd4:	5d                   	pop    ebp
10000bd5:	c2 04 00             	ret    0x4

10000bd8 <x87Handler(regs*)>:
10000bd8:	55                   	push   ebp
10000bd9:	89 e5                	mov    ebp,esp
10000bdb:	57                   	push   edi
10000bdc:	56                   	push   esi
10000bdd:	53                   	push   ebx
10000bde:	81 ec 6c 06 00 00    	sub    esp,0x66c
10000be4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000be7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bea:	89 85 94 f9 ff ff    	mov    DWORD PTR [ebp-0x66c],eax
10000bf0:	c6 85 a6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x65a],0x0
10000bf7:	c7 85 a8 f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x658],0x2
10000c01:	8d 85 a7 f9 ff ff    	lea    eax,[ebp-0x659]
10000c07:	50                   	push   eax
10000c08:	8d 85 a6 f9 ff ff    	lea    eax,[ebp-0x65a]
10000c0e:	50                   	push   eax
10000c0f:	8d 85 a8 f9 ff ff    	lea    eax,[ebp-0x658]
10000c15:	50                   	push   eax
10000c16:	53                   	push   ebx
10000c17:	e8 fc ff ff ff       	call   10000c18 <x87Handler(regs*)+0x40>	10000c18: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c1c:	89 85 90 f9 ff ff    	mov    DWORD PTR [ebp-0x670],eax
10000c22:	58                   	pop    eax
10000c23:	5a                   	pop    edx
10000c24:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
10000c27:	68 90 23 00 10       	push   0x10002390	10000c28: R_386_32	.text
10000c2c:	e8 fc ff ff ff       	call   10000c2d <x87Handler(regs*)+0x55>	10000c2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c31:	59                   	pop    ecx
10000c32:	5e                   	pop    esi
10000c33:	ff b5 94 f9 ff ff    	push   DWORD PTR [ebp-0x66c]
10000c39:	68 9f 23 00 10       	push   0x1000239f	10000c3a: R_386_32	.text
10000c3e:	e8 fc ff ff ff       	call   10000c3f <x87Handler(regs*)+0x67>	10000c3f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c43:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000c49:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000c4d:	89 04 24             	mov    DWORD PTR [esp],eax
10000c50:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000c56:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000c5a:	50                   	push   eax
10000c5b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000c61:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c65:	50                   	push   eax
10000c66:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000c6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000c6f:	50                   	push   eax
10000c70:	68 cd 23 00 10       	push   0x100023cd	10000c71: R_386_32	.text
10000c75:	e8 fc ff ff ff       	call   10000c76 <x87Handler(regs*)+0x9e>	10000c76: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c7a:	83 c4 18             	add    esp,0x18
10000c7d:	ff b5 90 f9 ff ff    	push   DWORD PTR [ebp-0x670]
10000c83:	68 df 23 00 10       	push   0x100023df	10000c84: R_386_32	.text
10000c88:	e8 fc ff ff ff       	call   10000c89 <x87Handler(regs*)+0xb1>	10000c89: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c8d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000c93:	8a 10                	mov    dl,BYTE PTR [eax]
10000c95:	83 c4 10             	add    esp,0x10
10000c98:	80 fa d9             	cmp    dl,0xd9
10000c9b:	0f 85 7e 03 00 00    	jne    1000101f <x87Handler(regs*)+0x447>
10000ca1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000ca5:	8d 50 20             	lea    edx,[eax+0x20]
10000ca8:	80 fa 0e             	cmp    dl,0xe
10000cab:	0f 87 fa 01 00 00    	ja     10000eab <x87Handler(regs*)+0x2d3>
10000cb1:	0f b6 d2             	movzx  edx,dl
10000cb4:	ff 24 95 f8 23 00 10 	jmp    DWORD PTR [edx*4+0x100023f8]	10000cb7: R_386_32	.text
10000cbb:	8d b5 ac f9 ff ff    	lea    esi,[ebp-0x654]
10000cc1:	57                   	push   edi
10000cc2:	57                   	push   edi
10000cc3:	6a 00                	push   0x0
10000cc5:	56                   	push   esi
10000cc6:	e8 fc ff ff ff       	call   10000cc7 <x87Handler(regs*)+0xef>	10000cc7: R_386_PC32	fpuGetReg(int)
10000ccb:	8d 95 b8 f9 ff ff    	lea    edx,[ebp-0x648]
10000cd1:	b9 03 00 00 00       	mov    ecx,0x3
10000cd6:	89 e7                	mov    edi,esp
10000cd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cda:	52                   	push   edx
10000cdb:	e8 fc ff ff ff       	call   10000cdc <x87Handler(regs*)+0x104>	10000cdc: R_386_PC32	fpuChs(_Float80)
10000ce0:	b9 03 00 00 00       	mov    ecx,0x3
10000ce5:	89 e7                	mov    edi,esp
10000ce7:	89 d6                	mov    esi,edx
10000ce9:	eb 49                	jmp    10000d34 <x87Handler(regs*)+0x15c>
10000ceb:	8d 85 c4 f9 ff ff    	lea    eax,[ebp-0x63c]
10000cf1:	51                   	push   ecx
10000cf2:	51                   	push   ecx
10000cf3:	6a 00                	push   0x0
10000cf5:	50                   	push   eax
10000cf6:	e8 fc ff ff ff       	call   10000cf7 <x87Handler(regs*)+0x11f>	10000cf7: R_386_PC32	fpuGetReg(int)
10000cfb:	8b 85 c4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x63c]
10000d01:	8b 95 c8 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x638]
10000d07:	89 85 d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],eax
10000d0d:	89 95 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],edx
10000d13:	8b 85 cc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x634]
10000d19:	66 89 85 d8 f9 ff ff 	mov    WORD PTR [ebp-0x628],ax
10000d20:	c6 85 da f9 ff ff 00 	mov    BYTE PTR [ebp-0x626],0x0
10000d27:	8d b5 d0 f9 ff ff    	lea    esi,[ebp-0x630]
10000d2d:	b9 03 00 00 00       	mov    ecx,0x3
10000d32:	89 e7                	mov    edi,esp
10000d34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d36:	6a 00                	push   0x0
10000d38:	e8 fc ff ff ff       	call   10000d39 <x87Handler(regs*)+0x161>	10000d39: R_386_PC32	fpuSetReg(int, _Float80)
10000d3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000d41:	83 c4 10             	add    esp,0x10
10000d44:	b0 01                	mov    al,0x1
10000d46:	e9 14 16 00 00       	jmp    1000235f <x87Handler(regs*)+0x1787>
10000d4b:	c6 85 e6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61a],0x0
10000d52:	c7 85 dc f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x624],0x0
10000d5c:	c7 85 e0 f9 ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x620],0x20000000
10000d66:	66 c7 85 e4 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x61c],0x4000
10000d6f:	83 ec 10             	sub    esp,0x10
10000d72:	8d b5 dc f9 ff ff    	lea    esi,[ebp-0x624]
10000d78:	eb 2d                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000d7a:	c6 85 f2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x60e],0x0
10000d81:	c7 85 e8 f9 ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x618],0xf346e2be
10000d8b:	c7 85 ec f9 ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x614],0x35269e12
10000d95:	66 c7 85 f0 f9 ff ff 01 40 	mov    WORD PTR [ebp-0x610],0x4001
10000d9e:	83 ec 10             	sub    esp,0x10
10000da1:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000da7:	b9 03 00 00 00       	mov    ecx,0x3
10000dac:	89 e7                	mov    edi,esp
10000dae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000db0:	e8 fc ff ff ff       	call   10000db1 <x87Handler(regs*)+0x1d9>	10000db1: R_386_PC32	fpuPush(_Float80)
10000db5:	eb 86                	jmp    10000d3d <x87Handler(regs*)+0x165>
10000db7:	c6 85 fe f9 ff ff 00 	mov    BYTE PTR [ebp-0x602],0x0
10000dbe:	c7 85 f4 f9 ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x60c],0x5705fc1c
10000dc8:	c7 85 f8 f9 ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x608],0x2e2a8eca
10000dd2:	66 c7 85 fc f9 ff ff 00 40 	mov    WORD PTR [ebp-0x604],0x4000
10000ddb:	83 ec 10             	sub    esp,0x10
10000dde:	8d b5 f4 f9 ff ff    	lea    esi,[ebp-0x60c]
10000de4:	eb c1                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000de6:	c6 85 0a fa ff ff 00 	mov    BYTE PTR [ebp-0x5f6],0x0
10000ded:	c7 85 00 fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x600],0x885a308c
10000df7:	c7 85 04 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5fc],0x3243f6a8
10000e01:	66 c7 85 08 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5f8],0x4001
10000e0a:	83 ec 10             	sub    esp,0x10
10000e0d:	8d b5 00 fa ff ff    	lea    esi,[ebp-0x600]
10000e13:	eb 92                	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e15:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000e1c:	c7 85 0c fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5f4],0x3ef3fde6
10000e26:	c7 85 10 fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5f0],0x268826a1
10000e30:	66 c7 85 14 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5ec],0x3ffe
10000e39:	83 ec 10             	sub    esp,0x10
10000e3c:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000e42:	e9 60 ff ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e47:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000e4e:	c7 85 18 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5e8],0xf473de68
10000e58:	c7 85 1c fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5e4],0x2c5c85fd
10000e62:	66 c7 85 20 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5e0],0x3fff
10000e6b:	83 ec 10             	sub    esp,0x10
10000e6e:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000e74:	e9 2e ff ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000e79:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000e80:	c7 85 24 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5dc],0x0
10000e8a:	c7 85 28 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5d8],0x0
10000e94:	66 c7 85 2c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5d4],0x3fff
10000e9d:	83 ec 10             	sub    esp,0x10
10000ea0:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000ea6:	e9 fc fe ff ff       	jmp    10000da7 <x87Handler(regs*)+0x1cf>
10000eab:	8d 50 40             	lea    edx,[eax+0x40]
10000eae:	80 fa 07             	cmp    dl,0x7
10000eb1:	77 27                	ja     10000eda <x87Handler(regs*)+0x302>
10000eb3:	8d b5 38 fb ff ff    	lea    esi,[ebp-0x4c8]
10000eb9:	57                   	push   edi
10000eba:	57                   	push   edi
10000ebb:	2d c0 00 00 00       	sub    eax,0xc0
10000ec0:	50                   	push   eax
10000ec1:	56                   	push   esi
10000ec2:	e8 fc ff ff ff       	call   10000ec3 <x87Handler(regs*)+0x2eb>	10000ec3: R_386_PC32	fpuGetReg(int)
10000ec7:	83 ec 14             	sub    esp,0x14
10000eca:	b9 03 00 00 00       	mov    ecx,0x3
10000ecf:	89 e7                	mov    edi,esp
10000ed1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ed3:	e8 fc ff ff ff       	call   10000ed4 <x87Handler(regs*)+0x2fc>	10000ed4: R_386_PC32	fpuPush(_Float80)
10000ed8:	eb 63                	jmp    10000f3d <x87Handler(regs*)+0x365>
10000eda:	8d 50 38             	lea    edx,[eax+0x38]
10000edd:	80 fa 07             	cmp    dl,0x7
10000ee0:	77 64                	ja     10000f46 <x87Handler(regs*)+0x36e>
10000ee2:	8d 55 dc             	lea    edx,[ebp-0x24]
10000ee5:	56                   	push   esi
10000ee6:	56                   	push   esi
10000ee7:	2d c8 00 00 00       	sub    eax,0xc8
10000eec:	50                   	push   eax
10000eed:	52                   	push   edx
10000eee:	e8 fc ff ff ff       	call   10000eef <x87Handler(regs*)+0x317>	10000eef: R_386_PC32	fpuGetReg(int)
10000ef3:	8d b5 44 fb ff ff    	lea    esi,[ebp-0x4bc]
10000ef9:	83 ec 0c             	sub    esp,0xc
10000efc:	6a 00                	push   0x0
10000efe:	56                   	push   esi
10000eff:	e8 fc ff ff ff       	call   10000f00 <x87Handler(regs*)+0x328>	10000f00: R_386_PC32	fpuGetReg(int)
10000f04:	83 c4 10             	add    esp,0x10
10000f07:	b9 03 00 00 00       	mov    ecx,0x3
10000f0c:	89 e7                	mov    edi,esp
10000f0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f10:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f16:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000f1a:	2d c8 00 00 00       	sub    eax,0xc8
10000f1f:	50                   	push   eax
10000f20:	e8 fc ff ff ff       	call   10000f21 <x87Handler(regs*)+0x349>	10000f21: R_386_PC32	fpuSetReg(int, _Float80)
10000f25:	83 ec 0c             	sub    esp,0xc
10000f28:	b9 03 00 00 00       	mov    ecx,0x3
10000f2d:	89 e7                	mov    edi,esp
10000f2f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000f32:	89 d6                	mov    esi,edx
10000f34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f36:	6a 00                	push   0x0
10000f38:	e8 fc ff ff ff       	call   10000f39 <x87Handler(regs*)+0x361>	10000f39: R_386_PC32	fpuSetReg(int, _Float80)
10000f3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f41:	e9 8e 00 00 00       	jmp    10000fd4 <x87Handler(regs*)+0x3fc>
10000f46:	8a 85 a7 f9 ff ff    	mov    al,BYTE PTR [ebp-0x659]
10000f4c:	84 c0                	test   al,al
10000f4e:	75 18                	jne    10000f68 <x87Handler(regs*)+0x390>
10000f50:	8d b5 e4 fd ff ff    	lea    esi,[ebp-0x21c]
10000f56:	51                   	push   ecx
10000f57:	51                   	push   ecx
10000f58:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000f5e:	ff 30                	push   DWORD PTR [eax]
10000f60:	56                   	push   esi
10000f61:	e8 fc ff ff ff       	call   10000f62 <x87Handler(regs*)+0x38a>	10000f62: R_386_PC32	fpu32ToInternal(unsigned int)
10000f66:	eb 52                	jmp    10000fba <x87Handler(regs*)+0x3e2>
10000f68:	3c 03                	cmp    al,0x3
10000f6a:	0f 84 a1 00 00 00    	je     10001011 <x87Handler(regs*)+0x439>
10000f70:	3c 05                	cmp    al,0x5
10000f72:	75 14                	jne    10000f88 <x87Handler(regs*)+0x3b0>
10000f74:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000f7a:	66 8b 00             	mov    ax,WORD PTR [eax]
10000f7d:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000f7f: R_386_32	fpuState
10000f83:	e9 89 00 00 00       	jmp    10001011 <x87Handler(regs*)+0x439>
10000f88:	3c 07                	cmp    al,0x7
10000f8a:	0f 84 81 00 00 00    	je     10001011 <x87Handler(regs*)+0x439>
10000f90:	31 c0                	xor    eax,eax
10000f92:	e9 c8 13 00 00       	jmp    1000235f <x87Handler(regs*)+0x1787>
10000f97:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10000f9d:	84 d2                	test   dl,dl
10000f9f:	0f 85 75 12 00 00    	jne    1000221a <x87Handler(regs*)+0x1642>
10000fa5:	8d 75 88             	lea    esi,[ebp-0x78]
10000fa8:	50                   	push   eax
10000fa9:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000faf:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000fb2:	ff 30                	push   DWORD PTR [eax]
10000fb4:	56                   	push   esi
10000fb5:	e8 fc ff ff ff       	call   10000fb6 <x87Handler(regs*)+0x3de>	10000fb6: R_386_PC32	fpu64ToInternal(unsigned long long)
10000fba:	83 ec 14             	sub    esp,0x14
10000fbd:	b9 03 00 00 00       	mov    ecx,0x3
10000fc2:	89 e7                	mov    edi,esp
10000fc4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fc6:	e8 fc ff ff ff       	call   10000fc7 <x87Handler(regs*)+0x3ef>	10000fc7: R_386_PC32	fpuPush(_Float80)
10000fcb:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10000fd1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000fd4:	83 c4 20             	add    esp,0x20
10000fd7:	e9 68 fd ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10000fdc:	80 fa 02             	cmp    dl,0x2
10000fdf:	0f 85 a9 0e 00 00    	jne    10001e8e <x87Handler(regs*)+0x12b6>
10000fe5:	8d b5 68 fe ff ff    	lea    esi,[ebp-0x198]
10000feb:	50                   	push   eax
10000fec:	50                   	push   eax
10000fed:	6a 00                	push   0x0
10000fef:	56                   	push   esi
10000ff0:	e8 fc ff ff ff       	call   10000ff1 <x87Handler(regs*)+0x419>	10000ff1: R_386_PC32	fpuGetReg(int)
10000ff5:	83 ec 14             	sub    esp,0x14
10000ff8:	b9 03 00 00 00       	mov    ecx,0x3
10000ffd:	89 e7                	mov    edi,esp
10000fff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001001:	e8 fc ff ff ff       	call   10001002 <x87Handler(regs*)+0x42a>	10001002: R_386_PC32	fpuFloatToLong(_Float80)
10001006:	83 c4 20             	add    esp,0x20
10001009:	8b 95 90 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x670]
1000100f:	89 02                	mov    DWORD PTR [edx],eax
10001011:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10001017:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000101a:	e9 25 fd ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
1000101f:	80 fa d8             	cmp    dl,0xd8
10001022:	0f 85 56 03 00 00    	jne    1000137e <x87Handler(regs*)+0x7a6>
10001028:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000102e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001032:	8d 50 40             	lea    edx,[eax+0x40]
10001035:	80 fa 07             	cmp    dl,0x7
10001038:	77 64                	ja     1000109e <x87Handler(regs*)+0x4c6>
1000103a:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10001040:	57                   	push   edi
10001041:	57                   	push   edi
10001042:	2d c0 00 00 00       	sub    eax,0xc0
10001047:	50                   	push   eax
10001048:	56                   	push   esi
10001049:	e8 fc ff ff ff       	call   1000104a <x87Handler(regs*)+0x472>	1000104a: R_386_PC32	fpuGetReg(int)
1000104e:	8d 95 3c fa ff ff    	lea    edx,[ebp-0x5c4]
10001054:	83 ec 0c             	sub    esp,0xc
10001057:	6a 00                	push   0x0
10001059:	52                   	push   edx
1000105a:	e8 fc ff ff ff       	call   1000105b <x87Handler(regs*)+0x483>	1000105b: R_386_PC32	fpuGetReg(int)
1000105f:	8d 85 48 fa ff ff    	lea    eax,[ebp-0x5b8]
10001065:	52                   	push   edx
10001066:	b9 03 00 00 00       	mov    ecx,0x3
1000106b:	89 e7                	mov    edi,esp
1000106d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000106f:	83 ec 0c             	sub    esp,0xc
10001072:	b9 03 00 00 00       	mov    ecx,0x3
10001077:	89 e7                	mov    edi,esp
10001079:	8d 95 3c fa ff ff    	lea    edx,[ebp-0x5c4]
1000107f:	89 d6                	mov    esi,edx
10001081:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001083:	50                   	push   eax
10001084:	e8 fc ff ff ff       	call   10001085 <x87Handler(regs*)+0x4ad>	10001085: R_386_PC32	fpuAdd(_Float80, _Float80)
10001089:	83 c4 20             	add    esp,0x20
1000108c:	b9 03 00 00 00       	mov    ecx,0x3
10001091:	89 e7                	mov    edi,esp
10001093:	8d 85 48 fa ff ff    	lea    eax,[ebp-0x5b8]
10001099:	e9 e0 01 00 00       	jmp    1000127e <x87Handler(regs*)+0x6a6>
1000109e:	8d 50 38             	lea    edx,[eax+0x38]
100010a1:	80 fa 07             	cmp    dl,0x7
100010a4:	77 64                	ja     1000110a <x87Handler(regs*)+0x532>
100010a6:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
100010ac:	52                   	push   edx
100010ad:	52                   	push   edx
100010ae:	2d c8 00 00 00       	sub    eax,0xc8
100010b3:	50                   	push   eax
100010b4:	56                   	push   esi
100010b5:	e8 fc ff ff ff       	call   100010b6 <x87Handler(regs*)+0x4de>	100010b6: R_386_PC32	fpuGetReg(int)
100010ba:	8d 95 60 fa ff ff    	lea    edx,[ebp-0x5a0]
100010c0:	83 ec 0c             	sub    esp,0xc
100010c3:	6a 00                	push   0x0
100010c5:	52                   	push   edx
100010c6:	e8 fc ff ff ff       	call   100010c7 <x87Handler(regs*)+0x4ef>	100010c7: R_386_PC32	fpuGetReg(int)
100010cb:	8d 85 6c fa ff ff    	lea    eax,[ebp-0x594]
100010d1:	51                   	push   ecx
100010d2:	b9 03 00 00 00       	mov    ecx,0x3
100010d7:	89 e7                	mov    edi,esp
100010d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010db:	83 ec 0c             	sub    esp,0xc
100010de:	b9 03 00 00 00       	mov    ecx,0x3
100010e3:	89 e7                	mov    edi,esp
100010e5:	8d 95 60 fa ff ff    	lea    edx,[ebp-0x5a0]
100010eb:	89 d6                	mov    esi,edx
100010ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010ef:	50                   	push   eax
100010f0:	e8 fc ff ff ff       	call   100010f1 <x87Handler(regs*)+0x519>	100010f1: R_386_PC32	fpuMultiply(_Float80, _Float80)
100010f5:	83 c4 20             	add    esp,0x20
100010f8:	b9 03 00 00 00       	mov    ecx,0x3
100010fd:	89 e7                	mov    edi,esp
100010ff:	8d 85 6c fa ff ff    	lea    eax,[ebp-0x594]
10001105:	e9 74 01 00 00       	jmp    1000127e <x87Handler(regs*)+0x6a6>
1000110a:	8d 50 30             	lea    edx,[eax+0x30]
1000110d:	80 fa 07             	cmp    dl,0x7
10001110:	77 45                	ja     10001157 <x87Handler(regs*)+0x57f>
10001112:	8d b5 78 fa ff ff    	lea    esi,[ebp-0x588]
10001118:	57                   	push   edi
10001119:	57                   	push   edi
1000111a:	2d d0 00 00 00       	sub    eax,0xd0
1000111f:	50                   	push   eax
10001120:	56                   	push   esi
10001121:	e8 fc ff ff ff       	call   10001122 <x87Handler(regs*)+0x54a>	10001122: R_386_PC32	fpuGetReg(int)
10001126:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
1000112c:	83 ec 0c             	sub    esp,0xc
1000112f:	6a 00                	push   0x0
10001131:	50                   	push   eax
10001132:	e8 fc ff ff ff       	call   10001133 <x87Handler(regs*)+0x55b>	10001133: R_386_PC32	fpuGetReg(int)
10001137:	50                   	push   eax
10001138:	50                   	push   eax
10001139:	b9 03 00 00 00       	mov    ecx,0x3
1000113e:	89 e7                	mov    edi,esp
10001140:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001142:	83 ec 0c             	sub    esp,0xc
10001145:	b9 03 00 00 00       	mov    ecx,0x3
1000114a:	89 e7                	mov    edi,esp
1000114c:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
10001152:	e9 c6 07 00 00       	jmp    1000191d <x87Handler(regs*)+0xd45>
10001157:	8d 50 28             	lea    edx,[eax+0x28]
1000115a:	80 fa 07             	cmp    dl,0x7
1000115d:	77 45                	ja     100011a4 <x87Handler(regs*)+0x5cc>
1000115f:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
10001165:	52                   	push   edx
10001166:	52                   	push   edx
10001167:	2d d8 00 00 00       	sub    eax,0xd8
1000116c:	50                   	push   eax
1000116d:	56                   	push   esi
1000116e:	e8 fc ff ff ff       	call   1000116f <x87Handler(regs*)+0x597>	1000116f: R_386_PC32	fpuGetReg(int)
10001173:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
10001179:	83 ec 0c             	sub    esp,0xc
1000117c:	6a 00                	push   0x0
1000117e:	50                   	push   eax
1000117f:	e8 fc ff ff ff       	call   10001180 <x87Handler(regs*)+0x5a8>	10001180: R_386_PC32	fpuGetReg(int)
10001184:	51                   	push   ecx
10001185:	51                   	push   ecx
10001186:	b9 03 00 00 00       	mov    ecx,0x3
1000118b:	89 e7                	mov    edi,esp
1000118d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000118f:	83 ec 0c             	sub    esp,0xc
10001192:	b9 03 00 00 00       	mov    ecx,0x3
10001197:	89 e7                	mov    edi,esp
10001199:	8d 85 9c fa ff ff    	lea    eax,[ebp-0x564]
1000119f:	e9 d7 07 00 00       	jmp    1000197b <x87Handler(regs*)+0xda3>
100011a4:	8d 50 20             	lea    edx,[eax+0x20]
100011a7:	80 fa 07             	cmp    dl,0x7
100011aa:	77 61                	ja     1000120d <x87Handler(regs*)+0x635>
100011ac:	8d b5 a8 fa ff ff    	lea    esi,[ebp-0x558]
100011b2:	51                   	push   ecx
100011b3:	51                   	push   ecx
100011b4:	2d e0 00 00 00       	sub    eax,0xe0
100011b9:	50                   	push   eax
100011ba:	56                   	push   esi
100011bb:	e8 fc ff ff ff       	call   100011bc <x87Handler(regs*)+0x5e4>	100011bc: R_386_PC32	fpuGetReg(int)
100011c0:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
100011c6:	83 ec 0c             	sub    esp,0xc
100011c9:	6a 00                	push   0x0
100011cb:	52                   	push   edx
100011cc:	e8 fc ff ff ff       	call   100011cd <x87Handler(regs*)+0x5f5>	100011cd: R_386_PC32	fpuGetReg(int)
100011d1:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100011d7:	57                   	push   edi
100011d8:	b9 03 00 00 00       	mov    ecx,0x3
100011dd:	89 e7                	mov    edi,esp
100011df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011e1:	83 ec 0c             	sub    esp,0xc
100011e4:	b9 03 00 00 00       	mov    ecx,0x3
100011e9:	89 e7                	mov    edi,esp
100011eb:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
100011f1:	89 d6                	mov    esi,edx
100011f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011f5:	50                   	push   eax
100011f6:	e8 fc ff ff ff       	call   100011f7 <x87Handler(regs*)+0x61f>	100011f7: R_386_PC32	fpuSub(_Float80, _Float80)
100011fb:	83 c4 20             	add    esp,0x20
100011fe:	b9 03 00 00 00       	mov    ecx,0x3
10001203:	89 e7                	mov    edi,esp
10001205:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
1000120b:	eb 71                	jmp    1000127e <x87Handler(regs*)+0x6a6>
1000120d:	8d 50 18             	lea    edx,[eax+0x18]
10001210:	80 fa 07             	cmp    dl,0x7
10001213:	77 70                	ja     10001285 <x87Handler(regs*)+0x6ad>
10001215:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
1000121b:	50                   	push   eax
1000121c:	50                   	push   eax
1000121d:	6a 00                	push   0x0
1000121f:	56                   	push   esi
10001220:	e8 fc ff ff ff       	call   10001221 <x87Handler(regs*)+0x649>	10001221: R_386_PC32	fpuGetReg(int)
10001225:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
1000122b:	83 ec 0c             	sub    esp,0xc
1000122e:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001234:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001238:	2d e8 00 00 00       	sub    eax,0xe8
1000123d:	50                   	push   eax
1000123e:	52                   	push   edx
1000123f:	e8 fc ff ff ff       	call   10001240 <x87Handler(regs*)+0x668>	10001240: R_386_PC32	fpuGetReg(int)
10001244:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
1000124a:	52                   	push   edx
1000124b:	b9 03 00 00 00       	mov    ecx,0x3
10001250:	89 e7                	mov    edi,esp
10001252:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001254:	83 ec 0c             	sub    esp,0xc
10001257:	b9 03 00 00 00       	mov    ecx,0x3
1000125c:	89 e7                	mov    edi,esp
1000125e:	8d 95 d8 fa ff ff    	lea    edx,[ebp-0x528]
10001264:	89 d6                	mov    esi,edx
10001266:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001268:	50                   	push   eax
10001269:	e8 fc ff ff ff       	call   1000126a <x87Handler(regs*)+0x692>	1000126a: R_386_PC32	fpuSub(_Float80, _Float80)
1000126e:	83 c4 20             	add    esp,0x20
10001271:	b9 03 00 00 00       	mov    ecx,0x3
10001276:	89 e7                	mov    edi,esp
10001278:	8d 85 e4 fa ff ff    	lea    eax,[ebp-0x51c]
1000127e:	89 c6                	mov    esi,eax
10001280:	e9 af fa ff ff       	jmp    10000d34 <x87Handler(regs*)+0x15c>
10001285:	8d 50 10             	lea    edx,[eax+0x10]
10001288:	80 fa 07             	cmp    dl,0x7
1000128b:	77 61                	ja     100012ee <x87Handler(regs*)+0x716>
1000128d:	8d b5 f0 fa ff ff    	lea    esi,[ebp-0x510]
10001293:	51                   	push   ecx
10001294:	51                   	push   ecx
10001295:	2d f0 00 00 00       	sub    eax,0xf0
1000129a:	50                   	push   eax
1000129b:	56                   	push   esi
1000129c:	e8 fc ff ff ff       	call   1000129d <x87Handler(regs*)+0x6c5>	1000129d: R_386_PC32	fpuGetReg(int)
100012a1:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
100012a7:	83 ec 0c             	sub    esp,0xc
100012aa:	6a 00                	push   0x0
100012ac:	52                   	push   edx
100012ad:	e8 fc ff ff ff       	call   100012ae <x87Handler(regs*)+0x6d6>	100012ae: R_386_PC32	fpuGetReg(int)
100012b2:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
100012b8:	57                   	push   edi
100012b9:	b9 03 00 00 00       	mov    ecx,0x3
100012be:	89 e7                	mov    edi,esp
100012c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012c2:	83 ec 0c             	sub    esp,0xc
100012c5:	b9 03 00 00 00       	mov    ecx,0x3
100012ca:	89 e7                	mov    edi,esp
100012cc:	8d 95 fc fa ff ff    	lea    edx,[ebp-0x504]
100012d2:	89 d6                	mov    esi,edx
100012d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012d6:	50                   	push   eax
100012d7:	e8 fc ff ff ff       	call   100012d8 <x87Handler(regs*)+0x700>	100012d8: R_386_PC32	fpuDivide(_Float80, _Float80)
100012dc:	83 c4 20             	add    esp,0x20
100012df:	b9 03 00 00 00       	mov    ecx,0x3
100012e4:	89 e7                	mov    edi,esp
100012e6:	8d 85 08 fb ff ff    	lea    eax,[ebp-0x4f8]
100012ec:	eb 71                	jmp    1000135f <x87Handler(regs*)+0x787>
100012ee:	3c f7                	cmp    al,0xf7
100012f0:	0f 86 86 07 00 00    	jbe    10001a7c <x87Handler(regs*)+0xea4>
100012f6:	8d b5 14 fb ff ff    	lea    esi,[ebp-0x4ec]
100012fc:	50                   	push   eax
100012fd:	50                   	push   eax
100012fe:	6a 00                	push   0x0
10001300:	56                   	push   esi
10001301:	e8 fc ff ff ff       	call   10001302 <x87Handler(regs*)+0x72a>	10001302: R_386_PC32	fpuGetReg(int)
10001306:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
1000130c:	83 ec 0c             	sub    esp,0xc
1000130f:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001315:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001319:	2d f8 00 00 00       	sub    eax,0xf8
1000131e:	50                   	push   eax
1000131f:	52                   	push   edx
10001320:	e8 fc ff ff ff       	call   10001321 <x87Handler(regs*)+0x749>	10001321: R_386_PC32	fpuGetReg(int)
10001325:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
1000132b:	52                   	push   edx
1000132c:	b9 03 00 00 00       	mov    ecx,0x3
10001331:	89 e7                	mov    edi,esp
10001333:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001335:	83 ec 0c             	sub    esp,0xc
10001338:	b9 03 00 00 00       	mov    ecx,0x3
1000133d:	89 e7                	mov    edi,esp
1000133f:	8d 95 20 fb ff ff    	lea    edx,[ebp-0x4e0]
10001345:	89 d6                	mov    esi,edx
10001347:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001349:	50                   	push   eax
1000134a:	e8 fc ff ff ff       	call   1000134b <x87Handler(regs*)+0x773>	1000134b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000134f:	83 c4 20             	add    esp,0x20
10001352:	b9 03 00 00 00       	mov    ecx,0x3
10001357:	89 e7                	mov    edi,esp
10001359:	8d 85 2c fb ff ff    	lea    eax,[ebp-0x4d4]
1000135f:	89 c6                	mov    esi,eax
10001361:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001363:	6a 00                	push   0x0
10001365:	e8 fc ff ff ff       	call   10001366 <x87Handler(regs*)+0x78e>	10001366: R_386_PC32	fpuSetReg(int, _Float80)
1000136a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000136e:	8d 45 dc             	lea    eax,[ebp-0x24]
10001371:	89 04 24             	mov    DWORD PTR [esp],eax
10001374:	e8 fc ff ff ff       	call   10001375 <x87Handler(regs*)+0x79d>	10001375: R_386_PC32	fpuPop()
10001379:	e9 d8 0c 00 00       	jmp    10002056 <x87Handler(regs*)+0x147e>
1000137e:	80 fa dc             	cmp    dl,0xdc
10001381:	0f 85 94 01 00 00    	jne    1000151b <x87Handler(regs*)+0x943>
10001387:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000138d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001391:	8d 50 40             	lea    edx,[eax+0x40]
10001394:	80 fa 07             	cmp    dl,0x7
10001397:	77 77                	ja     10001410 <x87Handler(regs*)+0x838>
10001399:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
1000139f:	52                   	push   edx
100013a0:	52                   	push   edx
100013a1:	2d c0 00 00 00       	sub    eax,0xc0
100013a6:	50                   	push   eax
100013a7:	56                   	push   esi
100013a8:	e8 fc ff ff ff       	call   100013a9 <x87Handler(regs*)+0x7d1>	100013a9: R_386_PC32	fpuGetReg(int)
100013ad:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
100013b3:	83 ec 0c             	sub    esp,0xc
100013b6:	6a 00                	push   0x0
100013b8:	52                   	push   edx
100013b9:	e8 fc ff ff ff       	call   100013ba <x87Handler(regs*)+0x7e2>	100013ba: R_386_PC32	fpuGetReg(int)
100013be:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100013c4:	51                   	push   ecx
100013c5:	b9 03 00 00 00       	mov    ecx,0x3
100013ca:	89 e7                	mov    edi,esp
100013cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013ce:	83 ec 0c             	sub    esp,0xc
100013d1:	b9 03 00 00 00       	mov    ecx,0x3
100013d6:	89 e7                	mov    edi,esp
100013d8:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
100013de:	89 d6                	mov    esi,edx
100013e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013e2:	50                   	push   eax
100013e3:	e8 fc ff ff ff       	call   100013e4 <x87Handler(regs*)+0x80c>	100013e4: R_386_PC32	fpuAdd(_Float80, _Float80)
100013e8:	83 c4 20             	add    esp,0x20
100013eb:	b9 03 00 00 00       	mov    ecx,0x3
100013f0:	89 e7                	mov    edi,esp
100013f2:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100013f8:	89 c6                	mov    esi,eax
100013fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013fc:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001402:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001406:	2d c0 00 00 00       	sub    eax,0xc0
1000140b:	e9 8a 04 00 00       	jmp    1000189a <x87Handler(regs*)+0xcc2>
10001410:	8d 50 38             	lea    edx,[eax+0x38]
10001413:	80 fa 07             	cmp    dl,0x7
10001416:	77 77                	ja     1000148f <x87Handler(regs*)+0x8b7>
10001418:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
1000141e:	51                   	push   ecx
1000141f:	51                   	push   ecx
10001420:	2d c8 00 00 00       	sub    eax,0xc8
10001425:	50                   	push   eax
10001426:	56                   	push   esi
10001427:	e8 fc ff ff ff       	call   10001428 <x87Handler(regs*)+0x850>	10001428: R_386_PC32	fpuGetReg(int)
1000142c:	8d 95 80 fb ff ff    	lea    edx,[ebp-0x480]
10001432:	83 ec 0c             	sub    esp,0xc
10001435:	6a 00                	push   0x0
10001437:	52                   	push   edx
10001438:	e8 fc ff ff ff       	call   10001439 <x87Handler(regs*)+0x861>	10001439: R_386_PC32	fpuGetReg(int)
1000143d:	8d 85 8c fb ff ff    	lea    eax,[ebp-0x474]
10001443:	57                   	push   edi
10001444:	b9 03 00 00 00       	mov    ecx,0x3
10001449:	89 e7                	mov    edi,esp
1000144b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000144d:	83 ec 0c             	sub    esp,0xc
10001450:	b9 03 00 00 00       	mov    ecx,0x3
10001455:	89 e7                	mov    edi,esp
10001457:	8d 95 80 fb ff ff    	lea    edx,[ebp-0x480]
1000145d:	89 d6                	mov    esi,edx
1000145f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001461:	50                   	push   eax
10001462:	e8 fc ff ff ff       	call   10001463 <x87Handler(regs*)+0x88b>	10001463: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001467:	83 c4 20             	add    esp,0x20
1000146a:	b9 03 00 00 00       	mov    ecx,0x3
1000146f:	89 e7                	mov    edi,esp
10001471:	8d 85 8c fb ff ff    	lea    eax,[ebp-0x474]
10001477:	89 c6                	mov    esi,eax
10001479:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000147b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001481:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001485:	2d c8 00 00 00       	sub    eax,0xc8
1000148a:	e9 0b 04 00 00       	jmp    1000189a <x87Handler(regs*)+0xcc2>
1000148f:	83 c0 18             	add    eax,0x18
10001492:	3c 07                	cmp    al,0x7
10001494:	0f 87 13 0a 00 00    	ja     10001ead <x87Handler(regs*)+0x12d5>
1000149a:	8d b5 98 fb ff ff    	lea    esi,[ebp-0x468]
100014a0:	57                   	push   edi
100014a1:	57                   	push   edi
100014a2:	6a 00                	push   0x0
100014a4:	56                   	push   esi
100014a5:	e8 fc ff ff ff       	call   100014a6 <x87Handler(regs*)+0x8ce>	100014a6: R_386_PC32	fpuGetReg(int)
100014aa:	8d 95 a4 fb ff ff    	lea    edx,[ebp-0x45c]
100014b0:	83 ec 0c             	sub    esp,0xc
100014b3:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100014b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014bd:	2d e8 00 00 00       	sub    eax,0xe8
100014c2:	50                   	push   eax
100014c3:	52                   	push   edx
100014c4:	e8 fc ff ff ff       	call   100014c5 <x87Handler(regs*)+0x8ed>	100014c5: R_386_PC32	fpuGetReg(int)
100014c9:	8d 85 b0 fb ff ff    	lea    eax,[ebp-0x450]
100014cf:	52                   	push   edx
100014d0:	b9 03 00 00 00       	mov    ecx,0x3
100014d5:	89 e7                	mov    edi,esp
100014d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014d9:	83 ec 0c             	sub    esp,0xc
100014dc:	b9 03 00 00 00       	mov    ecx,0x3
100014e1:	89 e7                	mov    edi,esp
100014e3:	8d 95 a4 fb ff ff    	lea    edx,[ebp-0x45c]
100014e9:	89 d6                	mov    esi,edx
100014eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014ed:	50                   	push   eax
100014ee:	e8 fc ff ff ff       	call   100014ef <x87Handler(regs*)+0x917>	100014ef: R_386_PC32	fpuSub(_Float80, _Float80)
100014f3:	83 c4 20             	add    esp,0x20
100014f6:	b9 03 00 00 00       	mov    ecx,0x3
100014fb:	89 e7                	mov    edi,esp
100014fd:	8d 85 b0 fb ff ff    	lea    eax,[ebp-0x450]
10001503:	89 c6                	mov    esi,eax
10001505:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001507:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000150d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001511:	2d e8 00 00 00       	sub    eax,0xe8
10001516:	e9 7f 03 00 00       	jmp    1000189a <x87Handler(regs*)+0xcc2>
1000151b:	80 fa de             	cmp    dl,0xde
1000151e:	0f 85 33 03 00 00    	jne    10001857 <x87Handler(regs*)+0xc7f>
10001524:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000152a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000152e:	8d 50 40             	lea    edx,[eax+0x40]
10001531:	80 fa 07             	cmp    dl,0x7
10001534:	0f 87 8c 00 00 00    	ja     100015c6 <x87Handler(regs*)+0x9ee>
1000153a:	8d b5 bc fb ff ff    	lea    esi,[ebp-0x444]
10001540:	52                   	push   edx
10001541:	52                   	push   edx
10001542:	2d c0 00 00 00       	sub    eax,0xc0
10001547:	50                   	push   eax
10001548:	56                   	push   esi
10001549:	e8 fc ff ff ff       	call   1000154a <x87Handler(regs*)+0x972>	1000154a: R_386_PC32	fpuGetReg(int)
1000154e:	8d 95 c8 fb ff ff    	lea    edx,[ebp-0x438]
10001554:	83 ec 0c             	sub    esp,0xc
10001557:	6a 00                	push   0x0
10001559:	52                   	push   edx
1000155a:	e8 fc ff ff ff       	call   1000155b <x87Handler(regs*)+0x983>	1000155b: R_386_PC32	fpuGetReg(int)
1000155f:	8d 85 d4 fb ff ff    	lea    eax,[ebp-0x42c]
10001565:	51                   	push   ecx
10001566:	b9 03 00 00 00       	mov    ecx,0x3
1000156b:	89 e7                	mov    edi,esp
1000156d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000156f:	83 ec 0c             	sub    esp,0xc
10001572:	b9 03 00 00 00       	mov    ecx,0x3
10001577:	89 e7                	mov    edi,esp
10001579:	8d 95 c8 fb ff ff    	lea    edx,[ebp-0x438]
1000157f:	89 d6                	mov    esi,edx
10001581:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001583:	50                   	push   eax
10001584:	e8 fc ff ff ff       	call   10001585 <x87Handler(regs*)+0x9ad>	10001585: R_386_PC32	fpuAdd(_Float80, _Float80)
10001589:	83 c4 20             	add    esp,0x20
1000158c:	b9 03 00 00 00       	mov    ecx,0x3
10001591:	89 e7                	mov    edi,esp
10001593:	8d 85 d4 fb ff ff    	lea    eax,[ebp-0x42c]
10001599:	89 c6                	mov    esi,eax
1000159b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000159d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100015a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100015a7:	2d c0 00 00 00       	sub    eax,0xc0
100015ac:	50                   	push   eax
100015ad:	e8 fc ff ff ff       	call   100015ae <x87Handler(regs*)+0x9d6>	100015ae: R_386_PC32	fpuSetReg(int, _Float80)
100015b2:	8d 45 dc             	lea    eax,[ebp-0x24]
100015b5:	89 04 24             	mov    DWORD PTR [esp],eax
100015b8:	e8 fc ff ff ff       	call   100015b9 <x87Handler(regs*)+0x9e1>	100015b9: R_386_PC32	fpuPop()
100015bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100015c1:	e9 90 0a 00 00       	jmp    10002056 <x87Handler(regs*)+0x147e>
100015c6:	8d 50 20             	lea    edx,[eax+0x20]
100015c9:	80 fa 07             	cmp    dl,0x7
100015cc:	77 77                	ja     10001645 <x87Handler(regs*)+0xa6d>
100015ce:	8d b5 e0 fb ff ff    	lea    esi,[ebp-0x420]
100015d4:	51                   	push   ecx
100015d5:	51                   	push   ecx
100015d6:	2d e0 00 00 00       	sub    eax,0xe0
100015db:	50                   	push   eax
100015dc:	56                   	push   esi
100015dd:	e8 fc ff ff ff       	call   100015de <x87Handler(regs*)+0xa06>	100015de: R_386_PC32	fpuGetReg(int)
100015e2:	8d 95 ec fb ff ff    	lea    edx,[ebp-0x414]
100015e8:	83 ec 0c             	sub    esp,0xc
100015eb:	6a 00                	push   0x0
100015ed:	52                   	push   edx
100015ee:	e8 fc ff ff ff       	call   100015ef <x87Handler(regs*)+0xa17>	100015ef: R_386_PC32	fpuGetReg(int)
100015f3:	8d 85 f8 fb ff ff    	lea    eax,[ebp-0x408]
100015f9:	57                   	push   edi
100015fa:	b9 03 00 00 00       	mov    ecx,0x3
100015ff:	89 e7                	mov    edi,esp
10001601:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001603:	83 ec 0c             	sub    esp,0xc
10001606:	b9 03 00 00 00       	mov    ecx,0x3
1000160b:	89 e7                	mov    edi,esp
1000160d:	8d 95 ec fb ff ff    	lea    edx,[ebp-0x414]
10001613:	89 d6                	mov    esi,edx
10001615:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001617:	50                   	push   eax
10001618:	e8 fc ff ff ff       	call   10001619 <x87Handler(regs*)+0xa41>	10001619: R_386_PC32	fpuSub(_Float80, _Float80)
1000161d:	83 c4 20             	add    esp,0x20
10001620:	b9 03 00 00 00       	mov    ecx,0x3
10001625:	89 e7                	mov    edi,esp
10001627:	8d 85 f8 fb ff ff    	lea    eax,[ebp-0x408]
1000162d:	89 c6                	mov    esi,eax
1000162f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001631:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001637:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000163b:	2d e0 00 00 00       	sub    eax,0xe0
10001640:	e9 67 ff ff ff       	jmp    100015ac <x87Handler(regs*)+0x9d4>
10001645:	8d 50 18             	lea    edx,[eax+0x18]
10001648:	80 fa 07             	cmp    dl,0x7
1000164b:	0f 87 81 00 00 00    	ja     100016d2 <x87Handler(regs*)+0xafa>
10001651:	8d b5 04 fc ff ff    	lea    esi,[ebp-0x3fc]
10001657:	50                   	push   eax
10001658:	50                   	push   eax
10001659:	6a 00                	push   0x0
1000165b:	56                   	push   esi
1000165c:	e8 fc ff ff ff       	call   1000165d <x87Handler(regs*)+0xa85>	1000165d: R_386_PC32	fpuGetReg(int)
10001661:	8d 95 10 fc ff ff    	lea    edx,[ebp-0x3f0]
10001667:	83 ec 0c             	sub    esp,0xc
1000166a:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001670:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001674:	2d e8 00 00 00       	sub    eax,0xe8
10001679:	50                   	push   eax
1000167a:	52                   	push   edx
1000167b:	e8 fc ff ff ff       	call   1000167c <x87Handler(regs*)+0xaa4>	1000167c: R_386_PC32	fpuGetReg(int)
10001680:	8d 85 1c fc ff ff    	lea    eax,[ebp-0x3e4]
10001686:	52                   	push   edx
10001687:	b9 03 00 00 00       	mov    ecx,0x3
1000168c:	89 e7                	mov    edi,esp
1000168e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001690:	83 ec 0c             	sub    esp,0xc
10001693:	b9 03 00 00 00       	mov    ecx,0x3
10001698:	89 e7                	mov    edi,esp
1000169a:	8d 95 10 fc ff ff    	lea    edx,[ebp-0x3f0]
100016a0:	89 d6                	mov    esi,edx
100016a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016a4:	50                   	push   eax
100016a5:	e8 fc ff ff ff       	call   100016a6 <x87Handler(regs*)+0xace>	100016a6: R_386_PC32	fpuSub(_Float80, _Float80)
100016aa:	83 c4 20             	add    esp,0x20
100016ad:	b9 03 00 00 00       	mov    ecx,0x3
100016b2:	89 e7                	mov    edi,esp
100016b4:	8d 85 1c fc ff ff    	lea    eax,[ebp-0x3e4]
100016ba:	89 c6                	mov    esi,eax
100016bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016be:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100016c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016c8:	2d e8 00 00 00       	sub    eax,0xe8
100016cd:	e9 da fe ff ff       	jmp    100015ac <x87Handler(regs*)+0x9d4>
100016d2:	8d 50 38             	lea    edx,[eax+0x38]
100016d5:	80 fa 07             	cmp    dl,0x7
100016d8:	77 77                	ja     10001751 <x87Handler(regs*)+0xb79>
100016da:	8d b5 28 fc ff ff    	lea    esi,[ebp-0x3d8]
100016e0:	51                   	push   ecx
100016e1:	51                   	push   ecx
100016e2:	2d c8 00 00 00       	sub    eax,0xc8
100016e7:	50                   	push   eax
100016e8:	56                   	push   esi
100016e9:	e8 fc ff ff ff       	call   100016ea <x87Handler(regs*)+0xb12>	100016ea: R_386_PC32	fpuGetReg(int)
100016ee:	8d 95 34 fc ff ff    	lea    edx,[ebp-0x3cc]
100016f4:	83 ec 0c             	sub    esp,0xc
100016f7:	6a 00                	push   0x0
100016f9:	52                   	push   edx
100016fa:	e8 fc ff ff ff       	call   100016fb <x87Handler(regs*)+0xb23>	100016fb: R_386_PC32	fpuGetReg(int)
100016ff:	8d 85 40 fc ff ff    	lea    eax,[ebp-0x3c0]
10001705:	57                   	push   edi
10001706:	b9 03 00 00 00       	mov    ecx,0x3
1000170b:	89 e7                	mov    edi,esp
1000170d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000170f:	83 ec 0c             	sub    esp,0xc
10001712:	b9 03 00 00 00       	mov    ecx,0x3
10001717:	89 e7                	mov    edi,esp
10001719:	8d 95 34 fc ff ff    	lea    edx,[ebp-0x3cc]
1000171f:	89 d6                	mov    esi,edx
10001721:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001723:	50                   	push   eax
10001724:	e8 fc ff ff ff       	call   10001725 <x87Handler(regs*)+0xb4d>	10001725: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001729:	83 c4 20             	add    esp,0x20
1000172c:	b9 03 00 00 00       	mov    ecx,0x3
10001731:	89 e7                	mov    edi,esp
10001733:	8d 85 40 fc ff ff    	lea    eax,[ebp-0x3c0]
10001739:	89 c6                	mov    esi,eax
1000173b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000173d:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001743:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001747:	2d c8 00 00 00       	sub    eax,0xc8
1000174c:	e9 00 01 00 00       	jmp    10001851 <x87Handler(regs*)+0xc79>
10001751:	3c f7                	cmp    al,0xf7
10001753:	76 7e                	jbe    100017d3 <x87Handler(regs*)+0xbfb>
10001755:	8d b5 4c fc ff ff    	lea    esi,[ebp-0x3b4]
1000175b:	57                   	push   edi
1000175c:	57                   	push   edi
1000175d:	6a 00                	push   0x0
1000175f:	56                   	push   esi
10001760:	e8 fc ff ff ff       	call   10001761 <x87Handler(regs*)+0xb89>	10001761: R_386_PC32	fpuGetReg(int)
10001765:	8d 95 58 fc ff ff    	lea    edx,[ebp-0x3a8]
1000176b:	83 ec 0c             	sub    esp,0xc
1000176e:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001774:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001778:	2d f8 00 00 00       	sub    eax,0xf8
1000177d:	50                   	push   eax
1000177e:	52                   	push   edx
1000177f:	e8 fc ff ff ff       	call   10001780 <x87Handler(regs*)+0xba8>	10001780: R_386_PC32	fpuGetReg(int)
10001784:	8d 85 64 fc ff ff    	lea    eax,[ebp-0x39c]
1000178a:	52                   	push   edx
1000178b:	b9 03 00 00 00       	mov    ecx,0x3
10001790:	89 e7                	mov    edi,esp
10001792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001794:	83 ec 0c             	sub    esp,0xc
10001797:	b9 03 00 00 00       	mov    ecx,0x3
1000179c:	89 e7                	mov    edi,esp
1000179e:	8d 95 58 fc ff ff    	lea    edx,[ebp-0x3a8]
100017a4:	89 d6                	mov    esi,edx
100017a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017a8:	50                   	push   eax
100017a9:	e8 fc ff ff ff       	call   100017aa <x87Handler(regs*)+0xbd2>	100017aa: R_386_PC32	fpuDivide(_Float80, _Float80)
100017ae:	83 c4 20             	add    esp,0x20
100017b1:	b9 03 00 00 00       	mov    ecx,0x3
100017b6:	89 e7                	mov    edi,esp
100017b8:	8d 85 64 fc ff ff    	lea    eax,[ebp-0x39c]
100017be:	89 c6                	mov    esi,eax
100017c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017c2:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100017c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017cc:	2d f8 00 00 00       	sub    eax,0xf8
100017d1:	eb 7e                	jmp    10001851 <x87Handler(regs*)+0xc79>
100017d3:	8d 50 10             	lea    edx,[eax+0x10]
100017d6:	80 fa 07             	cmp    dl,0x7
100017d9:	0f 87 08 02 00 00    	ja     100019e7 <x87Handler(regs*)+0xe0f>
100017df:	8d b5 70 fc ff ff    	lea    esi,[ebp-0x390]
100017e5:	52                   	push   edx
100017e6:	52                   	push   edx
100017e7:	2d f0 00 00 00       	sub    eax,0xf0
100017ec:	50                   	push   eax
100017ed:	56                   	push   esi
100017ee:	e8 fc ff ff ff       	call   100017ef <x87Handler(regs*)+0xc17>	100017ef: R_386_PC32	fpuGetReg(int)
100017f3:	8d 95 7c fc ff ff    	lea    edx,[ebp-0x384]
100017f9:	83 ec 0c             	sub    esp,0xc
100017fc:	6a 00                	push   0x0
100017fe:	52                   	push   edx
100017ff:	e8 fc ff ff ff       	call   10001800 <x87Handler(regs*)+0xc28>	10001800: R_386_PC32	fpuGetReg(int)
10001804:	8d 85 88 fc ff ff    	lea    eax,[ebp-0x378]
1000180a:	51                   	push   ecx
1000180b:	b9 03 00 00 00       	mov    ecx,0x3
10001810:	89 e7                	mov    edi,esp
10001812:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001814:	83 ec 0c             	sub    esp,0xc
10001817:	b9 03 00 00 00       	mov    ecx,0x3
1000181c:	89 e7                	mov    edi,esp
1000181e:	8d 95 7c fc ff ff    	lea    edx,[ebp-0x384]
10001824:	89 d6                	mov    esi,edx
10001826:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001828:	50                   	push   eax
10001829:	e8 fc ff ff ff       	call   1000182a <x87Handler(regs*)+0xc52>	1000182a: R_386_PC32	fpuDivide(_Float80, _Float80)
1000182e:	83 c4 20             	add    esp,0x20
10001831:	b9 03 00 00 00       	mov    ecx,0x3
10001836:	89 e7                	mov    edi,esp
10001838:	8d 85 88 fc ff ff    	lea    eax,[ebp-0x378]
1000183e:	89 c6                	mov    esi,eax
10001840:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001842:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000184c:	2d f0 00 00 00       	sub    eax,0xf0
10001851:	50                   	push   eax
10001852:	e9 0e fb ff ff       	jmp    10001365 <x87Handler(regs*)+0x78d>
10001857:	80 fa dd             	cmp    dl,0xdd
1000185a:	0f 85 30 01 00 00    	jne    10001990 <x87Handler(regs*)+0xdb8>
10001860:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001866:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000186a:	8d 50 30             	lea    edx,[eax+0x30]
1000186d:	80 fa 07             	cmp    dl,0x7
10001870:	77 2e                	ja     100018a0 <x87Handler(regs*)+0xcc8>
10001872:	8d b5 94 fc ff ff    	lea    esi,[ebp-0x36c]
10001878:	50                   	push   eax
10001879:	50                   	push   eax
1000187a:	6a 00                	push   0x0
1000187c:	56                   	push   esi
1000187d:	e8 fc ff ff ff       	call   1000187e <x87Handler(regs*)+0xca6>	1000187e: R_386_PC32	fpuGetReg(int)
10001882:	b9 03 00 00 00       	mov    ecx,0x3
10001887:	89 e7                	mov    edi,esp
10001889:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000188b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001891:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001895:	2d d0 00 00 00       	sub    eax,0xd0
1000189a:	50                   	push   eax
1000189b:	e9 98 f4 ff ff       	jmp    10000d38 <x87Handler(regs*)+0x160>
100018a0:	8d 50 28             	lea    edx,[eax+0x28]
100018a3:	80 fa 07             	cmp    dl,0x7
100018a6:	77 2d                	ja     100018d5 <x87Handler(regs*)+0xcfd>
100018a8:	8d b5 a0 fc ff ff    	lea    esi,[ebp-0x360]
100018ae:	50                   	push   eax
100018af:	50                   	push   eax
100018b0:	6a 00                	push   0x0
100018b2:	56                   	push   esi
100018b3:	e8 fc ff ff ff       	call   100018b4 <x87Handler(regs*)+0xcdc>	100018b4: R_386_PC32	fpuGetReg(int)
100018b8:	b9 03 00 00 00       	mov    ecx,0x3
100018bd:	89 e7                	mov    edi,esp
100018bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018c1:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100018c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018cb:	2d d8 00 00 00       	sub    eax,0xd8
100018d0:	e9 d7 fc ff ff       	jmp    100015ac <x87Handler(regs*)+0x9d4>
100018d5:	8d 50 20             	lea    edx,[eax+0x20]
100018d8:	80 fa 07             	cmp    dl,0x7
100018db:	77 52                	ja     1000192f <x87Handler(regs*)+0xd57>
100018dd:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
100018e3:	57                   	push   edi
100018e4:	57                   	push   edi
100018e5:	2d e0 00 00 00       	sub    eax,0xe0
100018ea:	50                   	push   eax
100018eb:	56                   	push   esi
100018ec:	e8 fc ff ff ff       	call   100018ed <x87Handler(regs*)+0xd15>	100018ed: R_386_PC32	fpuGetReg(int)
100018f1:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
100018f7:	83 ec 0c             	sub    esp,0xc
100018fa:	6a 00                	push   0x0
100018fc:	50                   	push   eax
100018fd:	e8 fc ff ff ff       	call   100018fe <x87Handler(regs*)+0xd26>	100018fe: R_386_PC32	fpuGetReg(int)
10001902:	50                   	push   eax
10001903:	50                   	push   eax
10001904:	b9 03 00 00 00       	mov    ecx,0x3
10001909:	89 e7                	mov    edi,esp
1000190b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000190d:	83 ec 0c             	sub    esp,0xc
10001910:	b9 03 00 00 00       	mov    ecx,0x3
10001915:	89 e7                	mov    edi,esp
10001917:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
1000191d:	89 c6                	mov    esi,eax
1000191f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001921:	e8 fc ff ff ff       	call   10001922 <x87Handler(regs*)+0xd4a>	10001922: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001926:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000192a:	e9 b8 06 00 00       	jmp    10001fe7 <x87Handler(regs*)+0x140f>
1000192f:	8d 50 18             	lea    edx,[eax+0x18]
10001932:	80 fa 07             	cmp    dl,0x7
10001935:	0f 87 5c f6 ff ff    	ja     10000f97 <x87Handler(regs*)+0x3bf>
1000193b:	8d b5 c4 fc ff ff    	lea    esi,[ebp-0x33c]
10001941:	52                   	push   edx
10001942:	52                   	push   edx
10001943:	2d e8 00 00 00       	sub    eax,0xe8
10001948:	50                   	push   eax
10001949:	56                   	push   esi
1000194a:	e8 fc ff ff ff       	call   1000194b <x87Handler(regs*)+0xd73>	1000194b: R_386_PC32	fpuGetReg(int)
1000194f:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
10001955:	83 ec 0c             	sub    esp,0xc
10001958:	6a 00                	push   0x0
1000195a:	50                   	push   eax
1000195b:	e8 fc ff ff ff       	call   1000195c <x87Handler(regs*)+0xd84>	1000195c: R_386_PC32	fpuGetReg(int)
10001960:	51                   	push   ecx
10001961:	51                   	push   ecx
10001962:	b9 03 00 00 00       	mov    ecx,0x3
10001967:	89 e7                	mov    edi,esp
10001969:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000196b:	83 ec 0c             	sub    esp,0xc
1000196e:	b9 03 00 00 00       	mov    ecx,0x3
10001973:	89 e7                	mov    edi,esp
10001975:	8d 85 d0 fc ff ff    	lea    eax,[ebp-0x330]
1000197b:	89 c6                	mov    esi,eax
1000197d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000197f:	e8 fc ff ff ff       	call   10001980 <x87Handler(regs*)+0xda8>	10001980: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001984:	8d 45 dc             	lea    eax,[ebp-0x24]
10001987:	83 c4 24             	add    esp,0x24
1000198a:	50                   	push   eax
1000198b:	e9 28 fc ff ff       	jmp    100015b8 <x87Handler(regs*)+0x9e0>
10001990:	80 fa da             	cmp    dl,0xda
10001993:	0f 85 b6 00 00 00    	jne    10001a4f <x87Handler(regs*)+0xe77>
10001999:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000199f:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
100019a3:	0f 85 60 03 00 00    	jne    10001d09 <x87Handler(regs*)+0x1131>
100019a9:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
100019af:	50                   	push   eax
100019b0:	50                   	push   eax
100019b1:	6a 01                	push   0x1
100019b3:	56                   	push   esi
100019b4:	e8 fc ff ff ff       	call   100019b5 <x87Handler(regs*)+0xddd>	100019b5: R_386_PC32	fpuGetReg(int)
100019b9:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
100019bf:	83 ec 0c             	sub    esp,0xc
100019c2:	6a 00                	push   0x0
100019c4:	50                   	push   eax
100019c5:	e8 fc ff ff ff       	call   100019c6 <x87Handler(regs*)+0xdee>	100019c6: R_386_PC32	fpuGetReg(int)
100019ca:	50                   	push   eax
100019cb:	50                   	push   eax
100019cc:	b9 03 00 00 00       	mov    ecx,0x3
100019d1:	89 e7                	mov    edi,esp
100019d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019d5:	83 ec 0c             	sub    esp,0xc
100019d8:	b9 03 00 00 00       	mov    ecx,0x3
100019dd:	89 e7                	mov    edi,esp
100019df:	8d 85 e8 fc ff ff    	lea    eax,[ebp-0x318]
100019e5:	eb 44                	jmp    10001a2b <x87Handler(regs*)+0xe53>
100019e7:	3c d9                	cmp    al,0xd9
100019e9:	0f 85 96 08 00 00    	jne    10002285 <x87Handler(regs*)+0x16ad>
100019ef:	8d b5 f4 fc ff ff    	lea    esi,[ebp-0x30c]
100019f5:	51                   	push   ecx
100019f6:	51                   	push   ecx
100019f7:	6a 01                	push   0x1
100019f9:	56                   	push   esi
100019fa:	e8 fc ff ff ff       	call   100019fb <x87Handler(regs*)+0xe23>	100019fb: R_386_PC32	fpuGetReg(int)
100019ff:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
10001a05:	83 ec 0c             	sub    esp,0xc
10001a08:	6a 00                	push   0x0
10001a0a:	50                   	push   eax
10001a0b:	e8 fc ff ff ff       	call   10001a0c <x87Handler(regs*)+0xe34>	10001a0c: R_386_PC32	fpuGetReg(int)
10001a10:	57                   	push   edi
10001a11:	57                   	push   edi
10001a12:	b9 03 00 00 00       	mov    ecx,0x3
10001a17:	89 e7                	mov    edi,esp
10001a19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a1b:	83 ec 0c             	sub    esp,0xc
10001a1e:	b9 03 00 00 00       	mov    ecx,0x3
10001a23:	89 e7                	mov    edi,esp
10001a25:	8d 85 00 fd ff ff    	lea    eax,[ebp-0x300]
10001a2b:	89 c6                	mov    esi,eax
10001a2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a2f:	e8 fc ff ff ff       	call   10001a30 <x87Handler(regs*)+0xe58>	10001a30: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001a34:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a38:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001a3b:	83 c4 24             	add    esp,0x24
10001a3e:	53                   	push   ebx
10001a3f:	e8 fc ff ff ff       	call   10001a40 <x87Handler(regs*)+0xe68>	10001a40: R_386_PC32	fpuPop()
10001a44:	53                   	push   ebx
10001a45:	e8 fc ff ff ff       	call   10001a46 <x87Handler(regs*)+0xe6e>	10001a46: R_386_PC32	fpuPop()
10001a4a:	e9 07 06 00 00       	jmp    10002056 <x87Handler(regs*)+0x147e>
10001a4f:	80 fa df             	cmp    dl,0xdf
10001a52:	0f 85 05 04 00 00    	jne    10001e5d <x87Handler(regs*)+0x1285>
10001a58:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001a5e:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001a62:	0f 85 9b 08 00 00    	jne    10002303 <x87Handler(regs*)+0x172b>
10001a68:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001a6b: R_386_32	fpuState
10001a6f:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001a73:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a77:	e9 c8 f2 ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001a7c:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001a82:	84 d2                	test   dl,dl
10001a84:	75 66                	jne    10001aec <x87Handler(regs*)+0xf14>
10001a86:	8d b5 0c fd ff ff    	lea    esi,[ebp-0x2f4]
10001a8c:	50                   	push   eax
10001a8d:	50                   	push   eax
10001a8e:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001a94:	ff 30                	push   DWORD PTR [eax]
10001a96:	56                   	push   esi
10001a97:	e8 fc ff ff ff       	call   10001a98 <x87Handler(regs*)+0xec0>	10001a98: R_386_PC32	fpu32ToInternal(unsigned int)
10001a9c:	8d 95 18 fd ff ff    	lea    edx,[ebp-0x2e8]
10001aa2:	83 ec 0c             	sub    esp,0xc
10001aa5:	6a 00                	push   0x0
10001aa7:	52                   	push   edx
10001aa8:	e8 fc ff ff ff       	call   10001aa9 <x87Handler(regs*)+0xed1>	10001aa9: R_386_PC32	fpuGetReg(int)
10001aad:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001ab3:	52                   	push   edx
10001ab4:	b9 03 00 00 00       	mov    ecx,0x3
10001ab9:	89 e7                	mov    edi,esp
10001abb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001abd:	83 ec 0c             	sub    esp,0xc
10001ac0:	b9 03 00 00 00       	mov    ecx,0x3
10001ac5:	89 e7                	mov    edi,esp
10001ac7:	8d 95 18 fd ff ff    	lea    edx,[ebp-0x2e8]
10001acd:	89 d6                	mov    esi,edx
10001acf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ad1:	50                   	push   eax
10001ad2:	e8 fc ff ff ff       	call   10001ad3 <x87Handler(regs*)+0xefb>	10001ad3: R_386_PC32	fpuAdd(_Float80, _Float80)
10001ad7:	83 c4 20             	add    esp,0x20
10001ada:	b9 03 00 00 00       	mov    ecx,0x3
10001adf:	89 e7                	mov    edi,esp
10001ae1:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001ae7:	e9 fe 07 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001aec:	80 fa 01             	cmp    dl,0x1
10001aef:	75 66                	jne    10001b57 <x87Handler(regs*)+0xf7f>
10001af1:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001af7:	51                   	push   ecx
10001af8:	51                   	push   ecx
10001af9:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001aff:	ff 30                	push   DWORD PTR [eax]
10001b01:	56                   	push   esi
10001b02:	e8 fc ff ff ff       	call   10001b03 <x87Handler(regs*)+0xf2b>	10001b03: R_386_PC32	fpu32ToInternal(unsigned int)
10001b07:	8d 95 3c fd ff ff    	lea    edx,[ebp-0x2c4]
10001b0d:	83 ec 0c             	sub    esp,0xc
10001b10:	6a 00                	push   0x0
10001b12:	52                   	push   edx
10001b13:	e8 fc ff ff ff       	call   10001b14 <x87Handler(regs*)+0xf3c>	10001b14: R_386_PC32	fpuGetReg(int)
10001b18:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001b1e:	57                   	push   edi
10001b1f:	b9 03 00 00 00       	mov    ecx,0x3
10001b24:	89 e7                	mov    edi,esp
10001b26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b28:	83 ec 0c             	sub    esp,0xc
10001b2b:	b9 03 00 00 00       	mov    ecx,0x3
10001b30:	89 e7                	mov    edi,esp
10001b32:	8d 95 3c fd ff ff    	lea    edx,[ebp-0x2c4]
10001b38:	89 d6                	mov    esi,edx
10001b3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b3c:	50                   	push   eax
10001b3d:	e8 fc ff ff ff       	call   10001b3e <x87Handler(regs*)+0xf66>	10001b3e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001b42:	83 c4 20             	add    esp,0x20
10001b45:	b9 03 00 00 00       	mov    ecx,0x3
10001b4a:	89 e7                	mov    edi,esp
10001b4c:	8d 85 48 fd ff ff    	lea    eax,[ebp-0x2b8]
10001b52:	e9 93 07 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001b57:	80 fa 04             	cmp    dl,0x4
10001b5a:	75 66                	jne    10001bc2 <x87Handler(regs*)+0xfea>
10001b5c:	8d b5 54 fd ff ff    	lea    esi,[ebp-0x2ac]
10001b62:	50                   	push   eax
10001b63:	50                   	push   eax
10001b64:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001b6a:	ff 30                	push   DWORD PTR [eax]
10001b6c:	56                   	push   esi
10001b6d:	e8 fc ff ff ff       	call   10001b6e <x87Handler(regs*)+0xf96>	10001b6e: R_386_PC32	fpu32ToInternal(unsigned int)
10001b72:	8d 95 60 fd ff ff    	lea    edx,[ebp-0x2a0]
10001b78:	83 ec 0c             	sub    esp,0xc
10001b7b:	6a 00                	push   0x0
10001b7d:	52                   	push   edx
10001b7e:	e8 fc ff ff ff       	call   10001b7f <x87Handler(regs*)+0xfa7>	10001b7f: R_386_PC32	fpuGetReg(int)
10001b83:	8d 85 6c fd ff ff    	lea    eax,[ebp-0x294]
10001b89:	52                   	push   edx
10001b8a:	b9 03 00 00 00       	mov    ecx,0x3
10001b8f:	89 e7                	mov    edi,esp
10001b91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b93:	83 ec 0c             	sub    esp,0xc
10001b96:	b9 03 00 00 00       	mov    ecx,0x3
10001b9b:	89 e7                	mov    edi,esp
10001b9d:	8d 95 60 fd ff ff    	lea    edx,[ebp-0x2a0]
10001ba3:	89 d6                	mov    esi,edx
10001ba5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ba7:	50                   	push   eax
10001ba8:	e8 fc ff ff ff       	call   10001ba9 <x87Handler(regs*)+0xfd1>	10001ba9: R_386_PC32	fpuSub(_Float80, _Float80)
10001bad:	83 c4 20             	add    esp,0x20
10001bb0:	b9 03 00 00 00       	mov    ecx,0x3
10001bb5:	89 e7                	mov    edi,esp
10001bb7:	8d 85 6c fd ff ff    	lea    eax,[ebp-0x294]
10001bbd:	e9 28 07 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001bc2:	80 fa 05             	cmp    dl,0x5
10001bc5:	75 66                	jne    10001c2d <x87Handler(regs*)+0x1055>
10001bc7:	8d b5 78 fd ff ff    	lea    esi,[ebp-0x288]
10001bcd:	51                   	push   ecx
10001bce:	51                   	push   ecx
10001bcf:	6a 00                	push   0x0
10001bd1:	56                   	push   esi
10001bd2:	e8 fc ff ff ff       	call   10001bd3 <x87Handler(regs*)+0xffb>	10001bd3: R_386_PC32	fpuGetReg(int)
10001bd7:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001bdd:	83 ec 0c             	sub    esp,0xc
10001be0:	8b 95 90 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x670]
10001be6:	ff 32                	push   DWORD PTR [edx]
10001be8:	50                   	push   eax
10001be9:	e8 fc ff ff ff       	call   10001bea <x87Handler(regs*)+0x1012>	10001bea: R_386_PC32	fpu32ToInternal(unsigned int)
10001bee:	8d 95 90 fd ff ff    	lea    edx,[ebp-0x270]
10001bf4:	57                   	push   edi
10001bf5:	b9 03 00 00 00       	mov    ecx,0x3
10001bfa:	89 e7                	mov    edi,esp
10001bfc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bfe:	83 ec 0c             	sub    esp,0xc
10001c01:	b9 03 00 00 00       	mov    ecx,0x3
10001c06:	89 e7                	mov    edi,esp
10001c08:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001c0e:	89 c6                	mov    esi,eax
10001c10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c12:	52                   	push   edx
10001c13:	e8 fc ff ff ff       	call   10001c14 <x87Handler(regs*)+0x103c>	10001c14: R_386_PC32	fpuSub(_Float80, _Float80)
10001c18:	83 c4 20             	add    esp,0x20
10001c1b:	b9 03 00 00 00       	mov    ecx,0x3
10001c20:	89 e7                	mov    edi,esp
10001c22:	8d 95 90 fd ff ff    	lea    edx,[ebp-0x270]
10001c28:	e9 e6 05 00 00       	jmp    10002213 <x87Handler(regs*)+0x163b>
10001c2d:	80 fa 06             	cmp    dl,0x6
10001c30:	75 66                	jne    10001c98 <x87Handler(regs*)+0x10c0>
10001c32:	8d b5 9c fd ff ff    	lea    esi,[ebp-0x264]
10001c38:	50                   	push   eax
10001c39:	50                   	push   eax
10001c3a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001c40:	ff 30                	push   DWORD PTR [eax]
10001c42:	56                   	push   esi
10001c43:	e8 fc ff ff ff       	call   10001c44 <x87Handler(regs*)+0x106c>	10001c44: R_386_PC32	fpu32ToInternal(unsigned int)
10001c48:	8d 95 a8 fd ff ff    	lea    edx,[ebp-0x258]
10001c4e:	83 ec 0c             	sub    esp,0xc
10001c51:	6a 00                	push   0x0
10001c53:	52                   	push   edx
10001c54:	e8 fc ff ff ff       	call   10001c55 <x87Handler(regs*)+0x107d>	10001c55: R_386_PC32	fpuGetReg(int)
10001c59:	8d 85 b4 fd ff ff    	lea    eax,[ebp-0x24c]
10001c5f:	52                   	push   edx
10001c60:	b9 03 00 00 00       	mov    ecx,0x3
10001c65:	89 e7                	mov    edi,esp
10001c67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c69:	83 ec 0c             	sub    esp,0xc
10001c6c:	b9 03 00 00 00       	mov    ecx,0x3
10001c71:	89 e7                	mov    edi,esp
10001c73:	8d 95 a8 fd ff ff    	lea    edx,[ebp-0x258]
10001c79:	89 d6                	mov    esi,edx
10001c7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c7d:	50                   	push   eax
10001c7e:	e8 fc ff ff ff       	call   10001c7f <x87Handler(regs*)+0x10a7>	10001c7f: R_386_PC32	fpuDivide(_Float80, _Float80)
10001c83:	83 c4 20             	add    esp,0x20
10001c86:	b9 03 00 00 00       	mov    ecx,0x3
10001c8b:	89 e7                	mov    edi,esp
10001c8d:	8d 85 b4 fd ff ff    	lea    eax,[ebp-0x24c]
10001c93:	e9 52 06 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001c98:	31 c0                	xor    eax,eax
10001c9a:	80 fa 07             	cmp    dl,0x7
10001c9d:	0f 85 bc 06 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10001ca3:	8d b5 c0 fd ff ff    	lea    esi,[ebp-0x240]
10001ca9:	57                   	push   edi
10001caa:	57                   	push   edi
10001cab:	6a 00                	push   0x0
10001cad:	56                   	push   esi
10001cae:	e8 fc ff ff ff       	call   10001caf <x87Handler(regs*)+0x10d7>	10001caf: R_386_PC32	fpuGetReg(int)
10001cb3:	8d 85 cc fd ff ff    	lea    eax,[ebp-0x234]
10001cb9:	83 ec 0c             	sub    esp,0xc
10001cbc:	8b 95 90 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x670]
10001cc2:	ff 32                	push   DWORD PTR [edx]
10001cc4:	50                   	push   eax
10001cc5:	e8 fc ff ff ff       	call   10001cc6 <x87Handler(regs*)+0x10ee>	10001cc6: R_386_PC32	fpu32ToInternal(unsigned int)
10001cca:	8d 95 d8 fd ff ff    	lea    edx,[ebp-0x228]
10001cd0:	50                   	push   eax
10001cd1:	b9 03 00 00 00       	mov    ecx,0x3
10001cd6:	89 e7                	mov    edi,esp
10001cd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cda:	83 ec 0c             	sub    esp,0xc
10001cdd:	b9 03 00 00 00       	mov    ecx,0x3
10001ce2:	89 e7                	mov    edi,esp
10001ce4:	8d 85 cc fd ff ff    	lea    eax,[ebp-0x234]
10001cea:	89 c6                	mov    esi,eax
10001cec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cee:	52                   	push   edx
10001cef:	e8 fc ff ff ff       	call   10001cf0 <x87Handler(regs*)+0x1118>	10001cf0: R_386_PC32	fpuDivide(_Float80, _Float80)
10001cf4:	83 c4 20             	add    esp,0x20
10001cf7:	b9 03 00 00 00       	mov    ecx,0x3
10001cfc:	89 e7                	mov    edi,esp
10001cfe:	8d 95 d8 fd ff ff    	lea    edx,[ebp-0x228]
10001d04:	e9 0a 05 00 00       	jmp    10002213 <x87Handler(regs*)+0x163b>
10001d09:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001d0f:	80 fa 01             	cmp    dl,0x1
10001d12:	75 69                	jne    10001d7d <x87Handler(regs*)+0x11a5>
10001d14:	8d b5 f0 fd ff ff    	lea    esi,[ebp-0x210]
10001d1a:	50                   	push   eax
10001d1b:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001d21:	8b 00                	mov    eax,DWORD PTR [eax]
10001d23:	31 d2                	xor    edx,edx
10001d25:	52                   	push   edx
10001d26:	50                   	push   eax
10001d27:	56                   	push   esi
10001d28:	e8 fc ff ff ff       	call   10001d29 <x87Handler(regs*)+0x1151>	10001d29: R_386_PC32	fpuLongToFloat(long long)
10001d2d:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d33:	83 ec 0c             	sub    esp,0xc
10001d36:	6a 00                	push   0x0
10001d38:	52                   	push   edx
10001d39:	e8 fc ff ff ff       	call   10001d3a <x87Handler(regs*)+0x1162>	10001d3a: R_386_PC32	fpuGetReg(int)
10001d3e:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d44:	52                   	push   edx
10001d45:	b9 03 00 00 00       	mov    ecx,0x3
10001d4a:	89 e7                	mov    edi,esp
10001d4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d4e:	83 ec 0c             	sub    esp,0xc
10001d51:	b9 03 00 00 00       	mov    ecx,0x3
10001d56:	89 e7                	mov    edi,esp
10001d58:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d5e:	89 d6                	mov    esi,edx
10001d60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d62:	50                   	push   eax
10001d63:	e8 fc ff ff ff       	call   10001d64 <x87Handler(regs*)+0x118c>	10001d64: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001d68:	83 c4 20             	add    esp,0x20
10001d6b:	b9 03 00 00 00       	mov    ecx,0x3
10001d70:	89 e7                	mov    edi,esp
10001d72:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d78:	e9 6d 05 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001d7d:	80 fa 04             	cmp    dl,0x4
10001d80:	75 69                	jne    10001deb <x87Handler(regs*)+0x1213>
10001d82:	8d b5 14 fe ff ff    	lea    esi,[ebp-0x1ec]
10001d88:	51                   	push   ecx
10001d89:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001d8f:	8b 00                	mov    eax,DWORD PTR [eax]
10001d91:	31 d2                	xor    edx,edx
10001d93:	52                   	push   edx
10001d94:	50                   	push   eax
10001d95:	56                   	push   esi
10001d96:	e8 fc ff ff ff       	call   10001d97 <x87Handler(regs*)+0x11bf>	10001d97: R_386_PC32	fpuLongToFloat(long long)
10001d9b:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001da1:	83 ec 0c             	sub    esp,0xc
10001da4:	6a 00                	push   0x0
10001da6:	52                   	push   edx
10001da7:	e8 fc ff ff ff       	call   10001da8 <x87Handler(regs*)+0x11d0>	10001da8: R_386_PC32	fpuGetReg(int)
10001dac:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001db2:	57                   	push   edi
10001db3:	b9 03 00 00 00       	mov    ecx,0x3
10001db8:	89 e7                	mov    edi,esp
10001dba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dbc:	83 ec 0c             	sub    esp,0xc
10001dbf:	b9 03 00 00 00       	mov    ecx,0x3
10001dc4:	89 e7                	mov    edi,esp
10001dc6:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001dcc:	89 d6                	mov    esi,edx
10001dce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dd0:	50                   	push   eax
10001dd1:	e8 fc ff ff ff       	call   10001dd2 <x87Handler(regs*)+0x11fa>	10001dd2: R_386_PC32	fpuSub(_Float80, _Float80)
10001dd6:	83 c4 20             	add    esp,0x20
10001dd9:	b9 03 00 00 00       	mov    ecx,0x3
10001dde:	89 e7                	mov    edi,esp
10001de0:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001de6:	e9 ff 04 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001deb:	31 c0                	xor    eax,eax
10001ded:	80 fa 07             	cmp    dl,0x7
10001df0:	0f 85 69 05 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10001df6:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001dfc:	50                   	push   eax
10001dfd:	50                   	push   eax
10001dfe:	6a 00                	push   0x0
10001e00:	56                   	push   esi
10001e01:	e8 fc ff ff ff       	call   10001e02 <x87Handler(regs*)+0x122a>	10001e02: R_386_PC32	fpuGetReg(int)
10001e06:	50                   	push   eax
10001e07:	50                   	push   eax
10001e08:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001e0e:	8b 00                	mov    eax,DWORD PTR [eax]
10001e10:	31 d2                	xor    edx,edx
10001e12:	52                   	push   edx
10001e13:	50                   	push   eax
10001e14:	8d 85 44 fe ff ff    	lea    eax,[ebp-0x1bc]
10001e1a:	50                   	push   eax
10001e1b:	e8 fc ff ff ff       	call   10001e1c <x87Handler(regs*)+0x1244>	10001e1c: R_386_PC32	fpuLongToFloat(long long)
10001e20:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001e26:	52                   	push   edx
10001e27:	b9 03 00 00 00       	mov    ecx,0x3
10001e2c:	89 e7                	mov    edi,esp
10001e2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e30:	83 ec 0c             	sub    esp,0xc
10001e33:	b9 03 00 00 00       	mov    ecx,0x3
10001e38:	89 e7                	mov    edi,esp
10001e3a:	8d b5 44 fe ff ff    	lea    esi,[ebp-0x1bc]
10001e40:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e42:	50                   	push   eax
10001e43:	e8 fc ff ff ff       	call   10001e44 <x87Handler(regs*)+0x126c>	10001e44: R_386_PC32	fpuDivide(_Float80, _Float80)
10001e48:	83 c4 20             	add    esp,0x20
10001e4b:	b9 03 00 00 00       	mov    ecx,0x3
10001e50:	89 e7                	mov    edi,esp
10001e52:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001e58:	e9 8d 04 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001e5d:	31 c0                	xor    eax,eax
10001e5f:	80 fa db             	cmp    dl,0xdb
10001e62:	0f 85 f7 04 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10001e68:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001e6e:	84 d2                	test   dl,dl
10001e70:	0f 85 66 f1 ff ff    	jne    10000fdc <x87Handler(regs*)+0x404>
10001e76:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001e7c:	50                   	push   eax
10001e7d:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001e83:	8b 00                	mov    eax,DWORD PTR [eax]
10001e85:	31 d2                	xor    edx,edx
10001e87:	52                   	push   edx
10001e88:	50                   	push   eax
10001e89:	e9 8f 04 00 00       	jmp    1000231d <x87Handler(regs*)+0x1745>
10001e8e:	31 c0                	xor    eax,eax
10001e90:	80 fa 03             	cmp    dl,0x3
10001e93:	0f 85 c6 04 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10001e99:	8d b5 74 fe ff ff    	lea    esi,[ebp-0x18c]
10001e9f:	83 ec 0c             	sub    esp,0xc
10001ea2:	56                   	push   esi
10001ea3:	e8 fc ff ff ff       	call   10001ea4 <x87Handler(regs*)+0x12cc>	10001ea4: R_386_PC32	fpuPop()
10001ea8:	e9 48 f1 ff ff       	jmp    10000ff5 <x87Handler(regs*)+0x41d>
10001ead:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10001eb3:	84 d2                	test   dl,dl
10001eb5:	75 68                	jne    10001f1f <x87Handler(regs*)+0x1347>
10001eb7:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001ebd:	51                   	push   ecx
10001ebe:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001ec4:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001ec7:	ff 30                	push   DWORD PTR [eax]
10001ec9:	56                   	push   esi
10001eca:	e8 fc ff ff ff       	call   10001ecb <x87Handler(regs*)+0x12f3>	10001ecb: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ecf:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001ed5:	83 ec 0c             	sub    esp,0xc
10001ed8:	6a 00                	push   0x0
10001eda:	52                   	push   edx
10001edb:	e8 fc ff ff ff       	call   10001edc <x87Handler(regs*)+0x1304>	10001edc: R_386_PC32	fpuGetReg(int)
10001ee0:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001ee6:	57                   	push   edi
10001ee7:	b9 03 00 00 00       	mov    ecx,0x3
10001eec:	89 e7                	mov    edi,esp
10001eee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ef0:	83 ec 0c             	sub    esp,0xc
10001ef3:	b9 03 00 00 00       	mov    ecx,0x3
10001ef8:	89 e7                	mov    edi,esp
10001efa:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001f00:	89 d6                	mov    esi,edx
10001f02:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f04:	50                   	push   eax
10001f05:	e8 fc ff ff ff       	call   10001f06 <x87Handler(regs*)+0x132e>	10001f06: R_386_PC32	fpuAdd(_Float80, _Float80)
10001f0a:	83 c4 20             	add    esp,0x20
10001f0d:	b9 03 00 00 00       	mov    ecx,0x3
10001f12:	89 e7                	mov    edi,esp
10001f14:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001f1a:	e9 cb 03 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001f1f:	80 fa 01             	cmp    dl,0x1
10001f22:	75 68                	jne    10001f8c <x87Handler(regs*)+0x13b4>
10001f24:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001f2a:	50                   	push   eax
10001f2b:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001f31:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f34:	ff 30                	push   DWORD PTR [eax]
10001f36:	56                   	push   esi
10001f37:	e8 fc ff ff ff       	call   10001f38 <x87Handler(regs*)+0x1360>	10001f38: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f3c:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f42:	83 ec 0c             	sub    esp,0xc
10001f45:	6a 00                	push   0x0
10001f47:	52                   	push   edx
10001f48:	e8 fc ff ff ff       	call   10001f49 <x87Handler(regs*)+0x1371>	10001f49: R_386_PC32	fpuGetReg(int)
10001f4d:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f53:	52                   	push   edx
10001f54:	b9 03 00 00 00       	mov    ecx,0x3
10001f59:	89 e7                	mov    edi,esp
10001f5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f5d:	83 ec 0c             	sub    esp,0xc
10001f60:	b9 03 00 00 00       	mov    ecx,0x3
10001f65:	89 e7                	mov    edi,esp
10001f67:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f6d:	89 d6                	mov    esi,edx
10001f6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f71:	50                   	push   eax
10001f72:	e8 fc ff ff ff       	call   10001f73 <x87Handler(regs*)+0x139b>	10001f73: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f77:	83 c4 20             	add    esp,0x20
10001f7a:	b9 03 00 00 00       	mov    ecx,0x3
10001f7f:	89 e7                	mov    edi,esp
10001f81:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f87:	e9 5e 03 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001f8c:	80 fa 02             	cmp    dl,0x2
10001f8f:	75 5e                	jne    10001fef <x87Handler(regs*)+0x1417>
10001f91:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f97:	50                   	push   eax
10001f98:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001f9e:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001fa1:	ff 30                	push   DWORD PTR [eax]
10001fa3:	56                   	push   esi
10001fa4:	e8 fc ff ff ff       	call   10001fa5 <x87Handler(regs*)+0x13cd>	10001fa5: R_386_PC32	fpu64ToInternal(unsigned long long)
10001fa9:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001faf:	83 ec 0c             	sub    esp,0xc
10001fb2:	6a 00                	push   0x0
10001fb4:	50                   	push   eax
10001fb5:	e8 fc ff ff ff       	call   10001fb6 <x87Handler(regs*)+0x13de>	10001fb6: R_386_PC32	fpuGetReg(int)
10001fba:	50                   	push   eax
10001fbb:	50                   	push   eax
10001fbc:	b9 03 00 00 00       	mov    ecx,0x3
10001fc1:	89 e7                	mov    edi,esp
10001fc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fc5:	83 ec 0c             	sub    esp,0xc
10001fc8:	b9 03 00 00 00       	mov    ecx,0x3
10001fcd:	89 e7                	mov    edi,esp
10001fcf:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001fd5:	89 c6                	mov    esi,eax
10001fd7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fd9:	e8 fc ff ff ff       	call   10001fda <x87Handler(regs*)+0x1402>	10001fda: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fde:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10001fe4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001fe7:	83 c4 30             	add    esp,0x30
10001fea:	e9 55 ed ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
10001fef:	80 fa 03             	cmp    dl,0x3
10001ff2:	75 6a                	jne    1000205e <x87Handler(regs*)+0x1486>
10001ff4:	8d b5 e0 fe ff ff    	lea    esi,[ebp-0x120]
10001ffa:	51                   	push   ecx
10001ffb:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10002001:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002004:	ff 30                	push   DWORD PTR [eax]
10002006:	56                   	push   esi
10002007:	e8 fc ff ff ff       	call   10002008 <x87Handler(regs*)+0x1430>	10002008: R_386_PC32	fpu64ToInternal(unsigned long long)
1000200c:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10002012:	83 ec 0c             	sub    esp,0xc
10002015:	6a 00                	push   0x0
10002017:	50                   	push   eax
10002018:	e8 fc ff ff ff       	call   10002019 <x87Handler(regs*)+0x1441>	10002019: R_386_PC32	fpuGetReg(int)
1000201d:	57                   	push   edi
1000201e:	57                   	push   edi
1000201f:	b9 03 00 00 00       	mov    ecx,0x3
10002024:	89 e7                	mov    edi,esp
10002026:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002028:	83 ec 0c             	sub    esp,0xc
1000202b:	b9 03 00 00 00       	mov    ecx,0x3
10002030:	89 e7                	mov    edi,esp
10002032:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10002038:	89 c6                	mov    esi,eax
1000203a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000203c:	e8 fc ff ff ff       	call   1000203d <x87Handler(regs*)+0x1465>	1000203d: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10002041:	8d 45 dc             	lea    eax,[ebp-0x24]
10002044:	83 c4 24             	add    esp,0x24
10002047:	50                   	push   eax
10002048:	e8 fc ff ff ff       	call   10002049 <x87Handler(regs*)+0x1471>	10002049: R_386_PC32	fpuPop()
1000204d:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
10002053:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002056:	83 c4 0c             	add    esp,0xc
10002059:	e9 e6 ec ff ff       	jmp    10000d44 <x87Handler(regs*)+0x16c>
1000205e:	80 fa 04             	cmp    dl,0x4
10002061:	75 68                	jne    100020cb <x87Handler(regs*)+0x14f3>
10002063:	8d b5 f8 fe ff ff    	lea    esi,[ebp-0x108]
10002069:	50                   	push   eax
1000206a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10002070:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002073:	ff 30                	push   DWORD PTR [eax]
10002075:	56                   	push   esi
10002076:	e8 fc ff ff ff       	call   10002077 <x87Handler(regs*)+0x149f>	10002077: R_386_PC32	fpu64ToInternal(unsigned long long)
1000207b:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
10002081:	83 ec 0c             	sub    esp,0xc
10002084:	6a 00                	push   0x0
10002086:	52                   	push   edx
10002087:	e8 fc ff ff ff       	call   10002088 <x87Handler(regs*)+0x14b0>	10002088: R_386_PC32	fpuGetReg(int)
1000208c:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002092:	52                   	push   edx
10002093:	b9 03 00 00 00       	mov    ecx,0x3
10002098:	89 e7                	mov    edi,esp
1000209a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000209c:	83 ec 0c             	sub    esp,0xc
1000209f:	b9 03 00 00 00       	mov    ecx,0x3
100020a4:	89 e7                	mov    edi,esp
100020a6:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
100020ac:	89 d6                	mov    esi,edx
100020ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020b0:	50                   	push   eax
100020b1:	e8 fc ff ff ff       	call   100020b2 <x87Handler(regs*)+0x14da>	100020b2: R_386_PC32	fpuSub(_Float80, _Float80)
100020b6:	83 c4 20             	add    esp,0x20
100020b9:	b9 03 00 00 00       	mov    ecx,0x3
100020be:	89 e7                	mov    edi,esp
100020c0:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
100020c6:	e9 1f 02 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
100020cb:	80 fa 05             	cmp    dl,0x5
100020ce:	75 68                	jne    10002138 <x87Handler(regs*)+0x1560>
100020d0:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
100020d6:	51                   	push   ecx
100020d7:	51                   	push   ecx
100020d8:	6a 00                	push   0x0
100020da:	56                   	push   esi
100020db:	e8 fc ff ff ff       	call   100020dc <x87Handler(regs*)+0x1504>	100020dc: R_386_PC32	fpuGetReg(int)
100020e0:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
100020e6:	57                   	push   edi
100020e7:	57                   	push   edi
100020e8:	8b 95 90 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x670]
100020ee:	ff 72 04             	push   DWORD PTR [edx+0x4]
100020f1:	ff 32                	push   DWORD PTR [edx]
100020f3:	50                   	push   eax
100020f4:	e8 fc ff ff ff       	call   100020f5 <x87Handler(regs*)+0x151d>	100020f5: R_386_PC32	fpu64ToInternal(unsigned long long)
100020f9:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
100020ff:	50                   	push   eax
10002100:	b9 03 00 00 00       	mov    ecx,0x3
10002105:	89 e7                	mov    edi,esp
10002107:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002109:	83 ec 0c             	sub    esp,0xc
1000210c:	b9 03 00 00 00       	mov    ecx,0x3
10002111:	89 e7                	mov    edi,esp
10002113:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
10002119:	89 c6                	mov    esi,eax
1000211b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000211d:	52                   	push   edx
1000211e:	e8 fc ff ff ff       	call   1000211f <x87Handler(regs*)+0x1547>	1000211f: R_386_PC32	fpuSub(_Float80, _Float80)
10002123:	83 c4 20             	add    esp,0x20
10002126:	b9 03 00 00 00       	mov    ecx,0x3
1000212b:	89 e7                	mov    edi,esp
1000212d:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
10002133:	e9 db 00 00 00       	jmp    10002213 <x87Handler(regs*)+0x163b>
10002138:	80 fa 06             	cmp    dl,0x6
1000213b:	75 68                	jne    100021a5 <x87Handler(regs*)+0x15cd>
1000213d:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
10002143:	57                   	push   edi
10002144:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000214a:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000214d:	ff 30                	push   DWORD PTR [eax]
1000214f:	56                   	push   esi
10002150:	e8 fc ff ff ff       	call   10002151 <x87Handler(regs*)+0x1579>	10002151: R_386_PC32	fpu64ToInternal(unsigned long long)
10002155:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
1000215b:	83 ec 0c             	sub    esp,0xc
1000215e:	6a 00                	push   0x0
10002160:	52                   	push   edx
10002161:	e8 fc ff ff ff       	call   10002162 <x87Handler(regs*)+0x158a>	10002162: R_386_PC32	fpuGetReg(int)
10002166:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
1000216c:	52                   	push   edx
1000216d:	b9 03 00 00 00       	mov    ecx,0x3
10002172:	89 e7                	mov    edi,esp
10002174:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002176:	83 ec 0c             	sub    esp,0xc
10002179:	b9 03 00 00 00       	mov    ecx,0x3
1000217e:	89 e7                	mov    edi,esp
10002180:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10002186:	89 d6                	mov    esi,edx
10002188:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000218a:	50                   	push   eax
1000218b:	e8 fc ff ff ff       	call   1000218c <x87Handler(regs*)+0x15b4>	1000218c: R_386_PC32	fpuDivide(_Float80, _Float80)
10002190:	83 c4 20             	add    esp,0x20
10002193:	b9 03 00 00 00       	mov    ecx,0x3
10002198:	89 e7                	mov    edi,esp
1000219a:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
100021a0:	e9 45 01 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
100021a5:	31 c0                	xor    eax,eax
100021a7:	80 fa 07             	cmp    dl,0x7
100021aa:	0f 85 af 01 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
100021b0:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
100021b6:	50                   	push   eax
100021b7:	50                   	push   eax
100021b8:	6a 00                	push   0x0
100021ba:	56                   	push   esi
100021bb:	e8 fc ff ff ff       	call   100021bc <x87Handler(regs*)+0x15e4>	100021bc: R_386_PC32	fpuGetReg(int)
100021c0:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100021c6:	52                   	push   edx
100021c7:	52                   	push   edx
100021c8:	8b 95 90 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x670]
100021ce:	ff 72 04             	push   DWORD PTR [edx+0x4]
100021d1:	ff 32                	push   DWORD PTR [edx]
100021d3:	50                   	push   eax
100021d4:	e8 fc ff ff ff       	call   100021d5 <x87Handler(regs*)+0x15fd>	100021d5: R_386_PC32	fpu64ToInternal(unsigned long long)
100021d9:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100021df:	51                   	push   ecx
100021e0:	b9 03 00 00 00       	mov    ecx,0x3
100021e5:	89 e7                	mov    edi,esp
100021e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021e9:	83 ec 0c             	sub    esp,0xc
100021ec:	b9 03 00 00 00       	mov    ecx,0x3
100021f1:	89 e7                	mov    edi,esp
100021f3:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100021f9:	89 c6                	mov    esi,eax
100021fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021fd:	52                   	push   edx
100021fe:	e8 fc ff ff ff       	call   100021ff <x87Handler(regs*)+0x1627>	100021ff: R_386_PC32	fpuDivide(_Float80, _Float80)
10002203:	83 c4 20             	add    esp,0x20
10002206:	b9 03 00 00 00       	mov    ecx,0x3
1000220b:	89 e7                	mov    edi,esp
1000220d:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
10002213:	89 d6                	mov    esi,edx
10002215:	e9 d2 00 00 00       	jmp    100022ec <x87Handler(regs*)+0x1714>
1000221a:	80 fa 02             	cmp    dl,0x2
1000221d:	75 2e                	jne    1000224d <x87Handler(regs*)+0x1675>
1000221f:	8d 75 94             	lea    esi,[ebp-0x6c]
10002222:	57                   	push   edi
10002223:	57                   	push   edi
10002224:	6a 00                	push   0x0
10002226:	56                   	push   esi
10002227:	e8 fc ff ff ff       	call   10002228 <x87Handler(regs*)+0x1650>	10002228: R_386_PC32	fpuGetReg(int)
1000222c:	83 ec 14             	sub    esp,0x14
1000222f:	b9 03 00 00 00       	mov    ecx,0x3
10002234:	89 e7                	mov    edi,esp
10002236:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002238:	e8 fc ff ff ff       	call   10002239 <x87Handler(regs*)+0x1661>	10002239: R_386_PC32	fpuInternalTo64(_Float80)
1000223d:	8b 8d 90 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x670]
10002243:	89 01                	mov    DWORD PTR [ecx],eax
10002245:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10002248:	e9 7e ed ff ff       	jmp    10000fcb <x87Handler(regs*)+0x3f3>
1000224d:	31 c0                	xor    eax,eax
1000224f:	80 fa 03             	cmp    dl,0x3
10002252:	0f 85 07 01 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10002258:	8d 75 a0             	lea    esi,[ebp-0x60]
1000225b:	83 ec 0c             	sub    esp,0xc
1000225e:	56                   	push   esi
1000225f:	e8 fc ff ff ff       	call   10002260 <x87Handler(regs*)+0x1688>	10002260: R_386_PC32	fpuPop()
10002264:	83 ec 14             	sub    esp,0x14
10002267:	b9 03 00 00 00       	mov    ecx,0x3
1000226c:	89 e7                	mov    edi,esp
1000226e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002270:	e8 fc ff ff ff       	call   10002271 <x87Handler(regs*)+0x1699>	10002271: R_386_PC32	fpuInternalTo64(_Float80)
10002275:	8b bd 90 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x670]
1000227b:	89 07                	mov    DWORD PTR [edi],eax
1000227d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10002280:	e9 46 ed ff ff       	jmp    10000fcb <x87Handler(regs*)+0x3f3>
10002285:	31 c0                	xor    eax,eax
10002287:	80 bd a7 f9 ff ff 01 	cmp    BYTE PTR [ebp-0x659],0x1
1000228e:	0f 85 cb 00 00 00    	jne    1000235f <x87Handler(regs*)+0x1787>
10002294:	8d 75 ac             	lea    esi,[ebp-0x54]
10002297:	52                   	push   edx
10002298:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000229e:	0f b7 00             	movzx  eax,WORD PTR [eax]
100022a1:	31 d2                	xor    edx,edx
100022a3:	52                   	push   edx
100022a4:	50                   	push   eax
100022a5:	56                   	push   esi
100022a6:	e8 fc ff ff ff       	call   100022a7 <x87Handler(regs*)+0x16cf>	100022a7: R_386_PC32	fpuLongToFloat(long long)
100022ab:	8d 55 b8             	lea    edx,[ebp-0x48]
100022ae:	83 ec 0c             	sub    esp,0xc
100022b1:	6a 00                	push   0x0
100022b3:	52                   	push   edx
100022b4:	e8 fc ff ff ff       	call   100022b5 <x87Handler(regs*)+0x16dd>	100022b5: R_386_PC32	fpuGetReg(int)
100022b9:	8d 45 c4             	lea    eax,[ebp-0x3c]
100022bc:	51                   	push   ecx
100022bd:	b9 03 00 00 00       	mov    ecx,0x3
100022c2:	89 e7                	mov    edi,esp
100022c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022c6:	83 ec 0c             	sub    esp,0xc
100022c9:	b9 03 00 00 00       	mov    ecx,0x3
100022ce:	89 e7                	mov    edi,esp
100022d0:	8d 55 b8             	lea    edx,[ebp-0x48]
100022d3:	89 d6                	mov    esi,edx
100022d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022d7:	50                   	push   eax
100022d8:	e8 fc ff ff ff       	call   100022d9 <x87Handler(regs*)+0x1701>	100022d9: R_386_PC32	fpuMultiply(_Float80, _Float80)
100022dd:	83 c4 20             	add    esp,0x20
100022e0:	b9 03 00 00 00       	mov    ecx,0x3
100022e5:	89 e7                	mov    edi,esp
100022e7:	8d 45 c4             	lea    eax,[ebp-0x3c]
100022ea:	89 c6                	mov    esi,eax
100022ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022ee:	6a 00                	push   0x0
100022f0:	e8 fc ff ff ff       	call   100022f1 <x87Handler(regs*)+0x1719>	100022f1: R_386_PC32	fpuSetReg(int, _Float80)
100022f5:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x658]
100022fb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100022fe:	e9 3e ea ff ff       	jmp    10000d41 <x87Handler(regs*)+0x169>
10002303:	8a 95 a7 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x659]
10002309:	80 fa 05             	cmp    dl,0x5
1000230c:	75 1a                	jne    10002328 <x87Handler(regs*)+0x1750>
1000230e:	8d 75 d0             	lea    esi,[ebp-0x30]
10002311:	50                   	push   eax
10002312:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10002318:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000231b:	ff 30                	push   DWORD PTR [eax]
1000231d:	56                   	push   esi
1000231e:	e8 fc ff ff ff       	call   1000231f <x87Handler(regs*)+0x1747>	1000231f: R_386_PC32	fpuULongToFloat(unsigned long long)
10002323:	e9 92 ec ff ff       	jmp    10000fba <x87Handler(regs*)+0x3e2>
10002328:	31 c0                	xor    eax,eax
1000232a:	80 fa 07             	cmp    dl,0x7
1000232d:	75 30                	jne    1000235f <x87Handler(regs*)+0x1787>
1000232f:	8d 75 dc             	lea    esi,[ebp-0x24]
10002332:	83 ec 0c             	sub    esp,0xc
10002335:	56                   	push   esi
10002336:	e8 fc ff ff ff       	call   10002337 <x87Handler(regs*)+0x175f>	10002337: R_386_PC32	fpuPop()
1000233b:	83 ec 14             	sub    esp,0x14
1000233e:	b9 03 00 00 00       	mov    ecx,0x3
10002343:	89 e7                	mov    edi,esp
10002345:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002347:	e8 fc ff ff ff       	call   10002348 <x87Handler(regs*)+0x1770>	10002348: R_386_PC32	fpuFloatToLong(_Float80)
1000234c:	83 c4 20             	add    esp,0x20
1000234f:	8b 8d 90 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x670]
10002355:	89 01                	mov    DWORD PTR [ecx],eax
10002357:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
1000235a:	e9 b2 ec ff ff       	jmp    10001011 <x87Handler(regs*)+0x439>
1000235f:	8d 65 f4             	lea    esp,[ebp-0xc]
10002362:	5b                   	pop    ebx
10002363:	5e                   	pop    esi
10002364:	5f                   	pop    edi
10002365:	5d                   	pop    ebp
10002366:	c3                   	ret    

10002367 <begin()>:
10002367:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002369: R_386_32	x87FaultIntercept
	1000236d: R_386_32	x87Handler(regs*)
10002371:	c3                   	ret    

10002372 <_GLOBAL__sub_I__Z5startv>:
10002372:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10002374: R_386_32	fpuState
1000237c:	c3                   	ret    
1000237d:	65 6d                	gs ins DWORD PTR es:[edi],dx
1000237f:	38 30                	cmp    BYTE PTR [eax],dh
10002381:	38 37                	cmp    BYTE PTR [edi],dh
10002383:	20 62 61             	and    BYTE PTR [edx+0x61],ah
10002386:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
1000238a:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
1000238e:	74 00                	je     10002390 <_GLOBAL__sub_I__Z5startv+0x1e>
10002390:	72 2d                	jb     100023bf <_GLOBAL__sub_I__Z5startv+0x4d>
10002392:	3e 65 73 70          	ds gs jae 10002406 <_GLOBAL__sub_I__Z5startv+0x94>
10002396:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
1000239c:	58                   	pop    eax
1000239d:	0a 00                	or     al,BYTE PTR [eax]
1000239f:	78 38                	js     100023d9 <_GLOBAL__sub_I__Z5startv+0x67>
100023a1:	37                   	aaa    
100023a2:	20 68 61             	and    BYTE PTR [eax+0x61],ch
100023a5:	6e                   	outs   dx,BYTE PTR ds:[esi]
100023a6:	64 6c                	fs ins BYTE PTR es:[edi],dx
100023a8:	65 72 20             	gs jb  100023cb <_GLOBAL__sub_I__Z5startv+0x59>
100023ab:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100023ae:	6c                   	ins    BYTE PTR es:[edi],dx
100023af:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
100023b4:	74 68                	je     1000241e <_GLOBAL__sub_I__Z5startv+0xac>
100023b6:	20 66 61             	and    BYTE PTR [esi+0x61],ah
100023b9:	75 6c                	jne    10002427 <_GLOBAL__sub_I__Z5startv+0xb5>
100023bb:	74 69                	je     10002426 <_GLOBAL__sub_I__Z5startv+0xb4>
100023bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100023be:	67 20 45 49          	and    BYTE PTR [di+0x49],al
100023c2:	50                   	push   eax
100023c3:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
100023c6:	20 30                	and    BYTE PTR [eax],dh
100023c8:	78 25                	js     100023ef <_GLOBAL__sub_I__Z5startv+0x7d>
100023ca:	58                   	pop    eax
100023cb:	0a 00                	or     al,BYTE PTR [eax]
100023cd:	78 38                	js     10002407 <_GLOBAL__sub_I__Z5startv+0x95>
100023cf:	37                   	aaa    
100023d0:	3a 20                	cmp    ah,BYTE PTR [eax]
100023d2:	25 58 20 25 58       	and    eax,0x58252058
100023d7:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
100023dd:	0a 00                	or     al,BYTE PTR [eax]
100023df:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
100023e4:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
100023e9:	64 72 65             	fs jb  10002451 <_DYNAMIC+0x15>
100023ec:	73 73                	jae    10002461 <_DYNAMIC+0x25>
100023ee:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
100023f4:	58                   	pop    eax
100023f5:	0a 00                	or     al,BYTE PTR [eax]
100023f7:	90                   	nop
100023f8:	bb 0c 00 10 eb       	mov    ebx,0xeb10000c	100023f8: R_386_32	.text
	100023fc: R_386_32	.text
100023fd:	0c 00                	or     al,0x0
100023ff:	10 ab 0e 00 10 ab    	adc    BYTE PTR [ebx-0x54effff2],ch	10002400: R_386_32	.text
	10002404: R_386_32	.text
10002405:	0e                   	push   cs
10002406:	00 10                	add    BYTE PTR [eax],dl
10002408:	ab                   	stos   DWORD PTR es:[edi],eax	10002408: R_386_32	.text
10002409:	0e                   	push   cs
1000240a:	00 10                	add    BYTE PTR [eax],dl
1000240c:	ab                   	stos   DWORD PTR es:[edi],eax	1000240c: R_386_32	.text
1000240d:	0e                   	push   cs
1000240e:	00 10                	add    BYTE PTR [eax],dl
10002410:	ab                   	stos   DWORD PTR es:[edi],eax	10002410: R_386_32	.text
10002411:	0e                   	push   cs
10002412:	00 10                	add    BYTE PTR [eax],dl
10002414:	ab                   	stos   DWORD PTR es:[edi],eax	10002414: R_386_32	.text
10002415:	0e                   	push   cs
10002416:	00 10                	add    BYTE PTR [eax],dl
10002418:	4b                   	dec    ebx	10002418: R_386_32	.text
10002419:	0d 00 10 7a 0d       	or     eax,0xd7a1000	1000241c: R_386_32	.text
1000241e:	00 10                	add    BYTE PTR [eax],dl
10002420:	b7 0d                	mov    bh,0xd	10002420: R_386_32	.text
10002422:	00 10                	add    BYTE PTR [eax],dl
10002424:	e6 0d                	out    0xd,al	10002424: R_386_32	.text
10002426:	00 10                	add    BYTE PTR [eax],dl
10002428:	15 0e 00 10 47       	adc    eax,0x4710000e	10002428: R_386_32	.text
	1000242c: R_386_32	.text
1000242d:	0e                   	push   cs
1000242e:	00 10                	add    BYTE PTR [eax],dl
10002430:	79 0e                	jns    10002440 <_DYNAMIC+0x4>	10002430: R_386_32	.text
10002432:	00 10                	add    BYTE PTR [eax],dl
