
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	83 ec 1c             	sub    esp,0x1c
10000014:	0f b7 5d 10          	movzx  ebx,WORD PTR [ebp+0x10]
10000018:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001e:	31 c0                	xor    eax,eax
10000020:	31 d2                	xor    edx,edx
10000022:	66 83 f9 3e          	cmp    cx,0x3e
10000026:	77 52                	ja     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000028:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000002b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
1000002e:	8d 83 01 c0 ff ff    	lea    eax,[ebx-0x3fff]
10000034:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000037:	99                   	cdq    
10000038:	b9 3e 00 00 00       	mov    ecx,0x3e
1000003d:	31 db                	xor    ebx,ebx
1000003f:	29 c1                	sub    ecx,eax
10000041:	19 d3                	sbb    ebx,edx
10000043:	53                   	push   ebx
10000044:	51                   	push   ecx
10000045:	57                   	push   edi
10000046:	68 79 24 00 10       	push   0x10002479	10000047: R_386_32	.text
1000004b:	e8 fc ff ff ff       	call   1000004c <fpuFloatToLong(_Float80)+0x41>	1000004c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000050:	b9 3e 00 00 00       	mov    ecx,0x3e
10000055:	2b 4d e4             	sub    ecx,DWORD PTR [ebp-0x1c]
10000058:	89 f0                	mov    eax,esi
1000005a:	89 fa                	mov    edx,edi
1000005c:	0f ad d0             	shrd   eax,edx,cl
1000005f:	d3 ea                	shr    edx,cl
10000061:	f6 c1 20             	test   cl,0x20
10000064:	74 04                	je     1000006a <fpuFloatToLong(_Float80)+0x5f>
10000066:	89 d0                	mov    eax,edx
10000068:	31 d2                	xor    edx,edx
1000006a:	83 c4 10             	add    esp,0x10
1000006d:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000071:	74 07                	je     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000073:	f7 d8                	neg    eax
10000075:	83 d2 00             	adc    edx,0x0
10000078:	f7 da                	neg    edx
1000007a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000007d:	5b                   	pop    ebx
1000007e:	5e                   	pop    esi
1000007f:	5f                   	pop    edi
10000080:	5d                   	pop    ebp
10000081:	c3                   	ret    

10000082 <fpuULongToFloat(unsigned long long)>:
10000082:	55                   	push   ebp
10000083:	89 e5                	mov    ebp,esp
10000085:	56                   	push   esi
10000086:	53                   	push   ebx
10000087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000008a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000008d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000090:	89 de                	mov    esi,ebx
10000092:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000096:	09 ce                	or     esi,ecx
10000098:	75 15                	jne    100000af <fpuULongToFloat(unsigned long long)+0x2d>
1000009a:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000ad:	eb 31                	jmp    100000e0 <fpuULongToFloat(unsigned long long)+0x5e>
100000af:	31 d2                	xor    edx,edx
100000b1:	89 de                	mov    esi,ebx
100000b3:	c1 ee 1e             	shr    esi,0x1e
100000b6:	74 09                	je     100000c1 <fpuULongToFloat(unsigned long long)+0x3f>
100000b8:	42                   	inc    edx
100000b9:	0f ac d9 01          	shrd   ecx,ebx,0x1
100000bd:	d1 eb                	shr    ebx,1
100000bf:	eb f0                	jmp    100000b1 <fpuULongToFloat(unsigned long long)+0x2f>
100000c1:	31 f6                	xor    esi,esi
100000c3:	0f ba e3 1d          	bt     ebx,0x1d
100000c7:	72 07                	jb     100000d0 <fpuULongToFloat(unsigned long long)+0x4e>
100000c9:	01 c9                	add    ecx,ecx
100000cb:	11 db                	adc    ebx,ebx
100000cd:	46                   	inc    esi
100000ce:	eb f3                	jmp    100000c3 <fpuULongToFloat(unsigned long long)+0x41>
100000d0:	89 08                	mov    DWORD PTR [eax],ecx
100000d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000d5:	66 81 c2 3d 40       	add    dx,0x403d
100000da:	29 f2                	sub    edx,esi
100000dc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000e0:	5b                   	pop    ebx
100000e1:	5e                   	pop    esi
100000e2:	5d                   	pop    ebp
100000e3:	c2 04 00             	ret    0x4

100000e6 <fpuLongToFloat(long long)>:
100000e6:	55                   	push   ebp
100000e7:	89 e5                	mov    ebp,esp
100000e9:	56                   	push   esi
100000ea:	53                   	push   ebx
100000eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000ee:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000f1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000f4:	89 de                	mov    esi,ebx
100000f6:	09 ce                	or     esi,ecx
100000f8:	75 19                	jne    10000113 <fpuLongToFloat(long long)+0x2d>
100000fa:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000fe:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000104:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000010a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000111:	eb 43                	jmp    10000156 <fpuLongToFloat(long long)+0x70>
10000113:	31 d2                	xor    edx,edx
10000115:	85 db                	test   ebx,ebx
10000117:	79 09                	jns    10000122 <fpuLongToFloat(long long)+0x3c>
10000119:	f7 d9                	neg    ecx
1000011b:	83 d3 00             	adc    ebx,0x0
1000011e:	f7 db                	neg    ebx
10000120:	b2 01                	mov    dl,0x1
10000122:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000125:	31 d2                	xor    edx,edx
10000127:	89 de                	mov    esi,ebx
10000129:	c1 ee 1e             	shr    esi,0x1e
1000012c:	74 09                	je     10000137 <fpuLongToFloat(long long)+0x51>
1000012e:	42                   	inc    edx
1000012f:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000133:	d1 eb                	shr    ebx,1
10000135:	eb f0                	jmp    10000127 <fpuLongToFloat(long long)+0x41>
10000137:	31 f6                	xor    esi,esi
10000139:	0f ba e3 1d          	bt     ebx,0x1d
1000013d:	72 07                	jb     10000146 <fpuLongToFloat(long long)+0x60>
1000013f:	01 c9                	add    ecx,ecx
10000141:	11 db                	adc    ebx,ebx
10000143:	46                   	inc    esi
10000144:	eb f3                	jmp    10000139 <fpuLongToFloat(long long)+0x53>
10000146:	89 08                	mov    DWORD PTR [eax],ecx
10000148:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
1000014b:	66 81 c2 3d 40       	add    dx,0x403d
10000150:	29 f2                	sub    edx,esi
10000152:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000156:	5b                   	pop    ebx
10000157:	5e                   	pop    esi
10000158:	5d                   	pop    ebp
10000159:	c2 04 00             	ret    0x4

1000015c <fpuGet0()>:
1000015c:	55                   	push   ebp
1000015d:	89 e5                	mov    ebp,esp
1000015f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000162:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000016c:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
10000173:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000179:	5d                   	pop    ebp
1000017a:	c2 04 00             	ret    0x4

1000017d <fpuGet1()>:
1000017d:	55                   	push   ebp
1000017e:	89 e5                	mov    ebp,esp
10000180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000183:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000187:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000018d:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
10000194:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
1000019a:	5d                   	pop    ebp
1000019b:	c2 04 00             	ret    0x4

1000019e <fpuGetPi()>:
1000019e:	55                   	push   ebp
1000019f:	89 e5                	mov    ebp,esp
100001a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a4:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a8:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
100001ae:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
100001b5:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001bb:	5d                   	pop    ebp
100001bc:	c2 04 00             	ret    0x4

100001bf <fpuGetLog2E()>:
100001bf:	55                   	push   ebp
100001c0:	89 e5                	mov    ebp,esp
100001c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c5:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c9:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001cf:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001d6:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001dc:	5d                   	pop    ebp
100001dd:	c2 04 00             	ret    0x4

100001e0 <fpuGetLogE2()>:
100001e0:	55                   	push   ebp
100001e1:	89 e5                	mov    ebp,esp
100001e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e6:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001ea:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001f0:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001f7:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001fd:	5d                   	pop    ebp
100001fe:	c2 04 00             	ret    0x4

10000201 <fpuGetLog210()>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000207:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000020b:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
10000211:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
10000218:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000021e:	5d                   	pop    ebp
1000021f:	c2 04 00             	ret    0x4

10000222 <fpuGetLog102()>:
10000222:	55                   	push   ebp
10000223:	89 e5                	mov    ebp,esp
10000225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000228:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000022c:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000232:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000239:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
1000023f:	5d                   	pop    ebp
10000240:	c2 04 00             	ret    0x4

10000243 <fpuIsSecondLarger(_Float80, _Float80)>:
10000243:	55                   	push   ebp
10000244:	89 e5                	mov    ebp,esp
10000246:	b0 01                	mov    al,0x1
10000248:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000024b:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
1000024f:	77 13                	ja     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000251:	b0 00                	mov    al,0x0
10000253:	72 0f                	jb     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000255:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000258:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
1000025b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000025e:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000261:	0f 92 c0             	setb   al
10000264:	5d                   	pop    ebp
10000265:	c3                   	ret    

10000266 <fpuAreEqual(_Float80, _Float80)>:
10000266:	55                   	push   ebp
10000267:	89 e5                	mov    ebp,esp
10000269:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000026c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000272:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10000275:	81 e2 ff ff ff 00    	and    edx,0xffffff
1000027b:	31 c0                	xor    eax,eax
1000027d:	39 d1                	cmp    ecx,edx
1000027f:	75 11                	jne    10000292 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000281:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000284:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
10000287:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000028a:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
1000028d:	09 c2                	or     edx,eax
1000028f:	0f 94 c0             	sete   al
10000292:	5d                   	pop    ebp
10000293:	c3                   	ret    

10000294 <fpuUnorderedCompare(_Float80, _Float80)>:
10000294:	55                   	push   ebp
10000295:	89 e5                	mov    ebp,esp
10000297:	57                   	push   edi
10000298:	56                   	push   esi
10000299:	53                   	push   ebx
1000029a:	83 ec 44             	sub    esp,0x44
1000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100002a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
100002a9:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
100002ad:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
100002b0:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
100002b3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
100002b6:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
100002b9:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
100002bd:	8d 7d c0             	lea    edi,[ebp-0x40]
100002c0:	b9 03 00 00 00       	mov    ecx,0x3
100002c5:	8d 75 08             	lea    esi,[ebp+0x8]
100002c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ca:	8d 7d cc             	lea    edi,[ebp-0x34]
100002cd:	8d 75 14             	lea    esi,[ebp+0x14]
100002d0:	b9 03 00 00 00       	mov    ecx,0x3
100002d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002d7:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002da:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002dd:	89 c2                	mov    edx,eax
100002df:	31 da                	xor    edx,ebx
100002e1:	09 d1                	or     ecx,edx
100002e3:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002e7:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002ea:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002f3:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002f9:	39 d1                	cmp    ecx,edx
100002fb:	75 08                	jne    10000305 <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002fd:	31 d2                	xor    edx,edx
100002ff:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
10000303:	75 1c                	jne    10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000305:	b2 01                	mov    dl,0x1
10000307:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
1000030b:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
1000030f:	72 10                	jb     10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000311:	0f 94 c1             	sete   cl
10000314:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
10000317:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
1000031a:	19 d8                	sbb    eax,ebx
1000031c:	0f 92 c2             	setb   dl
1000031f:	21 ca                	and    edx,ecx
10000321:	a0 01 00 00 00       	mov    al,ds:0x1	10000322: R_386_32	fpuState
10000326:	83 e0 ba             	and    eax,0xffffffba
10000329:	8d 7d d8             	lea    edi,[ebp-0x28]
1000032c:	b9 03 00 00 00       	mov    ecx,0x3
10000331:	8d 75 08             	lea    esi,[ebp+0x8]
10000334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000336:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000339:	b9 03 00 00 00       	mov    ecx,0x3
1000033e:	8d 75 14             	lea    esi,[ebp+0x14]
10000341:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000343:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10000346:	81 e3 ff ff ff 00    	and    ebx,0xffffff
1000034c:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000034f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000355:	39 cb                	cmp    ebx,ecx
10000357:	0f 94 c1             	sete   cl
1000035a:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
1000035d:	c1 e1 06             	shl    ecx,0x6
10000360:	09 d0                	or     eax,edx
10000362:	09 c8                	or     eax,ecx
10000364:	a2 01 00 00 00       	mov    ds:0x1,al	10000365: R_386_32	fpuState
10000369:	83 c4 44             	add    esp,0x44
1000036c:	5b                   	pop    ebx
1000036d:	5e                   	pop    esi
1000036e:	5f                   	pop    edi
1000036f:	5d                   	pop    ebp
10000370:	c3                   	ret    

10000371 <fpuNormalise(_Float80)>:
10000371:	55                   	push   ebp
10000372:	89 e5                	mov    ebp,esp
10000374:	57                   	push   edi
10000375:	56                   	push   esi
10000376:	53                   	push   ebx
10000377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000037d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000380:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000383:	8d 72 01             	lea    esi,[edx+0x1]
10000386:	89 df                	mov    edi,ebx
10000388:	c1 ef 1e             	shr    edi,0x1e
1000038b:	74 0e                	je     1000039b <fpuNormalise(_Float80)+0x2a>
1000038d:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000391:	d1 eb                	shr    ebx,1
10000393:	89 f2                	mov    edx,esi
10000395:	eb ec                	jmp    10000383 <fpuNormalise(_Float80)+0x12>
10000397:	01 c9                	add    ecx,ecx
10000399:	11 db                	adc    ebx,ebx
1000039b:	0f ba e3 1d          	bt     ebx,0x1d
1000039f:	72 1d                	jb     100003be <fpuNormalise(_Float80)+0x4d>
100003a1:	4a                   	dec    edx
100003a2:	89 de                	mov    esi,ebx
100003a4:	09 ce                	or     esi,ecx
100003a6:	75 ef                	jne    10000397 <fpuNormalise(_Float80)+0x26>
100003a8:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
100003af:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
100003b6:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
100003bc:	eb 0a                	jmp    100003c8 <fpuNormalise(_Float80)+0x57>
100003be:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
100003c1:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
100003c4:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
100003c8:	8d 75 0c             	lea    esi,[ebp+0xc]
100003cb:	b9 03 00 00 00       	mov    ecx,0x3
100003d0:	89 c7                	mov    edi,eax
100003d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003d4:	5b                   	pop    ebx
100003d5:	5e                   	pop    esi
100003d6:	5f                   	pop    edi
100003d7:	5d                   	pop    ebp
100003d8:	c2 04 00             	ret    0x4

100003db <fpuAdd(_Float80, _Float80)>:
100003db:	55                   	push   ebp
100003dc:	89 e5                	mov    ebp,esp
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	53                   	push   ebx
100003e1:	83 ec 2c             	sub    esp,0x2c
100003e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003ea:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003ed:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003f3:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003f7:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003fa:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003fd:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10000400:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
10000403:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
10000406:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
10000409:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000040d:	66 39 c8             	cmp    ax,cx
10000410:	72 2d                	jb     1000043f <fpuAdd(_Float80, _Float80)+0x64>
10000412:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
10000415:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000418:	19 f8                	sbb    eax,edi
1000041a:	73 09                	jae    10000425 <fpuAdd(_Float80, _Float80)+0x4a>
1000041c:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000420:	66 39 c8             	cmp    ax,cx
10000423:	74 24                	je     10000449 <fpuAdd(_Float80, _Float80)+0x6e>
10000425:	88 d8                	mov    al,bl
10000427:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
1000042a:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
1000042d:	89 f0                	mov    eax,esi
1000042f:	89 fa                	mov    edx,edi
10000431:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
10000434:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
10000437:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000043a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000043d:	eb 0a                	jmp    10000449 <fpuAdd(_Float80, _Float80)+0x6e>
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
10000447:	89 c1                	mov    ecx,eax
10000449:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
1000044c:	29 c8                	sub    eax,ecx
1000044e:	88 c1                	mov    cl,al
10000450:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10000453:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10000456:	0f ad d0             	shrd   eax,edx,cl
10000459:	d3 ea                	shr    edx,cl
1000045b:	f6 c1 20             	test   cl,0x20
1000045e:	74 04                	je     10000464 <fpuAdd(_Float80, _Float80)+0x89>
10000460:	89 d0                	mov    eax,edx
10000462:	31 d2                	xor    edx,edx
10000464:	89 d1                	mov    ecx,edx
10000466:	89 c2                	mov    edx,eax
10000468:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000046c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000470:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
10000473:	75 13                	jne    10000488 <fpuAdd(_Float80, _Float80)+0xad>
10000475:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
10000478:	89 d0                	mov    eax,edx
1000047a:	89 ca                	mov    edx,ecx
1000047c:	01 f0                	add    eax,esi
1000047e:	11 fa                	adc    edx,edi
10000480:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000483:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000486:	eb 58                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
10000488:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
1000048c:	74 24                	je     100004b2 <fpuAdd(_Float80, _Float80)+0xd7>
1000048e:	39 d6                	cmp    esi,edx
10000490:	89 f8                	mov    eax,edi
10000492:	19 c8                	sbb    eax,ecx
10000494:	89 d0                	mov    eax,edx
10000496:	89 ca                	mov    edx,ecx
10000498:	73 0c                	jae    100004a6 <fpuAdd(_Float80, _Float80)+0xcb>
1000049a:	29 f0                	sub    eax,esi
1000049c:	19 fa                	sbb    edx,edi
1000049e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004a1:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004a4:	eb 26                	jmp    100004cc <fpuAdd(_Float80, _Float80)+0xf1>
100004a6:	29 c6                	sub    esi,eax
100004a8:	19 cf                	sbb    edi,ecx
100004aa:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004ad:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004b0:	eb 2a                	jmp    100004dc <fpuAdd(_Float80, _Float80)+0x101>
100004b2:	84 db                	test   bl,bl
100004b4:	74 2a                	je     100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004b6:	39 f2                	cmp    edx,esi
100004b8:	89 c8                	mov    eax,ecx
100004ba:	19 f8                	sbb    eax,edi
100004bc:	89 d0                	mov    eax,edx
100004be:	89 ca                	mov    edx,ecx
100004c0:	73 10                	jae    100004d2 <fpuAdd(_Float80, _Float80)+0xf7>
100004c2:	29 c6                	sub    esi,eax
100004c4:	19 cf                	sbb    edi,ecx
100004c6:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004c9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004cc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004d0:	eb 0e                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004d2:	29 f0                	sub    eax,esi
100004d4:	19 fa                	sbb    edx,edi
100004d6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004d9:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004dc:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004e0:	83 ec 0c             	sub    esp,0xc
100004e3:	8d 75 dc             	lea    esi,[ebp-0x24]
100004e6:	b9 03 00 00 00       	mov    ecx,0x3
100004eb:	89 e7                	mov    edi,esp
100004ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004f2:	e8 fc ff ff ff       	call   100004f3 <fpuAdd(_Float80, _Float80)+0x118>	100004f3: R_386_PC32	fpuNormalise(_Float80)
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	8d 65 f4             	lea    esp,[ebp-0xc]
100004fd:	5b                   	pop    ebx
100004fe:	5e                   	pop    esi
100004ff:	5f                   	pop    edi
10000500:	5d                   	pop    ebp
10000501:	c2 04 00             	ret    0x4

10000504 <fpuAbs(_Float80)>:
10000504:	55                   	push   ebp
10000505:	89 e5                	mov    ebp,esp
10000507:	57                   	push   edi
10000508:	56                   	push   esi
10000509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050c:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
10000510:	8d 75 0c             	lea    esi,[ebp+0xc]
10000513:	b9 03 00 00 00       	mov    ecx,0x3
10000518:	89 c7                	mov    edi,eax
1000051a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000051c:	5e                   	pop    esi
1000051d:	5f                   	pop    edi
1000051e:	5d                   	pop    ebp
1000051f:	c2 04 00             	ret    0x4

10000522 <fpuChs(_Float80)>:
10000522:	55                   	push   ebp
10000523:	89 e5                	mov    ebp,esp
10000525:	57                   	push   edi
10000526:	56                   	push   esi
10000527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052a:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
1000052e:	8d 75 0c             	lea    esi,[ebp+0xc]
10000531:	b9 03 00 00 00       	mov    ecx,0x3
10000536:	89 c7                	mov    edi,eax
10000538:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000053a:	5e                   	pop    esi
1000053b:	5f                   	pop    edi
1000053c:	5d                   	pop    ebp
1000053d:	c2 04 00             	ret    0x4

10000540 <fpuSub(_Float80, _Float80)>:
10000540:	55                   	push   ebp
10000541:	89 e5                	mov    ebp,esp
10000543:	57                   	push   edi
10000544:	56                   	push   esi
10000545:	53                   	push   ebx
10000546:	83 ec 1c             	sub    esp,0x1c
10000549:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000054c:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000550:	8d 75 18             	lea    esi,[ebp+0x18]
10000553:	b9 03 00 00 00       	mov    ecx,0x3
10000558:	89 e7                	mov    edi,esp
1000055a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000055c:	83 ec 0c             	sub    esp,0xc
1000055f:	8d 75 0c             	lea    esi,[ebp+0xc]
10000562:	b9 03 00 00 00       	mov    ecx,0x3
10000567:	89 e7                	mov    edi,esp
10000569:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000056b:	53                   	push   ebx
1000056c:	e8 fc ff ff ff       	call   1000056d <fpuSub(_Float80, _Float80)+0x2d>	1000056d: R_386_PC32	fpuAdd(_Float80, _Float80)
10000571:	89 d8                	mov    eax,ebx
10000573:	8d 65 f4             	lea    esp,[ebp-0xc]
10000576:	5b                   	pop    ebx
10000577:	5e                   	pop    esi
10000578:	5f                   	pop    edi
10000579:	5d                   	pop    ebp
1000057a:	c2 04 00             	ret    0x4

1000057d <fpuReverseSub(_Float80, _Float80)>:
1000057d:	55                   	push   ebp
1000057e:	89 e5                	mov    ebp,esp
10000580:	57                   	push   edi
10000581:	56                   	push   esi
10000582:	53                   	push   ebx
10000583:	83 ec 1c             	sub    esp,0x1c
10000586:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000589:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
1000058d:	8d 75 0c             	lea    esi,[ebp+0xc]
10000590:	b9 03 00 00 00       	mov    ecx,0x3
10000595:	89 e7                	mov    edi,esp
10000597:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000599:	83 ec 0c             	sub    esp,0xc
1000059c:	8d 75 18             	lea    esi,[ebp+0x18]
1000059f:	b9 03 00 00 00       	mov    ecx,0x3
100005a4:	89 e7                	mov    edi,esp
100005a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005a8:	53                   	push   ebx
100005a9:	e8 fc ff ff ff       	call   100005aa <fpuReverseSub(_Float80, _Float80)+0x2d>	100005aa: R_386_PC32	fpuAdd(_Float80, _Float80)
100005ae:	89 d8                	mov    eax,ebx
100005b0:	8d 65 f4             	lea    esp,[ebp-0xc]
100005b3:	5b                   	pop    ebx
100005b4:	5e                   	pop    esi
100005b5:	5f                   	pop    edi
100005b6:	5d                   	pop    ebp
100005b7:	c2 04 00             	ret    0x4

100005ba <fpuMultiply(_Float80, _Float80)>:
100005ba:	55                   	push   ebp
100005bb:	89 e5                	mov    ebp,esp
100005bd:	57                   	push   edi
100005be:	56                   	push   esi
100005bf:	53                   	push   ebx
100005c0:	83 ec 38             	sub    esp,0x38
100005c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100005c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005c9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005cc:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005d0:	c1 ea 1f             	shr    edx,0x1f
100005d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005dc:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005df:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005e3:	c1 ef 1f             	shr    edi,0x1f
100005e6:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005e9:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005ec:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005ef:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005f2:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005f5:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005fa:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005fe:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10000601:	0f af ce             	imul   ecx,esi
10000604:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10000607:	0f af d7             	imul   edx,edi
1000060a:	01 d1                	add    ecx,edx
1000060c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000060f:	f7 e6                	mul    esi
10000611:	01 ca                	add    edx,ecx
10000613:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000616:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000619:	8d 75 dc             	lea    esi,[ebp-0x24]
1000061c:	b9 03 00 00 00       	mov    ecx,0x3
10000621:	89 e7                	mov    edi,esp
10000623:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000625:	53                   	push   ebx
10000626:	e8 fc ff ff ff       	call   10000627 <fpuMultiply(_Float80, _Float80)+0x6d>	10000627: R_386_PC32	fpuNormalise(_Float80)
1000062b:	89 d8                	mov    eax,ebx
1000062d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000630:	5b                   	pop    ebx
10000631:	5e                   	pop    esi
10000632:	5f                   	pop    edi
10000633:	5d                   	pop    ebp
10000634:	c2 04 00             	ret    0x4

10000637 <fpuMantissaDivision(unsigned long long, unsigned long long)>:
10000637:	55                   	push   ebp
10000638:	89 e5                	mov    ebp,esp
1000063a:	57                   	push   edi
1000063b:	56                   	push   esi
1000063c:	53                   	push   ebx
1000063d:	83 ec 24             	sub    esp,0x24
10000640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000643:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000646:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000649:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
1000064c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000064f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000652:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000655:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10000658:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
1000065f:	83 c8 ff             	or     eax,0xffffffff
10000662:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000669:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000670:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000677:	31 d2                	xor    edx,edx
10000679:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
1000067c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000067f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000682:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
10000685:	83 f8 ff             	cmp    eax,0xffffffff
10000688:	75 22                	jne    100006ac <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
1000068a:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
1000068d:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000690:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
10000693:	0f ad f3             	shrd   ebx,esi,cl
10000696:	d3 ee                	shr    esi,cl
10000698:	f6 c1 20             	test   cl,0x20
1000069b:	74 04                	je     100006a1 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
1000069d:	89 f3                	mov    ebx,esi
1000069f:	31 f6                	xor    esi,esi
100006a1:	89 d9                	mov    ecx,ebx
100006a3:	83 e1 01             	and    ecx,0x1
100006a6:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
100006a9:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100006ac:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006af:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
100006b2:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
100006b5:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
100006b8:	72 38                	jb     100006f2 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
100006ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
100006c0:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
100006c3:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
100006c6:	83 f8 ff             	cmp    eax,0xffffffff
100006c9:	75 0d                	jne    100006d8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006cb:	81 ca 00 00 00 20    	or     edx,0x20000000
100006d1:	b8 3d 00 00 00       	mov    eax,0x3d
100006d6:	eb 1f                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006d8:	88 c1                	mov    cl,al
100006da:	89 ce                	mov    esi,ecx
100006dc:	c1 ee 05             	shr    esi,0x5
100006df:	83 e6 01             	and    esi,0x1
100006e2:	89 f3                	mov    ebx,esi
100006e4:	83 f3 01             	xor    ebx,0x1
100006e7:	d3 e3                	shl    ebx,cl
100006e9:	d3 e6                	shl    esi,cl
100006eb:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006ee:	09 f2                	or     edx,esi
100006f0:	eb 05                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006f2:	83 f8 ff             	cmp    eax,0xffffffff
100006f5:	74 01                	je     100006f8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006f7:	48                   	dec    eax
100006f8:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006fb:	85 c0                	test   eax,eax
100006fd:	0f 85 76 ff ff ff    	jne    10000679 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
10000703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000706:	83 c4 24             	add    esp,0x24
10000709:	5b                   	pop    ebx
1000070a:	5e                   	pop    esi
1000070b:	5f                   	pop    edi
1000070c:	5d                   	pop    ebp
1000070d:	c3                   	ret    

1000070e <fpuDivide(_Float80, _Float80)>:
1000070e:	55                   	push   ebp
1000070f:	89 e5                	mov    ebp,esp
10000711:	57                   	push   edi
10000712:	56                   	push   esi
10000713:	53                   	push   ebx
10000714:	83 ec 1c             	sub    esp,0x1c
10000717:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000071a:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
1000071d:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
10000720:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
10000723:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000726:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000729:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000072c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000072f:	e8 fc ff ff ff       	call   10000730 <fpuDivide(_Float80, _Float80)+0x22>	10000730: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
10000734:	59                   	pop    ecx
10000735:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000738:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000073b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000073e:	66 05 00 40          	add    ax,0x4000
10000742:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
10000745:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000749:	8d 75 dc             	lea    esi,[ebp-0x24]
1000074c:	b9 03 00 00 00       	mov    ecx,0x3
10000751:	89 e7                	mov    edi,esp
10000753:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000755:	53                   	push   ebx
10000756:	e8 fc ff ff ff       	call   10000757 <fpuDivide(_Float80, _Float80)+0x49>	10000757: R_386_PC32	fpuNormalise(_Float80)
1000075b:	89 d8                	mov    eax,ebx
1000075d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000760:	5b                   	pop    ebx
10000761:	5e                   	pop    esi
10000762:	5f                   	pop    edi
10000763:	5d                   	pop    ebp
10000764:	c2 04 00             	ret    0x4

10000767 <fpuReciprocal(_Float80)>:
10000767:	55                   	push   ebp
10000768:	89 e5                	mov    ebp,esp
1000076a:	57                   	push   edi
1000076b:	56                   	push   esi
1000076c:	53                   	push   ebx
1000076d:	83 ec 2c             	sub    esp,0x2c
10000770:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000773:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000777:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000077e:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000785:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000078b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000078e:	b9 03 00 00 00       	mov    ecx,0x3
10000793:	89 e7                	mov    edi,esp
10000795:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	8d 75 dc             	lea    esi,[ebp-0x24]
1000079d:	b9 03 00 00 00       	mov    ecx,0x3
100007a2:	89 e7                	mov    edi,esp
100007a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a6:	53                   	push   ebx
100007a7:	e8 fc ff ff ff       	call   100007a8 <fpuReciprocal(_Float80)+0x41>	100007a8: R_386_PC32	fpuDivide(_Float80, _Float80)
100007ac:	89 d8                	mov    eax,ebx
100007ae:	8d 65 f4             	lea    esp,[ebp-0xc]
100007b1:	5b                   	pop    ebx
100007b2:	5e                   	pop    esi
100007b3:	5f                   	pop    edi
100007b4:	5d                   	pop    ebp
100007b5:	c2 04 00             	ret    0x4

100007b8 <fpuSquare(_Float80)>:
100007b8:	55                   	push   ebp
100007b9:	89 e5                	mov    ebp,esp
100007bb:	57                   	push   edi
100007bc:	56                   	push   esi
100007bd:	53                   	push   ebx
100007be:	83 ec 1c             	sub    esp,0x1c
100007c1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100007c4:	8d 75 0c             	lea    esi,[ebp+0xc]
100007c7:	b9 03 00 00 00       	mov    ecx,0x3
100007cc:	89 e7                	mov    edi,esp
100007ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007d0:	83 ec 0c             	sub    esp,0xc
100007d3:	8d 75 0c             	lea    esi,[ebp+0xc]
100007d6:	b9 03 00 00 00       	mov    ecx,0x3
100007db:	89 e7                	mov    edi,esp
100007dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007df:	53                   	push   ebx
100007e0:	e8 fc ff ff ff       	call   100007e1 <fpuSquare(_Float80)+0x29>	100007e1: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007e5:	89 d8                	mov    eax,ebx
100007e7:	8d 65 f4             	lea    esp,[ebp-0xc]
100007ea:	5b                   	pop    ebx
100007eb:	5e                   	pop    esi
100007ec:	5f                   	pop    edi
100007ed:	5d                   	pop    ebp
100007ee:	c2 04 00             	ret    0x4

100007f1 <fpuInverseSqrt(_Float80)>:
100007f1:	55                   	push   ebp
100007f2:	89 e5                	mov    ebp,esp
100007f4:	57                   	push   edi
100007f5:	56                   	push   esi
100007f6:	53                   	push   ebx
100007f7:	83 ec 5c             	sub    esp,0x5c
100007fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007fd:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
10000801:	31 d2                	xor    edx,edx
10000803:	b9 03 00 00 00       	mov    ecx,0x3
10000808:	31 db                	xor    ebx,ebx
1000080a:	01 c9                	add    ecx,ecx
1000080c:	11 db                	adc    ebx,ebx
1000080e:	42                   	inc    edx
1000080f:	83 fa 3c             	cmp    edx,0x3c
10000812:	75 f6                	jne    1000080a <fpuInverseSqrt(_Float80)+0x19>
10000814:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
10000817:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
1000081a:	8d 75 0c             	lea    esi,[ebp+0xc]
1000081d:	b9 03 00 00 00       	mov    ecx,0x3
10000822:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000825:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000827:	0f b7 d0             	movzx  edx,ax
1000082a:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000830:	d1 fa                	sar    edx,1
10000832:	b9 ff 3f 00 00       	mov    ecx,0x3fff
10000837:	29 d1                	sub    ecx,edx
10000839:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000083c:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000840:	48                   	dec    eax
10000841:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
10000845:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
1000084c:	8d 5d c4             	lea    ebx,[ebp-0x3c]
1000084f:	83 ec 0c             	sub    esp,0xc
10000852:	b9 03 00 00 00       	mov    ecx,0x3
10000857:	89 e7                	mov    edi,esp
10000859:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000085c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000085e:	53                   	push   ebx
1000085f:	e8 fc ff ff ff       	call   10000860 <fpuInverseSqrt(_Float80)+0x6f>	10000860: R_386_PC32	fpuSquare(_Float80)
10000864:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
10000868:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
1000086c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000086f:	83 ec 14             	sub    esp,0x14
10000872:	8d 75 0c             	lea    esi,[ebp+0xc]
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000087e:	83 ec 0c             	sub    esp,0xc
10000881:	b9 03 00 00 00       	mov    ecx,0x3
10000886:	89 e7                	mov    edi,esp
10000888:	89 de                	mov    esi,ebx
1000088a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000088c:	50                   	push   eax
1000088d:	e8 fc ff ff ff       	call   1000088e <fpuInverseSqrt(_Float80)+0x9d>	1000088e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000892:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
10000898:	8d 55 dc             	lea    edx,[ebp-0x24]
1000089b:	83 c4 1c             	add    esp,0x1c
1000089e:	b9 03 00 00 00       	mov    ecx,0x3
100008a3:	89 e7                	mov    edi,esp
100008a5:	8d 45 d0             	lea    eax,[ebp-0x30]
100008a8:	89 c6                	mov    esi,eax
100008aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008ac:	83 ec 0c             	sub    esp,0xc
100008af:	8d 75 b8             	lea    esi,[ebp-0x48]
100008b2:	b9 03 00 00 00       	mov    ecx,0x3
100008b7:	89 e7                	mov    edi,esp
100008b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008bb:	52                   	push   edx
100008bc:	e8 fc ff ff ff       	call   100008bd <fpuInverseSqrt(_Float80)+0xcc>	100008bd: R_386_PC32	fpuSub(_Float80, _Float80)
100008c1:	8d 5d a8             	lea    ebx,[ebp-0x58]
100008c4:	50                   	push   eax
100008c5:	b9 03 00 00 00       	mov    ecx,0x3
100008ca:	89 e7                	mov    edi,esp
100008cc:	8d 55 dc             	lea    edx,[ebp-0x24]
100008cf:	89 d6                	mov    esi,edx
100008d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008d3:	83 ec 0c             	sub    esp,0xc
100008d6:	b9 03 00 00 00       	mov    ecx,0x3
100008db:	89 e7                	mov    edi,esp
100008dd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008e2:	53                   	push   ebx
100008e3:	e8 fc ff ff ff       	call   100008e4 <fpuInverseSqrt(_Float80)+0xf3>	100008e4: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008e8:	b9 03 00 00 00       	mov    ecx,0x3
100008ed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008f0:	89 de                	mov    esi,ebx
100008f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f4:	83 c4 2c             	add    esp,0x2c
100008f7:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008fa:	0f 85 4c ff ff ff    	jne    1000084c <fpuInverseSqrt(_Float80)+0x5b>
10000900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000903:	8d 65 f4             	lea    esp,[ebp-0xc]
10000906:	5b                   	pop    ebx
10000907:	5e                   	pop    esi
10000908:	5f                   	pop    edi
10000909:	5d                   	pop    ebp
1000090a:	c2 04 00             	ret    0x4

1000090d <fpuSqrt(_Float80)>:
1000090d:	55                   	push   ebp
1000090e:	89 e5                	mov    ebp,esp
10000910:	57                   	push   edi
10000911:	56                   	push   esi
10000912:	53                   	push   ebx
10000913:	83 ec 38             	sub    esp,0x38
10000916:	8d 5d d0             	lea    ebx,[ebp-0x30]
10000919:	8d 75 0c             	lea    esi,[ebp+0xc]
1000091c:	b9 03 00 00 00       	mov    ecx,0x3
10000921:	89 e7                	mov    edi,esp
10000923:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000925:	53                   	push   ebx
10000926:	e8 fc ff ff ff       	call   10000927 <fpuSqrt(_Float80)+0x1a>	10000927: R_386_PC32	fpuInverseSqrt(_Float80)
1000092b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000092f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000936:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000093d:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000943:	83 ec 14             	sub    esp,0x14
10000946:	b9 03 00 00 00       	mov    ecx,0x3
1000094b:	89 e7                	mov    edi,esp
1000094d:	89 de                	mov    esi,ebx
1000094f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000951:	83 ec 0c             	sub    esp,0xc
10000954:	8d 75 dc             	lea    esi,[ebp-0x24]
10000957:	b9 03 00 00 00       	mov    ecx,0x3
1000095c:	89 e7                	mov    edi,esp
1000095e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000960:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000963:	e8 fc ff ff ff       	call   10000964 <fpuSqrt(_Float80)+0x57>	10000964: R_386_PC32	fpuDivide(_Float80, _Float80)
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000096e:	5b                   	pop    ebx
1000096f:	5e                   	pop    esi
10000970:	5f                   	pop    edi
10000971:	5d                   	pop    ebp
10000972:	c2 04 00             	ret    0x4

10000975 <fpuGetReg(int)>:
10000975:	55                   	push   ebp
10000976:	89 e5                	mov    ebp,esp
10000978:	57                   	push   edi
10000979:	56                   	push   esi
1000097a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
1000097d:	83 fe 07             	cmp    esi,0x7
10000980:	76 10                	jbe    10000992 <fpuGetReg(int)+0x1d>
10000982:	83 ec 0c             	sub    esp,0xc
10000985:	68 99 24 00 10       	push   0x10002499	10000986: R_386_32	.text
1000098a:	e8 fc ff ff ff       	call   1000098b <fpuGetReg(int)+0x16>	1000098b: R_386_PC32	Krnl::panic(char const*)
1000098f:	83 c4 10             	add    esp,0x10
10000992:	a0 01 00 00 00       	mov    al,ds:0x1	10000993: R_386_32	fpuState
10000997:	c0 e8 03             	shr    al,0x3
1000099a:	83 e0 07             	and    eax,0x7
1000099d:	01 f0                	add    eax,esi
1000099f:	b9 08 00 00 00       	mov    ecx,0x8
100009a4:	99                   	cdq    
100009a5:	f7 f9                	idiv   ecx
100009a7:	6b c2 0c             	imul   eax,edx,0xc
100009aa:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	100009ac: R_386_32	fpuState
100009b0:	b9 03 00 00 00       	mov    ecx,0x3
100009b5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8d 65 f8             	lea    esp,[ebp-0x8]
100009c0:	5e                   	pop    esi
100009c1:	5f                   	pop    edi
100009c2:	5d                   	pop    ebp
100009c3:	c2 04 00             	ret    0x4

100009c6 <fpuSetReg(int, _Float80)>:
100009c6:	55                   	push   ebp
100009c7:	89 e5                	mov    ebp,esp
100009c9:	57                   	push   edi
100009ca:	56                   	push   esi
100009cb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009ce:	83 ff 07             	cmp    edi,0x7
100009d1:	76 10                	jbe    100009e3 <fpuSetReg(int, _Float80)+0x1d>
100009d3:	83 ec 0c             	sub    esp,0xc
100009d6:	68 99 24 00 10       	push   0x10002499	100009d7: R_386_32	.text
100009db:	e8 fc ff ff ff       	call   100009dc <fpuSetReg(int, _Float80)+0x16>	100009dc: R_386_PC32	Krnl::panic(char const*)
100009e0:	83 c4 10             	add    esp,0x10
100009e3:	a0 01 00 00 00       	mov    al,ds:0x1	100009e4: R_386_32	fpuState
100009e8:	c0 e8 03             	shr    al,0x3
100009eb:	83 e0 07             	and    eax,0x7
100009ee:	01 f8                	add    eax,edi
100009f0:	b9 08 00 00 00       	mov    ecx,0x8
100009f5:	99                   	cdq    
100009f6:	f7 f9                	idiv   ecx
100009f8:	6b c2 0c             	imul   eax,edx,0xc
100009fb:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009fd: R_386_32	fpuState
10000a01:	8d 75 0c             	lea    esi,[ebp+0xc]
10000a04:	b9 03 00 00 00       	mov    ecx,0x3
10000a09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a0b:	8d 65 f8             	lea    esp,[ebp-0x8]
10000a0e:	5e                   	pop    esi
10000a0f:	5f                   	pop    edi
10000a10:	5d                   	pop    ebp
10000a11:	c3                   	ret    

10000a12 <fpuInternalTo32(_Float80)>:
10000a12:	55                   	push   ebp
10000a13:	89 e5                	mov    ebp,esp
10000a15:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000a18:	66 81 f9 7e 40       	cmp    cx,0x407e
10000a1d:	76 0c                	jbe    10000a2b <fpuInternalTo32(_Float80)+0x19>
10000a1f:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a21: R_386_32	fpuState
10000a26:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a2b:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a2f:	19 d2                	sbb    edx,edx
10000a31:	f7 d2                	not    edx
10000a33:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a3c:	c1 e8 06             	shr    eax,0x6
10000a3f:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a44:	c1 e1 17             	shl    ecx,0x17
10000a47:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a4d:	09 c8                	or     eax,ecx
10000a4f:	09 d0                	or     eax,edx
10000a51:	5d                   	pop    ebp
10000a52:	c3                   	ret    

10000a53 <fpuInternalTo64(_Float80)>:
10000a53:	55                   	push   ebp
10000a54:	89 e5                	mov    ebp,esp
10000a56:	57                   	push   edi
10000a57:	56                   	push   esi
10000a58:	53                   	push   ebx
10000a59:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a5c:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a61:	76 0c                	jbe    10000a6f <fpuInternalTo64(_Float80)+0x1c>
10000a63:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a65: R_386_32	fpuState
10000a6a:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a6f:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a73:	19 c9                	sbb    ecx,ecx
10000a75:	f7 d1                	not    ecx
10000a77:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a83:	0f ac d0 09          	shrd   eax,edx,0x9
10000a87:	c1 ea 09             	shr    edx,0x9
10000a8a:	89 c6                	mov    esi,eax
10000a8c:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a92:	c1 e3 14             	shl    ebx,0x14
10000a95:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a9b:	09 da                	or     edx,ebx
10000a9d:	09 ca                	or     edx,ecx
10000a9f:	89 f0                	mov    eax,esi
10000aa1:	5b                   	pop    ebx
10000aa2:	5e                   	pop    esi
10000aa3:	5f                   	pop    edi
10000aa4:	5d                   	pop    ebp
10000aa5:	c3                   	ret    

10000aa6 <fpu32ToInternal(unsigned int)>:
10000aa6:	55                   	push   ebp
10000aa7:	89 e5                	mov    ebp,esp
10000aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000aaf:	89 d1                	mov    ecx,edx
10000ab1:	c1 e9 1f             	shr    ecx,0x1f
10000ab4:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000ab7:	89 d1                	mov    ecx,edx
10000ab9:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000abf:	c1 e1 06             	shl    ecx,0x6
10000ac2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000ac8:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000ace:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000ad1:	c1 ea 17             	shr    edx,0x17
10000ad4:	0f b6 d2             	movzx  edx,dl
10000ad7:	66 81 c2 81 3f       	add    dx,0x3f81
10000adc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ae0:	5d                   	pop    ebp
10000ae1:	c2 04 00             	ret    0x4

10000ae4 <fpu64ToInternal(unsigned long long)>:
10000ae4:	55                   	push   ebp
10000ae5:	89 e5                	mov    ebp,esp
10000ae7:	57                   	push   edi
10000ae8:	56                   	push   esi
10000ae9:	53                   	push   ebx
10000aea:	83 ec 0c             	sub    esp,0xc
10000aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000af3:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000af6:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000af9:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000afc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000aff:	c1 ea 1f             	shr    edx,0x1f
10000b02:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000b05:	89 f7                	mov    edi,esi
10000b07:	89 de                	mov    esi,ebx
10000b09:	0f a4 f7 09          	shld   edi,esi,0x9
10000b0d:	c1 e6 09             	shl    esi,0x9
10000b10:	89 f1                	mov    ecx,esi
10000b12:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000b18:	89 fa                	mov    edx,edi
10000b1a:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000b20:	89 08                	mov    DWORD PTR [eax],ecx
10000b22:	81 ca 00 00 00 20    	or     edx,0x20000000
10000b28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b2e:	c1 ea 14             	shr    edx,0x14
10000b31:	66 81 e2 ff 07       	and    dx,0x7ff
10000b36:	66 81 c2 01 3c       	add    dx,0x3c01
10000b3b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b3f:	83 c4 0c             	add    esp,0xc
10000b42:	5b                   	pop    ebx
10000b43:	5e                   	pop    esi
10000b44:	5f                   	pop    edi
10000b45:	5d                   	pop    ebp
10000b46:	c2 04 00             	ret    0x4

10000b49 <fpuPush(_Float80)>:
10000b49:	55                   	push   ebp
10000b4a:	89 e5                	mov    ebp,esp
10000b4c:	57                   	push   edi
10000b4d:	56                   	push   esi
10000b4e:	a0 01 00 00 00       	mov    al,ds:0x1	10000b4f: R_386_32	fpuState
10000b53:	88 c1                	mov    cl,al
10000b55:	c0 e9 03             	shr    cl,0x3
10000b58:	89 cf                	mov    edi,ecx
10000b5a:	83 e7 07             	and    edi,0x7
10000b5d:	83 c7 07             	add    edi,0x7
10000b60:	89 fa                	mov    edx,edi
10000b62:	83 e2 07             	and    edx,0x7
10000b65:	c1 e2 03             	shl    edx,0x3
10000b68:	83 e0 c7             	and    eax,0xffffffc7
10000b6b:	09 d0                	or     eax,edx
10000b6d:	a2 01 00 00 00       	mov    ds:0x1,al	10000b6e: R_386_32	fpuState
10000b72:	83 e7 07             	and    edi,0x7
10000b75:	6b ff 0c             	imul   edi,edi,0xc
10000b78:	81 c7 04 00 00 00    	add    edi,0x4	10000b7a: R_386_32	fpuState
10000b7e:	b9 03 00 00 00       	mov    ecx,0x3
10000b83:	8d 75 08             	lea    esi,[ebp+0x8]
10000b86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b88:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b89: R_386_32	fpuState
10000b8d:	83 f8 08             	cmp    eax,0x8
10000b90:	75 09                	jne    10000b9b <fpuPush(_Float80)+0x52>
10000b92:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b94: R_386_32	fpuState
10000b99:	eb 06                	jmp    10000ba1 <fpuPush(_Float80)+0x58>
10000b9b:	40                   	inc    eax
10000b9c:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b9d: R_386_32	fpuState
10000ba1:	5e                   	pop    esi
10000ba2:	5f                   	pop    edi
10000ba3:	5d                   	pop    ebp
10000ba4:	c3                   	ret    

10000ba5 <fpuPop()>:
10000ba5:	55                   	push   ebp
10000ba6:	89 e5                	mov    ebp,esp
10000ba8:	57                   	push   edi
10000ba9:	56                   	push   esi
10000baa:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000bac: R_386_32	fpuState
10000bb0:	88 d0                	mov    al,dl
10000bb2:	c0 e8 03             	shr    al,0x3
10000bb5:	83 e0 07             	and    eax,0x7
10000bb8:	6b f0 0c             	imul   esi,eax,0xc
10000bbb:	81 c6 04 00 00 00    	add    esi,0x4	10000bbd: R_386_32	fpuState
10000bc1:	b9 03 00 00 00       	mov    ecx,0x3
10000bc6:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000bc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bcb:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000bd2:	83 e0 38             	and    eax,0x38
10000bd5:	83 e2 c7             	and    edx,0xffffffc7
10000bd8:	09 c2                	or     edx,eax
10000bda:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bdc: R_386_32	fpuState
10000be0:	a1 64 00 00 00       	mov    eax,ds:0x64	10000be1: R_386_32	fpuState
10000be5:	85 c0                	test   eax,eax
10000be7:	74 08                	je     10000bf1 <fpuPop()+0x4c>
10000be9:	48                   	dec    eax
10000bea:	a3 64 00 00 00       	mov    ds:0x64,eax	10000beb: R_386_32	fpuState
10000bef:	eb 07                	jmp    10000bf8 <fpuPop()+0x53>
10000bf1:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bf3: R_386_32	fpuState
10000bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfb:	5e                   	pop    esi
10000bfc:	5f                   	pop    edi
10000bfd:	5d                   	pop    ebp
10000bfe:	c2 04 00             	ret    0x4

10000c01 <x87Handler(regs*)>:
10000c01:	55                   	push   ebp
10000c02:	89 e5                	mov    ebp,esp
10000c04:	57                   	push   edi
10000c05:	56                   	push   esi
10000c06:	53                   	push   ebx
10000c07:	81 ec 1c 06 00 00    	sub    esp,0x61c
10000c0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000c10:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000c13:	89 85 e0 f9 ff ff    	mov    DWORD PTR [ebp-0x620],eax
10000c19:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10000c1c:	89 c2                	mov    edx,eax
10000c1e:	66 c1 ea 03          	shr    dx,0x3
10000c22:	83 e2 07             	and    edx,0x7
10000c25:	88 c1                	mov    cl,al
10000c27:	c0 e9 06             	shr    cl,0x6
10000c2a:	88 8d db f9 ff ff    	mov    BYTE PTR [ebp-0x625],cl
10000c30:	80 f9 03             	cmp    cl,0x3
10000c33:	0f 84 00 02 00 00    	je     10000e39 <x87Handler(regs*)+0x238>
10000c39:	83 e0 07             	and    eax,0x7
10000c3c:	3c 04                	cmp    al,0x4
10000c3e:	0f 84 c7 00 00 00    	je     10000d0b <x87Handler(regs*)+0x10a>
10000c44:	84 c9                	test   cl,cl
10000c46:	75 08                	jne    10000c50 <x87Handler(regs*)+0x4f>
10000c48:	3c 05                	cmp    al,0x5
10000c4a:	0f 84 9d 00 00 00    	je     10000ced <x87Handler(regs*)+0xec>
10000c50:	84 c0                	test   al,al
10000c52:	75 05                	jne    10000c59 <x87Handler(regs*)+0x58>
10000c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
10000c57:	eb 3e                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c59:	3c 01                	cmp    al,0x1
10000c5b:	75 05                	jne    10000c62 <x87Handler(regs*)+0x61>
10000c5d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
10000c60:	eb 35                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c62:	3c 02                	cmp    al,0x2
10000c64:	75 05                	jne    10000c6b <x87Handler(regs*)+0x6a>
10000c66:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
10000c69:	eb 2c                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c6b:	c7 85 e4 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x0
10000c75:	3c 03                	cmp    al,0x3
10000c77:	75 05                	jne    10000c7e <x87Handler(regs*)+0x7d>
10000c79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
10000c7c:	eb 19                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c7e:	3c 05                	cmp    al,0x5
10000c80:	75 05                	jne    10000c87 <x87Handler(regs*)+0x86>
10000c82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10000c85:	eb 10                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c87:	3c 06                	cmp    al,0x6
10000c89:	75 05                	jne    10000c90 <x87Handler(regs*)+0x8f>
10000c8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
10000c8e:	eb 07                	jmp    10000c97 <x87Handler(regs*)+0x96>
10000c90:	3c 07                	cmp    al,0x7
10000c92:	75 09                	jne    10000c9d <x87Handler(regs*)+0x9c>
10000c94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
10000c97:	89 85 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],eax
10000c9d:	80 bd db f9 ff ff 01 	cmp    BYTE PTR [ebp-0x625],0x1
10000ca4:	75 1f                	jne    10000cc5 <x87Handler(regs*)+0xc4>
10000ca6:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000cac:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
10000cb0:	01 85 e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],eax
10000cb6:	c7 85 dc f9 ff ff 03 00 00 00 	mov    DWORD PTR [ebp-0x624],0x3
10000cc0:	e9 88 01 00 00       	jmp    10000e4d <x87Handler(regs*)+0x24c>
10000cc5:	c7 85 dc f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x624],0x2
10000ccf:	80 bd db f9 ff ff 02 	cmp    BYTE PTR [ebp-0x625],0x2
10000cd6:	0f 85 71 01 00 00    	jne    10000e4d <x87Handler(regs*)+0x24c>
10000cdc:	8b bd e0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x620]
10000ce2:	8b 7f 02             	mov    edi,DWORD PTR [edi+0x2]
10000ce5:	01 bd e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],edi
10000ceb:	eb 0f                	jmp    10000cfc <x87Handler(regs*)+0xfb>
10000ced:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000cf3:	8b 40 02             	mov    eax,DWORD PTR [eax+0x2]
10000cf6:	89 85 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],eax
10000cfc:	c7 85 dc f9 ff ff 06 00 00 00 	mov    DWORD PTR [ebp-0x624],0x6
10000d06:	e9 42 01 00 00       	jmp    10000e4d <x87Handler(regs*)+0x24c>
10000d0b:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000d11:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10000d14:	88 c1                	mov    cl,al
10000d16:	c0 e9 06             	shr    cl,0x6
10000d19:	88 8d e4 f9 ff ff    	mov    BYTE PTR [ebp-0x61c],cl
10000d1f:	89 c1                	mov    ecx,eax
10000d21:	66 c1 e9 03          	shr    cx,0x3
10000d25:	83 e1 07             	and    ecx,0x7
10000d28:	24 07                	and    al,0x7
10000d2a:	75 05                	jne    10000d31 <x87Handler(regs*)+0x130>
10000d2c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
10000d2f:	eb 39                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d31:	3c 01                	cmp    al,0x1
10000d33:	75 05                	jne    10000d3a <x87Handler(regs*)+0x139>
10000d35:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
10000d38:	eb 30                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d3a:	3c 02                	cmp    al,0x2
10000d3c:	75 05                	jne    10000d43 <x87Handler(regs*)+0x142>
10000d3e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
10000d41:	eb 27                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d43:	3c 03                	cmp    al,0x3
10000d45:	75 05                	jne    10000d4c <x87Handler(regs*)+0x14b>
10000d47:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
10000d4a:	eb 1e                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d4c:	3c 04                	cmp    al,0x4
10000d4e:	75 05                	jne    10000d55 <x87Handler(regs*)+0x154>
10000d50:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
10000d53:	eb 15                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d55:	3c 05                	cmp    al,0x5
10000d57:	75 05                	jne    10000d5e <x87Handler(regs*)+0x15d>
10000d59:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
10000d5c:	eb 0c                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d5e:	3c 06                	cmp    al,0x6
10000d60:	75 05                	jne    10000d67 <x87Handler(regs*)+0x166>
10000d62:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
10000d65:	eb 03                	jmp    10000d6a <x87Handler(regs*)+0x169>
10000d67:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
10000d6a:	84 c9                	test   cl,cl
10000d6c:	75 05                	jne    10000d73 <x87Handler(regs*)+0x172>
10000d6e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
10000d71:	eb 3c                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000d73:	80 f9 01             	cmp    cl,0x1
10000d76:	75 05                	jne    10000d7d <x87Handler(regs*)+0x17c>
10000d78:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
10000d7b:	eb 32                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000d7d:	80 f9 02             	cmp    cl,0x2
10000d80:	75 05                	jne    10000d87 <x87Handler(regs*)+0x186>
10000d82:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
10000d85:	eb 28                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000d87:	80 f9 03             	cmp    cl,0x3
10000d8a:	75 05                	jne    10000d91 <x87Handler(regs*)+0x190>
10000d8c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
10000d8f:	eb 1e                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000d91:	31 f6                	xor    esi,esi
10000d93:	80 f9 04             	cmp    cl,0x4
10000d96:	74 17                	je     10000daf <x87Handler(regs*)+0x1ae>
10000d98:	80 f9 05             	cmp    cl,0x5
10000d9b:	75 05                	jne    10000da2 <x87Handler(regs*)+0x1a1>
10000d9d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
10000da0:	eb 0d                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000da2:	80 f9 06             	cmp    cl,0x6
10000da5:	75 05                	jne    10000dac <x87Handler(regs*)+0x1ab>
10000da7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
10000daa:	eb 03                	jmp    10000daf <x87Handler(regs*)+0x1ae>
10000dac:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
10000daf:	80 bd db f9 ff ff 00 	cmp    BYTE PTR [ebp-0x625],0x0
10000db6:	75 1d                	jne    10000dd5 <x87Handler(regs*)+0x1d4>
10000db8:	3c 05                	cmp    al,0x5
10000dba:	75 19                	jne    10000dd5 <x87Handler(regs*)+0x1d4>
10000dbc:	8a 8d e4 f9 ff ff    	mov    cl,BYTE PTR [ebp-0x61c]
10000dc2:	d3 e6                	shl    esi,cl
10000dc4:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000dca:	03 70 03             	add    esi,DWORD PTR [eax+0x3]
10000dcd:	89 b5 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],esi
10000dd3:	eb 58                	jmp    10000e2d <x87Handler(regs*)+0x22c>
10000dd5:	8d 04 37             	lea    eax,[edi+esi*1]
10000dd8:	8a 8d e4 f9 ff ff    	mov    cl,BYTE PTR [ebp-0x61c]
10000dde:	d3 e0                	shl    eax,cl
10000de0:	89 85 e4 f9 ff ff    	mov    DWORD PTR [ebp-0x61c],eax
10000de6:	c7 85 dc f9 ff ff 03 00 00 00 	mov    DWORD PTR [ebp-0x624],0x3
10000df0:	80 bd db f9 ff ff 00 	cmp    BYTE PTR [ebp-0x625],0x0
10000df7:	74 54                	je     10000e4d <x87Handler(regs*)+0x24c>
10000df9:	80 bd db f9 ff ff 01 	cmp    BYTE PTR [ebp-0x625],0x1
10000e00:	75 1c                	jne    10000e1e <x87Handler(regs*)+0x21d>
10000e02:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e08:	0f be 40 03          	movsx  eax,BYTE PTR [eax+0x3]
10000e0c:	01 85 e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],eax
10000e12:	c7 85 dc f9 ff ff 04 00 00 00 	mov    DWORD PTR [ebp-0x624],0x4
10000e1c:	eb 2f                	jmp    10000e4d <x87Handler(regs*)+0x24c>
10000e1e:	8b bd e0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x620]
10000e24:	8b 7f 03             	mov    edi,DWORD PTR [edi+0x3]
10000e27:	01 bd e4 f9 ff ff    	add    DWORD PTR [ebp-0x61c],edi
10000e2d:	c7 85 dc f9 ff ff 07 00 00 00 	mov    DWORD PTR [ebp-0x624],0x7
10000e37:	eb 14                	jmp    10000e4d <x87Handler(regs*)+0x24c>
10000e39:	c7 85 dc f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x624],0x2
10000e43:	c7 85 e4 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x0
10000e4d:	88 95 db f9 ff ff    	mov    BYTE PTR [ebp-0x625],dl
10000e53:	50                   	push   eax
10000e54:	50                   	push   eax
10000e55:	ff b5 e0 f9 ff ff    	push   DWORD PTR [ebp-0x620]
10000e5b:	68 ac 24 00 10       	push   0x100024ac	10000e5c: R_386_32	.text
10000e60:	e8 fc ff ff ff       	call   10000e61 <x87Handler(regs*)+0x260>	10000e61: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e65:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e6b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000e6f:	89 04 24             	mov    DWORD PTR [esp],eax
10000e72:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e78:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000e7c:	50                   	push   eax
10000e7d:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e83:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000e87:	50                   	push   eax
10000e88:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000e8e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000e91:	50                   	push   eax
10000e92:	68 da 24 00 10       	push   0x100024da	10000e93: R_386_32	.text
10000e97:	e8 fc ff ff ff       	call   10000e98 <x87Handler(regs*)+0x297>	10000e98: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e9c:	83 c4 18             	add    esp,0x18
10000e9f:	ff b5 e4 f9 ff ff    	push   DWORD PTR [ebp-0x61c]
10000ea5:	68 ec 24 00 10       	push   0x100024ec	10000ea6: R_386_32	.text
10000eaa:	e8 fc ff ff ff       	call   10000eab <x87Handler(regs*)+0x2aa>	10000eab: R_386_PC32	Dbg::kprintf(char const*, ...)
10000eaf:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10000eb5:	8a 08                	mov    cl,BYTE PTR [eax]
10000eb7:	83 c4 10             	add    esp,0x10
10000eba:	80 f9 d9             	cmp    cl,0xd9
10000ebd:	8a 95 db f9 ff ff    	mov    dl,BYTE PTR [ebp-0x625]
10000ec3:	0f 85 cc 03 00 00    	jne    10001295 <x87Handler(regs*)+0x694>
10000ec9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000ecd:	8d 48 20             	lea    ecx,[eax+0x20]
10000ed0:	80 f9 0e             	cmp    cl,0xe
10000ed3:	0f 87 fa 01 00 00    	ja     100010d3 <x87Handler(regs*)+0x4d2>
10000ed9:	0f b6 c9             	movzx  ecx,cl
10000edc:	ff 24 8d 04 25 00 10 	jmp    DWORD PTR [ecx*4+0x10002504]	10000edf: R_386_32	.text
10000ee3:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000ee9:	57                   	push   edi
10000eea:	57                   	push   edi
10000eeb:	6a 00                	push   0x0
10000eed:	56                   	push   esi
10000eee:	e8 fc ff ff ff       	call   10000eef <x87Handler(regs*)+0x2ee>	10000eef: R_386_PC32	fpuGetReg(int)
10000ef3:	8d 95 f4 f9 ff ff    	lea    edx,[ebp-0x60c]
10000ef9:	b9 03 00 00 00       	mov    ecx,0x3
10000efe:	89 e7                	mov    edi,esp
10000f00:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f02:	52                   	push   edx
10000f03:	e8 fc ff ff ff       	call   10000f04 <x87Handler(regs*)+0x303>	10000f04: R_386_PC32	fpuChs(_Float80)
10000f08:	b9 03 00 00 00       	mov    ecx,0x3
10000f0d:	89 e7                	mov    edi,esp
10000f0f:	89 d6                	mov    esi,edx
10000f11:	eb 49                	jmp    10000f5c <x87Handler(regs*)+0x35b>
10000f13:	8d 85 00 fa ff ff    	lea    eax,[ebp-0x600]
10000f19:	51                   	push   ecx
10000f1a:	51                   	push   ecx
10000f1b:	6a 00                	push   0x0
10000f1d:	50                   	push   eax
10000f1e:	e8 fc ff ff ff       	call   10000f1f <x87Handler(regs*)+0x31e>	10000f1f: R_386_PC32	fpuGetReg(int)
10000f23:	8b 85 00 fa ff ff    	mov    eax,DWORD PTR [ebp-0x600]
10000f29:	8b 95 04 fa ff ff    	mov    edx,DWORD PTR [ebp-0x5fc]
10000f2f:	89 85 0c fa ff ff    	mov    DWORD PTR [ebp-0x5f4],eax
10000f35:	89 95 10 fa ff ff    	mov    DWORD PTR [ebp-0x5f0],edx
10000f3b:	8b 85 08 fa ff ff    	mov    eax,DWORD PTR [ebp-0x5f8]
10000f41:	66 89 85 14 fa ff ff 	mov    WORD PTR [ebp-0x5ec],ax
10000f48:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000f4f:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000f55:	b9 03 00 00 00       	mov    ecx,0x3
10000f5a:	89 e7                	mov    edi,esp
10000f5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f5e:	6a 00                	push   0x0
10000f60:	e8 fc ff ff ff       	call   10000f61 <x87Handler(regs*)+0x360>	10000f61: R_386_PC32	fpuSetReg(int, _Float80)
10000f65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f69:	83 c4 10             	add    esp,0x10
10000f6c:	b0 01                	mov    al,0x1
10000f6e:	e9 f3 14 00 00       	jmp    10002466 <x87Handler(regs*)+0x1865>
10000f73:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000f7a:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000f84:	c7 85 1c fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x5e4],0x20000000
10000f8e:	66 c7 85 20 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5e0],0x4000
10000f97:	83 ec 10             	sub    esp,0x10
10000f9a:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000fa0:	eb 2d                	jmp    10000fcf <x87Handler(regs*)+0x3ce>
10000fa2:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000fa9:	c7 85 24 fa ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x5dc],0xf346e2be
10000fb3:	c7 85 28 fa ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x5d8],0x35269e12
10000fbd:	66 c7 85 2c fa ff ff 01 40 	mov    WORD PTR [ebp-0x5d4],0x4001
10000fc6:	83 ec 10             	sub    esp,0x10
10000fc9:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000fcf:	b9 03 00 00 00       	mov    ecx,0x3
10000fd4:	89 e7                	mov    edi,esp
10000fd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fd8:	e8 fc ff ff ff       	call   10000fd9 <x87Handler(regs*)+0x3d8>	10000fd9: R_386_PC32	fpuPush(_Float80)
10000fdd:	eb 86                	jmp    10000f65 <x87Handler(regs*)+0x364>
10000fdf:	c6 85 3a fa ff ff 00 	mov    BYTE PTR [ebp-0x5c6],0x0
10000fe6:	c7 85 30 fa ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x5d0],0x5705fc1c
10000ff0:	c7 85 34 fa ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5cc],0x2e2a8eca
10000ffa:	66 c7 85 38 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5c8],0x4000
10001003:	83 ec 10             	sub    esp,0x10
10001006:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
1000100c:	eb c1                	jmp    10000fcf <x87Handler(regs*)+0x3ce>
1000100e:	c6 85 46 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ba],0x0
10001015:	c7 85 3c fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x5c4],0x885a308c
1000101f:	c7 85 40 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5c0],0x3243f6a8
10001029:	66 c7 85 44 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5bc],0x4001
10001032:	83 ec 10             	sub    esp,0x10
10001035:	8d b5 3c fa ff ff    	lea    esi,[ebp-0x5c4]
1000103b:	eb 92                	jmp    10000fcf <x87Handler(regs*)+0x3ce>
1000103d:	c6 85 52 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ae],0x0
10001044:	c7 85 48 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5b8],0x3ef3fde6
1000104e:	c7 85 4c fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5b4],0x268826a1
10001058:	66 c7 85 50 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5b0],0x3ffe
10001061:	83 ec 10             	sub    esp,0x10
10001064:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
1000106a:	e9 60 ff ff ff       	jmp    10000fcf <x87Handler(regs*)+0x3ce>
1000106f:	c6 85 5e fa ff ff 00 	mov    BYTE PTR [ebp-0x5a2],0x0
10001076:	c7 85 54 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5ac],0xf473de68
10001080:	c7 85 58 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5a8],0x2c5c85fd
1000108a:	66 c7 85 5c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5a4],0x3fff
10001093:	83 ec 10             	sub    esp,0x10
10001096:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
1000109c:	e9 2e ff ff ff       	jmp    10000fcf <x87Handler(regs*)+0x3ce>
100010a1:	c6 85 6a fa ff ff 00 	mov    BYTE PTR [ebp-0x596],0x0
100010a8:	c7 85 60 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5a0],0x0
100010b2:	c7 85 64 fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x59c],0x20000000
100010bc:	66 c7 85 68 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x598],0x3fff
100010c5:	83 ec 10             	sub    esp,0x10
100010c8:	8d b5 60 fa ff ff    	lea    esi,[ebp-0x5a0]
100010ce:	e9 fc fe ff ff       	jmp    10000fcf <x87Handler(regs*)+0x3ce>
100010d3:	8d 48 40             	lea    ecx,[eax+0x40]
100010d6:	80 f9 07             	cmp    cl,0x7
100010d9:	77 27                	ja     10001102 <x87Handler(regs*)+0x501>
100010db:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
100010e1:	57                   	push   edi
100010e2:	57                   	push   edi
100010e3:	2d c0 00 00 00       	sub    eax,0xc0
100010e8:	50                   	push   eax
100010e9:	56                   	push   esi
100010ea:	e8 fc ff ff ff       	call   100010eb <x87Handler(regs*)+0x4ea>	100010eb: R_386_PC32	fpuGetReg(int)
100010ef:	83 ec 14             	sub    esp,0x14
100010f2:	b9 03 00 00 00       	mov    ecx,0x3
100010f7:	89 e7                	mov    edi,esp
100010f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010fb:	e8 fc ff ff ff       	call   100010fc <x87Handler(regs*)+0x4fb>	100010fc: R_386_PC32	fpuPush(_Float80)
10001100:	eb 63                	jmp    10001165 <x87Handler(regs*)+0x564>
10001102:	8d 48 38             	lea    ecx,[eax+0x38]
10001105:	80 f9 07             	cmp    cl,0x7
10001108:	77 64                	ja     1000116e <x87Handler(regs*)+0x56d>
1000110a:	8d 55 dc             	lea    edx,[ebp-0x24]
1000110d:	56                   	push   esi
1000110e:	56                   	push   esi
1000110f:	2d c8 00 00 00       	sub    eax,0xc8
10001114:	50                   	push   eax
10001115:	52                   	push   edx
10001116:	e8 fc ff ff ff       	call   10001117 <x87Handler(regs*)+0x516>	10001117: R_386_PC32	fpuGetReg(int)
1000111b:	8d b5 80 fb ff ff    	lea    esi,[ebp-0x480]
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	6a 00                	push   0x0
10001126:	56                   	push   esi
10001127:	e8 fc ff ff ff       	call   10001128 <x87Handler(regs*)+0x527>	10001128: R_386_PC32	fpuGetReg(int)
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	b9 03 00 00 00       	mov    ecx,0x3
10001134:	89 e7                	mov    edi,esp
10001136:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001138:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
1000113e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001142:	2d c8 00 00 00       	sub    eax,0xc8
10001147:	50                   	push   eax
10001148:	e8 fc ff ff ff       	call   10001149 <x87Handler(regs*)+0x548>	10001149: R_386_PC32	fpuSetReg(int, _Float80)
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	b9 03 00 00 00       	mov    ecx,0x3
10001155:	89 e7                	mov    edi,esp
10001157:	8d 55 dc             	lea    edx,[ebp-0x24]
1000115a:	89 d6                	mov    esi,edx
1000115c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000115e:	6a 00                	push   0x0
10001160:	e8 fc ff ff ff       	call   10001161 <x87Handler(regs*)+0x560>	10001161: R_386_PC32	fpuSetReg(int, _Float80)
10001165:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001169:	e9 1f 01 00 00       	jmp    1000128d <x87Handler(regs*)+0x68c>
1000116e:	84 d2                	test   dl,dl
10001170:	75 1b                	jne    1000118d <x87Handler(regs*)+0x58c>
10001172:	8d b5 20 fe ff ff    	lea    esi,[ebp-0x1e0]
10001178:	50                   	push   eax
10001179:	50                   	push   eax
1000117a:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001180:	ff 30                	push   DWORD PTR [eax]
10001182:	56                   	push   esi
10001183:	e8 fc ff ff ff       	call   10001184 <x87Handler(regs*)+0x583>	10001184: R_386_PC32	fpu32ToInternal(unsigned int)
10001188:	e9 b2 00 00 00       	jmp    1000123f <x87Handler(regs*)+0x63e>
1000118d:	80 fa 03             	cmp    dl,0x3
10001190:	75 22                	jne    100011b4 <x87Handler(regs*)+0x5b3>
10001192:	8d b5 2c fe ff ff    	lea    esi,[ebp-0x1d4]
10001198:	83 ec 0c             	sub    esp,0xc
1000119b:	56                   	push   esi
1000119c:	e8 fc ff ff ff       	call   1000119d <x87Handler(regs*)+0x59c>	1000119d: R_386_PC32	fpuPop()
100011a1:	83 ec 14             	sub    esp,0x14
100011a4:	b9 03 00 00 00       	mov    ecx,0x3
100011a9:	89 e7                	mov    edi,esp
100011ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011ad:	e8 fc ff ff ff       	call   100011ae <x87Handler(regs*)+0x5ad>	100011ae: R_386_PC32	fpuInternalTo32(_Float80)
100011b2:	eb 68                	jmp    1000121c <x87Handler(regs*)+0x61b>
100011b4:	80 fa 05             	cmp    dl,0x5
100011b7:	75 11                	jne    100011ca <x87Handler(regs*)+0x5c9>
100011b9:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100011bf:	66 8b 00             	mov    ax,WORD PTR [eax]
100011c2:	66 a3 02 00 00 00    	mov    ds:0x2,ax	100011c4: R_386_32	fpuState
100011c8:	eb 1a                	jmp    100011e4 <x87Handler(regs*)+0x5e3>
100011ca:	31 c0                	xor    eax,eax
100011cc:	80 fa 07             	cmp    dl,0x7
100011cf:	0f 85 91 12 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
100011d5:	66 a1 02 00 00 00    	mov    ax,ds:0x2	100011d7: R_386_32	fpuState
100011db:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
100011e1:	66 89 02             	mov    WORD PTR [edx],ax
100011e4:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
100011ea:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100011ed:	e9 7a fd ff ff       	jmp    10000f6c <x87Handler(regs*)+0x36b>
100011f2:	80 fa 02             	cmp    dl,0x2
100011f5:	0f 85 8e 0e 00 00    	jne    10002089 <x87Handler(regs*)+0x1488>
100011fb:	8d b5 8c fe ff ff    	lea    esi,[ebp-0x174]
10001201:	50                   	push   eax
10001202:	50                   	push   eax
10001203:	6a 00                	push   0x0
10001205:	56                   	push   esi
10001206:	e8 fc ff ff ff       	call   10001207 <x87Handler(regs*)+0x606>	10001207: R_386_PC32	fpuGetReg(int)
1000120b:	83 ec 14             	sub    esp,0x14
1000120e:	b9 03 00 00 00       	mov    ecx,0x3
10001213:	89 e7                	mov    edi,esp
10001215:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001217:	e8 fc ff ff ff       	call   10001218 <x87Handler(regs*)+0x617>	10001218: R_386_PC32	fpuFloatToLong(_Float80)
1000121c:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10001222:	89 02                	mov    DWORD PTR [edx],eax
10001224:	eb 5e                	jmp    10001284 <x87Handler(regs*)+0x683>
10001226:	84 d2                	test   dl,dl
10001228:	75 28                	jne    10001252 <x87Handler(regs*)+0x651>
1000122a:	8d 75 ac             	lea    esi,[ebp-0x54]
1000122d:	51                   	push   ecx
1000122e:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001234:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001237:	ff 30                	push   DWORD PTR [eax]
10001239:	56                   	push   esi
1000123a:	e8 fc ff ff ff       	call   1000123b <x87Handler(regs*)+0x63a>	1000123b: R_386_PC32	fpu64ToInternal(unsigned long long)
1000123f:	83 ec 14             	sub    esp,0x14
10001242:	b9 03 00 00 00       	mov    ecx,0x3
10001247:	89 e7                	mov    edi,esp
10001249:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000124b:	e8 fc ff ff ff       	call   1000124c <x87Handler(regs*)+0x64b>	1000124c: R_386_PC32	fpuPush(_Float80)
10001250:	eb 32                	jmp    10001284 <x87Handler(regs*)+0x683>
10001252:	80 fa 02             	cmp    dl,0x2
10001255:	0f 85 ab 11 00 00    	jne    10002406 <x87Handler(regs*)+0x1805>
1000125b:	8d 75 b8             	lea    esi,[ebp-0x48]
1000125e:	52                   	push   edx
1000125f:	52                   	push   edx
10001260:	6a 00                	push   0x0
10001262:	56                   	push   esi
10001263:	e8 fc ff ff ff       	call   10001264 <x87Handler(regs*)+0x663>	10001264: R_386_PC32	fpuGetReg(int)
10001268:	83 ec 14             	sub    esp,0x14
1000126b:	b9 03 00 00 00       	mov    ecx,0x3
10001270:	89 e7                	mov    edi,esp
10001272:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001274:	e8 fc ff ff ff       	call   10001275 <x87Handler(regs*)+0x674>	10001275: R_386_PC32	fpuInternalTo64(_Float80)
10001279:	8b bd e4 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x61c]
1000127f:	89 07                	mov    DWORD PTR [edi],eax
10001281:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10001284:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
1000128a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000128d:	83 c4 20             	add    esp,0x20
10001290:	e9 d7 fc ff ff       	jmp    10000f6c <x87Handler(regs*)+0x36b>
10001295:	80 f9 d8             	cmp    cl,0xd8
10001298:	0f 85 56 03 00 00    	jne    100015f4 <x87Handler(regs*)+0x9f3>
1000129e:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100012a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100012a8:	8d 48 40             	lea    ecx,[eax+0x40]
100012ab:	80 f9 07             	cmp    cl,0x7
100012ae:	77 64                	ja     10001314 <x87Handler(regs*)+0x713>
100012b0:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
100012b6:	57                   	push   edi
100012b7:	57                   	push   edi
100012b8:	2d c0 00 00 00       	sub    eax,0xc0
100012bd:	50                   	push   eax
100012be:	56                   	push   esi
100012bf:	e8 fc ff ff ff       	call   100012c0 <x87Handler(regs*)+0x6bf>	100012c0: R_386_PC32	fpuGetReg(int)
100012c4:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100012ca:	83 ec 0c             	sub    esp,0xc
100012cd:	6a 00                	push   0x0
100012cf:	52                   	push   edx
100012d0:	e8 fc ff ff ff       	call   100012d1 <x87Handler(regs*)+0x6d0>	100012d1: R_386_PC32	fpuGetReg(int)
100012d5:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100012db:	52                   	push   edx
100012dc:	b9 03 00 00 00       	mov    ecx,0x3
100012e1:	89 e7                	mov    edi,esp
100012e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012e5:	83 ec 0c             	sub    esp,0xc
100012e8:	b9 03 00 00 00       	mov    ecx,0x3
100012ed:	89 e7                	mov    edi,esp
100012ef:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100012f5:	89 d6                	mov    esi,edx
100012f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012f9:	50                   	push   eax
100012fa:	e8 fc ff ff ff       	call   100012fb <x87Handler(regs*)+0x6fa>	100012fb: R_386_PC32	fpuAdd(_Float80, _Float80)
100012ff:	83 c4 20             	add    esp,0x20
10001302:	b9 03 00 00 00       	mov    ecx,0x3
10001307:	89 e7                	mov    edi,esp
10001309:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
1000130f:	e9 e0 01 00 00       	jmp    100014f4 <x87Handler(regs*)+0x8f3>
10001314:	8d 48 38             	lea    ecx,[eax+0x38]
10001317:	80 f9 07             	cmp    cl,0x7
1000131a:	77 64                	ja     10001380 <x87Handler(regs*)+0x77f>
1000131c:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
10001322:	52                   	push   edx
10001323:	52                   	push   edx
10001324:	2d c8 00 00 00       	sub    eax,0xc8
10001329:	50                   	push   eax
1000132a:	56                   	push   esi
1000132b:	e8 fc ff ff ff       	call   1000132c <x87Handler(regs*)+0x72b>	1000132c: R_386_PC32	fpuGetReg(int)
10001330:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
10001336:	83 ec 0c             	sub    esp,0xc
10001339:	6a 00                	push   0x0
1000133b:	52                   	push   edx
1000133c:	e8 fc ff ff ff       	call   1000133d <x87Handler(regs*)+0x73c>	1000133d: R_386_PC32	fpuGetReg(int)
10001341:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
10001347:	51                   	push   ecx
10001348:	b9 03 00 00 00       	mov    ecx,0x3
1000134d:	89 e7                	mov    edi,esp
1000134f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001351:	83 ec 0c             	sub    esp,0xc
10001354:	b9 03 00 00 00       	mov    ecx,0x3
10001359:	89 e7                	mov    edi,esp
1000135b:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
10001361:	89 d6                	mov    esi,edx
10001363:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001365:	50                   	push   eax
10001366:	e8 fc ff ff ff       	call   10001367 <x87Handler(regs*)+0x766>	10001367: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000136b:	83 c4 20             	add    esp,0x20
1000136e:	b9 03 00 00 00       	mov    ecx,0x3
10001373:	89 e7                	mov    edi,esp
10001375:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
1000137b:	e9 74 01 00 00       	jmp    100014f4 <x87Handler(regs*)+0x8f3>
10001380:	8d 48 30             	lea    ecx,[eax+0x30]
10001383:	80 f9 07             	cmp    cl,0x7
10001386:	77 45                	ja     100013cd <x87Handler(regs*)+0x7cc>
10001388:	8d b5 b4 fa ff ff    	lea    esi,[ebp-0x54c]
1000138e:	57                   	push   edi
1000138f:	57                   	push   edi
10001390:	2d d0 00 00 00       	sub    eax,0xd0
10001395:	50                   	push   eax
10001396:	56                   	push   esi
10001397:	e8 fc ff ff ff       	call   10001398 <x87Handler(regs*)+0x797>	10001398: R_386_PC32	fpuGetReg(int)
1000139c:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100013a2:	83 ec 0c             	sub    esp,0xc
100013a5:	6a 00                	push   0x0
100013a7:	50                   	push   eax
100013a8:	e8 fc ff ff ff       	call   100013a9 <x87Handler(regs*)+0x7a8>	100013a9: R_386_PC32	fpuGetReg(int)
100013ad:	50                   	push   eax
100013ae:	50                   	push   eax
100013af:	b9 03 00 00 00       	mov    ecx,0x3
100013b4:	89 e7                	mov    edi,esp
100013b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013b8:	83 ec 0c             	sub    esp,0xc
100013bb:	b9 03 00 00 00       	mov    ecx,0x3
100013c0:	89 e7                	mov    edi,esp
100013c2:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100013c8:	e9 c6 07 00 00       	jmp    10001b93 <x87Handler(regs*)+0xf92>
100013cd:	8d 48 28             	lea    ecx,[eax+0x28]
100013d0:	80 f9 07             	cmp    cl,0x7
100013d3:	77 45                	ja     1000141a <x87Handler(regs*)+0x819>
100013d5:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
100013db:	52                   	push   edx
100013dc:	52                   	push   edx
100013dd:	2d d8 00 00 00       	sub    eax,0xd8
100013e2:	50                   	push   eax
100013e3:	56                   	push   esi
100013e4:	e8 fc ff ff ff       	call   100013e5 <x87Handler(regs*)+0x7e4>	100013e5: R_386_PC32	fpuGetReg(int)
100013e9:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100013ef:	83 ec 0c             	sub    esp,0xc
100013f2:	6a 00                	push   0x0
100013f4:	50                   	push   eax
100013f5:	e8 fc ff ff ff       	call   100013f6 <x87Handler(regs*)+0x7f5>	100013f6: R_386_PC32	fpuGetReg(int)
100013fa:	51                   	push   ecx
100013fb:	51                   	push   ecx
100013fc:	b9 03 00 00 00       	mov    ecx,0x3
10001401:	89 e7                	mov    edi,esp
10001403:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001405:	83 ec 0c             	sub    esp,0xc
10001408:	b9 03 00 00 00       	mov    ecx,0x3
1000140d:	89 e7                	mov    edi,esp
1000140f:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
10001415:	e9 d7 07 00 00       	jmp    10001bf1 <x87Handler(regs*)+0xff0>
1000141a:	8d 48 20             	lea    ecx,[eax+0x20]
1000141d:	80 f9 07             	cmp    cl,0x7
10001420:	77 61                	ja     10001483 <x87Handler(regs*)+0x882>
10001422:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
10001428:	51                   	push   ecx
10001429:	51                   	push   ecx
1000142a:	2d e0 00 00 00       	sub    eax,0xe0
1000142f:	50                   	push   eax
10001430:	56                   	push   esi
10001431:	e8 fc ff ff ff       	call   10001432 <x87Handler(regs*)+0x831>	10001432: R_386_PC32	fpuGetReg(int)
10001436:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
1000143c:	83 ec 0c             	sub    esp,0xc
1000143f:	6a 00                	push   0x0
10001441:	52                   	push   edx
10001442:	e8 fc ff ff ff       	call   10001443 <x87Handler(regs*)+0x842>	10001443: R_386_PC32	fpuGetReg(int)
10001447:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
1000144d:	57                   	push   edi
1000144e:	b9 03 00 00 00       	mov    ecx,0x3
10001453:	89 e7                	mov    edi,esp
10001455:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001457:	83 ec 0c             	sub    esp,0xc
1000145a:	b9 03 00 00 00       	mov    ecx,0x3
1000145f:	89 e7                	mov    edi,esp
10001461:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001467:	89 d6                	mov    esi,edx
10001469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000146b:	50                   	push   eax
1000146c:	e8 fc ff ff ff       	call   1000146d <x87Handler(regs*)+0x86c>	1000146d: R_386_PC32	fpuSub(_Float80, _Float80)
10001471:	83 c4 20             	add    esp,0x20
10001474:	b9 03 00 00 00       	mov    ecx,0x3
10001479:	89 e7                	mov    edi,esp
1000147b:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
10001481:	eb 71                	jmp    100014f4 <x87Handler(regs*)+0x8f3>
10001483:	8d 48 18             	lea    ecx,[eax+0x18]
10001486:	80 f9 07             	cmp    cl,0x7
10001489:	77 70                	ja     100014fb <x87Handler(regs*)+0x8fa>
1000148b:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
10001491:	50                   	push   eax
10001492:	50                   	push   eax
10001493:	6a 00                	push   0x0
10001495:	56                   	push   esi
10001496:	e8 fc ff ff ff       	call   10001497 <x87Handler(regs*)+0x896>	10001497: R_386_PC32	fpuGetReg(int)
1000149b:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100014a1:	83 ec 0c             	sub    esp,0xc
100014a4:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100014aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014ae:	2d e8 00 00 00       	sub    eax,0xe8
100014b3:	50                   	push   eax
100014b4:	52                   	push   edx
100014b5:	e8 fc ff ff ff       	call   100014b6 <x87Handler(regs*)+0x8b5>	100014b6: R_386_PC32	fpuGetReg(int)
100014ba:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100014c0:	52                   	push   edx
100014c1:	b9 03 00 00 00       	mov    ecx,0x3
100014c6:	89 e7                	mov    edi,esp
100014c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014ca:	83 ec 0c             	sub    esp,0xc
100014cd:	b9 03 00 00 00       	mov    ecx,0x3
100014d2:	89 e7                	mov    edi,esp
100014d4:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100014da:	89 d6                	mov    esi,edx
100014dc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014de:	50                   	push   eax
100014df:	e8 fc ff ff ff       	call   100014e0 <x87Handler(regs*)+0x8df>	100014e0: R_386_PC32	fpuSub(_Float80, _Float80)
100014e4:	83 c4 20             	add    esp,0x20
100014e7:	b9 03 00 00 00       	mov    ecx,0x3
100014ec:	89 e7                	mov    edi,esp
100014ee:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100014f4:	89 c6                	mov    esi,eax
100014f6:	e9 61 fa ff ff       	jmp    10000f5c <x87Handler(regs*)+0x35b>
100014fb:	8d 48 10             	lea    ecx,[eax+0x10]
100014fe:	80 f9 07             	cmp    cl,0x7
10001501:	77 61                	ja     10001564 <x87Handler(regs*)+0x963>
10001503:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
10001509:	51                   	push   ecx
1000150a:	51                   	push   ecx
1000150b:	2d f0 00 00 00       	sub    eax,0xf0
10001510:	50                   	push   eax
10001511:	56                   	push   esi
10001512:	e8 fc ff ff ff       	call   10001513 <x87Handler(regs*)+0x912>	10001513: R_386_PC32	fpuGetReg(int)
10001517:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
1000151d:	83 ec 0c             	sub    esp,0xc
10001520:	6a 00                	push   0x0
10001522:	52                   	push   edx
10001523:	e8 fc ff ff ff       	call   10001524 <x87Handler(regs*)+0x923>	10001524: R_386_PC32	fpuGetReg(int)
10001528:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
1000152e:	57                   	push   edi
1000152f:	b9 03 00 00 00       	mov    ecx,0x3
10001534:	89 e7                	mov    edi,esp
10001536:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001538:	83 ec 0c             	sub    esp,0xc
1000153b:	b9 03 00 00 00       	mov    ecx,0x3
10001540:	89 e7                	mov    edi,esp
10001542:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
10001548:	89 d6                	mov    esi,edx
1000154a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000154c:	50                   	push   eax
1000154d:	e8 fc ff ff ff       	call   1000154e <x87Handler(regs*)+0x94d>	1000154e: R_386_PC32	fpuDivide(_Float80, _Float80)
10001552:	83 c4 20             	add    esp,0x20
10001555:	b9 03 00 00 00       	mov    ecx,0x3
1000155a:	89 e7                	mov    edi,esp
1000155c:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
10001562:	eb 71                	jmp    100015d5 <x87Handler(regs*)+0x9d4>
10001564:	3c f7                	cmp    al,0xf7
10001566:	0f 86 89 07 00 00    	jbe    10001cf5 <x87Handler(regs*)+0x10f4>
1000156c:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
10001572:	50                   	push   eax
10001573:	50                   	push   eax
10001574:	6a 00                	push   0x0
10001576:	56                   	push   esi
10001577:	e8 fc ff ff ff       	call   10001578 <x87Handler(regs*)+0x977>	10001578: R_386_PC32	fpuGetReg(int)
1000157c:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001582:	83 ec 0c             	sub    esp,0xc
10001585:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
1000158b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000158f:	2d f8 00 00 00       	sub    eax,0xf8
10001594:	50                   	push   eax
10001595:	52                   	push   edx
10001596:	e8 fc ff ff ff       	call   10001597 <x87Handler(regs*)+0x996>	10001597: R_386_PC32	fpuGetReg(int)
1000159b:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100015a1:	52                   	push   edx
100015a2:	b9 03 00 00 00       	mov    ecx,0x3
100015a7:	89 e7                	mov    edi,esp
100015a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015ab:	83 ec 0c             	sub    esp,0xc
100015ae:	b9 03 00 00 00       	mov    ecx,0x3
100015b3:	89 e7                	mov    edi,esp
100015b5:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
100015bb:	89 d6                	mov    esi,edx
100015bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015bf:	50                   	push   eax
100015c0:	e8 fc ff ff ff       	call   100015c1 <x87Handler(regs*)+0x9c0>	100015c1: R_386_PC32	fpuDivide(_Float80, _Float80)
100015c5:	83 c4 20             	add    esp,0x20
100015c8:	b9 03 00 00 00       	mov    ecx,0x3
100015cd:	89 e7                	mov    edi,esp
100015cf:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100015d5:	89 c6                	mov    esi,eax
100015d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015d9:	6a 00                	push   0x0
100015db:	e8 fc ff ff ff       	call   100015dc <x87Handler(regs*)+0x9db>	100015dc: R_386_PC32	fpuSetReg(int, _Float80)
100015e0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100015e4:	8d 45 dc             	lea    eax,[ebp-0x24]
100015e7:	89 04 24             	mov    DWORD PTR [esp],eax
100015ea:	e8 fc ff ff ff       	call   100015eb <x87Handler(regs*)+0x9ea>	100015eb: R_386_PC32	fpuPop()
100015ef:	e9 57 0c 00 00       	jmp    1000224b <x87Handler(regs*)+0x164a>
100015f4:	80 f9 dc             	cmp    cl,0xdc
100015f7:	0f 85 94 01 00 00    	jne    10001791 <x87Handler(regs*)+0xb90>
100015fd:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001603:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001607:	8d 48 40             	lea    ecx,[eax+0x40]
1000160a:	80 f9 07             	cmp    cl,0x7
1000160d:	77 77                	ja     10001686 <x87Handler(regs*)+0xa85>
1000160f:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
10001615:	52                   	push   edx
10001616:	52                   	push   edx
10001617:	2d c0 00 00 00       	sub    eax,0xc0
1000161c:	50                   	push   eax
1000161d:	56                   	push   esi
1000161e:	e8 fc ff ff ff       	call   1000161f <x87Handler(regs*)+0xa1e>	1000161f: R_386_PC32	fpuGetReg(int)
10001623:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001629:	83 ec 0c             	sub    esp,0xc
1000162c:	6a 00                	push   0x0
1000162e:	52                   	push   edx
1000162f:	e8 fc ff ff ff       	call   10001630 <x87Handler(regs*)+0xa2f>	10001630: R_386_PC32	fpuGetReg(int)
10001634:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
1000163a:	51                   	push   ecx
1000163b:	b9 03 00 00 00       	mov    ecx,0x3
10001640:	89 e7                	mov    edi,esp
10001642:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001644:	83 ec 0c             	sub    esp,0xc
10001647:	b9 03 00 00 00       	mov    ecx,0x3
1000164c:	89 e7                	mov    edi,esp
1000164e:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001654:	89 d6                	mov    esi,edx
10001656:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001658:	50                   	push   eax
10001659:	e8 fc ff ff ff       	call   1000165a <x87Handler(regs*)+0xa59>	1000165a: R_386_PC32	fpuAdd(_Float80, _Float80)
1000165e:	83 c4 20             	add    esp,0x20
10001661:	b9 03 00 00 00       	mov    ecx,0x3
10001666:	89 e7                	mov    edi,esp
10001668:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
1000166e:	89 c6                	mov    esi,eax
10001670:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001672:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001678:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000167c:	2d c0 00 00 00       	sub    eax,0xc0
10001681:	e9 8a 04 00 00       	jmp    10001b10 <x87Handler(regs*)+0xf0f>
10001686:	8d 48 38             	lea    ecx,[eax+0x38]
10001689:	80 f9 07             	cmp    cl,0x7
1000168c:	77 77                	ja     10001705 <x87Handler(regs*)+0xb04>
1000168e:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
10001694:	51                   	push   ecx
10001695:	51                   	push   ecx
10001696:	2d c8 00 00 00       	sub    eax,0xc8
1000169b:	50                   	push   eax
1000169c:	56                   	push   esi
1000169d:	e8 fc ff ff ff       	call   1000169e <x87Handler(regs*)+0xa9d>	1000169e: R_386_PC32	fpuGetReg(int)
100016a2:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
100016a8:	83 ec 0c             	sub    esp,0xc
100016ab:	6a 00                	push   0x0
100016ad:	52                   	push   edx
100016ae:	e8 fc ff ff ff       	call   100016af <x87Handler(regs*)+0xaae>	100016af: R_386_PC32	fpuGetReg(int)
100016b3:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100016b9:	57                   	push   edi
100016ba:	b9 03 00 00 00       	mov    ecx,0x3
100016bf:	89 e7                	mov    edi,esp
100016c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016c3:	83 ec 0c             	sub    esp,0xc
100016c6:	b9 03 00 00 00       	mov    ecx,0x3
100016cb:	89 e7                	mov    edi,esp
100016cd:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
100016d3:	89 d6                	mov    esi,edx
100016d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016d7:	50                   	push   eax
100016d8:	e8 fc ff ff ff       	call   100016d9 <x87Handler(regs*)+0xad8>	100016d9: R_386_PC32	fpuMultiply(_Float80, _Float80)
100016dd:	83 c4 20             	add    esp,0x20
100016e0:	b9 03 00 00 00       	mov    ecx,0x3
100016e5:	89 e7                	mov    edi,esp
100016e7:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100016ed:	89 c6                	mov    esi,eax
100016ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016f1:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100016f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016fb:	2d c8 00 00 00       	sub    eax,0xc8
10001700:	e9 0b 04 00 00       	jmp    10001b10 <x87Handler(regs*)+0xf0f>
10001705:	83 c0 18             	add    eax,0x18
10001708:	3c 07                	cmp    al,0x7
1000170a:	0f 87 98 09 00 00    	ja     100020a8 <x87Handler(regs*)+0x14a7>
10001710:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
10001716:	50                   	push   eax
10001717:	50                   	push   eax
10001718:	6a 00                	push   0x0
1000171a:	56                   	push   esi
1000171b:	e8 fc ff ff ff       	call   1000171c <x87Handler(regs*)+0xb1b>	1000171c: R_386_PC32	fpuGetReg(int)
10001720:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
10001726:	83 ec 0c             	sub    esp,0xc
10001729:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
1000172f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001733:	2d e8 00 00 00       	sub    eax,0xe8
10001738:	50                   	push   eax
10001739:	52                   	push   edx
1000173a:	e8 fc ff ff ff       	call   1000173b <x87Handler(regs*)+0xb3a>	1000173b: R_386_PC32	fpuGetReg(int)
1000173f:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001745:	52                   	push   edx
10001746:	b9 03 00 00 00       	mov    ecx,0x3
1000174b:	89 e7                	mov    edi,esp
1000174d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000174f:	83 ec 0c             	sub    esp,0xc
10001752:	b9 03 00 00 00       	mov    ecx,0x3
10001757:	89 e7                	mov    edi,esp
10001759:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
1000175f:	89 d6                	mov    esi,edx
10001761:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001763:	50                   	push   eax
10001764:	e8 fc ff ff ff       	call   10001765 <x87Handler(regs*)+0xb64>	10001765: R_386_PC32	fpuSub(_Float80, _Float80)
10001769:	83 c4 20             	add    esp,0x20
1000176c:	b9 03 00 00 00       	mov    ecx,0x3
10001771:	89 e7                	mov    edi,esp
10001773:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001779:	89 c6                	mov    esi,eax
1000177b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000177d:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001783:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001787:	2d e8 00 00 00       	sub    eax,0xe8
1000178c:	e9 7f 03 00 00       	jmp    10001b10 <x87Handler(regs*)+0xf0f>
10001791:	80 f9 de             	cmp    cl,0xde
10001794:	0f 85 33 03 00 00    	jne    10001acd <x87Handler(regs*)+0xecc>
1000179a:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100017a0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100017a4:	8d 42 40             	lea    eax,[edx+0x40]
100017a7:	3c 07                	cmp    al,0x7
100017a9:	0f 87 8d 00 00 00    	ja     1000183c <x87Handler(regs*)+0xc3b>
100017af:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
100017b5:	51                   	push   ecx
100017b6:	51                   	push   ecx
100017b7:	81 ea c0 00 00 00    	sub    edx,0xc0
100017bd:	52                   	push   edx
100017be:	56                   	push   esi
100017bf:	e8 fc ff ff ff       	call   100017c0 <x87Handler(regs*)+0xbbf>	100017c0: R_386_PC32	fpuGetReg(int)
100017c4:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100017ca:	83 ec 0c             	sub    esp,0xc
100017cd:	6a 00                	push   0x0
100017cf:	52                   	push   edx
100017d0:	e8 fc ff ff ff       	call   100017d1 <x87Handler(regs*)+0xbd0>	100017d1: R_386_PC32	fpuGetReg(int)
100017d5:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100017db:	57                   	push   edi
100017dc:	b9 03 00 00 00       	mov    ecx,0x3
100017e1:	89 e7                	mov    edi,esp
100017e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e5:	83 ec 0c             	sub    esp,0xc
100017e8:	b9 03 00 00 00       	mov    ecx,0x3
100017ed:	89 e7                	mov    edi,esp
100017ef:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100017f5:	89 d6                	mov    esi,edx
100017f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017f9:	50                   	push   eax
100017fa:	e8 fc ff ff ff       	call   100017fb <x87Handler(regs*)+0xbfa>	100017fb: R_386_PC32	fpuAdd(_Float80, _Float80)
100017ff:	83 c4 20             	add    esp,0x20
10001802:	b9 03 00 00 00       	mov    ecx,0x3
10001807:	89 e7                	mov    edi,esp
10001809:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
1000180f:	89 c6                	mov    esi,eax
10001811:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001813:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001819:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000181d:	2d c0 00 00 00       	sub    eax,0xc0
10001822:	50                   	push   eax
10001823:	e8 fc ff ff ff       	call   10001824 <x87Handler(regs*)+0xc23>	10001824: R_386_PC32	fpuSetReg(int, _Float80)
10001828:	8d 45 dc             	lea    eax,[ebp-0x24]
1000182b:	89 04 24             	mov    DWORD PTR [esp],eax
1000182e:	e8 fc ff ff ff       	call   1000182f <x87Handler(regs*)+0xc2e>	1000182f: R_386_PC32	fpuPop()
10001833:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001837:	e9 0f 0a 00 00       	jmp    1000224b <x87Handler(regs*)+0x164a>
1000183c:	8d 42 20             	lea    eax,[edx+0x20]
1000183f:	3c 07                	cmp    al,0x7
10001841:	77 78                	ja     100018bb <x87Handler(regs*)+0xcba>
10001843:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
10001849:	50                   	push   eax
1000184a:	50                   	push   eax
1000184b:	81 ea e0 00 00 00    	sub    edx,0xe0
10001851:	52                   	push   edx
10001852:	56                   	push   esi
10001853:	e8 fc ff ff ff       	call   10001854 <x87Handler(regs*)+0xc53>	10001854: R_386_PC32	fpuGetReg(int)
10001858:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
1000185e:	83 ec 0c             	sub    esp,0xc
10001861:	6a 00                	push   0x0
10001863:	52                   	push   edx
10001864:	e8 fc ff ff ff       	call   10001865 <x87Handler(regs*)+0xc64>	10001865: R_386_PC32	fpuGetReg(int)
10001869:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
1000186f:	52                   	push   edx
10001870:	b9 03 00 00 00       	mov    ecx,0x3
10001875:	89 e7                	mov    edi,esp
10001877:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001879:	83 ec 0c             	sub    esp,0xc
1000187c:	b9 03 00 00 00       	mov    ecx,0x3
10001881:	89 e7                	mov    edi,esp
10001883:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
10001889:	89 d6                	mov    esi,edx
1000188b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000188d:	50                   	push   eax
1000188e:	e8 fc ff ff ff       	call   1000188f <x87Handler(regs*)+0xc8e>	1000188f: R_386_PC32	fpuSub(_Float80, _Float80)
10001893:	83 c4 20             	add    esp,0x20
10001896:	b9 03 00 00 00       	mov    ecx,0x3
1000189b:	89 e7                	mov    edi,esp
1000189d:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
100018a3:	89 c6                	mov    esi,eax
100018a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018a7:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100018ad:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018b1:	2d e0 00 00 00       	sub    eax,0xe0
100018b6:	e9 67 ff ff ff       	jmp    10001822 <x87Handler(regs*)+0xc21>
100018bb:	8d 42 18             	lea    eax,[edx+0x18]
100018be:	3c 07                	cmp    al,0x7
100018c0:	0f 87 81 00 00 00    	ja     10001947 <x87Handler(regs*)+0xd46>
100018c6:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
100018cc:	51                   	push   ecx
100018cd:	51                   	push   ecx
100018ce:	6a 00                	push   0x0
100018d0:	56                   	push   esi
100018d1:	e8 fc ff ff ff       	call   100018d2 <x87Handler(regs*)+0xcd1>	100018d2: R_386_PC32	fpuGetReg(int)
100018d6:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100018dc:	83 ec 0c             	sub    esp,0xc
100018df:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100018e5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018e9:	2d e8 00 00 00       	sub    eax,0xe8
100018ee:	50                   	push   eax
100018ef:	52                   	push   edx
100018f0:	e8 fc ff ff ff       	call   100018f1 <x87Handler(regs*)+0xcf0>	100018f1: R_386_PC32	fpuGetReg(int)
100018f5:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100018fb:	57                   	push   edi
100018fc:	b9 03 00 00 00       	mov    ecx,0x3
10001901:	89 e7                	mov    edi,esp
10001903:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001905:	83 ec 0c             	sub    esp,0xc
10001908:	b9 03 00 00 00       	mov    ecx,0x3
1000190d:	89 e7                	mov    edi,esp
1000190f:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
10001915:	89 d6                	mov    esi,edx
10001917:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001919:	50                   	push   eax
1000191a:	e8 fc ff ff ff       	call   1000191b <x87Handler(regs*)+0xd1a>	1000191b: R_386_PC32	fpuSub(_Float80, _Float80)
1000191f:	83 c4 20             	add    esp,0x20
10001922:	b9 03 00 00 00       	mov    ecx,0x3
10001927:	89 e7                	mov    edi,esp
10001929:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
1000192f:	89 c6                	mov    esi,eax
10001931:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001933:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001939:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000193d:	2d e8 00 00 00       	sub    eax,0xe8
10001942:	e9 db fe ff ff       	jmp    10001822 <x87Handler(regs*)+0xc21>
10001947:	8d 42 38             	lea    eax,[edx+0x38]
1000194a:	3c 07                	cmp    al,0x7
1000194c:	77 78                	ja     100019c6 <x87Handler(regs*)+0xdc5>
1000194e:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
10001954:	50                   	push   eax
10001955:	50                   	push   eax
10001956:	81 ea c8 00 00 00    	sub    edx,0xc8
1000195c:	52                   	push   edx
1000195d:	56                   	push   esi
1000195e:	e8 fc ff ff ff       	call   1000195f <x87Handler(regs*)+0xd5e>	1000195f: R_386_PC32	fpuGetReg(int)
10001963:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001969:	83 ec 0c             	sub    esp,0xc
1000196c:	6a 00                	push   0x0
1000196e:	52                   	push   edx
1000196f:	e8 fc ff ff ff       	call   10001970 <x87Handler(regs*)+0xd6f>	10001970: R_386_PC32	fpuGetReg(int)
10001974:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
1000197a:	52                   	push   edx
1000197b:	b9 03 00 00 00       	mov    ecx,0x3
10001980:	89 e7                	mov    edi,esp
10001982:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001984:	83 ec 0c             	sub    esp,0xc
10001987:	b9 03 00 00 00       	mov    ecx,0x3
1000198c:	89 e7                	mov    edi,esp
1000198e:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001994:	89 d6                	mov    esi,edx
10001996:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001998:	50                   	push   eax
10001999:	e8 fc ff ff ff       	call   1000199a <x87Handler(regs*)+0xd99>	1000199a: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000199e:	83 c4 20             	add    esp,0x20
100019a1:	b9 03 00 00 00       	mov    ecx,0x3
100019a6:	89 e7                	mov    edi,esp
100019a8:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
100019ae:	89 c6                	mov    esi,eax
100019b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019b2:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100019b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100019bc:	2d c8 00 00 00       	sub    eax,0xc8
100019c1:	e9 01 01 00 00       	jmp    10001ac7 <x87Handler(regs*)+0xec6>
100019c6:	80 fa f7             	cmp    dl,0xf7
100019c9:	76 7e                	jbe    10001a49 <x87Handler(regs*)+0xe48>
100019cb:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
100019d1:	51                   	push   ecx
100019d2:	51                   	push   ecx
100019d3:	6a 00                	push   0x0
100019d5:	56                   	push   esi
100019d6:	e8 fc ff ff ff       	call   100019d7 <x87Handler(regs*)+0xdd6>	100019d7: R_386_PC32	fpuGetReg(int)
100019db:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100019e1:	83 ec 0c             	sub    esp,0xc
100019e4:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
100019ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100019ee:	2d f8 00 00 00       	sub    eax,0xf8
100019f3:	50                   	push   eax
100019f4:	52                   	push   edx
100019f5:	e8 fc ff ff ff       	call   100019f6 <x87Handler(regs*)+0xdf5>	100019f6: R_386_PC32	fpuGetReg(int)
100019fa:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
10001a00:	57                   	push   edi
10001a01:	b9 03 00 00 00       	mov    ecx,0x3
10001a06:	89 e7                	mov    edi,esp
10001a08:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a0a:	83 ec 0c             	sub    esp,0xc
10001a0d:	b9 03 00 00 00       	mov    ecx,0x3
10001a12:	89 e7                	mov    edi,esp
10001a14:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
10001a1a:	89 d6                	mov    esi,edx
10001a1c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a1e:	50                   	push   eax
10001a1f:	e8 fc ff ff ff       	call   10001a20 <x87Handler(regs*)+0xe1f>	10001a20: R_386_PC32	fpuDivide(_Float80, _Float80)
10001a24:	83 c4 20             	add    esp,0x20
10001a27:	b9 03 00 00 00       	mov    ecx,0x3
10001a2c:	89 e7                	mov    edi,esp
10001a2e:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
10001a34:	89 c6                	mov    esi,eax
10001a36:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a38:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001a3e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001a42:	2d f8 00 00 00       	sub    eax,0xf8
10001a47:	eb 7e                	jmp    10001ac7 <x87Handler(regs*)+0xec6>
10001a49:	8d 42 10             	lea    eax,[edx+0x10]
10001a4c:	3c 07                	cmp    al,0x7
10001a4e:	0f 87 09 02 00 00    	ja     10001c5d <x87Handler(regs*)+0x105c>
10001a54:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
10001a5a:	50                   	push   eax
10001a5b:	50                   	push   eax
10001a5c:	81 ea f0 00 00 00    	sub    edx,0xf0
10001a62:	52                   	push   edx
10001a63:	56                   	push   esi
10001a64:	e8 fc ff ff ff       	call   10001a65 <x87Handler(regs*)+0xe64>	10001a65: R_386_PC32	fpuGetReg(int)
10001a69:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001a6f:	83 ec 0c             	sub    esp,0xc
10001a72:	6a 00                	push   0x0
10001a74:	52                   	push   edx
10001a75:	e8 fc ff ff ff       	call   10001a76 <x87Handler(regs*)+0xe75>	10001a76: R_386_PC32	fpuGetReg(int)
10001a7a:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001a80:	52                   	push   edx
10001a81:	b9 03 00 00 00       	mov    ecx,0x3
10001a86:	89 e7                	mov    edi,esp
10001a88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a8a:	83 ec 0c             	sub    esp,0xc
10001a8d:	b9 03 00 00 00       	mov    ecx,0x3
10001a92:	89 e7                	mov    edi,esp
10001a94:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001a9a:	89 d6                	mov    esi,edx
10001a9c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a9e:	50                   	push   eax
10001a9f:	e8 fc ff ff ff       	call   10001aa0 <x87Handler(regs*)+0xe9f>	10001aa0: R_386_PC32	fpuDivide(_Float80, _Float80)
10001aa4:	83 c4 20             	add    esp,0x20
10001aa7:	b9 03 00 00 00       	mov    ecx,0x3
10001aac:	89 e7                	mov    edi,esp
10001aae:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001ab4:	89 c6                	mov    esi,eax
10001ab6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ab8:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001abe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001ac2:	2d f0 00 00 00       	sub    eax,0xf0
10001ac7:	50                   	push   eax
10001ac8:	e9 0e fb ff ff       	jmp    100015db <x87Handler(regs*)+0x9da>
10001acd:	80 f9 dd             	cmp    cl,0xdd
10001ad0:	0f 85 30 01 00 00    	jne    10001c06 <x87Handler(regs*)+0x1005>
10001ad6:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001adc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001ae0:	8d 48 30             	lea    ecx,[eax+0x30]
10001ae3:	80 f9 07             	cmp    cl,0x7
10001ae6:	77 2e                	ja     10001b16 <x87Handler(regs*)+0xf15>
10001ae8:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
10001aee:	50                   	push   eax
10001aef:	50                   	push   eax
10001af0:	6a 00                	push   0x0
10001af2:	56                   	push   esi
10001af3:	e8 fc ff ff ff       	call   10001af4 <x87Handler(regs*)+0xef3>	10001af4: R_386_PC32	fpuGetReg(int)
10001af8:	b9 03 00 00 00       	mov    ecx,0x3
10001afd:	89 e7                	mov    edi,esp
10001aff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b01:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001b07:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001b0b:	2d d0 00 00 00       	sub    eax,0xd0
10001b10:	50                   	push   eax
10001b11:	e9 4a f4 ff ff       	jmp    10000f60 <x87Handler(regs*)+0x35f>
10001b16:	8d 48 28             	lea    ecx,[eax+0x28]
10001b19:	80 f9 07             	cmp    cl,0x7
10001b1c:	77 2d                	ja     10001b4b <x87Handler(regs*)+0xf4a>
10001b1e:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
10001b24:	50                   	push   eax
10001b25:	50                   	push   eax
10001b26:	6a 00                	push   0x0
10001b28:	56                   	push   esi
10001b29:	e8 fc ff ff ff       	call   10001b2a <x87Handler(regs*)+0xf29>	10001b2a: R_386_PC32	fpuGetReg(int)
10001b2e:	b9 03 00 00 00       	mov    ecx,0x3
10001b33:	89 e7                	mov    edi,esp
10001b35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b37:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001b3d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001b41:	2d d8 00 00 00       	sub    eax,0xd8
10001b46:	e9 d7 fc ff ff       	jmp    10001822 <x87Handler(regs*)+0xc21>
10001b4b:	8d 48 20             	lea    ecx,[eax+0x20]
10001b4e:	80 f9 07             	cmp    cl,0x7
10001b51:	77 52                	ja     10001ba5 <x87Handler(regs*)+0xfa4>
10001b53:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
10001b59:	57                   	push   edi
10001b5a:	57                   	push   edi
10001b5b:	2d e0 00 00 00       	sub    eax,0xe0
10001b60:	50                   	push   eax
10001b61:	56                   	push   esi
10001b62:	e8 fc ff ff ff       	call   10001b63 <x87Handler(regs*)+0xf62>	10001b63: R_386_PC32	fpuGetReg(int)
10001b67:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001b6d:	83 ec 0c             	sub    esp,0xc
10001b70:	6a 00                	push   0x0
10001b72:	50                   	push   eax
10001b73:	e8 fc ff ff ff       	call   10001b74 <x87Handler(regs*)+0xf73>	10001b74: R_386_PC32	fpuGetReg(int)
10001b78:	50                   	push   eax
10001b79:	50                   	push   eax
10001b7a:	b9 03 00 00 00       	mov    ecx,0x3
10001b7f:	89 e7                	mov    edi,esp
10001b81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b83:	83 ec 0c             	sub    esp,0xc
10001b86:	b9 03 00 00 00       	mov    ecx,0x3
10001b8b:	89 e7                	mov    edi,esp
10001b8d:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001b93:	89 c6                	mov    esi,eax
10001b95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b97:	e8 fc ff ff ff       	call   10001b98 <x87Handler(regs*)+0xf97>	10001b98: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001b9c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001ba0:	e9 37 06 00 00       	jmp    100021dc <x87Handler(regs*)+0x15db>
10001ba5:	8d 48 18             	lea    ecx,[eax+0x18]
10001ba8:	80 f9 07             	cmp    cl,0x7
10001bab:	0f 87 75 f6 ff ff    	ja     10001226 <x87Handler(regs*)+0x625>
10001bb1:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
10001bb7:	52                   	push   edx
10001bb8:	52                   	push   edx
10001bb9:	2d e8 00 00 00       	sub    eax,0xe8
10001bbe:	50                   	push   eax
10001bbf:	56                   	push   esi
10001bc0:	e8 fc ff ff ff       	call   10001bc1 <x87Handler(regs*)+0xfc0>	10001bc1: R_386_PC32	fpuGetReg(int)
10001bc5:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
10001bcb:	83 ec 0c             	sub    esp,0xc
10001bce:	6a 00                	push   0x0
10001bd0:	50                   	push   eax
10001bd1:	e8 fc ff ff ff       	call   10001bd2 <x87Handler(regs*)+0xfd1>	10001bd2: R_386_PC32	fpuGetReg(int)
10001bd6:	51                   	push   ecx
10001bd7:	51                   	push   ecx
10001bd8:	b9 03 00 00 00       	mov    ecx,0x3
10001bdd:	89 e7                	mov    edi,esp
10001bdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001be1:	83 ec 0c             	sub    esp,0xc
10001be4:	b9 03 00 00 00       	mov    ecx,0x3
10001be9:	89 e7                	mov    edi,esp
10001beb:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
10001bf1:	89 c6                	mov    esi,eax
10001bf3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bf5:	e8 fc ff ff ff       	call   10001bf6 <x87Handler(regs*)+0xff5>	10001bf6: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001bfa:	8d 45 dc             	lea    eax,[ebp-0x24]
10001bfd:	83 c4 24             	add    esp,0x24
10001c00:	50                   	push   eax
10001c01:	e9 28 fc ff ff       	jmp    1000182e <x87Handler(regs*)+0xc2d>
10001c06:	80 f9 da             	cmp    cl,0xda
10001c09:	0f 85 b9 00 00 00    	jne    10001cc8 <x87Handler(regs*)+0x10c7>
10001c0f:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001c15:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001c19:	0f 85 5d 03 00 00    	jne    10001f7c <x87Handler(regs*)+0x137b>
10001c1f:	8d b5 18 fd ff ff    	lea    esi,[ebp-0x2e8]
10001c25:	50                   	push   eax
10001c26:	50                   	push   eax
10001c27:	6a 01                	push   0x1
10001c29:	56                   	push   esi
10001c2a:	e8 fc ff ff ff       	call   10001c2b <x87Handler(regs*)+0x102a>	10001c2b: R_386_PC32	fpuGetReg(int)
10001c2f:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001c35:	83 ec 0c             	sub    esp,0xc
10001c38:	6a 00                	push   0x0
10001c3a:	50                   	push   eax
10001c3b:	e8 fc ff ff ff       	call   10001c3c <x87Handler(regs*)+0x103b>	10001c3c: R_386_PC32	fpuGetReg(int)
10001c40:	50                   	push   eax
10001c41:	50                   	push   eax
10001c42:	b9 03 00 00 00       	mov    ecx,0x3
10001c47:	89 e7                	mov    edi,esp
10001c49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c4b:	83 ec 0c             	sub    esp,0xc
10001c4e:	b9 03 00 00 00       	mov    ecx,0x3
10001c53:	89 e7                	mov    edi,esp
10001c55:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001c5b:	eb 47                	jmp    10001ca4 <x87Handler(regs*)+0x10a3>
10001c5d:	31 c0                	xor    eax,eax
10001c5f:	80 fa d9             	cmp    dl,0xd9
10001c62:	0f 85 fe 07 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
10001c68:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001c6e:	51                   	push   ecx
10001c6f:	51                   	push   ecx
10001c70:	6a 01                	push   0x1
10001c72:	56                   	push   esi
10001c73:	e8 fc ff ff ff       	call   10001c74 <x87Handler(regs*)+0x1073>	10001c74: R_386_PC32	fpuGetReg(int)
10001c78:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001c7e:	83 ec 0c             	sub    esp,0xc
10001c81:	6a 00                	push   0x0
10001c83:	50                   	push   eax
10001c84:	e8 fc ff ff ff       	call   10001c85 <x87Handler(regs*)+0x1084>	10001c85: R_386_PC32	fpuGetReg(int)
10001c89:	57                   	push   edi
10001c8a:	57                   	push   edi
10001c8b:	b9 03 00 00 00       	mov    ecx,0x3
10001c90:	89 e7                	mov    edi,esp
10001c92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c94:	83 ec 0c             	sub    esp,0xc
10001c97:	b9 03 00 00 00       	mov    ecx,0x3
10001c9c:	89 e7                	mov    edi,esp
10001c9e:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001ca4:	89 c6                	mov    esi,eax
10001ca6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ca8:	e8 fc ff ff ff       	call   10001ca9 <x87Handler(regs*)+0x10a8>	10001ca9: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001cad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001cb1:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001cb4:	83 c4 24             	add    esp,0x24
10001cb7:	53                   	push   ebx
10001cb8:	e8 fc ff ff ff       	call   10001cb9 <x87Handler(regs*)+0x10b8>	10001cb9: R_386_PC32	fpuPop()
10001cbd:	53                   	push   ebx
10001cbe:	e8 fc ff ff ff       	call   10001cbf <x87Handler(regs*)+0x10be>	10001cbf: R_386_PC32	fpuPop()
10001cc3:	e9 83 05 00 00       	jmp    1000224b <x87Handler(regs*)+0x164a>
10001cc8:	80 f9 df             	cmp    cl,0xdf
10001ccb:	0f 85 8d 03 00 00    	jne    1000205e <x87Handler(regs*)+0x145d>
10001cd1:	8b 85 e0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x620]
10001cd7:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001cdb:	0f 85 3d 07 00 00    	jne    1000241e <x87Handler(regs*)+0x181d>
10001ce1:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001ce4: R_386_32	fpuState
10001ce8:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001cec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001cf0:	e9 77 f2 ff ff       	jmp    10000f6c <x87Handler(regs*)+0x36b>
10001cf5:	84 d2                	test   dl,dl
10001cf7:	75 66                	jne    10001d5f <x87Handler(regs*)+0x115e>
10001cf9:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001cff:	50                   	push   eax
10001d00:	50                   	push   eax
10001d01:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001d07:	ff 30                	push   DWORD PTR [eax]
10001d09:	56                   	push   esi
10001d0a:	e8 fc ff ff ff       	call   10001d0b <x87Handler(regs*)+0x110a>	10001d0b: R_386_PC32	fpu32ToInternal(unsigned int)
10001d0f:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001d15:	83 ec 0c             	sub    esp,0xc
10001d18:	6a 00                	push   0x0
10001d1a:	52                   	push   edx
10001d1b:	e8 fc ff ff ff       	call   10001d1c <x87Handler(regs*)+0x111b>	10001d1c: R_386_PC32	fpuGetReg(int)
10001d20:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001d26:	52                   	push   edx
10001d27:	b9 03 00 00 00       	mov    ecx,0x3
10001d2c:	89 e7                	mov    edi,esp
10001d2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d30:	83 ec 0c             	sub    esp,0xc
10001d33:	b9 03 00 00 00       	mov    ecx,0x3
10001d38:	89 e7                	mov    edi,esp
10001d3a:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001d40:	89 d6                	mov    esi,edx
10001d42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d44:	50                   	push   eax
10001d45:	e8 fc ff ff ff       	call   10001d46 <x87Handler(regs*)+0x1145>	10001d46: R_386_PC32	fpuAdd(_Float80, _Float80)
10001d4a:	83 c4 20             	add    esp,0x20
10001d4d:	b9 03 00 00 00       	mov    ecx,0x3
10001d52:	89 e7                	mov    edi,esp
10001d54:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001d5a:	e9 36 06 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10001d5f:	80 fa 01             	cmp    dl,0x1
10001d62:	75 66                	jne    10001dca <x87Handler(regs*)+0x11c9>
10001d64:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001d6a:	51                   	push   ecx
10001d6b:	51                   	push   ecx
10001d6c:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001d72:	ff 30                	push   DWORD PTR [eax]
10001d74:	56                   	push   esi
10001d75:	e8 fc ff ff ff       	call   10001d76 <x87Handler(regs*)+0x1175>	10001d76: R_386_PC32	fpu32ToInternal(unsigned int)
10001d7a:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001d80:	83 ec 0c             	sub    esp,0xc
10001d83:	6a 00                	push   0x0
10001d85:	52                   	push   edx
10001d86:	e8 fc ff ff ff       	call   10001d87 <x87Handler(regs*)+0x1186>	10001d87: R_386_PC32	fpuGetReg(int)
10001d8b:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001d91:	57                   	push   edi
10001d92:	b9 03 00 00 00       	mov    ecx,0x3
10001d97:	89 e7                	mov    edi,esp
10001d99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d9b:	83 ec 0c             	sub    esp,0xc
10001d9e:	b9 03 00 00 00       	mov    ecx,0x3
10001da3:	89 e7                	mov    edi,esp
10001da5:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001dab:	89 d6                	mov    esi,edx
10001dad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001daf:	50                   	push   eax
10001db0:	e8 fc ff ff ff       	call   10001db1 <x87Handler(regs*)+0x11b0>	10001db1: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001db5:	83 c4 20             	add    esp,0x20
10001db8:	b9 03 00 00 00       	mov    ecx,0x3
10001dbd:	89 e7                	mov    edi,esp
10001dbf:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001dc5:	e9 cb 05 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10001dca:	80 fa 04             	cmp    dl,0x4
10001dcd:	75 66                	jne    10001e35 <x87Handler(regs*)+0x1234>
10001dcf:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001dd5:	50                   	push   eax
10001dd6:	50                   	push   eax
10001dd7:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001ddd:	ff 30                	push   DWORD PTR [eax]
10001ddf:	56                   	push   esi
10001de0:	e8 fc ff ff ff       	call   10001de1 <x87Handler(regs*)+0x11e0>	10001de1: R_386_PC32	fpu32ToInternal(unsigned int)
10001de5:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001deb:	83 ec 0c             	sub    esp,0xc
10001dee:	6a 00                	push   0x0
10001df0:	52                   	push   edx
10001df1:	e8 fc ff ff ff       	call   10001df2 <x87Handler(regs*)+0x11f1>	10001df2: R_386_PC32	fpuGetReg(int)
10001df6:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001dfc:	52                   	push   edx
10001dfd:	b9 03 00 00 00       	mov    ecx,0x3
10001e02:	89 e7                	mov    edi,esp
10001e04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e06:	83 ec 0c             	sub    esp,0xc
10001e09:	b9 03 00 00 00       	mov    ecx,0x3
10001e0e:	89 e7                	mov    edi,esp
10001e10:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001e16:	89 d6                	mov    esi,edx
10001e18:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e1a:	50                   	push   eax
10001e1b:	e8 fc ff ff ff       	call   10001e1c <x87Handler(regs*)+0x121b>	10001e1c: R_386_PC32	fpuSub(_Float80, _Float80)
10001e20:	83 c4 20             	add    esp,0x20
10001e23:	b9 03 00 00 00       	mov    ecx,0x3
10001e28:	89 e7                	mov    edi,esp
10001e2a:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001e30:	e9 60 05 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10001e35:	80 fa 05             	cmp    dl,0x5
10001e38:	75 66                	jne    10001ea0 <x87Handler(regs*)+0x129f>
10001e3a:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001e40:	51                   	push   ecx
10001e41:	51                   	push   ecx
10001e42:	6a 00                	push   0x0
10001e44:	56                   	push   esi
10001e45:	e8 fc ff ff ff       	call   10001e46 <x87Handler(regs*)+0x1245>	10001e46: R_386_PC32	fpuGetReg(int)
10001e4a:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001e50:	83 ec 0c             	sub    esp,0xc
10001e53:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10001e59:	ff 32                	push   DWORD PTR [edx]
10001e5b:	50                   	push   eax
10001e5c:	e8 fc ff ff ff       	call   10001e5d <x87Handler(regs*)+0x125c>	10001e5d: R_386_PC32	fpu32ToInternal(unsigned int)
10001e61:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001e67:	57                   	push   edi
10001e68:	b9 03 00 00 00       	mov    ecx,0x3
10001e6d:	89 e7                	mov    edi,esp
10001e6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e71:	83 ec 0c             	sub    esp,0xc
10001e74:	b9 03 00 00 00       	mov    ecx,0x3
10001e79:	89 e7                	mov    edi,esp
10001e7b:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001e81:	89 c6                	mov    esi,eax
10001e83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e85:	52                   	push   edx
10001e86:	e8 fc ff ff ff       	call   10001e87 <x87Handler(regs*)+0x1286>	10001e87: R_386_PC32	fpuSub(_Float80, _Float80)
10001e8b:	83 c4 20             	add    esp,0x20
10001e8e:	b9 03 00 00 00       	mov    ecx,0x3
10001e93:	89 e7                	mov    edi,esp
10001e95:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001e9b:	e9 4d 05 00 00       	jmp    100023ed <x87Handler(regs*)+0x17ec>
10001ea0:	80 fa 06             	cmp    dl,0x6
10001ea3:	75 66                	jne    10001f0b <x87Handler(regs*)+0x130a>
10001ea5:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10001eab:	50                   	push   eax
10001eac:	50                   	push   eax
10001ead:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001eb3:	ff 30                	push   DWORD PTR [eax]
10001eb5:	56                   	push   esi
10001eb6:	e8 fc ff ff ff       	call   10001eb7 <x87Handler(regs*)+0x12b6>	10001eb7: R_386_PC32	fpu32ToInternal(unsigned int)
10001ebb:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001ec1:	83 ec 0c             	sub    esp,0xc
10001ec4:	6a 00                	push   0x0
10001ec6:	52                   	push   edx
10001ec7:	e8 fc ff ff ff       	call   10001ec8 <x87Handler(regs*)+0x12c7>	10001ec8: R_386_PC32	fpuGetReg(int)
10001ecc:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001ed2:	52                   	push   edx
10001ed3:	b9 03 00 00 00       	mov    ecx,0x3
10001ed8:	89 e7                	mov    edi,esp
10001eda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001edc:	83 ec 0c             	sub    esp,0xc
10001edf:	b9 03 00 00 00       	mov    ecx,0x3
10001ee4:	89 e7                	mov    edi,esp
10001ee6:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001eec:	89 d6                	mov    esi,edx
10001eee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ef0:	50                   	push   eax
10001ef1:	e8 fc ff ff ff       	call   10001ef2 <x87Handler(regs*)+0x12f1>	10001ef2: R_386_PC32	fpuDivide(_Float80, _Float80)
10001ef6:	83 c4 20             	add    esp,0x20
10001ef9:	b9 03 00 00 00       	mov    ecx,0x3
10001efe:	89 e7                	mov    edi,esp
10001f00:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001f06:	e9 8a 04 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10001f0b:	31 c0                	xor    eax,eax
10001f0d:	80 fa 07             	cmp    dl,0x7
10001f10:	0f 85 50 05 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
10001f16:	8d b5 fc fd ff ff    	lea    esi,[ebp-0x204]
10001f1c:	50                   	push   eax
10001f1d:	50                   	push   eax
10001f1e:	6a 00                	push   0x0
10001f20:	56                   	push   esi
10001f21:	e8 fc ff ff ff       	call   10001f22 <x87Handler(regs*)+0x1321>	10001f22: R_386_PC32	fpuGetReg(int)
10001f26:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001f2c:	83 ec 0c             	sub    esp,0xc
10001f2f:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
10001f35:	ff 32                	push   DWORD PTR [edx]
10001f37:	50                   	push   eax
10001f38:	e8 fc ff ff ff       	call   10001f39 <x87Handler(regs*)+0x1338>	10001f39: R_386_PC32	fpu32ToInternal(unsigned int)
10001f3d:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001f43:	50                   	push   eax
10001f44:	b9 03 00 00 00       	mov    ecx,0x3
10001f49:	89 e7                	mov    edi,esp
10001f4b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f4d:	83 ec 0c             	sub    esp,0xc
10001f50:	b9 03 00 00 00       	mov    ecx,0x3
10001f55:	89 e7                	mov    edi,esp
10001f57:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001f5d:	89 c6                	mov    esi,eax
10001f5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f61:	52                   	push   edx
10001f62:	e8 fc ff ff ff       	call   10001f63 <x87Handler(regs*)+0x1362>	10001f63: R_386_PC32	fpuDivide(_Float80, _Float80)
10001f67:	83 c4 20             	add    esp,0x20
10001f6a:	b9 03 00 00 00       	mov    ecx,0x3
10001f6f:	89 e7                	mov    edi,esp
10001f71:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001f77:	e9 71 04 00 00       	jmp    100023ed <x87Handler(regs*)+0x17ec>
10001f7c:	80 fa 01             	cmp    dl,0x1
10001f7f:	75 69                	jne    10001fea <x87Handler(regs*)+0x13e9>
10001f81:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001f87:	51                   	push   ecx
10001f88:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001f8e:	8b 00                	mov    eax,DWORD PTR [eax]
10001f90:	31 d2                	xor    edx,edx
10001f92:	52                   	push   edx
10001f93:	50                   	push   eax
10001f94:	56                   	push   esi
10001f95:	e8 fc ff ff ff       	call   10001f96 <x87Handler(regs*)+0x1395>	10001f96: R_386_PC32	fpuLongToFloat(long long)
10001f9a:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001fa0:	83 ec 0c             	sub    esp,0xc
10001fa3:	6a 00                	push   0x0
10001fa5:	52                   	push   edx
10001fa6:	e8 fc ff ff ff       	call   10001fa7 <x87Handler(regs*)+0x13a6>	10001fa7: R_386_PC32	fpuGetReg(int)
10001fab:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001fb1:	57                   	push   edi
10001fb2:	b9 03 00 00 00       	mov    ecx,0x3
10001fb7:	89 e7                	mov    edi,esp
10001fb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fbb:	83 ec 0c             	sub    esp,0xc
10001fbe:	b9 03 00 00 00       	mov    ecx,0x3
10001fc3:	89 e7                	mov    edi,esp
10001fc5:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001fcb:	89 d6                	mov    esi,edx
10001fcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fcf:	50                   	push   eax
10001fd0:	e8 fc ff ff ff       	call   10001fd1 <x87Handler(regs*)+0x13d0>	10001fd1: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001fd5:	83 c4 20             	add    esp,0x20
10001fd8:	b9 03 00 00 00       	mov    ecx,0x3
10001fdd:	89 e7                	mov    edi,esp
10001fdf:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001fe5:	e9 ab 03 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10001fea:	31 c0                	xor    eax,eax
10001fec:	80 fa 04             	cmp    dl,0x4
10001fef:	0f 85 71 04 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
10001ff5:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001ffb:	50                   	push   eax
10001ffc:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002002:	8b 00                	mov    eax,DWORD PTR [eax]
10002004:	31 d2                	xor    edx,edx
10002006:	52                   	push   edx
10002007:	50                   	push   eax
10002008:	56                   	push   esi
10002009:	e8 fc ff ff ff       	call   1000200a <x87Handler(regs*)+0x1409>	1000200a: R_386_PC32	fpuLongToFloat(long long)
1000200e:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10002014:	83 ec 0c             	sub    esp,0xc
10002017:	6a 00                	push   0x0
10002019:	52                   	push   edx
1000201a:	e8 fc ff ff ff       	call   1000201b <x87Handler(regs*)+0x141a>	1000201b: R_386_PC32	fpuGetReg(int)
1000201f:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10002025:	52                   	push   edx
10002026:	b9 03 00 00 00       	mov    ecx,0x3
1000202b:	89 e7                	mov    edi,esp
1000202d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000202f:	83 ec 0c             	sub    esp,0xc
10002032:	b9 03 00 00 00       	mov    ecx,0x3
10002037:	89 e7                	mov    edi,esp
10002039:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
1000203f:	89 d6                	mov    esi,edx
10002041:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002043:	50                   	push   eax
10002044:	e8 fc ff ff ff       	call   10002045 <x87Handler(regs*)+0x1444>	10002045: R_386_PC32	fpuSub(_Float80, _Float80)
10002049:	83 c4 20             	add    esp,0x20
1000204c:	b9 03 00 00 00       	mov    ecx,0x3
10002051:	89 e7                	mov    edi,esp
10002053:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10002059:	e9 37 03 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
1000205e:	31 c0                	xor    eax,eax
10002060:	80 f9 db             	cmp    cl,0xdb
10002063:	0f 85 fd 03 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
10002069:	84 d2                	test   dl,dl
1000206b:	0f 85 81 f1 ff ff    	jne    100011f2 <x87Handler(regs*)+0x5f1>
10002071:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10002077:	50                   	push   eax
10002078:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000207e:	8b 00                	mov    eax,DWORD PTR [eax]
10002080:	31 d2                	xor    edx,edx
10002082:	52                   	push   edx
10002083:	50                   	push   eax
10002084:	e9 a9 03 00 00       	jmp    10002432 <x87Handler(regs*)+0x1831>
10002089:	31 c0                	xor    eax,eax
1000208b:	80 fa 03             	cmp    dl,0x3
1000208e:	0f 85 d2 03 00 00    	jne    10002466 <x87Handler(regs*)+0x1865>
10002094:	8d b5 98 fe ff ff    	lea    esi,[ebp-0x168]
1000209a:	83 ec 0c             	sub    esp,0xc
1000209d:	56                   	push   esi
1000209e:	e8 fc ff ff ff       	call   1000209f <x87Handler(regs*)+0x149e>	1000209f: R_386_PC32	fpuPop()
100020a3:	e9 63 f1 ff ff       	jmp    1000120b <x87Handler(regs*)+0x60a>
100020a8:	84 d2                	test   dl,dl
100020aa:	75 68                	jne    10002114 <x87Handler(regs*)+0x1513>
100020ac:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
100020b2:	51                   	push   ecx
100020b3:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100020b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
100020bc:	ff 30                	push   DWORD PTR [eax]
100020be:	56                   	push   esi
100020bf:	e8 fc ff ff ff       	call   100020c0 <x87Handler(regs*)+0x14bf>	100020c0: R_386_PC32	fpu64ToInternal(unsigned long long)
100020c4:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
100020ca:	83 ec 0c             	sub    esp,0xc
100020cd:	6a 00                	push   0x0
100020cf:	52                   	push   edx
100020d0:	e8 fc ff ff ff       	call   100020d1 <x87Handler(regs*)+0x14d0>	100020d1: R_386_PC32	fpuGetReg(int)
100020d5:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
100020db:	57                   	push   edi
100020dc:	b9 03 00 00 00       	mov    ecx,0x3
100020e1:	89 e7                	mov    edi,esp
100020e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020e5:	83 ec 0c             	sub    esp,0xc
100020e8:	b9 03 00 00 00       	mov    ecx,0x3
100020ed:	89 e7                	mov    edi,esp
100020ef:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
100020f5:	89 d6                	mov    esi,edx
100020f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020f9:	50                   	push   eax
100020fa:	e8 fc ff ff ff       	call   100020fb <x87Handler(regs*)+0x14fa>	100020fb: R_386_PC32	fpuAdd(_Float80, _Float80)
100020ff:	83 c4 20             	add    esp,0x20
10002102:	b9 03 00 00 00       	mov    ecx,0x3
10002107:	89 e7                	mov    edi,esp
10002109:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000210f:	e9 81 02 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10002114:	80 fa 01             	cmp    dl,0x1
10002117:	75 68                	jne    10002181 <x87Handler(regs*)+0x1580>
10002119:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
1000211f:	50                   	push   eax
10002120:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002126:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002129:	ff 30                	push   DWORD PTR [eax]
1000212b:	56                   	push   esi
1000212c:	e8 fc ff ff ff       	call   1000212d <x87Handler(regs*)+0x152c>	1000212d: R_386_PC32	fpu64ToInternal(unsigned long long)
10002131:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002137:	83 ec 0c             	sub    esp,0xc
1000213a:	6a 00                	push   0x0
1000213c:	52                   	push   edx
1000213d:	e8 fc ff ff ff       	call   1000213e <x87Handler(regs*)+0x153d>	1000213e: R_386_PC32	fpuGetReg(int)
10002142:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10002148:	52                   	push   edx
10002149:	b9 03 00 00 00       	mov    ecx,0x3
1000214e:	89 e7                	mov    edi,esp
10002150:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002152:	83 ec 0c             	sub    esp,0xc
10002155:	b9 03 00 00 00       	mov    ecx,0x3
1000215a:	89 e7                	mov    edi,esp
1000215c:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10002162:	89 d6                	mov    esi,edx
10002164:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002166:	50                   	push   eax
10002167:	e8 fc ff ff ff       	call   10002168 <x87Handler(regs*)+0x1567>	10002168: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000216c:	83 c4 20             	add    esp,0x20
1000216f:	b9 03 00 00 00       	mov    ecx,0x3
10002174:	89 e7                	mov    edi,esp
10002176:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
1000217c:	e9 14 02 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
10002181:	80 fa 02             	cmp    dl,0x2
10002184:	75 5e                	jne    100021e4 <x87Handler(regs*)+0x15e3>
10002186:	8d b5 ec fe ff ff    	lea    esi,[ebp-0x114]
1000218c:	50                   	push   eax
1000218d:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002193:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002196:	ff 30                	push   DWORD PTR [eax]
10002198:	56                   	push   esi
10002199:	e8 fc ff ff ff       	call   1000219a <x87Handler(regs*)+0x1599>	1000219a: R_386_PC32	fpu64ToInternal(unsigned long long)
1000219e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100021a4:	83 ec 0c             	sub    esp,0xc
100021a7:	6a 00                	push   0x0
100021a9:	50                   	push   eax
100021aa:	e8 fc ff ff ff       	call   100021ab <x87Handler(regs*)+0x15aa>	100021ab: R_386_PC32	fpuGetReg(int)
100021af:	50                   	push   eax
100021b0:	50                   	push   eax
100021b1:	b9 03 00 00 00       	mov    ecx,0x3
100021b6:	89 e7                	mov    edi,esp
100021b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021ba:	83 ec 0c             	sub    esp,0xc
100021bd:	b9 03 00 00 00       	mov    ecx,0x3
100021c2:	89 e7                	mov    edi,esp
100021c4:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100021ca:	89 c6                	mov    esi,eax
100021cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021ce:	e8 fc ff ff ff       	call   100021cf <x87Handler(regs*)+0x15ce>	100021cf: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100021d3:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
100021d9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100021dc:	83 c4 30             	add    esp,0x30
100021df:	e9 88 ed ff ff       	jmp    10000f6c <x87Handler(regs*)+0x36b>
100021e4:	80 fa 03             	cmp    dl,0x3
100021e7:	75 6a                	jne    10002253 <x87Handler(regs*)+0x1652>
100021e9:	8d b5 04 ff ff ff    	lea    esi,[ebp-0xfc]
100021ef:	51                   	push   ecx
100021f0:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
100021f6:	ff 70 04             	push   DWORD PTR [eax+0x4]
100021f9:	ff 30                	push   DWORD PTR [eax]
100021fb:	56                   	push   esi
100021fc:	e8 fc ff ff ff       	call   100021fd <x87Handler(regs*)+0x15fc>	100021fd: R_386_PC32	fpu64ToInternal(unsigned long long)
10002201:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002207:	83 ec 0c             	sub    esp,0xc
1000220a:	6a 00                	push   0x0
1000220c:	50                   	push   eax
1000220d:	e8 fc ff ff ff       	call   1000220e <x87Handler(regs*)+0x160d>	1000220e: R_386_PC32	fpuGetReg(int)
10002212:	57                   	push   edi
10002213:	57                   	push   edi
10002214:	b9 03 00 00 00       	mov    ecx,0x3
10002219:	89 e7                	mov    edi,esp
1000221b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000221d:	83 ec 0c             	sub    esp,0xc
10002220:	b9 03 00 00 00       	mov    ecx,0x3
10002225:	89 e7                	mov    edi,esp
10002227:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
1000222d:	89 c6                	mov    esi,eax
1000222f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002231:	e8 fc ff ff ff       	call   10002232 <x87Handler(regs*)+0x1631>	10002232: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10002236:	8d 45 dc             	lea    eax,[ebp-0x24]
10002239:	83 c4 24             	add    esp,0x24
1000223c:	50                   	push   eax
1000223d:	e8 fc ff ff ff       	call   1000223e <x87Handler(regs*)+0x163d>	1000223e: R_386_PC32	fpuPop()
10002242:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
10002248:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000224b:	83 c4 0c             	add    esp,0xc
1000224e:	e9 19 ed ff ff       	jmp    10000f6c <x87Handler(regs*)+0x36b>
10002253:	80 fa 04             	cmp    dl,0x4
10002256:	75 68                	jne    100022c0 <x87Handler(regs*)+0x16bf>
10002258:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
1000225e:	50                   	push   eax
1000225f:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002265:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002268:	ff 30                	push   DWORD PTR [eax]
1000226a:	56                   	push   esi
1000226b:	e8 fc ff ff ff       	call   1000226c <x87Handler(regs*)+0x166b>	1000226c: R_386_PC32	fpu64ToInternal(unsigned long long)
10002270:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002276:	83 ec 0c             	sub    esp,0xc
10002279:	6a 00                	push   0x0
1000227b:	52                   	push   edx
1000227c:	e8 fc ff ff ff       	call   1000227d <x87Handler(regs*)+0x167c>	1000227d: R_386_PC32	fpuGetReg(int)
10002281:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
10002287:	52                   	push   edx
10002288:	b9 03 00 00 00       	mov    ecx,0x3
1000228d:	89 e7                	mov    edi,esp
1000228f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002291:	83 ec 0c             	sub    esp,0xc
10002294:	b9 03 00 00 00       	mov    ecx,0x3
10002299:	89 e7                	mov    edi,esp
1000229b:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
100022a1:	89 d6                	mov    esi,edx
100022a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022a5:	50                   	push   eax
100022a6:	e8 fc ff ff ff       	call   100022a7 <x87Handler(regs*)+0x16a6>	100022a7: R_386_PC32	fpuSub(_Float80, _Float80)
100022ab:	83 c4 20             	add    esp,0x20
100022ae:	b9 03 00 00 00       	mov    ecx,0x3
100022b3:	89 e7                	mov    edi,esp
100022b5:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
100022bb:	e9 d5 00 00 00       	jmp    10002395 <x87Handler(regs*)+0x1794>
100022c0:	80 fa 05             	cmp    dl,0x5
100022c3:	75 68                	jne    1000232d <x87Handler(regs*)+0x172c>
100022c5:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
100022cb:	51                   	push   ecx
100022cc:	51                   	push   ecx
100022cd:	6a 00                	push   0x0
100022cf:	56                   	push   esi
100022d0:	e8 fc ff ff ff       	call   100022d1 <x87Handler(regs*)+0x16d0>	100022d1: R_386_PC32	fpuGetReg(int)
100022d5:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100022db:	57                   	push   edi
100022dc:	57                   	push   edi
100022dd:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
100022e3:	ff 72 04             	push   DWORD PTR [edx+0x4]
100022e6:	ff 32                	push   DWORD PTR [edx]
100022e8:	50                   	push   eax
100022e9:	e8 fc ff ff ff       	call   100022ea <x87Handler(regs*)+0x16e9>	100022ea: R_386_PC32	fpu64ToInternal(unsigned long long)
100022ee:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100022f4:	50                   	push   eax
100022f5:	b9 03 00 00 00       	mov    ecx,0x3
100022fa:	89 e7                	mov    edi,esp
100022fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022fe:	83 ec 0c             	sub    esp,0xc
10002301:	b9 03 00 00 00       	mov    ecx,0x3
10002306:	89 e7                	mov    edi,esp
10002308:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
1000230e:	89 c6                	mov    esi,eax
10002310:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002312:	52                   	push   edx
10002313:	e8 fc ff ff ff       	call   10002314 <x87Handler(regs*)+0x1713>	10002314: R_386_PC32	fpuSub(_Float80, _Float80)
10002318:	83 c4 20             	add    esp,0x20
1000231b:	b9 03 00 00 00       	mov    ecx,0x3
10002320:	89 e7                	mov    edi,esp
10002322:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
10002328:	e9 c0 00 00 00       	jmp    100023ed <x87Handler(regs*)+0x17ec>
1000232d:	80 fa 06             	cmp    dl,0x6
10002330:	75 67                	jne    10002399 <x87Handler(regs*)+0x1798>
10002332:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
10002338:	57                   	push   edi
10002339:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000233f:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002342:	ff 30                	push   DWORD PTR [eax]
10002344:	56                   	push   esi
10002345:	e8 fc ff ff ff       	call   10002346 <x87Handler(regs*)+0x1745>	10002346: R_386_PC32	fpu64ToInternal(unsigned long long)
1000234a:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002350:	83 ec 0c             	sub    esp,0xc
10002353:	6a 00                	push   0x0
10002355:	52                   	push   edx
10002356:	e8 fc ff ff ff       	call   10002357 <x87Handler(regs*)+0x1756>	10002357: R_386_PC32	fpuGetReg(int)
1000235b:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002361:	52                   	push   edx
10002362:	b9 03 00 00 00       	mov    ecx,0x3
10002367:	89 e7                	mov    edi,esp
10002369:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000236b:	83 ec 0c             	sub    esp,0xc
1000236e:	b9 03 00 00 00       	mov    ecx,0x3
10002373:	89 e7                	mov    edi,esp
10002375:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
1000237b:	89 d6                	mov    esi,edx
1000237d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000237f:	50                   	push   eax
10002380:	e8 fc ff ff ff       	call   10002381 <x87Handler(regs*)+0x1780>	10002381: R_386_PC32	fpuDivide(_Float80, _Float80)
10002385:	83 c4 20             	add    esp,0x20
10002388:	b9 03 00 00 00       	mov    ecx,0x3
1000238d:	89 e7                	mov    edi,esp
1000238f:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002395:	89 c6                	mov    esi,eax
10002397:	eb 56                	jmp    100023ef <x87Handler(regs*)+0x17ee>
10002399:	8d 75 88             	lea    esi,[ebp-0x78]
1000239c:	57                   	push   edi
1000239d:	57                   	push   edi
1000239e:	6a 00                	push   0x0
100023a0:	56                   	push   esi
100023a1:	e8 fc ff ff ff       	call   100023a2 <x87Handler(regs*)+0x17a1>	100023a2: R_386_PC32	fpuGetReg(int)
100023a6:	8d 45 94             	lea    eax,[ebp-0x6c]
100023a9:	52                   	push   edx
100023aa:	52                   	push   edx
100023ab:	8b 95 e4 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x61c]
100023b1:	ff 72 04             	push   DWORD PTR [edx+0x4]
100023b4:	ff 32                	push   DWORD PTR [edx]
100023b6:	50                   	push   eax
100023b7:	e8 fc ff ff ff       	call   100023b8 <x87Handler(regs*)+0x17b7>	100023b8: R_386_PC32	fpu64ToInternal(unsigned long long)
100023bc:	8d 55 a0             	lea    edx,[ebp-0x60]
100023bf:	51                   	push   ecx
100023c0:	b9 03 00 00 00       	mov    ecx,0x3
100023c5:	89 e7                	mov    edi,esp
100023c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023c9:	83 ec 0c             	sub    esp,0xc
100023cc:	b9 03 00 00 00       	mov    ecx,0x3
100023d1:	89 e7                	mov    edi,esp
100023d3:	8d 45 94             	lea    eax,[ebp-0x6c]
100023d6:	89 c6                	mov    esi,eax
100023d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023da:	52                   	push   edx
100023db:	e8 fc ff ff ff       	call   100023dc <x87Handler(regs*)+0x17db>	100023dc: R_386_PC32	fpuDivide(_Float80, _Float80)
100023e0:	83 c4 20             	add    esp,0x20
100023e3:	b9 03 00 00 00       	mov    ecx,0x3
100023e8:	89 e7                	mov    edi,esp
100023ea:	8d 55 a0             	lea    edx,[ebp-0x60]
100023ed:	89 d6                	mov    esi,edx
100023ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023f1:	6a 00                	push   0x0
100023f3:	e8 fc ff ff ff       	call   100023f4 <x87Handler(regs*)+0x17f3>	100023f4: R_386_PC32	fpuSetReg(int, _Float80)
100023f8:	8b 85 dc f9 ff ff    	mov    eax,DWORD PTR [ebp-0x624]
100023fe:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002401:	e9 63 eb ff ff       	jmp    10000f69 <x87Handler(regs*)+0x368>
10002406:	31 c0                	xor    eax,eax
10002408:	80 fa 03             	cmp    dl,0x3
1000240b:	75 59                	jne    10002466 <x87Handler(regs*)+0x1865>
1000240d:	8d 75 c4             	lea    esi,[ebp-0x3c]
10002410:	83 ec 0c             	sub    esp,0xc
10002413:	56                   	push   esi
10002414:	e8 fc ff ff ff       	call   10002415 <x87Handler(regs*)+0x1814>	10002415: R_386_PC32	fpuPop()
10002419:	e9 4a ee ff ff       	jmp    10001268 <x87Handler(regs*)+0x667>
1000241e:	80 fa 05             	cmp    dl,0x5
10002421:	75 1a                	jne    1000243d <x87Handler(regs*)+0x183c>
10002423:	8d 75 d0             	lea    esi,[ebp-0x30]
10002426:	50                   	push   eax
10002427:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
1000242d:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002430:	ff 30                	push   DWORD PTR [eax]
10002432:	56                   	push   esi
10002433:	e8 fc ff ff ff       	call   10002434 <x87Handler(regs*)+0x1833>	10002434: R_386_PC32	fpuULongToFloat(unsigned long long)
10002438:	e9 02 ee ff ff       	jmp    1000123f <x87Handler(regs*)+0x63e>
1000243d:	31 c0                	xor    eax,eax
1000243f:	80 fa 07             	cmp    dl,0x7
10002442:	75 22                	jne    10002466 <x87Handler(regs*)+0x1865>
10002444:	8d 75 dc             	lea    esi,[ebp-0x24]
10002447:	83 ec 0c             	sub    esp,0xc
1000244a:	56                   	push   esi
1000244b:	e8 fc ff ff ff       	call   1000244c <x87Handler(regs*)+0x184b>	1000244c: R_386_PC32	fpuPop()
10002450:	83 ec 14             	sub    esp,0x14
10002453:	b9 03 00 00 00       	mov    ecx,0x3
10002458:	89 e7                	mov    edi,esp
1000245a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000245c:	e8 fc ff ff ff       	call   1000245d <x87Handler(regs*)+0x185c>	1000245d: R_386_PC32	fpuFloatToLong(_Float80)
10002461:	e9 13 ee ff ff       	jmp    10001279 <x87Handler(regs*)+0x678>
10002466:	8d 65 f4             	lea    esp,[ebp-0xc]
10002469:	5b                   	pop    ebx
1000246a:	5e                   	pop    esi
1000246b:	5f                   	pop    edi
1000246c:	5d                   	pop    ebp
1000246d:	c3                   	ret    

1000246e <begin()>:
1000246e:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002470: R_386_32	x87FaultIntercept
	10002474: R_386_32	x87Handler(regs*)
10002478:	c3                   	ret    
10002479:	46                   	inc    esi
1000247a:	6c                   	ins    BYTE PTR es:[edi],dx
1000247b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000247c:	61                   	popa   
1000247d:	74 2d                	je     100024ac <begin()+0x3e>
1000247f:	3e 49                	ds dec ecx
10002481:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002482:	74 3a                	je     100024be <begin()+0x50>
10002484:	20 30                	and    BYTE PTR [eax],dh
10002486:	78 25                	js     100024ad <begin()+0x3f>
10002488:	58                   	pop    eax
10002489:	30 30                	xor    BYTE PTR [eax],dh
1000248b:	30 30                	xor    BYTE PTR [eax],dh
1000248d:	30 30                	xor    BYTE PTR [eax],dh
1000248f:	30 30                	xor    BYTE PTR [eax],dh
10002491:	20 3e                	and    BYTE PTR [esi],bh
10002493:	3e 20 25 64 0a 00 65 	and    BYTE PTR ds:0x65000a64,ah
1000249a:	6d                   	ins    DWORD PTR es:[edi],dx
1000249b:	38 30                	cmp    BYTE PTR [eax],dh
1000249d:	38 37                	cmp    BYTE PTR [edi],dh
1000249f:	20 62 61             	and    BYTE PTR [edx+0x61],ah
100024a2:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100024a6:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
100024aa:	74 00                	je     100024ac <begin()+0x3e>
100024ac:	78 38                	js     100024e6 <begin()+0x78>
100024ae:	37                   	aaa    
100024af:	20 68 61             	and    BYTE PTR [eax+0x61],ch
100024b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024b3:	64 6c                	fs ins BYTE PTR es:[edi],dx
100024b5:	65 72 20             	gs jb  100024d8 <begin()+0x6a>
100024b8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100024bb:	6c                   	ins    BYTE PTR es:[edi],dx
100024bc:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
100024c1:	74 68                	je     1000252b <begin()+0xbd>
100024c3:	20 66 61             	and    BYTE PTR [esi+0x61],ah
100024c6:	75 6c                	jne    10002534 <begin()+0xc6>
100024c8:	74 69                	je     10002533 <begin()+0xc5>
100024ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024cb:	67 20 45 49          	and    BYTE PTR [di+0x49],al
100024cf:	50                   	push   eax
100024d0:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
100024d3:	20 30                	and    BYTE PTR [eax],dh
100024d5:	78 25                	js     100024fc <begin()+0x8e>
100024d7:	58                   	pop    eax
100024d8:	0a 00                	or     al,BYTE PTR [eax]
100024da:	78 38                	js     10002514 <begin()+0xa6>
100024dc:	37                   	aaa    
100024dd:	3a 20                	cmp    ah,BYTE PTR [eax]
100024df:	25 58 20 25 58       	and    eax,0x58252058
100024e4:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
100024ea:	0a 00                	or     al,BYTE PTR [eax]
100024ec:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
100024f1:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
100024f6:	64 72 65             	fs jb  1000255e <_GLOBAL__sub_I__Z5startv+0x1e>
100024f9:	73 73                	jae    1000256e <_GLOBAL__sub_I__Z5startv+0x2e>
100024fb:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10002501:	58                   	pop    eax
10002502:	0a 00                	or     al,BYTE PTR [eax]
10002504:	e3 0e                	jecxz  10002514 <begin()+0xa6>	10002504: R_386_32	.text
10002506:	00 10                	add    BYTE PTR [eax],dl
10002508:	13 0f                	adc    ecx,DWORD PTR [edi]	10002508: R_386_32	.text
1000250a:	00 10                	add    BYTE PTR [eax],dl
1000250c:	d3 10                	rcl    DWORD PTR [eax],cl	1000250c: R_386_32	.text
1000250e:	00 10                	add    BYTE PTR [eax],dl
10002510:	d3 10                	rcl    DWORD PTR [eax],cl	10002510: R_386_32	.text
10002512:	00 10                	add    BYTE PTR [eax],dl
10002514:	d3 10                	rcl    DWORD PTR [eax],cl	10002514: R_386_32	.text
10002516:	00 10                	add    BYTE PTR [eax],dl
10002518:	d3 10                	rcl    DWORD PTR [eax],cl	10002518: R_386_32	.text
1000251a:	00 10                	add    BYTE PTR [eax],dl
1000251c:	d3 10                	rcl    DWORD PTR [eax],cl	1000251c: R_386_32	.text
1000251e:	00 10                	add    BYTE PTR [eax],dl
10002520:	d3 10                	rcl    DWORD PTR [eax],cl	10002520: R_386_32	.text
10002522:	00 10                	add    BYTE PTR [eax],dl
10002524:	73 0f                	jae    10002535 <begin()+0xc7>	10002524: R_386_32	.text
10002526:	00 10                	add    BYTE PTR [eax],dl
10002528:	a2 0f 00 10 df       	mov    ds:0xdf10000f,al	10002528: R_386_32	.text
	1000252c: R_386_32	.text
1000252d:	0f 00 10             	lldt   WORD PTR [eax]
10002530:	0e                   	push   cs	10002530: R_386_32	.text
10002531:	10 00                	adc    BYTE PTR [eax],al
10002533:	10 3d 10 00 10 6f    	adc    BYTE PTR ds:0x6f100010,bh	10002534: R_386_32	.text
	10002538: R_386_32	.text
10002539:	10 00                	adc    BYTE PTR [eax],al
1000253b:	10                   	.byte 0x10
1000253c:	a1                   	.byte 0xa1	1000253c: R_386_32	.text
1000253d:	10 00                	adc    BYTE PTR [eax],al
1000253f:	10                   	.byte 0x10

Disassembly of section .text.startup:

10002540 <_GLOBAL__sub_I__Z5startv>:
10002540:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10002542: R_386_32	fpuState
1000254a:	c3                   	ret    
