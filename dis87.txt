
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000014:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001a:	31 f6                	xor    esi,esi
1000001c:	31 ff                	xor    edi,edi
1000001e:	66 83 f9 3e          	cmp    cx,0x3e
10000022:	77 2c                	ja     10000050 <fpuFloatToLong(_Float80)+0x45>
10000024:	b9 3d 40 00 00       	mov    ecx,0x403d
10000029:	29 d9                	sub    ecx,ebx
1000002b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000002e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000031:	0f ad d0             	shrd   eax,edx,cl
10000034:	d3 ea                	shr    edx,cl
10000036:	f6 c1 20             	test   cl,0x20
10000039:	74 04                	je     1000003f <fpuFloatToLong(_Float80)+0x34>
1000003b:	89 d0                	mov    eax,edx
1000003d:	31 d2                	xor    edx,edx
1000003f:	89 c6                	mov    esi,eax
10000041:	89 d7                	mov    edi,edx
10000043:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000047:	74 07                	je     10000050 <fpuFloatToLong(_Float80)+0x45>
10000049:	f7 de                	neg    esi
1000004b:	83 d7 00             	adc    edi,0x0
1000004e:	f7 df                	neg    edi
10000050:	89 f0                	mov    eax,esi
10000052:	89 fa                	mov    edx,edi
10000054:	5b                   	pop    ebx
10000055:	5e                   	pop    esi
10000056:	5f                   	pop    edi
10000057:	5d                   	pop    ebp
10000058:	c3                   	ret    

10000059 <fpuULongToFloat(unsigned long long)>:
10000059:	55                   	push   ebp
1000005a:	89 e5                	mov    ebp,esp
1000005c:	56                   	push   esi
1000005d:	53                   	push   ebx
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000064:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000067:	89 de                	mov    esi,ebx
10000069:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000006d:	09 ce                	or     esi,ecx
1000006f:	75 15                	jne    10000086 <fpuULongToFloat(unsigned long long)+0x2d>
10000071:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000007d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000084:	eb 31                	jmp    100000b7 <fpuULongToFloat(unsigned long long)+0x5e>
10000086:	31 d2                	xor    edx,edx
10000088:	89 de                	mov    esi,ebx
1000008a:	c1 ee 1e             	shr    esi,0x1e
1000008d:	74 09                	je     10000098 <fpuULongToFloat(unsigned long long)+0x3f>
1000008f:	42                   	inc    edx
10000090:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000094:	d1 eb                	shr    ebx,1
10000096:	eb f0                	jmp    10000088 <fpuULongToFloat(unsigned long long)+0x2f>
10000098:	31 f6                	xor    esi,esi
1000009a:	0f ba e3 1d          	bt     ebx,0x1d
1000009e:	72 07                	jb     100000a7 <fpuULongToFloat(unsigned long long)+0x4e>
100000a0:	01 c9                	add    ecx,ecx
100000a2:	11 db                	adc    ebx,ebx
100000a4:	46                   	inc    esi
100000a5:	eb f3                	jmp    1000009a <fpuULongToFloat(unsigned long long)+0x41>
100000a7:	89 08                	mov    DWORD PTR [eax],ecx
100000a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000ac:	66 81 c2 3d 40       	add    dx,0x403d
100000b1:	29 f2                	sub    edx,esi
100000b3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000b7:	5b                   	pop    ebx
100000b8:	5e                   	pop    esi
100000b9:	5d                   	pop    ebp
100000ba:	c2 04 00             	ret    0x4

100000bd <fpuLongToFloat(long long)>:
100000bd:	55                   	push   ebp
100000be:	89 e5                	mov    ebp,esp
100000c0:	56                   	push   esi
100000c1:	53                   	push   ebx
100000c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000c8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000cb:	89 de                	mov    esi,ebx
100000cd:	09 ce                	or     esi,ecx
100000cf:	75 19                	jne    100000ea <fpuLongToFloat(long long)+0x2d>
100000d1:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000d5:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000e8:	eb 43                	jmp    1000012d <fpuLongToFloat(long long)+0x70>
100000ea:	31 d2                	xor    edx,edx
100000ec:	85 db                	test   ebx,ebx
100000ee:	79 09                	jns    100000f9 <fpuLongToFloat(long long)+0x3c>
100000f0:	f7 d9                	neg    ecx
100000f2:	83 d3 00             	adc    ebx,0x0
100000f5:	f7 db                	neg    ebx
100000f7:	b2 01                	mov    dl,0x1
100000f9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
100000fc:	31 d2                	xor    edx,edx
100000fe:	89 de                	mov    esi,ebx
10000100:	c1 ee 1e             	shr    esi,0x1e
10000103:	74 09                	je     1000010e <fpuLongToFloat(long long)+0x51>
10000105:	42                   	inc    edx
10000106:	0f ac d9 01          	shrd   ecx,ebx,0x1
1000010a:	d1 eb                	shr    ebx,1
1000010c:	eb f0                	jmp    100000fe <fpuLongToFloat(long long)+0x41>
1000010e:	31 f6                	xor    esi,esi
10000110:	0f ba e3 1d          	bt     ebx,0x1d
10000114:	72 07                	jb     1000011d <fpuLongToFloat(long long)+0x60>
10000116:	01 c9                	add    ecx,ecx
10000118:	11 db                	adc    ebx,ebx
1000011a:	46                   	inc    esi
1000011b:	eb f3                	jmp    10000110 <fpuLongToFloat(long long)+0x53>
1000011d:	89 08                	mov    DWORD PTR [eax],ecx
1000011f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10000122:	66 81 c2 3d 40       	add    dx,0x403d
10000127:	29 f2                	sub    edx,esi
10000129:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
1000012d:	5b                   	pop    ebx
1000012e:	5e                   	pop    esi
1000012f:	5d                   	pop    ebp
10000130:	c2 04 00             	ret    0x4

10000133 <fpuGet0()>:
10000133:	55                   	push   ebp
10000134:	89 e5                	mov    ebp,esp
10000136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000139:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000013d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000143:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000014a:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000150:	5d                   	pop    ebp
10000151:	c2 04 00             	ret    0x4

10000154 <fpuGet1()>:
10000154:	55                   	push   ebp
10000155:	89 e5                	mov    ebp,esp
10000157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000015a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000015e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000164:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
1000016b:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
10000171:	5d                   	pop    ebp
10000172:	c2 04 00             	ret    0x4

10000175 <fpuGetPi()>:
10000175:	55                   	push   ebp
10000176:	89 e5                	mov    ebp,esp
10000178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000017f:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
10000185:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
1000018c:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
10000192:	5d                   	pop    ebp
10000193:	c2 04 00             	ret    0x4

10000196 <fpuGetLog2E()>:
10000196:	55                   	push   ebp
10000197:	89 e5                	mov    ebp,esp
10000199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019c:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a0:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001a6:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001ad:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001b3:	5d                   	pop    ebp
100001b4:	c2 04 00             	ret    0x4

100001b7 <fpuGetLogE2()>:
100001b7:	55                   	push   ebp
100001b8:	89 e5                	mov    ebp,esp
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c1:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001c7:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001ce:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001d4:	5d                   	pop    ebp
100001d5:	c2 04 00             	ret    0x4

100001d8 <fpuGetLog210()>:
100001d8:	55                   	push   ebp
100001d9:	89 e5                	mov    ebp,esp
100001db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001de:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001e2:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
100001e8:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
100001ef:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001f5:	5d                   	pop    ebp
100001f6:	c2 04 00             	ret    0x4

100001f9 <fpuGetLog102()>:
100001f9:	55                   	push   ebp
100001fa:	89 e5                	mov    ebp,esp
100001fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ff:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000203:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000209:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000210:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
10000216:	5d                   	pop    ebp
10000217:	c2 04 00             	ret    0x4

1000021a <fpuIsSecondLarger(_Float80, _Float80)>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	b0 01                	mov    al,0x1
1000021f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000222:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
10000226:	77 13                	ja     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000228:	b0 00                	mov    al,0x0
1000022a:	72 0f                	jb     1000023b <fpuIsSecondLarger(_Float80, _Float80)+0x21>
1000022c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000022f:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
10000232:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000235:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000238:	0f 92 c0             	setb   al
1000023b:	5d                   	pop    ebp
1000023c:	c3                   	ret    

1000023d <fpuAreEqual(_Float80, _Float80)>:
1000023d:	55                   	push   ebp
1000023e:	89 e5                	mov    ebp,esp
10000240:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000243:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000249:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
1000024c:	81 e2 ff ff ff 00    	and    edx,0xffffff
10000252:	31 c0                	xor    eax,eax
10000254:	39 d1                	cmp    ecx,edx
10000256:	75 11                	jne    10000269 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000025b:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
1000025e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000261:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
10000264:	09 c2                	or     edx,eax
10000266:	0f 94 c0             	sete   al
10000269:	5d                   	pop    ebp
1000026a:	c3                   	ret    

1000026b <fpuUnorderedCompare(_Float80, _Float80)>:
1000026b:	55                   	push   ebp
1000026c:	89 e5                	mov    ebp,esp
1000026e:	57                   	push   edi
1000026f:	56                   	push   esi
10000270:	53                   	push   ebx
10000271:	83 ec 44             	sub    esp,0x44
10000274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000277:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000027a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000280:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
10000284:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
10000287:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
1000028a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
1000028d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
10000290:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
10000294:	8d 7d c0             	lea    edi,[ebp-0x40]
10000297:	b9 03 00 00 00       	mov    ecx,0x3
1000029c:	8d 75 08             	lea    esi,[ebp+0x8]
1000029f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002a1:	8d 7d cc             	lea    edi,[ebp-0x34]
100002a4:	8d 75 14             	lea    esi,[ebp+0x14]
100002a7:	b9 03 00 00 00       	mov    ecx,0x3
100002ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ae:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002b1:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002b4:	89 c2                	mov    edx,eax
100002b6:	31 da                	xor    edx,ebx
100002b8:	09 d1                	or     ecx,edx
100002ba:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002be:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002ca:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002d0:	39 d1                	cmp    ecx,edx
100002d2:	75 08                	jne    100002dc <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002d4:	31 d2                	xor    edx,edx
100002d6:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
100002da:	75 1c                	jne    100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002dc:	b2 01                	mov    dl,0x1
100002de:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
100002e2:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
100002e6:	72 10                	jb     100002f8 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
100002e8:	0f 94 c1             	sete   cl
100002eb:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
100002ee:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
100002f1:	19 d8                	sbb    eax,ebx
100002f3:	0f 92 c2             	setb   dl
100002f6:	21 ca                	and    edx,ecx
100002f8:	a0 01 00 00 00       	mov    al,ds:0x1	100002f9: R_386_32	fpuState
100002fd:	83 e0 ba             	and    eax,0xffffffba
10000300:	8d 7d d8             	lea    edi,[ebp-0x28]
10000303:	b9 03 00 00 00       	mov    ecx,0x3
10000308:	8d 75 08             	lea    esi,[ebp+0x8]
1000030b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000030d:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000310:	b9 03 00 00 00       	mov    ecx,0x3
10000315:	8d 75 14             	lea    esi,[ebp+0x14]
10000318:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000031a:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
1000031d:	81 e3 ff ff ff 00    	and    ebx,0xffffff
10000323:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10000326:	81 e1 ff ff ff 00    	and    ecx,0xffffff
1000032c:	39 cb                	cmp    ebx,ecx
1000032e:	0f 94 c1             	sete   cl
10000331:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
10000334:	c1 e1 06             	shl    ecx,0x6
10000337:	09 d0                	or     eax,edx
10000339:	09 c8                	or     eax,ecx
1000033b:	a2 01 00 00 00       	mov    ds:0x1,al	1000033c: R_386_32	fpuState
10000340:	83 c4 44             	add    esp,0x44
10000343:	5b                   	pop    ebx
10000344:	5e                   	pop    esi
10000345:	5f                   	pop    edi
10000346:	5d                   	pop    ebp
10000347:	c3                   	ret    

10000348 <fpuNormalise(_Float80)>:
10000348:	55                   	push   ebp
10000349:	89 e5                	mov    ebp,esp
1000034b:	57                   	push   edi
1000034c:	56                   	push   esi
1000034d:	53                   	push   ebx
1000034e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000351:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10000354:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000357:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000035a:	8d 72 01             	lea    esi,[edx+0x1]
1000035d:	89 df                	mov    edi,ebx
1000035f:	c1 ef 1e             	shr    edi,0x1e
10000362:	74 0e                	je     10000372 <fpuNormalise(_Float80)+0x2a>
10000364:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000368:	d1 eb                	shr    ebx,1
1000036a:	89 f2                	mov    edx,esi
1000036c:	eb ec                	jmp    1000035a <fpuNormalise(_Float80)+0x12>
1000036e:	01 c9                	add    ecx,ecx
10000370:	11 db                	adc    ebx,ebx
10000372:	0f ba e3 1d          	bt     ebx,0x1d
10000376:	72 1d                	jb     10000395 <fpuNormalise(_Float80)+0x4d>
10000378:	4a                   	dec    edx
10000379:	89 de                	mov    esi,ebx
1000037b:	09 ce                	or     esi,ecx
1000037d:	75 ef                	jne    1000036e <fpuNormalise(_Float80)+0x26>
1000037f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
10000386:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
1000038d:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
10000393:	eb 0a                	jmp    1000039f <fpuNormalise(_Float80)+0x57>
10000395:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
10000398:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
1000039b:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
1000039f:	8d 75 0c             	lea    esi,[ebp+0xc]
100003a2:	b9 03 00 00 00       	mov    ecx,0x3
100003a7:	89 c7                	mov    edi,eax
100003a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003ab:	5b                   	pop    ebx
100003ac:	5e                   	pop    esi
100003ad:	5f                   	pop    edi
100003ae:	5d                   	pop    ebp
100003af:	c2 04 00             	ret    0x4

100003b2 <fpuAdd(_Float80, _Float80)>:
100003b2:	55                   	push   ebp
100003b3:	89 e5                	mov    ebp,esp
100003b5:	57                   	push   edi
100003b6:	56                   	push   esi
100003b7:	53                   	push   ebx
100003b8:	83 ec 2c             	sub    esp,0x2c
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003c1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003c4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003ca:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003ce:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003d1:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003d4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100003d7:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100003da:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100003dd:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
100003e0:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003e4:	66 39 c8             	cmp    ax,cx
100003e7:	72 2d                	jb     10000416 <fpuAdd(_Float80, _Float80)+0x64>
100003e9:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
100003ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100003ef:	19 f8                	sbb    eax,edi
100003f1:	73 09                	jae    100003fc <fpuAdd(_Float80, _Float80)+0x4a>
100003f3:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
100003f7:	66 39 c8             	cmp    ax,cx
100003fa:	74 24                	je     10000420 <fpuAdd(_Float80, _Float80)+0x6e>
100003fc:	88 d8                	mov    al,bl
100003fe:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
10000401:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
10000404:	89 f0                	mov    eax,esi
10000406:	89 fa                	mov    edx,edi
10000408:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
1000040b:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
1000040e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000411:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000414:	eb 0a                	jmp    10000420 <fpuAdd(_Float80, _Float80)+0x6e>
10000416:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000041a:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
1000041e:	89 c1                	mov    ecx,eax
10000420:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
10000423:	29 c8                	sub    eax,ecx
10000425:	88 c1                	mov    cl,al
10000427:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000042a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
1000042d:	0f ad d0             	shrd   eax,edx,cl
10000430:	d3 ea                	shr    edx,cl
10000432:	f6 c1 20             	test   cl,0x20
10000435:	74 04                	je     1000043b <fpuAdd(_Float80, _Float80)+0x89>
10000437:	89 d0                	mov    eax,edx
10000439:	31 d2                	xor    edx,edx
1000043b:	89 d1                	mov    ecx,edx
1000043d:	89 c2                	mov    edx,eax
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000447:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
1000044a:	75 13                	jne    1000045f <fpuAdd(_Float80, _Float80)+0xad>
1000044c:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
1000044f:	89 d0                	mov    eax,edx
10000451:	89 ca                	mov    edx,ecx
10000453:	01 f0                	add    eax,esi
10000455:	11 fa                	adc    edx,edi
10000457:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000045a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000045d:	eb 58                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000045f:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
10000463:	74 24                	je     10000489 <fpuAdd(_Float80, _Float80)+0xd7>
10000465:	39 d6                	cmp    esi,edx
10000467:	89 f8                	mov    eax,edi
10000469:	19 c8                	sbb    eax,ecx
1000046b:	89 d0                	mov    eax,edx
1000046d:	89 ca                	mov    edx,ecx
1000046f:	73 0c                	jae    1000047d <fpuAdd(_Float80, _Float80)+0xcb>
10000471:	29 f0                	sub    eax,esi
10000473:	19 fa                	sbb    edx,edi
10000475:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000478:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000047b:	eb 26                	jmp    100004a3 <fpuAdd(_Float80, _Float80)+0xf1>
1000047d:	29 c6                	sub    esi,eax
1000047f:	19 cf                	sbb    edi,ecx
10000481:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000484:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
10000487:	eb 2a                	jmp    100004b3 <fpuAdd(_Float80, _Float80)+0x101>
10000489:	84 db                	test   bl,bl
1000048b:	74 2a                	je     100004b7 <fpuAdd(_Float80, _Float80)+0x105>
1000048d:	39 f2                	cmp    edx,esi
1000048f:	89 c8                	mov    eax,ecx
10000491:	19 f8                	sbb    eax,edi
10000493:	89 d0                	mov    eax,edx
10000495:	89 ca                	mov    edx,ecx
10000497:	73 10                	jae    100004a9 <fpuAdd(_Float80, _Float80)+0xf7>
10000499:	29 c6                	sub    esi,eax
1000049b:	19 cf                	sbb    edi,ecx
1000049d:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004a0:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004a3:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004a7:	eb 0e                	jmp    100004b7 <fpuAdd(_Float80, _Float80)+0x105>
100004a9:	29 f0                	sub    eax,esi
100004ab:	19 fa                	sbb    edx,edi
100004ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004b0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004b3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004b7:	83 ec 0c             	sub    esp,0xc
100004ba:	8d 75 dc             	lea    esi,[ebp-0x24]
100004bd:	b9 03 00 00 00       	mov    ecx,0x3
100004c2:	89 e7                	mov    edi,esp
100004c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004c9:	e8 fc ff ff ff       	call   100004ca <fpuAdd(_Float80, _Float80)+0x118>	100004ca: R_386_PC32	fpuNormalise(_Float80)
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004d4:	5b                   	pop    ebx
100004d5:	5e                   	pop    esi
100004d6:	5f                   	pop    edi
100004d7:	5d                   	pop    ebp
100004d8:	c2 04 00             	ret    0x4

100004db <fpuAbs(_Float80)>:
100004db:	55                   	push   ebp
100004dc:	89 e5                	mov    ebp,esp
100004de:	57                   	push   edi
100004df:	56                   	push   esi
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
100004e7:	8d 75 0c             	lea    esi,[ebp+0xc]
100004ea:	b9 03 00 00 00       	mov    ecx,0x3
100004ef:	89 c7                	mov    edi,eax
100004f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004f3:	5e                   	pop    esi
100004f4:	5f                   	pop    edi
100004f5:	5d                   	pop    ebp
100004f6:	c2 04 00             	ret    0x4

100004f9 <fpuChs(_Float80)>:
100004f9:	55                   	push   ebp
100004fa:	89 e5                	mov    ebp,esp
100004fc:	57                   	push   edi
100004fd:	56                   	push   esi
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
10000505:	8d 75 0c             	lea    esi,[ebp+0xc]
10000508:	b9 03 00 00 00       	mov    ecx,0x3
1000050d:	89 c7                	mov    edi,eax
1000050f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000511:	5e                   	pop    esi
10000512:	5f                   	pop    edi
10000513:	5d                   	pop    ebp
10000514:	c2 04 00             	ret    0x4

10000517 <fpuSub(_Float80, _Float80)>:
10000517:	55                   	push   ebp
10000518:	89 e5                	mov    ebp,esp
1000051a:	57                   	push   edi
1000051b:	56                   	push   esi
1000051c:	53                   	push   ebx
1000051d:	83 ec 1c             	sub    esp,0x1c
10000520:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000523:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000527:	8d 75 18             	lea    esi,[ebp+0x18]
1000052a:	b9 03 00 00 00       	mov    ecx,0x3
1000052f:	89 e7                	mov    edi,esp
10000531:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000533:	83 ec 0c             	sub    esp,0xc
10000536:	8d 75 0c             	lea    esi,[ebp+0xc]
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	89 e7                	mov    edi,esp
10000540:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000542:	53                   	push   ebx
10000543:	e8 fc ff ff ff       	call   10000544 <fpuSub(_Float80, _Float80)+0x2d>	10000544: R_386_PC32	fpuAdd(_Float80, _Float80)
10000548:	89 d8                	mov    eax,ebx
1000054a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000054d:	5b                   	pop    ebx
1000054e:	5e                   	pop    esi
1000054f:	5f                   	pop    edi
10000550:	5d                   	pop    ebp
10000551:	c2 04 00             	ret    0x4

10000554 <fpuReverseSub(_Float80, _Float80)>:
10000554:	55                   	push   ebp
10000555:	89 e5                	mov    ebp,esp
10000557:	57                   	push   edi
10000558:	56                   	push   esi
10000559:	53                   	push   ebx
1000055a:	83 ec 1c             	sub    esp,0x1c
1000055d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000560:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000564:	8d 75 0c             	lea    esi,[ebp+0xc]
10000567:	b9 03 00 00 00       	mov    ecx,0x3
1000056c:	89 e7                	mov    edi,esp
1000056e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000570:	83 ec 0c             	sub    esp,0xc
10000573:	8d 75 18             	lea    esi,[ebp+0x18]
10000576:	b9 03 00 00 00       	mov    ecx,0x3
1000057b:	89 e7                	mov    edi,esp
1000057d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000057f:	53                   	push   ebx
10000580:	e8 fc ff ff ff       	call   10000581 <fpuReverseSub(_Float80, _Float80)+0x2d>	10000581: R_386_PC32	fpuAdd(_Float80, _Float80)
10000585:	89 d8                	mov    eax,ebx
10000587:	8d 65 f4             	lea    esp,[ebp-0xc]
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	5d                   	pop    ebp
1000058e:	c2 04 00             	ret    0x4

10000591 <fpuMultiply(_Float80, _Float80)>:
10000591:	55                   	push   ebp
10000592:	89 e5                	mov    ebp,esp
10000594:	57                   	push   edi
10000595:	56                   	push   esi
10000596:	53                   	push   ebx
10000597:	83 ec 38             	sub    esp,0x38
1000059a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000059d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a3:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005a7:	c1 ea 1f             	shr    edx,0x1f
100005aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005ad:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005b0:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005b3:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005b6:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005ba:	c1 ef 1f             	shr    edi,0x1f
100005bd:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005c0:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005c3:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005c6:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005c9:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005cc:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005d1:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005d5:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100005d8:	0f af ce             	imul   ecx,esi
100005db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
100005de:	0f af d7             	imul   edx,edi
100005e1:	01 d1                	add    ecx,edx
100005e3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100005e6:	f7 e6                	mul    esi
100005e8:	01 ca                	add    edx,ecx
100005ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100005ed:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100005f0:	8d 75 dc             	lea    esi,[ebp-0x24]
100005f3:	b9 03 00 00 00       	mov    ecx,0x3
100005f8:	89 e7                	mov    edi,esp
100005fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005fc:	53                   	push   ebx
100005fd:	e8 fc ff ff ff       	call   100005fe <fpuMultiply(_Float80, _Float80)+0x6d>	100005fe: R_386_PC32	fpuNormalise(_Float80)
10000602:	89 d8                	mov    eax,ebx
10000604:	8d 65 f4             	lea    esp,[ebp-0xc]
10000607:	5b                   	pop    ebx
10000608:	5e                   	pop    esi
10000609:	5f                   	pop    edi
1000060a:	5d                   	pop    ebp
1000060b:	c2 04 00             	ret    0x4

1000060e <fpuMantissaDivision(unsigned long long, unsigned long long)>:
1000060e:	55                   	push   ebp
1000060f:	89 e5                	mov    ebp,esp
10000611:	57                   	push   edi
10000612:	56                   	push   esi
10000613:	53                   	push   ebx
10000614:	83 ec 24             	sub    esp,0x24
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000061d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000620:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
10000623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000626:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000629:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000062c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000062f:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
10000636:	83 c8 ff             	or     eax,0xffffffff
10000639:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000640:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000647:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000064e:	31 d2                	xor    edx,edx
10000650:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
10000653:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000656:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000659:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
1000065c:	83 f8 ff             	cmp    eax,0xffffffff
1000065f:	75 22                	jne    10000683 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
10000661:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000664:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000667:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
1000066a:	0f ad f3             	shrd   ebx,esi,cl
1000066d:	d3 ee                	shr    esi,cl
1000066f:	f6 c1 20             	test   cl,0x20
10000672:	74 04                	je     10000678 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000674:	89 f3                	mov    ebx,esi
10000676:	31 f6                	xor    esi,esi
10000678:	89 d9                	mov    ecx,ebx
1000067a:	83 e1 01             	and    ecx,0x1
1000067d:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
10000680:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
10000683:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000686:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000689:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000068c:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000068f:	72 38                	jb     100006c9 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
10000691:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000694:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000697:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
1000069a:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
1000069d:	83 f8 ff             	cmp    eax,0xffffffff
100006a0:	75 0d                	jne    100006af <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006a2:	81 ca 00 00 00 20    	or     edx,0x20000000
100006a8:	b8 3d 00 00 00       	mov    eax,0x3d
100006ad:	eb 1f                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006af:	88 c1                	mov    cl,al
100006b1:	89 ce                	mov    esi,ecx
100006b3:	c1 ee 05             	shr    esi,0x5
100006b6:	83 e6 01             	and    esi,0x1
100006b9:	89 f3                	mov    ebx,esi
100006bb:	83 f3 01             	xor    ebx,0x1
100006be:	d3 e3                	shl    ebx,cl
100006c0:	d3 e6                	shl    esi,cl
100006c2:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006c5:	09 f2                	or     edx,esi
100006c7:	eb 05                	jmp    100006ce <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006c9:	83 f8 ff             	cmp    eax,0xffffffff
100006cc:	74 01                	je     100006cf <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006ce:	48                   	dec    eax
100006cf:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006d2:	85 c0                	test   eax,eax
100006d4:	0f 85 76 ff ff ff    	jne    10000650 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
100006da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100006dd:	83 c4 24             	add    esp,0x24
100006e0:	5b                   	pop    ebx
100006e1:	5e                   	pop    esi
100006e2:	5f                   	pop    edi
100006e3:	5d                   	pop    ebp
100006e4:	c3                   	ret    

100006e5 <fpuDivide(_Float80, _Float80)>:
100006e5:	55                   	push   ebp
100006e6:	89 e5                	mov    ebp,esp
100006e8:	57                   	push   edi
100006e9:	56                   	push   esi
100006ea:	53                   	push   ebx
100006eb:	83 ec 1c             	sub    esp,0x1c
100006ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100006f1:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100006f4:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
100006f7:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
100006fa:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
100006fd:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000700:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000706:	e8 fc ff ff ff       	call   10000707 <fpuDivide(_Float80, _Float80)+0x22>	10000707: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
1000070b:	59                   	pop    ecx
1000070c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000070f:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000715:	66 05 00 40          	add    ax,0x4000
10000719:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
1000071c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000720:	8d 75 dc             	lea    esi,[ebp-0x24]
10000723:	b9 03 00 00 00       	mov    ecx,0x3
10000728:	89 e7                	mov    edi,esp
1000072a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000072c:	53                   	push   ebx
1000072d:	e8 fc ff ff ff       	call   1000072e <fpuDivide(_Float80, _Float80)+0x49>	1000072e: R_386_PC32	fpuNormalise(_Float80)
10000732:	89 d8                	mov    eax,ebx
10000734:	8d 65 f4             	lea    esp,[ebp-0xc]
10000737:	5b                   	pop    ebx
10000738:	5e                   	pop    esi
10000739:	5f                   	pop    edi
1000073a:	5d                   	pop    ebp
1000073b:	c2 04 00             	ret    0x4

1000073e <fpuReciprocal(_Float80)>:
1000073e:	55                   	push   ebp
1000073f:	89 e5                	mov    ebp,esp
10000741:	57                   	push   edi
10000742:	56                   	push   esi
10000743:	53                   	push   ebx
10000744:	83 ec 2c             	sub    esp,0x2c
10000747:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000074a:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000074e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000755:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000075c:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000762:	8d 75 0c             	lea    esi,[ebp+0xc]
10000765:	b9 03 00 00 00       	mov    ecx,0x3
1000076a:	89 e7                	mov    edi,esp
1000076c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000076e:	83 ec 0c             	sub    esp,0xc
10000771:	8d 75 dc             	lea    esi,[ebp-0x24]
10000774:	b9 03 00 00 00       	mov    ecx,0x3
10000779:	89 e7                	mov    edi,esp
1000077b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000077d:	53                   	push   ebx
1000077e:	e8 fc ff ff ff       	call   1000077f <fpuReciprocal(_Float80)+0x41>	1000077f: R_386_PC32	fpuDivide(_Float80, _Float80)
10000783:	89 d8                	mov    eax,ebx
10000785:	8d 65 f4             	lea    esp,[ebp-0xc]
10000788:	5b                   	pop    ebx
10000789:	5e                   	pop    esi
1000078a:	5f                   	pop    edi
1000078b:	5d                   	pop    ebp
1000078c:	c2 04 00             	ret    0x4

1000078f <fpuSquare(_Float80)>:
1000078f:	55                   	push   ebp
10000790:	89 e5                	mov    ebp,esp
10000792:	57                   	push   edi
10000793:	56                   	push   esi
10000794:	53                   	push   ebx
10000795:	83 ec 1c             	sub    esp,0x1c
10000798:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000079b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000079e:	b9 03 00 00 00       	mov    ecx,0x3
100007a3:	89 e7                	mov    edi,esp
100007a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a7:	83 ec 0c             	sub    esp,0xc
100007aa:	8d 75 0c             	lea    esi,[ebp+0xc]
100007ad:	b9 03 00 00 00       	mov    ecx,0x3
100007b2:	89 e7                	mov    edi,esp
100007b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007b6:	53                   	push   ebx
100007b7:	e8 fc ff ff ff       	call   100007b8 <fpuSquare(_Float80)+0x29>	100007b8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007bc:	89 d8                	mov    eax,ebx
100007be:	8d 65 f4             	lea    esp,[ebp-0xc]
100007c1:	5b                   	pop    ebx
100007c2:	5e                   	pop    esi
100007c3:	5f                   	pop    edi
100007c4:	5d                   	pop    ebp
100007c5:	c2 04 00             	ret    0x4

100007c8 <fpuInverseSqrt(_Float80)>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	57                   	push   edi
100007cc:	56                   	push   esi
100007cd:	53                   	push   ebx
100007ce:	83 ec 5c             	sub    esp,0x5c
100007d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007d4:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
100007d8:	31 d2                	xor    edx,edx
100007da:	b9 03 00 00 00       	mov    ecx,0x3
100007df:	31 db                	xor    ebx,ebx
100007e1:	01 c9                	add    ecx,ecx
100007e3:	11 db                	adc    ebx,ebx
100007e5:	42                   	inc    edx
100007e6:	83 fa 3c             	cmp    edx,0x3c
100007e9:	75 f6                	jne    100007e1 <fpuInverseSqrt(_Float80)+0x19>
100007eb:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
100007ee:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
100007f1:	8d 75 0c             	lea    esi,[ebp+0xc]
100007f4:	b9 03 00 00 00       	mov    ecx,0x3
100007f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100007fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007fe:	0f b7 d0             	movzx  edx,ax
10000801:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000807:	d1 fa                	sar    edx,1
10000809:	b9 ff 3f 00 00       	mov    ecx,0x3fff
1000080e:	29 d1                	sub    ecx,edx
10000810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000813:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000817:	48                   	dec    eax
10000818:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
1000081c:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
10000823:	8d 5d c4             	lea    ebx,[ebp-0x3c]
10000826:	83 ec 0c             	sub    esp,0xc
10000829:	b9 03 00 00 00       	mov    ecx,0x3
1000082e:	89 e7                	mov    edi,esp
10000830:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
10000833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000835:	53                   	push   ebx
10000836:	e8 fc ff ff ff       	call   10000837 <fpuInverseSqrt(_Float80)+0x6f>	10000837: R_386_PC32	fpuSquare(_Float80)
1000083b:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
1000083f:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
10000843:	8d 45 d0             	lea    eax,[ebp-0x30]
10000846:	83 ec 14             	sub    esp,0x14
10000849:	8d 75 0c             	lea    esi,[ebp+0xc]
1000084c:	b9 03 00 00 00       	mov    ecx,0x3
10000851:	89 e7                	mov    edi,esp
10000853:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000855:	83 ec 0c             	sub    esp,0xc
10000858:	b9 03 00 00 00       	mov    ecx,0x3
1000085d:	89 e7                	mov    edi,esp
1000085f:	89 de                	mov    esi,ebx
10000861:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000863:	50                   	push   eax
10000864:	e8 fc ff ff ff       	call   10000865 <fpuInverseSqrt(_Float80)+0x9d>	10000865: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000869:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
1000086f:	8d 55 dc             	lea    edx,[ebp-0x24]
10000872:	83 c4 1c             	add    esp,0x1c
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000087f:	89 c6                	mov    esi,eax
10000881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000883:	83 ec 0c             	sub    esp,0xc
10000886:	8d 75 b8             	lea    esi,[ebp-0x48]
10000889:	b9 03 00 00 00       	mov    ecx,0x3
1000088e:	89 e7                	mov    edi,esp
10000890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000892:	52                   	push   edx
10000893:	e8 fc ff ff ff       	call   10000894 <fpuInverseSqrt(_Float80)+0xcc>	10000894: R_386_PC32	fpuSub(_Float80, _Float80)
10000898:	8d 5d a8             	lea    ebx,[ebp-0x58]
1000089b:	50                   	push   eax
1000089c:	b9 03 00 00 00       	mov    ecx,0x3
100008a1:	89 e7                	mov    edi,esp
100008a3:	8d 55 dc             	lea    edx,[ebp-0x24]
100008a6:	89 d6                	mov    esi,edx
100008a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008aa:	83 ec 0c             	sub    esp,0xc
100008ad:	b9 03 00 00 00       	mov    ecx,0x3
100008b2:	89 e7                	mov    edi,esp
100008b4:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008b9:	53                   	push   ebx
100008ba:	e8 fc ff ff ff       	call   100008bb <fpuInverseSqrt(_Float80)+0xf3>	100008bb: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008bf:	b9 03 00 00 00       	mov    ecx,0x3
100008c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008c7:	89 de                	mov    esi,ebx
100008c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008cb:	83 c4 2c             	add    esp,0x2c
100008ce:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008d1:	0f 85 4c ff ff ff    	jne    10000823 <fpuInverseSqrt(_Float80)+0x5b>
100008d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008da:	8d 65 f4             	lea    esp,[ebp-0xc]
100008dd:	5b                   	pop    ebx
100008de:	5e                   	pop    esi
100008df:	5f                   	pop    edi
100008e0:	5d                   	pop    ebp
100008e1:	c2 04 00             	ret    0x4

100008e4 <fpuSqrt(_Float80)>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	57                   	push   edi
100008e8:	56                   	push   esi
100008e9:	53                   	push   ebx
100008ea:	83 ec 38             	sub    esp,0x38
100008ed:	8d 5d d0             	lea    ebx,[ebp-0x30]
100008f0:	8d 75 0c             	lea    esi,[ebp+0xc]
100008f3:	b9 03 00 00 00       	mov    ecx,0x3
100008f8:	89 e7                	mov    edi,esp
100008fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <fpuSqrt(_Float80)+0x1a>	100008fe: R_386_PC32	fpuInverseSqrt(_Float80)
10000902:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000906:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000090d:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000914:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000091a:	83 ec 14             	sub    esp,0x14
1000091d:	b9 03 00 00 00       	mov    ecx,0x3
10000922:	89 e7                	mov    edi,esp
10000924:	89 de                	mov    esi,ebx
10000926:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000928:	83 ec 0c             	sub    esp,0xc
1000092b:	8d 75 dc             	lea    esi,[ebp-0x24]
1000092e:	b9 03 00 00 00       	mov    ecx,0x3
10000933:	89 e7                	mov    edi,esp
10000935:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093a:	e8 fc ff ff ff       	call   1000093b <fpuSqrt(_Float80)+0x57>	1000093b: R_386_PC32	fpuDivide(_Float80, _Float80)
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8d 65 f4             	lea    esp,[ebp-0xc]
10000945:	5b                   	pop    ebx
10000946:	5e                   	pop    esi
10000947:	5f                   	pop    edi
10000948:	5d                   	pop    ebp
10000949:	c2 04 00             	ret    0x4

1000094c <fpuGetReg(int)>:
1000094c:	55                   	push   ebp
1000094d:	89 e5                	mov    ebp,esp
1000094f:	57                   	push   edi
10000950:	56                   	push   esi
10000951:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000954:	83 fe 07             	cmp    esi,0x7
10000957:	76 10                	jbe    10000969 <fpuGetReg(int)+0x1d>
10000959:	83 ec 0c             	sub    esp,0xc
1000095c:	68 4a 23 00 10       	push   0x1000234a	1000095d: R_386_32	.text
10000961:	e8 fc ff ff ff       	call   10000962 <fpuGetReg(int)+0x16>	10000962: R_386_PC32	Krnl::panic(char const*)
10000966:	83 c4 10             	add    esp,0x10
10000969:	a0 01 00 00 00       	mov    al,ds:0x1	1000096a: R_386_32	fpuState
1000096e:	c0 e8 03             	shr    al,0x3
10000971:	83 e0 07             	and    eax,0x7
10000974:	01 f0                	add    eax,esi
10000976:	b9 08 00 00 00       	mov    ecx,0x8
1000097b:	99                   	cdq    
1000097c:	f7 f9                	idiv   ecx
1000097e:	6b c2 0c             	imul   eax,edx,0xc
10000981:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	10000983: R_386_32	fpuState
10000987:	b9 03 00 00 00       	mov    ecx,0x3
1000098c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
1000098f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8d 65 f8             	lea    esp,[ebp-0x8]
10000997:	5e                   	pop    esi
10000998:	5f                   	pop    edi
10000999:	5d                   	pop    ebp
1000099a:	c2 04 00             	ret    0x4

1000099d <fpuSetReg(int, _Float80)>:
1000099d:	55                   	push   ebp
1000099e:	89 e5                	mov    ebp,esp
100009a0:	57                   	push   edi
100009a1:	56                   	push   esi
100009a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009a5:	83 ff 07             	cmp    edi,0x7
100009a8:	76 10                	jbe    100009ba <fpuSetReg(int, _Float80)+0x1d>
100009aa:	83 ec 0c             	sub    esp,0xc
100009ad:	68 4a 23 00 10       	push   0x1000234a	100009ae: R_386_32	.text
100009b2:	e8 fc ff ff ff       	call   100009b3 <fpuSetReg(int, _Float80)+0x16>	100009b3: R_386_PC32	Krnl::panic(char const*)
100009b7:	83 c4 10             	add    esp,0x10
100009ba:	a0 01 00 00 00       	mov    al,ds:0x1	100009bb: R_386_32	fpuState
100009bf:	c0 e8 03             	shr    al,0x3
100009c2:	83 e0 07             	and    eax,0x7
100009c5:	01 f8                	add    eax,edi
100009c7:	b9 08 00 00 00       	mov    ecx,0x8
100009cc:	99                   	cdq    
100009cd:	f7 f9                	idiv   ecx
100009cf:	6b c2 0c             	imul   eax,edx,0xc
100009d2:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009d4: R_386_32	fpuState
100009d8:	8d 75 0c             	lea    esi,[ebp+0xc]
100009db:	b9 03 00 00 00       	mov    ecx,0x3
100009e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009e2:	8d 65 f8             	lea    esp,[ebp-0x8]
100009e5:	5e                   	pop    esi
100009e6:	5f                   	pop    edi
100009e7:	5d                   	pop    ebp
100009e8:	c3                   	ret    

100009e9 <fpuInternalTo32(_Float80)>:
100009e9:	55                   	push   ebp
100009ea:	89 e5                	mov    ebp,esp
100009ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100009ef:	66 81 f9 7e 40       	cmp    cx,0x407e
100009f4:	76 0c                	jbe    10000a02 <fpuInternalTo32(_Float80)+0x19>
100009f6:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	100009f8: R_386_32	fpuState
100009fd:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a02:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a06:	19 d2                	sbb    edx,edx
10000a08:	f7 d2                	not    edx
10000a0a:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a13:	c1 e8 06             	shr    eax,0x6
10000a16:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a1b:	c1 e1 17             	shl    ecx,0x17
10000a1e:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a24:	09 c8                	or     eax,ecx
10000a26:	09 d0                	or     eax,edx
10000a28:	5d                   	pop    ebp
10000a29:	c3                   	ret    

10000a2a <fpuInternalTo64(_Float80)>:
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	57                   	push   edi
10000a2e:	56                   	push   esi
10000a2f:	53                   	push   ebx
10000a30:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a33:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a38:	76 0c                	jbe    10000a46 <fpuInternalTo64(_Float80)+0x1c>
10000a3a:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a3c: R_386_32	fpuState
10000a41:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a46:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a4a:	19 c9                	sbb    ecx,ecx
10000a4c:	f7 d1                	not    ecx
10000a4e:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a5a:	0f ac d0 09          	shrd   eax,edx,0x9
10000a5e:	c1 ea 09             	shr    edx,0x9
10000a61:	89 c6                	mov    esi,eax
10000a63:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a69:	c1 e3 14             	shl    ebx,0x14
10000a6c:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a72:	09 da                	or     edx,ebx
10000a74:	09 ca                	or     edx,ecx
10000a76:	89 f0                	mov    eax,esi
10000a78:	5b                   	pop    ebx
10000a79:	5e                   	pop    esi
10000a7a:	5f                   	pop    edi
10000a7b:	5d                   	pop    ebp
10000a7c:	c3                   	ret    

10000a7d <fpu32ToInternal(unsigned int)>:
10000a7d:	55                   	push   ebp
10000a7e:	89 e5                	mov    ebp,esp
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a86:	89 d1                	mov    ecx,edx
10000a88:	c1 e9 1f             	shr    ecx,0x1f
10000a8b:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000a8e:	89 d1                	mov    ecx,edx
10000a90:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000a96:	c1 e1 06             	shl    ecx,0x6
10000a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000a9f:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000aa5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000aa8:	c1 ea 17             	shr    edx,0x17
10000aab:	0f b6 d2             	movzx  edx,dl
10000aae:	66 81 c2 81 3f       	add    dx,0x3f81
10000ab3:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ab7:	5d                   	pop    ebp
10000ab8:	c2 04 00             	ret    0x4

10000abb <fpu64ToInternal(unsigned long long)>:
10000abb:	55                   	push   ebp
10000abc:	89 e5                	mov    ebp,esp
10000abe:	57                   	push   edi
10000abf:	56                   	push   esi
10000ac0:	53                   	push   ebx
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000aca:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000acd:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000ad0:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000ad3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ad6:	c1 ea 1f             	shr    edx,0x1f
10000ad9:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000adc:	89 f7                	mov    edi,esi
10000ade:	89 de                	mov    esi,ebx
10000ae0:	0f a4 f7 09          	shld   edi,esi,0x9
10000ae4:	c1 e6 09             	shl    esi,0x9
10000ae7:	89 f1                	mov    ecx,esi
10000ae9:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000aef:	89 fa                	mov    edx,edi
10000af1:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000af7:	89 08                	mov    DWORD PTR [eax],ecx
10000af9:	81 ca 00 00 00 20    	or     edx,0x20000000
10000aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b05:	c1 ea 14             	shr    edx,0x14
10000b08:	66 81 e2 ff 07       	and    dx,0x7ff
10000b0d:	66 81 c2 01 3c       	add    dx,0x3c01
10000b12:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b16:	83 c4 0c             	add    esp,0xc
10000b19:	5b                   	pop    ebx
10000b1a:	5e                   	pop    esi
10000b1b:	5f                   	pop    edi
10000b1c:	5d                   	pop    ebp
10000b1d:	c2 04 00             	ret    0x4

10000b20 <fpuPush(_Float80)>:
10000b20:	55                   	push   ebp
10000b21:	89 e5                	mov    ebp,esp
10000b23:	57                   	push   edi
10000b24:	56                   	push   esi
10000b25:	a0 01 00 00 00       	mov    al,ds:0x1	10000b26: R_386_32	fpuState
10000b2a:	88 c1                	mov    cl,al
10000b2c:	c0 e9 03             	shr    cl,0x3
10000b2f:	89 cf                	mov    edi,ecx
10000b31:	83 e7 07             	and    edi,0x7
10000b34:	83 c7 07             	add    edi,0x7
10000b37:	89 fa                	mov    edx,edi
10000b39:	83 e2 07             	and    edx,0x7
10000b3c:	c1 e2 03             	shl    edx,0x3
10000b3f:	83 e0 c7             	and    eax,0xffffffc7
10000b42:	09 d0                	or     eax,edx
10000b44:	a2 01 00 00 00       	mov    ds:0x1,al	10000b45: R_386_32	fpuState
10000b49:	83 e7 07             	and    edi,0x7
10000b4c:	6b ff 0c             	imul   edi,edi,0xc
10000b4f:	81 c7 04 00 00 00    	add    edi,0x4	10000b51: R_386_32	fpuState
10000b55:	b9 03 00 00 00       	mov    ecx,0x3
10000b5a:	8d 75 08             	lea    esi,[ebp+0x8]
10000b5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b5f:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b60: R_386_32	fpuState
10000b64:	83 f8 08             	cmp    eax,0x8
10000b67:	75 09                	jne    10000b72 <fpuPush(_Float80)+0x52>
10000b69:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b6b: R_386_32	fpuState
10000b70:	eb 06                	jmp    10000b78 <fpuPush(_Float80)+0x58>
10000b72:	40                   	inc    eax
10000b73:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b74: R_386_32	fpuState
10000b78:	5e                   	pop    esi
10000b79:	5f                   	pop    edi
10000b7a:	5d                   	pop    ebp
10000b7b:	c3                   	ret    

10000b7c <fpuPop()>:
10000b7c:	55                   	push   ebp
10000b7d:	89 e5                	mov    ebp,esp
10000b7f:	57                   	push   edi
10000b80:	56                   	push   esi
10000b81:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000b83: R_386_32	fpuState
10000b87:	88 d0                	mov    al,dl
10000b89:	c0 e8 03             	shr    al,0x3
10000b8c:	83 e0 07             	and    eax,0x7
10000b8f:	6b f0 0c             	imul   esi,eax,0xc
10000b92:	81 c6 04 00 00 00    	add    esi,0x4	10000b94: R_386_32	fpuState
10000b98:	b9 03 00 00 00       	mov    ecx,0x3
10000b9d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000ba0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba2:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000ba9:	83 e0 38             	and    eax,0x38
10000bac:	83 e2 c7             	and    edx,0xffffffc7
10000baf:	09 c2                	or     edx,eax
10000bb1:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bb3: R_386_32	fpuState
10000bb7:	a1 64 00 00 00       	mov    eax,ds:0x64	10000bb8: R_386_32	fpuState
10000bbc:	85 c0                	test   eax,eax
10000bbe:	74 08                	je     10000bc8 <fpuPop()+0x4c>
10000bc0:	48                   	dec    eax
10000bc1:	a3 64 00 00 00       	mov    ds:0x64,eax	10000bc2: R_386_32	fpuState
10000bc6:	eb 07                	jmp    10000bcf <fpuPop()+0x53>
10000bc8:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bca: R_386_32	fpuState
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	5e                   	pop    esi
10000bd3:	5f                   	pop    edi
10000bd4:	5d                   	pop    ebp
10000bd5:	c2 04 00             	ret    0x4

10000bd8 <x87Handler(regs*)>:
10000bd8:	55                   	push   ebp
10000bd9:	89 e5                	mov    ebp,esp
10000bdb:	57                   	push   edi
10000bdc:	56                   	push   esi
10000bdd:	53                   	push   ebx
10000bde:	81 ec 6c 06 00 00    	sub    esp,0x66c
10000be4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000be7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000bea:	89 85 90 f9 ff ff    	mov    DWORD PTR [ebp-0x670],eax
10000bf0:	c6 85 9a f9 ff ff 00 	mov    BYTE PTR [ebp-0x666],0x0
10000bf7:	c7 85 9c f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x664],0x2
10000c01:	8d 85 9b f9 ff ff    	lea    eax,[ebp-0x665]
10000c07:	50                   	push   eax
10000c08:	8d 85 9a f9 ff ff    	lea    eax,[ebp-0x666]
10000c0e:	50                   	push   eax
10000c0f:	8d 85 9c f9 ff ff    	lea    eax,[ebp-0x664]
10000c15:	50                   	push   eax
10000c16:	53                   	push   ebx
10000c17:	e8 fc ff ff ff       	call   10000c18 <x87Handler(regs*)+0x40>	10000c18: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c1c:	89 85 94 f9 ff ff    	mov    DWORD PTR [ebp-0x66c],eax
10000c22:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000c28:	8a 10                	mov    dl,BYTE PTR [eax]
10000c2a:	83 c4 10             	add    esp,0x10
10000c2d:	80 fa d9             	cmp    dl,0xd9
10000c30:	0f 85 b6 03 00 00    	jne    10000fec <x87Handler(regs*)+0x414>
10000c36:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c3a:	8d 50 20             	lea    edx,[eax+0x20]
10000c3d:	80 fa 0e             	cmp    dl,0xe
10000c40:	0f 87 fa 01 00 00    	ja     10000e40 <x87Handler(regs*)+0x268>
10000c46:	0f b6 d2             	movzx  edx,dl
10000c49:	ff 24 95 60 23 00 10 	jmp    DWORD PTR [edx*4+0x10002360]	10000c4c: R_386_32	.text
10000c50:	8d b5 a0 f9 ff ff    	lea    esi,[ebp-0x660]
10000c56:	57                   	push   edi
10000c57:	57                   	push   edi
10000c58:	6a 00                	push   0x0
10000c5a:	56                   	push   esi
10000c5b:	e8 fc ff ff ff       	call   10000c5c <x87Handler(regs*)+0x84>	10000c5c: R_386_PC32	fpuGetReg(int)
10000c60:	8d 95 ac f9 ff ff    	lea    edx,[ebp-0x654]
10000c66:	b9 03 00 00 00       	mov    ecx,0x3
10000c6b:	89 e7                	mov    edi,esp
10000c6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000c6f:	52                   	push   edx
10000c70:	e8 fc ff ff ff       	call   10000c71 <x87Handler(regs*)+0x99>	10000c71: R_386_PC32	fpuChs(_Float80)
10000c75:	b9 03 00 00 00       	mov    ecx,0x3
10000c7a:	89 e7                	mov    edi,esp
10000c7c:	89 d6                	mov    esi,edx
10000c7e:	eb 49                	jmp    10000cc9 <x87Handler(regs*)+0xf1>
10000c80:	8d 85 b8 f9 ff ff    	lea    eax,[ebp-0x648]
10000c86:	51                   	push   ecx
10000c87:	51                   	push   ecx
10000c88:	6a 00                	push   0x0
10000c8a:	50                   	push   eax
10000c8b:	e8 fc ff ff ff       	call   10000c8c <x87Handler(regs*)+0xb4>	10000c8c: R_386_PC32	fpuGetReg(int)
10000c90:	8b 85 b8 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x648]
10000c96:	8b 95 bc f9 ff ff    	mov    edx,DWORD PTR [ebp-0x644]
10000c9c:	89 85 c4 f9 ff ff    	mov    DWORD PTR [ebp-0x63c],eax
10000ca2:	89 95 c8 f9 ff ff    	mov    DWORD PTR [ebp-0x638],edx
10000ca8:	8b 85 c0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x640]
10000cae:	66 89 85 cc f9 ff ff 	mov    WORD PTR [ebp-0x634],ax
10000cb5:	c6 85 ce f9 ff ff 00 	mov    BYTE PTR [ebp-0x632],0x0
10000cbc:	8d b5 c4 f9 ff ff    	lea    esi,[ebp-0x63c]
10000cc2:	b9 03 00 00 00       	mov    ecx,0x3
10000cc7:	89 e7                	mov    edi,esp
10000cc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ccb:	6a 00                	push   0x0
10000ccd:	e8 fc ff ff ff       	call   10000cce <x87Handler(regs*)+0xf6>	10000cce: R_386_PC32	fpuSetReg(int, _Float80)
10000cd2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000cd6:	83 c4 10             	add    esp,0x10
10000cd9:	b0 01                	mov    al,0x1
10000cdb:	e9 4c 16 00 00       	jmp    1000232c <x87Handler(regs*)+0x1754>
10000ce0:	c6 85 da f9 ff ff 00 	mov    BYTE PTR [ebp-0x626],0x0
10000ce7:	c7 85 d0 f9 ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x630],0x0
10000cf1:	c7 85 d4 f9 ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x62c],0x20000000
10000cfb:	66 c7 85 d8 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x628],0x4000
10000d04:	83 ec 10             	sub    esp,0x10
10000d07:	8d b5 d0 f9 ff ff    	lea    esi,[ebp-0x630]
10000d0d:	eb 2d                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d0f:	c6 85 e6 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61a],0x0
10000d16:	c7 85 dc f9 ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x624],0xf346e2be
10000d20:	c7 85 e0 f9 ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x620],0x35269e12
10000d2a:	66 c7 85 e4 f9 ff ff 01 40 	mov    WORD PTR [ebp-0x61c],0x4001
10000d33:	83 ec 10             	sub    esp,0x10
10000d36:	8d b5 dc f9 ff ff    	lea    esi,[ebp-0x624]
10000d3c:	b9 03 00 00 00       	mov    ecx,0x3
10000d41:	89 e7                	mov    edi,esp
10000d43:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d45:	e8 fc ff ff ff       	call   10000d46 <x87Handler(regs*)+0x16e>	10000d46: R_386_PC32	fpuPush(_Float80)
10000d4a:	eb 86                	jmp    10000cd2 <x87Handler(regs*)+0xfa>
10000d4c:	c6 85 f2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x60e],0x0
10000d53:	c7 85 e8 f9 ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x618],0x5705fc1c
10000d5d:	c7 85 ec f9 ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x614],0x2e2a8eca
10000d67:	66 c7 85 f0 f9 ff ff 00 40 	mov    WORD PTR [ebp-0x610],0x4000
10000d70:	83 ec 10             	sub    esp,0x10
10000d73:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000d79:	eb c1                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000d7b:	c6 85 fe f9 ff ff 00 	mov    BYTE PTR [ebp-0x602],0x0
10000d82:	c7 85 f4 f9 ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x60c],0x885a308c
10000d8c:	c7 85 f8 f9 ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x608],0x3243f6a8
10000d96:	66 c7 85 fc f9 ff ff 01 40 	mov    WORD PTR [ebp-0x604],0x4001
10000d9f:	83 ec 10             	sub    esp,0x10
10000da2:	8d b5 f4 f9 ff ff    	lea    esi,[ebp-0x60c]
10000da8:	eb 92                	jmp    10000d3c <x87Handler(regs*)+0x164>
10000daa:	c6 85 0a fa ff ff 00 	mov    BYTE PTR [ebp-0x5f6],0x0
10000db1:	c7 85 00 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x600],0x3ef3fde6
10000dbb:	c7 85 04 fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5fc],0x268826a1
10000dc5:	66 c7 85 08 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5f8],0x3ffe
10000dce:	83 ec 10             	sub    esp,0x10
10000dd1:	8d b5 00 fa ff ff    	lea    esi,[ebp-0x600]
10000dd7:	e9 60 ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000ddc:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000de3:	c7 85 0c fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5f4],0xf473de68
10000ded:	c7 85 10 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5f0],0x2c5c85fd
10000df7:	66 c7 85 14 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5ec],0x3fff
10000e00:	83 ec 10             	sub    esp,0x10
10000e03:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000e09:	e9 2e ff ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e0e:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000e15:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000e1f:	c7 85 1c fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e4],0x0
10000e29:	66 c7 85 20 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5e0],0x3fff
10000e32:	83 ec 10             	sub    esp,0x10
10000e35:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000e3b:	e9 fc fe ff ff       	jmp    10000d3c <x87Handler(regs*)+0x164>
10000e40:	8d 50 40             	lea    edx,[eax+0x40]
10000e43:	80 fa 07             	cmp    dl,0x7
10000e46:	77 27                	ja     10000e6f <x87Handler(regs*)+0x297>
10000e48:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
10000e4e:	57                   	push   edi
10000e4f:	57                   	push   edi
10000e50:	2d c0 00 00 00       	sub    eax,0xc0
10000e55:	50                   	push   eax
10000e56:	56                   	push   esi
10000e57:	e8 fc ff ff ff       	call   10000e58 <x87Handler(regs*)+0x280>	10000e58: R_386_PC32	fpuGetReg(int)
10000e5c:	83 ec 14             	sub    esp,0x14
10000e5f:	b9 03 00 00 00       	mov    ecx,0x3
10000e64:	89 e7                	mov    edi,esp
10000e66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e68:	e8 fc ff ff ff       	call   10000e69 <x87Handler(regs*)+0x291>	10000e69: R_386_PC32	fpuPush(_Float80)
10000e6d:	eb 63                	jmp    10000ed2 <x87Handler(regs*)+0x2fa>
10000e6f:	8d 50 38             	lea    edx,[eax+0x38]
10000e72:	80 fa 07             	cmp    dl,0x7
10000e75:	77 64                	ja     10000edb <x87Handler(regs*)+0x303>
10000e77:	8d 55 dc             	lea    edx,[ebp-0x24]
10000e7a:	56                   	push   esi
10000e7b:	56                   	push   esi
10000e7c:	2d c8 00 00 00       	sub    eax,0xc8
10000e81:	50                   	push   eax
10000e82:	52                   	push   edx
10000e83:	e8 fc ff ff ff       	call   10000e84 <x87Handler(regs*)+0x2ac>	10000e84: R_386_PC32	fpuGetReg(int)
10000e88:	8d b5 38 fb ff ff    	lea    esi,[ebp-0x4c8]
10000e8e:	83 ec 0c             	sub    esp,0xc
10000e91:	6a 00                	push   0x0
10000e93:	56                   	push   esi
10000e94:	e8 fc ff ff ff       	call   10000e95 <x87Handler(regs*)+0x2bd>	10000e95: R_386_PC32	fpuGetReg(int)
10000e99:	83 c4 10             	add    esp,0x10
10000e9c:	b9 03 00 00 00       	mov    ecx,0x3
10000ea1:	89 e7                	mov    edi,esp
10000ea3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ea5:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000eab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000eaf:	2d c8 00 00 00       	sub    eax,0xc8
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <x87Handler(regs*)+0x2de>	10000eb6: R_386_PC32	fpuSetReg(int, _Float80)
10000eba:	83 ec 0c             	sub    esp,0xc
10000ebd:	b9 03 00 00 00       	mov    ecx,0x3
10000ec2:	89 e7                	mov    edi,esp
10000ec4:	8d 55 dc             	lea    edx,[ebp-0x24]
10000ec7:	89 d6                	mov    esi,edx
10000ec9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ecb:	6a 00                	push   0x0
10000ecd:	e8 fc ff ff ff       	call   10000ece <x87Handler(regs*)+0x2f6>	10000ece: R_386_PC32	fpuSetReg(int, _Float80)
10000ed2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000ed6:	e9 c6 00 00 00       	jmp    10000fa1 <x87Handler(regs*)+0x3c9>
10000edb:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10000ee1:	84 d2                	test   dl,dl
10000ee3:	75 1b                	jne    10000f00 <x87Handler(regs*)+0x328>
10000ee5:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10000eeb:	51                   	push   ecx
10000eec:	51                   	push   ecx
10000eed:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000ef3:	ff 30                	push   DWORD PTR [eax]
10000ef5:	56                   	push   esi
10000ef6:	e8 fc ff ff ff       	call   10000ef7 <x87Handler(regs*)+0x31f>	10000ef7: R_386_PC32	fpu32ToInternal(unsigned int)
10000efb:	e9 87 00 00 00       	jmp    10000f87 <x87Handler(regs*)+0x3af>
10000f00:	80 fa 03             	cmp    dl,0x3
10000f03:	75 2a                	jne    10000f2f <x87Handler(regs*)+0x357>
10000f05:	8d b5 e4 fd ff ff    	lea    esi,[ebp-0x21c]
10000f0b:	83 ec 0c             	sub    esp,0xc
10000f0e:	56                   	push   esi
10000f0f:	e8 fc ff ff ff       	call   10000f10 <x87Handler(regs*)+0x338>	10000f10: R_386_PC32	fpuPop()
10000f14:	83 ec 14             	sub    esp,0x14
10000f17:	b9 03 00 00 00       	mov    ecx,0x3
10000f1c:	89 e7                	mov    edi,esp
10000f1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f20:	e8 fc ff ff ff       	call   10000f21 <x87Handler(regs*)+0x349>	10000f21: R_386_PC32	fpuInternalTo32(_Float80)
10000f25:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000f2b:	89 02                	mov    DWORD PTR [edx],eax
10000f2d:	eb 69                	jmp    10000f98 <x87Handler(regs*)+0x3c0>
10000f2f:	80 fa 05             	cmp    dl,0x5
10000f32:	75 14                	jne    10000f48 <x87Handler(regs*)+0x370>
10000f34:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f3a:	66 8b 00             	mov    ax,WORD PTR [eax]
10000f3d:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000f3f: R_386_32	fpuState
10000f43:	e9 96 00 00 00       	jmp    10000fde <x87Handler(regs*)+0x406>
10000f48:	31 c0                	xor    eax,eax
10000f4a:	80 fa 07             	cmp    dl,0x7
10000f4d:	0f 85 d9 13 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10000f53:	66 a1 02 00 00 00    	mov    ax,ds:0x2	10000f55: R_386_32	fpuState
10000f59:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000f5f:	66 89 02             	mov    WORD PTR [edx],ax
10000f62:	eb 7a                	jmp    10000fde <x87Handler(regs*)+0x406>
10000f64:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10000f6a:	84 d2                	test   dl,dl
10000f6c:	0f 85 75 12 00 00    	jne    100021e7 <x87Handler(regs*)+0x160f>
10000f72:	8d 75 88             	lea    esi,[ebp-0x78]
10000f75:	50                   	push   eax
10000f76:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10000f7c:	ff 70 04             	push   DWORD PTR [eax+0x4]
10000f7f:	ff 30                	push   DWORD PTR [eax]
10000f81:	56                   	push   esi
10000f82:	e8 fc ff ff ff       	call   10000f83 <x87Handler(regs*)+0x3ab>	10000f83: R_386_PC32	fpu64ToInternal(unsigned long long)
10000f87:	83 ec 14             	sub    esp,0x14
10000f8a:	b9 03 00 00 00       	mov    ecx,0x3
10000f8f:	89 e7                	mov    edi,esp
10000f91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f93:	e8 fc ff ff ff       	call   10000f94 <x87Handler(regs*)+0x3bc>	10000f94: R_386_PC32	fpuPush(_Float80)
10000f98:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10000f9e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000fa1:	83 c4 20             	add    esp,0x20
10000fa4:	e9 30 fd ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10000fa9:	80 fa 02             	cmp    dl,0x2
10000fac:	0f 85 a9 0e 00 00    	jne    10001e5b <x87Handler(regs*)+0x1283>
10000fb2:	8d b5 68 fe ff ff    	lea    esi,[ebp-0x198]
10000fb8:	50                   	push   eax
10000fb9:	50                   	push   eax
10000fba:	6a 00                	push   0x0
10000fbc:	56                   	push   esi
10000fbd:	e8 fc ff ff ff       	call   10000fbe <x87Handler(regs*)+0x3e6>	10000fbe: R_386_PC32	fpuGetReg(int)
10000fc2:	83 ec 14             	sub    esp,0x14
10000fc5:	b9 03 00 00 00       	mov    ecx,0x3
10000fca:	89 e7                	mov    edi,esp
10000fcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fce:	e8 fc ff ff ff       	call   10000fcf <x87Handler(regs*)+0x3f7>	10000fcf: R_386_PC32	fpuFloatToLong(_Float80)
10000fd3:	83 c4 20             	add    esp,0x20
10000fd6:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10000fdc:	89 02                	mov    DWORD PTR [edx],eax
10000fde:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10000fe4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000fe7:	e9 ed fc ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10000fec:	80 fa d8             	cmp    dl,0xd8
10000fef:	0f 85 56 03 00 00    	jne    1000134b <x87Handler(regs*)+0x773>
10000ff5:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10000ffb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000fff:	8d 50 40             	lea    edx,[eax+0x40]
10001002:	80 fa 07             	cmp    dl,0x7
10001005:	77 64                	ja     1000106b <x87Handler(regs*)+0x493>
10001007:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
1000100d:	57                   	push   edi
1000100e:	57                   	push   edi
1000100f:	2d c0 00 00 00       	sub    eax,0xc0
10001014:	50                   	push   eax
10001015:	56                   	push   esi
10001016:	e8 fc ff ff ff       	call   10001017 <x87Handler(regs*)+0x43f>	10001017: R_386_PC32	fpuGetReg(int)
1000101b:	8d 95 30 fa ff ff    	lea    edx,[ebp-0x5d0]
10001021:	83 ec 0c             	sub    esp,0xc
10001024:	6a 00                	push   0x0
10001026:	52                   	push   edx
10001027:	e8 fc ff ff ff       	call   10001028 <x87Handler(regs*)+0x450>	10001028: R_386_PC32	fpuGetReg(int)
1000102c:	8d 85 3c fa ff ff    	lea    eax,[ebp-0x5c4]
10001032:	52                   	push   edx
10001033:	b9 03 00 00 00       	mov    ecx,0x3
10001038:	89 e7                	mov    edi,esp
1000103a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000103c:	83 ec 0c             	sub    esp,0xc
1000103f:	b9 03 00 00 00       	mov    ecx,0x3
10001044:	89 e7                	mov    edi,esp
10001046:	8d 95 30 fa ff ff    	lea    edx,[ebp-0x5d0]
1000104c:	89 d6                	mov    esi,edx
1000104e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001050:	50                   	push   eax
10001051:	e8 fc ff ff ff       	call   10001052 <x87Handler(regs*)+0x47a>	10001052: R_386_PC32	fpuAdd(_Float80, _Float80)
10001056:	83 c4 20             	add    esp,0x20
10001059:	b9 03 00 00 00       	mov    ecx,0x3
1000105e:	89 e7                	mov    edi,esp
10001060:	8d 85 3c fa ff ff    	lea    eax,[ebp-0x5c4]
10001066:	e9 e0 01 00 00       	jmp    1000124b <x87Handler(regs*)+0x673>
1000106b:	8d 50 38             	lea    edx,[eax+0x38]
1000106e:	80 fa 07             	cmp    dl,0x7
10001071:	77 64                	ja     100010d7 <x87Handler(regs*)+0x4ff>
10001073:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
10001079:	52                   	push   edx
1000107a:	52                   	push   edx
1000107b:	2d c8 00 00 00       	sub    eax,0xc8
10001080:	50                   	push   eax
10001081:	56                   	push   esi
10001082:	e8 fc ff ff ff       	call   10001083 <x87Handler(regs*)+0x4ab>	10001083: R_386_PC32	fpuGetReg(int)
10001087:	8d 95 54 fa ff ff    	lea    edx,[ebp-0x5ac]
1000108d:	83 ec 0c             	sub    esp,0xc
10001090:	6a 00                	push   0x0
10001092:	52                   	push   edx
10001093:	e8 fc ff ff ff       	call   10001094 <x87Handler(regs*)+0x4bc>	10001094: R_386_PC32	fpuGetReg(int)
10001098:	8d 85 60 fa ff ff    	lea    eax,[ebp-0x5a0]
1000109e:	51                   	push   ecx
1000109f:	b9 03 00 00 00       	mov    ecx,0x3
100010a4:	89 e7                	mov    edi,esp
100010a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010a8:	83 ec 0c             	sub    esp,0xc
100010ab:	b9 03 00 00 00       	mov    ecx,0x3
100010b0:	89 e7                	mov    edi,esp
100010b2:	8d 95 54 fa ff ff    	lea    edx,[ebp-0x5ac]
100010b8:	89 d6                	mov    esi,edx
100010ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010bc:	50                   	push   eax
100010bd:	e8 fc ff ff ff       	call   100010be <x87Handler(regs*)+0x4e6>	100010be: R_386_PC32	fpuMultiply(_Float80, _Float80)
100010c2:	83 c4 20             	add    esp,0x20
100010c5:	b9 03 00 00 00       	mov    ecx,0x3
100010ca:	89 e7                	mov    edi,esp
100010cc:	8d 85 60 fa ff ff    	lea    eax,[ebp-0x5a0]
100010d2:	e9 74 01 00 00       	jmp    1000124b <x87Handler(regs*)+0x673>
100010d7:	8d 50 30             	lea    edx,[eax+0x30]
100010da:	80 fa 07             	cmp    dl,0x7
100010dd:	77 45                	ja     10001124 <x87Handler(regs*)+0x54c>
100010df:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
100010e5:	57                   	push   edi
100010e6:	57                   	push   edi
100010e7:	2d d0 00 00 00       	sub    eax,0xd0
100010ec:	50                   	push   eax
100010ed:	56                   	push   esi
100010ee:	e8 fc ff ff ff       	call   100010ef <x87Handler(regs*)+0x517>	100010ef: R_386_PC32	fpuGetReg(int)
100010f3:	8d 85 78 fa ff ff    	lea    eax,[ebp-0x588]
100010f9:	83 ec 0c             	sub    esp,0xc
100010fc:	6a 00                	push   0x0
100010fe:	50                   	push   eax
100010ff:	e8 fc ff ff ff       	call   10001100 <x87Handler(regs*)+0x528>	10001100: R_386_PC32	fpuGetReg(int)
10001104:	50                   	push   eax
10001105:	50                   	push   eax
10001106:	b9 03 00 00 00       	mov    ecx,0x3
1000110b:	89 e7                	mov    edi,esp
1000110d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000110f:	83 ec 0c             	sub    esp,0xc
10001112:	b9 03 00 00 00       	mov    ecx,0x3
10001117:	89 e7                	mov    edi,esp
10001119:	8d 85 78 fa ff ff    	lea    eax,[ebp-0x588]
1000111f:	e9 c6 07 00 00       	jmp    100018ea <x87Handler(regs*)+0xd12>
10001124:	8d 50 28             	lea    edx,[eax+0x28]
10001127:	80 fa 07             	cmp    dl,0x7
1000112a:	77 45                	ja     10001171 <x87Handler(regs*)+0x599>
1000112c:	8d b5 84 fa ff ff    	lea    esi,[ebp-0x57c]
10001132:	52                   	push   edx
10001133:	52                   	push   edx
10001134:	2d d8 00 00 00       	sub    eax,0xd8
10001139:	50                   	push   eax
1000113a:	56                   	push   esi
1000113b:	e8 fc ff ff ff       	call   1000113c <x87Handler(regs*)+0x564>	1000113c: R_386_PC32	fpuGetReg(int)
10001140:	8d 85 90 fa ff ff    	lea    eax,[ebp-0x570]
10001146:	83 ec 0c             	sub    esp,0xc
10001149:	6a 00                	push   0x0
1000114b:	50                   	push   eax
1000114c:	e8 fc ff ff ff       	call   1000114d <x87Handler(regs*)+0x575>	1000114d: R_386_PC32	fpuGetReg(int)
10001151:	51                   	push   ecx
10001152:	51                   	push   ecx
10001153:	b9 03 00 00 00       	mov    ecx,0x3
10001158:	89 e7                	mov    edi,esp
1000115a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000115c:	83 ec 0c             	sub    esp,0xc
1000115f:	b9 03 00 00 00       	mov    ecx,0x3
10001164:	89 e7                	mov    edi,esp
10001166:	8d 85 90 fa ff ff    	lea    eax,[ebp-0x570]
1000116c:	e9 d7 07 00 00       	jmp    10001948 <x87Handler(regs*)+0xd70>
10001171:	8d 50 20             	lea    edx,[eax+0x20]
10001174:	80 fa 07             	cmp    dl,0x7
10001177:	77 61                	ja     100011da <x87Handler(regs*)+0x602>
10001179:	8d b5 9c fa ff ff    	lea    esi,[ebp-0x564]
1000117f:	51                   	push   ecx
10001180:	51                   	push   ecx
10001181:	2d e0 00 00 00       	sub    eax,0xe0
10001186:	50                   	push   eax
10001187:	56                   	push   esi
10001188:	e8 fc ff ff ff       	call   10001189 <x87Handler(regs*)+0x5b1>	10001189: R_386_PC32	fpuGetReg(int)
1000118d:	8d 95 a8 fa ff ff    	lea    edx,[ebp-0x558]
10001193:	83 ec 0c             	sub    esp,0xc
10001196:	6a 00                	push   0x0
10001198:	52                   	push   edx
10001199:	e8 fc ff ff ff       	call   1000119a <x87Handler(regs*)+0x5c2>	1000119a: R_386_PC32	fpuGetReg(int)
1000119e:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
100011a4:	57                   	push   edi
100011a5:	b9 03 00 00 00       	mov    ecx,0x3
100011aa:	89 e7                	mov    edi,esp
100011ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011ae:	83 ec 0c             	sub    esp,0xc
100011b1:	b9 03 00 00 00       	mov    ecx,0x3
100011b6:	89 e7                	mov    edi,esp
100011b8:	8d 95 a8 fa ff ff    	lea    edx,[ebp-0x558]
100011be:	89 d6                	mov    esi,edx
100011c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011c2:	50                   	push   eax
100011c3:	e8 fc ff ff ff       	call   100011c4 <x87Handler(regs*)+0x5ec>	100011c4: R_386_PC32	fpuSub(_Float80, _Float80)
100011c8:	83 c4 20             	add    esp,0x20
100011cb:	b9 03 00 00 00       	mov    ecx,0x3
100011d0:	89 e7                	mov    edi,esp
100011d2:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
100011d8:	eb 71                	jmp    1000124b <x87Handler(regs*)+0x673>
100011da:	8d 50 18             	lea    edx,[eax+0x18]
100011dd:	80 fa 07             	cmp    dl,0x7
100011e0:	77 70                	ja     10001252 <x87Handler(regs*)+0x67a>
100011e2:	8d b5 c0 fa ff ff    	lea    esi,[ebp-0x540]
100011e8:	50                   	push   eax
100011e9:	50                   	push   eax
100011ea:	6a 00                	push   0x0
100011ec:	56                   	push   esi
100011ed:	e8 fc ff ff ff       	call   100011ee <x87Handler(regs*)+0x616>	100011ee: R_386_PC32	fpuGetReg(int)
100011f2:	8d 95 cc fa ff ff    	lea    edx,[ebp-0x534]
100011f8:	83 ec 0c             	sub    esp,0xc
100011fb:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001201:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001205:	2d e8 00 00 00       	sub    eax,0xe8
1000120a:	50                   	push   eax
1000120b:	52                   	push   edx
1000120c:	e8 fc ff ff ff       	call   1000120d <x87Handler(regs*)+0x635>	1000120d: R_386_PC32	fpuGetReg(int)
10001211:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
10001217:	52                   	push   edx
10001218:	b9 03 00 00 00       	mov    ecx,0x3
1000121d:	89 e7                	mov    edi,esp
1000121f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001221:	83 ec 0c             	sub    esp,0xc
10001224:	b9 03 00 00 00       	mov    ecx,0x3
10001229:	89 e7                	mov    edi,esp
1000122b:	8d 95 cc fa ff ff    	lea    edx,[ebp-0x534]
10001231:	89 d6                	mov    esi,edx
10001233:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001235:	50                   	push   eax
10001236:	e8 fc ff ff ff       	call   10001237 <x87Handler(regs*)+0x65f>	10001237: R_386_PC32	fpuSub(_Float80, _Float80)
1000123b:	83 c4 20             	add    esp,0x20
1000123e:	b9 03 00 00 00       	mov    ecx,0x3
10001243:	89 e7                	mov    edi,esp
10001245:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
1000124b:	89 c6                	mov    esi,eax
1000124d:	e9 77 fa ff ff       	jmp    10000cc9 <x87Handler(regs*)+0xf1>
10001252:	8d 50 10             	lea    edx,[eax+0x10]
10001255:	80 fa 07             	cmp    dl,0x7
10001258:	77 61                	ja     100012bb <x87Handler(regs*)+0x6e3>
1000125a:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
10001260:	51                   	push   ecx
10001261:	51                   	push   ecx
10001262:	2d f0 00 00 00       	sub    eax,0xf0
10001267:	50                   	push   eax
10001268:	56                   	push   esi
10001269:	e8 fc ff ff ff       	call   1000126a <x87Handler(regs*)+0x692>	1000126a: R_386_PC32	fpuGetReg(int)
1000126e:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001274:	83 ec 0c             	sub    esp,0xc
10001277:	6a 00                	push   0x0
10001279:	52                   	push   edx
1000127a:	e8 fc ff ff ff       	call   1000127b <x87Handler(regs*)+0x6a3>	1000127b: R_386_PC32	fpuGetReg(int)
1000127f:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
10001285:	57                   	push   edi
10001286:	b9 03 00 00 00       	mov    ecx,0x3
1000128b:	89 e7                	mov    edi,esp
1000128d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000128f:	83 ec 0c             	sub    esp,0xc
10001292:	b9 03 00 00 00       	mov    ecx,0x3
10001297:	89 e7                	mov    edi,esp
10001299:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
1000129f:	89 d6                	mov    esi,edx
100012a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012a3:	50                   	push   eax
100012a4:	e8 fc ff ff ff       	call   100012a5 <x87Handler(regs*)+0x6cd>	100012a5: R_386_PC32	fpuDivide(_Float80, _Float80)
100012a9:	83 c4 20             	add    esp,0x20
100012ac:	b9 03 00 00 00       	mov    ecx,0x3
100012b1:	89 e7                	mov    edi,esp
100012b3:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
100012b9:	eb 71                	jmp    1000132c <x87Handler(regs*)+0x754>
100012bb:	3c f7                	cmp    al,0xf7
100012bd:	0f 86 86 07 00 00    	jbe    10001a49 <x87Handler(regs*)+0xe71>
100012c3:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
100012c9:	50                   	push   eax
100012ca:	50                   	push   eax
100012cb:	6a 00                	push   0x0
100012cd:	56                   	push   esi
100012ce:	e8 fc ff ff ff       	call   100012cf <x87Handler(regs*)+0x6f7>	100012cf: R_386_PC32	fpuGetReg(int)
100012d3:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100012d9:	83 ec 0c             	sub    esp,0xc
100012dc:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100012e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100012e6:	2d f8 00 00 00       	sub    eax,0xf8
100012eb:	50                   	push   eax
100012ec:	52                   	push   edx
100012ed:	e8 fc ff ff ff       	call   100012ee <x87Handler(regs*)+0x716>	100012ee: R_386_PC32	fpuGetReg(int)
100012f2:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100012f8:	52                   	push   edx
100012f9:	b9 03 00 00 00       	mov    ecx,0x3
100012fe:	89 e7                	mov    edi,esp
10001300:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001302:	83 ec 0c             	sub    esp,0xc
10001305:	b9 03 00 00 00       	mov    ecx,0x3
1000130a:	89 e7                	mov    edi,esp
1000130c:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
10001312:	89 d6                	mov    esi,edx
10001314:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001316:	50                   	push   eax
10001317:	e8 fc ff ff ff       	call   10001318 <x87Handler(regs*)+0x740>	10001318: R_386_PC32	fpuDivide(_Float80, _Float80)
1000131c:	83 c4 20             	add    esp,0x20
1000131f:	b9 03 00 00 00       	mov    ecx,0x3
10001324:	89 e7                	mov    edi,esp
10001326:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
1000132c:	89 c6                	mov    esi,eax
1000132e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001330:	6a 00                	push   0x0
10001332:	e8 fc ff ff ff       	call   10001333 <x87Handler(regs*)+0x75b>	10001333: R_386_PC32	fpuSetReg(int, _Float80)
10001337:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000133b:	8d 45 dc             	lea    eax,[ebp-0x24]
1000133e:	89 04 24             	mov    DWORD PTR [esp],eax
10001341:	e8 fc ff ff ff       	call   10001342 <x87Handler(regs*)+0x76a>	10001342: R_386_PC32	fpuPop()
10001346:	e9 d8 0c 00 00       	jmp    10002023 <x87Handler(regs*)+0x144b>
1000134b:	80 fa dc             	cmp    dl,0xdc
1000134e:	0f 85 94 01 00 00    	jne    100014e8 <x87Handler(regs*)+0x910>
10001354:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000135a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000135e:	8d 50 40             	lea    edx,[eax+0x40]
10001361:	80 fa 07             	cmp    dl,0x7
10001364:	77 77                	ja     100013dd <x87Handler(regs*)+0x805>
10001366:	8d b5 44 fb ff ff    	lea    esi,[ebp-0x4bc]
1000136c:	52                   	push   edx
1000136d:	52                   	push   edx
1000136e:	2d c0 00 00 00       	sub    eax,0xc0
10001373:	50                   	push   eax
10001374:	56                   	push   esi
10001375:	e8 fc ff ff ff       	call   10001376 <x87Handler(regs*)+0x79e>	10001376: R_386_PC32	fpuGetReg(int)
1000137a:	8d 95 50 fb ff ff    	lea    edx,[ebp-0x4b0]
10001380:	83 ec 0c             	sub    esp,0xc
10001383:	6a 00                	push   0x0
10001385:	52                   	push   edx
10001386:	e8 fc ff ff ff       	call   10001387 <x87Handler(regs*)+0x7af>	10001387: R_386_PC32	fpuGetReg(int)
1000138b:	8d 85 5c fb ff ff    	lea    eax,[ebp-0x4a4]
10001391:	51                   	push   ecx
10001392:	b9 03 00 00 00       	mov    ecx,0x3
10001397:	89 e7                	mov    edi,esp
10001399:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000139b:	83 ec 0c             	sub    esp,0xc
1000139e:	b9 03 00 00 00       	mov    ecx,0x3
100013a3:	89 e7                	mov    edi,esp
100013a5:	8d 95 50 fb ff ff    	lea    edx,[ebp-0x4b0]
100013ab:	89 d6                	mov    esi,edx
100013ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013af:	50                   	push   eax
100013b0:	e8 fc ff ff ff       	call   100013b1 <x87Handler(regs*)+0x7d9>	100013b1: R_386_PC32	fpuAdd(_Float80, _Float80)
100013b5:	83 c4 20             	add    esp,0x20
100013b8:	b9 03 00 00 00       	mov    ecx,0x3
100013bd:	89 e7                	mov    edi,esp
100013bf:	8d 85 5c fb ff ff    	lea    eax,[ebp-0x4a4]
100013c5:	89 c6                	mov    esi,eax
100013c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013c9:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100013cf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100013d3:	2d c0 00 00 00       	sub    eax,0xc0
100013d8:	e9 8a 04 00 00       	jmp    10001867 <x87Handler(regs*)+0xc8f>
100013dd:	8d 50 38             	lea    edx,[eax+0x38]
100013e0:	80 fa 07             	cmp    dl,0x7
100013e3:	77 77                	ja     1000145c <x87Handler(regs*)+0x884>
100013e5:	8d b5 68 fb ff ff    	lea    esi,[ebp-0x498]
100013eb:	51                   	push   ecx
100013ec:	51                   	push   ecx
100013ed:	2d c8 00 00 00       	sub    eax,0xc8
100013f2:	50                   	push   eax
100013f3:	56                   	push   esi
100013f4:	e8 fc ff ff ff       	call   100013f5 <x87Handler(regs*)+0x81d>	100013f5: R_386_PC32	fpuGetReg(int)
100013f9:	8d 95 74 fb ff ff    	lea    edx,[ebp-0x48c]
100013ff:	83 ec 0c             	sub    esp,0xc
10001402:	6a 00                	push   0x0
10001404:	52                   	push   edx
10001405:	e8 fc ff ff ff       	call   10001406 <x87Handler(regs*)+0x82e>	10001406: R_386_PC32	fpuGetReg(int)
1000140a:	8d 85 80 fb ff ff    	lea    eax,[ebp-0x480]
10001410:	57                   	push   edi
10001411:	b9 03 00 00 00       	mov    ecx,0x3
10001416:	89 e7                	mov    edi,esp
10001418:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000141a:	83 ec 0c             	sub    esp,0xc
1000141d:	b9 03 00 00 00       	mov    ecx,0x3
10001422:	89 e7                	mov    edi,esp
10001424:	8d 95 74 fb ff ff    	lea    edx,[ebp-0x48c]
1000142a:	89 d6                	mov    esi,edx
1000142c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000142e:	50                   	push   eax
1000142f:	e8 fc ff ff ff       	call   10001430 <x87Handler(regs*)+0x858>	10001430: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001434:	83 c4 20             	add    esp,0x20
10001437:	b9 03 00 00 00       	mov    ecx,0x3
1000143c:	89 e7                	mov    edi,esp
1000143e:	8d 85 80 fb ff ff    	lea    eax,[ebp-0x480]
10001444:	89 c6                	mov    esi,eax
10001446:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001448:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000144e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001452:	2d c8 00 00 00       	sub    eax,0xc8
10001457:	e9 0b 04 00 00       	jmp    10001867 <x87Handler(regs*)+0xc8f>
1000145c:	83 c0 18             	add    eax,0x18
1000145f:	3c 07                	cmp    al,0x7
10001461:	0f 87 13 0a 00 00    	ja     10001e7a <x87Handler(regs*)+0x12a2>
10001467:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
1000146d:	57                   	push   edi
1000146e:	57                   	push   edi
1000146f:	6a 00                	push   0x0
10001471:	56                   	push   esi
10001472:	e8 fc ff ff ff       	call   10001473 <x87Handler(regs*)+0x89b>	10001473: R_386_PC32	fpuGetReg(int)
10001477:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
1000147d:	83 ec 0c             	sub    esp,0xc
10001480:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001486:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000148a:	2d e8 00 00 00       	sub    eax,0xe8
1000148f:	50                   	push   eax
10001490:	52                   	push   edx
10001491:	e8 fc ff ff ff       	call   10001492 <x87Handler(regs*)+0x8ba>	10001492: R_386_PC32	fpuGetReg(int)
10001496:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
1000149c:	52                   	push   edx
1000149d:	b9 03 00 00 00       	mov    ecx,0x3
100014a2:	89 e7                	mov    edi,esp
100014a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014a6:	83 ec 0c             	sub    esp,0xc
100014a9:	b9 03 00 00 00       	mov    ecx,0x3
100014ae:	89 e7                	mov    edi,esp
100014b0:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
100014b6:	89 d6                	mov    esi,edx
100014b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014ba:	50                   	push   eax
100014bb:	e8 fc ff ff ff       	call   100014bc <x87Handler(regs*)+0x8e4>	100014bc: R_386_PC32	fpuSub(_Float80, _Float80)
100014c0:	83 c4 20             	add    esp,0x20
100014c3:	b9 03 00 00 00       	mov    ecx,0x3
100014c8:	89 e7                	mov    edi,esp
100014ca:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
100014d0:	89 c6                	mov    esi,eax
100014d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014d4:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100014da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014de:	2d e8 00 00 00       	sub    eax,0xe8
100014e3:	e9 7f 03 00 00       	jmp    10001867 <x87Handler(regs*)+0xc8f>
100014e8:	80 fa de             	cmp    dl,0xde
100014eb:	0f 85 33 03 00 00    	jne    10001824 <x87Handler(regs*)+0xc4c>
100014f1:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
100014f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014fb:	8d 50 40             	lea    edx,[eax+0x40]
100014fe:	80 fa 07             	cmp    dl,0x7
10001501:	0f 87 8c 00 00 00    	ja     10001593 <x87Handler(regs*)+0x9bb>
10001507:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
1000150d:	52                   	push   edx
1000150e:	52                   	push   edx
1000150f:	2d c0 00 00 00       	sub    eax,0xc0
10001514:	50                   	push   eax
10001515:	56                   	push   esi
10001516:	e8 fc ff ff ff       	call   10001517 <x87Handler(regs*)+0x93f>	10001517: R_386_PC32	fpuGetReg(int)
1000151b:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
10001521:	83 ec 0c             	sub    esp,0xc
10001524:	6a 00                	push   0x0
10001526:	52                   	push   edx
10001527:	e8 fc ff ff ff       	call   10001528 <x87Handler(regs*)+0x950>	10001528: R_386_PC32	fpuGetReg(int)
1000152c:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
10001532:	51                   	push   ecx
10001533:	b9 03 00 00 00       	mov    ecx,0x3
10001538:	89 e7                	mov    edi,esp
1000153a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000153c:	83 ec 0c             	sub    esp,0xc
1000153f:	b9 03 00 00 00       	mov    ecx,0x3
10001544:	89 e7                	mov    edi,esp
10001546:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
1000154c:	89 d6                	mov    esi,edx
1000154e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001550:	50                   	push   eax
10001551:	e8 fc ff ff ff       	call   10001552 <x87Handler(regs*)+0x97a>	10001552: R_386_PC32	fpuAdd(_Float80, _Float80)
10001556:	83 c4 20             	add    esp,0x20
10001559:	b9 03 00 00 00       	mov    ecx,0x3
1000155e:	89 e7                	mov    edi,esp
10001560:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
10001566:	89 c6                	mov    esi,eax
10001568:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000156a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001570:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001574:	2d c0 00 00 00       	sub    eax,0xc0
10001579:	50                   	push   eax
1000157a:	e8 fc ff ff ff       	call   1000157b <x87Handler(regs*)+0x9a3>	1000157b: R_386_PC32	fpuSetReg(int, _Float80)
1000157f:	8d 45 dc             	lea    eax,[ebp-0x24]
10001582:	89 04 24             	mov    DWORD PTR [esp],eax
10001585:	e8 fc ff ff ff       	call   10001586 <x87Handler(regs*)+0x9ae>	10001586: R_386_PC32	fpuPop()
1000158a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000158e:	e9 90 0a 00 00       	jmp    10002023 <x87Handler(regs*)+0x144b>
10001593:	8d 50 20             	lea    edx,[eax+0x20]
10001596:	80 fa 07             	cmp    dl,0x7
10001599:	77 77                	ja     10001612 <x87Handler(regs*)+0xa3a>
1000159b:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
100015a1:	51                   	push   ecx
100015a2:	51                   	push   ecx
100015a3:	2d e0 00 00 00       	sub    eax,0xe0
100015a8:	50                   	push   eax
100015a9:	56                   	push   esi
100015aa:	e8 fc ff ff ff       	call   100015ab <x87Handler(regs*)+0x9d3>	100015ab: R_386_PC32	fpuGetReg(int)
100015af:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
100015b5:	83 ec 0c             	sub    esp,0xc
100015b8:	6a 00                	push   0x0
100015ba:	52                   	push   edx
100015bb:	e8 fc ff ff ff       	call   100015bc <x87Handler(regs*)+0x9e4>	100015bc: R_386_PC32	fpuGetReg(int)
100015c0:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
100015c6:	57                   	push   edi
100015c7:	b9 03 00 00 00       	mov    ecx,0x3
100015cc:	89 e7                	mov    edi,esp
100015ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015d0:	83 ec 0c             	sub    esp,0xc
100015d3:	b9 03 00 00 00       	mov    ecx,0x3
100015d8:	89 e7                	mov    edi,esp
100015da:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
100015e0:	89 d6                	mov    esi,edx
100015e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015e4:	50                   	push   eax
100015e5:	e8 fc ff ff ff       	call   100015e6 <x87Handler(regs*)+0xa0e>	100015e6: R_386_PC32	fpuSub(_Float80, _Float80)
100015ea:	83 c4 20             	add    esp,0x20
100015ed:	b9 03 00 00 00       	mov    ecx,0x3
100015f2:	89 e7                	mov    edi,esp
100015f4:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
100015fa:	89 c6                	mov    esi,eax
100015fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015fe:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001604:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001608:	2d e0 00 00 00       	sub    eax,0xe0
1000160d:	e9 67 ff ff ff       	jmp    10001579 <x87Handler(regs*)+0x9a1>
10001612:	8d 50 18             	lea    edx,[eax+0x18]
10001615:	80 fa 07             	cmp    dl,0x7
10001618:	0f 87 81 00 00 00    	ja     1000169f <x87Handler(regs*)+0xac7>
1000161e:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
10001624:	50                   	push   eax
10001625:	50                   	push   eax
10001626:	6a 00                	push   0x0
10001628:	56                   	push   esi
10001629:	e8 fc ff ff ff       	call   1000162a <x87Handler(regs*)+0xa52>	1000162a: R_386_PC32	fpuGetReg(int)
1000162e:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
10001634:	83 ec 0c             	sub    esp,0xc
10001637:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000163d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001641:	2d e8 00 00 00       	sub    eax,0xe8
10001646:	50                   	push   eax
10001647:	52                   	push   edx
10001648:	e8 fc ff ff ff       	call   10001649 <x87Handler(regs*)+0xa71>	10001649: R_386_PC32	fpuGetReg(int)
1000164d:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
10001653:	52                   	push   edx
10001654:	b9 03 00 00 00       	mov    ecx,0x3
10001659:	89 e7                	mov    edi,esp
1000165b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000165d:	83 ec 0c             	sub    esp,0xc
10001660:	b9 03 00 00 00       	mov    ecx,0x3
10001665:	89 e7                	mov    edi,esp
10001667:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
1000166d:	89 d6                	mov    esi,edx
1000166f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001671:	50                   	push   eax
10001672:	e8 fc ff ff ff       	call   10001673 <x87Handler(regs*)+0xa9b>	10001673: R_386_PC32	fpuSub(_Float80, _Float80)
10001677:	83 c4 20             	add    esp,0x20
1000167a:	b9 03 00 00 00       	mov    ecx,0x3
1000167f:	89 e7                	mov    edi,esp
10001681:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
10001687:	89 c6                	mov    esi,eax
10001689:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000168b:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001691:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001695:	2d e8 00 00 00       	sub    eax,0xe8
1000169a:	e9 da fe ff ff       	jmp    10001579 <x87Handler(regs*)+0x9a1>
1000169f:	8d 50 38             	lea    edx,[eax+0x38]
100016a2:	80 fa 07             	cmp    dl,0x7
100016a5:	77 77                	ja     1000171e <x87Handler(regs*)+0xb46>
100016a7:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
100016ad:	51                   	push   ecx
100016ae:	51                   	push   ecx
100016af:	2d c8 00 00 00       	sub    eax,0xc8
100016b4:	50                   	push   eax
100016b5:	56                   	push   esi
100016b6:	e8 fc ff ff ff       	call   100016b7 <x87Handler(regs*)+0xadf>	100016b7: R_386_PC32	fpuGetReg(int)
100016bb:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
100016c1:	83 ec 0c             	sub    esp,0xc
100016c4:	6a 00                	push   0x0
100016c6:	52                   	push   edx
100016c7:	e8 fc ff ff ff       	call   100016c8 <x87Handler(regs*)+0xaf0>	100016c8: R_386_PC32	fpuGetReg(int)
100016cc:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
100016d2:	57                   	push   edi
100016d3:	b9 03 00 00 00       	mov    ecx,0x3
100016d8:	89 e7                	mov    edi,esp
100016da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016dc:	83 ec 0c             	sub    esp,0xc
100016df:	b9 03 00 00 00       	mov    ecx,0x3
100016e4:	89 e7                	mov    edi,esp
100016e6:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
100016ec:	89 d6                	mov    esi,edx
100016ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016f0:	50                   	push   eax
100016f1:	e8 fc ff ff ff       	call   100016f2 <x87Handler(regs*)+0xb1a>	100016f2: R_386_PC32	fpuMultiply(_Float80, _Float80)
100016f6:	83 c4 20             	add    esp,0x20
100016f9:	b9 03 00 00 00       	mov    ecx,0x3
100016fe:	89 e7                	mov    edi,esp
10001700:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
10001706:	89 c6                	mov    esi,eax
10001708:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000170a:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001710:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001714:	2d c8 00 00 00       	sub    eax,0xc8
10001719:	e9 00 01 00 00       	jmp    1000181e <x87Handler(regs*)+0xc46>
1000171e:	3c f7                	cmp    al,0xf7
10001720:	76 7e                	jbe    100017a0 <x87Handler(regs*)+0xbc8>
10001722:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
10001728:	57                   	push   edi
10001729:	57                   	push   edi
1000172a:	6a 00                	push   0x0
1000172c:	56                   	push   esi
1000172d:	e8 fc ff ff ff       	call   1000172e <x87Handler(regs*)+0xb56>	1000172e: R_386_PC32	fpuGetReg(int)
10001732:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
10001738:	83 ec 0c             	sub    esp,0xc
1000173b:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001741:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001745:	2d f8 00 00 00       	sub    eax,0xf8
1000174a:	50                   	push   eax
1000174b:	52                   	push   edx
1000174c:	e8 fc ff ff ff       	call   1000174d <x87Handler(regs*)+0xb75>	1000174d: R_386_PC32	fpuGetReg(int)
10001751:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
10001757:	52                   	push   edx
10001758:	b9 03 00 00 00       	mov    ecx,0x3
1000175d:	89 e7                	mov    edi,esp
1000175f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001761:	83 ec 0c             	sub    esp,0xc
10001764:	b9 03 00 00 00       	mov    ecx,0x3
10001769:	89 e7                	mov    edi,esp
1000176b:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
10001771:	89 d6                	mov    esi,edx
10001773:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001775:	50                   	push   eax
10001776:	e8 fc ff ff ff       	call   10001777 <x87Handler(regs*)+0xb9f>	10001777: R_386_PC32	fpuDivide(_Float80, _Float80)
1000177b:	83 c4 20             	add    esp,0x20
1000177e:	b9 03 00 00 00       	mov    ecx,0x3
10001783:	89 e7                	mov    edi,esp
10001785:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
1000178b:	89 c6                	mov    esi,eax
1000178d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000178f:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001795:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001799:	2d f8 00 00 00       	sub    eax,0xf8
1000179e:	eb 7e                	jmp    1000181e <x87Handler(regs*)+0xc46>
100017a0:	8d 50 10             	lea    edx,[eax+0x10]
100017a3:	80 fa 07             	cmp    dl,0x7
100017a6:	0f 87 08 02 00 00    	ja     100019b4 <x87Handler(regs*)+0xddc>
100017ac:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
100017b2:	52                   	push   edx
100017b3:	52                   	push   edx
100017b4:	2d f0 00 00 00       	sub    eax,0xf0
100017b9:	50                   	push   eax
100017ba:	56                   	push   esi
100017bb:	e8 fc ff ff ff       	call   100017bc <x87Handler(regs*)+0xbe4>	100017bc: R_386_PC32	fpuGetReg(int)
100017c0:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
100017c6:	83 ec 0c             	sub    esp,0xc
100017c9:	6a 00                	push   0x0
100017cb:	52                   	push   edx
100017cc:	e8 fc ff ff ff       	call   100017cd <x87Handler(regs*)+0xbf5>	100017cd: R_386_PC32	fpuGetReg(int)
100017d1:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
100017d7:	51                   	push   ecx
100017d8:	b9 03 00 00 00       	mov    ecx,0x3
100017dd:	89 e7                	mov    edi,esp
100017df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017e1:	83 ec 0c             	sub    esp,0xc
100017e4:	b9 03 00 00 00       	mov    ecx,0x3
100017e9:	89 e7                	mov    edi,esp
100017eb:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
100017f1:	89 d6                	mov    esi,edx
100017f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017f5:	50                   	push   eax
100017f6:	e8 fc ff ff ff       	call   100017f7 <x87Handler(regs*)+0xc1f>	100017f7: R_386_PC32	fpuDivide(_Float80, _Float80)
100017fb:	83 c4 20             	add    esp,0x20
100017fe:	b9 03 00 00 00       	mov    ecx,0x3
10001803:	89 e7                	mov    edi,esp
10001805:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
1000180b:	89 c6                	mov    esi,eax
1000180d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000180f:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001815:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001819:	2d f0 00 00 00       	sub    eax,0xf0
1000181e:	50                   	push   eax
1000181f:	e9 0e fb ff ff       	jmp    10001332 <x87Handler(regs*)+0x75a>
10001824:	80 fa dd             	cmp    dl,0xdd
10001827:	0f 85 30 01 00 00    	jne    1000195d <x87Handler(regs*)+0xd85>
1000182d:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001833:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001837:	8d 50 30             	lea    edx,[eax+0x30]
1000183a:	80 fa 07             	cmp    dl,0x7
1000183d:	77 2e                	ja     1000186d <x87Handler(regs*)+0xc95>
1000183f:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
10001845:	50                   	push   eax
10001846:	50                   	push   eax
10001847:	6a 00                	push   0x0
10001849:	56                   	push   esi
1000184a:	e8 fc ff ff ff       	call   1000184b <x87Handler(regs*)+0xc73>	1000184b: R_386_PC32	fpuGetReg(int)
1000184f:	b9 03 00 00 00       	mov    ecx,0x3
10001854:	89 e7                	mov    edi,esp
10001856:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001858:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000185e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001862:	2d d0 00 00 00       	sub    eax,0xd0
10001867:	50                   	push   eax
10001868:	e9 60 f4 ff ff       	jmp    10000ccd <x87Handler(regs*)+0xf5>
1000186d:	8d 50 28             	lea    edx,[eax+0x28]
10001870:	80 fa 07             	cmp    dl,0x7
10001873:	77 2d                	ja     100018a2 <x87Handler(regs*)+0xcca>
10001875:	8d b5 94 fc ff ff    	lea    esi,[ebp-0x36c]
1000187b:	50                   	push   eax
1000187c:	50                   	push   eax
1000187d:	6a 00                	push   0x0
1000187f:	56                   	push   esi
10001880:	e8 fc ff ff ff       	call   10001881 <x87Handler(regs*)+0xca9>	10001881: R_386_PC32	fpuGetReg(int)
10001885:	b9 03 00 00 00       	mov    ecx,0x3
1000188a:	89 e7                	mov    edi,esp
1000188c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000188e:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001894:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001898:	2d d8 00 00 00       	sub    eax,0xd8
1000189d:	e9 d7 fc ff ff       	jmp    10001579 <x87Handler(regs*)+0x9a1>
100018a2:	8d 50 20             	lea    edx,[eax+0x20]
100018a5:	80 fa 07             	cmp    dl,0x7
100018a8:	77 52                	ja     100018fc <x87Handler(regs*)+0xd24>
100018aa:	8d b5 a0 fc ff ff    	lea    esi,[ebp-0x360]
100018b0:	57                   	push   edi
100018b1:	57                   	push   edi
100018b2:	2d e0 00 00 00       	sub    eax,0xe0
100018b7:	50                   	push   eax
100018b8:	56                   	push   esi
100018b9:	e8 fc ff ff ff       	call   100018ba <x87Handler(regs*)+0xce2>	100018ba: R_386_PC32	fpuGetReg(int)
100018be:	8d 85 ac fc ff ff    	lea    eax,[ebp-0x354]
100018c4:	83 ec 0c             	sub    esp,0xc
100018c7:	6a 00                	push   0x0
100018c9:	50                   	push   eax
100018ca:	e8 fc ff ff ff       	call   100018cb <x87Handler(regs*)+0xcf3>	100018cb: R_386_PC32	fpuGetReg(int)
100018cf:	50                   	push   eax
100018d0:	50                   	push   eax
100018d1:	b9 03 00 00 00       	mov    ecx,0x3
100018d6:	89 e7                	mov    edi,esp
100018d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018da:	83 ec 0c             	sub    esp,0xc
100018dd:	b9 03 00 00 00       	mov    ecx,0x3
100018e2:	89 e7                	mov    edi,esp
100018e4:	8d 85 ac fc ff ff    	lea    eax,[ebp-0x354]
100018ea:	89 c6                	mov    esi,eax
100018ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018ee:	e8 fc ff ff ff       	call   100018ef <x87Handler(regs*)+0xd17>	100018ef: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100018f3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100018f7:	e9 b8 06 00 00       	jmp    10001fb4 <x87Handler(regs*)+0x13dc>
100018fc:	8d 50 18             	lea    edx,[eax+0x18]
100018ff:	80 fa 07             	cmp    dl,0x7
10001902:	0f 87 5c f6 ff ff    	ja     10000f64 <x87Handler(regs*)+0x38c>
10001908:	8d b5 b8 fc ff ff    	lea    esi,[ebp-0x348]
1000190e:	52                   	push   edx
1000190f:	52                   	push   edx
10001910:	2d e8 00 00 00       	sub    eax,0xe8
10001915:	50                   	push   eax
10001916:	56                   	push   esi
10001917:	e8 fc ff ff ff       	call   10001918 <x87Handler(regs*)+0xd40>	10001918: R_386_PC32	fpuGetReg(int)
1000191c:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001922:	83 ec 0c             	sub    esp,0xc
10001925:	6a 00                	push   0x0
10001927:	50                   	push   eax
10001928:	e8 fc ff ff ff       	call   10001929 <x87Handler(regs*)+0xd51>	10001929: R_386_PC32	fpuGetReg(int)
1000192d:	51                   	push   ecx
1000192e:	51                   	push   ecx
1000192f:	b9 03 00 00 00       	mov    ecx,0x3
10001934:	89 e7                	mov    edi,esp
10001936:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001938:	83 ec 0c             	sub    esp,0xc
1000193b:	b9 03 00 00 00       	mov    ecx,0x3
10001940:	89 e7                	mov    edi,esp
10001942:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
10001948:	89 c6                	mov    esi,eax
1000194a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000194c:	e8 fc ff ff ff       	call   1000194d <x87Handler(regs*)+0xd75>	1000194d: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001951:	8d 45 dc             	lea    eax,[ebp-0x24]
10001954:	83 c4 24             	add    esp,0x24
10001957:	50                   	push   eax
10001958:	e9 28 fc ff ff       	jmp    10001585 <x87Handler(regs*)+0x9ad>
1000195d:	80 fa da             	cmp    dl,0xda
10001960:	0f 85 b6 00 00 00    	jne    10001a1c <x87Handler(regs*)+0xe44>
10001966:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
1000196c:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001970:	0f 85 60 03 00 00    	jne    10001cd6 <x87Handler(regs*)+0x10fe>
10001976:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
1000197c:	50                   	push   eax
1000197d:	50                   	push   eax
1000197e:	6a 01                	push   0x1
10001980:	56                   	push   esi
10001981:	e8 fc ff ff ff       	call   10001982 <x87Handler(regs*)+0xdaa>	10001982: R_386_PC32	fpuGetReg(int)
10001986:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
1000198c:	83 ec 0c             	sub    esp,0xc
1000198f:	6a 00                	push   0x0
10001991:	50                   	push   eax
10001992:	e8 fc ff ff ff       	call   10001993 <x87Handler(regs*)+0xdbb>	10001993: R_386_PC32	fpuGetReg(int)
10001997:	50                   	push   eax
10001998:	50                   	push   eax
10001999:	b9 03 00 00 00       	mov    ecx,0x3
1000199e:	89 e7                	mov    edi,esp
100019a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019a2:	83 ec 0c             	sub    esp,0xc
100019a5:	b9 03 00 00 00       	mov    ecx,0x3
100019aa:	89 e7                	mov    edi,esp
100019ac:	8d 85 dc fc ff ff    	lea    eax,[ebp-0x324]
100019b2:	eb 44                	jmp    100019f8 <x87Handler(regs*)+0xe20>
100019b4:	3c d9                	cmp    al,0xd9
100019b6:	0f 85 96 08 00 00    	jne    10002252 <x87Handler(regs*)+0x167a>
100019bc:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
100019c2:	51                   	push   ecx
100019c3:	51                   	push   ecx
100019c4:	6a 01                	push   0x1
100019c6:	56                   	push   esi
100019c7:	e8 fc ff ff ff       	call   100019c8 <x87Handler(regs*)+0xdf0>	100019c8: R_386_PC32	fpuGetReg(int)
100019cc:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
100019d2:	83 ec 0c             	sub    esp,0xc
100019d5:	6a 00                	push   0x0
100019d7:	50                   	push   eax
100019d8:	e8 fc ff ff ff       	call   100019d9 <x87Handler(regs*)+0xe01>	100019d9: R_386_PC32	fpuGetReg(int)
100019dd:	57                   	push   edi
100019de:	57                   	push   edi
100019df:	b9 03 00 00 00       	mov    ecx,0x3
100019e4:	89 e7                	mov    edi,esp
100019e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019e8:	83 ec 0c             	sub    esp,0xc
100019eb:	b9 03 00 00 00       	mov    ecx,0x3
100019f0:	89 e7                	mov    edi,esp
100019f2:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
100019f8:	89 c6                	mov    esi,eax
100019fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019fc:	e8 fc ff ff ff       	call   100019fd <x87Handler(regs*)+0xe25>	100019fd: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001a01:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a05:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001a08:	83 c4 24             	add    esp,0x24
10001a0b:	53                   	push   ebx
10001a0c:	e8 fc ff ff ff       	call   10001a0d <x87Handler(regs*)+0xe35>	10001a0d: R_386_PC32	fpuPop()
10001a11:	53                   	push   ebx
10001a12:	e8 fc ff ff ff       	call   10001a13 <x87Handler(regs*)+0xe3b>	10001a13: R_386_PC32	fpuPop()
10001a17:	e9 07 06 00 00       	jmp    10002023 <x87Handler(regs*)+0x144b>
10001a1c:	80 fa df             	cmp    dl,0xdf
10001a1f:	0f 85 05 04 00 00    	jne    10001e2a <x87Handler(regs*)+0x1252>
10001a25:	8b 85 90 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x670]
10001a2b:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001a2f:	0f 85 9b 08 00 00    	jne    100022d0 <x87Handler(regs*)+0x16f8>
10001a35:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001a38: R_386_32	fpuState
10001a3c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001a40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001a44:	e9 90 f2 ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001a49:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001a4f:	84 d2                	test   dl,dl
10001a51:	75 66                	jne    10001ab9 <x87Handler(regs*)+0xee1>
10001a53:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
10001a59:	50                   	push   eax
10001a5a:	50                   	push   eax
10001a5b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001a61:	ff 30                	push   DWORD PTR [eax]
10001a63:	56                   	push   esi
10001a64:	e8 fc ff ff ff       	call   10001a65 <x87Handler(regs*)+0xe8d>	10001a65: R_386_PC32	fpu32ToInternal(unsigned int)
10001a69:	8d 95 0c fd ff ff    	lea    edx,[ebp-0x2f4]
10001a6f:	83 ec 0c             	sub    esp,0xc
10001a72:	6a 00                	push   0x0
10001a74:	52                   	push   edx
10001a75:	e8 fc ff ff ff       	call   10001a76 <x87Handler(regs*)+0xe9e>	10001a76: R_386_PC32	fpuGetReg(int)
10001a7a:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001a80:	52                   	push   edx
10001a81:	b9 03 00 00 00       	mov    ecx,0x3
10001a86:	89 e7                	mov    edi,esp
10001a88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a8a:	83 ec 0c             	sub    esp,0xc
10001a8d:	b9 03 00 00 00       	mov    ecx,0x3
10001a92:	89 e7                	mov    edi,esp
10001a94:	8d 95 0c fd ff ff    	lea    edx,[ebp-0x2f4]
10001a9a:	89 d6                	mov    esi,edx
10001a9c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a9e:	50                   	push   eax
10001a9f:	e8 fc ff ff ff       	call   10001aa0 <x87Handler(regs*)+0xec8>	10001aa0: R_386_PC32	fpuAdd(_Float80, _Float80)
10001aa4:	83 c4 20             	add    esp,0x20
10001aa7:	b9 03 00 00 00       	mov    ecx,0x3
10001aac:	89 e7                	mov    edi,esp
10001aae:	8d 85 18 fd ff ff    	lea    eax,[ebp-0x2e8]
10001ab4:	e9 fe 07 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001ab9:	80 fa 01             	cmp    dl,0x1
10001abc:	75 66                	jne    10001b24 <x87Handler(regs*)+0xf4c>
10001abe:	8d b5 24 fd ff ff    	lea    esi,[ebp-0x2dc]
10001ac4:	51                   	push   ecx
10001ac5:	51                   	push   ecx
10001ac6:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001acc:	ff 30                	push   DWORD PTR [eax]
10001ace:	56                   	push   esi
10001acf:	e8 fc ff ff ff       	call   10001ad0 <x87Handler(regs*)+0xef8>	10001ad0: R_386_PC32	fpu32ToInternal(unsigned int)
10001ad4:	8d 95 30 fd ff ff    	lea    edx,[ebp-0x2d0]
10001ada:	83 ec 0c             	sub    esp,0xc
10001add:	6a 00                	push   0x0
10001adf:	52                   	push   edx
10001ae0:	e8 fc ff ff ff       	call   10001ae1 <x87Handler(regs*)+0xf09>	10001ae1: R_386_PC32	fpuGetReg(int)
10001ae5:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001aeb:	57                   	push   edi
10001aec:	b9 03 00 00 00       	mov    ecx,0x3
10001af1:	89 e7                	mov    edi,esp
10001af3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001af5:	83 ec 0c             	sub    esp,0xc
10001af8:	b9 03 00 00 00       	mov    ecx,0x3
10001afd:	89 e7                	mov    edi,esp
10001aff:	8d 95 30 fd ff ff    	lea    edx,[ebp-0x2d0]
10001b05:	89 d6                	mov    esi,edx
10001b07:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b09:	50                   	push   eax
10001b0a:	e8 fc ff ff ff       	call   10001b0b <x87Handler(regs*)+0xf33>	10001b0b: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001b0f:	83 c4 20             	add    esp,0x20
10001b12:	b9 03 00 00 00       	mov    ecx,0x3
10001b17:	89 e7                	mov    edi,esp
10001b19:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001b1f:	e9 93 07 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001b24:	80 fa 04             	cmp    dl,0x4
10001b27:	75 66                	jne    10001b8f <x87Handler(regs*)+0xfb7>
10001b29:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001b2f:	50                   	push   eax
10001b30:	50                   	push   eax
10001b31:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001b37:	ff 30                	push   DWORD PTR [eax]
10001b39:	56                   	push   esi
10001b3a:	e8 fc ff ff ff       	call   10001b3b <x87Handler(regs*)+0xf63>	10001b3b: R_386_PC32	fpu32ToInternal(unsigned int)
10001b3f:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b45:	83 ec 0c             	sub    esp,0xc
10001b48:	6a 00                	push   0x0
10001b4a:	52                   	push   edx
10001b4b:	e8 fc ff ff ff       	call   10001b4c <x87Handler(regs*)+0xf74>	10001b4c: R_386_PC32	fpuGetReg(int)
10001b50:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b56:	52                   	push   edx
10001b57:	b9 03 00 00 00       	mov    ecx,0x3
10001b5c:	89 e7                	mov    edi,esp
10001b5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b60:	83 ec 0c             	sub    esp,0xc
10001b63:	b9 03 00 00 00       	mov    ecx,0x3
10001b68:	89 e7                	mov    edi,esp
10001b6a:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b70:	89 d6                	mov    esi,edx
10001b72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b74:	50                   	push   eax
10001b75:	e8 fc ff ff ff       	call   10001b76 <x87Handler(regs*)+0xf9e>	10001b76: R_386_PC32	fpuSub(_Float80, _Float80)
10001b7a:	83 c4 20             	add    esp,0x20
10001b7d:	b9 03 00 00 00       	mov    ecx,0x3
10001b82:	89 e7                	mov    edi,esp
10001b84:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b8a:	e9 28 07 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001b8f:	80 fa 05             	cmp    dl,0x5
10001b92:	75 66                	jne    10001bfa <x87Handler(regs*)+0x1022>
10001b94:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001b9a:	51                   	push   ecx
10001b9b:	51                   	push   ecx
10001b9c:	6a 00                	push   0x0
10001b9e:	56                   	push   esi
10001b9f:	e8 fc ff ff ff       	call   10001ba0 <x87Handler(regs*)+0xfc8>	10001ba0: R_386_PC32	fpuGetReg(int)
10001ba4:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001baa:	83 ec 0c             	sub    esp,0xc
10001bad:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001bb3:	ff 32                	push   DWORD PTR [edx]
10001bb5:	50                   	push   eax
10001bb6:	e8 fc ff ff ff       	call   10001bb7 <x87Handler(regs*)+0xfdf>	10001bb7: R_386_PC32	fpu32ToInternal(unsigned int)
10001bbb:	8d 95 84 fd ff ff    	lea    edx,[ebp-0x27c]
10001bc1:	57                   	push   edi
10001bc2:	b9 03 00 00 00       	mov    ecx,0x3
10001bc7:	89 e7                	mov    edi,esp
10001bc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bcb:	83 ec 0c             	sub    esp,0xc
10001bce:	b9 03 00 00 00       	mov    ecx,0x3
10001bd3:	89 e7                	mov    edi,esp
10001bd5:	8d 85 78 fd ff ff    	lea    eax,[ebp-0x288]
10001bdb:	89 c6                	mov    esi,eax
10001bdd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bdf:	52                   	push   edx
10001be0:	e8 fc ff ff ff       	call   10001be1 <x87Handler(regs*)+0x1009>	10001be1: R_386_PC32	fpuSub(_Float80, _Float80)
10001be5:	83 c4 20             	add    esp,0x20
10001be8:	b9 03 00 00 00       	mov    ecx,0x3
10001bed:	89 e7                	mov    edi,esp
10001bef:	8d 95 84 fd ff ff    	lea    edx,[ebp-0x27c]
10001bf5:	e9 e6 05 00 00       	jmp    100021e0 <x87Handler(regs*)+0x1608>
10001bfa:	80 fa 06             	cmp    dl,0x6
10001bfd:	75 66                	jne    10001c65 <x87Handler(regs*)+0x108d>
10001bff:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001c05:	50                   	push   eax
10001c06:	50                   	push   eax
10001c07:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001c0d:	ff 30                	push   DWORD PTR [eax]
10001c0f:	56                   	push   esi
10001c10:	e8 fc ff ff ff       	call   10001c11 <x87Handler(regs*)+0x1039>	10001c11: R_386_PC32	fpu32ToInternal(unsigned int)
10001c15:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001c1b:	83 ec 0c             	sub    esp,0xc
10001c1e:	6a 00                	push   0x0
10001c20:	52                   	push   edx
10001c21:	e8 fc ff ff ff       	call   10001c22 <x87Handler(regs*)+0x104a>	10001c22: R_386_PC32	fpuGetReg(int)
10001c26:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c2c:	52                   	push   edx
10001c2d:	b9 03 00 00 00       	mov    ecx,0x3
10001c32:	89 e7                	mov    edi,esp
10001c34:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c36:	83 ec 0c             	sub    esp,0xc
10001c39:	b9 03 00 00 00       	mov    ecx,0x3
10001c3e:	89 e7                	mov    edi,esp
10001c40:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001c46:	89 d6                	mov    esi,edx
10001c48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c4a:	50                   	push   eax
10001c4b:	e8 fc ff ff ff       	call   10001c4c <x87Handler(regs*)+0x1074>	10001c4c: R_386_PC32	fpuDivide(_Float80, _Float80)
10001c50:	83 c4 20             	add    esp,0x20
10001c53:	b9 03 00 00 00       	mov    ecx,0x3
10001c58:	89 e7                	mov    edi,esp
10001c5a:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c60:	e9 52 06 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001c65:	31 c0                	xor    eax,eax
10001c67:	80 fa 07             	cmp    dl,0x7
10001c6a:	0f 85 bc 06 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10001c70:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001c76:	57                   	push   edi
10001c77:	57                   	push   edi
10001c78:	6a 00                	push   0x0
10001c7a:	56                   	push   esi
10001c7b:	e8 fc ff ff ff       	call   10001c7c <x87Handler(regs*)+0x10a4>	10001c7c: R_386_PC32	fpuGetReg(int)
10001c80:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001c86:	83 ec 0c             	sub    esp,0xc
10001c89:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
10001c8f:	ff 32                	push   DWORD PTR [edx]
10001c91:	50                   	push   eax
10001c92:	e8 fc ff ff ff       	call   10001c93 <x87Handler(regs*)+0x10bb>	10001c93: R_386_PC32	fpu32ToInternal(unsigned int)
10001c97:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001c9d:	50                   	push   eax
10001c9e:	b9 03 00 00 00       	mov    ecx,0x3
10001ca3:	89 e7                	mov    edi,esp
10001ca5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ca7:	83 ec 0c             	sub    esp,0xc
10001caa:	b9 03 00 00 00       	mov    ecx,0x3
10001caf:	89 e7                	mov    edi,esp
10001cb1:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001cb7:	89 c6                	mov    esi,eax
10001cb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cbb:	52                   	push   edx
10001cbc:	e8 fc ff ff ff       	call   10001cbd <x87Handler(regs*)+0x10e5>	10001cbd: R_386_PC32	fpuDivide(_Float80, _Float80)
10001cc1:	83 c4 20             	add    esp,0x20
10001cc4:	b9 03 00 00 00       	mov    ecx,0x3
10001cc9:	89 e7                	mov    edi,esp
10001ccb:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001cd1:	e9 0a 05 00 00       	jmp    100021e0 <x87Handler(regs*)+0x1608>
10001cd6:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001cdc:	80 fa 01             	cmp    dl,0x1
10001cdf:	75 69                	jne    10001d4a <x87Handler(regs*)+0x1172>
10001ce1:	8d b5 f0 fd ff ff    	lea    esi,[ebp-0x210]
10001ce7:	50                   	push   eax
10001ce8:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001cee:	8b 00                	mov    eax,DWORD PTR [eax]
10001cf0:	31 d2                	xor    edx,edx
10001cf2:	52                   	push   edx
10001cf3:	50                   	push   eax
10001cf4:	56                   	push   esi
10001cf5:	e8 fc ff ff ff       	call   10001cf6 <x87Handler(regs*)+0x111e>	10001cf6: R_386_PC32	fpuLongToFloat(long long)
10001cfa:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d00:	83 ec 0c             	sub    esp,0xc
10001d03:	6a 00                	push   0x0
10001d05:	52                   	push   edx
10001d06:	e8 fc ff ff ff       	call   10001d07 <x87Handler(regs*)+0x112f>	10001d07: R_386_PC32	fpuGetReg(int)
10001d0b:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d11:	52                   	push   edx
10001d12:	b9 03 00 00 00       	mov    ecx,0x3
10001d17:	89 e7                	mov    edi,esp
10001d19:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d1b:	83 ec 0c             	sub    esp,0xc
10001d1e:	b9 03 00 00 00       	mov    ecx,0x3
10001d23:	89 e7                	mov    edi,esp
10001d25:	8d 95 fc fd ff ff    	lea    edx,[ebp-0x204]
10001d2b:	89 d6                	mov    esi,edx
10001d2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d2f:	50                   	push   eax
10001d30:	e8 fc ff ff ff       	call   10001d31 <x87Handler(regs*)+0x1159>	10001d31: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001d35:	83 c4 20             	add    esp,0x20
10001d38:	b9 03 00 00 00       	mov    ecx,0x3
10001d3d:	89 e7                	mov    edi,esp
10001d3f:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d45:	e9 6d 05 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001d4a:	80 fa 04             	cmp    dl,0x4
10001d4d:	75 69                	jne    10001db8 <x87Handler(regs*)+0x11e0>
10001d4f:	8d b5 14 fe ff ff    	lea    esi,[ebp-0x1ec]
10001d55:	51                   	push   ecx
10001d56:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001d5c:	8b 00                	mov    eax,DWORD PTR [eax]
10001d5e:	31 d2                	xor    edx,edx
10001d60:	52                   	push   edx
10001d61:	50                   	push   eax
10001d62:	56                   	push   esi
10001d63:	e8 fc ff ff ff       	call   10001d64 <x87Handler(regs*)+0x118c>	10001d64: R_386_PC32	fpuLongToFloat(long long)
10001d68:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001d6e:	83 ec 0c             	sub    esp,0xc
10001d71:	6a 00                	push   0x0
10001d73:	52                   	push   edx
10001d74:	e8 fc ff ff ff       	call   10001d75 <x87Handler(regs*)+0x119d>	10001d75: R_386_PC32	fpuGetReg(int)
10001d79:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001d7f:	57                   	push   edi
10001d80:	b9 03 00 00 00       	mov    ecx,0x3
10001d85:	89 e7                	mov    edi,esp
10001d87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d89:	83 ec 0c             	sub    esp,0xc
10001d8c:	b9 03 00 00 00       	mov    ecx,0x3
10001d91:	89 e7                	mov    edi,esp
10001d93:	8d 95 20 fe ff ff    	lea    edx,[ebp-0x1e0]
10001d99:	89 d6                	mov    esi,edx
10001d9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d9d:	50                   	push   eax
10001d9e:	e8 fc ff ff ff       	call   10001d9f <x87Handler(regs*)+0x11c7>	10001d9f: R_386_PC32	fpuSub(_Float80, _Float80)
10001da3:	83 c4 20             	add    esp,0x20
10001da6:	b9 03 00 00 00       	mov    ecx,0x3
10001dab:	89 e7                	mov    edi,esp
10001dad:	8d 85 2c fe ff ff    	lea    eax,[ebp-0x1d4]
10001db3:	e9 ff 04 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001db8:	31 c0                	xor    eax,eax
10001dba:	80 fa 07             	cmp    dl,0x7
10001dbd:	0f 85 69 05 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10001dc3:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001dc9:	50                   	push   eax
10001dca:	50                   	push   eax
10001dcb:	6a 00                	push   0x0
10001dcd:	56                   	push   esi
10001dce:	e8 fc ff ff ff       	call   10001dcf <x87Handler(regs*)+0x11f7>	10001dcf: R_386_PC32	fpuGetReg(int)
10001dd3:	50                   	push   eax
10001dd4:	50                   	push   eax
10001dd5:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001ddb:	8b 00                	mov    eax,DWORD PTR [eax]
10001ddd:	31 d2                	xor    edx,edx
10001ddf:	52                   	push   edx
10001de0:	50                   	push   eax
10001de1:	8d 85 44 fe ff ff    	lea    eax,[ebp-0x1bc]
10001de7:	50                   	push   eax
10001de8:	e8 fc ff ff ff       	call   10001de9 <x87Handler(regs*)+0x1211>	10001de9: R_386_PC32	fpuLongToFloat(long long)
10001ded:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001df3:	52                   	push   edx
10001df4:	b9 03 00 00 00       	mov    ecx,0x3
10001df9:	89 e7                	mov    edi,esp
10001dfb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dfd:	83 ec 0c             	sub    esp,0xc
10001e00:	b9 03 00 00 00       	mov    ecx,0x3
10001e05:	89 e7                	mov    edi,esp
10001e07:	8d b5 44 fe ff ff    	lea    esi,[ebp-0x1bc]
10001e0d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e0f:	50                   	push   eax
10001e10:	e8 fc ff ff ff       	call   10001e11 <x87Handler(regs*)+0x1239>	10001e11: R_386_PC32	fpuDivide(_Float80, _Float80)
10001e15:	83 c4 20             	add    esp,0x20
10001e18:	b9 03 00 00 00       	mov    ecx,0x3
10001e1d:	89 e7                	mov    edi,esp
10001e1f:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001e25:	e9 8d 04 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001e2a:	31 c0                	xor    eax,eax
10001e2c:	80 fa db             	cmp    dl,0xdb
10001e2f:	0f 85 f7 04 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10001e35:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001e3b:	84 d2                	test   dl,dl
10001e3d:	0f 85 66 f1 ff ff    	jne    10000fa9 <x87Handler(regs*)+0x3d1>
10001e43:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001e49:	50                   	push   eax
10001e4a:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e50:	8b 00                	mov    eax,DWORD PTR [eax]
10001e52:	31 d2                	xor    edx,edx
10001e54:	52                   	push   edx
10001e55:	50                   	push   eax
10001e56:	e9 8f 04 00 00       	jmp    100022ea <x87Handler(regs*)+0x1712>
10001e5b:	31 c0                	xor    eax,eax
10001e5d:	80 fa 03             	cmp    dl,0x3
10001e60:	0f 85 c6 04 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10001e66:	8d b5 74 fe ff ff    	lea    esi,[ebp-0x18c]
10001e6c:	83 ec 0c             	sub    esp,0xc
10001e6f:	56                   	push   esi
10001e70:	e8 fc ff ff ff       	call   10001e71 <x87Handler(regs*)+0x1299>	10001e71: R_386_PC32	fpuPop()
10001e75:	e9 48 f1 ff ff       	jmp    10000fc2 <x87Handler(regs*)+0x3ea>
10001e7a:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
10001e80:	84 d2                	test   dl,dl
10001e82:	75 68                	jne    10001eec <x87Handler(regs*)+0x1314>
10001e84:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001e8a:	51                   	push   ecx
10001e8b:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001e91:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001e94:	ff 30                	push   DWORD PTR [eax]
10001e96:	56                   	push   esi
10001e97:	e8 fc ff ff ff       	call   10001e98 <x87Handler(regs*)+0x12c0>	10001e98: R_386_PC32	fpu64ToInternal(unsigned long long)
10001e9c:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001ea2:	83 ec 0c             	sub    esp,0xc
10001ea5:	6a 00                	push   0x0
10001ea7:	52                   	push   edx
10001ea8:	e8 fc ff ff ff       	call   10001ea9 <x87Handler(regs*)+0x12d1>	10001ea9: R_386_PC32	fpuGetReg(int)
10001ead:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001eb3:	57                   	push   edi
10001eb4:	b9 03 00 00 00       	mov    ecx,0x3
10001eb9:	89 e7                	mov    edi,esp
10001ebb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ebd:	83 ec 0c             	sub    esp,0xc
10001ec0:	b9 03 00 00 00       	mov    ecx,0x3
10001ec5:	89 e7                	mov    edi,esp
10001ec7:	8d 95 8c fe ff ff    	lea    edx,[ebp-0x174]
10001ecd:	89 d6                	mov    esi,edx
10001ecf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ed1:	50                   	push   eax
10001ed2:	e8 fc ff ff ff       	call   10001ed3 <x87Handler(regs*)+0x12fb>	10001ed3: R_386_PC32	fpuAdd(_Float80, _Float80)
10001ed7:	83 c4 20             	add    esp,0x20
10001eda:	b9 03 00 00 00       	mov    ecx,0x3
10001edf:	89 e7                	mov    edi,esp
10001ee1:	8d 85 98 fe ff ff    	lea    eax,[ebp-0x168]
10001ee7:	e9 cb 03 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001eec:	80 fa 01             	cmp    dl,0x1
10001eef:	75 68                	jne    10001f59 <x87Handler(regs*)+0x1381>
10001ef1:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001ef7:	50                   	push   eax
10001ef8:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001efe:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f01:	ff 30                	push   DWORD PTR [eax]
10001f03:	56                   	push   esi
10001f04:	e8 fc ff ff ff       	call   10001f05 <x87Handler(regs*)+0x132d>	10001f05: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f09:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f0f:	83 ec 0c             	sub    esp,0xc
10001f12:	6a 00                	push   0x0
10001f14:	52                   	push   edx
10001f15:	e8 fc ff ff ff       	call   10001f16 <x87Handler(regs*)+0x133e>	10001f16: R_386_PC32	fpuGetReg(int)
10001f1a:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f20:	52                   	push   edx
10001f21:	b9 03 00 00 00       	mov    ecx,0x3
10001f26:	89 e7                	mov    edi,esp
10001f28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f2a:	83 ec 0c             	sub    esp,0xc
10001f2d:	b9 03 00 00 00       	mov    ecx,0x3
10001f32:	89 e7                	mov    edi,esp
10001f34:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001f3a:	89 d6                	mov    esi,edx
10001f3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f3e:	50                   	push   eax
10001f3f:	e8 fc ff ff ff       	call   10001f40 <x87Handler(regs*)+0x1368>	10001f40: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f44:	83 c4 20             	add    esp,0x20
10001f47:	b9 03 00 00 00       	mov    ecx,0x3
10001f4c:	89 e7                	mov    edi,esp
10001f4e:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f54:	e9 5e 03 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10001f59:	80 fa 02             	cmp    dl,0x2
10001f5c:	75 5e                	jne    10001fbc <x87Handler(regs*)+0x13e4>
10001f5e:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f64:	50                   	push   eax
10001f65:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001f6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f6e:	ff 30                	push   DWORD PTR [eax]
10001f70:	56                   	push   esi
10001f71:	e8 fc ff ff ff       	call   10001f72 <x87Handler(regs*)+0x139a>	10001f72: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f76:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001f7c:	83 ec 0c             	sub    esp,0xc
10001f7f:	6a 00                	push   0x0
10001f81:	50                   	push   eax
10001f82:	e8 fc ff ff ff       	call   10001f83 <x87Handler(regs*)+0x13ab>	10001f83: R_386_PC32	fpuGetReg(int)
10001f87:	50                   	push   eax
10001f88:	50                   	push   eax
10001f89:	b9 03 00 00 00       	mov    ecx,0x3
10001f8e:	89 e7                	mov    edi,esp
10001f90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f92:	83 ec 0c             	sub    esp,0xc
10001f95:	b9 03 00 00 00       	mov    ecx,0x3
10001f9a:	89 e7                	mov    edi,esp
10001f9c:	8d 85 d4 fe ff ff    	lea    eax,[ebp-0x12c]
10001fa2:	89 c6                	mov    esi,eax
10001fa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fa6:	e8 fc ff ff ff       	call   10001fa7 <x87Handler(regs*)+0x13cf>	10001fa7: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fab:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10001fb1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001fb4:	83 c4 30             	add    esp,0x30
10001fb7:	e9 1d ed ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
10001fbc:	80 fa 03             	cmp    dl,0x3
10001fbf:	75 6a                	jne    1000202b <x87Handler(regs*)+0x1453>
10001fc1:	8d b5 e0 fe ff ff    	lea    esi,[ebp-0x120]
10001fc7:	51                   	push   ecx
10001fc8:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10001fce:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001fd1:	ff 30                	push   DWORD PTR [eax]
10001fd3:	56                   	push   esi
10001fd4:	e8 fc ff ff ff       	call   10001fd5 <x87Handler(regs*)+0x13fd>	10001fd5: R_386_PC32	fpu64ToInternal(unsigned long long)
10001fd9:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10001fdf:	83 ec 0c             	sub    esp,0xc
10001fe2:	6a 00                	push   0x0
10001fe4:	50                   	push   eax
10001fe5:	e8 fc ff ff ff       	call   10001fe6 <x87Handler(regs*)+0x140e>	10001fe6: R_386_PC32	fpuGetReg(int)
10001fea:	57                   	push   edi
10001feb:	57                   	push   edi
10001fec:	b9 03 00 00 00       	mov    ecx,0x3
10001ff1:	89 e7                	mov    edi,esp
10001ff3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ff5:	83 ec 0c             	sub    esp,0xc
10001ff8:	b9 03 00 00 00       	mov    ecx,0x3
10001ffd:	89 e7                	mov    edi,esp
10001fff:	8d 85 ec fe ff ff    	lea    eax,[ebp-0x114]
10002005:	89 c6                	mov    esi,eax
10002007:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002009:	e8 fc ff ff ff       	call   1000200a <x87Handler(regs*)+0x1432>	1000200a: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000200e:	8d 45 dc             	lea    eax,[ebp-0x24]
10002011:	83 c4 24             	add    esp,0x24
10002014:	50                   	push   eax
10002015:	e8 fc ff ff ff       	call   10002016 <x87Handler(regs*)+0x143e>	10002016: R_386_PC32	fpuPop()
1000201a:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
10002020:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002023:	83 c4 0c             	add    esp,0xc
10002026:	e9 ae ec ff ff       	jmp    10000cd9 <x87Handler(regs*)+0x101>
1000202b:	80 fa 04             	cmp    dl,0x4
1000202e:	75 68                	jne    10002098 <x87Handler(regs*)+0x14c0>
10002030:	8d b5 f8 fe ff ff    	lea    esi,[ebp-0x108]
10002036:	50                   	push   eax
10002037:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000203d:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002040:	ff 30                	push   DWORD PTR [eax]
10002042:	56                   	push   esi
10002043:	e8 fc ff ff ff       	call   10002044 <x87Handler(regs*)+0x146c>	10002044: R_386_PC32	fpu64ToInternal(unsigned long long)
10002048:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
1000204e:	83 ec 0c             	sub    esp,0xc
10002051:	6a 00                	push   0x0
10002053:	52                   	push   edx
10002054:	e8 fc ff ff ff       	call   10002055 <x87Handler(regs*)+0x147d>	10002055: R_386_PC32	fpuGetReg(int)
10002059:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
1000205f:	52                   	push   edx
10002060:	b9 03 00 00 00       	mov    ecx,0x3
10002065:	89 e7                	mov    edi,esp
10002067:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002069:	83 ec 0c             	sub    esp,0xc
1000206c:	b9 03 00 00 00       	mov    ecx,0x3
10002071:	89 e7                	mov    edi,esp
10002073:	8d 95 04 ff ff ff    	lea    edx,[ebp-0xfc]
10002079:	89 d6                	mov    esi,edx
1000207b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000207d:	50                   	push   eax
1000207e:	e8 fc ff ff ff       	call   1000207f <x87Handler(regs*)+0x14a7>	1000207f: R_386_PC32	fpuSub(_Float80, _Float80)
10002083:	83 c4 20             	add    esp,0x20
10002086:	b9 03 00 00 00       	mov    ecx,0x3
1000208b:	89 e7                	mov    edi,esp
1000208d:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002093:	e9 1f 02 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10002098:	80 fa 05             	cmp    dl,0x5
1000209b:	75 68                	jne    10002105 <x87Handler(regs*)+0x152d>
1000209d:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
100020a3:	51                   	push   ecx
100020a4:	51                   	push   ecx
100020a5:	6a 00                	push   0x0
100020a7:	56                   	push   esi
100020a8:	e8 fc ff ff ff       	call   100020a9 <x87Handler(regs*)+0x14d1>	100020a9: R_386_PC32	fpuGetReg(int)
100020ad:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
100020b3:	57                   	push   edi
100020b4:	57                   	push   edi
100020b5:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
100020bb:	ff 72 04             	push   DWORD PTR [edx+0x4]
100020be:	ff 32                	push   DWORD PTR [edx]
100020c0:	50                   	push   eax
100020c1:	e8 fc ff ff ff       	call   100020c2 <x87Handler(regs*)+0x14ea>	100020c2: R_386_PC32	fpu64ToInternal(unsigned long long)
100020c6:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
100020cc:	50                   	push   eax
100020cd:	b9 03 00 00 00       	mov    ecx,0x3
100020d2:	89 e7                	mov    edi,esp
100020d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020d6:	83 ec 0c             	sub    esp,0xc
100020d9:	b9 03 00 00 00       	mov    ecx,0x3
100020de:	89 e7                	mov    edi,esp
100020e0:	8d 85 28 ff ff ff    	lea    eax,[ebp-0xd8]
100020e6:	89 c6                	mov    esi,eax
100020e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020ea:	52                   	push   edx
100020eb:	e8 fc ff ff ff       	call   100020ec <x87Handler(regs*)+0x1514>	100020ec: R_386_PC32	fpuSub(_Float80, _Float80)
100020f0:	83 c4 20             	add    esp,0x20
100020f3:	b9 03 00 00 00       	mov    ecx,0x3
100020f8:	89 e7                	mov    edi,esp
100020fa:	8d 95 34 ff ff ff    	lea    edx,[ebp-0xcc]
10002100:	e9 db 00 00 00       	jmp    100021e0 <x87Handler(regs*)+0x1608>
10002105:	80 fa 06             	cmp    dl,0x6
10002108:	75 68                	jne    10002172 <x87Handler(regs*)+0x159a>
1000210a:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
10002110:	57                   	push   edi
10002111:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
10002117:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000211a:	ff 30                	push   DWORD PTR [eax]
1000211c:	56                   	push   esi
1000211d:	e8 fc ff ff ff       	call   1000211e <x87Handler(regs*)+0x1546>	1000211e: R_386_PC32	fpu64ToInternal(unsigned long long)
10002122:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10002128:	83 ec 0c             	sub    esp,0xc
1000212b:	6a 00                	push   0x0
1000212d:	52                   	push   edx
1000212e:	e8 fc ff ff ff       	call   1000212f <x87Handler(regs*)+0x1557>	1000212f: R_386_PC32	fpuGetReg(int)
10002133:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
10002139:	52                   	push   edx
1000213a:	b9 03 00 00 00       	mov    ecx,0x3
1000213f:	89 e7                	mov    edi,esp
10002141:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002143:	83 ec 0c             	sub    esp,0xc
10002146:	b9 03 00 00 00       	mov    ecx,0x3
1000214b:	89 e7                	mov    edi,esp
1000214d:	8d 95 4c ff ff ff    	lea    edx,[ebp-0xb4]
10002153:	89 d6                	mov    esi,edx
10002155:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002157:	50                   	push   eax
10002158:	e8 fc ff ff ff       	call   10002159 <x87Handler(regs*)+0x1581>	10002159: R_386_PC32	fpuDivide(_Float80, _Float80)
1000215d:	83 c4 20             	add    esp,0x20
10002160:	b9 03 00 00 00       	mov    ecx,0x3
10002165:	89 e7                	mov    edi,esp
10002167:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
1000216d:	e9 45 01 00 00       	jmp    100022b7 <x87Handler(regs*)+0x16df>
10002172:	31 c0                	xor    eax,eax
10002174:	80 fa 07             	cmp    dl,0x7
10002177:	0f 85 af 01 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
1000217d:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
10002183:	50                   	push   eax
10002184:	50                   	push   eax
10002185:	6a 00                	push   0x0
10002187:	56                   	push   esi
10002188:	e8 fc ff ff ff       	call   10002189 <x87Handler(regs*)+0x15b1>	10002189: R_386_PC32	fpuGetReg(int)
1000218d:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
10002193:	52                   	push   edx
10002194:	52                   	push   edx
10002195:	8b 95 94 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x66c]
1000219b:	ff 72 04             	push   DWORD PTR [edx+0x4]
1000219e:	ff 32                	push   DWORD PTR [edx]
100021a0:	50                   	push   eax
100021a1:	e8 fc ff ff ff       	call   100021a2 <x87Handler(regs*)+0x15ca>	100021a2: R_386_PC32	fpu64ToInternal(unsigned long long)
100021a6:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100021ac:	51                   	push   ecx
100021ad:	b9 03 00 00 00       	mov    ecx,0x3
100021b2:	89 e7                	mov    edi,esp
100021b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021b6:	83 ec 0c             	sub    esp,0xc
100021b9:	b9 03 00 00 00       	mov    ecx,0x3
100021be:	89 e7                	mov    edi,esp
100021c0:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100021c6:	89 c6                	mov    esi,eax
100021c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021ca:	52                   	push   edx
100021cb:	e8 fc ff ff ff       	call   100021cc <x87Handler(regs*)+0x15f4>	100021cc: R_386_PC32	fpuDivide(_Float80, _Float80)
100021d0:	83 c4 20             	add    esp,0x20
100021d3:	b9 03 00 00 00       	mov    ecx,0x3
100021d8:	89 e7                	mov    edi,esp
100021da:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100021e0:	89 d6                	mov    esi,edx
100021e2:	e9 d2 00 00 00       	jmp    100022b9 <x87Handler(regs*)+0x16e1>
100021e7:	80 fa 02             	cmp    dl,0x2
100021ea:	75 2e                	jne    1000221a <x87Handler(regs*)+0x1642>
100021ec:	8d 75 94             	lea    esi,[ebp-0x6c]
100021ef:	57                   	push   edi
100021f0:	57                   	push   edi
100021f1:	6a 00                	push   0x0
100021f3:	56                   	push   esi
100021f4:	e8 fc ff ff ff       	call   100021f5 <x87Handler(regs*)+0x161d>	100021f5: R_386_PC32	fpuGetReg(int)
100021f9:	83 ec 14             	sub    esp,0x14
100021fc:	b9 03 00 00 00       	mov    ecx,0x3
10002201:	89 e7                	mov    edi,esp
10002203:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002205:	e8 fc ff ff ff       	call   10002206 <x87Handler(regs*)+0x162e>	10002206: R_386_PC32	fpuInternalTo64(_Float80)
1000220a:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
10002210:	89 01                	mov    DWORD PTR [ecx],eax
10002212:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10002215:	e9 7e ed ff ff       	jmp    10000f98 <x87Handler(regs*)+0x3c0>
1000221a:	31 c0                	xor    eax,eax
1000221c:	80 fa 03             	cmp    dl,0x3
1000221f:	0f 85 07 01 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10002225:	8d 75 a0             	lea    esi,[ebp-0x60]
10002228:	83 ec 0c             	sub    esp,0xc
1000222b:	56                   	push   esi
1000222c:	e8 fc ff ff ff       	call   1000222d <x87Handler(regs*)+0x1655>	1000222d: R_386_PC32	fpuPop()
10002231:	83 ec 14             	sub    esp,0x14
10002234:	b9 03 00 00 00       	mov    ecx,0x3
10002239:	89 e7                	mov    edi,esp
1000223b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000223d:	e8 fc ff ff ff       	call   1000223e <x87Handler(regs*)+0x1666>	1000223e: R_386_PC32	fpuInternalTo64(_Float80)
10002242:	8b bd 94 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x66c]
10002248:	89 07                	mov    DWORD PTR [edi],eax
1000224a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
1000224d:	e9 46 ed ff ff       	jmp    10000f98 <x87Handler(regs*)+0x3c0>
10002252:	31 c0                	xor    eax,eax
10002254:	80 bd 9b f9 ff ff 01 	cmp    BYTE PTR [ebp-0x665],0x1
1000225b:	0f 85 cb 00 00 00    	jne    1000232c <x87Handler(regs*)+0x1754>
10002261:	8d 75 ac             	lea    esi,[ebp-0x54]
10002264:	52                   	push   edx
10002265:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
1000226b:	0f b7 00             	movzx  eax,WORD PTR [eax]
1000226e:	31 d2                	xor    edx,edx
10002270:	52                   	push   edx
10002271:	50                   	push   eax
10002272:	56                   	push   esi
10002273:	e8 fc ff ff ff       	call   10002274 <x87Handler(regs*)+0x169c>	10002274: R_386_PC32	fpuLongToFloat(long long)
10002278:	8d 55 b8             	lea    edx,[ebp-0x48]
1000227b:	83 ec 0c             	sub    esp,0xc
1000227e:	6a 00                	push   0x0
10002280:	52                   	push   edx
10002281:	e8 fc ff ff ff       	call   10002282 <x87Handler(regs*)+0x16aa>	10002282: R_386_PC32	fpuGetReg(int)
10002286:	8d 45 c4             	lea    eax,[ebp-0x3c]
10002289:	51                   	push   ecx
1000228a:	b9 03 00 00 00       	mov    ecx,0x3
1000228f:	89 e7                	mov    edi,esp
10002291:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002293:	83 ec 0c             	sub    esp,0xc
10002296:	b9 03 00 00 00       	mov    ecx,0x3
1000229b:	89 e7                	mov    edi,esp
1000229d:	8d 55 b8             	lea    edx,[ebp-0x48]
100022a0:	89 d6                	mov    esi,edx
100022a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022a4:	50                   	push   eax
100022a5:	e8 fc ff ff ff       	call   100022a6 <x87Handler(regs*)+0x16ce>	100022a6: R_386_PC32	fpuMultiply(_Float80, _Float80)
100022aa:	83 c4 20             	add    esp,0x20
100022ad:	b9 03 00 00 00       	mov    ecx,0x3
100022b2:	89 e7                	mov    edi,esp
100022b4:	8d 45 c4             	lea    eax,[ebp-0x3c]
100022b7:	89 c6                	mov    esi,eax
100022b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022bb:	6a 00                	push   0x0
100022bd:	e8 fc ff ff ff       	call   100022be <x87Handler(regs*)+0x16e6>	100022be: R_386_PC32	fpuSetReg(int, _Float80)
100022c2:	8b 85 9c f9 ff ff    	mov    eax,DWORD PTR [ebp-0x664]
100022c8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100022cb:	e9 06 ea ff ff       	jmp    10000cd6 <x87Handler(regs*)+0xfe>
100022d0:	8a 95 9b f9 ff ff    	mov    dl,BYTE PTR [ebp-0x665]
100022d6:	80 fa 05             	cmp    dl,0x5
100022d9:	75 1a                	jne    100022f5 <x87Handler(regs*)+0x171d>
100022db:	8d 75 d0             	lea    esi,[ebp-0x30]
100022de:	50                   	push   eax
100022df:	8b 85 94 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x66c]
100022e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
100022e8:	ff 30                	push   DWORD PTR [eax]
100022ea:	56                   	push   esi
100022eb:	e8 fc ff ff ff       	call   100022ec <x87Handler(regs*)+0x1714>	100022ec: R_386_PC32	fpuULongToFloat(unsigned long long)
100022f0:	e9 92 ec ff ff       	jmp    10000f87 <x87Handler(regs*)+0x3af>
100022f5:	31 c0                	xor    eax,eax
100022f7:	80 fa 07             	cmp    dl,0x7
100022fa:	75 30                	jne    1000232c <x87Handler(regs*)+0x1754>
100022fc:	8d 75 dc             	lea    esi,[ebp-0x24]
100022ff:	83 ec 0c             	sub    esp,0xc
10002302:	56                   	push   esi
10002303:	e8 fc ff ff ff       	call   10002304 <x87Handler(regs*)+0x172c>	10002304: R_386_PC32	fpuPop()
10002308:	83 ec 14             	sub    esp,0x14
1000230b:	b9 03 00 00 00       	mov    ecx,0x3
10002310:	89 e7                	mov    edi,esp
10002312:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002314:	e8 fc ff ff ff       	call   10002315 <x87Handler(regs*)+0x173d>	10002315: R_386_PC32	fpuFloatToLong(_Float80)
10002319:	83 c4 20             	add    esp,0x20
1000231c:	8b 8d 94 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x66c]
10002322:	89 01                	mov    DWORD PTR [ecx],eax
10002324:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
10002327:	e9 b2 ec ff ff       	jmp    10000fde <x87Handler(regs*)+0x406>
1000232c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000232f:	5b                   	pop    ebx
10002330:	5e                   	pop    esi
10002331:	5f                   	pop    edi
10002332:	5d                   	pop    ebp
10002333:	c3                   	ret    

10002334 <begin()>:
10002334:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002336: R_386_32	x87FaultIntercept
	1000233a: R_386_32	x87Handler(regs*)
1000233e:	c3                   	ret    

1000233f <_GLOBAL__sub_I__Z5startv>:
1000233f:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	10002341: R_386_32	fpuState
10002349:	c3                   	ret    
1000234a:	65 6d                	gs ins DWORD PTR es:[edi],dx
1000234c:	38 30                	cmp    BYTE PTR [eax],dh
1000234e:	38 37                	cmp    BYTE PTR [edi],dh
10002350:	20 62 61             	and    BYTE PTR [edx+0x61],ah
10002353:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
10002357:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
1000235b:	74 00                	je     1000235d <_GLOBAL__sub_I__Z5startv+0x1e>
1000235d:	66 90                	xchg   ax,ax
1000235f:	90                   	nop
10002360:	50                   	push   eax	10002360: R_386_32	.text
10002361:	0c 00                	or     al,0x0
10002363:	10 80 0c 00 10 40    	adc    BYTE PTR [eax+0x4010000c],al	10002364: R_386_32	.text
	10002368: R_386_32	.text
10002369:	0e                   	push   cs
1000236a:	00 10                	add    BYTE PTR [eax],dl
1000236c:	40                   	inc    eax	1000236c: R_386_32	.text
1000236d:	0e                   	push   cs
1000236e:	00 10                	add    BYTE PTR [eax],dl
10002370:	40                   	inc    eax	10002370: R_386_32	.text
10002371:	0e                   	push   cs
10002372:	00 10                	add    BYTE PTR [eax],dl
10002374:	40                   	inc    eax	10002374: R_386_32	.text
10002375:	0e                   	push   cs
10002376:	00 10                	add    BYTE PTR [eax],dl
10002378:	40                   	inc    eax	10002378: R_386_32	.text
10002379:	0e                   	push   cs
1000237a:	00 10                	add    BYTE PTR [eax],dl
1000237c:	40                   	inc    eax	1000237c: R_386_32	.text
1000237d:	0e                   	push   cs
1000237e:	00 10                	add    BYTE PTR [eax],dl
10002380:	e0 0c                	loopne 1000238e <_GLOBAL__sub_I__Z5startv+0x4f>	10002380: R_386_32	.text
10002382:	00 10                	add    BYTE PTR [eax],dl
10002384:	0f 0d 00             	prefetch BYTE PTR [eax]	10002384: R_386_32	.text
10002387:	10 4c 0d 00          	adc    BYTE PTR [ebp+ecx*1+0x0],cl	10002388: R_386_32	.text
1000238b:	10 7b 0d             	adc    BYTE PTR [ebx+0xd],bh	1000238c: R_386_32	.text
1000238e:	00 10                	add    BYTE PTR [eax],dl
10002390:	aa                   	stos   BYTE PTR es:[edi],al	10002390: R_386_32	.text
10002391:	0d 00 10 dc 0d       	or     eax,0xddc1000	10002394: R_386_32	.text
10002396:	00 10                	add    BYTE PTR [eax],dl
10002398:	0e                   	push   cs	10002398: R_386_32	.text
10002399:	0e                   	push   cs
1000239a:	00 10                	add    BYTE PTR [eax],dl
