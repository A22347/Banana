
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	57                   	push   edi
1000000f:	56                   	push   esi
10000010:	53                   	push   ebx
10000011:	83 ec 1c             	sub    esp,0x1c
10000014:	0f b7 5d 10          	movzx  ebx,WORD PTR [ebp+0x10]
10000018:	8d 8b 01 c0 ff ff    	lea    ecx,[ebx-0x3fff]
1000001e:	31 c0                	xor    eax,eax
10000020:	31 d2                	xor    edx,edx
10000022:	66 83 f9 3e          	cmp    cx,0x3e
10000026:	77 52                	ja     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000028:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000002b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
1000002e:	8d 83 01 c0 ff ff    	lea    eax,[ebx-0x3fff]
10000034:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000037:	99                   	cdq    
10000038:	b9 3e 00 00 00       	mov    ecx,0x3e
1000003d:	31 db                	xor    ebx,ebx
1000003f:	29 c1                	sub    ecx,eax
10000041:	19 d3                	sbb    ebx,edx
10000043:	53                   	push   ebx
10000044:	51                   	push   ecx
10000045:	57                   	push   edi
10000046:	68 e0 22 00 10       	push   0x100022e0	10000047: R_386_32	.text
1000004b:	e8 fc ff ff ff       	call   1000004c <fpuFloatToLong(_Float80)+0x41>	1000004c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000050:	b9 3e 00 00 00       	mov    ecx,0x3e
10000055:	2b 4d e4             	sub    ecx,DWORD PTR [ebp-0x1c]
10000058:	89 f0                	mov    eax,esi
1000005a:	89 fa                	mov    edx,edi
1000005c:	0f ad d0             	shrd   eax,edx,cl
1000005f:	d3 ea                	shr    edx,cl
10000061:	f6 c1 20             	test   cl,0x20
10000064:	74 04                	je     1000006a <fpuFloatToLong(_Float80)+0x5f>
10000066:	89 d0                	mov    eax,edx
10000068:	31 d2                	xor    edx,edx
1000006a:	83 c4 10             	add    esp,0x10
1000006d:	80 7d 12 00          	cmp    BYTE PTR [ebp+0x12],0x0
10000071:	74 07                	je     1000007a <fpuFloatToLong(_Float80)+0x6f>
10000073:	f7 d8                	neg    eax
10000075:	83 d2 00             	adc    edx,0x0
10000078:	f7 da                	neg    edx
1000007a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000007d:	5b                   	pop    ebx
1000007e:	5e                   	pop    esi
1000007f:	5f                   	pop    edi
10000080:	5d                   	pop    ebp
10000081:	c3                   	ret    

10000082 <fpuULongToFloat(unsigned long long)>:
10000082:	55                   	push   ebp
10000083:	89 e5                	mov    ebp,esp
10000085:	56                   	push   esi
10000086:	53                   	push   ebx
10000087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000008a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000008d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000090:	89 de                	mov    esi,ebx
10000092:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000096:	09 ce                	or     esi,ecx
10000098:	75 15                	jne    100000af <fpuULongToFloat(unsigned long long)+0x2d>
1000009a:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
100000a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000ad:	eb 31                	jmp    100000e0 <fpuULongToFloat(unsigned long long)+0x5e>
100000af:	31 d2                	xor    edx,edx
100000b1:	89 de                	mov    esi,ebx
100000b3:	c1 ee 1e             	shr    esi,0x1e
100000b6:	74 09                	je     100000c1 <fpuULongToFloat(unsigned long long)+0x3f>
100000b8:	42                   	inc    edx
100000b9:	0f ac d9 01          	shrd   ecx,ebx,0x1
100000bd:	d1 eb                	shr    ebx,1
100000bf:	eb f0                	jmp    100000b1 <fpuULongToFloat(unsigned long long)+0x2f>
100000c1:	31 f6                	xor    esi,esi
100000c3:	0f ba e3 1d          	bt     ebx,0x1d
100000c7:	72 07                	jb     100000d0 <fpuULongToFloat(unsigned long long)+0x4e>
100000c9:	01 c9                	add    ecx,ecx
100000cb:	11 db                	adc    ebx,ebx
100000cd:	46                   	inc    esi
100000ce:	eb f3                	jmp    100000c3 <fpuULongToFloat(unsigned long long)+0x41>
100000d0:	89 08                	mov    DWORD PTR [eax],ecx
100000d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
100000d5:	66 81 c2 3d 40       	add    dx,0x403d
100000da:	29 f2                	sub    edx,esi
100000dc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
100000e0:	5b                   	pop    ebx
100000e1:	5e                   	pop    esi
100000e2:	5d                   	pop    ebp
100000e3:	c2 04 00             	ret    0x4

100000e6 <fpuLongToFloat(long long)>:
100000e6:	55                   	push   ebp
100000e7:	89 e5                	mov    ebp,esp
100000e9:	56                   	push   esi
100000ea:	53                   	push   ebx
100000eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000ee:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100000f1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100000f4:	89 de                	mov    esi,ebx
100000f6:	09 ce                	or     esi,ecx
100000f8:	75 19                	jne    10000113 <fpuLongToFloat(long long)+0x2d>
100000fa:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100000fe:	66 c7 40 08 00 00    	mov    WORD PTR [eax+0x8],0x0
10000104:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000010a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000111:	eb 43                	jmp    10000156 <fpuLongToFloat(long long)+0x70>
10000113:	31 d2                	xor    edx,edx
10000115:	85 db                	test   ebx,ebx
10000117:	79 09                	jns    10000122 <fpuLongToFloat(long long)+0x3c>
10000119:	f7 d9                	neg    ecx
1000011b:	83 d3 00             	adc    ebx,0x0
1000011e:	f7 db                	neg    ebx
10000120:	b2 01                	mov    dl,0x1
10000122:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000125:	31 d2                	xor    edx,edx
10000127:	89 de                	mov    esi,ebx
10000129:	c1 ee 1e             	shr    esi,0x1e
1000012c:	74 09                	je     10000137 <fpuLongToFloat(long long)+0x51>
1000012e:	42                   	inc    edx
1000012f:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000133:	d1 eb                	shr    ebx,1
10000135:	eb f0                	jmp    10000127 <fpuLongToFloat(long long)+0x41>
10000137:	31 f6                	xor    esi,esi
10000139:	0f ba e3 1d          	bt     ebx,0x1d
1000013d:	72 07                	jb     10000146 <fpuLongToFloat(long long)+0x60>
1000013f:	01 c9                	add    ecx,ecx
10000141:	11 db                	adc    ebx,ebx
10000143:	46                   	inc    esi
10000144:	eb f3                	jmp    10000139 <fpuLongToFloat(long long)+0x53>
10000146:	89 08                	mov    DWORD PTR [eax],ecx
10000148:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
1000014b:	66 81 c2 3d 40       	add    dx,0x403d
10000150:	29 f2                	sub    edx,esi
10000152:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000156:	5b                   	pop    ebx
10000157:	5e                   	pop    esi
10000158:	5d                   	pop    ebp
10000159:	c2 04 00             	ret    0x4

1000015c <fpuGet0()>:
1000015c:	55                   	push   ebp
1000015d:	89 e5                	mov    ebp,esp
1000015f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000162:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000016c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000173:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
10000179:	5d                   	pop    ebp
1000017a:	c2 04 00             	ret    0x4

1000017d <fpuGet1()>:
1000017d:	55                   	push   ebp
1000017e:	89 e5                	mov    ebp,esp
10000180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000183:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
10000187:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000018d:	c7 40 04 00 00 00 20 	mov    DWORD PTR [eax+0x4],0x20000000
10000194:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
1000019a:	5d                   	pop    ebp
1000019b:	c2 04 00             	ret    0x4

1000019e <fpuGetPi()>:
1000019e:	55                   	push   ebp
1000019f:	89 e5                	mov    ebp,esp
100001a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a4:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001a8:	c7 00 8c 30 5a 88    	mov    DWORD PTR [eax],0x885a308c
100001ae:	c7 40 04 a8 f6 43 32 	mov    DWORD PTR [eax+0x4],0x3243f6a8
100001b5:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
100001bb:	5d                   	pop    ebp
100001bc:	c2 04 00             	ret    0x4

100001bf <fpuGetLog2E()>:
100001bf:	55                   	push   ebp
100001c0:	89 e5                	mov    ebp,esp
100001c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c5:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001c9:	c7 00 1c fc 05 57    	mov    DWORD PTR [eax],0x5705fc1c
100001cf:	c7 40 04 ca 8e 2a 2e 	mov    DWORD PTR [eax+0x4],0x2e2a8eca
100001d6:	66 c7 40 08 00 40    	mov    WORD PTR [eax+0x8],0x4000
100001dc:	5d                   	pop    ebp
100001dd:	c2 04 00             	ret    0x4

100001e0 <fpuGetLogE2()>:
100001e0:	55                   	push   ebp
100001e1:	89 e5                	mov    ebp,esp
100001e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e6:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
100001ea:	c7 00 68 de 73 f4    	mov    DWORD PTR [eax],0xf473de68
100001f0:	c7 40 04 fd 85 5c 2c 	mov    DWORD PTR [eax+0x4],0x2c5c85fd
100001f7:	66 c7 40 08 ff 3f    	mov    WORD PTR [eax+0x8],0x3fff
100001fd:	5d                   	pop    ebp
100001fe:	c2 04 00             	ret    0x4

10000201 <fpuGetLog210()>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000207:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000020b:	c7 00 be e2 46 f3    	mov    DWORD PTR [eax],0xf346e2be
10000211:	c7 40 04 12 9e 26 35 	mov    DWORD PTR [eax+0x4],0x35269e12
10000218:	66 c7 40 08 01 40    	mov    WORD PTR [eax+0x8],0x4001
1000021e:	5d                   	pop    ebp
1000021f:	c2 04 00             	ret    0x4

10000222 <fpuGetLog102()>:
10000222:	55                   	push   ebp
10000223:	89 e5                	mov    ebp,esp
10000225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000228:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
1000022c:	c7 00 e6 fd f3 3e    	mov    DWORD PTR [eax],0x3ef3fde6
10000232:	c7 40 04 a1 26 88 26 	mov    DWORD PTR [eax+0x4],0x268826a1
10000239:	66 c7 40 08 fe 3f    	mov    WORD PTR [eax+0x8],0x3ffe
1000023f:	5d                   	pop    ebp
10000240:	c2 04 00             	ret    0x4

10000243 <fpuIsSecondLarger(_Float80, _Float80)>:
10000243:	55                   	push   ebp
10000244:	89 e5                	mov    ebp,esp
10000246:	b0 01                	mov    al,0x1
10000248:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000024b:	66 39 55 1c          	cmp    WORD PTR [ebp+0x1c],dx
1000024f:	77 13                	ja     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000251:	b0 00                	mov    al,0x0
10000253:	72 0f                	jb     10000264 <fpuIsSecondLarger(_Float80, _Float80)+0x21>
10000255:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000258:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
1000025b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000025e:	1b 45 18             	sbb    eax,DWORD PTR [ebp+0x18]
10000261:	0f 92 c0             	setb   al
10000264:	5d                   	pop    ebp
10000265:	c3                   	ret    

10000266 <fpuAreEqual(_Float80, _Float80)>:
10000266:	55                   	push   ebp
10000267:	89 e5                	mov    ebp,esp
10000269:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000026c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000272:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10000275:	81 e2 ff ff ff 00    	and    edx,0xffffff
1000027b:	31 c0                	xor    eax,eax
1000027d:	39 d1                	cmp    ecx,edx
1000027f:	75 11                	jne    10000292 <fpuAreEqual(_Float80, _Float80)+0x2c>
10000281:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000284:	33 55 14             	xor    edx,DWORD PTR [ebp+0x14]
10000287:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000028a:	33 45 18             	xor    eax,DWORD PTR [ebp+0x18]
1000028d:	09 c2                	or     edx,eax
1000028f:	0f 94 c0             	sete   al
10000292:	5d                   	pop    ebp
10000293:	c3                   	ret    

10000294 <fpuUnorderedCompare(_Float80, _Float80)>:
10000294:	55                   	push   ebp
10000295:	89 e5                	mov    ebp,esp
10000297:	57                   	push   edi
10000298:	56                   	push   esi
10000299:	53                   	push   ebx
1000029a:	83 ec 44             	sub    esp,0x44
1000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a0:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100002a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
100002a9:	66 89 75 bc          	mov    WORD PTR [ebp-0x44],si
100002ad:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
100002b0:	89 7d b4             	mov    DWORD PTR [ebp-0x4c],edi
100002b3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
100002b6:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
100002b9:	66 89 75 b2          	mov    WORD PTR [ebp-0x4e],si
100002bd:	8d 7d c0             	lea    edi,[ebp-0x40]
100002c0:	b9 03 00 00 00       	mov    ecx,0x3
100002c5:	8d 75 08             	lea    esi,[ebp+0x8]
100002c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002ca:	8d 7d cc             	lea    edi,[ebp-0x34]
100002cd:	8d 75 14             	lea    esi,[ebp+0x14]
100002d0:	b9 03 00 00 00       	mov    ecx,0x3
100002d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100002d7:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100002da:	33 4d b4             	xor    ecx,DWORD PTR [ebp-0x4c]
100002dd:	89 c2                	mov    edx,eax
100002df:	31 da                	xor    edx,ebx
100002e1:	09 d1                	or     ecx,edx
100002e3:	0f 94 45 bf          	sete   BYTE PTR [ebp-0x41]
100002e7:	8b 4d c8             	mov    ecx,DWORD PTR [ebp-0x38]
100002ea:	81 e1 ff ff ff 00    	and    ecx,0xffffff
100002f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100002f3:	81 e2 ff ff ff 00    	and    edx,0xffffff
100002f9:	39 d1                	cmp    ecx,edx
100002fb:	75 08                	jne    10000305 <fpuUnorderedCompare(_Float80, _Float80)+0x71>
100002fd:	31 d2                	xor    edx,edx
100002ff:	80 7d bf 00          	cmp    BYTE PTR [ebp-0x41],0x0
10000303:	75 1c                	jne    10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000305:	b2 01                	mov    dl,0x1
10000307:	66 8b 7d b2          	mov    di,WORD PTR [ebp-0x4e]
1000030b:	66 39 7d bc          	cmp    WORD PTR [ebp-0x44],di
1000030f:	72 10                	jb     10000321 <fpuUnorderedCompare(_Float80, _Float80)+0x8d>
10000311:	0f 94 c1             	sete   cl
10000314:	8b 7d b4             	mov    edi,DWORD PTR [ebp-0x4c]
10000317:	39 7d b8             	cmp    DWORD PTR [ebp-0x48],edi
1000031a:	19 d8                	sbb    eax,ebx
1000031c:	0f 92 c2             	setb   dl
1000031f:	21 ca                	and    edx,ecx
10000321:	a0 01 00 00 00       	mov    al,ds:0x1	10000322: R_386_32	fpuState
10000326:	83 e0 ba             	and    eax,0xffffffba
10000329:	8d 7d d8             	lea    edi,[ebp-0x28]
1000032c:	b9 03 00 00 00       	mov    ecx,0x3
10000331:	8d 75 08             	lea    esi,[ebp+0x8]
10000334:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000336:	8d 7d e4             	lea    edi,[ebp-0x1c]
10000339:	b9 03 00 00 00       	mov    ecx,0x3
1000033e:	8d 75 14             	lea    esi,[ebp+0x14]
10000341:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000343:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
10000346:	81 e3 ff ff ff 00    	and    ebx,0xffffff
1000034c:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000034f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
10000355:	39 cb                	cmp    ebx,ecx
10000357:	0f 94 c1             	sete   cl
1000035a:	22 4d bf             	and    cl,BYTE PTR [ebp-0x41]
1000035d:	c1 e1 06             	shl    ecx,0x6
10000360:	09 d0                	or     eax,edx
10000362:	09 c8                	or     eax,ecx
10000364:	a2 01 00 00 00       	mov    ds:0x1,al	10000365: R_386_32	fpuState
10000369:	83 c4 44             	add    esp,0x44
1000036c:	5b                   	pop    ebx
1000036d:	5e                   	pop    esi
1000036e:	5f                   	pop    edi
1000036f:	5d                   	pop    ebp
10000370:	c3                   	ret    

10000371 <fpuNormalise(_Float80)>:
10000371:	55                   	push   ebp
10000372:	89 e5                	mov    ebp,esp
10000374:	57                   	push   edi
10000375:	56                   	push   esi
10000376:	53                   	push   ebx
10000377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000037d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000380:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000383:	8d 72 01             	lea    esi,[edx+0x1]
10000386:	89 df                	mov    edi,ebx
10000388:	c1 ef 1e             	shr    edi,0x1e
1000038b:	74 0e                	je     1000039b <fpuNormalise(_Float80)+0x2a>
1000038d:	0f ac d9 01          	shrd   ecx,ebx,0x1
10000391:	d1 eb                	shr    ebx,1
10000393:	89 f2                	mov    edx,esi
10000395:	eb ec                	jmp    10000383 <fpuNormalise(_Float80)+0x12>
10000397:	01 c9                	add    ecx,ecx
10000399:	11 db                	adc    ebx,ebx
1000039b:	0f ba e3 1d          	bt     ebx,0x1d
1000039f:	72 1d                	jb     100003be <fpuNormalise(_Float80)+0x4d>
100003a1:	4a                   	dec    edx
100003a2:	89 de                	mov    esi,ebx
100003a4:	09 ce                	or     esi,ecx
100003a6:	75 ef                	jne    10000397 <fpuNormalise(_Float80)+0x26>
100003a8:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
100003af:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
100003b6:	66 c7 45 14 00 00    	mov    WORD PTR [ebp+0x14],0x0
100003bc:	eb 0a                	jmp    100003c8 <fpuNormalise(_Float80)+0x57>
100003be:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
100003c1:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
100003c4:	66 89 55 14          	mov    WORD PTR [ebp+0x14],dx
100003c8:	8d 75 0c             	lea    esi,[ebp+0xc]
100003cb:	b9 03 00 00 00       	mov    ecx,0x3
100003d0:	89 c7                	mov    edi,eax
100003d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100003d4:	5b                   	pop    ebx
100003d5:	5e                   	pop    esi
100003d6:	5f                   	pop    edi
100003d7:	5d                   	pop    ebp
100003d8:	c2 04 00             	ret    0x4

100003db <fpuAdd(_Float80, _Float80)>:
100003db:	55                   	push   ebp
100003dc:	89 e5                	mov    ebp,esp
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	53                   	push   ebx
100003e1:	83 ec 2c             	sub    esp,0x2c
100003e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003ea:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100003ed:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100003f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100003f3:	66 89 45 d6          	mov    WORD PTR [ebp-0x2a],ax
100003f7:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
100003fa:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
100003fd:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10000400:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
10000403:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
10000406:	8a 5d 22             	mov    bl,BYTE PTR [ebp+0x22]
10000409:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000040d:	66 39 c8             	cmp    ax,cx
10000410:	72 2d                	jb     1000043f <fpuAdd(_Float80, _Float80)+0x64>
10000412:	39 75 c8             	cmp    DWORD PTR [ebp-0x38],esi
10000415:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000418:	19 f8                	sbb    eax,edi
1000041a:	73 09                	jae    10000425 <fpuAdd(_Float80, _Float80)+0x4a>
1000041c:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000420:	66 39 c8             	cmp    ax,cx
10000423:	74 24                	je     10000449 <fpuAdd(_Float80, _Float80)+0x6e>
10000425:	88 d8                	mov    al,bl
10000427:	8a 5d d5             	mov    bl,BYTE PTR [ebp-0x2b]
1000042a:	88 45 d5             	mov    BYTE PTR [ebp-0x2b],al
1000042d:	89 f0                	mov    eax,esi
1000042f:	89 fa                	mov    edx,edi
10000431:	8b 75 c8             	mov    esi,DWORD PTR [ebp-0x38]
10000434:	8b 7d cc             	mov    edi,DWORD PTR [ebp-0x34]
10000437:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000043a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000043d:	eb 0a                	jmp    10000449 <fpuAdd(_Float80, _Float80)+0x6e>
1000043f:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
10000443:	66 89 4d d6          	mov    WORD PTR [ebp-0x2a],cx
10000447:	89 c1                	mov    ecx,eax
10000449:	8a 45 d6             	mov    al,BYTE PTR [ebp-0x2a]
1000044c:	29 c8                	sub    eax,ecx
1000044e:	88 c1                	mov    cl,al
10000450:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10000453:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10000456:	0f ad d0             	shrd   eax,edx,cl
10000459:	d3 ea                	shr    edx,cl
1000045b:	f6 c1 20             	test   cl,0x20
1000045e:	74 04                	je     10000464 <fpuAdd(_Float80, _Float80)+0x89>
10000460:	89 d0                	mov    eax,edx
10000462:	31 d2                	xor    edx,edx
10000464:	89 d1                	mov    ecx,edx
10000466:	89 c2                	mov    edx,eax
10000468:	66 8b 45 d6          	mov    ax,WORD PTR [ebp-0x2a]
1000046c:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000470:	3a 5d d5             	cmp    bl,BYTE PTR [ebp-0x2b]
10000473:	75 13                	jne    10000488 <fpuAdd(_Float80, _Float80)+0xad>
10000475:	88 5d e6             	mov    BYTE PTR [ebp-0x1a],bl
10000478:	89 d0                	mov    eax,edx
1000047a:	89 ca                	mov    edx,ecx
1000047c:	01 f0                	add    eax,esi
1000047e:	11 fa                	adc    edx,edi
10000480:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000483:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000486:	eb 58                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
10000488:	80 7d d5 00          	cmp    BYTE PTR [ebp-0x2b],0x0
1000048c:	74 24                	je     100004b2 <fpuAdd(_Float80, _Float80)+0xd7>
1000048e:	39 d6                	cmp    esi,edx
10000490:	89 f8                	mov    eax,edi
10000492:	19 c8                	sbb    eax,ecx
10000494:	89 d0                	mov    eax,edx
10000496:	89 ca                	mov    edx,ecx
10000498:	73 0c                	jae    100004a6 <fpuAdd(_Float80, _Float80)+0xcb>
1000049a:	29 f0                	sub    eax,esi
1000049c:	19 fa                	sbb    edx,edi
1000049e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004a1:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004a4:	eb 26                	jmp    100004cc <fpuAdd(_Float80, _Float80)+0xf1>
100004a6:	29 c6                	sub    esi,eax
100004a8:	19 cf                	sbb    edi,ecx
100004aa:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004ad:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004b0:	eb 2a                	jmp    100004dc <fpuAdd(_Float80, _Float80)+0x101>
100004b2:	84 db                	test   bl,bl
100004b4:	74 2a                	je     100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004b6:	39 f2                	cmp    edx,esi
100004b8:	89 c8                	mov    eax,ecx
100004ba:	19 f8                	sbb    eax,edi
100004bc:	89 d0                	mov    eax,edx
100004be:	89 ca                	mov    edx,ecx
100004c0:	73 10                	jae    100004d2 <fpuAdd(_Float80, _Float80)+0xf7>
100004c2:	29 c6                	sub    esi,eax
100004c4:	19 cf                	sbb    edi,ecx
100004c6:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100004c9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
100004cc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
100004d0:	eb 0e                	jmp    100004e0 <fpuAdd(_Float80, _Float80)+0x105>
100004d2:	29 f0                	sub    eax,esi
100004d4:	19 fa                	sbb    edx,edi
100004d6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100004d9:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100004dc:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
100004e0:	83 ec 0c             	sub    esp,0xc
100004e3:	8d 75 dc             	lea    esi,[ebp-0x24]
100004e6:	b9 03 00 00 00       	mov    ecx,0x3
100004eb:	89 e7                	mov    edi,esp
100004ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100004ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004f2:	e8 fc ff ff ff       	call   100004f3 <fpuAdd(_Float80, _Float80)+0x118>	100004f3: R_386_PC32	fpuNormalise(_Float80)
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	8d 65 f4             	lea    esp,[ebp-0xc]
100004fd:	5b                   	pop    ebx
100004fe:	5e                   	pop    esi
100004ff:	5f                   	pop    edi
10000500:	5d                   	pop    ebp
10000501:	c2 04 00             	ret    0x4

10000504 <fpuAbs(_Float80)>:
10000504:	55                   	push   ebp
10000505:	89 e5                	mov    ebp,esp
10000507:	57                   	push   edi
10000508:	56                   	push   esi
10000509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050c:	c6 45 16 00          	mov    BYTE PTR [ebp+0x16],0x0
10000510:	8d 75 0c             	lea    esi,[ebp+0xc]
10000513:	b9 03 00 00 00       	mov    ecx,0x3
10000518:	89 c7                	mov    edi,eax
1000051a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000051c:	5e                   	pop    esi
1000051d:	5f                   	pop    edi
1000051e:	5d                   	pop    ebp
1000051f:	c2 04 00             	ret    0x4

10000522 <fpuChs(_Float80)>:
10000522:	55                   	push   ebp
10000523:	89 e5                	mov    ebp,esp
10000525:	57                   	push   edi
10000526:	56                   	push   esi
10000527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052a:	80 75 16 01          	xor    BYTE PTR [ebp+0x16],0x1
1000052e:	8d 75 0c             	lea    esi,[ebp+0xc]
10000531:	b9 03 00 00 00       	mov    ecx,0x3
10000536:	89 c7                	mov    edi,eax
10000538:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000053a:	5e                   	pop    esi
1000053b:	5f                   	pop    edi
1000053c:	5d                   	pop    ebp
1000053d:	c2 04 00             	ret    0x4

10000540 <fpuSub(_Float80, _Float80)>:
10000540:	55                   	push   ebp
10000541:	89 e5                	mov    ebp,esp
10000543:	57                   	push   edi
10000544:	56                   	push   esi
10000545:	53                   	push   ebx
10000546:	83 ec 1c             	sub    esp,0x1c
10000549:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000054c:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
10000550:	8d 75 18             	lea    esi,[ebp+0x18]
10000553:	b9 03 00 00 00       	mov    ecx,0x3
10000558:	89 e7                	mov    edi,esp
1000055a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000055c:	83 ec 0c             	sub    esp,0xc
1000055f:	8d 75 0c             	lea    esi,[ebp+0xc]
10000562:	b9 03 00 00 00       	mov    ecx,0x3
10000567:	89 e7                	mov    edi,esp
10000569:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000056b:	53                   	push   ebx
1000056c:	e8 fc ff ff ff       	call   1000056d <fpuSub(_Float80, _Float80)+0x2d>	1000056d: R_386_PC32	fpuAdd(_Float80, _Float80)
10000571:	89 d8                	mov    eax,ebx
10000573:	8d 65 f4             	lea    esp,[ebp-0xc]
10000576:	5b                   	pop    ebx
10000577:	5e                   	pop    esi
10000578:	5f                   	pop    edi
10000579:	5d                   	pop    ebp
1000057a:	c2 04 00             	ret    0x4

1000057d <fpuReverseSub(_Float80, _Float80)>:
1000057d:	55                   	push   ebp
1000057e:	89 e5                	mov    ebp,esp
10000580:	57                   	push   edi
10000581:	56                   	push   esi
10000582:	53                   	push   ebx
10000583:	83 ec 1c             	sub    esp,0x1c
10000586:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000589:	80 75 22 01          	xor    BYTE PTR [ebp+0x22],0x1
1000058d:	8d 75 0c             	lea    esi,[ebp+0xc]
10000590:	b9 03 00 00 00       	mov    ecx,0x3
10000595:	89 e7                	mov    edi,esp
10000597:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000599:	83 ec 0c             	sub    esp,0xc
1000059c:	8d 75 18             	lea    esi,[ebp+0x18]
1000059f:	b9 03 00 00 00       	mov    ecx,0x3
100005a4:	89 e7                	mov    edi,esp
100005a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005a8:	53                   	push   ebx
100005a9:	e8 fc ff ff ff       	call   100005aa <fpuReverseSub(_Float80, _Float80)+0x2d>	100005aa: R_386_PC32	fpuAdd(_Float80, _Float80)
100005ae:	89 d8                	mov    eax,ebx
100005b0:	8d 65 f4             	lea    esp,[ebp-0xc]
100005b3:	5b                   	pop    ebx
100005b4:	5e                   	pop    esi
100005b5:	5f                   	pop    edi
100005b6:	5d                   	pop    ebp
100005b7:	c2 04 00             	ret    0x4

100005ba <fpuMultiply(_Float80, _Float80)>:
100005ba:	55                   	push   ebp
100005bb:	89 e5                	mov    ebp,esp
100005bd:	57                   	push   edi
100005be:	56                   	push   esi
100005bf:	53                   	push   ebx
100005c0:	83 ec 38             	sub    esp,0x38
100005c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100005c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005c9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005cc:	0f ac d0 1f          	shrd   eax,edx,0x1f
100005d0:	c1 ea 1f             	shr    edx,0x1f
100005d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100005d6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100005d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100005dc:	8b 7d 1c             	mov    edi,DWORD PTR [ebp+0x1c]
100005df:	0f ac fe 1f          	shrd   esi,edi,0x1f
100005e3:	c1 ef 1f             	shr    edi,0x1f
100005e6:	8a 4d 16             	mov    cl,BYTE PTR [ebp+0x16]
100005e9:	32 4d 22             	xor    cl,BYTE PTR [ebp+0x22]
100005ec:	88 4d e6             	mov    BYTE PTR [ebp-0x1a],cl
100005ef:	8b 4d 20             	mov    ecx,DWORD PTR [ebp+0x20]
100005f2:	03 4d 14             	add    ecx,DWORD PTR [ebp+0x14]
100005f5:	66 81 e9 ff 3f       	sub    cx,0x3fff
100005fa:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
100005fe:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10000601:	0f af ce             	imul   ecx,esi
10000604:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
10000607:	0f af d7             	imul   edx,edi
1000060a:	01 d1                	add    ecx,edx
1000060c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000060f:	f7 e6                	mul    esi
10000611:	01 ca                	add    edx,ecx
10000613:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000616:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10000619:	8d 75 dc             	lea    esi,[ebp-0x24]
1000061c:	b9 03 00 00 00       	mov    ecx,0x3
10000621:	89 e7                	mov    edi,esp
10000623:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000625:	53                   	push   ebx
10000626:	e8 fc ff ff ff       	call   10000627 <fpuMultiply(_Float80, _Float80)+0x6d>	10000627: R_386_PC32	fpuNormalise(_Float80)
1000062b:	89 d8                	mov    eax,ebx
1000062d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000630:	5b                   	pop    ebx
10000631:	5e                   	pop    esi
10000632:	5f                   	pop    edi
10000633:	5d                   	pop    ebp
10000634:	c2 04 00             	ret    0x4

10000637 <fpuMantissaDivision(unsigned long long, unsigned long long)>:
10000637:	55                   	push   ebp
10000638:	89 e5                	mov    ebp,esp
1000063a:	57                   	push   edi
1000063b:	56                   	push   esi
1000063c:	53                   	push   ebx
1000063d:	83 ec 24             	sub    esp,0x24
10000640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000643:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000646:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10000649:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
1000064c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000064f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000652:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000655:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10000658:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
1000065f:	83 c8 ff             	or     eax,0xffffffff
10000662:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000669:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000670:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000677:	31 d2                	xor    edx,edx
10000679:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
1000067c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
1000067f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000682:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
10000685:	83 f8 ff             	cmp    eax,0xffffffff
10000688:	75 22                	jne    100006ac <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
1000068a:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
1000068d:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000690:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
10000693:	0f ad f3             	shrd   ebx,esi,cl
10000696:	d3 ee                	shr    esi,cl
10000698:	f6 c1 20             	test   cl,0x20
1000069b:	74 04                	je     100006a1 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
1000069d:	89 f3                	mov    ebx,esi
1000069f:	31 f6                	xor    esi,esi
100006a1:	89 d9                	mov    ecx,ebx
100006a3:	83 e1 01             	and    ecx,0x1
100006a6:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
100006a9:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100006ac:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006af:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
100006b2:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
100006b5:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
100006b8:	72 38                	jb     100006f2 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
100006ba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
100006bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
100006c0:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
100006c3:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
100006c6:	83 f8 ff             	cmp    eax,0xffffffff
100006c9:	75 0d                	jne    100006d8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
100006cb:	81 ca 00 00 00 20    	or     edx,0x20000000
100006d1:	b8 3d 00 00 00       	mov    eax,0x3d
100006d6:	eb 1f                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006d8:	88 c1                	mov    cl,al
100006da:	89 ce                	mov    esi,ecx
100006dc:	c1 ee 05             	shr    esi,0x5
100006df:	83 e6 01             	and    esi,0x1
100006e2:	89 f3                	mov    ebx,esi
100006e4:	83 f3 01             	xor    ebx,0x1
100006e7:	d3 e3                	shl    ebx,cl
100006e9:	d3 e6                	shl    esi,cl
100006eb:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
100006ee:	09 f2                	or     edx,esi
100006f0:	eb 05                	jmp    100006f7 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
100006f2:	83 f8 ff             	cmp    eax,0xffffffff
100006f5:	74 01                	je     100006f8 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
100006f7:	48                   	dec    eax
100006f8:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100006fb:	85 c0                	test   eax,eax
100006fd:	0f 85 76 ff ff ff    	jne    10000679 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
10000703:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000706:	83 c4 24             	add    esp,0x24
10000709:	5b                   	pop    ebx
1000070a:	5e                   	pop    esi
1000070b:	5f                   	pop    edi
1000070c:	5d                   	pop    ebp
1000070d:	c3                   	ret    

1000070e <fpuDivide(_Float80, _Float80)>:
1000070e:	55                   	push   ebp
1000070f:	89 e5                	mov    ebp,esp
10000711:	57                   	push   edi
10000712:	56                   	push   esi
10000713:	53                   	push   ebx
10000714:	83 ec 1c             	sub    esp,0x1c
10000717:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000071a:	8a 45 16             	mov    al,BYTE PTR [ebp+0x16]
1000071d:	32 45 22             	xor    al,BYTE PTR [ebp+0x22]
10000720:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
10000723:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000726:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000729:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000072c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000072f:	e8 fc ff ff ff       	call   10000730 <fpuDivide(_Float80, _Float80)+0x22>	10000730: R_386_PC32	fpuMantissaDivision(unsigned long long, unsigned long long)
10000734:	59                   	pop    ecx
10000735:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000738:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000073b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000073e:	66 05 00 40          	add    ax,0x4000
10000742:	2b 45 20             	sub    eax,DWORD PTR [ebp+0x20]
10000745:	66 89 45 e4          	mov    WORD PTR [ebp-0x1c],ax
10000749:	8d 75 dc             	lea    esi,[ebp-0x24]
1000074c:	b9 03 00 00 00       	mov    ecx,0x3
10000751:	89 e7                	mov    edi,esp
10000753:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000755:	53                   	push   ebx
10000756:	e8 fc ff ff ff       	call   10000757 <fpuDivide(_Float80, _Float80)+0x49>	10000757: R_386_PC32	fpuNormalise(_Float80)
1000075b:	89 d8                	mov    eax,ebx
1000075d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000760:	5b                   	pop    ebx
10000761:	5e                   	pop    esi
10000762:	5f                   	pop    edi
10000763:	5d                   	pop    ebp
10000764:	c2 04 00             	ret    0x4

10000767 <fpuReciprocal(_Float80)>:
10000767:	55                   	push   ebp
10000768:	89 e5                	mov    ebp,esp
1000076a:	57                   	push   edi
1000076b:	56                   	push   esi
1000076c:	53                   	push   ebx
1000076d:	83 ec 2c             	sub    esp,0x2c
10000770:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000773:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
10000777:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000077e:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
10000785:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
1000078b:	8d 75 0c             	lea    esi,[ebp+0xc]
1000078e:	b9 03 00 00 00       	mov    ecx,0x3
10000793:	89 e7                	mov    edi,esp
10000795:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	8d 75 dc             	lea    esi,[ebp-0x24]
1000079d:	b9 03 00 00 00       	mov    ecx,0x3
100007a2:	89 e7                	mov    edi,esp
100007a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007a6:	53                   	push   ebx
100007a7:	e8 fc ff ff ff       	call   100007a8 <fpuReciprocal(_Float80)+0x41>	100007a8: R_386_PC32	fpuDivide(_Float80, _Float80)
100007ac:	89 d8                	mov    eax,ebx
100007ae:	8d 65 f4             	lea    esp,[ebp-0xc]
100007b1:	5b                   	pop    ebx
100007b2:	5e                   	pop    esi
100007b3:	5f                   	pop    edi
100007b4:	5d                   	pop    ebp
100007b5:	c2 04 00             	ret    0x4

100007b8 <fpuSquare(_Float80)>:
100007b8:	55                   	push   ebp
100007b9:	89 e5                	mov    ebp,esp
100007bb:	57                   	push   edi
100007bc:	56                   	push   esi
100007bd:	53                   	push   ebx
100007be:	83 ec 1c             	sub    esp,0x1c
100007c1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100007c4:	8d 75 0c             	lea    esi,[ebp+0xc]
100007c7:	b9 03 00 00 00       	mov    ecx,0x3
100007cc:	89 e7                	mov    edi,esp
100007ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007d0:	83 ec 0c             	sub    esp,0xc
100007d3:	8d 75 0c             	lea    esi,[ebp+0xc]
100007d6:	b9 03 00 00 00       	mov    ecx,0x3
100007db:	89 e7                	mov    edi,esp
100007dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100007df:	53                   	push   ebx
100007e0:	e8 fc ff ff ff       	call   100007e1 <fpuSquare(_Float80)+0x29>	100007e1: R_386_PC32	fpuMultiply(_Float80, _Float80)
100007e5:	89 d8                	mov    eax,ebx
100007e7:	8d 65 f4             	lea    esp,[ebp-0xc]
100007ea:	5b                   	pop    ebx
100007eb:	5e                   	pop    esi
100007ec:	5f                   	pop    edi
100007ed:	5d                   	pop    ebp
100007ee:	c2 04 00             	ret    0x4

100007f1 <fpuInverseSqrt(_Float80)>:
100007f1:	55                   	push   ebp
100007f2:	89 e5                	mov    ebp,esp
100007f4:	57                   	push   edi
100007f5:	56                   	push   esi
100007f6:	53                   	push   ebx
100007f7:	83 ec 5c             	sub    esp,0x5c
100007fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100007fd:	c6 45 c2 00          	mov    BYTE PTR [ebp-0x3e],0x0
10000801:	31 d2                	xor    edx,edx
10000803:	b9 03 00 00 00       	mov    ecx,0x3
10000808:	31 db                	xor    ebx,ebx
1000080a:	01 c9                	add    ecx,ecx
1000080c:	11 db                	adc    ebx,ebx
1000080e:	42                   	inc    edx
1000080f:	83 fa 3c             	cmp    edx,0x3c
10000812:	75 f6                	jne    1000080a <fpuInverseSqrt(_Float80)+0x19>
10000814:	89 4d b8             	mov    DWORD PTR [ebp-0x48],ecx
10000817:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
1000081a:	8d 75 0c             	lea    esi,[ebp+0xc]
1000081d:	b9 03 00 00 00       	mov    ecx,0x3
10000822:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000825:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000827:	0f b7 d0             	movzx  edx,ax
1000082a:	81 ea ff 3f 00 00    	sub    edx,0x3fff
10000830:	d1 fa                	sar    edx,1
10000832:	b9 ff 3f 00 00       	mov    ecx,0x3fff
10000837:	29 d1                	sub    ecx,edx
10000839:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000083c:	66 89 4b 08          	mov    WORD PTR [ebx+0x8],cx
10000840:	48                   	dec    eax
10000841:	66 89 45 a2          	mov    WORD PTR [ebp-0x5e],ax
10000845:	c7 45 a4 07 00 00 00 	mov    DWORD PTR [ebp-0x5c],0x7
1000084c:	8d 5d c4             	lea    ebx,[ebp-0x3c]
1000084f:	83 ec 0c             	sub    esp,0xc
10000852:	b9 03 00 00 00       	mov    ecx,0x3
10000857:	89 e7                	mov    edi,esp
10000859:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
1000085c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000085e:	53                   	push   ebx
1000085f:	e8 fc ff ff ff       	call   10000860 <fpuInverseSqrt(_Float80)+0x6f>	10000860: R_386_PC32	fpuSquare(_Float80)
10000864:	66 8b 45 a2          	mov    ax,WORD PTR [ebp-0x5e]
10000868:	66 89 45 14          	mov    WORD PTR [ebp+0x14],ax
1000086c:	8d 45 d0             	lea    eax,[ebp-0x30]
1000086f:	83 ec 14             	sub    esp,0x14
10000872:	8d 75 0c             	lea    esi,[ebp+0xc]
10000875:	b9 03 00 00 00       	mov    ecx,0x3
1000087a:	89 e7                	mov    edi,esp
1000087c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000087e:	83 ec 0c             	sub    esp,0xc
10000881:	b9 03 00 00 00       	mov    ecx,0x3
10000886:	89 e7                	mov    edi,esp
10000888:	89 de                	mov    esi,ebx
1000088a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000088c:	50                   	push   eax
1000088d:	e8 fc ff ff ff       	call   1000088e <fpuInverseSqrt(_Float80)+0x9d>	1000088e: R_386_PC32	fpuMultiply(_Float80, _Float80)
10000892:	66 c7 45 c0 00 40    	mov    WORD PTR [ebp-0x40],0x4000
10000898:	8d 55 dc             	lea    edx,[ebp-0x24]
1000089b:	83 c4 1c             	add    esp,0x1c
1000089e:	b9 03 00 00 00       	mov    ecx,0x3
100008a3:	89 e7                	mov    edi,esp
100008a5:	8d 45 d0             	lea    eax,[ebp-0x30]
100008a8:	89 c6                	mov    esi,eax
100008aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008ac:	83 ec 0c             	sub    esp,0xc
100008af:	8d 75 b8             	lea    esi,[ebp-0x48]
100008b2:	b9 03 00 00 00       	mov    ecx,0x3
100008b7:	89 e7                	mov    edi,esp
100008b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008bb:	52                   	push   edx
100008bc:	e8 fc ff ff ff       	call   100008bd <fpuInverseSqrt(_Float80)+0xcc>	100008bd: R_386_PC32	fpuSub(_Float80, _Float80)
100008c1:	8d 5d a8             	lea    ebx,[ebp-0x58]
100008c4:	50                   	push   eax
100008c5:	b9 03 00 00 00       	mov    ecx,0x3
100008ca:	89 e7                	mov    edi,esp
100008cc:	8d 55 dc             	lea    edx,[ebp-0x24]
100008cf:	89 d6                	mov    esi,edx
100008d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008d3:	83 ec 0c             	sub    esp,0xc
100008d6:	b9 03 00 00 00       	mov    ecx,0x3
100008db:	89 e7                	mov    edi,esp
100008dd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
100008e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008e2:	53                   	push   ebx
100008e3:	e8 fc ff ff ff       	call   100008e4 <fpuInverseSqrt(_Float80)+0xf3>	100008e4: R_386_PC32	fpuMultiply(_Float80, _Float80)
100008e8:	b9 03 00 00 00       	mov    ecx,0x3
100008ed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100008f0:	89 de                	mov    esi,ebx
100008f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100008f4:	83 c4 2c             	add    esp,0x2c
100008f7:	ff 4d a4             	dec    DWORD PTR [ebp-0x5c]
100008fa:	0f 85 4c ff ff ff    	jne    1000084c <fpuInverseSqrt(_Float80)+0x5b>
10000900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000903:	8d 65 f4             	lea    esp,[ebp-0xc]
10000906:	5b                   	pop    ebx
10000907:	5e                   	pop    esi
10000908:	5f                   	pop    edi
10000909:	5d                   	pop    ebp
1000090a:	c2 04 00             	ret    0x4

1000090d <fpuSqrt(_Float80)>:
1000090d:	55                   	push   ebp
1000090e:	89 e5                	mov    ebp,esp
10000910:	57                   	push   edi
10000911:	56                   	push   esi
10000912:	53                   	push   ebx
10000913:	83 ec 38             	sub    esp,0x38
10000916:	8d 5d d0             	lea    ebx,[ebp-0x30]
10000919:	8d 75 0c             	lea    esi,[ebp+0xc]
1000091c:	b9 03 00 00 00       	mov    ecx,0x3
10000921:	89 e7                	mov    edi,esp
10000923:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000925:	53                   	push   ebx
10000926:	e8 fc ff ff ff       	call   10000927 <fpuSqrt(_Float80)+0x1a>	10000927: R_386_PC32	fpuInverseSqrt(_Float80)
1000092b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
1000092f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000936:	c7 45 e0 00 00 00 20 	mov    DWORD PTR [ebp-0x20],0x20000000
1000093d:	66 c7 45 e4 00 40    	mov    WORD PTR [ebp-0x1c],0x4000
10000943:	83 ec 14             	sub    esp,0x14
10000946:	b9 03 00 00 00       	mov    ecx,0x3
1000094b:	89 e7                	mov    edi,esp
1000094d:	89 de                	mov    esi,ebx
1000094f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000951:	83 ec 0c             	sub    esp,0xc
10000954:	8d 75 dc             	lea    esi,[ebp-0x24]
10000957:	b9 03 00 00 00       	mov    ecx,0x3
1000095c:	89 e7                	mov    edi,esp
1000095e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000960:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000963:	e8 fc ff ff ff       	call   10000964 <fpuSqrt(_Float80)+0x57>	10000964: R_386_PC32	fpuDivide(_Float80, _Float80)
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000096e:	5b                   	pop    ebx
1000096f:	5e                   	pop    esi
10000970:	5f                   	pop    edi
10000971:	5d                   	pop    ebp
10000972:	c2 04 00             	ret    0x4

10000975 <fpuGetReg(int)>:
10000975:	55                   	push   ebp
10000976:	89 e5                	mov    ebp,esp
10000978:	57                   	push   edi
10000979:	56                   	push   esi
1000097a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
1000097d:	83 fe 07             	cmp    esi,0x7
10000980:	76 10                	jbe    10000992 <fpuGetReg(int)+0x1d>
10000982:	83 ec 0c             	sub    esp,0xc
10000985:	68 00 23 00 10       	push   0x10002300	10000986: R_386_32	.text
1000098a:	e8 fc ff ff ff       	call   1000098b <fpuGetReg(int)+0x16>	1000098b: R_386_PC32	Krnl::panic(char const*)
1000098f:	83 c4 10             	add    esp,0x10
10000992:	a0 01 00 00 00       	mov    al,ds:0x1	10000993: R_386_32	fpuState
10000997:	c0 e8 03             	shr    al,0x3
1000099a:	83 e0 07             	and    eax,0x7
1000099d:	01 f0                	add    eax,esi
1000099f:	b9 08 00 00 00       	mov    ecx,0x8
100009a4:	99                   	cdq    
100009a5:	f7 f9                	idiv   ecx
100009a7:	6b c2 0c             	imul   eax,edx,0xc
100009aa:	8d b0 04 00 00 00    	lea    esi,[eax+0x4]	100009ac: R_386_32	fpuState
100009b0:	b9 03 00 00 00       	mov    ecx,0x3
100009b5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8d 65 f8             	lea    esp,[ebp-0x8]
100009c0:	5e                   	pop    esi
100009c1:	5f                   	pop    edi
100009c2:	5d                   	pop    ebp
100009c3:	c2 04 00             	ret    0x4

100009c6 <fpuSetReg(int, _Float80)>:
100009c6:	55                   	push   ebp
100009c7:	89 e5                	mov    ebp,esp
100009c9:	57                   	push   edi
100009ca:	56                   	push   esi
100009cb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
100009ce:	83 ff 07             	cmp    edi,0x7
100009d1:	76 10                	jbe    100009e3 <fpuSetReg(int, _Float80)+0x1d>
100009d3:	83 ec 0c             	sub    esp,0xc
100009d6:	68 00 23 00 10       	push   0x10002300	100009d7: R_386_32	.text
100009db:	e8 fc ff ff ff       	call   100009dc <fpuSetReg(int, _Float80)+0x16>	100009dc: R_386_PC32	Krnl::panic(char const*)
100009e0:	83 c4 10             	add    esp,0x10
100009e3:	a0 01 00 00 00       	mov    al,ds:0x1	100009e4: R_386_32	fpuState
100009e8:	c0 e8 03             	shr    al,0x3
100009eb:	83 e0 07             	and    eax,0x7
100009ee:	01 f8                	add    eax,edi
100009f0:	b9 08 00 00 00       	mov    ecx,0x8
100009f5:	99                   	cdq    
100009f6:	f7 f9                	idiv   ecx
100009f8:	6b c2 0c             	imul   eax,edx,0xc
100009fb:	8d b8 04 00 00 00    	lea    edi,[eax+0x4]	100009fd: R_386_32	fpuState
10000a01:	8d 75 0c             	lea    esi,[ebp+0xc]
10000a04:	b9 03 00 00 00       	mov    ecx,0x3
10000a09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000a0b:	8d 65 f8             	lea    esp,[ebp-0x8]
10000a0e:	5e                   	pop    esi
10000a0f:	5f                   	pop    edi
10000a10:	5d                   	pop    ebp
10000a11:	c3                   	ret    

10000a12 <fpuInternalTo32(_Float80)>:
10000a12:	55                   	push   ebp
10000a13:	89 e5                	mov    ebp,esp
10000a15:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10000a18:	66 81 f9 7e 40       	cmp    cx,0x407e
10000a1d:	76 0c                	jbe    10000a2b <fpuInternalTo32(_Float80)+0x19>
10000a1f:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a21: R_386_32	fpuState
10000a26:	b9 7f 00 00 00       	mov    ecx,0x7f
10000a2b:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a2f:	19 d2                	sbb    edx,edx
10000a31:	f7 d2                	not    edx
10000a33:	81 e2 00 00 00 80    	and    edx,0x80000000
10000a39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a3c:	c1 e8 06             	shr    eax,0x6
10000a3f:	25 ff ff 7f 03       	and    eax,0x37fffff
10000a44:	c1 e1 17             	shl    ecx,0x17
10000a47:	81 c1 00 00 80 3f    	add    ecx,0x3f800000
10000a4d:	09 c8                	or     eax,ecx
10000a4f:	09 d0                	or     eax,edx
10000a51:	5d                   	pop    ebp
10000a52:	c3                   	ret    

10000a53 <fpuInternalTo64(_Float80)>:
10000a53:	55                   	push   ebp
10000a54:	89 e5                	mov    ebp,esp
10000a56:	57                   	push   edi
10000a57:	56                   	push   esi
10000a58:	53                   	push   ebx
10000a59:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10000a5c:	66 81 fb fe 43       	cmp    bx,0x43fe
10000a61:	76 0c                	jbe    10000a6f <fpuInternalTo64(_Float80)+0x1c>
10000a63:	80 0d 00 00 00 00 08 	or     BYTE PTR ds:0x0,0x8	10000a65: R_386_32	fpuState
10000a6a:	bb ff 03 00 00       	mov    ebx,0x3ff
10000a6f:	80 7d 12 01          	cmp    BYTE PTR [ebp+0x12],0x1
10000a73:	19 c9                	sbb    ecx,ecx
10000a75:	f7 d1                	not    ecx
10000a77:	81 e1 00 00 00 80    	and    ecx,0x80000000
10000a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a83:	0f ac d0 09          	shrd   eax,edx,0x9
10000a87:	c1 ea 09             	shr    edx,0x9
10000a8a:	89 c6                	mov    esi,eax
10000a8c:	81 e2 ff ff 6f 00    	and    edx,0x6fffff
10000a92:	c1 e3 14             	shl    ebx,0x14
10000a95:	81 c3 00 00 f0 3f    	add    ebx,0x3ff00000
10000a9b:	09 da                	or     edx,ebx
10000a9d:	09 ca                	or     edx,ecx
10000a9f:	89 f0                	mov    eax,esi
10000aa1:	5b                   	pop    ebx
10000aa2:	5e                   	pop    esi
10000aa3:	5f                   	pop    edi
10000aa4:	5d                   	pop    ebp
10000aa5:	c3                   	ret    

10000aa6 <fpu32ToInternal(unsigned int)>:
10000aa6:	55                   	push   ebp
10000aa7:	89 e5                	mov    ebp,esp
10000aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000aaf:	89 d1                	mov    ecx,edx
10000ab1:	c1 e9 1f             	shr    ecx,0x1f
10000ab4:	88 48 0a             	mov    BYTE PTR [eax+0xa],cl
10000ab7:	89 d1                	mov    ecx,edx
10000ab9:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
10000abf:	c1 e1 06             	shl    ecx,0x6
10000ac2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000ac8:	81 c9 00 00 00 20    	or     ecx,0x20000000
10000ace:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000ad1:	c1 ea 17             	shr    edx,0x17
10000ad4:	0f b6 d2             	movzx  edx,dl
10000ad7:	66 81 c2 81 3f       	add    dx,0x3f81
10000adc:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000ae0:	5d                   	pop    ebp
10000ae1:	c2 04 00             	ret    0x4

10000ae4 <fpu64ToInternal(unsigned long long)>:
10000ae4:	55                   	push   ebp
10000ae5:	89 e5                	mov    ebp,esp
10000ae7:	57                   	push   edi
10000ae8:	56                   	push   esi
10000ae9:	53                   	push   ebx
10000aea:	83 ec 0c             	sub    esp,0xc
10000aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
10000af3:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
10000af6:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000af9:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
10000afc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000aff:	c1 ea 1f             	shr    edx,0x1f
10000b02:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
10000b05:	89 f7                	mov    edi,esi
10000b07:	89 de                	mov    esi,ebx
10000b09:	0f a4 f7 09          	shld   edi,esi,0x9
10000b0d:	c1 e6 09             	shl    esi,0x9
10000b10:	89 f1                	mov    ecx,esi
10000b12:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
10000b18:	89 fa                	mov    edx,edi
10000b1a:	81 e2 ff ff ff 1f    	and    edx,0x1fffffff
10000b20:	89 08                	mov    DWORD PTR [eax],ecx
10000b22:	81 ca 00 00 00 20    	or     edx,0x20000000
10000b28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000b2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000b2e:	c1 ea 14             	shr    edx,0x14
10000b31:	66 81 e2 ff 07       	and    dx,0x7ff
10000b36:	66 81 c2 01 3c       	add    dx,0x3c01
10000b3b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000b3f:	83 c4 0c             	add    esp,0xc
10000b42:	5b                   	pop    ebx
10000b43:	5e                   	pop    esi
10000b44:	5f                   	pop    edi
10000b45:	5d                   	pop    ebp
10000b46:	c2 04 00             	ret    0x4

10000b49 <fpuPush(_Float80)>:
10000b49:	55                   	push   ebp
10000b4a:	89 e5                	mov    ebp,esp
10000b4c:	57                   	push   edi
10000b4d:	56                   	push   esi
10000b4e:	a0 01 00 00 00       	mov    al,ds:0x1	10000b4f: R_386_32	fpuState
10000b53:	88 c1                	mov    cl,al
10000b55:	c0 e9 03             	shr    cl,0x3
10000b58:	89 cf                	mov    edi,ecx
10000b5a:	83 e7 07             	and    edi,0x7
10000b5d:	83 c7 07             	add    edi,0x7
10000b60:	89 fa                	mov    edx,edi
10000b62:	83 e2 07             	and    edx,0x7
10000b65:	c1 e2 03             	shl    edx,0x3
10000b68:	83 e0 c7             	and    eax,0xffffffc7
10000b6b:	09 d0                	or     eax,edx
10000b6d:	a2 01 00 00 00       	mov    ds:0x1,al	10000b6e: R_386_32	fpuState
10000b72:	83 e7 07             	and    edi,0x7
10000b75:	6b ff 0c             	imul   edi,edi,0xc
10000b78:	81 c7 04 00 00 00    	add    edi,0x4	10000b7a: R_386_32	fpuState
10000b7e:	b9 03 00 00 00       	mov    ecx,0x3
10000b83:	8d 75 08             	lea    esi,[ebp+0x8]
10000b86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b88:	a1 64 00 00 00       	mov    eax,ds:0x64	10000b89: R_386_32	fpuState
10000b8d:	83 f8 08             	cmp    eax,0x8
10000b90:	75 09                	jne    10000b9b <fpuPush(_Float80)+0x52>
10000b92:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000b94: R_386_32	fpuState
10000b99:	eb 06                	jmp    10000ba1 <fpuPush(_Float80)+0x58>
10000b9b:	40                   	inc    eax
10000b9c:	a3 64 00 00 00       	mov    ds:0x64,eax	10000b9d: R_386_32	fpuState
10000ba1:	5e                   	pop    esi
10000ba2:	5f                   	pop    edi
10000ba3:	5d                   	pop    ebp
10000ba4:	c3                   	ret    

10000ba5 <fpuPop()>:
10000ba5:	55                   	push   ebp
10000ba6:	89 e5                	mov    ebp,esp
10000ba8:	57                   	push   edi
10000ba9:	56                   	push   esi
10000baa:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000bac: R_386_32	fpuState
10000bb0:	88 d0                	mov    al,dl
10000bb2:	c0 e8 03             	shr    al,0x3
10000bb5:	83 e0 07             	and    eax,0x7
10000bb8:	6b f0 0c             	imul   esi,eax,0xc
10000bbb:	81 c6 04 00 00 00    	add    esi,0x4	10000bbd: R_386_32	fpuState
10000bc1:	b9 03 00 00 00       	mov    ecx,0x3
10000bc6:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
10000bc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000bcb:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10000bd2:	83 e0 38             	and    eax,0x38
10000bd5:	83 e2 c7             	and    edx,0xffffffc7
10000bd8:	09 c2                	or     edx,eax
10000bda:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000bdc: R_386_32	fpuState
10000be0:	a1 64 00 00 00       	mov    eax,ds:0x64	10000be1: R_386_32	fpuState
10000be5:	85 c0                	test   eax,eax
10000be7:	74 08                	je     10000bf1 <fpuPop()+0x4c>
10000be9:	48                   	dec    eax
10000bea:	a3 64 00 00 00       	mov    ds:0x64,eax	10000beb: R_386_32	fpuState
10000bef:	eb 07                	jmp    10000bf8 <fpuPop()+0x53>
10000bf1:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	10000bf3: R_386_32	fpuState
10000bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfb:	5e                   	pop    esi
10000bfc:	5f                   	pop    edi
10000bfd:	5d                   	pop    ebp
10000bfe:	c2 04 00             	ret    0x4

10000c01 <x87Handler(regs*)>:
10000c01:	55                   	push   ebp
10000c02:	89 e5                	mov    ebp,esp
10000c04:	57                   	push   edi
10000c05:	56                   	push   esi
10000c06:	53                   	push   ebx
10000c07:	81 ec 2c 06 00 00    	sub    esp,0x62c
10000c0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000c10:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
10000c13:	89 85 d4 f9 ff ff    	mov    DWORD PTR [ebp-0x62c],eax
10000c19:	c6 85 e2 f9 ff ff 00 	mov    BYTE PTR [ebp-0x61e],0x0
10000c20:	c7 85 e4 f9 ff ff 02 00 00 00 	mov    DWORD PTR [ebp-0x61c],0x2
10000c2a:	8d 85 e3 f9 ff ff    	lea    eax,[ebp-0x61d]
10000c30:	50                   	push   eax
10000c31:	8d 85 e2 f9 ff ff    	lea    eax,[ebp-0x61e]
10000c37:	50                   	push   eax
10000c38:	8d 85 e4 f9 ff ff    	lea    eax,[ebp-0x61c]
10000c3e:	50                   	push   eax
10000c3f:	53                   	push   ebx
10000c40:	e8 fc ff ff ff       	call   10000c41 <x87Handler(regs*)+0x40>	10000c41: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000c45:	89 85 d0 f9 ff ff    	mov    DWORD PTR [ebp-0x630],eax
10000c4b:	58                   	pop    eax
10000c4c:	5a                   	pop    edx
10000c4d:	ff b5 d4 f9 ff ff    	push   DWORD PTR [ebp-0x62c]
10000c53:	68 13 23 00 10       	push   0x10002313	10000c54: R_386_32	.text
10000c58:	e8 fc ff ff ff       	call   10000c59 <x87Handler(regs*)+0x58>	10000c59: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c5d:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c63:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10000c67:	89 04 24             	mov    DWORD PTR [esp],eax
10000c6a:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c70:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10000c74:	50                   	push   eax
10000c75:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000c7f:	50                   	push   eax
10000c80:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000c86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10000c89:	50                   	push   eax
10000c8a:	68 41 23 00 10       	push   0x10002341	10000c8b: R_386_32	.text
10000c8f:	e8 fc ff ff ff       	call   10000c90 <x87Handler(regs*)+0x8f>	10000c90: R_386_PC32	Dbg::kprintf(char const*, ...)
10000c94:	83 c4 18             	add    esp,0x18
10000c97:	ff b5 d0 f9 ff ff    	push   DWORD PTR [ebp-0x630]
10000c9d:	68 53 23 00 10       	push   0x10002353	10000c9e: R_386_32	.text
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <x87Handler(regs*)+0xa2>	10000ca3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ca7:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000cad:	8a 10                	mov    dl,BYTE PTR [eax]
10000caf:	83 c4 10             	add    esp,0x10
10000cb2:	80 fa d9             	cmp    dl,0xd9
10000cb5:	0f 85 d9 03 00 00    	jne    10001094 <x87Handler(regs*)+0x493>
10000cbb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000cbf:	8d 50 20             	lea    edx,[eax+0x20]
10000cc2:	80 fa 0e             	cmp    dl,0xe
10000cc5:	0f 87 fa 01 00 00    	ja     10000ec5 <x87Handler(regs*)+0x2c4>
10000ccb:	0f b6 d2             	movzx  edx,dl
10000cce:	ff 24 95 6c 23 00 10 	jmp    DWORD PTR [edx*4+0x1000236c]	10000cd1: R_386_32	.text
10000cd5:	8d b5 e8 f9 ff ff    	lea    esi,[ebp-0x618]
10000cdb:	57                   	push   edi
10000cdc:	57                   	push   edi
10000cdd:	6a 00                	push   0x0
10000cdf:	56                   	push   esi
10000ce0:	e8 fc ff ff ff       	call   10000ce1 <x87Handler(regs*)+0xe0>	10000ce1: R_386_PC32	fpuGetReg(int)
10000ce5:	8d 95 f4 f9 ff ff    	lea    edx,[ebp-0x60c]
10000ceb:	b9 03 00 00 00       	mov    ecx,0x3
10000cf0:	89 e7                	mov    edi,esp
10000cf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000cf4:	52                   	push   edx
10000cf5:	e8 fc ff ff ff       	call   10000cf6 <x87Handler(regs*)+0xf5>	10000cf6: R_386_PC32	fpuChs(_Float80)
10000cfa:	b9 03 00 00 00       	mov    ecx,0x3
10000cff:	89 e7                	mov    edi,esp
10000d01:	89 d6                	mov    esi,edx
10000d03:	eb 49                	jmp    10000d4e <x87Handler(regs*)+0x14d>
10000d05:	8d 85 00 fa ff ff    	lea    eax,[ebp-0x600]
10000d0b:	51                   	push   ecx
10000d0c:	51                   	push   ecx
10000d0d:	6a 00                	push   0x0
10000d0f:	50                   	push   eax
10000d10:	e8 fc ff ff ff       	call   10000d11 <x87Handler(regs*)+0x110>	10000d11: R_386_PC32	fpuGetReg(int)
10000d15:	8b 85 00 fa ff ff    	mov    eax,DWORD PTR [ebp-0x600]
10000d1b:	8b 95 04 fa ff ff    	mov    edx,DWORD PTR [ebp-0x5fc]
10000d21:	89 85 0c fa ff ff    	mov    DWORD PTR [ebp-0x5f4],eax
10000d27:	89 95 10 fa ff ff    	mov    DWORD PTR [ebp-0x5f0],edx
10000d2d:	8b 85 08 fa ff ff    	mov    eax,DWORD PTR [ebp-0x5f8]
10000d33:	66 89 85 14 fa ff ff 	mov    WORD PTR [ebp-0x5ec],ax
10000d3a:	c6 85 16 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ea],0x0
10000d41:	8d b5 0c fa ff ff    	lea    esi,[ebp-0x5f4]
10000d47:	b9 03 00 00 00       	mov    ecx,0x3
10000d4c:	89 e7                	mov    edi,esp
10000d4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d50:	6a 00                	push   0x0
10000d52:	e8 fc ff ff ff       	call   10000d53 <x87Handler(regs*)+0x152>	10000d53: R_386_PC32	fpuSetReg(int, _Float80)
10000d57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000d5b:	83 c4 10             	add    esp,0x10
10000d5e:	b0 01                	mov    al,0x1
10000d60:	e9 5d 15 00 00       	jmp    100022c2 <x87Handler(regs*)+0x16c1>
10000d65:	c6 85 22 fa ff ff 00 	mov    BYTE PTR [ebp-0x5de],0x0
10000d6c:	c7 85 18 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5e8],0x0
10000d76:	c7 85 1c fa ff ff 00 00 00 20 	mov    DWORD PTR [ebp-0x5e4],0x20000000
10000d80:	66 c7 85 20 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5e0],0x4000
10000d89:	83 ec 10             	sub    esp,0x10
10000d8c:	8d b5 18 fa ff ff    	lea    esi,[ebp-0x5e8]
10000d92:	eb 2d                	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000d94:	c6 85 2e fa ff ff 00 	mov    BYTE PTR [ebp-0x5d2],0x0
10000d9b:	c7 85 24 fa ff ff be e2 46 f3 	mov    DWORD PTR [ebp-0x5dc],0xf346e2be
10000da5:	c7 85 28 fa ff ff 12 9e 26 35 	mov    DWORD PTR [ebp-0x5d8],0x35269e12
10000daf:	66 c7 85 2c fa ff ff 01 40 	mov    WORD PTR [ebp-0x5d4],0x4001
10000db8:	83 ec 10             	sub    esp,0x10
10000dbb:	8d b5 24 fa ff ff    	lea    esi,[ebp-0x5dc]
10000dc1:	b9 03 00 00 00       	mov    ecx,0x3
10000dc6:	89 e7                	mov    edi,esp
10000dc8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000dca:	e8 fc ff ff ff       	call   10000dcb <x87Handler(regs*)+0x1ca>	10000dcb: R_386_PC32	fpuPush(_Float80)
10000dcf:	eb 86                	jmp    10000d57 <x87Handler(regs*)+0x156>
10000dd1:	c6 85 3a fa ff ff 00 	mov    BYTE PTR [ebp-0x5c6],0x0
10000dd8:	c7 85 30 fa ff ff 1c fc 05 57 	mov    DWORD PTR [ebp-0x5d0],0x5705fc1c
10000de2:	c7 85 34 fa ff ff ca 8e 2a 2e 	mov    DWORD PTR [ebp-0x5cc],0x2e2a8eca
10000dec:	66 c7 85 38 fa ff ff 00 40 	mov    WORD PTR [ebp-0x5c8],0x4000
10000df5:	83 ec 10             	sub    esp,0x10
10000df8:	8d b5 30 fa ff ff    	lea    esi,[ebp-0x5d0]
10000dfe:	eb c1                	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000e00:	c6 85 46 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ba],0x0
10000e07:	c7 85 3c fa ff ff 8c 30 5a 88 	mov    DWORD PTR [ebp-0x5c4],0x885a308c
10000e11:	c7 85 40 fa ff ff a8 f6 43 32 	mov    DWORD PTR [ebp-0x5c0],0x3243f6a8
10000e1b:	66 c7 85 44 fa ff ff 01 40 	mov    WORD PTR [ebp-0x5bc],0x4001
10000e24:	83 ec 10             	sub    esp,0x10
10000e27:	8d b5 3c fa ff ff    	lea    esi,[ebp-0x5c4]
10000e2d:	eb 92                	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000e2f:	c6 85 52 fa ff ff 00 	mov    BYTE PTR [ebp-0x5ae],0x0
10000e36:	c7 85 48 fa ff ff e6 fd f3 3e 	mov    DWORD PTR [ebp-0x5b8],0x3ef3fde6
10000e40:	c7 85 4c fa ff ff a1 26 88 26 	mov    DWORD PTR [ebp-0x5b4],0x268826a1
10000e4a:	66 c7 85 50 fa ff ff fe 3f 	mov    WORD PTR [ebp-0x5b0],0x3ffe
10000e53:	83 ec 10             	sub    esp,0x10
10000e56:	8d b5 48 fa ff ff    	lea    esi,[ebp-0x5b8]
10000e5c:	e9 60 ff ff ff       	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000e61:	c6 85 5e fa ff ff 00 	mov    BYTE PTR [ebp-0x5a2],0x0
10000e68:	c7 85 54 fa ff ff 68 de 73 f4 	mov    DWORD PTR [ebp-0x5ac],0xf473de68
10000e72:	c7 85 58 fa ff ff fd 85 5c 2c 	mov    DWORD PTR [ebp-0x5a8],0x2c5c85fd
10000e7c:	66 c7 85 5c fa ff ff ff 3f 	mov    WORD PTR [ebp-0x5a4],0x3fff
10000e85:	83 ec 10             	sub    esp,0x10
10000e88:	8d b5 54 fa ff ff    	lea    esi,[ebp-0x5ac]
10000e8e:	e9 2e ff ff ff       	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000e93:	c6 85 6a fa ff ff 00 	mov    BYTE PTR [ebp-0x596],0x0
10000e9a:	c7 85 60 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x5a0],0x0
10000ea4:	c7 85 64 fa ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x59c],0x0
10000eae:	66 c7 85 68 fa ff ff ff 3f 	mov    WORD PTR [ebp-0x598],0x3fff
10000eb7:	83 ec 10             	sub    esp,0x10
10000eba:	8d b5 60 fa ff ff    	lea    esi,[ebp-0x5a0]
10000ec0:	e9 fc fe ff ff       	jmp    10000dc1 <x87Handler(regs*)+0x1c0>
10000ec5:	8d 50 40             	lea    edx,[eax+0x40]
10000ec8:	80 fa 07             	cmp    dl,0x7
10000ecb:	77 27                	ja     10000ef4 <x87Handler(regs*)+0x2f3>
10000ecd:	8d b5 74 fb ff ff    	lea    esi,[ebp-0x48c]
10000ed3:	57                   	push   edi
10000ed4:	57                   	push   edi
10000ed5:	2d c0 00 00 00       	sub    eax,0xc0
10000eda:	50                   	push   eax
10000edb:	56                   	push   esi
10000edc:	e8 fc ff ff ff       	call   10000edd <x87Handler(regs*)+0x2dc>	10000edd: R_386_PC32	fpuGetReg(int)
10000ee1:	83 ec 14             	sub    esp,0x14
10000ee4:	b9 03 00 00 00       	mov    ecx,0x3
10000ee9:	89 e7                	mov    edi,esp
10000eeb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000eed:	e8 fc ff ff ff       	call   10000eee <x87Handler(regs*)+0x2ed>	10000eee: R_386_PC32	fpuPush(_Float80)
10000ef2:	eb 63                	jmp    10000f57 <x87Handler(regs*)+0x356>
10000ef4:	8d 50 38             	lea    edx,[eax+0x38]
10000ef7:	80 fa 07             	cmp    dl,0x7
10000efa:	77 64                	ja     10000f60 <x87Handler(regs*)+0x35f>
10000efc:	8d 55 dc             	lea    edx,[ebp-0x24]
10000eff:	56                   	push   esi
10000f00:	56                   	push   esi
10000f01:	2d c8 00 00 00       	sub    eax,0xc8
10000f06:	50                   	push   eax
10000f07:	52                   	push   edx
10000f08:	e8 fc ff ff ff       	call   10000f09 <x87Handler(regs*)+0x308>	10000f09: R_386_PC32	fpuGetReg(int)
10000f0d:	8d b5 80 fb ff ff    	lea    esi,[ebp-0x480]
10000f13:	83 ec 0c             	sub    esp,0xc
10000f16:	6a 00                	push   0x0
10000f18:	56                   	push   esi
10000f19:	e8 fc ff ff ff       	call   10000f1a <x87Handler(regs*)+0x319>	10000f1a: R_386_PC32	fpuGetReg(int)
10000f1e:	83 c4 10             	add    esp,0x10
10000f21:	b9 03 00 00 00       	mov    ecx,0x3
10000f26:	89 e7                	mov    edi,esp
10000f28:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f2a:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10000f30:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10000f34:	2d c8 00 00 00       	sub    eax,0xc8
10000f39:	50                   	push   eax
10000f3a:	e8 fc ff ff ff       	call   10000f3b <x87Handler(regs*)+0x33a>	10000f3b: R_386_PC32	fpuSetReg(int, _Float80)
10000f3f:	83 ec 0c             	sub    esp,0xc
10000f42:	b9 03 00 00 00       	mov    ecx,0x3
10000f47:	89 e7                	mov    edi,esp
10000f49:	8d 55 dc             	lea    edx,[ebp-0x24]
10000f4c:	89 d6                	mov    esi,edx
10000f4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000f50:	6a 00                	push   0x0
10000f52:	e8 fc ff ff ff       	call   10000f53 <x87Handler(regs*)+0x352>	10000f53: R_386_PC32	fpuSetReg(int, _Float80)
10000f57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f5b:	e9 2c 01 00 00       	jmp    1000108c <x87Handler(regs*)+0x48b>
10000f60:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10000f66:	84 d2                	test   dl,dl
10000f68:	75 1b                	jne    10000f85 <x87Handler(regs*)+0x384>
10000f6a:	8d b5 20 fe ff ff    	lea    esi,[ebp-0x1e0]
10000f70:	50                   	push   eax
10000f71:	50                   	push   eax
10000f72:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10000f78:	ff 30                	push   DWORD PTR [eax]
10000f7a:	56                   	push   esi
10000f7b:	e8 fc ff ff ff       	call   10000f7c <x87Handler(regs*)+0x37b>	10000f7c: R_386_PC32	fpu32ToInternal(unsigned int)
10000f80:	e9 bd 00 00 00       	jmp    10001042 <x87Handler(regs*)+0x441>
10000f85:	80 fa 03             	cmp    dl,0x3
10000f88:	75 22                	jne    10000fac <x87Handler(regs*)+0x3ab>
10000f8a:	8d b5 2c fe ff ff    	lea    esi,[ebp-0x1d4]
10000f90:	83 ec 0c             	sub    esp,0xc
10000f93:	56                   	push   esi
10000f94:	e8 fc ff ff ff       	call   10000f95 <x87Handler(regs*)+0x394>	10000f95: R_386_PC32	fpuPop()
10000f99:	83 ec 14             	sub    esp,0x14
10000f9c:	b9 03 00 00 00       	mov    ecx,0x3
10000fa1:	89 e7                	mov    edi,esp
10000fa3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000fa5:	e8 fc ff ff ff       	call   10000fa6 <x87Handler(regs*)+0x3a5>	10000fa6: R_386_PC32	fpuInternalTo32(_Float80)
10000faa:	eb 69                	jmp    10001015 <x87Handler(regs*)+0x414>
10000fac:	80 fa 05             	cmp    dl,0x5
10000faf:	75 11                	jne    10000fc2 <x87Handler(regs*)+0x3c1>
10000fb1:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10000fb7:	66 8b 00             	mov    ax,WORD PTR [eax]
10000fba:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000fbc: R_386_32	fpuState
10000fc0:	eb 1a                	jmp    10000fdc <x87Handler(regs*)+0x3db>
10000fc2:	31 c0                	xor    eax,eax
10000fc4:	80 fa 07             	cmp    dl,0x7
10000fc7:	0f 85 f5 12 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10000fcd:	66 a1 02 00 00 00    	mov    ax,ds:0x2	10000fcf: R_386_32	fpuState
10000fd3:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10000fd9:	66 89 07             	mov    WORD PTR [edi],ax
10000fdc:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10000fe2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000fe5:	e9 74 fd ff ff       	jmp    10000d5e <x87Handler(regs*)+0x15d>
10000fea:	31 c0                	xor    eax,eax
10000fec:	80 fa 03             	cmp    dl,0x3
10000fef:	0f 85 cd 12 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10000ff5:	8d b5 98 fe ff ff    	lea    esi,[ebp-0x168]
10000ffb:	83 ec 0c             	sub    esp,0xc
10000ffe:	56                   	push   esi
10000fff:	e8 fc ff ff ff       	call   10001000 <x87Handler(regs*)+0x3ff>	10001000: R_386_PC32	fpuPop()
10001004:	83 ec 14             	sub    esp,0x14
10001007:	b9 03 00 00 00       	mov    ecx,0x3
1000100c:	89 e7                	mov    edi,esp
1000100e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001010:	e8 fc ff ff ff       	call   10001011 <x87Handler(regs*)+0x410>	10001011: R_386_PC32	fpuFloatToLong(_Float80)
10001015:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
1000101b:	89 01                	mov    DWORD PTR [ecx],eax
1000101d:	eb 64                	jmp    10001083 <x87Handler(regs*)+0x482>
1000101f:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001025:	84 d2                	test   dl,dl
10001027:	0f 85 dc 11 00 00    	jne    10002209 <x87Handler(regs*)+0x1608>
1000102d:	8d 75 ac             	lea    esi,[ebp-0x54]
10001030:	51                   	push   ecx
10001031:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001037:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000103a:	ff 30                	push   DWORD PTR [eax]
1000103c:	56                   	push   esi
1000103d:	e8 fc ff ff ff       	call   1000103e <x87Handler(regs*)+0x43d>	1000103e: R_386_PC32	fpu64ToInternal(unsigned long long)
10001042:	83 ec 14             	sub    esp,0x14
10001045:	b9 03 00 00 00       	mov    ecx,0x3
1000104a:	89 e7                	mov    edi,esp
1000104c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000104e:	e8 fc ff ff ff       	call   1000104f <x87Handler(regs*)+0x44e>	1000104f: R_386_PC32	fpuPush(_Float80)
10001053:	eb 2e                	jmp    10001083 <x87Handler(regs*)+0x482>
10001055:	80 fa 02             	cmp    dl,0x2
10001058:	75 90                	jne    10000fea <x87Handler(regs*)+0x3e9>
1000105a:	8d b5 8c fe ff ff    	lea    esi,[ebp-0x174]
10001060:	50                   	push   eax
10001061:	50                   	push   eax
10001062:	6a 00                	push   0x0
10001064:	56                   	push   esi
10001065:	e8 fc ff ff ff       	call   10001066 <x87Handler(regs*)+0x465>	10001066: R_386_PC32	fpuGetReg(int)
1000106a:	83 ec 14             	sub    esp,0x14
1000106d:	b9 03 00 00 00       	mov    ecx,0x3
10001072:	89 e7                	mov    edi,esp
10001074:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001076:	e8 fc ff ff ff       	call   10001077 <x87Handler(regs*)+0x476>	10001077: R_386_PC32	fpuFloatToLong(_Float80)
1000107b:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
10001081:	89 02                	mov    DWORD PTR [edx],eax
10001083:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001089:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
1000108c:	83 c4 20             	add    esp,0x20
1000108f:	e9 ca fc ff ff       	jmp    10000d5e <x87Handler(regs*)+0x15d>
10001094:	80 fa d8             	cmp    dl,0xd8
10001097:	0f 85 56 03 00 00    	jne    100013f3 <x87Handler(regs*)+0x7f2>
1000109d:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100010a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100010a7:	8d 50 40             	lea    edx,[eax+0x40]
100010aa:	80 fa 07             	cmp    dl,0x7
100010ad:	77 64                	ja     10001113 <x87Handler(regs*)+0x512>
100010af:	8d b5 6c fa ff ff    	lea    esi,[ebp-0x594]
100010b5:	57                   	push   edi
100010b6:	57                   	push   edi
100010b7:	2d c0 00 00 00       	sub    eax,0xc0
100010bc:	50                   	push   eax
100010bd:	56                   	push   esi
100010be:	e8 fc ff ff ff       	call   100010bf <x87Handler(regs*)+0x4be>	100010bf: R_386_PC32	fpuGetReg(int)
100010c3:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100010c9:	83 ec 0c             	sub    esp,0xc
100010cc:	6a 00                	push   0x0
100010ce:	52                   	push   edx
100010cf:	e8 fc ff ff ff       	call   100010d0 <x87Handler(regs*)+0x4cf>	100010d0: R_386_PC32	fpuGetReg(int)
100010d4:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
100010da:	52                   	push   edx
100010db:	b9 03 00 00 00       	mov    ecx,0x3
100010e0:	89 e7                	mov    edi,esp
100010e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010e4:	83 ec 0c             	sub    esp,0xc
100010e7:	b9 03 00 00 00       	mov    ecx,0x3
100010ec:	89 e7                	mov    edi,esp
100010ee:	8d 95 78 fa ff ff    	lea    edx,[ebp-0x588]
100010f4:	89 d6                	mov    esi,edx
100010f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100010f8:	50                   	push   eax
100010f9:	e8 fc ff ff ff       	call   100010fa <x87Handler(regs*)+0x4f9>	100010fa: R_386_PC32	fpuAdd(_Float80, _Float80)
100010fe:	83 c4 20             	add    esp,0x20
10001101:	b9 03 00 00 00       	mov    ecx,0x3
10001106:	89 e7                	mov    edi,esp
10001108:	8d 85 84 fa ff ff    	lea    eax,[ebp-0x57c]
1000110e:	e9 e0 01 00 00       	jmp    100012f3 <x87Handler(regs*)+0x6f2>
10001113:	8d 50 38             	lea    edx,[eax+0x38]
10001116:	80 fa 07             	cmp    dl,0x7
10001119:	77 64                	ja     1000117f <x87Handler(regs*)+0x57e>
1000111b:	8d b5 90 fa ff ff    	lea    esi,[ebp-0x570]
10001121:	52                   	push   edx
10001122:	52                   	push   edx
10001123:	2d c8 00 00 00       	sub    eax,0xc8
10001128:	50                   	push   eax
10001129:	56                   	push   esi
1000112a:	e8 fc ff ff ff       	call   1000112b <x87Handler(regs*)+0x52a>	1000112b: R_386_PC32	fpuGetReg(int)
1000112f:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
10001135:	83 ec 0c             	sub    esp,0xc
10001138:	6a 00                	push   0x0
1000113a:	52                   	push   edx
1000113b:	e8 fc ff ff ff       	call   1000113c <x87Handler(regs*)+0x53b>	1000113c: R_386_PC32	fpuGetReg(int)
10001140:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
10001146:	51                   	push   ecx
10001147:	b9 03 00 00 00       	mov    ecx,0x3
1000114c:	89 e7                	mov    edi,esp
1000114e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001150:	83 ec 0c             	sub    esp,0xc
10001153:	b9 03 00 00 00       	mov    ecx,0x3
10001158:	89 e7                	mov    edi,esp
1000115a:	8d 95 9c fa ff ff    	lea    edx,[ebp-0x564]
10001160:	89 d6                	mov    esi,edx
10001162:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001164:	50                   	push   eax
10001165:	e8 fc ff ff ff       	call   10001166 <x87Handler(regs*)+0x565>	10001166: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000116a:	83 c4 20             	add    esp,0x20
1000116d:	b9 03 00 00 00       	mov    ecx,0x3
10001172:	89 e7                	mov    edi,esp
10001174:	8d 85 a8 fa ff ff    	lea    eax,[ebp-0x558]
1000117a:	e9 74 01 00 00       	jmp    100012f3 <x87Handler(regs*)+0x6f2>
1000117f:	8d 50 30             	lea    edx,[eax+0x30]
10001182:	80 fa 07             	cmp    dl,0x7
10001185:	77 45                	ja     100011cc <x87Handler(regs*)+0x5cb>
10001187:	8d b5 b4 fa ff ff    	lea    esi,[ebp-0x54c]
1000118d:	57                   	push   edi
1000118e:	57                   	push   edi
1000118f:	2d d0 00 00 00       	sub    eax,0xd0
10001194:	50                   	push   eax
10001195:	56                   	push   esi
10001196:	e8 fc ff ff ff       	call   10001197 <x87Handler(regs*)+0x596>	10001197: R_386_PC32	fpuGetReg(int)
1000119b:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100011a1:	83 ec 0c             	sub    esp,0xc
100011a4:	6a 00                	push   0x0
100011a6:	50                   	push   eax
100011a7:	e8 fc ff ff ff       	call   100011a8 <x87Handler(regs*)+0x5a7>	100011a8: R_386_PC32	fpuGetReg(int)
100011ac:	50                   	push   eax
100011ad:	50                   	push   eax
100011ae:	b9 03 00 00 00       	mov    ecx,0x3
100011b3:	89 e7                	mov    edi,esp
100011b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100011b7:	83 ec 0c             	sub    esp,0xc
100011ba:	b9 03 00 00 00       	mov    ecx,0x3
100011bf:	89 e7                	mov    edi,esp
100011c1:	8d 85 c0 fa ff ff    	lea    eax,[ebp-0x540]
100011c7:	e9 c6 07 00 00       	jmp    10001992 <x87Handler(regs*)+0xd91>
100011cc:	8d 50 28             	lea    edx,[eax+0x28]
100011cf:	80 fa 07             	cmp    dl,0x7
100011d2:	77 45                	ja     10001219 <x87Handler(regs*)+0x618>
100011d4:	8d b5 cc fa ff ff    	lea    esi,[ebp-0x534]
100011da:	52                   	push   edx
100011db:	52                   	push   edx
100011dc:	2d d8 00 00 00       	sub    eax,0xd8
100011e1:	50                   	push   eax
100011e2:	56                   	push   esi
100011e3:	e8 fc ff ff ff       	call   100011e4 <x87Handler(regs*)+0x5e3>	100011e4: R_386_PC32	fpuGetReg(int)
100011e8:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
100011ee:	83 ec 0c             	sub    esp,0xc
100011f1:	6a 00                	push   0x0
100011f3:	50                   	push   eax
100011f4:	e8 fc ff ff ff       	call   100011f5 <x87Handler(regs*)+0x5f4>	100011f5: R_386_PC32	fpuGetReg(int)
100011f9:	51                   	push   ecx
100011fa:	51                   	push   ecx
100011fb:	b9 03 00 00 00       	mov    ecx,0x3
10001200:	89 e7                	mov    edi,esp
10001202:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001204:	83 ec 0c             	sub    esp,0xc
10001207:	b9 03 00 00 00       	mov    ecx,0x3
1000120c:	89 e7                	mov    edi,esp
1000120e:	8d 85 d8 fa ff ff    	lea    eax,[ebp-0x528]
10001214:	e9 d7 07 00 00       	jmp    100019f0 <x87Handler(regs*)+0xdef>
10001219:	8d 50 20             	lea    edx,[eax+0x20]
1000121c:	80 fa 07             	cmp    dl,0x7
1000121f:	77 61                	ja     10001282 <x87Handler(regs*)+0x681>
10001221:	8d b5 e4 fa ff ff    	lea    esi,[ebp-0x51c]
10001227:	51                   	push   ecx
10001228:	51                   	push   ecx
10001229:	2d e0 00 00 00       	sub    eax,0xe0
1000122e:	50                   	push   eax
1000122f:	56                   	push   esi
10001230:	e8 fc ff ff ff       	call   10001231 <x87Handler(regs*)+0x630>	10001231: R_386_PC32	fpuGetReg(int)
10001235:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
1000123b:	83 ec 0c             	sub    esp,0xc
1000123e:	6a 00                	push   0x0
10001240:	52                   	push   edx
10001241:	e8 fc ff ff ff       	call   10001242 <x87Handler(regs*)+0x641>	10001242: R_386_PC32	fpuGetReg(int)
10001246:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
1000124c:	57                   	push   edi
1000124d:	b9 03 00 00 00       	mov    ecx,0x3
10001252:	89 e7                	mov    edi,esp
10001254:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001256:	83 ec 0c             	sub    esp,0xc
10001259:	b9 03 00 00 00       	mov    ecx,0x3
1000125e:	89 e7                	mov    edi,esp
10001260:	8d 95 f0 fa ff ff    	lea    edx,[ebp-0x510]
10001266:	89 d6                	mov    esi,edx
10001268:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000126a:	50                   	push   eax
1000126b:	e8 fc ff ff ff       	call   1000126c <x87Handler(regs*)+0x66b>	1000126c: R_386_PC32	fpuSub(_Float80, _Float80)
10001270:	83 c4 20             	add    esp,0x20
10001273:	b9 03 00 00 00       	mov    ecx,0x3
10001278:	89 e7                	mov    edi,esp
1000127a:	8d 85 fc fa ff ff    	lea    eax,[ebp-0x504]
10001280:	eb 71                	jmp    100012f3 <x87Handler(regs*)+0x6f2>
10001282:	8d 50 18             	lea    edx,[eax+0x18]
10001285:	80 fa 07             	cmp    dl,0x7
10001288:	77 70                	ja     100012fa <x87Handler(regs*)+0x6f9>
1000128a:	8d b5 08 fb ff ff    	lea    esi,[ebp-0x4f8]
10001290:	50                   	push   eax
10001291:	50                   	push   eax
10001292:	6a 00                	push   0x0
10001294:	56                   	push   esi
10001295:	e8 fc ff ff ff       	call   10001296 <x87Handler(regs*)+0x695>	10001296: R_386_PC32	fpuGetReg(int)
1000129a:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100012a0:	83 ec 0c             	sub    esp,0xc
100012a3:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100012a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100012ad:	2d e8 00 00 00       	sub    eax,0xe8
100012b2:	50                   	push   eax
100012b3:	52                   	push   edx
100012b4:	e8 fc ff ff ff       	call   100012b5 <x87Handler(regs*)+0x6b4>	100012b5: R_386_PC32	fpuGetReg(int)
100012b9:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100012bf:	52                   	push   edx
100012c0:	b9 03 00 00 00       	mov    ecx,0x3
100012c5:	89 e7                	mov    edi,esp
100012c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012c9:	83 ec 0c             	sub    esp,0xc
100012cc:	b9 03 00 00 00       	mov    ecx,0x3
100012d1:	89 e7                	mov    edi,esp
100012d3:	8d 95 14 fb ff ff    	lea    edx,[ebp-0x4ec]
100012d9:	89 d6                	mov    esi,edx
100012db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012dd:	50                   	push   eax
100012de:	e8 fc ff ff ff       	call   100012df <x87Handler(regs*)+0x6de>	100012df: R_386_PC32	fpuSub(_Float80, _Float80)
100012e3:	83 c4 20             	add    esp,0x20
100012e6:	b9 03 00 00 00       	mov    ecx,0x3
100012eb:	89 e7                	mov    edi,esp
100012ed:	8d 85 20 fb ff ff    	lea    eax,[ebp-0x4e0]
100012f3:	89 c6                	mov    esi,eax
100012f5:	e9 54 fa ff ff       	jmp    10000d4e <x87Handler(regs*)+0x14d>
100012fa:	8d 50 10             	lea    edx,[eax+0x10]
100012fd:	80 fa 07             	cmp    dl,0x7
10001300:	77 61                	ja     10001363 <x87Handler(regs*)+0x762>
10001302:	8d b5 2c fb ff ff    	lea    esi,[ebp-0x4d4]
10001308:	51                   	push   ecx
10001309:	51                   	push   ecx
1000130a:	2d f0 00 00 00       	sub    eax,0xf0
1000130f:	50                   	push   eax
10001310:	56                   	push   esi
10001311:	e8 fc ff ff ff       	call   10001312 <x87Handler(regs*)+0x711>	10001312: R_386_PC32	fpuGetReg(int)
10001316:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
1000131c:	83 ec 0c             	sub    esp,0xc
1000131f:	6a 00                	push   0x0
10001321:	52                   	push   edx
10001322:	e8 fc ff ff ff       	call   10001323 <x87Handler(regs*)+0x722>	10001323: R_386_PC32	fpuGetReg(int)
10001327:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
1000132d:	57                   	push   edi
1000132e:	b9 03 00 00 00       	mov    ecx,0x3
10001333:	89 e7                	mov    edi,esp
10001335:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001337:	83 ec 0c             	sub    esp,0xc
1000133a:	b9 03 00 00 00       	mov    ecx,0x3
1000133f:	89 e7                	mov    edi,esp
10001341:	8d 95 38 fb ff ff    	lea    edx,[ebp-0x4c8]
10001347:	89 d6                	mov    esi,edx
10001349:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000134b:	50                   	push   eax
1000134c:	e8 fc ff ff ff       	call   1000134d <x87Handler(regs*)+0x74c>	1000134d: R_386_PC32	fpuDivide(_Float80, _Float80)
10001351:	83 c4 20             	add    esp,0x20
10001354:	b9 03 00 00 00       	mov    ecx,0x3
10001359:	89 e7                	mov    edi,esp
1000135b:	8d 85 44 fb ff ff    	lea    eax,[ebp-0x4bc]
10001361:	eb 71                	jmp    100013d4 <x87Handler(regs*)+0x7d3>
10001363:	3c f7                	cmp    al,0xf7
10001365:	0f 86 89 07 00 00    	jbe    10001af4 <x87Handler(regs*)+0xef3>
1000136b:	8d b5 50 fb ff ff    	lea    esi,[ebp-0x4b0]
10001371:	50                   	push   eax
10001372:	50                   	push   eax
10001373:	6a 00                	push   0x0
10001375:	56                   	push   esi
10001376:	e8 fc ff ff ff       	call   10001377 <x87Handler(regs*)+0x776>	10001377: R_386_PC32	fpuGetReg(int)
1000137b:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
10001381:	83 ec 0c             	sub    esp,0xc
10001384:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000138a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000138e:	2d f8 00 00 00       	sub    eax,0xf8
10001393:	50                   	push   eax
10001394:	52                   	push   edx
10001395:	e8 fc ff ff ff       	call   10001396 <x87Handler(regs*)+0x795>	10001396: R_386_PC32	fpuGetReg(int)
1000139a:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100013a0:	52                   	push   edx
100013a1:	b9 03 00 00 00       	mov    ecx,0x3
100013a6:	89 e7                	mov    edi,esp
100013a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013aa:	83 ec 0c             	sub    esp,0xc
100013ad:	b9 03 00 00 00       	mov    ecx,0x3
100013b2:	89 e7                	mov    edi,esp
100013b4:	8d 95 5c fb ff ff    	lea    edx,[ebp-0x4a4]
100013ba:	89 d6                	mov    esi,edx
100013bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <x87Handler(regs*)+0x7bf>	100013c0: R_386_PC32	fpuDivide(_Float80, _Float80)
100013c4:	83 c4 20             	add    esp,0x20
100013c7:	b9 03 00 00 00       	mov    ecx,0x3
100013cc:	89 e7                	mov    edi,esp
100013ce:	8d 85 68 fb ff ff    	lea    eax,[ebp-0x498]
100013d4:	89 c6                	mov    esi,eax
100013d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100013d8:	6a 00                	push   0x0
100013da:	e8 fc ff ff ff       	call   100013db <x87Handler(regs*)+0x7da>	100013db: R_386_PC32	fpuSetReg(int, _Float80)
100013df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100013e3:	8d 45 dc             	lea    eax,[ebp-0x24]
100013e6:	89 04 24             	mov    DWORD PTR [esp],eax
100013e9:	e8 fc ff ff ff       	call   100013ea <x87Handler(regs*)+0x7e9>	100013ea: R_386_PC32	fpuPop()
100013ee:	e9 50 0c 00 00       	jmp    10002043 <x87Handler(regs*)+0x1442>
100013f3:	80 fa dc             	cmp    dl,0xdc
100013f6:	0f 85 94 01 00 00    	jne    10001590 <x87Handler(regs*)+0x98f>
100013fc:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001402:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001406:	8d 50 40             	lea    edx,[eax+0x40]
10001409:	80 fa 07             	cmp    dl,0x7
1000140c:	77 77                	ja     10001485 <x87Handler(regs*)+0x884>
1000140e:	8d b5 8c fb ff ff    	lea    esi,[ebp-0x474]
10001414:	52                   	push   edx
10001415:	52                   	push   edx
10001416:	2d c0 00 00 00       	sub    eax,0xc0
1000141b:	50                   	push   eax
1000141c:	56                   	push   esi
1000141d:	e8 fc ff ff ff       	call   1000141e <x87Handler(regs*)+0x81d>	1000141e: R_386_PC32	fpuGetReg(int)
10001422:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001428:	83 ec 0c             	sub    esp,0xc
1000142b:	6a 00                	push   0x0
1000142d:	52                   	push   edx
1000142e:	e8 fc ff ff ff       	call   1000142f <x87Handler(regs*)+0x82e>	1000142f: R_386_PC32	fpuGetReg(int)
10001433:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
10001439:	51                   	push   ecx
1000143a:	b9 03 00 00 00       	mov    ecx,0x3
1000143f:	89 e7                	mov    edi,esp
10001441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001443:	83 ec 0c             	sub    esp,0xc
10001446:	b9 03 00 00 00       	mov    ecx,0x3
1000144b:	89 e7                	mov    edi,esp
1000144d:	8d 95 98 fb ff ff    	lea    edx,[ebp-0x468]
10001453:	89 d6                	mov    esi,edx
10001455:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001457:	50                   	push   eax
10001458:	e8 fc ff ff ff       	call   10001459 <x87Handler(regs*)+0x858>	10001459: R_386_PC32	fpuAdd(_Float80, _Float80)
1000145d:	83 c4 20             	add    esp,0x20
10001460:	b9 03 00 00 00       	mov    ecx,0x3
10001465:	89 e7                	mov    edi,esp
10001467:	8d 85 a4 fb ff ff    	lea    eax,[ebp-0x45c]
1000146d:	89 c6                	mov    esi,eax
1000146f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001471:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001477:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000147b:	2d c0 00 00 00       	sub    eax,0xc0
10001480:	e9 8a 04 00 00       	jmp    1000190f <x87Handler(regs*)+0xd0e>
10001485:	8d 50 38             	lea    edx,[eax+0x38]
10001488:	80 fa 07             	cmp    dl,0x7
1000148b:	77 77                	ja     10001504 <x87Handler(regs*)+0x903>
1000148d:	8d b5 b0 fb ff ff    	lea    esi,[ebp-0x450]
10001493:	51                   	push   ecx
10001494:	51                   	push   ecx
10001495:	2d c8 00 00 00       	sub    eax,0xc8
1000149a:	50                   	push   eax
1000149b:	56                   	push   esi
1000149c:	e8 fc ff ff ff       	call   1000149d <x87Handler(regs*)+0x89c>	1000149d: R_386_PC32	fpuGetReg(int)
100014a1:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
100014a7:	83 ec 0c             	sub    esp,0xc
100014aa:	6a 00                	push   0x0
100014ac:	52                   	push   edx
100014ad:	e8 fc ff ff ff       	call   100014ae <x87Handler(regs*)+0x8ad>	100014ae: R_386_PC32	fpuGetReg(int)
100014b2:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100014b8:	57                   	push   edi
100014b9:	b9 03 00 00 00       	mov    ecx,0x3
100014be:	89 e7                	mov    edi,esp
100014c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014c2:	83 ec 0c             	sub    esp,0xc
100014c5:	b9 03 00 00 00       	mov    ecx,0x3
100014ca:	89 e7                	mov    edi,esp
100014cc:	8d 95 bc fb ff ff    	lea    edx,[ebp-0x444]
100014d2:	89 d6                	mov    esi,edx
100014d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014d6:	50                   	push   eax
100014d7:	e8 fc ff ff ff       	call   100014d8 <x87Handler(regs*)+0x8d7>	100014d8: R_386_PC32	fpuMultiply(_Float80, _Float80)
100014dc:	83 c4 20             	add    esp,0x20
100014df:	b9 03 00 00 00       	mov    ecx,0x3
100014e4:	89 e7                	mov    edi,esp
100014e6:	8d 85 c8 fb ff ff    	lea    eax,[ebp-0x438]
100014ec:	89 c6                	mov    esi,eax
100014ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100014f0:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100014f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100014fa:	2d c8 00 00 00       	sub    eax,0xc8
100014ff:	e9 0b 04 00 00       	jmp    1000190f <x87Handler(regs*)+0xd0e>
10001504:	83 c0 18             	add    eax,0x18
10001507:	3c 07                	cmp    al,0x7
10001509:	0f 87 8b 09 00 00    	ja     10001e9a <x87Handler(regs*)+0x1299>
1000150f:	8d b5 d4 fb ff ff    	lea    esi,[ebp-0x42c]
10001515:	50                   	push   eax
10001516:	50                   	push   eax
10001517:	6a 00                	push   0x0
10001519:	56                   	push   esi
1000151a:	e8 fc ff ff ff       	call   1000151b <x87Handler(regs*)+0x91a>	1000151b: R_386_PC32	fpuGetReg(int)
1000151f:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
10001525:	83 ec 0c             	sub    esp,0xc
10001528:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000152e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001532:	2d e8 00 00 00       	sub    eax,0xe8
10001537:	50                   	push   eax
10001538:	52                   	push   edx
10001539:	e8 fc ff ff ff       	call   1000153a <x87Handler(regs*)+0x939>	1000153a: R_386_PC32	fpuGetReg(int)
1000153e:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001544:	52                   	push   edx
10001545:	b9 03 00 00 00       	mov    ecx,0x3
1000154a:	89 e7                	mov    edi,esp
1000154c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000154e:	83 ec 0c             	sub    esp,0xc
10001551:	b9 03 00 00 00       	mov    ecx,0x3
10001556:	89 e7                	mov    edi,esp
10001558:	8d 95 e0 fb ff ff    	lea    edx,[ebp-0x420]
1000155e:	89 d6                	mov    esi,edx
10001560:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001562:	50                   	push   eax
10001563:	e8 fc ff ff ff       	call   10001564 <x87Handler(regs*)+0x963>	10001564: R_386_PC32	fpuSub(_Float80, _Float80)
10001568:	83 c4 20             	add    esp,0x20
1000156b:	b9 03 00 00 00       	mov    ecx,0x3
10001570:	89 e7                	mov    edi,esp
10001572:	8d 85 ec fb ff ff    	lea    eax,[ebp-0x414]
10001578:	89 c6                	mov    esi,eax
1000157a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000157c:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001582:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001586:	2d e8 00 00 00       	sub    eax,0xe8
1000158b:	e9 7f 03 00 00       	jmp    1000190f <x87Handler(regs*)+0xd0e>
10001590:	80 fa de             	cmp    dl,0xde
10001593:	0f 85 33 03 00 00    	jne    100018cc <x87Handler(regs*)+0xccb>
10001599:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000159f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100015a3:	8d 42 40             	lea    eax,[edx+0x40]
100015a6:	3c 07                	cmp    al,0x7
100015a8:	0f 87 8d 00 00 00    	ja     1000163b <x87Handler(regs*)+0xa3a>
100015ae:	8d b5 f8 fb ff ff    	lea    esi,[ebp-0x408]
100015b4:	51                   	push   ecx
100015b5:	51                   	push   ecx
100015b6:	81 ea c0 00 00 00    	sub    edx,0xc0
100015bc:	52                   	push   edx
100015bd:	56                   	push   esi
100015be:	e8 fc ff ff ff       	call   100015bf <x87Handler(regs*)+0x9be>	100015bf: R_386_PC32	fpuGetReg(int)
100015c3:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100015c9:	83 ec 0c             	sub    esp,0xc
100015cc:	6a 00                	push   0x0
100015ce:	52                   	push   edx
100015cf:	e8 fc ff ff ff       	call   100015d0 <x87Handler(regs*)+0x9cf>	100015d0: R_386_PC32	fpuGetReg(int)
100015d4:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
100015da:	57                   	push   edi
100015db:	b9 03 00 00 00       	mov    ecx,0x3
100015e0:	89 e7                	mov    edi,esp
100015e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015e4:	83 ec 0c             	sub    esp,0xc
100015e7:	b9 03 00 00 00       	mov    ecx,0x3
100015ec:	89 e7                	mov    edi,esp
100015ee:	8d 95 04 fc ff ff    	lea    edx,[ebp-0x3fc]
100015f4:	89 d6                	mov    esi,edx
100015f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015f8:	50                   	push   eax
100015f9:	e8 fc ff ff ff       	call   100015fa <x87Handler(regs*)+0x9f9>	100015fa: R_386_PC32	fpuAdd(_Float80, _Float80)
100015fe:	83 c4 20             	add    esp,0x20
10001601:	b9 03 00 00 00       	mov    ecx,0x3
10001606:	89 e7                	mov    edi,esp
10001608:	8d 85 10 fc ff ff    	lea    eax,[ebp-0x3f0]
1000160e:	89 c6                	mov    esi,eax
10001610:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001612:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001618:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000161c:	2d c0 00 00 00       	sub    eax,0xc0
10001621:	50                   	push   eax
10001622:	e8 fc ff ff ff       	call   10001623 <x87Handler(regs*)+0xa22>	10001623: R_386_PC32	fpuSetReg(int, _Float80)
10001627:	8d 45 dc             	lea    eax,[ebp-0x24]
1000162a:	89 04 24             	mov    DWORD PTR [esp],eax
1000162d:	e8 fc ff ff ff       	call   1000162e <x87Handler(regs*)+0xa2d>	1000162e: R_386_PC32	fpuPop()
10001632:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001636:	e9 08 0a 00 00       	jmp    10002043 <x87Handler(regs*)+0x1442>
1000163b:	8d 42 20             	lea    eax,[edx+0x20]
1000163e:	3c 07                	cmp    al,0x7
10001640:	77 78                	ja     100016ba <x87Handler(regs*)+0xab9>
10001642:	8d b5 1c fc ff ff    	lea    esi,[ebp-0x3e4]
10001648:	50                   	push   eax
10001649:	50                   	push   eax
1000164a:	81 ea e0 00 00 00    	sub    edx,0xe0
10001650:	52                   	push   edx
10001651:	56                   	push   esi
10001652:	e8 fc ff ff ff       	call   10001653 <x87Handler(regs*)+0xa52>	10001653: R_386_PC32	fpuGetReg(int)
10001657:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
1000165d:	83 ec 0c             	sub    esp,0xc
10001660:	6a 00                	push   0x0
10001662:	52                   	push   edx
10001663:	e8 fc ff ff ff       	call   10001664 <x87Handler(regs*)+0xa63>	10001664: R_386_PC32	fpuGetReg(int)
10001668:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
1000166e:	52                   	push   edx
1000166f:	b9 03 00 00 00       	mov    ecx,0x3
10001674:	89 e7                	mov    edi,esp
10001676:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001678:	83 ec 0c             	sub    esp,0xc
1000167b:	b9 03 00 00 00       	mov    ecx,0x3
10001680:	89 e7                	mov    edi,esp
10001682:	8d 95 28 fc ff ff    	lea    edx,[ebp-0x3d8]
10001688:	89 d6                	mov    esi,edx
1000168a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000168c:	50                   	push   eax
1000168d:	e8 fc ff ff ff       	call   1000168e <x87Handler(regs*)+0xa8d>	1000168e: R_386_PC32	fpuSub(_Float80, _Float80)
10001692:	83 c4 20             	add    esp,0x20
10001695:	b9 03 00 00 00       	mov    ecx,0x3
1000169a:	89 e7                	mov    edi,esp
1000169c:	8d 85 34 fc ff ff    	lea    eax,[ebp-0x3cc]
100016a2:	89 c6                	mov    esi,eax
100016a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100016a6:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100016ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016b0:	2d e0 00 00 00       	sub    eax,0xe0
100016b5:	e9 67 ff ff ff       	jmp    10001621 <x87Handler(regs*)+0xa20>
100016ba:	8d 42 18             	lea    eax,[edx+0x18]
100016bd:	3c 07                	cmp    al,0x7
100016bf:	0f 87 81 00 00 00    	ja     10001746 <x87Handler(regs*)+0xb45>
100016c5:	8d b5 40 fc ff ff    	lea    esi,[ebp-0x3c0]
100016cb:	51                   	push   ecx
100016cc:	51                   	push   ecx
100016cd:	6a 00                	push   0x0
100016cf:	56                   	push   esi
100016d0:	e8 fc ff ff ff       	call   100016d1 <x87Handler(regs*)+0xad0>	100016d1: R_386_PC32	fpuGetReg(int)
100016d5:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
100016db:	83 ec 0c             	sub    esp,0xc
100016de:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100016e4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100016e8:	2d e8 00 00 00       	sub    eax,0xe8
100016ed:	50                   	push   eax
100016ee:	52                   	push   edx
100016ef:	e8 fc ff ff ff       	call   100016f0 <x87Handler(regs*)+0xaef>	100016f0: R_386_PC32	fpuGetReg(int)
100016f4:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
100016fa:	57                   	push   edi
100016fb:	b9 03 00 00 00       	mov    ecx,0x3
10001700:	89 e7                	mov    edi,esp
10001702:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001704:	83 ec 0c             	sub    esp,0xc
10001707:	b9 03 00 00 00       	mov    ecx,0x3
1000170c:	89 e7                	mov    edi,esp
1000170e:	8d 95 4c fc ff ff    	lea    edx,[ebp-0x3b4]
10001714:	89 d6                	mov    esi,edx
10001716:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001718:	50                   	push   eax
10001719:	e8 fc ff ff ff       	call   1000171a <x87Handler(regs*)+0xb19>	1000171a: R_386_PC32	fpuSub(_Float80, _Float80)
1000171e:	83 c4 20             	add    esp,0x20
10001721:	b9 03 00 00 00       	mov    ecx,0x3
10001726:	89 e7                	mov    edi,esp
10001728:	8d 85 58 fc ff ff    	lea    eax,[ebp-0x3a8]
1000172e:	89 c6                	mov    esi,eax
10001730:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001732:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001738:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000173c:	2d e8 00 00 00       	sub    eax,0xe8
10001741:	e9 db fe ff ff       	jmp    10001621 <x87Handler(regs*)+0xa20>
10001746:	8d 42 38             	lea    eax,[edx+0x38]
10001749:	3c 07                	cmp    al,0x7
1000174b:	77 78                	ja     100017c5 <x87Handler(regs*)+0xbc4>
1000174d:	8d b5 64 fc ff ff    	lea    esi,[ebp-0x39c]
10001753:	50                   	push   eax
10001754:	50                   	push   eax
10001755:	81 ea c8 00 00 00    	sub    edx,0xc8
1000175b:	52                   	push   edx
1000175c:	56                   	push   esi
1000175d:	e8 fc ff ff ff       	call   1000175e <x87Handler(regs*)+0xb5d>	1000175e: R_386_PC32	fpuGetReg(int)
10001762:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001768:	83 ec 0c             	sub    esp,0xc
1000176b:	6a 00                	push   0x0
1000176d:	52                   	push   edx
1000176e:	e8 fc ff ff ff       	call   1000176f <x87Handler(regs*)+0xb6e>	1000176f: R_386_PC32	fpuGetReg(int)
10001773:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
10001779:	52                   	push   edx
1000177a:	b9 03 00 00 00       	mov    ecx,0x3
1000177f:	89 e7                	mov    edi,esp
10001781:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001783:	83 ec 0c             	sub    esp,0xc
10001786:	b9 03 00 00 00       	mov    ecx,0x3
1000178b:	89 e7                	mov    edi,esp
1000178d:	8d 95 70 fc ff ff    	lea    edx,[ebp-0x390]
10001793:	89 d6                	mov    esi,edx
10001795:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001797:	50                   	push   eax
10001798:	e8 fc ff ff ff       	call   10001799 <x87Handler(regs*)+0xb98>	10001799: R_386_PC32	fpuMultiply(_Float80, _Float80)
1000179d:	83 c4 20             	add    esp,0x20
100017a0:	b9 03 00 00 00       	mov    ecx,0x3
100017a5:	89 e7                	mov    edi,esp
100017a7:	8d 85 7c fc ff ff    	lea    eax,[ebp-0x384]
100017ad:	89 c6                	mov    esi,eax
100017af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100017b1:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100017b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017bb:	2d c8 00 00 00       	sub    eax,0xc8
100017c0:	e9 01 01 00 00       	jmp    100018c6 <x87Handler(regs*)+0xcc5>
100017c5:	80 fa f7             	cmp    dl,0xf7
100017c8:	76 7e                	jbe    10001848 <x87Handler(regs*)+0xc47>
100017ca:	8d b5 88 fc ff ff    	lea    esi,[ebp-0x378]
100017d0:	51                   	push   ecx
100017d1:	51                   	push   ecx
100017d2:	6a 00                	push   0x0
100017d4:	56                   	push   esi
100017d5:	e8 fc ff ff ff       	call   100017d6 <x87Handler(regs*)+0xbd5>	100017d6: R_386_PC32	fpuGetReg(int)
100017da:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
100017e0:	83 ec 0c             	sub    esp,0xc
100017e3:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100017e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100017ed:	2d f8 00 00 00       	sub    eax,0xf8
100017f2:	50                   	push   eax
100017f3:	52                   	push   edx
100017f4:	e8 fc ff ff ff       	call   100017f5 <x87Handler(regs*)+0xbf4>	100017f5: R_386_PC32	fpuGetReg(int)
100017f9:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
100017ff:	57                   	push   edi
10001800:	b9 03 00 00 00       	mov    ecx,0x3
10001805:	89 e7                	mov    edi,esp
10001807:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001809:	83 ec 0c             	sub    esp,0xc
1000180c:	b9 03 00 00 00       	mov    ecx,0x3
10001811:	89 e7                	mov    edi,esp
10001813:	8d 95 94 fc ff ff    	lea    edx,[ebp-0x36c]
10001819:	89 d6                	mov    esi,edx
1000181b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000181d:	50                   	push   eax
1000181e:	e8 fc ff ff ff       	call   1000181f <x87Handler(regs*)+0xc1e>	1000181f: R_386_PC32	fpuDivide(_Float80, _Float80)
10001823:	83 c4 20             	add    esp,0x20
10001826:	b9 03 00 00 00       	mov    ecx,0x3
1000182b:	89 e7                	mov    edi,esp
1000182d:	8d 85 a0 fc ff ff    	lea    eax,[ebp-0x360]
10001833:	89 c6                	mov    esi,eax
10001835:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001837:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000183d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001841:	2d f8 00 00 00       	sub    eax,0xf8
10001846:	eb 7e                	jmp    100018c6 <x87Handler(regs*)+0xcc5>
10001848:	8d 42 10             	lea    eax,[edx+0x10]
1000184b:	3c 07                	cmp    al,0x7
1000184d:	0f 87 09 02 00 00    	ja     10001a5c <x87Handler(regs*)+0xe5b>
10001853:	8d b5 ac fc ff ff    	lea    esi,[ebp-0x354]
10001859:	50                   	push   eax
1000185a:	50                   	push   eax
1000185b:	81 ea f0 00 00 00    	sub    edx,0xf0
10001861:	52                   	push   edx
10001862:	56                   	push   esi
10001863:	e8 fc ff ff ff       	call   10001864 <x87Handler(regs*)+0xc63>	10001864: R_386_PC32	fpuGetReg(int)
10001868:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
1000186e:	83 ec 0c             	sub    esp,0xc
10001871:	6a 00                	push   0x0
10001873:	52                   	push   edx
10001874:	e8 fc ff ff ff       	call   10001875 <x87Handler(regs*)+0xc74>	10001875: R_386_PC32	fpuGetReg(int)
10001879:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
1000187f:	52                   	push   edx
10001880:	b9 03 00 00 00       	mov    ecx,0x3
10001885:	89 e7                	mov    edi,esp
10001887:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001889:	83 ec 0c             	sub    esp,0xc
1000188c:	b9 03 00 00 00       	mov    ecx,0x3
10001891:	89 e7                	mov    edi,esp
10001893:	8d 95 b8 fc ff ff    	lea    edx,[ebp-0x348]
10001899:	89 d6                	mov    esi,edx
1000189b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000189d:	50                   	push   eax
1000189e:	e8 fc ff ff ff       	call   1000189f <x87Handler(regs*)+0xc9e>	1000189f: R_386_PC32	fpuDivide(_Float80, _Float80)
100018a3:	83 c4 20             	add    esp,0x20
100018a6:	b9 03 00 00 00       	mov    ecx,0x3
100018ab:	89 e7                	mov    edi,esp
100018ad:	8d 85 c4 fc ff ff    	lea    eax,[ebp-0x33c]
100018b3:	89 c6                	mov    esi,eax
100018b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100018b7:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100018bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018c1:	2d f0 00 00 00       	sub    eax,0xf0
100018c6:	50                   	push   eax
100018c7:	e9 0e fb ff ff       	jmp    100013da <x87Handler(regs*)+0x7d9>
100018cc:	80 fa dd             	cmp    dl,0xdd
100018cf:	0f 85 30 01 00 00    	jne    10001a05 <x87Handler(regs*)+0xe04>
100018d5:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
100018db:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
100018df:	8d 50 30             	lea    edx,[eax+0x30]
100018e2:	80 fa 07             	cmp    dl,0x7
100018e5:	77 2e                	ja     10001915 <x87Handler(regs*)+0xd14>
100018e7:	8d b5 d0 fc ff ff    	lea    esi,[ebp-0x330]
100018ed:	50                   	push   eax
100018ee:	50                   	push   eax
100018ef:	6a 00                	push   0x0
100018f1:	56                   	push   esi
100018f2:	e8 fc ff ff ff       	call   100018f3 <x87Handler(regs*)+0xcf2>	100018f3: R_386_PC32	fpuGetReg(int)
100018f7:	b9 03 00 00 00       	mov    ecx,0x3
100018fc:	89 e7                	mov    edi,esp
100018fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001900:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001906:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
1000190a:	2d d0 00 00 00       	sub    eax,0xd0
1000190f:	50                   	push   eax
10001910:	e9 3d f4 ff ff       	jmp    10000d52 <x87Handler(regs*)+0x151>
10001915:	8d 50 28             	lea    edx,[eax+0x28]
10001918:	80 fa 07             	cmp    dl,0x7
1000191b:	77 2d                	ja     1000194a <x87Handler(regs*)+0xd49>
1000191d:	8d b5 dc fc ff ff    	lea    esi,[ebp-0x324]
10001923:	50                   	push   eax
10001924:	50                   	push   eax
10001925:	6a 00                	push   0x0
10001927:	56                   	push   esi
10001928:	e8 fc ff ff ff       	call   10001929 <x87Handler(regs*)+0xd28>	10001929: R_386_PC32	fpuGetReg(int)
1000192d:	b9 03 00 00 00       	mov    ecx,0x3
10001932:	89 e7                	mov    edi,esp
10001934:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001936:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
1000193c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
10001940:	2d d8 00 00 00       	sub    eax,0xd8
10001945:	e9 d7 fc ff ff       	jmp    10001621 <x87Handler(regs*)+0xa20>
1000194a:	8d 50 20             	lea    edx,[eax+0x20]
1000194d:	80 fa 07             	cmp    dl,0x7
10001950:	77 52                	ja     100019a4 <x87Handler(regs*)+0xda3>
10001952:	8d b5 e8 fc ff ff    	lea    esi,[ebp-0x318]
10001958:	57                   	push   edi
10001959:	57                   	push   edi
1000195a:	2d e0 00 00 00       	sub    eax,0xe0
1000195f:	50                   	push   eax
10001960:	56                   	push   esi
10001961:	e8 fc ff ff ff       	call   10001962 <x87Handler(regs*)+0xd61>	10001962: R_386_PC32	fpuGetReg(int)
10001966:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
1000196c:	83 ec 0c             	sub    esp,0xc
1000196f:	6a 00                	push   0x0
10001971:	50                   	push   eax
10001972:	e8 fc ff ff ff       	call   10001973 <x87Handler(regs*)+0xd72>	10001973: R_386_PC32	fpuGetReg(int)
10001977:	50                   	push   eax
10001978:	50                   	push   eax
10001979:	b9 03 00 00 00       	mov    ecx,0x3
1000197e:	89 e7                	mov    edi,esp
10001980:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001982:	83 ec 0c             	sub    esp,0xc
10001985:	b9 03 00 00 00       	mov    ecx,0x3
1000198a:	89 e7                	mov    edi,esp
1000198c:	8d 85 f4 fc ff ff    	lea    eax,[ebp-0x30c]
10001992:	89 c6                	mov    esi,eax
10001994:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001996:	e8 fc ff ff ff       	call   10001997 <x87Handler(regs*)+0xd96>	10001997: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000199b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000199f:	e9 30 06 00 00       	jmp    10001fd4 <x87Handler(regs*)+0x13d3>
100019a4:	8d 50 18             	lea    edx,[eax+0x18]
100019a7:	80 fa 07             	cmp    dl,0x7
100019aa:	0f 87 6f f6 ff ff    	ja     1000101f <x87Handler(regs*)+0x41e>
100019b0:	8d b5 00 fd ff ff    	lea    esi,[ebp-0x300]
100019b6:	52                   	push   edx
100019b7:	52                   	push   edx
100019b8:	2d e8 00 00 00       	sub    eax,0xe8
100019bd:	50                   	push   eax
100019be:	56                   	push   esi
100019bf:	e8 fc ff ff ff       	call   100019c0 <x87Handler(regs*)+0xdbf>	100019c0: R_386_PC32	fpuGetReg(int)
100019c4:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
100019ca:	83 ec 0c             	sub    esp,0xc
100019cd:	6a 00                	push   0x0
100019cf:	50                   	push   eax
100019d0:	e8 fc ff ff ff       	call   100019d1 <x87Handler(regs*)+0xdd0>	100019d1: R_386_PC32	fpuGetReg(int)
100019d5:	51                   	push   ecx
100019d6:	51                   	push   ecx
100019d7:	b9 03 00 00 00       	mov    ecx,0x3
100019dc:	89 e7                	mov    edi,esp
100019de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019e0:	83 ec 0c             	sub    esp,0xc
100019e3:	b9 03 00 00 00       	mov    ecx,0x3
100019e8:	89 e7                	mov    edi,esp
100019ea:	8d 85 0c fd ff ff    	lea    eax,[ebp-0x2f4]
100019f0:	89 c6                	mov    esi,eax
100019f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100019f4:	e8 fc ff ff ff       	call   100019f5 <x87Handler(regs*)+0xdf4>	100019f5: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100019f9:	8d 45 dc             	lea    eax,[ebp-0x24]
100019fc:	83 c4 24             	add    esp,0x24
100019ff:	50                   	push   eax
10001a00:	e9 28 fc ff ff       	jmp    1000162d <x87Handler(regs*)+0xa2c>
10001a05:	80 fa da             	cmp    dl,0xda
10001a08:	0f 85 b9 00 00 00    	jne    10001ac7 <x87Handler(regs*)+0xec6>
10001a0e:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001a14:	80 78 01 e9          	cmp    BYTE PTR [eax+0x1],0xe9
10001a18:	0f 85 63 03 00 00    	jne    10001d81 <x87Handler(regs*)+0x1180>
10001a1e:	8d b5 18 fd ff ff    	lea    esi,[ebp-0x2e8]
10001a24:	50                   	push   eax
10001a25:	50                   	push   eax
10001a26:	6a 01                	push   0x1
10001a28:	56                   	push   esi
10001a29:	e8 fc ff ff ff       	call   10001a2a <x87Handler(regs*)+0xe29>	10001a2a: R_386_PC32	fpuGetReg(int)
10001a2e:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001a34:	83 ec 0c             	sub    esp,0xc
10001a37:	6a 00                	push   0x0
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <x87Handler(regs*)+0xe3a>	10001a3b: R_386_PC32	fpuGetReg(int)
10001a3f:	50                   	push   eax
10001a40:	50                   	push   eax
10001a41:	b9 03 00 00 00       	mov    ecx,0x3
10001a46:	89 e7                	mov    edi,esp
10001a48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a4a:	83 ec 0c             	sub    esp,0xc
10001a4d:	b9 03 00 00 00       	mov    ecx,0x3
10001a52:	89 e7                	mov    edi,esp
10001a54:	8d 85 24 fd ff ff    	lea    eax,[ebp-0x2dc]
10001a5a:	eb 47                	jmp    10001aa3 <x87Handler(regs*)+0xea2>
10001a5c:	31 c0                	xor    eax,eax
10001a5e:	80 fa d9             	cmp    dl,0xd9
10001a61:	0f 85 5b 08 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10001a67:	8d b5 30 fd ff ff    	lea    esi,[ebp-0x2d0]
10001a6d:	51                   	push   ecx
10001a6e:	51                   	push   ecx
10001a6f:	6a 01                	push   0x1
10001a71:	56                   	push   esi
10001a72:	e8 fc ff ff ff       	call   10001a73 <x87Handler(regs*)+0xe72>	10001a73: R_386_PC32	fpuGetReg(int)
10001a77:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001a7d:	83 ec 0c             	sub    esp,0xc
10001a80:	6a 00                	push   0x0
10001a82:	50                   	push   eax
10001a83:	e8 fc ff ff ff       	call   10001a84 <x87Handler(regs*)+0xe83>	10001a84: R_386_PC32	fpuGetReg(int)
10001a88:	57                   	push   edi
10001a89:	57                   	push   edi
10001a8a:	b9 03 00 00 00       	mov    ecx,0x3
10001a8f:	89 e7                	mov    edi,esp
10001a91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001a93:	83 ec 0c             	sub    esp,0xc
10001a96:	b9 03 00 00 00       	mov    ecx,0x3
10001a9b:	89 e7                	mov    edi,esp
10001a9d:	8d 85 3c fd ff ff    	lea    eax,[ebp-0x2c4]
10001aa3:	89 c6                	mov    esi,eax
10001aa5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001aa7:	e8 fc ff ff ff       	call   10001aa8 <x87Handler(regs*)+0xea7>	10001aa8: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001aac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001ab0:	8d 5d dc             	lea    ebx,[ebp-0x24]
10001ab3:	83 c4 24             	add    esp,0x24
10001ab6:	53                   	push   ebx
10001ab7:	e8 fc ff ff ff       	call   10001ab8 <x87Handler(regs*)+0xeb7>	10001ab8: R_386_PC32	fpuPop()
10001abc:	53                   	push   ebx
10001abd:	e8 fc ff ff ff       	call   10001abe <x87Handler(regs*)+0xebd>	10001abe: R_386_PC32	fpuPop()
10001ac2:	e9 7c 05 00 00       	jmp    10002043 <x87Handler(regs*)+0x1442>
10001ac7:	80 fa df             	cmp    dl,0xdf
10001aca:	0f 85 99 03 00 00    	jne    10001e69 <x87Handler(regs*)+0x1268>
10001ad0:	8b 85 d4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x62c]
10001ad6:	80 78 01 e0          	cmp    BYTE PTR [eax+0x1],0xe0
10001ada:	0f 85 89 07 00 00    	jne    10002269 <x87Handler(regs*)+0x1668>
10001ae0:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10001ae3: R_386_32	fpuState
10001ae7:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10001aeb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10001aef:	e9 6a f2 ff ff       	jmp    10000d5e <x87Handler(regs*)+0x15d>
10001af4:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001afa:	84 d2                	test   dl,dl
10001afc:	75 66                	jne    10001b64 <x87Handler(regs*)+0xf63>
10001afe:	8d b5 48 fd ff ff    	lea    esi,[ebp-0x2b8]
10001b04:	50                   	push   eax
10001b05:	50                   	push   eax
10001b06:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001b0c:	ff 30                	push   DWORD PTR [eax]
10001b0e:	56                   	push   esi
10001b0f:	e8 fc ff ff ff       	call   10001b10 <x87Handler(regs*)+0xf0f>	10001b10: R_386_PC32	fpu32ToInternal(unsigned int)
10001b14:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b1a:	83 ec 0c             	sub    esp,0xc
10001b1d:	6a 00                	push   0x0
10001b1f:	52                   	push   edx
10001b20:	e8 fc ff ff ff       	call   10001b21 <x87Handler(regs*)+0xf20>	10001b21: R_386_PC32	fpuGetReg(int)
10001b25:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b2b:	52                   	push   edx
10001b2c:	b9 03 00 00 00       	mov    ecx,0x3
10001b31:	89 e7                	mov    edi,esp
10001b33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b35:	83 ec 0c             	sub    esp,0xc
10001b38:	b9 03 00 00 00       	mov    ecx,0x3
10001b3d:	89 e7                	mov    edi,esp
10001b3f:	8d 95 54 fd ff ff    	lea    edx,[ebp-0x2ac]
10001b45:	89 d6                	mov    esi,edx
10001b47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001b49:	50                   	push   eax
10001b4a:	e8 fc ff ff ff       	call   10001b4b <x87Handler(regs*)+0xf4a>	10001b4b: R_386_PC32	fpuAdd(_Float80, _Float80)
10001b4f:	83 c4 20             	add    esp,0x20
10001b52:	b9 03 00 00 00       	mov    ecx,0x3
10001b57:	89 e7                	mov    edi,esp
10001b59:	8d 85 60 fd ff ff    	lea    eax,[ebp-0x2a0]
10001b5f:	e9 29 06 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001b64:	80 fa 01             	cmp    dl,0x1
10001b67:	75 66                	jne    10001bcf <x87Handler(regs*)+0xfce>
10001b69:	8d b5 6c fd ff ff    	lea    esi,[ebp-0x294]
10001b6f:	51                   	push   ecx
10001b70:	51                   	push   ecx
10001b71:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001b77:	ff 30                	push   DWORD PTR [eax]
10001b79:	56                   	push   esi
10001b7a:	e8 fc ff ff ff       	call   10001b7b <x87Handler(regs*)+0xf7a>	10001b7b: R_386_PC32	fpu32ToInternal(unsigned int)
10001b7f:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001b85:	83 ec 0c             	sub    esp,0xc
10001b88:	6a 00                	push   0x0
10001b8a:	52                   	push   edx
10001b8b:	e8 fc ff ff ff       	call   10001b8c <x87Handler(regs*)+0xf8b>	10001b8c: R_386_PC32	fpuGetReg(int)
10001b90:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001b96:	57                   	push   edi
10001b97:	b9 03 00 00 00       	mov    ecx,0x3
10001b9c:	89 e7                	mov    edi,esp
10001b9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ba0:	83 ec 0c             	sub    esp,0xc
10001ba3:	b9 03 00 00 00       	mov    ecx,0x3
10001ba8:	89 e7                	mov    edi,esp
10001baa:	8d 95 78 fd ff ff    	lea    edx,[ebp-0x288]
10001bb0:	89 d6                	mov    esi,edx
10001bb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001bb4:	50                   	push   eax
10001bb5:	e8 fc ff ff ff       	call   10001bb6 <x87Handler(regs*)+0xfb5>	10001bb6: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001bba:	83 c4 20             	add    esp,0x20
10001bbd:	b9 03 00 00 00       	mov    ecx,0x3
10001bc2:	89 e7                	mov    edi,esp
10001bc4:	8d 85 84 fd ff ff    	lea    eax,[ebp-0x27c]
10001bca:	e9 be 05 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001bcf:	80 fa 04             	cmp    dl,0x4
10001bd2:	75 66                	jne    10001c3a <x87Handler(regs*)+0x1039>
10001bd4:	8d b5 90 fd ff ff    	lea    esi,[ebp-0x270]
10001bda:	50                   	push   eax
10001bdb:	50                   	push   eax
10001bdc:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001be2:	ff 30                	push   DWORD PTR [eax]
10001be4:	56                   	push   esi
10001be5:	e8 fc ff ff ff       	call   10001be6 <x87Handler(regs*)+0xfe5>	10001be6: R_386_PC32	fpu32ToInternal(unsigned int)
10001bea:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001bf0:	83 ec 0c             	sub    esp,0xc
10001bf3:	6a 00                	push   0x0
10001bf5:	52                   	push   edx
10001bf6:	e8 fc ff ff ff       	call   10001bf7 <x87Handler(regs*)+0xff6>	10001bf7: R_386_PC32	fpuGetReg(int)
10001bfb:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c01:	52                   	push   edx
10001c02:	b9 03 00 00 00       	mov    ecx,0x3
10001c07:	89 e7                	mov    edi,esp
10001c09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c0b:	83 ec 0c             	sub    esp,0xc
10001c0e:	b9 03 00 00 00       	mov    ecx,0x3
10001c13:	89 e7                	mov    edi,esp
10001c15:	8d 95 9c fd ff ff    	lea    edx,[ebp-0x264]
10001c1b:	89 d6                	mov    esi,edx
10001c1d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c1f:	50                   	push   eax
10001c20:	e8 fc ff ff ff       	call   10001c21 <x87Handler(regs*)+0x1020>	10001c21: R_386_PC32	fpuSub(_Float80, _Float80)
10001c25:	83 c4 20             	add    esp,0x20
10001c28:	b9 03 00 00 00       	mov    ecx,0x3
10001c2d:	89 e7                	mov    edi,esp
10001c2f:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
10001c35:	e9 53 05 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001c3a:	80 fa 05             	cmp    dl,0x5
10001c3d:	75 66                	jne    10001ca5 <x87Handler(regs*)+0x10a4>
10001c3f:	8d b5 b4 fd ff ff    	lea    esi,[ebp-0x24c]
10001c45:	51                   	push   ecx
10001c46:	51                   	push   ecx
10001c47:	6a 00                	push   0x0
10001c49:	56                   	push   esi
10001c4a:	e8 fc ff ff ff       	call   10001c4b <x87Handler(regs*)+0x104a>	10001c4b: R_386_PC32	fpuGetReg(int)
10001c4f:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001c55:	83 ec 0c             	sub    esp,0xc
10001c58:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
10001c5e:	ff 31                	push   DWORD PTR [ecx]
10001c60:	50                   	push   eax
10001c61:	e8 fc ff ff ff       	call   10001c62 <x87Handler(regs*)+0x1061>	10001c62: R_386_PC32	fpu32ToInternal(unsigned int)
10001c66:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001c6c:	57                   	push   edi
10001c6d:	b9 03 00 00 00       	mov    ecx,0x3
10001c72:	89 e7                	mov    edi,esp
10001c74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c76:	83 ec 0c             	sub    esp,0xc
10001c79:	b9 03 00 00 00       	mov    ecx,0x3
10001c7e:	89 e7                	mov    edi,esp
10001c80:	8d 85 c0 fd ff ff    	lea    eax,[ebp-0x240]
10001c86:	89 c6                	mov    esi,eax
10001c88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001c8a:	52                   	push   edx
10001c8b:	e8 fc ff ff ff       	call   10001c8c <x87Handler(regs*)+0x108b>	10001c8c: R_386_PC32	fpuSub(_Float80, _Float80)
10001c90:	83 c4 20             	add    esp,0x20
10001c93:	b9 03 00 00 00       	mov    ecx,0x3
10001c98:	89 e7                	mov    edi,esp
10001c9a:	8d 95 cc fd ff ff    	lea    edx,[ebp-0x234]
10001ca0:	e9 4b 05 00 00       	jmp    100021f0 <x87Handler(regs*)+0x15ef>
10001ca5:	80 fa 06             	cmp    dl,0x6
10001ca8:	75 66                	jne    10001d10 <x87Handler(regs*)+0x110f>
10001caa:	8d b5 d8 fd ff ff    	lea    esi,[ebp-0x228]
10001cb0:	50                   	push   eax
10001cb1:	50                   	push   eax
10001cb2:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001cb8:	ff 30                	push   DWORD PTR [eax]
10001cba:	56                   	push   esi
10001cbb:	e8 fc ff ff ff       	call   10001cbc <x87Handler(regs*)+0x10bb>	10001cbc: R_386_PC32	fpu32ToInternal(unsigned int)
10001cc0:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001cc6:	83 ec 0c             	sub    esp,0xc
10001cc9:	6a 00                	push   0x0
10001ccb:	52                   	push   edx
10001ccc:	e8 fc ff ff ff       	call   10001ccd <x87Handler(regs*)+0x10cc>	10001ccd: R_386_PC32	fpuGetReg(int)
10001cd1:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001cd7:	52                   	push   edx
10001cd8:	b9 03 00 00 00       	mov    ecx,0x3
10001cdd:	89 e7                	mov    edi,esp
10001cdf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ce1:	83 ec 0c             	sub    esp,0xc
10001ce4:	b9 03 00 00 00       	mov    ecx,0x3
10001ce9:	89 e7                	mov    edi,esp
10001ceb:	8d 95 e4 fd ff ff    	lea    edx,[ebp-0x21c]
10001cf1:	89 d6                	mov    esi,edx
10001cf3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001cf5:	50                   	push   eax
10001cf6:	e8 fc ff ff ff       	call   10001cf7 <x87Handler(regs*)+0x10f6>	10001cf7: R_386_PC32	fpuDivide(_Float80, _Float80)
10001cfb:	83 c4 20             	add    esp,0x20
10001cfe:	b9 03 00 00 00       	mov    ecx,0x3
10001d03:	89 e7                	mov    edi,esp
10001d05:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
10001d0b:	e9 7d 04 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001d10:	31 c0                	xor    eax,eax
10001d12:	80 fa 07             	cmp    dl,0x7
10001d15:	0f 85 a7 05 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10001d1b:	8d b5 fc fd ff ff    	lea    esi,[ebp-0x204]
10001d21:	50                   	push   eax
10001d22:	50                   	push   eax
10001d23:	6a 00                	push   0x0
10001d25:	56                   	push   esi
10001d26:	e8 fc ff ff ff       	call   10001d27 <x87Handler(regs*)+0x1126>	10001d27: R_386_PC32	fpuGetReg(int)
10001d2b:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d31:	83 ec 0c             	sub    esp,0xc
10001d34:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
10001d3a:	ff 37                	push   DWORD PTR [edi]
10001d3c:	50                   	push   eax
10001d3d:	e8 fc ff ff ff       	call   10001d3e <x87Handler(regs*)+0x113d>	10001d3e: R_386_PC32	fpu32ToInternal(unsigned int)
10001d42:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001d48:	50                   	push   eax
10001d49:	b9 03 00 00 00       	mov    ecx,0x3
10001d4e:	89 e7                	mov    edi,esp
10001d50:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d52:	83 ec 0c             	sub    esp,0xc
10001d55:	b9 03 00 00 00       	mov    ecx,0x3
10001d5a:	89 e7                	mov    edi,esp
10001d5c:	8d 85 08 fe ff ff    	lea    eax,[ebp-0x1f8]
10001d62:	89 c6                	mov    esi,eax
10001d64:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001d66:	52                   	push   edx
10001d67:	e8 fc ff ff ff       	call   10001d68 <x87Handler(regs*)+0x1167>	10001d68: R_386_PC32	fpuDivide(_Float80, _Float80)
10001d6c:	83 c4 20             	add    esp,0x20
10001d6f:	b9 03 00 00 00       	mov    ecx,0x3
10001d74:	89 e7                	mov    edi,esp
10001d76:	8d 95 14 fe ff ff    	lea    edx,[ebp-0x1ec]
10001d7c:	e9 6f 04 00 00       	jmp    100021f0 <x87Handler(regs*)+0x15ef>
10001d81:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001d87:	80 fa 01             	cmp    dl,0x1
10001d8a:	75 69                	jne    10001df5 <x87Handler(regs*)+0x11f4>
10001d8c:	8d b5 38 fe ff ff    	lea    esi,[ebp-0x1c8]
10001d92:	51                   	push   ecx
10001d93:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001d99:	8b 00                	mov    eax,DWORD PTR [eax]
10001d9b:	31 d2                	xor    edx,edx
10001d9d:	52                   	push   edx
10001d9e:	50                   	push   eax
10001d9f:	56                   	push   esi
10001da0:	e8 fc ff ff ff       	call   10001da1 <x87Handler(regs*)+0x11a0>	10001da1: R_386_PC32	fpuLongToFloat(long long)
10001da5:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001dab:	83 ec 0c             	sub    esp,0xc
10001dae:	6a 00                	push   0x0
10001db0:	52                   	push   edx
10001db1:	e8 fc ff ff ff       	call   10001db2 <x87Handler(regs*)+0x11b1>	10001db2: R_386_PC32	fpuGetReg(int)
10001db6:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001dbc:	57                   	push   edi
10001dbd:	b9 03 00 00 00       	mov    ecx,0x3
10001dc2:	89 e7                	mov    edi,esp
10001dc4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dc6:	83 ec 0c             	sub    esp,0xc
10001dc9:	b9 03 00 00 00       	mov    ecx,0x3
10001dce:	89 e7                	mov    edi,esp
10001dd0:	8d 95 44 fe ff ff    	lea    edx,[ebp-0x1bc]
10001dd6:	89 d6                	mov    esi,edx
10001dd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001dda:	50                   	push   eax
10001ddb:	e8 fc ff ff ff       	call   10001ddc <x87Handler(regs*)+0x11db>	10001ddc: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001de0:	83 c4 20             	add    esp,0x20
10001de3:	b9 03 00 00 00       	mov    ecx,0x3
10001de8:	89 e7                	mov    edi,esp
10001dea:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10001df0:	e9 98 03 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001df5:	31 c0                	xor    eax,eax
10001df7:	80 fa 04             	cmp    dl,0x4
10001dfa:	0f 85 c2 04 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10001e00:	8d b5 5c fe ff ff    	lea    esi,[ebp-0x1a4]
10001e06:	50                   	push   eax
10001e07:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001e0d:	8b 00                	mov    eax,DWORD PTR [eax]
10001e0f:	31 d2                	xor    edx,edx
10001e11:	52                   	push   edx
10001e12:	50                   	push   eax
10001e13:	56                   	push   esi
10001e14:	e8 fc ff ff ff       	call   10001e15 <x87Handler(regs*)+0x1214>	10001e15: R_386_PC32	fpuLongToFloat(long long)
10001e19:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10001e1f:	83 ec 0c             	sub    esp,0xc
10001e22:	6a 00                	push   0x0
10001e24:	52                   	push   edx
10001e25:	e8 fc ff ff ff       	call   10001e26 <x87Handler(regs*)+0x1225>	10001e26: R_386_PC32	fpuGetReg(int)
10001e2a:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10001e30:	52                   	push   edx
10001e31:	b9 03 00 00 00       	mov    ecx,0x3
10001e36:	89 e7                	mov    edi,esp
10001e38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e3a:	83 ec 0c             	sub    esp,0xc
10001e3d:	b9 03 00 00 00       	mov    ecx,0x3
10001e42:	89 e7                	mov    edi,esp
10001e44:	8d 95 68 fe ff ff    	lea    edx,[ebp-0x198]
10001e4a:	89 d6                	mov    esi,edx
10001e4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001e4e:	50                   	push   eax
10001e4f:	e8 fc ff ff ff       	call   10001e50 <x87Handler(regs*)+0x124f>	10001e50: R_386_PC32	fpuSub(_Float80, _Float80)
10001e54:	83 c4 20             	add    esp,0x20
10001e57:	b9 03 00 00 00       	mov    ecx,0x3
10001e5c:	89 e7                	mov    edi,esp
10001e5e:	8d 85 74 fe ff ff    	lea    eax,[ebp-0x18c]
10001e64:	e9 24 03 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001e69:	31 c0                	xor    eax,eax
10001e6b:	80 fa db             	cmp    dl,0xdb
10001e6e:	0f 85 4e 04 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
10001e74:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001e7a:	84 d2                	test   dl,dl
10001e7c:	0f 85 d3 f1 ff ff    	jne    10001055 <x87Handler(regs*)+0x454>
10001e82:	8d b5 80 fe ff ff    	lea    esi,[ebp-0x180]
10001e88:	50                   	push   eax
10001e89:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001e8f:	8b 00                	mov    eax,DWORD PTR [eax]
10001e91:	31 d2                	xor    edx,edx
10001e93:	52                   	push   edx
10001e94:	50                   	push   eax
10001e95:	e9 e9 03 00 00       	jmp    10002283 <x87Handler(regs*)+0x1682>
10001e9a:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
10001ea0:	84 d2                	test   dl,dl
10001ea2:	75 68                	jne    10001f0c <x87Handler(regs*)+0x130b>
10001ea4:	8d b5 a4 fe ff ff    	lea    esi,[ebp-0x15c]
10001eaa:	51                   	push   ecx
10001eab:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001eb1:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001eb4:	ff 30                	push   DWORD PTR [eax]
10001eb6:	56                   	push   esi
10001eb7:	e8 fc ff ff ff       	call   10001eb8 <x87Handler(regs*)+0x12b7>	10001eb8: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ebc:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001ec2:	83 ec 0c             	sub    esp,0xc
10001ec5:	6a 00                	push   0x0
10001ec7:	52                   	push   edx
10001ec8:	e8 fc ff ff ff       	call   10001ec9 <x87Handler(regs*)+0x12c8>	10001ec9: R_386_PC32	fpuGetReg(int)
10001ecd:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001ed3:	57                   	push   edi
10001ed4:	b9 03 00 00 00       	mov    ecx,0x3
10001ed9:	89 e7                	mov    edi,esp
10001edb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001edd:	83 ec 0c             	sub    esp,0xc
10001ee0:	b9 03 00 00 00       	mov    ecx,0x3
10001ee5:	89 e7                	mov    edi,esp
10001ee7:	8d 95 b0 fe ff ff    	lea    edx,[ebp-0x150]
10001eed:	89 d6                	mov    esi,edx
10001eef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001ef1:	50                   	push   eax
10001ef2:	e8 fc ff ff ff       	call   10001ef3 <x87Handler(regs*)+0x12f2>	10001ef3: R_386_PC32	fpuAdd(_Float80, _Float80)
10001ef7:	83 c4 20             	add    esp,0x20
10001efa:	b9 03 00 00 00       	mov    ecx,0x3
10001eff:	89 e7                	mov    edi,esp
10001f01:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
10001f07:	e9 81 02 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001f0c:	80 fa 01             	cmp    dl,0x1
10001f0f:	75 68                	jne    10001f79 <x87Handler(regs*)+0x1378>
10001f11:	8d b5 c8 fe ff ff    	lea    esi,[ebp-0x138]
10001f17:	50                   	push   eax
10001f18:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001f1e:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f21:	ff 30                	push   DWORD PTR [eax]
10001f23:	56                   	push   esi
10001f24:	e8 fc ff ff ff       	call   10001f25 <x87Handler(regs*)+0x1324>	10001f25: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f29:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10001f2f:	83 ec 0c             	sub    esp,0xc
10001f32:	6a 00                	push   0x0
10001f34:	52                   	push   edx
10001f35:	e8 fc ff ff ff       	call   10001f36 <x87Handler(regs*)+0x1335>	10001f36: R_386_PC32	fpuGetReg(int)
10001f3a:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10001f40:	52                   	push   edx
10001f41:	b9 03 00 00 00       	mov    ecx,0x3
10001f46:	89 e7                	mov    edi,esp
10001f48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f4a:	83 ec 0c             	sub    esp,0xc
10001f4d:	b9 03 00 00 00       	mov    ecx,0x3
10001f52:	89 e7                	mov    edi,esp
10001f54:	8d 95 d4 fe ff ff    	lea    edx,[ebp-0x12c]
10001f5a:	89 d6                	mov    esi,edx
10001f5c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001f5e:	50                   	push   eax
10001f5f:	e8 fc ff ff ff       	call   10001f60 <x87Handler(regs*)+0x135f>	10001f60: R_386_PC32	fpuMultiply(_Float80, _Float80)
10001f64:	83 c4 20             	add    esp,0x20
10001f67:	b9 03 00 00 00       	mov    ecx,0x3
10001f6c:	89 e7                	mov    edi,esp
10001f6e:	8d 85 e0 fe ff ff    	lea    eax,[ebp-0x120]
10001f74:	e9 14 02 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
10001f79:	80 fa 02             	cmp    dl,0x2
10001f7c:	75 5e                	jne    10001fdc <x87Handler(regs*)+0x13db>
10001f7e:	8d b5 ec fe ff ff    	lea    esi,[ebp-0x114]
10001f84:	50                   	push   eax
10001f85:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001f8b:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001f8e:	ff 30                	push   DWORD PTR [eax]
10001f90:	56                   	push   esi
10001f91:	e8 fc ff ff ff       	call   10001f92 <x87Handler(regs*)+0x1391>	10001f92: R_386_PC32	fpu64ToInternal(unsigned long long)
10001f96:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001f9c:	83 ec 0c             	sub    esp,0xc
10001f9f:	6a 00                	push   0x0
10001fa1:	50                   	push   eax
10001fa2:	e8 fc ff ff ff       	call   10001fa3 <x87Handler(regs*)+0x13a2>	10001fa3: R_386_PC32	fpuGetReg(int)
10001fa7:	50                   	push   eax
10001fa8:	50                   	push   eax
10001fa9:	b9 03 00 00 00       	mov    ecx,0x3
10001fae:	89 e7                	mov    edi,esp
10001fb0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fb2:	83 ec 0c             	sub    esp,0xc
10001fb5:	b9 03 00 00 00       	mov    ecx,0x3
10001fba:	89 e7                	mov    edi,esp
10001fbc:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001fc2:	89 c6                	mov    esi,eax
10001fc4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001fc6:	e8 fc ff ff ff       	call   10001fc7 <x87Handler(regs*)+0x13c6>	10001fc7: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10001fcb:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10001fd1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10001fd4:	83 c4 30             	add    esp,0x30
10001fd7:	e9 82 ed ff ff       	jmp    10000d5e <x87Handler(regs*)+0x15d>
10001fdc:	80 fa 03             	cmp    dl,0x3
10001fdf:	75 6a                	jne    1000204b <x87Handler(regs*)+0x144a>
10001fe1:	8d b5 04 ff ff ff    	lea    esi,[ebp-0xfc]
10001fe7:	51                   	push   ecx
10001fe8:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10001fee:	ff 70 04             	push   DWORD PTR [eax+0x4]
10001ff1:	ff 30                	push   DWORD PTR [eax]
10001ff3:	56                   	push   esi
10001ff4:	e8 fc ff ff ff       	call   10001ff5 <x87Handler(regs*)+0x13f4>	10001ff5: R_386_PC32	fpu64ToInternal(unsigned long long)
10001ff9:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10001fff:	83 ec 0c             	sub    esp,0xc
10002002:	6a 00                	push   0x0
10002004:	50                   	push   eax
10002005:	e8 fc ff ff ff       	call   10002006 <x87Handler(regs*)+0x1405>	10002006: R_386_PC32	fpuGetReg(int)
1000200a:	57                   	push   edi
1000200b:	57                   	push   edi
1000200c:	b9 03 00 00 00       	mov    ecx,0x3
10002011:	89 e7                	mov    edi,esp
10002013:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002015:	83 ec 0c             	sub    esp,0xc
10002018:	b9 03 00 00 00       	mov    ecx,0x3
1000201d:	89 e7                	mov    edi,esp
1000201f:	8d 85 10 ff ff ff    	lea    eax,[ebp-0xf0]
10002025:	89 c6                	mov    esi,eax
10002027:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002029:	e8 fc ff ff ff       	call   1000202a <x87Handler(regs*)+0x1429>	1000202a: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000202e:	8d 45 dc             	lea    eax,[ebp-0x24]
10002031:	83 c4 24             	add    esp,0x24
10002034:	50                   	push   eax
10002035:	e8 fc ff ff ff       	call   10002036 <x87Handler(regs*)+0x1435>	10002036: R_386_PC32	fpuPop()
1000203a:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002040:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002043:	83 c4 0c             	add    esp,0xc
10002046:	e9 13 ed ff ff       	jmp    10000d5e <x87Handler(regs*)+0x15d>
1000204b:	80 fa 04             	cmp    dl,0x4
1000204e:	75 68                	jne    100020b8 <x87Handler(regs*)+0x14b7>
10002050:	8d b5 1c ff ff ff    	lea    esi,[ebp-0xe4]
10002056:	50                   	push   eax
10002057:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
1000205d:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002060:	ff 30                	push   DWORD PTR [eax]
10002062:	56                   	push   esi
10002063:	e8 fc ff ff ff       	call   10002064 <x87Handler(regs*)+0x1463>	10002064: R_386_PC32	fpu64ToInternal(unsigned long long)
10002068:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
1000206e:	83 ec 0c             	sub    esp,0xc
10002071:	6a 00                	push   0x0
10002073:	52                   	push   edx
10002074:	e8 fc ff ff ff       	call   10002075 <x87Handler(regs*)+0x1474>	10002075: R_386_PC32	fpuGetReg(int)
10002079:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
1000207f:	52                   	push   edx
10002080:	b9 03 00 00 00       	mov    ecx,0x3
10002085:	89 e7                	mov    edi,esp
10002087:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002089:	83 ec 0c             	sub    esp,0xc
1000208c:	b9 03 00 00 00       	mov    ecx,0x3
10002091:	89 e7                	mov    edi,esp
10002093:	8d 95 28 ff ff ff    	lea    edx,[ebp-0xd8]
10002099:	89 d6                	mov    esi,edx
1000209b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000209d:	50                   	push   eax
1000209e:	e8 fc ff ff ff       	call   1000209f <x87Handler(regs*)+0x149e>	1000209f: R_386_PC32	fpuSub(_Float80, _Float80)
100020a3:	83 c4 20             	add    esp,0x20
100020a6:	b9 03 00 00 00       	mov    ecx,0x3
100020ab:	89 e7                	mov    edi,esp
100020ad:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
100020b3:	e9 d5 00 00 00       	jmp    1000218d <x87Handler(regs*)+0x158c>
100020b8:	80 fa 05             	cmp    dl,0x5
100020bb:	75 68                	jne    10002125 <x87Handler(regs*)+0x1524>
100020bd:	8d b5 40 ff ff ff    	lea    esi,[ebp-0xc0]
100020c3:	51                   	push   ecx
100020c4:	51                   	push   ecx
100020c5:	6a 00                	push   0x0
100020c7:	56                   	push   esi
100020c8:	e8 fc ff ff ff       	call   100020c9 <x87Handler(regs*)+0x14c8>	100020c9: R_386_PC32	fpuGetReg(int)
100020cd:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
100020d3:	57                   	push   edi
100020d4:	57                   	push   edi
100020d5:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
100020db:	ff 77 04             	push   DWORD PTR [edi+0x4]
100020de:	ff 37                	push   DWORD PTR [edi]
100020e0:	50                   	push   eax
100020e1:	e8 fc ff ff ff       	call   100020e2 <x87Handler(regs*)+0x14e1>	100020e2: R_386_PC32	fpu64ToInternal(unsigned long long)
100020e6:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
100020ec:	50                   	push   eax
100020ed:	b9 03 00 00 00       	mov    ecx,0x3
100020f2:	89 e7                	mov    edi,esp
100020f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100020f6:	83 ec 0c             	sub    esp,0xc
100020f9:	b9 03 00 00 00       	mov    ecx,0x3
100020fe:	89 e7                	mov    edi,esp
10002100:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10002106:	89 c6                	mov    esi,eax
10002108:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000210a:	52                   	push   edx
1000210b:	e8 fc ff ff ff       	call   1000210c <x87Handler(regs*)+0x150b>	1000210c: R_386_PC32	fpuSub(_Float80, _Float80)
10002110:	83 c4 20             	add    esp,0x20
10002113:	b9 03 00 00 00       	mov    ecx,0x3
10002118:	89 e7                	mov    edi,esp
1000211a:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
10002120:	e9 cb 00 00 00       	jmp    100021f0 <x87Handler(regs*)+0x15ef>
10002125:	80 fa 06             	cmp    dl,0x6
10002128:	75 67                	jne    10002191 <x87Handler(regs*)+0x1590>
1000212a:	8d b5 64 ff ff ff    	lea    esi,[ebp-0x9c]
10002130:	57                   	push   edi
10002131:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
10002137:	ff 70 04             	push   DWORD PTR [eax+0x4]
1000213a:	ff 30                	push   DWORD PTR [eax]
1000213c:	56                   	push   esi
1000213d:	e8 fc ff ff ff       	call   1000213e <x87Handler(regs*)+0x153d>	1000213e: R_386_PC32	fpu64ToInternal(unsigned long long)
10002142:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002148:	83 ec 0c             	sub    esp,0xc
1000214b:	6a 00                	push   0x0
1000214d:	52                   	push   edx
1000214e:	e8 fc ff ff ff       	call   1000214f <x87Handler(regs*)+0x154e>	1000214f: R_386_PC32	fpuGetReg(int)
10002153:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
10002159:	52                   	push   edx
1000215a:	b9 03 00 00 00       	mov    ecx,0x3
1000215f:	89 e7                	mov    edi,esp
10002161:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002163:	83 ec 0c             	sub    esp,0xc
10002166:	b9 03 00 00 00       	mov    ecx,0x3
1000216b:	89 e7                	mov    edi,esp
1000216d:	8d 95 70 ff ff ff    	lea    edx,[ebp-0x90]
10002173:	89 d6                	mov    esi,edx
10002175:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002177:	50                   	push   eax
10002178:	e8 fc ff ff ff       	call   10002179 <x87Handler(regs*)+0x1578>	10002179: R_386_PC32	fpuDivide(_Float80, _Float80)
1000217d:	83 c4 20             	add    esp,0x20
10002180:	b9 03 00 00 00       	mov    ecx,0x3
10002185:	89 e7                	mov    edi,esp
10002187:	8d 85 7c ff ff ff    	lea    eax,[ebp-0x84]
1000218d:	89 c6                	mov    esi,eax
1000218f:	eb 61                	jmp    100021f2 <x87Handler(regs*)+0x15f1>
10002191:	31 c0                	xor    eax,eax
10002193:	80 fa 07             	cmp    dl,0x7
10002196:	0f 85 26 01 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
1000219c:	8d 75 88             	lea    esi,[ebp-0x78]
1000219f:	57                   	push   edi
100021a0:	57                   	push   edi
100021a1:	6a 00                	push   0x0
100021a3:	56                   	push   esi
100021a4:	e8 fc ff ff ff       	call   100021a5 <x87Handler(regs*)+0x15a4>	100021a5: R_386_PC32	fpuGetReg(int)
100021a9:	8d 45 94             	lea    eax,[ebp-0x6c]
100021ac:	52                   	push   edx
100021ad:	52                   	push   edx
100021ae:	8b 95 d0 f9 ff ff    	mov    edx,DWORD PTR [ebp-0x630]
100021b4:	ff 72 04             	push   DWORD PTR [edx+0x4]
100021b7:	ff 32                	push   DWORD PTR [edx]
100021b9:	50                   	push   eax
100021ba:	e8 fc ff ff ff       	call   100021bb <x87Handler(regs*)+0x15ba>	100021bb: R_386_PC32	fpu64ToInternal(unsigned long long)
100021bf:	8d 55 a0             	lea    edx,[ebp-0x60]
100021c2:	51                   	push   ecx
100021c3:	b9 03 00 00 00       	mov    ecx,0x3
100021c8:	89 e7                	mov    edi,esp
100021ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021cc:	83 ec 0c             	sub    esp,0xc
100021cf:	b9 03 00 00 00       	mov    ecx,0x3
100021d4:	89 e7                	mov    edi,esp
100021d6:	8d 45 94             	lea    eax,[ebp-0x6c]
100021d9:	89 c6                	mov    esi,eax
100021db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021dd:	52                   	push   edx
100021de:	e8 fc ff ff ff       	call   100021df <x87Handler(regs*)+0x15de>	100021df: R_386_PC32	fpuDivide(_Float80, _Float80)
100021e3:	83 c4 20             	add    esp,0x20
100021e6:	b9 03 00 00 00       	mov    ecx,0x3
100021eb:	89 e7                	mov    edi,esp
100021ed:	8d 55 a0             	lea    edx,[ebp-0x60]
100021f0:	89 d6                	mov    esi,edx
100021f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100021f4:	6a 00                	push   0x0
100021f6:	e8 fc ff ff ff       	call   100021f7 <x87Handler(regs*)+0x15f6>	100021f7: R_386_PC32	fpuSetReg(int, _Float80)
100021fb:	8b 85 e4 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x61c]
10002201:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10002204:	e9 52 eb ff ff       	jmp    10000d5b <x87Handler(regs*)+0x15a>
10002209:	80 fa 02             	cmp    dl,0x2
1000220c:	75 23                	jne    10002231 <x87Handler(regs*)+0x1630>
1000220e:	8d 75 b8             	lea    esi,[ebp-0x48]
10002211:	52                   	push   edx
10002212:	52                   	push   edx
10002213:	6a 00                	push   0x0
10002215:	56                   	push   esi
10002216:	e8 fc ff ff ff       	call   10002217 <x87Handler(regs*)+0x1616>	10002217: R_386_PC32	fpuGetReg(int)
1000221b:	83 ec 14             	sub    esp,0x14
1000221e:	b9 03 00 00 00       	mov    ecx,0x3
10002223:	89 e7                	mov    edi,esp
10002225:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002227:	e8 fc ff ff ff       	call   10002228 <x87Handler(regs*)+0x1627>	10002228: R_386_PC32	fpuInternalTo64(_Float80)
1000222c:	e9 81 00 00 00       	jmp    100022b2 <x87Handler(regs*)+0x16b1>
10002231:	31 c0                	xor    eax,eax
10002233:	80 fa 03             	cmp    dl,0x3
10002236:	0f 85 86 00 00 00    	jne    100022c2 <x87Handler(regs*)+0x16c1>
1000223c:	8d 75 c4             	lea    esi,[ebp-0x3c]
1000223f:	83 ec 0c             	sub    esp,0xc
10002242:	56                   	push   esi
10002243:	e8 fc ff ff ff       	call   10002244 <x87Handler(regs*)+0x1643>	10002244: R_386_PC32	fpuPop()
10002248:	83 ec 14             	sub    esp,0x14
1000224b:	b9 03 00 00 00       	mov    ecx,0x3
10002250:	89 e7                	mov    edi,esp
10002252:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002254:	e8 fc ff ff ff       	call   10002255 <x87Handler(regs*)+0x1654>	10002255: R_386_PC32	fpuInternalTo64(_Float80)
10002259:	8b bd d0 f9 ff ff    	mov    edi,DWORD PTR [ebp-0x630]
1000225f:	89 07                	mov    DWORD PTR [edi],eax
10002261:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
10002264:	e9 1a ee ff ff       	jmp    10001083 <x87Handler(regs*)+0x482>
10002269:	8a 95 e3 f9 ff ff    	mov    dl,BYTE PTR [ebp-0x61d]
1000226f:	80 fa 05             	cmp    dl,0x5
10002272:	75 1a                	jne    1000228e <x87Handler(regs*)+0x168d>
10002274:	8d 75 d0             	lea    esi,[ebp-0x30]
10002277:	50                   	push   eax
10002278:	8b 85 d0 f9 ff ff    	mov    eax,DWORD PTR [ebp-0x630]
1000227e:	ff 70 04             	push   DWORD PTR [eax+0x4]
10002281:	ff 30                	push   DWORD PTR [eax]
10002283:	56                   	push   esi
10002284:	e8 fc ff ff ff       	call   10002285 <x87Handler(regs*)+0x1684>	10002285: R_386_PC32	fpuULongToFloat(unsigned long long)
10002289:	e9 b4 ed ff ff       	jmp    10001042 <x87Handler(regs*)+0x441>
1000228e:	31 c0                	xor    eax,eax
10002290:	80 fa 07             	cmp    dl,0x7
10002293:	75 2d                	jne    100022c2 <x87Handler(regs*)+0x16c1>
10002295:	8d 75 dc             	lea    esi,[ebp-0x24]
10002298:	83 ec 0c             	sub    esp,0xc
1000229b:	56                   	push   esi
1000229c:	e8 fc ff ff ff       	call   1000229d <x87Handler(regs*)+0x169c>	1000229d: R_386_PC32	fpuPop()
100022a1:	83 ec 14             	sub    esp,0x14
100022a4:	b9 03 00 00 00       	mov    ecx,0x3
100022a9:	89 e7                	mov    edi,esp
100022ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022ad:	e8 fc ff ff ff       	call   100022ae <x87Handler(regs*)+0x16ad>	100022ae: R_386_PC32	fpuFloatToLong(_Float80)
100022b2:	8b 8d d0 f9 ff ff    	mov    ecx,DWORD PTR [ebp-0x630]
100022b8:	89 01                	mov    DWORD PTR [ecx],eax
100022ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
100022bd:	e9 c1 ed ff ff       	jmp    10001083 <x87Handler(regs*)+0x482>
100022c2:	8d 65 f4             	lea    esp,[ebp-0xc]
100022c5:	5b                   	pop    ebx
100022c6:	5e                   	pop    esi
100022c7:	5f                   	pop    edi
100022c8:	5d                   	pop    ebp
100022c9:	c3                   	ret    

100022ca <begin()>:
100022ca:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100022cc: R_386_32	x87FaultIntercept
	100022d0: R_386_32	x87Handler(regs*)
100022d4:	c3                   	ret    

100022d5 <_GLOBAL__sub_I__Z5startv>:
100022d5:	c7 05 64 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x64,0x0	100022d7: R_386_32	fpuState
100022df:	c3                   	ret    
100022e0:	46                   	inc    esi
100022e1:	6c                   	ins    BYTE PTR es:[edi],dx
100022e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100022e3:	61                   	popa   
100022e4:	74 2d                	je     10002313 <_GLOBAL__sub_I__Z5startv+0x3e>
100022e6:	3e 49                	ds dec ecx
100022e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100022e9:	74 3a                	je     10002325 <_GLOBAL__sub_I__Z5startv+0x50>
100022eb:	20 30                	and    BYTE PTR [eax],dh
100022ed:	78 25                	js     10002314 <_GLOBAL__sub_I__Z5startv+0x3f>
100022ef:	58                   	pop    eax
100022f0:	30 30                	xor    BYTE PTR [eax],dh
100022f2:	30 30                	xor    BYTE PTR [eax],dh
100022f4:	30 30                	xor    BYTE PTR [eax],dh
100022f6:	30 30                	xor    BYTE PTR [eax],dh
100022f8:	20 3e                	and    BYTE PTR [esi],bh
100022fa:	3e 20 25 64 0a 00 65 	and    BYTE PTR ds:0x65000a64,ah
10002301:	6d                   	ins    DWORD PTR es:[edi],dx
10002302:	38 30                	cmp    BYTE PTR [eax],dh
10002304:	38 37                	cmp    BYTE PTR [edi],dh
10002306:	20 62 61             	and    BYTE PTR [edx+0x61],ah
10002309:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
1000230d:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
10002311:	74 00                	je     10002313 <_GLOBAL__sub_I__Z5startv+0x3e>
10002313:	78 38                	js     1000234d <_GLOBAL__sub_I__Z5startv+0x78>
10002315:	37                   	aaa    
10002316:	20 68 61             	and    BYTE PTR [eax+0x61],ch
10002319:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000231a:	64 6c                	fs ins BYTE PTR es:[edi],dx
1000231c:	65 72 20             	gs jb  1000233f <_GLOBAL__sub_I__Z5startv+0x6a>
1000231f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002322:	6c                   	ins    BYTE PTR es:[edi],dx
10002323:	65 64 20 77 69       	gs and BYTE PTR fs:[edi+0x69],dh
10002328:	74 68                	je     10002392 <_GLOBAL__sub_I__Z5startv+0xbd>
1000232a:	20 66 61             	and    BYTE PTR [esi+0x61],ah
1000232d:	75 6c                	jne    1000239b <_GLOBAL__sub_I__Z5startv+0xc6>
1000232f:	74 69                	je     1000239a <_GLOBAL__sub_I__Z5startv+0xc5>
10002331:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002332:	67 20 45 49          	and    BYTE PTR [di+0x49],al
10002336:	50                   	push   eax
10002337:	20 6f 66             	and    BYTE PTR [edi+0x66],ch
1000233a:	20 30                	and    BYTE PTR [eax],dh
1000233c:	78 25                	js     10002363 <_GLOBAL__sub_I__Z5startv+0x8e>
1000233e:	58                   	pop    eax
1000233f:	0a 00                	or     al,BYTE PTR [eax]
10002341:	78 38                	js     1000237b <_GLOBAL__sub_I__Z5startv+0xa6>
10002343:	37                   	aaa    
10002344:	3a 20                	cmp    ah,BYTE PTR [eax]
10002346:	25 58 20 25 58       	and    eax,0x58252058
1000234b:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
10002351:	0a 00                	or     al,BYTE PTR [eax]
10002353:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
10002358:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
1000235d:	64 72 65             	fs jb  100023c5 <_DYNAMIC+0x19>
10002360:	73 73                	jae    100023d5 <_DYNAMIC+0x29>
10002362:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10002368:	58                   	pop    eax
10002369:	0a 00                	or     al,BYTE PTR [eax]
1000236b:	90                   	nop
1000236c:	d5 0c                	aad    0xc	1000236c: R_386_32	.text
1000236e:	00 10                	add    BYTE PTR [eax],dl
10002370:	05 0d 00 10 c5       	add    eax,0xc510000d	10002370: R_386_32	.text
	10002374: R_386_32	.text
10002375:	0e                   	push   cs
10002376:	00 10                	add    BYTE PTR [eax],dl
10002378:	c5 0e                	lds    ecx,FWORD PTR [esi]	10002378: R_386_32	.text
1000237a:	00 10                	add    BYTE PTR [eax],dl
1000237c:	c5 0e                	lds    ecx,FWORD PTR [esi]	1000237c: R_386_32	.text
1000237e:	00 10                	add    BYTE PTR [eax],dl
10002380:	c5 0e                	lds    ecx,FWORD PTR [esi]	10002380: R_386_32	.text
10002382:	00 10                	add    BYTE PTR [eax],dl
10002384:	c5 0e                	lds    ecx,FWORD PTR [esi]	10002384: R_386_32	.text
10002386:	00 10                	add    BYTE PTR [eax],dl
10002388:	c5 0e                	lds    ecx,FWORD PTR [esi]	10002388: R_386_32	.text
1000238a:	00 10                	add    BYTE PTR [eax],dl
1000238c:	65 0d 00 10 94 0d    	gs or  eax,0xd941000	1000238c: R_386_32	.text
	10002390: R_386_32	.text
10002392:	00 10                	add    BYTE PTR [eax],dl
10002394:	d1 0d 00 10 00 0e    	ror    DWORD PTR ds:0xe001000,1	10002394: R_386_32	.text
	10002398: R_386_32	.text
1000239a:	00 10                	add    BYTE PTR [eax],dl
1000239c:	2f                   	das    	1000239c: R_386_32	.text
1000239d:	0e                   	push   cs
1000239e:	00 10                	add    BYTE PTR [eax],dl
100023a0:	61                   	popa   	100023a0: R_386_32	.text
100023a1:	0e                   	push   cs
100023a2:	00 10                	add    BYTE PTR [eax],dl
100023a4:	93                   	xchg   ebx,eax	100023a4: R_386_32	.text
100023a5:	0e                   	push   cs
100023a6:	00 10                	add    BYTE PTR [eax],dl
