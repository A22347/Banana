
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <floatToLong(Float80)>:
1000000b:	b8 00 00 00 00       	mov    eax,0x0
10000010:	ba 00 00 00 00       	mov    edx,0x0
10000015:	c3                   	ret    

10000016 <longToFloat(long long)>:
10000016:	57                   	push   edi
10000017:	56                   	push   esi
10000018:	53                   	push   ebx
10000019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000001d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000021:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10000025:	89 de                	mov    esi,ebx
10000027:	09 ce                	or     esi,ecx
10000029:	75 1d                	jne    10000048 <longToFloat(long long)+0x32>
1000002b:	80 60 09 7f          	and    BYTE PTR [eax+0x9],0x7f
1000002f:	66 81 60 08 00 80    	and    WORD PTR [eax+0x8],0x8000
10000035:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000003b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000042:	5b                   	pop    ebx
10000043:	5e                   	pop    esi
10000044:	5f                   	pop    edi
10000045:	c2 04 00             	ret    0x4
10000048:	85 db                	test   ebx,ebx
1000004a:	78 4f                	js     1000009b <longToFloat(long long)+0x85>
1000004c:	b2 00                	mov    dl,0x0
1000004e:	c1 e2 07             	shl    edx,0x7
10000051:	89 d6                	mov    esi,edx
10000053:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
10000056:	83 e2 7f             	and    edx,0x7f
10000059:	09 f2                	or     edx,esi
1000005b:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
1000005e:	ba 00 00 00 00       	mov    edx,0x0
10000063:	89 ce                	mov    esi,ecx
10000065:	89 df                	mov    edi,ebx
10000067:	01 ce                	add    esi,ecx
10000069:	11 df                	adc    edi,ebx
1000006b:	89 f1                	mov    ecx,esi
1000006d:	89 fb                	mov    ebx,edi
1000006f:	42                   	inc    edx
10000070:	85 ff                	test   edi,edi
10000072:	79 ef                	jns    10000063 <longToFloat(long long)+0x4d>
10000074:	89 30                	mov    DWORD PTR [eax],esi
10000076:	89 78 04             	mov    DWORD PTR [eax+0x4],edi
10000079:	b9 3e 40 00 00       	mov    ecx,0x403e
1000007e:	29 d1                	sub    ecx,edx
10000080:	89 ca                	mov    edx,ecx
10000082:	81 e2 ff 7f 00 00    	and    edx,0x7fff
10000088:	89 d1                	mov    ecx,edx
1000008a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
1000008d:	81 e2 00 80 ff ff    	and    edx,0xffff8000
10000093:	09 ca                	or     edx,ecx
10000095:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
10000099:	eb a7                	jmp    10000042 <longToFloat(long long)+0x2c>
1000009b:	f7 d9                	neg    ecx
1000009d:	83 d3 00             	adc    ebx,0x0
100000a0:	f7 db                	neg    ebx
100000a2:	b2 01                	mov    dl,0x1
100000a4:	eb a8                	jmp    1000004e <longToFloat(long long)+0x38>

100000a6 <get0()>:
100000a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100000aa:	80 60 09 7f          	and    BYTE PTR [eax+0x9],0x7f
100000ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000bb:	66 81 60 08 00 80    	and    WORD PTR [eax+0x8],0x8000
100000c1:	c2 04 00             	ret    0x4

100000c4 <get1()>:
100000c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100000c8:	80 60 09 7f          	and    BYTE PTR [eax+0x9],0x7f
100000cc:	66 81 60 08 00 80    	and    WORD PTR [eax+0x8],0x8000
100000d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000df:	c2 04 00             	ret    0x4

100000e2 <fpuPush(Float80)>:
100000e2:	57                   	push   edi
100000e3:	56                   	push   esi
100000e4:	83 ec 04             	sub    esp,0x4
100000e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100000e8: R_386_32	fpuSP
100000ec:	8d 50 01             	lea    edx,[eax+0x1]
100000ef:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100000f1: R_386_32	fpuSP
100000f5:	8d 0c 00             	lea    ecx,[eax+eax*1]
100000f8:	01 c8                	add    eax,ecx
100000fa:	8d 04 85 00 00 00 00 	lea    eax,[eax*4+0x0]	100000fd: R_386_32	fpuStack
10000101:	b9 03 00 00 00       	mov    ecx,0x3
10000106:	89 c7                	mov    edi,eax
10000108:	8d 74 24 10          	lea    esi,[esp+0x10]
1000010c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000010e:	83 fa 08             	cmp    edx,0x8
10000111:	74 06                	je     10000119 <fpuPush(Float80)+0x37>
10000113:	83 c4 04             	add    esp,0x4
10000116:	5e                   	pop    esi
10000117:	5f                   	pop    edi
10000118:	c3                   	ret    
10000119:	83 ec 0c             	sub    esp,0xc
1000011c:	68 3c 02 00 10       	push   0x1000023c	1000011d: R_386_32	.text
10000121:	e8 fc ff ff ff       	call   10000122 <fpuPush(Float80)+0x40>	10000122: R_386_PC32	Krnl::panic(char const*)
10000126:	83 c4 10             	add    esp,0x10
10000129:	eb e8                	jmp    10000113 <fpuPush(Float80)+0x31>

1000012b <x87Handler(regs*)>:
1000012b:	57                   	push   edi
1000012c:	56                   	push   esi
1000012d:	53                   	push   ebx
1000012e:	83 ec 20             	sub    esp,0x20
10000131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10000135:	8b 58 38             	mov    ebx,DWORD PTR [eax+0x38]
10000138:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
1000013c:	50                   	push   eax
1000013d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
10000141:	50                   	push   eax
10000142:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10000145:	50                   	push   eax
10000146:	68 4a 02 00 10       	push   0x1000024a	10000147: R_386_32	.text
1000014b:	e8 fc ff ff ff       	call   1000014c <x87Handler(regs*)+0x21>	1000014c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000150:	83 c4 10             	add    esp,0x10
10000153:	80 3b d9             	cmp    BYTE PTR [ebx],0xd9
10000156:	74 09                	je     10000161 <x87Handler(regs*)+0x36>
10000158:	b0 00                	mov    al,0x0
1000015a:	83 c4 20             	add    esp,0x20
1000015d:	5b                   	pop    ebx
1000015e:	5e                   	pop    esi
1000015f:	5f                   	pop    edi
10000160:	c3                   	ret    
10000161:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
10000164:	3c e8                	cmp    al,0xe8
10000166:	74 08                	je     10000170 <x87Handler(regs*)+0x45>
10000168:	3c ee                	cmp    al,0xee
1000016a:	74 3c                	je     100001a8 <x87Handler(regs*)+0x7d>
1000016c:	b0 00                	mov    al,0x0
1000016e:	eb ea                	jmp    1000015a <x87Handler(regs*)+0x2f>
10000170:	80 64 24 11 7f       	and    BYTE PTR [esp+0x11],0x7f
10000175:	66 81 64 24 10 00 80 	and    WORD PTR [esp+0x10],0x8000
1000017c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10000184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
1000018c:	83 ec 10             	sub    esp,0x10
1000018f:	8d 74 24 18          	lea    esi,[esp+0x18]
10000193:	b9 03 00 00 00       	mov    ecx,0x3
10000198:	89 e7                	mov    edi,esp
1000019a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000019c:	e8 fc ff ff ff       	call   1000019d <x87Handler(regs*)+0x72>	1000019d: R_386_PC32	fpuPush(Float80)
100001a1:	83 c4 10             	add    esp,0x10
100001a4:	b0 01                	mov    al,0x1
100001a6:	eb b2                	jmp    1000015a <x87Handler(regs*)+0x2f>
100001a8:	80 64 24 1d 7f       	and    BYTE PTR [esp+0x1d],0x7f
100001ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
100001b5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
100001bd:	66 81 64 24 1c 00 80 	and    WORD PTR [esp+0x1c],0x8000
100001c4:	83 ec 10             	sub    esp,0x10
100001c7:	8d 74 24 24          	lea    esi,[esp+0x24]
100001cb:	b9 03 00 00 00       	mov    ecx,0x3
100001d0:	89 e7                	mov    edi,esp
100001d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100001d4:	e8 fc ff ff ff       	call   100001d5 <x87Handler(regs*)+0xaa>	100001d5: R_386_PC32	fpuPush(Float80)
100001d9:	83 c4 10             	add    esp,0x10
100001dc:	b0 01                	mov    al,0x1
100001de:	e9 77 ff ff ff       	jmp    1000015a <x87Handler(regs*)+0x2f>

100001e3 <fpuPop()>:
100001e3:	57                   	push   edi
100001e4:	56                   	push   esi
100001e5:	83 ec 04             	sub    esp,0x4
100001e8:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100001ea: R_386_32	fpuSP
100001ef:	74 2e                	je     1000021f <fpuPop()+0x3c>
100001f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100001f2: R_386_32	fpuSP
100001f6:	48                   	dec    eax
100001f7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001f8: R_386_32	fpuSP
100001fc:	8d 14 00             	lea    edx,[eax+eax*1]
100001ff:	01 d0                	add    eax,edx
10000201:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]	10000204: R_386_32	fpuStack
10000208:	b9 03 00 00 00       	mov    ecx,0x3
1000020d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000211:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000217:	83 c4 04             	add    esp,0x4
1000021a:	5e                   	pop    esi
1000021b:	5f                   	pop    edi
1000021c:	c2 04 00             	ret    0x4
1000021f:	83 ec 0c             	sub    esp,0xc
10000222:	68 59 02 00 10       	push   0x10000259	10000223: R_386_32	.text
10000227:	e8 fc ff ff ff       	call   10000228 <fpuPop()+0x45>	10000228: R_386_PC32	Krnl::panic(char const*)
1000022c:	83 c4 10             	add    esp,0x10
1000022f:	eb c0                	jmp    100001f1 <fpuPop()+0xe>

10000231 <begin()>:
10000231:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000233: R_386_32	x87FaultIntercept
	10000237: R_386_32	x87Handler(regs*)
1000023b:	c3                   	ret    
1000023c:	46                   	inc    esi
1000023d:	50                   	push   eax
1000023e:	55                   	push   ebp
1000023f:	20 4f 56             	and    BYTE PTR [edi+0x56],cl
10000242:	45                   	inc    ebp
10000243:	52                   	push   edx
10000244:	46                   	inc    esi
10000245:	4c                   	dec    esp
10000246:	4f                   	dec    edi
10000247:	57                   	push   edi
10000248:	2e 00 78 38          	add    BYTE PTR cs:[eax+0x38],bh
1000024c:	37                   	aaa    
1000024d:	3a 20                	cmp    ah,BYTE PTR [eax]
1000024f:	25 58 20 25 58       	and    eax,0x58252058
10000254:	20 25 58 0a 00 46    	and    BYTE PTR ds:0x46000a58,ah
1000025a:	50                   	push   eax
1000025b:	55                   	push   ebp
1000025c:	20 55 4e             	and    BYTE PTR [ebp+0x4e],dl
1000025f:	44                   	inc    esp
10000260:	45                   	inc    ebp
10000261:	52                   	push   edx
10000262:	46                   	inc    esi
10000263:	4c                   	dec    esp
10000264:	4f                   	dec    edi
10000265:	57                   	push   edi
10000266:	2e                   	cs
	...
