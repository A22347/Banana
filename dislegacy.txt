
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 ec 25 00 10       	push   0x100025ec	1000001c: R_386_32	.text
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	Dbg::kprintf(char const*, ...)
10000025:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
1000002c:	e8 fc ff ff ff       	call   1000002d <realstart(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	89 04 24             	mov    DWORD PTR [esp],eax
10000034:	89 c3                	mov    ebx,eax
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	ISA::ISA()
1000003b:	58                   	pop    eax
1000003c:	5a                   	pop    edx
1000003d:	53                   	push   ebx
1000003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000042:	e8 fc ff ff ff       	call   10000043 <realstart(void*)+0x2c>	10000043: R_386_PC32	Device::addChild(Device*)
10000047:	6a 00                	push   0x0
10000049:	8b 03                	mov    eax,DWORD PTR [ebx]
1000004b:	6a 00                	push   0x0
1000004d:	6a 00                	push   0x0
1000004f:	53                   	push   ebx
10000050:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000053:	83 c4 28             	add    esp,0x28
10000056:	5b                   	pop    ebx
10000057:	c3                   	ret    

10000058 <ISA::ISA()>:
10000058:	55                   	push   ebp
10000059:	89 e5                	mov    ebp,esp
1000005b:	83 ec 08             	sub    esp,0x8
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	83 ec 08             	sub    esp,0x8
10000064:	68 00 00 00 00       	push   0x0	10000065: R_386_32	busname
10000069:	50                   	push   eax
1000006a:	e8 fc ff ff ff       	call   1000006b <ISA::ISA()+0x13>	1000006b: R_386_PC32	Bus::Bus(char const*)
1000006f:	83 c4 10             	add    esp,0x10
10000072:	ba 08 00 00 00       	mov    edx,0x8	10000073: R_386_32	vtable for ISA
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	89 10                	mov    DWORD PTR [eax],edx
1000007c:	90                   	nop
1000007d:	c9                   	leave  
1000007e:	c3                   	ret    
1000007f:	90                   	nop

10000080 <ISA::open(int, int, void*)>:
10000080:	83 ec 18             	sub    esp,0x18
10000083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	50                   	push   eax
1000008a:	ff 52 18             	call   DWORD PTR [edx+0x18]
1000008d:	31 c0                	xor    eax,eax
1000008f:	83 c4 1c             	add    esp,0x1c
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::close(int, int, void*)>:
10000094:	31 c0                	xor    eax,eax
10000096:	c3                   	ret    
10000097:	90                   	nop

10000098 <ISA::doSpeaker()>:
10000098:	c3                   	ret    
10000099:	90                   	nop

1000009a <ISA::doSoundblaster()>:
1000009a:	56                   	push   esi
1000009b:	b0 01                	mov    al,0x1
1000009d:	53                   	push   ebx
1000009e:	bb 26 02 00 00       	mov    ebx,0x226
100000a3:	83 ec 0c             	sub    esp,0xc
100000a6:	89 da                	mov    edx,ebx
100000a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100000ac:	ee                   	out    dx,al
100000ad:	6a 00                	push   0x0
100000af:	68 c0 c6 2d 00       	push   0x2dc6c0
100000b4:	e8 fc ff ff ff       	call   100000b5 <ISA::doSoundblaster()+0x1b>	100000b5: R_386_PC32	nanoSleep(unsigned long long)
100000b9:	31 c0                	xor    eax,eax
100000bb:	89 da                	mov    edx,ebx
100000bd:	ee                   	out    dx,al
100000be:	ba 2a 02 00 00       	mov    edx,0x22a
100000c3:	ec                   	in     al,dx
100000c4:	83 c4 10             	add    esp,0x10
100000c7:	3c aa                	cmp    al,0xaa
100000c9:	75 3a                	jne    10000105 <ISA::doSoundblaster()+0x6b>
100000cb:	83 ec 0c             	sub    esp,0xc
100000ce:	68 fc 01 00 00       	push   0x1fc
100000d3:	e8 fc ff ff ff       	call   100000d4 <ISA::doSoundblaster()+0x3a>	100000d4: R_386_PC32	operator new(unsigned long)
100000d8:	89 04 24             	mov    DWORD PTR [esp],eax
100000db:	89 c3                	mov    ebx,eax
100000dd:	e8 fc ff ff ff       	call   100000de <ISA::doSoundblaster()+0x44>	100000de: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000e2:	5a                   	pop    edx
100000e3:	59                   	pop    ecx
100000e4:	53                   	push   ebx
100000e5:	56                   	push   esi
100000e6:	e8 fc ff ff ff       	call   100000e7 <ISA::doSoundblaster()+0x4d>	100000e7: R_386_PC32	Device::addChild(Device*)
100000eb:	8b 03                	mov    eax,DWORD PTR [ebx]
100000ed:	6a 00                	push   0x0
100000ef:	6a 00                	push   0x0
100000f1:	6a 00                	push   0x0
100000f3:	53                   	push   ebx
100000f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000f7:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
100000fb:	83 c4 24             	add    esp,0x24
100000fe:	5b                   	pop    ebx
100000ff:	5e                   	pop    esi
10000100:	e9 fc ff ff ff       	jmp    10000101 <ISA::doSoundblaster()+0x67>	10000101: R_386_PC32	sb16Demo(void*)
10000105:	58                   	pop    eax
10000106:	5b                   	pop    ebx
10000107:	5e                   	pop    esi
10000108:	c3                   	ret    
10000109:	90                   	nop

1000010a <ISA::doSerial()>:
1000010a:	c3                   	ret    
1000010b:	90                   	nop

1000010c <ISA::doParallel()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::doGameport()>:
1000010e:	c3                   	ret    
1000010f:	90                   	nop

10000110 <ISA::doFloppy()>:
10000110:	c3                   	ret    
10000111:	90                   	nop

10000112 <ISA::doATA()>:
10000112:	c3                   	ret    
10000113:	90                   	nop

10000114 <ISA::doPS2()>:
10000114:	53                   	push   ebx
10000115:	83 ec 14             	sub    esp,0x14
10000118:	68 00 00 00 00       	push   0x0	10000119: R_386_32	str_ps2
1000011d:	e8 fc ff ff ff       	call   1000011e <ISA::doPS2()+0xa>	1000011e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000122:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000125: R_386_32	str_ps2
10000129:	e8 fc ff ff ff       	call   1000012a <ISA::doPS2()+0x16>	1000012a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000012e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000131: R_386_32	str_ps2
10000135:	e8 fc ff ff ff       	call   10000136 <ISA::doPS2()+0x22>	10000136: R_386_PC32	Dbg::kprintf(char const*, ...)
1000013a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000013d: R_386_32	str_ps2
10000141:	e8 fc ff ff ff       	call   10000142 <ISA::doPS2()+0x2e>	10000142: R_386_PC32	Dbg::kprintf(char const*, ...)
10000146:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
1000014d:	e8 fc ff ff ff       	call   1000014e <ISA::doPS2()+0x3a>	1000014e: R_386_PC32	operator new(unsigned long)
10000152:	89 04 24             	mov    DWORD PTR [esp],eax
10000155:	89 c3                	mov    ebx,eax
10000157:	e8 fc ff ff ff       	call   10000158 <ISA::doPS2()+0x44>	10000158: R_386_PC32	PS2::PS2()
1000015c:	58                   	pop    eax
1000015d:	5a                   	pop    edx
1000015e:	53                   	push   ebx
1000015f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000163:	e8 fc ff ff ff       	call   10000164 <ISA::doPS2()+0x50>	10000164: R_386_PC32	Device::addChild(Device*)
10000168:	6a 00                	push   0x0
1000016a:	8b 03                	mov    eax,DWORD PTR [ebx]
1000016c:	6a 00                	push   0x0
1000016e:	6a 00                	push   0x0
10000170:	53                   	push   ebx
10000171:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000174:	83 c4 28             	add    esp,0x28
10000177:	5b                   	pop    ebx
10000178:	c3                   	ret    
10000179:	90                   	nop

1000017a <ISA::doRTC()>:
1000017a:	c3                   	ret    
1000017b:	90                   	nop

1000017c <ISA::detect()>:
1000017c:	57                   	push   edi
1000017d:	56                   	push   esi
1000017e:	53                   	push   ebx
1000017f:	83 ec 2c             	sub    esp,0x2c
10000182:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000186:	68 5c 01 00 00       	push   0x15c
1000018b:	e8 fc ff ff ff       	call   1000018c <ISA::detect()+0x10>	1000018c: R_386_PC32	operator new(unsigned long)
10000190:	89 04 24             	mov    DWORD PTR [esp],eax
10000193:	89 c3                	mov    ebx,eax
10000195:	e8 fc ff ff ff       	call   10000196 <ISA::detect()+0x1a>	10000196: R_386_PC32	DMA::DMA()
1000019a:	59                   	pop    ecx
1000019b:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000019d: R_386_32	isaDMAController
100001a1:	5e                   	pop    esi
100001a2:	53                   	push   ebx
100001a3:	57                   	push   edi
100001a4:	e8 fc ff ff ff       	call   100001a5 <ISA::detect()+0x29>	100001a5: R_386_PC32	Device::addChild(Device*)
100001a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100001aa: R_386_32	isaDMAController
100001ae:	8b 10                	mov    edx,DWORD PTR [eax]
100001b0:	6a 00                	push   0x0
100001b2:	6a 00                	push   0x0
100001b4:	6a 00                	push   0x0
100001b6:	50                   	push   eax
100001b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001ba:	83 c4 20             	add    esp,0x20
100001bd:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001bf: R_386_32	detectDone
100001c4:	0f 85 db 00 00 00    	jne    100002a5 <ISA::detect()+0x129>
100001ca:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001cc: R_386_32	detectDone
100001d1:	31 db                	xor    ebx,ebx
100001d3:	52                   	push   edx
100001d4:	6a 01                	push   0x1
100001d6:	68 00 00 00 00       	push   0x0	100001d7: R_386_32	str_isadonesafe
100001db:	68 00 00 00 00       	push   0x0	100001dc: R_386_32	str_isa
100001e0:	e8 fc ff ff ff       	call   100001e1 <ISA::detect()+0x65>	100001e1: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001e5:	83 c4 10             	add    esp,0x10
100001e8:	50                   	push   eax
100001e9:	50                   	push   eax
100001ea:	68 00 00 00 00       	push   0x0	100001eb: R_386_32	str_devices
100001ef:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001f3:	56                   	push   esi
100001f4:	e8 fc ff ff ff       	call   100001f5 <ISA::detect()+0x79>	100001f5: R_386_PC32	strcpy
100001f9:	83 c4 10             	add    esp,0x10
100001fc:	85 db                	test   ebx,ebx
100001fe:	75 09                	jne    10000209 <ISA::detect()+0x8d>
10000200:	50                   	push   eax
10000201:	50                   	push   eax
10000202:	68 00 00 00 00       	push   0x0	10000203: R_386_32	str_spk
10000207:	eb 52                	jmp    1000025b <ISA::detect()+0xdf>
10000209:	83 fb 01             	cmp    ebx,0x1
1000020c:	75 09                	jne    10000217 <ISA::detect()+0x9b>
1000020e:	50                   	push   eax
1000020f:	50                   	push   eax
10000210:	68 00 00 00 00       	push   0x0	10000211: R_386_32	str_rtc
10000215:	eb 44                	jmp    1000025b <ISA::detect()+0xdf>
10000217:	83 fb 02             	cmp    ebx,0x2
1000021a:	75 09                	jne    10000225 <ISA::detect()+0xa9>
1000021c:	50                   	push   eax
1000021d:	50                   	push   eax
1000021e:	68 00 00 00 00       	push   0x0	1000021f: R_386_32	str_ps2
10000223:	eb 36                	jmp    1000025b <ISA::detect()+0xdf>
10000225:	83 fb 03             	cmp    ebx,0x3
10000228:	75 09                	jne    10000233 <ISA::detect()+0xb7>
1000022a:	50                   	push   eax
1000022b:	50                   	push   eax
1000022c:	68 00 00 00 00       	push   0x0	1000022d: R_386_32	str_floppy
10000231:	eb 28                	jmp    1000025b <ISA::detect()+0xdf>
10000233:	83 fb 04             	cmp    ebx,0x4
10000236:	75 09                	jne    10000241 <ISA::detect()+0xc5>
10000238:	50                   	push   eax
10000239:	50                   	push   eax
1000023a:	68 00 00 00 00       	push   0x0	1000023b: R_386_32	str_sb16
1000023f:	eb 1a                	jmp    1000025b <ISA::detect()+0xdf>
10000241:	83 fb 05             	cmp    ebx,0x5
10000244:	75 09                	jne    1000024f <ISA::detect()+0xd3>
10000246:	51                   	push   ecx
10000247:	51                   	push   ecx
10000248:	68 00 00 00 00       	push   0x0	10000249: R_386_32	str_isaata
1000024d:	eb 0c                	jmp    1000025b <ISA::detect()+0xdf>
1000024f:	83 fb 06             	cmp    ebx,0x6
10000252:	75 10                	jne    10000264 <ISA::detect()+0xe8>
10000254:	52                   	push   edx
10000255:	52                   	push   edx
10000256:	68 00 00 00 00       	push   0x0	10000257: R_386_32	str_gp
1000025b:	56                   	push   esi
1000025c:	e8 fc ff ff ff       	call   1000025d <ISA::detect()+0xe1>	1000025d: R_386_PC32	strcat
10000261:	83 c4 10             	add    esp,0x10
10000264:	50                   	push   eax
10000265:	6a ff                	push   0xffffffff
10000267:	56                   	push   esi
10000268:	68 00 00 00 00       	push   0x0	10000269: R_386_32	str_isa
1000026d:	e8 fc ff ff ff       	call   1000026e <ISA::detect()+0xf2>	1000026e: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10000272:	83 c4 10             	add    esp,0x10
10000275:	83 f8 fe             	cmp    eax,0xfffffffe
10000278:	74 21                	je     1000029b <ISA::detect()+0x11f>
1000027a:	83 fb 02             	cmp    ebx,0x2
1000027d:	75 0b                	jne    1000028a <ISA::detect()+0x10e>
1000027f:	83 ec 0c             	sub    esp,0xc
10000282:	57                   	push   edi
10000283:	e8 fc ff ff ff       	call   10000284 <ISA::detect()+0x108>	10000284: R_386_PC32	ISA::doPS2()
10000288:	eb 0e                	jmp    10000298 <ISA::detect()+0x11c>
1000028a:	83 fb 04             	cmp    ebx,0x4
1000028d:	75 0c                	jne    1000029b <ISA::detect()+0x11f>
1000028f:	83 ec 0c             	sub    esp,0xc
10000292:	57                   	push   edi
10000293:	e8 fc ff ff ff       	call   10000294 <ISA::detect()+0x118>	10000294: R_386_PC32	ISA::doSoundblaster()
10000298:	83 c4 10             	add    esp,0x10
1000029b:	43                   	inc    ebx
1000029c:	83 fb 07             	cmp    ebx,0x7
1000029f:	0f 85 43 ff ff ff    	jne    100001e8 <ISA::detect()+0x6c>
100002a5:	83 c4 20             	add    esp,0x20
100002a8:	5b                   	pop    ebx
100002a9:	5e                   	pop    esi
100002aa:	5f                   	pop    edi
100002ab:	c3                   	ret    

100002ac <DMAChannel::DMAChannel(int)>:
100002ac:	55                   	push   ebp
100002ad:	89 e5                	mov    ebp,esp
100002af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b2:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bc:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002c9:	89 10                	mov    DWORD PTR [eax],edx
100002cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ce:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100002e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e9:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100002ed:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100002f1:	0f 9f c2             	setg   dl
100002f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f7:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100002fa:	90                   	nop
100002fb:	5d                   	pop    ebp
100002fc:	c3                   	ret    
100002fd:	90                   	nop

100002fe <DMAChannel::~DMAChannel()>:
100002fe:	55                   	push   ebp
100002ff:	89 e5                	mov    ebp,esp
10000301:	83 ec 08             	sub    esp,0x8
10000304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000307:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000030a:	85 c0                	test   eax,eax
1000030c:	74 19                	je     10000327 <DMAChannel::~DMAChannel()+0x29>
1000030e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000311:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000317:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000031a:	83 ec 08             	sub    esp,0x8
1000031d:	52                   	push   edx
1000031e:	50                   	push   eax
1000031f:	e8 fc ff ff ff       	call   10000320 <DMAChannel::~DMAChannel()+0x22>	10000320: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
10000324:	83 c4 10             	add    esp,0x10
10000327:	90                   	nop
10000328:	c9                   	leave  
10000329:	c3                   	ret    

1000032a <DMAChannel::getAddress()>:
1000032a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000032e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000331:	c3                   	ret    

10000332 <DMAChannel::getChannelNum()>:
10000332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000336:	8b 00                	mov    eax,DWORD PTR [eax]
10000338:	c3                   	ret    
10000339:	90                   	nop

1000033a <DMAChannel::setLength(unsigned int)>:
1000033a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000033e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10000342:	3d 00 00 01 00       	cmp    eax,0x10000
10000347:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
1000034a:	76 0d                	jbe    10000359 <DMAChannel::setLength(unsigned int)+0x1f>
1000034c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10000350: R_386_32	dmaLong
10000354:	e9 fc ff ff ff       	jmp    10000355 <DMAChannel::setLength(unsigned int)+0x1b>	10000355: R_386_PC32	Krnl::panic(char const*)
10000359:	c3                   	ret    

1000035a <DMAChannel::setAddress(unsigned int)>:
1000035a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000035e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000362:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000365:	c3                   	ret    

10000366 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10000366:	56                   	push   esi
10000367:	53                   	push   ebx
10000368:	83 ec 10             	sub    esp,0x10
1000036b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000036f:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10000374:	56                   	push   esi
10000375:	e8 fc ff ff ff       	call   10000376 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10000376: R_386_PC32	Phys::allocateDMA(unsigned long)
1000037a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
1000037d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000380:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000383:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10000386:	83 c4 14             	add    esp,0x14
10000389:	5b                   	pop    ebx
1000038a:	5e                   	pop    esi
1000038b:	c3                   	ret    

1000038c <DMAChannel::setMode(unsigned char)>:
1000038c:	53                   	push   ebx
1000038d:	83 ec 08             	sub    esp,0x8
10000390:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000394:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000398:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
1000039c:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
1000039f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
100003a3:	74 2a                	je     100003cf <DMAChannel::setMode(unsigned char)+0x43>
100003a5:	51                   	push   ecx
100003a6:	51                   	push   ecx
100003a7:	6a 01                	push   0x1
100003a9:	53                   	push   ebx
100003aa:	e8 fc ff ff ff       	call   100003ab <DMAChannel::setMode(unsigned char)+0x1f>	100003ab: R_386_PC32	DMAChannel::mask(bool)
100003af:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
100003b3:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
100003b6:	19 d2                	sbb    edx,edx
100003b8:	80 e2 35             	and    dl,0x35
100003bb:	81 c2 d6 00 00 00    	add    edx,0xd6
100003c1:	ee                   	out    dx,al
100003c2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100003c6:	83 c4 18             	add    esp,0x18
100003c9:	5b                   	pop    ebx
100003ca:	e9 ff 00 00 00       	jmp    100004ce <DMAChannel::unmask()>
100003cf:	83 c4 08             	add    esp,0x8
100003d2:	5b                   	pop    ebx
100003d3:	c3                   	ret    

100003d4 <DMAChannel::start()>:
100003d4:	57                   	push   edi
100003d5:	56                   	push   esi
100003d6:	53                   	push   ebx
100003d7:	83 ec 10             	sub    esp,0x10
100003da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100003de:	8b 06                	mov    eax,DWORD PTR [esi]
100003e0:	83 f8 07             	cmp    eax,0x7
100003e3:	0f 87 96 00 00 00    	ja     1000047f <DMAChannel::start()+0xab>
100003e9:	8a 98 c8 26 00 10    	mov    bl,BYTE PTR [eax+0x100026c8]	100003eb: R_386_32	.text
100003ef:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100003f3:	8a 98 d0 26 00 10    	mov    bl,BYTE PTR [eax+0x100026d0]	100003f5: R_386_32	.text
100003f9:	8a 80 d8 26 00 10    	mov    al,BYTE PTR [eax+0x100026d8]	100003fb: R_386_32	.text
100003ff:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10000403:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10000407:	e8 fc ff ff ff       	call   10000408 <DMAChannel::start()+0x34>	10000408: R_386_PC32	lockScheduler()
1000040c:	50                   	push   eax
1000040d:	50                   	push   eax
1000040e:	6a 01                	push   0x1
10000410:	56                   	push   esi
10000411:	e8 fc ff ff ff       	call   10000412 <DMAChannel::start()+0x3e>	10000412: R_386_PC32	DMAChannel::mask(bool)
10000416:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10000419:	83 c4 10             	add    esp,0x10
1000041c:	80 fb 01             	cmp    bl,0x1
1000041f:	19 c9                	sbb    ecx,ecx
10000421:	31 ff                	xor    edi,edi
10000423:	80 e1 34             	and    cl,0x34
10000426:	89 f8                	mov    eax,edi
10000428:	81 c1 d8 00 00 00    	add    ecx,0xd8
1000042e:	89 ca                	mov    edx,ecx
10000430:	ee                   	out    dx,al
10000431:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10000436:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10000439:	ee                   	out    dx,al
1000043a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000043d:	c1 e8 08             	shr    eax,0x8
10000440:	ee                   	out    dx,al
10000441:	89 f8                	mov    eax,edi
10000443:	89 ca                	mov    edx,ecx
10000445:	ee                   	out    dx,al
10000446:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000449:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
1000044e:	8d 41 ff             	lea    eax,[ecx-0x1]
10000451:	ee                   	out    dx,al
10000452:	8d 41 ff             	lea    eax,[ecx-0x1]
10000455:	c1 e8 08             	shr    eax,0x8
10000458:	ee                   	out    dx,al
10000459:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000045c:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10000461:	c1 e8 10             	shr    eax,0x10
10000464:	ee                   	out    dx,al
10000465:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10000469:	74 27                	je     10000492 <DMAChannel::start()+0xbe>
1000046b:	80 fb 01             	cmp    bl,0x1
1000046e:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10000471:	19 d2                	sbb    edx,edx
10000473:	80 e2 35             	and    dl,0x35
10000476:	81 c2 d6 00 00 00    	add    edx,0xd6
1000047c:	ee                   	out    dx,al
1000047d:	eb 13                	jmp    10000492 <DMAChannel::start()+0xbe>
1000047f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10000483: R_386_32	dmaConfused
10000487:	83 c4 10             	add    esp,0x10
1000048a:	5b                   	pop    ebx
1000048b:	5e                   	pop    esi
1000048c:	5f                   	pop    edi
1000048d:	e9 fc ff ff ff       	jmp    1000048e <DMAChannel::start()+0xba>	1000048e: R_386_PC32	Krnl::panic(char const*)
10000492:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10000496:	83 ec 0c             	sub    esp,0xc
10000499:	56                   	push   esi
1000049a:	e8 fc ff ff ff       	call   1000049b <DMAChannel::start()+0xc7>	1000049b: R_386_PC32	DMAChannel::unmask()
1000049f:	83 c4 20             	add    esp,0x20
100004a2:	5b                   	pop    ebx
100004a3:	5e                   	pop    esi
100004a4:	5f                   	pop    edi
100004a5:	e9 fc ff ff ff       	jmp    100004a6 <DMAChannel::start()+0xd2>	100004a6: R_386_PC32	unlockScheduler()

100004aa <DMAChannel::stop()>:
100004aa:	c3                   	ret    
100004ab:	90                   	nop

100004ac <DMAChannel::mask(bool)>:
100004ac:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
100004b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100004b5:	0f 95 c0             	setne  al
100004b8:	c1 e0 02             	shl    eax,0x2
100004bb:	0b 02                	or     eax,DWORD PTR [edx]
100004bd:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
100004c1:	19 d2                	sbb    edx,edx
100004c3:	80 e2 36             	and    dl,0x36
100004c6:	81 c2 d4 00 00 00    	add    edx,0xd4
100004cc:	ee                   	out    dx,al
100004cd:	c3                   	ret    

100004ce <DMAChannel::unmask()>:
100004ce:	6a 00                	push   0x0
100004d0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100004d4:	e8 fc ff ff ff       	call   100004d5 <DMAChannel::unmask()+0x7>	100004d5: R_386_PC32	DMAChannel::mask(bool)
100004d9:	58                   	pop    eax
100004da:	5a                   	pop    edx
100004db:	c3                   	ret    

100004dc <DMA::DMA()>:
100004dc:	55                   	push   ebp
100004dd:	89 e5                	mov    ebp,esp
100004df:	83 ec 08             	sub    esp,0x8
100004e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e5:	83 ec 08             	sub    esp,0x8
100004e8:	68 00 00 00 00       	push   0x0	100004e9: R_386_32	dmaCtrlName
100004ed:	50                   	push   eax
100004ee:	e8 fc ff ff ff       	call   100004ef <DMA::DMA()+0x13>	100004ef: R_386_PC32	Device::Device(char const*)
100004f3:	83 c4 10             	add    esp,0x10
100004f6:	ba 08 00 00 00       	mov    edx,0x8	100004f7: R_386_32	vtable for DMA
100004fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fe:	89 10                	mov    DWORD PTR [eax],edx
10000500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000503:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
1000050a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000513:	0f b6 d0             	movzx  edx,al
10000516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000519:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10000520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000523:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000529:	0f b6 d0             	movzx  edx,al
1000052c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052f:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10000534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000537:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000053d:	8d 50 01             	lea    edx,[eax+0x1]
10000540:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000543:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000549:	0f b6 d0             	movzx  edx,al
1000054c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000553:	83 e1 3f             	and    ecx,0x3f
10000556:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000055a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000563:	0f b6 d0             	movzx  edx,al
10000566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000569:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10000570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000573:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000579:	0f b6 d0             	movzx  edx,al
1000057c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057f:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10000584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000587:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000058d:	8d 50 01             	lea    edx,[eax+0x1]
10000590:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000593:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000599:	0f b6 d0             	movzx  edx,al
1000059c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005a3:	83 e1 3f             	and    ecx,0x3f
100005a6:	83 c9 40             	or     ecx,0x40
100005a9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005b6:	0f b6 d0             	movzx  edx,al
100005b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bc:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
100005c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005cc:	0f b6 d0             	movzx  edx,al
100005cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d2:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100005d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005e0:	8d 50 01             	lea    edx,[eax+0x1]
100005e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005e6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005ec:	0f b6 d0             	movzx  edx,al
100005ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005f6:	83 e1 3f             	and    ecx,0x3f
100005f9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000600:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000606:	0f b6 d0             	movzx  edx,al
10000609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060c:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10000613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000616:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000061c:	0f b6 d0             	movzx  edx,al
1000061f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000622:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000630:	8d 50 01             	lea    edx,[eax+0x1]
10000633:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000636:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000063c:	0f b6 d0             	movzx  edx,al
1000063f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000642:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000646:	83 e1 3f             	and    ecx,0x3f
10000649:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000064d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000656:	0f b6 d0             	movzx  edx,al
10000659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065c:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10000663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000666:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000066c:	0f b6 d0             	movzx  edx,al
1000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000672:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000680:	8d 50 01             	lea    edx,[eax+0x1]
10000683:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000686:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000068c:	0f b6 d0             	movzx  edx,al
1000068f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000692:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000696:	83 e1 3f             	and    ecx,0x3f
10000699:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000069d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006a6:	0f b6 d0             	movzx  edx,al
100006a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ac:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
100006b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006bc:	0f b6 d0             	movzx  edx,al
100006bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006c2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100006c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006d0:	8d 50 01             	lea    edx,[eax+0x1]
100006d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006d6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006dc:	0f b6 d0             	movzx  edx,al
100006df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006e2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006e6:	83 e1 3f             	and    ecx,0x3f
100006e9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006ed:	90                   	nop
100006ee:	c9                   	leave  
100006ef:	c3                   	ret    

100006f0 <DMA::getAvailable()>:
100006f0:	53                   	push   ebx
100006f1:	31 db                	xor    ebx,ebx
100006f3:	83 ec 08             	sub    esp,0x8
100006f6:	e8 fc ff ff ff       	call   100006f7 <DMA::getAvailable()+0x7>	100006f7: R_386_PC32	lockScheduler()
100006fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006ff:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000706:	0f a3 d8             	bt     eax,ebx
10000709:	73 07                	jae    10000712 <DMA::getAvailable()+0x22>
1000070b:	e8 fc ff ff ff       	call   1000070c <DMA::getAvailable()+0x1c>	1000070c: R_386_PC32	unlockScheduler()
10000710:	eb 0e                	jmp    10000720 <DMA::getAvailable()+0x30>
10000712:	43                   	inc    ebx
10000713:	83 fb 08             	cmp    ebx,0x8
10000716:	75 ee                	jne    10000706 <DMA::getAvailable()+0x16>
10000718:	e8 fc ff ff ff       	call   10000719 <DMA::getAvailable()+0x29>	10000719: R_386_PC32	unlockScheduler()
1000071d:	83 cb ff             	or     ebx,0xffffffff
10000720:	89 d8                	mov    eax,ebx
10000722:	83 c4 08             	add    esp,0x8
10000725:	5b                   	pop    ebx
10000726:	c3                   	ret    
10000727:	90                   	nop

10000728 <DMA::open(int, int, void*)>:
10000728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000072c:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10000733:	31 c0                	xor    eax,eax
10000735:	e6 0d                	out    0xd,al
10000737:	e6 da                	out    0xda,al
10000739:	31 c0                	xor    eax,eax
1000073b:	c3                   	ret    

1000073c <DMA::close(int, int, void*)>:
1000073c:	31 c0                	xor    eax,eax
1000073e:	c3                   	ret    
1000073f:	90                   	nop

10000740 <DMA::tryLockChannelWithBase(int)>:
10000740:	56                   	push   esi
10000741:	53                   	push   ebx
10000742:	83 ec 14             	sub    esp,0x14
10000745:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000749:	e8 fc ff ff ff       	call   1000074a <DMA::tryLockChannelWithBase(int)+0xa>	1000074a: R_386_PC32	lockScheduler()
1000074e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000752:	8d 43 03             	lea    eax,[ebx+0x3]
10000755:	39 d8                	cmp    eax,ebx
10000757:	7c 47                	jl     100007a0 <DMA::tryLockChannelWithBase(int)+0x60>
10000759:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10000760:	89 ca                	mov    edx,ecx
10000762:	0f a3 d9             	bt     ecx,ebx
10000765:	73 36                	jae    1000079d <DMA::tryLockChannelWithBase(int)+0x5d>
10000767:	83 ec 0c             	sub    esp,0xc
1000076a:	88 d9                	mov    cl,bl
1000076c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000771:	d3 c0                	rol    eax,cl
10000773:	21 d0                	and    eax,edx
10000775:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000077b:	6a 18                	push   0x18
1000077d:	e8 fc ff ff ff       	call   1000077e <DMA::tryLockChannelWithBase(int)+0x3e>	1000077e: R_386_PC32	operator new(unsigned long)
10000782:	5a                   	pop    edx
10000783:	59                   	pop    ecx
10000784:	53                   	push   ebx
10000785:	50                   	push   eax
10000786:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000078a:	e8 fc ff ff ff       	call   1000078b <DMA::tryLockChannelWithBase(int)+0x4b>	1000078b: R_386_PC32	DMAChannel::DMAChannel(int)
1000078f:	e8 fc ff ff ff       	call   10000790 <DMA::tryLockChannelWithBase(int)+0x50>	10000790: R_386_PC32	unlockScheduler()
10000794:	83 c4 10             	add    esp,0x10
10000797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000079b:	eb 0a                	jmp    100007a7 <DMA::tryLockChannelWithBase(int)+0x67>
1000079d:	43                   	inc    ebx
1000079e:	eb b5                	jmp    10000755 <DMA::tryLockChannelWithBase(int)+0x15>
100007a0:	e8 fc ff ff ff       	call   100007a1 <DMA::tryLockChannelWithBase(int)+0x61>	100007a1: R_386_PC32	unlockScheduler()
100007a5:	31 c0                	xor    eax,eax
100007a7:	83 c4 14             	add    esp,0x14
100007aa:	5b                   	pop    ebx
100007ab:	5e                   	pop    esi
100007ac:	c3                   	ret    
100007ad:	90                   	nop

100007ae <DMA::lockChannelWithBase(int)>:
100007ae:	83 ec 0c             	sub    esp,0xc
100007b1:	50                   	push   eax
100007b2:	50                   	push   eax
100007b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007bb:	e8 fc ff ff ff       	call   100007bc <DMA::lockChannelWithBase(int)+0xe>	100007bc: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007c0:	83 c4 10             	add    esp,0x10
100007c3:	85 c0                	test   eax,eax
100007c5:	74 ea                	je     100007b1 <DMA::lockChannelWithBase(int)+0x3>
100007c7:	83 c4 0c             	add    esp,0xc
100007ca:	c3                   	ret    
100007cb:	90                   	nop

100007cc <DMA::tryLockChannel8()>:
100007cc:	83 ec 14             	sub    esp,0x14
100007cf:	6a 00                	push   0x0
100007d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007d5:	e8 fc ff ff ff       	call   100007d6 <DMA::tryLockChannel8()+0xa>	100007d6: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007da:	83 c4 1c             	add    esp,0x1c
100007dd:	c3                   	ret    

100007de <DMA::tryLockChannel16()>:
100007de:	83 ec 14             	sub    esp,0x14
100007e1:	6a 04                	push   0x4
100007e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007e7:	e8 fc ff ff ff       	call   100007e8 <DMA::tryLockChannel16()+0xa>	100007e8: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007ec:	83 c4 1c             	add    esp,0x1c
100007ef:	c3                   	ret    

100007f0 <DMA::tryLockChannel(int)>:
100007f0:	56                   	push   esi
100007f1:	53                   	push   ebx
100007f2:	83 ec 14             	sub    esp,0x14
100007f5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100007f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100007fd:	83 fb 07             	cmp    ebx,0x7
10000800:	76 12                	jbe    10000814 <DMA::tryLockChannel(int)+0x24>
10000802:	83 ec 0c             	sub    esp,0xc
10000805:	68 e0 26 00 10       	push   0x100026e0	10000806: R_386_32	.text
1000080a:	e8 fc ff ff ff       	call   1000080b <DMA::tryLockChannel(int)+0x1b>	1000080b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000080f:	83 c4 10             	add    esp,0x10
10000812:	eb 4e                	jmp    10000862 <DMA::tryLockChannel(int)+0x72>
10000814:	e8 fc ff ff ff       	call   10000815 <DMA::tryLockChannel(int)+0x25>	10000815: R_386_PC32	lockScheduler()
10000819:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10000820:	89 c2                	mov    edx,eax
10000822:	0f a3 d8             	bt     eax,ebx
10000825:	73 36                	jae    1000085d <DMA::tryLockChannel(int)+0x6d>
10000827:	83 ec 0c             	sub    esp,0xc
1000082a:	88 d9                	mov    cl,bl
1000082c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000831:	d3 c0                	rol    eax,cl
10000833:	21 d0                	and    eax,edx
10000835:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000083b:	6a 18                	push   0x18
1000083d:	e8 fc ff ff ff       	call   1000083e <DMA::tryLockChannel(int)+0x4e>	1000083e: R_386_PC32	operator new(unsigned long)
10000842:	5a                   	pop    edx
10000843:	59                   	pop    ecx
10000844:	53                   	push   ebx
10000845:	50                   	push   eax
10000846:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000084a:	e8 fc ff ff ff       	call   1000084b <DMA::tryLockChannel(int)+0x5b>	1000084b: R_386_PC32	DMAChannel::DMAChannel(int)
1000084f:	e8 fc ff ff ff       	call   10000850 <DMA::tryLockChannel(int)+0x60>	10000850: R_386_PC32	unlockScheduler()
10000854:	83 c4 10             	add    esp,0x10
10000857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000085b:	eb 07                	jmp    10000864 <DMA::tryLockChannel(int)+0x74>
1000085d:	e8 fc ff ff ff       	call   1000085e <DMA::tryLockChannel(int)+0x6e>	1000085e: R_386_PC32	unlockScheduler()
10000862:	31 c0                	xor    eax,eax
10000864:	83 c4 14             	add    esp,0x14
10000867:	5b                   	pop    ebx
10000868:	5e                   	pop    esi
10000869:	c3                   	ret    

1000086a <DMA::lockChannel8()>:
1000086a:	83 ec 14             	sub    esp,0x14
1000086d:	6a 00                	push   0x0
1000086f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000873:	e8 fc ff ff ff       	call   10000874 <DMA::lockChannel8()+0xa>	10000874: R_386_PC32	DMA::lockChannelWithBase(int)
10000878:	83 c4 1c             	add    esp,0x1c
1000087b:	c3                   	ret    

1000087c <DMA::lockChannel16()>:
1000087c:	83 ec 14             	sub    esp,0x14
1000087f:	6a 04                	push   0x4
10000881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000885:	e8 fc ff ff ff       	call   10000886 <DMA::lockChannel16()+0xa>	10000886: R_386_PC32	DMA::lockChannelWithBase(int)
1000088a:	83 c4 1c             	add    esp,0x1c
1000088d:	c3                   	ret    

1000088e <DMA::lockChannel(int)>:
1000088e:	83 ec 0c             	sub    esp,0xc
10000891:	50                   	push   eax
10000892:	50                   	push   eax
10000893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000089b:	e8 fc ff ff ff       	call   1000089c <DMA::lockChannel(int)+0xe>	1000089c: R_386_PC32	DMA::tryLockChannel(int)
100008a0:	83 c4 10             	add    esp,0x10
100008a3:	85 c0                	test   eax,eax
100008a5:	74 ea                	je     10000891 <DMA::lockChannel(int)+0x3>
100008a7:	83 c4 0c             	add    esp,0xc
100008aa:	c3                   	ret    
100008ab:	90                   	nop

100008ac <DMA::unlockChannel(DMAChannel*)>:
100008ac:	56                   	push   esi
100008ad:	53                   	push   ebx
100008ae:	53                   	push   ebx
100008af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100008b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100008b7:	85 db                	test   ebx,ebx
100008b9:	75 10                	jne    100008cb <DMA::unlockChannel(DMAChannel*)+0x1f>
100008bb:	83 ec 0c             	sub    esp,0xc
100008be:	68 00 00 00 00       	push   0x0	100008bf: R_386_32	badDma
100008c3:	e8 fc ff ff ff       	call   100008c4 <DMA::unlockChannel(DMAChannel*)+0x18>	100008c4: R_386_PC32	Krnl::panic(char const*)
100008c8:	83 c4 10             	add    esp,0x10
100008cb:	e8 fc ff ff ff       	call   100008cc <DMA::unlockChannel(DMAChannel*)+0x20>	100008cc: R_386_PC32	lockScheduler()
100008d0:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100008d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100008d9:	89 d0                	mov    eax,edx
100008db:	0f a3 ca             	bt     edx,ecx
100008de:	72 24                	jb     10000904 <DMA::unlockChannel(DMAChannel*)+0x58>
100008e0:	83 ec 0c             	sub    esp,0xc
100008e3:	ba 01 00 00 00       	mov    edx,0x1
100008e8:	d3 e2                	shl    edx,cl
100008ea:	09 d0                	or     eax,edx
100008ec:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100008f2:	53                   	push   ebx
100008f3:	e8 fc ff ff ff       	call   100008f4 <DMA::unlockChannel(DMAChannel*)+0x48>	100008f4: R_386_PC32	DMAChannel::~DMAChannel()
100008f8:	5a                   	pop    edx
100008f9:	59                   	pop    ecx
100008fa:	6a 18                	push   0x18
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <DMA::unlockChannel(DMAChannel*)+0x52>	100008fe: R_386_PC32	operator delete(void*, unsigned long)
10000902:	eb 0d                	jmp    10000911 <DMA::unlockChannel(DMAChannel*)+0x65>
10000904:	83 ec 0c             	sub    esp,0xc
10000907:	68 00 00 00 00       	push   0x0	10000908: R_386_32	badBook
1000090c:	e8 fc ff ff ff       	call   1000090d <DMA::unlockChannel(DMAChannel*)+0x61>	1000090d: R_386_PC32	Krnl::panic(char const*)
10000911:	83 c4 10             	add    esp,0x10
10000914:	58                   	pop    eax
10000915:	5b                   	pop    ebx
10000916:	5e                   	pop    esi
10000917:	e9 fc ff ff ff       	jmp    10000918 <DMA::unlockChannel(DMAChannel*)+0x6c>	10000918: R_386_PC32	unlockScheduler()

1000091c <PS2::PS2()>:
1000091c:	55                   	push   ebp
1000091d:	89 e5                	mov    ebp,esp
1000091f:	83 ec 08             	sub    esp,0x8
10000922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000925:	83 ec 08             	sub    esp,0x8
10000928:	68 00 00 00 00       	push   0x0	10000929: R_386_32	ps2ctrlname
1000092d:	50                   	push   eax
1000092e:	e8 fc ff ff ff       	call   1000092f <PS2::PS2()+0x13>	1000092f: R_386_PC32	Bus::Bus(char const*)
10000933:	83 c4 10             	add    esp,0x10
10000936:	ba 08 00 00 00       	mov    edx,0x8	10000937: R_386_32	vtable for PS2
1000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093e:	89 10                	mov    DWORD PTR [eax],edx
10000940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000943:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000949:	0f b6 d0             	movzx  edx,al
1000094c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000094f:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000959:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000095f:	0f b6 d0             	movzx  edx,al
10000962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000965:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000096a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000973:	8d 50 01             	lea    edx,[eax+0x1]
10000976:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000979:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000097f:	0f b6 d0             	movzx  edx,al
10000982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000985:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000989:	83 e1 3f             	and    ecx,0x3f
1000098c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000993:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000999:	0f b6 d0             	movzx  edx,al
1000099c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099f:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100009a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009af:	0f b6 d0             	movzx  edx,al
100009b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009c3:	8d 50 01             	lea    edx,[eax+0x1]
100009c6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009c9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009cf:	0f b6 d0             	movzx  edx,al
100009d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009d9:	83 e1 3f             	and    ecx,0x3f
100009dc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009e0:	90                   	nop
100009e1:	c9                   	leave  
100009e2:	c3                   	ret    
100009e3:	90                   	nop

100009e4 <PS2::open(int, int, void*)>:
100009e4:	55                   	push   ebp
100009e5:	89 e5                	mov    ebp,esp
100009e7:	53                   	push   ebx
100009e8:	83 ec 24             	sub    esp,0x24
100009eb:	e8 fc ff ff ff       	call   100009ec <PS2::open(int, int, void*)+0x8>	100009ec: R_386_PC32	lockScheduler()
100009f0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100009f7:	83 ec 08             	sub    esp,0x8
100009fa:	68 ad 00 00 00       	push   0xad
100009ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a02:	e8 fc ff ff ff       	call   10000a03 <PS2::open(int, int, void*)+0x1f>	10000a03: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a07:	83 c4 10             	add    esp,0x10
10000a0a:	83 ec 08             	sub    esp,0x8
10000a0d:	68 a7 00 00 00       	push   0xa7
10000a12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a15:	e8 fc ff ff ff       	call   10000a16 <PS2::open(int, int, void*)+0x32>	10000a16: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a1a:	83 c4 10             	add    esp,0x10
10000a1d:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000a23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000a26:	89 c2                	mov    edx,eax
10000a28:	ec                   	in     al,dx
10000a29:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000a2c:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000a32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000a35:	89 c2                	mov    edx,eax
10000a37:	ec                   	in     al,dx
10000a38:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000a3b:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000a41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a44:	89 c2                	mov    edx,eax
10000a46:	ec                   	in     al,dx
10000a47:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000a4a:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000a53:	89 c2                	mov    edx,eax
10000a55:	ec                   	in     al,dx
10000a56:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000a59:	83 ec 08             	sub    esp,0x8
10000a5c:	68 aa 00 00 00       	push   0xaa
10000a61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a64:	e8 fc ff ff ff       	call   10000a65 <PS2::open(int, int, void*)+0x81>	10000a65: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a69:	83 c4 10             	add    esp,0x10
10000a6c:	83 ec 0c             	sub    esp,0xc
10000a6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a72:	e8 fc ff ff ff       	call   10000a73 <PS2::open(int, int, void*)+0x8f>	10000a73: R_386_PC32	PS2::controllerRead()
10000a77:	83 c4 10             	add    esp,0x10
10000a7a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a7d:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a81:	74 65                	je     10000ae8 <PS2::open(int, int, void*)+0x104>
10000a83:	83 ec 0c             	sub    esp,0xc
10000a86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a89:	e8 fc ff ff ff       	call   10000a8a <PS2::open(int, int, void*)+0xa6>	10000a8a: R_386_PC32	PS2::controllerRead()
10000a8e:	83 c4 10             	add    esp,0x10
10000a91:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a94:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a98:	74 4e                	je     10000ae8 <PS2::open(int, int, void*)+0x104>
10000a9a:	83 ec 08             	sub    esp,0x8
10000a9d:	68 aa 00 00 00       	push   0xaa
10000aa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aa5:	e8 fc ff ff ff       	call   10000aa6 <PS2::open(int, int, void*)+0xc2>	10000aa6: R_386_PC32	PS2::controllerWrite(unsigned char)
10000aaa:	83 c4 10             	add    esp,0x10
10000aad:	83 ec 08             	sub    esp,0x8
10000ab0:	68 aa 00 00 00       	push   0xaa
10000ab5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ab8:	e8 fc ff ff ff       	call   10000ab9 <PS2::open(int, int, void*)+0xd5>	10000ab9: R_386_PC32	PS2::controllerWrite(unsigned char)
10000abd:	83 c4 10             	add    esp,0x10
10000ac0:	83 ec 0c             	sub    esp,0xc
10000ac3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac6:	e8 fc ff ff ff       	call   10000ac7 <PS2::open(int, int, void*)+0xe3>	10000ac7: R_386_PC32	PS2::controllerRead()
10000acb:	83 c4 10             	add    esp,0x10
10000ace:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ad1:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000ad5:	74 11                	je     10000ae8 <PS2::open(int, int, void*)+0x104>
10000ad7:	83 ec 0c             	sub    esp,0xc
10000ada:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000add:	e8 fc ff ff ff       	call   10000ade <PS2::open(int, int, void*)+0xfa>	10000ade: R_386_PC32	PS2::controllerRead()
10000ae2:	83 c4 10             	add    esp,0x10
10000ae5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ae8:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10000aef:	83 ec 08             	sub    esp,0x8
10000af2:	6a 20                	push   0x20
10000af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000af7:	e8 fc ff ff ff       	call   10000af8 <PS2::open(int, int, void*)+0x114>	10000af8: R_386_PC32	PS2::controllerWrite(unsigned char)
10000afc:	83 c4 10             	add    esp,0x10
10000aff:	83 ec 0c             	sub    esp,0xc
10000b02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b05:	e8 fc ff ff ff       	call   10000b06 <PS2::open(int, int, void*)+0x122>	10000b06: R_386_PC32	PS2::controllerRead()
10000b0a:	83 c4 10             	add    esp,0x10
10000b0d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10000b10:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10000b14:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10000b18:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10000b1c:	83 ec 04             	sub    esp,0x4
10000b1f:	50                   	push   eax
10000b20:	6a 60                	push   0x60
10000b22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b25:	e8 fc ff ff ff       	call   10000b26 <PS2::open(int, int, void*)+0x142>	10000b26: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10000b2a:	83 c4 10             	add    esp,0x10
10000b2d:	83 ec 08             	sub    esp,0x8
10000b30:	68 ae 00 00 00       	push   0xae
10000b35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b38:	e8 fc ff ff ff       	call   10000b39 <PS2::open(int, int, void*)+0x155>	10000b39: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b3d:	83 c4 10             	add    esp,0x10
10000b40:	83 ec 08             	sub    esp,0x8
10000b43:	68 a8 00 00 00       	push   0xa8
10000b48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b4b:	e8 fc ff ff ff       	call   10000b4c <PS2::open(int, int, void*)+0x168>	10000b4c: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b50:	83 c4 10             	add    esp,0x10
10000b53:	e8 fc ff ff ff       	call   10000b54 <PS2::open(int, int, void*)+0x170>	10000b54: R_386_PC32	unlockScheduler()
10000b58:	83 ec 0c             	sub    esp,0xc
10000b5b:	68 60 01 00 00       	push   0x160
10000b60:	e8 fc ff ff ff       	call   10000b61 <PS2::open(int, int, void*)+0x17d>	10000b61: R_386_PC32	operator new(unsigned long)
10000b65:	83 c4 10             	add    esp,0x10
10000b68:	89 c3                	mov    ebx,eax
10000b6a:	83 ec 0c             	sub    esp,0xc
10000b6d:	53                   	push   ebx
10000b6e:	e8 fc ff ff ff       	call   10000b6f <PS2::open(int, int, void*)+0x18b>	10000b6f: R_386_PC32	PS2Port::PS2Port()
10000b73:	83 c4 10             	add    esp,0x10
10000b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b79:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10000b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b85:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10000b8b:	83 ec 08             	sub    esp,0x8
10000b8e:	52                   	push   edx
10000b8f:	50                   	push   eax
10000b90:	e8 fc ff ff ff       	call   10000b91 <PS2::open(int, int, void*)+0x1ad>	10000b91: R_386_PC32	Device::addChild(Device*)
10000b95:	83 c4 10             	add    esp,0x10
10000b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9b:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10000ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000baa:	8b 00                	mov    eax,DWORD PTR [eax]
10000bac:	83 c0 08             	add    eax,0x8
10000baf:	8b 00                	mov    eax,DWORD PTR [eax]
10000bb1:	6a 00                	push   0x0
10000bb3:	6a 00                	push   0x0
10000bb5:	6a 00                	push   0x0
10000bb7:	52                   	push   edx
10000bb8:	ff d0                	call   eax
10000bba:	83 c4 10             	add    esp,0x10
10000bbd:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000bc1:	75 65                	jne    10000c28 <PS2::open(int, int, void*)+0x244>
10000bc3:	83 ec 0c             	sub    esp,0xc
10000bc6:	68 60 01 00 00       	push   0x160
10000bcb:	e8 fc ff ff ff       	call   10000bcc <PS2::open(int, int, void*)+0x1e8>	10000bcc: R_386_PC32	operator new(unsigned long)
10000bd0:	83 c4 10             	add    esp,0x10
10000bd3:	89 c3                	mov    ebx,eax
10000bd5:	83 ec 0c             	sub    esp,0xc
10000bd8:	53                   	push   ebx
10000bd9:	e8 fc ff ff ff       	call   10000bda <PS2::open(int, int, void*)+0x1f6>	10000bda: R_386_PC32	PS2Port::PS2Port()
10000bde:	83 c4 10             	add    esp,0x10
10000be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be4:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bf0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10000bf6:	83 ec 08             	sub    esp,0x8
10000bf9:	52                   	push   edx
10000bfa:	50                   	push   eax
10000bfb:	e8 fc ff ff ff       	call   10000bfc <PS2::open(int, int, void*)+0x218>	10000bfc: R_386_PC32	Device::addChild(Device*)
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c06:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10000c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10000c15:	8b 00                	mov    eax,DWORD PTR [eax]
10000c17:	83 c0 08             	add    eax,0x8
10000c1a:	8b 00                	mov    eax,DWORD PTR [eax]
10000c1c:	6a 00                	push   0x0
10000c1e:	6a 00                	push   0x0
10000c20:	6a 01                	push   0x1
10000c22:	52                   	push   edx
10000c23:	ff d0                	call   eax
10000c25:	83 c4 10             	add    esp,0x10
10000c28:	b8 00 00 00 00       	mov    eax,0x0
10000c2d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000c30:	c9                   	leave  
10000c31:	c3                   	ret    

10000c32 <PS2::close(int, int, void*)>:
10000c32:	b8 00 00 00 00       	mov    eax,0x0
10000c37:	c3                   	ret    

10000c38 <PS2::detect()>:
10000c38:	90                   	nop
10000c39:	c3                   	ret    

10000c3a <PS2::controllerWrite(unsigned char)>:
10000c3a:	55                   	push   ebp
10000c3b:	89 e5                	mov    ebp,esp
10000c3d:	83 ec 14             	sub    esp,0x14
10000c40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000c43:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000c46:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000c4d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000c53:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000c56:	89 c2                	mov    edx,eax
10000c58:	ec                   	in     al,dx
10000c59:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c5c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c5f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000c62:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c66:	83 e0 40             	and    eax,0x40
10000c69:	85 c0                	test   eax,eax
10000c6b:	75 2d                	jne    10000c9a <PS2::controllerWrite(unsigned char)+0x60>
10000c6d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000c70:	84 c0                	test   al,al
10000c72:	78 26                	js     10000c9a <PS2::controllerWrite(unsigned char)+0x60>
10000c74:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c78:	83 e0 02             	and    eax,0x2
10000c7b:	85 c0                	test   eax,eax
10000c7d:	74 17                	je     10000c96 <PS2::controllerWrite(unsigned char)+0x5c>
10000c7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000c82:	8d 50 01             	lea    edx,[eax+0x1]
10000c85:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000c88:	3d 20 03 00 00       	cmp    eax,0x320
10000c8d:	0f 94 c0             	sete   al
10000c90:	84 c0                	test   al,al
10000c92:	75 05                	jne    10000c99 <PS2::controllerWrite(unsigned char)+0x5f>
10000c94:	eb b7                	jmp    10000c4d <PS2::controllerWrite(unsigned char)+0x13>
10000c96:	90                   	nop
10000c97:	eb 01                	jmp    10000c9a <PS2::controllerWrite(unsigned char)+0x60>
10000c99:	90                   	nop
10000c9a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10000c9e:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10000ca4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ca7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000caa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000cad:	ee                   	out    dx,al
10000cae:	b0 01                	mov    al,0x1
10000cb0:	c9                   	leave  
10000cb1:	c3                   	ret    

10000cb2 <PS2::controllerWrite(unsigned char, unsigned char)>:
10000cb2:	55                   	push   ebp
10000cb3:	89 e5                	mov    ebp,esp
10000cb5:	83 ec 28             	sub    esp,0x28
10000cb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000cbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000cbe:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10000cc1:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10000cc4:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10000cc8:	50                   	push   eax
10000cc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ccc:	e8 fc ff ff ff       	call   10000ccd <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10000ccd: R_386_PC32	PS2::controllerWrite(unsigned char)
10000cd1:	83 c4 08             	add    esp,0x8
10000cd4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000cdb:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000ce1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000ce4:	89 c2                	mov    edx,eax
10000ce6:	ec                   	in     al,dx
10000ce7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cea:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000ced:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000cf0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000cf4:	83 e0 40             	and    eax,0x40
10000cf7:	85 c0                	test   eax,eax
10000cf9:	75 07                	jne    10000d02 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10000cfb:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000cfe:	84 c0                	test   al,al
10000d00:	79 18                	jns    10000d1a <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10000d02:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d06:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000d0c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000d0f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000d12:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000d15:	ee                   	out    dx,al
10000d16:	b0 00                	mov    al,0x0
10000d18:	eb 4f                	jmp    10000d69 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d1a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d1e:	83 e0 02             	and    eax,0x2
10000d21:	85 c0                	test   eax,eax
10000d23:	74 2d                	je     10000d52 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10000d25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000d28:	8d 50 01             	lea    edx,[eax+0x1]
10000d2b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000d2e:	3d 20 03 00 00       	cmp    eax,0x320
10000d33:	0f 94 c0             	sete   al
10000d36:	84 c0                	test   al,al
10000d38:	74 a1                	je     10000cdb <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10000d3a:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d3e:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000d44:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000d47:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000d4a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d4d:	ee                   	out    dx,al
10000d4e:	b0 00                	mov    al,0x0
10000d50:	eb 17                	jmp    10000d69 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d52:	90                   	nop
10000d53:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d57:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000d5d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000d60:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000d63:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000d66:	ee                   	out    dx,al
10000d67:	b0 01                	mov    al,0x1
10000d69:	c9                   	leave  
10000d6a:	c3                   	ret    
10000d6b:	90                   	nop

10000d6c <PS2::controllerRead()>:
10000d6c:	55                   	push   ebp
10000d6d:	89 e5                	mov    ebp,esp
10000d6f:	83 ec 20             	sub    esp,0x20
10000d72:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000d79:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000d7f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000d82:	89 c2                	mov    edx,eax
10000d84:	ec                   	in     al,dx
10000d85:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d88:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d8b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000d8e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d92:	83 e0 40             	and    eax,0x40
10000d95:	85 c0                	test   eax,eax
10000d97:	75 07                	jne    10000da0 <PS2::controllerRead()+0x34>
10000d99:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000d9c:	84 c0                	test   al,al
10000d9e:	79 04                	jns    10000da4 <PS2::controllerRead()+0x38>
10000da0:	b0 00                	mov    al,0x0
10000da2:	eb 48                	jmp    10000dec <PS2::controllerRead()+0x80>
10000da4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000da8:	83 e0 01             	and    eax,0x1
10000dab:	85 c0                	test   eax,eax
10000dad:	75 29                	jne    10000dd8 <PS2::controllerRead()+0x6c>
10000daf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000db2:	8d 50 01             	lea    edx,[eax+0x1]
10000db5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000db8:	3d 40 06 00 00       	cmp    eax,0x640
10000dbd:	0f 94 c0             	sete   al
10000dc0:	84 c0                	test   al,al
10000dc2:	74 b5                	je     10000d79 <PS2::controllerRead()+0xd>
10000dc4:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000dca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000dcd:	89 c2                	mov    edx,eax
10000dcf:	ec                   	in     al,dx
10000dd0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000dd3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000dd6:	eb 14                	jmp    10000dec <PS2::controllerRead()+0x80>
10000dd8:	90                   	nop
10000dd9:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000ddf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000de2:	89 c2                	mov    edx,eax
10000de4:	ec                   	in     al,dx
10000de5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000de8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000deb:	90                   	nop
10000dec:	c9                   	leave  
10000ded:	c3                   	ret    

10000dee <PS2Keyboard::PS2Keyboard()>:
10000dee:	55                   	push   ebp
10000def:	89 e5                	mov    ebp,esp
10000df1:	83 ec 08             	sub    esp,0x8
10000df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000df7:	83 ec 08             	sub    esp,0x8
10000dfa:	68 00 00 00 00       	push   0x0	10000dfb: R_386_32	ps2keyname
10000dff:	50                   	push   eax
10000e00:	e8 fc ff ff ff       	call   10000e01 <PS2Keyboard::PS2Keyboard()+0x13>	10000e01: R_386_PC32	Keyboard::Keyboard(char const*)
10000e05:	83 c4 10             	add    esp,0x10
10000e08:	ba 08 00 00 00       	mov    edx,0x8	10000e09: R_386_32	vtable for PS2Keyboard
10000e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e10:	89 10                	mov    DWORD PTR [eax],edx
10000e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e15:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10000e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e1f:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10000e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e29:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10000e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e33:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10000e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e3d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10000e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e51:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10000e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e5b:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10000e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e65:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10000e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e6f:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10000e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e79:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10000e80:	90                   	nop
10000e81:	c9                   	leave  
10000e82:	c3                   	ret    
10000e83:	90                   	nop

10000e84 <PS2Keyboard::~PS2Keyboard()>:
10000e84:	55                   	push   ebp
10000e85:	89 e5                	mov    ebp,esp
10000e87:	83 ec 08             	sub    esp,0x8
10000e8a:	ba 08 00 00 00       	mov    edx,0x8	10000e8b: R_386_32	vtable for PS2Keyboard
10000e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e92:	89 10                	mov    DWORD PTR [eax],edx
10000e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e97:	83 ec 0c             	sub    esp,0xc
10000e9a:	50                   	push   eax
10000e9b:	e8 fc ff ff ff       	call   10000e9c <PS2Keyboard::~PS2Keyboard()+0x18>	10000e9c: R_386_PC32	Keyboard::~Keyboard()
10000ea0:	83 c4 10             	add    esp,0x10
10000ea3:	90                   	nop
10000ea4:	c9                   	leave  
10000ea5:	c3                   	ret    

10000ea6 <PS2Keyboard::~PS2Keyboard()>:
10000ea6:	55                   	push   ebp
10000ea7:	89 e5                	mov    ebp,esp
10000ea9:	83 ec 08             	sub    esp,0x8
10000eac:	83 ec 0c             	sub    esp,0xc
10000eaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000eb2:	e8 fc ff ff ff       	call   10000eb3 <PS2Keyboard::~PS2Keyboard()+0xd>	10000eb3: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10000eb7:	83 c4 10             	add    esp,0x10
10000eba:	83 ec 08             	sub    esp,0x8
10000ebd:	68 70 01 00 00       	push   0x170
10000ec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ec5:	e8 fc ff ff ff       	call   10000ec6 <PS2Keyboard::~PS2Keyboard()+0x20>	10000ec6: R_386_PC32	operator delete(void*, unsigned long)
10000eca:	83 c4 10             	add    esp,0x10
10000ecd:	c9                   	leave  
10000ece:	c3                   	ret    
10000ecf:	90                   	nop

10000ed0 <PS2Keyboard::setRepeatRate(int)>:
10000ed0:	c3                   	ret    
10000ed1:	90                   	nop

10000ed2 <PS2Keyboard::setRepeatDelay(int)>:
10000ed2:	c3                   	ret    
10000ed3:	90                   	nop

10000ed4 <PS2Keyboard::sendKey(unsigned short, bool)>:
10000ed4:	83 ec 1c             	sub    esp,0x1c
10000ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000edb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000edf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000ee3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000ee7:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000eec:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000ef3:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000ef9:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000efe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f02:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000f06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f0a:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000f0f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000f14:	83 c4 1c             	add    esp,0x1c
10000f17:	e9 fc ff ff ff       	jmp    10000f18 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10000f18: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f1c <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10000f1c:	83 ec 1c             	sub    esp,0x1c
10000f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000f23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000f27:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000f2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000f2f:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000f34:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000f3b:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000f41:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000f46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f4a:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000f4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f52:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000f57:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000f5c:	83 c4 1c             	add    esp,0x1c
10000f5f:	e9 fc ff ff ff       	jmp    10000f60 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10000f60: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f64 <PS2Keyboard::updateKeyboardLEDs()>:
10000f64:	56                   	push   esi
10000f65:	53                   	push   ebx
10000f66:	83 ec 0c             	sub    esp,0xc
10000f69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10000f6d:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10000f73:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10000f7a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10000f7d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10000f84:	09 c3                	or     ebx,eax
10000f86:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10000f8c:	68 ed 00 00 00       	push   0xed
10000f91:	0f b6 db             	movzx  ebx,bl
10000f94:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f9a:	e8 fc ff ff ff       	call   10000f9b <PS2Keyboard::updateKeyboardLEDs()+0x37>	10000f9b: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000f9f:	58                   	pop    eax
10000fa0:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10000fa7: R_386_PC32	PS2Port::deviceRead()
10000fab:	5a                   	pop    edx
10000fac:	59                   	pop    ecx
10000fad:	53                   	push   ebx
10000fae:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000fb4:	e8 fc ff ff ff       	call   10000fb5 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10000fb5: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000fb9:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10000fbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000fc3:	83 c4 14             	add    esp,0x14
10000fc6:	5b                   	pop    ebx
10000fc7:	5e                   	pop    esi
10000fc8:	e9 fc ff ff ff       	jmp    10000fc9 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10000fc9: R_386_PC32	PS2Port::deviceRead()

10000fcd <ps2KeyboardHandler(regs*, void*)>:
10000fcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000fd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000fd5:	eb 01                	jmp    10000fd8 <PS2Keyboard::handler()>
10000fd7:	90                   	nop

10000fd8 <PS2Keyboard::handler()>:
10000fd8:	57                   	push   edi
10000fd9:	56                   	push   esi
10000fda:	53                   	push   ebx
10000fdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000fdf:	e4 60                	in     al,0x60
10000fe1:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10000fe8:	74 29                	je     10001013 <PS2Keyboard::handler()+0x3b>
10000fea:	88 c2                	mov    dl,al
10000fec:	3c e0                	cmp    al,0xe0
10000fee:	75 0c                	jne    10000ffc <PS2Keyboard::handler()+0x24>
10000ff0:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10000ff7:	e9 17 07 00 00       	jmp    10001713 <PS2Keyboard::handler()+0x73b>
10000ffc:	84 c0                	test   al,al
10000ffe:	0f 89 52 01 00 00    	jns    10001156 <PS2Keyboard::handler()+0x17e>
10001004:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
1000100b:	83 e2 7f             	and    edx,0x7f
1000100e:	e9 43 01 00 00       	jmp    10001156 <PS2Keyboard::handler()+0x17e>
10001013:	3c e0                	cmp    al,0xe0
10001015:	74 d9                	je     10000ff0 <PS2Keyboard::handler()+0x18>
10001017:	3c f0                	cmp    al,0xf0
10001019:	75 0c                	jne    10001027 <PS2Keyboard::handler()+0x4f>
1000101b:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001022:	e9 ec 06 00 00       	jmp    10001713 <PS2Keyboard::handler()+0x73b>
10001027:	3c 12                	cmp    al,0x12
10001029:	75 1f                	jne    1000104a <PS2Keyboard::handler()+0x72>
1000102b:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001031:	83 f0 01             	xor    eax,0x1
10001034:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
1000103a:	52                   	push   edx
1000103b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001042:	50                   	push   eax
10001043:	68 04 01 00 00       	push   0x104
10001048:	eb 23                	jmp    1000106d <PS2Keyboard::handler()+0x95>
1000104a:	76 3d                	jbe    10001089 <PS2Keyboard::handler()+0xb1>
1000104c:	3c 14                	cmp    al,0x14
1000104e:	75 62                	jne    100010b2 <PS2Keyboard::handler()+0xda>
10001050:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001056:	83 f0 01             	xor    eax,0x1
10001059:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
1000105f:	51                   	push   ecx
10001060:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001067:	50                   	push   eax
10001068:	68 00 01 00 00       	push   0x100
1000106d:	56                   	push   esi
1000106e:	e8 fc ff ff ff       	call   1000106f <PS2Keyboard::handler()+0x97>	1000106f: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10001073:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
1000107a:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001081:	83 c4 10             	add    esp,0x10
10001084:	e9 8a 06 00 00       	jmp    10001713 <PS2Keyboard::handler()+0x73b>
10001089:	3c 11                	cmp    al,0x11
1000108b:	75 2d                	jne    100010ba <PS2Keyboard::handler()+0xe2>
1000108d:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001093:	83 f0 01             	xor    eax,0x1
10001096:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
1000109c:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
100010a2:	50                   	push   eax
100010a3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100010aa:	50                   	push   eax
100010ab:	68 01 01 00 00       	push   0x101
100010b0:	eb bb                	jmp    1000106d <PS2Keyboard::handler()+0x95>
100010b2:	3c 59                	cmp    al,0x59
100010b4:	0f 84 71 ff ff ff    	je     1000102b <PS2Keyboard::handler()+0x53>
100010ba:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100010c1:	0f 84 b1 01 00 00    	je     10001278 <PS2Keyboard::handler()+0x2a0>
100010c7:	3c 6b                	cmp    al,0x6b
100010c9:	0f 84 f2 00 00 00    	je     100011c1 <PS2Keyboard::handler()+0x1e9>
100010cf:	77 50                	ja     10001121 <PS2Keyboard::handler()+0x149>
100010d1:	3c 51                	cmp    al,0x51
100010d3:	0f 84 37 01 00 00    	je     10001210 <PS2Keyboard::handler()+0x238>
100010d9:	77 23                	ja     100010fe <PS2Keyboard::handler()+0x126>
100010db:	3c 49                	cmp    al,0x49
100010dd:	0f 84 0d 01 00 00    	je     100011f0 <PS2Keyboard::handler()+0x218>
100010e3:	3c 4a                	cmp    al,0x4a
100010e5:	0f 85 29 04 00 00    	jne    10001514 <PS2Keyboard::handler()+0x53c>
100010eb:	50                   	push   eax
100010ec:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100010f3:	50                   	push   eax
100010f4:	68 1f 03 00 00       	push   0x31f
100010f9:	e9 c6 03 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100010fe:	3c 5a                	cmp    al,0x5a
10001100:	0f 84 5f 01 00 00    	je     10001265 <PS2Keyboard::handler()+0x28d>
10001106:	3c 69                	cmp    al,0x69
10001108:	0f 85 06 04 00 00    	jne    10001514 <PS2Keyboard::handler()+0x53c>
1000110e:	51                   	push   ecx
1000110f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001116:	50                   	push   eax
10001117:	68 01 02 00 00       	push   0x201
1000111c:	e9 a3 03 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001121:	3c 71                	cmp    al,0x71
10001123:	0f 84 16 01 00 00    	je     1000123f <PS2Keyboard::handler()+0x267>
10001129:	77 15                	ja     10001140 <PS2Keyboard::handler()+0x168>
1000112b:	3c 6c                	cmp    al,0x6c
1000112d:	0f 84 f0 00 00 00    	je     10001223 <PS2Keyboard::handler()+0x24b>
10001133:	3c 70                	cmp    al,0x70
10001135:	0f 84 17 01 00 00    	je     10001252 <PS2Keyboard::handler()+0x27a>
1000113b:	e9 d4 03 00 00       	jmp    10001514 <PS2Keyboard::handler()+0x53c>
10001140:	3c 74                	cmp    al,0x74
10001142:	0f 84 8c 00 00 00    	je     100011d4 <PS2Keyboard::handler()+0x1fc>
10001148:	3c 75                	cmp    al,0x75
1000114a:	74 4a                	je     10001196 <PS2Keyboard::handler()+0x1be>
1000114c:	3c 72                	cmp    al,0x72
1000114e:	0f 85 c0 03 00 00    	jne    10001514 <PS2Keyboard::handler()+0x53c>
10001154:	eb 58                	jmp    100011ae <PS2Keyboard::handler()+0x1d6>
10001156:	80 fa 2a             	cmp    dl,0x2a
10001159:	0f 84 cc fe ff ff    	je     1000102b <PS2Keyboard::handler()+0x53>
1000115f:	0f 87 97 05 00 00    	ja     100016fc <PS2Keyboard::handler()+0x724>
10001165:	80 fa 1d             	cmp    dl,0x1d
10001168:	0f 84 e2 fe ff ff    	je     10001050 <PS2Keyboard::handler()+0x78>
1000116e:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10001175:	0f 84 ce 03 00 00    	je     10001549 <PS2Keyboard::handler()+0x571>
1000117b:	80 fa 4b             	cmp    dl,0x4b
1000117e:	74 41                	je     100011c1 <PS2Keyboard::handler()+0x1e9>
10001180:	77 27                	ja     100011a9 <PS2Keyboard::handler()+0x1d1>
10001182:	80 fa 47             	cmp    dl,0x47
10001185:	0f 84 98 00 00 00    	je     10001223 <PS2Keyboard::handler()+0x24b>
1000118b:	0f 86 96 03 00 00    	jbe    10001527 <PS2Keyboard::handler()+0x54f>
10001191:	80 fa 48             	cmp    dl,0x48
10001194:	75 51                	jne    100011e7 <PS2Keyboard::handler()+0x20f>
10001196:	50                   	push   eax
10001197:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000119e:	50                   	push   eax
1000119f:	68 0b 02 00 00       	push   0x20b
100011a4:	e9 1b 03 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100011a9:	80 fa 50             	cmp    dl,0x50
100011ac:	75 55                	jne    10001203 <PS2Keyboard::handler()+0x22b>
100011ae:	50                   	push   eax
100011af:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011b6:	50                   	push   eax
100011b7:	68 0c 02 00 00       	push   0x20c
100011bc:	e9 03 03 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100011c1:	50                   	push   eax
100011c2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011c9:	50                   	push   eax
100011ca:	68 0d 02 00 00       	push   0x20d
100011cf:	e9 f0 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100011d4:	50                   	push   eax
100011d5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011dc:	50                   	push   eax
100011dd:	68 0e 02 00 00       	push   0x20e
100011e2:	e9 dd 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100011e7:	80 fa 49             	cmp    dl,0x49
100011ea:	0f 85 24 03 00 00    	jne    10001514 <PS2Keyboard::handler()+0x53c>
100011f0:	50                   	push   eax
100011f1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011f8:	50                   	push   eax
100011f9:	68 04 02 00 00       	push   0x204
100011fe:	e9 c1 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001203:	0f 86 2f 03 00 00    	jbe    10001538 <PS2Keyboard::handler()+0x560>
10001209:	80 fa 52             	cmp    dl,0x52
1000120c:	74 44                	je     10001252 <PS2Keyboard::handler()+0x27a>
1000120e:	73 26                	jae    10001236 <PS2Keyboard::handler()+0x25e>
10001210:	57                   	push   edi
10001211:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001218:	50                   	push   eax
10001219:	68 05 02 00 00       	push   0x205
1000121e:	e9 a1 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001223:	53                   	push   ebx
10001224:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000122b:	50                   	push   eax
1000122c:	68 00 02 00 00       	push   0x200
10001231:	e9 8e 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001236:	80 fa 53             	cmp    dl,0x53
10001239:	0f 85 d5 02 00 00    	jne    10001514 <PS2Keyboard::handler()+0x53c>
1000123f:	52                   	push   edx
10001240:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001247:	50                   	push   eax
10001248:	68 03 02 00 00       	push   0x203
1000124d:	e9 72 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001252:	50                   	push   eax
10001253:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000125a:	50                   	push   eax
1000125b:	68 02 02 00 00       	push   0x202
10001260:	e9 5f 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001265:	50                   	push   eax
10001266:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000126d:	50                   	push   eax
1000126e:	68 1d 03 00 00       	push   0x31d
10001273:	e9 4c 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001278:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
1000127f:	3c 66                	cmp    al,0x66
10001281:	75 09                	jne    1000128c <PS2Keyboard::handler()+0x2b4>
10001283:	50                   	push   eax
10001284:	52                   	push   edx
10001285:	6a 08                	push   0x8
10001287:	e9 38 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
1000128c:	3c 0d                	cmp    al,0xd
1000128e:	75 09                	jne    10001299 <PS2Keyboard::handler()+0x2c1>
10001290:	50                   	push   eax
10001291:	52                   	push   edx
10001292:	6a 09                	push   0x9
10001294:	e9 2b 02 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001299:	3c 58                	cmp    al,0x58
1000129b:	75 2a                	jne    100012c7 <PS2Keyboard::handler()+0x2ef>
1000129d:	84 d2                	test   dl,dl
1000129f:	75 13                	jne    100012b4 <PS2Keyboard::handler()+0x2dc>
100012a1:	83 ec 0c             	sub    esp,0xc
100012a4:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
100012ab:	56                   	push   esi
100012ac:	e8 fc ff ff ff       	call   100012ad <PS2Keyboard::handler()+0x2d5>	100012ad: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012b1:	83 c4 10             	add    esp,0x10
100012b4:	50                   	push   eax
100012b5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012bc:	50                   	push   eax
100012bd:	68 80 02 00 00       	push   0x280
100012c2:	e9 fd 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100012c7:	3c 77                	cmp    al,0x77
100012c9:	75 2a                	jne    100012f5 <PS2Keyboard::handler()+0x31d>
100012cb:	84 d2                	test   dl,dl
100012cd:	75 13                	jne    100012e2 <PS2Keyboard::handler()+0x30a>
100012cf:	83 ec 0c             	sub    esp,0xc
100012d2:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100012d9:	56                   	push   esi
100012da:	e8 fc ff ff ff       	call   100012db <PS2Keyboard::handler()+0x303>	100012db: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012df:	83 c4 10             	add    esp,0x10
100012e2:	50                   	push   eax
100012e3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012ea:	50                   	push   eax
100012eb:	68 81 02 00 00       	push   0x281
100012f0:	e9 cf 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100012f5:	3c 7e                	cmp    al,0x7e
100012f7:	75 2a                	jne    10001323 <PS2Keyboard::handler()+0x34b>
100012f9:	84 d2                	test   dl,dl
100012fb:	75 13                	jne    10001310 <PS2Keyboard::handler()+0x338>
100012fd:	83 ec 0c             	sub    esp,0xc
10001300:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10001307:	56                   	push   esi
10001308:	e8 fc ff ff ff       	call   10001309 <PS2Keyboard::handler()+0x331>	10001309: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000130d:	83 c4 10             	add    esp,0x10
10001310:	57                   	push   edi
10001311:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001318:	50                   	push   eax
10001319:	68 82 02 00 00       	push   0x282
1000131e:	e9 a1 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001323:	3c 05                	cmp    al,0x5
10001325:	75 0c                	jne    10001333 <PS2Keyboard::handler()+0x35b>
10001327:	53                   	push   ebx
10001328:	52                   	push   edx
10001329:	68 00 03 00 00       	push   0x300
1000132e:	e9 91 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001333:	3c 06                	cmp    al,0x6
10001335:	75 0c                	jne    10001343 <PS2Keyboard::handler()+0x36b>
10001337:	51                   	push   ecx
10001338:	52                   	push   edx
10001339:	68 01 03 00 00       	push   0x301
1000133e:	e9 81 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001343:	3c 04                	cmp    al,0x4
10001345:	75 0c                	jne    10001353 <PS2Keyboard::handler()+0x37b>
10001347:	50                   	push   eax
10001348:	52                   	push   edx
10001349:	68 02 03 00 00       	push   0x302
1000134e:	e9 71 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001353:	3c 0c                	cmp    al,0xc
10001355:	75 0c                	jne    10001363 <PS2Keyboard::handler()+0x38b>
10001357:	50                   	push   eax
10001358:	52                   	push   edx
10001359:	68 03 03 00 00       	push   0x303
1000135e:	e9 61 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001363:	3c 03                	cmp    al,0x3
10001365:	75 0c                	jne    10001373 <PS2Keyboard::handler()+0x39b>
10001367:	50                   	push   eax
10001368:	52                   	push   edx
10001369:	68 04 03 00 00       	push   0x304
1000136e:	e9 51 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001373:	3c 0b                	cmp    al,0xb
10001375:	75 0c                	jne    10001383 <PS2Keyboard::handler()+0x3ab>
10001377:	50                   	push   eax
10001378:	52                   	push   edx
10001379:	68 05 03 00 00       	push   0x305
1000137e:	e9 41 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001383:	3c 02                	cmp    al,0x2
10001385:	74 04                	je     1000138b <PS2Keyboard::handler()+0x3b3>
10001387:	3c 83                	cmp    al,0x83
10001389:	75 0c                	jne    10001397 <PS2Keyboard::handler()+0x3bf>
1000138b:	50                   	push   eax
1000138c:	52                   	push   edx
1000138d:	68 06 03 00 00       	push   0x306
10001392:	e9 2d 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001397:	3c 0a                	cmp    al,0xa
10001399:	75 0c                	jne    100013a7 <PS2Keyboard::handler()+0x3cf>
1000139b:	50                   	push   eax
1000139c:	52                   	push   edx
1000139d:	68 07 03 00 00       	push   0x307
100013a2:	e9 1d 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013a7:	3c 01                	cmp    al,0x1
100013a9:	75 0c                	jne    100013b7 <PS2Keyboard::handler()+0x3df>
100013ab:	57                   	push   edi
100013ac:	52                   	push   edx
100013ad:	68 08 03 00 00       	push   0x308
100013b2:	e9 0d 01 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013b7:	3c 09                	cmp    al,0x9
100013b9:	75 0c                	jne    100013c7 <PS2Keyboard::handler()+0x3ef>
100013bb:	53                   	push   ebx
100013bc:	52                   	push   edx
100013bd:	68 09 03 00 00       	push   0x309
100013c2:	e9 fd 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013c7:	3c 78                	cmp    al,0x78
100013c9:	75 0c                	jne    100013d7 <PS2Keyboard::handler()+0x3ff>
100013cb:	51                   	push   ecx
100013cc:	52                   	push   edx
100013cd:	68 0a 03 00 00       	push   0x30a
100013d2:	e9 ed 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013d7:	3c 07                	cmp    al,0x7
100013d9:	75 0c                	jne    100013e7 <PS2Keyboard::handler()+0x40f>
100013db:	50                   	push   eax
100013dc:	52                   	push   edx
100013dd:	68 0b 03 00 00       	push   0x30b
100013e2:	e9 dd 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013e7:	3c 5a                	cmp    al,0x5a
100013e9:	75 09                	jne    100013f4 <PS2Keyboard::handler()+0x41c>
100013eb:	50                   	push   eax
100013ec:	52                   	push   edx
100013ed:	6a 0a                	push   0xa
100013ef:	e9 d0 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100013f4:	3c 76                	cmp    al,0x76
100013f6:	75 0c                	jne    10001404 <PS2Keyboard::handler()+0x42c>
100013f8:	50                   	push   eax
100013f9:	52                   	push   edx
100013fa:	68 0a 02 00 00       	push   0x20a
100013ff:	e9 c0 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001404:	3c 70                	cmp    al,0x70
10001406:	75 0c                	jne    10001414 <PS2Keyboard::handler()+0x43c>
10001408:	50                   	push   eax
10001409:	52                   	push   edx
1000140a:	68 10 03 00 00       	push   0x310
1000140f:	e9 b0 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001414:	3c 69                	cmp    al,0x69
10001416:	75 0c                	jne    10001424 <PS2Keyboard::handler()+0x44c>
10001418:	50                   	push   eax
10001419:	52                   	push   edx
1000141a:	68 11 03 00 00       	push   0x311
1000141f:	e9 a0 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001424:	3c 72                	cmp    al,0x72
10001426:	75 0c                	jne    10001434 <PS2Keyboard::handler()+0x45c>
10001428:	50                   	push   eax
10001429:	52                   	push   edx
1000142a:	68 12 03 00 00       	push   0x312
1000142f:	e9 90 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001434:	3c 7a                	cmp    al,0x7a
10001436:	75 0c                	jne    10001444 <PS2Keyboard::handler()+0x46c>
10001438:	57                   	push   edi
10001439:	52                   	push   edx
1000143a:	68 13 03 00 00       	push   0x313
1000143f:	e9 80 00 00 00       	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001444:	3c 6b                	cmp    al,0x6b
10001446:	75 09                	jne    10001451 <PS2Keyboard::handler()+0x479>
10001448:	53                   	push   ebx
10001449:	52                   	push   edx
1000144a:	68 14 03 00 00       	push   0x314
1000144f:	eb 73                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001451:	3c 73                	cmp    al,0x73
10001453:	75 09                	jne    1000145e <PS2Keyboard::handler()+0x486>
10001455:	51                   	push   ecx
10001456:	52                   	push   edx
10001457:	68 15 03 00 00       	push   0x315
1000145c:	eb 66                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
1000145e:	3c 74                	cmp    al,0x74
10001460:	75 09                	jne    1000146b <PS2Keyboard::handler()+0x493>
10001462:	50                   	push   eax
10001463:	52                   	push   edx
10001464:	68 16 03 00 00       	push   0x316
10001469:	eb 59                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
1000146b:	3c 6c                	cmp    al,0x6c
1000146d:	75 09                	jne    10001478 <PS2Keyboard::handler()+0x4a0>
1000146f:	50                   	push   eax
10001470:	52                   	push   edx
10001471:	68 17 03 00 00       	push   0x317
10001476:	eb 4c                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001478:	3c 75                	cmp    al,0x75
1000147a:	75 09                	jne    10001485 <PS2Keyboard::handler()+0x4ad>
1000147c:	50                   	push   eax
1000147d:	52                   	push   edx
1000147e:	68 18 03 00 00       	push   0x318
10001483:	eb 3f                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001485:	3c 7d                	cmp    al,0x7d
10001487:	75 09                	jne    10001492 <PS2Keyboard::handler()+0x4ba>
10001489:	50                   	push   eax
1000148a:	52                   	push   edx
1000148b:	68 19 03 00 00       	push   0x319
10001490:	eb 32                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
10001492:	3c 71                	cmp    al,0x71
10001494:	75 09                	jne    1000149f <PS2Keyboard::handler()+0x4c7>
10001496:	50                   	push   eax
10001497:	52                   	push   edx
10001498:	68 1a 03 00 00       	push   0x31a
1000149d:	eb 25                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
1000149f:	3c 7b                	cmp    al,0x7b
100014a1:	75 09                	jne    100014ac <PS2Keyboard::handler()+0x4d4>
100014a3:	50                   	push   eax
100014a4:	52                   	push   edx
100014a5:	68 1c 03 00 00       	push   0x31c
100014aa:	eb 18                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100014ac:	3c 79                	cmp    al,0x79
100014ae:	75 09                	jne    100014b9 <PS2Keyboard::handler()+0x4e1>
100014b0:	57                   	push   edi
100014b1:	52                   	push   edx
100014b2:	68 1b 03 00 00       	push   0x31b
100014b7:	eb 0b                	jmp    100014c4 <PS2Keyboard::handler()+0x4ec>
100014b9:	3c 7c                	cmp    al,0x7c
100014bb:	75 0f                	jne    100014cc <PS2Keyboard::handler()+0x4f4>
100014bd:	53                   	push   ebx
100014be:	52                   	push   edx
100014bf:	68 1e 03 00 00       	push   0x31e
100014c4:	56                   	push   esi
100014c5:	e8 fc ff ff ff       	call   100014c6 <PS2Keyboard::handler()+0x4ee>	100014c6: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100014ca:	eb 45                	jmp    10001511 <PS2Keyboard::handler()+0x539>
100014cc:	0f b6 c0             	movzx  eax,al
100014cf:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100014d5:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100014dc:	74 16                	je     100014f4 <PS2Keyboard::handler()+0x51c>
100014de:	84 c9                	test   cl,cl
100014e0:	74 09                	je     100014eb <PS2Keyboard::handler()+0x513>
100014e2:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014e5: R_386_32	PS2Keyboard::internalMapCapUpper
100014e9:	eb 1d                	jmp    10001508 <PS2Keyboard::handler()+0x530>
100014eb:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014ee: R_386_32	PS2Keyboard::internalMapperUpper
100014f2:	eb 14                	jmp    10001508 <PS2Keyboard::handler()+0x530>
100014f4:	84 c9                	test   cl,cl
100014f6:	74 09                	je     10001501 <PS2Keyboard::handler()+0x529>
100014f8:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014fb: R_386_32	PS2Keyboard::internalMapCapLower
100014ff:	eb 07                	jmp    10001508 <PS2Keyboard::handler()+0x530>
10001501:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001504: R_386_32	PS2Keyboard::internalMapperLower
10001508:	51                   	push   ecx
10001509:	52                   	push   edx
1000150a:	50                   	push   eax
1000150b:	56                   	push   esi
1000150c:	e8 fc ff ff ff       	call   1000150d <PS2Keyboard::handler()+0x535>	1000150d: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10001511:	83 c4 10             	add    esp,0x10
10001514:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
1000151b:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001522:	e9 ec 01 00 00       	jmp    10001713 <PS2Keyboard::handler()+0x73b>
10001527:	80 fa 1c             	cmp    dl,0x1c
1000152a:	0f 84 35 fd ff ff    	je     10001265 <PS2Keyboard::handler()+0x28d>
10001530:	80 fa 35             	cmp    dl,0x35
10001533:	e9 ad fb ff ff       	jmp    100010e5 <PS2Keyboard::handler()+0x10d>
10001538:	80 fa 4d             	cmp    dl,0x4d
1000153b:	0f 84 93 fc ff ff    	je     100011d4 <PS2Keyboard::handler()+0x1fc>
10001541:	80 fa 4f             	cmp    dl,0x4f
10001544:	e9 bf fb ff ff       	jmp    10001108 <PS2Keyboard::handler()+0x130>
10001549:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10001550:	80 fa 0e             	cmp    dl,0xe
10001553:	75 07                	jne    1000155c <PS2Keyboard::handler()+0x584>
10001555:	50                   	push   eax
10001556:	51                   	push   ecx
10001557:	e9 29 fd ff ff       	jmp    10001285 <PS2Keyboard::handler()+0x2ad>
1000155c:	80 fa 0f             	cmp    dl,0xf
1000155f:	75 07                	jne    10001568 <PS2Keyboard::handler()+0x590>
10001561:	57                   	push   edi
10001562:	51                   	push   ecx
10001563:	e9 2a fd ff ff       	jmp    10001292 <PS2Keyboard::handler()+0x2ba>
10001568:	80 fa 3a             	cmp    dl,0x3a
1000156b:	75 07                	jne    10001574 <PS2Keyboard::handler()+0x59c>
1000156d:	84 c9                	test   cl,cl
1000156f:	e9 2b fd ff ff       	jmp    1000129f <PS2Keyboard::handler()+0x2c7>
10001574:	80 fa 45             	cmp    dl,0x45
10001577:	75 07                	jne    10001580 <PS2Keyboard::handler()+0x5a8>
10001579:	84 c9                	test   cl,cl
1000157b:	e9 4d fd ff ff       	jmp    100012cd <PS2Keyboard::handler()+0x2f5>
10001580:	80 fa 46             	cmp    dl,0x46
10001583:	75 07                	jne    1000158c <PS2Keyboard::handler()+0x5b4>
10001585:	84 c9                	test   cl,cl
10001587:	e9 6f fd ff ff       	jmp    100012fb <PS2Keyboard::handler()+0x323>
1000158c:	80 fa 3b             	cmp    dl,0x3b
1000158f:	75 07                	jne    10001598 <PS2Keyboard::handler()+0x5c0>
10001591:	53                   	push   ebx
10001592:	51                   	push   ecx
10001593:	e9 91 fd ff ff       	jmp    10001329 <PS2Keyboard::handler()+0x351>
10001598:	80 fa 3c             	cmp    dl,0x3c
1000159b:	75 07                	jne    100015a4 <PS2Keyboard::handler()+0x5cc>
1000159d:	52                   	push   edx
1000159e:	51                   	push   ecx
1000159f:	e9 95 fd ff ff       	jmp    10001339 <PS2Keyboard::handler()+0x361>
100015a4:	80 fa 3d             	cmp    dl,0x3d
100015a7:	75 07                	jne    100015b0 <PS2Keyboard::handler()+0x5d8>
100015a9:	50                   	push   eax
100015aa:	51                   	push   ecx
100015ab:	e9 99 fd ff ff       	jmp    10001349 <PS2Keyboard::handler()+0x371>
100015b0:	80 fa 3e             	cmp    dl,0x3e
100015b3:	75 07                	jne    100015bc <PS2Keyboard::handler()+0x5e4>
100015b5:	50                   	push   eax
100015b6:	51                   	push   ecx
100015b7:	e9 9d fd ff ff       	jmp    10001359 <PS2Keyboard::handler()+0x381>
100015bc:	80 fa 3f             	cmp    dl,0x3f
100015bf:	75 07                	jne    100015c8 <PS2Keyboard::handler()+0x5f0>
100015c1:	50                   	push   eax
100015c2:	51                   	push   ecx
100015c3:	e9 a1 fd ff ff       	jmp    10001369 <PS2Keyboard::handler()+0x391>
100015c8:	80 fa 40             	cmp    dl,0x40
100015cb:	75 07                	jne    100015d4 <PS2Keyboard::handler()+0x5fc>
100015cd:	50                   	push   eax
100015ce:	51                   	push   ecx
100015cf:	e9 a5 fd ff ff       	jmp    10001379 <PS2Keyboard::handler()+0x3a1>
100015d4:	80 fa 41             	cmp    dl,0x41
100015d7:	75 07                	jne    100015e0 <PS2Keyboard::handler()+0x608>
100015d9:	50                   	push   eax
100015da:	51                   	push   ecx
100015db:	e9 ad fd ff ff       	jmp    1000138d <PS2Keyboard::handler()+0x3b5>
100015e0:	80 fa 42             	cmp    dl,0x42
100015e3:	75 07                	jne    100015ec <PS2Keyboard::handler()+0x614>
100015e5:	50                   	push   eax
100015e6:	51                   	push   ecx
100015e7:	e9 b1 fd ff ff       	jmp    1000139d <PS2Keyboard::handler()+0x3c5>
100015ec:	80 fa 43             	cmp    dl,0x43
100015ef:	75 07                	jne    100015f8 <PS2Keyboard::handler()+0x620>
100015f1:	57                   	push   edi
100015f2:	51                   	push   ecx
100015f3:	e9 b5 fd ff ff       	jmp    100013ad <PS2Keyboard::handler()+0x3d5>
100015f8:	80 fa 44             	cmp    dl,0x44
100015fb:	75 07                	jne    10001604 <PS2Keyboard::handler()+0x62c>
100015fd:	53                   	push   ebx
100015fe:	51                   	push   ecx
100015ff:	e9 b9 fd ff ff       	jmp    100013bd <PS2Keyboard::handler()+0x3e5>
10001604:	84 d2                	test   dl,dl
10001606:	75 07                	jne    1000160f <PS2Keyboard::handler()+0x637>
10001608:	52                   	push   edx
10001609:	51                   	push   ecx
1000160a:	e9 be fd ff ff       	jmp    100013cd <PS2Keyboard::handler()+0x3f5>
1000160f:	80 fa 1c             	cmp    dl,0x1c
10001612:	75 07                	jne    1000161b <PS2Keyboard::handler()+0x643>
10001614:	50                   	push   eax
10001615:	51                   	push   ecx
10001616:	e9 d2 fd ff ff       	jmp    100013ed <PS2Keyboard::handler()+0x415>
1000161b:	80 fa 01             	cmp    dl,0x1
1000161e:	75 07                	jne    10001627 <PS2Keyboard::handler()+0x64f>
10001620:	50                   	push   eax
10001621:	51                   	push   ecx
10001622:	e9 d3 fd ff ff       	jmp    100013fa <PS2Keyboard::handler()+0x422>
10001627:	80 fa 52             	cmp    dl,0x52
1000162a:	75 07                	jne    10001633 <PS2Keyboard::handler()+0x65b>
1000162c:	50                   	push   eax
1000162d:	51                   	push   ecx
1000162e:	e9 d7 fd ff ff       	jmp    1000140a <PS2Keyboard::handler()+0x432>
10001633:	80 fa 4f             	cmp    dl,0x4f
10001636:	75 07                	jne    1000163f <PS2Keyboard::handler()+0x667>
10001638:	50                   	push   eax
10001639:	51                   	push   ecx
1000163a:	e9 db fd ff ff       	jmp    1000141a <PS2Keyboard::handler()+0x442>
1000163f:	80 fa 50             	cmp    dl,0x50
10001642:	75 07                	jne    1000164b <PS2Keyboard::handler()+0x673>
10001644:	50                   	push   eax
10001645:	51                   	push   ecx
10001646:	e9 df fd ff ff       	jmp    1000142a <PS2Keyboard::handler()+0x452>
1000164b:	80 fa 51             	cmp    dl,0x51
1000164e:	75 07                	jne    10001657 <PS2Keyboard::handler()+0x67f>
10001650:	50                   	push   eax
10001651:	51                   	push   ecx
10001652:	e9 e3 fd ff ff       	jmp    1000143a <PS2Keyboard::handler()+0x462>
10001657:	80 fa 4b             	cmp    dl,0x4b
1000165a:	75 07                	jne    10001663 <PS2Keyboard::handler()+0x68b>
1000165c:	57                   	push   edi
1000165d:	51                   	push   ecx
1000165e:	e9 e7 fd ff ff       	jmp    1000144a <PS2Keyboard::handler()+0x472>
10001663:	80 fa 4c             	cmp    dl,0x4c
10001666:	75 07                	jne    1000166f <PS2Keyboard::handler()+0x697>
10001668:	53                   	push   ebx
10001669:	51                   	push   ecx
1000166a:	e9 e8 fd ff ff       	jmp    10001457 <PS2Keyboard::handler()+0x47f>
1000166f:	80 fa 4d             	cmp    dl,0x4d
10001672:	75 07                	jne    1000167b <PS2Keyboard::handler()+0x6a3>
10001674:	52                   	push   edx
10001675:	51                   	push   ecx
10001676:	e9 e9 fd ff ff       	jmp    10001464 <PS2Keyboard::handler()+0x48c>
1000167b:	80 fa 47             	cmp    dl,0x47
1000167e:	75 07                	jne    10001687 <PS2Keyboard::handler()+0x6af>
10001680:	50                   	push   eax
10001681:	51                   	push   ecx
10001682:	e9 ea fd ff ff       	jmp    10001471 <PS2Keyboard::handler()+0x499>
10001687:	80 fa 48             	cmp    dl,0x48
1000168a:	75 07                	jne    10001693 <PS2Keyboard::handler()+0x6bb>
1000168c:	50                   	push   eax
1000168d:	51                   	push   ecx
1000168e:	e9 eb fd ff ff       	jmp    1000147e <PS2Keyboard::handler()+0x4a6>
10001693:	80 fa 49             	cmp    dl,0x49
10001696:	75 07                	jne    1000169f <PS2Keyboard::handler()+0x6c7>
10001698:	50                   	push   eax
10001699:	51                   	push   ecx
1000169a:	e9 ec fd ff ff       	jmp    1000148b <PS2Keyboard::handler()+0x4b3>
1000169f:	80 fa 53             	cmp    dl,0x53
100016a2:	75 07                	jne    100016ab <PS2Keyboard::handler()+0x6d3>
100016a4:	50                   	push   eax
100016a5:	51                   	push   ecx
100016a6:	e9 ed fd ff ff       	jmp    10001498 <PS2Keyboard::handler()+0x4c0>
100016ab:	80 fa 4a             	cmp    dl,0x4a
100016ae:	75 07                	jne    100016b7 <PS2Keyboard::handler()+0x6df>
100016b0:	50                   	push   eax
100016b1:	51                   	push   ecx
100016b2:	e9 ee fd ff ff       	jmp    100014a5 <PS2Keyboard::handler()+0x4cd>
100016b7:	80 fa 4e             	cmp    dl,0x4e
100016ba:	75 07                	jne    100016c3 <PS2Keyboard::handler()+0x6eb>
100016bc:	50                   	push   eax
100016bd:	51                   	push   ecx
100016be:	e9 ef fd ff ff       	jmp    100014b2 <PS2Keyboard::handler()+0x4da>
100016c3:	80 fa 37             	cmp    dl,0x37
100016c6:	75 07                	jne    100016cf <PS2Keyboard::handler()+0x6f7>
100016c8:	57                   	push   edi
100016c9:	51                   	push   ecx
100016ca:	e9 f0 fd ff ff       	jmp    100014bf <PS2Keyboard::handler()+0x4e7>
100016cf:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100016d6:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100016dd:	c1 e7 07             	shl    edi,0x7
100016e0:	c1 e0 08             	shl    eax,0x8
100016e3:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100016e6: R_386_32	PS2Keyboard::internalMapperLowerBad
100016ea:	88 d0                	mov    al,dl
100016ec:	89 fb                	mov    ebx,edi
100016ee:	d7                   	xlat   BYTE PTR ds:[ebx]
100016ef:	88 c2                	mov    dl,al
100016f1:	0f b6 d2             	movzx  edx,dl
100016f4:	53                   	push   ebx
100016f5:	51                   	push   ecx
100016f6:	52                   	push   edx
100016f7:	e9 0f fe ff ff       	jmp    1000150b <PS2Keyboard::handler()+0x533>
100016fc:	80 fa 36             	cmp    dl,0x36
100016ff:	0f 84 26 f9 ff ff    	je     1000102b <PS2Keyboard::handler()+0x53>
10001705:	80 fa 38             	cmp    dl,0x38
10001708:	0f 84 7f f9 ff ff    	je     1000108d <PS2Keyboard::handler()+0xb5>
1000170e:	e9 5b fa ff ff       	jmp    1000116e <PS2Keyboard::handler()+0x196>
10001713:	5b                   	pop    ebx
10001714:	5e                   	pop    esi
10001715:	5f                   	pop    edi
10001716:	c3                   	ret    
10001717:	90                   	nop

10001718 <PS2Keyboard::open(int, int, void*)>:
10001718:	53                   	push   ebx
10001719:	83 ec 14             	sub    esp,0x14
1000171c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001720:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10001726:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
1000172c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001730:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10001736:	53                   	push   ebx
10001737:	6a 01                	push   0x1
10001739:	68 00 00 00 00       	push   0x0	1000173a: R_386_32	ps2KeyboardHandler(regs*, void*)
1000173e:	6a 01                	push   0x1
10001740:	53                   	push   ebx
10001741:	e8 fc ff ff ff       	call   10001742 <PS2Keyboard::open(int, int, void*)+0x2a>	10001742: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001746:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
1000174c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000174d: R_386_32	sysBootSettings
10001751:	c1 e8 02             	shr    eax,0x2
10001754:	83 f0 01             	xor    eax,0x1
10001757:	83 e0 01             	and    eax,0x1
1000175a:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10001760:	31 c0                	xor    eax,eax
10001762:	83 c4 28             	add    esp,0x28
10001765:	5b                   	pop    ebx
10001766:	c3                   	ret    
10001767:	90                   	nop

10001768 <PS2Keyboard::close(int, int, void*)>:
10001768:	83 c8 ff             	or     eax,0xffffffff
1000176b:	c3                   	ret    

1000176c <PS2Mouse::PS2Mouse()>:
1000176c:	55                   	push   ebp
1000176d:	89 e5                	mov    ebp,esp
1000176f:	83 ec 08             	sub    esp,0x8
10001772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001775:	83 ec 08             	sub    esp,0x8
10001778:	68 00 00 00 00       	push   0x0	10001779: R_386_32	ps2mousename
1000177d:	50                   	push   eax
1000177e:	e8 fc ff ff ff       	call   1000177f <PS2Mouse::PS2Mouse()+0x13>	1000177f: R_386_PC32	Mouse::Mouse(char const*)
10001783:	83 c4 10             	add    esp,0x10
10001786:	ba 08 00 00 00       	mov    edx,0x8	10001787: R_386_32	vtable for PS2Mouse
1000178b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000178e:	89 10                	mov    DWORD PTR [eax],edx
10001790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001793:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000179a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000179d:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100017a7:	90                   	nop
100017a8:	c9                   	leave  
100017a9:	c3                   	ret    

100017aa <ps2MouseHandler(regs*, void*)>:
100017aa:	55                   	push   ebp
100017ab:	89 e5                	mov    ebp,esp
100017ad:	83 ec 08             	sub    esp,0x8
100017b0:	83 ec 0c             	sub    esp,0xc
100017b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017b6:	e8 fc ff ff ff       	call   100017b7 <ps2MouseHandler(regs*, void*)+0xd>	100017b7: R_386_PC32	PS2Mouse::handler()
100017bb:	83 c4 10             	add    esp,0x10
100017be:	90                   	nop
100017bf:	c9                   	leave  
100017c0:	c3                   	ret    
100017c1:	90                   	nop

100017c2 <PS2Mouse::handler()>:
100017c2:	55                   	push   ebp
100017c3:	89 e5                	mov    ebp,esp
100017c5:	83 ec 28             	sub    esp,0x28
100017c8:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100017ce:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100017d2:	89 c2                	mov    edx,eax
100017d4:	ec                   	in     al,dx
100017d5:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100017d8:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100017db:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017de:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017e2:	83 e0 01             	and    eax,0x1
100017e5:	85 c0                	test   eax,eax
100017e7:	0f 84 8d 01 00 00    	je     1000197a <PS2Mouse::handler()+0x1b8>
100017ed:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017f1:	83 e0 20             	and    eax,0x20
100017f4:	85 c0                	test   eax,eax
100017f6:	0f 84 81 01 00 00    	je     1000197d <PS2Mouse::handler()+0x1bb>
100017fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ff:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001805:	8d 50 01             	lea    edx,[eax+0x1]
10001808:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000180b:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10001811:	0f b6 c8             	movzx  ecx,al
10001814:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
1000181a:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000181e:	89 c2                	mov    edx,eax
10001820:	ec                   	in     al,dx
10001821:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10001824:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000182a:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10001831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001834:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000183a:	0f b6 c0             	movzx  eax,al
1000183d:	83 e0 08             	and    eax,0x8
10001840:	85 c0                	test   eax,eax
10001842:	75 0f                	jne    10001853 <PS2Mouse::handler()+0x91>
10001844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001847:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000184e:	e9 2b 01 00 00       	jmp    1000197e <PS2Mouse::handler()+0x1bc>
10001853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001856:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000185c:	84 c0                	test   al,al
1000185e:	75 0d                	jne    1000186d <PS2Mouse::handler()+0xab>
10001860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001863:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001869:	3c 02                	cmp    al,0x2
1000186b:	77 2f                	ja     1000189c <PS2Mouse::handler()+0xda>
1000186d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001870:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001876:	3c 03                	cmp    al,0x3
10001878:	74 11                	je     1000188b <PS2Mouse::handler()+0xc9>
1000187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000187d:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001883:	3c 04                	cmp    al,0x4
10001885:	0f 85 f3 00 00 00    	jne    1000197e <PS2Mouse::handler()+0x1bc>
1000188b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000188e:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001894:	3c 03                	cmp    al,0x3
10001896:	0f 86 e2 00 00 00    	jbe    1000197e <PS2Mouse::handler()+0x1bc>
1000189c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000189f:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100018a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a9:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018af:	84 c0                	test   al,al
100018b1:	78 13                	js     100018c6 <PS2Mouse::handler()+0x104>
100018b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018bc:	0f b6 c0             	movzx  eax,al
100018bf:	83 e0 40             	and    eax,0x40
100018c2:	85 c0                	test   eax,eax
100018c4:	74 37                	je     100018fd <PS2Mouse::handler()+0x13b>
100018c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100018d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d3:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100018da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018dd:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100018e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e7:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100018ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f1:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
100018f8:	e9 81 00 00 00       	jmp    1000197e <PS2Mouse::handler()+0x1bc>
100018fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001900:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001906:	0f b6 d0             	movzx  edx,al
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001912:	0f b6 c0             	movzx  eax,al
10001915:	c1 e0 04             	shl    eax,0x4
10001918:	25 00 01 00 00       	and    eax,0x100
1000191d:	29 c2                	sub    edx,eax
1000191f:	89 d0                	mov    eax,edx
10001921:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001927:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000192d:	0f b6 c0             	movzx  eax,al
10001930:	c1 e0 03             	shl    eax,0x3
10001933:	25 00 01 00 00       	and    eax,0x100
10001938:	89 c2                	mov    edx,eax
1000193a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000193d:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10001943:	0f b6 c0             	movzx  eax,al
10001946:	29 c2                	sub    edx,eax
10001948:	89 d0                	mov    eax,edx
1000194a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000194d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000194e: R_386_32	guiMouseHandler
10001952:	85 c0                	test   eax,eax
10001954:	74 28                	je     1000197e <PS2Mouse::handler()+0x1bc>
10001956:	a1 00 00 00 00       	mov    eax,ds:0x0	10001957: R_386_32	guiMouseHandler
1000195b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000195e:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10001964:	0f b6 d2             	movzx  edx,dl
10001967:	83 e2 01             	and    edx,0x1
1000196a:	6a 00                	push   0x0
1000196c:	52                   	push   edx
1000196d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10001970:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001973:	ff d0                	call   eax
10001975:	83 c4 10             	add    esp,0x10
10001978:	eb 04                	jmp    1000197e <PS2Mouse::handler()+0x1bc>
1000197a:	90                   	nop
1000197b:	eb 01                	jmp    1000197e <PS2Mouse::handler()+0x1bc>
1000197d:	90                   	nop
1000197e:	c9                   	leave  
1000197f:	c3                   	ret    

10001980 <PS2Mouse::open(int, int, void*)>:
10001980:	55                   	push   ebp
10001981:	89 e5                	mov    ebp,esp
10001983:	83 ec 08             	sub    esp,0x8
10001986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001989:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
1000198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001992:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000199b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000199e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100019a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019ad:	83 ec 08             	sub    esp,0x8
100019b0:	68 f6 00 00 00       	push   0xf6
100019b5:	50                   	push   eax
100019b6:	e8 fc ff ff ff       	call   100019b7 <PS2Mouse::open(int, int, void*)+0x37>	100019b7: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019bb:	83 c4 10             	add    esp,0x10
100019be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019c7:	83 ec 0c             	sub    esp,0xc
100019ca:	50                   	push   eax
100019cb:	e8 fc ff ff ff       	call   100019cc <PS2Mouse::open(int, int, void*)+0x4c>	100019cc: R_386_PC32	PS2Port::deviceRead()
100019d0:	83 c4 10             	add    esp,0x10
100019d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019dc:	83 ec 08             	sub    esp,0x8
100019df:	68 f4 00 00 00       	push   0xf4
100019e4:	50                   	push   eax
100019e5:	e8 fc ff ff ff       	call   100019e6 <PS2Mouse::open(int, int, void*)+0x66>	100019e6: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019ea:	83 c4 10             	add    esp,0x10
100019ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019f6:	83 ec 0c             	sub    esp,0xc
100019f9:	50                   	push   eax
100019fa:	e8 fc ff ff ff       	call   100019fb <PS2Mouse::open(int, int, void*)+0x7b>	100019fb: R_386_PC32	PS2Port::deviceRead()
100019ff:	83 c4 10             	add    esp,0x10
10001a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a05:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a0f:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a19:	83 ec 0c             	sub    esp,0xc
10001a1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a1f:	6a 01                	push   0x1
10001a21:	68 00 00 00 00       	push   0x0	10001a22: R_386_32	ps2MouseHandler(regs*, void*)
10001a26:	6a 0c                	push   0xc
10001a28:	50                   	push   eax
10001a29:	e8 fc ff ff ff       	call   10001a2a <PS2Mouse::open(int, int, void*)+0xaa>	10001a2a: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001a2e:	83 c4 20             	add    esp,0x20
10001a31:	b8 00 00 00 00       	mov    eax,0x0
10001a36:	c9                   	leave  
10001a37:	c3                   	ret    

10001a38 <PS2Mouse::close(int, int, void*)>:
10001a38:	b8 00 00 00 00       	mov    eax,0x0
10001a3d:	c3                   	ret    

10001a3e <PS2Mouse::detect()>:
10001a3e:	90                   	nop
10001a3f:	c3                   	ret    

10001a40 <PS2Port::PS2Port()>:
10001a40:	55                   	push   ebp
10001a41:	89 e5                	mov    ebp,esp
10001a43:	83 ec 08             	sub    esp,0x8
10001a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a49:	83 ec 08             	sub    esp,0x8
10001a4c:	68 00 00 00 00       	push   0x0	10001a4d: R_386_32	ps2portname
10001a51:	50                   	push   eax
10001a52:	e8 fc ff ff ff       	call   10001a53 <PS2Port::PS2Port()+0x13>	10001a53: R_386_PC32	Bus::Bus(char const*)
10001a57:	83 c4 10             	add    esp,0x10
10001a5a:	ba 08 00 00 00       	mov    edx,0x8	10001a5b: R_386_32	vtable for PS2Port
10001a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a62:	89 10                	mov    DWORD PTR [eax],edx
10001a64:	90                   	nop
10001a65:	c9                   	leave  
10001a66:	c3                   	ret    
10001a67:	90                   	nop

10001a68 <PS2Port::open(int, int, void*)>:
10001a68:	55                   	push   ebp
10001a69:	89 e5                	mov    ebp,esp
10001a6b:	83 ec 08             	sub    esp,0x8
10001a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a71:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001a74:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a7d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001a80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a89:	8b 00                	mov    eax,DWORD PTR [eax]
10001a8b:	83 c0 18             	add    eax,0x18
10001a8e:	8b 00                	mov    eax,DWORD PTR [eax]
10001a90:	83 ec 0c             	sub    esp,0xc
10001a93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a96:	ff d0                	call   eax
10001a98:	83 c4 10             	add    esp,0x10
10001a9b:	b8 00 00 00 00       	mov    eax,0x0
10001aa0:	c9                   	leave  
10001aa1:	c3                   	ret    

10001aa2 <PS2Port::close(int, int, void*)>:
10001aa2:	b8 00 00 00 00       	mov    eax,0x0
10001aa7:	c3                   	ret    

10001aa8 <PS2Port::detect()>:
10001aa8:	55                   	push   ebp
10001aa9:	89 e5                	mov    ebp,esp
10001aab:	53                   	push   ebx
10001aac:	83 ec 14             	sub    esp,0x14
10001aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ab2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001ab8:	85 c0                	test   eax,eax
10001aba:	75 55                	jne    10001b11 <PS2Port::detect()+0x69>
10001abc:	83 ec 0c             	sub    esp,0xc
10001abf:	68 70 01 00 00       	push   0x170
10001ac4:	e8 fc ff ff ff       	call   10001ac5 <PS2Port::detect()+0x1d>	10001ac5: R_386_PC32	operator new(unsigned long)
10001ac9:	83 c4 10             	add    esp,0x10
10001acc:	89 c3                	mov    ebx,eax
10001ace:	83 ec 0c             	sub    esp,0xc
10001ad1:	53                   	push   ebx
10001ad2:	e8 fc ff ff ff       	call   10001ad3 <PS2Port::detect()+0x2b>	10001ad3: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001ad7:	83 c4 10             	add    esp,0x10
10001ada:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ae0:	83 ec 08             	sub    esp,0x8
10001ae3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <PS2Port::detect()+0x40>	10001ae8: R_386_PC32	Device::addChild(Device*)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001af2:	8b 00                	mov    eax,DWORD PTR [eax]
10001af4:	83 c0 08             	add    eax,0x8
10001af7:	8b 00                	mov    eax,DWORD PTR [eax]
10001af9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001afc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001b02:	52                   	push   edx
10001b03:	6a 00                	push   0x0
10001b05:	6a 00                	push   0x0
10001b07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001b0a:	ff d0                	call   eax
10001b0c:	83 c4 10             	add    esp,0x10
10001b0f:	eb 61                	jmp    10001b72 <PS2Port::detect()+0xca>
10001b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b1a:	83 f8 01             	cmp    eax,0x1
10001b1d:	75 53                	jne    10001b72 <PS2Port::detect()+0xca>
10001b1f:	83 ec 0c             	sub    esp,0xc
10001b22:	68 68 01 00 00       	push   0x168
10001b27:	e8 fc ff ff ff       	call   10001b28 <PS2Port::detect()+0x80>	10001b28: R_386_PC32	operator new(unsigned long)
10001b2c:	83 c4 10             	add    esp,0x10
10001b2f:	89 c3                	mov    ebx,eax
10001b31:	83 ec 0c             	sub    esp,0xc
10001b34:	53                   	push   ebx
10001b35:	e8 fc ff ff ff       	call   10001b36 <PS2Port::detect()+0x8e>	10001b36: R_386_PC32	PS2Mouse::PS2Mouse()
10001b3a:	83 c4 10             	add    esp,0x10
10001b3d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10001b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b43:	83 ec 08             	sub    esp,0x8
10001b46:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b49:	50                   	push   eax
10001b4a:	e8 fc ff ff ff       	call   10001b4b <PS2Port::detect()+0xa3>	10001b4b: R_386_PC32	Device::addChild(Device*)
10001b4f:	83 c4 10             	add    esp,0x10
10001b52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001b55:	8b 00                	mov    eax,DWORD PTR [eax]
10001b57:	83 c0 08             	add    eax,0x8
10001b5a:	8b 00                	mov    eax,DWORD PTR [eax]
10001b5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b5f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001b65:	52                   	push   edx
10001b66:	6a 00                	push   0x0
10001b68:	6a 01                	push   0x1
10001b6a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b6d:	ff d0                	call   eax
10001b6f:	83 c4 10             	add    esp,0x10
10001b72:	90                   	nop
10001b73:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001b76:	c9                   	leave  
10001b77:	c3                   	ret    

10001b78 <PS2Port::deviceWrite(unsigned char)>:
10001b78:	55                   	push   ebp
10001b79:	89 e5                	mov    ebp,esp
10001b7b:	83 ec 28             	sub    esp,0x28
10001b7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b81:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b8d:	83 f8 01             	cmp    eax,0x1
10001b90:	75 1a                	jne    10001bac <PS2Port::deviceWrite(unsigned char)+0x34>
10001b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001b9b:	83 ec 08             	sub    esp,0x8
10001b9e:	68 d4 00 00 00       	push   0xd4
10001ba3:	50                   	push   eax
10001ba4:	e8 fc ff ff ff       	call   10001ba5 <PS2Port::deviceWrite(unsigned char)+0x2d>	10001ba5: R_386_PC32	PS2::controllerWrite(unsigned char)
10001ba9:	83 c4 10             	add    esp,0x10
10001bac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001bb3:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10001bb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001bbc:	89 c2                	mov    edx,eax
10001bbe:	ec                   	in     al,dx
10001bbf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001bc2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001bc5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001bc8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001bcc:	83 e0 02             	and    eax,0x2
10001bcf:	85 c0                	test   eax,eax
10001bd1:	74 29                	je     10001bfc <PS2Port::deviceWrite(unsigned char)+0x84>
10001bd3:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001bd7:	83 e0 40             	and    eax,0x40
10001bda:	85 c0                	test   eax,eax
10001bdc:	75 22                	jne    10001c00 <PS2Port::deviceWrite(unsigned char)+0x88>
10001bde:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001be1:	84 c0                	test   al,al
10001be3:	78 1b                	js     10001c00 <PS2Port::deviceWrite(unsigned char)+0x88>
10001be5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001be8:	8d 50 01             	lea    edx,[eax+0x1]
10001beb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001bee:	3d 40 06 00 00       	cmp    eax,0x640
10001bf3:	0f 94 c0             	sete   al
10001bf6:	84 c0                	test   al,al
10001bf8:	75 05                	jne    10001bff <PS2Port::deviceWrite(unsigned char)+0x87>
10001bfa:	eb b7                	jmp    10001bb3 <PS2Port::deviceWrite(unsigned char)+0x3b>
10001bfc:	90                   	nop
10001bfd:	eb 01                	jmp    10001c00 <PS2Port::deviceWrite(unsigned char)+0x88>
10001bff:	90                   	nop
10001c00:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001c04:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001c0a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001c0d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001c10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10001c13:	ee                   	out    dx,al
10001c14:	b0 01                	mov    al,0x1
10001c16:	c9                   	leave  
10001c17:	c3                   	ret    

10001c18 <PS2Port::deviceRead()>:
10001c18:	55                   	push   ebp
10001c19:	89 e5                	mov    ebp,esp
10001c1b:	83 ec 08             	sub    esp,0x8
10001c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001c27:	83 ec 0c             	sub    esp,0xc
10001c2a:	50                   	push   eax
10001c2b:	e8 fc ff ff ff       	call   10001c2c <PS2Port::deviceRead()+0x14>	10001c2c: R_386_PC32	PS2::controllerRead()
10001c30:	83 c4 10             	add    esp,0x10
10001c33:	c9                   	leave  
10001c34:	c3                   	ret    
10001c35:	90                   	nop

10001c36 <sb16Demo(void*)>:
10001c36:	55                   	push   ebp
10001c37:	57                   	push   edi
10001c38:	56                   	push   esi
10001c39:	53                   	push   ebx
10001c3a:	83 ec 1c             	sub    esp,0x1c
10001c3d:	e8 fc ff ff ff       	call   10001c3e <sb16Demo(void*)+0x8>	10001c3e: R_386_PC32	unlockScheduler()
10001c42:	83 ec 0c             	sub    esp,0xc
10001c45:	6a 2c                	push   0x2c
10001c47:	e8 fc ff ff ff       	call   10001c48 <sb16Demo(void*)+0x12>	10001c48: R_386_PC32	operator new(unsigned long)
10001c4c:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10001c53:	89 c3                	mov    ebx,eax
10001c55:	6a 5a                	push   0x5a
10001c57:	6a 08                	push   0x8
10001c59:	68 40 1f 00 00       	push   0x1f40
10001c5e:	50                   	push   eax
10001c5f:	e8 fc ff ff ff       	call   10001c60 <sb16Demo(void*)+0x2a>	10001c60: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
10001c64:	83 c4 14             	add    esp,0x14
10001c67:	68 14 01 00 00       	push   0x114
10001c6c:	e8 fc ff ff ff       	call   10001c6d <sb16Demo(void*)+0x37>	10001c6d: R_386_PC32	operator new(unsigned long)
10001c71:	83 c4 0c             	add    esp,0xc
10001c74:	89 c6                	mov    esi,eax
10001c76:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001c78: R_386_32	kernelProcess
10001c7c:	68 00 00 00 00       	push   0x0	10001c7d: R_386_32	egFile
10001c81:	50                   	push   eax
10001c82:	e8 fc ff ff ff       	call   10001c83 <sb16Demo(void*)+0x4d>	10001c83: R_386_PC32	File::File(char const*, Process*)
10001c87:	5f                   	pop    edi
10001c88:	5d                   	pop    ebp
10001c89:	31 ed                	xor    ebp,ebp
10001c8b:	6a 01                	push   0x1
10001c8d:	56                   	push   esi
10001c8e:	e8 fc ff ff ff       	call   10001c8f <sb16Demo(void*)+0x59>	10001c8f: R_386_PC32	File::open(FileOpenMode)
10001c93:	83 c4 10             	add    esp,0x10
10001c96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001c9e:	8b 06                	mov    eax,DWORD PTR [esi]
10001ca0:	83 ec 0c             	sub    esp,0xc
10001ca3:	8d 54 24 18          	lea    edx,[esp+0x18]
10001ca7:	52                   	push   edx
10001ca8:	68 00 00 00 00       	push   0x0	10001ca9: R_386_32	buf
10001cad:	6a 00                	push   0x0
10001caf:	68 00 10 00 00       	push   0x1000
10001cb4:	56                   	push   esi
10001cb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001cb8:	83 c4 20             	add    esp,0x20
10001cbb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001cc0:	74 7b                	je     10001d3d <sb16Demo(void*)+0x107>
10001cc2:	85 c0                	test   eax,eax
10001cc4:	75 77                	jne    10001d3d <sb16Demo(void*)+0x107>
10001cc6:	e8 fc ff ff ff       	call   10001cc7 <sb16Demo(void*)+0x91>	10001cc7: R_386_PC32	lockScheduler()
10001ccb:	e8 fc ff ff ff       	call   10001ccc <sb16Demo(void*)+0x96>	10001ccc: R_386_PC32	schedule()
10001cd0:	e8 fc ff ff ff       	call   10001cd1 <sb16Demo(void*)+0x9b>	10001cd1: R_386_PC32	unlockScheduler()
10001cd5:	83 ec 0c             	sub    esp,0xc
10001cd8:	53                   	push   ebx
10001cd9:	e8 fc ff ff ff       	call   10001cda <sb16Demo(void*)+0xa4>	10001cda: R_386_PC32	SoundChannel::getBufferUsed()
10001cde:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001ce1:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001ce5:	89 c7                	mov    edi,eax
10001ce7:	e8 fc ff ff ff       	call   10001ce8 <sb16Demo(void*)+0xb2>	10001ce8: R_386_PC32	SoundChannel::getBufferSize()
10001cec:	83 c4 10             	add    esp,0x10
10001cef:	39 c7                	cmp    edi,eax
10001cf1:	7c 10                	jl     10001d03 <sb16Demo(void*)+0xcd>
10001cf3:	51                   	push   ecx
10001cf4:	51                   	push   ecx
10001cf5:	6a 00                	push   0x0
10001cf7:	6a 01                	push   0x1
10001cf9:	e8 fc ff ff ff       	call   10001cfa <sb16Demo(void*)+0xc4>	10001cfa: R_386_PC32	sleep(unsigned long long)
10001cfe:	83 c4 10             	add    esp,0x10
10001d01:	eb d2                	jmp    10001cd5 <sb16Demo(void*)+0x9f>
10001d03:	52                   	push   edx
10001d04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001d08:	68 00 00 00 00       	push   0x0	10001d09: R_386_32	buf
10001d0d:	53                   	push   ebx
10001d0e:	e8 fc ff ff ff       	call   10001d0f <sb16Demo(void*)+0xd9>	10001d0f: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10001d13:	83 c4 10             	add    esp,0x10
10001d16:	89 e8                	mov    eax,ebp
10001d18:	84 c0                	test   al,al
10001d1a:	75 17                	jne    10001d33 <sb16Demo(void*)+0xfd>
10001d1c:	50                   	push   eax
10001d1d:	50                   	push   eax
10001d1e:	53                   	push   ebx
10001d1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10001d23:	e8 fc ff ff ff       	call   10001d24 <sb16Demo(void*)+0xee>	10001d24: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10001d28:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001d2b:	e8 fc ff ff ff       	call   10001d2c <sb16Demo(void*)+0xf6>	10001d2c: R_386_PC32	SoundChannel::play()
10001d30:	83 c4 10             	add    esp,0x10
10001d33:	bd 01 00 00 00       	mov    ebp,0x1
10001d38:	e9 59 ff ff ff       	jmp    10001c96 <sb16Demo(void*)+0x60>
10001d3d:	83 c4 1c             	add    esp,0x1c
10001d40:	5b                   	pop    ebx
10001d41:	5e                   	pop    esi
10001d42:	5f                   	pop    edi
10001d43:	5d                   	pop    ebp
10001d44:	c3                   	ret    
10001d45:	90                   	nop

10001d46 <SoundBlaster16::resetDSP()>:
10001d46:	53                   	push   ebx
10001d47:	b0 01                	mov    al,0x1
10001d49:	83 ec 10             	sub    esp,0x10
10001d4c:	bb 26 02 00 00       	mov    ebx,0x226
10001d51:	89 da                	mov    edx,ebx
10001d53:	ee                   	out    dx,al
10001d54:	6a 00                	push   0x0
10001d56:	68 c0 c6 2d 00       	push   0x2dc6c0
10001d5b:	e8 fc ff ff ff       	call   10001d5c <SoundBlaster16::resetDSP()+0x16>	10001d5c: R_386_PC32	nanoSleep(unsigned long long)
10001d60:	31 c0                	xor    eax,eax
10001d62:	89 da                	mov    edx,ebx
10001d64:	ee                   	out    dx,al
10001d65:	ba 2a 02 00 00       	mov    edx,0x22a
10001d6a:	ec                   	in     al,dx
10001d6b:	83 c4 10             	add    esp,0x10
10001d6e:	3c aa                	cmp    al,0xaa
10001d70:	75 25                	jne    10001d97 <SoundBlaster16::resetDSP()+0x51>
10001d72:	b0 e1                	mov    al,0xe1
10001d74:	ba 2c 02 00 00       	mov    edx,0x22c
10001d79:	ee                   	out    dx,al
10001d7a:	ba 2e 02 00 00       	mov    edx,0x22e
10001d7f:	ec                   	in     al,dx
10001d80:	84 c0                	test   al,al
10001d82:	79 fb                	jns    10001d7f <SoundBlaster16::resetDSP()+0x39>
10001d84:	ba 2a 02 00 00       	mov    edx,0x22a
10001d89:	ec                   	in     al,dx
10001d8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001d8e:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10001d94:	ec                   	in     al,dx
10001d95:	eb 13                	jmp    10001daa <SoundBlaster16::resetDSP()+0x64>
10001d97:	0f b6 c0             	movzx  eax,al
10001d9a:	51                   	push   ecx
10001d9b:	51                   	push   ecx
10001d9c:	50                   	push   eax
10001d9d:	68 00 00 00 00       	push   0x0	10001d9e: R_386_32	badVer
10001da2:	e8 fc ff ff ff       	call   10001da3 <SoundBlaster16::resetDSP()+0x5d>	10001da3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001da7:	83 c4 10             	add    esp,0x10
10001daa:	83 c4 08             	add    esp,0x8
10001dad:	5b                   	pop    ebx
10001dae:	c3                   	ret    
10001daf:	90                   	nop

10001db0 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10001db0:	53                   	push   ebx
10001db1:	ba 2c 02 00 00       	mov    edx,0x22c
10001db6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001dba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001dbe:	ec                   	in     al,dx
10001dbf:	84 c0                	test   al,al
10001dc1:	78 fb                	js     10001dbe <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10001dc3:	88 c8                	mov    al,cl
10001dc5:	89 da                	mov    edx,ebx
10001dc7:	ee                   	out    dx,al
10001dc8:	5b                   	pop    ebx
10001dc9:	c3                   	ret    

10001dca <SoundBlaster16::turnSpeakerOn(bool)>:
10001dca:	53                   	push   ebx
10001dcb:	52                   	push   edx
10001dcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10001dd0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001dd4:	80 fa 01             	cmp    dl,0x1
10001dd7:	89 14 24             	mov    DWORD PTR [esp],edx
10001dda:	19 c0                	sbb    eax,eax
10001ddc:	83 e0 02             	and    eax,0x2
10001ddf:	05 d1 00 00 00       	add    eax,0xd1
10001de4:	50                   	push   eax
10001de5:	68 2c 02 00 00       	push   0x22c
10001dea:	53                   	push   ebx
10001deb:	e8 fc ff ff ff       	call   10001dec <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10001dec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001df0:	83 c4 0c             	add    esp,0xc
10001df3:	8b 14 24             	mov    edx,DWORD PTR [esp]
10001df6:	84 d2                	test   dl,dl
10001df8:	75 23                	jne    10001e1d <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10001dfa:	68 d0 00 00 00       	push   0xd0
10001dff:	68 2c 02 00 00       	push   0x22c
10001e04:	53                   	push   ebx
10001e05:	e8 fc ff ff ff       	call   10001e06 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10001e06: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e0a:	68 d3 00 00 00       	push   0xd3
10001e0f:	68 2c 02 00 00       	push   0x22c
10001e14:	53                   	push   ebx
10001e15:	e8 fc ff ff ff       	call   10001e16 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10001e16: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e1a:	83 c4 18             	add    esp,0x18
10001e1d:	58                   	pop    eax
10001e1e:	5b                   	pop    ebx
10001e1f:	c3                   	ret    

10001e20 <SoundBlaster16::SoundBlaster16()>:
10001e20:	55                   	push   ebp
10001e21:	89 e5                	mov    ebp,esp
10001e23:	83 ec 08             	sub    esp,0x8
10001e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e29:	83 ec 08             	sub    esp,0x8
10001e2c:	68 00 00 00 00       	push   0x0	10001e2d: R_386_32	sb16name
10001e31:	50                   	push   eax
10001e32:	e8 fc ff ff ff       	call   10001e33 <SoundBlaster16::SoundBlaster16()+0x13>	10001e33: R_386_PC32	SoundDevice::SoundDevice(char const*)
10001e37:	83 c4 10             	add    esp,0x10
10001e3a:	ba 08 00 00 00       	mov    edx,0x8	10001e3b: R_386_32	vtable for SoundBlaster16
10001e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e42:	89 10                	mov    DWORD PTR [eax],edx
10001e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e47:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10001e51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e54:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10001e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e61:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10001e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e6b:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10001e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e75:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10001e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e7f:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10001e86:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e87: R_386_32	tempBuffer
10001e8b:	85 c0                	test   eax,eax
10001e8d:	75 2a                	jne    10001eb9 <SoundBlaster16::SoundBlaster16()+0x99>
10001e8f:	83 ec 0c             	sub    esp,0xc
10001e92:	68 00 80 00 00       	push   0x8000
10001e97:	e8 fc ff ff ff       	call   10001e98 <SoundBlaster16::SoundBlaster16()+0x78>	10001e98: R_386_PC32	malloc
10001e9c:	83 c4 10             	add    esp,0x10
10001e9f:	a3 00 00 00 00       	mov    ds:0x0,eax	10001ea0: R_386_32	tempBuffer
10001ea4:	83 ec 0c             	sub    esp,0xc
10001ea7:	68 00 80 00 00       	push   0x8000
10001eac:	e8 fc ff ff ff       	call   10001ead <SoundBlaster16::SoundBlaster16()+0x8d>	10001ead: R_386_PC32	malloc
10001eb1:	83 c4 10             	add    esp,0x10
10001eb4:	a3 00 00 00 00       	mov    ds:0x0,eax	10001eb5: R_386_32	outputBuffer
10001eb9:	90                   	nop
10001eba:	c9                   	leave  
10001ebb:	c3                   	ret    

10001ebc <SoundBlaster16::handleIRQ()>:
10001ebc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10001ec0:	ba 2e 02 00 00       	mov    edx,0x22e
10001ec5:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10001ecc:	74 17                	je     10001ee5 <SoundBlaster16::handleIRQ()+0x29>
10001ece:	b0 82                	mov    al,0x82
10001ed0:	ba 24 02 00 00       	mov    edx,0x224
10001ed5:	ee                   	out    dx,al
10001ed6:	ba 25 02 00 00       	mov    edx,0x225
10001edb:	ec                   	in     al,dx
10001edc:	a8 02                	test   al,0x2
10001ede:	74 06                	je     10001ee6 <SoundBlaster16::handleIRQ()+0x2a>
10001ee0:	ba 2f 02 00 00       	mov    edx,0x22f
10001ee5:	ec                   	in     al,dx
10001ee6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10001eea:	e9 c7 03 00 00       	jmp    100022b6 <SoundBlaster16::onInterrupt()>

10001eef <sb16Handler(regs*, void*)>:
10001eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001ef3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001ef7:	eb c3                	jmp    10001ebc <SoundBlaster16::handleIRQ()>
10001ef9:	90                   	nop

10001efa <SoundBlaster16::getNumHwChannels()>:
10001efa:	b8 01 00 00 00       	mov    eax,0x1
10001eff:	c3                   	ret    

10001f00 <SoundBlaster16::beginPlayback(int, int)>:
10001f00:	53                   	push   ebx
10001f01:	50                   	push   eax
10001f02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001f06:	6a 01                	push   0x1
10001f08:	53                   	push   ebx
10001f09:	e8 fc ff ff ff       	call   10001f0a <SoundBlaster16::beginPlayback(int, int)+0xa>	10001f0a: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001f0e:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10001f15:	5a                   	pop    edx
10001f16:	19 c0                	sbb    eax,eax
10001f18:	59                   	pop    ecx
10001f19:	83 c0 02             	add    eax,0x2
10001f1c:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10001f23:	89 c1                	mov    ecx,eax
10001f25:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10001f2a:	99                   	cdq    
10001f2b:	f7 f9                	idiv   ecx
10001f2d:	89 04 24             	mov    DWORD PTR [esp],eax
10001f30:	6a 40                	push   0x40
10001f32:	68 2c 02 00 00       	push   0x22c
10001f37:	53                   	push   ebx
10001f38:	e8 fc ff ff ff       	call   10001f39 <SoundBlaster16::beginPlayback(int, int)+0x39>	10001f39: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001f42:	50                   	push   eax
10001f43:	68 2c 02 00 00       	push   0x22c
10001f48:	53                   	push   ebx
10001f49:	e8 fc ff ff ff       	call   10001f4a <SoundBlaster16::beginPlayback(int, int)+0x4a>	10001f4a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f4e:	68 c0 00 00 00       	push   0xc0
10001f53:	68 2c 02 00 00       	push   0x22c
10001f58:	53                   	push   ebx
10001f59:	e8 fc ff ff ff       	call   10001f5a <SoundBlaster16::beginPlayback(int, int)+0x5a>	10001f5a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f5e:	83 c4 24             	add    esp,0x24
10001f61:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10001f68:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10001f6f:	c1 e0 05             	shl    eax,0x5
10001f72:	c1 e2 04             	shl    edx,0x4
10001f75:	09 d0                	or     eax,edx
10001f77:	0f be c0             	movsx  eax,al
10001f7a:	50                   	push   eax
10001f7b:	68 2c 02 00 00       	push   0x22c
10001f80:	53                   	push   ebx
10001f81:	e8 fc ff ff ff       	call   10001f82 <SoundBlaster16::beginPlayback(int, int)+0x82>	10001f82: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f86:	68 ff 00 00 00       	push   0xff
10001f8b:	68 2c 02 00 00       	push   0x22c
10001f90:	53                   	push   ebx
10001f91:	e8 fc ff ff ff       	call   10001f92 <SoundBlaster16::beginPlayback(int, int)+0x92>	10001f92: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f96:	6a 1f                	push   0x1f
10001f98:	68 2c 02 00 00       	push   0x22c
10001f9d:	53                   	push   ebx
10001f9e:	e8 fc ff ff ff       	call   10001f9f <SoundBlaster16::beginPlayback(int, int)+0x9f>	10001f9f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fa3:	83 c4 24             	add    esp,0x24
10001fa6:	6a 48                	push   0x48
10001fa8:	68 2c 02 00 00       	push   0x22c
10001fad:	53                   	push   ebx
10001fae:	e8 fc ff ff ff       	call   10001faf <SoundBlaster16::beginPlayback(int, int)+0xaf>	10001faf: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fb3:	68 ff 00 00 00       	push   0xff
10001fb8:	68 2c 02 00 00       	push   0x22c
10001fbd:	53                   	push   ebx
10001fbe:	e8 fc ff ff ff       	call   10001fbf <SoundBlaster16::beginPlayback(int, int)+0xbf>	10001fbf: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fc3:	6a 1f                	push   0x1f
10001fc5:	68 2c 02 00 00       	push   0x22c
10001fca:	53                   	push   ebx
10001fcb:	e8 fc ff ff ff       	call   10001fcc <SoundBlaster16::beginPlayback(int, int)+0xcc>	10001fcc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fd0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10001fd4:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10001fdc:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10001fe4:	83 c4 28             	add    esp,0x28
10001fe7:	5b                   	pop    ebx
10001fe8:	e9 c3 fd ff ff       	jmp    10001db0 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10001fed:	90                   	nop

10001fee <SoundBlaster16::stopPlayback()>:
10001fee:	6a 00                	push   0x0
10001ff0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001ff4:	e8 fc ff ff ff       	call   10001ff5 <SoundBlaster16::stopPlayback()+0x7>	10001ff5: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001ff9:	58                   	pop    eax
10001ffa:	5a                   	pop    edx
10001ffb:	c3                   	ret    

10001ffc <SoundBlaster16::open(int, int, void*)>:
10001ffc:	56                   	push   esi
10001ffd:	be 25 02 00 00       	mov    esi,0x225
10002002:	53                   	push   ebx
10002003:	83 ec 14             	sub    esp,0x14
10002006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000200a:	c7 83 e8 01 00 00 22 56 00 00 	mov    DWORD PTR [ebx+0x1e8],0x5622
10002014:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
1000201e:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10002027:	68 80 00 00 00       	push   0x80
1000202c:	68 24 02 00 00       	push   0x224
10002031:	53                   	push   ebx
10002032:	e8 fc ff ff ff       	call   10002033 <SoundBlaster16::open(int, int, void*)+0x37>	10002033: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002037:	89 f2                	mov    edx,esi
10002039:	ec                   	in     al,dx
1000203a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
1000203e:	68 80 00 00 00       	push   0x80
10002043:	68 24 02 00 00       	push   0x224
10002048:	53                   	push   ebx
10002049:	e8 fc ff ff ff       	call   1000204a <SoundBlaster16::open(int, int, void*)+0x4e>	1000204a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000204e:	83 c4 18             	add    esp,0x18
10002051:	31 c0                	xor    eax,eax
10002053:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10002058:	0f 95 c0             	setne  al
1000205b:	40                   	inc    eax
1000205c:	50                   	push   eax
1000205d:	68 25 02 00 00       	push   0x225
10002062:	53                   	push   ebx
10002063:	e8 fc ff ff ff       	call   10002064 <SoundBlaster16::open(int, int, void*)+0x68>	10002064: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002068:	68 80 00 00 00       	push   0x80
1000206d:	68 24 02 00 00       	push   0x224
10002072:	53                   	push   ebx
10002073:	e8 fc ff ff ff       	call   10002074 <SoundBlaster16::open(int, int, void*)+0x78>	10002074: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002078:	89 f2                	mov    edx,esi
1000207a:	ec                   	in     al,dx
1000207b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
1000207f:	83 c4 18             	add    esp,0x18
10002082:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002086:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
1000208a:	75 51                	jne    100020dd <SoundBlaster16::open(int, int, void*)+0xe1>
1000208c:	68 81 00 00 00       	push   0x81
10002091:	68 24 02 00 00       	push   0x224
10002096:	53                   	push   ebx
10002097:	e8 fc ff ff ff       	call   10002098 <SoundBlaster16::open(int, int, void*)+0x9c>	10002098: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000209c:	89 f2                	mov    edx,esi
1000209e:	ec                   	in     al,dx
1000209f:	83 e0 0a             	and    eax,0xa
100020a2:	3c 01                	cmp    al,0x1
100020a4:	19 c0                	sbb    eax,eax
100020a6:	83 e0 62             	and    eax,0x62
100020a9:	40                   	inc    eax
100020aa:	89 04 24             	mov    DWORD PTR [esp],eax
100020ad:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100020af: R_386_32	isaDMAController
100020b3:	e8 fc ff ff ff       	call   100020b4 <SoundBlaster16::open(int, int, void*)+0xb8>	100020b4: R_386_PC32	DMA::tryLockChannel(int)
100020b8:	83 c4 10             	add    esp,0x10
100020bb:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100020c1:	85 c0                	test   eax,eax
100020c3:	75 3a                	jne    100020ff <SoundBlaster16::open(int, int, void*)+0x103>
100020c5:	83 ec 0c             	sub    esp,0xc
100020c8:	68 00 00 00 00       	push   0x0	100020c9: R_386_32	nodma
100020cd:	e8 fc ff ff ff       	call   100020ce <SoundBlaster16::open(int, int, void*)+0xd2>	100020ce: R_386_PC32	Dbg::kprintf(char const*, ...)
100020d2:	83 c4 10             	add    esp,0x10
100020d5:	83 c8 ff             	or     eax,0xffffffff
100020d8:	e9 d3 01 00 00       	jmp    100022b0 <SoundBlaster16::open(int, int, void*)+0x2b4>
100020dd:	56                   	push   esi
100020de:	56                   	push   esi
100020df:	6a 01                	push   0x1
100020e1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100020e3: R_386_32	isaDMAController
100020e7:	e8 fc ff ff ff       	call   100020e8 <SoundBlaster16::open(int, int, void*)+0xec>	100020e8: R_386_PC32	DMA::tryLockChannel(int)
100020ec:	83 c4 10             	add    esp,0x10
100020ef:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100020f5:	85 c0                	test   eax,eax
100020f7:	75 06                	jne    100020ff <SoundBlaster16::open(int, int, void*)+0x103>
100020f9:	51                   	push   ecx
100020fa:	51                   	push   ecx
100020fb:	6a 03                	push   0x3
100020fd:	eb ae                	jmp    100020ad <SoundBlaster16::open(int, int, void*)+0xb1>
100020ff:	50                   	push   eax
10002100:	50                   	push   eax
10002101:	68 00 40 00 00       	push   0x4000
10002106:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000210c:	e8 fc ff ff ff       	call   1000210d <SoundBlaster16::open(int, int, void*)+0x111>	1000210d: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10002111:	58                   	pop    eax
10002112:	5a                   	pop    edx
10002113:	6a 59                	push   0x59
10002115:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000211b:	e8 fc ff ff ff       	call   1000211c <SoundBlaster16::open(int, int, void*)+0x120>	1000211c: R_386_PC32	DMAChannel::setMode(unsigned char)
10002120:	59                   	pop    ecx
10002121:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002127:	e8 fc ff ff ff       	call   10002128 <SoundBlaster16::open(int, int, void*)+0x12c>	10002128: R_386_PC32	DMAChannel::start()
1000212c:	5e                   	pop    esi
1000212d:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002133:	e8 fc ff ff ff       	call   10002134 <SoundBlaster16::open(int, int, void*)+0x138>	10002134: R_386_PC32	DMAChannel::getAddress()
10002138:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
1000213e:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002141:	e8 fc ff ff ff       	call   10002142 <SoundBlaster16::open(int, int, void*)+0x146>	10002142: R_386_PC32	SoundBlaster16::resetDSP()
10002146:	58                   	pop    eax
10002147:	5a                   	pop    edx
10002148:	6a 01                	push   0x1
1000214a:	53                   	push   ebx
1000214b:	e8 fc ff ff ff       	call   1000214c <SoundBlaster16::open(int, int, void*)+0x150>	1000214c: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10002150:	83 c4 10             	add    esp,0x10
10002153:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002157:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
1000215b:	75 6f                	jne    100021cc <SoundBlaster16::open(int, int, void*)+0x1d0>
1000215d:	50                   	push   eax
1000215e:	68 80 00 00 00       	push   0x80
10002163:	68 24 02 00 00       	push   0x224
10002168:	53                   	push   ebx
10002169:	e8 fc ff ff ff       	call   1000216a <SoundBlaster16::open(int, int, void*)+0x16e>	1000216a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000216e:	ba 25 02 00 00       	mov    edx,0x225
10002173:	ec                   	in     al,dx
10002174:	83 c4 10             	add    esp,0x10
10002177:	3c 01                	cmp    al,0x1
10002179:	75 0f                	jne    1000218a <SoundBlaster16::open(int, int, void*)+0x18e>
1000217b:	83 ec 0c             	sub    esp,0xc
1000217e:	53                   	push   ebx
1000217f:	6a 01                	push   0x1
10002181:	68 00 00 00 00       	push   0x0	10002182: R_386_32	sb16Handler(regs*, void*)
10002186:	6a 02                	push   0x2
10002188:	eb 6f                	jmp    100021f9 <SoundBlaster16::open(int, int, void*)+0x1fd>
1000218a:	3c 02                	cmp    al,0x2
1000218c:	75 06                	jne    10002194 <SoundBlaster16::open(int, int, void*)+0x198>
1000218e:	83 ec 0c             	sub    esp,0xc
10002191:	53                   	push   ebx
10002192:	eb 5c                	jmp    100021f0 <SoundBlaster16::open(int, int, void*)+0x1f4>
10002194:	3c 04                	cmp    al,0x4
10002196:	75 0f                	jne    100021a7 <SoundBlaster16::open(int, int, void*)+0x1ab>
10002198:	83 ec 0c             	sub    esp,0xc
1000219b:	53                   	push   ebx
1000219c:	6a 01                	push   0x1
1000219e:	68 00 00 00 00       	push   0x0	1000219f: R_386_32	sb16Handler(regs*, void*)
100021a3:	6a 07                	push   0x7
100021a5:	eb 52                	jmp    100021f9 <SoundBlaster16::open(int, int, void*)+0x1fd>
100021a7:	3c 08                	cmp    al,0x8
100021a9:	75 0f                	jne    100021ba <SoundBlaster16::open(int, int, void*)+0x1be>
100021ab:	83 ec 0c             	sub    esp,0xc
100021ae:	53                   	push   ebx
100021af:	6a 01                	push   0x1
100021b1:	68 00 00 00 00       	push   0x0	100021b2: R_386_32	sb16Handler(regs*, void*)
100021b6:	6a 0a                	push   0xa
100021b8:	eb 3f                	jmp    100021f9 <SoundBlaster16::open(int, int, void*)+0x1fd>
100021ba:	83 ec 0c             	sub    esp,0xc
100021bd:	68 00 00 00 00       	push   0x0	100021be: R_386_32	noirq
100021c2:	e8 fc ff ff ff       	call   100021c3 <SoundBlaster16::open(int, int, void*)+0x1c7>	100021c3: R_386_PC32	Krnl::panic(char const*)
100021c7:	83 c4 10             	add    esp,0x10
100021ca:	eb 36                	jmp    10002202 <SoundBlaster16::open(int, int, void*)+0x206>
100021cc:	50                   	push   eax
100021cd:	68 80 00 00 00       	push   0x80
100021d2:	68 24 02 00 00       	push   0x224
100021d7:	53                   	push   ebx
100021d8:	e8 fc ff ff ff       	call   100021d9 <SoundBlaster16::open(int, int, void*)+0x1dd>	100021d9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021dd:	83 c4 0c             	add    esp,0xc
100021e0:	6a 02                	push   0x2
100021e2:	68 25 02 00 00       	push   0x225
100021e7:	53                   	push   ebx
100021e8:	e8 fc ff ff ff       	call   100021e9 <SoundBlaster16::open(int, int, void*)+0x1ed>	100021e9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
100021f0:	6a 01                	push   0x1
100021f2:	68 00 00 00 00       	push   0x0	100021f3: R_386_32	sb16Handler(regs*, void*)
100021f7:	6a 05                	push   0x5
100021f9:	53                   	push   ebx
100021fa:	e8 fc ff ff ff       	call   100021fb <SoundBlaster16::open(int, int, void*)+0x1ff>	100021fb: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100021ff:	83 c4 20             	add    esp,0x20
10002202:	56                   	push   esi
10002203:	68 81 00 00 00       	push   0x81
10002208:	68 24 02 00 00       	push   0x224
1000220d:	53                   	push   ebx
1000220e:	e8 fc ff ff ff       	call   1000220f <SoundBlaster16::open(int, int, void*)+0x213>	1000220f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002213:	ba 25 02 00 00       	mov    edx,0x225
10002218:	ec                   	in     al,dx
10002219:	83 c4 0c             	add    esp,0xc
1000221c:	89 c6                	mov    esi,eax
1000221e:	68 81 00 00 00       	push   0x81
10002223:	68 24 02 00 00       	push   0x224
10002228:	53                   	push   ebx
10002229:	e8 fc ff ff ff       	call   1000222a <SoundBlaster16::open(int, int, void*)+0x22e>	1000222a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000222e:	58                   	pop    eax
1000222f:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002235:	e8 fc ff ff ff       	call   10002236 <SoundBlaster16::open(int, int, void*)+0x23a>	10002236: R_386_PC32	DMAChannel::getChannelNum()
1000223a:	83 c4 10             	add    esp,0x10
1000223d:	48                   	dec    eax
1000223e:	75 0c                	jne    1000224c <SoundBlaster16::open(int, int, void*)+0x250>
10002240:	81 e6 f0 00 00 00    	and    esi,0xf0
10002246:	51                   	push   ecx
10002247:	83 ce 02             	or     esi,0x2
1000224a:	eb 20                	jmp    1000226c <SoundBlaster16::open(int, int, void*)+0x270>
1000224c:	83 ec 0c             	sub    esp,0xc
1000224f:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002255:	e8 fc ff ff ff       	call   10002256 <SoundBlaster16::open(int, int, void*)+0x25a>	10002256: R_386_PC32	DMAChannel::getChannelNum()
1000225a:	83 c4 10             	add    esp,0x10
1000225d:	83 f8 03             	cmp    eax,0x3
10002260:	75 18                	jne    1000227a <SoundBlaster16::open(int, int, void*)+0x27e>
10002262:	81 e6 f0 00 00 00    	and    esi,0xf0
10002268:	52                   	push   edx
10002269:	83 ce 08             	or     esi,0x8
1000226c:	56                   	push   esi
1000226d:	68 25 02 00 00       	push   0x225
10002272:	53                   	push   ebx
10002273:	e8 fc ff ff ff       	call   10002274 <SoundBlaster16::open(int, int, void*)+0x278>	10002274: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002278:	eb 0d                	jmp    10002287 <SoundBlaster16::open(int, int, void*)+0x28b>
1000227a:	83 ec 0c             	sub    esp,0xc
1000227d:	68 00 00 00 00       	push   0x0	1000227e: R_386_32	baddma
10002282:	e8 fc ff ff ff       	call   10002283 <SoundBlaster16::open(int, int, void*)+0x287>	10002283: R_386_PC32	Krnl::panic(char const*)
10002287:	83 c4 10             	add    esp,0x10
1000228a:	50                   	push   eax
1000228b:	6a 22                	push   0x22
1000228d:	68 24 02 00 00       	push   0x224
10002292:	53                   	push   ebx
10002293:	e8 fc ff ff ff       	call   10002294 <SoundBlaster16::open(int, int, void*)+0x298>	10002294: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002298:	83 c4 0c             	add    esp,0xc
1000229b:	68 ff 00 00 00       	push   0xff
100022a0:	68 24 02 00 00       	push   0x224
100022a5:	53                   	push   ebx
100022a6:	e8 fc ff ff ff       	call   100022a7 <SoundBlaster16::open(int, int, void*)+0x2ab>	100022a7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022ab:	83 c4 10             	add    esp,0x10
100022ae:	31 c0                	xor    eax,eax
100022b0:	83 c4 14             	add    esp,0x14
100022b3:	5b                   	pop    ebx
100022b4:	5e                   	pop    esi
100022b5:	c3                   	ret    

100022b6 <SoundBlaster16::onInterrupt()>:
100022b6:	56                   	push   esi
100022b7:	53                   	push   ebx
100022b8:	53                   	push   ebx
100022b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100022bd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100022bf: R_386_32	outputBuffer
100022c3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100022c5: R_386_32	tempBuffer
100022c9:	68 00 20 00 00       	push   0x2000
100022ce:	56                   	push   esi
100022cf:	e8 fc ff ff ff       	call   100022d0 <SoundBlaster16::onInterrupt()+0x1a>	100022d0: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
100022d4:	83 c4 10             	add    esp,0x10
100022d7:	89 c3                	mov    ebx,eax
100022d9:	80 3d 1f 33 00 10 01 	cmp    BYTE PTR ds:0x1000331f,0x1	100022db: R_386_32	.data
100022e0:	53                   	push   ebx
100022e1:	19 c0                	sbb    eax,eax
100022e3:	25 00 20 00 00       	and    eax,0x2000
100022e8:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
100022ee:	50                   	push   eax
100022ef:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100022f1: R_386_32	outputBuffer
100022f5:	56                   	push   esi
100022f6:	e8 fc ff ff ff       	call   100022f7 <SoundBlaster16::onInterrupt()+0x41>	100022f7: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
100022fb:	83 c4 10             	add    esp,0x10
100022fe:	85 db                	test   ebx,ebx
10002300:	75 0c                	jne    1000230e <SoundBlaster16::onInterrupt()+0x58>
10002302:	51                   	push   ecx
10002303:	51                   	push   ecx
10002304:	6a 00                	push   0x0
10002306:	56                   	push   esi
10002307:	e8 fc ff ff ff       	call   10002308 <SoundBlaster16::onInterrupt()+0x52>	10002308: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000230c:	eb 3e                	jmp    1000234c <SoundBlaster16::onInterrupt()+0x96>
1000230e:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
10002314:	7f 39                	jg     1000234f <SoundBlaster16::onInterrupt()+0x99>
10002316:	52                   	push   edx
10002317:	6a 24                	push   0x24
10002319:	68 2c 02 00 00       	push   0x22c
1000231e:	56                   	push   esi
1000231f:	e8 fc ff ff ff       	call   10002320 <SoundBlaster16::onInterrupt()+0x6a>	10002320: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002324:	83 c4 0c             	add    esp,0xc
10002327:	8d 43 ff             	lea    eax,[ebx-0x1]
1000232a:	4b                   	dec    ebx
1000232b:	0f b6 c0             	movzx  eax,al
1000232e:	0f b6 df             	movzx  ebx,bh
10002331:	50                   	push   eax
10002332:	68 2c 02 00 00       	push   0x22c
10002337:	56                   	push   esi
10002338:	e8 fc ff ff ff       	call   10002339 <SoundBlaster16::onInterrupt()+0x83>	10002339: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000233d:	83 c4 0c             	add    esp,0xc
10002340:	53                   	push   ebx
10002341:	68 2c 02 00 00       	push   0x22c
10002346:	56                   	push   esi
10002347:	e8 fc ff ff ff       	call   10002348 <SoundBlaster16::onInterrupt()+0x92>	10002348: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000234c:	83 c4 10             	add    esp,0x10
1000234f:	80 35 1f 33 00 10 01 	xor    BYTE PTR ds:0x1000331f,0x1	10002351: R_386_32	.data
10002356:	58                   	pop    eax
10002357:	5b                   	pop    ebx
10002358:	5e                   	pop    esi
10002359:	c3                   	ret    

1000235a <SoundBlaster16::close(int, int, void*)>:
1000235a:	83 ec 0c             	sub    esp,0xc
1000235d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002361:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10002367:	85 c0                	test   eax,eax
10002369:	74 11                	je     1000237c <SoundBlaster16::close(int, int, void*)+0x22>
1000236b:	52                   	push   edx
1000236c:	52                   	push   edx
1000236d:	50                   	push   eax
1000236e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002370: R_386_32	isaDMAController
10002374:	e8 fc ff ff ff       	call   10002375 <SoundBlaster16::close(int, int, void*)+0x1b>	10002375: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10002379:	83 c4 10             	add    esp,0x10
1000237c:	31 c0                	xor    eax,eax
1000237e:	83 c4 0c             	add    esp,0xc
10002381:	c3                   	ret    

10002382 <ISA::~ISA()>:
10002382:	55                   	push   ebp
10002383:	89 e5                	mov    ebp,esp
10002385:	83 ec 08             	sub    esp,0x8
10002388:	ba 08 00 00 00       	mov    edx,0x8	10002389: R_386_32	vtable for ISA
1000238d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002390:	89 10                	mov    DWORD PTR [eax],edx
10002392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002395:	83 ec 0c             	sub    esp,0xc
10002398:	50                   	push   eax
10002399:	e8 fc ff ff ff       	call   1000239a <ISA::~ISA()+0x18>	1000239a: R_386_PC32	Bus::~Bus()
1000239e:	83 c4 10             	add    esp,0x10
100023a1:	90                   	nop
100023a2:	c9                   	leave  
100023a3:	c3                   	ret    

100023a4 <ISA::~ISA()>:
100023a4:	55                   	push   ebp
100023a5:	89 e5                	mov    ebp,esp
100023a7:	83 ec 08             	sub    esp,0x8
100023aa:	83 ec 0c             	sub    esp,0xc
100023ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023b0:	e8 fc ff ff ff       	call   100023b1 <ISA::~ISA()+0xd>	100023b1: R_386_PC32	ISA::~ISA()
100023b5:	83 c4 10             	add    esp,0x10
100023b8:	83 ec 08             	sub    esp,0x8
100023bb:	68 58 01 00 00       	push   0x158
100023c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023c3:	e8 fc ff ff ff       	call   100023c4 <ISA::~ISA()+0x20>	100023c4: R_386_PC32	operator delete(void*, unsigned long)
100023c8:	83 c4 10             	add    esp,0x10
100023cb:	c9                   	leave  
100023cc:	c3                   	ret    
100023cd:	90                   	nop

100023ce <DMA::~DMA()>:
100023ce:	55                   	push   ebp
100023cf:	89 e5                	mov    ebp,esp
100023d1:	83 ec 08             	sub    esp,0x8
100023d4:	ba 08 00 00 00       	mov    edx,0x8	100023d5: R_386_32	vtable for DMA
100023d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023dc:	89 10                	mov    DWORD PTR [eax],edx
100023de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023e1:	83 ec 0c             	sub    esp,0xc
100023e4:	50                   	push   eax
100023e5:	e8 fc ff ff ff       	call   100023e6 <DMA::~DMA()+0x18>	100023e6: R_386_PC32	Device::~Device()
100023ea:	83 c4 10             	add    esp,0x10
100023ed:	90                   	nop
100023ee:	c9                   	leave  
100023ef:	c3                   	ret    

100023f0 <DMA::~DMA()>:
100023f0:	55                   	push   ebp
100023f1:	89 e5                	mov    ebp,esp
100023f3:	83 ec 08             	sub    esp,0x8
100023f6:	83 ec 0c             	sub    esp,0xc
100023f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023fc:	e8 fc ff ff ff       	call   100023fd <DMA::~DMA()+0xd>	100023fd: R_386_PC32	DMA::~DMA()
10002401:	83 c4 10             	add    esp,0x10
10002404:	83 ec 08             	sub    esp,0x8
10002407:	68 5c 01 00 00       	push   0x15c
1000240c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000240f:	e8 fc ff ff ff       	call   10002410 <DMA::~DMA()+0x20>	10002410: R_386_PC32	operator delete(void*, unsigned long)
10002414:	83 c4 10             	add    esp,0x10
10002417:	c9                   	leave  
10002418:	c3                   	ret    
10002419:	90                   	nop

1000241a <PS2::~PS2()>:
1000241a:	55                   	push   ebp
1000241b:	89 e5                	mov    ebp,esp
1000241d:	83 ec 08             	sub    esp,0x8
10002420:	ba 08 00 00 00       	mov    edx,0x8	10002421: R_386_32	vtable for PS2
10002425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002428:	89 10                	mov    DWORD PTR [eax],edx
1000242a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000242d:	83 ec 0c             	sub    esp,0xc
10002430:	50                   	push   eax
10002431:	e8 fc ff ff ff       	call   10002432 <PS2::~PS2()+0x18>	10002432: R_386_PC32	Bus::~Bus()
10002436:	83 c4 10             	add    esp,0x10
10002439:	90                   	nop
1000243a:	c9                   	leave  
1000243b:	c3                   	ret    

1000243c <PS2::~PS2()>:
1000243c:	55                   	push   ebp
1000243d:	89 e5                	mov    ebp,esp
1000243f:	83 ec 08             	sub    esp,0x8
10002442:	83 ec 0c             	sub    esp,0xc
10002445:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002448:	e8 fc ff ff ff       	call   10002449 <PS2::~PS2()+0xd>	10002449: R_386_PC32	PS2::~PS2()
1000244d:	83 c4 10             	add    esp,0x10
10002450:	83 ec 08             	sub    esp,0x8
10002453:	68 60 01 00 00       	push   0x160
10002458:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000245b:	e8 fc ff ff ff       	call   1000245c <PS2::~PS2()+0x20>	1000245c: R_386_PC32	operator delete(void*, unsigned long)
10002460:	83 c4 10             	add    esp,0x10
10002463:	c9                   	leave  
10002464:	c3                   	ret    
10002465:	90                   	nop

10002466 <PS2Mouse::~PS2Mouse()>:
10002466:	55                   	push   ebp
10002467:	89 e5                	mov    ebp,esp
10002469:	83 ec 08             	sub    esp,0x8
1000246c:	ba 08 00 00 00       	mov    edx,0x8	1000246d: R_386_32	vtable for PS2Mouse
10002471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002474:	89 10                	mov    DWORD PTR [eax],edx
10002476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002479:	83 ec 0c             	sub    esp,0xc
1000247c:	50                   	push   eax
1000247d:	e8 fc ff ff ff       	call   1000247e <PS2Mouse::~PS2Mouse()+0x18>	1000247e: R_386_PC32	Mouse::~Mouse()
10002482:	83 c4 10             	add    esp,0x10
10002485:	90                   	nop
10002486:	c9                   	leave  
10002487:	c3                   	ret    

10002488 <PS2Mouse::~PS2Mouse()>:
10002488:	55                   	push   ebp
10002489:	89 e5                	mov    ebp,esp
1000248b:	83 ec 08             	sub    esp,0x8
1000248e:	83 ec 0c             	sub    esp,0xc
10002491:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002494:	e8 fc ff ff ff       	call   10002495 <PS2Mouse::~PS2Mouse()+0xd>	10002495: R_386_PC32	PS2Mouse::~PS2Mouse()
10002499:	83 c4 10             	add    esp,0x10
1000249c:	83 ec 08             	sub    esp,0x8
1000249f:	68 68 01 00 00       	push   0x168
100024a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024a7:	e8 fc ff ff ff       	call   100024a8 <PS2Mouse::~PS2Mouse()+0x20>	100024a8: R_386_PC32	operator delete(void*, unsigned long)
100024ac:	83 c4 10             	add    esp,0x10
100024af:	c9                   	leave  
100024b0:	c3                   	ret    
100024b1:	90                   	nop

100024b2 <PS2Port::~PS2Port()>:
100024b2:	55                   	push   ebp
100024b3:	89 e5                	mov    ebp,esp
100024b5:	83 ec 08             	sub    esp,0x8
100024b8:	ba 08 00 00 00       	mov    edx,0x8	100024b9: R_386_32	vtable for PS2Port
100024bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024c0:	89 10                	mov    DWORD PTR [eax],edx
100024c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024c5:	83 ec 0c             	sub    esp,0xc
100024c8:	50                   	push   eax
100024c9:	e8 fc ff ff ff       	call   100024ca <PS2Port::~PS2Port()+0x18>	100024ca: R_386_PC32	Bus::~Bus()
100024ce:	83 c4 10             	add    esp,0x10
100024d1:	90                   	nop
100024d2:	c9                   	leave  
100024d3:	c3                   	ret    

100024d4 <PS2Port::~PS2Port()>:
100024d4:	55                   	push   ebp
100024d5:	89 e5                	mov    ebp,esp
100024d7:	83 ec 08             	sub    esp,0x8
100024da:	83 ec 0c             	sub    esp,0xc
100024dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024e0:	e8 fc ff ff ff       	call   100024e1 <PS2Port::~PS2Port()+0xd>	100024e1: R_386_PC32	PS2Port::~PS2Port()
100024e5:	83 c4 10             	add    esp,0x10
100024e8:	83 ec 08             	sub    esp,0x8
100024eb:	68 60 01 00 00       	push   0x160
100024f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f3:	e8 fc ff ff ff       	call   100024f4 <PS2Port::~PS2Port()+0x20>	100024f4: R_386_PC32	operator delete(void*, unsigned long)
100024f8:	83 c4 10             	add    esp,0x10
100024fb:	c9                   	leave  
100024fc:	c3                   	ret    
100024fd:	90                   	nop

100024fe <SoundBlaster16::~SoundBlaster16()>:
100024fe:	55                   	push   ebp
100024ff:	89 e5                	mov    ebp,esp
10002501:	83 ec 08             	sub    esp,0x8
10002504:	ba 08 00 00 00       	mov    edx,0x8	10002505: R_386_32	vtable for SoundBlaster16
10002509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000250c:	89 10                	mov    DWORD PTR [eax],edx
1000250e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002511:	83 ec 0c             	sub    esp,0xc
10002514:	50                   	push   eax
10002515:	e8 fc ff ff ff       	call   10002516 <SoundBlaster16::~SoundBlaster16()+0x18>	10002516: R_386_PC32	SoundDevice::~SoundDevice()
1000251a:	83 c4 10             	add    esp,0x10
1000251d:	90                   	nop
1000251e:	c9                   	leave  
1000251f:	c3                   	ret    

10002520 <SoundBlaster16::~SoundBlaster16()>:
10002520:	55                   	push   ebp
10002521:	89 e5                	mov    ebp,esp
10002523:	83 ec 08             	sub    esp,0x8
10002526:	83 ec 0c             	sub    esp,0xc
10002529:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000252c:	e8 fc ff ff ff       	call   1000252d <SoundBlaster16::~SoundBlaster16()+0xd>	1000252d: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10002531:	83 c4 10             	add    esp,0x10
10002534:	83 ec 08             	sub    esp,0x8
10002537:	68 fc 01 00 00       	push   0x1fc
1000253c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000253f:	e8 fc ff ff ff       	call   10002540 <SoundBlaster16::~SoundBlaster16()+0x20>	10002540: R_386_PC32	operator delete(void*, unsigned long)
10002544:	83 c4 10             	add    esp,0x10
10002547:	c9                   	leave  
10002548:	c3                   	ret    
10002549:	66 90                	xchg   ax,ax
1000254b:	90                   	nop

1000254c <PHYS_RAM_TABLE_SIZE>:
1000254c:	13 05 00 00                                         ....

10002550 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002550:	24 05 00 00                                         $...

10002554 <PHYS_RAM_TABLE>:
10002554:	00 06 00 00                                         ....

10002558 <PHYS_DMA_MEMORY_1>:
10002558:	00 00 01 00                                         ....

1000255c <PHYS_PHYS_PAGE_BITMAP>:
1000255c:	00 00 02 00                                         ....

10002560 <PHYS_VIRT_PAGE_BITMAP>:
10002560:	00 00 04 00                                         ....

10002564 <PHYS_DMA_MEMORY_2>:
10002564:	00 00 06 00                                         ....

10002568 <PHYS_ALLOCED_VIRT_PAGES>:
10002568:	00 00 10 00                                         ....

1000256c <PHYS_KRNL_PAGE_DIRECTORY>:
1000256c:	00 10 00 00                                         ....

10002570 <VIRT_KERNEL_BASE>:
10002570:	00 00 00 c0                                         ....

10002574 <VIRT_LOW_MEGS>:
10002574:	00 00 00 c2                                         ....

10002578 <VIRT_CPU_SPECIFIC>:
10002578:	00 00 40 c2                                         ..@.

1000257c <VIRT_RECURSIVE_SPOT_1>:
1000257c:	00 00 80 c2                                         ....

10002580 <VIRT_RECURSIVE_SPOT_2>:
10002580:	00 00 c0 c2                                         ....

10002584 <VIRT_DMA_MEMORY_1>:
10002584:	00 00 01 c2                                         ....

10002588 <SIZE_DMA_MEMORY_1>:
10002588:	00 00 01 00                                         ....

1000258c <VIRT_DMA_MEMORY_2>:
1000258c:	00 00 06 c2                                         ....

10002590 <SIZE_DMA_MEMORY_2>:
10002590:	00 00 02 00                                         ....

10002594 <VIRT_KRNL_PAGE_DIRECTORY>:
10002594:	00 10 00 c2                                         ....

10002598 <VIRT_PHYS_PAGE_BITMAP>:
10002598:	00 00 02 c2                                         ....

1000259c <SIZE_PHYS_PAGE_BITMAP>:
1000259c:	00 00 02 00                                         ....

100025a0 <VIRT_VIRT_PAGE_BITMAP>:
100025a0:	00 00 04 c2                                         ....

100025a4 <SIZE_VIRT_PAGE_BITMAP>:
100025a4:	00 80 00 00                                         ....

100025a8 <VIRT_RAM_TABLE>:
100025a8:	00 06 00 c2                                         ....

100025ac <VIRT_RAM_TABLE_SIZE>:
100025ac:	13 05 00 c2                                         ....

100025b0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100025b0:	24 05 00 c2                                         $...

100025b4 <SIZE_APP_STACK_USER>:
100025b4:	00 00 18 00                                         ....

100025b8 <SIZE_APP_STACK_KRNL>:
100025b8:	00 00 08 00                                         ....

100025bc <SIZE_APP_STACK_TOTAL>:
100025bc:	00 00 20 00                                         .. .

100025c0 <VIRT_APP_DATA>:
100025c0:	00 00 00 10                                         ....

100025c4 <VIRT_APP_STACK_USER_TOP>:
100025c4:	00 00 00 02                                         ....

100025c8 <VIRT_APP_STACK_KRNL_TOP>:
100025c8:	00 00 e8 01                                         ....

100025cc <VIRT_HEAP_MIN>:
100025cc:	00 00 00 c8                                         ....

100025d0 <VIRT_HEAP_MAX>:
100025d0:	ff ff ff ef                                         ....

100025d4 <VIRT_SBRK_MIN>:
100025d4:	00 00 00 f0                                         ....

100025d8 <VIRT_SBRK_MAX>:
100025d8:	00 00 c0 ff                                         ....

100025dc <VIRT_ALLOCED_VIRT_PAGES>:
100025dc:	00 00 10 c2                                         ....

100025e0 <VIRT_ACPI_DRIVER>:
100025e0:	00 40 48 c2                                         .@H.

100025e4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100025e4:	96 00 00 00                                         ....

100025e8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100025e8:	2c 01 00 00 73 74 72 69 6e 67 20 74 65 73 74 2e     ,...string test.
100025f8:	0a 00 66 90                                         ..f.

100025fc <vtable for ISA>:
	...
	10002604: R_386_32	ISA::~ISA()
	10002608: R_386_32	ISA::~ISA()
	1000260c: R_386_32	ISA::open(int, int, void*)
	10002610: R_386_32	ISA::close(int, int, void*)
	10002614: R_386_32	Device::hibernate()
	10002618: R_386_32	Device::wake()
	1000261c: R_386_32	ISA::detect()
	10002620: R_386_32	Device::disableLegacy()
	10002624: R_386_32	Device::powerSaving(PowerSavingLevel)

10002628 <PHYS_RAM_TABLE_SIZE>:
10002628:	13 05 00 00                                         ....

1000262c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000262c:	24 05 00 00                                         $...

10002630 <PHYS_RAM_TABLE>:
10002630:	00 06 00 00                                         ....

10002634 <PHYS_DMA_MEMORY_1>:
10002634:	00 00 01 00                                         ....

10002638 <PHYS_PHYS_PAGE_BITMAP>:
10002638:	00 00 02 00                                         ....

1000263c <PHYS_VIRT_PAGE_BITMAP>:
1000263c:	00 00 04 00                                         ....

10002640 <PHYS_DMA_MEMORY_2>:
10002640:	00 00 06 00                                         ....

10002644 <PHYS_ALLOCED_VIRT_PAGES>:
10002644:	00 00 10 00                                         ....

10002648 <PHYS_KRNL_PAGE_DIRECTORY>:
10002648:	00 10 00 00                                         ....

1000264c <VIRT_KERNEL_BASE>:
1000264c:	00 00 00 c0                                         ....

10002650 <VIRT_LOW_MEGS>:
10002650:	00 00 00 c2                                         ....

10002654 <VIRT_CPU_SPECIFIC>:
10002654:	00 00 40 c2                                         ..@.

10002658 <VIRT_RECURSIVE_SPOT_1>:
10002658:	00 00 80 c2                                         ....

1000265c <VIRT_RECURSIVE_SPOT_2>:
1000265c:	00 00 c0 c2                                         ....

10002660 <VIRT_DMA_MEMORY_1>:
10002660:	00 00 01 c2                                         ....

10002664 <SIZE_DMA_MEMORY_1>:
10002664:	00 00 01 00                                         ....

10002668 <VIRT_DMA_MEMORY_2>:
10002668:	00 00 06 c2                                         ....

1000266c <SIZE_DMA_MEMORY_2>:
1000266c:	00 00 02 00                                         ....

10002670 <VIRT_KRNL_PAGE_DIRECTORY>:
10002670:	00 10 00 c2                                         ....

10002674 <VIRT_PHYS_PAGE_BITMAP>:
10002674:	00 00 02 c2                                         ....

10002678 <SIZE_PHYS_PAGE_BITMAP>:
10002678:	00 00 02 00                                         ....

1000267c <VIRT_VIRT_PAGE_BITMAP>:
1000267c:	00 00 04 c2                                         ....

10002680 <SIZE_VIRT_PAGE_BITMAP>:
10002680:	00 80 00 00                                         ....

10002684 <VIRT_RAM_TABLE>:
10002684:	00 06 00 c2                                         ....

10002688 <VIRT_RAM_TABLE_SIZE>:
10002688:	13 05 00 c2                                         ....

1000268c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000268c:	24 05 00 c2                                         $...

10002690 <SIZE_APP_STACK_USER>:
10002690:	00 00 18 00                                         ....

10002694 <SIZE_APP_STACK_KRNL>:
10002694:	00 00 08 00                                         ....

10002698 <SIZE_APP_STACK_TOTAL>:
10002698:	00 00 20 00                                         .. .

1000269c <VIRT_APP_DATA>:
1000269c:	00 00 00 10                                         ....

100026a0 <VIRT_APP_STACK_USER_TOP>:
100026a0:	00 00 00 02                                         ....

100026a4 <VIRT_APP_STACK_KRNL_TOP>:
100026a4:	00 00 e8 01                                         ....

100026a8 <VIRT_HEAP_MIN>:
100026a8:	00 00 00 c8                                         ....

100026ac <VIRT_HEAP_MAX>:
100026ac:	ff ff ff ef                                         ....

100026b0 <VIRT_SBRK_MIN>:
100026b0:	00 00 00 f0                                         ....

100026b4 <VIRT_SBRK_MAX>:
100026b4:	00 00 c0 ff                                         ....

100026b8 <VIRT_ALLOCED_VIRT_PAGES>:
100026b8:	00 00 10 c2                                         ....

100026bc <VIRT_ACPI_DRIVER>:
100026bc:	00 40 48 c2                                         .@H.

100026c0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100026c0:	96 00 00 00                                         ....

100026c4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100026c4:	2c 01 00 00                                         ,...

100026c8 <CSWTCH.8>:
100026c8:	00 02 04 06 c0 c4 c8 cc                             ........

100026d0 <CSWTCH.9>:
100026d0:	01 03 05 07 c2 c6 ca ce                             ........

100026d8 <CSWTCH.10>:
100026d8:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
100026e8:	61 6e 67 65 2e 0a 00 90                             ange....

100026f0 <vtable for DMA>:
	...
	100026f8: R_386_32	DMA::~DMA()
	100026fc: R_386_32	DMA::~DMA()
	10002700: R_386_32	DMA::open(int, int, void*)
	10002704: R_386_32	DMA::close(int, int, void*)
	10002708: R_386_32	Device::hibernate()
	1000270c: R_386_32	Device::wake()
	10002710: R_386_32	Device::detect()
	10002714: R_386_32	Device::disableLegacy()
	10002718: R_386_32	Device::powerSaving(PowerSavingLevel)

1000271c <PHYS_RAM_TABLE_SIZE>:
1000271c:	13 05 00 00                                         ....

10002720 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002720:	24 05 00 00                                         $...

10002724 <PHYS_RAM_TABLE>:
10002724:	00 06 00 00                                         ....

10002728 <PHYS_DMA_MEMORY_1>:
10002728:	00 00 01 00                                         ....

1000272c <PHYS_PHYS_PAGE_BITMAP>:
1000272c:	00 00 02 00                                         ....

10002730 <PHYS_VIRT_PAGE_BITMAP>:
10002730:	00 00 04 00                                         ....

10002734 <PHYS_DMA_MEMORY_2>:
10002734:	00 00 06 00                                         ....

10002738 <PHYS_ALLOCED_VIRT_PAGES>:
10002738:	00 00 10 00                                         ....

1000273c <PHYS_KRNL_PAGE_DIRECTORY>:
1000273c:	00 10 00 00                                         ....

10002740 <VIRT_KERNEL_BASE>:
10002740:	00 00 00 c0                                         ....

10002744 <VIRT_LOW_MEGS>:
10002744:	00 00 00 c2                                         ....

10002748 <VIRT_CPU_SPECIFIC>:
10002748:	00 00 40 c2                                         ..@.

1000274c <VIRT_RECURSIVE_SPOT_1>:
1000274c:	00 00 80 c2                                         ....

10002750 <VIRT_RECURSIVE_SPOT_2>:
10002750:	00 00 c0 c2                                         ....

10002754 <VIRT_DMA_MEMORY_1>:
10002754:	00 00 01 c2                                         ....

10002758 <SIZE_DMA_MEMORY_1>:
10002758:	00 00 01 00                                         ....

1000275c <VIRT_DMA_MEMORY_2>:
1000275c:	00 00 06 c2                                         ....

10002760 <SIZE_DMA_MEMORY_2>:
10002760:	00 00 02 00                                         ....

10002764 <VIRT_KRNL_PAGE_DIRECTORY>:
10002764:	00 10 00 c2                                         ....

10002768 <VIRT_PHYS_PAGE_BITMAP>:
10002768:	00 00 02 c2                                         ....

1000276c <SIZE_PHYS_PAGE_BITMAP>:
1000276c:	00 00 02 00                                         ....

10002770 <VIRT_VIRT_PAGE_BITMAP>:
10002770:	00 00 04 c2                                         ....

10002774 <SIZE_VIRT_PAGE_BITMAP>:
10002774:	00 80 00 00                                         ....

10002778 <VIRT_RAM_TABLE>:
10002778:	00 06 00 c2                                         ....

1000277c <VIRT_RAM_TABLE_SIZE>:
1000277c:	13 05 00 c2                                         ....

10002780 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002780:	24 05 00 c2                                         $...

10002784 <SIZE_APP_STACK_USER>:
10002784:	00 00 18 00                                         ....

10002788 <SIZE_APP_STACK_KRNL>:
10002788:	00 00 08 00                                         ....

1000278c <SIZE_APP_STACK_TOTAL>:
1000278c:	00 00 20 00                                         .. .

10002790 <VIRT_APP_DATA>:
10002790:	00 00 00 10                                         ....

10002794 <VIRT_APP_STACK_USER_TOP>:
10002794:	00 00 00 02                                         ....

10002798 <VIRT_APP_STACK_KRNL_TOP>:
10002798:	00 00 e8 01                                         ....

1000279c <VIRT_HEAP_MIN>:
1000279c:	00 00 00 c8                                         ....

100027a0 <VIRT_HEAP_MAX>:
100027a0:	ff ff ff ef                                         ....

100027a4 <VIRT_SBRK_MIN>:
100027a4:	00 00 00 f0                                         ....

100027a8 <VIRT_SBRK_MAX>:
100027a8:	00 00 c0 ff                                         ....

100027ac <VIRT_ALLOCED_VIRT_PAGES>:
100027ac:	00 00 10 c2                                         ....

100027b0 <VIRT_ACPI_DRIVER>:
100027b0:	00 40 48 c2                                         .@H.

100027b4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100027b4:	96 00 00 00                                         ....

100027b8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100027b8:	2c 01 00 00                                         ,...

100027bc <vtable for PS2>:
	...
	100027c4: R_386_32	PS2::~PS2()
	100027c8: R_386_32	PS2::~PS2()
	100027cc: R_386_32	PS2::open(int, int, void*)
	100027d0: R_386_32	PS2::close(int, int, void*)
	100027d4: R_386_32	Device::hibernate()
	100027d8: R_386_32	Device::wake()
	100027dc: R_386_32	PS2::detect()
	100027e0: R_386_32	Device::disableLegacy()
	100027e4: R_386_32	Device::powerSaving(PowerSavingLevel)
100027e8:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
100027f8:	66 90 66 90 66 90 66 90                             f.f.f.f.

10002800 <PHYS_RAM_TABLE_SIZE>:
10002800:	13 05 00 00                                         ....

10002804 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002804:	24 05 00 00                                         $...

10002808 <PHYS_RAM_TABLE>:
10002808:	00 06 00 00                                         ....

1000280c <PHYS_DMA_MEMORY_1>:
1000280c:	00 00 01 00                                         ....

10002810 <PHYS_PHYS_PAGE_BITMAP>:
10002810:	00 00 02 00                                         ....

10002814 <PHYS_VIRT_PAGE_BITMAP>:
10002814:	00 00 04 00                                         ....

10002818 <PHYS_DMA_MEMORY_2>:
10002818:	00 00 06 00                                         ....

1000281c <PHYS_ALLOCED_VIRT_PAGES>:
1000281c:	00 00 10 00                                         ....

10002820 <PHYS_KRNL_PAGE_DIRECTORY>:
10002820:	00 10 00 00                                         ....

10002824 <VIRT_KERNEL_BASE>:
10002824:	00 00 00 c0                                         ....

10002828 <VIRT_LOW_MEGS>:
10002828:	00 00 00 c2                                         ....

1000282c <VIRT_CPU_SPECIFIC>:
1000282c:	00 00 40 c2                                         ..@.

10002830 <VIRT_RECURSIVE_SPOT_1>:
10002830:	00 00 80 c2                                         ....

10002834 <VIRT_RECURSIVE_SPOT_2>:
10002834:	00 00 c0 c2                                         ....

10002838 <VIRT_DMA_MEMORY_1>:
10002838:	00 00 01 c2                                         ....

1000283c <SIZE_DMA_MEMORY_1>:
1000283c:	00 00 01 00                                         ....

10002840 <VIRT_DMA_MEMORY_2>:
10002840:	00 00 06 c2                                         ....

10002844 <SIZE_DMA_MEMORY_2>:
10002844:	00 00 02 00                                         ....

10002848 <VIRT_KRNL_PAGE_DIRECTORY>:
10002848:	00 10 00 c2                                         ....

1000284c <VIRT_PHYS_PAGE_BITMAP>:
1000284c:	00 00 02 c2                                         ....

10002850 <SIZE_PHYS_PAGE_BITMAP>:
10002850:	00 00 02 00                                         ....

10002854 <VIRT_VIRT_PAGE_BITMAP>:
10002854:	00 00 04 c2                                         ....

10002858 <SIZE_VIRT_PAGE_BITMAP>:
10002858:	00 80 00 00                                         ....

1000285c <VIRT_RAM_TABLE>:
1000285c:	00 06 00 c2                                         ....

10002860 <VIRT_RAM_TABLE_SIZE>:
10002860:	13 05 00 c2                                         ....

10002864 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002864:	24 05 00 c2                                         $...

10002868 <SIZE_APP_STACK_USER>:
10002868:	00 00 18 00                                         ....

1000286c <SIZE_APP_STACK_KRNL>:
1000286c:	00 00 08 00                                         ....

10002870 <SIZE_APP_STACK_TOTAL>:
10002870:	00 00 20 00                                         .. .

10002874 <VIRT_APP_DATA>:
10002874:	00 00 00 10                                         ....

10002878 <VIRT_APP_STACK_USER_TOP>:
10002878:	00 00 00 02                                         ....

1000287c <VIRT_APP_STACK_KRNL_TOP>:
1000287c:	00 00 e8 01                                         ....

10002880 <VIRT_HEAP_MIN>:
10002880:	00 00 00 c8                                         ....

10002884 <VIRT_HEAP_MAX>:
10002884:	ff ff ff ef                                         ....

10002888 <VIRT_SBRK_MIN>:
10002888:	00 00 00 f0                                         ....

1000288c <VIRT_SBRK_MAX>:
1000288c:	00 00 c0 ff                                         ....

10002890 <VIRT_ALLOCED_VIRT_PAGES>:
10002890:	00 00 10 c2                                         ....

10002894 <VIRT_ACPI_DRIVER>:
10002894:	00 40 48 c2                                         .@H.

10002898 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002898:	96 00 00 00                                         ....

1000289c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000289c:	2c 01 00 00                                         ,...

100028a0 <PS2Keyboard::internalMapperLower>:
100028a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100028b0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100028c0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100028d0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100028e0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100028f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002900:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002910:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002920:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100029a0 <PS2Keyboard::internalMapperUpper>:
100029a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100029b0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100029c0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100029d0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100029e0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100029f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002a00:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002a10:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002a20:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002aa0 <PS2Keyboard::internalMapCapLower>:
10002aa0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002ab0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10002ac0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10002ad0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10002ae0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10002af0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002b00:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002b10:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002b20:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10002ba0 <PS2Keyboard::internalMapCapUpper>:
10002ba0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10002bb0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10002bc0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10002bd0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10002be0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10002bf0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002c00:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002c10:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002c20:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002ca0 <PS2Keyboard::internalMapperLowerBad>:
10002ca0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002cb0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10002cc0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10002cd0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10002ce0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002cf0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002d00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d20:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002d30:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10002d40:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10002d50:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10002d60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002d70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002d80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002da0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002db0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10002dc0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10002dd0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10002de0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002df0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002e00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e20:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002e30:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10002e40:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10002e50:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10002e60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002e70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002e80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002ea0:	00 66 90 90                                         .f..

10002ea4 <vtable for PS2Keyboard>:
	...
	10002eac: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002eb0: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002eb4: R_386_32	PS2Keyboard::open(int, int, void*)
	10002eb8: R_386_32	PS2Keyboard::close(int, int, void*)
	10002ebc: R_386_32	Device::hibernate()
	10002ec0: R_386_32	Device::wake()
	10002ec4: R_386_32	Device::detect()
	10002ec8: R_386_32	Device::disableLegacy()
	10002ecc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002ed0: R_386_32	PS2Keyboard::setRepeatRate(int)
	10002ed4: R_386_32	PS2Keyboard::setRepeatDelay(int)

10002ed8 <PHYS_RAM_TABLE_SIZE>:
10002ed8:	13 05 00 00                                         ....

10002edc <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002edc:	24 05 00 00                                         $...

10002ee0 <PHYS_RAM_TABLE>:
10002ee0:	00 06 00 00                                         ....

10002ee4 <PHYS_DMA_MEMORY_1>:
10002ee4:	00 00 01 00                                         ....

10002ee8 <PHYS_PHYS_PAGE_BITMAP>:
10002ee8:	00 00 02 00                                         ....

10002eec <PHYS_VIRT_PAGE_BITMAP>:
10002eec:	00 00 04 00                                         ....

10002ef0 <PHYS_DMA_MEMORY_2>:
10002ef0:	00 00 06 00                                         ....

10002ef4 <PHYS_ALLOCED_VIRT_PAGES>:
10002ef4:	00 00 10 00                                         ....

10002ef8 <PHYS_KRNL_PAGE_DIRECTORY>:
10002ef8:	00 10 00 00                                         ....

10002efc <VIRT_KERNEL_BASE>:
10002efc:	00 00 00 c0                                         ....

10002f00 <VIRT_LOW_MEGS>:
10002f00:	00 00 00 c2                                         ....

10002f04 <VIRT_CPU_SPECIFIC>:
10002f04:	00 00 40 c2                                         ..@.

10002f08 <VIRT_RECURSIVE_SPOT_1>:
10002f08:	00 00 80 c2                                         ....

10002f0c <VIRT_RECURSIVE_SPOT_2>:
10002f0c:	00 00 c0 c2                                         ....

10002f10 <VIRT_DMA_MEMORY_1>:
10002f10:	00 00 01 c2                                         ....

10002f14 <SIZE_DMA_MEMORY_1>:
10002f14:	00 00 01 00                                         ....

10002f18 <VIRT_DMA_MEMORY_2>:
10002f18:	00 00 06 c2                                         ....

10002f1c <SIZE_DMA_MEMORY_2>:
10002f1c:	00 00 02 00                                         ....

10002f20 <VIRT_KRNL_PAGE_DIRECTORY>:
10002f20:	00 10 00 c2                                         ....

10002f24 <VIRT_PHYS_PAGE_BITMAP>:
10002f24:	00 00 02 c2                                         ....

10002f28 <SIZE_PHYS_PAGE_BITMAP>:
10002f28:	00 00 02 00                                         ....

10002f2c <VIRT_VIRT_PAGE_BITMAP>:
10002f2c:	00 00 04 c2                                         ....

10002f30 <SIZE_VIRT_PAGE_BITMAP>:
10002f30:	00 80 00 00                                         ....

10002f34 <VIRT_RAM_TABLE>:
10002f34:	00 06 00 c2                                         ....

10002f38 <VIRT_RAM_TABLE_SIZE>:
10002f38:	13 05 00 c2                                         ....

10002f3c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002f3c:	24 05 00 c2                                         $...

10002f40 <SIZE_APP_STACK_USER>:
10002f40:	00 00 18 00                                         ....

10002f44 <SIZE_APP_STACK_KRNL>:
10002f44:	00 00 08 00                                         ....

10002f48 <SIZE_APP_STACK_TOTAL>:
10002f48:	00 00 20 00                                         .. .

10002f4c <VIRT_APP_DATA>:
10002f4c:	00 00 00 10                                         ....

10002f50 <VIRT_APP_STACK_USER_TOP>:
10002f50:	00 00 00 02                                         ....

10002f54 <VIRT_APP_STACK_KRNL_TOP>:
10002f54:	00 00 e8 01                                         ....

10002f58 <VIRT_HEAP_MIN>:
10002f58:	00 00 00 c8                                         ....

10002f5c <VIRT_HEAP_MAX>:
10002f5c:	ff ff ff ef                                         ....

10002f60 <VIRT_SBRK_MIN>:
10002f60:	00 00 00 f0                                         ....

10002f64 <VIRT_SBRK_MAX>:
10002f64:	00 00 c0 ff                                         ....

10002f68 <VIRT_ALLOCED_VIRT_PAGES>:
10002f68:	00 00 10 c2                                         ....

10002f6c <VIRT_ACPI_DRIVER>:
10002f6c:	00 40 48 c2                                         .@H.

10002f70 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002f70:	96 00 00 00                                         ....

10002f74 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002f74:	2c 01 00 00                                         ,...

10002f78 <vtable for PS2Mouse>:
	...
	10002f80: R_386_32	PS2Mouse::~PS2Mouse()
	10002f84: R_386_32	PS2Mouse::~PS2Mouse()
	10002f88: R_386_32	PS2Mouse::open(int, int, void*)
	10002f8c: R_386_32	PS2Mouse::close(int, int, void*)
	10002f90: R_386_32	Device::hibernate()
	10002f94: R_386_32	Device::wake()
	10002f98: R_386_32	PS2Mouse::detect()
	10002f9c: R_386_32	Device::disableLegacy()
	10002fa0: R_386_32	Device::powerSaving(PowerSavingLevel)

10002fa4 <PHYS_RAM_TABLE_SIZE>:
10002fa4:	13 05 00 00                                         ....

10002fa8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002fa8:	24 05 00 00                                         $...

10002fac <PHYS_RAM_TABLE>:
10002fac:	00 06 00 00                                         ....

10002fb0 <PHYS_DMA_MEMORY_1>:
10002fb0:	00 00 01 00                                         ....

10002fb4 <PHYS_PHYS_PAGE_BITMAP>:
10002fb4:	00 00 02 00                                         ....

10002fb8 <PHYS_VIRT_PAGE_BITMAP>:
10002fb8:	00 00 04 00                                         ....

10002fbc <PHYS_DMA_MEMORY_2>:
10002fbc:	00 00 06 00                                         ....

10002fc0 <PHYS_ALLOCED_VIRT_PAGES>:
10002fc0:	00 00 10 00                                         ....

10002fc4 <PHYS_KRNL_PAGE_DIRECTORY>:
10002fc4:	00 10 00 00                                         ....

10002fc8 <VIRT_KERNEL_BASE>:
10002fc8:	00 00 00 c0                                         ....

10002fcc <VIRT_LOW_MEGS>:
10002fcc:	00 00 00 c2                                         ....

10002fd0 <VIRT_CPU_SPECIFIC>:
10002fd0:	00 00 40 c2                                         ..@.

10002fd4 <VIRT_RECURSIVE_SPOT_1>:
10002fd4:	00 00 80 c2                                         ....

10002fd8 <VIRT_RECURSIVE_SPOT_2>:
10002fd8:	00 00 c0 c2                                         ....

10002fdc <VIRT_DMA_MEMORY_1>:
10002fdc:	00 00 01 c2                                         ....

10002fe0 <SIZE_DMA_MEMORY_1>:
10002fe0:	00 00 01 00                                         ....

10002fe4 <VIRT_DMA_MEMORY_2>:
10002fe4:	00 00 06 c2                                         ....

10002fe8 <SIZE_DMA_MEMORY_2>:
10002fe8:	00 00 02 00                                         ....

10002fec <VIRT_KRNL_PAGE_DIRECTORY>:
10002fec:	00 10 00 c2                                         ....

10002ff0 <VIRT_PHYS_PAGE_BITMAP>:
10002ff0:	00 00 02 c2                                         ....

10002ff4 <SIZE_PHYS_PAGE_BITMAP>:
10002ff4:	00 00 02 00                                         ....

10002ff8 <VIRT_VIRT_PAGE_BITMAP>:
10002ff8:	00 00 04 c2                                         ....

10002ffc <SIZE_VIRT_PAGE_BITMAP>:
10002ffc:	00 80 00 00                                         ....

10003000 <VIRT_RAM_TABLE>:
10003000:	00 06 00 c2                                         ....

10003004 <VIRT_RAM_TABLE_SIZE>:
10003004:	13 05 00 c2                                         ....

10003008 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10003008:	24 05 00 c2                                         $...

1000300c <SIZE_APP_STACK_USER>:
1000300c:	00 00 18 00                                         ....

10003010 <SIZE_APP_STACK_KRNL>:
10003010:	00 00 08 00                                         ....

10003014 <SIZE_APP_STACK_TOTAL>:
10003014:	00 00 20 00                                         .. .

10003018 <VIRT_APP_DATA>:
10003018:	00 00 00 10                                         ....

1000301c <VIRT_APP_STACK_USER_TOP>:
1000301c:	00 00 00 02                                         ....

10003020 <VIRT_APP_STACK_KRNL_TOP>:
10003020:	00 00 e8 01                                         ....

10003024 <VIRT_HEAP_MIN>:
10003024:	00 00 00 c8                                         ....

10003028 <VIRT_HEAP_MAX>:
10003028:	ff ff ff ef                                         ....

1000302c <VIRT_SBRK_MIN>:
1000302c:	00 00 00 f0                                         ....

10003030 <VIRT_SBRK_MAX>:
10003030:	00 00 c0 ff                                         ....

10003034 <VIRT_ALLOCED_VIRT_PAGES>:
10003034:	00 00 10 c2                                         ....

10003038 <VIRT_ACPI_DRIVER>:
10003038:	00 40 48 c2                                         .@H.

1000303c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000303c:	96 00 00 00                                         ....

10003040 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10003040:	2c 01 00 00                                         ,...

10003044 <vtable for PS2Port>:
	...
	1000304c: R_386_32	PS2Port::~PS2Port()
	10003050: R_386_32	PS2Port::~PS2Port()
	10003054: R_386_32	PS2Port::open(int, int, void*)
	10003058: R_386_32	PS2Port::close(int, int, void*)
	1000305c: R_386_32	Device::hibernate()
	10003060: R_386_32	Device::wake()
	10003064: R_386_32	PS2Port::detect()
	10003068: R_386_32	Device::disableLegacy()
	1000306c: R_386_32	Device::powerSaving(PowerSavingLevel)

10003070 <PHYS_RAM_TABLE_SIZE>:
10003070:	13 05 00 00                                         ....

10003074 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003074:	24 05 00 00                                         $...

10003078 <PHYS_RAM_TABLE>:
10003078:	00 06 00 00                                         ....

1000307c <PHYS_DMA_MEMORY_1>:
1000307c:	00 00 01 00                                         ....

10003080 <PHYS_PHYS_PAGE_BITMAP>:
10003080:	00 00 02 00                                         ....

10003084 <PHYS_VIRT_PAGE_BITMAP>:
10003084:	00 00 04 00                                         ....

10003088 <PHYS_DMA_MEMORY_2>:
10003088:	00 00 06 00                                         ....

1000308c <PHYS_ALLOCED_VIRT_PAGES>:
1000308c:	00 00 10 00                                         ....

10003090 <PHYS_KRNL_PAGE_DIRECTORY>:
10003090:	00 10 00 00                                         ....

10003094 <VIRT_KERNEL_BASE>:
10003094:	00 00 00 c0                                         ....

10003098 <VIRT_LOW_MEGS>:
10003098:	00 00 00 c2                                         ....

1000309c <VIRT_CPU_SPECIFIC>:
1000309c:	00 00 40 c2                                         ..@.

100030a0 <VIRT_RECURSIVE_SPOT_1>:
100030a0:	00 00 80 c2                                         ....

100030a4 <VIRT_RECURSIVE_SPOT_2>:
100030a4:	00 00 c0 c2                                         ....

100030a8 <VIRT_DMA_MEMORY_1>:
100030a8:	00 00 01 c2                                         ....

100030ac <SIZE_DMA_MEMORY_1>:
100030ac:	00 00 01 00                                         ....

100030b0 <VIRT_DMA_MEMORY_2>:
100030b0:	00 00 06 c2                                         ....

100030b4 <SIZE_DMA_MEMORY_2>:
100030b4:	00 00 02 00                                         ....

100030b8 <VIRT_KRNL_PAGE_DIRECTORY>:
100030b8:	00 10 00 c2                                         ....

100030bc <VIRT_PHYS_PAGE_BITMAP>:
100030bc:	00 00 02 c2                                         ....

100030c0 <SIZE_PHYS_PAGE_BITMAP>:
100030c0:	00 00 02 00                                         ....

100030c4 <VIRT_VIRT_PAGE_BITMAP>:
100030c4:	00 00 04 c2                                         ....

100030c8 <SIZE_VIRT_PAGE_BITMAP>:
100030c8:	00 80 00 00                                         ....

100030cc <VIRT_RAM_TABLE>:
100030cc:	00 06 00 c2                                         ....

100030d0 <VIRT_RAM_TABLE_SIZE>:
100030d0:	13 05 00 c2                                         ....

100030d4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100030d4:	24 05 00 c2                                         $...

100030d8 <SIZE_APP_STACK_USER>:
100030d8:	00 00 18 00                                         ....

100030dc <SIZE_APP_STACK_KRNL>:
100030dc:	00 00 08 00                                         ....

100030e0 <SIZE_APP_STACK_TOTAL>:
100030e0:	00 00 20 00                                         .. .

100030e4 <VIRT_APP_DATA>:
100030e4:	00 00 00 10                                         ....

100030e8 <VIRT_APP_STACK_USER_TOP>:
100030e8:	00 00 00 02                                         ....

100030ec <VIRT_APP_STACK_KRNL_TOP>:
100030ec:	00 00 e8 01                                         ....

100030f0 <VIRT_HEAP_MIN>:
100030f0:	00 00 00 c8                                         ....

100030f4 <VIRT_HEAP_MAX>:
100030f4:	ff ff ff ef                                         ....

100030f8 <VIRT_SBRK_MIN>:
100030f8:	00 00 00 f0                                         ....

100030fc <VIRT_SBRK_MAX>:
100030fc:	00 00 c0 ff                                         ....

10003100 <VIRT_ALLOCED_VIRT_PAGES>:
10003100:	00 00 10 c2                                         ....

10003104 <VIRT_ACPI_DRIVER>:
10003104:	00 40 48 c2                                         .@H.

10003108 <TERMINAL_KEYBUFFER_IN_SIZE>:
10003108:	96 00 00 00                                         ....

1000310c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000310c:	2c 01 00 00                                         ,...

10003110 <vtable for SoundBlaster16>:
	...
	10003118: R_386_32	SoundBlaster16::~SoundBlaster16()
	1000311c: R_386_32	SoundBlaster16::~SoundBlaster16()
	10003120: R_386_32	SoundBlaster16::open(int, int, void*)
	10003124: R_386_32	SoundBlaster16::close(int, int, void*)
	10003128: R_386_32	Device::hibernate()
	1000312c: R_386_32	Device::wake()
	10003130: R_386_32	Device::detect()
	10003134: R_386_32	Device::disableLegacy()
	10003138: R_386_32	Device::powerSaving(PowerSavingLevel)
	1000313c: R_386_32	SoundBlaster16::getNumHwChannels()
	10003140: R_386_32	SoundBlaster16::beginPlayback(int, int)
	10003144: R_386_32	SoundBlaster16::stopPlayback()
