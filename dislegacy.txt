
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 fc 23 00 10       	push   0x100023fc	1000001c: R_386_32	.text
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	kprintf(char const*, ...)
10000025:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
1000002c:	e8 fc ff ff ff       	call   1000002d <realstart(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	89 04 24             	mov    DWORD PTR [esp],eax
10000034:	89 c3                	mov    ebx,eax
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	ISA::ISA()
1000003b:	58                   	pop    eax
1000003c:	5a                   	pop    edx
1000003d:	53                   	push   ebx
1000003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000042:	e8 fc ff ff ff       	call   10000043 <realstart(void*)+0x2c>	10000043: R_386_PC32	Device::addChild(Device*)
10000047:	6a 00                	push   0x0
10000049:	8b 03                	mov    eax,DWORD PTR [ebx]
1000004b:	6a 00                	push   0x0
1000004d:	6a 00                	push   0x0
1000004f:	53                   	push   ebx
10000050:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000053:	83 c4 28             	add    esp,0x28
10000056:	5b                   	pop    ebx
10000057:	c3                   	ret    

10000058 <ISA::ISA()>:
10000058:	55                   	push   ebp
10000059:	89 e5                	mov    ebp,esp
1000005b:	83 ec 08             	sub    esp,0x8
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	83 ec 08             	sub    esp,0x8
10000064:	68 00 00 00 00       	push   0x0	10000065: R_386_32	busname
10000069:	50                   	push   eax
1000006a:	e8 fc ff ff ff       	call   1000006b <ISA::ISA()+0x13>	1000006b: R_386_PC32	Bus::Bus(char const*)
1000006f:	83 c4 10             	add    esp,0x10
10000072:	ba 08 00 00 00       	mov    edx,0x8	10000073: R_386_32	vtable for ISA
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	89 10                	mov    DWORD PTR [eax],edx
1000007c:	90                   	nop
1000007d:	c9                   	leave  
1000007e:	c3                   	ret    
1000007f:	90                   	nop

10000080 <ISA::open(int, int, void*)>:
10000080:	83 ec 18             	sub    esp,0x18
10000083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	50                   	push   eax
1000008a:	ff 52 18             	call   DWORD PTR [edx+0x18]
1000008d:	31 c0                	xor    eax,eax
1000008f:	83 c4 1c             	add    esp,0x1c
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::close(int, int, void*)>:
10000094:	31 c0                	xor    eax,eax
10000096:	c3                   	ret    
10000097:	90                   	nop

10000098 <ISA::doSpeaker()>:
10000098:	c3                   	ret    
10000099:	90                   	nop

1000009a <ISA::doSoundblaster()>:
1000009a:	c3                   	ret    
1000009b:	90                   	nop

1000009c <ISA::doSerial()>:
1000009c:	c3                   	ret    
1000009d:	90                   	nop

1000009e <ISA::doParallel()>:
1000009e:	c3                   	ret    
1000009f:	90                   	nop

100000a0 <ISA::doGameport()>:
100000a0:	c3                   	ret    
100000a1:	90                   	nop

100000a2 <ISA::doFloppy()>:
100000a2:	c3                   	ret    
100000a3:	90                   	nop

100000a4 <ISA::doATA()>:
100000a4:	c3                   	ret    
100000a5:	90                   	nop

100000a6 <ISA::doPS2()>:
100000a6:	53                   	push   ebx
100000a7:	83 ec 14             	sub    esp,0x14
100000aa:	68 00 00 00 00       	push   0x0	100000ab: R_386_32	str_ps2
100000af:	e8 fc ff ff ff       	call   100000b0 <ISA::doPS2()+0xa>	100000b0: R_386_PC32	kprintf(char const*, ...)
100000b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000b7: R_386_32	str_ps2
100000bb:	e8 fc ff ff ff       	call   100000bc <ISA::doPS2()+0x16>	100000bc: R_386_PC32	kprintf(char const*, ...)
100000c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000c3: R_386_32	str_ps2
100000c7:	e8 fc ff ff ff       	call   100000c8 <ISA::doPS2()+0x22>	100000c8: R_386_PC32	kprintf(char const*, ...)
100000cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000cf: R_386_32	str_ps2
100000d3:	e8 fc ff ff ff       	call   100000d4 <ISA::doPS2()+0x2e>	100000d4: R_386_PC32	kprintf(char const*, ...)
100000d8:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
100000df:	e8 fc ff ff ff       	call   100000e0 <ISA::doPS2()+0x3a>	100000e0: R_386_PC32	operator new(unsigned long)
100000e4:	89 04 24             	mov    DWORD PTR [esp],eax
100000e7:	89 c3                	mov    ebx,eax
100000e9:	e8 fc ff ff ff       	call   100000ea <ISA::doPS2()+0x44>	100000ea: R_386_PC32	PS2::PS2()
100000ee:	58                   	pop    eax
100000ef:	5a                   	pop    edx
100000f0:	53                   	push   ebx
100000f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f5:	e8 fc ff ff ff       	call   100000f6 <ISA::doPS2()+0x50>	100000f6: R_386_PC32	Device::addChild(Device*)
100000fa:	6a 00                	push   0x0
100000fc:	8b 03                	mov    eax,DWORD PTR [ebx]
100000fe:	6a 00                	push   0x0
10000100:	6a 00                	push   0x0
10000102:	53                   	push   ebx
10000103:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	90                   	nop

1000010c <ISA::doRTC()>:
1000010c:	53                   	push   ebx
1000010d:	83 ec 14             	sub    esp,0x14
10000110:	a1 00 00 00 00       	mov    eax,ds:0x0	10000111: R_386_32	computer
10000115:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
1000011f:	68 60 01 00 00       	push   0x160
10000124:	e8 fc ff ff ff       	call   10000125 <ISA::doRTC()+0x19>	10000125: R_386_PC32	operator new(unsigned long)
10000129:	89 04 24             	mov    DWORD PTR [esp],eax
1000012c:	89 c3                	mov    ebx,eax
1000012e:	e8 fc ff ff ff       	call   1000012f <ISA::doRTC()+0x23>	1000012f: R_386_PC32	RTC::RTC()
10000133:	58                   	pop    eax
10000134:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
1000013e:	5a                   	pop    edx
1000013f:	53                   	push   ebx
10000140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000144:	e8 fc ff ff ff       	call   10000145 <ISA::doRTC()+0x39>	10000145: R_386_PC32	Device::addChild(Device*)
10000149:	6a 00                	push   0x0
1000014b:	8b 03                	mov    eax,DWORD PTR [ebx]
1000014d:	6a 00                	push   0x0
1000014f:	6a 00                	push   0x0
10000151:	53                   	push   ebx
10000152:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000155:	a1 00 00 00 00       	mov    eax,ds:0x0	10000156: R_386_32	computer
1000015a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000160:	83 c4 28             	add    esp,0x28
10000163:	5b                   	pop    ebx
10000164:	c3                   	ret    
10000165:	90                   	nop

10000166 <ISA::detect()>:
10000166:	57                   	push   edi
10000167:	56                   	push   esi
10000168:	53                   	push   ebx
10000169:	83 ec 2c             	sub    esp,0x2c
1000016c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000170:	68 5c 01 00 00       	push   0x15c
10000175:	e8 fc ff ff ff       	call   10000176 <ISA::detect()+0x10>	10000176: R_386_PC32	operator new(unsigned long)
1000017a:	89 04 24             	mov    DWORD PTR [esp],eax
1000017d:	89 c3                	mov    ebx,eax
1000017f:	e8 fc ff ff ff       	call   10000180 <ISA::detect()+0x1a>	10000180: R_386_PC32	DMA::DMA()
10000184:	59                   	pop    ecx
10000185:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000187: R_386_32	isaDMAController
1000018b:	5e                   	pop    esi
1000018c:	53                   	push   ebx
1000018d:	57                   	push   edi
1000018e:	e8 fc ff ff ff       	call   1000018f <ISA::detect()+0x29>	1000018f: R_386_PC32	Device::addChild(Device*)
10000193:	a1 00 00 00 00       	mov    eax,ds:0x0	10000194: R_386_32	isaDMAController
10000198:	8b 10                	mov    edx,DWORD PTR [eax]
1000019a:	6a 00                	push   0x0
1000019c:	6a 00                	push   0x0
1000019e:	6a 00                	push   0x0
100001a0:	50                   	push   eax
100001a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001a4:	83 c4 20             	add    esp,0x20
100001a7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001a9: R_386_32	detectDone
100001ae:	0f 85 db 00 00 00    	jne    1000028f <ISA::detect()+0x129>
100001b4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001b6: R_386_32	detectDone
100001bb:	31 db                	xor    ebx,ebx
100001bd:	52                   	push   edx
100001be:	6a 01                	push   0x1
100001c0:	68 00 00 00 00       	push   0x0	100001c1: R_386_32	str_isadonesafe
100001c5:	68 00 00 00 00       	push   0x0	100001c6: R_386_32	str_isa
100001ca:	e8 fc ff ff ff       	call   100001cb <ISA::detect()+0x65>	100001cb: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001cf:	83 c4 10             	add    esp,0x10
100001d2:	50                   	push   eax
100001d3:	50                   	push   eax
100001d4:	68 00 00 00 00       	push   0x0	100001d5: R_386_32	str_devices
100001d9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001dd:	56                   	push   esi
100001de:	e8 fc ff ff ff       	call   100001df <ISA::detect()+0x79>	100001df: R_386_PC32	strcpy
100001e3:	83 c4 10             	add    esp,0x10
100001e6:	85 db                	test   ebx,ebx
100001e8:	75 09                	jne    100001f3 <ISA::detect()+0x8d>
100001ea:	50                   	push   eax
100001eb:	50                   	push   eax
100001ec:	68 00 00 00 00       	push   0x0	100001ed: R_386_32	str_spk
100001f1:	eb 52                	jmp    10000245 <ISA::detect()+0xdf>
100001f3:	83 fb 01             	cmp    ebx,0x1
100001f6:	75 09                	jne    10000201 <ISA::detect()+0x9b>
100001f8:	50                   	push   eax
100001f9:	50                   	push   eax
100001fa:	68 00 00 00 00       	push   0x0	100001fb: R_386_32	str_rtc
100001ff:	eb 44                	jmp    10000245 <ISA::detect()+0xdf>
10000201:	83 fb 02             	cmp    ebx,0x2
10000204:	75 09                	jne    1000020f <ISA::detect()+0xa9>
10000206:	50                   	push   eax
10000207:	50                   	push   eax
10000208:	68 00 00 00 00       	push   0x0	10000209: R_386_32	str_ps2
1000020d:	eb 36                	jmp    10000245 <ISA::detect()+0xdf>
1000020f:	83 fb 03             	cmp    ebx,0x3
10000212:	75 09                	jne    1000021d <ISA::detect()+0xb7>
10000214:	50                   	push   eax
10000215:	50                   	push   eax
10000216:	68 00 00 00 00       	push   0x0	10000217: R_386_32	str_floppy
1000021b:	eb 28                	jmp    10000245 <ISA::detect()+0xdf>
1000021d:	83 fb 04             	cmp    ebx,0x4
10000220:	75 09                	jne    1000022b <ISA::detect()+0xc5>
10000222:	50                   	push   eax
10000223:	50                   	push   eax
10000224:	68 00 00 00 00       	push   0x0	10000225: R_386_32	str_sb16
10000229:	eb 1a                	jmp    10000245 <ISA::detect()+0xdf>
1000022b:	83 fb 05             	cmp    ebx,0x5
1000022e:	75 09                	jne    10000239 <ISA::detect()+0xd3>
10000230:	51                   	push   ecx
10000231:	51                   	push   ecx
10000232:	68 00 00 00 00       	push   0x0	10000233: R_386_32	str_isaata
10000237:	eb 0c                	jmp    10000245 <ISA::detect()+0xdf>
10000239:	83 fb 06             	cmp    ebx,0x6
1000023c:	75 10                	jne    1000024e <ISA::detect()+0xe8>
1000023e:	52                   	push   edx
1000023f:	52                   	push   edx
10000240:	68 00 00 00 00       	push   0x0	10000241: R_386_32	str_gp
10000245:	56                   	push   esi
10000246:	e8 fc ff ff ff       	call   10000247 <ISA::detect()+0xe1>	10000247: R_386_PC32	strcat
1000024b:	83 c4 10             	add    esp,0x10
1000024e:	50                   	push   eax
1000024f:	6a ff                	push   0xffffffff
10000251:	56                   	push   esi
10000252:	68 00 00 00 00       	push   0x0	10000253: R_386_32	str_isa
10000257:	e8 fc ff ff ff       	call   10000258 <ISA::detect()+0xf2>	10000258: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000025c:	83 c4 10             	add    esp,0x10
1000025f:	83 f8 fe             	cmp    eax,0xfffffffe
10000262:	74 21                	je     10000285 <ISA::detect()+0x11f>
10000264:	83 fb 01             	cmp    ebx,0x1
10000267:	75 0b                	jne    10000274 <ISA::detect()+0x10e>
10000269:	83 ec 0c             	sub    esp,0xc
1000026c:	57                   	push   edi
1000026d:	e8 fc ff ff ff       	call   1000026e <ISA::detect()+0x108>	1000026e: R_386_PC32	ISA::doRTC()
10000272:	eb 0e                	jmp    10000282 <ISA::detect()+0x11c>
10000274:	83 fb 02             	cmp    ebx,0x2
10000277:	75 0c                	jne    10000285 <ISA::detect()+0x11f>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	57                   	push   edi
1000027d:	e8 fc ff ff ff       	call   1000027e <ISA::detect()+0x118>	1000027e: R_386_PC32	ISA::doPS2()
10000282:	83 c4 10             	add    esp,0x10
10000285:	43                   	inc    ebx
10000286:	83 fb 07             	cmp    ebx,0x7
10000289:	0f 85 43 ff ff ff    	jne    100001d2 <ISA::detect()+0x6c>
1000028f:	83 c4 20             	add    esp,0x20
10000292:	5b                   	pop    ebx
10000293:	5e                   	pop    esi
10000294:	5f                   	pop    edi
10000295:	c3                   	ret    

10000296 <DMAChannel::DMAChannel(int)>:
10000296:	55                   	push   ebp
10000297:	89 e5                	mov    ebp,esp
10000299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002b3:	89 10                	mov    DWORD PTR [eax],edx
100002b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002c2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100002d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d3:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100002d7:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100002db:	0f 9f c2             	setg   dl
100002de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e1:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100002e4:	90                   	nop
100002e5:	5d                   	pop    ebp
100002e6:	c3                   	ret    
100002e7:	90                   	nop

100002e8 <DMAChannel::~DMAChannel()>:
100002e8:	55                   	push   ebp
100002e9:	89 e5                	mov    ebp,esp
100002eb:	83 ec 08             	sub    esp,0x8
100002ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100002f4:	85 c0                	test   eax,eax
100002f6:	74 19                	je     10000311 <DMAChannel::~DMAChannel()+0x29>
100002f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fb:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100002fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000301:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000304:	83 ec 08             	sub    esp,0x8
10000307:	52                   	push   edx
10000308:	50                   	push   eax
10000309:	e8 fc ff ff ff       	call   1000030a <DMAChannel::~DMAChannel()+0x22>	1000030a: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
1000030e:	83 c4 10             	add    esp,0x10
10000311:	90                   	nop
10000312:	c9                   	leave  
10000313:	c3                   	ret    

10000314 <DMAChannel::getAddress()>:
10000314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000318:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000031b:	c3                   	ret    

1000031c <DMAChannel::getChannelNum()>:
1000031c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000320:	8b 00                	mov    eax,DWORD PTR [eax]
10000322:	c3                   	ret    
10000323:	90                   	nop

10000324 <DMAChannel::setLength(unsigned int)>:
10000324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000328:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000032c:	3d 00 00 01 00       	cmp    eax,0x10000
10000331:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10000334:	76 0d                	jbe    10000343 <DMAChannel::setLength(unsigned int)+0x1f>
10000336:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000033a: R_386_32	dmaLong
1000033e:	e9 fc ff ff ff       	jmp    1000033f <DMAChannel::setLength(unsigned int)+0x1b>	1000033f: R_386_PC32	panic(char const*)
10000343:	c3                   	ret    

10000344 <DMAChannel::setAddress(unsigned int)>:
10000344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000348:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000034c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000034f:	c3                   	ret    

10000350 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10000350:	56                   	push   esi
10000351:	53                   	push   ebx
10000352:	83 ec 10             	sub    esp,0x10
10000355:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000359:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
1000035e:	56                   	push   esi
1000035f:	e8 fc ff ff ff       	call   10000360 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10000360: R_386_PC32	Phys::allocateDMA(unsigned long)
10000364:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10000367:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000036a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000036d:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10000370:	83 c4 14             	add    esp,0x14
10000373:	5b                   	pop    ebx
10000374:	5e                   	pop    esi
10000375:	c3                   	ret    

10000376 <DMAChannel::setMode(unsigned char)>:
10000376:	53                   	push   ebx
10000377:	83 ec 08             	sub    esp,0x8
1000037a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000037e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000382:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10000386:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10000389:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
1000038d:	74 2a                	je     100003b9 <DMAChannel::setMode(unsigned char)+0x43>
1000038f:	51                   	push   ecx
10000390:	51                   	push   ecx
10000391:	6a 01                	push   0x1
10000393:	53                   	push   ebx
10000394:	e8 fc ff ff ff       	call   10000395 <DMAChannel::setMode(unsigned char)+0x1f>	10000395: R_386_PC32	DMAChannel::mask(bool)
10000399:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
1000039d:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
100003a0:	19 d2                	sbb    edx,edx
100003a2:	80 e2 35             	and    dl,0x35
100003a5:	81 c2 d6 00 00 00    	add    edx,0xd6
100003ab:	ee                   	out    dx,al
100003ac:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100003b0:	83 c4 18             	add    esp,0x18
100003b3:	5b                   	pop    ebx
100003b4:	e9 ff 00 00 00       	jmp    100004b8 <DMAChannel::unmask()>
100003b9:	83 c4 08             	add    esp,0x8
100003bc:	5b                   	pop    ebx
100003bd:	c3                   	ret    

100003be <DMAChannel::start()>:
100003be:	57                   	push   edi
100003bf:	56                   	push   esi
100003c0:	53                   	push   ebx
100003c1:	83 ec 10             	sub    esp,0x10
100003c4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100003c8:	8b 06                	mov    eax,DWORD PTR [esi]
100003ca:	83 f8 07             	cmp    eax,0x7
100003cd:	0f 87 96 00 00 00    	ja     10000469 <DMAChannel::start()+0xab>
100003d3:	8a 98 d8 24 00 10    	mov    bl,BYTE PTR [eax+0x100024d8]	100003d5: R_386_32	.text
100003d9:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100003dd:	8a 98 e0 24 00 10    	mov    bl,BYTE PTR [eax+0x100024e0]	100003df: R_386_32	.text
100003e3:	8a 80 e8 24 00 10    	mov    al,BYTE PTR [eax+0x100024e8]	100003e5: R_386_32	.text
100003e9:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
100003ed:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
100003f1:	e8 fc ff ff ff       	call   100003f2 <DMAChannel::start()+0x34>	100003f2: R_386_PC32	lockScheduler()
100003f6:	50                   	push   eax
100003f7:	50                   	push   eax
100003f8:	6a 01                	push   0x1
100003fa:	56                   	push   esi
100003fb:	e8 fc ff ff ff       	call   100003fc <DMAChannel::start()+0x3e>	100003fc: R_386_PC32	DMAChannel::mask(bool)
10000400:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10000403:	83 c4 10             	add    esp,0x10
10000406:	80 fb 01             	cmp    bl,0x1
10000409:	19 c9                	sbb    ecx,ecx
1000040b:	31 ff                	xor    edi,edi
1000040d:	80 e1 34             	and    cl,0x34
10000410:	89 f8                	mov    eax,edi
10000412:	81 c1 d8 00 00 00    	add    ecx,0xd8
10000418:	89 ca                	mov    edx,ecx
1000041a:	ee                   	out    dx,al
1000041b:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10000420:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10000423:	ee                   	out    dx,al
10000424:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000427:	c1 e8 08             	shr    eax,0x8
1000042a:	ee                   	out    dx,al
1000042b:	89 f8                	mov    eax,edi
1000042d:	89 ca                	mov    edx,ecx
1000042f:	ee                   	out    dx,al
10000430:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000433:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10000438:	8d 41 ff             	lea    eax,[ecx-0x1]
1000043b:	ee                   	out    dx,al
1000043c:	8d 41 ff             	lea    eax,[ecx-0x1]
1000043f:	c1 e8 08             	shr    eax,0x8
10000442:	ee                   	out    dx,al
10000443:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000446:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
1000044b:	c1 e8 10             	shr    eax,0x10
1000044e:	ee                   	out    dx,al
1000044f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10000453:	74 27                	je     1000047c <DMAChannel::start()+0xbe>
10000455:	80 fb 01             	cmp    bl,0x1
10000458:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
1000045b:	19 d2                	sbb    edx,edx
1000045d:	80 e2 35             	and    dl,0x35
10000460:	81 c2 d6 00 00 00    	add    edx,0xd6
10000466:	ee                   	out    dx,al
10000467:	eb 13                	jmp    1000047c <DMAChannel::start()+0xbe>
10000469:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000046d: R_386_32	dmaConfused
10000471:	83 c4 10             	add    esp,0x10
10000474:	5b                   	pop    ebx
10000475:	5e                   	pop    esi
10000476:	5f                   	pop    edi
10000477:	e9 fc ff ff ff       	jmp    10000478 <DMAChannel::start()+0xba>	10000478: R_386_PC32	panic(char const*)
1000047c:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10000480:	83 ec 0c             	sub    esp,0xc
10000483:	56                   	push   esi
10000484:	e8 fc ff ff ff       	call   10000485 <DMAChannel::start()+0xc7>	10000485: R_386_PC32	DMAChannel::unmask()
10000489:	83 c4 20             	add    esp,0x20
1000048c:	5b                   	pop    ebx
1000048d:	5e                   	pop    esi
1000048e:	5f                   	pop    edi
1000048f:	e9 fc ff ff ff       	jmp    10000490 <DMAChannel::start()+0xd2>	10000490: R_386_PC32	unlockScheduler()

10000494 <DMAChannel::stop()>:
10000494:	c3                   	ret    
10000495:	90                   	nop

10000496 <DMAChannel::mask(bool)>:
10000496:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
1000049b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000049f:	0f 95 c0             	setne  al
100004a2:	c1 e0 02             	shl    eax,0x2
100004a5:	0b 02                	or     eax,DWORD PTR [edx]
100004a7:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
100004ab:	19 d2                	sbb    edx,edx
100004ad:	80 e2 36             	and    dl,0x36
100004b0:	81 c2 d4 00 00 00    	add    edx,0xd4
100004b6:	ee                   	out    dx,al
100004b7:	c3                   	ret    

100004b8 <DMAChannel::unmask()>:
100004b8:	6a 00                	push   0x0
100004ba:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100004be:	e8 fc ff ff ff       	call   100004bf <DMAChannel::unmask()+0x7>	100004bf: R_386_PC32	DMAChannel::mask(bool)
100004c3:	58                   	pop    eax
100004c4:	5a                   	pop    edx
100004c5:	c3                   	ret    

100004c6 <DMA::DMA()>:
100004c6:	55                   	push   ebp
100004c7:	89 e5                	mov    ebp,esp
100004c9:	83 ec 08             	sub    esp,0x8
100004cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004cf:	83 ec 08             	sub    esp,0x8
100004d2:	68 00 00 00 00       	push   0x0	100004d3: R_386_32	dmaCtrlName
100004d7:	50                   	push   eax
100004d8:	e8 fc ff ff ff       	call   100004d9 <DMA::DMA()+0x13>	100004d9: R_386_PC32	Device::Device(char const*)
100004dd:	83 c4 10             	add    esp,0x10
100004e0:	ba 08 00 00 00       	mov    edx,0x8	100004e1: R_386_32	vtable for DMA
100004e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e8:	89 10                	mov    DWORD PTR [eax],edx
100004ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100004f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100004fd:	0f b6 d0             	movzx  edx,al
10000500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000503:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
1000050a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000513:	0f b6 d0             	movzx  edx,al
10000516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000519:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
1000051e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000521:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000527:	8d 50 01             	lea    edx,[eax+0x1]
1000052a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000052d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000533:	0f b6 d0             	movzx  edx,al
10000536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000539:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000053d:	83 e1 3f             	and    ecx,0x3f
10000540:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000547:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000054d:	0f b6 d0             	movzx  edx,al
10000550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000553:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
1000055a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000563:	0f b6 d0             	movzx  edx,al
10000566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000569:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
1000056e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000571:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000577:	8d 50 01             	lea    edx,[eax+0x1]
1000057a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000057d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000583:	0f b6 d0             	movzx  edx,al
10000586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000589:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000058d:	83 e1 3f             	and    ecx,0x3f
10000590:	83 c9 40             	or     ecx,0x40
10000593:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005a0:	0f b6 d0             	movzx  edx,al
100005a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a6:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
100005ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005b6:	0f b6 d0             	movzx  edx,al
100005b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bc:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100005c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005ca:	8d 50 01             	lea    edx,[eax+0x1]
100005cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005d0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005d6:	0f b6 d0             	movzx  edx,al
100005d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005dc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005e0:	83 e1 3f             	and    ecx,0x3f
100005e3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005f0:	0f b6 d0             	movzx  edx,al
100005f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f6:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100005fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000600:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000606:	0f b6 d0             	movzx  edx,al
10000609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000614:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000061a:	8d 50 01             	lea    edx,[eax+0x1]
1000061d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000620:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000626:	0f b6 d0             	movzx  edx,al
10000629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000630:	83 e1 3f             	and    ecx,0x3f
10000633:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000640:	0f b6 d0             	movzx  edx,al
10000643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000646:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
1000064d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000656:	0f b6 d0             	movzx  edx,al
10000659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065c:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000664:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000066a:	8d 50 01             	lea    edx,[eax+0x1]
1000066d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000670:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000676:	0f b6 d0             	movzx  edx,al
10000679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000680:	83 e1 3f             	and    ecx,0x3f
10000683:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000068a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000690:	0f b6 d0             	movzx  edx,al
10000693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000696:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
1000069d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006a6:	0f b6 d0             	movzx  edx,al
100006a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ac:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100006b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006ba:	8d 50 01             	lea    edx,[eax+0x1]
100006bd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006c6:	0f b6 d0             	movzx  edx,al
100006c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006d0:	83 e1 3f             	and    ecx,0x3f
100006d3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006d7:	90                   	nop
100006d8:	c9                   	leave  
100006d9:	c3                   	ret    

100006da <DMA::getAvailable()>:
100006da:	53                   	push   ebx
100006db:	31 db                	xor    ebx,ebx
100006dd:	83 ec 08             	sub    esp,0x8
100006e0:	e8 fc ff ff ff       	call   100006e1 <DMA::getAvailable()+0x7>	100006e1: R_386_PC32	lockScheduler()
100006e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100006e9:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
100006f0:	0f a3 d8             	bt     eax,ebx
100006f3:	73 07                	jae    100006fc <DMA::getAvailable()+0x22>
100006f5:	e8 fc ff ff ff       	call   100006f6 <DMA::getAvailable()+0x1c>	100006f6: R_386_PC32	unlockScheduler()
100006fa:	eb 0e                	jmp    1000070a <DMA::getAvailable()+0x30>
100006fc:	43                   	inc    ebx
100006fd:	83 fb 08             	cmp    ebx,0x8
10000700:	75 ee                	jne    100006f0 <DMA::getAvailable()+0x16>
10000702:	e8 fc ff ff ff       	call   10000703 <DMA::getAvailable()+0x29>	10000703: R_386_PC32	unlockScheduler()
10000707:	83 cb ff             	or     ebx,0xffffffff
1000070a:	89 d8                	mov    eax,ebx
1000070c:	83 c4 08             	add    esp,0x8
1000070f:	5b                   	pop    ebx
10000710:	c3                   	ret    
10000711:	90                   	nop

10000712 <DMA::open(int, int, void*)>:
10000712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000716:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
1000071d:	31 c0                	xor    eax,eax
1000071f:	e6 0d                	out    0xd,al
10000721:	e6 da                	out    0xda,al
10000723:	31 c0                	xor    eax,eax
10000725:	c3                   	ret    

10000726 <DMA::close(int, int, void*)>:
10000726:	31 c0                	xor    eax,eax
10000728:	c3                   	ret    
10000729:	90                   	nop

1000072a <DMA::tryLockChannelWithBase(int)>:
1000072a:	56                   	push   esi
1000072b:	53                   	push   ebx
1000072c:	83 ec 14             	sub    esp,0x14
1000072f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000733:	e8 fc ff ff ff       	call   10000734 <DMA::tryLockChannelWithBase(int)+0xa>	10000734: R_386_PC32	lockScheduler()
10000738:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000073c:	8d 43 03             	lea    eax,[ebx+0x3]
1000073f:	39 d8                	cmp    eax,ebx
10000741:	7c 47                	jl     1000078a <DMA::tryLockChannelWithBase(int)+0x60>
10000743:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
1000074a:	89 ca                	mov    edx,ecx
1000074c:	0f a3 d9             	bt     ecx,ebx
1000074f:	73 36                	jae    10000787 <DMA::tryLockChannelWithBase(int)+0x5d>
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	88 d9                	mov    cl,bl
10000756:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000075b:	d3 c0                	rol    eax,cl
1000075d:	21 d0                	and    eax,edx
1000075f:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000765:	6a 18                	push   0x18
10000767:	e8 fc ff ff ff       	call   10000768 <DMA::tryLockChannelWithBase(int)+0x3e>	10000768: R_386_PC32	operator new(unsigned long)
1000076c:	5a                   	pop    edx
1000076d:	59                   	pop    ecx
1000076e:	53                   	push   ebx
1000076f:	50                   	push   eax
10000770:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000774:	e8 fc ff ff ff       	call   10000775 <DMA::tryLockChannelWithBase(int)+0x4b>	10000775: R_386_PC32	DMAChannel::DMAChannel(int)
10000779:	e8 fc ff ff ff       	call   1000077a <DMA::tryLockChannelWithBase(int)+0x50>	1000077a: R_386_PC32	unlockScheduler()
1000077e:	83 c4 10             	add    esp,0x10
10000781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000785:	eb 0a                	jmp    10000791 <DMA::tryLockChannelWithBase(int)+0x67>
10000787:	43                   	inc    ebx
10000788:	eb b5                	jmp    1000073f <DMA::tryLockChannelWithBase(int)+0x15>
1000078a:	e8 fc ff ff ff       	call   1000078b <DMA::tryLockChannelWithBase(int)+0x61>	1000078b: R_386_PC32	unlockScheduler()
1000078f:	31 c0                	xor    eax,eax
10000791:	83 c4 14             	add    esp,0x14
10000794:	5b                   	pop    ebx
10000795:	5e                   	pop    esi
10000796:	c3                   	ret    
10000797:	90                   	nop

10000798 <DMA::lockChannelWithBase(int)>:
10000798:	83 ec 0c             	sub    esp,0xc
1000079b:	50                   	push   eax
1000079c:	50                   	push   eax
1000079d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007a5:	e8 fc ff ff ff       	call   100007a6 <DMA::lockChannelWithBase(int)+0xe>	100007a6: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007aa:	83 c4 10             	add    esp,0x10
100007ad:	85 c0                	test   eax,eax
100007af:	74 ea                	je     1000079b <DMA::lockChannelWithBase(int)+0x3>
100007b1:	83 c4 0c             	add    esp,0xc
100007b4:	c3                   	ret    
100007b5:	90                   	nop

100007b6 <DMA::tryLockChannel8()>:
100007b6:	83 ec 14             	sub    esp,0x14
100007b9:	6a 00                	push   0x0
100007bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007bf:	e8 fc ff ff ff       	call   100007c0 <DMA::tryLockChannel8()+0xa>	100007c0: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007c4:	83 c4 1c             	add    esp,0x1c
100007c7:	c3                   	ret    

100007c8 <DMA::tryLockChannel16()>:
100007c8:	83 ec 14             	sub    esp,0x14
100007cb:	6a 04                	push   0x4
100007cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007d1:	e8 fc ff ff ff       	call   100007d2 <DMA::tryLockChannel16()+0xa>	100007d2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007d6:	83 c4 1c             	add    esp,0x1c
100007d9:	c3                   	ret    

100007da <DMA::tryLockChannel(int)>:
100007da:	56                   	push   esi
100007db:	53                   	push   ebx
100007dc:	83 ec 14             	sub    esp,0x14
100007df:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100007e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100007e7:	83 fb 07             	cmp    ebx,0x7
100007ea:	76 12                	jbe    100007fe <DMA::tryLockChannel(int)+0x24>
100007ec:	83 ec 0c             	sub    esp,0xc
100007ef:	68 f0 24 00 10       	push   0x100024f0	100007f0: R_386_32	.text
100007f4:	e8 fc ff ff ff       	call   100007f5 <DMA::tryLockChannel(int)+0x1b>	100007f5: R_386_PC32	kprintf(char const*, ...)
100007f9:	83 c4 10             	add    esp,0x10
100007fc:	eb 4e                	jmp    1000084c <DMA::tryLockChannel(int)+0x72>
100007fe:	e8 fc ff ff ff       	call   100007ff <DMA::tryLockChannel(int)+0x25>	100007ff: R_386_PC32	lockScheduler()
10000803:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
1000080a:	89 c2                	mov    edx,eax
1000080c:	0f a3 d8             	bt     eax,ebx
1000080f:	73 36                	jae    10000847 <DMA::tryLockChannel(int)+0x6d>
10000811:	83 ec 0c             	sub    esp,0xc
10000814:	88 d9                	mov    cl,bl
10000816:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000081b:	d3 c0                	rol    eax,cl
1000081d:	21 d0                	and    eax,edx
1000081f:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000825:	6a 18                	push   0x18
10000827:	e8 fc ff ff ff       	call   10000828 <DMA::tryLockChannel(int)+0x4e>	10000828: R_386_PC32	operator new(unsigned long)
1000082c:	5a                   	pop    edx
1000082d:	59                   	pop    ecx
1000082e:	53                   	push   ebx
1000082f:	50                   	push   eax
10000830:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000834:	e8 fc ff ff ff       	call   10000835 <DMA::tryLockChannel(int)+0x5b>	10000835: R_386_PC32	DMAChannel::DMAChannel(int)
10000839:	e8 fc ff ff ff       	call   1000083a <DMA::tryLockChannel(int)+0x60>	1000083a: R_386_PC32	unlockScheduler()
1000083e:	83 c4 10             	add    esp,0x10
10000841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000845:	eb 07                	jmp    1000084e <DMA::tryLockChannel(int)+0x74>
10000847:	e8 fc ff ff ff       	call   10000848 <DMA::tryLockChannel(int)+0x6e>	10000848: R_386_PC32	unlockScheduler()
1000084c:	31 c0                	xor    eax,eax
1000084e:	83 c4 14             	add    esp,0x14
10000851:	5b                   	pop    ebx
10000852:	5e                   	pop    esi
10000853:	c3                   	ret    

10000854 <DMA::lockChannel8()>:
10000854:	83 ec 14             	sub    esp,0x14
10000857:	6a 00                	push   0x0
10000859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000085d:	e8 fc ff ff ff       	call   1000085e <DMA::lockChannel8()+0xa>	1000085e: R_386_PC32	DMA::lockChannelWithBase(int)
10000862:	83 c4 1c             	add    esp,0x1c
10000865:	c3                   	ret    

10000866 <DMA::lockChannel16()>:
10000866:	83 ec 14             	sub    esp,0x14
10000869:	6a 04                	push   0x4
1000086b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000086f:	e8 fc ff ff ff       	call   10000870 <DMA::lockChannel16()+0xa>	10000870: R_386_PC32	DMA::lockChannelWithBase(int)
10000874:	83 c4 1c             	add    esp,0x1c
10000877:	c3                   	ret    

10000878 <DMA::lockChannel(int)>:
10000878:	83 ec 0c             	sub    esp,0xc
1000087b:	50                   	push   eax
1000087c:	50                   	push   eax
1000087d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000885:	e8 fc ff ff ff       	call   10000886 <DMA::lockChannel(int)+0xe>	10000886: R_386_PC32	DMA::tryLockChannel(int)
1000088a:	83 c4 10             	add    esp,0x10
1000088d:	85 c0                	test   eax,eax
1000088f:	74 ea                	je     1000087b <DMA::lockChannel(int)+0x3>
10000891:	83 c4 0c             	add    esp,0xc
10000894:	c3                   	ret    
10000895:	90                   	nop

10000896 <DMA::unlockChannel(DMAChannel*)>:
10000896:	56                   	push   esi
10000897:	53                   	push   ebx
10000898:	53                   	push   ebx
10000899:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000089d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100008a1:	85 db                	test   ebx,ebx
100008a3:	75 10                	jne    100008b5 <DMA::unlockChannel(DMAChannel*)+0x1f>
100008a5:	83 ec 0c             	sub    esp,0xc
100008a8:	68 00 00 00 00       	push   0x0	100008a9: R_386_32	badDma
100008ad:	e8 fc ff ff ff       	call   100008ae <DMA::unlockChannel(DMAChannel*)+0x18>	100008ae: R_386_PC32	panic(char const*)
100008b2:	83 c4 10             	add    esp,0x10
100008b5:	e8 fc ff ff ff       	call   100008b6 <DMA::unlockChannel(DMAChannel*)+0x20>	100008b6: R_386_PC32	lockScheduler()
100008ba:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100008c1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100008c3:	89 d0                	mov    eax,edx
100008c5:	0f a3 ca             	bt     edx,ecx
100008c8:	72 24                	jb     100008ee <DMA::unlockChannel(DMAChannel*)+0x58>
100008ca:	83 ec 0c             	sub    esp,0xc
100008cd:	ba 01 00 00 00       	mov    edx,0x1
100008d2:	d3 e2                	shl    edx,cl
100008d4:	09 d0                	or     eax,edx
100008d6:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100008dc:	53                   	push   ebx
100008dd:	e8 fc ff ff ff       	call   100008de <DMA::unlockChannel(DMAChannel*)+0x48>	100008de: R_386_PC32	DMAChannel::~DMAChannel()
100008e2:	5a                   	pop    edx
100008e3:	59                   	pop    ecx
100008e4:	6a 18                	push   0x18
100008e6:	53                   	push   ebx
100008e7:	e8 fc ff ff ff       	call   100008e8 <DMA::unlockChannel(DMAChannel*)+0x52>	100008e8: R_386_PC32	operator delete(void*, unsigned long)
100008ec:	eb 0d                	jmp    100008fb <DMA::unlockChannel(DMAChannel*)+0x65>
100008ee:	83 ec 0c             	sub    esp,0xc
100008f1:	68 00 00 00 00       	push   0x0	100008f2: R_386_32	badBook
100008f6:	e8 fc ff ff ff       	call   100008f7 <DMA::unlockChannel(DMAChannel*)+0x61>	100008f7: R_386_PC32	panic(char const*)
100008fb:	83 c4 10             	add    esp,0x10
100008fe:	58                   	pop    eax
100008ff:	5b                   	pop    ebx
10000900:	5e                   	pop    esi
10000901:	e9 fc ff ff ff       	jmp    10000902 <DMA::unlockChannel(DMAChannel*)+0x6c>	10000902: R_386_PC32	unlockScheduler()

10000906 <PS2::PS2()>:
10000906:	55                   	push   ebp
10000907:	89 e5                	mov    ebp,esp
10000909:	83 ec 08             	sub    esp,0x8
1000090c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000090f:	83 ec 08             	sub    esp,0x8
10000912:	68 00 00 00 00       	push   0x0	10000913: R_386_32	ps2ctrlname
10000917:	50                   	push   eax
10000918:	e8 fc ff ff ff       	call   10000919 <PS2::PS2()+0x13>	10000919: R_386_PC32	Bus::Bus(char const*)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	ba 08 00 00 00       	mov    edx,0x8	10000921: R_386_32	vtable for PS2
10000925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000928:	89 10                	mov    DWORD PTR [eax],edx
1000092a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000933:	0f b6 d0             	movzx  edx,al
10000936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000939:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000943:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000949:	0f b6 d0             	movzx  edx,al
1000094c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000094f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000957:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000095d:	8d 50 01             	lea    edx,[eax+0x1]
10000960:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000963:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000969:	0f b6 d0             	movzx  edx,al
1000096c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000973:	83 e1 3f             	and    ecx,0x3f
10000976:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000097a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000097d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000983:	0f b6 d0             	movzx  edx,al
10000986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000989:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10000990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000993:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000999:	0f b6 d0             	movzx  edx,al
1000099c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100009a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009ad:	8d 50 01             	lea    edx,[eax+0x1]
100009b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009b9:	0f b6 d0             	movzx  edx,al
100009bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009c3:	83 e1 3f             	and    ecx,0x3f
100009c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009ca:	90                   	nop
100009cb:	c9                   	leave  
100009cc:	c3                   	ret    
100009cd:	90                   	nop

100009ce <PS2::open(int, int, void*)>:
100009ce:	55                   	push   ebp
100009cf:	89 e5                	mov    ebp,esp
100009d1:	53                   	push   ebx
100009d2:	83 ec 24             	sub    esp,0x24
100009d5:	e8 fc ff ff ff       	call   100009d6 <PS2::open(int, int, void*)+0x8>	100009d6: R_386_PC32	lockScheduler()
100009da:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100009e1:	83 ec 08             	sub    esp,0x8
100009e4:	68 ad 00 00 00       	push   0xad
100009e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009ec:	e8 fc ff ff ff       	call   100009ed <PS2::open(int, int, void*)+0x1f>	100009ed: R_386_PC32	PS2::controllerWrite(unsigned char)
100009f1:	83 c4 10             	add    esp,0x10
100009f4:	83 ec 08             	sub    esp,0x8
100009f7:	68 a7 00 00 00       	push   0xa7
100009fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009ff:	e8 fc ff ff ff       	call   10000a00 <PS2::open(int, int, void*)+0x32>	10000a00: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a04:	83 c4 10             	add    esp,0x10
10000a07:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000a0d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000a10:	89 c2                	mov    edx,eax
10000a12:	ec                   	in     al,dx
10000a13:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000a16:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000a1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000a1f:	89 c2                	mov    edx,eax
10000a21:	ec                   	in     al,dx
10000a22:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000a25:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000a2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a2e:	89 c2                	mov    edx,eax
10000a30:	ec                   	in     al,dx
10000a31:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000a34:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000a3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000a3d:	89 c2                	mov    edx,eax
10000a3f:	ec                   	in     al,dx
10000a40:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000a43:	83 ec 08             	sub    esp,0x8
10000a46:	68 aa 00 00 00       	push   0xaa
10000a4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a4e:	e8 fc ff ff ff       	call   10000a4f <PS2::open(int, int, void*)+0x81>	10000a4f: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a53:	83 c4 10             	add    esp,0x10
10000a56:	83 ec 0c             	sub    esp,0xc
10000a59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a5c:	e8 fc ff ff ff       	call   10000a5d <PS2::open(int, int, void*)+0x8f>	10000a5d: R_386_PC32	PS2::controllerRead()
10000a61:	83 c4 10             	add    esp,0x10
10000a64:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a67:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a6b:	74 65                	je     10000ad2 <PS2::open(int, int, void*)+0x104>
10000a6d:	83 ec 0c             	sub    esp,0xc
10000a70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a73:	e8 fc ff ff ff       	call   10000a74 <PS2::open(int, int, void*)+0xa6>	10000a74: R_386_PC32	PS2::controllerRead()
10000a78:	83 c4 10             	add    esp,0x10
10000a7b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a7e:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a82:	74 4e                	je     10000ad2 <PS2::open(int, int, void*)+0x104>
10000a84:	83 ec 08             	sub    esp,0x8
10000a87:	68 aa 00 00 00       	push   0xaa
10000a8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a8f:	e8 fc ff ff ff       	call   10000a90 <PS2::open(int, int, void*)+0xc2>	10000a90: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a94:	83 c4 10             	add    esp,0x10
10000a97:	83 ec 08             	sub    esp,0x8
10000a9a:	68 aa 00 00 00       	push   0xaa
10000a9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aa2:	e8 fc ff ff ff       	call   10000aa3 <PS2::open(int, int, void*)+0xd5>	10000aa3: R_386_PC32	PS2::controllerWrite(unsigned char)
10000aa7:	83 c4 10             	add    esp,0x10
10000aaa:	83 ec 0c             	sub    esp,0xc
10000aad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ab0:	e8 fc ff ff ff       	call   10000ab1 <PS2::open(int, int, void*)+0xe3>	10000ab1: R_386_PC32	PS2::controllerRead()
10000ab5:	83 c4 10             	add    esp,0x10
10000ab8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000abb:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000abf:	74 11                	je     10000ad2 <PS2::open(int, int, void*)+0x104>
10000ac1:	83 ec 0c             	sub    esp,0xc
10000ac4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac7:	e8 fc ff ff ff       	call   10000ac8 <PS2::open(int, int, void*)+0xfa>	10000ac8: R_386_PC32	PS2::controllerRead()
10000acc:	83 c4 10             	add    esp,0x10
10000acf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ad2:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10000ad9:	83 ec 08             	sub    esp,0x8
10000adc:	6a 20                	push   0x20
10000ade:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ae1:	e8 fc ff ff ff       	call   10000ae2 <PS2::open(int, int, void*)+0x114>	10000ae2: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ae6:	83 c4 10             	add    esp,0x10
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aef:	e8 fc ff ff ff       	call   10000af0 <PS2::open(int, int, void*)+0x122>	10000af0: R_386_PC32	PS2::controllerRead()
10000af4:	83 c4 10             	add    esp,0x10
10000af7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10000afa:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10000afe:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10000b02:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10000b06:	83 ec 04             	sub    esp,0x4
10000b09:	50                   	push   eax
10000b0a:	6a 60                	push   0x60
10000b0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0f:	e8 fc ff ff ff       	call   10000b10 <PS2::open(int, int, void*)+0x142>	10000b10: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10000b14:	83 c4 10             	add    esp,0x10
10000b17:	83 ec 08             	sub    esp,0x8
10000b1a:	68 ae 00 00 00       	push   0xae
10000b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b22:	e8 fc ff ff ff       	call   10000b23 <PS2::open(int, int, void*)+0x155>	10000b23: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b27:	83 c4 10             	add    esp,0x10
10000b2a:	83 ec 08             	sub    esp,0x8
10000b2d:	68 a8 00 00 00       	push   0xa8
10000b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b35:	e8 fc ff ff ff       	call   10000b36 <PS2::open(int, int, void*)+0x168>	10000b36: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b3a:	83 c4 10             	add    esp,0x10
10000b3d:	e8 fc ff ff ff       	call   10000b3e <PS2::open(int, int, void*)+0x170>	10000b3e: R_386_PC32	unlockScheduler()
10000b42:	83 ec 0c             	sub    esp,0xc
10000b45:	68 60 01 00 00       	push   0x160
10000b4a:	e8 fc ff ff ff       	call   10000b4b <PS2::open(int, int, void*)+0x17d>	10000b4b: R_386_PC32	operator new(unsigned long)
10000b4f:	83 c4 10             	add    esp,0x10
10000b52:	89 c3                	mov    ebx,eax
10000b54:	83 ec 0c             	sub    esp,0xc
10000b57:	53                   	push   ebx
10000b58:	e8 fc ff ff ff       	call   10000b59 <PS2::open(int, int, void*)+0x18b>	10000b59: R_386_PC32	PS2Port::PS2Port()
10000b5d:	83 c4 10             	add    esp,0x10
10000b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b63:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10000b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b6c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b6f:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10000b75:	83 ec 08             	sub    esp,0x8
10000b78:	52                   	push   edx
10000b79:	50                   	push   eax
10000b7a:	e8 fc ff ff ff       	call   10000b7b <PS2::open(int, int, void*)+0x1ad>	10000b7b: R_386_PC32	Device::addChild(Device*)
10000b7f:	83 c4 10             	add    esp,0x10
10000b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b85:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10000b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000b94:	8b 00                	mov    eax,DWORD PTR [eax]
10000b96:	83 c0 08             	add    eax,0x8
10000b99:	8b 00                	mov    eax,DWORD PTR [eax]
10000b9b:	6a 00                	push   0x0
10000b9d:	6a 00                	push   0x0
10000b9f:	6a 00                	push   0x0
10000ba1:	52                   	push   edx
10000ba2:	ff d0                	call   eax
10000ba4:	83 c4 10             	add    esp,0x10
10000ba7:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000bab:	75 65                	jne    10000c12 <PS2::open(int, int, void*)+0x244>
10000bad:	83 ec 0c             	sub    esp,0xc
10000bb0:	68 60 01 00 00       	push   0x160
10000bb5:	e8 fc ff ff ff       	call   10000bb6 <PS2::open(int, int, void*)+0x1e8>	10000bb6: R_386_PC32	operator new(unsigned long)
10000bba:	83 c4 10             	add    esp,0x10
10000bbd:	89 c3                	mov    ebx,eax
10000bbf:	83 ec 0c             	sub    esp,0xc
10000bc2:	53                   	push   ebx
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <PS2::open(int, int, void*)+0x1f6>	10000bc4: R_386_PC32	PS2Port::PS2Port()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bce:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bda:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10000be0:	83 ec 08             	sub    esp,0x8
10000be3:	52                   	push   edx
10000be4:	50                   	push   eax
10000be5:	e8 fc ff ff ff       	call   10000be6 <PS2::open(int, int, void*)+0x218>	10000be6: R_386_PC32	Device::addChild(Device*)
10000bea:	83 c4 10             	add    esp,0x10
10000bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10000bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10000bff:	8b 00                	mov    eax,DWORD PTR [eax]
10000c01:	83 c0 08             	add    eax,0x8
10000c04:	8b 00                	mov    eax,DWORD PTR [eax]
10000c06:	6a 00                	push   0x0
10000c08:	6a 00                	push   0x0
10000c0a:	6a 01                	push   0x1
10000c0c:	52                   	push   edx
10000c0d:	ff d0                	call   eax
10000c0f:	83 c4 10             	add    esp,0x10
10000c12:	b8 00 00 00 00       	mov    eax,0x0
10000c17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000c1a:	c9                   	leave  
10000c1b:	c3                   	ret    

10000c1c <PS2::close(int, int, void*)>:
10000c1c:	b8 00 00 00 00       	mov    eax,0x0
10000c21:	c3                   	ret    

10000c22 <PS2::detect()>:
10000c22:	90                   	nop
10000c23:	c3                   	ret    

10000c24 <PS2::controllerWrite(unsigned char)>:
10000c24:	55                   	push   ebp
10000c25:	89 e5                	mov    ebp,esp
10000c27:	83 ec 14             	sub    esp,0x14
10000c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000c2d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000c30:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000c37:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000c3d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000c40:	89 c2                	mov    edx,eax
10000c42:	ec                   	in     al,dx
10000c43:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c46:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c49:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000c4c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c50:	83 e0 40             	and    eax,0x40
10000c53:	85 c0                	test   eax,eax
10000c55:	75 2d                	jne    10000c84 <PS2::controllerWrite(unsigned char)+0x60>
10000c57:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000c5a:	84 c0                	test   al,al
10000c5c:	78 26                	js     10000c84 <PS2::controllerWrite(unsigned char)+0x60>
10000c5e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c62:	83 e0 02             	and    eax,0x2
10000c65:	85 c0                	test   eax,eax
10000c67:	74 17                	je     10000c80 <PS2::controllerWrite(unsigned char)+0x5c>
10000c69:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000c6c:	8d 50 01             	lea    edx,[eax+0x1]
10000c6f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000c72:	3d 20 03 00 00       	cmp    eax,0x320
10000c77:	0f 94 c0             	sete   al
10000c7a:	84 c0                	test   al,al
10000c7c:	75 05                	jne    10000c83 <PS2::controllerWrite(unsigned char)+0x5f>
10000c7e:	eb b7                	jmp    10000c37 <PS2::controllerWrite(unsigned char)+0x13>
10000c80:	90                   	nop
10000c81:	eb 01                	jmp    10000c84 <PS2::controllerWrite(unsigned char)+0x60>
10000c83:	90                   	nop
10000c84:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10000c88:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10000c8e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c91:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000c94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000c97:	ee                   	out    dx,al
10000c98:	b0 01                	mov    al,0x1
10000c9a:	c9                   	leave  
10000c9b:	c3                   	ret    

10000c9c <PS2::controllerWrite(unsigned char, unsigned char)>:
10000c9c:	55                   	push   ebp
10000c9d:	89 e5                	mov    ebp,esp
10000c9f:	83 ec 28             	sub    esp,0x28
10000ca2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000ca5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000ca8:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10000cab:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10000cae:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10000cb2:	50                   	push   eax
10000cb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cb6:	e8 fc ff ff ff       	call   10000cb7 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10000cb7: R_386_PC32	PS2::controllerWrite(unsigned char)
10000cbb:	83 c4 08             	add    esp,0x8
10000cbe:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000cc5:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000ccb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000cce:	89 c2                	mov    edx,eax
10000cd0:	ec                   	in     al,dx
10000cd1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cd4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000cd7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000cda:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000cde:	83 e0 40             	and    eax,0x40
10000ce1:	85 c0                	test   eax,eax
10000ce3:	75 07                	jne    10000cec <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10000ce5:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000ce8:	84 c0                	test   al,al
10000cea:	79 18                	jns    10000d04 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10000cec:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000cf0:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000cf6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000cf9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000cfc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000cff:	ee                   	out    dx,al
10000d00:	b0 00                	mov    al,0x0
10000d02:	eb 4f                	jmp    10000d53 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d04:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d08:	83 e0 02             	and    eax,0x2
10000d0b:	85 c0                	test   eax,eax
10000d0d:	74 2d                	je     10000d3c <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10000d0f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000d12:	8d 50 01             	lea    edx,[eax+0x1]
10000d15:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000d18:	3d 20 03 00 00       	cmp    eax,0x320
10000d1d:	0f 94 c0             	sete   al
10000d20:	84 c0                	test   al,al
10000d22:	74 a1                	je     10000cc5 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10000d24:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d28:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000d2e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000d31:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000d34:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d37:	ee                   	out    dx,al
10000d38:	b0 00                	mov    al,0x0
10000d3a:	eb 17                	jmp    10000d53 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d3c:	90                   	nop
10000d3d:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d41:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000d47:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000d4a:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000d4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000d50:	ee                   	out    dx,al
10000d51:	b0 01                	mov    al,0x1
10000d53:	c9                   	leave  
10000d54:	c3                   	ret    
10000d55:	90                   	nop

10000d56 <PS2::controllerRead()>:
10000d56:	55                   	push   ebp
10000d57:	89 e5                	mov    ebp,esp
10000d59:	83 ec 20             	sub    esp,0x20
10000d5c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000d63:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000d69:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000d6c:	89 c2                	mov    edx,eax
10000d6e:	ec                   	in     al,dx
10000d6f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d72:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d75:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000d78:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d7c:	83 e0 40             	and    eax,0x40
10000d7f:	85 c0                	test   eax,eax
10000d81:	75 07                	jne    10000d8a <PS2::controllerRead()+0x34>
10000d83:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000d86:	84 c0                	test   al,al
10000d88:	79 04                	jns    10000d8e <PS2::controllerRead()+0x38>
10000d8a:	b0 00                	mov    al,0x0
10000d8c:	eb 48                	jmp    10000dd6 <PS2::controllerRead()+0x80>
10000d8e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d92:	83 e0 01             	and    eax,0x1
10000d95:	85 c0                	test   eax,eax
10000d97:	75 29                	jne    10000dc2 <PS2::controllerRead()+0x6c>
10000d99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000d9c:	8d 50 01             	lea    edx,[eax+0x1]
10000d9f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000da2:	3d 40 06 00 00       	cmp    eax,0x640
10000da7:	0f 94 c0             	sete   al
10000daa:	84 c0                	test   al,al
10000dac:	74 b5                	je     10000d63 <PS2::controllerRead()+0xd>
10000dae:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000db4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000db7:	89 c2                	mov    edx,eax
10000db9:	ec                   	in     al,dx
10000dba:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000dbd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000dc0:	eb 14                	jmp    10000dd6 <PS2::controllerRead()+0x80>
10000dc2:	90                   	nop
10000dc3:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000dc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000dcc:	89 c2                	mov    edx,eax
10000dce:	ec                   	in     al,dx
10000dcf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000dd2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000dd5:	90                   	nop
10000dd6:	c9                   	leave  
10000dd7:	c3                   	ret    

10000dd8 <PS2Keyboard::PS2Keyboard()>:
10000dd8:	55                   	push   ebp
10000dd9:	89 e5                	mov    ebp,esp
10000ddb:	83 ec 08             	sub    esp,0x8
10000dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000de1:	83 ec 08             	sub    esp,0x8
10000de4:	68 00 00 00 00       	push   0x0	10000de5: R_386_32	ps2keyname
10000de9:	50                   	push   eax
10000dea:	e8 fc ff ff ff       	call   10000deb <PS2Keyboard::PS2Keyboard()+0x13>	10000deb: R_386_PC32	Keyboard::Keyboard(char const*)
10000def:	83 c4 10             	add    esp,0x10
10000df2:	ba 08 00 00 00       	mov    edx,0x8	10000df3: R_386_32	vtable for PS2Keyboard
10000df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dfa:	89 10                	mov    DWORD PTR [eax],edx
10000dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dff:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10000e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e09:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10000e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e13:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10000e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e1d:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10000e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e31:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10000e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e3b:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10000e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e45:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10000e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e4f:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10000e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e59:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10000e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e63:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10000e6a:	90                   	nop
10000e6b:	c9                   	leave  
10000e6c:	c3                   	ret    
10000e6d:	90                   	nop

10000e6e <PS2Keyboard::~PS2Keyboard()>:
10000e6e:	55                   	push   ebp
10000e6f:	89 e5                	mov    ebp,esp
10000e71:	83 ec 08             	sub    esp,0x8
10000e74:	ba 08 00 00 00       	mov    edx,0x8	10000e75: R_386_32	vtable for PS2Keyboard
10000e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e7c:	89 10                	mov    DWORD PTR [eax],edx
10000e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e81:	83 ec 0c             	sub    esp,0xc
10000e84:	50                   	push   eax
10000e85:	e8 fc ff ff ff       	call   10000e86 <PS2Keyboard::~PS2Keyboard()+0x18>	10000e86: R_386_PC32	Keyboard::~Keyboard()
10000e8a:	83 c4 10             	add    esp,0x10
10000e8d:	90                   	nop
10000e8e:	c9                   	leave  
10000e8f:	c3                   	ret    

10000e90 <PS2Keyboard::~PS2Keyboard()>:
10000e90:	55                   	push   ebp
10000e91:	89 e5                	mov    ebp,esp
10000e93:	83 ec 08             	sub    esp,0x8
10000e96:	83 ec 0c             	sub    esp,0xc
10000e99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e9c:	e8 fc ff ff ff       	call   10000e9d <PS2Keyboard::~PS2Keyboard()+0xd>	10000e9d: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10000ea1:	83 c4 10             	add    esp,0x10
10000ea4:	83 ec 08             	sub    esp,0x8
10000ea7:	68 70 01 00 00       	push   0x170
10000eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000eaf:	e8 fc ff ff ff       	call   10000eb0 <PS2Keyboard::~PS2Keyboard()+0x20>	10000eb0: R_386_PC32	operator delete(void*, unsigned long)
10000eb4:	83 c4 10             	add    esp,0x10
10000eb7:	c9                   	leave  
10000eb8:	c3                   	ret    
10000eb9:	90                   	nop

10000eba <PS2Keyboard::setRepeatRate(int)>:
10000eba:	c3                   	ret    
10000ebb:	90                   	nop

10000ebc <PS2Keyboard::setRepeatDelay(int)>:
10000ebc:	c3                   	ret    
10000ebd:	90                   	nop

10000ebe <PS2Keyboard::sendKey(unsigned short, bool)>:
10000ebe:	83 ec 1c             	sub    esp,0x1c
10000ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000ec5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000ec9:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000ecd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000ed1:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000ed6:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000edd:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000ee3:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000ee8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000eec:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000ef0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000ef4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000ef9:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000efe:	83 c4 1c             	add    esp,0x1c
10000f01:	e9 fc ff ff ff       	jmp    10000f02 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10000f02: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f06 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10000f06:	83 ec 1c             	sub    esp,0x1c
10000f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000f11:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000f15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000f19:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000f1e:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000f25:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000f2b:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000f30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f34:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000f38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f3c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000f41:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000f46:	83 c4 1c             	add    esp,0x1c
10000f49:	e9 fc ff ff ff       	jmp    10000f4a <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10000f4a: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f4e <PS2Keyboard::updateKeyboardLEDs()>:
10000f4e:	56                   	push   esi
10000f4f:	53                   	push   ebx
10000f50:	83 ec 0c             	sub    esp,0xc
10000f53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10000f57:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10000f5d:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10000f64:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10000f67:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10000f6e:	09 c3                	or     ebx,eax
10000f70:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10000f76:	68 ed 00 00 00       	push   0xed
10000f7b:	0f b6 db             	movzx  ebx,bl
10000f7e:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f84:	e8 fc ff ff ff       	call   10000f85 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10000f85: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000f89:	58                   	pop    eax
10000f8a:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f90:	e8 fc ff ff ff       	call   10000f91 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10000f91: R_386_PC32	PS2Port::deviceRead()
10000f95:	5a                   	pop    edx
10000f96:	59                   	pop    ecx
10000f97:	53                   	push   ebx
10000f98:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f9e:	e8 fc ff ff ff       	call   10000f9f <PS2Keyboard::updateKeyboardLEDs()+0x51>	10000f9f: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000fa3:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10000fa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000fad:	83 c4 14             	add    esp,0x14
10000fb0:	5b                   	pop    ebx
10000fb1:	5e                   	pop    esi
10000fb2:	e9 fc ff ff ff       	jmp    10000fb3 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10000fb3: R_386_PC32	PS2Port::deviceRead()

10000fb7 <ps2KeyboardHandler(regs*, void*)>:
10000fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000fbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000fbf:	eb 01                	jmp    10000fc2 <PS2Keyboard::handler()>
10000fc1:	90                   	nop

10000fc2 <PS2Keyboard::handler()>:
10000fc2:	57                   	push   edi
10000fc3:	56                   	push   esi
10000fc4:	53                   	push   ebx
10000fc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000fc9:	e4 60                	in     al,0x60
10000fcb:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10000fd2:	74 29                	je     10000ffd <PS2Keyboard::handler()+0x3b>
10000fd4:	88 c2                	mov    dl,al
10000fd6:	3c e0                	cmp    al,0xe0
10000fd8:	75 0c                	jne    10000fe6 <PS2Keyboard::handler()+0x24>
10000fda:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10000fe1:	e9 17 07 00 00       	jmp    100016fd <PS2Keyboard::handler()+0x73b>
10000fe6:	84 c0                	test   al,al
10000fe8:	0f 89 52 01 00 00    	jns    10001140 <PS2Keyboard::handler()+0x17e>
10000fee:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10000ff5:	83 e2 7f             	and    edx,0x7f
10000ff8:	e9 43 01 00 00       	jmp    10001140 <PS2Keyboard::handler()+0x17e>
10000ffd:	3c e0                	cmp    al,0xe0
10000fff:	74 d9                	je     10000fda <PS2Keyboard::handler()+0x18>
10001001:	3c f0                	cmp    al,0xf0
10001003:	75 0c                	jne    10001011 <PS2Keyboard::handler()+0x4f>
10001005:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
1000100c:	e9 ec 06 00 00       	jmp    100016fd <PS2Keyboard::handler()+0x73b>
10001011:	3c 12                	cmp    al,0x12
10001013:	75 1f                	jne    10001034 <PS2Keyboard::handler()+0x72>
10001015:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000101b:	83 f0 01             	xor    eax,0x1
1000101e:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10001024:	52                   	push   edx
10001025:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000102c:	50                   	push   eax
1000102d:	68 04 01 00 00       	push   0x104
10001032:	eb 23                	jmp    10001057 <PS2Keyboard::handler()+0x95>
10001034:	76 3d                	jbe    10001073 <PS2Keyboard::handler()+0xb1>
10001036:	3c 14                	cmp    al,0x14
10001038:	75 62                	jne    1000109c <PS2Keyboard::handler()+0xda>
1000103a:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001040:	83 f0 01             	xor    eax,0x1
10001043:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10001049:	51                   	push   ecx
1000104a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001051:	50                   	push   eax
10001052:	68 00 01 00 00       	push   0x100
10001057:	56                   	push   esi
10001058:	e8 fc ff ff ff       	call   10001059 <PS2Keyboard::handler()+0x97>	10001059: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
1000105d:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001064:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000106b:	83 c4 10             	add    esp,0x10
1000106e:	e9 8a 06 00 00       	jmp    100016fd <PS2Keyboard::handler()+0x73b>
10001073:	3c 11                	cmp    al,0x11
10001075:	75 2d                	jne    100010a4 <PS2Keyboard::handler()+0xe2>
10001077:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000107d:	83 f0 01             	xor    eax,0x1
10001080:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10001086:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
1000108c:	50                   	push   eax
1000108d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001094:	50                   	push   eax
10001095:	68 01 01 00 00       	push   0x101
1000109a:	eb bb                	jmp    10001057 <PS2Keyboard::handler()+0x95>
1000109c:	3c 59                	cmp    al,0x59
1000109e:	0f 84 71 ff ff ff    	je     10001015 <PS2Keyboard::handler()+0x53>
100010a4:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100010ab:	0f 84 b1 01 00 00    	je     10001262 <PS2Keyboard::handler()+0x2a0>
100010b1:	3c 6b                	cmp    al,0x6b
100010b3:	0f 84 f2 00 00 00    	je     100011ab <PS2Keyboard::handler()+0x1e9>
100010b9:	77 50                	ja     1000110b <PS2Keyboard::handler()+0x149>
100010bb:	3c 51                	cmp    al,0x51
100010bd:	0f 84 37 01 00 00    	je     100011fa <PS2Keyboard::handler()+0x238>
100010c3:	77 23                	ja     100010e8 <PS2Keyboard::handler()+0x126>
100010c5:	3c 49                	cmp    al,0x49
100010c7:	0f 84 0d 01 00 00    	je     100011da <PS2Keyboard::handler()+0x218>
100010cd:	3c 4a                	cmp    al,0x4a
100010cf:	0f 85 29 04 00 00    	jne    100014fe <PS2Keyboard::handler()+0x53c>
100010d5:	50                   	push   eax
100010d6:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100010dd:	50                   	push   eax
100010de:	68 1f 03 00 00       	push   0x31f
100010e3:	e9 c6 03 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100010e8:	3c 5a                	cmp    al,0x5a
100010ea:	0f 84 5f 01 00 00    	je     1000124f <PS2Keyboard::handler()+0x28d>
100010f0:	3c 69                	cmp    al,0x69
100010f2:	0f 85 06 04 00 00    	jne    100014fe <PS2Keyboard::handler()+0x53c>
100010f8:	51                   	push   ecx
100010f9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001100:	50                   	push   eax
10001101:	68 01 02 00 00       	push   0x201
10001106:	e9 a3 03 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000110b:	3c 71                	cmp    al,0x71
1000110d:	0f 84 16 01 00 00    	je     10001229 <PS2Keyboard::handler()+0x267>
10001113:	77 15                	ja     1000112a <PS2Keyboard::handler()+0x168>
10001115:	3c 6c                	cmp    al,0x6c
10001117:	0f 84 f0 00 00 00    	je     1000120d <PS2Keyboard::handler()+0x24b>
1000111d:	3c 70                	cmp    al,0x70
1000111f:	0f 84 17 01 00 00    	je     1000123c <PS2Keyboard::handler()+0x27a>
10001125:	e9 d4 03 00 00       	jmp    100014fe <PS2Keyboard::handler()+0x53c>
1000112a:	3c 74                	cmp    al,0x74
1000112c:	0f 84 8c 00 00 00    	je     100011be <PS2Keyboard::handler()+0x1fc>
10001132:	3c 75                	cmp    al,0x75
10001134:	74 4a                	je     10001180 <PS2Keyboard::handler()+0x1be>
10001136:	3c 72                	cmp    al,0x72
10001138:	0f 85 c0 03 00 00    	jne    100014fe <PS2Keyboard::handler()+0x53c>
1000113e:	eb 58                	jmp    10001198 <PS2Keyboard::handler()+0x1d6>
10001140:	80 fa 2a             	cmp    dl,0x2a
10001143:	0f 84 cc fe ff ff    	je     10001015 <PS2Keyboard::handler()+0x53>
10001149:	0f 87 97 05 00 00    	ja     100016e6 <PS2Keyboard::handler()+0x724>
1000114f:	80 fa 1d             	cmp    dl,0x1d
10001152:	0f 84 e2 fe ff ff    	je     1000103a <PS2Keyboard::handler()+0x78>
10001158:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000115f:	0f 84 ce 03 00 00    	je     10001533 <PS2Keyboard::handler()+0x571>
10001165:	80 fa 4b             	cmp    dl,0x4b
10001168:	74 41                	je     100011ab <PS2Keyboard::handler()+0x1e9>
1000116a:	77 27                	ja     10001193 <PS2Keyboard::handler()+0x1d1>
1000116c:	80 fa 47             	cmp    dl,0x47
1000116f:	0f 84 98 00 00 00    	je     1000120d <PS2Keyboard::handler()+0x24b>
10001175:	0f 86 96 03 00 00    	jbe    10001511 <PS2Keyboard::handler()+0x54f>
1000117b:	80 fa 48             	cmp    dl,0x48
1000117e:	75 51                	jne    100011d1 <PS2Keyboard::handler()+0x20f>
10001180:	50                   	push   eax
10001181:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001188:	50                   	push   eax
10001189:	68 0b 02 00 00       	push   0x20b
1000118e:	e9 1b 03 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001193:	80 fa 50             	cmp    dl,0x50
10001196:	75 55                	jne    100011ed <PS2Keyboard::handler()+0x22b>
10001198:	50                   	push   eax
10001199:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011a0:	50                   	push   eax
100011a1:	68 0c 02 00 00       	push   0x20c
100011a6:	e9 03 03 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100011ab:	50                   	push   eax
100011ac:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011b3:	50                   	push   eax
100011b4:	68 0d 02 00 00       	push   0x20d
100011b9:	e9 f0 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100011be:	50                   	push   eax
100011bf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011c6:	50                   	push   eax
100011c7:	68 0e 02 00 00       	push   0x20e
100011cc:	e9 dd 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100011d1:	80 fa 49             	cmp    dl,0x49
100011d4:	0f 85 24 03 00 00    	jne    100014fe <PS2Keyboard::handler()+0x53c>
100011da:	50                   	push   eax
100011db:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011e2:	50                   	push   eax
100011e3:	68 04 02 00 00       	push   0x204
100011e8:	e9 c1 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100011ed:	0f 86 2f 03 00 00    	jbe    10001522 <PS2Keyboard::handler()+0x560>
100011f3:	80 fa 52             	cmp    dl,0x52
100011f6:	74 44                	je     1000123c <PS2Keyboard::handler()+0x27a>
100011f8:	73 26                	jae    10001220 <PS2Keyboard::handler()+0x25e>
100011fa:	57                   	push   edi
100011fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001202:	50                   	push   eax
10001203:	68 05 02 00 00       	push   0x205
10001208:	e9 a1 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000120d:	53                   	push   ebx
1000120e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001215:	50                   	push   eax
10001216:	68 00 02 00 00       	push   0x200
1000121b:	e9 8e 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001220:	80 fa 53             	cmp    dl,0x53
10001223:	0f 85 d5 02 00 00    	jne    100014fe <PS2Keyboard::handler()+0x53c>
10001229:	52                   	push   edx
1000122a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001231:	50                   	push   eax
10001232:	68 03 02 00 00       	push   0x203
10001237:	e9 72 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000123c:	50                   	push   eax
1000123d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001244:	50                   	push   eax
10001245:	68 02 02 00 00       	push   0x202
1000124a:	e9 5f 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000124f:	50                   	push   eax
10001250:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001257:	50                   	push   eax
10001258:	68 1d 03 00 00       	push   0x31d
1000125d:	e9 4c 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001262:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10001269:	3c 66                	cmp    al,0x66
1000126b:	75 09                	jne    10001276 <PS2Keyboard::handler()+0x2b4>
1000126d:	50                   	push   eax
1000126e:	52                   	push   edx
1000126f:	6a 08                	push   0x8
10001271:	e9 38 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001276:	3c 0d                	cmp    al,0xd
10001278:	75 09                	jne    10001283 <PS2Keyboard::handler()+0x2c1>
1000127a:	50                   	push   eax
1000127b:	52                   	push   edx
1000127c:	6a 09                	push   0x9
1000127e:	e9 2b 02 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001283:	3c 58                	cmp    al,0x58
10001285:	75 2a                	jne    100012b1 <PS2Keyboard::handler()+0x2ef>
10001287:	84 d2                	test   dl,dl
10001289:	75 13                	jne    1000129e <PS2Keyboard::handler()+0x2dc>
1000128b:	83 ec 0c             	sub    esp,0xc
1000128e:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10001295:	56                   	push   esi
10001296:	e8 fc ff ff ff       	call   10001297 <PS2Keyboard::handler()+0x2d5>	10001297: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000129b:	83 c4 10             	add    esp,0x10
1000129e:	50                   	push   eax
1000129f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012a6:	50                   	push   eax
100012a7:	68 80 02 00 00       	push   0x280
100012ac:	e9 fd 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100012b1:	3c 77                	cmp    al,0x77
100012b3:	75 2a                	jne    100012df <PS2Keyboard::handler()+0x31d>
100012b5:	84 d2                	test   dl,dl
100012b7:	75 13                	jne    100012cc <PS2Keyboard::handler()+0x30a>
100012b9:	83 ec 0c             	sub    esp,0xc
100012bc:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100012c3:	56                   	push   esi
100012c4:	e8 fc ff ff ff       	call   100012c5 <PS2Keyboard::handler()+0x303>	100012c5: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012c9:	83 c4 10             	add    esp,0x10
100012cc:	50                   	push   eax
100012cd:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012d4:	50                   	push   eax
100012d5:	68 81 02 00 00       	push   0x281
100012da:	e9 cf 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100012df:	3c 7e                	cmp    al,0x7e
100012e1:	75 2a                	jne    1000130d <PS2Keyboard::handler()+0x34b>
100012e3:	84 d2                	test   dl,dl
100012e5:	75 13                	jne    100012fa <PS2Keyboard::handler()+0x338>
100012e7:	83 ec 0c             	sub    esp,0xc
100012ea:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
100012f1:	56                   	push   esi
100012f2:	e8 fc ff ff ff       	call   100012f3 <PS2Keyboard::handler()+0x331>	100012f3: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012f7:	83 c4 10             	add    esp,0x10
100012fa:	57                   	push   edi
100012fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001302:	50                   	push   eax
10001303:	68 82 02 00 00       	push   0x282
10001308:	e9 a1 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000130d:	3c 05                	cmp    al,0x5
1000130f:	75 0c                	jne    1000131d <PS2Keyboard::handler()+0x35b>
10001311:	53                   	push   ebx
10001312:	52                   	push   edx
10001313:	68 00 03 00 00       	push   0x300
10001318:	e9 91 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000131d:	3c 06                	cmp    al,0x6
1000131f:	75 0c                	jne    1000132d <PS2Keyboard::handler()+0x36b>
10001321:	51                   	push   ecx
10001322:	52                   	push   edx
10001323:	68 01 03 00 00       	push   0x301
10001328:	e9 81 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000132d:	3c 04                	cmp    al,0x4
1000132f:	75 0c                	jne    1000133d <PS2Keyboard::handler()+0x37b>
10001331:	50                   	push   eax
10001332:	52                   	push   edx
10001333:	68 02 03 00 00       	push   0x302
10001338:	e9 71 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000133d:	3c 0c                	cmp    al,0xc
1000133f:	75 0c                	jne    1000134d <PS2Keyboard::handler()+0x38b>
10001341:	50                   	push   eax
10001342:	52                   	push   edx
10001343:	68 03 03 00 00       	push   0x303
10001348:	e9 61 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000134d:	3c 03                	cmp    al,0x3
1000134f:	75 0c                	jne    1000135d <PS2Keyboard::handler()+0x39b>
10001351:	50                   	push   eax
10001352:	52                   	push   edx
10001353:	68 04 03 00 00       	push   0x304
10001358:	e9 51 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000135d:	3c 0b                	cmp    al,0xb
1000135f:	75 0c                	jne    1000136d <PS2Keyboard::handler()+0x3ab>
10001361:	50                   	push   eax
10001362:	52                   	push   edx
10001363:	68 05 03 00 00       	push   0x305
10001368:	e9 41 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000136d:	3c 02                	cmp    al,0x2
1000136f:	74 04                	je     10001375 <PS2Keyboard::handler()+0x3b3>
10001371:	3c 83                	cmp    al,0x83
10001373:	75 0c                	jne    10001381 <PS2Keyboard::handler()+0x3bf>
10001375:	50                   	push   eax
10001376:	52                   	push   edx
10001377:	68 06 03 00 00       	push   0x306
1000137c:	e9 2d 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001381:	3c 0a                	cmp    al,0xa
10001383:	75 0c                	jne    10001391 <PS2Keyboard::handler()+0x3cf>
10001385:	50                   	push   eax
10001386:	52                   	push   edx
10001387:	68 07 03 00 00       	push   0x307
1000138c:	e9 1d 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001391:	3c 01                	cmp    al,0x1
10001393:	75 0c                	jne    100013a1 <PS2Keyboard::handler()+0x3df>
10001395:	57                   	push   edi
10001396:	52                   	push   edx
10001397:	68 08 03 00 00       	push   0x308
1000139c:	e9 0d 01 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013a1:	3c 09                	cmp    al,0x9
100013a3:	75 0c                	jne    100013b1 <PS2Keyboard::handler()+0x3ef>
100013a5:	53                   	push   ebx
100013a6:	52                   	push   edx
100013a7:	68 09 03 00 00       	push   0x309
100013ac:	e9 fd 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013b1:	3c 78                	cmp    al,0x78
100013b3:	75 0c                	jne    100013c1 <PS2Keyboard::handler()+0x3ff>
100013b5:	51                   	push   ecx
100013b6:	52                   	push   edx
100013b7:	68 0a 03 00 00       	push   0x30a
100013bc:	e9 ed 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013c1:	3c 07                	cmp    al,0x7
100013c3:	75 0c                	jne    100013d1 <PS2Keyboard::handler()+0x40f>
100013c5:	50                   	push   eax
100013c6:	52                   	push   edx
100013c7:	68 0b 03 00 00       	push   0x30b
100013cc:	e9 dd 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013d1:	3c 5a                	cmp    al,0x5a
100013d3:	75 09                	jne    100013de <PS2Keyboard::handler()+0x41c>
100013d5:	50                   	push   eax
100013d6:	52                   	push   edx
100013d7:	6a 0a                	push   0xa
100013d9:	e9 d0 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013de:	3c 76                	cmp    al,0x76
100013e0:	75 0c                	jne    100013ee <PS2Keyboard::handler()+0x42c>
100013e2:	50                   	push   eax
100013e3:	52                   	push   edx
100013e4:	68 0a 02 00 00       	push   0x20a
100013e9:	e9 c0 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013ee:	3c 70                	cmp    al,0x70
100013f0:	75 0c                	jne    100013fe <PS2Keyboard::handler()+0x43c>
100013f2:	50                   	push   eax
100013f3:	52                   	push   edx
100013f4:	68 10 03 00 00       	push   0x310
100013f9:	e9 b0 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100013fe:	3c 69                	cmp    al,0x69
10001400:	75 0c                	jne    1000140e <PS2Keyboard::handler()+0x44c>
10001402:	50                   	push   eax
10001403:	52                   	push   edx
10001404:	68 11 03 00 00       	push   0x311
10001409:	e9 a0 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000140e:	3c 72                	cmp    al,0x72
10001410:	75 0c                	jne    1000141e <PS2Keyboard::handler()+0x45c>
10001412:	50                   	push   eax
10001413:	52                   	push   edx
10001414:	68 12 03 00 00       	push   0x312
10001419:	e9 90 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000141e:	3c 7a                	cmp    al,0x7a
10001420:	75 0c                	jne    1000142e <PS2Keyboard::handler()+0x46c>
10001422:	57                   	push   edi
10001423:	52                   	push   edx
10001424:	68 13 03 00 00       	push   0x313
10001429:	e9 80 00 00 00       	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000142e:	3c 6b                	cmp    al,0x6b
10001430:	75 09                	jne    1000143b <PS2Keyboard::handler()+0x479>
10001432:	53                   	push   ebx
10001433:	52                   	push   edx
10001434:	68 14 03 00 00       	push   0x314
10001439:	eb 73                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000143b:	3c 73                	cmp    al,0x73
1000143d:	75 09                	jne    10001448 <PS2Keyboard::handler()+0x486>
1000143f:	51                   	push   ecx
10001440:	52                   	push   edx
10001441:	68 15 03 00 00       	push   0x315
10001446:	eb 66                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001448:	3c 74                	cmp    al,0x74
1000144a:	75 09                	jne    10001455 <PS2Keyboard::handler()+0x493>
1000144c:	50                   	push   eax
1000144d:	52                   	push   edx
1000144e:	68 16 03 00 00       	push   0x316
10001453:	eb 59                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001455:	3c 6c                	cmp    al,0x6c
10001457:	75 09                	jne    10001462 <PS2Keyboard::handler()+0x4a0>
10001459:	50                   	push   eax
1000145a:	52                   	push   edx
1000145b:	68 17 03 00 00       	push   0x317
10001460:	eb 4c                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001462:	3c 75                	cmp    al,0x75
10001464:	75 09                	jne    1000146f <PS2Keyboard::handler()+0x4ad>
10001466:	50                   	push   eax
10001467:	52                   	push   edx
10001468:	68 18 03 00 00       	push   0x318
1000146d:	eb 3f                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000146f:	3c 7d                	cmp    al,0x7d
10001471:	75 09                	jne    1000147c <PS2Keyboard::handler()+0x4ba>
10001473:	50                   	push   eax
10001474:	52                   	push   edx
10001475:	68 19 03 00 00       	push   0x319
1000147a:	eb 32                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
1000147c:	3c 71                	cmp    al,0x71
1000147e:	75 09                	jne    10001489 <PS2Keyboard::handler()+0x4c7>
10001480:	50                   	push   eax
10001481:	52                   	push   edx
10001482:	68 1a 03 00 00       	push   0x31a
10001487:	eb 25                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001489:	3c 7b                	cmp    al,0x7b
1000148b:	75 09                	jne    10001496 <PS2Keyboard::handler()+0x4d4>
1000148d:	50                   	push   eax
1000148e:	52                   	push   edx
1000148f:	68 1c 03 00 00       	push   0x31c
10001494:	eb 18                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
10001496:	3c 79                	cmp    al,0x79
10001498:	75 09                	jne    100014a3 <PS2Keyboard::handler()+0x4e1>
1000149a:	57                   	push   edi
1000149b:	52                   	push   edx
1000149c:	68 1b 03 00 00       	push   0x31b
100014a1:	eb 0b                	jmp    100014ae <PS2Keyboard::handler()+0x4ec>
100014a3:	3c 7c                	cmp    al,0x7c
100014a5:	75 0f                	jne    100014b6 <PS2Keyboard::handler()+0x4f4>
100014a7:	53                   	push   ebx
100014a8:	52                   	push   edx
100014a9:	68 1e 03 00 00       	push   0x31e
100014ae:	56                   	push   esi
100014af:	e8 fc ff ff ff       	call   100014b0 <PS2Keyboard::handler()+0x4ee>	100014b0: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100014b4:	eb 45                	jmp    100014fb <PS2Keyboard::handler()+0x539>
100014b6:	0f b6 c0             	movzx  eax,al
100014b9:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100014bf:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100014c6:	74 16                	je     100014de <PS2Keyboard::handler()+0x51c>
100014c8:	84 c9                	test   cl,cl
100014ca:	74 09                	je     100014d5 <PS2Keyboard::handler()+0x513>
100014cc:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014cf: R_386_32	PS2Keyboard::internalMapCapUpper
100014d3:	eb 1d                	jmp    100014f2 <PS2Keyboard::handler()+0x530>
100014d5:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014d8: R_386_32	PS2Keyboard::internalMapperUpper
100014dc:	eb 14                	jmp    100014f2 <PS2Keyboard::handler()+0x530>
100014de:	84 c9                	test   cl,cl
100014e0:	74 09                	je     100014eb <PS2Keyboard::handler()+0x529>
100014e2:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014e5: R_386_32	PS2Keyboard::internalMapCapLower
100014e9:	eb 07                	jmp    100014f2 <PS2Keyboard::handler()+0x530>
100014eb:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014ee: R_386_32	PS2Keyboard::internalMapperLower
100014f2:	51                   	push   ecx
100014f3:	52                   	push   edx
100014f4:	50                   	push   eax
100014f5:	56                   	push   esi
100014f6:	e8 fc ff ff ff       	call   100014f7 <PS2Keyboard::handler()+0x535>	100014f7: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
100014fb:	83 c4 10             	add    esp,0x10
100014fe:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001505:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000150c:	e9 ec 01 00 00       	jmp    100016fd <PS2Keyboard::handler()+0x73b>
10001511:	80 fa 1c             	cmp    dl,0x1c
10001514:	0f 84 35 fd ff ff    	je     1000124f <PS2Keyboard::handler()+0x28d>
1000151a:	80 fa 35             	cmp    dl,0x35
1000151d:	e9 ad fb ff ff       	jmp    100010cf <PS2Keyboard::handler()+0x10d>
10001522:	80 fa 4d             	cmp    dl,0x4d
10001525:	0f 84 93 fc ff ff    	je     100011be <PS2Keyboard::handler()+0x1fc>
1000152b:	80 fa 4f             	cmp    dl,0x4f
1000152e:	e9 bf fb ff ff       	jmp    100010f2 <PS2Keyboard::handler()+0x130>
10001533:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
1000153a:	80 fa 0e             	cmp    dl,0xe
1000153d:	75 07                	jne    10001546 <PS2Keyboard::handler()+0x584>
1000153f:	50                   	push   eax
10001540:	51                   	push   ecx
10001541:	e9 29 fd ff ff       	jmp    1000126f <PS2Keyboard::handler()+0x2ad>
10001546:	80 fa 0f             	cmp    dl,0xf
10001549:	75 07                	jne    10001552 <PS2Keyboard::handler()+0x590>
1000154b:	57                   	push   edi
1000154c:	51                   	push   ecx
1000154d:	e9 2a fd ff ff       	jmp    1000127c <PS2Keyboard::handler()+0x2ba>
10001552:	80 fa 3a             	cmp    dl,0x3a
10001555:	75 07                	jne    1000155e <PS2Keyboard::handler()+0x59c>
10001557:	84 c9                	test   cl,cl
10001559:	e9 2b fd ff ff       	jmp    10001289 <PS2Keyboard::handler()+0x2c7>
1000155e:	80 fa 45             	cmp    dl,0x45
10001561:	75 07                	jne    1000156a <PS2Keyboard::handler()+0x5a8>
10001563:	84 c9                	test   cl,cl
10001565:	e9 4d fd ff ff       	jmp    100012b7 <PS2Keyboard::handler()+0x2f5>
1000156a:	80 fa 46             	cmp    dl,0x46
1000156d:	75 07                	jne    10001576 <PS2Keyboard::handler()+0x5b4>
1000156f:	84 c9                	test   cl,cl
10001571:	e9 6f fd ff ff       	jmp    100012e5 <PS2Keyboard::handler()+0x323>
10001576:	80 fa 3b             	cmp    dl,0x3b
10001579:	75 07                	jne    10001582 <PS2Keyboard::handler()+0x5c0>
1000157b:	53                   	push   ebx
1000157c:	51                   	push   ecx
1000157d:	e9 91 fd ff ff       	jmp    10001313 <PS2Keyboard::handler()+0x351>
10001582:	80 fa 3c             	cmp    dl,0x3c
10001585:	75 07                	jne    1000158e <PS2Keyboard::handler()+0x5cc>
10001587:	52                   	push   edx
10001588:	51                   	push   ecx
10001589:	e9 95 fd ff ff       	jmp    10001323 <PS2Keyboard::handler()+0x361>
1000158e:	80 fa 3d             	cmp    dl,0x3d
10001591:	75 07                	jne    1000159a <PS2Keyboard::handler()+0x5d8>
10001593:	50                   	push   eax
10001594:	51                   	push   ecx
10001595:	e9 99 fd ff ff       	jmp    10001333 <PS2Keyboard::handler()+0x371>
1000159a:	80 fa 3e             	cmp    dl,0x3e
1000159d:	75 07                	jne    100015a6 <PS2Keyboard::handler()+0x5e4>
1000159f:	50                   	push   eax
100015a0:	51                   	push   ecx
100015a1:	e9 9d fd ff ff       	jmp    10001343 <PS2Keyboard::handler()+0x381>
100015a6:	80 fa 3f             	cmp    dl,0x3f
100015a9:	75 07                	jne    100015b2 <PS2Keyboard::handler()+0x5f0>
100015ab:	50                   	push   eax
100015ac:	51                   	push   ecx
100015ad:	e9 a1 fd ff ff       	jmp    10001353 <PS2Keyboard::handler()+0x391>
100015b2:	80 fa 40             	cmp    dl,0x40
100015b5:	75 07                	jne    100015be <PS2Keyboard::handler()+0x5fc>
100015b7:	50                   	push   eax
100015b8:	51                   	push   ecx
100015b9:	e9 a5 fd ff ff       	jmp    10001363 <PS2Keyboard::handler()+0x3a1>
100015be:	80 fa 41             	cmp    dl,0x41
100015c1:	75 07                	jne    100015ca <PS2Keyboard::handler()+0x608>
100015c3:	50                   	push   eax
100015c4:	51                   	push   ecx
100015c5:	e9 ad fd ff ff       	jmp    10001377 <PS2Keyboard::handler()+0x3b5>
100015ca:	80 fa 42             	cmp    dl,0x42
100015cd:	75 07                	jne    100015d6 <PS2Keyboard::handler()+0x614>
100015cf:	50                   	push   eax
100015d0:	51                   	push   ecx
100015d1:	e9 b1 fd ff ff       	jmp    10001387 <PS2Keyboard::handler()+0x3c5>
100015d6:	80 fa 43             	cmp    dl,0x43
100015d9:	75 07                	jne    100015e2 <PS2Keyboard::handler()+0x620>
100015db:	57                   	push   edi
100015dc:	51                   	push   ecx
100015dd:	e9 b5 fd ff ff       	jmp    10001397 <PS2Keyboard::handler()+0x3d5>
100015e2:	80 fa 44             	cmp    dl,0x44
100015e5:	75 07                	jne    100015ee <PS2Keyboard::handler()+0x62c>
100015e7:	53                   	push   ebx
100015e8:	51                   	push   ecx
100015e9:	e9 b9 fd ff ff       	jmp    100013a7 <PS2Keyboard::handler()+0x3e5>
100015ee:	84 d2                	test   dl,dl
100015f0:	75 07                	jne    100015f9 <PS2Keyboard::handler()+0x637>
100015f2:	52                   	push   edx
100015f3:	51                   	push   ecx
100015f4:	e9 be fd ff ff       	jmp    100013b7 <PS2Keyboard::handler()+0x3f5>
100015f9:	80 fa 1c             	cmp    dl,0x1c
100015fc:	75 07                	jne    10001605 <PS2Keyboard::handler()+0x643>
100015fe:	50                   	push   eax
100015ff:	51                   	push   ecx
10001600:	e9 d2 fd ff ff       	jmp    100013d7 <PS2Keyboard::handler()+0x415>
10001605:	80 fa 01             	cmp    dl,0x1
10001608:	75 07                	jne    10001611 <PS2Keyboard::handler()+0x64f>
1000160a:	50                   	push   eax
1000160b:	51                   	push   ecx
1000160c:	e9 d3 fd ff ff       	jmp    100013e4 <PS2Keyboard::handler()+0x422>
10001611:	80 fa 52             	cmp    dl,0x52
10001614:	75 07                	jne    1000161d <PS2Keyboard::handler()+0x65b>
10001616:	50                   	push   eax
10001617:	51                   	push   ecx
10001618:	e9 d7 fd ff ff       	jmp    100013f4 <PS2Keyboard::handler()+0x432>
1000161d:	80 fa 4f             	cmp    dl,0x4f
10001620:	75 07                	jne    10001629 <PS2Keyboard::handler()+0x667>
10001622:	50                   	push   eax
10001623:	51                   	push   ecx
10001624:	e9 db fd ff ff       	jmp    10001404 <PS2Keyboard::handler()+0x442>
10001629:	80 fa 50             	cmp    dl,0x50
1000162c:	75 07                	jne    10001635 <PS2Keyboard::handler()+0x673>
1000162e:	50                   	push   eax
1000162f:	51                   	push   ecx
10001630:	e9 df fd ff ff       	jmp    10001414 <PS2Keyboard::handler()+0x452>
10001635:	80 fa 51             	cmp    dl,0x51
10001638:	75 07                	jne    10001641 <PS2Keyboard::handler()+0x67f>
1000163a:	50                   	push   eax
1000163b:	51                   	push   ecx
1000163c:	e9 e3 fd ff ff       	jmp    10001424 <PS2Keyboard::handler()+0x462>
10001641:	80 fa 4b             	cmp    dl,0x4b
10001644:	75 07                	jne    1000164d <PS2Keyboard::handler()+0x68b>
10001646:	57                   	push   edi
10001647:	51                   	push   ecx
10001648:	e9 e7 fd ff ff       	jmp    10001434 <PS2Keyboard::handler()+0x472>
1000164d:	80 fa 4c             	cmp    dl,0x4c
10001650:	75 07                	jne    10001659 <PS2Keyboard::handler()+0x697>
10001652:	53                   	push   ebx
10001653:	51                   	push   ecx
10001654:	e9 e8 fd ff ff       	jmp    10001441 <PS2Keyboard::handler()+0x47f>
10001659:	80 fa 4d             	cmp    dl,0x4d
1000165c:	75 07                	jne    10001665 <PS2Keyboard::handler()+0x6a3>
1000165e:	52                   	push   edx
1000165f:	51                   	push   ecx
10001660:	e9 e9 fd ff ff       	jmp    1000144e <PS2Keyboard::handler()+0x48c>
10001665:	80 fa 47             	cmp    dl,0x47
10001668:	75 07                	jne    10001671 <PS2Keyboard::handler()+0x6af>
1000166a:	50                   	push   eax
1000166b:	51                   	push   ecx
1000166c:	e9 ea fd ff ff       	jmp    1000145b <PS2Keyboard::handler()+0x499>
10001671:	80 fa 48             	cmp    dl,0x48
10001674:	75 07                	jne    1000167d <PS2Keyboard::handler()+0x6bb>
10001676:	50                   	push   eax
10001677:	51                   	push   ecx
10001678:	e9 eb fd ff ff       	jmp    10001468 <PS2Keyboard::handler()+0x4a6>
1000167d:	80 fa 49             	cmp    dl,0x49
10001680:	75 07                	jne    10001689 <PS2Keyboard::handler()+0x6c7>
10001682:	50                   	push   eax
10001683:	51                   	push   ecx
10001684:	e9 ec fd ff ff       	jmp    10001475 <PS2Keyboard::handler()+0x4b3>
10001689:	80 fa 53             	cmp    dl,0x53
1000168c:	75 07                	jne    10001695 <PS2Keyboard::handler()+0x6d3>
1000168e:	50                   	push   eax
1000168f:	51                   	push   ecx
10001690:	e9 ed fd ff ff       	jmp    10001482 <PS2Keyboard::handler()+0x4c0>
10001695:	80 fa 4a             	cmp    dl,0x4a
10001698:	75 07                	jne    100016a1 <PS2Keyboard::handler()+0x6df>
1000169a:	50                   	push   eax
1000169b:	51                   	push   ecx
1000169c:	e9 ee fd ff ff       	jmp    1000148f <PS2Keyboard::handler()+0x4cd>
100016a1:	80 fa 4e             	cmp    dl,0x4e
100016a4:	75 07                	jne    100016ad <PS2Keyboard::handler()+0x6eb>
100016a6:	50                   	push   eax
100016a7:	51                   	push   ecx
100016a8:	e9 ef fd ff ff       	jmp    1000149c <PS2Keyboard::handler()+0x4da>
100016ad:	80 fa 37             	cmp    dl,0x37
100016b0:	75 07                	jne    100016b9 <PS2Keyboard::handler()+0x6f7>
100016b2:	57                   	push   edi
100016b3:	51                   	push   ecx
100016b4:	e9 f0 fd ff ff       	jmp    100014a9 <PS2Keyboard::handler()+0x4e7>
100016b9:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100016c0:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100016c7:	c1 e7 07             	shl    edi,0x7
100016ca:	c1 e0 08             	shl    eax,0x8
100016cd:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100016d0: R_386_32	PS2Keyboard::internalMapperLowerBad
100016d4:	88 d0                	mov    al,dl
100016d6:	89 fb                	mov    ebx,edi
100016d8:	d7                   	xlat   BYTE PTR ds:[ebx]
100016d9:	88 c2                	mov    dl,al
100016db:	0f b6 d2             	movzx  edx,dl
100016de:	53                   	push   ebx
100016df:	51                   	push   ecx
100016e0:	52                   	push   edx
100016e1:	e9 0f fe ff ff       	jmp    100014f5 <PS2Keyboard::handler()+0x533>
100016e6:	80 fa 36             	cmp    dl,0x36
100016e9:	0f 84 26 f9 ff ff    	je     10001015 <PS2Keyboard::handler()+0x53>
100016ef:	80 fa 38             	cmp    dl,0x38
100016f2:	0f 84 7f f9 ff ff    	je     10001077 <PS2Keyboard::handler()+0xb5>
100016f8:	e9 5b fa ff ff       	jmp    10001158 <PS2Keyboard::handler()+0x196>
100016fd:	5b                   	pop    ebx
100016fe:	5e                   	pop    esi
100016ff:	5f                   	pop    edi
10001700:	c3                   	ret    
10001701:	90                   	nop

10001702 <PS2Keyboard::open(int, int, void*)>:
10001702:	53                   	push   ebx
10001703:	83 ec 14             	sub    esp,0x14
10001706:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000170a:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10001710:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10001716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000171a:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10001720:	53                   	push   ebx
10001721:	6a 01                	push   0x1
10001723:	68 00 00 00 00       	push   0x0	10001724: R_386_32	ps2KeyboardHandler(regs*, void*)
10001728:	6a 01                	push   0x1
1000172a:	53                   	push   ebx
1000172b:	e8 fc ff ff ff       	call   1000172c <PS2Keyboard::open(int, int, void*)+0x2a>	1000172c: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001730:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10001736:	a1 00 00 00 00       	mov    eax,ds:0x0	10001737: R_386_32	sysBootSettings
1000173b:	c1 e8 02             	shr    eax,0x2
1000173e:	83 f0 01             	xor    eax,0x1
10001741:	83 e0 01             	and    eax,0x1
10001744:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
1000174a:	31 c0                	xor    eax,eax
1000174c:	83 c4 28             	add    esp,0x28
1000174f:	5b                   	pop    ebx
10001750:	c3                   	ret    
10001751:	90                   	nop

10001752 <PS2Keyboard::close(int, int, void*)>:
10001752:	83 c8 ff             	or     eax,0xffffffff
10001755:	c3                   	ret    

10001756 <PS2Mouse::PS2Mouse()>:
10001756:	55                   	push   ebp
10001757:	89 e5                	mov    ebp,esp
10001759:	83 ec 08             	sub    esp,0x8
1000175c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000175f:	83 ec 08             	sub    esp,0x8
10001762:	68 00 00 00 00       	push   0x0	10001763: R_386_32	ps2mousename
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <PS2Mouse::PS2Mouse()+0x13>	10001769: R_386_PC32	Mouse::Mouse(char const*)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	ba 08 00 00 00       	mov    edx,0x8	10001771: R_386_32	vtable for PS2Mouse
10001775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001778:	89 10                	mov    DWORD PTR [eax],edx
1000177a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000177d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001787:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10001791:	90                   	nop
10001792:	c9                   	leave  
10001793:	c3                   	ret    

10001794 <ps2MouseHandler(regs*, void*)>:
10001794:	55                   	push   ebp
10001795:	89 e5                	mov    ebp,esp
10001797:	83 ec 08             	sub    esp,0x8
1000179a:	83 ec 0c             	sub    esp,0xc
1000179d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017a0:	e8 fc ff ff ff       	call   100017a1 <ps2MouseHandler(regs*, void*)+0xd>	100017a1: R_386_PC32	PS2Mouse::handler()
100017a5:	83 c4 10             	add    esp,0x10
100017a8:	90                   	nop
100017a9:	c9                   	leave  
100017aa:	c3                   	ret    
100017ab:	90                   	nop

100017ac <PS2Mouse::handler()>:
100017ac:	55                   	push   ebp
100017ad:	89 e5                	mov    ebp,esp
100017af:	83 ec 28             	sub    esp,0x28
100017b2:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100017b8:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100017bc:	89 c2                	mov    edx,eax
100017be:	ec                   	in     al,dx
100017bf:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100017c2:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100017c5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017c8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017cc:	83 e0 01             	and    eax,0x1
100017cf:	85 c0                	test   eax,eax
100017d1:	0f 84 8d 01 00 00    	je     10001964 <PS2Mouse::handler()+0x1b8>
100017d7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017db:	83 e0 20             	and    eax,0x20
100017de:	85 c0                	test   eax,eax
100017e0:	0f 84 81 01 00 00    	je     10001967 <PS2Mouse::handler()+0x1bb>
100017e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017e9:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100017ef:	8d 50 01             	lea    edx,[eax+0x1]
100017f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017f5:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
100017fb:	0f b6 c8             	movzx  ecx,al
100017fe:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10001804:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10001808:	89 c2                	mov    edx,eax
1000180a:	ec                   	in     al,dx
1000180b:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
1000180e:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001814:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
1000181b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000181e:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001824:	0f b6 c0             	movzx  eax,al
10001827:	83 e0 08             	and    eax,0x8
1000182a:	85 c0                	test   eax,eax
1000182c:	75 0f                	jne    1000183d <PS2Mouse::handler()+0x91>
1000182e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001831:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001838:	e9 2b 01 00 00       	jmp    10001968 <PS2Mouse::handler()+0x1bc>
1000183d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001840:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001846:	84 c0                	test   al,al
10001848:	75 0d                	jne    10001857 <PS2Mouse::handler()+0xab>
1000184a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000184d:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001853:	3c 02                	cmp    al,0x2
10001855:	77 2f                	ja     10001886 <PS2Mouse::handler()+0xda>
10001857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000185a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001860:	3c 03                	cmp    al,0x3
10001862:	74 11                	je     10001875 <PS2Mouse::handler()+0xc9>
10001864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001867:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000186d:	3c 04                	cmp    al,0x4
1000186f:	0f 85 f3 00 00 00    	jne    10001968 <PS2Mouse::handler()+0x1bc>
10001875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001878:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
1000187e:	3c 03                	cmp    al,0x3
10001880:	0f 86 e2 00 00 00    	jbe    10001968 <PS2Mouse::handler()+0x1bc>
10001886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001889:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001893:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001899:	84 c0                	test   al,al
1000189b:	78 13                	js     100018b0 <PS2Mouse::handler()+0x104>
1000189d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a0:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018a6:	0f b6 c0             	movzx  eax,al
100018a9:	83 e0 40             	and    eax,0x40
100018ac:	85 c0                	test   eax,eax
100018ae:	74 37                	je     100018e7 <PS2Mouse::handler()+0x13b>
100018b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b3:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100018ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018bd:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100018c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c7:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100018ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d1:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100018d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018db:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
100018e2:	e9 81 00 00 00       	jmp    10001968 <PS2Mouse::handler()+0x1bc>
100018e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ea:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
100018f0:	0f b6 d0             	movzx  edx,al
100018f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018fc:	0f b6 c0             	movzx  eax,al
100018ff:	c1 e0 04             	shl    eax,0x4
10001902:	25 00 01 00 00       	and    eax,0x100
10001907:	29 c2                	sub    edx,eax
10001909:	89 d0                	mov    eax,edx
1000190b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000190e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001911:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001917:	0f b6 c0             	movzx  eax,al
1000191a:	c1 e0 03             	shl    eax,0x3
1000191d:	25 00 01 00 00       	and    eax,0x100
10001922:	89 c2                	mov    edx,eax
10001924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001927:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
1000192d:	0f b6 c0             	movzx  eax,al
10001930:	29 c2                	sub    edx,eax
10001932:	89 d0                	mov    eax,edx
10001934:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001937:	a1 00 00 00 00       	mov    eax,ds:0x0	10001938: R_386_32	guiMouseHandler
1000193c:	85 c0                	test   eax,eax
1000193e:	74 28                	je     10001968 <PS2Mouse::handler()+0x1bc>
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	guiMouseHandler
10001945:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001948:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
1000194e:	0f b6 d2             	movzx  edx,dl
10001951:	83 e2 01             	and    edx,0x1
10001954:	6a 00                	push   0x0
10001956:	52                   	push   edx
10001957:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000195a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000195d:	ff d0                	call   eax
1000195f:	83 c4 10             	add    esp,0x10
10001962:	eb 04                	jmp    10001968 <PS2Mouse::handler()+0x1bc>
10001964:	90                   	nop
10001965:	eb 01                	jmp    10001968 <PS2Mouse::handler()+0x1bc>
10001967:	90                   	nop
10001968:	c9                   	leave  
10001969:	c3                   	ret    

1000196a <PS2Mouse::open(int, int, void*)>:
1000196a:	55                   	push   ebp
1000196b:	89 e5                	mov    ebp,esp
1000196d:	83 ec 08             	sub    esp,0x8
10001970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001973:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000197c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001985:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001988:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
1000198e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001991:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	68 f6 00 00 00       	push   0xf6
1000199f:	50                   	push   eax
100019a0:	e8 fc ff ff ff       	call   100019a1 <PS2Mouse::open(int, int, void*)+0x37>	100019a1: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019a5:	83 c4 10             	add    esp,0x10
100019a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019b1:	83 ec 0c             	sub    esp,0xc
100019b4:	50                   	push   eax
100019b5:	e8 fc ff ff ff       	call   100019b6 <PS2Mouse::open(int, int, void*)+0x4c>	100019b6: R_386_PC32	PS2Port::deviceRead()
100019ba:	83 c4 10             	add    esp,0x10
100019bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019c6:	83 ec 08             	sub    esp,0x8
100019c9:	68 f4 00 00 00       	push   0xf4
100019ce:	50                   	push   eax
100019cf:	e8 fc ff ff ff       	call   100019d0 <PS2Mouse::open(int, int, void*)+0x66>	100019d0: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019d4:	83 c4 10             	add    esp,0x10
100019d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019e0:	83 ec 0c             	sub    esp,0xc
100019e3:	50                   	push   eax
100019e4:	e8 fc ff ff ff       	call   100019e5 <PS2Mouse::open(int, int, void*)+0x7b>	100019e5: R_386_PC32	PS2Port::deviceRead()
100019e9:	83 c4 10             	add    esp,0x10
100019ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019ef:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100019f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019f9:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a03:	83 ec 0c             	sub    esp,0xc
10001a06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a09:	6a 01                	push   0x1
10001a0b:	68 00 00 00 00       	push   0x0	10001a0c: R_386_32	ps2MouseHandler(regs*, void*)
10001a10:	6a 0c                	push   0xc
10001a12:	50                   	push   eax
10001a13:	e8 fc ff ff ff       	call   10001a14 <PS2Mouse::open(int, int, void*)+0xaa>	10001a14: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001a18:	83 c4 20             	add    esp,0x20
10001a1b:	b8 00 00 00 00       	mov    eax,0x0
10001a20:	c9                   	leave  
10001a21:	c3                   	ret    

10001a22 <PS2Mouse::close(int, int, void*)>:
10001a22:	b8 00 00 00 00       	mov    eax,0x0
10001a27:	c3                   	ret    

10001a28 <PS2Mouse::detect()>:
10001a28:	90                   	nop
10001a29:	c3                   	ret    

10001a2a <PS2Port::PS2Port()>:
10001a2a:	55                   	push   ebp
10001a2b:	89 e5                	mov    ebp,esp
10001a2d:	83 ec 08             	sub    esp,0x8
10001a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a33:	83 ec 08             	sub    esp,0x8
10001a36:	68 00 00 00 00       	push   0x0	10001a37: R_386_32	ps2portname
10001a3b:	50                   	push   eax
10001a3c:	e8 fc ff ff ff       	call   10001a3d <PS2Port::PS2Port()+0x13>	10001a3d: R_386_PC32	Bus::Bus(char const*)
10001a41:	83 c4 10             	add    esp,0x10
10001a44:	ba 08 00 00 00       	mov    edx,0x8	10001a45: R_386_32	vtable for PS2Port
10001a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a4c:	89 10                	mov    DWORD PTR [eax],edx
10001a4e:	90                   	nop
10001a4f:	c9                   	leave  
10001a50:	c3                   	ret    
10001a51:	90                   	nop

10001a52 <PS2Port::open(int, int, void*)>:
10001a52:	55                   	push   ebp
10001a53:	89 e5                	mov    ebp,esp
10001a55:	83 ec 08             	sub    esp,0x8
10001a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001a5e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a67:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001a6a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a73:	8b 00                	mov    eax,DWORD PTR [eax]
10001a75:	83 c0 18             	add    eax,0x18
10001a78:	8b 00                	mov    eax,DWORD PTR [eax]
10001a7a:	83 ec 0c             	sub    esp,0xc
10001a7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a80:	ff d0                	call   eax
10001a82:	83 c4 10             	add    esp,0x10
10001a85:	b8 00 00 00 00       	mov    eax,0x0
10001a8a:	c9                   	leave  
10001a8b:	c3                   	ret    

10001a8c <PS2Port::close(int, int, void*)>:
10001a8c:	b8 00 00 00 00       	mov    eax,0x0
10001a91:	c3                   	ret    

10001a92 <PS2Port::detect()>:
10001a92:	55                   	push   ebp
10001a93:	89 e5                	mov    ebp,esp
10001a95:	53                   	push   ebx
10001a96:	83 ec 14             	sub    esp,0x14
10001a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001aa2:	85 c0                	test   eax,eax
10001aa4:	75 55                	jne    10001afb <PS2Port::detect()+0x69>
10001aa6:	83 ec 0c             	sub    esp,0xc
10001aa9:	68 70 01 00 00       	push   0x170
10001aae:	e8 fc ff ff ff       	call   10001aaf <PS2Port::detect()+0x1d>	10001aaf: R_386_PC32	operator new(unsigned long)
10001ab3:	83 c4 10             	add    esp,0x10
10001ab6:	89 c3                	mov    ebx,eax
10001ab8:	83 ec 0c             	sub    esp,0xc
10001abb:	53                   	push   ebx
10001abc:	e8 fc ff ff ff       	call   10001abd <PS2Port::detect()+0x2b>	10001abd: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001ac1:	83 c4 10             	add    esp,0x10
10001ac4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aca:	83 ec 08             	sub    esp,0x8
10001acd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ad0:	50                   	push   eax
10001ad1:	e8 fc ff ff ff       	call   10001ad2 <PS2Port::detect()+0x40>	10001ad2: R_386_PC32	Device::addChild(Device*)
10001ad6:	83 c4 10             	add    esp,0x10
10001ad9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001adc:	8b 00                	mov    eax,DWORD PTR [eax]
10001ade:	83 c0 08             	add    eax,0x8
10001ae1:	8b 00                	mov    eax,DWORD PTR [eax]
10001ae3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001ae6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001aec:	52                   	push   edx
10001aed:	6a 00                	push   0x0
10001aef:	6a 00                	push   0x0
10001af1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001af4:	ff d0                	call   eax
10001af6:	83 c4 10             	add    esp,0x10
10001af9:	eb 61                	jmp    10001b5c <PS2Port::detect()+0xca>
10001afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001afe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b04:	83 f8 01             	cmp    eax,0x1
10001b07:	75 53                	jne    10001b5c <PS2Port::detect()+0xca>
10001b09:	83 ec 0c             	sub    esp,0xc
10001b0c:	68 68 01 00 00       	push   0x168
10001b11:	e8 fc ff ff ff       	call   10001b12 <PS2Port::detect()+0x80>	10001b12: R_386_PC32	operator new(unsigned long)
10001b16:	83 c4 10             	add    esp,0x10
10001b19:	89 c3                	mov    ebx,eax
10001b1b:	83 ec 0c             	sub    esp,0xc
10001b1e:	53                   	push   ebx
10001b1f:	e8 fc ff ff ff       	call   10001b20 <PS2Port::detect()+0x8e>	10001b20: R_386_PC32	PS2Mouse::PS2Mouse()
10001b24:	83 c4 10             	add    esp,0x10
10001b27:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10001b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b2d:	83 ec 08             	sub    esp,0x8
10001b30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b33:	50                   	push   eax
10001b34:	e8 fc ff ff ff       	call   10001b35 <PS2Port::detect()+0xa3>	10001b35: R_386_PC32	Device::addChild(Device*)
10001b39:	83 c4 10             	add    esp,0x10
10001b3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001b3f:	8b 00                	mov    eax,DWORD PTR [eax]
10001b41:	83 c0 08             	add    eax,0x8
10001b44:	8b 00                	mov    eax,DWORD PTR [eax]
10001b46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b49:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001b4f:	52                   	push   edx
10001b50:	6a 00                	push   0x0
10001b52:	6a 01                	push   0x1
10001b54:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b57:	ff d0                	call   eax
10001b59:	83 c4 10             	add    esp,0x10
10001b5c:	90                   	nop
10001b5d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001b60:	c9                   	leave  
10001b61:	c3                   	ret    

10001b62 <PS2Port::deviceWrite(unsigned char)>:
10001b62:	55                   	push   ebp
10001b63:	89 e5                	mov    ebp,esp
10001b65:	83 ec 28             	sub    esp,0x28
10001b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b6b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b77:	83 f8 01             	cmp    eax,0x1
10001b7a:	75 1a                	jne    10001b96 <PS2Port::deviceWrite(unsigned char)+0x34>
10001b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001b85:	83 ec 08             	sub    esp,0x8
10001b88:	68 d4 00 00 00       	push   0xd4
10001b8d:	50                   	push   eax
10001b8e:	e8 fc ff ff ff       	call   10001b8f <PS2Port::deviceWrite(unsigned char)+0x2d>	10001b8f: R_386_PC32	PS2::controllerWrite(unsigned char)
10001b93:	83 c4 10             	add    esp,0x10
10001b96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001b9d:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10001ba3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ba6:	89 c2                	mov    edx,eax
10001ba8:	ec                   	in     al,dx
10001ba9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001bac:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001baf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001bb2:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001bb6:	83 e0 02             	and    eax,0x2
10001bb9:	85 c0                	test   eax,eax
10001bbb:	74 29                	je     10001be6 <PS2Port::deviceWrite(unsigned char)+0x84>
10001bbd:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001bc1:	83 e0 40             	and    eax,0x40
10001bc4:	85 c0                	test   eax,eax
10001bc6:	75 22                	jne    10001bea <PS2Port::deviceWrite(unsigned char)+0x88>
10001bc8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001bcb:	84 c0                	test   al,al
10001bcd:	78 1b                	js     10001bea <PS2Port::deviceWrite(unsigned char)+0x88>
10001bcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001bd2:	8d 50 01             	lea    edx,[eax+0x1]
10001bd5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001bd8:	3d 40 06 00 00       	cmp    eax,0x640
10001bdd:	0f 94 c0             	sete   al
10001be0:	84 c0                	test   al,al
10001be2:	75 05                	jne    10001be9 <PS2Port::deviceWrite(unsigned char)+0x87>
10001be4:	eb b7                	jmp    10001b9d <PS2Port::deviceWrite(unsigned char)+0x3b>
10001be6:	90                   	nop
10001be7:	eb 01                	jmp    10001bea <PS2Port::deviceWrite(unsigned char)+0x88>
10001be9:	90                   	nop
10001bea:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001bee:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001bf4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001bf7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001bfa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10001bfd:	ee                   	out    dx,al
10001bfe:	b0 01                	mov    al,0x1
10001c00:	c9                   	leave  
10001c01:	c3                   	ret    

10001c02 <PS2Port::deviceRead()>:
10001c02:	55                   	push   ebp
10001c03:	89 e5                	mov    ebp,esp
10001c05:	83 ec 08             	sub    esp,0x8
10001c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c0b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001c11:	83 ec 0c             	sub    esp,0xc
10001c14:	50                   	push   eax
10001c15:	e8 fc ff ff ff       	call   10001c16 <PS2Port::deviceRead()+0x14>	10001c16: R_386_PC32	PS2::controllerRead()
10001c1a:	83 c4 10             	add    esp,0x10
10001c1d:	c9                   	leave  
10001c1e:	c3                   	ret    
10001c1f:	90                   	nop

10001c20 <sb16Demo(void*)>:
10001c20:	55                   	push   ebp
10001c21:	57                   	push   edi
10001c22:	56                   	push   esi
10001c23:	53                   	push   ebx
10001c24:	83 ec 2c             	sub    esp,0x2c
10001c27:	e8 fc ff ff ff       	call   10001c28 <sb16Demo(void*)+0x8>	10001c28: R_386_PC32	unlockScheduler()
10001c2c:	83 ec 0c             	sub    esp,0xc
10001c2f:	6a 2c                	push   0x2c
10001c31:	e8 fc ff ff ff       	call   10001c32 <sb16Demo(void*)+0x12>	10001c32: R_386_PC32	operator new(unsigned long)
10001c36:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10001c3d:	89 c3                	mov    ebx,eax
10001c3f:	6a 5a                	push   0x5a
10001c41:	6a 08                	push   0x8
10001c43:	68 22 56 00 00       	push   0x5622
10001c48:	50                   	push   eax
10001c49:	e8 fc ff ff ff       	call   10001c4a <sb16Demo(void*)+0x2a>	10001c4a: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
10001c4e:	83 c4 14             	add    esp,0x14
10001c51:	68 14 01 00 00       	push   0x114
10001c56:	e8 fc ff ff ff       	call   10001c57 <sb16Demo(void*)+0x37>	10001c57: R_386_PC32	operator new(unsigned long)
10001c5b:	83 c4 0c             	add    esp,0xc
10001c5e:	89 c6                	mov    esi,eax
10001c60:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001c62: R_386_32	kernelProcess
10001c66:	68 00 00 00 00       	push   0x0	10001c67: R_386_32	egFile
10001c6b:	50                   	push   eax
10001c6c:	e8 fc ff ff ff       	call   10001c6d <sb16Demo(void*)+0x4d>	10001c6d: R_386_PC32	File::File(char const*, Process*)
10001c71:	5f                   	pop    edi
10001c72:	bf 35 00 00 00       	mov    edi,0x35
10001c77:	5d                   	pop    ebp
10001c78:	6a 01                	push   0x1
10001c7a:	56                   	push   esi
10001c7b:	e8 fc ff ff ff       	call   10001c7c <sb16Demo(void*)+0x5c>	10001c7c: R_386_PC32	File::open(FileOpenMode)
10001c80:	83 c4 10             	add    esp,0x10
10001c83:	83 ec 0c             	sub    esp,0xc
10001c86:	8b 06                	mov    eax,DWORD PTR [esi]
10001c88:	8d 6c 24 28          	lea    ebp,[esp+0x28]
10001c8c:	55                   	push   ebp
10001c8d:	68 00 00 00 00       	push   0x0	10001c8e: R_386_32	buf
10001c92:	6a 00                	push   0x0
10001c94:	68 00 10 00 00       	push   0x1000
10001c99:	56                   	push   esi
10001c9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001c9d:	83 c4 20             	add    esp,0x20
10001ca0:	4f                   	dec    edi
10001ca1:	75 e0                	jne    10001c83 <sb16Demo(void*)+0x63>
10001ca3:	31 ff                	xor    edi,edi
10001ca5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001cad:	8b 06                	mov    eax,DWORD PTR [esi]
10001caf:	83 ec 0c             	sub    esp,0xc
10001cb2:	55                   	push   ebp
10001cb3:	68 00 00 00 00       	push   0x0	10001cb4: R_386_32	buf
10001cb8:	6a 00                	push   0x0
10001cba:	68 00 10 00 00       	push   0x1000
10001cbf:	56                   	push   esi
10001cc0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001cc3:	83 c4 20             	add    esp,0x20
10001cc6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10001ccb:	74 7f                	je     10001d4c <sb16Demo(void*)+0x12c>
10001ccd:	85 c0                	test   eax,eax
10001ccf:	75 7b                	jne    10001d4c <sb16Demo(void*)+0x12c>
10001cd1:	e8 fc ff ff ff       	call   10001cd2 <sb16Demo(void*)+0xb2>	10001cd2: R_386_PC32	lockScheduler()
10001cd6:	e8 fc ff ff ff       	call   10001cd7 <sb16Demo(void*)+0xb7>	10001cd7: R_386_PC32	schedule()
10001cdb:	e8 fc ff ff ff       	call   10001cdc <sb16Demo(void*)+0xbc>	10001cdc: R_386_PC32	unlockScheduler()
10001ce0:	83 ec 0c             	sub    esp,0xc
10001ce3:	53                   	push   ebx
10001ce4:	e8 fc ff ff ff       	call   10001ce5 <sb16Demo(void*)+0xc5>	10001ce5: R_386_PC32	SoundChannel::getBufferUsed()
10001ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001cec:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001cf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001cf4:	e8 fc ff ff ff       	call   10001cf5 <sb16Demo(void*)+0xd5>	10001cf5: R_386_PC32	SoundChannel::getBufferSize()
10001cf9:	83 c4 10             	add    esp,0x10
10001cfc:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10001d00:	7c 10                	jl     10001d12 <sb16Demo(void*)+0xf2>
10001d02:	51                   	push   ecx
10001d03:	51                   	push   ecx
10001d04:	6a 00                	push   0x0
10001d06:	6a 01                	push   0x1
10001d08:	e8 fc ff ff ff       	call   10001d09 <sb16Demo(void*)+0xe9>	10001d09: R_386_PC32	sleep(unsigned long long)
10001d0d:	83 c4 10             	add    esp,0x10
10001d10:	eb ce                	jmp    10001ce0 <sb16Demo(void*)+0xc0>
10001d12:	52                   	push   edx
10001d13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10001d17:	68 00 00 00 00       	push   0x0	10001d18: R_386_32	buf
10001d1c:	53                   	push   ebx
10001d1d:	e8 fc ff ff ff       	call   10001d1e <sb16Demo(void*)+0xfe>	10001d1e: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10001d22:	83 c4 10             	add    esp,0x10
10001d25:	89 f8                	mov    eax,edi
10001d27:	84 c0                	test   al,al
10001d29:	75 17                	jne    10001d42 <sb16Demo(void*)+0x122>
10001d2b:	50                   	push   eax
10001d2c:	50                   	push   eax
10001d2d:	53                   	push   ebx
10001d2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10001d32:	e8 fc ff ff ff       	call   10001d33 <sb16Demo(void*)+0x113>	10001d33: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10001d37:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001d3a:	e8 fc ff ff ff       	call   10001d3b <sb16Demo(void*)+0x11b>	10001d3b: R_386_PC32	SoundChannel::play()
10001d3f:	83 c4 10             	add    esp,0x10
10001d42:	bf 01 00 00 00       	mov    edi,0x1
10001d47:	e9 59 ff ff ff       	jmp    10001ca5 <sb16Demo(void*)+0x85>
10001d4c:	83 c4 2c             	add    esp,0x2c
10001d4f:	5b                   	pop    ebx
10001d50:	5e                   	pop    esi
10001d51:	5f                   	pop    edi
10001d52:	5d                   	pop    ebp
10001d53:	c3                   	ret    

10001d54 <SoundBlaster16::resetDSP()>:
10001d54:	53                   	push   ebx
10001d55:	b0 01                	mov    al,0x1
10001d57:	83 ec 10             	sub    esp,0x10
10001d5a:	bb 26 02 00 00       	mov    ebx,0x226
10001d5f:	89 da                	mov    edx,ebx
10001d61:	ee                   	out    dx,al
10001d62:	6a 00                	push   0x0
10001d64:	68 c0 c6 2d 00       	push   0x2dc6c0
10001d69:	e8 fc ff ff ff       	call   10001d6a <SoundBlaster16::resetDSP()+0x16>	10001d6a: R_386_PC32	nanoSleep(unsigned long long)
10001d6e:	31 c0                	xor    eax,eax
10001d70:	89 da                	mov    edx,ebx
10001d72:	ee                   	out    dx,al
10001d73:	ba 2a 02 00 00       	mov    edx,0x22a
10001d78:	ec                   	in     al,dx
10001d79:	83 c4 10             	add    esp,0x10
10001d7c:	3c aa                	cmp    al,0xaa
10001d7e:	75 25                	jne    10001da5 <SoundBlaster16::resetDSP()+0x51>
10001d80:	b0 e1                	mov    al,0xe1
10001d82:	ba 2c 02 00 00       	mov    edx,0x22c
10001d87:	ee                   	out    dx,al
10001d88:	ba 2e 02 00 00       	mov    edx,0x22e
10001d8d:	ec                   	in     al,dx
10001d8e:	84 c0                	test   al,al
10001d90:	79 fb                	jns    10001d8d <SoundBlaster16::resetDSP()+0x39>
10001d92:	ba 2a 02 00 00       	mov    edx,0x22a
10001d97:	ec                   	in     al,dx
10001d98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001d9c:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10001da2:	ec                   	in     al,dx
10001da3:	eb 13                	jmp    10001db8 <SoundBlaster16::resetDSP()+0x64>
10001da5:	0f b6 c0             	movzx  eax,al
10001da8:	51                   	push   ecx
10001da9:	51                   	push   ecx
10001daa:	50                   	push   eax
10001dab:	68 00 00 00 00       	push   0x0	10001dac: R_386_32	badVer
10001db0:	e8 fc ff ff ff       	call   10001db1 <SoundBlaster16::resetDSP()+0x5d>	10001db1: R_386_PC32	kprintf(char const*, ...)
10001db5:	83 c4 10             	add    esp,0x10
10001db8:	83 c4 08             	add    esp,0x8
10001dbb:	5b                   	pop    ebx
10001dbc:	c3                   	ret    
10001dbd:	90                   	nop

10001dbe <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10001dbe:	53                   	push   ebx
10001dbf:	ba 2c 02 00 00       	mov    edx,0x22c
10001dc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001dc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001dcc:	ec                   	in     al,dx
10001dcd:	84 c0                	test   al,al
10001dcf:	78 fb                	js     10001dcc <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10001dd1:	88 c8                	mov    al,cl
10001dd3:	89 da                	mov    edx,ebx
10001dd5:	ee                   	out    dx,al
10001dd6:	5b                   	pop    ebx
10001dd7:	c3                   	ret    

10001dd8 <SoundBlaster16::turnSpeakerOn(bool)>:
10001dd8:	53                   	push   ebx
10001dd9:	52                   	push   edx
10001dda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10001dde:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001de2:	80 fa 01             	cmp    dl,0x1
10001de5:	89 14 24             	mov    DWORD PTR [esp],edx
10001de8:	19 c0                	sbb    eax,eax
10001dea:	83 e0 02             	and    eax,0x2
10001ded:	05 d1 00 00 00       	add    eax,0xd1
10001df2:	50                   	push   eax
10001df3:	68 2c 02 00 00       	push   0x22c
10001df8:	53                   	push   ebx
10001df9:	e8 fc ff ff ff       	call   10001dfa <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10001dfa: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001dfe:	83 c4 0c             	add    esp,0xc
10001e01:	8b 14 24             	mov    edx,DWORD PTR [esp]
10001e04:	84 d2                	test   dl,dl
10001e06:	75 23                	jne    10001e2b <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10001e08:	68 d0 00 00 00       	push   0xd0
10001e0d:	68 2c 02 00 00       	push   0x22c
10001e12:	53                   	push   ebx
10001e13:	e8 fc ff ff ff       	call   10001e14 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10001e14: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e18:	68 d3 00 00 00       	push   0xd3
10001e1d:	68 2c 02 00 00       	push   0x22c
10001e22:	53                   	push   ebx
10001e23:	e8 fc ff ff ff       	call   10001e24 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10001e24: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e28:	83 c4 18             	add    esp,0x18
10001e2b:	58                   	pop    eax
10001e2c:	5b                   	pop    ebx
10001e2d:	c3                   	ret    

10001e2e <SoundBlaster16::SoundBlaster16()>:
10001e2e:	55                   	push   ebp
10001e2f:	89 e5                	mov    ebp,esp
10001e31:	83 ec 08             	sub    esp,0x8
10001e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e37:	83 ec 08             	sub    esp,0x8
10001e3a:	68 00 00 00 00       	push   0x0	10001e3b: R_386_32	sb16name
10001e3f:	50                   	push   eax
10001e40:	e8 fc ff ff ff       	call   10001e41 <SoundBlaster16::SoundBlaster16()+0x13>	10001e41: R_386_PC32	SoundDevice::SoundDevice(char const*)
10001e45:	83 c4 10             	add    esp,0x10
10001e48:	ba 08 00 00 00       	mov    edx,0x8	10001e49: R_386_32	vtable for SoundBlaster16
10001e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e50:	89 10                	mov    DWORD PTR [eax],edx
10001e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e55:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10001e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e62:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10001e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e6f:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10001e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e79:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10001e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e83:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10001e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e8d:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10001e94:	90                   	nop
10001e95:	c9                   	leave  
10001e96:	c3                   	ret    
10001e97:	90                   	nop

10001e98 <SoundBlaster16::handleIRQ()>:
10001e98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10001e9c:	ba 2e 02 00 00       	mov    edx,0x22e
10001ea1:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10001ea8:	74 17                	je     10001ec1 <SoundBlaster16::handleIRQ()+0x29>
10001eaa:	b0 82                	mov    al,0x82
10001eac:	ba 24 02 00 00       	mov    edx,0x224
10001eb1:	ee                   	out    dx,al
10001eb2:	ba 25 02 00 00       	mov    edx,0x225
10001eb7:	ec                   	in     al,dx
10001eb8:	a8 02                	test   al,0x2
10001eba:	74 06                	je     10001ec2 <SoundBlaster16::handleIRQ()+0x2a>
10001ebc:	ba 2f 02 00 00       	mov    edx,0x22f
10001ec1:	ec                   	in     al,dx
10001ec2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10001ec6:	e9 c7 03 00 00       	jmp    10002292 <SoundBlaster16::onInterrupt()>

10001ecb <sb16Handler(regs*, void*)>:
10001ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001ecf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001ed3:	eb c3                	jmp    10001e98 <SoundBlaster16::handleIRQ()>
10001ed5:	90                   	nop

10001ed6 <SoundBlaster16::getNumHwChannels()>:
10001ed6:	b8 01 00 00 00       	mov    eax,0x1
10001edb:	c3                   	ret    

10001edc <SoundBlaster16::beginPlayback(int, int)>:
10001edc:	53                   	push   ebx
10001edd:	50                   	push   eax
10001ede:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001ee2:	6a 01                	push   0x1
10001ee4:	53                   	push   ebx
10001ee5:	e8 fc ff ff ff       	call   10001ee6 <SoundBlaster16::beginPlayback(int, int)+0xa>	10001ee6: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001eea:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10001ef1:	5a                   	pop    edx
10001ef2:	19 c0                	sbb    eax,eax
10001ef4:	59                   	pop    ecx
10001ef5:	83 c0 02             	add    eax,0x2
10001ef8:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10001eff:	89 c1                	mov    ecx,eax
10001f01:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10001f06:	99                   	cdq    
10001f07:	f7 f9                	idiv   ecx
10001f09:	89 04 24             	mov    DWORD PTR [esp],eax
10001f0c:	6a 40                	push   0x40
10001f0e:	68 2c 02 00 00       	push   0x22c
10001f13:	53                   	push   ebx
10001f14:	e8 fc ff ff ff       	call   10001f15 <SoundBlaster16::beginPlayback(int, int)+0x39>	10001f15: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001f1e:	50                   	push   eax
10001f1f:	68 2c 02 00 00       	push   0x22c
10001f24:	53                   	push   ebx
10001f25:	e8 fc ff ff ff       	call   10001f26 <SoundBlaster16::beginPlayback(int, int)+0x4a>	10001f26: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f2a:	68 c0 00 00 00       	push   0xc0
10001f2f:	68 2c 02 00 00       	push   0x22c
10001f34:	53                   	push   ebx
10001f35:	e8 fc ff ff ff       	call   10001f36 <SoundBlaster16::beginPlayback(int, int)+0x5a>	10001f36: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f3a:	83 c4 24             	add    esp,0x24
10001f3d:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10001f44:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10001f4b:	c1 e0 05             	shl    eax,0x5
10001f4e:	c1 e2 04             	shl    edx,0x4
10001f51:	09 d0                	or     eax,edx
10001f53:	0f be c0             	movsx  eax,al
10001f56:	50                   	push   eax
10001f57:	68 2c 02 00 00       	push   0x22c
10001f5c:	53                   	push   ebx
10001f5d:	e8 fc ff ff ff       	call   10001f5e <SoundBlaster16::beginPlayback(int, int)+0x82>	10001f5e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f62:	68 ff 00 00 00       	push   0xff
10001f67:	68 2c 02 00 00       	push   0x22c
10001f6c:	53                   	push   ebx
10001f6d:	e8 fc ff ff ff       	call   10001f6e <SoundBlaster16::beginPlayback(int, int)+0x92>	10001f6e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f72:	6a 1f                	push   0x1f
10001f74:	68 2c 02 00 00       	push   0x22c
10001f79:	53                   	push   ebx
10001f7a:	e8 fc ff ff ff       	call   10001f7b <SoundBlaster16::beginPlayback(int, int)+0x9f>	10001f7b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f7f:	83 c4 24             	add    esp,0x24
10001f82:	6a 48                	push   0x48
10001f84:	68 2c 02 00 00       	push   0x22c
10001f89:	53                   	push   ebx
10001f8a:	e8 fc ff ff ff       	call   10001f8b <SoundBlaster16::beginPlayback(int, int)+0xaf>	10001f8b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f8f:	68 ff 00 00 00       	push   0xff
10001f94:	68 2c 02 00 00       	push   0x22c
10001f99:	53                   	push   ebx
10001f9a:	e8 fc ff ff ff       	call   10001f9b <SoundBlaster16::beginPlayback(int, int)+0xbf>	10001f9b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f9f:	6a 1f                	push   0x1f
10001fa1:	68 2c 02 00 00       	push   0x22c
10001fa6:	53                   	push   ebx
10001fa7:	e8 fc ff ff ff       	call   10001fa8 <SoundBlaster16::beginPlayback(int, int)+0xcc>	10001fa8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fac:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10001fb0:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10001fb8:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10001fc0:	83 c4 28             	add    esp,0x28
10001fc3:	5b                   	pop    ebx
10001fc4:	e9 f5 fd ff ff       	jmp    10001dbe <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10001fc9:	90                   	nop

10001fca <SoundBlaster16::stopPlayback()>:
10001fca:	6a 00                	push   0x0
10001fcc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001fd0:	e8 fc ff ff ff       	call   10001fd1 <SoundBlaster16::stopPlayback()+0x7>	10001fd1: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001fd5:	58                   	pop    eax
10001fd6:	5a                   	pop    edx
10001fd7:	c3                   	ret    

10001fd8 <SoundBlaster16::open(int, int, void*)>:
10001fd8:	56                   	push   esi
10001fd9:	be 25 02 00 00       	mov    esi,0x225
10001fde:	53                   	push   ebx
10001fdf:	83 ec 14             	sub    esp,0x14
10001fe2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001fe6:	c7 83 e8 01 00 00 22 56 00 00 	mov    DWORD PTR [ebx+0x1e8],0x5622
10001ff0:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
10001ffa:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10002003:	68 80 00 00 00       	push   0x80
10002008:	68 24 02 00 00       	push   0x224
1000200d:	53                   	push   ebx
1000200e:	e8 fc ff ff ff       	call   1000200f <SoundBlaster16::open(int, int, void*)+0x37>	1000200f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002013:	89 f2                	mov    edx,esi
10002015:	ec                   	in     al,dx
10002016:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
1000201a:	68 80 00 00 00       	push   0x80
1000201f:	68 24 02 00 00       	push   0x224
10002024:	53                   	push   ebx
10002025:	e8 fc ff ff ff       	call   10002026 <SoundBlaster16::open(int, int, void*)+0x4e>	10002026: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000202a:	83 c4 18             	add    esp,0x18
1000202d:	31 c0                	xor    eax,eax
1000202f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10002034:	0f 95 c0             	setne  al
10002037:	40                   	inc    eax
10002038:	50                   	push   eax
10002039:	68 25 02 00 00       	push   0x225
1000203e:	53                   	push   ebx
1000203f:	e8 fc ff ff ff       	call   10002040 <SoundBlaster16::open(int, int, void*)+0x68>	10002040: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002044:	68 80 00 00 00       	push   0x80
10002049:	68 24 02 00 00       	push   0x224
1000204e:	53                   	push   ebx
1000204f:	e8 fc ff ff ff       	call   10002050 <SoundBlaster16::open(int, int, void*)+0x78>	10002050: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002054:	89 f2                	mov    edx,esi
10002056:	ec                   	in     al,dx
10002057:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
1000205b:	83 c4 18             	add    esp,0x18
1000205e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002062:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002066:	75 51                	jne    100020b9 <SoundBlaster16::open(int, int, void*)+0xe1>
10002068:	68 81 00 00 00       	push   0x81
1000206d:	68 24 02 00 00       	push   0x224
10002072:	53                   	push   ebx
10002073:	e8 fc ff ff ff       	call   10002074 <SoundBlaster16::open(int, int, void*)+0x9c>	10002074: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002078:	89 f2                	mov    edx,esi
1000207a:	ec                   	in     al,dx
1000207b:	83 e0 0a             	and    eax,0xa
1000207e:	3c 01                	cmp    al,0x1
10002080:	19 c0                	sbb    eax,eax
10002082:	83 e0 62             	and    eax,0x62
10002085:	40                   	inc    eax
10002086:	89 04 24             	mov    DWORD PTR [esp],eax
10002089:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000208b: R_386_32	isaDMAController
1000208f:	e8 fc ff ff ff       	call   10002090 <SoundBlaster16::open(int, int, void*)+0xb8>	10002090: R_386_PC32	DMA::tryLockChannel(int)
10002094:	83 c4 10             	add    esp,0x10
10002097:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
1000209d:	85 c0                	test   eax,eax
1000209f:	75 3a                	jne    100020db <SoundBlaster16::open(int, int, void*)+0x103>
100020a1:	83 ec 0c             	sub    esp,0xc
100020a4:	68 00 00 00 00       	push   0x0	100020a5: R_386_32	nodma
100020a9:	e8 fc ff ff ff       	call   100020aa <SoundBlaster16::open(int, int, void*)+0xd2>	100020aa: R_386_PC32	kprintf(char const*, ...)
100020ae:	83 c4 10             	add    esp,0x10
100020b1:	83 c8 ff             	or     eax,0xffffffff
100020b4:	e9 d3 01 00 00       	jmp    1000228c <SoundBlaster16::open(int, int, void*)+0x2b4>
100020b9:	56                   	push   esi
100020ba:	56                   	push   esi
100020bb:	6a 01                	push   0x1
100020bd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100020bf: R_386_32	isaDMAController
100020c3:	e8 fc ff ff ff       	call   100020c4 <SoundBlaster16::open(int, int, void*)+0xec>	100020c4: R_386_PC32	DMA::tryLockChannel(int)
100020c8:	83 c4 10             	add    esp,0x10
100020cb:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100020d1:	85 c0                	test   eax,eax
100020d3:	75 06                	jne    100020db <SoundBlaster16::open(int, int, void*)+0x103>
100020d5:	51                   	push   ecx
100020d6:	51                   	push   ecx
100020d7:	6a 03                	push   0x3
100020d9:	eb ae                	jmp    10002089 <SoundBlaster16::open(int, int, void*)+0xb1>
100020db:	50                   	push   eax
100020dc:	50                   	push   eax
100020dd:	68 00 40 00 00       	push   0x4000
100020e2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100020e8:	e8 fc ff ff ff       	call   100020e9 <SoundBlaster16::open(int, int, void*)+0x111>	100020e9: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100020ed:	58                   	pop    eax
100020ee:	5a                   	pop    edx
100020ef:	6a 59                	push   0x59
100020f1:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100020f7:	e8 fc ff ff ff       	call   100020f8 <SoundBlaster16::open(int, int, void*)+0x120>	100020f8: R_386_PC32	DMAChannel::setMode(unsigned char)
100020fc:	59                   	pop    ecx
100020fd:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002103:	e8 fc ff ff ff       	call   10002104 <SoundBlaster16::open(int, int, void*)+0x12c>	10002104: R_386_PC32	DMAChannel::start()
10002108:	5e                   	pop    esi
10002109:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000210f:	e8 fc ff ff ff       	call   10002110 <SoundBlaster16::open(int, int, void*)+0x138>	10002110: R_386_PC32	DMAChannel::getAddress()
10002114:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
1000211a:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000211d:	e8 fc ff ff ff       	call   1000211e <SoundBlaster16::open(int, int, void*)+0x146>	1000211e: R_386_PC32	SoundBlaster16::resetDSP()
10002122:	58                   	pop    eax
10002123:	5a                   	pop    edx
10002124:	6a 01                	push   0x1
10002126:	53                   	push   ebx
10002127:	e8 fc ff ff ff       	call   10002128 <SoundBlaster16::open(int, int, void*)+0x150>	10002128: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000212c:	83 c4 10             	add    esp,0x10
1000212f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002133:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002137:	75 6f                	jne    100021a8 <SoundBlaster16::open(int, int, void*)+0x1d0>
10002139:	50                   	push   eax
1000213a:	68 80 00 00 00       	push   0x80
1000213f:	68 24 02 00 00       	push   0x224
10002144:	53                   	push   ebx
10002145:	e8 fc ff ff ff       	call   10002146 <SoundBlaster16::open(int, int, void*)+0x16e>	10002146: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000214a:	ba 25 02 00 00       	mov    edx,0x225
1000214f:	ec                   	in     al,dx
10002150:	83 c4 10             	add    esp,0x10
10002153:	3c 01                	cmp    al,0x1
10002155:	75 0f                	jne    10002166 <SoundBlaster16::open(int, int, void*)+0x18e>
10002157:	83 ec 0c             	sub    esp,0xc
1000215a:	53                   	push   ebx
1000215b:	6a 01                	push   0x1
1000215d:	68 00 00 00 00       	push   0x0	1000215e: R_386_32	sb16Handler(regs*, void*)
10002162:	6a 02                	push   0x2
10002164:	eb 6f                	jmp    100021d5 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002166:	3c 02                	cmp    al,0x2
10002168:	75 06                	jne    10002170 <SoundBlaster16::open(int, int, void*)+0x198>
1000216a:	83 ec 0c             	sub    esp,0xc
1000216d:	53                   	push   ebx
1000216e:	eb 5c                	jmp    100021cc <SoundBlaster16::open(int, int, void*)+0x1f4>
10002170:	3c 04                	cmp    al,0x4
10002172:	75 0f                	jne    10002183 <SoundBlaster16::open(int, int, void*)+0x1ab>
10002174:	83 ec 0c             	sub    esp,0xc
10002177:	53                   	push   ebx
10002178:	6a 01                	push   0x1
1000217a:	68 00 00 00 00       	push   0x0	1000217b: R_386_32	sb16Handler(regs*, void*)
1000217f:	6a 07                	push   0x7
10002181:	eb 52                	jmp    100021d5 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002183:	3c 08                	cmp    al,0x8
10002185:	75 0f                	jne    10002196 <SoundBlaster16::open(int, int, void*)+0x1be>
10002187:	83 ec 0c             	sub    esp,0xc
1000218a:	53                   	push   ebx
1000218b:	6a 01                	push   0x1
1000218d:	68 00 00 00 00       	push   0x0	1000218e: R_386_32	sb16Handler(regs*, void*)
10002192:	6a 0a                	push   0xa
10002194:	eb 3f                	jmp    100021d5 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002196:	83 ec 0c             	sub    esp,0xc
10002199:	68 00 00 00 00       	push   0x0	1000219a: R_386_32	noirq
1000219e:	e8 fc ff ff ff       	call   1000219f <SoundBlaster16::open(int, int, void*)+0x1c7>	1000219f: R_386_PC32	panic(char const*)
100021a3:	83 c4 10             	add    esp,0x10
100021a6:	eb 36                	jmp    100021de <SoundBlaster16::open(int, int, void*)+0x206>
100021a8:	50                   	push   eax
100021a9:	68 80 00 00 00       	push   0x80
100021ae:	68 24 02 00 00       	push   0x224
100021b3:	53                   	push   ebx
100021b4:	e8 fc ff ff ff       	call   100021b5 <SoundBlaster16::open(int, int, void*)+0x1dd>	100021b5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021b9:	83 c4 0c             	add    esp,0xc
100021bc:	6a 02                	push   0x2
100021be:	68 25 02 00 00       	push   0x225
100021c3:	53                   	push   ebx
100021c4:	e8 fc ff ff ff       	call   100021c5 <SoundBlaster16::open(int, int, void*)+0x1ed>	100021c5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
100021cc:	6a 01                	push   0x1
100021ce:	68 00 00 00 00       	push   0x0	100021cf: R_386_32	sb16Handler(regs*, void*)
100021d3:	6a 05                	push   0x5
100021d5:	53                   	push   ebx
100021d6:	e8 fc ff ff ff       	call   100021d7 <SoundBlaster16::open(int, int, void*)+0x1ff>	100021d7: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100021db:	83 c4 20             	add    esp,0x20
100021de:	56                   	push   esi
100021df:	68 81 00 00 00       	push   0x81
100021e4:	68 24 02 00 00       	push   0x224
100021e9:	53                   	push   ebx
100021ea:	e8 fc ff ff ff       	call   100021eb <SoundBlaster16::open(int, int, void*)+0x213>	100021eb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021ef:	ba 25 02 00 00       	mov    edx,0x225
100021f4:	ec                   	in     al,dx
100021f5:	83 c4 0c             	add    esp,0xc
100021f8:	89 c6                	mov    esi,eax
100021fa:	68 81 00 00 00       	push   0x81
100021ff:	68 24 02 00 00       	push   0x224
10002204:	53                   	push   ebx
10002205:	e8 fc ff ff ff       	call   10002206 <SoundBlaster16::open(int, int, void*)+0x22e>	10002206: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000220a:	58                   	pop    eax
1000220b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002211:	e8 fc ff ff ff       	call   10002212 <SoundBlaster16::open(int, int, void*)+0x23a>	10002212: R_386_PC32	DMAChannel::getChannelNum()
10002216:	83 c4 10             	add    esp,0x10
10002219:	48                   	dec    eax
1000221a:	75 0c                	jne    10002228 <SoundBlaster16::open(int, int, void*)+0x250>
1000221c:	81 e6 f0 00 00 00    	and    esi,0xf0
10002222:	51                   	push   ecx
10002223:	83 ce 02             	or     esi,0x2
10002226:	eb 20                	jmp    10002248 <SoundBlaster16::open(int, int, void*)+0x270>
10002228:	83 ec 0c             	sub    esp,0xc
1000222b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002231:	e8 fc ff ff ff       	call   10002232 <SoundBlaster16::open(int, int, void*)+0x25a>	10002232: R_386_PC32	DMAChannel::getChannelNum()
10002236:	83 c4 10             	add    esp,0x10
10002239:	83 f8 03             	cmp    eax,0x3
1000223c:	75 18                	jne    10002256 <SoundBlaster16::open(int, int, void*)+0x27e>
1000223e:	81 e6 f0 00 00 00    	and    esi,0xf0
10002244:	52                   	push   edx
10002245:	83 ce 08             	or     esi,0x8
10002248:	56                   	push   esi
10002249:	68 25 02 00 00       	push   0x225
1000224e:	53                   	push   ebx
1000224f:	e8 fc ff ff ff       	call   10002250 <SoundBlaster16::open(int, int, void*)+0x278>	10002250: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002254:	eb 0d                	jmp    10002263 <SoundBlaster16::open(int, int, void*)+0x28b>
10002256:	83 ec 0c             	sub    esp,0xc
10002259:	68 00 00 00 00       	push   0x0	1000225a: R_386_32	baddma
1000225e:	e8 fc ff ff ff       	call   1000225f <SoundBlaster16::open(int, int, void*)+0x287>	1000225f: R_386_PC32	panic(char const*)
10002263:	83 c4 10             	add    esp,0x10
10002266:	50                   	push   eax
10002267:	6a 22                	push   0x22
10002269:	68 24 02 00 00       	push   0x224
1000226e:	53                   	push   ebx
1000226f:	e8 fc ff ff ff       	call   10002270 <SoundBlaster16::open(int, int, void*)+0x298>	10002270: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002274:	83 c4 0c             	add    esp,0xc
10002277:	68 ff 00 00 00       	push   0xff
1000227c:	68 24 02 00 00       	push   0x224
10002281:	53                   	push   ebx
10002282:	e8 fc ff ff ff       	call   10002283 <SoundBlaster16::open(int, int, void*)+0x2ab>	10002283: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002287:	83 c4 10             	add    esp,0x10
1000228a:	31 c0                	xor    eax,eax
1000228c:	83 c4 14             	add    esp,0x14
1000228f:	5b                   	pop    ebx
10002290:	5e                   	pop    esi
10002291:	c3                   	ret    

10002292 <SoundBlaster16::onInterrupt()>:
10002292:	56                   	push   esi
10002293:	53                   	push   ebx
10002294:	53                   	push   ebx
10002295:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002299:	68 00 00 00 00       	push   0x0	1000229a: R_386_32	outputBuffer
1000229e:	68 00 00 00 00       	push   0x0	1000229f: R_386_32	tempBuffer
100022a3:	68 00 20 00 00       	push   0x2000
100022a8:	56                   	push   esi
100022a9:	e8 fc ff ff ff       	call   100022aa <SoundBlaster16::onInterrupt()+0x18>	100022aa: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
100022ae:	83 c4 10             	add    esp,0x10
100022b1:	89 c3                	mov    ebx,eax
100022b3:	80 3d df 41 00 10 01 	cmp    BYTE PTR ds:0x100041df,0x1	100022b5: R_386_32	.data
100022ba:	53                   	push   ebx
100022bb:	19 c0                	sbb    eax,eax
100022bd:	25 00 20 00 00       	and    eax,0x2000
100022c2:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
100022c8:	50                   	push   eax
100022c9:	68 00 00 00 00       	push   0x0	100022ca: R_386_32	outputBuffer
100022ce:	56                   	push   esi
100022cf:	e8 fc ff ff ff       	call   100022d0 <SoundBlaster16::onInterrupt()+0x3e>	100022d0: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
100022d4:	83 c4 10             	add    esp,0x10
100022d7:	85 db                	test   ebx,ebx
100022d9:	75 0c                	jne    100022e7 <SoundBlaster16::onInterrupt()+0x55>
100022db:	51                   	push   ecx
100022dc:	51                   	push   ecx
100022dd:	6a 00                	push   0x0
100022df:	56                   	push   esi
100022e0:	e8 fc ff ff ff       	call   100022e1 <SoundBlaster16::onInterrupt()+0x4f>	100022e1: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100022e5:	eb 3e                	jmp    10002325 <SoundBlaster16::onInterrupt()+0x93>
100022e7:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
100022ed:	7f 39                	jg     10002328 <SoundBlaster16::onInterrupt()+0x96>
100022ef:	52                   	push   edx
100022f0:	6a 24                	push   0x24
100022f2:	68 2c 02 00 00       	push   0x22c
100022f7:	56                   	push   esi
100022f8:	e8 fc ff ff ff       	call   100022f9 <SoundBlaster16::onInterrupt()+0x67>	100022f9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022fd:	83 c4 0c             	add    esp,0xc
10002300:	8d 43 ff             	lea    eax,[ebx-0x1]
10002303:	4b                   	dec    ebx
10002304:	0f b6 c0             	movzx  eax,al
10002307:	0f b6 df             	movzx  ebx,bh
1000230a:	50                   	push   eax
1000230b:	68 2c 02 00 00       	push   0x22c
10002310:	56                   	push   esi
10002311:	e8 fc ff ff ff       	call   10002312 <SoundBlaster16::onInterrupt()+0x80>	10002312: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002316:	83 c4 0c             	add    esp,0xc
10002319:	53                   	push   ebx
1000231a:	68 2c 02 00 00       	push   0x22c
1000231f:	56                   	push   esi
10002320:	e8 fc ff ff ff       	call   10002321 <SoundBlaster16::onInterrupt()+0x8f>	10002321: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002325:	83 c4 10             	add    esp,0x10
10002328:	80 35 df 41 00 10 01 	xor    BYTE PTR ds:0x100041df,0x1	1000232a: R_386_32	.data
1000232f:	58                   	pop    eax
10002330:	5b                   	pop    ebx
10002331:	5e                   	pop    esi
10002332:	c3                   	ret    
10002333:	90                   	nop

10002334 <SoundBlaster16::close(int, int, void*)>:
10002334:	83 ec 0c             	sub    esp,0xc
10002337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000233b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10002341:	85 c0                	test   eax,eax
10002343:	74 11                	je     10002356 <SoundBlaster16::close(int, int, void*)+0x22>
10002345:	52                   	push   edx
10002346:	52                   	push   edx
10002347:	50                   	push   eax
10002348:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000234a: R_386_32	isaDMAController
1000234e:	e8 fc ff ff ff       	call   1000234f <SoundBlaster16::close(int, int, void*)+0x1b>	1000234f: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10002353:	83 c4 10             	add    esp,0x10
10002356:	31 c0                	xor    eax,eax
10002358:	83 c4 0c             	add    esp,0xc
1000235b:	c3                   	ret    

1000235c <PHYS_RAM_TABLE_SIZE>:
1000235c:	13 05 00 00                                         ....

10002360 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002360:	24 05 00 00                                         $...

10002364 <PHYS_RAM_TABLE>:
10002364:	00 06 00 00                                         ....

10002368 <PHYS_DMA_MEMORY_1>:
10002368:	00 00 01 00                                         ....

1000236c <PHYS_PHYS_PAGE_BITMAP>:
1000236c:	00 00 02 00                                         ....

10002370 <PHYS_VIRT_PAGE_BITMAP>:
10002370:	00 00 04 00                                         ....

10002374 <PHYS_DMA_MEMORY_2>:
10002374:	00 00 06 00                                         ....

10002378 <PHYS_ALLOCED_VIRT_PAGES>:
10002378:	00 00 10 00                                         ....

1000237c <PHYS_KRNL_PAGE_DIRECTORY>:
1000237c:	00 10 00 00                                         ....

10002380 <VIRT_KERNEL_BASE>:
10002380:	00 00 00 c0                                         ....

10002384 <VIRT_LOW_MEGS>:
10002384:	00 00 00 c2                                         ....

10002388 <VIRT_CPU_SPECIFIC>:
10002388:	00 00 40 c2                                         ..@.

1000238c <VIRT_RECURSIVE_SPOT_1>:
1000238c:	00 00 80 c2                                         ....

10002390 <VIRT_RECURSIVE_SPOT_2>:
10002390:	00 00 c0 c2                                         ....

10002394 <VIRT_DMA_MEMORY_1>:
10002394:	00 00 01 c2                                         ....

10002398 <SIZE_DMA_MEMORY_1>:
10002398:	00 00 01 00                                         ....

1000239c <VIRT_DMA_MEMORY_2>:
1000239c:	00 00 06 c2                                         ....

100023a0 <SIZE_DMA_MEMORY_2>:
100023a0:	00 00 02 00                                         ....

100023a4 <VIRT_KRNL_PAGE_DIRECTORY>:
100023a4:	00 10 00 c2                                         ....

100023a8 <VIRT_PHYS_PAGE_BITMAP>:
100023a8:	00 00 02 c2                                         ....

100023ac <SIZE_PHYS_PAGE_BITMAP>:
100023ac:	00 00 02 00                                         ....

100023b0 <VIRT_VIRT_PAGE_BITMAP>:
100023b0:	00 00 04 c2                                         ....

100023b4 <SIZE_VIRT_PAGE_BITMAP>:
100023b4:	00 80 00 00                                         ....

100023b8 <VIRT_RAM_TABLE>:
100023b8:	00 06 00 c2                                         ....

100023bc <VIRT_RAM_TABLE_SIZE>:
100023bc:	13 05 00 c2                                         ....

100023c0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100023c0:	24 05 00 c2                                         $...

100023c4 <SIZE_APP_STACK_USER>:
100023c4:	00 00 18 00                                         ....

100023c8 <SIZE_APP_STACK_KRNL>:
100023c8:	00 00 08 00                                         ....

100023cc <SIZE_APP_STACK_TOTAL>:
100023cc:	00 00 20 00                                         .. .

100023d0 <VIRT_APP_DATA>:
100023d0:	00 00 00 10                                         ....

100023d4 <VIRT_APP_STACK_USER_TOP>:
100023d4:	00 00 00 02                                         ....

100023d8 <VIRT_APP_STACK_KRNL_TOP>:
100023d8:	00 00 e8 01                                         ....

100023dc <VIRT_HEAP_MIN>:
100023dc:	00 00 00 c8                                         ....

100023e0 <VIRT_HEAP_MAX>:
100023e0:	ff ff ff ef                                         ....

100023e4 <VIRT_SBRK_MIN>:
100023e4:	00 00 00 f0                                         ....

100023e8 <VIRT_SBRK_MAX>:
100023e8:	00 00 c0 ff                                         ....

100023ec <VIRT_ALLOCED_VIRT_PAGES>:
100023ec:	00 00 10 c2                                         ....

100023f0 <VIRT_ACPI_DRIVER>:
100023f0:	00 40 48 c2                                         .@H.

100023f4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100023f4:	96 00 00 00                                         ....

100023f8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100023f8:	2c 01 00 00 73 74 72 69 6e 67 20 74 65 73 74 2e     ,...string test.
10002408:	0a 00 66 90                                         ..f.

1000240c <vtable for ISA>:
	...
	10002414: R_386_32	ISA::~ISA()
	10002418: R_386_32	ISA::~ISA()
	1000241c: R_386_32	ISA::open(int, int, void*)
	10002420: R_386_32	ISA::close(int, int, void*)
	10002424: R_386_32	Device::hibernate()
	10002428: R_386_32	Device::wake()
	1000242c: R_386_32	ISA::detect()
	10002430: R_386_32	Device::disableLegacy()
	10002434: R_386_32	Device::powerSaving(PowerSavingLevel)

10002438 <PHYS_RAM_TABLE_SIZE>:
10002438:	13 05 00 00                                         ....

1000243c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000243c:	24 05 00 00                                         $...

10002440 <PHYS_RAM_TABLE>:
10002440:	00 06 00 00                                         ....

10002444 <PHYS_DMA_MEMORY_1>:
10002444:	00 00 01 00                                         ....

10002448 <PHYS_PHYS_PAGE_BITMAP>:
10002448:	00 00 02 00                                         ....

1000244c <PHYS_VIRT_PAGE_BITMAP>:
1000244c:	00 00 04 00                                         ....

10002450 <PHYS_DMA_MEMORY_2>:
10002450:	00 00 06 00                                         ....

10002454 <PHYS_ALLOCED_VIRT_PAGES>:
10002454:	00 00 10 00                                         ....

10002458 <PHYS_KRNL_PAGE_DIRECTORY>:
10002458:	00 10 00 00                                         ....

1000245c <VIRT_KERNEL_BASE>:
1000245c:	00 00 00 c0                                         ....

10002460 <VIRT_LOW_MEGS>:
10002460:	00 00 00 c2                                         ....

10002464 <VIRT_CPU_SPECIFIC>:
10002464:	00 00 40 c2                                         ..@.

10002468 <VIRT_RECURSIVE_SPOT_1>:
10002468:	00 00 80 c2                                         ....

1000246c <VIRT_RECURSIVE_SPOT_2>:
1000246c:	00 00 c0 c2                                         ....

10002470 <VIRT_DMA_MEMORY_1>:
10002470:	00 00 01 c2                                         ....

10002474 <SIZE_DMA_MEMORY_1>:
10002474:	00 00 01 00                                         ....

10002478 <VIRT_DMA_MEMORY_2>:
10002478:	00 00 06 c2                                         ....

1000247c <SIZE_DMA_MEMORY_2>:
1000247c:	00 00 02 00                                         ....

10002480 <VIRT_KRNL_PAGE_DIRECTORY>:
10002480:	00 10 00 c2                                         ....

10002484 <VIRT_PHYS_PAGE_BITMAP>:
10002484:	00 00 02 c2                                         ....

10002488 <SIZE_PHYS_PAGE_BITMAP>:
10002488:	00 00 02 00                                         ....

1000248c <VIRT_VIRT_PAGE_BITMAP>:
1000248c:	00 00 04 c2                                         ....

10002490 <SIZE_VIRT_PAGE_BITMAP>:
10002490:	00 80 00 00                                         ....

10002494 <VIRT_RAM_TABLE>:
10002494:	00 06 00 c2                                         ....

10002498 <VIRT_RAM_TABLE_SIZE>:
10002498:	13 05 00 c2                                         ....

1000249c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000249c:	24 05 00 c2                                         $...

100024a0 <SIZE_APP_STACK_USER>:
100024a0:	00 00 18 00                                         ....

100024a4 <SIZE_APP_STACK_KRNL>:
100024a4:	00 00 08 00                                         ....

100024a8 <SIZE_APP_STACK_TOTAL>:
100024a8:	00 00 20 00                                         .. .

100024ac <VIRT_APP_DATA>:
100024ac:	00 00 00 10                                         ....

100024b0 <VIRT_APP_STACK_USER_TOP>:
100024b0:	00 00 00 02                                         ....

100024b4 <VIRT_APP_STACK_KRNL_TOP>:
100024b4:	00 00 e8 01                                         ....

100024b8 <VIRT_HEAP_MIN>:
100024b8:	00 00 00 c8                                         ....

100024bc <VIRT_HEAP_MAX>:
100024bc:	ff ff ff ef                                         ....

100024c0 <VIRT_SBRK_MIN>:
100024c0:	00 00 00 f0                                         ....

100024c4 <VIRT_SBRK_MAX>:
100024c4:	00 00 c0 ff                                         ....

100024c8 <VIRT_ALLOCED_VIRT_PAGES>:
100024c8:	00 00 10 c2                                         ....

100024cc <VIRT_ACPI_DRIVER>:
100024cc:	00 40 48 c2                                         .@H.

100024d0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100024d0:	96 00 00 00                                         ....

100024d4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100024d4:	2c 01 00 00                                         ,...

100024d8 <CSWTCH.8>:
100024d8:	00 02 04 06 c0 c4 c8 cc                             ........

100024e0 <CSWTCH.9>:
100024e0:	01 03 05 07 c2 c6 ca ce                             ........

100024e8 <CSWTCH.10>:
100024e8:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
100024f8:	61 6e 67 65 2e 0a 00 90                             ange....

10002500 <vtable for DMA>:
	...
	10002508: R_386_32	DMA::~DMA()
	1000250c: R_386_32	DMA::~DMA()
	10002510: R_386_32	DMA::open(int, int, void*)
	10002514: R_386_32	DMA::close(int, int, void*)
	10002518: R_386_32	Device::hibernate()
	1000251c: R_386_32	Device::wake()
	10002520: R_386_32	Device::detect()
	10002524: R_386_32	Device::disableLegacy()
	10002528: R_386_32	Device::powerSaving(PowerSavingLevel)

1000252c <PHYS_RAM_TABLE_SIZE>:
1000252c:	13 05 00 00                                         ....

10002530 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002530:	24 05 00 00                                         $...

10002534 <PHYS_RAM_TABLE>:
10002534:	00 06 00 00                                         ....

10002538 <PHYS_DMA_MEMORY_1>:
10002538:	00 00 01 00                                         ....

1000253c <PHYS_PHYS_PAGE_BITMAP>:
1000253c:	00 00 02 00                                         ....

10002540 <PHYS_VIRT_PAGE_BITMAP>:
10002540:	00 00 04 00                                         ....

10002544 <PHYS_DMA_MEMORY_2>:
10002544:	00 00 06 00                                         ....

10002548 <PHYS_ALLOCED_VIRT_PAGES>:
10002548:	00 00 10 00                                         ....

1000254c <PHYS_KRNL_PAGE_DIRECTORY>:
1000254c:	00 10 00 00                                         ....

10002550 <VIRT_KERNEL_BASE>:
10002550:	00 00 00 c0                                         ....

10002554 <VIRT_LOW_MEGS>:
10002554:	00 00 00 c2                                         ....

10002558 <VIRT_CPU_SPECIFIC>:
10002558:	00 00 40 c2                                         ..@.

1000255c <VIRT_RECURSIVE_SPOT_1>:
1000255c:	00 00 80 c2                                         ....

10002560 <VIRT_RECURSIVE_SPOT_2>:
10002560:	00 00 c0 c2                                         ....

10002564 <VIRT_DMA_MEMORY_1>:
10002564:	00 00 01 c2                                         ....

10002568 <SIZE_DMA_MEMORY_1>:
10002568:	00 00 01 00                                         ....

1000256c <VIRT_DMA_MEMORY_2>:
1000256c:	00 00 06 c2                                         ....

10002570 <SIZE_DMA_MEMORY_2>:
10002570:	00 00 02 00                                         ....

10002574 <VIRT_KRNL_PAGE_DIRECTORY>:
10002574:	00 10 00 c2                                         ....

10002578 <VIRT_PHYS_PAGE_BITMAP>:
10002578:	00 00 02 c2                                         ....

1000257c <SIZE_PHYS_PAGE_BITMAP>:
1000257c:	00 00 02 00                                         ....

10002580 <VIRT_VIRT_PAGE_BITMAP>:
10002580:	00 00 04 c2                                         ....

10002584 <SIZE_VIRT_PAGE_BITMAP>:
10002584:	00 80 00 00                                         ....

10002588 <VIRT_RAM_TABLE>:
10002588:	00 06 00 c2                                         ....

1000258c <VIRT_RAM_TABLE_SIZE>:
1000258c:	13 05 00 c2                                         ....

10002590 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002590:	24 05 00 c2                                         $...

10002594 <SIZE_APP_STACK_USER>:
10002594:	00 00 18 00                                         ....

10002598 <SIZE_APP_STACK_KRNL>:
10002598:	00 00 08 00                                         ....

1000259c <SIZE_APP_STACK_TOTAL>:
1000259c:	00 00 20 00                                         .. .

100025a0 <VIRT_APP_DATA>:
100025a0:	00 00 00 10                                         ....

100025a4 <VIRT_APP_STACK_USER_TOP>:
100025a4:	00 00 00 02                                         ....

100025a8 <VIRT_APP_STACK_KRNL_TOP>:
100025a8:	00 00 e8 01                                         ....

100025ac <VIRT_HEAP_MIN>:
100025ac:	00 00 00 c8                                         ....

100025b0 <VIRT_HEAP_MAX>:
100025b0:	ff ff ff ef                                         ....

100025b4 <VIRT_SBRK_MIN>:
100025b4:	00 00 00 f0                                         ....

100025b8 <VIRT_SBRK_MAX>:
100025b8:	00 00 c0 ff                                         ....

100025bc <VIRT_ALLOCED_VIRT_PAGES>:
100025bc:	00 00 10 c2                                         ....

100025c0 <VIRT_ACPI_DRIVER>:
100025c0:	00 40 48 c2                                         .@H.

100025c4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100025c4:	96 00 00 00                                         ....

100025c8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100025c8:	2c 01 00 00                                         ,...

100025cc <vtable for PS2>:
	...
	100025d4: R_386_32	PS2::~PS2()
	100025d8: R_386_32	PS2::~PS2()
	100025dc: R_386_32	PS2::open(int, int, void*)
	100025e0: R_386_32	PS2::close(int, int, void*)
	100025e4: R_386_32	Device::hibernate()
	100025e8: R_386_32	Device::wake()
	100025ec: R_386_32	PS2::detect()
	100025f0: R_386_32	Device::disableLegacy()
	100025f4: R_386_32	Device::powerSaving(PowerSavingLevel)
100025f8:	66 90 66 90 66 90 66 90                             f.f.f.f.

10002600 <PHYS_RAM_TABLE_SIZE>:
10002600:	13 05 00 00                                         ....

10002604 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002604:	24 05 00 00                                         $...

10002608 <PHYS_RAM_TABLE>:
10002608:	00 06 00 00                                         ....

1000260c <PHYS_DMA_MEMORY_1>:
1000260c:	00 00 01 00                                         ....

10002610 <PHYS_PHYS_PAGE_BITMAP>:
10002610:	00 00 02 00                                         ....

10002614 <PHYS_VIRT_PAGE_BITMAP>:
10002614:	00 00 04 00                                         ....

10002618 <PHYS_DMA_MEMORY_2>:
10002618:	00 00 06 00                                         ....

1000261c <PHYS_ALLOCED_VIRT_PAGES>:
1000261c:	00 00 10 00                                         ....

10002620 <PHYS_KRNL_PAGE_DIRECTORY>:
10002620:	00 10 00 00                                         ....

10002624 <VIRT_KERNEL_BASE>:
10002624:	00 00 00 c0                                         ....

10002628 <VIRT_LOW_MEGS>:
10002628:	00 00 00 c2                                         ....

1000262c <VIRT_CPU_SPECIFIC>:
1000262c:	00 00 40 c2                                         ..@.

10002630 <VIRT_RECURSIVE_SPOT_1>:
10002630:	00 00 80 c2                                         ....

10002634 <VIRT_RECURSIVE_SPOT_2>:
10002634:	00 00 c0 c2                                         ....

10002638 <VIRT_DMA_MEMORY_1>:
10002638:	00 00 01 c2                                         ....

1000263c <SIZE_DMA_MEMORY_1>:
1000263c:	00 00 01 00                                         ....

10002640 <VIRT_DMA_MEMORY_2>:
10002640:	00 00 06 c2                                         ....

10002644 <SIZE_DMA_MEMORY_2>:
10002644:	00 00 02 00                                         ....

10002648 <VIRT_KRNL_PAGE_DIRECTORY>:
10002648:	00 10 00 c2                                         ....

1000264c <VIRT_PHYS_PAGE_BITMAP>:
1000264c:	00 00 02 c2                                         ....

10002650 <SIZE_PHYS_PAGE_BITMAP>:
10002650:	00 00 02 00                                         ....

10002654 <VIRT_VIRT_PAGE_BITMAP>:
10002654:	00 00 04 c2                                         ....

10002658 <SIZE_VIRT_PAGE_BITMAP>:
10002658:	00 80 00 00                                         ....

1000265c <VIRT_RAM_TABLE>:
1000265c:	00 06 00 c2                                         ....

10002660 <VIRT_RAM_TABLE_SIZE>:
10002660:	13 05 00 c2                                         ....

10002664 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002664:	24 05 00 c2                                         $...

10002668 <SIZE_APP_STACK_USER>:
10002668:	00 00 18 00                                         ....

1000266c <SIZE_APP_STACK_KRNL>:
1000266c:	00 00 08 00                                         ....

10002670 <SIZE_APP_STACK_TOTAL>:
10002670:	00 00 20 00                                         .. .

10002674 <VIRT_APP_DATA>:
10002674:	00 00 00 10                                         ....

10002678 <VIRT_APP_STACK_USER_TOP>:
10002678:	00 00 00 02                                         ....

1000267c <VIRT_APP_STACK_KRNL_TOP>:
1000267c:	00 00 e8 01                                         ....

10002680 <VIRT_HEAP_MIN>:
10002680:	00 00 00 c8                                         ....

10002684 <VIRT_HEAP_MAX>:
10002684:	ff ff ff ef                                         ....

10002688 <VIRT_SBRK_MIN>:
10002688:	00 00 00 f0                                         ....

1000268c <VIRT_SBRK_MAX>:
1000268c:	00 00 c0 ff                                         ....

10002690 <VIRT_ALLOCED_VIRT_PAGES>:
10002690:	00 00 10 c2                                         ....

10002694 <VIRT_ACPI_DRIVER>:
10002694:	00 40 48 c2                                         .@H.

10002698 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002698:	96 00 00 00                                         ....

1000269c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000269c:	2c 01 00 00                                         ,...

100026a0 <PS2Keyboard::internalMapperLower>:
100026a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100026b0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100026c0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100026d0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100026e0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100026f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002700:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002710:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002720:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100027a0 <PS2Keyboard::internalMapperUpper>:
100027a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100027b0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100027c0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100027d0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100027e0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100027f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002800:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002810:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002820:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100028a0 <PS2Keyboard::internalMapCapLower>:
100028a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100028b0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
100028c0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
100028d0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100028e0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100028f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002900:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002910:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002920:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100029a0 <PS2Keyboard::internalMapCapUpper>:
100029a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100029b0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
100029c0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
100029d0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100029e0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100029f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002a00:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002a10:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002a20:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002aa0 <PS2Keyboard::internalMapperLowerBad>:
10002aa0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002ab0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10002ac0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10002ad0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10002ae0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002af0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002b00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002b10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002b20:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002b30:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10002b40:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10002b50:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10002b60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002b70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002b80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002b90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002ba0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002bb0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10002bc0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10002bd0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10002be0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002bf0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002c00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c20:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002c30:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10002c40:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10002c50:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10002c60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002c70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002c80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002ca0:	00 66 90 90                                         .f..

10002ca4 <vtable for PS2Keyboard>:
	...
	10002cac: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002cb0: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002cb4: R_386_32	PS2Keyboard::open(int, int, void*)
	10002cb8: R_386_32	PS2Keyboard::close(int, int, void*)
	10002cbc: R_386_32	Device::hibernate()
	10002cc0: R_386_32	Device::wake()
	10002cc4: R_386_32	Device::detect()
	10002cc8: R_386_32	Device::disableLegacy()
	10002ccc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002cd0: R_386_32	PS2Keyboard::setRepeatRate(int)
	10002cd4: R_386_32	PS2Keyboard::setRepeatDelay(int)

10002cd8 <PHYS_RAM_TABLE_SIZE>:
10002cd8:	13 05 00 00                                         ....

10002cdc <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002cdc:	24 05 00 00                                         $...

10002ce0 <PHYS_RAM_TABLE>:
10002ce0:	00 06 00 00                                         ....

10002ce4 <PHYS_DMA_MEMORY_1>:
10002ce4:	00 00 01 00                                         ....

10002ce8 <PHYS_PHYS_PAGE_BITMAP>:
10002ce8:	00 00 02 00                                         ....

10002cec <PHYS_VIRT_PAGE_BITMAP>:
10002cec:	00 00 04 00                                         ....

10002cf0 <PHYS_DMA_MEMORY_2>:
10002cf0:	00 00 06 00                                         ....

10002cf4 <PHYS_ALLOCED_VIRT_PAGES>:
10002cf4:	00 00 10 00                                         ....

10002cf8 <PHYS_KRNL_PAGE_DIRECTORY>:
10002cf8:	00 10 00 00                                         ....

10002cfc <VIRT_KERNEL_BASE>:
10002cfc:	00 00 00 c0                                         ....

10002d00 <VIRT_LOW_MEGS>:
10002d00:	00 00 00 c2                                         ....

10002d04 <VIRT_CPU_SPECIFIC>:
10002d04:	00 00 40 c2                                         ..@.

10002d08 <VIRT_RECURSIVE_SPOT_1>:
10002d08:	00 00 80 c2                                         ....

10002d0c <VIRT_RECURSIVE_SPOT_2>:
10002d0c:	00 00 c0 c2                                         ....

10002d10 <VIRT_DMA_MEMORY_1>:
10002d10:	00 00 01 c2                                         ....

10002d14 <SIZE_DMA_MEMORY_1>:
10002d14:	00 00 01 00                                         ....

10002d18 <VIRT_DMA_MEMORY_2>:
10002d18:	00 00 06 c2                                         ....

10002d1c <SIZE_DMA_MEMORY_2>:
10002d1c:	00 00 02 00                                         ....

10002d20 <VIRT_KRNL_PAGE_DIRECTORY>:
10002d20:	00 10 00 c2                                         ....

10002d24 <VIRT_PHYS_PAGE_BITMAP>:
10002d24:	00 00 02 c2                                         ....

10002d28 <SIZE_PHYS_PAGE_BITMAP>:
10002d28:	00 00 02 00                                         ....

10002d2c <VIRT_VIRT_PAGE_BITMAP>:
10002d2c:	00 00 04 c2                                         ....

10002d30 <SIZE_VIRT_PAGE_BITMAP>:
10002d30:	00 80 00 00                                         ....

10002d34 <VIRT_RAM_TABLE>:
10002d34:	00 06 00 c2                                         ....

10002d38 <VIRT_RAM_TABLE_SIZE>:
10002d38:	13 05 00 c2                                         ....

10002d3c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002d3c:	24 05 00 c2                                         $...

10002d40 <SIZE_APP_STACK_USER>:
10002d40:	00 00 18 00                                         ....

10002d44 <SIZE_APP_STACK_KRNL>:
10002d44:	00 00 08 00                                         ....

10002d48 <SIZE_APP_STACK_TOTAL>:
10002d48:	00 00 20 00                                         .. .

10002d4c <VIRT_APP_DATA>:
10002d4c:	00 00 00 10                                         ....

10002d50 <VIRT_APP_STACK_USER_TOP>:
10002d50:	00 00 00 02                                         ....

10002d54 <VIRT_APP_STACK_KRNL_TOP>:
10002d54:	00 00 e8 01                                         ....

10002d58 <VIRT_HEAP_MIN>:
10002d58:	00 00 00 c8                                         ....

10002d5c <VIRT_HEAP_MAX>:
10002d5c:	ff ff ff ef                                         ....

10002d60 <VIRT_SBRK_MIN>:
10002d60:	00 00 00 f0                                         ....

10002d64 <VIRT_SBRK_MAX>:
10002d64:	00 00 c0 ff                                         ....

10002d68 <VIRT_ALLOCED_VIRT_PAGES>:
10002d68:	00 00 10 c2                                         ....

10002d6c <VIRT_ACPI_DRIVER>:
10002d6c:	00 40 48 c2                                         .@H.

10002d70 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002d70:	96 00 00 00                                         ....

10002d74 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002d74:	2c 01 00 00                                         ,...

10002d78 <vtable for PS2Mouse>:
	...
	10002d80: R_386_32	PS2Mouse::~PS2Mouse()
	10002d84: R_386_32	PS2Mouse::~PS2Mouse()
	10002d88: R_386_32	PS2Mouse::open(int, int, void*)
	10002d8c: R_386_32	PS2Mouse::close(int, int, void*)
	10002d90: R_386_32	Device::hibernate()
	10002d94: R_386_32	Device::wake()
	10002d98: R_386_32	PS2Mouse::detect()
	10002d9c: R_386_32	Device::disableLegacy()
	10002da0: R_386_32	Device::powerSaving(PowerSavingLevel)

10002da4 <PHYS_RAM_TABLE_SIZE>:
10002da4:	13 05 00 00                                         ....

10002da8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002da8:	24 05 00 00                                         $...

10002dac <PHYS_RAM_TABLE>:
10002dac:	00 06 00 00                                         ....

10002db0 <PHYS_DMA_MEMORY_1>:
10002db0:	00 00 01 00                                         ....

10002db4 <PHYS_PHYS_PAGE_BITMAP>:
10002db4:	00 00 02 00                                         ....

10002db8 <PHYS_VIRT_PAGE_BITMAP>:
10002db8:	00 00 04 00                                         ....

10002dbc <PHYS_DMA_MEMORY_2>:
10002dbc:	00 00 06 00                                         ....

10002dc0 <PHYS_ALLOCED_VIRT_PAGES>:
10002dc0:	00 00 10 00                                         ....

10002dc4 <PHYS_KRNL_PAGE_DIRECTORY>:
10002dc4:	00 10 00 00                                         ....

10002dc8 <VIRT_KERNEL_BASE>:
10002dc8:	00 00 00 c0                                         ....

10002dcc <VIRT_LOW_MEGS>:
10002dcc:	00 00 00 c2                                         ....

10002dd0 <VIRT_CPU_SPECIFIC>:
10002dd0:	00 00 40 c2                                         ..@.

10002dd4 <VIRT_RECURSIVE_SPOT_1>:
10002dd4:	00 00 80 c2                                         ....

10002dd8 <VIRT_RECURSIVE_SPOT_2>:
10002dd8:	00 00 c0 c2                                         ....

10002ddc <VIRT_DMA_MEMORY_1>:
10002ddc:	00 00 01 c2                                         ....

10002de0 <SIZE_DMA_MEMORY_1>:
10002de0:	00 00 01 00                                         ....

10002de4 <VIRT_DMA_MEMORY_2>:
10002de4:	00 00 06 c2                                         ....

10002de8 <SIZE_DMA_MEMORY_2>:
10002de8:	00 00 02 00                                         ....

10002dec <VIRT_KRNL_PAGE_DIRECTORY>:
10002dec:	00 10 00 c2                                         ....

10002df0 <VIRT_PHYS_PAGE_BITMAP>:
10002df0:	00 00 02 c2                                         ....

10002df4 <SIZE_PHYS_PAGE_BITMAP>:
10002df4:	00 00 02 00                                         ....

10002df8 <VIRT_VIRT_PAGE_BITMAP>:
10002df8:	00 00 04 c2                                         ....

10002dfc <SIZE_VIRT_PAGE_BITMAP>:
10002dfc:	00 80 00 00                                         ....

10002e00 <VIRT_RAM_TABLE>:
10002e00:	00 06 00 c2                                         ....

10002e04 <VIRT_RAM_TABLE_SIZE>:
10002e04:	13 05 00 c2                                         ....

10002e08 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002e08:	24 05 00 c2                                         $...

10002e0c <SIZE_APP_STACK_USER>:
10002e0c:	00 00 18 00                                         ....

10002e10 <SIZE_APP_STACK_KRNL>:
10002e10:	00 00 08 00                                         ....

10002e14 <SIZE_APP_STACK_TOTAL>:
10002e14:	00 00 20 00                                         .. .

10002e18 <VIRT_APP_DATA>:
10002e18:	00 00 00 10                                         ....

10002e1c <VIRT_APP_STACK_USER_TOP>:
10002e1c:	00 00 00 02                                         ....

10002e20 <VIRT_APP_STACK_KRNL_TOP>:
10002e20:	00 00 e8 01                                         ....

10002e24 <VIRT_HEAP_MIN>:
10002e24:	00 00 00 c8                                         ....

10002e28 <VIRT_HEAP_MAX>:
10002e28:	ff ff ff ef                                         ....

10002e2c <VIRT_SBRK_MIN>:
10002e2c:	00 00 00 f0                                         ....

10002e30 <VIRT_SBRK_MAX>:
10002e30:	00 00 c0 ff                                         ....

10002e34 <VIRT_ALLOCED_VIRT_PAGES>:
10002e34:	00 00 10 c2                                         ....

10002e38 <VIRT_ACPI_DRIVER>:
10002e38:	00 40 48 c2                                         .@H.

10002e3c <TERMINAL_KEYBUFFER_IN_SIZE>:
10002e3c:	96 00 00 00                                         ....

10002e40 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002e40:	2c 01 00 00                                         ,...

10002e44 <vtable for PS2Port>:
	...
	10002e4c: R_386_32	PS2Port::~PS2Port()
	10002e50: R_386_32	PS2Port::~PS2Port()
	10002e54: R_386_32	PS2Port::open(int, int, void*)
	10002e58: R_386_32	PS2Port::close(int, int, void*)
	10002e5c: R_386_32	Device::hibernate()
	10002e60: R_386_32	Device::wake()
	10002e64: R_386_32	PS2Port::detect()
	10002e68: R_386_32	Device::disableLegacy()
	10002e6c: R_386_32	Device::powerSaving(PowerSavingLevel)

10002e70 <PHYS_RAM_TABLE_SIZE>:
10002e70:	13 05 00 00                                         ....

10002e74 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002e74:	24 05 00 00                                         $...

10002e78 <PHYS_RAM_TABLE>:
10002e78:	00 06 00 00                                         ....

10002e7c <PHYS_DMA_MEMORY_1>:
10002e7c:	00 00 01 00                                         ....

10002e80 <PHYS_PHYS_PAGE_BITMAP>:
10002e80:	00 00 02 00                                         ....

10002e84 <PHYS_VIRT_PAGE_BITMAP>:
10002e84:	00 00 04 00                                         ....

10002e88 <PHYS_DMA_MEMORY_2>:
10002e88:	00 00 06 00                                         ....

10002e8c <PHYS_ALLOCED_VIRT_PAGES>:
10002e8c:	00 00 10 00                                         ....

10002e90 <PHYS_KRNL_PAGE_DIRECTORY>:
10002e90:	00 10 00 00                                         ....

10002e94 <VIRT_KERNEL_BASE>:
10002e94:	00 00 00 c0                                         ....

10002e98 <VIRT_LOW_MEGS>:
10002e98:	00 00 00 c2                                         ....

10002e9c <VIRT_CPU_SPECIFIC>:
10002e9c:	00 00 40 c2                                         ..@.

10002ea0 <VIRT_RECURSIVE_SPOT_1>:
10002ea0:	00 00 80 c2                                         ....

10002ea4 <VIRT_RECURSIVE_SPOT_2>:
10002ea4:	00 00 c0 c2                                         ....

10002ea8 <VIRT_DMA_MEMORY_1>:
10002ea8:	00 00 01 c2                                         ....

10002eac <SIZE_DMA_MEMORY_1>:
10002eac:	00 00 01 00                                         ....

10002eb0 <VIRT_DMA_MEMORY_2>:
10002eb0:	00 00 06 c2                                         ....

10002eb4 <SIZE_DMA_MEMORY_2>:
10002eb4:	00 00 02 00                                         ....

10002eb8 <VIRT_KRNL_PAGE_DIRECTORY>:
10002eb8:	00 10 00 c2                                         ....

10002ebc <VIRT_PHYS_PAGE_BITMAP>:
10002ebc:	00 00 02 c2                                         ....

10002ec0 <SIZE_PHYS_PAGE_BITMAP>:
10002ec0:	00 00 02 00                                         ....

10002ec4 <VIRT_VIRT_PAGE_BITMAP>:
10002ec4:	00 00 04 c2                                         ....

10002ec8 <SIZE_VIRT_PAGE_BITMAP>:
10002ec8:	00 80 00 00                                         ....

10002ecc <VIRT_RAM_TABLE>:
10002ecc:	00 06 00 c2                                         ....

10002ed0 <VIRT_RAM_TABLE_SIZE>:
10002ed0:	13 05 00 c2                                         ....

10002ed4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002ed4:	24 05 00 c2                                         $...

10002ed8 <SIZE_APP_STACK_USER>:
10002ed8:	00 00 18 00                                         ....

10002edc <SIZE_APP_STACK_KRNL>:
10002edc:	00 00 08 00                                         ....

10002ee0 <SIZE_APP_STACK_TOTAL>:
10002ee0:	00 00 20 00                                         .. .

10002ee4 <VIRT_APP_DATA>:
10002ee4:	00 00 00 10                                         ....

10002ee8 <VIRT_APP_STACK_USER_TOP>:
10002ee8:	00 00 00 02                                         ....

10002eec <VIRT_APP_STACK_KRNL_TOP>:
10002eec:	00 00 e8 01                                         ....

10002ef0 <VIRT_HEAP_MIN>:
10002ef0:	00 00 00 c8                                         ....

10002ef4 <VIRT_HEAP_MAX>:
10002ef4:	ff ff ff ef                                         ....

10002ef8 <VIRT_SBRK_MIN>:
10002ef8:	00 00 00 f0                                         ....

10002efc <VIRT_SBRK_MAX>:
10002efc:	00 00 c0 ff                                         ....

10002f00 <VIRT_ALLOCED_VIRT_PAGES>:
10002f00:	00 00 10 c2                                         ....

10002f04 <VIRT_ACPI_DRIVER>:
10002f04:	00 40 48 c2                                         .@H.

10002f08 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002f08:	96 00 00 00                                         ....

10002f0c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002f0c:	2c 01 00 00                                         ,...

10002f10 <vtable for SoundBlaster16>:
	...
	10002f18: R_386_32	SoundBlaster16::~SoundBlaster16()
	10002f1c: R_386_32	SoundBlaster16::~SoundBlaster16()
	10002f20: R_386_32	SoundBlaster16::open(int, int, void*)
	10002f24: R_386_32	SoundBlaster16::close(int, int, void*)
	10002f28: R_386_32	Device::hibernate()
	10002f2c: R_386_32	Device::wake()
	10002f30: R_386_32	Device::detect()
	10002f34: R_386_32	Device::disableLegacy()
	10002f38: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002f3c: R_386_32	SoundBlaster16::getNumHwChannels()
	10002f40: R_386_32	SoundBlaster16::beginPlayback(int, int)
	10002f44: R_386_32	SoundBlaster16::stopPlayback()

Disassembly of section .text._ZN3ISAD2Ev:

10002f48 <ISA::~ISA()>:
10002f48:	55                   	push   ebp
10002f49:	89 e5                	mov    ebp,esp
10002f4b:	83 ec 08             	sub    esp,0x8
10002f4e:	ba 08 00 00 00       	mov    edx,0x8	10002f4f: R_386_32	vtable for ISA
10002f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f56:	89 10                	mov    DWORD PTR [eax],edx
10002f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f5b:	83 ec 0c             	sub    esp,0xc
10002f5e:	50                   	push   eax
10002f5f:	e8 fc ff ff ff       	call   10002f60 <ISA::~ISA()+0x18>	10002f60: R_386_PC32	Bus::~Bus()
10002f64:	83 c4 10             	add    esp,0x10
10002f67:	90                   	nop
10002f68:	c9                   	leave  
10002f69:	c3                   	ret    

Disassembly of section .text._ZN3ISAD0Ev:

10002f6a <ISA::~ISA()>:
10002f6a:	55                   	push   ebp
10002f6b:	89 e5                	mov    ebp,esp
10002f6d:	83 ec 08             	sub    esp,0x8
10002f70:	83 ec 0c             	sub    esp,0xc
10002f73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002f76:	e8 fc ff ff ff       	call   10002f77 <ISA::~ISA()+0xd>	10002f77: R_386_PC32	ISA::~ISA()
10002f7b:	83 c4 10             	add    esp,0x10
10002f7e:	83 ec 08             	sub    esp,0x8
10002f81:	68 58 01 00 00       	push   0x158
10002f86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002f89:	e8 fc ff ff ff       	call   10002f8a <ISA::~ISA()+0x20>	10002f8a: R_386_PC32	operator delete(void*, unsigned long)
10002f8e:	83 c4 10             	add    esp,0x10
10002f91:	c9                   	leave  
10002f92:	c3                   	ret    

Disassembly of section .text._ZN3DMAD2Ev:

10002f94 <DMA::~DMA()>:
10002f94:	55                   	push   ebp
10002f95:	89 e5                	mov    ebp,esp
10002f97:	83 ec 08             	sub    esp,0x8
10002f9a:	ba 08 00 00 00       	mov    edx,0x8	10002f9b: R_386_32	vtable for DMA
10002f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fa2:	89 10                	mov    DWORD PTR [eax],edx
10002fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fa7:	83 ec 0c             	sub    esp,0xc
10002faa:	50                   	push   eax
10002fab:	e8 fc ff ff ff       	call   10002fac <DMA::~DMA()+0x18>	10002fac: R_386_PC32	Device::~Device()
10002fb0:	83 c4 10             	add    esp,0x10
10002fb3:	90                   	nop
10002fb4:	c9                   	leave  
10002fb5:	c3                   	ret    

Disassembly of section .text._ZN3DMAD0Ev:

10002fb6 <DMA::~DMA()>:
10002fb6:	55                   	push   ebp
10002fb7:	89 e5                	mov    ebp,esp
10002fb9:	83 ec 08             	sub    esp,0x8
10002fbc:	83 ec 0c             	sub    esp,0xc
10002fbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <DMA::~DMA()+0xd>	10002fc3: R_386_PC32	DMA::~DMA()
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	83 ec 08             	sub    esp,0x8
10002fcd:	68 5c 01 00 00       	push   0x15c
10002fd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002fd5:	e8 fc ff ff ff       	call   10002fd6 <DMA::~DMA()+0x20>	10002fd6: R_386_PC32	operator delete(void*, unsigned long)
10002fda:	83 c4 10             	add    esp,0x10
10002fdd:	c9                   	leave  
10002fde:	c3                   	ret    

Disassembly of section .text._ZN3PS2D2Ev:

10002fe0 <PS2::~PS2()>:
10002fe0:	55                   	push   ebp
10002fe1:	89 e5                	mov    ebp,esp
10002fe3:	83 ec 08             	sub    esp,0x8
10002fe6:	ba 08 00 00 00       	mov    edx,0x8	10002fe7: R_386_32	vtable for PS2
10002feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fee:	89 10                	mov    DWORD PTR [eax],edx
10002ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ff3:	83 ec 0c             	sub    esp,0xc
10002ff6:	50                   	push   eax
10002ff7:	e8 fc ff ff ff       	call   10002ff8 <PS2::~PS2()+0x18>	10002ff8: R_386_PC32	Bus::~Bus()
10002ffc:	83 c4 10             	add    esp,0x10
10002fff:	90                   	nop
10003000:	c9                   	leave  
10003001:	c3                   	ret    

Disassembly of section .text._ZN3PS2D0Ev:

10003002 <PS2::~PS2()>:
10003002:	55                   	push   ebp
10003003:	89 e5                	mov    ebp,esp
10003005:	83 ec 08             	sub    esp,0x8
10003008:	83 ec 0c             	sub    esp,0xc
1000300b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000300e:	e8 fc ff ff ff       	call   1000300f <PS2::~PS2()+0xd>	1000300f: R_386_PC32	PS2::~PS2()
10003013:	83 c4 10             	add    esp,0x10
10003016:	83 ec 08             	sub    esp,0x8
10003019:	68 60 01 00 00       	push   0x160
1000301e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003021:	e8 fc ff ff ff       	call   10003022 <PS2::~PS2()+0x20>	10003022: R_386_PC32	operator delete(void*, unsigned long)
10003026:	83 c4 10             	add    esp,0x10
10003029:	c9                   	leave  
1000302a:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD2Ev:

1000302c <PS2Mouse::~PS2Mouse()>:
1000302c:	55                   	push   ebp
1000302d:	89 e5                	mov    ebp,esp
1000302f:	83 ec 08             	sub    esp,0x8
10003032:	ba 08 00 00 00       	mov    edx,0x8	10003033: R_386_32	vtable for PS2Mouse
10003037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000303a:	89 10                	mov    DWORD PTR [eax],edx
1000303c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000303f:	83 ec 0c             	sub    esp,0xc
10003042:	50                   	push   eax
10003043:	e8 fc ff ff ff       	call   10003044 <PS2Mouse::~PS2Mouse()+0x18>	10003044: R_386_PC32	Mouse::~Mouse()
10003048:	83 c4 10             	add    esp,0x10
1000304b:	90                   	nop
1000304c:	c9                   	leave  
1000304d:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD0Ev:

1000304e <PS2Mouse::~PS2Mouse()>:
1000304e:	55                   	push   ebp
1000304f:	89 e5                	mov    ebp,esp
10003051:	83 ec 08             	sub    esp,0x8
10003054:	83 ec 0c             	sub    esp,0xc
10003057:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000305a:	e8 fc ff ff ff       	call   1000305b <PS2Mouse::~PS2Mouse()+0xd>	1000305b: R_386_PC32	PS2Mouse::~PS2Mouse()
1000305f:	83 c4 10             	add    esp,0x10
10003062:	83 ec 08             	sub    esp,0x8
10003065:	68 68 01 00 00       	push   0x168
1000306a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000306d:	e8 fc ff ff ff       	call   1000306e <PS2Mouse::~PS2Mouse()+0x20>	1000306e: R_386_PC32	operator delete(void*, unsigned long)
10003072:	83 c4 10             	add    esp,0x10
10003075:	c9                   	leave  
10003076:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD2Ev:

10003078 <PS2Port::~PS2Port()>:
10003078:	55                   	push   ebp
10003079:	89 e5                	mov    ebp,esp
1000307b:	83 ec 08             	sub    esp,0x8
1000307e:	ba 08 00 00 00       	mov    edx,0x8	1000307f: R_386_32	vtable for PS2Port
10003083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003086:	89 10                	mov    DWORD PTR [eax],edx
10003088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000308b:	83 ec 0c             	sub    esp,0xc
1000308e:	50                   	push   eax
1000308f:	e8 fc ff ff ff       	call   10003090 <PS2Port::~PS2Port()+0x18>	10003090: R_386_PC32	Bus::~Bus()
10003094:	83 c4 10             	add    esp,0x10
10003097:	90                   	nop
10003098:	c9                   	leave  
10003099:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD0Ev:

1000309a <PS2Port::~PS2Port()>:
1000309a:	55                   	push   ebp
1000309b:	89 e5                	mov    ebp,esp
1000309d:	83 ec 08             	sub    esp,0x8
100030a0:	83 ec 0c             	sub    esp,0xc
100030a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100030a6:	e8 fc ff ff ff       	call   100030a7 <PS2Port::~PS2Port()+0xd>	100030a7: R_386_PC32	PS2Port::~PS2Port()
100030ab:	83 c4 10             	add    esp,0x10
100030ae:	83 ec 08             	sub    esp,0x8
100030b1:	68 60 01 00 00       	push   0x160
100030b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100030b9:	e8 fc ff ff ff       	call   100030ba <PS2Port::~PS2Port()+0x20>	100030ba: R_386_PC32	operator delete(void*, unsigned long)
100030be:	83 c4 10             	add    esp,0x10
100030c1:	c9                   	leave  
100030c2:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D2Ev:

100030c4 <SoundBlaster16::~SoundBlaster16()>:
100030c4:	55                   	push   ebp
100030c5:	89 e5                	mov    ebp,esp
100030c7:	83 ec 08             	sub    esp,0x8
100030ca:	ba 08 00 00 00       	mov    edx,0x8	100030cb: R_386_32	vtable for SoundBlaster16
100030cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030d2:	89 10                	mov    DWORD PTR [eax],edx
100030d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030d7:	83 ec 0c             	sub    esp,0xc
100030da:	50                   	push   eax
100030db:	e8 fc ff ff ff       	call   100030dc <SoundBlaster16::~SoundBlaster16()+0x18>	100030dc: R_386_PC32	SoundDevice::~SoundDevice()
100030e0:	83 c4 10             	add    esp,0x10
100030e3:	90                   	nop
100030e4:	c9                   	leave  
100030e5:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D0Ev:

100030e6 <SoundBlaster16::~SoundBlaster16()>:
100030e6:	55                   	push   ebp
100030e7:	89 e5                	mov    ebp,esp
100030e9:	83 ec 08             	sub    esp,0x8
100030ec:	83 ec 0c             	sub    esp,0xc
100030ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100030f2:	e8 fc ff ff ff       	call   100030f3 <SoundBlaster16::~SoundBlaster16()+0xd>	100030f3: R_386_PC32	SoundBlaster16::~SoundBlaster16()
100030f7:	83 c4 10             	add    esp,0x10
100030fa:	83 ec 08             	sub    esp,0x8
100030fd:	68 fc 01 00 00       	push   0x1fc
10003102:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003105:	e8 fc ff ff ff       	call   10003106 <SoundBlaster16::~SoundBlaster16()+0x20>	10003106: R_386_PC32	operator delete(void*, unsigned long)
1000310a:	83 c4 10             	add    esp,0x10
1000310d:	c9                   	leave  
1000310e:	c3                   	ret    
