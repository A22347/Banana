
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 f8 25 00 10       	push   0x100025f8	1000001c: R_386_32	.text
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	kprintf(char const*, ...)
10000025:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
1000002c:	e8 fc ff ff ff       	call   1000002d <realstart(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	89 04 24             	mov    DWORD PTR [esp],eax
10000034:	89 c3                	mov    ebx,eax
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	ISA::ISA()
1000003b:	58                   	pop    eax
1000003c:	5a                   	pop    edx
1000003d:	53                   	push   ebx
1000003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000042:	e8 fc ff ff ff       	call   10000043 <realstart(void*)+0x2c>	10000043: R_386_PC32	Device::addChild(Device*)
10000047:	6a 00                	push   0x0
10000049:	8b 03                	mov    eax,DWORD PTR [ebx]
1000004b:	6a 00                	push   0x0
1000004d:	6a 00                	push   0x0
1000004f:	53                   	push   ebx
10000050:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000053:	83 c4 28             	add    esp,0x28
10000056:	5b                   	pop    ebx
10000057:	c3                   	ret    

10000058 <ISA::ISA()>:
10000058:	55                   	push   ebp
10000059:	89 e5                	mov    ebp,esp
1000005b:	83 ec 08             	sub    esp,0x8
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	83 ec 08             	sub    esp,0x8
10000064:	68 00 00 00 00       	push   0x0	10000065: R_386_32	busname
10000069:	50                   	push   eax
1000006a:	e8 fc ff ff ff       	call   1000006b <ISA::ISA()+0x13>	1000006b: R_386_PC32	Bus::Bus(char const*)
1000006f:	83 c4 10             	add    esp,0x10
10000072:	ba 08 00 00 00       	mov    edx,0x8	10000073: R_386_32	vtable for ISA
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	89 10                	mov    DWORD PTR [eax],edx
1000007c:	90                   	nop
1000007d:	c9                   	leave  
1000007e:	c3                   	ret    
1000007f:	90                   	nop

10000080 <ISA::open(int, int, void*)>:
10000080:	83 ec 18             	sub    esp,0x18
10000083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	50                   	push   eax
1000008a:	ff 52 18             	call   DWORD PTR [edx+0x18]
1000008d:	31 c0                	xor    eax,eax
1000008f:	83 c4 1c             	add    esp,0x1c
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::close(int, int, void*)>:
10000094:	31 c0                	xor    eax,eax
10000096:	c3                   	ret    
10000097:	90                   	nop

10000098 <ISA::doSpeaker()>:
10000098:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000009a: R_386_32	systemBuzzer
1000009f:	75 4a                	jne    100000eb <ISA::doSpeaker()+0x53>
100000a1:	53                   	push   ebx
100000a2:	83 ec 14             	sub    esp,0x14
100000a5:	68 5c 01 00 00       	push   0x15c
100000aa:	e8 fc ff ff ff       	call   100000ab <ISA::doSpeaker()+0x13>	100000ab: R_386_PC32	operator new(unsigned long)
100000af:	89 04 24             	mov    DWORD PTR [esp],eax
100000b2:	89 c3                	mov    ebx,eax
100000b4:	e8 fc ff ff ff       	call   100000b5 <ISA::doSpeaker()+0x1d>	100000b5: R_386_PC32	Beep::Beep()
100000b9:	58                   	pop    eax
100000ba:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100000bc: R_386_32	systemBuzzer
100000c0:	5a                   	pop    edx
100000c1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
100000cb:	53                   	push   ebx
100000cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000d0:	e8 fc ff ff ff       	call   100000d1 <ISA::doSpeaker()+0x39>	100000d1: R_386_PC32	Device::addChild(Device*)
100000d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100000d6: R_386_32	systemBuzzer
100000da:	8b 10                	mov    edx,DWORD PTR [eax]
100000dc:	6a 00                	push   0x0
100000de:	6a 00                	push   0x0
100000e0:	6a 00                	push   0x0
100000e2:	50                   	push   eax
100000e3:	ff 52 08             	call   DWORD PTR [edx+0x8]
100000e6:	83 c4 28             	add    esp,0x28
100000e9:	5b                   	pop    ebx
100000ea:	c3                   	ret    
100000eb:	c3                   	ret    

100000ec <ISA::doSoundblaster()>:
100000ec:	c3                   	ret    
100000ed:	90                   	nop

100000ee <ISA::doSerial()>:
100000ee:	c3                   	ret    
100000ef:	90                   	nop

100000f0 <ISA::doParallel()>:
100000f0:	c3                   	ret    
100000f1:	90                   	nop

100000f2 <ISA::doGameport()>:
100000f2:	c3                   	ret    
100000f3:	90                   	nop

100000f4 <ISA::doFloppy()>:
100000f4:	c3                   	ret    
100000f5:	90                   	nop

100000f6 <ISA::doATA()>:
100000f6:	c3                   	ret    
100000f7:	90                   	nop

100000f8 <ISA::doPS2()>:
100000f8:	53                   	push   ebx
100000f9:	83 ec 14             	sub    esp,0x14
100000fc:	68 00 00 00 00       	push   0x0	100000fd: R_386_32	str_ps2
10000101:	e8 fc ff ff ff       	call   10000102 <ISA::doPS2()+0xa>	10000102: R_386_PC32	kprintf(char const*, ...)
10000106:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000109: R_386_32	str_ps2
1000010d:	e8 fc ff ff ff       	call   1000010e <ISA::doPS2()+0x16>	1000010e: R_386_PC32	kprintf(char const*, ...)
10000112:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000115: R_386_32	str_ps2
10000119:	e8 fc ff ff ff       	call   1000011a <ISA::doPS2()+0x22>	1000011a: R_386_PC32	kprintf(char const*, ...)
1000011e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000121: R_386_32	str_ps2
10000125:	e8 fc ff ff ff       	call   10000126 <ISA::doPS2()+0x2e>	10000126: R_386_PC32	kprintf(char const*, ...)
1000012a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000131:	e8 fc ff ff ff       	call   10000132 <ISA::doPS2()+0x3a>	10000132: R_386_PC32	operator new(unsigned long)
10000136:	89 04 24             	mov    DWORD PTR [esp],eax
10000139:	89 c3                	mov    ebx,eax
1000013b:	e8 fc ff ff ff       	call   1000013c <ISA::doPS2()+0x44>	1000013c: R_386_PC32	PS2::PS2()
10000140:	58                   	pop    eax
10000141:	5a                   	pop    edx
10000142:	53                   	push   ebx
10000143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000147:	e8 fc ff ff ff       	call   10000148 <ISA::doPS2()+0x50>	10000148: R_386_PC32	Device::addChild(Device*)
1000014c:	6a 00                	push   0x0
1000014e:	8b 03                	mov    eax,DWORD PTR [ebx]
10000150:	6a 00                	push   0x0
10000152:	6a 00                	push   0x0
10000154:	53                   	push   ebx
10000155:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000158:	83 c4 28             	add    esp,0x28
1000015b:	5b                   	pop    ebx
1000015c:	c3                   	ret    
1000015d:	90                   	nop

1000015e <ISA::doRTC()>:
1000015e:	53                   	push   ebx
1000015f:	83 ec 14             	sub    esp,0x14
10000162:	a1 00 00 00 00       	mov    eax,ds:0x0	10000163: R_386_32	computer
10000167:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
10000171:	68 60 01 00 00       	push   0x160
10000176:	e8 fc ff ff ff       	call   10000177 <ISA::doRTC()+0x19>	10000177: R_386_PC32	operator new(unsigned long)
1000017b:	89 04 24             	mov    DWORD PTR [esp],eax
1000017e:	89 c3                	mov    ebx,eax
10000180:	e8 fc ff ff ff       	call   10000181 <ISA::doRTC()+0x23>	10000181: R_386_PC32	RTC::RTC()
10000185:	58                   	pop    eax
10000186:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
10000190:	5a                   	pop    edx
10000191:	53                   	push   ebx
10000192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000196:	e8 fc ff ff ff       	call   10000197 <ISA::doRTC()+0x39>	10000197: R_386_PC32	Device::addChild(Device*)
1000019b:	6a 00                	push   0x0
1000019d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000019f:	6a 00                	push   0x0
100001a1:	6a 00                	push   0x0
100001a3:	53                   	push   ebx
100001a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
100001a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100001a8: R_386_32	computer
100001ac:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
100001b2:	83 c4 28             	add    esp,0x28
100001b5:	5b                   	pop    ebx
100001b6:	c3                   	ret    
100001b7:	90                   	nop

100001b8 <ISA::detect()>:
100001b8:	57                   	push   edi
100001b9:	56                   	push   esi
100001ba:	53                   	push   ebx
100001bb:	83 ec 2c             	sub    esp,0x2c
100001be:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
100001c2:	68 5c 01 00 00       	push   0x15c
100001c7:	e8 fc ff ff ff       	call   100001c8 <ISA::detect()+0x10>	100001c8: R_386_PC32	operator new(unsigned long)
100001cc:	89 04 24             	mov    DWORD PTR [esp],eax
100001cf:	89 c3                	mov    ebx,eax
100001d1:	e8 fc ff ff ff       	call   100001d2 <ISA::detect()+0x1a>	100001d2: R_386_PC32	DMA::DMA()
100001d6:	59                   	pop    ecx
100001d7:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100001d9: R_386_32	isaDMAController
100001dd:	5e                   	pop    esi
100001de:	53                   	push   ebx
100001df:	57                   	push   edi
100001e0:	e8 fc ff ff ff       	call   100001e1 <ISA::detect()+0x29>	100001e1: R_386_PC32	Device::addChild(Device*)
100001e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e6: R_386_32	isaDMAController
100001ea:	8b 10                	mov    edx,DWORD PTR [eax]
100001ec:	6a 00                	push   0x0
100001ee:	6a 00                	push   0x0
100001f0:	6a 00                	push   0x0
100001f2:	50                   	push   eax
100001f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001f6:	83 c4 20             	add    esp,0x20
100001f9:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001fb: R_386_32	detectDone
10000200:	0f 85 ea 00 00 00    	jne    100002f0 <ISA::detect()+0x138>
10000206:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10000208: R_386_32	detectDone
1000020d:	31 db                	xor    ebx,ebx
1000020f:	52                   	push   edx
10000210:	6a 01                	push   0x1
10000212:	68 00 00 00 00       	push   0x0	10000213: R_386_32	str_isadonesafe
10000217:	68 00 00 00 00       	push   0x0	10000218: R_386_32	str_isa
1000021c:	e8 fc ff ff ff       	call   1000021d <ISA::detect()+0x65>	1000021d: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
10000221:	83 c4 10             	add    esp,0x10
10000224:	50                   	push   eax
10000225:	50                   	push   eax
10000226:	68 00 00 00 00       	push   0x0	10000227: R_386_32	str_devices
1000022b:	8d 74 24 0c          	lea    esi,[esp+0xc]
1000022f:	56                   	push   esi
10000230:	e8 fc ff ff ff       	call   10000231 <ISA::detect()+0x79>	10000231: R_386_PC32	strcpy
10000235:	83 c4 10             	add    esp,0x10
10000238:	85 db                	test   ebx,ebx
1000023a:	75 09                	jne    10000245 <ISA::detect()+0x8d>
1000023c:	50                   	push   eax
1000023d:	50                   	push   eax
1000023e:	68 00 00 00 00       	push   0x0	1000023f: R_386_32	str_spk
10000243:	eb 52                	jmp    10000297 <ISA::detect()+0xdf>
10000245:	83 fb 01             	cmp    ebx,0x1
10000248:	75 09                	jne    10000253 <ISA::detect()+0x9b>
1000024a:	50                   	push   eax
1000024b:	50                   	push   eax
1000024c:	68 00 00 00 00       	push   0x0	1000024d: R_386_32	str_rtc
10000251:	eb 44                	jmp    10000297 <ISA::detect()+0xdf>
10000253:	83 fb 02             	cmp    ebx,0x2
10000256:	75 09                	jne    10000261 <ISA::detect()+0xa9>
10000258:	50                   	push   eax
10000259:	50                   	push   eax
1000025a:	68 00 00 00 00       	push   0x0	1000025b: R_386_32	str_ps2
1000025f:	eb 36                	jmp    10000297 <ISA::detect()+0xdf>
10000261:	83 fb 03             	cmp    ebx,0x3
10000264:	75 09                	jne    1000026f <ISA::detect()+0xb7>
10000266:	50                   	push   eax
10000267:	50                   	push   eax
10000268:	68 00 00 00 00       	push   0x0	10000269: R_386_32	str_floppy
1000026d:	eb 28                	jmp    10000297 <ISA::detect()+0xdf>
1000026f:	83 fb 04             	cmp    ebx,0x4
10000272:	75 09                	jne    1000027d <ISA::detect()+0xc5>
10000274:	50                   	push   eax
10000275:	50                   	push   eax
10000276:	68 00 00 00 00       	push   0x0	10000277: R_386_32	str_sb16
1000027b:	eb 1a                	jmp    10000297 <ISA::detect()+0xdf>
1000027d:	83 fb 05             	cmp    ebx,0x5
10000280:	75 09                	jne    1000028b <ISA::detect()+0xd3>
10000282:	51                   	push   ecx
10000283:	51                   	push   ecx
10000284:	68 00 00 00 00       	push   0x0	10000285: R_386_32	str_isaata
10000289:	eb 0c                	jmp    10000297 <ISA::detect()+0xdf>
1000028b:	83 fb 06             	cmp    ebx,0x6
1000028e:	75 10                	jne    100002a0 <ISA::detect()+0xe8>
10000290:	52                   	push   edx
10000291:	52                   	push   edx
10000292:	68 00 00 00 00       	push   0x0	10000293: R_386_32	str_gp
10000297:	56                   	push   esi
10000298:	e8 fc ff ff ff       	call   10000299 <ISA::detect()+0xe1>	10000299: R_386_PC32	strcat
1000029d:	83 c4 10             	add    esp,0x10
100002a0:	50                   	push   eax
100002a1:	6a ff                	push   0xffffffff
100002a3:	56                   	push   esi
100002a4:	68 00 00 00 00       	push   0x0	100002a5: R_386_32	str_isa
100002a9:	e8 fc ff ff ff       	call   100002aa <ISA::detect()+0xf2>	100002aa: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
100002ae:	83 c4 10             	add    esp,0x10
100002b1:	83 f8 fe             	cmp    eax,0xfffffffe
100002b4:	74 30                	je     100002e6 <ISA::detect()+0x12e>
100002b6:	85 db                	test   ebx,ebx
100002b8:	75 0b                	jne    100002c5 <ISA::detect()+0x10d>
100002ba:	83 ec 0c             	sub    esp,0xc
100002bd:	57                   	push   edi
100002be:	e8 fc ff ff ff       	call   100002bf <ISA::detect()+0x107>	100002bf: R_386_PC32	ISA::doSpeaker()
100002c3:	eb 1e                	jmp    100002e3 <ISA::detect()+0x12b>
100002c5:	83 fb 01             	cmp    ebx,0x1
100002c8:	75 0b                	jne    100002d5 <ISA::detect()+0x11d>
100002ca:	83 ec 0c             	sub    esp,0xc
100002cd:	57                   	push   edi
100002ce:	e8 fc ff ff ff       	call   100002cf <ISA::detect()+0x117>	100002cf: R_386_PC32	ISA::doRTC()
100002d3:	eb 0e                	jmp    100002e3 <ISA::detect()+0x12b>
100002d5:	83 fb 02             	cmp    ebx,0x2
100002d8:	75 0c                	jne    100002e6 <ISA::detect()+0x12e>
100002da:	83 ec 0c             	sub    esp,0xc
100002dd:	57                   	push   edi
100002de:	e8 fc ff ff ff       	call   100002df <ISA::detect()+0x127>	100002df: R_386_PC32	ISA::doPS2()
100002e3:	83 c4 10             	add    esp,0x10
100002e6:	43                   	inc    ebx
100002e7:	83 fb 07             	cmp    ebx,0x7
100002ea:	0f 85 34 ff ff ff    	jne    10000224 <ISA::detect()+0x6c>
100002f0:	83 c4 20             	add    esp,0x20
100002f3:	5b                   	pop    ebx
100002f4:	5e                   	pop    esi
100002f5:	5f                   	pop    edi
100002f6:	c3                   	ret    
100002f7:	90                   	nop

100002f8 <DMAChannel::DMAChannel(int)>:
100002f8:	55                   	push   ebp
100002f9:	89 e5                	mov    ebp,esp
100002fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fe:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10000305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000308:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000030f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000312:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000315:	89 10                	mov    DWORD PTR [eax],edx
10000317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10000321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000324:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000032b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000032e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10000332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000335:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10000339:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
1000033d:	0f 9f c2             	setg   dl
10000340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000343:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10000346:	90                   	nop
10000347:	5d                   	pop    ebp
10000348:	c3                   	ret    
10000349:	90                   	nop

1000034a <DMAChannel::~DMAChannel()>:
1000034a:	55                   	push   ebp
1000034b:	89 e5                	mov    ebp,esp
1000034d:	83 ec 08             	sub    esp,0x8
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000356:	85 c0                	test   eax,eax
10000358:	74 19                	je     10000373 <DMAChannel::~DMAChannel()+0x29>
1000035a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000035d:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000363:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000366:	83 ec 08             	sub    esp,0x8
10000369:	52                   	push   edx
1000036a:	50                   	push   eax
1000036b:	e8 fc ff ff ff       	call   1000036c <DMAChannel::~DMAChannel()+0x22>	1000036c: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
10000370:	83 c4 10             	add    esp,0x10
10000373:	90                   	nop
10000374:	c9                   	leave  
10000375:	c3                   	ret    

10000376 <DMAChannel::getAddress()>:
10000376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000037a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000037d:	c3                   	ret    

1000037e <DMAChannel::getChannelNum()>:
1000037e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000382:	8b 00                	mov    eax,DWORD PTR [eax]
10000384:	c3                   	ret    
10000385:	90                   	nop

10000386 <DMAChannel::setLength(unsigned int)>:
10000386:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000038a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000038e:	3d 00 00 01 00       	cmp    eax,0x10000
10000393:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10000396:	76 0d                	jbe    100003a5 <DMAChannel::setLength(unsigned int)+0x1f>
10000398:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000039c: R_386_32	dmaLong
100003a0:	e9 fc ff ff ff       	jmp    100003a1 <DMAChannel::setLength(unsigned int)+0x1b>	100003a1: R_386_PC32	panic(char const*)
100003a5:	c3                   	ret    

100003a6 <DMAChannel::setAddress(unsigned int)>:
100003a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100003aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100003ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100003b1:	c3                   	ret    

100003b2 <DMAChannel::allocateAddressAndSet(unsigned short)>:
100003b2:	56                   	push   esi
100003b3:	53                   	push   ebx
100003b4:	83 ec 10             	sub    esp,0x10
100003b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100003bb:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
100003c0:	56                   	push   esi
100003c1:	e8 fc ff ff ff       	call   100003c2 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	100003c2: R_386_PC32	Phys::allocateDMA(unsigned long)
100003c6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
100003c9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100003cc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100003cf:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
100003d2:	83 c4 14             	add    esp,0x14
100003d5:	5b                   	pop    ebx
100003d6:	5e                   	pop    esi
100003d7:	c3                   	ret    

100003d8 <DMAChannel::setMode(unsigned char)>:
100003d8:	53                   	push   ebx
100003d9:	83 ec 08             	sub    esp,0x8
100003dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100003e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100003e4:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
100003e8:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
100003eb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
100003ef:	74 2a                	je     1000041b <DMAChannel::setMode(unsigned char)+0x43>
100003f1:	51                   	push   ecx
100003f2:	51                   	push   ecx
100003f3:	6a 01                	push   0x1
100003f5:	53                   	push   ebx
100003f6:	e8 fc ff ff ff       	call   100003f7 <DMAChannel::setMode(unsigned char)+0x1f>	100003f7: R_386_PC32	DMAChannel::mask(bool)
100003fb:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
100003ff:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10000402:	19 d2                	sbb    edx,edx
10000404:	80 e2 35             	and    dl,0x35
10000407:	81 c2 d6 00 00 00    	add    edx,0xd6
1000040d:	ee                   	out    dx,al
1000040e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10000412:	83 c4 18             	add    esp,0x18
10000415:	5b                   	pop    ebx
10000416:	e9 ff 00 00 00       	jmp    1000051a <DMAChannel::unmask()>
1000041b:	83 c4 08             	add    esp,0x8
1000041e:	5b                   	pop    ebx
1000041f:	c3                   	ret    

10000420 <DMAChannel::start()>:
10000420:	57                   	push   edi
10000421:	56                   	push   esi
10000422:	53                   	push   ebx
10000423:	83 ec 10             	sub    esp,0x10
10000426:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000042a:	8b 06                	mov    eax,DWORD PTR [esi]
1000042c:	83 f8 07             	cmp    eax,0x7
1000042f:	0f 87 96 00 00 00    	ja     100004cb <DMAChannel::start()+0xab>
10000435:	8a 98 d4 26 00 10    	mov    bl,BYTE PTR [eax+0x100026d4]	10000437: R_386_32	.text
1000043b:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
1000043f:	8a 98 dc 26 00 10    	mov    bl,BYTE PTR [eax+0x100026dc]	10000441: R_386_32	.text
10000445:	8a 80 e4 26 00 10    	mov    al,BYTE PTR [eax+0x100026e4]	10000447: R_386_32	.text
1000044b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
1000044f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10000453:	e8 fc ff ff ff       	call   10000454 <DMAChannel::start()+0x34>	10000454: R_386_PC32	lockScheduler()
10000458:	50                   	push   eax
10000459:	50                   	push   eax
1000045a:	6a 01                	push   0x1
1000045c:	56                   	push   esi
1000045d:	e8 fc ff ff ff       	call   1000045e <DMAChannel::start()+0x3e>	1000045e: R_386_PC32	DMAChannel::mask(bool)
10000462:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10000465:	83 c4 10             	add    esp,0x10
10000468:	80 fb 01             	cmp    bl,0x1
1000046b:	19 c9                	sbb    ecx,ecx
1000046d:	31 ff                	xor    edi,edi
1000046f:	80 e1 34             	and    cl,0x34
10000472:	89 f8                	mov    eax,edi
10000474:	81 c1 d8 00 00 00    	add    ecx,0xd8
1000047a:	89 ca                	mov    edx,ecx
1000047c:	ee                   	out    dx,al
1000047d:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10000482:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10000485:	ee                   	out    dx,al
10000486:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000489:	c1 e8 08             	shr    eax,0x8
1000048c:	ee                   	out    dx,al
1000048d:	89 f8                	mov    eax,edi
1000048f:	89 ca                	mov    edx,ecx
10000491:	ee                   	out    dx,al
10000492:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000495:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
1000049a:	8d 41 ff             	lea    eax,[ecx-0x1]
1000049d:	ee                   	out    dx,al
1000049e:	8d 41 ff             	lea    eax,[ecx-0x1]
100004a1:	c1 e8 08             	shr    eax,0x8
100004a4:	ee                   	out    dx,al
100004a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100004a8:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
100004ad:	c1 e8 10             	shr    eax,0x10
100004b0:	ee                   	out    dx,al
100004b1:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
100004b5:	74 27                	je     100004de <DMAChannel::start()+0xbe>
100004b7:	80 fb 01             	cmp    bl,0x1
100004ba:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
100004bd:	19 d2                	sbb    edx,edx
100004bf:	80 e2 35             	and    dl,0x35
100004c2:	81 c2 d6 00 00 00    	add    edx,0xd6
100004c8:	ee                   	out    dx,al
100004c9:	eb 13                	jmp    100004de <DMAChannel::start()+0xbe>
100004cb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	100004cf: R_386_32	dmaConfused
100004d3:	83 c4 10             	add    esp,0x10
100004d6:	5b                   	pop    ebx
100004d7:	5e                   	pop    esi
100004d8:	5f                   	pop    edi
100004d9:	e9 fc ff ff ff       	jmp    100004da <DMAChannel::start()+0xba>	100004da: R_386_PC32	panic(char const*)
100004de:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
100004e2:	83 ec 0c             	sub    esp,0xc
100004e5:	56                   	push   esi
100004e6:	e8 fc ff ff ff       	call   100004e7 <DMAChannel::start()+0xc7>	100004e7: R_386_PC32	DMAChannel::unmask()
100004eb:	83 c4 20             	add    esp,0x20
100004ee:	5b                   	pop    ebx
100004ef:	5e                   	pop    esi
100004f0:	5f                   	pop    edi
100004f1:	e9 fc ff ff ff       	jmp    100004f2 <DMAChannel::start()+0xd2>	100004f2: R_386_PC32	unlockScheduler()

100004f6 <DMAChannel::stop()>:
100004f6:	c3                   	ret    
100004f7:	90                   	nop

100004f8 <DMAChannel::mask(bool)>:
100004f8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
100004fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10000501:	0f 95 c0             	setne  al
10000504:	c1 e0 02             	shl    eax,0x2
10000507:	0b 02                	or     eax,DWORD PTR [edx]
10000509:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
1000050d:	19 d2                	sbb    edx,edx
1000050f:	80 e2 36             	and    dl,0x36
10000512:	81 c2 d4 00 00 00    	add    edx,0xd4
10000518:	ee                   	out    dx,al
10000519:	c3                   	ret    

1000051a <DMAChannel::unmask()>:
1000051a:	6a 00                	push   0x0
1000051c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10000520:	e8 fc ff ff ff       	call   10000521 <DMAChannel::unmask()+0x7>	10000521: R_386_PC32	DMAChannel::mask(bool)
10000525:	58                   	pop    eax
10000526:	5a                   	pop    edx
10000527:	c3                   	ret    

10000528 <DMA::DMA()>:
10000528:	55                   	push   ebp
10000529:	89 e5                	mov    ebp,esp
1000052b:	83 ec 08             	sub    esp,0x8
1000052e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000531:	83 ec 08             	sub    esp,0x8
10000534:	68 00 00 00 00       	push   0x0	10000535: R_386_32	dmaCtrlName
10000539:	50                   	push   eax
1000053a:	e8 fc ff ff ff       	call   1000053b <DMA::DMA()+0x13>	1000053b: R_386_PC32	Device::Device(char const*)
1000053f:	83 c4 10             	add    esp,0x10
10000542:	ba 08 00 00 00       	mov    edx,0x8	10000543: R_386_32	vtable for DMA
10000547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054a:	89 10                	mov    DWORD PTR [eax],edx
1000054c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10000556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000559:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000055f:	0f b6 d0             	movzx  edx,al
10000562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000565:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
1000056c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000056f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000575:	0f b6 d0             	movzx  edx,al
10000578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057b:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10000580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000583:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000589:	8d 50 01             	lea    edx,[eax+0x1]
1000058c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000058f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000595:	0f b6 d0             	movzx  edx,al
10000598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000059f:	83 e1 3f             	and    ecx,0x3f
100005a2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005af:	0f b6 d0             	movzx  edx,al
100005b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b5:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
100005bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005c5:	0f b6 d0             	movzx  edx,al
100005c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005cb:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
100005d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005d9:	8d 50 01             	lea    edx,[eax+0x1]
100005dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005e5:	0f b6 d0             	movzx  edx,al
100005e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005ef:	83 e1 3f             	and    ecx,0x3f
100005f2:	83 c9 40             	or     ecx,0x40
100005f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000602:	0f b6 d0             	movzx  edx,al
10000605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000608:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
1000060f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000612:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000618:	0f b6 d0             	movzx  edx,al
1000061b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061e:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000626:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000062c:	8d 50 01             	lea    edx,[eax+0x1]
1000062f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000632:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000638:	0f b6 d0             	movzx  edx,al
1000063b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000642:	83 e1 3f             	and    ecx,0x3f
10000645:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000652:	0f b6 d0             	movzx  edx,al
10000655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000658:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
1000065f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000662:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000668:	0f b6 d0             	movzx  edx,al
1000066b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000066e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000676:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000067c:	8d 50 01             	lea    edx,[eax+0x1]
1000067f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000682:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000688:	0f b6 d0             	movzx  edx,al
1000068b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000068e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000692:	83 e1 3f             	and    ecx,0x3f
10000695:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000069c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006a2:	0f b6 d0             	movzx  edx,al
100006a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a8:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
100006af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006b8:	0f b6 d0             	movzx  edx,al
100006bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006be:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100006c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006cc:	8d 50 01             	lea    edx,[eax+0x1]
100006cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006d8:	0f b6 d0             	movzx  edx,al
100006db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006de:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006e2:	83 e1 3f             	and    ecx,0x3f
100006e5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006f2:	0f b6 d0             	movzx  edx,al
100006f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f8:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
100006ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000702:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000708:	0f b6 d0             	movzx  edx,al
1000070b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000070e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000716:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000071c:	8d 50 01             	lea    edx,[eax+0x1]
1000071f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000722:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000728:	0f b6 d0             	movzx  edx,al
1000072b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000072e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000732:	83 e1 3f             	and    ecx,0x3f
10000735:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000739:	90                   	nop
1000073a:	c9                   	leave  
1000073b:	c3                   	ret    

1000073c <DMA::getAvailable()>:
1000073c:	53                   	push   ebx
1000073d:	31 db                	xor    ebx,ebx
1000073f:	83 ec 08             	sub    esp,0x8
10000742:	e8 fc ff ff ff       	call   10000743 <DMA::getAvailable()+0x7>	10000743: R_386_PC32	lockScheduler()
10000747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000074b:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000752:	0f a3 d8             	bt     eax,ebx
10000755:	73 07                	jae    1000075e <DMA::getAvailable()+0x22>
10000757:	e8 fc ff ff ff       	call   10000758 <DMA::getAvailable()+0x1c>	10000758: R_386_PC32	unlockScheduler()
1000075c:	eb 0e                	jmp    1000076c <DMA::getAvailable()+0x30>
1000075e:	43                   	inc    ebx
1000075f:	83 fb 08             	cmp    ebx,0x8
10000762:	75 ee                	jne    10000752 <DMA::getAvailable()+0x16>
10000764:	e8 fc ff ff ff       	call   10000765 <DMA::getAvailable()+0x29>	10000765: R_386_PC32	unlockScheduler()
10000769:	83 cb ff             	or     ebx,0xffffffff
1000076c:	89 d8                	mov    eax,ebx
1000076e:	83 c4 08             	add    esp,0x8
10000771:	5b                   	pop    ebx
10000772:	c3                   	ret    
10000773:	90                   	nop

10000774 <DMA::open(int, int, void*)>:
10000774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000778:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
1000077f:	31 c0                	xor    eax,eax
10000781:	e6 0d                	out    0xd,al
10000783:	e6 da                	out    0xda,al
10000785:	31 c0                	xor    eax,eax
10000787:	c3                   	ret    

10000788 <DMA::close(int, int, void*)>:
10000788:	31 c0                	xor    eax,eax
1000078a:	c3                   	ret    
1000078b:	90                   	nop

1000078c <DMA::tryLockChannelWithBase(int)>:
1000078c:	56                   	push   esi
1000078d:	53                   	push   ebx
1000078e:	83 ec 14             	sub    esp,0x14
10000791:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000795:	e8 fc ff ff ff       	call   10000796 <DMA::tryLockChannelWithBase(int)+0xa>	10000796: R_386_PC32	lockScheduler()
1000079a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000079e:	8d 43 03             	lea    eax,[ebx+0x3]
100007a1:	39 d8                	cmp    eax,ebx
100007a3:	7c 47                	jl     100007ec <DMA::tryLockChannelWithBase(int)+0x60>
100007a5:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
100007ac:	89 ca                	mov    edx,ecx
100007ae:	0f a3 d9             	bt     ecx,ebx
100007b1:	73 36                	jae    100007e9 <DMA::tryLockChannelWithBase(int)+0x5d>
100007b3:	83 ec 0c             	sub    esp,0xc
100007b6:	88 d9                	mov    cl,bl
100007b8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100007bd:	d3 c0                	rol    eax,cl
100007bf:	21 d0                	and    eax,edx
100007c1:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100007c7:	6a 18                	push   0x18
100007c9:	e8 fc ff ff ff       	call   100007ca <DMA::tryLockChannelWithBase(int)+0x3e>	100007ca: R_386_PC32	operator new(unsigned long)
100007ce:	5a                   	pop    edx
100007cf:	59                   	pop    ecx
100007d0:	53                   	push   ebx
100007d1:	50                   	push   eax
100007d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100007d6:	e8 fc ff ff ff       	call   100007d7 <DMA::tryLockChannelWithBase(int)+0x4b>	100007d7: R_386_PC32	DMAChannel::DMAChannel(int)
100007db:	e8 fc ff ff ff       	call   100007dc <DMA::tryLockChannelWithBase(int)+0x50>	100007dc: R_386_PC32	unlockScheduler()
100007e0:	83 c4 10             	add    esp,0x10
100007e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100007e7:	eb 0a                	jmp    100007f3 <DMA::tryLockChannelWithBase(int)+0x67>
100007e9:	43                   	inc    ebx
100007ea:	eb b5                	jmp    100007a1 <DMA::tryLockChannelWithBase(int)+0x15>
100007ec:	e8 fc ff ff ff       	call   100007ed <DMA::tryLockChannelWithBase(int)+0x61>	100007ed: R_386_PC32	unlockScheduler()
100007f1:	31 c0                	xor    eax,eax
100007f3:	83 c4 14             	add    esp,0x14
100007f6:	5b                   	pop    ebx
100007f7:	5e                   	pop    esi
100007f8:	c3                   	ret    
100007f9:	90                   	nop

100007fa <DMA::lockChannelWithBase(int)>:
100007fa:	83 ec 0c             	sub    esp,0xc
100007fd:	50                   	push   eax
100007fe:	50                   	push   eax
100007ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000807:	e8 fc ff ff ff       	call   10000808 <DMA::lockChannelWithBase(int)+0xe>	10000808: R_386_PC32	DMA::tryLockChannelWithBase(int)
1000080c:	83 c4 10             	add    esp,0x10
1000080f:	85 c0                	test   eax,eax
10000811:	74 ea                	je     100007fd <DMA::lockChannelWithBase(int)+0x3>
10000813:	83 c4 0c             	add    esp,0xc
10000816:	c3                   	ret    
10000817:	90                   	nop

10000818 <DMA::tryLockChannel8()>:
10000818:	83 ec 14             	sub    esp,0x14
1000081b:	6a 00                	push   0x0
1000081d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000821:	e8 fc ff ff ff       	call   10000822 <DMA::tryLockChannel8()+0xa>	10000822: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000826:	83 c4 1c             	add    esp,0x1c
10000829:	c3                   	ret    

1000082a <DMA::tryLockChannel16()>:
1000082a:	83 ec 14             	sub    esp,0x14
1000082d:	6a 04                	push   0x4
1000082f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000833:	e8 fc ff ff ff       	call   10000834 <DMA::tryLockChannel16()+0xa>	10000834: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000838:	83 c4 1c             	add    esp,0x1c
1000083b:	c3                   	ret    

1000083c <DMA::tryLockChannel(int)>:
1000083c:	56                   	push   esi
1000083d:	53                   	push   ebx
1000083e:	83 ec 14             	sub    esp,0x14
10000841:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000845:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000849:	83 fb 07             	cmp    ebx,0x7
1000084c:	76 12                	jbe    10000860 <DMA::tryLockChannel(int)+0x24>
1000084e:	83 ec 0c             	sub    esp,0xc
10000851:	68 ec 26 00 10       	push   0x100026ec	10000852: R_386_32	.text
10000856:	e8 fc ff ff ff       	call   10000857 <DMA::tryLockChannel(int)+0x1b>	10000857: R_386_PC32	kprintf(char const*, ...)
1000085b:	83 c4 10             	add    esp,0x10
1000085e:	eb 4e                	jmp    100008ae <DMA::tryLockChannel(int)+0x72>
10000860:	e8 fc ff ff ff       	call   10000861 <DMA::tryLockChannel(int)+0x25>	10000861: R_386_PC32	lockScheduler()
10000865:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
1000086c:	89 c2                	mov    edx,eax
1000086e:	0f a3 d8             	bt     eax,ebx
10000871:	73 36                	jae    100008a9 <DMA::tryLockChannel(int)+0x6d>
10000873:	83 ec 0c             	sub    esp,0xc
10000876:	88 d9                	mov    cl,bl
10000878:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000087d:	d3 c0                	rol    eax,cl
1000087f:	21 d0                	and    eax,edx
10000881:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000887:	6a 18                	push   0x18
10000889:	e8 fc ff ff ff       	call   1000088a <DMA::tryLockChannel(int)+0x4e>	1000088a: R_386_PC32	operator new(unsigned long)
1000088e:	5a                   	pop    edx
1000088f:	59                   	pop    ecx
10000890:	53                   	push   ebx
10000891:	50                   	push   eax
10000892:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000896:	e8 fc ff ff ff       	call   10000897 <DMA::tryLockChannel(int)+0x5b>	10000897: R_386_PC32	DMAChannel::DMAChannel(int)
1000089b:	e8 fc ff ff ff       	call   1000089c <DMA::tryLockChannel(int)+0x60>	1000089c: R_386_PC32	unlockScheduler()
100008a0:	83 c4 10             	add    esp,0x10
100008a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100008a7:	eb 07                	jmp    100008b0 <DMA::tryLockChannel(int)+0x74>
100008a9:	e8 fc ff ff ff       	call   100008aa <DMA::tryLockChannel(int)+0x6e>	100008aa: R_386_PC32	unlockScheduler()
100008ae:	31 c0                	xor    eax,eax
100008b0:	83 c4 14             	add    esp,0x14
100008b3:	5b                   	pop    ebx
100008b4:	5e                   	pop    esi
100008b5:	c3                   	ret    

100008b6 <DMA::lockChannel8()>:
100008b6:	83 ec 14             	sub    esp,0x14
100008b9:	6a 00                	push   0x0
100008bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008bf:	e8 fc ff ff ff       	call   100008c0 <DMA::lockChannel8()+0xa>	100008c0: R_386_PC32	DMA::lockChannelWithBase(int)
100008c4:	83 c4 1c             	add    esp,0x1c
100008c7:	c3                   	ret    

100008c8 <DMA::lockChannel16()>:
100008c8:	83 ec 14             	sub    esp,0x14
100008cb:	6a 04                	push   0x4
100008cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008d1:	e8 fc ff ff ff       	call   100008d2 <DMA::lockChannel16()+0xa>	100008d2: R_386_PC32	DMA::lockChannelWithBase(int)
100008d6:	83 c4 1c             	add    esp,0x1c
100008d9:	c3                   	ret    

100008da <DMA::lockChannel(int)>:
100008da:	83 ec 0c             	sub    esp,0xc
100008dd:	50                   	push   eax
100008de:	50                   	push   eax
100008df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008e7:	e8 fc ff ff ff       	call   100008e8 <DMA::lockChannel(int)+0xe>	100008e8: R_386_PC32	DMA::tryLockChannel(int)
100008ec:	83 c4 10             	add    esp,0x10
100008ef:	85 c0                	test   eax,eax
100008f1:	74 ea                	je     100008dd <DMA::lockChannel(int)+0x3>
100008f3:	83 c4 0c             	add    esp,0xc
100008f6:	c3                   	ret    
100008f7:	90                   	nop

100008f8 <DMA::unlockChannel(DMAChannel*)>:
100008f8:	56                   	push   esi
100008f9:	53                   	push   ebx
100008fa:	53                   	push   ebx
100008fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100008ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000903:	85 db                	test   ebx,ebx
10000905:	75 10                	jne    10000917 <DMA::unlockChannel(DMAChannel*)+0x1f>
10000907:	83 ec 0c             	sub    esp,0xc
1000090a:	68 00 00 00 00       	push   0x0	1000090b: R_386_32	badDma
1000090f:	e8 fc ff ff ff       	call   10000910 <DMA::unlockChannel(DMAChannel*)+0x18>	10000910: R_386_PC32	panic(char const*)
10000914:	83 c4 10             	add    esp,0x10
10000917:	e8 fc ff ff ff       	call   10000918 <DMA::unlockChannel(DMAChannel*)+0x20>	10000918: R_386_PC32	lockScheduler()
1000091c:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
10000923:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10000925:	89 d0                	mov    eax,edx
10000927:	0f a3 ca             	bt     edx,ecx
1000092a:	72 24                	jb     10000950 <DMA::unlockChannel(DMAChannel*)+0x58>
1000092c:	83 ec 0c             	sub    esp,0xc
1000092f:	ba 01 00 00 00       	mov    edx,0x1
10000934:	d3 e2                	shl    edx,cl
10000936:	09 d0                	or     eax,edx
10000938:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000093e:	53                   	push   ebx
1000093f:	e8 fc ff ff ff       	call   10000940 <DMA::unlockChannel(DMAChannel*)+0x48>	10000940: R_386_PC32	DMAChannel::~DMAChannel()
10000944:	5a                   	pop    edx
10000945:	59                   	pop    ecx
10000946:	6a 18                	push   0x18
10000948:	53                   	push   ebx
10000949:	e8 fc ff ff ff       	call   1000094a <DMA::unlockChannel(DMAChannel*)+0x52>	1000094a: R_386_PC32	operator delete(void*, unsigned long)
1000094e:	eb 0d                	jmp    1000095d <DMA::unlockChannel(DMAChannel*)+0x65>
10000950:	83 ec 0c             	sub    esp,0xc
10000953:	68 00 00 00 00       	push   0x0	10000954: R_386_32	badBook
10000958:	e8 fc ff ff ff       	call   10000959 <DMA::unlockChannel(DMAChannel*)+0x61>	10000959: R_386_PC32	panic(char const*)
1000095d:	83 c4 10             	add    esp,0x10
10000960:	58                   	pop    eax
10000961:	5b                   	pop    ebx
10000962:	5e                   	pop    esi
10000963:	e9 fc ff ff ff       	jmp    10000964 <DMA::unlockChannel(DMAChannel*)+0x6c>	10000964: R_386_PC32	unlockScheduler()

10000968 <Beep::Beep()>:
10000968:	55                   	push   ebp
10000969:	89 e5                	mov    ebp,esp
1000096b:	83 ec 08             	sub    esp,0x8
1000096e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000971:	83 ec 08             	sub    esp,0x8
10000974:	68 00 00 00 00       	push   0x0	10000975: R_386_32	beepname
10000979:	50                   	push   eax
1000097a:	e8 fc ff ff ff       	call   1000097b <Beep::Beep()+0x13>	1000097b: R_386_PC32	Buzzer::Buzzer(char const*)
1000097f:	83 c4 10             	add    esp,0x10
10000982:	ba 08 00 00 00       	mov    edx,0x8	10000983: R_386_32	vtable for Beep
10000987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098a:	89 10                	mov    DWORD PTR [eax],edx
1000098c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000995:	0f b6 d0             	movzx  edx,al
10000998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
100009a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009ab:	0f b6 d0             	movzx  edx,al
100009ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100009b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009bf:	8d 50 01             	lea    edx,[eax+0x1]
100009c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009cb:	0f b6 d0             	movzx  edx,al
100009ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009d5:	83 e1 3f             	and    ecx,0x3f
100009d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009e5:	0f b6 d0             	movzx  edx,al
100009e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009eb:	66 c7 44 90 04 42 00 	mov    WORD PTR [eax+edx*4+0x4],0x42
100009f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009fb:	0f b6 d0             	movzx  edx,al
100009fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a01:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
10000a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a0f:	8d 50 01             	lea    edx,[eax+0x1]
10000a12:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000a15:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000a1b:	0f b6 d0             	movzx  edx,al
10000a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a21:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000a25:	83 e1 3f             	and    ecx,0x3f
10000a28:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000a2c:	90                   	nop
10000a2d:	c9                   	leave  
10000a2e:	c3                   	ret    
10000a2f:	90                   	nop

10000a30 <Beep::start(int)>:
10000a30:	55                   	push   ebp
10000a31:	89 e5                	mov    ebp,esp
10000a33:	83 ec 30             	sub    esp,0x30
10000a36:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10000a3a:	75 31                	jne    10000a6d <Beep::start(int)+0x3d>
10000a3c:	66 c7 45 f8 61 00    	mov    WORD PTR [ebp-0x8],0x61
10000a42:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000a45:	89 c2                	mov    edx,eax
10000a47:	ec                   	in     al,dx
10000a48:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000a4b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000a4e:	83 e0 fc             	and    eax,0xfffffffc
10000a51:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000a54:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
10000a58:	66 c7 45 fc 61 00    	mov    WORD PTR [ebp-0x4],0x61
10000a5e:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000a61:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000a64:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10000a67:	ee                   	out    dx,al
10000a68:	e9 85 00 00 00       	jmp    10000af2 <Beep::start(int)+0xc2>
10000a6d:	b8 dc 34 12 00       	mov    eax,0x1234dc
10000a72:	99                   	cdq    
10000a73:	f7 7d 0c             	idiv   DWORD PTR [ebp+0xc]
10000a76:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000a79:	66 c7 45 e8 43 00    	mov    WORD PTR [ebp-0x18],0x43
10000a7f:	c6 45 e7 b6          	mov    BYTE PTR [ebp-0x19],0xb6
10000a83:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
10000a86:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
10000a89:	ee                   	out    dx,al
10000a8a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000a8d:	0f b6 c0             	movzx  eax,al
10000a90:	66 c7 45 ec 42 00    	mov    WORD PTR [ebp-0x14],0x42
10000a96:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000a99:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000a9c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000a9f:	ee                   	out    dx,al
10000aa0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000aa3:	c1 e8 08             	shr    eax,0x8
10000aa6:	0f b6 c0             	movzx  eax,al
10000aa9:	66 c7 45 f0 42 00    	mov    WORD PTR [ebp-0x10],0x42
10000aaf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000ab2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000ab5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000ab8:	ee                   	out    dx,al
10000ab9:	66 c7 45 f4 61 00    	mov    WORD PTR [ebp-0xc],0x61
10000abf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000ac2:	89 c2                	mov    edx,eax
10000ac4:	ec                   	in     al,dx
10000ac5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ac8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000acb:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
10000ace:	8a 45 fe             	mov    al,BYTE PTR [ebp-0x2]
10000ad1:	83 c8 03             	or     eax,0x3
10000ad4:	38 45 fe             	cmp    BYTE PTR [ebp-0x2],al
10000ad7:	74 19                	je     10000af2 <Beep::start(int)+0xc2>
10000ad9:	8a 45 fe             	mov    al,BYTE PTR [ebp-0x2]
10000adc:	83 c8 03             	or     eax,0x3
10000adf:	0f b6 c0             	movzx  eax,al
10000ae2:	66 c7 45 e4 61 00    	mov    WORD PTR [ebp-0x1c],0x61
10000ae8:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000aeb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
10000aee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000af1:	ee                   	out    dx,al
10000af2:	90                   	nop
10000af3:	c9                   	leave  
10000af4:	c3                   	ret    
10000af5:	90                   	nop

10000af6 <Beep::open(int, int, void*)>:
10000af6:	b8 00 00 00 00       	mov    eax,0x0
10000afb:	c3                   	ret    

10000afc <Beep::close(int, int, void*)>:
10000afc:	b8 00 00 00 00       	mov    eax,0x0
10000b01:	c3                   	ret    

10000b02 <PS2::PS2()>:
10000b02:	55                   	push   ebp
10000b03:	89 e5                	mov    ebp,esp
10000b05:	83 ec 08             	sub    esp,0x8
10000b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b0b:	83 ec 08             	sub    esp,0x8
10000b0e:	68 00 00 00 00       	push   0x0	10000b0f: R_386_32	ps2ctrlname
10000b13:	50                   	push   eax
10000b14:	e8 fc ff ff ff       	call   10000b15 <PS2::PS2()+0x13>	10000b15: R_386_PC32	Bus::Bus(char const*)
10000b19:	83 c4 10             	add    esp,0x10
10000b1c:	ba 08 00 00 00       	mov    edx,0x8	10000b1d: R_386_32	vtable for PS2
10000b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b24:	89 10                	mov    DWORD PTR [eax],edx
10000b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b2f:	0f b6 d0             	movzx  edx,al
10000b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b35:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b45:	0f b6 d0             	movzx  edx,al
10000b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b4b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b59:	8d 50 01             	lea    edx,[eax+0x1]
10000b5c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000b5f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000b65:	0f b6 d0             	movzx  edx,al
10000b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b6b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000b6f:	83 e1 3f             	and    ecx,0x3f
10000b72:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b7f:	0f b6 d0             	movzx  edx,al
10000b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b85:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10000b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b95:	0f b6 d0             	movzx  edx,al
10000b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ba9:	8d 50 01             	lea    edx,[eax+0x1]
10000bac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000baf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000bb5:	0f b6 d0             	movzx  edx,al
10000bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bbb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000bbf:	83 e1 3f             	and    ecx,0x3f
10000bc2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000bc6:	90                   	nop
10000bc7:	c9                   	leave  
10000bc8:	c3                   	ret    
10000bc9:	90                   	nop

10000bca <PS2::open(int, int, void*)>:
10000bca:	55                   	push   ebp
10000bcb:	89 e5                	mov    ebp,esp
10000bcd:	53                   	push   ebx
10000bce:	83 ec 24             	sub    esp,0x24
10000bd1:	e8 fc ff ff ff       	call   10000bd2 <PS2::open(int, int, void*)+0x8>	10000bd2: R_386_PC32	lockScheduler()
10000bd6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000bdd:	83 ec 08             	sub    esp,0x8
10000be0:	68 ad 00 00 00       	push   0xad
10000be5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000be8:	e8 fc ff ff ff       	call   10000be9 <PS2::open(int, int, void*)+0x1f>	10000be9: R_386_PC32	PS2::controllerWrite(unsigned char)
10000bed:	83 c4 10             	add    esp,0x10
10000bf0:	83 ec 08             	sub    esp,0x8
10000bf3:	68 a7 00 00 00       	push   0xa7
10000bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bfb:	e8 fc ff ff ff       	call   10000bfc <PS2::open(int, int, void*)+0x32>	10000bfc: R_386_PC32	PS2::controllerWrite(unsigned char)
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000c09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000c0c:	89 c2                	mov    edx,eax
10000c0e:	ec                   	in     al,dx
10000c0f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000c12:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000c18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000c1b:	89 c2                	mov    edx,eax
10000c1d:	ec                   	in     al,dx
10000c1e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000c21:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000c27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000c2a:	89 c2                	mov    edx,eax
10000c2c:	ec                   	in     al,dx
10000c2d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000c30:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000c36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000c39:	89 c2                	mov    edx,eax
10000c3b:	ec                   	in     al,dx
10000c3c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000c3f:	83 ec 08             	sub    esp,0x8
10000c42:	68 aa 00 00 00       	push   0xaa
10000c47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c4a:	e8 fc ff ff ff       	call   10000c4b <PS2::open(int, int, void*)+0x81>	10000c4b: R_386_PC32	PS2::controllerWrite(unsigned char)
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	83 ec 0c             	sub    esp,0xc
10000c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c58:	e8 fc ff ff ff       	call   10000c59 <PS2::open(int, int, void*)+0x8f>	10000c59: R_386_PC32	PS2::controllerRead()
10000c5d:	83 c4 10             	add    esp,0x10
10000c60:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c63:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000c67:	74 65                	je     10000cce <PS2::open(int, int, void*)+0x104>
10000c69:	83 ec 0c             	sub    esp,0xc
10000c6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c6f:	e8 fc ff ff ff       	call   10000c70 <PS2::open(int, int, void*)+0xa6>	10000c70: R_386_PC32	PS2::controllerRead()
10000c74:	83 c4 10             	add    esp,0x10
10000c77:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c7a:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000c7e:	74 4e                	je     10000cce <PS2::open(int, int, void*)+0x104>
10000c80:	83 ec 08             	sub    esp,0x8
10000c83:	68 aa 00 00 00       	push   0xaa
10000c88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c8b:	e8 fc ff ff ff       	call   10000c8c <PS2::open(int, int, void*)+0xc2>	10000c8c: R_386_PC32	PS2::controllerWrite(unsigned char)
10000c90:	83 c4 10             	add    esp,0x10
10000c93:	83 ec 08             	sub    esp,0x8
10000c96:	68 aa 00 00 00       	push   0xaa
10000c9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c9e:	e8 fc ff ff ff       	call   10000c9f <PS2::open(int, int, void*)+0xd5>	10000c9f: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ca3:	83 c4 10             	add    esp,0x10
10000ca6:	83 ec 0c             	sub    esp,0xc
10000ca9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cac:	e8 fc ff ff ff       	call   10000cad <PS2::open(int, int, void*)+0xe3>	10000cad: R_386_PC32	PS2::controllerRead()
10000cb1:	83 c4 10             	add    esp,0x10
10000cb4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000cb7:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000cbb:	74 11                	je     10000cce <PS2::open(int, int, void*)+0x104>
10000cbd:	83 ec 0c             	sub    esp,0xc
10000cc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cc3:	e8 fc ff ff ff       	call   10000cc4 <PS2::open(int, int, void*)+0xfa>	10000cc4: R_386_PC32	PS2::controllerRead()
10000cc8:	83 c4 10             	add    esp,0x10
10000ccb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000cce:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10000cd5:	83 ec 08             	sub    esp,0x8
10000cd8:	6a 20                	push   0x20
10000cda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cdd:	e8 fc ff ff ff       	call   10000cde <PS2::open(int, int, void*)+0x114>	10000cde: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ce2:	83 c4 10             	add    esp,0x10
10000ce5:	83 ec 0c             	sub    esp,0xc
10000ce8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ceb:	e8 fc ff ff ff       	call   10000cec <PS2::open(int, int, void*)+0x122>	10000cec: R_386_PC32	PS2::controllerRead()
10000cf0:	83 c4 10             	add    esp,0x10
10000cf3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10000cf6:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10000cfa:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10000cfe:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10000d02:	83 ec 04             	sub    esp,0x4
10000d05:	50                   	push   eax
10000d06:	6a 60                	push   0x60
10000d08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d0b:	e8 fc ff ff ff       	call   10000d0c <PS2::open(int, int, void*)+0x142>	10000d0c: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10000d10:	83 c4 10             	add    esp,0x10
10000d13:	83 ec 08             	sub    esp,0x8
10000d16:	68 ae 00 00 00       	push   0xae
10000d1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d1e:	e8 fc ff ff ff       	call   10000d1f <PS2::open(int, int, void*)+0x155>	10000d1f: R_386_PC32	PS2::controllerWrite(unsigned char)
10000d23:	83 c4 10             	add    esp,0x10
10000d26:	83 ec 08             	sub    esp,0x8
10000d29:	68 a8 00 00 00       	push   0xa8
10000d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d31:	e8 fc ff ff ff       	call   10000d32 <PS2::open(int, int, void*)+0x168>	10000d32: R_386_PC32	PS2::controllerWrite(unsigned char)
10000d36:	83 c4 10             	add    esp,0x10
10000d39:	e8 fc ff ff ff       	call   10000d3a <PS2::open(int, int, void*)+0x170>	10000d3a: R_386_PC32	unlockScheduler()
10000d3e:	83 ec 0c             	sub    esp,0xc
10000d41:	68 60 01 00 00       	push   0x160
10000d46:	e8 fc ff ff ff       	call   10000d47 <PS2::open(int, int, void*)+0x17d>	10000d47: R_386_PC32	operator new(unsigned long)
10000d4b:	83 c4 10             	add    esp,0x10
10000d4e:	89 c3                	mov    ebx,eax
10000d50:	83 ec 0c             	sub    esp,0xc
10000d53:	53                   	push   ebx
10000d54:	e8 fc ff ff ff       	call   10000d55 <PS2::open(int, int, void*)+0x18b>	10000d55: R_386_PC32	PS2Port::PS2Port()
10000d59:	83 c4 10             	add    esp,0x10
10000d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d5f:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10000d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000d6b:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10000d71:	83 ec 08             	sub    esp,0x8
10000d74:	52                   	push   edx
10000d75:	50                   	push   eax
10000d76:	e8 fc ff ff ff       	call   10000d77 <PS2::open(int, int, void*)+0x1ad>	10000d77: R_386_PC32	Device::addChild(Device*)
10000d7b:	83 c4 10             	add    esp,0x10
10000d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d81:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10000d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000d90:	8b 00                	mov    eax,DWORD PTR [eax]
10000d92:	83 c0 08             	add    eax,0x8
10000d95:	8b 00                	mov    eax,DWORD PTR [eax]
10000d97:	6a 00                	push   0x0
10000d99:	6a 00                	push   0x0
10000d9b:	6a 00                	push   0x0
10000d9d:	52                   	push   edx
10000d9e:	ff d0                	call   eax
10000da0:	83 c4 10             	add    esp,0x10
10000da3:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000da7:	75 65                	jne    10000e0e <PS2::open(int, int, void*)+0x244>
10000da9:	83 ec 0c             	sub    esp,0xc
10000dac:	68 60 01 00 00       	push   0x160
10000db1:	e8 fc ff ff ff       	call   10000db2 <PS2::open(int, int, void*)+0x1e8>	10000db2: R_386_PC32	operator new(unsigned long)
10000db6:	83 c4 10             	add    esp,0x10
10000db9:	89 c3                	mov    ebx,eax
10000dbb:	83 ec 0c             	sub    esp,0xc
10000dbe:	53                   	push   ebx
10000dbf:	e8 fc ff ff ff       	call   10000dc0 <PS2::open(int, int, void*)+0x1f6>	10000dc0: R_386_PC32	PS2Port::PS2Port()
10000dc4:	83 c4 10             	add    esp,0x10
10000dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dca:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000dd6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10000ddc:	83 ec 08             	sub    esp,0x8
10000ddf:	52                   	push   edx
10000de0:	50                   	push   eax
10000de1:	e8 fc ff ff ff       	call   10000de2 <PS2::open(int, int, void*)+0x218>	10000de2: R_386_PC32	Device::addChild(Device*)
10000de6:	83 c4 10             	add    esp,0x10
10000de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10000df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000df5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10000dfb:	8b 00                	mov    eax,DWORD PTR [eax]
10000dfd:	83 c0 08             	add    eax,0x8
10000e00:	8b 00                	mov    eax,DWORD PTR [eax]
10000e02:	6a 00                	push   0x0
10000e04:	6a 00                	push   0x0
10000e06:	6a 01                	push   0x1
10000e08:	52                   	push   edx
10000e09:	ff d0                	call   eax
10000e0b:	83 c4 10             	add    esp,0x10
10000e0e:	b8 00 00 00 00       	mov    eax,0x0
10000e13:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000e16:	c9                   	leave  
10000e17:	c3                   	ret    

10000e18 <PS2::close(int, int, void*)>:
10000e18:	b8 00 00 00 00       	mov    eax,0x0
10000e1d:	c3                   	ret    

10000e1e <PS2::detect()>:
10000e1e:	90                   	nop
10000e1f:	c3                   	ret    

10000e20 <PS2::controllerWrite(unsigned char)>:
10000e20:	55                   	push   ebp
10000e21:	89 e5                	mov    ebp,esp
10000e23:	83 ec 14             	sub    esp,0x14
10000e26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000e29:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000e2c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000e33:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000e39:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000e3c:	89 c2                	mov    edx,eax
10000e3e:	ec                   	in     al,dx
10000e3f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000e42:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000e45:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000e48:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000e4c:	83 e0 40             	and    eax,0x40
10000e4f:	85 c0                	test   eax,eax
10000e51:	75 2d                	jne    10000e80 <PS2::controllerWrite(unsigned char)+0x60>
10000e53:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000e56:	84 c0                	test   al,al
10000e58:	78 26                	js     10000e80 <PS2::controllerWrite(unsigned char)+0x60>
10000e5a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000e5e:	83 e0 02             	and    eax,0x2
10000e61:	85 c0                	test   eax,eax
10000e63:	74 17                	je     10000e7c <PS2::controllerWrite(unsigned char)+0x5c>
10000e65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000e68:	8d 50 01             	lea    edx,[eax+0x1]
10000e6b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000e6e:	3d 20 03 00 00       	cmp    eax,0x320
10000e73:	0f 94 c0             	sete   al
10000e76:	84 c0                	test   al,al
10000e78:	75 05                	jne    10000e7f <PS2::controllerWrite(unsigned char)+0x5f>
10000e7a:	eb b7                	jmp    10000e33 <PS2::controllerWrite(unsigned char)+0x13>
10000e7c:	90                   	nop
10000e7d:	eb 01                	jmp    10000e80 <PS2::controllerWrite(unsigned char)+0x60>
10000e7f:	90                   	nop
10000e80:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10000e84:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10000e8a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000e8d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000e90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000e93:	ee                   	out    dx,al
10000e94:	b0 01                	mov    al,0x1
10000e96:	c9                   	leave  
10000e97:	c3                   	ret    

10000e98 <PS2::controllerWrite(unsigned char, unsigned char)>:
10000e98:	55                   	push   ebp
10000e99:	89 e5                	mov    ebp,esp
10000e9b:	83 ec 28             	sub    esp,0x28
10000e9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000ea1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000ea4:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10000ea7:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10000eaa:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10000eae:	50                   	push   eax
10000eaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000eb2:	e8 fc ff ff ff       	call   10000eb3 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10000eb3: R_386_PC32	PS2::controllerWrite(unsigned char)
10000eb7:	83 c4 08             	add    esp,0x8
10000eba:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000ec1:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000ec7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000eca:	89 c2                	mov    edx,eax
10000ecc:	ec                   	in     al,dx
10000ecd:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000ed0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000ed3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000ed6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000eda:	83 e0 40             	and    eax,0x40
10000edd:	85 c0                	test   eax,eax
10000edf:	75 07                	jne    10000ee8 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10000ee1:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000ee4:	84 c0                	test   al,al
10000ee6:	79 18                	jns    10000f00 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10000ee8:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000eec:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000ef2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ef5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000ef8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000efb:	ee                   	out    dx,al
10000efc:	b0 00                	mov    al,0x0
10000efe:	eb 4f                	jmp    10000f4f <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000f00:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000f04:	83 e0 02             	and    eax,0x2
10000f07:	85 c0                	test   eax,eax
10000f09:	74 2d                	je     10000f38 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10000f0b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000f0e:	8d 50 01             	lea    edx,[eax+0x1]
10000f11:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000f14:	3d 20 03 00 00       	cmp    eax,0x320
10000f19:	0f 94 c0             	sete   al
10000f1c:	84 c0                	test   al,al
10000f1e:	74 a1                	je     10000ec1 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10000f20:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000f24:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000f2a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000f2d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000f30:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000f33:	ee                   	out    dx,al
10000f34:	b0 00                	mov    al,0x0
10000f36:	eb 17                	jmp    10000f4f <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000f38:	90                   	nop
10000f39:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000f3d:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000f43:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000f46:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000f49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000f4c:	ee                   	out    dx,al
10000f4d:	b0 01                	mov    al,0x1
10000f4f:	c9                   	leave  
10000f50:	c3                   	ret    
10000f51:	90                   	nop

10000f52 <PS2::controllerRead()>:
10000f52:	55                   	push   ebp
10000f53:	89 e5                	mov    ebp,esp
10000f55:	83 ec 20             	sub    esp,0x20
10000f58:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000f5f:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000f65:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000f68:	89 c2                	mov    edx,eax
10000f6a:	ec                   	in     al,dx
10000f6b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f6e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f71:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000f74:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000f78:	83 e0 40             	and    eax,0x40
10000f7b:	85 c0                	test   eax,eax
10000f7d:	75 07                	jne    10000f86 <PS2::controllerRead()+0x34>
10000f7f:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000f82:	84 c0                	test   al,al
10000f84:	79 04                	jns    10000f8a <PS2::controllerRead()+0x38>
10000f86:	b0 00                	mov    al,0x0
10000f88:	eb 48                	jmp    10000fd2 <PS2::controllerRead()+0x80>
10000f8a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000f8e:	83 e0 01             	and    eax,0x1
10000f91:	85 c0                	test   eax,eax
10000f93:	75 29                	jne    10000fbe <PS2::controllerRead()+0x6c>
10000f95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000f98:	8d 50 01             	lea    edx,[eax+0x1]
10000f9b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000f9e:	3d 40 06 00 00       	cmp    eax,0x640
10000fa3:	0f 94 c0             	sete   al
10000fa6:	84 c0                	test   al,al
10000fa8:	74 b5                	je     10000f5f <PS2::controllerRead()+0xd>
10000faa:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000fb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000fb3:	89 c2                	mov    edx,eax
10000fb5:	ec                   	in     al,dx
10000fb6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000fb9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000fbc:	eb 14                	jmp    10000fd2 <PS2::controllerRead()+0x80>
10000fbe:	90                   	nop
10000fbf:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000fc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000fc8:	89 c2                	mov    edx,eax
10000fca:	ec                   	in     al,dx
10000fcb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000fce:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000fd1:	90                   	nop
10000fd2:	c9                   	leave  
10000fd3:	c3                   	ret    

10000fd4 <PS2Keyboard::PS2Keyboard()>:
10000fd4:	55                   	push   ebp
10000fd5:	89 e5                	mov    ebp,esp
10000fd7:	83 ec 08             	sub    esp,0x8
10000fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fdd:	83 ec 08             	sub    esp,0x8
10000fe0:	68 00 00 00 00       	push   0x0	10000fe1: R_386_32	ps2keyname
10000fe5:	50                   	push   eax
10000fe6:	e8 fc ff ff ff       	call   10000fe7 <PS2Keyboard::PS2Keyboard()+0x13>	10000fe7: R_386_PC32	Keyboard::Keyboard(char const*)
10000feb:	83 c4 10             	add    esp,0x10
10000fee:	ba 08 00 00 00       	mov    edx,0x8	10000fef: R_386_32	vtable for PS2Keyboard
10000ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ff6:	89 10                	mov    DWORD PTR [eax],edx
10000ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ffb:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001005:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
1000100c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000100f:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10001016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001019:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10001020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001023:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000102a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000102d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10001034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001037:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
1000103e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001041:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10001048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000104b:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10001052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001055:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
1000105c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000105f:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10001066:	90                   	nop
10001067:	c9                   	leave  
10001068:	c3                   	ret    
10001069:	90                   	nop

1000106a <PS2Keyboard::~PS2Keyboard()>:
1000106a:	55                   	push   ebp
1000106b:	89 e5                	mov    ebp,esp
1000106d:	83 ec 08             	sub    esp,0x8
10001070:	ba 08 00 00 00       	mov    edx,0x8	10001071: R_386_32	vtable for PS2Keyboard
10001075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001078:	89 10                	mov    DWORD PTR [eax],edx
1000107a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000107d:	83 ec 0c             	sub    esp,0xc
10001080:	50                   	push   eax
10001081:	e8 fc ff ff ff       	call   10001082 <PS2Keyboard::~PS2Keyboard()+0x18>	10001082: R_386_PC32	Keyboard::~Keyboard()
10001086:	83 c4 10             	add    esp,0x10
10001089:	90                   	nop
1000108a:	c9                   	leave  
1000108b:	c3                   	ret    

1000108c <PS2Keyboard::~PS2Keyboard()>:
1000108c:	55                   	push   ebp
1000108d:	89 e5                	mov    ebp,esp
1000108f:	83 ec 08             	sub    esp,0x8
10001092:	83 ec 0c             	sub    esp,0xc
10001095:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001098:	e8 fc ff ff ff       	call   10001099 <PS2Keyboard::~PS2Keyboard()+0xd>	10001099: R_386_PC32	PS2Keyboard::~PS2Keyboard()
1000109d:	83 c4 10             	add    esp,0x10
100010a0:	83 ec 08             	sub    esp,0x8
100010a3:	68 70 01 00 00       	push   0x170
100010a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010ab:	e8 fc ff ff ff       	call   100010ac <PS2Keyboard::~PS2Keyboard()+0x20>	100010ac: R_386_PC32	operator delete(void*, unsigned long)
100010b0:	83 c4 10             	add    esp,0x10
100010b3:	c9                   	leave  
100010b4:	c3                   	ret    
100010b5:	90                   	nop

100010b6 <PS2Keyboard::setRepeatRate(int)>:
100010b6:	c3                   	ret    
100010b7:	90                   	nop

100010b8 <PS2Keyboard::setRepeatDelay(int)>:
100010b8:	c3                   	ret    
100010b9:	90                   	nop

100010ba <PS2Keyboard::sendKey(unsigned short, bool)>:
100010ba:	83 ec 1c             	sub    esp,0x1c
100010bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100010c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100010c5:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
100010c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100010cd:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
100010d2:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
100010d9:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
100010df:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
100010e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100010e8:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
100010ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100010f0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
100010f5:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
100010fa:	83 c4 1c             	add    esp,0x1c
100010fd:	e9 fc ff ff ff       	jmp    100010fe <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	100010fe: R_386_PC32	sendKeyboardToken(KeyboardToken)

10001102 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10001102:	83 ec 1c             	sub    esp,0x1c
10001105:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001109:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000110d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10001111:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10001115:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
1000111a:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10001121:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10001127:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
1000112c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001130:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10001134:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001138:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
1000113d:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10001142:	83 c4 1c             	add    esp,0x1c
10001145:	e9 fc ff ff ff       	jmp    10001146 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10001146: R_386_PC32	sendKeyboardToken(KeyboardToken)

1000114a <PS2Keyboard::updateKeyboardLEDs()>:
1000114a:	56                   	push   esi
1000114b:	53                   	push   ebx
1000114c:	83 ec 0c             	sub    esp,0xc
1000114f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001153:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10001159:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10001160:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10001163:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
1000116a:	09 c3                	or     ebx,eax
1000116c:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10001172:	68 ed 00 00 00       	push   0xed
10001177:	0f b6 db             	movzx  ebx,bl
1000117a:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10001180:	e8 fc ff ff ff       	call   10001181 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10001181: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001185:	58                   	pop    eax
10001186:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
1000118c:	e8 fc ff ff ff       	call   1000118d <PS2Keyboard::updateKeyboardLEDs()+0x43>	1000118d: R_386_PC32	PS2Port::deviceRead()
10001191:	5a                   	pop    edx
10001192:	59                   	pop    ecx
10001193:	53                   	push   ebx
10001194:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
1000119a:	e8 fc ff ff ff       	call   1000119b <PS2Keyboard::updateKeyboardLEDs()+0x51>	1000119b: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000119f:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
100011a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100011a9:	83 c4 14             	add    esp,0x14
100011ac:	5b                   	pop    ebx
100011ad:	5e                   	pop    esi
100011ae:	e9 fc ff ff ff       	jmp    100011af <PS2Keyboard::updateKeyboardLEDs()+0x65>	100011af: R_386_PC32	PS2Port::deviceRead()

100011b3 <ps2KeyboardHandler(regs*, void*)>:
100011b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100011b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100011bb:	eb 01                	jmp    100011be <PS2Keyboard::handler()>
100011bd:	90                   	nop

100011be <PS2Keyboard::handler()>:
100011be:	57                   	push   edi
100011bf:	56                   	push   esi
100011c0:	53                   	push   ebx
100011c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100011c5:	e4 60                	in     al,0x60
100011c7:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
100011ce:	74 29                	je     100011f9 <PS2Keyboard::handler()+0x3b>
100011d0:	88 c2                	mov    dl,al
100011d2:	3c e0                	cmp    al,0xe0
100011d4:	75 0c                	jne    100011e2 <PS2Keyboard::handler()+0x24>
100011d6:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
100011dd:	e9 17 07 00 00       	jmp    100018f9 <PS2Keyboard::handler()+0x73b>
100011e2:	84 c0                	test   al,al
100011e4:	0f 89 52 01 00 00    	jns    1000133c <PS2Keyboard::handler()+0x17e>
100011ea:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
100011f1:	83 e2 7f             	and    edx,0x7f
100011f4:	e9 43 01 00 00       	jmp    1000133c <PS2Keyboard::handler()+0x17e>
100011f9:	3c e0                	cmp    al,0xe0
100011fb:	74 d9                	je     100011d6 <PS2Keyboard::handler()+0x18>
100011fd:	3c f0                	cmp    al,0xf0
100011ff:	75 0c                	jne    1000120d <PS2Keyboard::handler()+0x4f>
10001201:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001208:	e9 ec 06 00 00       	jmp    100018f9 <PS2Keyboard::handler()+0x73b>
1000120d:	3c 12                	cmp    al,0x12
1000120f:	75 1f                	jne    10001230 <PS2Keyboard::handler()+0x72>
10001211:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001217:	83 f0 01             	xor    eax,0x1
1000121a:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10001220:	52                   	push   edx
10001221:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001228:	50                   	push   eax
10001229:	68 04 01 00 00       	push   0x104
1000122e:	eb 23                	jmp    10001253 <PS2Keyboard::handler()+0x95>
10001230:	76 3d                	jbe    1000126f <PS2Keyboard::handler()+0xb1>
10001232:	3c 14                	cmp    al,0x14
10001234:	75 62                	jne    10001298 <PS2Keyboard::handler()+0xda>
10001236:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000123c:	83 f0 01             	xor    eax,0x1
1000123f:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10001245:	51                   	push   ecx
10001246:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000124d:	50                   	push   eax
1000124e:	68 00 01 00 00       	push   0x100
10001253:	56                   	push   esi
10001254:	e8 fc ff ff ff       	call   10001255 <PS2Keyboard::handler()+0x97>	10001255: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10001259:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001260:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001267:	83 c4 10             	add    esp,0x10
1000126a:	e9 8a 06 00 00       	jmp    100018f9 <PS2Keyboard::handler()+0x73b>
1000126f:	3c 11                	cmp    al,0x11
10001271:	75 2d                	jne    100012a0 <PS2Keyboard::handler()+0xe2>
10001273:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001279:	83 f0 01             	xor    eax,0x1
1000127c:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10001282:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10001288:	50                   	push   eax
10001289:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001290:	50                   	push   eax
10001291:	68 01 01 00 00       	push   0x101
10001296:	eb bb                	jmp    10001253 <PS2Keyboard::handler()+0x95>
10001298:	3c 59                	cmp    al,0x59
1000129a:	0f 84 71 ff ff ff    	je     10001211 <PS2Keyboard::handler()+0x53>
100012a0:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100012a7:	0f 84 b1 01 00 00    	je     1000145e <PS2Keyboard::handler()+0x2a0>
100012ad:	3c 6b                	cmp    al,0x6b
100012af:	0f 84 f2 00 00 00    	je     100013a7 <PS2Keyboard::handler()+0x1e9>
100012b5:	77 50                	ja     10001307 <PS2Keyboard::handler()+0x149>
100012b7:	3c 51                	cmp    al,0x51
100012b9:	0f 84 37 01 00 00    	je     100013f6 <PS2Keyboard::handler()+0x238>
100012bf:	77 23                	ja     100012e4 <PS2Keyboard::handler()+0x126>
100012c1:	3c 49                	cmp    al,0x49
100012c3:	0f 84 0d 01 00 00    	je     100013d6 <PS2Keyboard::handler()+0x218>
100012c9:	3c 4a                	cmp    al,0x4a
100012cb:	0f 85 29 04 00 00    	jne    100016fa <PS2Keyboard::handler()+0x53c>
100012d1:	50                   	push   eax
100012d2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012d9:	50                   	push   eax
100012da:	68 1f 03 00 00       	push   0x31f
100012df:	e9 c6 03 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100012e4:	3c 5a                	cmp    al,0x5a
100012e6:	0f 84 5f 01 00 00    	je     1000144b <PS2Keyboard::handler()+0x28d>
100012ec:	3c 69                	cmp    al,0x69
100012ee:	0f 85 06 04 00 00    	jne    100016fa <PS2Keyboard::handler()+0x53c>
100012f4:	51                   	push   ecx
100012f5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012fc:	50                   	push   eax
100012fd:	68 01 02 00 00       	push   0x201
10001302:	e9 a3 03 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001307:	3c 71                	cmp    al,0x71
10001309:	0f 84 16 01 00 00    	je     10001425 <PS2Keyboard::handler()+0x267>
1000130f:	77 15                	ja     10001326 <PS2Keyboard::handler()+0x168>
10001311:	3c 6c                	cmp    al,0x6c
10001313:	0f 84 f0 00 00 00    	je     10001409 <PS2Keyboard::handler()+0x24b>
10001319:	3c 70                	cmp    al,0x70
1000131b:	0f 84 17 01 00 00    	je     10001438 <PS2Keyboard::handler()+0x27a>
10001321:	e9 d4 03 00 00       	jmp    100016fa <PS2Keyboard::handler()+0x53c>
10001326:	3c 74                	cmp    al,0x74
10001328:	0f 84 8c 00 00 00    	je     100013ba <PS2Keyboard::handler()+0x1fc>
1000132e:	3c 75                	cmp    al,0x75
10001330:	74 4a                	je     1000137c <PS2Keyboard::handler()+0x1be>
10001332:	3c 72                	cmp    al,0x72
10001334:	0f 85 c0 03 00 00    	jne    100016fa <PS2Keyboard::handler()+0x53c>
1000133a:	eb 58                	jmp    10001394 <PS2Keyboard::handler()+0x1d6>
1000133c:	80 fa 2a             	cmp    dl,0x2a
1000133f:	0f 84 cc fe ff ff    	je     10001211 <PS2Keyboard::handler()+0x53>
10001345:	0f 87 97 05 00 00    	ja     100018e2 <PS2Keyboard::handler()+0x724>
1000134b:	80 fa 1d             	cmp    dl,0x1d
1000134e:	0f 84 e2 fe ff ff    	je     10001236 <PS2Keyboard::handler()+0x78>
10001354:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000135b:	0f 84 ce 03 00 00    	je     1000172f <PS2Keyboard::handler()+0x571>
10001361:	80 fa 4b             	cmp    dl,0x4b
10001364:	74 41                	je     100013a7 <PS2Keyboard::handler()+0x1e9>
10001366:	77 27                	ja     1000138f <PS2Keyboard::handler()+0x1d1>
10001368:	80 fa 47             	cmp    dl,0x47
1000136b:	0f 84 98 00 00 00    	je     10001409 <PS2Keyboard::handler()+0x24b>
10001371:	0f 86 96 03 00 00    	jbe    1000170d <PS2Keyboard::handler()+0x54f>
10001377:	80 fa 48             	cmp    dl,0x48
1000137a:	75 51                	jne    100013cd <PS2Keyboard::handler()+0x20f>
1000137c:	50                   	push   eax
1000137d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001384:	50                   	push   eax
10001385:	68 0b 02 00 00       	push   0x20b
1000138a:	e9 1b 03 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000138f:	80 fa 50             	cmp    dl,0x50
10001392:	75 55                	jne    100013e9 <PS2Keyboard::handler()+0x22b>
10001394:	50                   	push   eax
10001395:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000139c:	50                   	push   eax
1000139d:	68 0c 02 00 00       	push   0x20c
100013a2:	e9 03 03 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100013a7:	50                   	push   eax
100013a8:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100013af:	50                   	push   eax
100013b0:	68 0d 02 00 00       	push   0x20d
100013b5:	e9 f0 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100013ba:	50                   	push   eax
100013bb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100013c2:	50                   	push   eax
100013c3:	68 0e 02 00 00       	push   0x20e
100013c8:	e9 dd 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100013cd:	80 fa 49             	cmp    dl,0x49
100013d0:	0f 85 24 03 00 00    	jne    100016fa <PS2Keyboard::handler()+0x53c>
100013d6:	50                   	push   eax
100013d7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100013de:	50                   	push   eax
100013df:	68 04 02 00 00       	push   0x204
100013e4:	e9 c1 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100013e9:	0f 86 2f 03 00 00    	jbe    1000171e <PS2Keyboard::handler()+0x560>
100013ef:	80 fa 52             	cmp    dl,0x52
100013f2:	74 44                	je     10001438 <PS2Keyboard::handler()+0x27a>
100013f4:	73 26                	jae    1000141c <PS2Keyboard::handler()+0x25e>
100013f6:	57                   	push   edi
100013f7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100013fe:	50                   	push   eax
100013ff:	68 05 02 00 00       	push   0x205
10001404:	e9 a1 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001409:	53                   	push   ebx
1000140a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001411:	50                   	push   eax
10001412:	68 00 02 00 00       	push   0x200
10001417:	e9 8e 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000141c:	80 fa 53             	cmp    dl,0x53
1000141f:	0f 85 d5 02 00 00    	jne    100016fa <PS2Keyboard::handler()+0x53c>
10001425:	52                   	push   edx
10001426:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000142d:	50                   	push   eax
1000142e:	68 03 02 00 00       	push   0x203
10001433:	e9 72 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001438:	50                   	push   eax
10001439:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001440:	50                   	push   eax
10001441:	68 02 02 00 00       	push   0x202
10001446:	e9 5f 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000144b:	50                   	push   eax
1000144c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001453:	50                   	push   eax
10001454:	68 1d 03 00 00       	push   0x31d
10001459:	e9 4c 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000145e:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10001465:	3c 66                	cmp    al,0x66
10001467:	75 09                	jne    10001472 <PS2Keyboard::handler()+0x2b4>
10001469:	50                   	push   eax
1000146a:	52                   	push   edx
1000146b:	6a 08                	push   0x8
1000146d:	e9 38 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001472:	3c 0d                	cmp    al,0xd
10001474:	75 09                	jne    1000147f <PS2Keyboard::handler()+0x2c1>
10001476:	50                   	push   eax
10001477:	52                   	push   edx
10001478:	6a 09                	push   0x9
1000147a:	e9 2b 02 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000147f:	3c 58                	cmp    al,0x58
10001481:	75 2a                	jne    100014ad <PS2Keyboard::handler()+0x2ef>
10001483:	84 d2                	test   dl,dl
10001485:	75 13                	jne    1000149a <PS2Keyboard::handler()+0x2dc>
10001487:	83 ec 0c             	sub    esp,0xc
1000148a:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10001491:	56                   	push   esi
10001492:	e8 fc ff ff ff       	call   10001493 <PS2Keyboard::handler()+0x2d5>	10001493: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001497:	83 c4 10             	add    esp,0x10
1000149a:	50                   	push   eax
1000149b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100014a2:	50                   	push   eax
100014a3:	68 80 02 00 00       	push   0x280
100014a8:	e9 fd 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100014ad:	3c 77                	cmp    al,0x77
100014af:	75 2a                	jne    100014db <PS2Keyboard::handler()+0x31d>
100014b1:	84 d2                	test   dl,dl
100014b3:	75 13                	jne    100014c8 <PS2Keyboard::handler()+0x30a>
100014b5:	83 ec 0c             	sub    esp,0xc
100014b8:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100014bf:	56                   	push   esi
100014c0:	e8 fc ff ff ff       	call   100014c1 <PS2Keyboard::handler()+0x303>	100014c1: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100014c5:	83 c4 10             	add    esp,0x10
100014c8:	50                   	push   eax
100014c9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100014d0:	50                   	push   eax
100014d1:	68 81 02 00 00       	push   0x281
100014d6:	e9 cf 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100014db:	3c 7e                	cmp    al,0x7e
100014dd:	75 2a                	jne    10001509 <PS2Keyboard::handler()+0x34b>
100014df:	84 d2                	test   dl,dl
100014e1:	75 13                	jne    100014f6 <PS2Keyboard::handler()+0x338>
100014e3:	83 ec 0c             	sub    esp,0xc
100014e6:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
100014ed:	56                   	push   esi
100014ee:	e8 fc ff ff ff       	call   100014ef <PS2Keyboard::handler()+0x331>	100014ef: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100014f3:	83 c4 10             	add    esp,0x10
100014f6:	57                   	push   edi
100014f7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100014fe:	50                   	push   eax
100014ff:	68 82 02 00 00       	push   0x282
10001504:	e9 a1 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001509:	3c 05                	cmp    al,0x5
1000150b:	75 0c                	jne    10001519 <PS2Keyboard::handler()+0x35b>
1000150d:	53                   	push   ebx
1000150e:	52                   	push   edx
1000150f:	68 00 03 00 00       	push   0x300
10001514:	e9 91 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001519:	3c 06                	cmp    al,0x6
1000151b:	75 0c                	jne    10001529 <PS2Keyboard::handler()+0x36b>
1000151d:	51                   	push   ecx
1000151e:	52                   	push   edx
1000151f:	68 01 03 00 00       	push   0x301
10001524:	e9 81 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001529:	3c 04                	cmp    al,0x4
1000152b:	75 0c                	jne    10001539 <PS2Keyboard::handler()+0x37b>
1000152d:	50                   	push   eax
1000152e:	52                   	push   edx
1000152f:	68 02 03 00 00       	push   0x302
10001534:	e9 71 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001539:	3c 0c                	cmp    al,0xc
1000153b:	75 0c                	jne    10001549 <PS2Keyboard::handler()+0x38b>
1000153d:	50                   	push   eax
1000153e:	52                   	push   edx
1000153f:	68 03 03 00 00       	push   0x303
10001544:	e9 61 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001549:	3c 03                	cmp    al,0x3
1000154b:	75 0c                	jne    10001559 <PS2Keyboard::handler()+0x39b>
1000154d:	50                   	push   eax
1000154e:	52                   	push   edx
1000154f:	68 04 03 00 00       	push   0x304
10001554:	e9 51 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001559:	3c 0b                	cmp    al,0xb
1000155b:	75 0c                	jne    10001569 <PS2Keyboard::handler()+0x3ab>
1000155d:	50                   	push   eax
1000155e:	52                   	push   edx
1000155f:	68 05 03 00 00       	push   0x305
10001564:	e9 41 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001569:	3c 02                	cmp    al,0x2
1000156b:	74 04                	je     10001571 <PS2Keyboard::handler()+0x3b3>
1000156d:	3c 83                	cmp    al,0x83
1000156f:	75 0c                	jne    1000157d <PS2Keyboard::handler()+0x3bf>
10001571:	50                   	push   eax
10001572:	52                   	push   edx
10001573:	68 06 03 00 00       	push   0x306
10001578:	e9 2d 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000157d:	3c 0a                	cmp    al,0xa
1000157f:	75 0c                	jne    1000158d <PS2Keyboard::handler()+0x3cf>
10001581:	50                   	push   eax
10001582:	52                   	push   edx
10001583:	68 07 03 00 00       	push   0x307
10001588:	e9 1d 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000158d:	3c 01                	cmp    al,0x1
1000158f:	75 0c                	jne    1000159d <PS2Keyboard::handler()+0x3df>
10001591:	57                   	push   edi
10001592:	52                   	push   edx
10001593:	68 08 03 00 00       	push   0x308
10001598:	e9 0d 01 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000159d:	3c 09                	cmp    al,0x9
1000159f:	75 0c                	jne    100015ad <PS2Keyboard::handler()+0x3ef>
100015a1:	53                   	push   ebx
100015a2:	52                   	push   edx
100015a3:	68 09 03 00 00       	push   0x309
100015a8:	e9 fd 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015ad:	3c 78                	cmp    al,0x78
100015af:	75 0c                	jne    100015bd <PS2Keyboard::handler()+0x3ff>
100015b1:	51                   	push   ecx
100015b2:	52                   	push   edx
100015b3:	68 0a 03 00 00       	push   0x30a
100015b8:	e9 ed 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015bd:	3c 07                	cmp    al,0x7
100015bf:	75 0c                	jne    100015cd <PS2Keyboard::handler()+0x40f>
100015c1:	50                   	push   eax
100015c2:	52                   	push   edx
100015c3:	68 0b 03 00 00       	push   0x30b
100015c8:	e9 dd 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015cd:	3c 5a                	cmp    al,0x5a
100015cf:	75 09                	jne    100015da <PS2Keyboard::handler()+0x41c>
100015d1:	50                   	push   eax
100015d2:	52                   	push   edx
100015d3:	6a 0a                	push   0xa
100015d5:	e9 d0 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015da:	3c 76                	cmp    al,0x76
100015dc:	75 0c                	jne    100015ea <PS2Keyboard::handler()+0x42c>
100015de:	50                   	push   eax
100015df:	52                   	push   edx
100015e0:	68 0a 02 00 00       	push   0x20a
100015e5:	e9 c0 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015ea:	3c 70                	cmp    al,0x70
100015ec:	75 0c                	jne    100015fa <PS2Keyboard::handler()+0x43c>
100015ee:	50                   	push   eax
100015ef:	52                   	push   edx
100015f0:	68 10 03 00 00       	push   0x310
100015f5:	e9 b0 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
100015fa:	3c 69                	cmp    al,0x69
100015fc:	75 0c                	jne    1000160a <PS2Keyboard::handler()+0x44c>
100015fe:	50                   	push   eax
100015ff:	52                   	push   edx
10001600:	68 11 03 00 00       	push   0x311
10001605:	e9 a0 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000160a:	3c 72                	cmp    al,0x72
1000160c:	75 0c                	jne    1000161a <PS2Keyboard::handler()+0x45c>
1000160e:	50                   	push   eax
1000160f:	52                   	push   edx
10001610:	68 12 03 00 00       	push   0x312
10001615:	e9 90 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000161a:	3c 7a                	cmp    al,0x7a
1000161c:	75 0c                	jne    1000162a <PS2Keyboard::handler()+0x46c>
1000161e:	57                   	push   edi
1000161f:	52                   	push   edx
10001620:	68 13 03 00 00       	push   0x313
10001625:	e9 80 00 00 00       	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000162a:	3c 6b                	cmp    al,0x6b
1000162c:	75 09                	jne    10001637 <PS2Keyboard::handler()+0x479>
1000162e:	53                   	push   ebx
1000162f:	52                   	push   edx
10001630:	68 14 03 00 00       	push   0x314
10001635:	eb 73                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001637:	3c 73                	cmp    al,0x73
10001639:	75 09                	jne    10001644 <PS2Keyboard::handler()+0x486>
1000163b:	51                   	push   ecx
1000163c:	52                   	push   edx
1000163d:	68 15 03 00 00       	push   0x315
10001642:	eb 66                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001644:	3c 74                	cmp    al,0x74
10001646:	75 09                	jne    10001651 <PS2Keyboard::handler()+0x493>
10001648:	50                   	push   eax
10001649:	52                   	push   edx
1000164a:	68 16 03 00 00       	push   0x316
1000164f:	eb 59                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001651:	3c 6c                	cmp    al,0x6c
10001653:	75 09                	jne    1000165e <PS2Keyboard::handler()+0x4a0>
10001655:	50                   	push   eax
10001656:	52                   	push   edx
10001657:	68 17 03 00 00       	push   0x317
1000165c:	eb 4c                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000165e:	3c 75                	cmp    al,0x75
10001660:	75 09                	jne    1000166b <PS2Keyboard::handler()+0x4ad>
10001662:	50                   	push   eax
10001663:	52                   	push   edx
10001664:	68 18 03 00 00       	push   0x318
10001669:	eb 3f                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000166b:	3c 7d                	cmp    al,0x7d
1000166d:	75 09                	jne    10001678 <PS2Keyboard::handler()+0x4ba>
1000166f:	50                   	push   eax
10001670:	52                   	push   edx
10001671:	68 19 03 00 00       	push   0x319
10001676:	eb 32                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001678:	3c 71                	cmp    al,0x71
1000167a:	75 09                	jne    10001685 <PS2Keyboard::handler()+0x4c7>
1000167c:	50                   	push   eax
1000167d:	52                   	push   edx
1000167e:	68 1a 03 00 00       	push   0x31a
10001683:	eb 25                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001685:	3c 7b                	cmp    al,0x7b
10001687:	75 09                	jne    10001692 <PS2Keyboard::handler()+0x4d4>
10001689:	50                   	push   eax
1000168a:	52                   	push   edx
1000168b:	68 1c 03 00 00       	push   0x31c
10001690:	eb 18                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
10001692:	3c 79                	cmp    al,0x79
10001694:	75 09                	jne    1000169f <PS2Keyboard::handler()+0x4e1>
10001696:	57                   	push   edi
10001697:	52                   	push   edx
10001698:	68 1b 03 00 00       	push   0x31b
1000169d:	eb 0b                	jmp    100016aa <PS2Keyboard::handler()+0x4ec>
1000169f:	3c 7c                	cmp    al,0x7c
100016a1:	75 0f                	jne    100016b2 <PS2Keyboard::handler()+0x4f4>
100016a3:	53                   	push   ebx
100016a4:	52                   	push   edx
100016a5:	68 1e 03 00 00       	push   0x31e
100016aa:	56                   	push   esi
100016ab:	e8 fc ff ff ff       	call   100016ac <PS2Keyboard::handler()+0x4ee>	100016ac: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100016b0:	eb 45                	jmp    100016f7 <PS2Keyboard::handler()+0x539>
100016b2:	0f b6 c0             	movzx  eax,al
100016b5:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100016bb:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100016c2:	74 16                	je     100016da <PS2Keyboard::handler()+0x51c>
100016c4:	84 c9                	test   cl,cl
100016c6:	74 09                	je     100016d1 <PS2Keyboard::handler()+0x513>
100016c8:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100016cb: R_386_32	PS2Keyboard::internalMapCapUpper
100016cf:	eb 1d                	jmp    100016ee <PS2Keyboard::handler()+0x530>
100016d1:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100016d4: R_386_32	PS2Keyboard::internalMapperUpper
100016d8:	eb 14                	jmp    100016ee <PS2Keyboard::handler()+0x530>
100016da:	84 c9                	test   cl,cl
100016dc:	74 09                	je     100016e7 <PS2Keyboard::handler()+0x529>
100016de:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100016e1: R_386_32	PS2Keyboard::internalMapCapLower
100016e5:	eb 07                	jmp    100016ee <PS2Keyboard::handler()+0x530>
100016e7:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100016ea: R_386_32	PS2Keyboard::internalMapperLower
100016ee:	51                   	push   ecx
100016ef:	52                   	push   edx
100016f0:	50                   	push   eax
100016f1:	56                   	push   esi
100016f2:	e8 fc ff ff ff       	call   100016f3 <PS2Keyboard::handler()+0x535>	100016f3: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
100016f7:	83 c4 10             	add    esp,0x10
100016fa:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001701:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001708:	e9 ec 01 00 00       	jmp    100018f9 <PS2Keyboard::handler()+0x73b>
1000170d:	80 fa 1c             	cmp    dl,0x1c
10001710:	0f 84 35 fd ff ff    	je     1000144b <PS2Keyboard::handler()+0x28d>
10001716:	80 fa 35             	cmp    dl,0x35
10001719:	e9 ad fb ff ff       	jmp    100012cb <PS2Keyboard::handler()+0x10d>
1000171e:	80 fa 4d             	cmp    dl,0x4d
10001721:	0f 84 93 fc ff ff    	je     100013ba <PS2Keyboard::handler()+0x1fc>
10001727:	80 fa 4f             	cmp    dl,0x4f
1000172a:	e9 bf fb ff ff       	jmp    100012ee <PS2Keyboard::handler()+0x130>
1000172f:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10001736:	80 fa 0e             	cmp    dl,0xe
10001739:	75 07                	jne    10001742 <PS2Keyboard::handler()+0x584>
1000173b:	50                   	push   eax
1000173c:	51                   	push   ecx
1000173d:	e9 29 fd ff ff       	jmp    1000146b <PS2Keyboard::handler()+0x2ad>
10001742:	80 fa 0f             	cmp    dl,0xf
10001745:	75 07                	jne    1000174e <PS2Keyboard::handler()+0x590>
10001747:	57                   	push   edi
10001748:	51                   	push   ecx
10001749:	e9 2a fd ff ff       	jmp    10001478 <PS2Keyboard::handler()+0x2ba>
1000174e:	80 fa 3a             	cmp    dl,0x3a
10001751:	75 07                	jne    1000175a <PS2Keyboard::handler()+0x59c>
10001753:	84 c9                	test   cl,cl
10001755:	e9 2b fd ff ff       	jmp    10001485 <PS2Keyboard::handler()+0x2c7>
1000175a:	80 fa 45             	cmp    dl,0x45
1000175d:	75 07                	jne    10001766 <PS2Keyboard::handler()+0x5a8>
1000175f:	84 c9                	test   cl,cl
10001761:	e9 4d fd ff ff       	jmp    100014b3 <PS2Keyboard::handler()+0x2f5>
10001766:	80 fa 46             	cmp    dl,0x46
10001769:	75 07                	jne    10001772 <PS2Keyboard::handler()+0x5b4>
1000176b:	84 c9                	test   cl,cl
1000176d:	e9 6f fd ff ff       	jmp    100014e1 <PS2Keyboard::handler()+0x323>
10001772:	80 fa 3b             	cmp    dl,0x3b
10001775:	75 07                	jne    1000177e <PS2Keyboard::handler()+0x5c0>
10001777:	53                   	push   ebx
10001778:	51                   	push   ecx
10001779:	e9 91 fd ff ff       	jmp    1000150f <PS2Keyboard::handler()+0x351>
1000177e:	80 fa 3c             	cmp    dl,0x3c
10001781:	75 07                	jne    1000178a <PS2Keyboard::handler()+0x5cc>
10001783:	52                   	push   edx
10001784:	51                   	push   ecx
10001785:	e9 95 fd ff ff       	jmp    1000151f <PS2Keyboard::handler()+0x361>
1000178a:	80 fa 3d             	cmp    dl,0x3d
1000178d:	75 07                	jne    10001796 <PS2Keyboard::handler()+0x5d8>
1000178f:	50                   	push   eax
10001790:	51                   	push   ecx
10001791:	e9 99 fd ff ff       	jmp    1000152f <PS2Keyboard::handler()+0x371>
10001796:	80 fa 3e             	cmp    dl,0x3e
10001799:	75 07                	jne    100017a2 <PS2Keyboard::handler()+0x5e4>
1000179b:	50                   	push   eax
1000179c:	51                   	push   ecx
1000179d:	e9 9d fd ff ff       	jmp    1000153f <PS2Keyboard::handler()+0x381>
100017a2:	80 fa 3f             	cmp    dl,0x3f
100017a5:	75 07                	jne    100017ae <PS2Keyboard::handler()+0x5f0>
100017a7:	50                   	push   eax
100017a8:	51                   	push   ecx
100017a9:	e9 a1 fd ff ff       	jmp    1000154f <PS2Keyboard::handler()+0x391>
100017ae:	80 fa 40             	cmp    dl,0x40
100017b1:	75 07                	jne    100017ba <PS2Keyboard::handler()+0x5fc>
100017b3:	50                   	push   eax
100017b4:	51                   	push   ecx
100017b5:	e9 a5 fd ff ff       	jmp    1000155f <PS2Keyboard::handler()+0x3a1>
100017ba:	80 fa 41             	cmp    dl,0x41
100017bd:	75 07                	jne    100017c6 <PS2Keyboard::handler()+0x608>
100017bf:	50                   	push   eax
100017c0:	51                   	push   ecx
100017c1:	e9 ad fd ff ff       	jmp    10001573 <PS2Keyboard::handler()+0x3b5>
100017c6:	80 fa 42             	cmp    dl,0x42
100017c9:	75 07                	jne    100017d2 <PS2Keyboard::handler()+0x614>
100017cb:	50                   	push   eax
100017cc:	51                   	push   ecx
100017cd:	e9 b1 fd ff ff       	jmp    10001583 <PS2Keyboard::handler()+0x3c5>
100017d2:	80 fa 43             	cmp    dl,0x43
100017d5:	75 07                	jne    100017de <PS2Keyboard::handler()+0x620>
100017d7:	57                   	push   edi
100017d8:	51                   	push   ecx
100017d9:	e9 b5 fd ff ff       	jmp    10001593 <PS2Keyboard::handler()+0x3d5>
100017de:	80 fa 44             	cmp    dl,0x44
100017e1:	75 07                	jne    100017ea <PS2Keyboard::handler()+0x62c>
100017e3:	53                   	push   ebx
100017e4:	51                   	push   ecx
100017e5:	e9 b9 fd ff ff       	jmp    100015a3 <PS2Keyboard::handler()+0x3e5>
100017ea:	84 d2                	test   dl,dl
100017ec:	75 07                	jne    100017f5 <PS2Keyboard::handler()+0x637>
100017ee:	52                   	push   edx
100017ef:	51                   	push   ecx
100017f0:	e9 be fd ff ff       	jmp    100015b3 <PS2Keyboard::handler()+0x3f5>
100017f5:	80 fa 1c             	cmp    dl,0x1c
100017f8:	75 07                	jne    10001801 <PS2Keyboard::handler()+0x643>
100017fa:	50                   	push   eax
100017fb:	51                   	push   ecx
100017fc:	e9 d2 fd ff ff       	jmp    100015d3 <PS2Keyboard::handler()+0x415>
10001801:	80 fa 01             	cmp    dl,0x1
10001804:	75 07                	jne    1000180d <PS2Keyboard::handler()+0x64f>
10001806:	50                   	push   eax
10001807:	51                   	push   ecx
10001808:	e9 d3 fd ff ff       	jmp    100015e0 <PS2Keyboard::handler()+0x422>
1000180d:	80 fa 52             	cmp    dl,0x52
10001810:	75 07                	jne    10001819 <PS2Keyboard::handler()+0x65b>
10001812:	50                   	push   eax
10001813:	51                   	push   ecx
10001814:	e9 d7 fd ff ff       	jmp    100015f0 <PS2Keyboard::handler()+0x432>
10001819:	80 fa 4f             	cmp    dl,0x4f
1000181c:	75 07                	jne    10001825 <PS2Keyboard::handler()+0x667>
1000181e:	50                   	push   eax
1000181f:	51                   	push   ecx
10001820:	e9 db fd ff ff       	jmp    10001600 <PS2Keyboard::handler()+0x442>
10001825:	80 fa 50             	cmp    dl,0x50
10001828:	75 07                	jne    10001831 <PS2Keyboard::handler()+0x673>
1000182a:	50                   	push   eax
1000182b:	51                   	push   ecx
1000182c:	e9 df fd ff ff       	jmp    10001610 <PS2Keyboard::handler()+0x452>
10001831:	80 fa 51             	cmp    dl,0x51
10001834:	75 07                	jne    1000183d <PS2Keyboard::handler()+0x67f>
10001836:	50                   	push   eax
10001837:	51                   	push   ecx
10001838:	e9 e3 fd ff ff       	jmp    10001620 <PS2Keyboard::handler()+0x462>
1000183d:	80 fa 4b             	cmp    dl,0x4b
10001840:	75 07                	jne    10001849 <PS2Keyboard::handler()+0x68b>
10001842:	57                   	push   edi
10001843:	51                   	push   ecx
10001844:	e9 e7 fd ff ff       	jmp    10001630 <PS2Keyboard::handler()+0x472>
10001849:	80 fa 4c             	cmp    dl,0x4c
1000184c:	75 07                	jne    10001855 <PS2Keyboard::handler()+0x697>
1000184e:	53                   	push   ebx
1000184f:	51                   	push   ecx
10001850:	e9 e8 fd ff ff       	jmp    1000163d <PS2Keyboard::handler()+0x47f>
10001855:	80 fa 4d             	cmp    dl,0x4d
10001858:	75 07                	jne    10001861 <PS2Keyboard::handler()+0x6a3>
1000185a:	52                   	push   edx
1000185b:	51                   	push   ecx
1000185c:	e9 e9 fd ff ff       	jmp    1000164a <PS2Keyboard::handler()+0x48c>
10001861:	80 fa 47             	cmp    dl,0x47
10001864:	75 07                	jne    1000186d <PS2Keyboard::handler()+0x6af>
10001866:	50                   	push   eax
10001867:	51                   	push   ecx
10001868:	e9 ea fd ff ff       	jmp    10001657 <PS2Keyboard::handler()+0x499>
1000186d:	80 fa 48             	cmp    dl,0x48
10001870:	75 07                	jne    10001879 <PS2Keyboard::handler()+0x6bb>
10001872:	50                   	push   eax
10001873:	51                   	push   ecx
10001874:	e9 eb fd ff ff       	jmp    10001664 <PS2Keyboard::handler()+0x4a6>
10001879:	80 fa 49             	cmp    dl,0x49
1000187c:	75 07                	jne    10001885 <PS2Keyboard::handler()+0x6c7>
1000187e:	50                   	push   eax
1000187f:	51                   	push   ecx
10001880:	e9 ec fd ff ff       	jmp    10001671 <PS2Keyboard::handler()+0x4b3>
10001885:	80 fa 53             	cmp    dl,0x53
10001888:	75 07                	jne    10001891 <PS2Keyboard::handler()+0x6d3>
1000188a:	50                   	push   eax
1000188b:	51                   	push   ecx
1000188c:	e9 ed fd ff ff       	jmp    1000167e <PS2Keyboard::handler()+0x4c0>
10001891:	80 fa 4a             	cmp    dl,0x4a
10001894:	75 07                	jne    1000189d <PS2Keyboard::handler()+0x6df>
10001896:	50                   	push   eax
10001897:	51                   	push   ecx
10001898:	e9 ee fd ff ff       	jmp    1000168b <PS2Keyboard::handler()+0x4cd>
1000189d:	80 fa 4e             	cmp    dl,0x4e
100018a0:	75 07                	jne    100018a9 <PS2Keyboard::handler()+0x6eb>
100018a2:	50                   	push   eax
100018a3:	51                   	push   ecx
100018a4:	e9 ef fd ff ff       	jmp    10001698 <PS2Keyboard::handler()+0x4da>
100018a9:	80 fa 37             	cmp    dl,0x37
100018ac:	75 07                	jne    100018b5 <PS2Keyboard::handler()+0x6f7>
100018ae:	57                   	push   edi
100018af:	51                   	push   ecx
100018b0:	e9 f0 fd ff ff       	jmp    100016a5 <PS2Keyboard::handler()+0x4e7>
100018b5:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100018bc:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100018c3:	c1 e7 07             	shl    edi,0x7
100018c6:	c1 e0 08             	shl    eax,0x8
100018c9:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100018cc: R_386_32	PS2Keyboard::internalMapperLowerBad
100018d0:	88 d0                	mov    al,dl
100018d2:	89 fb                	mov    ebx,edi
100018d4:	d7                   	xlat   BYTE PTR ds:[ebx]
100018d5:	88 c2                	mov    dl,al
100018d7:	0f b6 d2             	movzx  edx,dl
100018da:	53                   	push   ebx
100018db:	51                   	push   ecx
100018dc:	52                   	push   edx
100018dd:	e9 0f fe ff ff       	jmp    100016f1 <PS2Keyboard::handler()+0x533>
100018e2:	80 fa 36             	cmp    dl,0x36
100018e5:	0f 84 26 f9 ff ff    	je     10001211 <PS2Keyboard::handler()+0x53>
100018eb:	80 fa 38             	cmp    dl,0x38
100018ee:	0f 84 7f f9 ff ff    	je     10001273 <PS2Keyboard::handler()+0xb5>
100018f4:	e9 5b fa ff ff       	jmp    10001354 <PS2Keyboard::handler()+0x196>
100018f9:	5b                   	pop    ebx
100018fa:	5e                   	pop    esi
100018fb:	5f                   	pop    edi
100018fc:	c3                   	ret    
100018fd:	90                   	nop

100018fe <PS2Keyboard::open(int, int, void*)>:
100018fe:	53                   	push   ebx
100018ff:	83 ec 14             	sub    esp,0x14
10001902:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001906:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
1000190c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10001912:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001916:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
1000191c:	53                   	push   ebx
1000191d:	6a 01                	push   0x1
1000191f:	68 00 00 00 00       	push   0x0	10001920: R_386_32	ps2KeyboardHandler(regs*, void*)
10001924:	6a 01                	push   0x1
10001926:	53                   	push   ebx
10001927:	e8 fc ff ff ff       	call   10001928 <PS2Keyboard::open(int, int, void*)+0x2a>	10001928: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000192c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10001932:	a1 00 00 00 00       	mov    eax,ds:0x0	10001933: R_386_32	sysBootSettings
10001937:	c1 e8 02             	shr    eax,0x2
1000193a:	83 f0 01             	xor    eax,0x1
1000193d:	83 e0 01             	and    eax,0x1
10001940:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10001946:	31 c0                	xor    eax,eax
10001948:	83 c4 28             	add    esp,0x28
1000194b:	5b                   	pop    ebx
1000194c:	c3                   	ret    
1000194d:	90                   	nop

1000194e <PS2Keyboard::close(int, int, void*)>:
1000194e:	83 c8 ff             	or     eax,0xffffffff
10001951:	c3                   	ret    

10001952 <PS2Mouse::PS2Mouse()>:
10001952:	55                   	push   ebp
10001953:	89 e5                	mov    ebp,esp
10001955:	83 ec 08             	sub    esp,0x8
10001958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000195b:	83 ec 08             	sub    esp,0x8
1000195e:	68 00 00 00 00       	push   0x0	1000195f: R_386_32	ps2mousename
10001963:	50                   	push   eax
10001964:	e8 fc ff ff ff       	call   10001965 <PS2Mouse::PS2Mouse()+0x13>	10001965: R_386_PC32	Mouse::Mouse(char const*)
10001969:	83 c4 10             	add    esp,0x10
1000196c:	ba 08 00 00 00       	mov    edx,0x8	1000196d: R_386_32	vtable for PS2Mouse
10001971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001974:	89 10                	mov    DWORD PTR [eax],edx
10001976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001979:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001983:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
1000198d:	90                   	nop
1000198e:	c9                   	leave  
1000198f:	c3                   	ret    

10001990 <ps2MouseHandler(regs*, void*)>:
10001990:	55                   	push   ebp
10001991:	89 e5                	mov    ebp,esp
10001993:	83 ec 08             	sub    esp,0x8
10001996:	83 ec 0c             	sub    esp,0xc
10001999:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000199c:	e8 fc ff ff ff       	call   1000199d <ps2MouseHandler(regs*, void*)+0xd>	1000199d: R_386_PC32	PS2Mouse::handler()
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	90                   	nop
100019a5:	c9                   	leave  
100019a6:	c3                   	ret    
100019a7:	90                   	nop

100019a8 <PS2Mouse::handler()>:
100019a8:	55                   	push   ebp
100019a9:	89 e5                	mov    ebp,esp
100019ab:	83 ec 28             	sub    esp,0x28
100019ae:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100019b4:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100019b8:	89 c2                	mov    edx,eax
100019ba:	ec                   	in     al,dx
100019bb:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100019be:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100019c1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100019c4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100019c8:	83 e0 01             	and    eax,0x1
100019cb:	85 c0                	test   eax,eax
100019cd:	0f 84 8d 01 00 00    	je     10001b60 <PS2Mouse::handler()+0x1b8>
100019d3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100019d7:	83 e0 20             	and    eax,0x20
100019da:	85 c0                	test   eax,eax
100019dc:	0f 84 81 01 00 00    	je     10001b63 <PS2Mouse::handler()+0x1bb>
100019e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019e5:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100019eb:	8d 50 01             	lea    edx,[eax+0x1]
100019ee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100019f1:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
100019f7:	0f b6 c8             	movzx  ecx,al
100019fa:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10001a00:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10001a04:	89 c2                	mov    edx,eax
10001a06:	ec                   	in     al,dx
10001a07:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10001a0a:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a10:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10001a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a1a:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001a20:	0f b6 c0             	movzx  eax,al
10001a23:	83 e0 08             	and    eax,0x8
10001a26:	85 c0                	test   eax,eax
10001a28:	75 0f                	jne    10001a39 <PS2Mouse::handler()+0x91>
10001a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a2d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001a34:	e9 2b 01 00 00       	jmp    10001b64 <PS2Mouse::handler()+0x1bc>
10001a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a3c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001a42:	84 c0                	test   al,al
10001a44:	75 0d                	jne    10001a53 <PS2Mouse::handler()+0xab>
10001a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a49:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001a4f:	3c 02                	cmp    al,0x2
10001a51:	77 2f                	ja     10001a82 <PS2Mouse::handler()+0xda>
10001a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a56:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001a5c:	3c 03                	cmp    al,0x3
10001a5e:	74 11                	je     10001a71 <PS2Mouse::handler()+0xc9>
10001a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a63:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001a69:	3c 04                	cmp    al,0x4
10001a6b:	0f 85 f3 00 00 00    	jne    10001b64 <PS2Mouse::handler()+0x1bc>
10001a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a74:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001a7a:	3c 03                	cmp    al,0x3
10001a7c:	0f 86 e2 00 00 00    	jbe    10001b64 <PS2Mouse::handler()+0x1bc>
10001a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a85:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a8f:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001a95:	84 c0                	test   al,al
10001a97:	78 13                	js     10001aac <PS2Mouse::handler()+0x104>
10001a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a9c:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001aa2:	0f b6 c0             	movzx  eax,al
10001aa5:	83 e0 40             	and    eax,0x40
10001aa8:	85 c0                	test   eax,eax
10001aaa:	74 37                	je     10001ae3 <PS2Mouse::handler()+0x13b>
10001aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aaf:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ab9:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
10001ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac3:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10001aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001acd:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ad7:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10001ade:	e9 81 00 00 00       	jmp    10001b64 <PS2Mouse::handler()+0x1bc>
10001ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ae6:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001aec:	0f b6 d0             	movzx  edx,al
10001aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001af2:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001af8:	0f b6 c0             	movzx  eax,al
10001afb:	c1 e0 04             	shl    eax,0x4
10001afe:	25 00 01 00 00       	and    eax,0x100
10001b03:	29 c2                	sub    edx,eax
10001b05:	89 d0                	mov    eax,edx
10001b07:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b0d:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001b13:	0f b6 c0             	movzx  eax,al
10001b16:	c1 e0 03             	shl    eax,0x3
10001b19:	25 00 01 00 00       	and    eax,0x100
10001b1e:	89 c2                	mov    edx,eax
10001b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b23:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10001b29:	0f b6 c0             	movzx  eax,al
10001b2c:	29 c2                	sub    edx,eax
10001b2e:	89 d0                	mov    eax,edx
10001b30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001b33:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b34: R_386_32	guiMouseHandler
10001b38:	85 c0                	test   eax,eax
10001b3a:	74 28                	je     10001b64 <PS2Mouse::handler()+0x1bc>
10001b3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b3d: R_386_32	guiMouseHandler
10001b41:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b44:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10001b4a:	0f b6 d2             	movzx  edx,dl
10001b4d:	83 e2 01             	and    edx,0x1
10001b50:	6a 00                	push   0x0
10001b52:	52                   	push   edx
10001b53:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10001b56:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b59:	ff d0                	call   eax
10001b5b:	83 c4 10             	add    esp,0x10
10001b5e:	eb 04                	jmp    10001b64 <PS2Mouse::handler()+0x1bc>
10001b60:	90                   	nop
10001b61:	eb 01                	jmp    10001b64 <PS2Mouse::handler()+0x1bc>
10001b63:	90                   	nop
10001b64:	c9                   	leave  
10001b65:	c3                   	ret    

10001b66 <PS2Mouse::open(int, int, void*)>:
10001b66:	55                   	push   ebp
10001b67:	89 e5                	mov    ebp,esp
10001b69:	83 ec 08             	sub    esp,0x8
10001b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b6f:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b78:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b81:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001b84:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b8d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001b93:	83 ec 08             	sub    esp,0x8
10001b96:	68 f6 00 00 00       	push   0xf6
10001b9b:	50                   	push   eax
10001b9c:	e8 fc ff ff ff       	call   10001b9d <PS2Mouse::open(int, int, void*)+0x37>	10001b9d: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001ba1:	83 c4 10             	add    esp,0x10
10001ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001bad:	83 ec 0c             	sub    esp,0xc
10001bb0:	50                   	push   eax
10001bb1:	e8 fc ff ff ff       	call   10001bb2 <PS2Mouse::open(int, int, void*)+0x4c>	10001bb2: R_386_PC32	PS2Port::deviceRead()
10001bb6:	83 c4 10             	add    esp,0x10
10001bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001bc2:	83 ec 08             	sub    esp,0x8
10001bc5:	68 f4 00 00 00       	push   0xf4
10001bca:	50                   	push   eax
10001bcb:	e8 fc ff ff ff       	call   10001bcc <PS2Mouse::open(int, int, void*)+0x66>	10001bcc: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001bd0:	83 c4 10             	add    esp,0x10
10001bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bd6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001bdc:	83 ec 0c             	sub    esp,0xc
10001bdf:	50                   	push   eax
10001be0:	e8 fc ff ff ff       	call   10001be1 <PS2Mouse::open(int, int, void*)+0x7b>	10001be1: R_386_PC32	PS2Port::deviceRead()
10001be5:	83 c4 10             	add    esp,0x10
10001be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001beb:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bf5:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bff:	83 ec 0c             	sub    esp,0xc
10001c02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c05:	6a 01                	push   0x1
10001c07:	68 00 00 00 00       	push   0x0	10001c08: R_386_32	ps2MouseHandler(regs*, void*)
10001c0c:	6a 0c                	push   0xc
10001c0e:	50                   	push   eax
10001c0f:	e8 fc ff ff ff       	call   10001c10 <PS2Mouse::open(int, int, void*)+0xaa>	10001c10: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001c14:	83 c4 20             	add    esp,0x20
10001c17:	b8 00 00 00 00       	mov    eax,0x0
10001c1c:	c9                   	leave  
10001c1d:	c3                   	ret    

10001c1e <PS2Mouse::close(int, int, void*)>:
10001c1e:	b8 00 00 00 00       	mov    eax,0x0
10001c23:	c3                   	ret    

10001c24 <PS2Mouse::detect()>:
10001c24:	90                   	nop
10001c25:	c3                   	ret    

10001c26 <PS2Port::PS2Port()>:
10001c26:	55                   	push   ebp
10001c27:	89 e5                	mov    ebp,esp
10001c29:	83 ec 08             	sub    esp,0x8
10001c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c2f:	83 ec 08             	sub    esp,0x8
10001c32:	68 00 00 00 00       	push   0x0	10001c33: R_386_32	ps2portname
10001c37:	50                   	push   eax
10001c38:	e8 fc ff ff ff       	call   10001c39 <PS2Port::PS2Port()+0x13>	10001c39: R_386_PC32	Bus::Bus(char const*)
10001c3d:	83 c4 10             	add    esp,0x10
10001c40:	ba 08 00 00 00       	mov    edx,0x8	10001c41: R_386_32	vtable for PS2Port
10001c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c48:	89 10                	mov    DWORD PTR [eax],edx
10001c4a:	90                   	nop
10001c4b:	c9                   	leave  
10001c4c:	c3                   	ret    
10001c4d:	90                   	nop

10001c4e <PS2Port::open(int, int, void*)>:
10001c4e:	55                   	push   ebp
10001c4f:	89 e5                	mov    ebp,esp
10001c51:	83 ec 08             	sub    esp,0x8
10001c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001c5a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c63:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001c66:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c6f:	8b 00                	mov    eax,DWORD PTR [eax]
10001c71:	83 c0 18             	add    eax,0x18
10001c74:	8b 00                	mov    eax,DWORD PTR [eax]
10001c76:	83 ec 0c             	sub    esp,0xc
10001c79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c7c:	ff d0                	call   eax
10001c7e:	83 c4 10             	add    esp,0x10
10001c81:	b8 00 00 00 00       	mov    eax,0x0
10001c86:	c9                   	leave  
10001c87:	c3                   	ret    

10001c88 <PS2Port::close(int, int, void*)>:
10001c88:	b8 00 00 00 00       	mov    eax,0x0
10001c8d:	c3                   	ret    

10001c8e <PS2Port::detect()>:
10001c8e:	55                   	push   ebp
10001c8f:	89 e5                	mov    ebp,esp
10001c91:	53                   	push   ebx
10001c92:	83 ec 14             	sub    esp,0x14
10001c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001c9e:	85 c0                	test   eax,eax
10001ca0:	75 55                	jne    10001cf7 <PS2Port::detect()+0x69>
10001ca2:	83 ec 0c             	sub    esp,0xc
10001ca5:	68 70 01 00 00       	push   0x170
10001caa:	e8 fc ff ff ff       	call   10001cab <PS2Port::detect()+0x1d>	10001cab: R_386_PC32	operator new(unsigned long)
10001caf:	83 c4 10             	add    esp,0x10
10001cb2:	89 c3                	mov    ebx,eax
10001cb4:	83 ec 0c             	sub    esp,0xc
10001cb7:	53                   	push   ebx
10001cb8:	e8 fc ff ff ff       	call   10001cb9 <PS2Port::detect()+0x2b>	10001cb9: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001cbd:	83 c4 10             	add    esp,0x10
10001cc0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cc6:	83 ec 08             	sub    esp,0x8
10001cc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ccc:	50                   	push   eax
10001ccd:	e8 fc ff ff ff       	call   10001cce <PS2Port::detect()+0x40>	10001cce: R_386_PC32	Device::addChild(Device*)
10001cd2:	83 c4 10             	add    esp,0x10
10001cd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001cd8:	8b 00                	mov    eax,DWORD PTR [eax]
10001cda:	83 c0 08             	add    eax,0x8
10001cdd:	8b 00                	mov    eax,DWORD PTR [eax]
10001cdf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001ce2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001ce8:	52                   	push   edx
10001ce9:	6a 00                	push   0x0
10001ceb:	6a 00                	push   0x0
10001ced:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001cf0:	ff d0                	call   eax
10001cf2:	83 c4 10             	add    esp,0x10
10001cf5:	eb 61                	jmp    10001d58 <PS2Port::detect()+0xca>
10001cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001d00:	83 f8 01             	cmp    eax,0x1
10001d03:	75 53                	jne    10001d58 <PS2Port::detect()+0xca>
10001d05:	83 ec 0c             	sub    esp,0xc
10001d08:	68 68 01 00 00       	push   0x168
10001d0d:	e8 fc ff ff ff       	call   10001d0e <PS2Port::detect()+0x80>	10001d0e: R_386_PC32	operator new(unsigned long)
10001d12:	83 c4 10             	add    esp,0x10
10001d15:	89 c3                	mov    ebx,eax
10001d17:	83 ec 0c             	sub    esp,0xc
10001d1a:	53                   	push   ebx
10001d1b:	e8 fc ff ff ff       	call   10001d1c <PS2Port::detect()+0x8e>	10001d1c: R_386_PC32	PS2Mouse::PS2Mouse()
10001d20:	83 c4 10             	add    esp,0x10
10001d23:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10001d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d29:	83 ec 08             	sub    esp,0x8
10001d2c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001d2f:	50                   	push   eax
10001d30:	e8 fc ff ff ff       	call   10001d31 <PS2Port::detect()+0xa3>	10001d31: R_386_PC32	Device::addChild(Device*)
10001d35:	83 c4 10             	add    esp,0x10
10001d38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d3b:	8b 00                	mov    eax,DWORD PTR [eax]
10001d3d:	83 c0 08             	add    eax,0x8
10001d40:	8b 00                	mov    eax,DWORD PTR [eax]
10001d42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001d45:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001d4b:	52                   	push   edx
10001d4c:	6a 00                	push   0x0
10001d4e:	6a 01                	push   0x1
10001d50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001d53:	ff d0                	call   eax
10001d55:	83 c4 10             	add    esp,0x10
10001d58:	90                   	nop
10001d59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001d5c:	c9                   	leave  
10001d5d:	c3                   	ret    

10001d5e <PS2Port::deviceWrite(unsigned char)>:
10001d5e:	55                   	push   ebp
10001d5f:	89 e5                	mov    ebp,esp
10001d61:	83 ec 28             	sub    esp,0x28
10001d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001d67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001d73:	83 f8 01             	cmp    eax,0x1
10001d76:	75 1a                	jne    10001d92 <PS2Port::deviceWrite(unsigned char)+0x34>
10001d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001d81:	83 ec 08             	sub    esp,0x8
10001d84:	68 d4 00 00 00       	push   0xd4
10001d89:	50                   	push   eax
10001d8a:	e8 fc ff ff ff       	call   10001d8b <PS2Port::deviceWrite(unsigned char)+0x2d>	10001d8b: R_386_PC32	PS2::controllerWrite(unsigned char)
10001d8f:	83 c4 10             	add    esp,0x10
10001d92:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001d99:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10001d9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001da2:	89 c2                	mov    edx,eax
10001da4:	ec                   	in     al,dx
10001da5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001da8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001dab:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001dae:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001db2:	83 e0 02             	and    eax,0x2
10001db5:	85 c0                	test   eax,eax
10001db7:	74 29                	je     10001de2 <PS2Port::deviceWrite(unsigned char)+0x84>
10001db9:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001dbd:	83 e0 40             	and    eax,0x40
10001dc0:	85 c0                	test   eax,eax
10001dc2:	75 22                	jne    10001de6 <PS2Port::deviceWrite(unsigned char)+0x88>
10001dc4:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001dc7:	84 c0                	test   al,al
10001dc9:	78 1b                	js     10001de6 <PS2Port::deviceWrite(unsigned char)+0x88>
10001dcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001dce:	8d 50 01             	lea    edx,[eax+0x1]
10001dd1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001dd4:	3d 40 06 00 00       	cmp    eax,0x640
10001dd9:	0f 94 c0             	sete   al
10001ddc:	84 c0                	test   al,al
10001dde:	75 05                	jne    10001de5 <PS2Port::deviceWrite(unsigned char)+0x87>
10001de0:	eb b7                	jmp    10001d99 <PS2Port::deviceWrite(unsigned char)+0x3b>
10001de2:	90                   	nop
10001de3:	eb 01                	jmp    10001de6 <PS2Port::deviceWrite(unsigned char)+0x88>
10001de5:	90                   	nop
10001de6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001dea:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001df0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001df3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001df6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10001df9:	ee                   	out    dx,al
10001dfa:	b0 01                	mov    al,0x1
10001dfc:	c9                   	leave  
10001dfd:	c3                   	ret    

10001dfe <PS2Port::deviceRead()>:
10001dfe:	55                   	push   ebp
10001dff:	89 e5                	mov    ebp,esp
10001e01:	83 ec 08             	sub    esp,0x8
10001e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001e0d:	83 ec 0c             	sub    esp,0xc
10001e10:	50                   	push   eax
10001e11:	e8 fc ff ff ff       	call   10001e12 <PS2Port::deviceRead()+0x14>	10001e12: R_386_PC32	PS2::controllerRead()
10001e16:	83 c4 10             	add    esp,0x10
10001e19:	c9                   	leave  
10001e1a:	c3                   	ret    
10001e1b:	90                   	nop

10001e1c <sb16Demo(void*)>:
10001e1c:	55                   	push   ebp
10001e1d:	57                   	push   edi
10001e1e:	56                   	push   esi
10001e1f:	53                   	push   ebx
10001e20:	83 ec 2c             	sub    esp,0x2c
10001e23:	e8 fc ff ff ff       	call   10001e24 <sb16Demo(void*)+0x8>	10001e24: R_386_PC32	unlockScheduler()
10001e28:	83 ec 0c             	sub    esp,0xc
10001e2b:	6a 2c                	push   0x2c
10001e2d:	e8 fc ff ff ff       	call   10001e2e <sb16Demo(void*)+0x12>	10001e2e: R_386_PC32	operator new(unsigned long)
10001e32:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10001e39:	89 c3                	mov    ebx,eax
10001e3b:	6a 5a                	push   0x5a
10001e3d:	6a 08                	push   0x8
10001e3f:	68 22 56 00 00       	push   0x5622
10001e44:	50                   	push   eax
10001e45:	e8 fc ff ff ff       	call   10001e46 <sb16Demo(void*)+0x2a>	10001e46: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
10001e4a:	83 c4 14             	add    esp,0x14
10001e4d:	68 14 01 00 00       	push   0x114
10001e52:	e8 fc ff ff ff       	call   10001e53 <sb16Demo(void*)+0x37>	10001e53: R_386_PC32	operator new(unsigned long)
10001e57:	83 c4 0c             	add    esp,0xc
10001e5a:	89 c6                	mov    esi,eax
10001e5c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001e5e: R_386_32	kernelProcess
10001e62:	68 00 00 00 00       	push   0x0	10001e63: R_386_32	egFile
10001e67:	50                   	push   eax
10001e68:	e8 fc ff ff ff       	call   10001e69 <sb16Demo(void*)+0x4d>	10001e69: R_386_PC32	File::File(char const*, Process*)
10001e6d:	5f                   	pop    edi
10001e6e:	bf 35 00 00 00       	mov    edi,0x35
10001e73:	5d                   	pop    ebp
10001e74:	6a 01                	push   0x1
10001e76:	56                   	push   esi
10001e77:	e8 fc ff ff ff       	call   10001e78 <sb16Demo(void*)+0x5c>	10001e78: R_386_PC32	File::open(FileOpenMode)
10001e7c:	83 c4 10             	add    esp,0x10
10001e7f:	83 ec 0c             	sub    esp,0xc
10001e82:	8b 06                	mov    eax,DWORD PTR [esi]
10001e84:	8d 6c 24 28          	lea    ebp,[esp+0x28]
10001e88:	55                   	push   ebp
10001e89:	68 00 00 00 00       	push   0x0	10001e8a: R_386_32	buf
10001e8e:	6a 00                	push   0x0
10001e90:	68 00 10 00 00       	push   0x1000
10001e95:	56                   	push   esi
10001e96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001e99:	83 c4 20             	add    esp,0x20
10001e9c:	4f                   	dec    edi
10001e9d:	75 e0                	jne    10001e7f <sb16Demo(void*)+0x63>
10001e9f:	31 ff                	xor    edi,edi
10001ea1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001ea9:	8b 06                	mov    eax,DWORD PTR [esi]
10001eab:	83 ec 0c             	sub    esp,0xc
10001eae:	55                   	push   ebp
10001eaf:	68 00 00 00 00       	push   0x0	10001eb0: R_386_32	buf
10001eb4:	6a 00                	push   0x0
10001eb6:	68 00 10 00 00       	push   0x1000
10001ebb:	56                   	push   esi
10001ebc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001ebf:	83 c4 20             	add    esp,0x20
10001ec2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10001ec7:	74 7f                	je     10001f48 <sb16Demo(void*)+0x12c>
10001ec9:	85 c0                	test   eax,eax
10001ecb:	75 7b                	jne    10001f48 <sb16Demo(void*)+0x12c>
10001ecd:	e8 fc ff ff ff       	call   10001ece <sb16Demo(void*)+0xb2>	10001ece: R_386_PC32	lockScheduler()
10001ed2:	e8 fc ff ff ff       	call   10001ed3 <sb16Demo(void*)+0xb7>	10001ed3: R_386_PC32	schedule()
10001ed7:	e8 fc ff ff ff       	call   10001ed8 <sb16Demo(void*)+0xbc>	10001ed8: R_386_PC32	unlockScheduler()
10001edc:	83 ec 0c             	sub    esp,0xc
10001edf:	53                   	push   ebx
10001ee0:	e8 fc ff ff ff       	call   10001ee1 <sb16Demo(void*)+0xc5>	10001ee1: R_386_PC32	SoundChannel::getBufferUsed()
10001ee5:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001ee8:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001eec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001ef0:	e8 fc ff ff ff       	call   10001ef1 <sb16Demo(void*)+0xd5>	10001ef1: R_386_PC32	SoundChannel::getBufferSize()
10001ef5:	83 c4 10             	add    esp,0x10
10001ef8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10001efc:	7c 10                	jl     10001f0e <sb16Demo(void*)+0xf2>
10001efe:	51                   	push   ecx
10001eff:	51                   	push   ecx
10001f00:	6a 00                	push   0x0
10001f02:	6a 01                	push   0x1
10001f04:	e8 fc ff ff ff       	call   10001f05 <sb16Demo(void*)+0xe9>	10001f05: R_386_PC32	sleep(unsigned long long)
10001f09:	83 c4 10             	add    esp,0x10
10001f0c:	eb ce                	jmp    10001edc <sb16Demo(void*)+0xc0>
10001f0e:	52                   	push   edx
10001f0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10001f13:	68 00 00 00 00       	push   0x0	10001f14: R_386_32	buf
10001f18:	53                   	push   ebx
10001f19:	e8 fc ff ff ff       	call   10001f1a <sb16Demo(void*)+0xfe>	10001f1a: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10001f1e:	83 c4 10             	add    esp,0x10
10001f21:	89 f8                	mov    eax,edi
10001f23:	84 c0                	test   al,al
10001f25:	75 17                	jne    10001f3e <sb16Demo(void*)+0x122>
10001f27:	50                   	push   eax
10001f28:	50                   	push   eax
10001f29:	53                   	push   ebx
10001f2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10001f2e:	e8 fc ff ff ff       	call   10001f2f <sb16Demo(void*)+0x113>	10001f2f: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10001f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001f36:	e8 fc ff ff ff       	call   10001f37 <sb16Demo(void*)+0x11b>	10001f37: R_386_PC32	SoundChannel::play()
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	bf 01 00 00 00       	mov    edi,0x1
10001f43:	e9 59 ff ff ff       	jmp    10001ea1 <sb16Demo(void*)+0x85>
10001f48:	83 c4 2c             	add    esp,0x2c
10001f4b:	5b                   	pop    ebx
10001f4c:	5e                   	pop    esi
10001f4d:	5f                   	pop    edi
10001f4e:	5d                   	pop    ebp
10001f4f:	c3                   	ret    

10001f50 <SoundBlaster16::resetDSP()>:
10001f50:	53                   	push   ebx
10001f51:	b0 01                	mov    al,0x1
10001f53:	83 ec 10             	sub    esp,0x10
10001f56:	bb 26 02 00 00       	mov    ebx,0x226
10001f5b:	89 da                	mov    edx,ebx
10001f5d:	ee                   	out    dx,al
10001f5e:	6a 00                	push   0x0
10001f60:	68 c0 c6 2d 00       	push   0x2dc6c0
10001f65:	e8 fc ff ff ff       	call   10001f66 <SoundBlaster16::resetDSP()+0x16>	10001f66: R_386_PC32	nanoSleep(unsigned long long)
10001f6a:	31 c0                	xor    eax,eax
10001f6c:	89 da                	mov    edx,ebx
10001f6e:	ee                   	out    dx,al
10001f6f:	ba 2a 02 00 00       	mov    edx,0x22a
10001f74:	ec                   	in     al,dx
10001f75:	83 c4 10             	add    esp,0x10
10001f78:	3c aa                	cmp    al,0xaa
10001f7a:	75 25                	jne    10001fa1 <SoundBlaster16::resetDSP()+0x51>
10001f7c:	b0 e1                	mov    al,0xe1
10001f7e:	ba 2c 02 00 00       	mov    edx,0x22c
10001f83:	ee                   	out    dx,al
10001f84:	ba 2e 02 00 00       	mov    edx,0x22e
10001f89:	ec                   	in     al,dx
10001f8a:	84 c0                	test   al,al
10001f8c:	79 fb                	jns    10001f89 <SoundBlaster16::resetDSP()+0x39>
10001f8e:	ba 2a 02 00 00       	mov    edx,0x22a
10001f93:	ec                   	in     al,dx
10001f94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001f98:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10001f9e:	ec                   	in     al,dx
10001f9f:	eb 13                	jmp    10001fb4 <SoundBlaster16::resetDSP()+0x64>
10001fa1:	0f b6 c0             	movzx  eax,al
10001fa4:	51                   	push   ecx
10001fa5:	51                   	push   ecx
10001fa6:	50                   	push   eax
10001fa7:	68 00 00 00 00       	push   0x0	10001fa8: R_386_32	badVer
10001fac:	e8 fc ff ff ff       	call   10001fad <SoundBlaster16::resetDSP()+0x5d>	10001fad: R_386_PC32	kprintf(char const*, ...)
10001fb1:	83 c4 10             	add    esp,0x10
10001fb4:	83 c4 08             	add    esp,0x8
10001fb7:	5b                   	pop    ebx
10001fb8:	c3                   	ret    
10001fb9:	90                   	nop

10001fba <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10001fba:	53                   	push   ebx
10001fbb:	ba 2c 02 00 00       	mov    edx,0x22c
10001fc0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001fc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001fc8:	ec                   	in     al,dx
10001fc9:	84 c0                	test   al,al
10001fcb:	78 fb                	js     10001fc8 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10001fcd:	88 c8                	mov    al,cl
10001fcf:	89 da                	mov    edx,ebx
10001fd1:	ee                   	out    dx,al
10001fd2:	5b                   	pop    ebx
10001fd3:	c3                   	ret    

10001fd4 <SoundBlaster16::turnSpeakerOn(bool)>:
10001fd4:	53                   	push   ebx
10001fd5:	52                   	push   edx
10001fd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10001fda:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001fde:	80 fa 01             	cmp    dl,0x1
10001fe1:	89 14 24             	mov    DWORD PTR [esp],edx
10001fe4:	19 c0                	sbb    eax,eax
10001fe6:	83 e0 02             	and    eax,0x2
10001fe9:	05 d1 00 00 00       	add    eax,0xd1
10001fee:	50                   	push   eax
10001fef:	68 2c 02 00 00       	push   0x22c
10001ff4:	53                   	push   ebx
10001ff5:	e8 fc ff ff ff       	call   10001ff6 <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10001ff6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001ffa:	83 c4 0c             	add    esp,0xc
10001ffd:	8b 14 24             	mov    edx,DWORD PTR [esp]
10002000:	84 d2                	test   dl,dl
10002002:	75 23                	jne    10002027 <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10002004:	68 d0 00 00 00       	push   0xd0
10002009:	68 2c 02 00 00       	push   0x22c
1000200e:	53                   	push   ebx
1000200f:	e8 fc ff ff ff       	call   10002010 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10002010: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002014:	68 d3 00 00 00       	push   0xd3
10002019:	68 2c 02 00 00       	push   0x22c
1000201e:	53                   	push   ebx
1000201f:	e8 fc ff ff ff       	call   10002020 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10002020: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002024:	83 c4 18             	add    esp,0x18
10002027:	58                   	pop    eax
10002028:	5b                   	pop    ebx
10002029:	c3                   	ret    

1000202a <SoundBlaster16::SoundBlaster16()>:
1000202a:	55                   	push   ebp
1000202b:	89 e5                	mov    ebp,esp
1000202d:	83 ec 08             	sub    esp,0x8
10002030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002033:	83 ec 08             	sub    esp,0x8
10002036:	68 00 00 00 00       	push   0x0	10002037: R_386_32	sb16name
1000203b:	50                   	push   eax
1000203c:	e8 fc ff ff ff       	call   1000203d <SoundBlaster16::SoundBlaster16()+0x13>	1000203d: R_386_PC32	SoundDevice::SoundDevice(char const*)
10002041:	83 c4 10             	add    esp,0x10
10002044:	ba 08 00 00 00       	mov    edx,0x8	10002045: R_386_32	vtable for SoundBlaster16
10002049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000204c:	89 10                	mov    DWORD PTR [eax],edx
1000204e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002051:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
1000205b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000205e:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10002072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002075:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
1000207c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000207f:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10002086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002089:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10002090:	90                   	nop
10002091:	c9                   	leave  
10002092:	c3                   	ret    
10002093:	90                   	nop

10002094 <SoundBlaster16::handleIRQ()>:
10002094:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002098:	ba 2e 02 00 00       	mov    edx,0x22e
1000209d:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
100020a4:	74 17                	je     100020bd <SoundBlaster16::handleIRQ()+0x29>
100020a6:	b0 82                	mov    al,0x82
100020a8:	ba 24 02 00 00       	mov    edx,0x224
100020ad:	ee                   	out    dx,al
100020ae:	ba 25 02 00 00       	mov    edx,0x225
100020b3:	ec                   	in     al,dx
100020b4:	a8 02                	test   al,0x2
100020b6:	74 06                	je     100020be <SoundBlaster16::handleIRQ()+0x2a>
100020b8:	ba 2f 02 00 00       	mov    edx,0x22f
100020bd:	ec                   	in     al,dx
100020be:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
100020c2:	e9 c7 03 00 00       	jmp    1000248e <SoundBlaster16::onInterrupt()>

100020c7 <sb16Handler(regs*, void*)>:
100020c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100020cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100020cf:	eb c3                	jmp    10002094 <SoundBlaster16::handleIRQ()>
100020d1:	90                   	nop

100020d2 <SoundBlaster16::getNumHwChannels()>:
100020d2:	b8 01 00 00 00       	mov    eax,0x1
100020d7:	c3                   	ret    

100020d8 <SoundBlaster16::beginPlayback(int, int)>:
100020d8:	53                   	push   ebx
100020d9:	50                   	push   eax
100020da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100020de:	6a 01                	push   0x1
100020e0:	53                   	push   ebx
100020e1:	e8 fc ff ff ff       	call   100020e2 <SoundBlaster16::beginPlayback(int, int)+0xa>	100020e2: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100020e6:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
100020ed:	5a                   	pop    edx
100020ee:	19 c0                	sbb    eax,eax
100020f0:	59                   	pop    ecx
100020f1:	83 c0 02             	add    eax,0x2
100020f4:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
100020fb:	89 c1                	mov    ecx,eax
100020fd:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10002102:	99                   	cdq    
10002103:	f7 f9                	idiv   ecx
10002105:	89 04 24             	mov    DWORD PTR [esp],eax
10002108:	6a 40                	push   0x40
1000210a:	68 2c 02 00 00       	push   0x22c
1000210f:	53                   	push   ebx
10002110:	e8 fc ff ff ff       	call   10002111 <SoundBlaster16::beginPlayback(int, int)+0x39>	10002111: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002115:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
1000211a:	50                   	push   eax
1000211b:	68 2c 02 00 00       	push   0x22c
10002120:	53                   	push   ebx
10002121:	e8 fc ff ff ff       	call   10002122 <SoundBlaster16::beginPlayback(int, int)+0x4a>	10002122: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002126:	68 c0 00 00 00       	push   0xc0
1000212b:	68 2c 02 00 00       	push   0x22c
10002130:	53                   	push   ebx
10002131:	e8 fc ff ff ff       	call   10002132 <SoundBlaster16::beginPlayback(int, int)+0x5a>	10002132: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002136:	83 c4 24             	add    esp,0x24
10002139:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10002140:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10002147:	c1 e0 05             	shl    eax,0x5
1000214a:	c1 e2 04             	shl    edx,0x4
1000214d:	09 d0                	or     eax,edx
1000214f:	0f be c0             	movsx  eax,al
10002152:	50                   	push   eax
10002153:	68 2c 02 00 00       	push   0x22c
10002158:	53                   	push   ebx
10002159:	e8 fc ff ff ff       	call   1000215a <SoundBlaster16::beginPlayback(int, int)+0x82>	1000215a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000215e:	68 ff 00 00 00       	push   0xff
10002163:	68 2c 02 00 00       	push   0x22c
10002168:	53                   	push   ebx
10002169:	e8 fc ff ff ff       	call   1000216a <SoundBlaster16::beginPlayback(int, int)+0x92>	1000216a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000216e:	6a 1f                	push   0x1f
10002170:	68 2c 02 00 00       	push   0x22c
10002175:	53                   	push   ebx
10002176:	e8 fc ff ff ff       	call   10002177 <SoundBlaster16::beginPlayback(int, int)+0x9f>	10002177: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000217b:	83 c4 24             	add    esp,0x24
1000217e:	6a 48                	push   0x48
10002180:	68 2c 02 00 00       	push   0x22c
10002185:	53                   	push   ebx
10002186:	e8 fc ff ff ff       	call   10002187 <SoundBlaster16::beginPlayback(int, int)+0xaf>	10002187: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000218b:	68 ff 00 00 00       	push   0xff
10002190:	68 2c 02 00 00       	push   0x22c
10002195:	53                   	push   ebx
10002196:	e8 fc ff ff ff       	call   10002197 <SoundBlaster16::beginPlayback(int, int)+0xbf>	10002197: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000219b:	6a 1f                	push   0x1f
1000219d:	68 2c 02 00 00       	push   0x22c
100021a2:	53                   	push   ebx
100021a3:	e8 fc ff ff ff       	call   100021a4 <SoundBlaster16::beginPlayback(int, int)+0xcc>	100021a4: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021a8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
100021ac:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
100021b4:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
100021bc:	83 c4 28             	add    esp,0x28
100021bf:	5b                   	pop    ebx
100021c0:	e9 f5 fd ff ff       	jmp    10001fba <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
100021c5:	90                   	nop

100021c6 <SoundBlaster16::stopPlayback()>:
100021c6:	6a 00                	push   0x0
100021c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100021cc:	e8 fc ff ff ff       	call   100021cd <SoundBlaster16::stopPlayback()+0x7>	100021cd: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100021d1:	58                   	pop    eax
100021d2:	5a                   	pop    edx
100021d3:	c3                   	ret    

100021d4 <SoundBlaster16::open(int, int, void*)>:
100021d4:	56                   	push   esi
100021d5:	be 25 02 00 00       	mov    esi,0x225
100021da:	53                   	push   ebx
100021db:	83 ec 14             	sub    esp,0x14
100021de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100021e2:	c7 83 e8 01 00 00 22 56 00 00 	mov    DWORD PTR [ebx+0x1e8],0x5622
100021ec:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
100021f6:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
100021ff:	68 80 00 00 00       	push   0x80
10002204:	68 24 02 00 00       	push   0x224
10002209:	53                   	push   ebx
1000220a:	e8 fc ff ff ff       	call   1000220b <SoundBlaster16::open(int, int, void*)+0x37>	1000220b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000220f:	89 f2                	mov    edx,esi
10002211:	ec                   	in     al,dx
10002212:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10002216:	68 80 00 00 00       	push   0x80
1000221b:	68 24 02 00 00       	push   0x224
10002220:	53                   	push   ebx
10002221:	e8 fc ff ff ff       	call   10002222 <SoundBlaster16::open(int, int, void*)+0x4e>	10002222: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002226:	83 c4 18             	add    esp,0x18
10002229:	31 c0                	xor    eax,eax
1000222b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10002230:	0f 95 c0             	setne  al
10002233:	40                   	inc    eax
10002234:	50                   	push   eax
10002235:	68 25 02 00 00       	push   0x225
1000223a:	53                   	push   ebx
1000223b:	e8 fc ff ff ff       	call   1000223c <SoundBlaster16::open(int, int, void*)+0x68>	1000223c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002240:	68 80 00 00 00       	push   0x80
10002245:	68 24 02 00 00       	push   0x224
1000224a:	53                   	push   ebx
1000224b:	e8 fc ff ff ff       	call   1000224c <SoundBlaster16::open(int, int, void*)+0x78>	1000224c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002250:	89 f2                	mov    edx,esi
10002252:	ec                   	in     al,dx
10002253:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10002257:	83 c4 18             	add    esp,0x18
1000225a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
1000225e:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002262:	75 51                	jne    100022b5 <SoundBlaster16::open(int, int, void*)+0xe1>
10002264:	68 81 00 00 00       	push   0x81
10002269:	68 24 02 00 00       	push   0x224
1000226e:	53                   	push   ebx
1000226f:	e8 fc ff ff ff       	call   10002270 <SoundBlaster16::open(int, int, void*)+0x9c>	10002270: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002274:	89 f2                	mov    edx,esi
10002276:	ec                   	in     al,dx
10002277:	83 e0 0a             	and    eax,0xa
1000227a:	3c 01                	cmp    al,0x1
1000227c:	19 c0                	sbb    eax,eax
1000227e:	83 e0 62             	and    eax,0x62
10002281:	40                   	inc    eax
10002282:	89 04 24             	mov    DWORD PTR [esp],eax
10002285:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002287: R_386_32	isaDMAController
1000228b:	e8 fc ff ff ff       	call   1000228c <SoundBlaster16::open(int, int, void*)+0xb8>	1000228c: R_386_PC32	DMA::tryLockChannel(int)
10002290:	83 c4 10             	add    esp,0x10
10002293:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10002299:	85 c0                	test   eax,eax
1000229b:	75 3a                	jne    100022d7 <SoundBlaster16::open(int, int, void*)+0x103>
1000229d:	83 ec 0c             	sub    esp,0xc
100022a0:	68 00 00 00 00       	push   0x0	100022a1: R_386_32	nodma
100022a5:	e8 fc ff ff ff       	call   100022a6 <SoundBlaster16::open(int, int, void*)+0xd2>	100022a6: R_386_PC32	kprintf(char const*, ...)
100022aa:	83 c4 10             	add    esp,0x10
100022ad:	83 c8 ff             	or     eax,0xffffffff
100022b0:	e9 d3 01 00 00       	jmp    10002488 <SoundBlaster16::open(int, int, void*)+0x2b4>
100022b5:	56                   	push   esi
100022b6:	56                   	push   esi
100022b7:	6a 01                	push   0x1
100022b9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100022bb: R_386_32	isaDMAController
100022bf:	e8 fc ff ff ff       	call   100022c0 <SoundBlaster16::open(int, int, void*)+0xec>	100022c0: R_386_PC32	DMA::tryLockChannel(int)
100022c4:	83 c4 10             	add    esp,0x10
100022c7:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100022cd:	85 c0                	test   eax,eax
100022cf:	75 06                	jne    100022d7 <SoundBlaster16::open(int, int, void*)+0x103>
100022d1:	51                   	push   ecx
100022d2:	51                   	push   ecx
100022d3:	6a 03                	push   0x3
100022d5:	eb ae                	jmp    10002285 <SoundBlaster16::open(int, int, void*)+0xb1>
100022d7:	50                   	push   eax
100022d8:	50                   	push   eax
100022d9:	68 00 40 00 00       	push   0x4000
100022de:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100022e4:	e8 fc ff ff ff       	call   100022e5 <SoundBlaster16::open(int, int, void*)+0x111>	100022e5: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100022e9:	58                   	pop    eax
100022ea:	5a                   	pop    edx
100022eb:	6a 59                	push   0x59
100022ed:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100022f3:	e8 fc ff ff ff       	call   100022f4 <SoundBlaster16::open(int, int, void*)+0x120>	100022f4: R_386_PC32	DMAChannel::setMode(unsigned char)
100022f8:	59                   	pop    ecx
100022f9:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100022ff:	e8 fc ff ff ff       	call   10002300 <SoundBlaster16::open(int, int, void*)+0x12c>	10002300: R_386_PC32	DMAChannel::start()
10002304:	5e                   	pop    esi
10002305:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000230b:	e8 fc ff ff ff       	call   1000230c <SoundBlaster16::open(int, int, void*)+0x138>	1000230c: R_386_PC32	DMAChannel::getAddress()
10002310:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
10002316:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002319:	e8 fc ff ff ff       	call   1000231a <SoundBlaster16::open(int, int, void*)+0x146>	1000231a: R_386_PC32	SoundBlaster16::resetDSP()
1000231e:	58                   	pop    eax
1000231f:	5a                   	pop    edx
10002320:	6a 01                	push   0x1
10002322:	53                   	push   ebx
10002323:	e8 fc ff ff ff       	call   10002324 <SoundBlaster16::open(int, int, void*)+0x150>	10002324: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10002328:	83 c4 10             	add    esp,0x10
1000232b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
1000232f:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002333:	75 6f                	jne    100023a4 <SoundBlaster16::open(int, int, void*)+0x1d0>
10002335:	50                   	push   eax
10002336:	68 80 00 00 00       	push   0x80
1000233b:	68 24 02 00 00       	push   0x224
10002340:	53                   	push   ebx
10002341:	e8 fc ff ff ff       	call   10002342 <SoundBlaster16::open(int, int, void*)+0x16e>	10002342: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002346:	ba 25 02 00 00       	mov    edx,0x225
1000234b:	ec                   	in     al,dx
1000234c:	83 c4 10             	add    esp,0x10
1000234f:	3c 01                	cmp    al,0x1
10002351:	75 0f                	jne    10002362 <SoundBlaster16::open(int, int, void*)+0x18e>
10002353:	83 ec 0c             	sub    esp,0xc
10002356:	53                   	push   ebx
10002357:	6a 01                	push   0x1
10002359:	68 00 00 00 00       	push   0x0	1000235a: R_386_32	sb16Handler(regs*, void*)
1000235e:	6a 02                	push   0x2
10002360:	eb 6f                	jmp    100023d1 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002362:	3c 02                	cmp    al,0x2
10002364:	75 06                	jne    1000236c <SoundBlaster16::open(int, int, void*)+0x198>
10002366:	83 ec 0c             	sub    esp,0xc
10002369:	53                   	push   ebx
1000236a:	eb 5c                	jmp    100023c8 <SoundBlaster16::open(int, int, void*)+0x1f4>
1000236c:	3c 04                	cmp    al,0x4
1000236e:	75 0f                	jne    1000237f <SoundBlaster16::open(int, int, void*)+0x1ab>
10002370:	83 ec 0c             	sub    esp,0xc
10002373:	53                   	push   ebx
10002374:	6a 01                	push   0x1
10002376:	68 00 00 00 00       	push   0x0	10002377: R_386_32	sb16Handler(regs*, void*)
1000237b:	6a 07                	push   0x7
1000237d:	eb 52                	jmp    100023d1 <SoundBlaster16::open(int, int, void*)+0x1fd>
1000237f:	3c 08                	cmp    al,0x8
10002381:	75 0f                	jne    10002392 <SoundBlaster16::open(int, int, void*)+0x1be>
10002383:	83 ec 0c             	sub    esp,0xc
10002386:	53                   	push   ebx
10002387:	6a 01                	push   0x1
10002389:	68 00 00 00 00       	push   0x0	1000238a: R_386_32	sb16Handler(regs*, void*)
1000238e:	6a 0a                	push   0xa
10002390:	eb 3f                	jmp    100023d1 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002392:	83 ec 0c             	sub    esp,0xc
10002395:	68 00 00 00 00       	push   0x0	10002396: R_386_32	noirq
1000239a:	e8 fc ff ff ff       	call   1000239b <SoundBlaster16::open(int, int, void*)+0x1c7>	1000239b: R_386_PC32	panic(char const*)
1000239f:	83 c4 10             	add    esp,0x10
100023a2:	eb 36                	jmp    100023da <SoundBlaster16::open(int, int, void*)+0x206>
100023a4:	50                   	push   eax
100023a5:	68 80 00 00 00       	push   0x80
100023aa:	68 24 02 00 00       	push   0x224
100023af:	53                   	push   ebx
100023b0:	e8 fc ff ff ff       	call   100023b1 <SoundBlaster16::open(int, int, void*)+0x1dd>	100023b1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100023b5:	83 c4 0c             	add    esp,0xc
100023b8:	6a 02                	push   0x2
100023ba:	68 25 02 00 00       	push   0x225
100023bf:	53                   	push   ebx
100023c0:	e8 fc ff ff ff       	call   100023c1 <SoundBlaster16::open(int, int, void*)+0x1ed>	100023c1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100023c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
100023c8:	6a 01                	push   0x1
100023ca:	68 00 00 00 00       	push   0x0	100023cb: R_386_32	sb16Handler(regs*, void*)
100023cf:	6a 05                	push   0x5
100023d1:	53                   	push   ebx
100023d2:	e8 fc ff ff ff       	call   100023d3 <SoundBlaster16::open(int, int, void*)+0x1ff>	100023d3: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100023d7:	83 c4 20             	add    esp,0x20
100023da:	56                   	push   esi
100023db:	68 81 00 00 00       	push   0x81
100023e0:	68 24 02 00 00       	push   0x224
100023e5:	53                   	push   ebx
100023e6:	e8 fc ff ff ff       	call   100023e7 <SoundBlaster16::open(int, int, void*)+0x213>	100023e7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100023eb:	ba 25 02 00 00       	mov    edx,0x225
100023f0:	ec                   	in     al,dx
100023f1:	83 c4 0c             	add    esp,0xc
100023f4:	89 c6                	mov    esi,eax
100023f6:	68 81 00 00 00       	push   0x81
100023fb:	68 24 02 00 00       	push   0x224
10002400:	53                   	push   ebx
10002401:	e8 fc ff ff ff       	call   10002402 <SoundBlaster16::open(int, int, void*)+0x22e>	10002402: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002406:	58                   	pop    eax
10002407:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000240d:	e8 fc ff ff ff       	call   1000240e <SoundBlaster16::open(int, int, void*)+0x23a>	1000240e: R_386_PC32	DMAChannel::getChannelNum()
10002412:	83 c4 10             	add    esp,0x10
10002415:	48                   	dec    eax
10002416:	75 0c                	jne    10002424 <SoundBlaster16::open(int, int, void*)+0x250>
10002418:	81 e6 f0 00 00 00    	and    esi,0xf0
1000241e:	51                   	push   ecx
1000241f:	83 ce 02             	or     esi,0x2
10002422:	eb 20                	jmp    10002444 <SoundBlaster16::open(int, int, void*)+0x270>
10002424:	83 ec 0c             	sub    esp,0xc
10002427:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000242d:	e8 fc ff ff ff       	call   1000242e <SoundBlaster16::open(int, int, void*)+0x25a>	1000242e: R_386_PC32	DMAChannel::getChannelNum()
10002432:	83 c4 10             	add    esp,0x10
10002435:	83 f8 03             	cmp    eax,0x3
10002438:	75 18                	jne    10002452 <SoundBlaster16::open(int, int, void*)+0x27e>
1000243a:	81 e6 f0 00 00 00    	and    esi,0xf0
10002440:	52                   	push   edx
10002441:	83 ce 08             	or     esi,0x8
10002444:	56                   	push   esi
10002445:	68 25 02 00 00       	push   0x225
1000244a:	53                   	push   ebx
1000244b:	e8 fc ff ff ff       	call   1000244c <SoundBlaster16::open(int, int, void*)+0x278>	1000244c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002450:	eb 0d                	jmp    1000245f <SoundBlaster16::open(int, int, void*)+0x28b>
10002452:	83 ec 0c             	sub    esp,0xc
10002455:	68 00 00 00 00       	push   0x0	10002456: R_386_32	baddma
1000245a:	e8 fc ff ff ff       	call   1000245b <SoundBlaster16::open(int, int, void*)+0x287>	1000245b: R_386_PC32	panic(char const*)
1000245f:	83 c4 10             	add    esp,0x10
10002462:	50                   	push   eax
10002463:	6a 22                	push   0x22
10002465:	68 24 02 00 00       	push   0x224
1000246a:	53                   	push   ebx
1000246b:	e8 fc ff ff ff       	call   1000246c <SoundBlaster16::open(int, int, void*)+0x298>	1000246c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002470:	83 c4 0c             	add    esp,0xc
10002473:	68 ff 00 00 00       	push   0xff
10002478:	68 24 02 00 00       	push   0x224
1000247d:	53                   	push   ebx
1000247e:	e8 fc ff ff ff       	call   1000247f <SoundBlaster16::open(int, int, void*)+0x2ab>	1000247f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002483:	83 c4 10             	add    esp,0x10
10002486:	31 c0                	xor    eax,eax
10002488:	83 c4 14             	add    esp,0x14
1000248b:	5b                   	pop    ebx
1000248c:	5e                   	pop    esi
1000248d:	c3                   	ret    

1000248e <SoundBlaster16::onInterrupt()>:
1000248e:	56                   	push   esi
1000248f:	53                   	push   ebx
10002490:	53                   	push   ebx
10002491:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002495:	68 00 00 00 00       	push   0x0	10002496: R_386_32	outputBuffer
1000249a:	68 00 00 00 00       	push   0x0	1000249b: R_386_32	tempBuffer
1000249f:	68 00 20 00 00       	push   0x2000
100024a4:	56                   	push   esi
100024a5:	e8 fc ff ff ff       	call   100024a6 <SoundBlaster16::onInterrupt()+0x18>	100024a6: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
100024aa:	83 c4 10             	add    esp,0x10
100024ad:	89 c3                	mov    ebx,eax
100024af:	80 3d df 41 00 10 01 	cmp    BYTE PTR ds:0x100041df,0x1	100024b1: R_386_32	.data
100024b6:	53                   	push   ebx
100024b7:	19 c0                	sbb    eax,eax
100024b9:	25 00 20 00 00       	and    eax,0x2000
100024be:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
100024c4:	50                   	push   eax
100024c5:	68 00 00 00 00       	push   0x0	100024c6: R_386_32	outputBuffer
100024ca:	56                   	push   esi
100024cb:	e8 fc ff ff ff       	call   100024cc <SoundBlaster16::onInterrupt()+0x3e>	100024cc: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
100024d0:	83 c4 10             	add    esp,0x10
100024d3:	85 db                	test   ebx,ebx
100024d5:	75 0c                	jne    100024e3 <SoundBlaster16::onInterrupt()+0x55>
100024d7:	51                   	push   ecx
100024d8:	51                   	push   ecx
100024d9:	6a 00                	push   0x0
100024db:	56                   	push   esi
100024dc:	e8 fc ff ff ff       	call   100024dd <SoundBlaster16::onInterrupt()+0x4f>	100024dd: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100024e1:	eb 3e                	jmp    10002521 <SoundBlaster16::onInterrupt()+0x93>
100024e3:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
100024e9:	7f 39                	jg     10002524 <SoundBlaster16::onInterrupt()+0x96>
100024eb:	52                   	push   edx
100024ec:	6a 24                	push   0x24
100024ee:	68 2c 02 00 00       	push   0x22c
100024f3:	56                   	push   esi
100024f4:	e8 fc ff ff ff       	call   100024f5 <SoundBlaster16::onInterrupt()+0x67>	100024f5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100024f9:	83 c4 0c             	add    esp,0xc
100024fc:	8d 43 ff             	lea    eax,[ebx-0x1]
100024ff:	4b                   	dec    ebx
10002500:	0f b6 c0             	movzx  eax,al
10002503:	0f b6 df             	movzx  ebx,bh
10002506:	50                   	push   eax
10002507:	68 2c 02 00 00       	push   0x22c
1000250c:	56                   	push   esi
1000250d:	e8 fc ff ff ff       	call   1000250e <SoundBlaster16::onInterrupt()+0x80>	1000250e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002512:	83 c4 0c             	add    esp,0xc
10002515:	53                   	push   ebx
10002516:	68 2c 02 00 00       	push   0x22c
1000251b:	56                   	push   esi
1000251c:	e8 fc ff ff ff       	call   1000251d <SoundBlaster16::onInterrupt()+0x8f>	1000251d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002521:	83 c4 10             	add    esp,0x10
10002524:	80 35 df 41 00 10 01 	xor    BYTE PTR ds:0x100041df,0x1	10002526: R_386_32	.data
1000252b:	58                   	pop    eax
1000252c:	5b                   	pop    ebx
1000252d:	5e                   	pop    esi
1000252e:	c3                   	ret    
1000252f:	90                   	nop

10002530 <SoundBlaster16::close(int, int, void*)>:
10002530:	83 ec 0c             	sub    esp,0xc
10002533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002537:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
1000253d:	85 c0                	test   eax,eax
1000253f:	74 11                	je     10002552 <SoundBlaster16::close(int, int, void*)+0x22>
10002541:	52                   	push   edx
10002542:	52                   	push   edx
10002543:	50                   	push   eax
10002544:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002546: R_386_32	isaDMAController
1000254a:	e8 fc ff ff ff       	call   1000254b <SoundBlaster16::close(int, int, void*)+0x1b>	1000254b: R_386_PC32	DMA::unlockChannel(DMAChannel*)
1000254f:	83 c4 10             	add    esp,0x10
10002552:	31 c0                	xor    eax,eax
10002554:	83 c4 0c             	add    esp,0xc
10002557:	c3                   	ret    

10002558 <PHYS_RAM_TABLE_SIZE>:
10002558:	13 05 00 00                                         ....

1000255c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000255c:	24 05 00 00                                         $...

10002560 <PHYS_RAM_TABLE>:
10002560:	00 06 00 00                                         ....

10002564 <PHYS_DMA_MEMORY_1>:
10002564:	00 00 01 00                                         ....

10002568 <PHYS_PHYS_PAGE_BITMAP>:
10002568:	00 00 02 00                                         ....

1000256c <PHYS_VIRT_PAGE_BITMAP>:
1000256c:	00 00 04 00                                         ....

10002570 <PHYS_DMA_MEMORY_2>:
10002570:	00 00 06 00                                         ....

10002574 <PHYS_ALLOCED_VIRT_PAGES>:
10002574:	00 00 10 00                                         ....

10002578 <PHYS_KRNL_PAGE_DIRECTORY>:
10002578:	00 10 00 00                                         ....

1000257c <VIRT_KERNEL_BASE>:
1000257c:	00 00 00 c0                                         ....

10002580 <VIRT_LOW_MEGS>:
10002580:	00 00 00 c2                                         ....

10002584 <VIRT_CPU_SPECIFIC>:
10002584:	00 00 40 c2                                         ..@.

10002588 <VIRT_RECURSIVE_SPOT_1>:
10002588:	00 00 80 c2                                         ....

1000258c <VIRT_RECURSIVE_SPOT_2>:
1000258c:	00 00 c0 c2                                         ....

10002590 <VIRT_DMA_MEMORY_1>:
10002590:	00 00 01 c2                                         ....

10002594 <SIZE_DMA_MEMORY_1>:
10002594:	00 00 01 00                                         ....

10002598 <VIRT_DMA_MEMORY_2>:
10002598:	00 00 06 c2                                         ....

1000259c <SIZE_DMA_MEMORY_2>:
1000259c:	00 00 02 00                                         ....

100025a0 <VIRT_KRNL_PAGE_DIRECTORY>:
100025a0:	00 10 00 c2                                         ....

100025a4 <VIRT_PHYS_PAGE_BITMAP>:
100025a4:	00 00 02 c2                                         ....

100025a8 <SIZE_PHYS_PAGE_BITMAP>:
100025a8:	00 00 02 00                                         ....

100025ac <VIRT_VIRT_PAGE_BITMAP>:
100025ac:	00 00 04 c2                                         ....

100025b0 <SIZE_VIRT_PAGE_BITMAP>:
100025b0:	00 80 00 00                                         ....

100025b4 <VIRT_RAM_TABLE>:
100025b4:	00 06 00 c2                                         ....

100025b8 <VIRT_RAM_TABLE_SIZE>:
100025b8:	13 05 00 c2                                         ....

100025bc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100025bc:	24 05 00 c2                                         $...

100025c0 <SIZE_APP_STACK_USER>:
100025c0:	00 00 18 00                                         ....

100025c4 <SIZE_APP_STACK_KRNL>:
100025c4:	00 00 08 00                                         ....

100025c8 <SIZE_APP_STACK_TOTAL>:
100025c8:	00 00 20 00                                         .. .

100025cc <VIRT_APP_DATA>:
100025cc:	00 00 00 10                                         ....

100025d0 <VIRT_APP_STACK_USER_TOP>:
100025d0:	00 00 00 02                                         ....

100025d4 <VIRT_APP_STACK_KRNL_TOP>:
100025d4:	00 00 e8 01                                         ....

100025d8 <VIRT_HEAP_MIN>:
100025d8:	00 00 00 c8                                         ....

100025dc <VIRT_HEAP_MAX>:
100025dc:	ff ff ff ef                                         ....

100025e0 <VIRT_SBRK_MIN>:
100025e0:	00 00 00 f0                                         ....

100025e4 <VIRT_SBRK_MAX>:
100025e4:	00 00 c0 ff                                         ....

100025e8 <VIRT_ALLOCED_VIRT_PAGES>:
100025e8:	00 00 10 c2                                         ....

100025ec <VIRT_ACPI_DRIVER>:
100025ec:	00 40 48 c2                                         .@H.

100025f0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100025f0:	96 00 00 00                                         ....

100025f4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100025f4:	2c 01 00 00 73 74 72 69 6e 67 20 74 65 73 74 2e     ,...string test.
10002604:	0a 00 66 90                                         ..f.

10002608 <vtable for ISA>:
	...
	10002610: R_386_32	ISA::~ISA()
	10002614: R_386_32	ISA::~ISA()
	10002618: R_386_32	ISA::open(int, int, void*)
	1000261c: R_386_32	ISA::close(int, int, void*)
	10002620: R_386_32	Device::hibernate()
	10002624: R_386_32	Device::wake()
	10002628: R_386_32	ISA::detect()
	1000262c: R_386_32	Device::disableLegacy()
	10002630: R_386_32	Device::powerSaving(PowerSavingLevel)

10002634 <PHYS_RAM_TABLE_SIZE>:
10002634:	13 05 00 00                                         ....

10002638 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002638:	24 05 00 00                                         $...

1000263c <PHYS_RAM_TABLE>:
1000263c:	00 06 00 00                                         ....

10002640 <PHYS_DMA_MEMORY_1>:
10002640:	00 00 01 00                                         ....

10002644 <PHYS_PHYS_PAGE_BITMAP>:
10002644:	00 00 02 00                                         ....

10002648 <PHYS_VIRT_PAGE_BITMAP>:
10002648:	00 00 04 00                                         ....

1000264c <PHYS_DMA_MEMORY_2>:
1000264c:	00 00 06 00                                         ....

10002650 <PHYS_ALLOCED_VIRT_PAGES>:
10002650:	00 00 10 00                                         ....

10002654 <PHYS_KRNL_PAGE_DIRECTORY>:
10002654:	00 10 00 00                                         ....

10002658 <VIRT_KERNEL_BASE>:
10002658:	00 00 00 c0                                         ....

1000265c <VIRT_LOW_MEGS>:
1000265c:	00 00 00 c2                                         ....

10002660 <VIRT_CPU_SPECIFIC>:
10002660:	00 00 40 c2                                         ..@.

10002664 <VIRT_RECURSIVE_SPOT_1>:
10002664:	00 00 80 c2                                         ....

10002668 <VIRT_RECURSIVE_SPOT_2>:
10002668:	00 00 c0 c2                                         ....

1000266c <VIRT_DMA_MEMORY_1>:
1000266c:	00 00 01 c2                                         ....

10002670 <SIZE_DMA_MEMORY_1>:
10002670:	00 00 01 00                                         ....

10002674 <VIRT_DMA_MEMORY_2>:
10002674:	00 00 06 c2                                         ....

10002678 <SIZE_DMA_MEMORY_2>:
10002678:	00 00 02 00                                         ....

1000267c <VIRT_KRNL_PAGE_DIRECTORY>:
1000267c:	00 10 00 c2                                         ....

10002680 <VIRT_PHYS_PAGE_BITMAP>:
10002680:	00 00 02 c2                                         ....

10002684 <SIZE_PHYS_PAGE_BITMAP>:
10002684:	00 00 02 00                                         ....

10002688 <VIRT_VIRT_PAGE_BITMAP>:
10002688:	00 00 04 c2                                         ....

1000268c <SIZE_VIRT_PAGE_BITMAP>:
1000268c:	00 80 00 00                                         ....

10002690 <VIRT_RAM_TABLE>:
10002690:	00 06 00 c2                                         ....

10002694 <VIRT_RAM_TABLE_SIZE>:
10002694:	13 05 00 c2                                         ....

10002698 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002698:	24 05 00 c2                                         $...

1000269c <SIZE_APP_STACK_USER>:
1000269c:	00 00 18 00                                         ....

100026a0 <SIZE_APP_STACK_KRNL>:
100026a0:	00 00 08 00                                         ....

100026a4 <SIZE_APP_STACK_TOTAL>:
100026a4:	00 00 20 00                                         .. .

100026a8 <VIRT_APP_DATA>:
100026a8:	00 00 00 10                                         ....

100026ac <VIRT_APP_STACK_USER_TOP>:
100026ac:	00 00 00 02                                         ....

100026b0 <VIRT_APP_STACK_KRNL_TOP>:
100026b0:	00 00 e8 01                                         ....

100026b4 <VIRT_HEAP_MIN>:
100026b4:	00 00 00 c8                                         ....

100026b8 <VIRT_HEAP_MAX>:
100026b8:	ff ff ff ef                                         ....

100026bc <VIRT_SBRK_MIN>:
100026bc:	00 00 00 f0                                         ....

100026c0 <VIRT_SBRK_MAX>:
100026c0:	00 00 c0 ff                                         ....

100026c4 <VIRT_ALLOCED_VIRT_PAGES>:
100026c4:	00 00 10 c2                                         ....

100026c8 <VIRT_ACPI_DRIVER>:
100026c8:	00 40 48 c2                                         .@H.

100026cc <TERMINAL_KEYBUFFER_IN_SIZE>:
100026cc:	96 00 00 00                                         ....

100026d0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100026d0:	2c 01 00 00                                         ,...

100026d4 <CSWTCH.8>:
100026d4:	00 02 04 06 c0 c4 c8 cc                             ........

100026dc <CSWTCH.9>:
100026dc:	01 03 05 07 c2 c6 ca ce                             ........

100026e4 <CSWTCH.10>:
100026e4:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
100026f4:	61 6e 67 65 2e 0a 00 90                             ange....

100026fc <vtable for DMA>:
	...
	10002704: R_386_32	DMA::~DMA()
	10002708: R_386_32	DMA::~DMA()
	1000270c: R_386_32	DMA::open(int, int, void*)
	10002710: R_386_32	DMA::close(int, int, void*)
	10002714: R_386_32	Device::hibernate()
	10002718: R_386_32	Device::wake()
	1000271c: R_386_32	Device::detect()
	10002720: R_386_32	Device::disableLegacy()
	10002724: R_386_32	Device::powerSaving(PowerSavingLevel)

10002728 <PHYS_RAM_TABLE_SIZE>:
10002728:	13 05 00 00                                         ....

1000272c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000272c:	24 05 00 00                                         $...

10002730 <PHYS_RAM_TABLE>:
10002730:	00 06 00 00                                         ....

10002734 <PHYS_DMA_MEMORY_1>:
10002734:	00 00 01 00                                         ....

10002738 <PHYS_PHYS_PAGE_BITMAP>:
10002738:	00 00 02 00                                         ....

1000273c <PHYS_VIRT_PAGE_BITMAP>:
1000273c:	00 00 04 00                                         ....

10002740 <PHYS_DMA_MEMORY_2>:
10002740:	00 00 06 00                                         ....

10002744 <PHYS_ALLOCED_VIRT_PAGES>:
10002744:	00 00 10 00                                         ....

10002748 <PHYS_KRNL_PAGE_DIRECTORY>:
10002748:	00 10 00 00                                         ....

1000274c <VIRT_KERNEL_BASE>:
1000274c:	00 00 00 c0                                         ....

10002750 <VIRT_LOW_MEGS>:
10002750:	00 00 00 c2                                         ....

10002754 <VIRT_CPU_SPECIFIC>:
10002754:	00 00 40 c2                                         ..@.

10002758 <VIRT_RECURSIVE_SPOT_1>:
10002758:	00 00 80 c2                                         ....

1000275c <VIRT_RECURSIVE_SPOT_2>:
1000275c:	00 00 c0 c2                                         ....

10002760 <VIRT_DMA_MEMORY_1>:
10002760:	00 00 01 c2                                         ....

10002764 <SIZE_DMA_MEMORY_1>:
10002764:	00 00 01 00                                         ....

10002768 <VIRT_DMA_MEMORY_2>:
10002768:	00 00 06 c2                                         ....

1000276c <SIZE_DMA_MEMORY_2>:
1000276c:	00 00 02 00                                         ....

10002770 <VIRT_KRNL_PAGE_DIRECTORY>:
10002770:	00 10 00 c2                                         ....

10002774 <VIRT_PHYS_PAGE_BITMAP>:
10002774:	00 00 02 c2                                         ....

10002778 <SIZE_PHYS_PAGE_BITMAP>:
10002778:	00 00 02 00                                         ....

1000277c <VIRT_VIRT_PAGE_BITMAP>:
1000277c:	00 00 04 c2                                         ....

10002780 <SIZE_VIRT_PAGE_BITMAP>:
10002780:	00 80 00 00                                         ....

10002784 <VIRT_RAM_TABLE>:
10002784:	00 06 00 c2                                         ....

10002788 <VIRT_RAM_TABLE_SIZE>:
10002788:	13 05 00 c2                                         ....

1000278c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000278c:	24 05 00 c2                                         $...

10002790 <SIZE_APP_STACK_USER>:
10002790:	00 00 18 00                                         ....

10002794 <SIZE_APP_STACK_KRNL>:
10002794:	00 00 08 00                                         ....

10002798 <SIZE_APP_STACK_TOTAL>:
10002798:	00 00 20 00                                         .. .

1000279c <VIRT_APP_DATA>:
1000279c:	00 00 00 10                                         ....

100027a0 <VIRT_APP_STACK_USER_TOP>:
100027a0:	00 00 00 02                                         ....

100027a4 <VIRT_APP_STACK_KRNL_TOP>:
100027a4:	00 00 e8 01                                         ....

100027a8 <VIRT_HEAP_MIN>:
100027a8:	00 00 00 c8                                         ....

100027ac <VIRT_HEAP_MAX>:
100027ac:	ff ff ff ef                                         ....

100027b0 <VIRT_SBRK_MIN>:
100027b0:	00 00 00 f0                                         ....

100027b4 <VIRT_SBRK_MAX>:
100027b4:	00 00 c0 ff                                         ....

100027b8 <VIRT_ALLOCED_VIRT_PAGES>:
100027b8:	00 00 10 c2                                         ....

100027bc <VIRT_ACPI_DRIVER>:
100027bc:	00 40 48 c2                                         .@H.

100027c0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100027c0:	96 00 00 00                                         ....

100027c4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100027c4:	2c 01 00 00                                         ,...

100027c8 <vtable for Beep>:
	...
	100027d0: R_386_32	Beep::~Beep()
	100027d4: R_386_32	Beep::~Beep()
	100027d8: R_386_32	Beep::open(int, int, void*)
	100027dc: R_386_32	Beep::close(int, int, void*)
	100027e0: R_386_32	Device::hibernate()
	100027e4: R_386_32	Device::wake()
	100027e8: R_386_32	Device::detect()
	100027ec: R_386_32	Device::disableLegacy()
	100027f0: R_386_32	Device::powerSaving(PowerSavingLevel)
	100027f4: R_386_32	Beep::start(int)

100027f8 <PHYS_RAM_TABLE_SIZE>:
100027f8:	13 05 00 00                                         ....

100027fc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100027fc:	24 05 00 00                                         $...

10002800 <PHYS_RAM_TABLE>:
10002800:	00 06 00 00                                         ....

10002804 <PHYS_DMA_MEMORY_1>:
10002804:	00 00 01 00                                         ....

10002808 <PHYS_PHYS_PAGE_BITMAP>:
10002808:	00 00 02 00                                         ....

1000280c <PHYS_VIRT_PAGE_BITMAP>:
1000280c:	00 00 04 00                                         ....

10002810 <PHYS_DMA_MEMORY_2>:
10002810:	00 00 06 00                                         ....

10002814 <PHYS_ALLOCED_VIRT_PAGES>:
10002814:	00 00 10 00                                         ....

10002818 <PHYS_KRNL_PAGE_DIRECTORY>:
10002818:	00 10 00 00                                         ....

1000281c <VIRT_KERNEL_BASE>:
1000281c:	00 00 00 c0                                         ....

10002820 <VIRT_LOW_MEGS>:
10002820:	00 00 00 c2                                         ....

10002824 <VIRT_CPU_SPECIFIC>:
10002824:	00 00 40 c2                                         ..@.

10002828 <VIRT_RECURSIVE_SPOT_1>:
10002828:	00 00 80 c2                                         ....

1000282c <VIRT_RECURSIVE_SPOT_2>:
1000282c:	00 00 c0 c2                                         ....

10002830 <VIRT_DMA_MEMORY_1>:
10002830:	00 00 01 c2                                         ....

10002834 <SIZE_DMA_MEMORY_1>:
10002834:	00 00 01 00                                         ....

10002838 <VIRT_DMA_MEMORY_2>:
10002838:	00 00 06 c2                                         ....

1000283c <SIZE_DMA_MEMORY_2>:
1000283c:	00 00 02 00                                         ....

10002840 <VIRT_KRNL_PAGE_DIRECTORY>:
10002840:	00 10 00 c2                                         ....

10002844 <VIRT_PHYS_PAGE_BITMAP>:
10002844:	00 00 02 c2                                         ....

10002848 <SIZE_PHYS_PAGE_BITMAP>:
10002848:	00 00 02 00                                         ....

1000284c <VIRT_VIRT_PAGE_BITMAP>:
1000284c:	00 00 04 c2                                         ....

10002850 <SIZE_VIRT_PAGE_BITMAP>:
10002850:	00 80 00 00                                         ....

10002854 <VIRT_RAM_TABLE>:
10002854:	00 06 00 c2                                         ....

10002858 <VIRT_RAM_TABLE_SIZE>:
10002858:	13 05 00 c2                                         ....

1000285c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000285c:	24 05 00 c2                                         $...

10002860 <SIZE_APP_STACK_USER>:
10002860:	00 00 18 00                                         ....

10002864 <SIZE_APP_STACK_KRNL>:
10002864:	00 00 08 00                                         ....

10002868 <SIZE_APP_STACK_TOTAL>:
10002868:	00 00 20 00                                         .. .

1000286c <VIRT_APP_DATA>:
1000286c:	00 00 00 10                                         ....

10002870 <VIRT_APP_STACK_USER_TOP>:
10002870:	00 00 00 02                                         ....

10002874 <VIRT_APP_STACK_KRNL_TOP>:
10002874:	00 00 e8 01                                         ....

10002878 <VIRT_HEAP_MIN>:
10002878:	00 00 00 c8                                         ....

1000287c <VIRT_HEAP_MAX>:
1000287c:	ff ff ff ef                                         ....

10002880 <VIRT_SBRK_MIN>:
10002880:	00 00 00 f0                                         ....

10002884 <VIRT_SBRK_MAX>:
10002884:	00 00 c0 ff                                         ....

10002888 <VIRT_ALLOCED_VIRT_PAGES>:
10002888:	00 00 10 c2                                         ....

1000288c <VIRT_ACPI_DRIVER>:
1000288c:	00 40 48 c2                                         .@H.

10002890 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002890:	96 00 00 00                                         ....

10002894 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002894:	2c 01 00 00                                         ,...

10002898 <vtable for PS2>:
	...
	100028a0: R_386_32	PS2::~PS2()
	100028a4: R_386_32	PS2::~PS2()
	100028a8: R_386_32	PS2::open(int, int, void*)
	100028ac: R_386_32	PS2::close(int, int, void*)
	100028b0: R_386_32	Device::hibernate()
	100028b4: R_386_32	Device::wake()
	100028b8: R_386_32	PS2::detect()
	100028bc: R_386_32	Device::disableLegacy()
	100028c0: R_386_32	Device::powerSaving(PowerSavingLevel)
100028c4:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
100028d4:	66 90 66 90 66 90 66 90 66 90 66 90                 f.f.f.f.f.f.

100028e0 <PHYS_RAM_TABLE_SIZE>:
100028e0:	13 05 00 00                                         ....

100028e4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100028e4:	24 05 00 00                                         $...

100028e8 <PHYS_RAM_TABLE>:
100028e8:	00 06 00 00                                         ....

100028ec <PHYS_DMA_MEMORY_1>:
100028ec:	00 00 01 00                                         ....

100028f0 <PHYS_PHYS_PAGE_BITMAP>:
100028f0:	00 00 02 00                                         ....

100028f4 <PHYS_VIRT_PAGE_BITMAP>:
100028f4:	00 00 04 00                                         ....

100028f8 <PHYS_DMA_MEMORY_2>:
100028f8:	00 00 06 00                                         ....

100028fc <PHYS_ALLOCED_VIRT_PAGES>:
100028fc:	00 00 10 00                                         ....

10002900 <PHYS_KRNL_PAGE_DIRECTORY>:
10002900:	00 10 00 00                                         ....

10002904 <VIRT_KERNEL_BASE>:
10002904:	00 00 00 c0                                         ....

10002908 <VIRT_LOW_MEGS>:
10002908:	00 00 00 c2                                         ....

1000290c <VIRT_CPU_SPECIFIC>:
1000290c:	00 00 40 c2                                         ..@.

10002910 <VIRT_RECURSIVE_SPOT_1>:
10002910:	00 00 80 c2                                         ....

10002914 <VIRT_RECURSIVE_SPOT_2>:
10002914:	00 00 c0 c2                                         ....

10002918 <VIRT_DMA_MEMORY_1>:
10002918:	00 00 01 c2                                         ....

1000291c <SIZE_DMA_MEMORY_1>:
1000291c:	00 00 01 00                                         ....

10002920 <VIRT_DMA_MEMORY_2>:
10002920:	00 00 06 c2                                         ....

10002924 <SIZE_DMA_MEMORY_2>:
10002924:	00 00 02 00                                         ....

10002928 <VIRT_KRNL_PAGE_DIRECTORY>:
10002928:	00 10 00 c2                                         ....

1000292c <VIRT_PHYS_PAGE_BITMAP>:
1000292c:	00 00 02 c2                                         ....

10002930 <SIZE_PHYS_PAGE_BITMAP>:
10002930:	00 00 02 00                                         ....

10002934 <VIRT_VIRT_PAGE_BITMAP>:
10002934:	00 00 04 c2                                         ....

10002938 <SIZE_VIRT_PAGE_BITMAP>:
10002938:	00 80 00 00                                         ....

1000293c <VIRT_RAM_TABLE>:
1000293c:	00 06 00 c2                                         ....

10002940 <VIRT_RAM_TABLE_SIZE>:
10002940:	13 05 00 c2                                         ....

10002944 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002944:	24 05 00 c2                                         $...

10002948 <SIZE_APP_STACK_USER>:
10002948:	00 00 18 00                                         ....

1000294c <SIZE_APP_STACK_KRNL>:
1000294c:	00 00 08 00                                         ....

10002950 <SIZE_APP_STACK_TOTAL>:
10002950:	00 00 20 00                                         .. .

10002954 <VIRT_APP_DATA>:
10002954:	00 00 00 10                                         ....

10002958 <VIRT_APP_STACK_USER_TOP>:
10002958:	00 00 00 02                                         ....

1000295c <VIRT_APP_STACK_KRNL_TOP>:
1000295c:	00 00 e8 01                                         ....

10002960 <VIRT_HEAP_MIN>:
10002960:	00 00 00 c8                                         ....

10002964 <VIRT_HEAP_MAX>:
10002964:	ff ff ff ef                                         ....

10002968 <VIRT_SBRK_MIN>:
10002968:	00 00 00 f0                                         ....

1000296c <VIRT_SBRK_MAX>:
1000296c:	00 00 c0 ff                                         ....

10002970 <VIRT_ALLOCED_VIRT_PAGES>:
10002970:	00 00 10 c2                                         ....

10002974 <VIRT_ACPI_DRIVER>:
10002974:	00 40 48 c2                                         .@H.

10002978 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002978:	96 00 00 00                                         ....

1000297c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000297c:	2c 01 00 00                                         ,...

10002980 <PS2Keyboard::internalMapperLower>:
10002980:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002990:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100029a0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100029b0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100029c0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100029d0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100029e0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100029f0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002a00:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10002a80 <PS2Keyboard::internalMapperUpper>:
10002a80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10002a90:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10002aa0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10002ab0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10002ac0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10002ad0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002ae0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002af0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002b00:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002b80 <PS2Keyboard::internalMapCapLower>:
10002b80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002b90:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10002ba0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10002bb0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10002bc0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10002bd0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002be0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002bf0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002c00:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10002c80 <PS2Keyboard::internalMapCapUpper>:
10002c80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10002c90:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10002ca0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10002cb0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10002cc0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10002cd0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002ce0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002cf0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002d00:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002d80 <PS2Keyboard::internalMapperLowerBad>:
10002d80:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002d90:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10002da0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10002db0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10002dc0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002dd0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002de0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002df0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e00:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002e10:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10002e20:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10002e30:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10002e40:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002e50:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002e60:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e80:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002e90:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10002ea0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10002eb0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10002ec0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002ed0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002ee0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002ef0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002f00:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002f10:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10002f20:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10002f30:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10002f40:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002f50:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002f60:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002f70:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002f80:	00 66 90 90                                         .f..

10002f84 <vtable for PS2Keyboard>:
	...
	10002f8c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002f90: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002f94: R_386_32	PS2Keyboard::open(int, int, void*)
	10002f98: R_386_32	PS2Keyboard::close(int, int, void*)
	10002f9c: R_386_32	Device::hibernate()
	10002fa0: R_386_32	Device::wake()
	10002fa4: R_386_32	Device::detect()
	10002fa8: R_386_32	Device::disableLegacy()
	10002fac: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002fb0: R_386_32	PS2Keyboard::setRepeatRate(int)
	10002fb4: R_386_32	PS2Keyboard::setRepeatDelay(int)

10002fb8 <PHYS_RAM_TABLE_SIZE>:
10002fb8:	13 05 00 00                                         ....

10002fbc <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002fbc:	24 05 00 00                                         $...

10002fc0 <PHYS_RAM_TABLE>:
10002fc0:	00 06 00 00                                         ....

10002fc4 <PHYS_DMA_MEMORY_1>:
10002fc4:	00 00 01 00                                         ....

10002fc8 <PHYS_PHYS_PAGE_BITMAP>:
10002fc8:	00 00 02 00                                         ....

10002fcc <PHYS_VIRT_PAGE_BITMAP>:
10002fcc:	00 00 04 00                                         ....

10002fd0 <PHYS_DMA_MEMORY_2>:
10002fd0:	00 00 06 00                                         ....

10002fd4 <PHYS_ALLOCED_VIRT_PAGES>:
10002fd4:	00 00 10 00                                         ....

10002fd8 <PHYS_KRNL_PAGE_DIRECTORY>:
10002fd8:	00 10 00 00                                         ....

10002fdc <VIRT_KERNEL_BASE>:
10002fdc:	00 00 00 c0                                         ....

10002fe0 <VIRT_LOW_MEGS>:
10002fe0:	00 00 00 c2                                         ....

10002fe4 <VIRT_CPU_SPECIFIC>:
10002fe4:	00 00 40 c2                                         ..@.

10002fe8 <VIRT_RECURSIVE_SPOT_1>:
10002fe8:	00 00 80 c2                                         ....

10002fec <VIRT_RECURSIVE_SPOT_2>:
10002fec:	00 00 c0 c2                                         ....

10002ff0 <VIRT_DMA_MEMORY_1>:
10002ff0:	00 00 01 c2                                         ....

10002ff4 <SIZE_DMA_MEMORY_1>:
10002ff4:	00 00 01 00                                         ....

10002ff8 <VIRT_DMA_MEMORY_2>:
10002ff8:	00 00 06 c2                                         ....

10002ffc <SIZE_DMA_MEMORY_2>:
10002ffc:	00 00 02 00                                         ....

10003000 <VIRT_KRNL_PAGE_DIRECTORY>:
10003000:	00 10 00 c2                                         ....

10003004 <VIRT_PHYS_PAGE_BITMAP>:
10003004:	00 00 02 c2                                         ....

10003008 <SIZE_PHYS_PAGE_BITMAP>:
10003008:	00 00 02 00                                         ....

1000300c <VIRT_VIRT_PAGE_BITMAP>:
1000300c:	00 00 04 c2                                         ....

10003010 <SIZE_VIRT_PAGE_BITMAP>:
10003010:	00 80 00 00                                         ....

10003014 <VIRT_RAM_TABLE>:
10003014:	00 06 00 c2                                         ....

10003018 <VIRT_RAM_TABLE_SIZE>:
10003018:	13 05 00 c2                                         ....

1000301c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000301c:	24 05 00 c2                                         $...

10003020 <SIZE_APP_STACK_USER>:
10003020:	00 00 18 00                                         ....

10003024 <SIZE_APP_STACK_KRNL>:
10003024:	00 00 08 00                                         ....

10003028 <SIZE_APP_STACK_TOTAL>:
10003028:	00 00 20 00                                         .. .

1000302c <VIRT_APP_DATA>:
1000302c:	00 00 00 10                                         ....

10003030 <VIRT_APP_STACK_USER_TOP>:
10003030:	00 00 00 02                                         ....

10003034 <VIRT_APP_STACK_KRNL_TOP>:
10003034:	00 00 e8 01                                         ....

10003038 <VIRT_HEAP_MIN>:
10003038:	00 00 00 c8                                         ....

1000303c <VIRT_HEAP_MAX>:
1000303c:	ff ff ff ef                                         ....

10003040 <VIRT_SBRK_MIN>:
10003040:	00 00 00 f0                                         ....

10003044 <VIRT_SBRK_MAX>:
10003044:	00 00 c0 ff                                         ....

10003048 <VIRT_ALLOCED_VIRT_PAGES>:
10003048:	00 00 10 c2                                         ....

1000304c <VIRT_ACPI_DRIVER>:
1000304c:	00 40 48 c2                                         .@H.

10003050 <TERMINAL_KEYBUFFER_IN_SIZE>:
10003050:	96 00 00 00                                         ....

10003054 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10003054:	2c 01 00 00                                         ,...

10003058 <vtable for PS2Mouse>:
	...
	10003060: R_386_32	PS2Mouse::~PS2Mouse()
	10003064: R_386_32	PS2Mouse::~PS2Mouse()
	10003068: R_386_32	PS2Mouse::open(int, int, void*)
	1000306c: R_386_32	PS2Mouse::close(int, int, void*)
	10003070: R_386_32	Device::hibernate()
	10003074: R_386_32	Device::wake()
	10003078: R_386_32	PS2Mouse::detect()
	1000307c: R_386_32	Device::disableLegacy()
	10003080: R_386_32	Device::powerSaving(PowerSavingLevel)

10003084 <PHYS_RAM_TABLE_SIZE>:
10003084:	13 05 00 00                                         ....

10003088 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003088:	24 05 00 00                                         $...

1000308c <PHYS_RAM_TABLE>:
1000308c:	00 06 00 00                                         ....

10003090 <PHYS_DMA_MEMORY_1>:
10003090:	00 00 01 00                                         ....

10003094 <PHYS_PHYS_PAGE_BITMAP>:
10003094:	00 00 02 00                                         ....

10003098 <PHYS_VIRT_PAGE_BITMAP>:
10003098:	00 00 04 00                                         ....

1000309c <PHYS_DMA_MEMORY_2>:
1000309c:	00 00 06 00                                         ....

100030a0 <PHYS_ALLOCED_VIRT_PAGES>:
100030a0:	00 00 10 00                                         ....

100030a4 <PHYS_KRNL_PAGE_DIRECTORY>:
100030a4:	00 10 00 00                                         ....

100030a8 <VIRT_KERNEL_BASE>:
100030a8:	00 00 00 c0                                         ....

100030ac <VIRT_LOW_MEGS>:
100030ac:	00 00 00 c2                                         ....

100030b0 <VIRT_CPU_SPECIFIC>:
100030b0:	00 00 40 c2                                         ..@.

100030b4 <VIRT_RECURSIVE_SPOT_1>:
100030b4:	00 00 80 c2                                         ....

100030b8 <VIRT_RECURSIVE_SPOT_2>:
100030b8:	00 00 c0 c2                                         ....

100030bc <VIRT_DMA_MEMORY_1>:
100030bc:	00 00 01 c2                                         ....

100030c0 <SIZE_DMA_MEMORY_1>:
100030c0:	00 00 01 00                                         ....

100030c4 <VIRT_DMA_MEMORY_2>:
100030c4:	00 00 06 c2                                         ....

100030c8 <SIZE_DMA_MEMORY_2>:
100030c8:	00 00 02 00                                         ....

100030cc <VIRT_KRNL_PAGE_DIRECTORY>:
100030cc:	00 10 00 c2                                         ....

100030d0 <VIRT_PHYS_PAGE_BITMAP>:
100030d0:	00 00 02 c2                                         ....

100030d4 <SIZE_PHYS_PAGE_BITMAP>:
100030d4:	00 00 02 00                                         ....

100030d8 <VIRT_VIRT_PAGE_BITMAP>:
100030d8:	00 00 04 c2                                         ....

100030dc <SIZE_VIRT_PAGE_BITMAP>:
100030dc:	00 80 00 00                                         ....

100030e0 <VIRT_RAM_TABLE>:
100030e0:	00 06 00 c2                                         ....

100030e4 <VIRT_RAM_TABLE_SIZE>:
100030e4:	13 05 00 c2                                         ....

100030e8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100030e8:	24 05 00 c2                                         $...

100030ec <SIZE_APP_STACK_USER>:
100030ec:	00 00 18 00                                         ....

100030f0 <SIZE_APP_STACK_KRNL>:
100030f0:	00 00 08 00                                         ....

100030f4 <SIZE_APP_STACK_TOTAL>:
100030f4:	00 00 20 00                                         .. .

100030f8 <VIRT_APP_DATA>:
100030f8:	00 00 00 10                                         ....

100030fc <VIRT_APP_STACK_USER_TOP>:
100030fc:	00 00 00 02                                         ....

10003100 <VIRT_APP_STACK_KRNL_TOP>:
10003100:	00 00 e8 01                                         ....

10003104 <VIRT_HEAP_MIN>:
10003104:	00 00 00 c8                                         ....

10003108 <VIRT_HEAP_MAX>:
10003108:	ff ff ff ef                                         ....

1000310c <VIRT_SBRK_MIN>:
1000310c:	00 00 00 f0                                         ....

10003110 <VIRT_SBRK_MAX>:
10003110:	00 00 c0 ff                                         ....

10003114 <VIRT_ALLOCED_VIRT_PAGES>:
10003114:	00 00 10 c2                                         ....

10003118 <VIRT_ACPI_DRIVER>:
10003118:	00 40 48 c2                                         .@H.

1000311c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000311c:	96 00 00 00                                         ....

10003120 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10003120:	2c 01 00 00                                         ,...

10003124 <vtable for PS2Port>:
	...
	1000312c: R_386_32	PS2Port::~PS2Port()
	10003130: R_386_32	PS2Port::~PS2Port()
	10003134: R_386_32	PS2Port::open(int, int, void*)
	10003138: R_386_32	PS2Port::close(int, int, void*)
	1000313c: R_386_32	Device::hibernate()
	10003140: R_386_32	Device::wake()
	10003144: R_386_32	PS2Port::detect()
	10003148: R_386_32	Device::disableLegacy()
	1000314c: R_386_32	Device::powerSaving(PowerSavingLevel)

10003150 <PHYS_RAM_TABLE_SIZE>:
10003150:	13 05 00 00                                         ....

10003154 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003154:	24 05 00 00                                         $...

10003158 <PHYS_RAM_TABLE>:
10003158:	00 06 00 00                                         ....

1000315c <PHYS_DMA_MEMORY_1>:
1000315c:	00 00 01 00                                         ....

10003160 <PHYS_PHYS_PAGE_BITMAP>:
10003160:	00 00 02 00                                         ....

10003164 <PHYS_VIRT_PAGE_BITMAP>:
10003164:	00 00 04 00                                         ....

10003168 <PHYS_DMA_MEMORY_2>:
10003168:	00 00 06 00                                         ....

1000316c <PHYS_ALLOCED_VIRT_PAGES>:
1000316c:	00 00 10 00                                         ....

10003170 <PHYS_KRNL_PAGE_DIRECTORY>:
10003170:	00 10 00 00                                         ....

10003174 <VIRT_KERNEL_BASE>:
10003174:	00 00 00 c0                                         ....

10003178 <VIRT_LOW_MEGS>:
10003178:	00 00 00 c2                                         ....

1000317c <VIRT_CPU_SPECIFIC>:
1000317c:	00 00 40 c2                                         ..@.

10003180 <VIRT_RECURSIVE_SPOT_1>:
10003180:	00 00 80 c2                                         ....

10003184 <VIRT_RECURSIVE_SPOT_2>:
10003184:	00 00 c0 c2                                         ....

10003188 <VIRT_DMA_MEMORY_1>:
10003188:	00 00 01 c2                                         ....

1000318c <SIZE_DMA_MEMORY_1>:
1000318c:	00 00 01 00                                         ....

10003190 <VIRT_DMA_MEMORY_2>:
10003190:	00 00 06 c2                                         ....

10003194 <SIZE_DMA_MEMORY_2>:
10003194:	00 00 02 00                                         ....

10003198 <VIRT_KRNL_PAGE_DIRECTORY>:
10003198:	00 10 00 c2                                         ....

1000319c <VIRT_PHYS_PAGE_BITMAP>:
1000319c:	00 00 02 c2                                         ....

100031a0 <SIZE_PHYS_PAGE_BITMAP>:
100031a0:	00 00 02 00                                         ....

100031a4 <VIRT_VIRT_PAGE_BITMAP>:
100031a4:	00 00 04 c2                                         ....

100031a8 <SIZE_VIRT_PAGE_BITMAP>:
100031a8:	00 80 00 00                                         ....

100031ac <VIRT_RAM_TABLE>:
100031ac:	00 06 00 c2                                         ....

100031b0 <VIRT_RAM_TABLE_SIZE>:
100031b0:	13 05 00 c2                                         ....

100031b4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100031b4:	24 05 00 c2                                         $...

100031b8 <SIZE_APP_STACK_USER>:
100031b8:	00 00 18 00                                         ....

100031bc <SIZE_APP_STACK_KRNL>:
100031bc:	00 00 08 00                                         ....

100031c0 <SIZE_APP_STACK_TOTAL>:
100031c0:	00 00 20 00                                         .. .

100031c4 <VIRT_APP_DATA>:
100031c4:	00 00 00 10                                         ....

100031c8 <VIRT_APP_STACK_USER_TOP>:
100031c8:	00 00 00 02                                         ....

100031cc <VIRT_APP_STACK_KRNL_TOP>:
100031cc:	00 00 e8 01                                         ....

100031d0 <VIRT_HEAP_MIN>:
100031d0:	00 00 00 c8                                         ....

100031d4 <VIRT_HEAP_MAX>:
100031d4:	ff ff ff ef                                         ....

100031d8 <VIRT_SBRK_MIN>:
100031d8:	00 00 00 f0                                         ....

100031dc <VIRT_SBRK_MAX>:
100031dc:	00 00 c0 ff                                         ....

100031e0 <VIRT_ALLOCED_VIRT_PAGES>:
100031e0:	00 00 10 c2                                         ....

100031e4 <VIRT_ACPI_DRIVER>:
100031e4:	00 40 48 c2                                         .@H.

100031e8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100031e8:	96 00 00 00                                         ....

100031ec <TERMINAL_KEYBUFFER_OUT_SIZE>:
100031ec:	2c 01 00 00                                         ,...

100031f0 <vtable for SoundBlaster16>:
	...
	100031f8: R_386_32	SoundBlaster16::~SoundBlaster16()
	100031fc: R_386_32	SoundBlaster16::~SoundBlaster16()
	10003200: R_386_32	SoundBlaster16::open(int, int, void*)
	10003204: R_386_32	SoundBlaster16::close(int, int, void*)
	10003208: R_386_32	Device::hibernate()
	1000320c: R_386_32	Device::wake()
	10003210: R_386_32	Device::detect()
	10003214: R_386_32	Device::disableLegacy()
	10003218: R_386_32	Device::powerSaving(PowerSavingLevel)
	1000321c: R_386_32	SoundBlaster16::getNumHwChannels()
	10003220: R_386_32	SoundBlaster16::beginPlayback(int, int)
	10003224: R_386_32	SoundBlaster16::stopPlayback()

Disassembly of section .text._ZN3ISAD2Ev:

10003228 <ISA::~ISA()>:
10003228:	55                   	push   ebp
10003229:	89 e5                	mov    ebp,esp
1000322b:	83 ec 08             	sub    esp,0x8
1000322e:	ba 08 00 00 00       	mov    edx,0x8	1000322f: R_386_32	vtable for ISA
10003233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003236:	89 10                	mov    DWORD PTR [eax],edx
10003238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000323b:	83 ec 0c             	sub    esp,0xc
1000323e:	50                   	push   eax
1000323f:	e8 fc ff ff ff       	call   10003240 <ISA::~ISA()+0x18>	10003240: R_386_PC32	Bus::~Bus()
10003244:	83 c4 10             	add    esp,0x10
10003247:	90                   	nop
10003248:	c9                   	leave  
10003249:	c3                   	ret    

Disassembly of section .text._ZN3ISAD0Ev:

1000324a <ISA::~ISA()>:
1000324a:	55                   	push   ebp
1000324b:	89 e5                	mov    ebp,esp
1000324d:	83 ec 08             	sub    esp,0x8
10003250:	83 ec 0c             	sub    esp,0xc
10003253:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003256:	e8 fc ff ff ff       	call   10003257 <ISA::~ISA()+0xd>	10003257: R_386_PC32	ISA::~ISA()
1000325b:	83 c4 10             	add    esp,0x10
1000325e:	83 ec 08             	sub    esp,0x8
10003261:	68 58 01 00 00       	push   0x158
10003266:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003269:	e8 fc ff ff ff       	call   1000326a <ISA::~ISA()+0x20>	1000326a: R_386_PC32	operator delete(void*, unsigned long)
1000326e:	83 c4 10             	add    esp,0x10
10003271:	c9                   	leave  
10003272:	c3                   	ret    

Disassembly of section .text._ZN3DMAD2Ev:

10003274 <DMA::~DMA()>:
10003274:	55                   	push   ebp
10003275:	89 e5                	mov    ebp,esp
10003277:	83 ec 08             	sub    esp,0x8
1000327a:	ba 08 00 00 00       	mov    edx,0x8	1000327b: R_386_32	vtable for DMA
1000327f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003282:	89 10                	mov    DWORD PTR [eax],edx
10003284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003287:	83 ec 0c             	sub    esp,0xc
1000328a:	50                   	push   eax
1000328b:	e8 fc ff ff ff       	call   1000328c <DMA::~DMA()+0x18>	1000328c: R_386_PC32	Device::~Device()
10003290:	83 c4 10             	add    esp,0x10
10003293:	90                   	nop
10003294:	c9                   	leave  
10003295:	c3                   	ret    

Disassembly of section .text._ZN3DMAD0Ev:

10003296 <DMA::~DMA()>:
10003296:	55                   	push   ebp
10003297:	89 e5                	mov    ebp,esp
10003299:	83 ec 08             	sub    esp,0x8
1000329c:	83 ec 0c             	sub    esp,0xc
1000329f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100032a2:	e8 fc ff ff ff       	call   100032a3 <DMA::~DMA()+0xd>	100032a3: R_386_PC32	DMA::~DMA()
100032a7:	83 c4 10             	add    esp,0x10
100032aa:	83 ec 08             	sub    esp,0x8
100032ad:	68 5c 01 00 00       	push   0x15c
100032b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100032b5:	e8 fc ff ff ff       	call   100032b6 <DMA::~DMA()+0x20>	100032b6: R_386_PC32	operator delete(void*, unsigned long)
100032ba:	83 c4 10             	add    esp,0x10
100032bd:	c9                   	leave  
100032be:	c3                   	ret    

Disassembly of section .text._ZN4BeepD2Ev:

100032c0 <Beep::~Beep()>:
100032c0:	55                   	push   ebp
100032c1:	89 e5                	mov    ebp,esp
100032c3:	83 ec 08             	sub    esp,0x8
100032c6:	ba 08 00 00 00       	mov    edx,0x8	100032c7: R_386_32	vtable for Beep
100032cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032ce:	89 10                	mov    DWORD PTR [eax],edx
100032d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032d3:	83 ec 0c             	sub    esp,0xc
100032d6:	50                   	push   eax
100032d7:	e8 fc ff ff ff       	call   100032d8 <Beep::~Beep()+0x18>	100032d8: R_386_PC32	Buzzer::~Buzzer()
100032dc:	83 c4 10             	add    esp,0x10
100032df:	90                   	nop
100032e0:	c9                   	leave  
100032e1:	c3                   	ret    

Disassembly of section .text._ZN4BeepD0Ev:

100032e2 <Beep::~Beep()>:
100032e2:	55                   	push   ebp
100032e3:	89 e5                	mov    ebp,esp
100032e5:	83 ec 08             	sub    esp,0x8
100032e8:	83 ec 0c             	sub    esp,0xc
100032eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100032ee:	e8 fc ff ff ff       	call   100032ef <Beep::~Beep()+0xd>	100032ef: R_386_PC32	Beep::~Beep()
100032f3:	83 c4 10             	add    esp,0x10
100032f6:	83 ec 08             	sub    esp,0x8
100032f9:	68 5c 01 00 00       	push   0x15c
100032fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003301:	e8 fc ff ff ff       	call   10003302 <Beep::~Beep()+0x20>	10003302: R_386_PC32	operator delete(void*, unsigned long)
10003306:	83 c4 10             	add    esp,0x10
10003309:	c9                   	leave  
1000330a:	c3                   	ret    

Disassembly of section .text._ZN3PS2D2Ev:

1000330c <PS2::~PS2()>:
1000330c:	55                   	push   ebp
1000330d:	89 e5                	mov    ebp,esp
1000330f:	83 ec 08             	sub    esp,0x8
10003312:	ba 08 00 00 00       	mov    edx,0x8	10003313: R_386_32	vtable for PS2
10003317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000331a:	89 10                	mov    DWORD PTR [eax],edx
1000331c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000331f:	83 ec 0c             	sub    esp,0xc
10003322:	50                   	push   eax
10003323:	e8 fc ff ff ff       	call   10003324 <PS2::~PS2()+0x18>	10003324: R_386_PC32	Bus::~Bus()
10003328:	83 c4 10             	add    esp,0x10
1000332b:	90                   	nop
1000332c:	c9                   	leave  
1000332d:	c3                   	ret    

Disassembly of section .text._ZN3PS2D0Ev:

1000332e <PS2::~PS2()>:
1000332e:	55                   	push   ebp
1000332f:	89 e5                	mov    ebp,esp
10003331:	83 ec 08             	sub    esp,0x8
10003334:	83 ec 0c             	sub    esp,0xc
10003337:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000333a:	e8 fc ff ff ff       	call   1000333b <PS2::~PS2()+0xd>	1000333b: R_386_PC32	PS2::~PS2()
1000333f:	83 c4 10             	add    esp,0x10
10003342:	83 ec 08             	sub    esp,0x8
10003345:	68 60 01 00 00       	push   0x160
1000334a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000334d:	e8 fc ff ff ff       	call   1000334e <PS2::~PS2()+0x20>	1000334e: R_386_PC32	operator delete(void*, unsigned long)
10003352:	83 c4 10             	add    esp,0x10
10003355:	c9                   	leave  
10003356:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD2Ev:

10003358 <PS2Mouse::~PS2Mouse()>:
10003358:	55                   	push   ebp
10003359:	89 e5                	mov    ebp,esp
1000335b:	83 ec 08             	sub    esp,0x8
1000335e:	ba 08 00 00 00       	mov    edx,0x8	1000335f: R_386_32	vtable for PS2Mouse
10003363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003366:	89 10                	mov    DWORD PTR [eax],edx
10003368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000336b:	83 ec 0c             	sub    esp,0xc
1000336e:	50                   	push   eax
1000336f:	e8 fc ff ff ff       	call   10003370 <PS2Mouse::~PS2Mouse()+0x18>	10003370: R_386_PC32	Mouse::~Mouse()
10003374:	83 c4 10             	add    esp,0x10
10003377:	90                   	nop
10003378:	c9                   	leave  
10003379:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD0Ev:

1000337a <PS2Mouse::~PS2Mouse()>:
1000337a:	55                   	push   ebp
1000337b:	89 e5                	mov    ebp,esp
1000337d:	83 ec 08             	sub    esp,0x8
10003380:	83 ec 0c             	sub    esp,0xc
10003383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003386:	e8 fc ff ff ff       	call   10003387 <PS2Mouse::~PS2Mouse()+0xd>	10003387: R_386_PC32	PS2Mouse::~PS2Mouse()
1000338b:	83 c4 10             	add    esp,0x10
1000338e:	83 ec 08             	sub    esp,0x8
10003391:	68 68 01 00 00       	push   0x168
10003396:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003399:	e8 fc ff ff ff       	call   1000339a <PS2Mouse::~PS2Mouse()+0x20>	1000339a: R_386_PC32	operator delete(void*, unsigned long)
1000339e:	83 c4 10             	add    esp,0x10
100033a1:	c9                   	leave  
100033a2:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD2Ev:

100033a4 <PS2Port::~PS2Port()>:
100033a4:	55                   	push   ebp
100033a5:	89 e5                	mov    ebp,esp
100033a7:	83 ec 08             	sub    esp,0x8
100033aa:	ba 08 00 00 00       	mov    edx,0x8	100033ab: R_386_32	vtable for PS2Port
100033af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b2:	89 10                	mov    DWORD PTR [eax],edx
100033b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b7:	83 ec 0c             	sub    esp,0xc
100033ba:	50                   	push   eax
100033bb:	e8 fc ff ff ff       	call   100033bc <PS2Port::~PS2Port()+0x18>	100033bc: R_386_PC32	Bus::~Bus()
100033c0:	83 c4 10             	add    esp,0x10
100033c3:	90                   	nop
100033c4:	c9                   	leave  
100033c5:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD0Ev:

100033c6 <PS2Port::~PS2Port()>:
100033c6:	55                   	push   ebp
100033c7:	89 e5                	mov    ebp,esp
100033c9:	83 ec 08             	sub    esp,0x8
100033cc:	83 ec 0c             	sub    esp,0xc
100033cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100033d2:	e8 fc ff ff ff       	call   100033d3 <PS2Port::~PS2Port()+0xd>	100033d3: R_386_PC32	PS2Port::~PS2Port()
100033d7:	83 c4 10             	add    esp,0x10
100033da:	83 ec 08             	sub    esp,0x8
100033dd:	68 60 01 00 00       	push   0x160
100033e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100033e5:	e8 fc ff ff ff       	call   100033e6 <PS2Port::~PS2Port()+0x20>	100033e6: R_386_PC32	operator delete(void*, unsigned long)
100033ea:	83 c4 10             	add    esp,0x10
100033ed:	c9                   	leave  
100033ee:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D2Ev:

100033f0 <SoundBlaster16::~SoundBlaster16()>:
100033f0:	55                   	push   ebp
100033f1:	89 e5                	mov    ebp,esp
100033f3:	83 ec 08             	sub    esp,0x8
100033f6:	ba 08 00 00 00       	mov    edx,0x8	100033f7: R_386_32	vtable for SoundBlaster16
100033fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033fe:	89 10                	mov    DWORD PTR [eax],edx
10003400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003403:	83 ec 0c             	sub    esp,0xc
10003406:	50                   	push   eax
10003407:	e8 fc ff ff ff       	call   10003408 <SoundBlaster16::~SoundBlaster16()+0x18>	10003408: R_386_PC32	SoundDevice::~SoundDevice()
1000340c:	83 c4 10             	add    esp,0x10
1000340f:	90                   	nop
10003410:	c9                   	leave  
10003411:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D0Ev:

10003412 <SoundBlaster16::~SoundBlaster16()>:
10003412:	55                   	push   ebp
10003413:	89 e5                	mov    ebp,esp
10003415:	83 ec 08             	sub    esp,0x8
10003418:	83 ec 0c             	sub    esp,0xc
1000341b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000341e:	e8 fc ff ff ff       	call   1000341f <SoundBlaster16::~SoundBlaster16()+0xd>	1000341f: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10003423:	83 c4 10             	add    esp,0x10
10003426:	83 ec 08             	sub    esp,0x8
10003429:	68 fc 01 00 00       	push   0x1fc
1000342e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003431:	e8 fc ff ff ff       	call   10003432 <SoundBlaster16::~SoundBlaster16()+0x20>	10003432: R_386_PC32	operator delete(void*, unsigned long)
10003436:	83 c4 10             	add    esp,0x10
10003439:	c9                   	leave  
1000343a:	c3                   	ret    
