
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 1c 24 00 10       	push   0x1000241c	1000001c: R_386_32	.text
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	Dbg::kprintf(char const*, ...)
10000025:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
1000002c:	e8 fc ff ff ff       	call   1000002d <realstart(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	89 04 24             	mov    DWORD PTR [esp],eax
10000034:	89 c3                	mov    ebx,eax
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	ISA::ISA()
1000003b:	58                   	pop    eax
1000003c:	5a                   	pop    edx
1000003d:	53                   	push   ebx
1000003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000042:	e8 fc ff ff ff       	call   10000043 <realstart(void*)+0x2c>	10000043: R_386_PC32	Device::addChild(Device*)
10000047:	6a 00                	push   0x0
10000049:	8b 03                	mov    eax,DWORD PTR [ebx]
1000004b:	6a 00                	push   0x0
1000004d:	6a 00                	push   0x0
1000004f:	53                   	push   ebx
10000050:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000053:	83 c4 28             	add    esp,0x28
10000056:	5b                   	pop    ebx
10000057:	c3                   	ret    

10000058 <ISA::ISA()>:
10000058:	55                   	push   ebp
10000059:	89 e5                	mov    ebp,esp
1000005b:	83 ec 08             	sub    esp,0x8
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	83 ec 08             	sub    esp,0x8
10000064:	68 00 00 00 00       	push   0x0	10000065: R_386_32	busname
10000069:	50                   	push   eax
1000006a:	e8 fc ff ff ff       	call   1000006b <ISA::ISA()+0x13>	1000006b: R_386_PC32	Bus::Bus(char const*)
1000006f:	83 c4 10             	add    esp,0x10
10000072:	ba 08 00 00 00       	mov    edx,0x8	10000073: R_386_32	vtable for ISA
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	89 10                	mov    DWORD PTR [eax],edx
1000007c:	90                   	nop
1000007d:	c9                   	leave  
1000007e:	c3                   	ret    
1000007f:	90                   	nop

10000080 <ISA::open(int, int, void*)>:
10000080:	83 ec 18             	sub    esp,0x18
10000083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	50                   	push   eax
1000008a:	ff 52 18             	call   DWORD PTR [edx+0x18]
1000008d:	31 c0                	xor    eax,eax
1000008f:	83 c4 1c             	add    esp,0x1c
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::close(int, int, void*)>:
10000094:	31 c0                	xor    eax,eax
10000096:	c3                   	ret    
10000097:	90                   	nop

10000098 <ISA::doSpeaker()>:
10000098:	c3                   	ret    
10000099:	90                   	nop

1000009a <ISA::doSoundblaster()>:
1000009a:	53                   	push   ebx
1000009b:	b0 01                	mov    al,0x1
1000009d:	83 ec 10             	sub    esp,0x10
100000a0:	bb 26 02 00 00       	mov    ebx,0x226
100000a5:	89 da                	mov    edx,ebx
100000a7:	ee                   	out    dx,al
100000a8:	6a 00                	push   0x0
100000aa:	68 c0 c6 2d 00       	push   0x2dc6c0
100000af:	e8 fc ff ff ff       	call   100000b0 <ISA::doSoundblaster()+0x16>	100000b0: R_386_PC32	nanoSleep(unsigned long long)
100000b4:	31 c0                	xor    eax,eax
100000b6:	89 da                	mov    edx,ebx
100000b8:	ee                   	out    dx,al
100000b9:	ba 2a 02 00 00       	mov    edx,0x22a
100000be:	ec                   	in     al,dx
100000bf:	83 c4 10             	add    esp,0x10
100000c2:	3c aa                	cmp    al,0xaa
100000c4:	75 48                	jne    1000010e <ISA::doSoundblaster()+0x74>
100000c6:	83 ec 0c             	sub    esp,0xc
100000c9:	68 fc 01 00 00       	push   0x1fc
100000ce:	e8 fc ff ff ff       	call   100000cf <ISA::doSoundblaster()+0x35>	100000cf: R_386_PC32	operator new(unsigned long)
100000d3:	89 04 24             	mov    DWORD PTR [esp],eax
100000d6:	89 c3                	mov    ebx,eax
100000d8:	e8 fc ff ff ff       	call   100000d9 <ISA::doSoundblaster()+0x3f>	100000d9: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000dd:	59                   	pop    ecx
100000de:	58                   	pop    eax
100000df:	53                   	push   ebx
100000e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000e4:	e8 fc ff ff ff       	call   100000e5 <ISA::doSoundblaster()+0x4b>	100000e5: R_386_PC32	Device::addChild(Device*)
100000e9:	8b 03                	mov    eax,DWORD PTR [ebx]
100000eb:	6a 00                	push   0x0
100000ed:	6a 00                	push   0x0
100000ef:	6a 00                	push   0x0
100000f1:	53                   	push   ebx
100000f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000f5:	83 c4 20             	add    esp,0x20
100000f8:	6a 6f                	push   0x6f
100000fa:	53                   	push   ebx
100000fb:	68 00 00 00 00       	push   0x0	100000fc: R_386_32	sb16Demo(void*)
10000100:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000102: R_386_32	kernelProcess
10000106:	e8 fc ff ff ff       	call   10000107 <ISA::doSoundblaster()+0x6d>	10000107: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000010b:	83 c4 10             	add    esp,0x10
1000010e:	83 c4 08             	add    esp,0x8
10000111:	5b                   	pop    ebx
10000112:	c3                   	ret    
10000113:	90                   	nop

10000114 <ISA::doSerial()>:
10000114:	c3                   	ret    
10000115:	90                   	nop

10000116 <ISA::doParallel()>:
10000116:	c3                   	ret    
10000117:	90                   	nop

10000118 <ISA::doGameport()>:
10000118:	c3                   	ret    
10000119:	90                   	nop

1000011a <ISA::doFloppy()>:
1000011a:	c3                   	ret    
1000011b:	90                   	nop

1000011c <ISA::doATA()>:
1000011c:	c3                   	ret    
1000011d:	90                   	nop

1000011e <ISA::doPS2()>:
1000011e:	53                   	push   ebx
1000011f:	83 ec 14             	sub    esp,0x14
10000122:	68 00 00 00 00       	push   0x0	10000123: R_386_32	str_ps2
10000127:	e8 fc ff ff ff       	call   10000128 <ISA::doPS2()+0xa>	10000128: R_386_PC32	Dbg::kprintf(char const*, ...)
1000012c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000012f: R_386_32	str_ps2
10000133:	e8 fc ff ff ff       	call   10000134 <ISA::doPS2()+0x16>	10000134: R_386_PC32	Dbg::kprintf(char const*, ...)
10000138:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000013b: R_386_32	str_ps2
1000013f:	e8 fc ff ff ff       	call   10000140 <ISA::doPS2()+0x22>	10000140: R_386_PC32	Dbg::kprintf(char const*, ...)
10000144:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000147: R_386_32	str_ps2
1000014b:	e8 fc ff ff ff       	call   1000014c <ISA::doPS2()+0x2e>	1000014c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000150:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000157:	e8 fc ff ff ff       	call   10000158 <ISA::doPS2()+0x3a>	10000158: R_386_PC32	operator new(unsigned long)
1000015c:	89 04 24             	mov    DWORD PTR [esp],eax
1000015f:	89 c3                	mov    ebx,eax
10000161:	e8 fc ff ff ff       	call   10000162 <ISA::doPS2()+0x44>	10000162: R_386_PC32	PS2::PS2()
10000166:	58                   	pop    eax
10000167:	5a                   	pop    edx
10000168:	53                   	push   ebx
10000169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000016d:	e8 fc ff ff ff       	call   1000016e <ISA::doPS2()+0x50>	1000016e: R_386_PC32	Device::addChild(Device*)
10000172:	6a 00                	push   0x0
10000174:	8b 03                	mov    eax,DWORD PTR [ebx]
10000176:	6a 00                	push   0x0
10000178:	6a 00                	push   0x0
1000017a:	53                   	push   ebx
1000017b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000017e:	83 c4 28             	add    esp,0x28
10000181:	5b                   	pop    ebx
10000182:	c3                   	ret    
10000183:	90                   	nop

10000184 <ISA::doRTC()>:
10000184:	c3                   	ret    
10000185:	90                   	nop

10000186 <ISA::detect()>:
10000186:	57                   	push   edi
10000187:	56                   	push   esi
10000188:	53                   	push   ebx
10000189:	83 ec 2c             	sub    esp,0x2c
1000018c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000190:	68 5c 01 00 00       	push   0x15c
10000195:	e8 fc ff ff ff       	call   10000196 <ISA::detect()+0x10>	10000196: R_386_PC32	operator new(unsigned long)
1000019a:	89 04 24             	mov    DWORD PTR [esp],eax
1000019d:	89 c3                	mov    ebx,eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <ISA::detect()+0x1a>	100001a0: R_386_PC32	DMA::DMA()
100001a4:	59                   	pop    ecx
100001a5:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100001a7: R_386_32	isaDMAController
100001ab:	5e                   	pop    esi
100001ac:	53                   	push   ebx
100001ad:	57                   	push   edi
100001ae:	e8 fc ff ff ff       	call   100001af <ISA::detect()+0x29>	100001af: R_386_PC32	Device::addChild(Device*)
100001b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100001b4: R_386_32	isaDMAController
100001b8:	8b 10                	mov    edx,DWORD PTR [eax]
100001ba:	6a 00                	push   0x0
100001bc:	6a 00                	push   0x0
100001be:	6a 00                	push   0x0
100001c0:	50                   	push   eax
100001c1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001c4:	83 c4 20             	add    esp,0x20
100001c7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001c9: R_386_32	detectDone
100001ce:	0f 85 db 00 00 00    	jne    100002af <ISA::detect()+0x129>
100001d4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001d6: R_386_32	detectDone
100001db:	31 db                	xor    ebx,ebx
100001dd:	52                   	push   edx
100001de:	6a 01                	push   0x1
100001e0:	68 00 00 00 00       	push   0x0	100001e1: R_386_32	str_isadonesafe
100001e5:	68 00 00 00 00       	push   0x0	100001e6: R_386_32	str_isa
100001ea:	e8 fc ff ff ff       	call   100001eb <ISA::detect()+0x65>	100001eb: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001ef:	83 c4 10             	add    esp,0x10
100001f2:	50                   	push   eax
100001f3:	50                   	push   eax
100001f4:	68 00 00 00 00       	push   0x0	100001f5: R_386_32	str_devices
100001f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001fd:	56                   	push   esi
100001fe:	e8 fc ff ff ff       	call   100001ff <ISA::detect()+0x79>	100001ff: R_386_PC32	strcpy
10000203:	83 c4 10             	add    esp,0x10
10000206:	85 db                	test   ebx,ebx
10000208:	75 09                	jne    10000213 <ISA::detect()+0x8d>
1000020a:	50                   	push   eax
1000020b:	50                   	push   eax
1000020c:	68 00 00 00 00       	push   0x0	1000020d: R_386_32	str_spk
10000211:	eb 52                	jmp    10000265 <ISA::detect()+0xdf>
10000213:	83 fb 01             	cmp    ebx,0x1
10000216:	75 09                	jne    10000221 <ISA::detect()+0x9b>
10000218:	50                   	push   eax
10000219:	50                   	push   eax
1000021a:	68 00 00 00 00       	push   0x0	1000021b: R_386_32	str_rtc
1000021f:	eb 44                	jmp    10000265 <ISA::detect()+0xdf>
10000221:	83 fb 02             	cmp    ebx,0x2
10000224:	75 09                	jne    1000022f <ISA::detect()+0xa9>
10000226:	50                   	push   eax
10000227:	50                   	push   eax
10000228:	68 00 00 00 00       	push   0x0	10000229: R_386_32	str_ps2
1000022d:	eb 36                	jmp    10000265 <ISA::detect()+0xdf>
1000022f:	83 fb 03             	cmp    ebx,0x3
10000232:	75 09                	jne    1000023d <ISA::detect()+0xb7>
10000234:	50                   	push   eax
10000235:	50                   	push   eax
10000236:	68 00 00 00 00       	push   0x0	10000237: R_386_32	str_floppy
1000023b:	eb 28                	jmp    10000265 <ISA::detect()+0xdf>
1000023d:	83 fb 04             	cmp    ebx,0x4
10000240:	75 09                	jne    1000024b <ISA::detect()+0xc5>
10000242:	50                   	push   eax
10000243:	50                   	push   eax
10000244:	68 00 00 00 00       	push   0x0	10000245: R_386_32	str_sb16
10000249:	eb 1a                	jmp    10000265 <ISA::detect()+0xdf>
1000024b:	83 fb 05             	cmp    ebx,0x5
1000024e:	75 09                	jne    10000259 <ISA::detect()+0xd3>
10000250:	51                   	push   ecx
10000251:	51                   	push   ecx
10000252:	68 00 00 00 00       	push   0x0	10000253: R_386_32	str_isaata
10000257:	eb 0c                	jmp    10000265 <ISA::detect()+0xdf>
10000259:	83 fb 06             	cmp    ebx,0x6
1000025c:	75 10                	jne    1000026e <ISA::detect()+0xe8>
1000025e:	52                   	push   edx
1000025f:	52                   	push   edx
10000260:	68 00 00 00 00       	push   0x0	10000261: R_386_32	str_gp
10000265:	56                   	push   esi
10000266:	e8 fc ff ff ff       	call   10000267 <ISA::detect()+0xe1>	10000267: R_386_PC32	strcat
1000026b:	83 c4 10             	add    esp,0x10
1000026e:	50                   	push   eax
1000026f:	6a ff                	push   0xffffffff
10000271:	56                   	push   esi
10000272:	68 00 00 00 00       	push   0x0	10000273: R_386_32	str_isa
10000277:	e8 fc ff ff ff       	call   10000278 <ISA::detect()+0xf2>	10000278: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000027c:	83 c4 10             	add    esp,0x10
1000027f:	83 f8 fe             	cmp    eax,0xfffffffe
10000282:	74 21                	je     100002a5 <ISA::detect()+0x11f>
10000284:	83 fb 02             	cmp    ebx,0x2
10000287:	75 0b                	jne    10000294 <ISA::detect()+0x10e>
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	57                   	push   edi
1000028d:	e8 fc ff ff ff       	call   1000028e <ISA::detect()+0x108>	1000028e: R_386_PC32	ISA::doPS2()
10000292:	eb 0e                	jmp    100002a2 <ISA::detect()+0x11c>
10000294:	83 fb 04             	cmp    ebx,0x4
10000297:	75 0c                	jne    100002a5 <ISA::detect()+0x11f>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	57                   	push   edi
1000029d:	e8 fc ff ff ff       	call   1000029e <ISA::detect()+0x118>	1000029e: R_386_PC32	ISA::doSoundblaster()
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	43                   	inc    ebx
100002a6:	83 fb 07             	cmp    ebx,0x7
100002a9:	0f 85 43 ff ff ff    	jne    100001f2 <ISA::detect()+0x6c>
100002af:	83 c4 20             	add    esp,0x20
100002b2:	5b                   	pop    ebx
100002b3:	5e                   	pop    esi
100002b4:	5f                   	pop    edi
100002b5:	c3                   	ret    

100002b6 <DMAChannel::DMAChannel(int)>:
100002b6:	55                   	push   ebp
100002b7:	89 e5                	mov    ebp,esp
100002b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bc:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002c6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002d3:	89 10                	mov    DWORD PTR [eax],edx
100002d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100002df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100002e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100002f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f3:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100002f7:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100002fb:	0f 9f c2             	setg   dl
100002fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000301:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10000304:	90                   	nop
10000305:	5d                   	pop    ebp
10000306:	c3                   	ret    
10000307:	90                   	nop

10000308 <DMAChannel::~DMAChannel()>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	83 ec 08             	sub    esp,0x8
1000030e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000311:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000314:	85 c0                	test   eax,eax
10000316:	74 19                	je     10000331 <DMAChannel::~DMAChannel()+0x29>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000031e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000321:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000324:	83 ec 08             	sub    esp,0x8
10000327:	52                   	push   edx
10000328:	50                   	push   eax
10000329:	e8 fc ff ff ff       	call   1000032a <DMAChannel::~DMAChannel()+0x22>	1000032a: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
1000032e:	83 c4 10             	add    esp,0x10
10000331:	90                   	nop
10000332:	c9                   	leave  
10000333:	c3                   	ret    

10000334 <DMAChannel::getAddress()>:
10000334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000033b:	c3                   	ret    

1000033c <DMAChannel::getChannelNum()>:
1000033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000340:	8b 00                	mov    eax,DWORD PTR [eax]
10000342:	c3                   	ret    
10000343:	90                   	nop

10000344 <DMAChannel::setLength(unsigned int)>:
10000344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000348:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000034c:	3d 00 00 01 00       	cmp    eax,0x10000
10000351:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10000354:	76 0d                	jbe    10000363 <DMAChannel::setLength(unsigned int)+0x1f>
10000356:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000035a: R_386_32	dmaLong
1000035e:	e9 fc ff ff ff       	jmp    1000035f <DMAChannel::setLength(unsigned int)+0x1b>	1000035f: R_386_PC32	Krnl::panic(char const*)
10000363:	c3                   	ret    

10000364 <DMAChannel::setAddress(unsigned int)>:
10000364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000036c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000036f:	c3                   	ret    

10000370 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10000370:	56                   	push   esi
10000371:	53                   	push   ebx
10000372:	83 ec 10             	sub    esp,0x10
10000375:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000379:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
1000037e:	56                   	push   esi
1000037f:	e8 fc ff ff ff       	call   10000380 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10000380: R_386_PC32	Phys::allocateDMA(unsigned long)
10000384:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10000387:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000038a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000038d:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10000390:	83 c4 14             	add    esp,0x14
10000393:	5b                   	pop    ebx
10000394:	5e                   	pop    esi
10000395:	c3                   	ret    

10000396 <DMAChannel::setMode(unsigned char)>:
10000396:	53                   	push   ebx
10000397:	83 ec 08             	sub    esp,0x8
1000039a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000039e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100003a2:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
100003a6:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
100003a9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
100003ad:	74 2a                	je     100003d9 <DMAChannel::setMode(unsigned char)+0x43>
100003af:	51                   	push   ecx
100003b0:	51                   	push   ecx
100003b1:	6a 01                	push   0x1
100003b3:	53                   	push   ebx
100003b4:	e8 fc ff ff ff       	call   100003b5 <DMAChannel::setMode(unsigned char)+0x1f>	100003b5: R_386_PC32	DMAChannel::mask(bool)
100003b9:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
100003bd:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
100003c0:	19 d2                	sbb    edx,edx
100003c2:	80 e2 35             	and    dl,0x35
100003c5:	81 c2 d6 00 00 00    	add    edx,0xd6
100003cb:	ee                   	out    dx,al
100003cc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100003d0:	83 c4 18             	add    esp,0x18
100003d3:	5b                   	pop    ebx
100003d4:	e9 ff 00 00 00       	jmp    100004d8 <DMAChannel::unmask()>
100003d9:	83 c4 08             	add    esp,0x8
100003dc:	5b                   	pop    ebx
100003dd:	c3                   	ret    

100003de <DMAChannel::start()>:
100003de:	57                   	push   edi
100003df:	56                   	push   esi
100003e0:	53                   	push   ebx
100003e1:	83 ec 10             	sub    esp,0x10
100003e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100003e8:	8b 06                	mov    eax,DWORD PTR [esi]
100003ea:	83 f8 07             	cmp    eax,0x7
100003ed:	0f 87 96 00 00 00    	ja     10000489 <DMAChannel::start()+0xab>
100003f3:	8a 98 f8 24 00 10    	mov    bl,BYTE PTR [eax+0x100024f8]	100003f5: R_386_32	.text
100003f9:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100003fd:	8a 98 00 25 00 10    	mov    bl,BYTE PTR [eax+0x10002500]	100003ff: R_386_32	.text
10000403:	8a 80 08 25 00 10    	mov    al,BYTE PTR [eax+0x10002508]	10000405: R_386_32	.text
10000409:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
1000040d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10000411:	e8 fc ff ff ff       	call   10000412 <DMAChannel::start()+0x34>	10000412: R_386_PC32	lockScheduler()
10000416:	50                   	push   eax
10000417:	50                   	push   eax
10000418:	6a 01                	push   0x1
1000041a:	56                   	push   esi
1000041b:	e8 fc ff ff ff       	call   1000041c <DMAChannel::start()+0x3e>	1000041c: R_386_PC32	DMAChannel::mask(bool)
10000420:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10000423:	83 c4 10             	add    esp,0x10
10000426:	80 fb 01             	cmp    bl,0x1
10000429:	19 c9                	sbb    ecx,ecx
1000042b:	31 ff                	xor    edi,edi
1000042d:	80 e1 34             	and    cl,0x34
10000430:	89 f8                	mov    eax,edi
10000432:	81 c1 d8 00 00 00    	add    ecx,0xd8
10000438:	89 ca                	mov    edx,ecx
1000043a:	ee                   	out    dx,al
1000043b:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10000440:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10000443:	ee                   	out    dx,al
10000444:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000447:	c1 e8 08             	shr    eax,0x8
1000044a:	ee                   	out    dx,al
1000044b:	89 f8                	mov    eax,edi
1000044d:	89 ca                	mov    edx,ecx
1000044f:	ee                   	out    dx,al
10000450:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10000453:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10000458:	8d 41 ff             	lea    eax,[ecx-0x1]
1000045b:	ee                   	out    dx,al
1000045c:	8d 41 ff             	lea    eax,[ecx-0x1]
1000045f:	c1 e8 08             	shr    eax,0x8
10000462:	ee                   	out    dx,al
10000463:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000466:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
1000046b:	c1 e8 10             	shr    eax,0x10
1000046e:	ee                   	out    dx,al
1000046f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10000473:	74 27                	je     1000049c <DMAChannel::start()+0xbe>
10000475:	80 fb 01             	cmp    bl,0x1
10000478:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
1000047b:	19 d2                	sbb    edx,edx
1000047d:	80 e2 35             	and    dl,0x35
10000480:	81 c2 d6 00 00 00    	add    edx,0xd6
10000486:	ee                   	out    dx,al
10000487:	eb 13                	jmp    1000049c <DMAChannel::start()+0xbe>
10000489:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000048d: R_386_32	dmaConfused
10000491:	83 c4 10             	add    esp,0x10
10000494:	5b                   	pop    ebx
10000495:	5e                   	pop    esi
10000496:	5f                   	pop    edi
10000497:	e9 fc ff ff ff       	jmp    10000498 <DMAChannel::start()+0xba>	10000498: R_386_PC32	Krnl::panic(char const*)
1000049c:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
100004a0:	83 ec 0c             	sub    esp,0xc
100004a3:	56                   	push   esi
100004a4:	e8 fc ff ff ff       	call   100004a5 <DMAChannel::start()+0xc7>	100004a5: R_386_PC32	DMAChannel::unmask()
100004a9:	83 c4 20             	add    esp,0x20
100004ac:	5b                   	pop    ebx
100004ad:	5e                   	pop    esi
100004ae:	5f                   	pop    edi
100004af:	e9 fc ff ff ff       	jmp    100004b0 <DMAChannel::start()+0xd2>	100004b0: R_386_PC32	unlockScheduler()

100004b4 <DMAChannel::stop()>:
100004b4:	c3                   	ret    
100004b5:	90                   	nop

100004b6 <DMAChannel::mask(bool)>:
100004b6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
100004bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100004bf:	0f 95 c0             	setne  al
100004c2:	c1 e0 02             	shl    eax,0x2
100004c5:	0b 02                	or     eax,DWORD PTR [edx]
100004c7:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
100004cb:	19 d2                	sbb    edx,edx
100004cd:	80 e2 36             	and    dl,0x36
100004d0:	81 c2 d4 00 00 00    	add    edx,0xd4
100004d6:	ee                   	out    dx,al
100004d7:	c3                   	ret    

100004d8 <DMAChannel::unmask()>:
100004d8:	6a 00                	push   0x0
100004da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100004de:	e8 fc ff ff ff       	call   100004df <DMAChannel::unmask()+0x7>	100004df: R_386_PC32	DMAChannel::mask(bool)
100004e3:	58                   	pop    eax
100004e4:	5a                   	pop    edx
100004e5:	c3                   	ret    

100004e6 <DMA::DMA()>:
100004e6:	55                   	push   ebp
100004e7:	89 e5                	mov    ebp,esp
100004e9:	83 ec 08             	sub    esp,0x8
100004ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ef:	83 ec 08             	sub    esp,0x8
100004f2:	68 00 00 00 00       	push   0x0	100004f3: R_386_32	dmaCtrlName
100004f7:	50                   	push   eax
100004f8:	e8 fc ff ff ff       	call   100004f9 <DMA::DMA()+0x13>	100004f9: R_386_PC32	Device::Device(char const*)
100004fd:	83 c4 10             	add    esp,0x10
10000500:	ba 08 00 00 00       	mov    edx,0x8	10000501: R_386_32	vtable for DMA
10000505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000508:	89 10                	mov    DWORD PTR [eax],edx
1000050a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10000514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000517:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000051d:	0f b6 d0             	movzx  edx,al
10000520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000523:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
1000052a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000533:	0f b6 d0             	movzx  edx,al
10000536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000539:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
1000053e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000541:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000547:	8d 50 01             	lea    edx,[eax+0x1]
1000054a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000054d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000553:	0f b6 d0             	movzx  edx,al
10000556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000559:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000055d:	83 e1 3f             	and    ecx,0x3f
10000560:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000567:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000056d:	0f b6 d0             	movzx  edx,al
10000570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000573:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
1000057a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000583:	0f b6 d0             	movzx  edx,al
10000586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000589:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
1000058e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000591:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000597:	8d 50 01             	lea    edx,[eax+0x1]
1000059a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000059d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005a3:	0f b6 d0             	movzx  edx,al
100005a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005ad:	83 e1 3f             	and    ecx,0x3f
100005b0:	83 c9 40             	or     ecx,0x40
100005b3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005c0:	0f b6 d0             	movzx  edx,al
100005c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c6:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
100005cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005d6:	0f b6 d0             	movzx  edx,al
100005d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005dc:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100005e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005ea:	8d 50 01             	lea    edx,[eax+0x1]
100005ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005f0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005f6:	0f b6 d0             	movzx  edx,al
100005f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005fc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000600:	83 e1 3f             	and    ecx,0x3f
10000603:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000610:	0f b6 d0             	movzx  edx,al
10000613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000616:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
1000061d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000620:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000626:	0f b6 d0             	movzx  edx,al
10000629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000634:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000063a:	8d 50 01             	lea    edx,[eax+0x1]
1000063d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000640:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000646:	0f b6 d0             	movzx  edx,al
10000649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000650:	83 e1 3f             	and    ecx,0x3f
10000653:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000660:	0f b6 d0             	movzx  edx,al
10000663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000666:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
1000066d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000670:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000676:	0f b6 d0             	movzx  edx,al
10000679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067c:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000684:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000068a:	8d 50 01             	lea    edx,[eax+0x1]
1000068d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000690:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000696:	0f b6 d0             	movzx  edx,al
10000699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000069c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006a0:	83 e1 3f             	and    ecx,0x3f
100006a3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006b0:	0f b6 d0             	movzx  edx,al
100006b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b6:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
100006bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006c6:	0f b6 d0             	movzx  edx,al
100006c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100006d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006da:	8d 50 01             	lea    edx,[eax+0x1]
100006dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006e0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006e6:	0f b6 d0             	movzx  edx,al
100006e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006f0:	83 e1 3f             	and    ecx,0x3f
100006f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006f7:	90                   	nop
100006f8:	c9                   	leave  
100006f9:	c3                   	ret    

100006fa <DMA::getAvailable()>:
100006fa:	53                   	push   ebx
100006fb:	31 db                	xor    ebx,ebx
100006fd:	83 ec 08             	sub    esp,0x8
10000700:	e8 fc ff ff ff       	call   10000701 <DMA::getAvailable()+0x7>	10000701: R_386_PC32	lockScheduler()
10000705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000709:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000710:	0f a3 d8             	bt     eax,ebx
10000713:	73 07                	jae    1000071c <DMA::getAvailable()+0x22>
10000715:	e8 fc ff ff ff       	call   10000716 <DMA::getAvailable()+0x1c>	10000716: R_386_PC32	unlockScheduler()
1000071a:	eb 0e                	jmp    1000072a <DMA::getAvailable()+0x30>
1000071c:	43                   	inc    ebx
1000071d:	83 fb 08             	cmp    ebx,0x8
10000720:	75 ee                	jne    10000710 <DMA::getAvailable()+0x16>
10000722:	e8 fc ff ff ff       	call   10000723 <DMA::getAvailable()+0x29>	10000723: R_386_PC32	unlockScheduler()
10000727:	83 cb ff             	or     ebx,0xffffffff
1000072a:	89 d8                	mov    eax,ebx
1000072c:	83 c4 08             	add    esp,0x8
1000072f:	5b                   	pop    ebx
10000730:	c3                   	ret    
10000731:	90                   	nop

10000732 <DMA::open(int, int, void*)>:
10000732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000736:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
1000073d:	31 c0                	xor    eax,eax
1000073f:	e6 0d                	out    0xd,al
10000741:	e6 da                	out    0xda,al
10000743:	31 c0                	xor    eax,eax
10000745:	c3                   	ret    

10000746 <DMA::close(int, int, void*)>:
10000746:	31 c0                	xor    eax,eax
10000748:	c3                   	ret    
10000749:	90                   	nop

1000074a <DMA::tryLockChannelWithBase(int)>:
1000074a:	56                   	push   esi
1000074b:	53                   	push   ebx
1000074c:	83 ec 14             	sub    esp,0x14
1000074f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000753:	e8 fc ff ff ff       	call   10000754 <DMA::tryLockChannelWithBase(int)+0xa>	10000754: R_386_PC32	lockScheduler()
10000758:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000075c:	8d 43 03             	lea    eax,[ebx+0x3]
1000075f:	39 d8                	cmp    eax,ebx
10000761:	7c 47                	jl     100007aa <DMA::tryLockChannelWithBase(int)+0x60>
10000763:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
1000076a:	89 ca                	mov    edx,ecx
1000076c:	0f a3 d9             	bt     ecx,ebx
1000076f:	73 36                	jae    100007a7 <DMA::tryLockChannelWithBase(int)+0x5d>
10000771:	83 ec 0c             	sub    esp,0xc
10000774:	88 d9                	mov    cl,bl
10000776:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000077b:	d3 c0                	rol    eax,cl
1000077d:	21 d0                	and    eax,edx
1000077f:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000785:	6a 18                	push   0x18
10000787:	e8 fc ff ff ff       	call   10000788 <DMA::tryLockChannelWithBase(int)+0x3e>	10000788: R_386_PC32	operator new(unsigned long)
1000078c:	5a                   	pop    edx
1000078d:	59                   	pop    ecx
1000078e:	53                   	push   ebx
1000078f:	50                   	push   eax
10000790:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000794:	e8 fc ff ff ff       	call   10000795 <DMA::tryLockChannelWithBase(int)+0x4b>	10000795: R_386_PC32	DMAChannel::DMAChannel(int)
10000799:	e8 fc ff ff ff       	call   1000079a <DMA::tryLockChannelWithBase(int)+0x50>	1000079a: R_386_PC32	unlockScheduler()
1000079e:	83 c4 10             	add    esp,0x10
100007a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100007a5:	eb 0a                	jmp    100007b1 <DMA::tryLockChannelWithBase(int)+0x67>
100007a7:	43                   	inc    ebx
100007a8:	eb b5                	jmp    1000075f <DMA::tryLockChannelWithBase(int)+0x15>
100007aa:	e8 fc ff ff ff       	call   100007ab <DMA::tryLockChannelWithBase(int)+0x61>	100007ab: R_386_PC32	unlockScheduler()
100007af:	31 c0                	xor    eax,eax
100007b1:	83 c4 14             	add    esp,0x14
100007b4:	5b                   	pop    ebx
100007b5:	5e                   	pop    esi
100007b6:	c3                   	ret    
100007b7:	90                   	nop

100007b8 <DMA::lockChannelWithBase(int)>:
100007b8:	83 ec 0c             	sub    esp,0xc
100007bb:	50                   	push   eax
100007bc:	50                   	push   eax
100007bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007c5:	e8 fc ff ff ff       	call   100007c6 <DMA::lockChannelWithBase(int)+0xe>	100007c6: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007ca:	83 c4 10             	add    esp,0x10
100007cd:	85 c0                	test   eax,eax
100007cf:	74 ea                	je     100007bb <DMA::lockChannelWithBase(int)+0x3>
100007d1:	83 c4 0c             	add    esp,0xc
100007d4:	c3                   	ret    
100007d5:	90                   	nop

100007d6 <DMA::tryLockChannel8()>:
100007d6:	83 ec 14             	sub    esp,0x14
100007d9:	6a 00                	push   0x0
100007db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007df:	e8 fc ff ff ff       	call   100007e0 <DMA::tryLockChannel8()+0xa>	100007e0: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007e4:	83 c4 1c             	add    esp,0x1c
100007e7:	c3                   	ret    

100007e8 <DMA::tryLockChannel16()>:
100007e8:	83 ec 14             	sub    esp,0x14
100007eb:	6a 04                	push   0x4
100007ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007f1:	e8 fc ff ff ff       	call   100007f2 <DMA::tryLockChannel16()+0xa>	100007f2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100007f6:	83 c4 1c             	add    esp,0x1c
100007f9:	c3                   	ret    

100007fa <DMA::tryLockChannel(int)>:
100007fa:	56                   	push   esi
100007fb:	53                   	push   ebx
100007fc:	83 ec 14             	sub    esp,0x14
100007ff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000803:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000807:	83 fb 07             	cmp    ebx,0x7
1000080a:	76 12                	jbe    1000081e <DMA::tryLockChannel(int)+0x24>
1000080c:	83 ec 0c             	sub    esp,0xc
1000080f:	68 10 25 00 10       	push   0x10002510	10000810: R_386_32	.text
10000814:	e8 fc ff ff ff       	call   10000815 <DMA::tryLockChannel(int)+0x1b>	10000815: R_386_PC32	Dbg::kprintf(char const*, ...)
10000819:	83 c4 10             	add    esp,0x10
1000081c:	eb 4e                	jmp    1000086c <DMA::tryLockChannel(int)+0x72>
1000081e:	e8 fc ff ff ff       	call   1000081f <DMA::tryLockChannel(int)+0x25>	1000081f: R_386_PC32	lockScheduler()
10000823:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
1000082a:	89 c2                	mov    edx,eax
1000082c:	0f a3 d8             	bt     eax,ebx
1000082f:	73 36                	jae    10000867 <DMA::tryLockChannel(int)+0x6d>
10000831:	83 ec 0c             	sub    esp,0xc
10000834:	88 d9                	mov    cl,bl
10000836:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000083b:	d3 c0                	rol    eax,cl
1000083d:	21 d0                	and    eax,edx
1000083f:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000845:	6a 18                	push   0x18
10000847:	e8 fc ff ff ff       	call   10000848 <DMA::tryLockChannel(int)+0x4e>	10000848: R_386_PC32	operator new(unsigned long)
1000084c:	5a                   	pop    edx
1000084d:	59                   	pop    ecx
1000084e:	53                   	push   ebx
1000084f:	50                   	push   eax
10000850:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000854:	e8 fc ff ff ff       	call   10000855 <DMA::tryLockChannel(int)+0x5b>	10000855: R_386_PC32	DMAChannel::DMAChannel(int)
10000859:	e8 fc ff ff ff       	call   1000085a <DMA::tryLockChannel(int)+0x60>	1000085a: R_386_PC32	unlockScheduler()
1000085e:	83 c4 10             	add    esp,0x10
10000861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000865:	eb 07                	jmp    1000086e <DMA::tryLockChannel(int)+0x74>
10000867:	e8 fc ff ff ff       	call   10000868 <DMA::tryLockChannel(int)+0x6e>	10000868: R_386_PC32	unlockScheduler()
1000086c:	31 c0                	xor    eax,eax
1000086e:	83 c4 14             	add    esp,0x14
10000871:	5b                   	pop    ebx
10000872:	5e                   	pop    esi
10000873:	c3                   	ret    

10000874 <DMA::lockChannel8()>:
10000874:	83 ec 14             	sub    esp,0x14
10000877:	6a 00                	push   0x0
10000879:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000087d:	e8 fc ff ff ff       	call   1000087e <DMA::lockChannel8()+0xa>	1000087e: R_386_PC32	DMA::lockChannelWithBase(int)
10000882:	83 c4 1c             	add    esp,0x1c
10000885:	c3                   	ret    

10000886 <DMA::lockChannel16()>:
10000886:	83 ec 14             	sub    esp,0x14
10000889:	6a 04                	push   0x4
1000088b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000088f:	e8 fc ff ff ff       	call   10000890 <DMA::lockChannel16()+0xa>	10000890: R_386_PC32	DMA::lockChannelWithBase(int)
10000894:	83 c4 1c             	add    esp,0x1c
10000897:	c3                   	ret    

10000898 <DMA::lockChannel(int)>:
10000898:	83 ec 0c             	sub    esp,0xc
1000089b:	50                   	push   eax
1000089c:	50                   	push   eax
1000089d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100008a5:	e8 fc ff ff ff       	call   100008a6 <DMA::lockChannel(int)+0xe>	100008a6: R_386_PC32	DMA::tryLockChannel(int)
100008aa:	83 c4 10             	add    esp,0x10
100008ad:	85 c0                	test   eax,eax
100008af:	74 ea                	je     1000089b <DMA::lockChannel(int)+0x3>
100008b1:	83 c4 0c             	add    esp,0xc
100008b4:	c3                   	ret    
100008b5:	90                   	nop

100008b6 <DMA::unlockChannel(DMAChannel*)>:
100008b6:	56                   	push   esi
100008b7:	53                   	push   ebx
100008b8:	53                   	push   ebx
100008b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100008bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100008c1:	85 db                	test   ebx,ebx
100008c3:	75 10                	jne    100008d5 <DMA::unlockChannel(DMAChannel*)+0x1f>
100008c5:	83 ec 0c             	sub    esp,0xc
100008c8:	68 00 00 00 00       	push   0x0	100008c9: R_386_32	badDma
100008cd:	e8 fc ff ff ff       	call   100008ce <DMA::unlockChannel(DMAChannel*)+0x18>	100008ce: R_386_PC32	Krnl::panic(char const*)
100008d2:	83 c4 10             	add    esp,0x10
100008d5:	e8 fc ff ff ff       	call   100008d6 <DMA::unlockChannel(DMAChannel*)+0x20>	100008d6: R_386_PC32	lockScheduler()
100008da:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100008e1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100008e3:	89 d0                	mov    eax,edx
100008e5:	0f a3 ca             	bt     edx,ecx
100008e8:	72 24                	jb     1000090e <DMA::unlockChannel(DMAChannel*)+0x58>
100008ea:	83 ec 0c             	sub    esp,0xc
100008ed:	ba 01 00 00 00       	mov    edx,0x1
100008f2:	d3 e2                	shl    edx,cl
100008f4:	09 d0                	or     eax,edx
100008f6:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100008fc:	53                   	push   ebx
100008fd:	e8 fc ff ff ff       	call   100008fe <DMA::unlockChannel(DMAChannel*)+0x48>	100008fe: R_386_PC32	DMAChannel::~DMAChannel()
10000902:	5a                   	pop    edx
10000903:	59                   	pop    ecx
10000904:	6a 18                	push   0x18
10000906:	53                   	push   ebx
10000907:	e8 fc ff ff ff       	call   10000908 <DMA::unlockChannel(DMAChannel*)+0x52>	10000908: R_386_PC32	operator delete(void*, unsigned long)
1000090c:	eb 0d                	jmp    1000091b <DMA::unlockChannel(DMAChannel*)+0x65>
1000090e:	83 ec 0c             	sub    esp,0xc
10000911:	68 00 00 00 00       	push   0x0	10000912: R_386_32	badBook
10000916:	e8 fc ff ff ff       	call   10000917 <DMA::unlockChannel(DMAChannel*)+0x61>	10000917: R_386_PC32	Krnl::panic(char const*)
1000091b:	83 c4 10             	add    esp,0x10
1000091e:	58                   	pop    eax
1000091f:	5b                   	pop    ebx
10000920:	5e                   	pop    esi
10000921:	e9 fc ff ff ff       	jmp    10000922 <DMA::unlockChannel(DMAChannel*)+0x6c>	10000922: R_386_PC32	unlockScheduler()

10000926 <PS2::PS2()>:
10000926:	55                   	push   ebp
10000927:	89 e5                	mov    ebp,esp
10000929:	83 ec 08             	sub    esp,0x8
1000092c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092f:	83 ec 08             	sub    esp,0x8
10000932:	68 00 00 00 00       	push   0x0	10000933: R_386_32	ps2ctrlname
10000937:	50                   	push   eax
10000938:	e8 fc ff ff ff       	call   10000939 <PS2::PS2()+0x13>	10000939: R_386_PC32	Bus::Bus(char const*)
1000093d:	83 c4 10             	add    esp,0x10
10000940:	ba 08 00 00 00       	mov    edx,0x8	10000941: R_386_32	vtable for PS2
10000945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000948:	89 10                	mov    DWORD PTR [eax],edx
1000094a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000094d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000953:	0f b6 d0             	movzx  edx,al
10000956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000959:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000969:	0f b6 d0             	movzx  edx,al
1000096c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000977:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000097d:	8d 50 01             	lea    edx,[eax+0x1]
10000980:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000983:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000989:	0f b6 d0             	movzx  edx,al
1000098c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000993:	83 e1 3f             	and    ecx,0x3f
10000996:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000099a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009a3:	0f b6 d0             	movzx  edx,al
100009a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a9:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100009b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009b9:	0f b6 d0             	movzx  edx,al
100009bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bf:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100009c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009cd:	8d 50 01             	lea    edx,[eax+0x1]
100009d0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009d9:	0f b6 d0             	movzx  edx,al
100009dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009e3:	83 e1 3f             	and    ecx,0x3f
100009e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009ea:	90                   	nop
100009eb:	c9                   	leave  
100009ec:	c3                   	ret    
100009ed:	90                   	nop

100009ee <PS2::open(int, int, void*)>:
100009ee:	55                   	push   ebp
100009ef:	89 e5                	mov    ebp,esp
100009f1:	53                   	push   ebx
100009f2:	83 ec 24             	sub    esp,0x24
100009f5:	e8 fc ff ff ff       	call   100009f6 <PS2::open(int, int, void*)+0x8>	100009f6: R_386_PC32	lockScheduler()
100009fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a01:	83 ec 08             	sub    esp,0x8
10000a04:	68 ad 00 00 00       	push   0xad
10000a09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a0c:	e8 fc ff ff ff       	call   10000a0d <PS2::open(int, int, void*)+0x1f>	10000a0d: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a11:	83 c4 10             	add    esp,0x10
10000a14:	83 ec 08             	sub    esp,0x8
10000a17:	68 a7 00 00 00       	push   0xa7
10000a1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a1f:	e8 fc ff ff ff       	call   10000a20 <PS2::open(int, int, void*)+0x32>	10000a20: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a24:	83 c4 10             	add    esp,0x10
10000a27:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000a2d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000a30:	89 c2                	mov    edx,eax
10000a32:	ec                   	in     al,dx
10000a33:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000a36:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000a3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000a3f:	89 c2                	mov    edx,eax
10000a41:	ec                   	in     al,dx
10000a42:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000a45:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000a4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a4e:	89 c2                	mov    edx,eax
10000a50:	ec                   	in     al,dx
10000a51:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000a54:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000a5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000a5d:	89 c2                	mov    edx,eax
10000a5f:	ec                   	in     al,dx
10000a60:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000a63:	83 ec 08             	sub    esp,0x8
10000a66:	68 aa 00 00 00       	push   0xaa
10000a6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a6e:	e8 fc ff ff ff       	call   10000a6f <PS2::open(int, int, void*)+0x81>	10000a6f: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a73:	83 c4 10             	add    esp,0x10
10000a76:	83 ec 0c             	sub    esp,0xc
10000a79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a7c:	e8 fc ff ff ff       	call   10000a7d <PS2::open(int, int, void*)+0x8f>	10000a7d: R_386_PC32	PS2::controllerRead()
10000a81:	83 c4 10             	add    esp,0x10
10000a84:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a87:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a8b:	74 65                	je     10000af2 <PS2::open(int, int, void*)+0x104>
10000a8d:	83 ec 0c             	sub    esp,0xc
10000a90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a93:	e8 fc ff ff ff       	call   10000a94 <PS2::open(int, int, void*)+0xa6>	10000a94: R_386_PC32	PS2::controllerRead()
10000a98:	83 c4 10             	add    esp,0x10
10000a9b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a9e:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000aa2:	74 4e                	je     10000af2 <PS2::open(int, int, void*)+0x104>
10000aa4:	83 ec 08             	sub    esp,0x8
10000aa7:	68 aa 00 00 00       	push   0xaa
10000aac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aaf:	e8 fc ff ff ff       	call   10000ab0 <PS2::open(int, int, void*)+0xc2>	10000ab0: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ab4:	83 c4 10             	add    esp,0x10
10000ab7:	83 ec 08             	sub    esp,0x8
10000aba:	68 aa 00 00 00       	push   0xaa
10000abf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac2:	e8 fc ff ff ff       	call   10000ac3 <PS2::open(int, int, void*)+0xd5>	10000ac3: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ac7:	83 c4 10             	add    esp,0x10
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ad0:	e8 fc ff ff ff       	call   10000ad1 <PS2::open(int, int, void*)+0xe3>	10000ad1: R_386_PC32	PS2::controllerRead()
10000ad5:	83 c4 10             	add    esp,0x10
10000ad8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000adb:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000adf:	74 11                	je     10000af2 <PS2::open(int, int, void*)+0x104>
10000ae1:	83 ec 0c             	sub    esp,0xc
10000ae4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ae7:	e8 fc ff ff ff       	call   10000ae8 <PS2::open(int, int, void*)+0xfa>	10000ae8: R_386_PC32	PS2::controllerRead()
10000aec:	83 c4 10             	add    esp,0x10
10000aef:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000af2:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10000af9:	83 ec 08             	sub    esp,0x8
10000afc:	6a 20                	push   0x20
10000afe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b01:	e8 fc ff ff ff       	call   10000b02 <PS2::open(int, int, void*)+0x114>	10000b02: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b06:	83 c4 10             	add    esp,0x10
10000b09:	83 ec 0c             	sub    esp,0xc
10000b0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0f:	e8 fc ff ff ff       	call   10000b10 <PS2::open(int, int, void*)+0x122>	10000b10: R_386_PC32	PS2::controllerRead()
10000b14:	83 c4 10             	add    esp,0x10
10000b17:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10000b1a:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10000b1e:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10000b22:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10000b26:	83 ec 04             	sub    esp,0x4
10000b29:	50                   	push   eax
10000b2a:	6a 60                	push   0x60
10000b2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b2f:	e8 fc ff ff ff       	call   10000b30 <PS2::open(int, int, void*)+0x142>	10000b30: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10000b34:	83 c4 10             	add    esp,0x10
10000b37:	83 ec 08             	sub    esp,0x8
10000b3a:	68 ae 00 00 00       	push   0xae
10000b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b42:	e8 fc ff ff ff       	call   10000b43 <PS2::open(int, int, void*)+0x155>	10000b43: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b47:	83 c4 10             	add    esp,0x10
10000b4a:	83 ec 08             	sub    esp,0x8
10000b4d:	68 a8 00 00 00       	push   0xa8
10000b52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b55:	e8 fc ff ff ff       	call   10000b56 <PS2::open(int, int, void*)+0x168>	10000b56: R_386_PC32	PS2::controllerWrite(unsigned char)
10000b5a:	83 c4 10             	add    esp,0x10
10000b5d:	e8 fc ff ff ff       	call   10000b5e <PS2::open(int, int, void*)+0x170>	10000b5e: R_386_PC32	unlockScheduler()
10000b62:	83 ec 0c             	sub    esp,0xc
10000b65:	68 60 01 00 00       	push   0x160
10000b6a:	e8 fc ff ff ff       	call   10000b6b <PS2::open(int, int, void*)+0x17d>	10000b6b: R_386_PC32	operator new(unsigned long)
10000b6f:	83 c4 10             	add    esp,0x10
10000b72:	89 c3                	mov    ebx,eax
10000b74:	83 ec 0c             	sub    esp,0xc
10000b77:	53                   	push   ebx
10000b78:	e8 fc ff ff ff       	call   10000b79 <PS2::open(int, int, void*)+0x18b>	10000b79: R_386_PC32	PS2Port::PS2Port()
10000b7d:	83 c4 10             	add    esp,0x10
10000b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b83:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10000b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b8f:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10000b95:	83 ec 08             	sub    esp,0x8
10000b98:	52                   	push   edx
10000b99:	50                   	push   eax
10000b9a:	e8 fc ff ff ff       	call   10000b9b <PS2::open(int, int, void*)+0x1ad>	10000b9b: R_386_PC32	Device::addChild(Device*)
10000b9f:	83 c4 10             	add    esp,0x10
10000ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba5:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10000bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000bb4:	8b 00                	mov    eax,DWORD PTR [eax]
10000bb6:	83 c0 08             	add    eax,0x8
10000bb9:	8b 00                	mov    eax,DWORD PTR [eax]
10000bbb:	6a 00                	push   0x0
10000bbd:	6a 00                	push   0x0
10000bbf:	6a 00                	push   0x0
10000bc1:	52                   	push   edx
10000bc2:	ff d0                	call   eax
10000bc4:	83 c4 10             	add    esp,0x10
10000bc7:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000bcb:	75 65                	jne    10000c32 <PS2::open(int, int, void*)+0x244>
10000bcd:	83 ec 0c             	sub    esp,0xc
10000bd0:	68 60 01 00 00       	push   0x160
10000bd5:	e8 fc ff ff ff       	call   10000bd6 <PS2::open(int, int, void*)+0x1e8>	10000bd6: R_386_PC32	operator new(unsigned long)
10000bda:	83 c4 10             	add    esp,0x10
10000bdd:	89 c3                	mov    ebx,eax
10000bdf:	83 ec 0c             	sub    esp,0xc
10000be2:	53                   	push   ebx
10000be3:	e8 fc ff ff ff       	call   10000be4 <PS2::open(int, int, void*)+0x1f6>	10000be4: R_386_PC32	PS2Port::PS2Port()
10000be8:	83 c4 10             	add    esp,0x10
10000beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bee:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bfa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10000c00:	83 ec 08             	sub    esp,0x8
10000c03:	52                   	push   edx
10000c04:	50                   	push   eax
10000c05:	e8 fc ff ff ff       	call   10000c06 <PS2::open(int, int, void*)+0x218>	10000c06: R_386_PC32	Device::addChild(Device*)
10000c0a:	83 c4 10             	add    esp,0x10
10000c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c10:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10000c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c19:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10000c1f:	8b 00                	mov    eax,DWORD PTR [eax]
10000c21:	83 c0 08             	add    eax,0x8
10000c24:	8b 00                	mov    eax,DWORD PTR [eax]
10000c26:	6a 00                	push   0x0
10000c28:	6a 00                	push   0x0
10000c2a:	6a 01                	push   0x1
10000c2c:	52                   	push   edx
10000c2d:	ff d0                	call   eax
10000c2f:	83 c4 10             	add    esp,0x10
10000c32:	b8 00 00 00 00       	mov    eax,0x0
10000c37:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000c3a:	c9                   	leave  
10000c3b:	c3                   	ret    

10000c3c <PS2::close(int, int, void*)>:
10000c3c:	b8 00 00 00 00       	mov    eax,0x0
10000c41:	c3                   	ret    

10000c42 <PS2::detect()>:
10000c42:	90                   	nop
10000c43:	c3                   	ret    

10000c44 <PS2::controllerWrite(unsigned char)>:
10000c44:	55                   	push   ebp
10000c45:	89 e5                	mov    ebp,esp
10000c47:	83 ec 14             	sub    esp,0x14
10000c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000c4d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000c50:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000c57:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000c5d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000c60:	89 c2                	mov    edx,eax
10000c62:	ec                   	in     al,dx
10000c63:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c66:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c69:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000c6c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c70:	83 e0 40             	and    eax,0x40
10000c73:	85 c0                	test   eax,eax
10000c75:	75 2d                	jne    10000ca4 <PS2::controllerWrite(unsigned char)+0x60>
10000c77:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000c7a:	84 c0                	test   al,al
10000c7c:	78 26                	js     10000ca4 <PS2::controllerWrite(unsigned char)+0x60>
10000c7e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c82:	83 e0 02             	and    eax,0x2
10000c85:	85 c0                	test   eax,eax
10000c87:	74 17                	je     10000ca0 <PS2::controllerWrite(unsigned char)+0x5c>
10000c89:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000c8c:	8d 50 01             	lea    edx,[eax+0x1]
10000c8f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000c92:	3d 20 03 00 00       	cmp    eax,0x320
10000c97:	0f 94 c0             	sete   al
10000c9a:	84 c0                	test   al,al
10000c9c:	75 05                	jne    10000ca3 <PS2::controllerWrite(unsigned char)+0x5f>
10000c9e:	eb b7                	jmp    10000c57 <PS2::controllerWrite(unsigned char)+0x13>
10000ca0:	90                   	nop
10000ca1:	eb 01                	jmp    10000ca4 <PS2::controllerWrite(unsigned char)+0x60>
10000ca3:	90                   	nop
10000ca4:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10000ca8:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10000cae:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000cb1:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000cb4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000cb7:	ee                   	out    dx,al
10000cb8:	b0 01                	mov    al,0x1
10000cba:	c9                   	leave  
10000cbb:	c3                   	ret    

10000cbc <PS2::controllerWrite(unsigned char, unsigned char)>:
10000cbc:	55                   	push   ebp
10000cbd:	89 e5                	mov    ebp,esp
10000cbf:	83 ec 28             	sub    esp,0x28
10000cc2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000cc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000cc8:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10000ccb:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10000cce:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10000cd2:	50                   	push   eax
10000cd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cd6:	e8 fc ff ff ff       	call   10000cd7 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10000cd7: R_386_PC32	PS2::controllerWrite(unsigned char)
10000cdb:	83 c4 08             	add    esp,0x8
10000cde:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000ce5:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000ceb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000cee:	89 c2                	mov    edx,eax
10000cf0:	ec                   	in     al,dx
10000cf1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cf4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000cf7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000cfa:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000cfe:	83 e0 40             	and    eax,0x40
10000d01:	85 c0                	test   eax,eax
10000d03:	75 07                	jne    10000d0c <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10000d05:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000d08:	84 c0                	test   al,al
10000d0a:	79 18                	jns    10000d24 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10000d0c:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d10:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000d16:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000d19:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000d1c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000d1f:	ee                   	out    dx,al
10000d20:	b0 00                	mov    al,0x0
10000d22:	eb 4f                	jmp    10000d73 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d24:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d28:	83 e0 02             	and    eax,0x2
10000d2b:	85 c0                	test   eax,eax
10000d2d:	74 2d                	je     10000d5c <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10000d2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000d32:	8d 50 01             	lea    edx,[eax+0x1]
10000d35:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000d38:	3d 20 03 00 00       	cmp    eax,0x320
10000d3d:	0f 94 c0             	sete   al
10000d40:	84 c0                	test   al,al
10000d42:	74 a1                	je     10000ce5 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10000d44:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d48:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000d4e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000d51:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000d54:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d57:	ee                   	out    dx,al
10000d58:	b0 00                	mov    al,0x0
10000d5a:	eb 17                	jmp    10000d73 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000d5c:	90                   	nop
10000d5d:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000d61:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000d67:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000d6a:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000d6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000d70:	ee                   	out    dx,al
10000d71:	b0 01                	mov    al,0x1
10000d73:	c9                   	leave  
10000d74:	c3                   	ret    
10000d75:	90                   	nop

10000d76 <PS2::controllerRead()>:
10000d76:	55                   	push   ebp
10000d77:	89 e5                	mov    ebp,esp
10000d79:	83 ec 20             	sub    esp,0x20
10000d7c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000d83:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000d89:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000d8c:	89 c2                	mov    edx,eax
10000d8e:	ec                   	in     al,dx
10000d8f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d92:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d95:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000d98:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d9c:	83 e0 40             	and    eax,0x40
10000d9f:	85 c0                	test   eax,eax
10000da1:	75 07                	jne    10000daa <PS2::controllerRead()+0x34>
10000da3:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000da6:	84 c0                	test   al,al
10000da8:	79 04                	jns    10000dae <PS2::controllerRead()+0x38>
10000daa:	b0 00                	mov    al,0x0
10000dac:	eb 48                	jmp    10000df6 <PS2::controllerRead()+0x80>
10000dae:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000db2:	83 e0 01             	and    eax,0x1
10000db5:	85 c0                	test   eax,eax
10000db7:	75 29                	jne    10000de2 <PS2::controllerRead()+0x6c>
10000db9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000dbc:	8d 50 01             	lea    edx,[eax+0x1]
10000dbf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000dc2:	3d 40 06 00 00       	cmp    eax,0x640
10000dc7:	0f 94 c0             	sete   al
10000dca:	84 c0                	test   al,al
10000dcc:	74 b5                	je     10000d83 <PS2::controllerRead()+0xd>
10000dce:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000dd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000dd7:	89 c2                	mov    edx,eax
10000dd9:	ec                   	in     al,dx
10000dda:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ddd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000de0:	eb 14                	jmp    10000df6 <PS2::controllerRead()+0x80>
10000de2:	90                   	nop
10000de3:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000de9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000dec:	89 c2                	mov    edx,eax
10000dee:	ec                   	in     al,dx
10000def:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000df2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000df5:	90                   	nop
10000df6:	c9                   	leave  
10000df7:	c3                   	ret    

10000df8 <PS2Keyboard::PS2Keyboard()>:
10000df8:	55                   	push   ebp
10000df9:	89 e5                	mov    ebp,esp
10000dfb:	83 ec 08             	sub    esp,0x8
10000dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e01:	83 ec 08             	sub    esp,0x8
10000e04:	68 00 00 00 00       	push   0x0	10000e05: R_386_32	ps2keyname
10000e09:	50                   	push   eax
10000e0a:	e8 fc ff ff ff       	call   10000e0b <PS2Keyboard::PS2Keyboard()+0x13>	10000e0b: R_386_PC32	Keyboard::Keyboard(char const*)
10000e0f:	83 c4 10             	add    esp,0x10
10000e12:	ba 08 00 00 00       	mov    edx,0x8	10000e13: R_386_32	vtable for PS2Keyboard
10000e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e1a:	89 10                	mov    DWORD PTR [eax],edx
10000e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e1f:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10000e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e29:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10000e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e33:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10000e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e3d:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10000e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e47:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e51:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10000e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e5b:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10000e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e65:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10000e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e6f:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10000e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e79:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10000e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e83:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10000e8a:	90                   	nop
10000e8b:	c9                   	leave  
10000e8c:	c3                   	ret    
10000e8d:	90                   	nop

10000e8e <PS2Keyboard::~PS2Keyboard()>:
10000e8e:	55                   	push   ebp
10000e8f:	89 e5                	mov    ebp,esp
10000e91:	83 ec 08             	sub    esp,0x8
10000e94:	ba 08 00 00 00       	mov    edx,0x8	10000e95: R_386_32	vtable for PS2Keyboard
10000e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e9c:	89 10                	mov    DWORD PTR [eax],edx
10000e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ea1:	83 ec 0c             	sub    esp,0xc
10000ea4:	50                   	push   eax
10000ea5:	e8 fc ff ff ff       	call   10000ea6 <PS2Keyboard::~PS2Keyboard()+0x18>	10000ea6: R_386_PC32	Keyboard::~Keyboard()
10000eaa:	83 c4 10             	add    esp,0x10
10000ead:	90                   	nop
10000eae:	c9                   	leave  
10000eaf:	c3                   	ret    

10000eb0 <PS2Keyboard::~PS2Keyboard()>:
10000eb0:	55                   	push   ebp
10000eb1:	89 e5                	mov    ebp,esp
10000eb3:	83 ec 08             	sub    esp,0x8
10000eb6:	83 ec 0c             	sub    esp,0xc
10000eb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ebc:	e8 fc ff ff ff       	call   10000ebd <PS2Keyboard::~PS2Keyboard()+0xd>	10000ebd: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10000ec1:	83 c4 10             	add    esp,0x10
10000ec4:	83 ec 08             	sub    esp,0x8
10000ec7:	68 70 01 00 00       	push   0x170
10000ecc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ecf:	e8 fc ff ff ff       	call   10000ed0 <PS2Keyboard::~PS2Keyboard()+0x20>	10000ed0: R_386_PC32	operator delete(void*, unsigned long)
10000ed4:	83 c4 10             	add    esp,0x10
10000ed7:	c9                   	leave  
10000ed8:	c3                   	ret    
10000ed9:	90                   	nop

10000eda <PS2Keyboard::setRepeatRate(int)>:
10000eda:	c3                   	ret    
10000edb:	90                   	nop

10000edc <PS2Keyboard::setRepeatDelay(int)>:
10000edc:	c3                   	ret    
10000edd:	90                   	nop

10000ede <PS2Keyboard::sendKey(unsigned short, bool)>:
10000ede:	83 ec 1c             	sub    esp,0x1c
10000ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000ee5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000ee9:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000eed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000ef1:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000ef6:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000efd:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000f03:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000f08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f0c:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000f10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f14:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000f19:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000f1e:	83 c4 1c             	add    esp,0x1c
10000f21:	e9 fc ff ff ff       	jmp    10000f22 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10000f22: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f26 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10000f26:	83 ec 1c             	sub    esp,0x1c
10000f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000f2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000f31:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000f35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000f39:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000f3e:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000f45:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000f4b:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000f50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f54:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000f58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f5c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000f61:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000f66:	83 c4 1c             	add    esp,0x1c
10000f69:	e9 fc ff ff ff       	jmp    10000f6a <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10000f6a: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000f6e <PS2Keyboard::updateKeyboardLEDs()>:
10000f6e:	56                   	push   esi
10000f6f:	53                   	push   ebx
10000f70:	83 ec 0c             	sub    esp,0xc
10000f73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10000f77:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10000f7d:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10000f84:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10000f87:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10000f8e:	09 c3                	or     ebx,eax
10000f90:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10000f96:	68 ed 00 00 00       	push   0xed
10000f9b:	0f b6 db             	movzx  ebx,bl
10000f9e:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000fa4:	e8 fc ff ff ff       	call   10000fa5 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10000fa5: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000fa9:	58                   	pop    eax
10000faa:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000fb0:	e8 fc ff ff ff       	call   10000fb1 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10000fb1: R_386_PC32	PS2Port::deviceRead()
10000fb5:	5a                   	pop    edx
10000fb6:	59                   	pop    ecx
10000fb7:	53                   	push   ebx
10000fb8:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000fbe:	e8 fc ff ff ff       	call   10000fbf <PS2Keyboard::updateKeyboardLEDs()+0x51>	10000fbf: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000fc3:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10000fc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000fcd:	83 c4 14             	add    esp,0x14
10000fd0:	5b                   	pop    ebx
10000fd1:	5e                   	pop    esi
10000fd2:	e9 fc ff ff ff       	jmp    10000fd3 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10000fd3: R_386_PC32	PS2Port::deviceRead()

10000fd7 <ps2KeyboardHandler(regs*, void*)>:
10000fd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000fdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000fdf:	eb 01                	jmp    10000fe2 <PS2Keyboard::handler()>
10000fe1:	90                   	nop

10000fe2 <PS2Keyboard::handler()>:
10000fe2:	57                   	push   edi
10000fe3:	56                   	push   esi
10000fe4:	53                   	push   ebx
10000fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000fe9:	e4 60                	in     al,0x60
10000feb:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10000ff2:	74 29                	je     1000101d <PS2Keyboard::handler()+0x3b>
10000ff4:	88 c2                	mov    dl,al
10000ff6:	3c e0                	cmp    al,0xe0
10000ff8:	75 0c                	jne    10001006 <PS2Keyboard::handler()+0x24>
10000ffa:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10001001:	e9 17 07 00 00       	jmp    1000171d <PS2Keyboard::handler()+0x73b>
10001006:	84 c0                	test   al,al
10001008:	0f 89 52 01 00 00    	jns    10001160 <PS2Keyboard::handler()+0x17e>
1000100e:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001015:	83 e2 7f             	and    edx,0x7f
10001018:	e9 43 01 00 00       	jmp    10001160 <PS2Keyboard::handler()+0x17e>
1000101d:	3c e0                	cmp    al,0xe0
1000101f:	74 d9                	je     10000ffa <PS2Keyboard::handler()+0x18>
10001021:	3c f0                	cmp    al,0xf0
10001023:	75 0c                	jne    10001031 <PS2Keyboard::handler()+0x4f>
10001025:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
1000102c:	e9 ec 06 00 00       	jmp    1000171d <PS2Keyboard::handler()+0x73b>
10001031:	3c 12                	cmp    al,0x12
10001033:	75 1f                	jne    10001054 <PS2Keyboard::handler()+0x72>
10001035:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000103b:	83 f0 01             	xor    eax,0x1
1000103e:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10001044:	52                   	push   edx
10001045:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000104c:	50                   	push   eax
1000104d:	68 04 01 00 00       	push   0x104
10001052:	eb 23                	jmp    10001077 <PS2Keyboard::handler()+0x95>
10001054:	76 3d                	jbe    10001093 <PS2Keyboard::handler()+0xb1>
10001056:	3c 14                	cmp    al,0x14
10001058:	75 62                	jne    100010bc <PS2Keyboard::handler()+0xda>
1000105a:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001060:	83 f0 01             	xor    eax,0x1
10001063:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10001069:	51                   	push   ecx
1000106a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001071:	50                   	push   eax
10001072:	68 00 01 00 00       	push   0x100
10001077:	56                   	push   esi
10001078:	e8 fc ff ff ff       	call   10001079 <PS2Keyboard::handler()+0x97>	10001079: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
1000107d:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001084:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000108b:	83 c4 10             	add    esp,0x10
1000108e:	e9 8a 06 00 00       	jmp    1000171d <PS2Keyboard::handler()+0x73b>
10001093:	3c 11                	cmp    al,0x11
10001095:	75 2d                	jne    100010c4 <PS2Keyboard::handler()+0xe2>
10001097:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000109d:	83 f0 01             	xor    eax,0x1
100010a0:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
100010a6:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
100010ac:	50                   	push   eax
100010ad:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100010b4:	50                   	push   eax
100010b5:	68 01 01 00 00       	push   0x101
100010ba:	eb bb                	jmp    10001077 <PS2Keyboard::handler()+0x95>
100010bc:	3c 59                	cmp    al,0x59
100010be:	0f 84 71 ff ff ff    	je     10001035 <PS2Keyboard::handler()+0x53>
100010c4:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100010cb:	0f 84 b1 01 00 00    	je     10001282 <PS2Keyboard::handler()+0x2a0>
100010d1:	3c 6b                	cmp    al,0x6b
100010d3:	0f 84 f2 00 00 00    	je     100011cb <PS2Keyboard::handler()+0x1e9>
100010d9:	77 50                	ja     1000112b <PS2Keyboard::handler()+0x149>
100010db:	3c 51                	cmp    al,0x51
100010dd:	0f 84 37 01 00 00    	je     1000121a <PS2Keyboard::handler()+0x238>
100010e3:	77 23                	ja     10001108 <PS2Keyboard::handler()+0x126>
100010e5:	3c 49                	cmp    al,0x49
100010e7:	0f 84 0d 01 00 00    	je     100011fa <PS2Keyboard::handler()+0x218>
100010ed:	3c 4a                	cmp    al,0x4a
100010ef:	0f 85 29 04 00 00    	jne    1000151e <PS2Keyboard::handler()+0x53c>
100010f5:	50                   	push   eax
100010f6:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100010fd:	50                   	push   eax
100010fe:	68 1f 03 00 00       	push   0x31f
10001103:	e9 c6 03 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001108:	3c 5a                	cmp    al,0x5a
1000110a:	0f 84 5f 01 00 00    	je     1000126f <PS2Keyboard::handler()+0x28d>
10001110:	3c 69                	cmp    al,0x69
10001112:	0f 85 06 04 00 00    	jne    1000151e <PS2Keyboard::handler()+0x53c>
10001118:	51                   	push   ecx
10001119:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001120:	50                   	push   eax
10001121:	68 01 02 00 00       	push   0x201
10001126:	e9 a3 03 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000112b:	3c 71                	cmp    al,0x71
1000112d:	0f 84 16 01 00 00    	je     10001249 <PS2Keyboard::handler()+0x267>
10001133:	77 15                	ja     1000114a <PS2Keyboard::handler()+0x168>
10001135:	3c 6c                	cmp    al,0x6c
10001137:	0f 84 f0 00 00 00    	je     1000122d <PS2Keyboard::handler()+0x24b>
1000113d:	3c 70                	cmp    al,0x70
1000113f:	0f 84 17 01 00 00    	je     1000125c <PS2Keyboard::handler()+0x27a>
10001145:	e9 d4 03 00 00       	jmp    1000151e <PS2Keyboard::handler()+0x53c>
1000114a:	3c 74                	cmp    al,0x74
1000114c:	0f 84 8c 00 00 00    	je     100011de <PS2Keyboard::handler()+0x1fc>
10001152:	3c 75                	cmp    al,0x75
10001154:	74 4a                	je     100011a0 <PS2Keyboard::handler()+0x1be>
10001156:	3c 72                	cmp    al,0x72
10001158:	0f 85 c0 03 00 00    	jne    1000151e <PS2Keyboard::handler()+0x53c>
1000115e:	eb 58                	jmp    100011b8 <PS2Keyboard::handler()+0x1d6>
10001160:	80 fa 2a             	cmp    dl,0x2a
10001163:	0f 84 cc fe ff ff    	je     10001035 <PS2Keyboard::handler()+0x53>
10001169:	0f 87 97 05 00 00    	ja     10001706 <PS2Keyboard::handler()+0x724>
1000116f:	80 fa 1d             	cmp    dl,0x1d
10001172:	0f 84 e2 fe ff ff    	je     1000105a <PS2Keyboard::handler()+0x78>
10001178:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000117f:	0f 84 ce 03 00 00    	je     10001553 <PS2Keyboard::handler()+0x571>
10001185:	80 fa 4b             	cmp    dl,0x4b
10001188:	74 41                	je     100011cb <PS2Keyboard::handler()+0x1e9>
1000118a:	77 27                	ja     100011b3 <PS2Keyboard::handler()+0x1d1>
1000118c:	80 fa 47             	cmp    dl,0x47
1000118f:	0f 84 98 00 00 00    	je     1000122d <PS2Keyboard::handler()+0x24b>
10001195:	0f 86 96 03 00 00    	jbe    10001531 <PS2Keyboard::handler()+0x54f>
1000119b:	80 fa 48             	cmp    dl,0x48
1000119e:	75 51                	jne    100011f1 <PS2Keyboard::handler()+0x20f>
100011a0:	50                   	push   eax
100011a1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011a8:	50                   	push   eax
100011a9:	68 0b 02 00 00       	push   0x20b
100011ae:	e9 1b 03 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100011b3:	80 fa 50             	cmp    dl,0x50
100011b6:	75 55                	jne    1000120d <PS2Keyboard::handler()+0x22b>
100011b8:	50                   	push   eax
100011b9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011c0:	50                   	push   eax
100011c1:	68 0c 02 00 00       	push   0x20c
100011c6:	e9 03 03 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100011cb:	50                   	push   eax
100011cc:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011d3:	50                   	push   eax
100011d4:	68 0d 02 00 00       	push   0x20d
100011d9:	e9 f0 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100011de:	50                   	push   eax
100011df:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011e6:	50                   	push   eax
100011e7:	68 0e 02 00 00       	push   0x20e
100011ec:	e9 dd 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100011f1:	80 fa 49             	cmp    dl,0x49
100011f4:	0f 85 24 03 00 00    	jne    1000151e <PS2Keyboard::handler()+0x53c>
100011fa:	50                   	push   eax
100011fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001202:	50                   	push   eax
10001203:	68 04 02 00 00       	push   0x204
10001208:	e9 c1 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000120d:	0f 86 2f 03 00 00    	jbe    10001542 <PS2Keyboard::handler()+0x560>
10001213:	80 fa 52             	cmp    dl,0x52
10001216:	74 44                	je     1000125c <PS2Keyboard::handler()+0x27a>
10001218:	73 26                	jae    10001240 <PS2Keyboard::handler()+0x25e>
1000121a:	57                   	push   edi
1000121b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001222:	50                   	push   eax
10001223:	68 05 02 00 00       	push   0x205
10001228:	e9 a1 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000122d:	53                   	push   ebx
1000122e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001235:	50                   	push   eax
10001236:	68 00 02 00 00       	push   0x200
1000123b:	e9 8e 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001240:	80 fa 53             	cmp    dl,0x53
10001243:	0f 85 d5 02 00 00    	jne    1000151e <PS2Keyboard::handler()+0x53c>
10001249:	52                   	push   edx
1000124a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001251:	50                   	push   eax
10001252:	68 03 02 00 00       	push   0x203
10001257:	e9 72 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000125c:	50                   	push   eax
1000125d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001264:	50                   	push   eax
10001265:	68 02 02 00 00       	push   0x202
1000126a:	e9 5f 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000126f:	50                   	push   eax
10001270:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001277:	50                   	push   eax
10001278:	68 1d 03 00 00       	push   0x31d
1000127d:	e9 4c 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001282:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10001289:	3c 66                	cmp    al,0x66
1000128b:	75 09                	jne    10001296 <PS2Keyboard::handler()+0x2b4>
1000128d:	50                   	push   eax
1000128e:	52                   	push   edx
1000128f:	6a 08                	push   0x8
10001291:	e9 38 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001296:	3c 0d                	cmp    al,0xd
10001298:	75 09                	jne    100012a3 <PS2Keyboard::handler()+0x2c1>
1000129a:	50                   	push   eax
1000129b:	52                   	push   edx
1000129c:	6a 09                	push   0x9
1000129e:	e9 2b 02 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100012a3:	3c 58                	cmp    al,0x58
100012a5:	75 2a                	jne    100012d1 <PS2Keyboard::handler()+0x2ef>
100012a7:	84 d2                	test   dl,dl
100012a9:	75 13                	jne    100012be <PS2Keyboard::handler()+0x2dc>
100012ab:	83 ec 0c             	sub    esp,0xc
100012ae:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
100012b5:	56                   	push   esi
100012b6:	e8 fc ff ff ff       	call   100012b7 <PS2Keyboard::handler()+0x2d5>	100012b7: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012bb:	83 c4 10             	add    esp,0x10
100012be:	50                   	push   eax
100012bf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012c6:	50                   	push   eax
100012c7:	68 80 02 00 00       	push   0x280
100012cc:	e9 fd 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100012d1:	3c 77                	cmp    al,0x77
100012d3:	75 2a                	jne    100012ff <PS2Keyboard::handler()+0x31d>
100012d5:	84 d2                	test   dl,dl
100012d7:	75 13                	jne    100012ec <PS2Keyboard::handler()+0x30a>
100012d9:	83 ec 0c             	sub    esp,0xc
100012dc:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100012e3:	56                   	push   esi
100012e4:	e8 fc ff ff ff       	call   100012e5 <PS2Keyboard::handler()+0x303>	100012e5: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100012e9:	83 c4 10             	add    esp,0x10
100012ec:	50                   	push   eax
100012ed:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100012f4:	50                   	push   eax
100012f5:	68 81 02 00 00       	push   0x281
100012fa:	e9 cf 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100012ff:	3c 7e                	cmp    al,0x7e
10001301:	75 2a                	jne    1000132d <PS2Keyboard::handler()+0x34b>
10001303:	84 d2                	test   dl,dl
10001305:	75 13                	jne    1000131a <PS2Keyboard::handler()+0x338>
10001307:	83 ec 0c             	sub    esp,0xc
1000130a:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10001311:	56                   	push   esi
10001312:	e8 fc ff ff ff       	call   10001313 <PS2Keyboard::handler()+0x331>	10001313: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001317:	83 c4 10             	add    esp,0x10
1000131a:	57                   	push   edi
1000131b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001322:	50                   	push   eax
10001323:	68 82 02 00 00       	push   0x282
10001328:	e9 a1 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000132d:	3c 05                	cmp    al,0x5
1000132f:	75 0c                	jne    1000133d <PS2Keyboard::handler()+0x35b>
10001331:	53                   	push   ebx
10001332:	52                   	push   edx
10001333:	68 00 03 00 00       	push   0x300
10001338:	e9 91 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000133d:	3c 06                	cmp    al,0x6
1000133f:	75 0c                	jne    1000134d <PS2Keyboard::handler()+0x36b>
10001341:	51                   	push   ecx
10001342:	52                   	push   edx
10001343:	68 01 03 00 00       	push   0x301
10001348:	e9 81 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000134d:	3c 04                	cmp    al,0x4
1000134f:	75 0c                	jne    1000135d <PS2Keyboard::handler()+0x37b>
10001351:	50                   	push   eax
10001352:	52                   	push   edx
10001353:	68 02 03 00 00       	push   0x302
10001358:	e9 71 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000135d:	3c 0c                	cmp    al,0xc
1000135f:	75 0c                	jne    1000136d <PS2Keyboard::handler()+0x38b>
10001361:	50                   	push   eax
10001362:	52                   	push   edx
10001363:	68 03 03 00 00       	push   0x303
10001368:	e9 61 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000136d:	3c 03                	cmp    al,0x3
1000136f:	75 0c                	jne    1000137d <PS2Keyboard::handler()+0x39b>
10001371:	50                   	push   eax
10001372:	52                   	push   edx
10001373:	68 04 03 00 00       	push   0x304
10001378:	e9 51 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000137d:	3c 0b                	cmp    al,0xb
1000137f:	75 0c                	jne    1000138d <PS2Keyboard::handler()+0x3ab>
10001381:	50                   	push   eax
10001382:	52                   	push   edx
10001383:	68 05 03 00 00       	push   0x305
10001388:	e9 41 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000138d:	3c 02                	cmp    al,0x2
1000138f:	74 04                	je     10001395 <PS2Keyboard::handler()+0x3b3>
10001391:	3c 83                	cmp    al,0x83
10001393:	75 0c                	jne    100013a1 <PS2Keyboard::handler()+0x3bf>
10001395:	50                   	push   eax
10001396:	52                   	push   edx
10001397:	68 06 03 00 00       	push   0x306
1000139c:	e9 2d 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013a1:	3c 0a                	cmp    al,0xa
100013a3:	75 0c                	jne    100013b1 <PS2Keyboard::handler()+0x3cf>
100013a5:	50                   	push   eax
100013a6:	52                   	push   edx
100013a7:	68 07 03 00 00       	push   0x307
100013ac:	e9 1d 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013b1:	3c 01                	cmp    al,0x1
100013b3:	75 0c                	jne    100013c1 <PS2Keyboard::handler()+0x3df>
100013b5:	57                   	push   edi
100013b6:	52                   	push   edx
100013b7:	68 08 03 00 00       	push   0x308
100013bc:	e9 0d 01 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013c1:	3c 09                	cmp    al,0x9
100013c3:	75 0c                	jne    100013d1 <PS2Keyboard::handler()+0x3ef>
100013c5:	53                   	push   ebx
100013c6:	52                   	push   edx
100013c7:	68 09 03 00 00       	push   0x309
100013cc:	e9 fd 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013d1:	3c 78                	cmp    al,0x78
100013d3:	75 0c                	jne    100013e1 <PS2Keyboard::handler()+0x3ff>
100013d5:	51                   	push   ecx
100013d6:	52                   	push   edx
100013d7:	68 0a 03 00 00       	push   0x30a
100013dc:	e9 ed 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013e1:	3c 07                	cmp    al,0x7
100013e3:	75 0c                	jne    100013f1 <PS2Keyboard::handler()+0x40f>
100013e5:	50                   	push   eax
100013e6:	52                   	push   edx
100013e7:	68 0b 03 00 00       	push   0x30b
100013ec:	e9 dd 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013f1:	3c 5a                	cmp    al,0x5a
100013f3:	75 09                	jne    100013fe <PS2Keyboard::handler()+0x41c>
100013f5:	50                   	push   eax
100013f6:	52                   	push   edx
100013f7:	6a 0a                	push   0xa
100013f9:	e9 d0 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100013fe:	3c 76                	cmp    al,0x76
10001400:	75 0c                	jne    1000140e <PS2Keyboard::handler()+0x42c>
10001402:	50                   	push   eax
10001403:	52                   	push   edx
10001404:	68 0a 02 00 00       	push   0x20a
10001409:	e9 c0 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000140e:	3c 70                	cmp    al,0x70
10001410:	75 0c                	jne    1000141e <PS2Keyboard::handler()+0x43c>
10001412:	50                   	push   eax
10001413:	52                   	push   edx
10001414:	68 10 03 00 00       	push   0x310
10001419:	e9 b0 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000141e:	3c 69                	cmp    al,0x69
10001420:	75 0c                	jne    1000142e <PS2Keyboard::handler()+0x44c>
10001422:	50                   	push   eax
10001423:	52                   	push   edx
10001424:	68 11 03 00 00       	push   0x311
10001429:	e9 a0 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000142e:	3c 72                	cmp    al,0x72
10001430:	75 0c                	jne    1000143e <PS2Keyboard::handler()+0x45c>
10001432:	50                   	push   eax
10001433:	52                   	push   edx
10001434:	68 12 03 00 00       	push   0x312
10001439:	e9 90 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000143e:	3c 7a                	cmp    al,0x7a
10001440:	75 0c                	jne    1000144e <PS2Keyboard::handler()+0x46c>
10001442:	57                   	push   edi
10001443:	52                   	push   edx
10001444:	68 13 03 00 00       	push   0x313
10001449:	e9 80 00 00 00       	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000144e:	3c 6b                	cmp    al,0x6b
10001450:	75 09                	jne    1000145b <PS2Keyboard::handler()+0x479>
10001452:	53                   	push   ebx
10001453:	52                   	push   edx
10001454:	68 14 03 00 00       	push   0x314
10001459:	eb 73                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000145b:	3c 73                	cmp    al,0x73
1000145d:	75 09                	jne    10001468 <PS2Keyboard::handler()+0x486>
1000145f:	51                   	push   ecx
10001460:	52                   	push   edx
10001461:	68 15 03 00 00       	push   0x315
10001466:	eb 66                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001468:	3c 74                	cmp    al,0x74
1000146a:	75 09                	jne    10001475 <PS2Keyboard::handler()+0x493>
1000146c:	50                   	push   eax
1000146d:	52                   	push   edx
1000146e:	68 16 03 00 00       	push   0x316
10001473:	eb 59                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001475:	3c 6c                	cmp    al,0x6c
10001477:	75 09                	jne    10001482 <PS2Keyboard::handler()+0x4a0>
10001479:	50                   	push   eax
1000147a:	52                   	push   edx
1000147b:	68 17 03 00 00       	push   0x317
10001480:	eb 4c                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
10001482:	3c 75                	cmp    al,0x75
10001484:	75 09                	jne    1000148f <PS2Keyboard::handler()+0x4ad>
10001486:	50                   	push   eax
10001487:	52                   	push   edx
10001488:	68 18 03 00 00       	push   0x318
1000148d:	eb 3f                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000148f:	3c 7d                	cmp    al,0x7d
10001491:	75 09                	jne    1000149c <PS2Keyboard::handler()+0x4ba>
10001493:	50                   	push   eax
10001494:	52                   	push   edx
10001495:	68 19 03 00 00       	push   0x319
1000149a:	eb 32                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
1000149c:	3c 71                	cmp    al,0x71
1000149e:	75 09                	jne    100014a9 <PS2Keyboard::handler()+0x4c7>
100014a0:	50                   	push   eax
100014a1:	52                   	push   edx
100014a2:	68 1a 03 00 00       	push   0x31a
100014a7:	eb 25                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100014a9:	3c 7b                	cmp    al,0x7b
100014ab:	75 09                	jne    100014b6 <PS2Keyboard::handler()+0x4d4>
100014ad:	50                   	push   eax
100014ae:	52                   	push   edx
100014af:	68 1c 03 00 00       	push   0x31c
100014b4:	eb 18                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100014b6:	3c 79                	cmp    al,0x79
100014b8:	75 09                	jne    100014c3 <PS2Keyboard::handler()+0x4e1>
100014ba:	57                   	push   edi
100014bb:	52                   	push   edx
100014bc:	68 1b 03 00 00       	push   0x31b
100014c1:	eb 0b                	jmp    100014ce <PS2Keyboard::handler()+0x4ec>
100014c3:	3c 7c                	cmp    al,0x7c
100014c5:	75 0f                	jne    100014d6 <PS2Keyboard::handler()+0x4f4>
100014c7:	53                   	push   ebx
100014c8:	52                   	push   edx
100014c9:	68 1e 03 00 00       	push   0x31e
100014ce:	56                   	push   esi
100014cf:	e8 fc ff ff ff       	call   100014d0 <PS2Keyboard::handler()+0x4ee>	100014d0: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100014d4:	eb 45                	jmp    1000151b <PS2Keyboard::handler()+0x539>
100014d6:	0f b6 c0             	movzx  eax,al
100014d9:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100014df:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100014e6:	74 16                	je     100014fe <PS2Keyboard::handler()+0x51c>
100014e8:	84 c9                	test   cl,cl
100014ea:	74 09                	je     100014f5 <PS2Keyboard::handler()+0x513>
100014ec:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014ef: R_386_32	PS2Keyboard::internalMapCapUpper
100014f3:	eb 1d                	jmp    10001512 <PS2Keyboard::handler()+0x530>
100014f5:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100014f8: R_386_32	PS2Keyboard::internalMapperUpper
100014fc:	eb 14                	jmp    10001512 <PS2Keyboard::handler()+0x530>
100014fe:	84 c9                	test   cl,cl
10001500:	74 09                	je     1000150b <PS2Keyboard::handler()+0x529>
10001502:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001505: R_386_32	PS2Keyboard::internalMapCapLower
10001509:	eb 07                	jmp    10001512 <PS2Keyboard::handler()+0x530>
1000150b:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000150e: R_386_32	PS2Keyboard::internalMapperLower
10001512:	51                   	push   ecx
10001513:	52                   	push   edx
10001514:	50                   	push   eax
10001515:	56                   	push   esi
10001516:	e8 fc ff ff ff       	call   10001517 <PS2Keyboard::handler()+0x535>	10001517: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
1000151b:	83 c4 10             	add    esp,0x10
1000151e:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001525:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000152c:	e9 ec 01 00 00       	jmp    1000171d <PS2Keyboard::handler()+0x73b>
10001531:	80 fa 1c             	cmp    dl,0x1c
10001534:	0f 84 35 fd ff ff    	je     1000126f <PS2Keyboard::handler()+0x28d>
1000153a:	80 fa 35             	cmp    dl,0x35
1000153d:	e9 ad fb ff ff       	jmp    100010ef <PS2Keyboard::handler()+0x10d>
10001542:	80 fa 4d             	cmp    dl,0x4d
10001545:	0f 84 93 fc ff ff    	je     100011de <PS2Keyboard::handler()+0x1fc>
1000154b:	80 fa 4f             	cmp    dl,0x4f
1000154e:	e9 bf fb ff ff       	jmp    10001112 <PS2Keyboard::handler()+0x130>
10001553:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
1000155a:	80 fa 0e             	cmp    dl,0xe
1000155d:	75 07                	jne    10001566 <PS2Keyboard::handler()+0x584>
1000155f:	50                   	push   eax
10001560:	51                   	push   ecx
10001561:	e9 29 fd ff ff       	jmp    1000128f <PS2Keyboard::handler()+0x2ad>
10001566:	80 fa 0f             	cmp    dl,0xf
10001569:	75 07                	jne    10001572 <PS2Keyboard::handler()+0x590>
1000156b:	57                   	push   edi
1000156c:	51                   	push   ecx
1000156d:	e9 2a fd ff ff       	jmp    1000129c <PS2Keyboard::handler()+0x2ba>
10001572:	80 fa 3a             	cmp    dl,0x3a
10001575:	75 07                	jne    1000157e <PS2Keyboard::handler()+0x59c>
10001577:	84 c9                	test   cl,cl
10001579:	e9 2b fd ff ff       	jmp    100012a9 <PS2Keyboard::handler()+0x2c7>
1000157e:	80 fa 45             	cmp    dl,0x45
10001581:	75 07                	jne    1000158a <PS2Keyboard::handler()+0x5a8>
10001583:	84 c9                	test   cl,cl
10001585:	e9 4d fd ff ff       	jmp    100012d7 <PS2Keyboard::handler()+0x2f5>
1000158a:	80 fa 46             	cmp    dl,0x46
1000158d:	75 07                	jne    10001596 <PS2Keyboard::handler()+0x5b4>
1000158f:	84 c9                	test   cl,cl
10001591:	e9 6f fd ff ff       	jmp    10001305 <PS2Keyboard::handler()+0x323>
10001596:	80 fa 3b             	cmp    dl,0x3b
10001599:	75 07                	jne    100015a2 <PS2Keyboard::handler()+0x5c0>
1000159b:	53                   	push   ebx
1000159c:	51                   	push   ecx
1000159d:	e9 91 fd ff ff       	jmp    10001333 <PS2Keyboard::handler()+0x351>
100015a2:	80 fa 3c             	cmp    dl,0x3c
100015a5:	75 07                	jne    100015ae <PS2Keyboard::handler()+0x5cc>
100015a7:	52                   	push   edx
100015a8:	51                   	push   ecx
100015a9:	e9 95 fd ff ff       	jmp    10001343 <PS2Keyboard::handler()+0x361>
100015ae:	80 fa 3d             	cmp    dl,0x3d
100015b1:	75 07                	jne    100015ba <PS2Keyboard::handler()+0x5d8>
100015b3:	50                   	push   eax
100015b4:	51                   	push   ecx
100015b5:	e9 99 fd ff ff       	jmp    10001353 <PS2Keyboard::handler()+0x371>
100015ba:	80 fa 3e             	cmp    dl,0x3e
100015bd:	75 07                	jne    100015c6 <PS2Keyboard::handler()+0x5e4>
100015bf:	50                   	push   eax
100015c0:	51                   	push   ecx
100015c1:	e9 9d fd ff ff       	jmp    10001363 <PS2Keyboard::handler()+0x381>
100015c6:	80 fa 3f             	cmp    dl,0x3f
100015c9:	75 07                	jne    100015d2 <PS2Keyboard::handler()+0x5f0>
100015cb:	50                   	push   eax
100015cc:	51                   	push   ecx
100015cd:	e9 a1 fd ff ff       	jmp    10001373 <PS2Keyboard::handler()+0x391>
100015d2:	80 fa 40             	cmp    dl,0x40
100015d5:	75 07                	jne    100015de <PS2Keyboard::handler()+0x5fc>
100015d7:	50                   	push   eax
100015d8:	51                   	push   ecx
100015d9:	e9 a5 fd ff ff       	jmp    10001383 <PS2Keyboard::handler()+0x3a1>
100015de:	80 fa 41             	cmp    dl,0x41
100015e1:	75 07                	jne    100015ea <PS2Keyboard::handler()+0x608>
100015e3:	50                   	push   eax
100015e4:	51                   	push   ecx
100015e5:	e9 ad fd ff ff       	jmp    10001397 <PS2Keyboard::handler()+0x3b5>
100015ea:	80 fa 42             	cmp    dl,0x42
100015ed:	75 07                	jne    100015f6 <PS2Keyboard::handler()+0x614>
100015ef:	50                   	push   eax
100015f0:	51                   	push   ecx
100015f1:	e9 b1 fd ff ff       	jmp    100013a7 <PS2Keyboard::handler()+0x3c5>
100015f6:	80 fa 43             	cmp    dl,0x43
100015f9:	75 07                	jne    10001602 <PS2Keyboard::handler()+0x620>
100015fb:	57                   	push   edi
100015fc:	51                   	push   ecx
100015fd:	e9 b5 fd ff ff       	jmp    100013b7 <PS2Keyboard::handler()+0x3d5>
10001602:	80 fa 44             	cmp    dl,0x44
10001605:	75 07                	jne    1000160e <PS2Keyboard::handler()+0x62c>
10001607:	53                   	push   ebx
10001608:	51                   	push   ecx
10001609:	e9 b9 fd ff ff       	jmp    100013c7 <PS2Keyboard::handler()+0x3e5>
1000160e:	84 d2                	test   dl,dl
10001610:	75 07                	jne    10001619 <PS2Keyboard::handler()+0x637>
10001612:	52                   	push   edx
10001613:	51                   	push   ecx
10001614:	e9 be fd ff ff       	jmp    100013d7 <PS2Keyboard::handler()+0x3f5>
10001619:	80 fa 1c             	cmp    dl,0x1c
1000161c:	75 07                	jne    10001625 <PS2Keyboard::handler()+0x643>
1000161e:	50                   	push   eax
1000161f:	51                   	push   ecx
10001620:	e9 d2 fd ff ff       	jmp    100013f7 <PS2Keyboard::handler()+0x415>
10001625:	80 fa 01             	cmp    dl,0x1
10001628:	75 07                	jne    10001631 <PS2Keyboard::handler()+0x64f>
1000162a:	50                   	push   eax
1000162b:	51                   	push   ecx
1000162c:	e9 d3 fd ff ff       	jmp    10001404 <PS2Keyboard::handler()+0x422>
10001631:	80 fa 52             	cmp    dl,0x52
10001634:	75 07                	jne    1000163d <PS2Keyboard::handler()+0x65b>
10001636:	50                   	push   eax
10001637:	51                   	push   ecx
10001638:	e9 d7 fd ff ff       	jmp    10001414 <PS2Keyboard::handler()+0x432>
1000163d:	80 fa 4f             	cmp    dl,0x4f
10001640:	75 07                	jne    10001649 <PS2Keyboard::handler()+0x667>
10001642:	50                   	push   eax
10001643:	51                   	push   ecx
10001644:	e9 db fd ff ff       	jmp    10001424 <PS2Keyboard::handler()+0x442>
10001649:	80 fa 50             	cmp    dl,0x50
1000164c:	75 07                	jne    10001655 <PS2Keyboard::handler()+0x673>
1000164e:	50                   	push   eax
1000164f:	51                   	push   ecx
10001650:	e9 df fd ff ff       	jmp    10001434 <PS2Keyboard::handler()+0x452>
10001655:	80 fa 51             	cmp    dl,0x51
10001658:	75 07                	jne    10001661 <PS2Keyboard::handler()+0x67f>
1000165a:	50                   	push   eax
1000165b:	51                   	push   ecx
1000165c:	e9 e3 fd ff ff       	jmp    10001444 <PS2Keyboard::handler()+0x462>
10001661:	80 fa 4b             	cmp    dl,0x4b
10001664:	75 07                	jne    1000166d <PS2Keyboard::handler()+0x68b>
10001666:	57                   	push   edi
10001667:	51                   	push   ecx
10001668:	e9 e7 fd ff ff       	jmp    10001454 <PS2Keyboard::handler()+0x472>
1000166d:	80 fa 4c             	cmp    dl,0x4c
10001670:	75 07                	jne    10001679 <PS2Keyboard::handler()+0x697>
10001672:	53                   	push   ebx
10001673:	51                   	push   ecx
10001674:	e9 e8 fd ff ff       	jmp    10001461 <PS2Keyboard::handler()+0x47f>
10001679:	80 fa 4d             	cmp    dl,0x4d
1000167c:	75 07                	jne    10001685 <PS2Keyboard::handler()+0x6a3>
1000167e:	52                   	push   edx
1000167f:	51                   	push   ecx
10001680:	e9 e9 fd ff ff       	jmp    1000146e <PS2Keyboard::handler()+0x48c>
10001685:	80 fa 47             	cmp    dl,0x47
10001688:	75 07                	jne    10001691 <PS2Keyboard::handler()+0x6af>
1000168a:	50                   	push   eax
1000168b:	51                   	push   ecx
1000168c:	e9 ea fd ff ff       	jmp    1000147b <PS2Keyboard::handler()+0x499>
10001691:	80 fa 48             	cmp    dl,0x48
10001694:	75 07                	jne    1000169d <PS2Keyboard::handler()+0x6bb>
10001696:	50                   	push   eax
10001697:	51                   	push   ecx
10001698:	e9 eb fd ff ff       	jmp    10001488 <PS2Keyboard::handler()+0x4a6>
1000169d:	80 fa 49             	cmp    dl,0x49
100016a0:	75 07                	jne    100016a9 <PS2Keyboard::handler()+0x6c7>
100016a2:	50                   	push   eax
100016a3:	51                   	push   ecx
100016a4:	e9 ec fd ff ff       	jmp    10001495 <PS2Keyboard::handler()+0x4b3>
100016a9:	80 fa 53             	cmp    dl,0x53
100016ac:	75 07                	jne    100016b5 <PS2Keyboard::handler()+0x6d3>
100016ae:	50                   	push   eax
100016af:	51                   	push   ecx
100016b0:	e9 ed fd ff ff       	jmp    100014a2 <PS2Keyboard::handler()+0x4c0>
100016b5:	80 fa 4a             	cmp    dl,0x4a
100016b8:	75 07                	jne    100016c1 <PS2Keyboard::handler()+0x6df>
100016ba:	50                   	push   eax
100016bb:	51                   	push   ecx
100016bc:	e9 ee fd ff ff       	jmp    100014af <PS2Keyboard::handler()+0x4cd>
100016c1:	80 fa 4e             	cmp    dl,0x4e
100016c4:	75 07                	jne    100016cd <PS2Keyboard::handler()+0x6eb>
100016c6:	50                   	push   eax
100016c7:	51                   	push   ecx
100016c8:	e9 ef fd ff ff       	jmp    100014bc <PS2Keyboard::handler()+0x4da>
100016cd:	80 fa 37             	cmp    dl,0x37
100016d0:	75 07                	jne    100016d9 <PS2Keyboard::handler()+0x6f7>
100016d2:	57                   	push   edi
100016d3:	51                   	push   ecx
100016d4:	e9 f0 fd ff ff       	jmp    100014c9 <PS2Keyboard::handler()+0x4e7>
100016d9:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100016e0:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100016e7:	c1 e7 07             	shl    edi,0x7
100016ea:	c1 e0 08             	shl    eax,0x8
100016ed:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100016f0: R_386_32	PS2Keyboard::internalMapperLowerBad
100016f4:	88 d0                	mov    al,dl
100016f6:	89 fb                	mov    ebx,edi
100016f8:	d7                   	xlat   BYTE PTR ds:[ebx]
100016f9:	88 c2                	mov    dl,al
100016fb:	0f b6 d2             	movzx  edx,dl
100016fe:	53                   	push   ebx
100016ff:	51                   	push   ecx
10001700:	52                   	push   edx
10001701:	e9 0f fe ff ff       	jmp    10001515 <PS2Keyboard::handler()+0x533>
10001706:	80 fa 36             	cmp    dl,0x36
10001709:	0f 84 26 f9 ff ff    	je     10001035 <PS2Keyboard::handler()+0x53>
1000170f:	80 fa 38             	cmp    dl,0x38
10001712:	0f 84 7f f9 ff ff    	je     10001097 <PS2Keyboard::handler()+0xb5>
10001718:	e9 5b fa ff ff       	jmp    10001178 <PS2Keyboard::handler()+0x196>
1000171d:	5b                   	pop    ebx
1000171e:	5e                   	pop    esi
1000171f:	5f                   	pop    edi
10001720:	c3                   	ret    
10001721:	90                   	nop

10001722 <PS2Keyboard::open(int, int, void*)>:
10001722:	53                   	push   ebx
10001723:	83 ec 14             	sub    esp,0x14
10001726:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000172a:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10001730:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10001736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000173a:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10001740:	53                   	push   ebx
10001741:	6a 01                	push   0x1
10001743:	68 00 00 00 00       	push   0x0	10001744: R_386_32	ps2KeyboardHandler(regs*, void*)
10001748:	6a 01                	push   0x1
1000174a:	53                   	push   ebx
1000174b:	e8 fc ff ff ff       	call   1000174c <PS2Keyboard::open(int, int, void*)+0x2a>	1000174c: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001750:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10001756:	a1 00 00 00 00       	mov    eax,ds:0x0	10001757: R_386_32	sysBootSettings
1000175b:	c1 e8 02             	shr    eax,0x2
1000175e:	83 f0 01             	xor    eax,0x1
10001761:	83 e0 01             	and    eax,0x1
10001764:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
1000176a:	31 c0                	xor    eax,eax
1000176c:	83 c4 28             	add    esp,0x28
1000176f:	5b                   	pop    ebx
10001770:	c3                   	ret    
10001771:	90                   	nop

10001772 <PS2Keyboard::close(int, int, void*)>:
10001772:	83 c8 ff             	or     eax,0xffffffff
10001775:	c3                   	ret    

10001776 <PS2Mouse::PS2Mouse()>:
10001776:	55                   	push   ebp
10001777:	89 e5                	mov    ebp,esp
10001779:	83 ec 08             	sub    esp,0x8
1000177c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000177f:	83 ec 08             	sub    esp,0x8
10001782:	68 00 00 00 00       	push   0x0	10001783: R_386_32	ps2mousename
10001787:	50                   	push   eax
10001788:	e8 fc ff ff ff       	call   10001789 <PS2Mouse::PS2Mouse()+0x13>	10001789: R_386_PC32	Mouse::Mouse(char const*)
1000178d:	83 c4 10             	add    esp,0x10
10001790:	ba 08 00 00 00       	mov    edx,0x8	10001791: R_386_32	vtable for PS2Mouse
10001795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001798:	89 10                	mov    DWORD PTR [eax],edx
1000179a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000179d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100017a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017a7:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100017b1:	90                   	nop
100017b2:	c9                   	leave  
100017b3:	c3                   	ret    

100017b4 <ps2MouseHandler(regs*, void*)>:
100017b4:	55                   	push   ebp
100017b5:	89 e5                	mov    ebp,esp
100017b7:	83 ec 08             	sub    esp,0x8
100017ba:	83 ec 0c             	sub    esp,0xc
100017bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017c0:	e8 fc ff ff ff       	call   100017c1 <ps2MouseHandler(regs*, void*)+0xd>	100017c1: R_386_PC32	PS2Mouse::handler()
100017c5:	83 c4 10             	add    esp,0x10
100017c8:	90                   	nop
100017c9:	c9                   	leave  
100017ca:	c3                   	ret    
100017cb:	90                   	nop

100017cc <PS2Mouse::handler()>:
100017cc:	55                   	push   ebp
100017cd:	89 e5                	mov    ebp,esp
100017cf:	83 ec 28             	sub    esp,0x28
100017d2:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100017d8:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100017dc:	89 c2                	mov    edx,eax
100017de:	ec                   	in     al,dx
100017df:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100017e2:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100017e5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017e8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017ec:	83 e0 01             	and    eax,0x1
100017ef:	85 c0                	test   eax,eax
100017f1:	0f 84 8d 01 00 00    	je     10001984 <PS2Mouse::handler()+0x1b8>
100017f7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100017fb:	83 e0 20             	and    eax,0x20
100017fe:	85 c0                	test   eax,eax
10001800:	0f 84 81 01 00 00    	je     10001987 <PS2Mouse::handler()+0x1bb>
10001806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001809:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
1000180f:	8d 50 01             	lea    edx,[eax+0x1]
10001812:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10001815:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
1000181b:	0f b6 c8             	movzx  ecx,al
1000181e:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10001824:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10001828:	89 c2                	mov    edx,eax
1000182a:	ec                   	in     al,dx
1000182b:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
1000182e:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001834:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
1000183b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000183e:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001844:	0f b6 c0             	movzx  eax,al
10001847:	83 e0 08             	and    eax,0x8
1000184a:	85 c0                	test   eax,eax
1000184c:	75 0f                	jne    1000185d <PS2Mouse::handler()+0x91>
1000184e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001851:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001858:	e9 2b 01 00 00       	jmp    10001988 <PS2Mouse::handler()+0x1bc>
1000185d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001860:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001866:	84 c0                	test   al,al
10001868:	75 0d                	jne    10001877 <PS2Mouse::handler()+0xab>
1000186a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000186d:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001873:	3c 02                	cmp    al,0x2
10001875:	77 2f                	ja     100018a6 <PS2Mouse::handler()+0xda>
10001877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000187a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001880:	3c 03                	cmp    al,0x3
10001882:	74 11                	je     10001895 <PS2Mouse::handler()+0xc9>
10001884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001887:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000188d:	3c 04                	cmp    al,0x4
1000188f:	0f 85 f3 00 00 00    	jne    10001988 <PS2Mouse::handler()+0x1bc>
10001895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001898:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
1000189e:	3c 03                	cmp    al,0x3
100018a0:	0f 86 e2 00 00 00    	jbe    10001988 <PS2Mouse::handler()+0x1bc>
100018a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100018b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b3:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018b9:	84 c0                	test   al,al
100018bb:	78 13                	js     100018d0 <PS2Mouse::handler()+0x104>
100018bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c0:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018c6:	0f b6 c0             	movzx  eax,al
100018c9:	83 e0 40             	and    eax,0x40
100018cc:	85 c0                	test   eax,eax
100018ce:	74 37                	je     10001907 <PS2Mouse::handler()+0x13b>
100018d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d3:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100018da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018dd:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100018e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e7:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100018ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f1:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100018f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fb:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10001902:	e9 81 00 00 00       	jmp    10001988 <PS2Mouse::handler()+0x1bc>
10001907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190a:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001910:	0f b6 d0             	movzx  edx,al
10001913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001916:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000191c:	0f b6 c0             	movzx  eax,al
1000191f:	c1 e0 04             	shl    eax,0x4
10001922:	25 00 01 00 00       	and    eax,0x100
10001927:	29 c2                	sub    edx,eax
10001929:	89 d0                	mov    eax,edx
1000192b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000192e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001931:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001937:	0f b6 c0             	movzx  eax,al
1000193a:	c1 e0 03             	shl    eax,0x3
1000193d:	25 00 01 00 00       	and    eax,0x100
10001942:	89 c2                	mov    edx,eax
10001944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001947:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
1000194d:	0f b6 c0             	movzx  eax,al
10001950:	29 c2                	sub    edx,eax
10001952:	89 d0                	mov    eax,edx
10001954:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001957:	a1 00 00 00 00       	mov    eax,ds:0x0	10001958: R_386_32	guiMouseHandler
1000195c:	85 c0                	test   eax,eax
1000195e:	74 28                	je     10001988 <PS2Mouse::handler()+0x1bc>
10001960:	a1 00 00 00 00       	mov    eax,ds:0x0	10001961: R_386_32	guiMouseHandler
10001965:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001968:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
1000196e:	0f b6 d2             	movzx  edx,dl
10001971:	83 e2 01             	and    edx,0x1
10001974:	6a 00                	push   0x0
10001976:	52                   	push   edx
10001977:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000197a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000197d:	ff d0                	call   eax
1000197f:	83 c4 10             	add    esp,0x10
10001982:	eb 04                	jmp    10001988 <PS2Mouse::handler()+0x1bc>
10001984:	90                   	nop
10001985:	eb 01                	jmp    10001988 <PS2Mouse::handler()+0x1bc>
10001987:	90                   	nop
10001988:	c9                   	leave  
10001989:	c3                   	ret    

1000198a <PS2Mouse::open(int, int, void*)>:
1000198a:	55                   	push   ebp
1000198b:	89 e5                	mov    ebp,esp
1000198d:	83 ec 08             	sub    esp,0x8
10001990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001993:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000199c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100019a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019a5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100019a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100019ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019b7:	83 ec 08             	sub    esp,0x8
100019ba:	68 f6 00 00 00       	push   0xf6
100019bf:	50                   	push   eax
100019c0:	e8 fc ff ff ff       	call   100019c1 <PS2Mouse::open(int, int, void*)+0x37>	100019c1: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019c5:	83 c4 10             	add    esp,0x10
100019c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019d1:	83 ec 0c             	sub    esp,0xc
100019d4:	50                   	push   eax
100019d5:	e8 fc ff ff ff       	call   100019d6 <PS2Mouse::open(int, int, void*)+0x4c>	100019d6: R_386_PC32	PS2Port::deviceRead()
100019da:	83 c4 10             	add    esp,0x10
100019dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100019e6:	83 ec 08             	sub    esp,0x8
100019e9:	68 f4 00 00 00       	push   0xf4
100019ee:	50                   	push   eax
100019ef:	e8 fc ff ff ff       	call   100019f0 <PS2Mouse::open(int, int, void*)+0x66>	100019f0: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100019f4:	83 c4 10             	add    esp,0x10
100019f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001a00:	83 ec 0c             	sub    esp,0xc
10001a03:	50                   	push   eax
10001a04:	e8 fc ff ff ff       	call   10001a05 <PS2Mouse::open(int, int, void*)+0x7b>	10001a05: R_386_PC32	PS2Port::deviceRead()
10001a09:	83 c4 10             	add    esp,0x10
10001a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a0f:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a19:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a23:	83 ec 0c             	sub    esp,0xc
10001a26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a29:	6a 01                	push   0x1
10001a2b:	68 00 00 00 00       	push   0x0	10001a2c: R_386_32	ps2MouseHandler(regs*, void*)
10001a30:	6a 0c                	push   0xc
10001a32:	50                   	push   eax
10001a33:	e8 fc ff ff ff       	call   10001a34 <PS2Mouse::open(int, int, void*)+0xaa>	10001a34: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001a38:	83 c4 20             	add    esp,0x20
10001a3b:	b8 00 00 00 00       	mov    eax,0x0
10001a40:	c9                   	leave  
10001a41:	c3                   	ret    

10001a42 <PS2Mouse::close(int, int, void*)>:
10001a42:	b8 00 00 00 00       	mov    eax,0x0
10001a47:	c3                   	ret    

10001a48 <PS2Mouse::detect()>:
10001a48:	90                   	nop
10001a49:	c3                   	ret    

10001a4a <PS2Port::PS2Port()>:
10001a4a:	55                   	push   ebp
10001a4b:	89 e5                	mov    ebp,esp
10001a4d:	83 ec 08             	sub    esp,0x8
10001a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a53:	83 ec 08             	sub    esp,0x8
10001a56:	68 00 00 00 00       	push   0x0	10001a57: R_386_32	ps2portname
10001a5b:	50                   	push   eax
10001a5c:	e8 fc ff ff ff       	call   10001a5d <PS2Port::PS2Port()+0x13>	10001a5d: R_386_PC32	Bus::Bus(char const*)
10001a61:	83 c4 10             	add    esp,0x10
10001a64:	ba 08 00 00 00       	mov    edx,0x8	10001a65: R_386_32	vtable for PS2Port
10001a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a6c:	89 10                	mov    DWORD PTR [eax],edx
10001a6e:	90                   	nop
10001a6f:	c9                   	leave  
10001a70:	c3                   	ret    
10001a71:	90                   	nop

10001a72 <PS2Port::open(int, int, void*)>:
10001a72:	55                   	push   ebp
10001a73:	89 e5                	mov    ebp,esp
10001a75:	83 ec 08             	sub    esp,0x8
10001a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001a7e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a87:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001a8a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a93:	8b 00                	mov    eax,DWORD PTR [eax]
10001a95:	83 c0 18             	add    eax,0x18
10001a98:	8b 00                	mov    eax,DWORD PTR [eax]
10001a9a:	83 ec 0c             	sub    esp,0xc
10001a9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001aa0:	ff d0                	call   eax
10001aa2:	83 c4 10             	add    esp,0x10
10001aa5:	b8 00 00 00 00       	mov    eax,0x0
10001aaa:	c9                   	leave  
10001aab:	c3                   	ret    

10001aac <PS2Port::close(int, int, void*)>:
10001aac:	b8 00 00 00 00       	mov    eax,0x0
10001ab1:	c3                   	ret    

10001ab2 <PS2Port::detect()>:
10001ab2:	55                   	push   ebp
10001ab3:	89 e5                	mov    ebp,esp
10001ab5:	53                   	push   ebx
10001ab6:	83 ec 14             	sub    esp,0x14
10001ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001abc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001ac2:	85 c0                	test   eax,eax
10001ac4:	75 55                	jne    10001b1b <PS2Port::detect()+0x69>
10001ac6:	83 ec 0c             	sub    esp,0xc
10001ac9:	68 70 01 00 00       	push   0x170
10001ace:	e8 fc ff ff ff       	call   10001acf <PS2Port::detect()+0x1d>	10001acf: R_386_PC32	operator new(unsigned long)
10001ad3:	83 c4 10             	add    esp,0x10
10001ad6:	89 c3                	mov    ebx,eax
10001ad8:	83 ec 0c             	sub    esp,0xc
10001adb:	53                   	push   ebx
10001adc:	e8 fc ff ff ff       	call   10001add <PS2Port::detect()+0x2b>	10001add: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001ae1:	83 c4 10             	add    esp,0x10
10001ae4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aea:	83 ec 08             	sub    esp,0x8
10001aed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001af0:	50                   	push   eax
10001af1:	e8 fc ff ff ff       	call   10001af2 <PS2Port::detect()+0x40>	10001af2: R_386_PC32	Device::addChild(Device*)
10001af6:	83 c4 10             	add    esp,0x10
10001af9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001afc:	8b 00                	mov    eax,DWORD PTR [eax]
10001afe:	83 c0 08             	add    eax,0x8
10001b01:	8b 00                	mov    eax,DWORD PTR [eax]
10001b03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b06:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001b0c:	52                   	push   edx
10001b0d:	6a 00                	push   0x0
10001b0f:	6a 00                	push   0x0
10001b11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001b14:	ff d0                	call   eax
10001b16:	83 c4 10             	add    esp,0x10
10001b19:	eb 61                	jmp    10001b7c <PS2Port::detect()+0xca>
10001b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b24:	83 f8 01             	cmp    eax,0x1
10001b27:	75 53                	jne    10001b7c <PS2Port::detect()+0xca>
10001b29:	83 ec 0c             	sub    esp,0xc
10001b2c:	68 68 01 00 00       	push   0x168
10001b31:	e8 fc ff ff ff       	call   10001b32 <PS2Port::detect()+0x80>	10001b32: R_386_PC32	operator new(unsigned long)
10001b36:	83 c4 10             	add    esp,0x10
10001b39:	89 c3                	mov    ebx,eax
10001b3b:	83 ec 0c             	sub    esp,0xc
10001b3e:	53                   	push   ebx
10001b3f:	e8 fc ff ff ff       	call   10001b40 <PS2Port::detect()+0x8e>	10001b40: R_386_PC32	PS2Mouse::PS2Mouse()
10001b44:	83 c4 10             	add    esp,0x10
10001b47:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10001b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b4d:	83 ec 08             	sub    esp,0x8
10001b50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b53:	50                   	push   eax
10001b54:	e8 fc ff ff ff       	call   10001b55 <PS2Port::detect()+0xa3>	10001b55: R_386_PC32	Device::addChild(Device*)
10001b59:	83 c4 10             	add    esp,0x10
10001b5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001b5f:	8b 00                	mov    eax,DWORD PTR [eax]
10001b61:	83 c0 08             	add    eax,0x8
10001b64:	8b 00                	mov    eax,DWORD PTR [eax]
10001b66:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b69:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001b6f:	52                   	push   edx
10001b70:	6a 00                	push   0x0
10001b72:	6a 01                	push   0x1
10001b74:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001b77:	ff d0                	call   eax
10001b79:	83 c4 10             	add    esp,0x10
10001b7c:	90                   	nop
10001b7d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001b80:	c9                   	leave  
10001b81:	c3                   	ret    

10001b82 <PS2Port::deviceWrite(unsigned char)>:
10001b82:	55                   	push   ebp
10001b83:	89 e5                	mov    ebp,esp
10001b85:	83 ec 28             	sub    esp,0x28
10001b88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b91:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b97:	83 f8 01             	cmp    eax,0x1
10001b9a:	75 1a                	jne    10001bb6 <PS2Port::deviceWrite(unsigned char)+0x34>
10001b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001ba5:	83 ec 08             	sub    esp,0x8
10001ba8:	68 d4 00 00 00       	push   0xd4
10001bad:	50                   	push   eax
10001bae:	e8 fc ff ff ff       	call   10001baf <PS2Port::deviceWrite(unsigned char)+0x2d>	10001baf: R_386_PC32	PS2::controllerWrite(unsigned char)
10001bb3:	83 c4 10             	add    esp,0x10
10001bb6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001bbd:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10001bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001bc6:	89 c2                	mov    edx,eax
10001bc8:	ec                   	in     al,dx
10001bc9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001bcc:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001bcf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001bd2:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001bd6:	83 e0 02             	and    eax,0x2
10001bd9:	85 c0                	test   eax,eax
10001bdb:	74 29                	je     10001c06 <PS2Port::deviceWrite(unsigned char)+0x84>
10001bdd:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001be1:	83 e0 40             	and    eax,0x40
10001be4:	85 c0                	test   eax,eax
10001be6:	75 22                	jne    10001c0a <PS2Port::deviceWrite(unsigned char)+0x88>
10001be8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001beb:	84 c0                	test   al,al
10001bed:	78 1b                	js     10001c0a <PS2Port::deviceWrite(unsigned char)+0x88>
10001bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001bf2:	8d 50 01             	lea    edx,[eax+0x1]
10001bf5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001bf8:	3d 40 06 00 00       	cmp    eax,0x640
10001bfd:	0f 94 c0             	sete   al
10001c00:	84 c0                	test   al,al
10001c02:	75 05                	jne    10001c09 <PS2Port::deviceWrite(unsigned char)+0x87>
10001c04:	eb b7                	jmp    10001bbd <PS2Port::deviceWrite(unsigned char)+0x3b>
10001c06:	90                   	nop
10001c07:	eb 01                	jmp    10001c0a <PS2Port::deviceWrite(unsigned char)+0x88>
10001c09:	90                   	nop
10001c0a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001c0e:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001c14:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001c17:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001c1a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10001c1d:	ee                   	out    dx,al
10001c1e:	b0 01                	mov    al,0x1
10001c20:	c9                   	leave  
10001c21:	c3                   	ret    

10001c22 <PS2Port::deviceRead()>:
10001c22:	55                   	push   ebp
10001c23:	89 e5                	mov    ebp,esp
10001c25:	83 ec 08             	sub    esp,0x8
10001c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001c31:	83 ec 0c             	sub    esp,0xc
10001c34:	50                   	push   eax
10001c35:	e8 fc ff ff ff       	call   10001c36 <PS2Port::deviceRead()+0x14>	10001c36: R_386_PC32	PS2::controllerRead()
10001c3a:	83 c4 10             	add    esp,0x10
10001c3d:	c9                   	leave  
10001c3e:	c3                   	ret    
10001c3f:	90                   	nop

10001c40 <sb16Demo(void*)>:
10001c40:	55                   	push   ebp
10001c41:	57                   	push   edi
10001c42:	56                   	push   esi
10001c43:	53                   	push   ebx
10001c44:	83 ec 2c             	sub    esp,0x2c
10001c47:	e8 fc ff ff ff       	call   10001c48 <sb16Demo(void*)+0x8>	10001c48: R_386_PC32	unlockScheduler()
10001c4c:	83 ec 0c             	sub    esp,0xc
10001c4f:	6a 2c                	push   0x2c
10001c51:	e8 fc ff ff ff       	call   10001c52 <sb16Demo(void*)+0x12>	10001c52: R_386_PC32	operator new(unsigned long)
10001c56:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10001c5d:	89 c3                	mov    ebx,eax
10001c5f:	6a 5a                	push   0x5a
10001c61:	6a 08                	push   0x8
10001c63:	68 22 56 00 00       	push   0x5622
10001c68:	50                   	push   eax
10001c69:	e8 fc ff ff ff       	call   10001c6a <sb16Demo(void*)+0x2a>	10001c6a: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
10001c6e:	83 c4 14             	add    esp,0x14
10001c71:	68 14 01 00 00       	push   0x114
10001c76:	e8 fc ff ff ff       	call   10001c77 <sb16Demo(void*)+0x37>	10001c77: R_386_PC32	operator new(unsigned long)
10001c7b:	83 c4 0c             	add    esp,0xc
10001c7e:	89 c6                	mov    esi,eax
10001c80:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001c82: R_386_32	kernelProcess
10001c86:	68 00 00 00 00       	push   0x0	10001c87: R_386_32	egFile
10001c8b:	50                   	push   eax
10001c8c:	e8 fc ff ff ff       	call   10001c8d <sb16Demo(void*)+0x4d>	10001c8d: R_386_PC32	File::File(char const*, Process*)
10001c91:	5f                   	pop    edi
10001c92:	bf 35 00 00 00       	mov    edi,0x35
10001c97:	5d                   	pop    ebp
10001c98:	6a 01                	push   0x1
10001c9a:	56                   	push   esi
10001c9b:	e8 fc ff ff ff       	call   10001c9c <sb16Demo(void*)+0x5c>	10001c9c: R_386_PC32	File::open(FileOpenMode)
10001ca0:	83 c4 10             	add    esp,0x10
10001ca3:	83 ec 0c             	sub    esp,0xc
10001ca6:	8b 06                	mov    eax,DWORD PTR [esi]
10001ca8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
10001cac:	55                   	push   ebp
10001cad:	68 00 00 00 00       	push   0x0	10001cae: R_386_32	buf
10001cb2:	6a 00                	push   0x0
10001cb4:	68 00 10 00 00       	push   0x1000
10001cb9:	56                   	push   esi
10001cba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001cbd:	83 c4 20             	add    esp,0x20
10001cc0:	4f                   	dec    edi
10001cc1:	75 e0                	jne    10001ca3 <sb16Demo(void*)+0x63>
10001cc3:	31 ff                	xor    edi,edi
10001cc5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001ccd:	8b 06                	mov    eax,DWORD PTR [esi]
10001ccf:	83 ec 0c             	sub    esp,0xc
10001cd2:	55                   	push   ebp
10001cd3:	68 00 00 00 00       	push   0x0	10001cd4: R_386_32	buf
10001cd8:	6a 00                	push   0x0
10001cda:	68 00 10 00 00       	push   0x1000
10001cdf:	56                   	push   esi
10001ce0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001ce3:	83 c4 20             	add    esp,0x20
10001ce6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10001ceb:	74 7f                	je     10001d6c <sb16Demo(void*)+0x12c>
10001ced:	85 c0                	test   eax,eax
10001cef:	75 7b                	jne    10001d6c <sb16Demo(void*)+0x12c>
10001cf1:	e8 fc ff ff ff       	call   10001cf2 <sb16Demo(void*)+0xb2>	10001cf2: R_386_PC32	lockScheduler()
10001cf6:	e8 fc ff ff ff       	call   10001cf7 <sb16Demo(void*)+0xb7>	10001cf7: R_386_PC32	schedule()
10001cfb:	e8 fc ff ff ff       	call   10001cfc <sb16Demo(void*)+0xbc>	10001cfc: R_386_PC32	unlockScheduler()
10001d00:	83 ec 0c             	sub    esp,0xc
10001d03:	53                   	push   ebx
10001d04:	e8 fc ff ff ff       	call   10001d05 <sb16Demo(void*)+0xc5>	10001d05: R_386_PC32	SoundChannel::getBufferUsed()
10001d09:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001d0c:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001d10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001d14:	e8 fc ff ff ff       	call   10001d15 <sb16Demo(void*)+0xd5>	10001d15: R_386_PC32	SoundChannel::getBufferSize()
10001d19:	83 c4 10             	add    esp,0x10
10001d1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10001d20:	7c 10                	jl     10001d32 <sb16Demo(void*)+0xf2>
10001d22:	51                   	push   ecx
10001d23:	51                   	push   ecx
10001d24:	6a 00                	push   0x0
10001d26:	6a 01                	push   0x1
10001d28:	e8 fc ff ff ff       	call   10001d29 <sb16Demo(void*)+0xe9>	10001d29: R_386_PC32	sleep(unsigned long long)
10001d2d:	83 c4 10             	add    esp,0x10
10001d30:	eb ce                	jmp    10001d00 <sb16Demo(void*)+0xc0>
10001d32:	52                   	push   edx
10001d33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10001d37:	68 00 00 00 00       	push   0x0	10001d38: R_386_32	buf
10001d3c:	53                   	push   ebx
10001d3d:	e8 fc ff ff ff       	call   10001d3e <sb16Demo(void*)+0xfe>	10001d3e: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10001d42:	83 c4 10             	add    esp,0x10
10001d45:	89 f8                	mov    eax,edi
10001d47:	84 c0                	test   al,al
10001d49:	75 17                	jne    10001d62 <sb16Demo(void*)+0x122>
10001d4b:	50                   	push   eax
10001d4c:	50                   	push   eax
10001d4d:	53                   	push   ebx
10001d4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10001d52:	e8 fc ff ff ff       	call   10001d53 <sb16Demo(void*)+0x113>	10001d53: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10001d57:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001d5a:	e8 fc ff ff ff       	call   10001d5b <sb16Demo(void*)+0x11b>	10001d5b: R_386_PC32	SoundChannel::play()
10001d5f:	83 c4 10             	add    esp,0x10
10001d62:	bf 01 00 00 00       	mov    edi,0x1
10001d67:	e9 59 ff ff ff       	jmp    10001cc5 <sb16Demo(void*)+0x85>
10001d6c:	83 c4 2c             	add    esp,0x2c
10001d6f:	5b                   	pop    ebx
10001d70:	5e                   	pop    esi
10001d71:	5f                   	pop    edi
10001d72:	5d                   	pop    ebp
10001d73:	c3                   	ret    

10001d74 <SoundBlaster16::resetDSP()>:
10001d74:	53                   	push   ebx
10001d75:	b0 01                	mov    al,0x1
10001d77:	83 ec 10             	sub    esp,0x10
10001d7a:	bb 26 02 00 00       	mov    ebx,0x226
10001d7f:	89 da                	mov    edx,ebx
10001d81:	ee                   	out    dx,al
10001d82:	6a 00                	push   0x0
10001d84:	68 c0 c6 2d 00       	push   0x2dc6c0
10001d89:	e8 fc ff ff ff       	call   10001d8a <SoundBlaster16::resetDSP()+0x16>	10001d8a: R_386_PC32	nanoSleep(unsigned long long)
10001d8e:	31 c0                	xor    eax,eax
10001d90:	89 da                	mov    edx,ebx
10001d92:	ee                   	out    dx,al
10001d93:	ba 2a 02 00 00       	mov    edx,0x22a
10001d98:	ec                   	in     al,dx
10001d99:	83 c4 10             	add    esp,0x10
10001d9c:	3c aa                	cmp    al,0xaa
10001d9e:	75 25                	jne    10001dc5 <SoundBlaster16::resetDSP()+0x51>
10001da0:	b0 e1                	mov    al,0xe1
10001da2:	ba 2c 02 00 00       	mov    edx,0x22c
10001da7:	ee                   	out    dx,al
10001da8:	ba 2e 02 00 00       	mov    edx,0x22e
10001dad:	ec                   	in     al,dx
10001dae:	84 c0                	test   al,al
10001db0:	79 fb                	jns    10001dad <SoundBlaster16::resetDSP()+0x39>
10001db2:	ba 2a 02 00 00       	mov    edx,0x22a
10001db7:	ec                   	in     al,dx
10001db8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001dbc:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10001dc2:	ec                   	in     al,dx
10001dc3:	eb 13                	jmp    10001dd8 <SoundBlaster16::resetDSP()+0x64>
10001dc5:	0f b6 c0             	movzx  eax,al
10001dc8:	51                   	push   ecx
10001dc9:	51                   	push   ecx
10001dca:	50                   	push   eax
10001dcb:	68 00 00 00 00       	push   0x0	10001dcc: R_386_32	badVer
10001dd0:	e8 fc ff ff ff       	call   10001dd1 <SoundBlaster16::resetDSP()+0x5d>	10001dd1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dd5:	83 c4 10             	add    esp,0x10
10001dd8:	83 c4 08             	add    esp,0x8
10001ddb:	5b                   	pop    ebx
10001ddc:	c3                   	ret    
10001ddd:	90                   	nop

10001dde <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10001dde:	53                   	push   ebx
10001ddf:	ba 2c 02 00 00       	mov    edx,0x22c
10001de4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001de8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001dec:	ec                   	in     al,dx
10001ded:	84 c0                	test   al,al
10001def:	78 fb                	js     10001dec <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10001df1:	88 c8                	mov    al,cl
10001df3:	89 da                	mov    edx,ebx
10001df5:	ee                   	out    dx,al
10001df6:	5b                   	pop    ebx
10001df7:	c3                   	ret    

10001df8 <SoundBlaster16::turnSpeakerOn(bool)>:
10001df8:	53                   	push   ebx
10001df9:	52                   	push   edx
10001dfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10001dfe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001e02:	80 fa 01             	cmp    dl,0x1
10001e05:	89 14 24             	mov    DWORD PTR [esp],edx
10001e08:	19 c0                	sbb    eax,eax
10001e0a:	83 e0 02             	and    eax,0x2
10001e0d:	05 d1 00 00 00       	add    eax,0xd1
10001e12:	50                   	push   eax
10001e13:	68 2c 02 00 00       	push   0x22c
10001e18:	53                   	push   ebx
10001e19:	e8 fc ff ff ff       	call   10001e1a <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10001e1a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e1e:	83 c4 0c             	add    esp,0xc
10001e21:	8b 14 24             	mov    edx,DWORD PTR [esp]
10001e24:	84 d2                	test   dl,dl
10001e26:	75 23                	jne    10001e4b <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10001e28:	68 d0 00 00 00       	push   0xd0
10001e2d:	68 2c 02 00 00       	push   0x22c
10001e32:	53                   	push   ebx
10001e33:	e8 fc ff ff ff       	call   10001e34 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10001e34: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e38:	68 d3 00 00 00       	push   0xd3
10001e3d:	68 2c 02 00 00       	push   0x22c
10001e42:	53                   	push   ebx
10001e43:	e8 fc ff ff ff       	call   10001e44 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10001e44: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001e48:	83 c4 18             	add    esp,0x18
10001e4b:	58                   	pop    eax
10001e4c:	5b                   	pop    ebx
10001e4d:	c3                   	ret    

10001e4e <SoundBlaster16::SoundBlaster16()>:
10001e4e:	55                   	push   ebp
10001e4f:	89 e5                	mov    ebp,esp
10001e51:	83 ec 08             	sub    esp,0x8
10001e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e57:	83 ec 08             	sub    esp,0x8
10001e5a:	68 00 00 00 00       	push   0x0	10001e5b: R_386_32	sb16name
10001e5f:	50                   	push   eax
10001e60:	e8 fc ff ff ff       	call   10001e61 <SoundBlaster16::SoundBlaster16()+0x13>	10001e61: R_386_PC32	SoundDevice::SoundDevice(char const*)
10001e65:	83 c4 10             	add    esp,0x10
10001e68:	ba 08 00 00 00       	mov    edx,0x8	10001e69: R_386_32	vtable for SoundBlaster16
10001e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e70:	89 10                	mov    DWORD PTR [eax],edx
10001e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e75:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10001e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e82:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10001e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e8f:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10001e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e99:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10001ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ea3:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10001eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ead:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10001eb4:	90                   	nop
10001eb5:	c9                   	leave  
10001eb6:	c3                   	ret    
10001eb7:	90                   	nop

10001eb8 <SoundBlaster16::handleIRQ()>:
10001eb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10001ebc:	ba 2e 02 00 00       	mov    edx,0x22e
10001ec1:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10001ec8:	74 17                	je     10001ee1 <SoundBlaster16::handleIRQ()+0x29>
10001eca:	b0 82                	mov    al,0x82
10001ecc:	ba 24 02 00 00       	mov    edx,0x224
10001ed1:	ee                   	out    dx,al
10001ed2:	ba 25 02 00 00       	mov    edx,0x225
10001ed7:	ec                   	in     al,dx
10001ed8:	a8 02                	test   al,0x2
10001eda:	74 06                	je     10001ee2 <SoundBlaster16::handleIRQ()+0x2a>
10001edc:	ba 2f 02 00 00       	mov    edx,0x22f
10001ee1:	ec                   	in     al,dx
10001ee2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10001ee6:	e9 c7 03 00 00       	jmp    100022b2 <SoundBlaster16::onInterrupt()>

10001eeb <sb16Handler(regs*, void*)>:
10001eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001eef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001ef3:	eb c3                	jmp    10001eb8 <SoundBlaster16::handleIRQ()>
10001ef5:	90                   	nop

10001ef6 <SoundBlaster16::getNumHwChannels()>:
10001ef6:	b8 01 00 00 00       	mov    eax,0x1
10001efb:	c3                   	ret    

10001efc <SoundBlaster16::beginPlayback(int, int)>:
10001efc:	53                   	push   ebx
10001efd:	50                   	push   eax
10001efe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001f02:	6a 01                	push   0x1
10001f04:	53                   	push   ebx
10001f05:	e8 fc ff ff ff       	call   10001f06 <SoundBlaster16::beginPlayback(int, int)+0xa>	10001f06: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001f0a:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10001f11:	5a                   	pop    edx
10001f12:	19 c0                	sbb    eax,eax
10001f14:	59                   	pop    ecx
10001f15:	83 c0 02             	add    eax,0x2
10001f18:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10001f1f:	89 c1                	mov    ecx,eax
10001f21:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10001f26:	99                   	cdq    
10001f27:	f7 f9                	idiv   ecx
10001f29:	89 04 24             	mov    DWORD PTR [esp],eax
10001f2c:	6a 40                	push   0x40
10001f2e:	68 2c 02 00 00       	push   0x22c
10001f33:	53                   	push   ebx
10001f34:	e8 fc ff ff ff       	call   10001f35 <SoundBlaster16::beginPlayback(int, int)+0x39>	10001f35: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f39:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001f3e:	50                   	push   eax
10001f3f:	68 2c 02 00 00       	push   0x22c
10001f44:	53                   	push   ebx
10001f45:	e8 fc ff ff ff       	call   10001f46 <SoundBlaster16::beginPlayback(int, int)+0x4a>	10001f46: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f4a:	68 c0 00 00 00       	push   0xc0
10001f4f:	68 2c 02 00 00       	push   0x22c
10001f54:	53                   	push   ebx
10001f55:	e8 fc ff ff ff       	call   10001f56 <SoundBlaster16::beginPlayback(int, int)+0x5a>	10001f56: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f5a:	83 c4 24             	add    esp,0x24
10001f5d:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10001f64:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10001f6b:	c1 e0 05             	shl    eax,0x5
10001f6e:	c1 e2 04             	shl    edx,0x4
10001f71:	09 d0                	or     eax,edx
10001f73:	0f be c0             	movsx  eax,al
10001f76:	50                   	push   eax
10001f77:	68 2c 02 00 00       	push   0x22c
10001f7c:	53                   	push   ebx
10001f7d:	e8 fc ff ff ff       	call   10001f7e <SoundBlaster16::beginPlayback(int, int)+0x82>	10001f7e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f82:	68 ff 00 00 00       	push   0xff
10001f87:	68 2c 02 00 00       	push   0x22c
10001f8c:	53                   	push   ebx
10001f8d:	e8 fc ff ff ff       	call   10001f8e <SoundBlaster16::beginPlayback(int, int)+0x92>	10001f8e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f92:	6a 1f                	push   0x1f
10001f94:	68 2c 02 00 00       	push   0x22c
10001f99:	53                   	push   ebx
10001f9a:	e8 fc ff ff ff       	call   10001f9b <SoundBlaster16::beginPlayback(int, int)+0x9f>	10001f9b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f9f:	83 c4 24             	add    esp,0x24
10001fa2:	6a 48                	push   0x48
10001fa4:	68 2c 02 00 00       	push   0x22c
10001fa9:	53                   	push   ebx
10001faa:	e8 fc ff ff ff       	call   10001fab <SoundBlaster16::beginPlayback(int, int)+0xaf>	10001fab: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001faf:	68 ff 00 00 00       	push   0xff
10001fb4:	68 2c 02 00 00       	push   0x22c
10001fb9:	53                   	push   ebx
10001fba:	e8 fc ff ff ff       	call   10001fbb <SoundBlaster16::beginPlayback(int, int)+0xbf>	10001fbb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fbf:	6a 1f                	push   0x1f
10001fc1:	68 2c 02 00 00       	push   0x22c
10001fc6:	53                   	push   ebx
10001fc7:	e8 fc ff ff ff       	call   10001fc8 <SoundBlaster16::beginPlayback(int, int)+0xcc>	10001fc8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fcc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10001fd0:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10001fd8:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10001fe0:	83 c4 28             	add    esp,0x28
10001fe3:	5b                   	pop    ebx
10001fe4:	e9 f5 fd ff ff       	jmp    10001dde <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10001fe9:	90                   	nop

10001fea <SoundBlaster16::stopPlayback()>:
10001fea:	6a 00                	push   0x0
10001fec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001ff0:	e8 fc ff ff ff       	call   10001ff1 <SoundBlaster16::stopPlayback()+0x7>	10001ff1: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001ff5:	58                   	pop    eax
10001ff6:	5a                   	pop    edx
10001ff7:	c3                   	ret    

10001ff8 <SoundBlaster16::open(int, int, void*)>:
10001ff8:	56                   	push   esi
10001ff9:	be 25 02 00 00       	mov    esi,0x225
10001ffe:	53                   	push   ebx
10001fff:	83 ec 14             	sub    esp,0x14
10002002:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002006:	c7 83 e8 01 00 00 22 56 00 00 	mov    DWORD PTR [ebx+0x1e8],0x5622
10002010:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
1000201a:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10002023:	68 80 00 00 00       	push   0x80
10002028:	68 24 02 00 00       	push   0x224
1000202d:	53                   	push   ebx
1000202e:	e8 fc ff ff ff       	call   1000202f <SoundBlaster16::open(int, int, void*)+0x37>	1000202f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002033:	89 f2                	mov    edx,esi
10002035:	ec                   	in     al,dx
10002036:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
1000203a:	68 80 00 00 00       	push   0x80
1000203f:	68 24 02 00 00       	push   0x224
10002044:	53                   	push   ebx
10002045:	e8 fc ff ff ff       	call   10002046 <SoundBlaster16::open(int, int, void*)+0x4e>	10002046: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000204a:	83 c4 18             	add    esp,0x18
1000204d:	31 c0                	xor    eax,eax
1000204f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10002054:	0f 95 c0             	setne  al
10002057:	40                   	inc    eax
10002058:	50                   	push   eax
10002059:	68 25 02 00 00       	push   0x225
1000205e:	53                   	push   ebx
1000205f:	e8 fc ff ff ff       	call   10002060 <SoundBlaster16::open(int, int, void*)+0x68>	10002060: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002064:	68 80 00 00 00       	push   0x80
10002069:	68 24 02 00 00       	push   0x224
1000206e:	53                   	push   ebx
1000206f:	e8 fc ff ff ff       	call   10002070 <SoundBlaster16::open(int, int, void*)+0x78>	10002070: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002074:	89 f2                	mov    edx,esi
10002076:	ec                   	in     al,dx
10002077:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
1000207b:	83 c4 18             	add    esp,0x18
1000207e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002082:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002086:	75 51                	jne    100020d9 <SoundBlaster16::open(int, int, void*)+0xe1>
10002088:	68 81 00 00 00       	push   0x81
1000208d:	68 24 02 00 00       	push   0x224
10002092:	53                   	push   ebx
10002093:	e8 fc ff ff ff       	call   10002094 <SoundBlaster16::open(int, int, void*)+0x9c>	10002094: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002098:	89 f2                	mov    edx,esi
1000209a:	ec                   	in     al,dx
1000209b:	83 e0 0a             	and    eax,0xa
1000209e:	3c 01                	cmp    al,0x1
100020a0:	19 c0                	sbb    eax,eax
100020a2:	83 e0 62             	and    eax,0x62
100020a5:	40                   	inc    eax
100020a6:	89 04 24             	mov    DWORD PTR [esp],eax
100020a9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100020ab: R_386_32	isaDMAController
100020af:	e8 fc ff ff ff       	call   100020b0 <SoundBlaster16::open(int, int, void*)+0xb8>	100020b0: R_386_PC32	DMA::tryLockChannel(int)
100020b4:	83 c4 10             	add    esp,0x10
100020b7:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100020bd:	85 c0                	test   eax,eax
100020bf:	75 3a                	jne    100020fb <SoundBlaster16::open(int, int, void*)+0x103>
100020c1:	83 ec 0c             	sub    esp,0xc
100020c4:	68 00 00 00 00       	push   0x0	100020c5: R_386_32	nodma
100020c9:	e8 fc ff ff ff       	call   100020ca <SoundBlaster16::open(int, int, void*)+0xd2>	100020ca: R_386_PC32	Dbg::kprintf(char const*, ...)
100020ce:	83 c4 10             	add    esp,0x10
100020d1:	83 c8 ff             	or     eax,0xffffffff
100020d4:	e9 d3 01 00 00       	jmp    100022ac <SoundBlaster16::open(int, int, void*)+0x2b4>
100020d9:	56                   	push   esi
100020da:	56                   	push   esi
100020db:	6a 01                	push   0x1
100020dd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100020df: R_386_32	isaDMAController
100020e3:	e8 fc ff ff ff       	call   100020e4 <SoundBlaster16::open(int, int, void*)+0xec>	100020e4: R_386_PC32	DMA::tryLockChannel(int)
100020e8:	83 c4 10             	add    esp,0x10
100020eb:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100020f1:	85 c0                	test   eax,eax
100020f3:	75 06                	jne    100020fb <SoundBlaster16::open(int, int, void*)+0x103>
100020f5:	51                   	push   ecx
100020f6:	51                   	push   ecx
100020f7:	6a 03                	push   0x3
100020f9:	eb ae                	jmp    100020a9 <SoundBlaster16::open(int, int, void*)+0xb1>
100020fb:	50                   	push   eax
100020fc:	50                   	push   eax
100020fd:	68 00 40 00 00       	push   0x4000
10002102:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002108:	e8 fc ff ff ff       	call   10002109 <SoundBlaster16::open(int, int, void*)+0x111>	10002109: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
1000210d:	58                   	pop    eax
1000210e:	5a                   	pop    edx
1000210f:	6a 59                	push   0x59
10002111:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002117:	e8 fc ff ff ff       	call   10002118 <SoundBlaster16::open(int, int, void*)+0x120>	10002118: R_386_PC32	DMAChannel::setMode(unsigned char)
1000211c:	59                   	pop    ecx
1000211d:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002123:	e8 fc ff ff ff       	call   10002124 <SoundBlaster16::open(int, int, void*)+0x12c>	10002124: R_386_PC32	DMAChannel::start()
10002128:	5e                   	pop    esi
10002129:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000212f:	e8 fc ff ff ff       	call   10002130 <SoundBlaster16::open(int, int, void*)+0x138>	10002130: R_386_PC32	DMAChannel::getAddress()
10002134:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
1000213a:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000213d:	e8 fc ff ff ff       	call   1000213e <SoundBlaster16::open(int, int, void*)+0x146>	1000213e: R_386_PC32	SoundBlaster16::resetDSP()
10002142:	58                   	pop    eax
10002143:	5a                   	pop    edx
10002144:	6a 01                	push   0x1
10002146:	53                   	push   ebx
10002147:	e8 fc ff ff ff       	call   10002148 <SoundBlaster16::open(int, int, void*)+0x150>	10002148: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000214c:	83 c4 10             	add    esp,0x10
1000214f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002153:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002157:	75 6f                	jne    100021c8 <SoundBlaster16::open(int, int, void*)+0x1d0>
10002159:	50                   	push   eax
1000215a:	68 80 00 00 00       	push   0x80
1000215f:	68 24 02 00 00       	push   0x224
10002164:	53                   	push   ebx
10002165:	e8 fc ff ff ff       	call   10002166 <SoundBlaster16::open(int, int, void*)+0x16e>	10002166: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000216a:	ba 25 02 00 00       	mov    edx,0x225
1000216f:	ec                   	in     al,dx
10002170:	83 c4 10             	add    esp,0x10
10002173:	3c 01                	cmp    al,0x1
10002175:	75 0f                	jne    10002186 <SoundBlaster16::open(int, int, void*)+0x18e>
10002177:	83 ec 0c             	sub    esp,0xc
1000217a:	53                   	push   ebx
1000217b:	6a 01                	push   0x1
1000217d:	68 00 00 00 00       	push   0x0	1000217e: R_386_32	sb16Handler(regs*, void*)
10002182:	6a 02                	push   0x2
10002184:	eb 6f                	jmp    100021f5 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002186:	3c 02                	cmp    al,0x2
10002188:	75 06                	jne    10002190 <SoundBlaster16::open(int, int, void*)+0x198>
1000218a:	83 ec 0c             	sub    esp,0xc
1000218d:	53                   	push   ebx
1000218e:	eb 5c                	jmp    100021ec <SoundBlaster16::open(int, int, void*)+0x1f4>
10002190:	3c 04                	cmp    al,0x4
10002192:	75 0f                	jne    100021a3 <SoundBlaster16::open(int, int, void*)+0x1ab>
10002194:	83 ec 0c             	sub    esp,0xc
10002197:	53                   	push   ebx
10002198:	6a 01                	push   0x1
1000219a:	68 00 00 00 00       	push   0x0	1000219b: R_386_32	sb16Handler(regs*, void*)
1000219f:	6a 07                	push   0x7
100021a1:	eb 52                	jmp    100021f5 <SoundBlaster16::open(int, int, void*)+0x1fd>
100021a3:	3c 08                	cmp    al,0x8
100021a5:	75 0f                	jne    100021b6 <SoundBlaster16::open(int, int, void*)+0x1be>
100021a7:	83 ec 0c             	sub    esp,0xc
100021aa:	53                   	push   ebx
100021ab:	6a 01                	push   0x1
100021ad:	68 00 00 00 00       	push   0x0	100021ae: R_386_32	sb16Handler(regs*, void*)
100021b2:	6a 0a                	push   0xa
100021b4:	eb 3f                	jmp    100021f5 <SoundBlaster16::open(int, int, void*)+0x1fd>
100021b6:	83 ec 0c             	sub    esp,0xc
100021b9:	68 00 00 00 00       	push   0x0	100021ba: R_386_32	noirq
100021be:	e8 fc ff ff ff       	call   100021bf <SoundBlaster16::open(int, int, void*)+0x1c7>	100021bf: R_386_PC32	Krnl::panic(char const*)
100021c3:	83 c4 10             	add    esp,0x10
100021c6:	eb 36                	jmp    100021fe <SoundBlaster16::open(int, int, void*)+0x206>
100021c8:	50                   	push   eax
100021c9:	68 80 00 00 00       	push   0x80
100021ce:	68 24 02 00 00       	push   0x224
100021d3:	53                   	push   ebx
100021d4:	e8 fc ff ff ff       	call   100021d5 <SoundBlaster16::open(int, int, void*)+0x1dd>	100021d5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021d9:	83 c4 0c             	add    esp,0xc
100021dc:	6a 02                	push   0x2
100021de:	68 25 02 00 00       	push   0x225
100021e3:	53                   	push   ebx
100021e4:	e8 fc ff ff ff       	call   100021e5 <SoundBlaster16::open(int, int, void*)+0x1ed>	100021e5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
100021ec:	6a 01                	push   0x1
100021ee:	68 00 00 00 00       	push   0x0	100021ef: R_386_32	sb16Handler(regs*, void*)
100021f3:	6a 05                	push   0x5
100021f5:	53                   	push   ebx
100021f6:	e8 fc ff ff ff       	call   100021f7 <SoundBlaster16::open(int, int, void*)+0x1ff>	100021f7: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100021fb:	83 c4 20             	add    esp,0x20
100021fe:	56                   	push   esi
100021ff:	68 81 00 00 00       	push   0x81
10002204:	68 24 02 00 00       	push   0x224
10002209:	53                   	push   ebx
1000220a:	e8 fc ff ff ff       	call   1000220b <SoundBlaster16::open(int, int, void*)+0x213>	1000220b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000220f:	ba 25 02 00 00       	mov    edx,0x225
10002214:	ec                   	in     al,dx
10002215:	83 c4 0c             	add    esp,0xc
10002218:	89 c6                	mov    esi,eax
1000221a:	68 81 00 00 00       	push   0x81
1000221f:	68 24 02 00 00       	push   0x224
10002224:	53                   	push   ebx
10002225:	e8 fc ff ff ff       	call   10002226 <SoundBlaster16::open(int, int, void*)+0x22e>	10002226: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000222a:	58                   	pop    eax
1000222b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002231:	e8 fc ff ff ff       	call   10002232 <SoundBlaster16::open(int, int, void*)+0x23a>	10002232: R_386_PC32	DMAChannel::getChannelNum()
10002236:	83 c4 10             	add    esp,0x10
10002239:	48                   	dec    eax
1000223a:	75 0c                	jne    10002248 <SoundBlaster16::open(int, int, void*)+0x250>
1000223c:	81 e6 f0 00 00 00    	and    esi,0xf0
10002242:	51                   	push   ecx
10002243:	83 ce 02             	or     esi,0x2
10002246:	eb 20                	jmp    10002268 <SoundBlaster16::open(int, int, void*)+0x270>
10002248:	83 ec 0c             	sub    esp,0xc
1000224b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10002251:	e8 fc ff ff ff       	call   10002252 <SoundBlaster16::open(int, int, void*)+0x25a>	10002252: R_386_PC32	DMAChannel::getChannelNum()
10002256:	83 c4 10             	add    esp,0x10
10002259:	83 f8 03             	cmp    eax,0x3
1000225c:	75 18                	jne    10002276 <SoundBlaster16::open(int, int, void*)+0x27e>
1000225e:	81 e6 f0 00 00 00    	and    esi,0xf0
10002264:	52                   	push   edx
10002265:	83 ce 08             	or     esi,0x8
10002268:	56                   	push   esi
10002269:	68 25 02 00 00       	push   0x225
1000226e:	53                   	push   ebx
1000226f:	e8 fc ff ff ff       	call   10002270 <SoundBlaster16::open(int, int, void*)+0x278>	10002270: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002274:	eb 0d                	jmp    10002283 <SoundBlaster16::open(int, int, void*)+0x28b>
10002276:	83 ec 0c             	sub    esp,0xc
10002279:	68 00 00 00 00       	push   0x0	1000227a: R_386_32	baddma
1000227e:	e8 fc ff ff ff       	call   1000227f <SoundBlaster16::open(int, int, void*)+0x287>	1000227f: R_386_PC32	Krnl::panic(char const*)
10002283:	83 c4 10             	add    esp,0x10
10002286:	50                   	push   eax
10002287:	6a 22                	push   0x22
10002289:	68 24 02 00 00       	push   0x224
1000228e:	53                   	push   ebx
1000228f:	e8 fc ff ff ff       	call   10002290 <SoundBlaster16::open(int, int, void*)+0x298>	10002290: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002294:	83 c4 0c             	add    esp,0xc
10002297:	68 ff 00 00 00       	push   0xff
1000229c:	68 24 02 00 00       	push   0x224
100022a1:	53                   	push   ebx
100022a2:	e8 fc ff ff ff       	call   100022a3 <SoundBlaster16::open(int, int, void*)+0x2ab>	100022a3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022a7:	83 c4 10             	add    esp,0x10
100022aa:	31 c0                	xor    eax,eax
100022ac:	83 c4 14             	add    esp,0x14
100022af:	5b                   	pop    ebx
100022b0:	5e                   	pop    esi
100022b1:	c3                   	ret    

100022b2 <SoundBlaster16::onInterrupt()>:
100022b2:	56                   	push   esi
100022b3:	53                   	push   ebx
100022b4:	53                   	push   ebx
100022b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100022b9:	68 00 00 00 00       	push   0x0	100022ba: R_386_32	outputBuffer
100022be:	68 00 00 00 00       	push   0x0	100022bf: R_386_32	tempBuffer
100022c3:	68 00 20 00 00       	push   0x2000
100022c8:	56                   	push   esi
100022c9:	e8 fc ff ff ff       	call   100022ca <SoundBlaster16::onInterrupt()+0x18>	100022ca: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
100022ce:	83 c4 10             	add    esp,0x10
100022d1:	89 c3                	mov    ebx,eax
100022d3:	80 3d df 41 00 10 01 	cmp    BYTE PTR ds:0x100041df,0x1	100022d5: R_386_32	.data
100022da:	53                   	push   ebx
100022db:	19 c0                	sbb    eax,eax
100022dd:	25 00 20 00 00       	and    eax,0x2000
100022e2:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
100022e8:	50                   	push   eax
100022e9:	68 00 00 00 00       	push   0x0	100022ea: R_386_32	outputBuffer
100022ee:	56                   	push   esi
100022ef:	e8 fc ff ff ff       	call   100022f0 <SoundBlaster16::onInterrupt()+0x3e>	100022f0: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
100022f4:	83 c4 10             	add    esp,0x10
100022f7:	85 db                	test   ebx,ebx
100022f9:	75 0c                	jne    10002307 <SoundBlaster16::onInterrupt()+0x55>
100022fb:	51                   	push   ecx
100022fc:	51                   	push   ecx
100022fd:	6a 00                	push   0x0
100022ff:	56                   	push   esi
10002300:	e8 fc ff ff ff       	call   10002301 <SoundBlaster16::onInterrupt()+0x4f>	10002301: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10002305:	eb 3e                	jmp    10002345 <SoundBlaster16::onInterrupt()+0x93>
10002307:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
1000230d:	7f 39                	jg     10002348 <SoundBlaster16::onInterrupt()+0x96>
1000230f:	52                   	push   edx
10002310:	6a 24                	push   0x24
10002312:	68 2c 02 00 00       	push   0x22c
10002317:	56                   	push   esi
10002318:	e8 fc ff ff ff       	call   10002319 <SoundBlaster16::onInterrupt()+0x67>	10002319: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000231d:	83 c4 0c             	add    esp,0xc
10002320:	8d 43 ff             	lea    eax,[ebx-0x1]
10002323:	4b                   	dec    ebx
10002324:	0f b6 c0             	movzx  eax,al
10002327:	0f b6 df             	movzx  ebx,bh
1000232a:	50                   	push   eax
1000232b:	68 2c 02 00 00       	push   0x22c
10002330:	56                   	push   esi
10002331:	e8 fc ff ff ff       	call   10002332 <SoundBlaster16::onInterrupt()+0x80>	10002332: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002336:	83 c4 0c             	add    esp,0xc
10002339:	53                   	push   ebx
1000233a:	68 2c 02 00 00       	push   0x22c
1000233f:	56                   	push   esi
10002340:	e8 fc ff ff ff       	call   10002341 <SoundBlaster16::onInterrupt()+0x8f>	10002341: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002345:	83 c4 10             	add    esp,0x10
10002348:	80 35 df 41 00 10 01 	xor    BYTE PTR ds:0x100041df,0x1	1000234a: R_386_32	.data
1000234f:	58                   	pop    eax
10002350:	5b                   	pop    ebx
10002351:	5e                   	pop    esi
10002352:	c3                   	ret    
10002353:	90                   	nop

10002354 <SoundBlaster16::close(int, int, void*)>:
10002354:	83 ec 0c             	sub    esp,0xc
10002357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000235b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10002361:	85 c0                	test   eax,eax
10002363:	74 11                	je     10002376 <SoundBlaster16::close(int, int, void*)+0x22>
10002365:	52                   	push   edx
10002366:	52                   	push   edx
10002367:	50                   	push   eax
10002368:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000236a: R_386_32	isaDMAController
1000236e:	e8 fc ff ff ff       	call   1000236f <SoundBlaster16::close(int, int, void*)+0x1b>	1000236f: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10002373:	83 c4 10             	add    esp,0x10
10002376:	31 c0                	xor    eax,eax
10002378:	83 c4 0c             	add    esp,0xc
1000237b:	c3                   	ret    

1000237c <PHYS_RAM_TABLE_SIZE>:
1000237c:	13 05 00 00                                         ....

10002380 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002380:	24 05 00 00                                         $...

10002384 <PHYS_RAM_TABLE>:
10002384:	00 06 00 00                                         ....

10002388 <PHYS_DMA_MEMORY_1>:
10002388:	00 00 01 00                                         ....

1000238c <PHYS_PHYS_PAGE_BITMAP>:
1000238c:	00 00 02 00                                         ....

10002390 <PHYS_VIRT_PAGE_BITMAP>:
10002390:	00 00 04 00                                         ....

10002394 <PHYS_DMA_MEMORY_2>:
10002394:	00 00 06 00                                         ....

10002398 <PHYS_ALLOCED_VIRT_PAGES>:
10002398:	00 00 10 00                                         ....

1000239c <PHYS_KRNL_PAGE_DIRECTORY>:
1000239c:	00 10 00 00                                         ....

100023a0 <VIRT_KERNEL_BASE>:
100023a0:	00 00 00 c0                                         ....

100023a4 <VIRT_LOW_MEGS>:
100023a4:	00 00 00 c2                                         ....

100023a8 <VIRT_CPU_SPECIFIC>:
100023a8:	00 00 40 c2                                         ..@.

100023ac <VIRT_RECURSIVE_SPOT_1>:
100023ac:	00 00 80 c2                                         ....

100023b0 <VIRT_RECURSIVE_SPOT_2>:
100023b0:	00 00 c0 c2                                         ....

100023b4 <VIRT_DMA_MEMORY_1>:
100023b4:	00 00 01 c2                                         ....

100023b8 <SIZE_DMA_MEMORY_1>:
100023b8:	00 00 01 00                                         ....

100023bc <VIRT_DMA_MEMORY_2>:
100023bc:	00 00 06 c2                                         ....

100023c0 <SIZE_DMA_MEMORY_2>:
100023c0:	00 00 02 00                                         ....

100023c4 <VIRT_KRNL_PAGE_DIRECTORY>:
100023c4:	00 10 00 c2                                         ....

100023c8 <VIRT_PHYS_PAGE_BITMAP>:
100023c8:	00 00 02 c2                                         ....

100023cc <SIZE_PHYS_PAGE_BITMAP>:
100023cc:	00 00 02 00                                         ....

100023d0 <VIRT_VIRT_PAGE_BITMAP>:
100023d0:	00 00 04 c2                                         ....

100023d4 <SIZE_VIRT_PAGE_BITMAP>:
100023d4:	00 80 00 00                                         ....

100023d8 <VIRT_RAM_TABLE>:
100023d8:	00 06 00 c2                                         ....

100023dc <VIRT_RAM_TABLE_SIZE>:
100023dc:	13 05 00 c2                                         ....

100023e0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100023e0:	24 05 00 c2                                         $...

100023e4 <SIZE_APP_STACK_USER>:
100023e4:	00 00 18 00                                         ....

100023e8 <SIZE_APP_STACK_KRNL>:
100023e8:	00 00 08 00                                         ....

100023ec <SIZE_APP_STACK_TOTAL>:
100023ec:	00 00 20 00                                         .. .

100023f0 <VIRT_APP_DATA>:
100023f0:	00 00 00 10                                         ....

100023f4 <VIRT_APP_STACK_USER_TOP>:
100023f4:	00 00 00 02                                         ....

100023f8 <VIRT_APP_STACK_KRNL_TOP>:
100023f8:	00 00 e8 01                                         ....

100023fc <VIRT_HEAP_MIN>:
100023fc:	00 00 00 c8                                         ....

10002400 <VIRT_HEAP_MAX>:
10002400:	ff ff ff ef                                         ....

10002404 <VIRT_SBRK_MIN>:
10002404:	00 00 00 f0                                         ....

10002408 <VIRT_SBRK_MAX>:
10002408:	00 00 c0 ff                                         ....

1000240c <VIRT_ALLOCED_VIRT_PAGES>:
1000240c:	00 00 10 c2                                         ....

10002410 <VIRT_ACPI_DRIVER>:
10002410:	00 40 48 c2                                         .@H.

10002414 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002414:	96 00 00 00                                         ....

10002418 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002418:	2c 01 00 00 73 74 72 69 6e 67 20 74 65 73 74 2e     ,...string test.
10002428:	0a 00 66 90                                         ..f.

1000242c <vtable for ISA>:
	...
	10002434: R_386_32	ISA::~ISA()
	10002438: R_386_32	ISA::~ISA()
	1000243c: R_386_32	ISA::open(int, int, void*)
	10002440: R_386_32	ISA::close(int, int, void*)
	10002444: R_386_32	Device::hibernate()
	10002448: R_386_32	Device::wake()
	1000244c: R_386_32	ISA::detect()
	10002450: R_386_32	Device::disableLegacy()
	10002454: R_386_32	Device::powerSaving(PowerSavingLevel)

10002458 <PHYS_RAM_TABLE_SIZE>:
10002458:	13 05 00 00                                         ....

1000245c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000245c:	24 05 00 00                                         $...

10002460 <PHYS_RAM_TABLE>:
10002460:	00 06 00 00                                         ....

10002464 <PHYS_DMA_MEMORY_1>:
10002464:	00 00 01 00                                         ....

10002468 <PHYS_PHYS_PAGE_BITMAP>:
10002468:	00 00 02 00                                         ....

1000246c <PHYS_VIRT_PAGE_BITMAP>:
1000246c:	00 00 04 00                                         ....

10002470 <PHYS_DMA_MEMORY_2>:
10002470:	00 00 06 00                                         ....

10002474 <PHYS_ALLOCED_VIRT_PAGES>:
10002474:	00 00 10 00                                         ....

10002478 <PHYS_KRNL_PAGE_DIRECTORY>:
10002478:	00 10 00 00                                         ....

1000247c <VIRT_KERNEL_BASE>:
1000247c:	00 00 00 c0                                         ....

10002480 <VIRT_LOW_MEGS>:
10002480:	00 00 00 c2                                         ....

10002484 <VIRT_CPU_SPECIFIC>:
10002484:	00 00 40 c2                                         ..@.

10002488 <VIRT_RECURSIVE_SPOT_1>:
10002488:	00 00 80 c2                                         ....

1000248c <VIRT_RECURSIVE_SPOT_2>:
1000248c:	00 00 c0 c2                                         ....

10002490 <VIRT_DMA_MEMORY_1>:
10002490:	00 00 01 c2                                         ....

10002494 <SIZE_DMA_MEMORY_1>:
10002494:	00 00 01 00                                         ....

10002498 <VIRT_DMA_MEMORY_2>:
10002498:	00 00 06 c2                                         ....

1000249c <SIZE_DMA_MEMORY_2>:
1000249c:	00 00 02 00                                         ....

100024a0 <VIRT_KRNL_PAGE_DIRECTORY>:
100024a0:	00 10 00 c2                                         ....

100024a4 <VIRT_PHYS_PAGE_BITMAP>:
100024a4:	00 00 02 c2                                         ....

100024a8 <SIZE_PHYS_PAGE_BITMAP>:
100024a8:	00 00 02 00                                         ....

100024ac <VIRT_VIRT_PAGE_BITMAP>:
100024ac:	00 00 04 c2                                         ....

100024b0 <SIZE_VIRT_PAGE_BITMAP>:
100024b0:	00 80 00 00                                         ....

100024b4 <VIRT_RAM_TABLE>:
100024b4:	00 06 00 c2                                         ....

100024b8 <VIRT_RAM_TABLE_SIZE>:
100024b8:	13 05 00 c2                                         ....

100024bc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100024bc:	24 05 00 c2                                         $...

100024c0 <SIZE_APP_STACK_USER>:
100024c0:	00 00 18 00                                         ....

100024c4 <SIZE_APP_STACK_KRNL>:
100024c4:	00 00 08 00                                         ....

100024c8 <SIZE_APP_STACK_TOTAL>:
100024c8:	00 00 20 00                                         .. .

100024cc <VIRT_APP_DATA>:
100024cc:	00 00 00 10                                         ....

100024d0 <VIRT_APP_STACK_USER_TOP>:
100024d0:	00 00 00 02                                         ....

100024d4 <VIRT_APP_STACK_KRNL_TOP>:
100024d4:	00 00 e8 01                                         ....

100024d8 <VIRT_HEAP_MIN>:
100024d8:	00 00 00 c8                                         ....

100024dc <VIRT_HEAP_MAX>:
100024dc:	ff ff ff ef                                         ....

100024e0 <VIRT_SBRK_MIN>:
100024e0:	00 00 00 f0                                         ....

100024e4 <VIRT_SBRK_MAX>:
100024e4:	00 00 c0 ff                                         ....

100024e8 <VIRT_ALLOCED_VIRT_PAGES>:
100024e8:	00 00 10 c2                                         ....

100024ec <VIRT_ACPI_DRIVER>:
100024ec:	00 40 48 c2                                         .@H.

100024f0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100024f0:	96 00 00 00                                         ....

100024f4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100024f4:	2c 01 00 00                                         ,...

100024f8 <CSWTCH.8>:
100024f8:	00 02 04 06 c0 c4 c8 cc                             ........

10002500 <CSWTCH.9>:
10002500:	01 03 05 07 c2 c6 ca ce                             ........

10002508 <CSWTCH.10>:
10002508:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10002518:	61 6e 67 65 2e 0a 00 90                             ange....

10002520 <vtable for DMA>:
	...
	10002528: R_386_32	DMA::~DMA()
	1000252c: R_386_32	DMA::~DMA()
	10002530: R_386_32	DMA::open(int, int, void*)
	10002534: R_386_32	DMA::close(int, int, void*)
	10002538: R_386_32	Device::hibernate()
	1000253c: R_386_32	Device::wake()
	10002540: R_386_32	Device::detect()
	10002544: R_386_32	Device::disableLegacy()
	10002548: R_386_32	Device::powerSaving(PowerSavingLevel)

1000254c <PHYS_RAM_TABLE_SIZE>:
1000254c:	13 05 00 00                                         ....

10002550 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002550:	24 05 00 00                                         $...

10002554 <PHYS_RAM_TABLE>:
10002554:	00 06 00 00                                         ....

10002558 <PHYS_DMA_MEMORY_1>:
10002558:	00 00 01 00                                         ....

1000255c <PHYS_PHYS_PAGE_BITMAP>:
1000255c:	00 00 02 00                                         ....

10002560 <PHYS_VIRT_PAGE_BITMAP>:
10002560:	00 00 04 00                                         ....

10002564 <PHYS_DMA_MEMORY_2>:
10002564:	00 00 06 00                                         ....

10002568 <PHYS_ALLOCED_VIRT_PAGES>:
10002568:	00 00 10 00                                         ....

1000256c <PHYS_KRNL_PAGE_DIRECTORY>:
1000256c:	00 10 00 00                                         ....

10002570 <VIRT_KERNEL_BASE>:
10002570:	00 00 00 c0                                         ....

10002574 <VIRT_LOW_MEGS>:
10002574:	00 00 00 c2                                         ....

10002578 <VIRT_CPU_SPECIFIC>:
10002578:	00 00 40 c2                                         ..@.

1000257c <VIRT_RECURSIVE_SPOT_1>:
1000257c:	00 00 80 c2                                         ....

10002580 <VIRT_RECURSIVE_SPOT_2>:
10002580:	00 00 c0 c2                                         ....

10002584 <VIRT_DMA_MEMORY_1>:
10002584:	00 00 01 c2                                         ....

10002588 <SIZE_DMA_MEMORY_1>:
10002588:	00 00 01 00                                         ....

1000258c <VIRT_DMA_MEMORY_2>:
1000258c:	00 00 06 c2                                         ....

10002590 <SIZE_DMA_MEMORY_2>:
10002590:	00 00 02 00                                         ....

10002594 <VIRT_KRNL_PAGE_DIRECTORY>:
10002594:	00 10 00 c2                                         ....

10002598 <VIRT_PHYS_PAGE_BITMAP>:
10002598:	00 00 02 c2                                         ....

1000259c <SIZE_PHYS_PAGE_BITMAP>:
1000259c:	00 00 02 00                                         ....

100025a0 <VIRT_VIRT_PAGE_BITMAP>:
100025a0:	00 00 04 c2                                         ....

100025a4 <SIZE_VIRT_PAGE_BITMAP>:
100025a4:	00 80 00 00                                         ....

100025a8 <VIRT_RAM_TABLE>:
100025a8:	00 06 00 c2                                         ....

100025ac <VIRT_RAM_TABLE_SIZE>:
100025ac:	13 05 00 c2                                         ....

100025b0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100025b0:	24 05 00 c2                                         $...

100025b4 <SIZE_APP_STACK_USER>:
100025b4:	00 00 18 00                                         ....

100025b8 <SIZE_APP_STACK_KRNL>:
100025b8:	00 00 08 00                                         ....

100025bc <SIZE_APP_STACK_TOTAL>:
100025bc:	00 00 20 00                                         .. .

100025c0 <VIRT_APP_DATA>:
100025c0:	00 00 00 10                                         ....

100025c4 <VIRT_APP_STACK_USER_TOP>:
100025c4:	00 00 00 02                                         ....

100025c8 <VIRT_APP_STACK_KRNL_TOP>:
100025c8:	00 00 e8 01                                         ....

100025cc <VIRT_HEAP_MIN>:
100025cc:	00 00 00 c8                                         ....

100025d0 <VIRT_HEAP_MAX>:
100025d0:	ff ff ff ef                                         ....

100025d4 <VIRT_SBRK_MIN>:
100025d4:	00 00 00 f0                                         ....

100025d8 <VIRT_SBRK_MAX>:
100025d8:	00 00 c0 ff                                         ....

100025dc <VIRT_ALLOCED_VIRT_PAGES>:
100025dc:	00 00 10 c2                                         ....

100025e0 <VIRT_ACPI_DRIVER>:
100025e0:	00 40 48 c2                                         .@H.

100025e4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100025e4:	96 00 00 00                                         ....

100025e8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100025e8:	2c 01 00 00                                         ,...

100025ec <vtable for PS2>:
	...
	100025f4: R_386_32	PS2::~PS2()
	100025f8: R_386_32	PS2::~PS2()
	100025fc: R_386_32	PS2::open(int, int, void*)
	10002600: R_386_32	PS2::close(int, int, void*)
	10002604: R_386_32	Device::hibernate()
	10002608: R_386_32	Device::wake()
	1000260c: R_386_32	PS2::detect()
	10002610: R_386_32	Device::disableLegacy()
	10002614: R_386_32	Device::powerSaving(PowerSavingLevel)
10002618:	66 90 66 90 66 90 66 90                             f.f.f.f.

10002620 <PHYS_RAM_TABLE_SIZE>:
10002620:	13 05 00 00                                         ....

10002624 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002624:	24 05 00 00                                         $...

10002628 <PHYS_RAM_TABLE>:
10002628:	00 06 00 00                                         ....

1000262c <PHYS_DMA_MEMORY_1>:
1000262c:	00 00 01 00                                         ....

10002630 <PHYS_PHYS_PAGE_BITMAP>:
10002630:	00 00 02 00                                         ....

10002634 <PHYS_VIRT_PAGE_BITMAP>:
10002634:	00 00 04 00                                         ....

10002638 <PHYS_DMA_MEMORY_2>:
10002638:	00 00 06 00                                         ....

1000263c <PHYS_ALLOCED_VIRT_PAGES>:
1000263c:	00 00 10 00                                         ....

10002640 <PHYS_KRNL_PAGE_DIRECTORY>:
10002640:	00 10 00 00                                         ....

10002644 <VIRT_KERNEL_BASE>:
10002644:	00 00 00 c0                                         ....

10002648 <VIRT_LOW_MEGS>:
10002648:	00 00 00 c2                                         ....

1000264c <VIRT_CPU_SPECIFIC>:
1000264c:	00 00 40 c2                                         ..@.

10002650 <VIRT_RECURSIVE_SPOT_1>:
10002650:	00 00 80 c2                                         ....

10002654 <VIRT_RECURSIVE_SPOT_2>:
10002654:	00 00 c0 c2                                         ....

10002658 <VIRT_DMA_MEMORY_1>:
10002658:	00 00 01 c2                                         ....

1000265c <SIZE_DMA_MEMORY_1>:
1000265c:	00 00 01 00                                         ....

10002660 <VIRT_DMA_MEMORY_2>:
10002660:	00 00 06 c2                                         ....

10002664 <SIZE_DMA_MEMORY_2>:
10002664:	00 00 02 00                                         ....

10002668 <VIRT_KRNL_PAGE_DIRECTORY>:
10002668:	00 10 00 c2                                         ....

1000266c <VIRT_PHYS_PAGE_BITMAP>:
1000266c:	00 00 02 c2                                         ....

10002670 <SIZE_PHYS_PAGE_BITMAP>:
10002670:	00 00 02 00                                         ....

10002674 <VIRT_VIRT_PAGE_BITMAP>:
10002674:	00 00 04 c2                                         ....

10002678 <SIZE_VIRT_PAGE_BITMAP>:
10002678:	00 80 00 00                                         ....

1000267c <VIRT_RAM_TABLE>:
1000267c:	00 06 00 c2                                         ....

10002680 <VIRT_RAM_TABLE_SIZE>:
10002680:	13 05 00 c2                                         ....

10002684 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002684:	24 05 00 c2                                         $...

10002688 <SIZE_APP_STACK_USER>:
10002688:	00 00 18 00                                         ....

1000268c <SIZE_APP_STACK_KRNL>:
1000268c:	00 00 08 00                                         ....

10002690 <SIZE_APP_STACK_TOTAL>:
10002690:	00 00 20 00                                         .. .

10002694 <VIRT_APP_DATA>:
10002694:	00 00 00 10                                         ....

10002698 <VIRT_APP_STACK_USER_TOP>:
10002698:	00 00 00 02                                         ....

1000269c <VIRT_APP_STACK_KRNL_TOP>:
1000269c:	00 00 e8 01                                         ....

100026a0 <VIRT_HEAP_MIN>:
100026a0:	00 00 00 c8                                         ....

100026a4 <VIRT_HEAP_MAX>:
100026a4:	ff ff ff ef                                         ....

100026a8 <VIRT_SBRK_MIN>:
100026a8:	00 00 00 f0                                         ....

100026ac <VIRT_SBRK_MAX>:
100026ac:	00 00 c0 ff                                         ....

100026b0 <VIRT_ALLOCED_VIRT_PAGES>:
100026b0:	00 00 10 c2                                         ....

100026b4 <VIRT_ACPI_DRIVER>:
100026b4:	00 40 48 c2                                         .@H.

100026b8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100026b8:	96 00 00 00                                         ....

100026bc <TERMINAL_KEYBUFFER_OUT_SIZE>:
100026bc:	2c 01 00 00                                         ,...

100026c0 <PS2Keyboard::internalMapperLower>:
100026c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100026d0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100026e0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100026f0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10002700:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10002710:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002720:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002730:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002740:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100027c0 <PS2Keyboard::internalMapperUpper>:
100027c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100027d0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100027e0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100027f0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10002800:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10002810:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002820:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002830:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002840:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100028c0 <PS2Keyboard::internalMapCapLower>:
100028c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100028d0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
100028e0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
100028f0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10002900:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10002910:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002920:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002930:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002940:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100029c0 <PS2Keyboard::internalMapCapUpper>:
100029c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100029d0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
100029e0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
100029f0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10002a00:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10002a10:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002a20:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002a30:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002a40:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002ac0 <PS2Keyboard::internalMapperLowerBad>:
10002ac0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002ad0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10002ae0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10002af0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10002b00:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002b10:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002b20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002b30:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002b40:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002b50:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10002b60:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10002b70:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10002b80:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002b90:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002ba0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002bb0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002bc0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002bd0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10002be0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10002bf0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10002c00:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002c10:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002c20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c30:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c40:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002c50:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10002c60:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10002c70:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10002c80:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002c90:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002ca0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002cb0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002cc0:	00 66 90 90                                         .f..

10002cc4 <vtable for PS2Keyboard>:
	...
	10002ccc: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002cd0: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002cd4: R_386_32	PS2Keyboard::open(int, int, void*)
	10002cd8: R_386_32	PS2Keyboard::close(int, int, void*)
	10002cdc: R_386_32	Device::hibernate()
	10002ce0: R_386_32	Device::wake()
	10002ce4: R_386_32	Device::detect()
	10002ce8: R_386_32	Device::disableLegacy()
	10002cec: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002cf0: R_386_32	PS2Keyboard::setRepeatRate(int)
	10002cf4: R_386_32	PS2Keyboard::setRepeatDelay(int)

10002cf8 <PHYS_RAM_TABLE_SIZE>:
10002cf8:	13 05 00 00                                         ....

10002cfc <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002cfc:	24 05 00 00                                         $...

10002d00 <PHYS_RAM_TABLE>:
10002d00:	00 06 00 00                                         ....

10002d04 <PHYS_DMA_MEMORY_1>:
10002d04:	00 00 01 00                                         ....

10002d08 <PHYS_PHYS_PAGE_BITMAP>:
10002d08:	00 00 02 00                                         ....

10002d0c <PHYS_VIRT_PAGE_BITMAP>:
10002d0c:	00 00 04 00                                         ....

10002d10 <PHYS_DMA_MEMORY_2>:
10002d10:	00 00 06 00                                         ....

10002d14 <PHYS_ALLOCED_VIRT_PAGES>:
10002d14:	00 00 10 00                                         ....

10002d18 <PHYS_KRNL_PAGE_DIRECTORY>:
10002d18:	00 10 00 00                                         ....

10002d1c <VIRT_KERNEL_BASE>:
10002d1c:	00 00 00 c0                                         ....

10002d20 <VIRT_LOW_MEGS>:
10002d20:	00 00 00 c2                                         ....

10002d24 <VIRT_CPU_SPECIFIC>:
10002d24:	00 00 40 c2                                         ..@.

10002d28 <VIRT_RECURSIVE_SPOT_1>:
10002d28:	00 00 80 c2                                         ....

10002d2c <VIRT_RECURSIVE_SPOT_2>:
10002d2c:	00 00 c0 c2                                         ....

10002d30 <VIRT_DMA_MEMORY_1>:
10002d30:	00 00 01 c2                                         ....

10002d34 <SIZE_DMA_MEMORY_1>:
10002d34:	00 00 01 00                                         ....

10002d38 <VIRT_DMA_MEMORY_2>:
10002d38:	00 00 06 c2                                         ....

10002d3c <SIZE_DMA_MEMORY_2>:
10002d3c:	00 00 02 00                                         ....

10002d40 <VIRT_KRNL_PAGE_DIRECTORY>:
10002d40:	00 10 00 c2                                         ....

10002d44 <VIRT_PHYS_PAGE_BITMAP>:
10002d44:	00 00 02 c2                                         ....

10002d48 <SIZE_PHYS_PAGE_BITMAP>:
10002d48:	00 00 02 00                                         ....

10002d4c <VIRT_VIRT_PAGE_BITMAP>:
10002d4c:	00 00 04 c2                                         ....

10002d50 <SIZE_VIRT_PAGE_BITMAP>:
10002d50:	00 80 00 00                                         ....

10002d54 <VIRT_RAM_TABLE>:
10002d54:	00 06 00 c2                                         ....

10002d58 <VIRT_RAM_TABLE_SIZE>:
10002d58:	13 05 00 c2                                         ....

10002d5c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002d5c:	24 05 00 c2                                         $...

10002d60 <SIZE_APP_STACK_USER>:
10002d60:	00 00 18 00                                         ....

10002d64 <SIZE_APP_STACK_KRNL>:
10002d64:	00 00 08 00                                         ....

10002d68 <SIZE_APP_STACK_TOTAL>:
10002d68:	00 00 20 00                                         .. .

10002d6c <VIRT_APP_DATA>:
10002d6c:	00 00 00 10                                         ....

10002d70 <VIRT_APP_STACK_USER_TOP>:
10002d70:	00 00 00 02                                         ....

10002d74 <VIRT_APP_STACK_KRNL_TOP>:
10002d74:	00 00 e8 01                                         ....

10002d78 <VIRT_HEAP_MIN>:
10002d78:	00 00 00 c8                                         ....

10002d7c <VIRT_HEAP_MAX>:
10002d7c:	ff ff ff ef                                         ....

10002d80 <VIRT_SBRK_MIN>:
10002d80:	00 00 00 f0                                         ....

10002d84 <VIRT_SBRK_MAX>:
10002d84:	00 00 c0 ff                                         ....

10002d88 <VIRT_ALLOCED_VIRT_PAGES>:
10002d88:	00 00 10 c2                                         ....

10002d8c <VIRT_ACPI_DRIVER>:
10002d8c:	00 40 48 c2                                         .@H.

10002d90 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002d90:	96 00 00 00                                         ....

10002d94 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002d94:	2c 01 00 00                                         ,...

10002d98 <vtable for PS2Mouse>:
	...
	10002da0: R_386_32	PS2Mouse::~PS2Mouse()
	10002da4: R_386_32	PS2Mouse::~PS2Mouse()
	10002da8: R_386_32	PS2Mouse::open(int, int, void*)
	10002dac: R_386_32	PS2Mouse::close(int, int, void*)
	10002db0: R_386_32	Device::hibernate()
	10002db4: R_386_32	Device::wake()
	10002db8: R_386_32	PS2Mouse::detect()
	10002dbc: R_386_32	Device::disableLegacy()
	10002dc0: R_386_32	Device::powerSaving(PowerSavingLevel)

10002dc4 <PHYS_RAM_TABLE_SIZE>:
10002dc4:	13 05 00 00                                         ....

10002dc8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002dc8:	24 05 00 00                                         $...

10002dcc <PHYS_RAM_TABLE>:
10002dcc:	00 06 00 00                                         ....

10002dd0 <PHYS_DMA_MEMORY_1>:
10002dd0:	00 00 01 00                                         ....

10002dd4 <PHYS_PHYS_PAGE_BITMAP>:
10002dd4:	00 00 02 00                                         ....

10002dd8 <PHYS_VIRT_PAGE_BITMAP>:
10002dd8:	00 00 04 00                                         ....

10002ddc <PHYS_DMA_MEMORY_2>:
10002ddc:	00 00 06 00                                         ....

10002de0 <PHYS_ALLOCED_VIRT_PAGES>:
10002de0:	00 00 10 00                                         ....

10002de4 <PHYS_KRNL_PAGE_DIRECTORY>:
10002de4:	00 10 00 00                                         ....

10002de8 <VIRT_KERNEL_BASE>:
10002de8:	00 00 00 c0                                         ....

10002dec <VIRT_LOW_MEGS>:
10002dec:	00 00 00 c2                                         ....

10002df0 <VIRT_CPU_SPECIFIC>:
10002df0:	00 00 40 c2                                         ..@.

10002df4 <VIRT_RECURSIVE_SPOT_1>:
10002df4:	00 00 80 c2                                         ....

10002df8 <VIRT_RECURSIVE_SPOT_2>:
10002df8:	00 00 c0 c2                                         ....

10002dfc <VIRT_DMA_MEMORY_1>:
10002dfc:	00 00 01 c2                                         ....

10002e00 <SIZE_DMA_MEMORY_1>:
10002e00:	00 00 01 00                                         ....

10002e04 <VIRT_DMA_MEMORY_2>:
10002e04:	00 00 06 c2                                         ....

10002e08 <SIZE_DMA_MEMORY_2>:
10002e08:	00 00 02 00                                         ....

10002e0c <VIRT_KRNL_PAGE_DIRECTORY>:
10002e0c:	00 10 00 c2                                         ....

10002e10 <VIRT_PHYS_PAGE_BITMAP>:
10002e10:	00 00 02 c2                                         ....

10002e14 <SIZE_PHYS_PAGE_BITMAP>:
10002e14:	00 00 02 00                                         ....

10002e18 <VIRT_VIRT_PAGE_BITMAP>:
10002e18:	00 00 04 c2                                         ....

10002e1c <SIZE_VIRT_PAGE_BITMAP>:
10002e1c:	00 80 00 00                                         ....

10002e20 <VIRT_RAM_TABLE>:
10002e20:	00 06 00 c2                                         ....

10002e24 <VIRT_RAM_TABLE_SIZE>:
10002e24:	13 05 00 c2                                         ....

10002e28 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002e28:	24 05 00 c2                                         $...

10002e2c <SIZE_APP_STACK_USER>:
10002e2c:	00 00 18 00                                         ....

10002e30 <SIZE_APP_STACK_KRNL>:
10002e30:	00 00 08 00                                         ....

10002e34 <SIZE_APP_STACK_TOTAL>:
10002e34:	00 00 20 00                                         .. .

10002e38 <VIRT_APP_DATA>:
10002e38:	00 00 00 10                                         ....

10002e3c <VIRT_APP_STACK_USER_TOP>:
10002e3c:	00 00 00 02                                         ....

10002e40 <VIRT_APP_STACK_KRNL_TOP>:
10002e40:	00 00 e8 01                                         ....

10002e44 <VIRT_HEAP_MIN>:
10002e44:	00 00 00 c8                                         ....

10002e48 <VIRT_HEAP_MAX>:
10002e48:	ff ff ff ef                                         ....

10002e4c <VIRT_SBRK_MIN>:
10002e4c:	00 00 00 f0                                         ....

10002e50 <VIRT_SBRK_MAX>:
10002e50:	00 00 c0 ff                                         ....

10002e54 <VIRT_ALLOCED_VIRT_PAGES>:
10002e54:	00 00 10 c2                                         ....

10002e58 <VIRT_ACPI_DRIVER>:
10002e58:	00 40 48 c2                                         .@H.

10002e5c <TERMINAL_KEYBUFFER_IN_SIZE>:
10002e5c:	96 00 00 00                                         ....

10002e60 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002e60:	2c 01 00 00                                         ,...

10002e64 <vtable for PS2Port>:
	...
	10002e6c: R_386_32	PS2Port::~PS2Port()
	10002e70: R_386_32	PS2Port::~PS2Port()
	10002e74: R_386_32	PS2Port::open(int, int, void*)
	10002e78: R_386_32	PS2Port::close(int, int, void*)
	10002e7c: R_386_32	Device::hibernate()
	10002e80: R_386_32	Device::wake()
	10002e84: R_386_32	PS2Port::detect()
	10002e88: R_386_32	Device::disableLegacy()
	10002e8c: R_386_32	Device::powerSaving(PowerSavingLevel)

10002e90 <PHYS_RAM_TABLE_SIZE>:
10002e90:	13 05 00 00                                         ....

10002e94 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002e94:	24 05 00 00                                         $...

10002e98 <PHYS_RAM_TABLE>:
10002e98:	00 06 00 00                                         ....

10002e9c <PHYS_DMA_MEMORY_1>:
10002e9c:	00 00 01 00                                         ....

10002ea0 <PHYS_PHYS_PAGE_BITMAP>:
10002ea0:	00 00 02 00                                         ....

10002ea4 <PHYS_VIRT_PAGE_BITMAP>:
10002ea4:	00 00 04 00                                         ....

10002ea8 <PHYS_DMA_MEMORY_2>:
10002ea8:	00 00 06 00                                         ....

10002eac <PHYS_ALLOCED_VIRT_PAGES>:
10002eac:	00 00 10 00                                         ....

10002eb0 <PHYS_KRNL_PAGE_DIRECTORY>:
10002eb0:	00 10 00 00                                         ....

10002eb4 <VIRT_KERNEL_BASE>:
10002eb4:	00 00 00 c0                                         ....

10002eb8 <VIRT_LOW_MEGS>:
10002eb8:	00 00 00 c2                                         ....

10002ebc <VIRT_CPU_SPECIFIC>:
10002ebc:	00 00 40 c2                                         ..@.

10002ec0 <VIRT_RECURSIVE_SPOT_1>:
10002ec0:	00 00 80 c2                                         ....

10002ec4 <VIRT_RECURSIVE_SPOT_2>:
10002ec4:	00 00 c0 c2                                         ....

10002ec8 <VIRT_DMA_MEMORY_1>:
10002ec8:	00 00 01 c2                                         ....

10002ecc <SIZE_DMA_MEMORY_1>:
10002ecc:	00 00 01 00                                         ....

10002ed0 <VIRT_DMA_MEMORY_2>:
10002ed0:	00 00 06 c2                                         ....

10002ed4 <SIZE_DMA_MEMORY_2>:
10002ed4:	00 00 02 00                                         ....

10002ed8 <VIRT_KRNL_PAGE_DIRECTORY>:
10002ed8:	00 10 00 c2                                         ....

10002edc <VIRT_PHYS_PAGE_BITMAP>:
10002edc:	00 00 02 c2                                         ....

10002ee0 <SIZE_PHYS_PAGE_BITMAP>:
10002ee0:	00 00 02 00                                         ....

10002ee4 <VIRT_VIRT_PAGE_BITMAP>:
10002ee4:	00 00 04 c2                                         ....

10002ee8 <SIZE_VIRT_PAGE_BITMAP>:
10002ee8:	00 80 00 00                                         ....

10002eec <VIRT_RAM_TABLE>:
10002eec:	00 06 00 c2                                         ....

10002ef0 <VIRT_RAM_TABLE_SIZE>:
10002ef0:	13 05 00 c2                                         ....

10002ef4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002ef4:	24 05 00 c2                                         $...

10002ef8 <SIZE_APP_STACK_USER>:
10002ef8:	00 00 18 00                                         ....

10002efc <SIZE_APP_STACK_KRNL>:
10002efc:	00 00 08 00                                         ....

10002f00 <SIZE_APP_STACK_TOTAL>:
10002f00:	00 00 20 00                                         .. .

10002f04 <VIRT_APP_DATA>:
10002f04:	00 00 00 10                                         ....

10002f08 <VIRT_APP_STACK_USER_TOP>:
10002f08:	00 00 00 02                                         ....

10002f0c <VIRT_APP_STACK_KRNL_TOP>:
10002f0c:	00 00 e8 01                                         ....

10002f10 <VIRT_HEAP_MIN>:
10002f10:	00 00 00 c8                                         ....

10002f14 <VIRT_HEAP_MAX>:
10002f14:	ff ff ff ef                                         ....

10002f18 <VIRT_SBRK_MIN>:
10002f18:	00 00 00 f0                                         ....

10002f1c <VIRT_SBRK_MAX>:
10002f1c:	00 00 c0 ff                                         ....

10002f20 <VIRT_ALLOCED_VIRT_PAGES>:
10002f20:	00 00 10 c2                                         ....

10002f24 <VIRT_ACPI_DRIVER>:
10002f24:	00 40 48 c2                                         .@H.

10002f28 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002f28:	96 00 00 00                                         ....

10002f2c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002f2c:	2c 01 00 00                                         ,...

10002f30 <vtable for SoundBlaster16>:
	...
	10002f38: R_386_32	SoundBlaster16::~SoundBlaster16()
	10002f3c: R_386_32	SoundBlaster16::~SoundBlaster16()
	10002f40: R_386_32	SoundBlaster16::open(int, int, void*)
	10002f44: R_386_32	SoundBlaster16::close(int, int, void*)
	10002f48: R_386_32	Device::hibernate()
	10002f4c: R_386_32	Device::wake()
	10002f50: R_386_32	Device::detect()
	10002f54: R_386_32	Device::disableLegacy()
	10002f58: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002f5c: R_386_32	SoundBlaster16::getNumHwChannels()
	10002f60: R_386_32	SoundBlaster16::beginPlayback(int, int)
	10002f64: R_386_32	SoundBlaster16::stopPlayback()

Disassembly of section .text._ZN3ISAD2Ev:

10002f68 <ISA::~ISA()>:
10002f68:	55                   	push   ebp
10002f69:	89 e5                	mov    ebp,esp
10002f6b:	83 ec 08             	sub    esp,0x8
10002f6e:	ba 08 00 00 00       	mov    edx,0x8	10002f6f: R_386_32	vtable for ISA
10002f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f76:	89 10                	mov    DWORD PTR [eax],edx
10002f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f7b:	83 ec 0c             	sub    esp,0xc
10002f7e:	50                   	push   eax
10002f7f:	e8 fc ff ff ff       	call   10002f80 <ISA::~ISA()+0x18>	10002f80: R_386_PC32	Bus::~Bus()
10002f84:	83 c4 10             	add    esp,0x10
10002f87:	90                   	nop
10002f88:	c9                   	leave  
10002f89:	c3                   	ret    

Disassembly of section .text._ZN3ISAD0Ev:

10002f8a <ISA::~ISA()>:
10002f8a:	55                   	push   ebp
10002f8b:	89 e5                	mov    ebp,esp
10002f8d:	83 ec 08             	sub    esp,0x8
10002f90:	83 ec 0c             	sub    esp,0xc
10002f93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002f96:	e8 fc ff ff ff       	call   10002f97 <ISA::~ISA()+0xd>	10002f97: R_386_PC32	ISA::~ISA()
10002f9b:	83 c4 10             	add    esp,0x10
10002f9e:	83 ec 08             	sub    esp,0x8
10002fa1:	68 58 01 00 00       	push   0x158
10002fa6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002fa9:	e8 fc ff ff ff       	call   10002faa <ISA::~ISA()+0x20>	10002faa: R_386_PC32	operator delete(void*, unsigned long)
10002fae:	83 c4 10             	add    esp,0x10
10002fb1:	c9                   	leave  
10002fb2:	c3                   	ret    

Disassembly of section .text._ZN3DMAD2Ev:

10002fb4 <DMA::~DMA()>:
10002fb4:	55                   	push   ebp
10002fb5:	89 e5                	mov    ebp,esp
10002fb7:	83 ec 08             	sub    esp,0x8
10002fba:	ba 08 00 00 00       	mov    edx,0x8	10002fbb: R_386_32	vtable for DMA
10002fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fc2:	89 10                	mov    DWORD PTR [eax],edx
10002fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fc7:	83 ec 0c             	sub    esp,0xc
10002fca:	50                   	push   eax
10002fcb:	e8 fc ff ff ff       	call   10002fcc <DMA::~DMA()+0x18>	10002fcc: R_386_PC32	Device::~Device()
10002fd0:	83 c4 10             	add    esp,0x10
10002fd3:	90                   	nop
10002fd4:	c9                   	leave  
10002fd5:	c3                   	ret    

Disassembly of section .text._ZN3DMAD0Ev:

10002fd6 <DMA::~DMA()>:
10002fd6:	55                   	push   ebp
10002fd7:	89 e5                	mov    ebp,esp
10002fd9:	83 ec 08             	sub    esp,0x8
10002fdc:	83 ec 0c             	sub    esp,0xc
10002fdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002fe2:	e8 fc ff ff ff       	call   10002fe3 <DMA::~DMA()+0xd>	10002fe3: R_386_PC32	DMA::~DMA()
10002fe7:	83 c4 10             	add    esp,0x10
10002fea:	83 ec 08             	sub    esp,0x8
10002fed:	68 5c 01 00 00       	push   0x15c
10002ff2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002ff5:	e8 fc ff ff ff       	call   10002ff6 <DMA::~DMA()+0x20>	10002ff6: R_386_PC32	operator delete(void*, unsigned long)
10002ffa:	83 c4 10             	add    esp,0x10
10002ffd:	c9                   	leave  
10002ffe:	c3                   	ret    

Disassembly of section .text._ZN3PS2D2Ev:

10003000 <PS2::~PS2()>:
10003000:	55                   	push   ebp
10003001:	89 e5                	mov    ebp,esp
10003003:	83 ec 08             	sub    esp,0x8
10003006:	ba 08 00 00 00       	mov    edx,0x8	10003007: R_386_32	vtable for PS2
1000300b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000300e:	89 10                	mov    DWORD PTR [eax],edx
10003010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003013:	83 ec 0c             	sub    esp,0xc
10003016:	50                   	push   eax
10003017:	e8 fc ff ff ff       	call   10003018 <PS2::~PS2()+0x18>	10003018: R_386_PC32	Bus::~Bus()
1000301c:	83 c4 10             	add    esp,0x10
1000301f:	90                   	nop
10003020:	c9                   	leave  
10003021:	c3                   	ret    

Disassembly of section .text._ZN3PS2D0Ev:

10003022 <PS2::~PS2()>:
10003022:	55                   	push   ebp
10003023:	89 e5                	mov    ebp,esp
10003025:	83 ec 08             	sub    esp,0x8
10003028:	83 ec 0c             	sub    esp,0xc
1000302b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000302e:	e8 fc ff ff ff       	call   1000302f <PS2::~PS2()+0xd>	1000302f: R_386_PC32	PS2::~PS2()
10003033:	83 c4 10             	add    esp,0x10
10003036:	83 ec 08             	sub    esp,0x8
10003039:	68 60 01 00 00       	push   0x160
1000303e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003041:	e8 fc ff ff ff       	call   10003042 <PS2::~PS2()+0x20>	10003042: R_386_PC32	operator delete(void*, unsigned long)
10003046:	83 c4 10             	add    esp,0x10
10003049:	c9                   	leave  
1000304a:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD2Ev:

1000304c <PS2Mouse::~PS2Mouse()>:
1000304c:	55                   	push   ebp
1000304d:	89 e5                	mov    ebp,esp
1000304f:	83 ec 08             	sub    esp,0x8
10003052:	ba 08 00 00 00       	mov    edx,0x8	10003053: R_386_32	vtable for PS2Mouse
10003057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000305a:	89 10                	mov    DWORD PTR [eax],edx
1000305c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000305f:	83 ec 0c             	sub    esp,0xc
10003062:	50                   	push   eax
10003063:	e8 fc ff ff ff       	call   10003064 <PS2Mouse::~PS2Mouse()+0x18>	10003064: R_386_PC32	Mouse::~Mouse()
10003068:	83 c4 10             	add    esp,0x10
1000306b:	90                   	nop
1000306c:	c9                   	leave  
1000306d:	c3                   	ret    

Disassembly of section .text._ZN8PS2MouseD0Ev:

1000306e <PS2Mouse::~PS2Mouse()>:
1000306e:	55                   	push   ebp
1000306f:	89 e5                	mov    ebp,esp
10003071:	83 ec 08             	sub    esp,0x8
10003074:	83 ec 0c             	sub    esp,0xc
10003077:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000307a:	e8 fc ff ff ff       	call   1000307b <PS2Mouse::~PS2Mouse()+0xd>	1000307b: R_386_PC32	PS2Mouse::~PS2Mouse()
1000307f:	83 c4 10             	add    esp,0x10
10003082:	83 ec 08             	sub    esp,0x8
10003085:	68 68 01 00 00       	push   0x168
1000308a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000308d:	e8 fc ff ff ff       	call   1000308e <PS2Mouse::~PS2Mouse()+0x20>	1000308e: R_386_PC32	operator delete(void*, unsigned long)
10003092:	83 c4 10             	add    esp,0x10
10003095:	c9                   	leave  
10003096:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD2Ev:

10003098 <PS2Port::~PS2Port()>:
10003098:	55                   	push   ebp
10003099:	89 e5                	mov    ebp,esp
1000309b:	83 ec 08             	sub    esp,0x8
1000309e:	ba 08 00 00 00       	mov    edx,0x8	1000309f: R_386_32	vtable for PS2Port
100030a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030a6:	89 10                	mov    DWORD PTR [eax],edx
100030a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030ab:	83 ec 0c             	sub    esp,0xc
100030ae:	50                   	push   eax
100030af:	e8 fc ff ff ff       	call   100030b0 <PS2Port::~PS2Port()+0x18>	100030b0: R_386_PC32	Bus::~Bus()
100030b4:	83 c4 10             	add    esp,0x10
100030b7:	90                   	nop
100030b8:	c9                   	leave  
100030b9:	c3                   	ret    

Disassembly of section .text._ZN7PS2PortD0Ev:

100030ba <PS2Port::~PS2Port()>:
100030ba:	55                   	push   ebp
100030bb:	89 e5                	mov    ebp,esp
100030bd:	83 ec 08             	sub    esp,0x8
100030c0:	83 ec 0c             	sub    esp,0xc
100030c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100030c6:	e8 fc ff ff ff       	call   100030c7 <PS2Port::~PS2Port()+0xd>	100030c7: R_386_PC32	PS2Port::~PS2Port()
100030cb:	83 c4 10             	add    esp,0x10
100030ce:	83 ec 08             	sub    esp,0x8
100030d1:	68 60 01 00 00       	push   0x160
100030d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100030d9:	e8 fc ff ff ff       	call   100030da <PS2Port::~PS2Port()+0x20>	100030da: R_386_PC32	operator delete(void*, unsigned long)
100030de:	83 c4 10             	add    esp,0x10
100030e1:	c9                   	leave  
100030e2:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D2Ev:

100030e4 <SoundBlaster16::~SoundBlaster16()>:
100030e4:	55                   	push   ebp
100030e5:	89 e5                	mov    ebp,esp
100030e7:	83 ec 08             	sub    esp,0x8
100030ea:	ba 08 00 00 00       	mov    edx,0x8	100030eb: R_386_32	vtable for SoundBlaster16
100030ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030f2:	89 10                	mov    DWORD PTR [eax],edx
100030f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030f7:	83 ec 0c             	sub    esp,0xc
100030fa:	50                   	push   eax
100030fb:	e8 fc ff ff ff       	call   100030fc <SoundBlaster16::~SoundBlaster16()+0x18>	100030fc: R_386_PC32	SoundDevice::~SoundDevice()
10003100:	83 c4 10             	add    esp,0x10
10003103:	90                   	nop
10003104:	c9                   	leave  
10003105:	c3                   	ret    

Disassembly of section .text._ZN14SoundBlaster16D0Ev:

10003106 <SoundBlaster16::~SoundBlaster16()>:
10003106:	55                   	push   ebp
10003107:	89 e5                	mov    ebp,esp
10003109:	83 ec 08             	sub    esp,0x8
1000310c:	83 ec 0c             	sub    esp,0xc
1000310f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003112:	e8 fc ff ff ff       	call   10003113 <SoundBlaster16::~SoundBlaster16()+0xd>	10003113: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10003117:	83 c4 10             	add    esp,0x10
1000311a:	83 ec 08             	sub    esp,0x8
1000311d:	68 fc 01 00 00       	push   0x1fc
10003122:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003125:	e8 fc ff ff ff       	call   10003126 <SoundBlaster16::~SoundBlaster16()+0x20>	10003126: R_386_PC32	operator delete(void*, unsigned long)
1000312a:	83 c4 10             	add    esp,0x10
1000312d:	c9                   	leave  
1000312e:	c3                   	ret    
