
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 1b bf 00 00       	call   c000bf3b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 e9 01 00       	call   c001e9f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 f5 01 c0       	mov    ebx,0xc001f582
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 8c f5 01 c0    	cmp    ebx,0xc001f58c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 31 02 c0       	mov    eax,0xc00231cc
c0000049:	3d cc 31 02 c0       	cmp    eax,0xc00231cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 31 02 c0       	push   0xc00231cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 31 02 c0       	mov    eax,0xc00231cc
c0000075:	2d cc 31 02 c0       	sub    eax,0xc00231cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 31 02 c0       	push   0xc00231cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 33 02 c0 00 	cmp    BYTE PTR ds:0xc002336c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 94 f5 01 c0       	mov    ebx,0xc001f594
c00000bb:	81 eb 90 f5 01 c0    	sub    ebx,0xc001f590
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 90 f5 01 c0       	mov    esi,0xc001f590
c00000ca:	a1 70 33 02 c0       	mov    eax,ds:0xc0023370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 33 02 c0       	mov    ds:0xc0023370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 33 02 c0       	mov    eax,ds:0xc0023370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 31 02 c0       	push   0xc00231cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 33 02 c0 01 	mov    BYTE PTR ds:0xc002336c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 33 02 c0       	push   0xc0023374
c000012c:	68 cc 31 02 c0       	push   0xc00231cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 9f eb 00 00       	call   c000edfe <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 b1 75 01 00       	call   c001781a <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 9d 79 01 00       	call   c0017c2d <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 43 81 01 00       	call   c00183dc <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 72 75 01 00       	call   c001781a <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 b0 37 02 c0 	lgdtd  ds:0xc00237b0
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 cb 0c 01 c0       	mov    ecx,0xc0010ccb
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 cb 0c 01 c0       	mov    ecx,0xc0010ccb
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 8c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002338c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 8c 33 02 c0       	mov    ds:0xc002338c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 8c 33 02 c0       	mov    eax,ds:0xc002338c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 8c 33 02 c0    	mov    DWORD PTR ds:0xc002338c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	83 ec 08             	sub    esp,0x8
c00006ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006af:	e8 4d ad 00 00       	call   c000b401 <debug_strcpy>
c00006b4:	31 d2                	xor    edx,edx
c00006b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00006ba:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00006bd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00006c0:	84 c0                	test   al,al
c00006c2:	74 06                	je     c00006ca <strcpy+0x23>
c00006c4:	88 04 13             	mov    BYTE PTR [ebx+edx*1],al
c00006c7:	42                   	inc    edx
c00006c8:	eb ec                	jmp    c00006b6 <strcpy+0xf>
c00006ca:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006cd:	89 d8                	mov    eax,ebx
c00006cf:	83 c4 08             	add    esp,0x8
c00006d2:	5b                   	pop    ebx
c00006d3:	c3                   	ret    

c00006d4 <strncpy>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006e2:	89 c3                	mov    ebx,eax
c00006e4:	85 c9                	test   ecx,ecx
c00006e6:	74 1a                	je     c0000702 <strncpy+0x2e>
c00006e8:	46                   	inc    esi
c00006e9:	43                   	inc    ebx
c00006ea:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006ed:	49                   	dec    ecx
c00006ee:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006f1:	84 d2                	test   dl,dl
c00006f3:	75 ef                	jne    c00006e4 <strncpy+0x10>
c00006f5:	31 d2                	xor    edx,edx
c00006f7:	39 d1                	cmp    ecx,edx
c00006f9:	74 07                	je     c0000702 <strncpy+0x2e>
c00006fb:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006ff:	42                   	inc    edx
c0000700:	eb f5                	jmp    c00006f7 <strncpy+0x23>
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	c3                   	ret    

c0000705 <strcmp>:
c0000705:	31 c9                	xor    ecx,ecx
c0000707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000070b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000070f:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000713:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c0000717:	38 d0                	cmp    al,dl
c0000719:	75 08                	jne    c0000723 <strcmp+0x1e>
c000071b:	41                   	inc    ecx
c000071c:	84 c0                	test   al,al
c000071e:	75 e7                	jne    c0000707 <strcmp+0x2>
c0000720:	31 c0                	xor    eax,eax
c0000722:	c3                   	ret    
c0000723:	29 d0                	sub    eax,edx
c0000725:	c3                   	ret    

c0000726 <strchr>:
c0000726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000072a:	8a 10                	mov    dl,BYTE PTR [eax]
c000072c:	84 d2                	test   dl,dl
c000072e:	74 09                	je     c0000739 <strchr+0x13>
c0000730:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000734:	74 05                	je     c000073b <strchr+0x15>
c0000736:	40                   	inc    eax
c0000737:	eb f1                	jmp    c000072a <strchr+0x4>
c0000739:	31 c0                	xor    eax,eax
c000073b:	c3                   	ret    

c000073c <strncmp>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000074a:	01 d6                	add    esi,edx
c000074c:	39 f2                	cmp    edx,esi
c000074e:	74 12                	je     c0000762 <strncmp+0x26>
c0000750:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000753:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000756:	38 c8                	cmp    al,cl
c0000758:	75 0c                	jne    c0000766 <strncmp+0x2a>
c000075a:	42                   	inc    edx
c000075b:	84 c0                	test   al,al
c000075d:	74 03                	je     c0000762 <strncmp+0x26>
c000075f:	43                   	inc    ebx
c0000760:	eb ea                	jmp    c000074c <strncmp+0x10>
c0000762:	31 c0                	xor    eax,eax
c0000764:	eb 02                	jmp    c0000768 <strncmp+0x2c>
c0000766:	29 c8                	sub    eax,ecx
c0000768:	5b                   	pop    ebx
c0000769:	5e                   	pop    esi
c000076a:	c3                   	ret    

c000076b <strcat>:
c000076b:	53                   	push   ebx
c000076c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000770:	89 c1                	mov    ecx,eax
c0000772:	8d 51 01             	lea    edx,[ecx+0x1]
c0000775:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000779:	74 04                	je     c000077f <strcat+0x14>
c000077b:	89 d1                	mov    ecx,edx
c000077d:	eb f3                	jmp    c0000772 <strcat+0x7>
c000077f:	31 d2                	xor    edx,edx
c0000781:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000785:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000788:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000078b:	42                   	inc    edx
c000078c:	84 db                	test   bl,bl
c000078e:	75 f1                	jne    c0000781 <strcat+0x16>
c0000790:	5b                   	pop    ebx
c0000791:	c3                   	ret    

c0000792 <strncat>:
c0000792:	56                   	push   esi
c0000793:	53                   	push   ebx
c0000794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000798:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000079c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007a0:	89 c2                	mov    edx,eax
c00007a2:	85 db                	test   ebx,ebx
c00007a4:	74 23                	je     c00007c9 <strncat+0x37>
c00007a6:	8d 72 01             	lea    esi,[edx+0x1]
c00007a9:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007ad:	74 04                	je     c00007b3 <strncat+0x21>
c00007af:	89 f2                	mov    edx,esi
c00007b1:	eb f3                	jmp    c00007a6 <strncat+0x14>
c00007b3:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007b6:	41                   	inc    ecx
c00007b7:	42                   	inc    edx
c00007b8:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007bb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007be:	84 db                	test   bl,bl
c00007c0:	74 07                	je     c00007c9 <strncat+0x37>
c00007c2:	39 f1                	cmp    ecx,esi
c00007c4:	75 f0                	jne    c00007b6 <strncat+0x24>
c00007c6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007c9:	5b                   	pop    ebx
c00007ca:	5e                   	pop    esi
c00007cb:	c3                   	ret    

c00007cc <strstr>:
c00007cc:	57                   	push   edi
c00007cd:	56                   	push   esi
c00007ce:	53                   	push   ebx
c00007cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007d7:	57                   	push   edi
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	59                   	pop    ecx
c00007de:	89 c6                	mov    esi,eax
c00007e0:	85 c0                	test   eax,eax
c00007e2:	74 1f                	je     c0000803 <strstr+0x37>
c00007e4:	53                   	push   ebx
c00007e5:	e8 3b fe ff ff       	call   c0000625 <strlen>
c00007ea:	5a                   	pop    edx
c00007eb:	39 f0                	cmp    eax,esi
c00007ed:	72 12                	jb     c0000801 <strstr+0x35>
c00007ef:	56                   	push   esi
c00007f0:	57                   	push   edi
c00007f1:	53                   	push   ebx
c00007f2:	e8 78 fd ff ff       	call   c000056f <memcmp>
c00007f7:	83 c4 0c             	add    esp,0xc
c00007fa:	85 c0                	test   eax,eax
c00007fc:	74 05                	je     c0000803 <strstr+0x37>
c00007fe:	43                   	inc    ebx
c00007ff:	eb e3                	jmp    c00007e4 <strstr+0x18>
c0000801:	31 db                	xor    ebx,ebx
c0000803:	89 d8                	mov    eax,ebx
c0000805:	5b                   	pop    ebx
c0000806:	5e                   	pop    esi
c0000807:	5f                   	pop    edi
c0000808:	c3                   	ret    

c0000809 <toupper>:
c0000809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000080d:	0f b6 d0             	movzx  edx,al
c0000810:	f6 82 a0 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0a60],0x2
c0000817:	74 03                	je     c000081c <toupper+0x13>
c0000819:	83 e8 20             	sub    eax,0x20
c000081c:	c3                   	ret    

c000081d <tolower>:
c000081d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000821:	0f b6 d0             	movzx  edx,al
c0000824:	f6 82 a0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a60],0x1
c000082b:	74 03                	je     c0000830 <tolower+0x13>
c000082d:	83 c0 20             	add    eax,0x20
c0000830:	c3                   	ret    

c0000831 <simple_strtoul>:
c0000831:	55                   	push   ebp
c0000832:	57                   	push   edi
c0000833:	56                   	push   esi
c0000834:	53                   	push   ebx
c0000835:	83 ec 08             	sub    esp,0x8
c0000838:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000083c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000840:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000843:	f6 82 a0 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0a60],0x8
c000084a:	74 03                	je     c000084f <simple_strtoul+0x1e>
c000084c:	41                   	inc    ecx
c000084d:	eb f1                	jmp    c0000840 <simple_strtoul+0xf>
c000084f:	80 fa 09             	cmp    dl,0x9
c0000852:	74 f8                	je     c000084c <simple_strtoul+0x1b>
c0000854:	80 fa 2d             	cmp    dl,0x2d
c0000857:	75 0b                	jne    c0000864 <simple_strtoul+0x33>
c0000859:	41                   	inc    ecx
c000085a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000862:	eb 0e                	jmp    c0000872 <simple_strtoul+0x41>
c0000864:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000086c:	80 fa 2b             	cmp    dl,0x2b
c000086f:	75 01                	jne    c0000872 <simple_strtoul+0x41>
c0000871:	41                   	inc    ecx
c0000872:	85 f6                	test   esi,esi
c0000874:	75 22                	jne    c0000898 <simple_strtoul+0x67>
c0000876:	be 0a 00 00 00       	mov    esi,0xa
c000087b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000087e:	75 5a                	jne    c00008da <simple_strtoul+0xa9>
c0000880:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000884:	50                   	push   eax
c0000885:	e8 93 ff ff ff       	call   c000081d <tolower>
c000088a:	5a                   	pop    edx
c000088b:	83 f8 78             	cmp    eax,0x78
c000088e:	74 03                	je     c0000893 <simple_strtoul+0x62>
c0000890:	41                   	inc    ecx
c0000891:	eb 16                	jmp    c00008a9 <simple_strtoul+0x78>
c0000893:	83 c1 02             	add    ecx,0x2
c0000896:	eb 22                	jmp    c00008ba <simple_strtoul+0x89>
c0000898:	8d 46 fe             	lea    eax,[esi-0x2]
c000089b:	83 f8 22             	cmp    eax,0x22
c000089e:	0f 87 b7 00 00 00    	ja     c000095b <simple_strtoul+0x12a>
c00008a4:	83 fe 08             	cmp    esi,0x8
c00008a7:	75 0c                	jne    c00008b5 <simple_strtoul+0x84>
c00008a9:	be 08 00 00 00       	mov    esi,0x8
c00008ae:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b1:	75 27                	jne    c00008da <simple_strtoul+0xa9>
c00008b3:	eb 1f                	jmp    c00008d4 <simple_strtoul+0xa3>
c00008b5:	83 fe 10             	cmp    esi,0x10
c00008b8:	75 20                	jne    c00008da <simple_strtoul+0xa9>
c00008ba:	be 10 00 00 00       	mov    esi,0x10
c00008bf:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008c2:	75 16                	jne    c00008da <simple_strtoul+0xa9>
c00008c4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008c8:	50                   	push   eax
c00008c9:	e8 4f ff ff ff       	call   c000081d <tolower>
c00008ce:	5d                   	pop    ebp
c00008cf:	83 f8 78             	cmp    eax,0x78
c00008d2:	74 03                	je     c00008d7 <simple_strtoul+0xa6>
c00008d4:	41                   	inc    ecx
c00008d5:	eb 03                	jmp    c00008da <simple_strtoul+0xa9>
c00008d7:	83 c1 02             	add    ecx,0x2
c00008da:	31 ed                	xor    ebp,ebp
c00008dc:	31 db                	xor    ebx,ebx
c00008de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008e5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008e7:	84 d2                	test   dl,dl
c00008e9:	74 27                	je     c0000912 <simple_strtoul+0xe1>
c00008eb:	0f b6 fa             	movzx  edi,dl
c00008ee:	f6 87 a0 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0a60],0x4
c00008f5:	74 05                	je     c00008fc <simple_strtoul+0xcb>
c00008f7:	83 ef 30             	sub    edi,0x30
c00008fa:	eb 22                	jmp    c000091e <simple_strtoul+0xed>
c00008fc:	0f be d2             	movsx  edx,dl
c00008ff:	52                   	push   edx
c0000900:	e8 04 ff ff ff       	call   c0000809 <toupper>
c0000905:	5f                   	pop    edi
c0000906:	0f b6 d0             	movzx  edx,al
c0000909:	f6 82 a0 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0a60],0x1
c0000910:	75 09                	jne    c000091b <simple_strtoul+0xea>
c0000912:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000917:	75 2d                	jne    c0000946 <simple_strtoul+0x115>
c0000919:	eb 57                	jmp    c0000972 <simple_strtoul+0x141>
c000091b:	8d 78 c9             	lea    edi,[eax-0x37]
c000091e:	39 f7                	cmp    edi,esi
c0000920:	73 f0                	jae    c0000912 <simple_strtoul+0xe1>
c0000922:	31 d2                	xor    edx,edx
c0000924:	89 f8                	mov    eax,edi
c0000926:	f7 d0                	not    eax
c0000928:	f7 f6                	div    esi
c000092a:	39 d8                	cmp    eax,ebx
c000092c:	72 0e                	jb     c000093c <simple_strtoul+0x10b>
c000092e:	0f af de             	imul   ebx,esi
c0000931:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000938:	01 fb                	add    ebx,edi
c000093a:	eb 07                	jmp    c0000943 <simple_strtoul+0x112>
c000093c:	bd 01 00 00 00       	mov    ebp,0x1
c0000941:	31 db                	xor    ebx,ebx
c0000943:	41                   	inc    ecx
c0000944:	eb 9f                	jmp    c00008e5 <simple_strtoul+0xb4>
c0000946:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000949:	09 d8                	or     eax,ebx
c000094b:	75 1f                	jne    c000096c <simple_strtoul+0x13b>
c000094d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000951:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000955:	31 db                	xor    ebx,ebx
c0000957:	89 38                	mov    DWORD PTR [eax],edi
c0000959:	eb 17                	jmp    c0000972 <simple_strtoul+0x141>
c000095b:	31 db                	xor    ebx,ebx
c000095d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000962:	74 14                	je     c0000978 <simple_strtoul+0x147>
c0000964:	31 ed                	xor    ebp,ebp
c0000966:	85 c9                	test   ecx,ecx
c0000968:	75 e3                	jne    c000094d <simple_strtoul+0x11c>
c000096a:	31 db                	xor    ebx,ebx
c000096c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000970:	89 08                	mov    DWORD PTR [eax],ecx
c0000972:	4d                   	dec    ebp
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x147>
c0000975:	83 cb ff             	or     ebx,0xffffffff
c0000978:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000097d:	75 02                	jne    c0000981 <simple_strtoul+0x150>
c000097f:	f7 db                	neg    ebx
c0000981:	83 c4 08             	add    esp,0x8
c0000984:	89 d8                	mov    eax,ebx
c0000986:	5b                   	pop    ebx
c0000987:	5e                   	pop    esi
c0000988:	5f                   	pop    edi
c0000989:	5d                   	pop    ebp
c000098a:	c3                   	ret    

c000098b <largebin_index>:
c000098b:	89 c2                	mov    edx,eax
c000098d:	c1 ea 08             	shr    edx,0x8
c0000990:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000996:	77 10                	ja     c00009a8 <largebin_index+0x1d>
c0000998:	0f bd d2             	bsr    edx,edx
c000099b:	8d 4a 06             	lea    ecx,[edx+0x6]
c000099e:	d3 e8                	shr    eax,cl
c00009a0:	83 e0 03             	and    eax,0x3
c00009a3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c00009a7:	c3                   	ret    
c00009a8:	b8 5f 00 00 00       	mov    eax,0x5f
c00009ad:	c3                   	ret    

c00009ae <malloc_init_state>:
c00009ae:	53                   	push   ebx
c00009af:	8d 50 34             	lea    edx,[eax+0x34]
c00009b2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009b8:	89 d1                	mov    ecx,edx
c00009ba:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009bd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009c0:	83 c2 08             	add    edx,0x8
c00009c3:	39 da                	cmp    edx,ebx
c00009c5:	75 f3                	jne    c00009ba <malloc_init_state+0xc>
c00009c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00009c9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009d3:	83 e2 03             	and    edx,0x3
c00009d6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009e0:	83 ca 48             	or     edx,0x48
c00009e3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009ed:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009f7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009fe:	89 10                	mov    DWORD PTR [eax],edx
c0000a00:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a03:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a0d:	5b                   	pop    ebx
c0000a0e:	c3                   	ret    

c0000a0f <malloc_consolidate>:
c0000a0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a11:	85 d2                	test   edx,edx
c0000a13:	0f 84 d8 00 00 00    	je     c0000af1 <malloc_consolidate+0xe2>
c0000a19:	55                   	push   ebp
c0000a1a:	83 e2 fd             	and    edx,0xfffffffd
c0000a1d:	57                   	push   edi
c0000a1e:	89 c5                	mov    ebp,eax
c0000a20:	56                   	push   esi
c0000a21:	8d 78 34             	lea    edi,[eax+0x34]
c0000a24:	53                   	push   ebx
c0000a25:	83 ec 10             	sub    esp,0x10
c0000a28:	89 10                	mov    DWORD PTR [eax],edx
c0000a2a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a2e:	c1 ea 03             	shr    edx,0x3
c0000a31:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a35:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a39:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a3c:	85 d2                	test   edx,edx
c0000a3e:	0f 84 98 00 00 00    	je     c0000adc <malloc_consolidate+0xcd>
c0000a44:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a4b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a4e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a51:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a55:	89 f9                	mov    ecx,edi
c0000a57:	83 e1 fe             	and    ecx,0xfffffffe
c0000a5a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a5d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a60:	83 e3 fc             	and    ebx,0xfffffffc
c0000a63:	83 e7 01             	and    edi,0x1
c0000a66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a69:	75 14                	jne    c0000a7f <malloc_consolidate+0x70>
c0000a6b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a6d:	29 fa                	sub    edx,edi
c0000a6f:	01 f9                	add    ecx,edi
c0000a71:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a74:	89 fb                	mov    ebx,edi
c0000a76:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a79:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a7c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a7f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a82:	74 40                	je     c0000ac4 <malloc_consolidate+0xb5>
c0000a84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a87:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a8a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a8e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a91:	83 e7 01             	and    edi,0x1
c0000a94:	75 0e                	jne    c0000aa4 <malloc_consolidate+0x95>
c0000a96:	01 d9                	add    ecx,ebx
c0000a98:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a9b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a9e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000aa1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000aa4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000aa7:	89 ce                	mov    esi,ecx
c0000aa9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aac:	83 ce 01             	or     esi,0x1
c0000aaf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ab2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ab5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ab8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000abc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000abf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ac2:	eb 0c                	jmp    c0000ad0 <malloc_consolidate+0xc1>
c0000ac4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ac7:	83 c9 01             	or     ecx,0x1
c0000aca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000acd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ad0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ad4:	85 d2                	test   edx,edx
c0000ad6:	0f 85 6f ff ff ff    	jne    c0000a4b <malloc_consolidate+0x3c>
c0000adc:	83 c5 04             	add    ebp,0x4
c0000adf:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ae3:	0f 85 50 ff ff ff    	jne    c0000a39 <malloc_consolidate+0x2a>
c0000ae9:	83 c4 10             	add    esp,0x10
c0000aec:	5b                   	pop    ebx
c0000aed:	5e                   	pop    esi
c0000aee:	5f                   	pop    edi
c0000aef:	5d                   	pop    ebp
c0000af0:	c3                   	ret    
c0000af1:	e9 b8 fe ff ff       	jmp    c00009ae <malloc_init_state>

c0000af6 <dlfree>:
c0000af6:	57                   	push   edi
c0000af7:	56                   	push   esi
c0000af8:	53                   	push   ebx
c0000af9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000afd:	85 db                	test   ebx,ebx
c0000aff:	0f 84 e2 00 00 00    	je     c0000be7 <dlfree+0xf1>
c0000b05:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b08:	8b 0d a0 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233a0
c0000b0e:	89 f0                	mov    eax,esi
c0000b10:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b13:	83 e0 fc             	and    eax,0xfffffffc
c0000b16:	39 c1                	cmp    ecx,eax
c0000b18:	72 24                	jb     c0000b3e <dlfree+0x48>
c0000b1a:	83 c9 03             	or     ecx,0x3
c0000b1d:	c1 e8 03             	shr    eax,0x3
c0000b20:	89 0d a0 33 02 c0    	mov    DWORD PTR ds:0xc00233a0,ecx
c0000b26:	83 e8 02             	sub    eax,0x2
c0000b29:	8b 0c 85 a4 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcc5c]
c0000b30:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b32:	89 14 85 a4 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc5c],edx
c0000b39:	e9 a9 00 00 00       	jmp    c0000be7 <dlfree+0xf1>
c0000b3e:	83 e6 02             	and    esi,0x2
c0000b41:	0f 85 a0 00 00 00    	jne    c0000be7 <dlfree+0xf1>
c0000b47:	83 c9 01             	or     ecx,0x1
c0000b4a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b4d:	89 0d a0 33 02 c0    	mov    DWORD PTR ds:0xc00233a0,ecx
c0000b53:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b56:	83 e1 fc             	and    ecx,0xfffffffc
c0000b59:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b5d:	75 13                	jne    c0000b72 <dlfree+0x7c>
c0000b5f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b62:	29 da                	sub    edx,ebx
c0000b64:	01 d8                	add    eax,ebx
c0000b66:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b69:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b6c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b6f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b72:	39 35 cc 33 02 c0    	cmp    DWORD PTR ds:0xc00233cc,esi
c0000b78:	74 40                	je     c0000bba <dlfree+0xc4>
c0000b7a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b7e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b81:	80 e3 01             	and    bl,0x1
c0000b84:	75 0e                	jne    c0000b94 <dlfree+0x9e>
c0000b86:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b89:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b8c:	01 c8                	add    eax,ecx
c0000b8e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b91:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b94:	8b 0d dc 33 02 c0    	mov    ecx,DWORD PTR ds:0xc00233dc
c0000b9a:	c7 42 0c d4 33 02 c0 	mov    DWORD PTR [edx+0xc],0xc00233d4
c0000ba1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ba4:	89 15 dc 33 02 c0    	mov    DWORD PTR ds:0xc00233dc,edx
c0000baa:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000bad:	89 c1                	mov    ecx,eax
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bb8:	eb 10                	jmp    c0000bca <dlfree+0xd4>
c0000bba:	01 c8                	add    eax,ecx
c0000bbc:	89 c1                	mov    ecx,eax
c0000bbe:	83 c9 01             	or     ecx,0x1
c0000bc1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bc4:	89 15 cc 33 02 c0    	mov    DWORD PTR ds:0xc00233cc,edx
c0000bca:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bcf:	76 16                	jbe    c0000be7 <dlfree+0xf1>
c0000bd1:	f6 05 a0 33 02 c0 02 	test   BYTE PTR ds:0xc00233a0,0x2
c0000bd8:	74 0d                	je     c0000be7 <dlfree+0xf1>
c0000bda:	5b                   	pop    ebx
c0000bdb:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c0000be0:	5e                   	pop    esi
c0000be1:	5f                   	pop    edi
c0000be2:	e9 28 fe ff ff       	jmp    c0000a0f <malloc_consolidate>
c0000be7:	5b                   	pop    ebx
c0000be8:	5e                   	pop    esi
c0000be9:	5f                   	pop    edi
c0000bea:	c3                   	ret    

c0000beb <sYSMALLOc>:
c0000beb:	55                   	push   ebp
c0000bec:	57                   	push   edi
c0000bed:	56                   	push   esi
c0000bee:	53                   	push   ebx
c0000bef:	89 d3                	mov    ebx,edx
c0000bf1:	83 ec 2c             	sub    esp,0x2c
c0000bf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bf8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bfe:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c01:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c08:	74 1f                	je     c0000c29 <sYSMALLOc+0x3e>
c0000c0a:	89 d8                	mov    eax,ebx
c0000c0c:	e8 fe fd ff ff       	call   c0000a0f <malloc_consolidate>
c0000c11:	83 ec 0c             	sub    esp,0xc
c0000c14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c18:	83 e8 07             	sub    eax,0x7
c0000c1b:	50                   	push   eax
c0000c1c:	e8 30 02 00 00       	call   c0000e51 <dlmalloc>
c0000c21:	83 c4 10             	add    esp,0x10
c0000c24:	e9 20 02 00 00       	jmp    c0000e49 <sYSMALLOc+0x25e>
c0000c29:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c2c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c32:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c35:	83 e0 fc             	and    eax,0xfffffffc
c0000c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c40:	83 c0 10             	add    eax,0x10
c0000c43:	01 c1                	add    ecx,eax
c0000c45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c49:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c50:	74 04                	je     c0000c56 <sYSMALLOc+0x6b>
c0000c52:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c56:	f7 da                	neg    edx
c0000c58:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c60:	21 d1                	and    ecx,edx
c0000c62:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c66:	7f 07                	jg     c0000c6f <sYSMALLOc+0x84>
c0000c68:	31 c0                	xor    eax,eax
c0000c6a:	e9 da 01 00 00       	jmp    c0000e49 <sYSMALLOc+0x25e>
c0000c6f:	83 ec 0c             	sub    esp,0xc
c0000c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c76:	e8 1e ae 00 00       	call   c000ba99 <sbrk>
c0000c7b:	83 c4 10             	add    esp,0x10
c0000c7e:	89 c6                	mov    esi,eax
c0000c80:	83 f8 ff             	cmp    eax,0xffffffff
c0000c83:	74 e3                	je     c0000c68 <sYSMALLOc+0x7d>
c0000c85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c89:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c8d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c90:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c96:	39 f1                	cmp    ecx,esi
c0000c98:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c9e:	75 13                	jne    c0000cb3 <sYSMALLOc+0xc8>
c0000ca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ca4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ca8:	83 c8 01             	or     eax,0x1
c0000cab:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000cae:	e9 3e 01 00 00       	jmp    c0000df1 <sYSMALLOc+0x206>
c0000cb3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cb9:	88 d0                	mov    al,dl
c0000cbb:	83 e0 01             	and    eax,0x1
c0000cbe:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cc3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cc7:	0f 95 c0             	setne  al
c0000cca:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cce:	39 f1                	cmp    ecx,esi
c0000cd0:	76 12                	jbe    c0000ce4 <sYSMALLOc+0xf9>
c0000cd2:	84 c0                	test   al,al
c0000cd4:	74 0e                	je     c0000ce4 <sYSMALLOc+0xf9>
c0000cd6:	83 e2 fe             	and    edx,0xfffffffe
c0000cd9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cdf:	e9 83 00 00 00       	jmp    c0000d67 <sYSMALLOc+0x17c>
c0000ce4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ce9:	74 7c                	je     c0000d67 <sYSMALLOc+0x17c>
c0000ceb:	84 c0                	test   al,al
c0000ced:	74 0c                	je     c0000cfb <sYSMALLOc+0x110>
c0000cef:	89 f0                	mov    eax,esi
c0000cf1:	29 c8                	sub    eax,ecx
c0000cf3:	01 e8                	add    eax,ebp
c0000cf5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cfb:	89 f2                	mov    edx,esi
c0000cfd:	83 e2 07             	and    edx,0x7
c0000d00:	74 0c                	je     c0000d0e <sYSMALLOc+0x123>
c0000d02:	b8 08 00 00 00       	mov    eax,0x8
c0000d07:	29 d0                	sub    eax,edx
c0000d09:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d0c:	eb 04                	jmp    c0000d12 <sYSMALLOc+0x127>
c0000d0e:	89 f5                	mov    ebp,esi
c0000d10:	31 c0                	xor    eax,eax
c0000d12:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d1e:	01 c1                	add    ecx,eax
c0000d20:	83 ec 0c             	sub    esp,0xc
c0000d23:	01 f1                	add    ecx,esi
c0000d25:	01 ca                	add    edx,ecx
c0000d27:	29 c8                	sub    eax,ecx
c0000d29:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d2d:	01 c2                	add    edx,eax
c0000d2f:	52                   	push   edx
c0000d30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d34:	e8 60 ad 00 00       	call   c000ba99 <sbrk>
c0000d39:	83 c4 10             	add    esp,0x10
c0000d3c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d43:	75 0f                	jne    c0000d54 <sYSMALLOc+0x169>
c0000d45:	83 ec 0c             	sub    esp,0xc
c0000d48:	6a 00                	push   0x0
c0000d4a:	e8 4a ad 00 00       	call   c000ba99 <sbrk>
c0000d4f:	83 c4 10             	add    esp,0x10
c0000d52:	eb 30                	jmp    c0000d84 <sYSMALLOc+0x199>
c0000d54:	39 c6                	cmp    esi,eax
c0000d56:	76 33                	jbe    c0000d8b <sYSMALLOc+0x1a0>
c0000d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d5c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d63:	01 f0                	add    eax,esi
c0000d65:	eb 1d                	jmp    c0000d84 <sYSMALLOc+0x199>
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	89 f5                	mov    ebp,esi
c0000d6c:	6a 00                	push   0x0
c0000d6e:	e8 26 ad 00 00       	call   c000ba99 <sbrk>
c0000d73:	89 c2                	mov    edx,eax
c0000d75:	29 f2                	sub    edx,esi
c0000d77:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d7b:	83 c4 10             	add    esp,0x10
c0000d7e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d84:	31 d2                	xor    edx,edx
c0000d86:	83 f8 ff             	cmp    eax,0xffffffff
c0000d89:	74 66                	je     c0000df1 <sYSMALLOc+0x206>
c0000d8b:	29 e8                	sub    eax,ebp
c0000d8d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d90:	01 d0                	add    eax,edx
c0000d92:	83 c8 01             	or     eax,0x1
c0000d95:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d98:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d9e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000da3:	74 4c                	je     c0000df1 <sYSMALLOc+0x206>
c0000da5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000da9:	83 e8 0c             	sub    eax,0xc
c0000dac:	83 e0 f8             	and    eax,0xfffffff8
c0000daf:	89 c2                	mov    edx,eax
c0000db1:	83 ca 01             	or     edx,0x1
c0000db4:	83 f8 0f             	cmp    eax,0xf
c0000db7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dba:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000dc2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dca:	76 25                	jbe    c0000df1 <sYSMALLOc+0x206>
c0000dcc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dd2:	83 ec 0c             	sub    esp,0xc
c0000dd5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ddf:	83 c7 08             	add    edi,0x8
c0000de2:	57                   	push   edi
c0000de3:	e8 0e fd ff ff       	call   c0000af6 <dlfree>
c0000de8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000dee:	83 c4 10             	add    esp,0x10
c0000df1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000df7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000dfd:	73 06                	jae    c0000e05 <sYSMALLOc+0x21a>
c0000dff:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e05:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e0b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e11:	73 06                	jae    c0000e19 <sYSMALLOc+0x22e>
c0000e13:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e1c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e1f:	83 e2 fc             	and    edx,0xfffffffc
c0000e22:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e26:	0f 82 3c fe ff ff    	jb     c0000c68 <sYSMALLOc+0x7d>
c0000e2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e30:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e33:	29 fa                	sub    edx,edi
c0000e35:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e38:	83 ca 01             	or     edx,0x1
c0000e3b:	89 fb                	mov    ebx,edi
c0000e3d:	83 c0 08             	add    eax,0x8
c0000e40:	83 cb 01             	or     ebx,0x1
c0000e43:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e49:	83 c4 2c             	add    esp,0x2c
c0000e4c:	5b                   	pop    ebx
c0000e4d:	5e                   	pop    esi
c0000e4e:	5f                   	pop    edi
c0000e4f:	5d                   	pop    ebp
c0000e50:	c3                   	ret    

c0000e51 <dlmalloc>:
c0000e51:	55                   	push   ebp
c0000e52:	57                   	push   edi
c0000e53:	56                   	push   esi
c0000e54:	53                   	push   ebx
c0000e55:	83 ec 1c             	sub    esp,0x1c
c0000e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e5c:	83 f8 df             	cmp    eax,0xffffffdf
c0000e5f:	0f 87 70 03 00 00    	ja     c00011d5 <dlmalloc+0x384>
c0000e65:	83 c0 0b             	add    eax,0xb
c0000e68:	be 10 00 00 00       	mov    esi,0x10
c0000e6d:	83 f8 0f             	cmp    eax,0xf
c0000e70:	76 05                	jbe    c0000e77 <dlmalloc+0x26>
c0000e72:	83 e0 f8             	and    eax,0xfffffff8
c0000e75:	89 c6                	mov    esi,eax
c0000e77:	8b 3d a0 33 02 c0    	mov    edi,DWORD PTR ds:0xc00233a0
c0000e7d:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e83:	75 17                	jne    c0000e9c <dlmalloc+0x4b>
c0000e85:	85 ff                	test   edi,edi
c0000e87:	0f 85 05 03 00 00    	jne    c0001192 <dlmalloc+0x341>
c0000e8d:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c0000e92:	e8 78 fb ff ff       	call   c0000a0f <malloc_consolidate>
c0000e97:	e9 f6 02 00 00       	jmp    c0001192 <dlmalloc+0x341>
c0000e9c:	39 f7                	cmp    edi,esi
c0000e9e:	72 1f                	jb     c0000ebf <dlmalloc+0x6e>
c0000ea0:	89 f2                	mov    edx,esi
c0000ea2:	c1 ea 03             	shr    edx,0x3
c0000ea5:	83 ea 02             	sub    edx,0x2
c0000ea8:	8b 04 95 a4 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcc5c]
c0000eaf:	85 c0                	test   eax,eax
c0000eb1:	74 0c                	je     c0000ebf <dlmalloc+0x6e>
c0000eb3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eb6:	89 0c 95 a4 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcc5c],ecx
c0000ebd:	eb 30                	jmp    c0000eef <dlmalloc+0x9e>
c0000ebf:	89 f0                	mov    eax,esi
c0000ec1:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ec7:	77 2e                	ja     c0000ef7 <dlmalloc+0xa6>
c0000ec9:	c1 e8 03             	shr    eax,0x3
c0000ecc:	8d 14 c5 d4 33 02 c0 	lea    edx,[eax*8-0x3ffdcc2c]
c0000ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ed7:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000eda:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000edd:	39 c3                	cmp    ebx,eax
c0000edf:	74 2e                	je     c0000f0f <dlmalloc+0xbe>
c0000ee1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ee4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000ee9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000eec:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000eef:	83 c0 08             	add    eax,0x8
c0000ef2:	e9 e0 02 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0000ef7:	e8 8f fa ff ff       	call   c000098b <largebin_index>
c0000efc:	83 e7 02             	and    edi,0x2
c0000eff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f03:	74 0a                	je     c0000f0f <dlmalloc+0xbe>
c0000f05:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c0000f0a:	e8 00 fb ff ff       	call   c0000a0f <malloc_consolidate>
c0000f0f:	8d 46 10             	lea    eax,[esi+0x10]
c0000f12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f16:	8b 1d e0 33 02 c0    	mov    ebx,DWORD PTR ds:0xc00233e0
c0000f1c:	81 fb d4 33 02 c0    	cmp    ebx,0xc00233d4
c0000f22:	0f 84 13 01 00 00    	je     c000103b <dlmalloc+0x1ea>
c0000f28:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f2e:	83 e7 fc             	and    edi,0xfffffffc
c0000f31:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f37:	77 4c                	ja     c0000f85 <dlmalloc+0x134>
c0000f39:	3d d4 33 02 c0       	cmp    eax,0xc00233d4
c0000f3e:	75 45                	jne    c0000f85 <dlmalloc+0x134>
c0000f40:	39 1d d0 33 02 c0    	cmp    DWORD PTR ds:0xc00233d0,ebx
c0000f46:	75 3d                	jne    c0000f85 <dlmalloc+0x134>
c0000f48:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f4c:	73 37                	jae    c0000f85 <dlmalloc+0x134>
c0000f4e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f51:	89 fa                	mov    edx,edi
c0000f53:	a3 dc 33 02 c0       	mov    ds:0xc00233dc,eax
c0000f58:	a3 e0 33 02 c0       	mov    ds:0xc00233e0,eax
c0000f5d:	a3 d0 33 02 c0       	mov    ds:0xc00233d0,eax
c0000f62:	29 f2                	sub    edx,esi
c0000f64:	c7 40 08 d4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233d4
c0000f6b:	c7 40 0c d4 33 02 c0 	mov    DWORD PTR [eax+0xc],0xc00233d4
c0000f72:	83 ce 01             	or     esi,0x1
c0000f75:	89 d1                	mov    ecx,edx
c0000f77:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f7a:	83 c9 01             	or     ecx,0x1
c0000f7d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f80:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f83:	eb 15                	jmp    c0000f9a <dlmalloc+0x149>
c0000f85:	a3 e0 33 02 c0       	mov    ds:0xc00233e0,eax
c0000f8a:	39 fe                	cmp    esi,edi
c0000f8c:	c7 40 08 d4 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc00233d4
c0000f93:	75 0d                	jne    c0000fa2 <dlmalloc+0x151>
c0000f95:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f9a:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f9d:	e9 35 02 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0000fa2:	89 f8                	mov    eax,edi
c0000fa4:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000faa:	77 19                	ja     c0000fc5 <dlmalloc+0x174>
c0000fac:	c1 e8 03             	shr    eax,0x3
c0000faf:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fb2:	83 c2 0d             	add    edx,0xd
c0000fb5:	8d 2c 95 98 33 02 c0 	lea    ebp,[edx*4-0x3ffdcc68]
c0000fbc:	8b 14 95 a0 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc60]
c0000fc3:	eb 46                	jmp    c000100b <dlmalloc+0x1ba>
c0000fc5:	e8 c1 f9 ff ff       	call   c000098b <largebin_index>
c0000fca:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fcd:	83 c2 0d             	add    edx,0xd
c0000fd0:	8d 0c 95 a0 33 02 c0 	lea    ecx,[edx*4-0x3ffdcc60]
c0000fd7:	8b 14 95 a0 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc60]
c0000fde:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fe1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fe5:	89 d5                	mov    ebp,edx
c0000fe7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000feb:	74 1e                	je     c000100b <dlmalloc+0x1ba>
c0000fed:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000ff0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000ff3:	77 12                	ja     c0001007 <dlmalloc+0x1b6>
c0000ff5:	83 cf 01             	or     edi,0x1
c0000ff8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ffb:	76 05                	jbe    c0001002 <dlmalloc+0x1b1>
c0000ffd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001000:	eb f6                	jmp    c0000ff8 <dlmalloc+0x1a7>
c0001002:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001005:	eb 04                	jmp    c000100b <dlmalloc+0x1ba>
c0001007:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000100b:	89 c7                	mov    edi,eax
c000100d:	88 c1                	mov    cl,al
c000100f:	c1 ff 05             	sar    edi,0x5
c0001012:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001016:	bf 01 00 00 00       	mov    edi,0x1
c000101b:	d3 e7                	shl    edi,cl
c000101d:	89 f8                	mov    eax,edi
c000101f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001023:	09 04 bd d4 36 02 c0 	or     DWORD PTR [edi*4-0x3ffdc92c],eax
c000102a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000102d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001030:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001033:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001036:	e9 db fe ff ff       	jmp    c0000f16 <dlmalloc+0xc5>
c000103b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001041:	76 78                	jbe    c00010bb <dlmalloc+0x26a>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	8d 04 c5 d4 33 02 c0 	lea    eax,[eax*8-0x3ffdcc2c]
c000104e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001051:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001054:	39 ca                	cmp    edx,ecx
c0001056:	74 63                	je     c00010bb <dlmalloc+0x26a>
c0001058:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000105b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000105e:	83 e3 fc             	and    ebx,0xfffffffc
c0001061:	39 de                	cmp    esi,ebx
c0001063:	77 52                	ja     c00010b7 <dlmalloc+0x266>
c0001065:	89 df                	mov    edi,ebx
c0001067:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000106a:	29 f7                	sub    edi,esi
c000106c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000106f:	01 d3                	add    ebx,edx
c0001071:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001074:	83 ff 0f             	cmp    edi,0xf
c0001077:	8d 42 08             	lea    eax,[edx+0x8]
c000107a:	77 09                	ja     c0001085 <dlmalloc+0x234>
c000107c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001080:	e9 52 01 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0001085:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001088:	83 ce 01             	or     esi,0x1
c000108b:	89 0d dc 33 02 c0    	mov    DWORD PTR ds:0xc00233dc,ecx
c0001091:	89 0d e0 33 02 c0    	mov    DWORD PTR ds:0xc00233e0,ecx
c0001097:	c7 41 08 d4 33 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00233d4
c000109e:	c7 41 0c d4 33 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00233d4
c00010a5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00010a8:	89 fa                	mov    edx,edi
c00010aa:	83 ca 01             	or     edx,0x1
c00010ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010b0:	89 3b                	mov    DWORD PTR [ebx],edi
c00010b2:	e9 20 01 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c00010b7:	89 c2                	mov    edx,eax
c00010b9:	eb 99                	jmp    c0001054 <dlmalloc+0x203>
c00010bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010bf:	b8 01 00 00 00       	mov    eax,0x1
c00010c4:	41                   	inc    ecx
c00010c5:	89 cb                	mov    ebx,ecx
c00010c7:	8d 14 cd cc 33 02 c0 	lea    edx,[ecx*8-0x3ffdcc34]
c00010ce:	c1 eb 05             	shr    ebx,0x5
c00010d1:	d3 e0                	shl    eax,cl
c00010d3:	8b 3c 9d d4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc92c]
c00010da:	39 f8                	cmp    eax,edi
c00010dc:	77 04                	ja     c00010e2 <dlmalloc+0x291>
c00010de:	85 c0                	test   eax,eax
c00010e0:	75 26                	jne    c0001108 <dlmalloc+0x2b7>
c00010e2:	43                   	inc    ebx
c00010e3:	83 fb 02             	cmp    ebx,0x2
c00010e6:	0f 87 a6 00 00 00    	ja     c0001192 <dlmalloc+0x341>
c00010ec:	8b 3c 9d d4 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc92c]
c00010f3:	85 ff                	test   edi,edi
c00010f5:	74 eb                	je     c00010e2 <dlmalloc+0x291>
c00010f7:	89 d8                	mov    eax,ebx
c00010f9:	c1 e0 06             	shl    eax,0x6
c00010fc:	8d 14 85 cc 33 02 c0 	lea    edx,[eax*4-0x3ffdcc34]
c0001103:	b8 01 00 00 00       	mov    eax,0x1
c0001108:	85 f8                	test   eax,edi
c000110a:	75 07                	jne    c0001113 <dlmalloc+0x2c2>
c000110c:	83 c2 08             	add    edx,0x8
c000110f:	01 c0                	add    eax,eax
c0001111:	eb f5                	jmp    c0001108 <dlmalloc+0x2b7>
c0001113:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001116:	39 ca                	cmp    edx,ecx
c0001118:	75 14                	jne    c000112e <dlmalloc+0x2dd>
c000111a:	89 c1                	mov    ecx,eax
c000111c:	83 c2 08             	add    edx,0x8
c000111f:	f7 d1                	not    ecx
c0001121:	01 c0                	add    eax,eax
c0001123:	21 cf                	and    edi,ecx
c0001125:	89 3c 9d d4 36 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc92c],edi
c000112c:	eb ac                	jmp    c00010da <dlmalloc+0x289>
c000112e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001131:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001134:	83 e0 fc             	and    eax,0xfffffffc
c0001137:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000113a:	89 c3                	mov    ebx,eax
c000113c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000113f:	29 f3                	sub    ebx,esi
c0001141:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001144:	83 fb 0f             	cmp    ebx,0xf
c0001147:	8d 41 08             	lea    eax,[ecx+0x8]
c000114a:	77 09                	ja     c0001155 <dlmalloc+0x304>
c000114c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001150:	e9 82 00 00 00       	jmp    c00011d7 <dlmalloc+0x386>
c0001155:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001158:	81 fe ff 00 00 00    	cmp    esi,0xff
c000115e:	89 3d dc 33 02 c0    	mov    DWORD PTR ds:0xc00233dc,edi
c0001164:	89 3d e0 33 02 c0    	mov    DWORD PTR ds:0xc00233e0,edi
c000116a:	c7 47 08 d4 33 02 c0 	mov    DWORD PTR [edi+0x8],0xc00233d4
c0001171:	c7 47 0c d4 33 02 c0 	mov    DWORD PTR [edi+0xc],0xc00233d4
c0001178:	77 06                	ja     c0001180 <dlmalloc+0x32f>
c000117a:	89 3d d0 33 02 c0    	mov    DWORD PTR ds:0xc00233d0,edi
c0001180:	83 ce 01             	or     esi,0x1
c0001183:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001186:	89 d9                	mov    ecx,ebx
c0001188:	83 c9 01             	or     ecx,0x1
c000118b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000118e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001190:	eb 45                	jmp    c00011d7 <dlmalloc+0x386>
c0001192:	a1 cc 33 02 c0       	mov    eax,ds:0xc00233cc
c0001197:	8d 4e 10             	lea    ecx,[esi+0x10]
c000119a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000119d:	83 e2 fc             	and    edx,0xfffffffc
c00011a0:	39 d1                	cmp    ecx,edx
c00011a2:	77 1e                	ja     c00011c2 <dlmalloc+0x371>
c00011a4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00011a7:	89 f3                	mov    ebx,esi
c00011a9:	89 0d cc 33 02 c0    	mov    DWORD PTR ds:0xc00233cc,ecx
c00011af:	83 cb 01             	or     ebx,0x1
c00011b2:	29 f2                	sub    edx,esi
c00011b4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011b7:	83 ca 01             	or     edx,0x1
c00011ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011bd:	e9 2d fd ff ff       	jmp    c0000eef <dlmalloc+0x9e>
c00011c2:	83 c4 1c             	add    esp,0x1c
c00011c5:	89 f0                	mov    eax,esi
c00011c7:	5b                   	pop    ebx
c00011c8:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c00011cd:	5e                   	pop    esi
c00011ce:	5f                   	pop    edi
c00011cf:	5d                   	pop    ebp
c00011d0:	e9 16 fa ff ff       	jmp    c0000beb <sYSMALLOc>
c00011d5:	31 c0                	xor    eax,eax
c00011d7:	83 c4 1c             	add    esp,0x1c
c00011da:	5b                   	pop    ebx
c00011db:	5e                   	pop    esi
c00011dc:	5f                   	pop    edi
c00011dd:	5d                   	pop    ebp
c00011de:	c3                   	ret    

c00011df <iALLOc>:
c00011df:	55                   	push   ebp
c00011e0:	89 c5                	mov    ebp,eax
c00011e2:	57                   	push   edi
c00011e3:	56                   	push   esi
c00011e4:	53                   	push   ebx
c00011e5:	83 ec 2c             	sub    esp,0x2c
c00011e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f4:	83 3d a0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233a0,0x0
c00011fb:	75 12                	jne    c000120f <iALLOc+0x30>
c00011fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001201:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c0001206:	e8 04 f8 ff ff       	call   c0000a0f <malloc_consolidate>
c000120b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000120f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001214:	74 12                	je     c0001228 <iALLOc+0x49>
c0001216:	85 ed                	test   ebp,ebp
c0001218:	0f 84 64 01 00 00    	je     c0001382 <iALLOc+0x1a3>
c000121e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001226:	eb 33                	jmp    c000125b <iALLOc+0x7c>
c0001228:	85 ed                	test   ebp,ebp
c000122a:	75 14                	jne    c0001240 <iALLOc+0x61>
c000122c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001234:	83 c4 2c             	add    esp,0x2c
c0001237:	5b                   	pop    ebx
c0001238:	5e                   	pop    esi
c0001239:	5f                   	pop    edi
c000123a:	5d                   	pop    ebp
c000123b:	e9 11 fc ff ff       	jmp    c0000e51 <dlmalloc>
c0001240:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001247:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000124f:	83 f8 0f             	cmp    eax,0xf
c0001252:	76 07                	jbe    c000125b <iALLOc+0x7c>
c0001254:	83 e0 f8             	and    eax,0xfffffff8
c0001257:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000125b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001260:	75 09                	jne    c000126b <iALLOc+0x8c>
c0001262:	89 d0                	mov    eax,edx
c0001264:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001267:	31 f6                	xor    esi,esi
c0001269:	eb 3b                	jmp    c00012a6 <iALLOc+0xc7>
c000126b:	8b 02                	mov    eax,DWORD PTR [edx]
c000126d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001275:	83 c0 0b             	add    eax,0xb
c0001278:	83 f8 0f             	cmp    eax,0xf
c000127b:	76 07                	jbe    c0001284 <iALLOc+0xa5>
c000127d:	83 e0 f8             	and    eax,0xfffffff8
c0001280:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001284:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001288:	0f af f5             	imul   esi,ebp
c000128b:	eb 25                	jmp    c00012b2 <iALLOc+0xd3>
c000128d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000128f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001292:	bb 10 00 00 00       	mov    ebx,0x10
c0001297:	83 f9 0f             	cmp    ecx,0xf
c000129a:	76 05                	jbe    c00012a1 <iALLOc+0xc2>
c000129c:	83 e1 f8             	and    ecx,0xfffffff8
c000129f:	89 cb                	mov    ebx,ecx
c00012a1:	01 de                	add    esi,ebx
c00012a3:	83 c0 04             	add    eax,0x4
c00012a6:	39 c7                	cmp    edi,eax
c00012a8:	75 e3                	jne    c000128d <iALLOc+0xae>
c00012aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012b6:	8b 1d f4 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236f4
c00012bc:	83 ec 0c             	sub    esp,0xc
c00012bf:	c7 05 f4 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236f4,0x0
c00012c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012cd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012d1:	50                   	push   eax
c00012d2:	e8 7a fb ff ff       	call   c0000e51 <dlmalloc>
c00012d7:	83 c4 10             	add    esp,0x10
c00012da:	89 1d f4 36 02 c0    	mov    DWORD PTR ds:0xc00236f4,ebx
c00012e0:	85 c0                	test   eax,eax
c00012e2:	0f 84 92 00 00 00    	je     c000137a <iALLOc+0x19b>
c00012e8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012eb:	8d 78 f8             	lea    edi,[eax-0x8]
c00012ee:	83 e3 fc             	and    ebx,0xfffffffc
c00012f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012f5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012fa:	74 1e                	je     c000131a <iALLOc+0x13b>
c00012fc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001300:	89 d9                	mov    ecx,ebx
c0001302:	52                   	push   edx
c0001303:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001307:	83 e9 04             	sub    ecx,0x4
c000130a:	51                   	push   ecx
c000130b:	6a 00                	push   0x0
c000130d:	50                   	push   eax
c000130e:	e8 f5 f2 ff ff       	call   c0000608 <memset>
c0001313:	83 c4 10             	add    esp,0x10
c0001316:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000131a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000131f:	75 14                	jne    c0001335 <iALLOc+0x156>
c0001321:	8d 04 37             	lea    eax,[edi+esi*1]
c0001324:	29 f3                	sub    ebx,esi
c0001326:	8d 48 08             	lea    ecx,[eax+0x8]
c0001329:	83 cb 01             	or     ebx,0x1
c000132c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001330:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001333:	89 f3                	mov    ebx,esi
c0001335:	31 c0                	xor    eax,eax
c0001337:	4d                   	dec    ebp
c0001338:	8d 4f 08             	lea    ecx,[edi+0x8]
c000133b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000133f:	39 c5                	cmp    ebp,eax
c0001341:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001344:	74 2c                	je     c0001372 <iALLOc+0x193>
c0001346:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000134a:	85 c9                	test   ecx,ecx
c000134c:	75 15                	jne    c0001363 <iALLOc+0x184>
c000134e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001351:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001354:	b9 10 00 00 00       	mov    ecx,0x10
c0001359:	83 fe 0f             	cmp    esi,0xf
c000135c:	76 05                	jbe    c0001363 <iALLOc+0x184>
c000135e:	83 e6 f8             	and    esi,0xfffffff8
c0001361:	89 f1                	mov    ecx,esi
c0001363:	89 ce                	mov    esi,ecx
c0001365:	29 cb                	sub    ebx,ecx
c0001367:	83 ce 01             	or     esi,0x1
c000136a:	40                   	inc    eax
c000136b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000136e:	01 cf                	add    edi,ecx
c0001370:	eb c6                	jmp    c0001338 <iALLOc+0x159>
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001378:	eb 08                	jmp    c0001382 <iALLOc+0x1a3>
c000137a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001386:	83 c4 2c             	add    esp,0x2c
c0001389:	5b                   	pop    ebx
c000138a:	5e                   	pop    esi
c000138b:	5f                   	pop    edi
c000138c:	5d                   	pop    ebp
c000138d:	c3                   	ret    

c000138e <dlrealloc>:
c000138e:	55                   	push   ebp
c000138f:	57                   	push   edi
c0001390:	56                   	push   esi
c0001391:	53                   	push   ebx
c0001392:	83 ec 1c             	sub    esp,0x1c
c0001395:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000139d:	85 db                	test   ebx,ebx
c000139f:	75 10                	jne    c00013b1 <dlrealloc+0x23>
c00013a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00013a5:	83 c4 1c             	add    esp,0x1c
c00013a8:	5b                   	pop    ebx
c00013a9:	5e                   	pop    esi
c00013aa:	5f                   	pop    edi
c00013ab:	5d                   	pop    ebp
c00013ac:	e9 a0 fa ff ff       	jmp    c0000e51 <dlmalloc>
c00013b1:	83 f8 df             	cmp    eax,0xffffffdf
c00013b4:	76 07                	jbe    c00013bd <dlrealloc+0x2f>
c00013b6:	31 db                	xor    ebx,ebx
c00013b8:	e9 7c 01 00 00       	jmp    c0001539 <dlrealloc+0x1ab>
c00013bd:	83 c0 0b             	add    eax,0xb
c00013c0:	bf 10 00 00 00       	mov    edi,0x10
c00013c5:	83 f8 0f             	cmp    eax,0xf
c00013c8:	76 05                	jbe    c00013cf <dlrealloc+0x41>
c00013ca:	83 e0 f8             	and    eax,0xfffffff8
c00013cd:	89 c7                	mov    edi,eax
c00013cf:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013d2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013d5:	89 c6                	mov    esi,eax
c00013d7:	83 e6 fc             	and    esi,0xfffffffc
c00013da:	a8 02                	test   al,0x2
c00013dc:	75 d8                	jne    c00013b6 <dlrealloc+0x28>
c00013de:	39 f7                	cmp    edi,esi
c00013e0:	0f 86 15 01 00 00    	jbe    c00014fb <dlrealloc+0x16d>
c00013e6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013ea:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013ed:	39 15 cc 33 02 c0    	cmp    DWORD PTR ds:0xc00233cc,edx
c00013f3:	75 33                	jne    c0001428 <dlrealloc+0x9a>
c00013f5:	83 e1 fc             	and    ecx,0xfffffffc
c00013f8:	01 f1                	add    ecx,esi
c00013fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013fe:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001401:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001405:	77 49                	ja     c0001450 <dlrealloc+0xc2>
c0001407:	01 fd                	add    ebp,edi
c0001409:	83 e0 01             	and    eax,0x1
c000140c:	09 f8                	or     eax,edi
c000140e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001411:	89 2d cc 33 02 c0    	mov    DWORD PTR ds:0xc00233cc,ebp
c0001417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000141b:	29 f8                	sub    eax,edi
c000141d:	83 c8 01             	or     eax,0x1
c0001420:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001423:	e9 11 01 00 00       	jmp    c0001539 <dlrealloc+0x1ab>
c0001428:	89 c8                	mov    eax,ecx
c000142a:	83 e0 fe             	and    eax,0xfffffffe
c000142d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001432:	75 1c                	jne    c0001450 <dlrealloc+0xc2>
c0001434:	83 e1 fc             	and    ecx,0xfffffffc
c0001437:	01 f1                	add    ecx,esi
c0001439:	39 cf                	cmp    edi,ecx
c000143b:	77 13                	ja     c0001450 <dlrealloc+0xc2>
c000143d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001440:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001443:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001446:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001449:	89 ce                	mov    esi,ecx
c000144b:	e9 ab 00 00 00       	jmp    c00014fb <dlrealloc+0x16d>
c0001450:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001454:	8d 47 f9             	lea    eax,[edi-0x7]
c0001457:	83 ec 0c             	sub    esp,0xc
c000145a:	50                   	push   eax
c000145b:	e8 f1 f9 ff ff       	call   c0000e51 <dlmalloc>
c0001460:	83 c4 10             	add    esp,0x10
c0001463:	89 c1                	mov    ecx,eax
c0001465:	85 c0                	test   eax,eax
c0001467:	0f 84 49 ff ff ff    	je     c00013b6 <dlrealloc+0x28>
c000146d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001470:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001474:	39 c2                	cmp    edx,eax
c0001476:	75 0a                	jne    c0001482 <dlrealloc+0xf4>
c0001478:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000147b:	83 e0 fc             	and    eax,0xfffffffc
c000147e:	01 c6                	add    esi,eax
c0001480:	eb 79                	jmp    c00014fb <dlrealloc+0x16d>
c0001482:	83 ee 04             	sub    esi,0x4
c0001485:	83 fe 27             	cmp    esi,0x27
c0001488:	76 16                	jbe    c00014a0 <dlrealloc+0x112>
c000148a:	50                   	push   eax
c000148b:	56                   	push   esi
c000148c:	53                   	push   ebx
c000148d:	51                   	push   ecx
c000148e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001492:	e8 3b f1 ff ff       	call   c00005d2 <memcpy>
c0001497:	83 c4 10             	add    esp,0x10
c000149a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000149e:	eb 43                	jmp    c00014e3 <dlrealloc+0x155>
c00014a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00014a2:	83 fe 13             	cmp    esi,0x13
c00014a5:	89 01                	mov    DWORD PTR [ecx],eax
c00014a7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00014aa:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014b0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014b3:	76 2e                	jbe    c00014e3 <dlrealloc+0x155>
c00014b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014b8:	83 fe 1b             	cmp    esi,0x1b
c00014bb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014c1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014c4:	76 1d                	jbe    c00014e3 <dlrealloc+0x155>
c00014c6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014c9:	83 fe 23             	cmp    esi,0x23
c00014cc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014d2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014d5:	76 0c                	jbe    c00014e3 <dlrealloc+0x155>
c00014d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014da:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014e0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014e7:	83 ec 0c             	sub    esp,0xc
c00014ea:	53                   	push   ebx
c00014eb:	e8 06 f6 ff ff       	call   c0000af6 <dlfree>
c00014f0:	83 c4 10             	add    esp,0x10
c00014f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014f7:	89 cb                	mov    ebx,ecx
c00014f9:	eb 3e                	jmp    c0001539 <dlrealloc+0x1ab>
c00014fb:	89 f2                	mov    edx,esi
c00014fd:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001500:	29 fa                	sub    edx,edi
c0001502:	83 e1 01             	and    ecx,0x1
c0001505:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001509:	83 fa 0f             	cmp    edx,0xf
c000150c:	77 0b                	ja     c0001519 <dlrealloc+0x18b>
c000150e:	09 ce                	or     esi,ecx
c0001510:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001513:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001517:	eb 20                	jmp    c0001539 <dlrealloc+0x1ab>
c0001519:	01 fd                	add    ebp,edi
c000151b:	83 ec 0c             	sub    esp,0xc
c000151e:	09 cf                	or     edi,ecx
c0001520:	83 ca 01             	or     edx,0x1
c0001523:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001526:	83 c5 08             	add    ebp,0x8
c0001529:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000152c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001530:	55                   	push   ebp
c0001531:	e8 c0 f5 ff ff       	call   c0000af6 <dlfree>
c0001536:	83 c4 10             	add    esp,0x10
c0001539:	83 c4 1c             	add    esp,0x1c
c000153c:	89 d8                	mov    eax,ebx
c000153e:	5b                   	pop    ebx
c000153f:	5e                   	pop    esi
c0001540:	5f                   	pop    edi
c0001541:	5d                   	pop    ebp
c0001542:	c3                   	ret    

c0001543 <dlmemalign>:
c0001543:	55                   	push   ebp
c0001544:	57                   	push   edi
c0001545:	56                   	push   esi
c0001546:	53                   	push   ebx
c0001547:	83 ec 0c             	sub    esp,0xc
c000154a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000154e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001552:	83 fa 08             	cmp    edx,0x8
c0001555:	77 10                	ja     c0001567 <dlmemalign+0x24>
c0001557:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000155b:	83 c4 0c             	add    esp,0xc
c000155e:	5b                   	pop    ebx
c000155f:	5e                   	pop    esi
c0001560:	5f                   	pop    edi
c0001561:	5d                   	pop    ebp
c0001562:	e9 ea f8 ff ff       	jmp    c0000e51 <dlmalloc>
c0001567:	bf 10 00 00 00       	mov    edi,0x10
c000156c:	83 fa 0f             	cmp    edx,0xf
c000156f:	76 13                	jbe    c0001584 <dlmemalign+0x41>
c0001571:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001574:	85 d1                	test   ecx,edx
c0001576:	75 04                	jne    c000157c <dlmemalign+0x39>
c0001578:	89 d7                	mov    edi,edx
c000157a:	eb 08                	jmp    c0001584 <dlmemalign+0x41>
c000157c:	39 d7                	cmp    edi,edx
c000157e:	73 04                	jae    c0001584 <dlmemalign+0x41>
c0001580:	01 ff                	add    edi,edi
c0001582:	eb f8                	jmp    c000157c <dlmemalign+0x39>
c0001584:	83 f8 df             	cmp    eax,0xffffffdf
c0001587:	76 07                	jbe    c0001590 <dlmemalign+0x4d>
c0001589:	31 c0                	xor    eax,eax
c000158b:	e9 ce 00 00 00       	jmp    c000165e <dlmemalign+0x11b>
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	bd 10 00 00 00       	mov    ebp,0x10
c0001598:	83 f8 0f             	cmp    eax,0xf
c000159b:	76 05                	jbe    c00015a2 <dlmemalign+0x5f>
c000159d:	83 e0 f8             	and    eax,0xfffffff8
c00015a0:	89 c5                	mov    ebp,eax
c00015a2:	83 ec 0c             	sub    esp,0xc
c00015a5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00015a9:	50                   	push   eax
c00015aa:	e8 a2 f8 ff ff       	call   c0000e51 <dlmalloc>
c00015af:	83 c4 10             	add    esp,0x10
c00015b2:	89 c1                	mov    ecx,eax
c00015b4:	85 c0                	test   eax,eax
c00015b6:	74 d1                	je     c0001589 <dlmemalign+0x46>
c00015b8:	31 d2                	xor    edx,edx
c00015ba:	8d 70 f8             	lea    esi,[eax-0x8]
c00015bd:	f7 f7                	div    edi
c00015bf:	85 d2                	test   edx,edx
c00015c1:	74 62                	je     c0001625 <dlmemalign+0xe2>
c00015c3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015c7:	89 f8                	mov    eax,edi
c00015c9:	f7 d8                	neg    eax
c00015cb:	21 c3                	and    ebx,eax
c00015cd:	83 eb 08             	sub    ebx,0x8
c00015d0:	89 d8                	mov    eax,ebx
c00015d2:	29 f0                	sub    eax,esi
c00015d4:	83 f8 0f             	cmp    eax,0xf
c00015d7:	77 02                	ja     c00015db <dlmemalign+0x98>
c00015d9:	01 fb                	add    ebx,edi
c00015db:	89 d8                	mov    eax,ebx
c00015dd:	29 f0                	sub    eax,esi
c00015df:	89 c6                	mov    esi,eax
c00015e1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015e4:	89 c2                	mov    edx,eax
c00015e6:	83 e2 fc             	and    edx,0xfffffffc
c00015e9:	29 f2                	sub    edx,esi
c00015eb:	a8 02                	test   al,0x2
c00015ed:	74 10                	je     c00015ff <dlmemalign+0xbc>
c00015ef:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015f2:	83 ca 02             	or     edx,0x2
c00015f5:	8d 43 08             	lea    eax,[ebx+0x8]
c00015f8:	89 33                	mov    DWORD PTR [ebx],esi
c00015fa:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015fd:	eb 5f                	jmp    c000165e <dlmemalign+0x11b>
c00015ff:	83 ec 0c             	sub    esp,0xc
c0001602:	89 d0                	mov    eax,edx
c0001604:	83 c8 01             	or     eax,0x1
c0001607:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000160a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000160f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001612:	83 e0 01             	and    eax,0x1
c0001615:	09 f0                	or     eax,esi
c0001617:	89 de                	mov    esi,ebx
c0001619:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000161c:	51                   	push   ecx
c000161d:	e8 d4 f4 ff ff       	call   c0000af6 <dlfree>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001628:	a8 02                	test   al,0x2
c000162a:	75 2f                	jne    c000165b <dlmemalign+0x118>
c000162c:	83 e0 fc             	and    eax,0xfffffffc
c000162f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001632:	39 c2                	cmp    edx,eax
c0001634:	73 25                	jae    c000165b <dlmemalign+0x118>
c0001636:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001639:	83 ec 0c             	sub    esp,0xc
c000163c:	29 e8                	sub    eax,ebp
c000163e:	83 c2 08             	add    edx,0x8
c0001641:	83 c8 01             	or     eax,0x1
c0001644:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001647:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000164a:	83 e0 01             	and    eax,0x1
c000164d:	09 c5                	or     ebp,eax
c000164f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001652:	52                   	push   edx
c0001653:	e8 9e f4 ff ff       	call   c0000af6 <dlfree>
c0001658:	83 c4 10             	add    esp,0x10
c000165b:	8d 46 08             	lea    eax,[esi+0x8]
c000165e:	83 c4 0c             	add    esp,0xc
c0001661:	5b                   	pop    ebx
c0001662:	5e                   	pop    esi
c0001663:	5f                   	pop    edi
c0001664:	5d                   	pop    ebp
c0001665:	c3                   	ret    

c0001666 <dlcalloc>:
c0001666:	53                   	push   ebx
c0001667:	83 ec 14             	sub    esp,0x14
c000166a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000166e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001673:	50                   	push   eax
c0001674:	e8 d8 f7 ff ff       	call   c0000e51 <dlmalloc>
c0001679:	83 c4 10             	add    esp,0x10
c000167c:	89 c3                	mov    ebx,eax
c000167e:	85 c0                	test   eax,eax
c0001680:	74 77                	je     c00016f9 <dlcalloc+0x93>
c0001682:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001685:	89 d0                	mov    eax,edx
c0001687:	83 e0 fc             	and    eax,0xfffffffc
c000168a:	80 e2 02             	and    dl,0x2
c000168d:	75 5a                	jne    c00016e9 <dlcalloc+0x83>
c000168f:	83 e8 04             	sub    eax,0x4
c0001692:	83 f8 27             	cmp    eax,0x27
c0001695:	76 03                	jbe    c000169a <dlcalloc+0x34>
c0001697:	51                   	push   ecx
c0001698:	eb 53                	jmp    c00016ed <dlcalloc+0x87>
c000169a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00016a0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00016a7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016ae:	83 f8 13             	cmp    eax,0x13
c00016b1:	76 46                	jbe    c00016f9 <dlcalloc+0x93>
c00016b3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016c1:	83 f8 1b             	cmp    eax,0x1b
c00016c4:	76 33                	jbe    c00016f9 <dlcalloc+0x93>
c00016c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016cd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016d4:	83 f8 23             	cmp    eax,0x23
c00016d7:	76 20                	jbe    c00016f9 <dlcalloc+0x93>
c00016d9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016e0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016e7:	eb 10                	jmp    c00016f9 <dlcalloc+0x93>
c00016e9:	83 e8 08             	sub    eax,0x8
c00016ec:	52                   	push   edx
c00016ed:	50                   	push   eax
c00016ee:	6a 00                	push   0x0
c00016f0:	53                   	push   ebx
c00016f1:	e8 12 ef ff ff       	call   c0000608 <memset>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	89 d8                	mov    eax,ebx
c00016fb:	83 c4 08             	add    esp,0x8
c00016fe:	5b                   	pop    ebx
c00016ff:	c3                   	ret    

c0001700 <dlcfree>:
c0001700:	e9 f1 f3 ff ff       	jmp    c0000af6 <dlfree>

c0001705 <dlindependent_calloc>:
c0001705:	83 ec 28             	sub    esp,0x28
c0001708:	b9 03 00 00 00       	mov    ecx,0x3
c000170d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001711:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001715:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001719:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000171d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001721:	e8 b9 fa ff ff       	call   c00011df <iALLOc>
c0001726:	83 c4 2c             	add    esp,0x2c
c0001729:	c3                   	ret    

c000172a <dlindependent_comalloc>:
c000172a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001732:	31 c9                	xor    ecx,ecx
c0001734:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000173c:	e9 9e fa ff ff       	jmp    c00011df <iALLOc>

c0001741 <dlvalloc>:
c0001741:	83 ec 0c             	sub    esp,0xc
c0001744:	83 3d a0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233a0,0x0
c000174b:	75 0a                	jne    c0001757 <dlvalloc+0x16>
c000174d:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c0001752:	e8 b8 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c0001757:	50                   	push   eax
c0001758:	50                   	push   eax
c0001759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000175d:	ff 35 fc 36 02 c0    	push   DWORD PTR ds:0xc00236fc
c0001763:	e8 db fd ff ff       	call   c0001543 <dlmemalign>
c0001768:	83 c4 1c             	add    esp,0x1c
c000176b:	c3                   	ret    

c000176c <dlpvalloc>:
c000176c:	83 ec 0c             	sub    esp,0xc
c000176f:	83 3d a0 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233a0,0x0
c0001776:	75 0a                	jne    c0001782 <dlpvalloc+0x16>
c0001778:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c000177d:	e8 8d f2 ff ff       	call   c0000a0f <malloc_consolidate>
c0001782:	a1 fc 36 02 c0       	mov    eax,ds:0xc00236fc
c0001787:	89 c1                	mov    ecx,eax
c0001789:	52                   	push   edx
c000178a:	f7 d9                	neg    ecx
c000178c:	52                   	push   edx
c000178d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001791:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001795:	21 ca                	and    edx,ecx
c0001797:	52                   	push   edx
c0001798:	50                   	push   eax
c0001799:	e8 a5 fd ff ff       	call   c0001543 <dlmemalign>
c000179e:	83 c4 1c             	add    esp,0x1c
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_trim>:
c00017a2:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c00017a7:	e8 63 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c00017ac:	31 c0                	xor    eax,eax
c00017ae:	c3                   	ret    

c00017af <dlmalloc_usable_size>:
c00017af:	53                   	push   ebx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017b6:	85 c9                	test   ecx,ecx
c00017b8:	74 24                	je     c00017de <dlmalloc_usable_size+0x2f>
c00017ba:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017bd:	f6 c2 02             	test   dl,0x2
c00017c0:	74 08                	je     c00017ca <dlmalloc_usable_size+0x1b>
c00017c2:	83 e2 fc             	and    edx,0xfffffffc
c00017c5:	8d 42 f8             	lea    eax,[edx-0x8]
c00017c8:	eb 14                	jmp    c00017de <dlmalloc_usable_size+0x2f>
c00017ca:	89 d3                	mov    ebx,edx
c00017cc:	31 c0                	xor    eax,eax
c00017ce:	83 e3 fe             	and    ebx,0xfffffffe
c00017d1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017d6:	74 06                	je     c00017de <dlmalloc_usable_size+0x2f>
c00017d8:	83 e2 fc             	and    edx,0xfffffffc
c00017db:	8d 42 fc             	lea    eax,[edx-0x4]
c00017de:	5b                   	pop    ebx
c00017df:	c3                   	ret    

c00017e0 <dlmallinfo>:
c00017e0:	55                   	push   ebp
c00017e1:	57                   	push   edi
c00017e2:	56                   	push   esi
c00017e3:	53                   	push   ebx
c00017e4:	83 ec 08             	sub    esp,0x8
c00017e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017eb:	83 3d cc 33 02 c0 00 	cmp    DWORD PTR ds:0xc00233cc,0x0
c00017f2:	75 0a                	jne    c00017fe <dlmallinfo+0x1e>
c00017f4:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c00017f9:	e8 11 f2 ff ff       	call   c0000a0f <malloc_consolidate>
c00017fe:	a1 cc 33 02 c0       	mov    eax,ds:0xc00233cc
c0001803:	31 ed                	xor    ebp,ebp
c0001805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001808:	31 c9                	xor    ecx,ecx
c000180a:	83 e0 fc             	and    eax,0xfffffffc
c000180d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001811:	31 c0                	xor    eax,eax
c0001813:	8b 14 85 a4 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcc5c]
c000181a:	85 d2                	test   edx,edx
c000181c:	74 0e                	je     c000182c <dlmallinfo+0x4c>
c000181e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001821:	45                   	inc    ebp
c0001822:	83 e6 fc             	and    esi,0xfffffffc
c0001825:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001828:	01 f1                	add    ecx,esi
c000182a:	eb ee                	jmp    c000181a <dlmallinfo+0x3a>
c000182c:	40                   	inc    eax
c000182d:	83 f8 0a             	cmp    eax,0xa
c0001830:	75 e1                	jne    c0001813 <dlmallinfo+0x33>
c0001832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001836:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000183d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001840:	b8 d4 33 02 c0       	mov    eax,0xc00233d4
c0001845:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001848:	39 f0                	cmp    eax,esi
c000184a:	74 10                	je     c000185c <dlmallinfo+0x7c>
c000184c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000184f:	ff 04 24             	inc    DWORD PTR [esp]
c0001852:	83 e7 fc             	and    edi,0xfffffffc
c0001855:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001858:	01 fa                	add    edx,edi
c000185a:	eb ec                	jmp    c0001848 <dlmallinfo+0x68>
c000185c:	83 c0 08             	add    eax,0x8
c000185f:	3d cc 36 02 c0       	cmp    eax,0xc00236cc
c0001864:	75 df                	jne    c0001845 <dlmallinfo+0x65>
c0001866:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001869:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000186c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000186f:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0001874:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001877:	89 03                	mov    DWORD PTR [ebx],eax
c0001879:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000187c:	8b 35 f0 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236f0
c0001882:	29 d0                	sub    eax,edx
c0001884:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001887:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000188a:	8b 35 04 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023704
c0001890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001894:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001897:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000189a:	8b 35 14 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023714
c00018a0:	89 d8                	mov    eax,ebx
c00018a2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00018a5:	83 c4 08             	add    esp,0x8
c00018a8:	5b                   	pop    ebx
c00018a9:	5e                   	pop    esi
c00018aa:	5f                   	pop    edi
c00018ab:	5d                   	pop    ebp
c00018ac:	c2 04 00             	ret    0x4

c00018af <dlmalloc_stats>:
c00018af:	83 ec 30             	sub    esp,0x30
c00018b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018b6:	50                   	push   eax
c00018b7:	e8 24 ff ff ff       	call   c00017e0 <dlmallinfo>
c00018bc:	83 c4 30             	add    esp,0x30
c00018bf:	c3                   	ret    

c00018c0 <dlmallopt>:
c00018c0:	56                   	push   esi
c00018c1:	b8 a0 33 02 c0       	mov    eax,0xc00233a0
c00018c6:	53                   	push   ebx
c00018c7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018cf:	e8 3b f1 ff ff       	call   c0000a0f <malloc_consolidate>
c00018d4:	8d 46 04             	lea    eax,[esi+0x4]
c00018d7:	83 f8 05             	cmp    eax,0x5
c00018da:	77 67                	ja     c0001943 <dlmallopt+0x83>
c00018dc:	ff 24 85 a4 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe095c]
c00018e3:	83 fb 50             	cmp    ebx,0x50
c00018e6:	77 5b                	ja     c0001943 <dlmallopt+0x83>
c00018e8:	ba 08 00 00 00       	mov    edx,0x8
c00018ed:	85 db                	test   ebx,ebx
c00018ef:	74 12                	je     c0001903 <dlmallopt+0x43>
c00018f1:	83 c3 0b             	add    ebx,0xb
c00018f4:	ba 10 00 00 00       	mov    edx,0x10
c00018f9:	83 fb 0f             	cmp    ebx,0xf
c00018fc:	76 05                	jbe    c0001903 <dlmallopt+0x43>
c00018fe:	89 da                	mov    edx,ebx
c0001900:	83 e2 f8             	and    edx,0xfffffff8
c0001903:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c0001908:	83 e0 03             	and    eax,0x3
c000190b:	09 d0                	or     eax,edx
c000190d:	a3 a0 33 02 c0       	mov    ds:0xc00233a0,eax
c0001912:	eb 31                	jmp    c0001945 <dlmallopt+0x85>
c0001914:	89 1d e4 36 02 c0    	mov    DWORD PTR ds:0xc00236e4,ebx
c000191a:	eb 06                	jmp    c0001922 <dlmallopt+0x62>
c000191c:	89 1d e8 36 02 c0    	mov    DWORD PTR ds:0xc00236e8,ebx
c0001922:	be 01 00 00 00       	mov    esi,0x1
c0001927:	eb 1c                	jmp    c0001945 <dlmallopt+0x85>
c0001929:	89 1d ec 36 02 c0    	mov    DWORD PTR ds:0xc00236ec,ebx
c000192f:	eb f1                	jmp    c0001922 <dlmallopt+0x62>
c0001931:	31 f6                	xor    esi,esi
c0001933:	85 db                	test   ebx,ebx
c0001935:	75 0e                	jne    c0001945 <dlmallopt+0x85>
c0001937:	c7 05 f4 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236f4,0x0
c0001941:	eb df                	jmp    c0001922 <dlmallopt+0x62>
c0001943:	31 f6                	xor    esi,esi
c0001945:	89 f0                	mov    eax,esi
c0001947:	5b                   	pop    ebx
c0001948:	5e                   	pop    esi
c0001949:	c3                   	ret    

c000194a <disk_status>:
c000194a:	31 c0                	xor    eax,eax
c000194c:	c3                   	ret    

c000194d <disk_initialize>:
c000194d:	31 c0                	xor    eax,eax
c000194f:	c3                   	ret    

c0001950 <disk_read>:
c0001950:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001955:	0f b6 04 85 c0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb340]
c000195d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001961:	e9 e4 81 01 00       	jmp    c0019b4a <fatWrapperReadDisk>

c0001966 <disk_write>:
c0001966:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196b:	0f b6 04 85 c0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb340]
c0001973:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001977:	e9 15 82 01 00       	jmp    c0019b91 <fatWrapperWriteDisk>

c000197c <disk_ioctl>:
c000197c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001981:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001985:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000198a:	0f b6 04 85 c0 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb340]
c0001992:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001996:	e9 3d 82 01 00       	jmp    c0019bd8 <fatWrapperIoctl>

c000199b <ld_word>:
c000199b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000199f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019a2:	c1 e2 08             	shl    edx,0x8
c00019a5:	09 d0                	or     eax,edx
c00019a7:	c3                   	ret    

c00019a8 <ld_dword>:
c00019a8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00019ac:	89 d1                	mov    ecx,edx
c00019ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019b2:	c1 e1 08             	shl    ecx,0x8
c00019b5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019b8:	09 ca                	or     edx,ecx
c00019ba:	c1 e2 08             	shl    edx,0x8
c00019bd:	09 d0                	or     eax,edx
c00019bf:	c3                   	ret    

c00019c0 <ld_qword>:
c00019c0:	57                   	push   edi
c00019c1:	56                   	push   esi
c00019c2:	53                   	push   ebx
c00019c3:	31 db                	xor    ebx,ebx
c00019c5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019c8:	89 df                	mov    edi,ebx
c00019ca:	89 ce                	mov    esi,ecx
c00019cc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019d0:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d4:	c1 e6 08             	shl    esi,0x8
c00019d7:	09 f2                	or     edx,esi
c00019d9:	89 d6                	mov    esi,edx
c00019db:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019df:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e3:	c1 e6 08             	shl    esi,0x8
c00019e6:	09 f2                	or     edx,esi
c00019e8:	89 d6                	mov    esi,edx
c00019ea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019ee:	0f a4 f7 08          	shld   edi,esi,0x8
c00019f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019f5:	c1 e6 08             	shl    esi,0x8
c00019f8:	89 fb                	mov    ebx,edi
c00019fa:	09 f2                	or     edx,esi
c00019fc:	89 d1                	mov    ecx,edx
c00019fe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a02:	c1 e1 08             	shl    ecx,0x8
c0001a05:	89 da                	mov    edx,ebx
c0001a07:	09 c8                	or     eax,ecx
c0001a09:	5b                   	pop    ebx
c0001a0a:	5e                   	pop    esi
c0001a0b:	5f                   	pop    edi
c0001a0c:	c3                   	ret    

c0001a0d <st_word>:
c0001a0d:	66 89 10             	mov    WORD PTR [eax],dx
c0001a10:	c3                   	ret    

c0001a11 <st_dword>:
c0001a11:	89 10                	mov    DWORD PTR [eax],edx
c0001a13:	c3                   	ret    

c0001a14 <st_qword>:
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a19:	c3                   	ret    

c0001a1a <mem_cpy>:
c0001a1a:	85 c9                	test   ecx,ecx
c0001a1c:	74 10                	je     c0001a2e <mem_cpy+0x14>
c0001a1e:	57                   	push   edi
c0001a1f:	01 c1                	add    ecx,eax
c0001a21:	56                   	push   esi
c0001a22:	89 c7                	mov    edi,eax
c0001a24:	89 d6                	mov    esi,edx
c0001a26:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a27:	39 f9                	cmp    ecx,edi
c0001a29:	75 fb                	jne    c0001a26 <mem_cpy+0xc>
c0001a2b:	5e                   	pop    esi
c0001a2c:	5f                   	pop    edi
c0001a2d:	c3                   	ret    
c0001a2e:	c3                   	ret    

c0001a2f <mem_set>:
c0001a2f:	01 c1                	add    ecx,eax
c0001a31:	40                   	inc    eax
c0001a32:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a35:	39 c8                	cmp    eax,ecx
c0001a37:	75 f8                	jne    c0001a31 <mem_set+0x2>
c0001a39:	c3                   	ret    

c0001a3a <mem_cmp>:
c0001a3a:	57                   	push   edi
c0001a3b:	56                   	push   esi
c0001a3c:	89 c6                	mov    esi,eax
c0001a3e:	53                   	push   ebx
c0001a3f:	46                   	inc    esi
c0001a40:	42                   	inc    edx
c0001a41:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a45:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a49:	29 fb                	sub    ebx,edi
c0001a4b:	89 cf                	mov    edi,ecx
c0001a4d:	29 f7                	sub    edi,esi
c0001a4f:	01 c7                	add    edi,eax
c0001a51:	74 04                	je     c0001a57 <mem_cmp+0x1d>
c0001a53:	85 db                	test   ebx,ebx
c0001a55:	74 e8                	je     c0001a3f <mem_cmp+0x5>
c0001a57:	89 d8                	mov    eax,ebx
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	c3                   	ret    

c0001a5d <chk_chr>:
c0001a5d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a60:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a63:	74 07                	je     c0001a6c <chk_chr+0xf>
c0001a65:	39 d1                	cmp    ecx,edx
c0001a67:	74 03                	je     c0001a6c <chk_chr+0xf>
c0001a69:	40                   	inc    eax
c0001a6a:	eb f1                	jmp    c0001a5d <chk_chr>
c0001a6c:	89 c8                	mov    eax,ecx
c0001a6e:	c3                   	ret    

c0001a6f <dbc_1st>:
c0001a6f:	31 c0                	xor    eax,eax
c0001a71:	c3                   	ret    

c0001a72 <dbc_2nd>:
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <tchar2uni>:
c0001a75:	57                   	push   edi
c0001a76:	89 c7                	mov    edi,eax
c0001a78:	56                   	push   esi
c0001a79:	53                   	push   ebx
c0001a7a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a7c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a7e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a81:	84 c9                	test   cl,cl
c0001a83:	78 0a                	js     c0001a8f <tchar2uni+0x1a>
c0001a85:	0f b6 d1             	movzx  edx,cl
c0001a88:	89 f3                	mov    ebx,esi
c0001a8a:	e9 9f 00 00 00       	jmp    c0001b2e <tchar2uni+0xb9>
c0001a8f:	88 ca                	mov    dl,cl
c0001a91:	83 e2 e0             	and    edx,0xffffffe0
c0001a94:	80 fa c0             	cmp    dl,0xc0
c0001a97:	75 0c                	jne    c0001aa5 <tchar2uni+0x30>
c0001a99:	89 ca                	mov    edx,ecx
c0001a9b:	b9 01 00 00 00       	mov    ecx,0x1
c0001aa0:	83 e2 1f             	and    edx,0x1f
c0001aa3:	eb 2e                	jmp    c0001ad3 <tchar2uni+0x5e>
c0001aa5:	88 ca                	mov    dl,cl
c0001aa7:	83 e2 f0             	and    edx,0xfffffff0
c0001aaa:	80 fa e0             	cmp    dl,0xe0
c0001aad:	75 0c                	jne    c0001abb <tchar2uni+0x46>
c0001aaf:	89 ca                	mov    edx,ecx
c0001ab1:	b9 02 00 00 00       	mov    ecx,0x2
c0001ab6:	83 e2 0f             	and    edx,0xf
c0001ab9:	eb 18                	jmp    c0001ad3 <tchar2uni+0x5e>
c0001abb:	88 ca                	mov    dl,cl
c0001abd:	83 e2 f8             	and    edx,0xfffffff8
c0001ac0:	88 d0                	mov    al,dl
c0001ac2:	83 ca ff             	or     edx,0xffffffff
c0001ac5:	3c f0                	cmp    al,0xf0
c0001ac7:	75 6c                	jne    c0001b35 <tchar2uni+0xc0>
c0001ac9:	89 ca                	mov    edx,ecx
c0001acb:	b9 03 00 00 00       	mov    ecx,0x3
c0001ad0:	83 e2 07             	and    edx,0x7
c0001ad3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ad7:	46                   	inc    esi
c0001ad8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001adb:	88 c8                	mov    al,cl
c0001add:	83 e0 c0             	and    eax,0xffffffc0
c0001ae0:	3c 80                	cmp    al,0x80
c0001ae2:	75 4e                	jne    c0001b32 <tchar2uni+0xbd>
c0001ae4:	c1 e2 06             	shl    edx,0x6
c0001ae7:	83 e1 3f             	and    ecx,0x3f
c0001aea:	09 ca                	or     edx,ecx
c0001aec:	39 de                	cmp    esi,ebx
c0001aee:	75 e7                	jne    c0001ad7 <tchar2uni+0x62>
c0001af0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001af3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001af9:	77 37                	ja     c0001b32 <tchar2uni+0xbd>
c0001afb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b01:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b07:	76 29                	jbe    c0001b32 <tchar2uni+0xbd>
c0001b09:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b0f:	76 1d                	jbe    c0001b2e <tchar2uni+0xb9>
c0001b11:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b17:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b1d:	c1 e1 06             	shl    ecx,0x6
c0001b20:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b26:	09 ca                	or     edx,ecx
c0001b28:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b2e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b30:	eb 03                	jmp    c0001b35 <tchar2uni+0xc0>
c0001b32:	83 ca ff             	or     edx,0xffffffff
c0001b35:	5b                   	pop    ebx
c0001b36:	89 d0                	mov    eax,edx
c0001b38:	5e                   	pop    esi
c0001b39:	5f                   	pop    edi
c0001b3a:	c3                   	ret    

c0001b3b <put_utf>:
c0001b3b:	53                   	push   ebx
c0001b3c:	83 f8 7f             	cmp    eax,0x7f
c0001b3f:	89 c3                	mov    ebx,eax
c0001b41:	b0 00                	mov    al,0x0
c0001b43:	77 11                	ja     c0001b56 <put_utf+0x1b>
c0001b45:	85 c9                	test   ecx,ecx
c0001b47:	0f 84 e5 00 00 00    	je     c0001c32 <put_utf+0xf7>
c0001b4d:	88 1a                	mov    BYTE PTR [edx],bl
c0001b4f:	b0 01                	mov    al,0x1
c0001b51:	e9 dc 00 00 00       	jmp    c0001c32 <put_utf+0xf7>
c0001b56:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b5c:	77 23                	ja     c0001b81 <put_utf+0x46>
c0001b5e:	83 f9 01             	cmp    ecx,0x1
c0001b61:	0f 86 cb 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001b67:	89 d8                	mov    eax,ebx
c0001b69:	83 e3 3f             	and    ebx,0x3f
c0001b6c:	c1 e8 06             	shr    eax,0x6
c0001b6f:	83 cb 80             	or     ebx,0xffffff80
c0001b72:	83 c8 c0             	or     eax,0xffffffc0
c0001b75:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b78:	88 02                	mov    BYTE PTR [edx],al
c0001b7a:	b0 02                	mov    al,0x2
c0001b7c:	e9 b1 00 00 00       	jmp    c0001c32 <put_utf+0xf7>
c0001b81:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b87:	77 40                	ja     c0001bc9 <put_utf+0x8e>
c0001b89:	83 f9 02             	cmp    ecx,0x2
c0001b8c:	0f 86 a0 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001b92:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b98:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b9e:	0f 86 8e 00 00 00    	jbe    c0001c32 <put_utf+0xf7>
c0001ba4:	89 d8                	mov    eax,ebx
c0001ba6:	c1 e8 0c             	shr    eax,0xc
c0001ba9:	83 c8 e0             	or     eax,0xffffffe0
c0001bac:	88 02                	mov    BYTE PTR [edx],al
c0001bae:	89 d8                	mov    eax,ebx
c0001bb0:	83 e3 3f             	and    ebx,0x3f
c0001bb3:	c1 e8 06             	shr    eax,0x6
c0001bb6:	83 cb 80             	or     ebx,0xffffff80
c0001bb9:	83 e0 3f             	and    eax,0x3f
c0001bbc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bbf:	83 c8 80             	or     eax,0xffffff80
c0001bc2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bc5:	b0 03                	mov    al,0x3
c0001bc7:	eb 69                	jmp    c0001c32 <put_utf+0xf7>
c0001bc9:	83 f9 03             	cmp    ecx,0x3
c0001bcc:	76 64                	jbe    c0001c32 <put_utf+0xf7>
c0001bce:	89 d9                	mov    ecx,ebx
c0001bd0:	0f b7 c3             	movzx  eax,bx
c0001bd3:	66 31 c9             	xor    cx,cx
c0001bd6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bdc:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001be2:	c1 e9 06             	shr    ecx,0x6
c0001be5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001beb:	77 43                	ja     c0001c30 <put_utf+0xf5>
c0001bed:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bf3:	77 3b                	ja     c0001c30 <put_utf+0xf5>
c0001bf5:	09 cb                	or     ebx,ecx
c0001bf7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bfd:	89 d8                	mov    eax,ebx
c0001bff:	c1 e8 12             	shr    eax,0x12
c0001c02:	83 c8 f0             	or     eax,0xfffffff0
c0001c05:	88 02                	mov    BYTE PTR [edx],al
c0001c07:	89 d8                	mov    eax,ebx
c0001c09:	c1 e8 0c             	shr    eax,0xc
c0001c0c:	83 e0 3f             	and    eax,0x3f
c0001c0f:	83 c8 80             	or     eax,0xffffff80
c0001c12:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c15:	89 d8                	mov    eax,ebx
c0001c17:	83 e3 3f             	and    ebx,0x3f
c0001c1a:	c1 e8 06             	shr    eax,0x6
c0001c1d:	83 cb 80             	or     ebx,0xffffff80
c0001c20:	83 e0 3f             	and    eax,0x3f
c0001c23:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c26:	83 c8 80             	or     eax,0xffffff80
c0001c29:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c2c:	b0 04                	mov    al,0x4
c0001c2e:	eb 02                	jmp    c0001c32 <put_utf+0xf7>
c0001c30:	31 c0                	xor    eax,eax
c0001c32:	5b                   	pop    ebx
c0001c33:	c3                   	ret    

c0001c34 <clst2sect>:
c0001c34:	89 c1                	mov    ecx,eax
c0001c36:	83 ea 02             	sub    edx,0x2
c0001c39:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c3c:	83 e8 02             	sub    eax,0x2
c0001c3f:	39 d0                	cmp    eax,edx
c0001c41:	76 0d                	jbe    c0001c50 <clst2sect+0x1c>
c0001c43:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c47:	f7 e2                	mul    edx
c0001c49:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c4c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c4f:	c3                   	ret    
c0001c50:	31 c0                	xor    eax,eax
c0001c52:	31 d2                	xor    edx,edx
c0001c54:	c3                   	ret    

c0001c55 <clmt_clust>:
c0001c55:	57                   	push   edi
c0001c56:	89 cf                	mov    edi,ecx
c0001c58:	56                   	push   esi
c0001c59:	89 d6                	mov    esi,edx
c0001c5b:	53                   	push   ebx
c0001c5c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c60:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c63:	89 f2                	mov    edx,esi
c0001c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c67:	c1 ef 09             	shr    edi,0x9
c0001c6a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c6e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c71:	89 f9                	mov    ecx,edi
c0001c73:	31 ff                	xor    edi,edi
c0001c75:	57                   	push   edi
c0001c76:	56                   	push   esi
c0001c77:	51                   	push   ecx
c0001c78:	52                   	push   edx
c0001c79:	e8 1e cb 01 00       	call   c001e79c <__udivdi3>
c0001c7e:	83 c4 10             	add    esp,0x10
c0001c81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c83:	85 d2                	test   edx,edx
c0001c85:	74 10                	je     c0001c97 <clmt_clust+0x42>
c0001c87:	39 d0                	cmp    eax,edx
c0001c89:	72 07                	jb     c0001c92 <clmt_clust+0x3d>
c0001c8b:	29 d0                	sub    eax,edx
c0001c8d:	83 c3 08             	add    ebx,0x8
c0001c90:	eb ef                	jmp    c0001c81 <clmt_clust+0x2c>
c0001c92:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c95:	89 c2                	mov    edx,eax
c0001c97:	5b                   	pop    ebx
c0001c98:	89 d0                	mov    eax,edx
c0001c9a:	5e                   	pop    esi
c0001c9b:	5f                   	pop    edi
c0001c9c:	c3                   	ret    

c0001c9d <pick_lfn>:
c0001c9d:	55                   	push   ebp
c0001c9e:	57                   	push   edi
c0001c9f:	56                   	push   esi
c0001ca0:	89 d6                	mov    esi,edx
c0001ca2:	53                   	push   ebx
c0001ca3:	89 c3                	mov    ebx,eax
c0001ca5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ca8:	e8 ee fc ff ff       	call   c000199b <ld_word>
c0001cad:	66 85 c0             	test   ax,ax
c0001cb0:	74 04                	je     c0001cb6 <pick_lfn+0x19>
c0001cb2:	31 c0                	xor    eax,eax
c0001cb4:	eb 5c                	jmp    c0001d12 <pick_lfn+0x75>
c0001cb6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cb9:	bd 01 00 00 00       	mov    ebp,0x1
c0001cbe:	83 e1 bf             	and    ecx,0xffffffbf
c0001cc1:	31 ff                	xor    edi,edi
c0001cc3:	49                   	dec    ecx
c0001cc4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cc7:	0f b6 87 c0 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0840]
c0001cce:	01 f0                	add    eax,esi
c0001cd0:	e8 c6 fc ff ff       	call   c000199b <ld_word>
c0001cd5:	66 85 ed             	test   bp,bp
c0001cd8:	74 11                	je     c0001ceb <pick_lfn+0x4e>
c0001cda:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce0:	77 d0                	ja     c0001cb2 <pick_lfn+0x15>
c0001ce2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ce6:	89 c5                	mov    ebp,eax
c0001ce8:	41                   	inc    ecx
c0001ce9:	eb 04                	jmp    c0001cef <pick_lfn+0x52>
c0001ceb:	66 40                	inc    ax
c0001ced:	75 c3                	jne    c0001cb2 <pick_lfn+0x15>
c0001cef:	47                   	inc    edi
c0001cf0:	83 ff 0d             	cmp    edi,0xd
c0001cf3:	75 d2                	jne    c0001cc7 <pick_lfn+0x2a>
c0001cf5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cf8:	74 13                	je     c0001d0d <pick_lfn+0x70>
c0001cfa:	66 85 ed             	test   bp,bp
c0001cfd:	74 0e                	je     c0001d0d <pick_lfn+0x70>
c0001cff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d05:	77 ab                	ja     c0001cb2 <pick_lfn+0x15>
c0001d07:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d0d:	b8 01 00 00 00       	mov    eax,0x1
c0001d12:	5b                   	pop    ebx
c0001d13:	5e                   	pop    esi
c0001d14:	5f                   	pop    edi
c0001d15:	5d                   	pop    ebp
c0001d16:	c3                   	ret    

c0001d17 <put_lfn>:
c0001d17:	55                   	push   ebp
c0001d18:	31 ed                	xor    ebp,ebp
c0001d1a:	57                   	push   edi
c0001d1b:	89 d7                	mov    edi,edx
c0001d1d:	56                   	push   esi
c0001d1e:	31 f6                	xor    esi,esi
c0001d20:	53                   	push   ebx
c0001d21:	83 ec 08             	sub    esp,0x8
c0001d24:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d27:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d2f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d35:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d38:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d3b:	31 d2                	xor    edx,edx
c0001d3d:	e8 cb fc ff ff       	call   c0001a0d <st_word>
c0001d42:	0f b6 d9             	movzx  ebx,cl
c0001d45:	4b                   	dec    ebx
c0001d46:	6b db 0d             	imul   ebx,ebx,0xd
c0001d49:	66 83 fe ff          	cmp    si,0xffff
c0001d4d:	74 08                	je     c0001d57 <put_lfn+0x40>
c0001d4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d52:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d56:	43                   	inc    ebx
c0001d57:	0f b6 85 c0 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0840]
c0001d5e:	0f b7 d6             	movzx  edx,si
c0001d61:	01 f8                	add    eax,edi
c0001d63:	e8 a5 fc ff ff       	call   c0001a0d <st_word>
c0001d68:	66 85 f6             	test   si,si
c0001d6b:	75 03                	jne    c0001d70 <put_lfn+0x59>
c0001d6d:	83 ce ff             	or     esi,0xffffffff
c0001d70:	45                   	inc    ebp
c0001d71:	83 fd 0d             	cmp    ebp,0xd
c0001d74:	75 d3                	jne    c0001d49 <put_lfn+0x32>
c0001d76:	66 46                	inc    si
c0001d78:	74 0a                	je     c0001d84 <put_lfn+0x6d>
c0001d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d7d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d82:	75 09                	jne    c0001d8d <put_lfn+0x76>
c0001d84:	88 c8                	mov    al,cl
c0001d86:	83 c8 40             	or     eax,0x40
c0001d89:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d8d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d91:	88 07                	mov    BYTE PTR [edi],al
c0001d93:	83 c4 08             	add    esp,0x8
c0001d96:	5b                   	pop    ebx
c0001d97:	5e                   	pop    esi
c0001d98:	5f                   	pop    edi
c0001d99:	5d                   	pop    ebp
c0001d9a:	c3                   	ret    

c0001d9b <gen_numname>:
c0001d9b:	57                   	push   edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	56                   	push   esi
c0001d9f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001da4:	53                   	push   ebx
c0001da5:	89 c6                	mov    esi,eax
c0001da7:	83 ec 10             	sub    esp,0x10
c0001daa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001dae:	e8 67 fc ff ff       	call   c0001a1a <mem_cpy>
c0001db3:	83 fb 05             	cmp    ebx,0x5
c0001db6:	76 2d                	jbe    c0001de5 <gen_numname+0x4a>
c0001db8:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dbb:	66 85 c0             	test   ax,ax
c0001dbe:	74 25                	je     c0001de5 <gen_numname+0x4a>
c0001dc0:	83 c7 02             	add    edi,0x2
c0001dc3:	ba 10 00 00 00       	mov    edx,0x10
c0001dc8:	01 db                	add    ebx,ebx
c0001dca:	89 c1                	mov    ecx,eax
c0001dcc:	66 d1 e8             	shr    ax,1
c0001dcf:	83 e1 01             	and    ecx,0x1
c0001dd2:	01 cb                	add    ebx,ecx
c0001dd4:	0f ba e3 10          	bt     ebx,0x10
c0001dd8:	73 06                	jae    c0001de0 <gen_numname+0x45>
c0001dda:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001de0:	4a                   	dec    edx
c0001de1:	75 e5                	jne    c0001dc8 <gen_numname+0x2d>
c0001de3:	eb d3                	jmp    c0001db8 <gen_numname+0x1d>
c0001de5:	b8 07 00 00 00       	mov    eax,0x7
c0001dea:	88 d9                	mov    cl,bl
c0001dec:	83 e1 0f             	and    ecx,0xf
c0001def:	8d 51 30             	lea    edx,[ecx+0x30]
c0001df2:	80 fa 39             	cmp    dl,0x39
c0001df5:	76 03                	jbe    c0001dfa <gen_numname+0x5f>
c0001df7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dfa:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001dfd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e01:	89 da                	mov    edx,ebx
c0001e03:	c1 ea 04             	shr    edx,0x4
c0001e06:	83 fb 0f             	cmp    ebx,0xf
c0001e09:	76 06                	jbe    c0001e11 <gen_numname+0x76>
c0001e0b:	89 c8                	mov    eax,ecx
c0001e0d:	89 d3                	mov    ebx,edx
c0001e0f:	eb d9                	jmp    c0001dea <gen_numname+0x4f>
c0001e11:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e16:	31 d2                	xor    edx,edx
c0001e18:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e1e:	39 ca                	cmp    edx,ecx
c0001e20:	73 18                	jae    c0001e3a <gen_numname+0x9f>
c0001e22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e25:	3c 20                	cmp    al,0x20
c0001e27:	74 11                	je     c0001e3a <gen_numname+0x9f>
c0001e29:	e8 41 fc ff ff       	call   c0001a6f <dbc_1st>
c0001e2e:	85 c0                	test   eax,eax
c0001e30:	74 05                	je     c0001e37 <gen_numname+0x9c>
c0001e32:	39 d3                	cmp    ebx,edx
c0001e34:	74 04                	je     c0001e3a <gen_numname+0x9f>
c0001e36:	42                   	inc    edx
c0001e37:	42                   	inc    edx
c0001e38:	eb e1                	jmp    c0001e1b <gen_numname+0x80>
c0001e3a:	b0 20                	mov    al,0x20
c0001e3c:	83 f9 07             	cmp    ecx,0x7
c0001e3f:	77 05                	ja     c0001e46 <gen_numname+0xab>
c0001e41:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e45:	41                   	inc    ecx
c0001e46:	42                   	inc    edx
c0001e47:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e4b:	83 fa 07             	cmp    edx,0x7
c0001e4e:	76 ea                	jbe    c0001e3a <gen_numname+0x9f>
c0001e50:	83 c4 10             	add    esp,0x10
c0001e53:	5b                   	pop    ebx
c0001e54:	5e                   	pop    esi
c0001e55:	5f                   	pop    edi
c0001e56:	c3                   	ret    

c0001e57 <sum_sfn>:
c0001e57:	31 c9                	xor    ecx,ecx
c0001e59:	31 d2                	xor    edx,edx
c0001e5b:	d0 ca                	ror    dl,1
c0001e5d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e60:	41                   	inc    ecx
c0001e61:	83 f9 0b             	cmp    ecx,0xb
c0001e64:	75 f5                	jne    c0001e5b <sum_sfn+0x4>
c0001e66:	88 d0                	mov    al,dl
c0001e68:	c3                   	ret    

c0001e69 <xdir_sum>:
c0001e69:	56                   	push   esi
c0001e6a:	31 c9                	xor    ecx,ecx
c0001e6c:	53                   	push   ebx
c0001e6d:	31 d2                	xor    edx,edx
c0001e6f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e73:	43                   	inc    ebx
c0001e74:	c1 e3 05             	shl    ebx,0x5
c0001e77:	83 fa 02             	cmp    edx,0x2
c0001e7a:	74 0b                	je     c0001e87 <xdir_sum+0x1e>
c0001e7c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e80:	66 d1 c9             	ror    cx,1
c0001e83:	01 f1                	add    ecx,esi
c0001e85:	eb 05                	jmp    c0001e8c <xdir_sum+0x23>
c0001e87:	ba 03 00 00 00       	mov    edx,0x3
c0001e8c:	42                   	inc    edx
c0001e8d:	39 d3                	cmp    ebx,edx
c0001e8f:	77 e6                	ja     c0001e77 <xdir_sum+0xe>
c0001e91:	89 c8                	mov    eax,ecx
c0001e93:	5b                   	pop    ebx
c0001e94:	5e                   	pop    esi
c0001e95:	c3                   	ret    

c0001e96 <xsum32>:
c0001e96:	d1 ca                	ror    edx,1
c0001e98:	0f b6 c0             	movzx  eax,al
c0001e9b:	01 d0                	add    eax,edx
c0001e9d:	c3                   	ret    

c0001e9e <get_xfileinfo>:
c0001e9e:	55                   	push   ebp
c0001e9f:	31 c9                	xor    ecx,ecx
c0001ea1:	57                   	push   edi
c0001ea2:	bd 40 00 00 00       	mov    ebp,0x40
c0001ea7:	56                   	push   esi
c0001ea8:	31 ff                	xor    edi,edi
c0001eaa:	53                   	push   ebx
c0001eab:	89 c6                	mov    esi,eax
c0001ead:	83 ec 0c             	sub    esp,0xc
c0001eb0:	89 d3                	mov    ebx,edx
c0001eb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eb9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ebd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ec0:	76 6d                	jbe    c0001f2f <get_xfileinfo+0x91>
c0001ec2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ec8:	76 0b                	jbe    c0001ed5 <get_xfileinfo+0x37>
c0001eca:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ece:	bf 01 00 00 00       	mov    edi,0x1
c0001ed3:	eb 63                	jmp    c0001f38 <get_xfileinfo+0x9a>
c0001ed5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001edb:	75 03                	jne    c0001ee0 <get_xfileinfo+0x42>
c0001edd:	83 c5 02             	add    ebp,0x2
c0001ee0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ee3:	83 c5 02             	add    ebp,0x2
c0001ee6:	e8 b0 fa ff ff       	call   c000199b <ld_word>
c0001eeb:	ff 04 24             	inc    DWORD PTR [esp]
c0001eee:	66 85 c9             	test   cx,cx
c0001ef1:	75 0d                	jne    c0001f00 <get_xfileinfo+0x62>
c0001ef3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001ef9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001efe:	76 2b                	jbe    c0001f2b <get_xfileinfo+0x8d>
c0001f00:	c1 e1 10             	shl    ecx,0x10
c0001f03:	ba ff 00 00 00       	mov    edx,0xff
c0001f08:	0f b7 c0             	movzx  eax,ax
c0001f0b:	29 fa                	sub    edx,edi
c0001f0d:	09 c8                	or     eax,ecx
c0001f0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f13:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f1b:	e8 1b fc ff ff       	call   c0001b3b <put_utf>
c0001f20:	84 c0                	test   al,al
c0001f22:	74 a6                	je     c0001eca <get_xfileinfo+0x2c>
c0001f24:	0f b6 c0             	movzx  eax,al
c0001f27:	01 c7                	add    edi,eax
c0001f29:	31 c0                	xor    eax,eax
c0001f2b:	89 c1                	mov    ecx,eax
c0001f2d:	eb 8a                	jmp    c0001eb9 <get_xfileinfo+0x1b>
c0001f2f:	85 ff                	test   edi,edi
c0001f31:	74 97                	je     c0001eca <get_xfileinfo+0x2c>
c0001f33:	66 85 c9             	test   cx,cx
c0001f36:	75 92                	jne    c0001eca <get_xfileinfo+0x2c>
c0001f38:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f3d:	31 c0                	xor    eax,eax
c0001f3f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f43:	31 d2                	xor    edx,edx
c0001f45:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f48:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f4b:	80 e1 10             	and    cl,0x10
c0001f4e:	75 08                	jne    c0001f58 <get_xfileinfo+0xba>
c0001f50:	8d 46 38             	lea    eax,[esi+0x38]
c0001f53:	e8 68 fa ff ff       	call   c00019c0 <ld_qword>
c0001f58:	89 03                	mov    DWORD PTR [ebx],eax
c0001f5a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f5d:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f60:	e8 36 fa ff ff       	call   c000199b <ld_word>
c0001f65:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f69:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f6c:	e8 2a fa ff ff       	call   c000199b <ld_word>
c0001f71:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f75:	83 c4 0c             	add    esp,0xc
c0001f78:	5b                   	pop    ebx
c0001f79:	5e                   	pop    esi
c0001f7a:	5f                   	pop    edi
c0001f7b:	5d                   	pop    ebp
c0001f7c:	c3                   	ret    

c0001f7d <get_ldnumber>:
c0001f7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7f:	85 d2                	test   edx,edx
c0001f81:	74 14                	je     c0001f97 <get_ldnumber+0x1a>
c0001f83:	56                   	push   esi
c0001f84:	53                   	push   ebx
c0001f85:	89 d3                	mov    ebx,edx
c0001f87:	43                   	inc    ebx
c0001f88:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f8b:	80 f9 1f             	cmp    cl,0x1f
c0001f8e:	76 0d                	jbe    c0001f9d <get_ldnumber+0x20>
c0001f90:	80 f9 3a             	cmp    cl,0x3a
c0001f93:	75 f2                	jne    c0001f87 <get_ldnumber+0xa>
c0001f95:	eb 0a                	jmp    c0001fa1 <get_ldnumber+0x24>
c0001f97:	83 c9 ff             	or     ecx,0xffffffff
c0001f9a:	89 c8                	mov    eax,ecx
c0001f9c:	c3                   	ret    
c0001f9d:	31 c9                	xor    ecx,ecx
c0001f9f:	eb 24                	jmp    c0001fc5 <get_ldnumber+0x48>
c0001fa1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa4:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa7:	80 f9 09             	cmp    cl,0x9
c0001faa:	77 16                	ja     c0001fc2 <get_ldnumber+0x45>
c0001fac:	83 c2 02             	add    edx,0x2
c0001faf:	83 c9 ff             	or     ecx,0xffffffff
c0001fb2:	39 d3                	cmp    ebx,edx
c0001fb4:	75 0f                	jne    c0001fc5 <get_ldnumber+0x48>
c0001fb6:	89 f2                	mov    edx,esi
c0001fb8:	89 18                	mov    DWORD PTR [eax],ebx
c0001fba:	0f be ca             	movsx  ecx,dl
c0001fbd:	83 e9 30             	sub    ecx,0x30
c0001fc0:	eb 03                	jmp    c0001fc5 <get_ldnumber+0x48>
c0001fc2:	83 c9 ff             	or     ecx,0xffffffff
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	5b                   	pop    ebx
c0001fc8:	5e                   	pop    esi
c0001fc9:	c3                   	ret    

c0001fca <crc32>:
c0001fca:	56                   	push   esi
c0001fcb:	89 d6                	mov    esi,edx
c0001fcd:	53                   	push   ebx
c0001fce:	b2 01                	mov    dl,0x1
c0001fd0:	bb 08 00 00 00       	mov    ebx,0x8
c0001fd5:	89 f1                	mov    ecx,esi
c0001fd7:	84 d1                	test   cl,dl
c0001fd9:	0f 95 c1             	setne  cl
c0001fdc:	0f b6 c9             	movzx  ecx,cl
c0001fdf:	31 c1                	xor    ecx,eax
c0001fe1:	89 c8                	mov    eax,ecx
c0001fe3:	d1 e8                	shr    eax,1
c0001fe5:	80 e1 01             	and    cl,0x1
c0001fe8:	74 05                	je     c0001fef <crc32+0x25>
c0001fea:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fef:	d1 e2                	shl    edx,1
c0001ff1:	4b                   	dec    ebx
c0001ff2:	75 e1                	jne    c0001fd5 <crc32+0xb>
c0001ff4:	5b                   	pop    ebx
c0001ff5:	5e                   	pop    esi
c0001ff6:	c3                   	ret    

c0001ff7 <test_gpt_header>:
c0001ff7:	55                   	push   ebp
c0001ff8:	b9 10 00 00 00       	mov    ecx,0x10
c0001ffd:	57                   	push   edi
c0001ffe:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0002003:	56                   	push   esi
c0002004:	31 ff                	xor    edi,edi
c0002006:	53                   	push   ebx
c0002007:	89 c3                	mov    ebx,eax
c0002009:	e8 2c fa ff ff       	call   c0001a3a <mem_cmp>
c000200e:	85 c0                	test   eax,eax
c0002010:	75 55                	jne    c0002067 <test_gpt_header+0x70>
c0002012:	89 c7                	mov    edi,eax
c0002014:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002019:	83 ce ff             	or     esi,0xffffffff
c000201c:	31 d2                	xor    edx,edx
c000201e:	83 fd 03             	cmp    ebp,0x3
c0002021:	76 05                	jbe    c0002028 <test_gpt_header+0x31>
c0002023:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002028:	89 f0                	mov    eax,esi
c000202a:	45                   	inc    ebp
c000202b:	e8 9a ff ff ff       	call   c0001fca <crc32>
c0002030:	83 fd 4c             	cmp    ebp,0x4c
c0002033:	89 c6                	mov    esi,eax
c0002035:	75 e5                	jne    c000201c <test_gpt_header+0x25>
c0002037:	8d 43 10             	lea    eax,[ebx+0x10]
c000203a:	f7 d6                	not    esi
c000203c:	e8 67 f9 ff ff       	call   c00019a8 <ld_dword>
c0002041:	39 c6                	cmp    esi,eax
c0002043:	75 22                	jne    c0002067 <test_gpt_header+0x70>
c0002045:	8d 43 54             	lea    eax,[ebx+0x54]
c0002048:	e8 5b f9 ff ff       	call   c00019a8 <ld_dword>
c000204d:	83 c0 80             	add    eax,0xffffff80
c0002050:	75 15                	jne    c0002067 <test_gpt_header+0x70>
c0002052:	8d 43 50             	lea    eax,[ebx+0x50]
c0002055:	e8 4e f9 ff ff       	call   c00019a8 <ld_dword>
c000205a:	3d 80 00 00 00       	cmp    eax,0x80
c000205f:	0f 96 c0             	setbe  al
c0002062:	0f b6 c0             	movzx  eax,al
c0002065:	89 c7                	mov    edi,eax
c0002067:	5b                   	pop    ebx
c0002068:	89 f8                	mov    eax,edi
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	5d                   	pop    ebp
c000206d:	c3                   	ret    

c000206e <make_rand>:
c000206e:	56                   	push   esi
c000206f:	85 c0                	test   eax,eax
c0002071:	53                   	push   ebx
c0002072:	75 05                	jne    c0002079 <make_rand+0xb>
c0002074:	b8 01 00 00 00       	mov    eax,0x1
c0002079:	01 d1                	add    ecx,edx
c000207b:	bb 08 00 00 00       	mov    ebx,0x8
c0002080:	89 c6                	mov    esi,eax
c0002082:	d1 e8                	shr    eax,1
c0002084:	83 e6 01             	and    esi,0x1
c0002087:	85 f6                	test   esi,esi
c0002089:	74 05                	je     c0002090 <make_rand+0x22>
c000208b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002090:	4b                   	dec    ebx
c0002091:	75 ed                	jne    c0002080 <make_rand+0x12>
c0002093:	42                   	inc    edx
c0002094:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002097:	39 ca                	cmp    edx,ecx
c0002099:	75 e0                	jne    c000207b <make_rand+0xd>
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	c3                   	ret    

c000209e <validate>:
c000209e:	56                   	push   esi
c000209f:	53                   	push   ebx
c00020a0:	89 d6                	mov    esi,edx
c00020a2:	51                   	push   ecx
c00020a3:	85 c0                	test   eax,eax
c00020a5:	75 09                	jne    c00020b0 <validate+0x12>
c00020a7:	b8 09 00 00 00       	mov    eax,0x9
c00020ac:	31 c9                	xor    ecx,ecx
c00020ae:	eb 2f                	jmp    c00020df <validate+0x41>
c00020b0:	89 c3                	mov    ebx,eax
c00020b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00020b4:	85 c0                	test   eax,eax
c00020b6:	74 ef                	je     c00020a7 <validate+0x9>
c00020b8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020bb:	74 ea                	je     c00020a7 <validate+0x9>
c00020bd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020c1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020c5:	75 e0                	jne    c00020a7 <validate+0x9>
c00020c7:	83 ec 0c             	sub    esp,0xc
c00020ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ce:	50                   	push   eax
c00020cf:	e8 76 f8 ff ff       	call   c000194a <disk_status>
c00020d4:	83 c4 10             	add    esp,0x10
c00020d7:	a8 01                	test   al,0x1
c00020d9:	75 cc                	jne    c00020a7 <validate+0x9>
c00020db:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020dd:	31 c0                	xor    eax,eax
c00020df:	89 0e                	mov    DWORD PTR [esi],ecx
c00020e1:	5a                   	pop    edx
c00020e2:	5b                   	pop    ebx
c00020e3:	5e                   	pop    esi
c00020e4:	c3                   	ret    

c00020e5 <sync_window>:
c00020e5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020e9:	0f 84 85 00 00 00    	je     c0002174 <sync_window+0x8f>
c00020ef:	55                   	push   ebp
c00020f0:	8d 68 54             	lea    ebp,[eax+0x54]
c00020f3:	57                   	push   edi
c00020f4:	56                   	push   esi
c00020f5:	53                   	push   ebx
c00020f6:	89 c3                	mov    ebx,eax
c00020f8:	83 ec 28             	sub    esp,0x28
c00020fb:	6a 01                	push   0x1
c00020fd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002100:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002103:	55                   	push   ebp
c0002104:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002108:	50                   	push   eax
c0002109:	e8 58 f8 ff ff       	call   c0001966 <disk_write>
c000210e:	83 c4 20             	add    esp,0x20
c0002111:	ba 01 00 00 00       	mov    edx,0x1
c0002116:	85 c0                	test   eax,eax
c0002118:	75 50                	jne    c000216a <sync_window+0x85>
c000211a:	31 ff                	xor    edi,edi
c000211c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000211f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002123:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002127:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000212a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000212d:	89 c6                	mov    esi,eax
c000212f:	89 d7                	mov    edi,edx
c0002131:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002134:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002138:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000213b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000213f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002143:	73 23                	jae    c0002168 <sync_window+0x83>
c0002145:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002149:	75 1d                	jne    c0002168 <sync_window+0x83>
c000214b:	83 ec 0c             	sub    esp,0xc
c000214e:	6a 01                	push   0x1
c0002150:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002154:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002158:	52                   	push   edx
c0002159:	50                   	push   eax
c000215a:	55                   	push   ebp
c000215b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000215f:	50                   	push   eax
c0002160:	e8 01 f8 ff ff       	call   c0001966 <disk_write>
c0002165:	83 c4 20             	add    esp,0x20
c0002168:	31 d2                	xor    edx,edx
c000216a:	83 c4 1c             	add    esp,0x1c
c000216d:	89 d0                	mov    eax,edx
c000216f:	5b                   	pop    ebx
c0002170:	5e                   	pop    esi
c0002171:	5f                   	pop    edi
c0002172:	5d                   	pop    ebp
c0002173:	c3                   	ret    
c0002174:	31 d2                	xor    edx,edx
c0002176:	89 d0                	mov    eax,edx
c0002178:	c3                   	ret    

c0002179 <move_window>:
c0002179:	56                   	push   esi
c000217a:	53                   	push   ebx
c000217b:	89 c3                	mov    ebx,eax
c000217d:	83 ec 14             	sub    esp,0x14
c0002180:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002183:	75 07                	jne    c000218c <move_window+0x13>
c0002185:	31 f6                	xor    esi,esi
c0002187:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000218a:	74 59                	je     c00021e5 <move_window+0x6c>
c000218c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002190:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002194:	89 d8                	mov    eax,ebx
c0002196:	e8 4a ff ff ff       	call   c00020e5 <sync_window>
c000219b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000219f:	89 c6                	mov    esi,eax
c00021a1:	85 c0                	test   eax,eax
c00021a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021a7:	75 3c                	jne    c00021e5 <move_window+0x6c>
c00021a9:	83 ec 0c             	sub    esp,0xc
c00021ac:	8d 43 54             	lea    eax,[ebx+0x54]
c00021af:	6a 01                	push   0x1
c00021b1:	51                   	push   ecx
c00021b2:	52                   	push   edx
c00021b3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021b7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021bb:	50                   	push   eax
c00021bc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c0:	50                   	push   eax
c00021c1:	e8 8a f7 ff ff       	call   c0001950 <disk_read>
c00021c6:	83 c4 20             	add    esp,0x20
c00021c9:	85 c0                	test   eax,eax
c00021cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021d3:	74 0a                	je     c00021df <move_window+0x66>
c00021d5:	83 ca ff             	or     edx,0xffffffff
c00021d8:	be 01 00 00 00       	mov    esi,0x1
c00021dd:	89 d1                	mov    ecx,edx
c00021df:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021e2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021e5:	89 f0                	mov    eax,esi
c00021e7:	83 c4 14             	add    esp,0x14
c00021ea:	5b                   	pop    ebx
c00021eb:	5e                   	pop    esi
c00021ec:	c3                   	ret    

c00021ed <check_fs>:
c00021ed:	53                   	push   ebx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	83 ec 08             	sub    esp,0x8
c00021f3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021f7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021fe:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002205:	e8 6f ff ff ff       	call   c0002179 <move_window>
c000220a:	ba 04 00 00 00       	mov    edx,0x4
c000220f:	85 c0                	test   eax,eax
c0002211:	0f 85 89 00 00 00    	jne    c00022a0 <check_fs+0xb3>
c0002217:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000221d:	e8 79 f7 ff ff       	call   c000199b <ld_word>
c0002222:	ba 03 00 00 00       	mov    edx,0x3
c0002227:	66 3d 55 aa          	cmp    ax,0xaa55
c000222b:	75 73                	jne    c00022a0 <check_fs+0xb3>
c000222d:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0002232:	8d 43 54             	lea    eax,[ebx+0x54]
c0002235:	b9 0b 00 00 00       	mov    ecx,0xb
c000223a:	e8 fb f7 ff ff       	call   c0001a3a <mem_cmp>
c000223f:	ba 01 00 00 00       	mov    edx,0x1
c0002244:	85 c0                	test   eax,eax
c0002246:	74 58                	je     c00022a0 <check_fs+0xb3>
c0002248:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000224b:	8d 50 18             	lea    edx,[eax+0x18]
c000224e:	80 fa 01             	cmp    dl,0x1
c0002251:	76 09                	jbe    c000225c <check_fs+0x6f>
c0002253:	ba 02 00 00 00       	mov    edx,0x2
c0002258:	3c eb                	cmp    al,0xeb
c000225a:	75 44                	jne    c00022a0 <check_fs+0xb3>
c000225c:	ba b8 22 02 c0       	mov    edx,0xc00222b8
c0002261:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002267:	b9 03 00 00 00       	mov    ecx,0x3
c000226c:	e8 c9 f7 ff ff       	call   c0001a3a <mem_cmp>
c0002271:	31 d2                	xor    edx,edx
c0002273:	85 c0                	test   eax,eax
c0002275:	74 29                	je     c00022a0 <check_fs+0xb3>
c0002277:	ba ec f7 01 c0       	mov    edx,0xc001f7ec
c000227c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002282:	b9 05 00 00 00       	mov    ecx,0x5
c0002287:	e8 ae f7 ff ff       	call   c0001a3a <mem_cmp>
c000228c:	31 d2                	xor    edx,edx
c000228e:	85 c0                	test   eax,eax
c0002290:	74 0e                	je     c00022a0 <check_fs+0xb3>
c0002292:	31 d2                	xor    edx,edx
c0002294:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000229b:	0f 95 c2             	setne  dl
c000229e:	01 d2                	add    edx,edx
c00022a0:	89 d0                	mov    eax,edx
c00022a2:	83 c4 08             	add    esp,0x8
c00022a5:	5b                   	pop    ebx
c00022a6:	c3                   	ret    

c00022a7 <find_volume>:
c00022a7:	55                   	push   ebp
c00022a8:	31 c9                	xor    ecx,ecx
c00022aa:	57                   	push   edi
c00022ab:	56                   	push   esi
c00022ac:	89 d6                	mov    esi,edx
c00022ae:	53                   	push   ebx
c00022af:	31 d2                	xor    edx,edx
c00022b1:	83 ec 3c             	sub    esp,0x3c
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	e8 32 ff ff ff       	call   c00021ed <check_fs>
c00022bb:	83 f8 02             	cmp    eax,0x2
c00022be:	74 0e                	je     c00022ce <find_volume+0x27>
c00022c0:	0f 87 5d 01 00 00    	ja     c0002423 <find_volume+0x17c>
c00022c6:	85 f6                	test   esi,esi
c00022c8:	0f 84 55 01 00 00    	je     c0002423 <find_volume+0x17c>
c00022ce:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022d5:	0f 85 dd 00 00 00    	jne    c00023b8 <find_volume+0x111>
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	ba 01 00 00 00       	mov    edx,0x1
c00022e2:	89 d8                	mov    eax,ebx
c00022e4:	e8 90 fe ff ff       	call   c0002179 <move_window>
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 0a                	je     c00022f7 <find_volume+0x50>
c00022ed:	b8 04 00 00 00       	mov    eax,0x4
c00022f2:	e9 2c 01 00 00       	jmp    c0002423 <find_volume+0x17c>
c00022f7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022fa:	89 e8                	mov    eax,ebp
c00022fc:	e8 f6 fc ff ff       	call   c0001ff7 <test_gpt_header>
c0002301:	85 c0                	test   eax,eax
c0002303:	75 0a                	jne    c000230f <find_volume+0x68>
c0002305:	b8 03 00 00 00       	mov    eax,0x3
c000230a:	e9 14 01 00 00       	jmp    c0002423 <find_volume+0x17c>
c000230f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002315:	e8 8e f6 ff ff       	call   c00019a8 <ld_dword>
c000231a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000231e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002324:	e8 97 f6 ff ff       	call   c00019c0 <ld_qword>
c0002329:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002335:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002339:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002341:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002345:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002349:	74 ba                	je     c0002305 <find_volume+0x5e>
c000234b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000234f:	31 c9                	xor    ecx,ecx
c0002351:	c1 e7 07             	shl    edi,0x7
c0002354:	89 d8                	mov    eax,ebx
c0002356:	89 fa                	mov    edx,edi
c0002358:	c1 ea 09             	shr    edx,0x9
c000235b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000235f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002363:	e8 11 fe ff ff       	call   c0002179 <move_window>
c0002368:	85 c0                	test   eax,eax
c000236a:	75 81                	jne    c00022ed <find_volume+0x46>
c000236c:	81 e7 80 01 00 00    	and    edi,0x180
c0002372:	b9 10 00 00 00       	mov    ecx,0x10
c0002377:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000237b:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c0002380:	e8 b5 f6 ff ff       	call   c0001a3a <mem_cmp>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 29                	jne    c00023b2 <find_volume+0x10b>
c0002389:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000238d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002391:	e8 2a f6 ff ff       	call   c00019c0 <ld_qword>
c0002396:	89 d1                	mov    ecx,edx
c0002398:	89 c2                	mov    edx,eax
c000239a:	89 d8                	mov    eax,ebx
c000239c:	e8 4c fe ff ff       	call   c00021ed <check_fs>
c00023a1:	85 f6                	test   esi,esi
c00023a3:	75 07                	jne    c00023ac <find_volume+0x105>
c00023a5:	83 f8 01             	cmp    eax,0x1
c00023a8:	77 08                	ja     c00023b2 <find_volume+0x10b>
c00023aa:	eb 77                	jmp    c0002423 <find_volume+0x17c>
c00023ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023b0:	74 71                	je     c0002423 <find_volume+0x17c>
c00023b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023b6:	eb 89                	jmp    c0002341 <find_volume+0x9a>
c00023b8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023bc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023c2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023cc:	89 cd                	mov    ebp,ecx
c00023ce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023d2:	89 f8                	mov    eax,edi
c00023d4:	83 c7 10             	add    edi,0x10
c00023d7:	e8 cc f5 ff ff       	call   c00019a8 <ld_dword>
c00023dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023e0:	89 01                	mov    DWORD PTR [ecx],eax
c00023e2:	83 c1 04             	add    ecx,0x4
c00023e5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023e9:	75 e3                	jne    c00023ce <find_volume+0x127>
c00023eb:	31 ff                	xor    edi,edi
c00023ed:	85 f6                	test   esi,esi
c00023ef:	74 03                	je     c00023f4 <find_volume+0x14d>
c00023f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00023f4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023f8:	85 d2                	test   edx,edx
c00023fa:	74 14                	je     c0002410 <find_volume+0x169>
c00023fc:	31 c9                	xor    ecx,ecx
c00023fe:	89 d8                	mov    eax,ebx
c0002400:	e8 e8 fd ff ff       	call   c00021ed <check_fs>
c0002405:	83 f8 01             	cmp    eax,0x1
c0002408:	76 19                	jbe    c0002423 <find_volume+0x17c>
c000240a:	85 f6                	test   esi,esi
c000240c:	74 0f                	je     c000241d <find_volume+0x176>
c000240e:	eb 13                	jmp    c0002423 <find_volume+0x17c>
c0002410:	85 f6                	test   esi,esi
c0002412:	0f 85 ed fe ff ff    	jne    c0002305 <find_volume+0x5e>
c0002418:	b8 03 00 00 00       	mov    eax,0x3
c000241d:	47                   	inc    edi
c000241e:	83 ff 03             	cmp    edi,0x3
c0002421:	76 d1                	jbe    c00023f4 <find_volume+0x14d>
c0002423:	83 c4 3c             	add    esp,0x3c
c0002426:	5b                   	pop    ebx
c0002427:	5e                   	pop    esi
c0002428:	5f                   	pop    edi
c0002429:	5d                   	pop    ebp
c000242a:	c3                   	ret    

c000242b <mount_volume>:
c000242b:	55                   	push   ebp
c000242c:	57                   	push   edi
c000242d:	89 cf                	mov    edi,ecx
c000242f:	56                   	push   esi
c0002430:	53                   	push   ebx
c0002431:	bb 0b 00 00 00       	mov    ebx,0xb
c0002436:	83 ec 3c             	sub    esp,0x3c
c0002439:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000243f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002443:	e8 35 fb ff ff       	call   c0001f7d <get_ldnumber>
c0002448:	85 c0                	test   eax,eax
c000244a:	0f 88 3a 05 00 00    	js     c000298a <mount_volume+0x55f>
c0002450:	8b 2c 85 40 37 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc8c0]
c0002457:	89 c6                	mov    esi,eax
c0002459:	bb 0c 00 00 00       	mov    ebx,0xc
c000245e:	85 ed                	test   ebp,ebp
c0002460:	0f 84 24 05 00 00    	je     c000298a <mount_volume+0x55f>
c0002466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246a:	83 e7 fe             	and    edi,0xfffffffe
c000246d:	89 2a                	mov    DWORD PTR [edx],ebp
c000246f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002473:	74 32                	je     c00024a7 <mount_volume+0x7c>
c0002475:	83 ec 0c             	sub    esp,0xc
c0002478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000247c:	50                   	push   eax
c000247d:	e8 c8 f4 ff ff       	call   c000194a <disk_status>
c0002482:	83 c4 10             	add    esp,0x10
c0002485:	a8 01                	test   al,0x1
c0002487:	75 1e                	jne    c00024a7 <mount_volume+0x7c>
c0002489:	31 db                	xor    ebx,ebx
c000248b:	89 f9                	mov    ecx,edi
c000248d:	84 c9                	test   cl,cl
c000248f:	0f 84 f5 04 00 00    	je     c000298a <mount_volume+0x55f>
c0002495:	a8 04                	test   al,0x4
c0002497:	0f 84 ed 04 00 00    	je     c000298a <mount_volume+0x55f>
c000249d:	bb 0a 00 00 00       	mov    ebx,0xa
c00024a2:	e9 e3 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024a7:	83 ec 0c             	sub    esp,0xc
c00024aa:	89 f0                	mov    eax,esi
c00024ac:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024b0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024b3:	0f b6 f0             	movzx  esi,al
c00024b6:	bb 03 00 00 00       	mov    ebx,0x3
c00024bb:	56                   	push   esi
c00024bc:	e8 8c f4 ff ff       	call   c000194d <disk_initialize>
c00024c1:	83 c4 10             	add    esp,0x10
c00024c4:	a8 01                	test   al,0x1
c00024c6:	0f 85 be 04 00 00    	jne    c000298a <mount_volume+0x55f>
c00024cc:	89 f9                	mov    ecx,edi
c00024ce:	84 c9                	test   cl,cl
c00024d0:	74 04                	je     c00024d6 <mount_volume+0xab>
c00024d2:	a8 04                	test   al,0x4
c00024d4:	75 c7                	jne    c000249d <mount_volume+0x72>
c00024d6:	31 d2                	xor    edx,edx
c00024d8:	89 e8                	mov    eax,ebp
c00024da:	e8 c8 fd ff ff       	call   c00022a7 <find_volume>
c00024df:	83 f8 04             	cmp    eax,0x4
c00024e2:	75 0a                	jne    c00024ee <mount_volume+0xc3>
c00024e4:	bb 01 00 00 00       	mov    ebx,0x1
c00024e9:	e9 9c 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024ee:	83 f8 01             	cmp    eax,0x1
c00024f1:	76 0a                	jbe    c00024fd <mount_volume+0xd2>
c00024f3:	bb 0d 00 00 00       	mov    ebx,0xd
c00024f8:	e9 8d 04 00 00       	jmp    c000298a <mount_volume+0x55f>
c00024fd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002500:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002503:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000250b:	75 17                	jne    c0002524 <mount_volume+0xf9>
c000250d:	b8 0b 00 00 00       	mov    eax,0xb
c0002512:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002517:	75 da                	jne    c00024f3 <mount_volume+0xc8>
c0002519:	40                   	inc    eax
c000251a:	83 f8 40             	cmp    eax,0x40
c000251d:	75 f3                	jne    c0002512 <mount_volume+0xe7>
c000251f:	e9 5a 02 00 00       	jmp    c000277e <mount_volume+0x353>
c0002524:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002527:	e8 6f f4 ff ff       	call   c000199b <ld_word>
c000252c:	66 3d 00 02          	cmp    ax,0x200
c0002530:	75 c1                	jne    c00024f3 <mount_volume+0xc8>
c0002532:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002535:	e8 61 f4 ff ff       	call   c000199b <ld_word>
c000253a:	0f b7 c0             	movzx  eax,ax
c000253d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002541:	85 c0                	test   eax,eax
c0002543:	75 0c                	jne    c0002551 <mount_volume+0x126>
c0002545:	8d 45 78             	lea    eax,[ebp+0x78]
c0002548:	e8 5b f4 ff ff       	call   c00019a8 <ld_dword>
c000254d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002555:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002558:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000255b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000255f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002562:	48                   	dec    eax
c0002563:	3c 01                	cmp    al,0x1
c0002565:	77 8c                	ja     c00024f3 <mount_volume+0xc8>
c0002567:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000256b:	89 c3                	mov    ebx,eax
c000256d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002571:	66 85 c0             	test   ax,ax
c0002574:	0f 84 79 ff ff ff    	je     c00024f3 <mount_volume+0xc8>
c000257a:	8d 40 ff             	lea    eax,[eax-0x1]
c000257d:	85 d8                	test   eax,ebx
c000257f:	0f 85 6e ff ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002585:	8d 45 65             	lea    eax,[ebp+0x65]
c0002588:	e8 0e f4 ff ff       	call   c000199b <ld_word>
c000258d:	89 c7                	mov    edi,eax
c000258f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002593:	a8 0f                	test   al,0xf
c0002595:	0f 85 58 ff ff ff    	jne    c00024f3 <mount_volume+0xc8>
c000259b:	8d 45 67             	lea    eax,[ebp+0x67]
c000259e:	e8 f8 f3 ff ff       	call   c000199b <ld_word>
c00025a3:	0f b7 f0             	movzx  esi,ax
c00025a6:	85 f6                	test   esi,esi
c00025a8:	75 0a                	jne    c00025b4 <mount_volume+0x189>
c00025aa:	8d 45 74             	lea    eax,[ebp+0x74]
c00025ad:	e8 f6 f3 ff ff       	call   c00019a8 <ld_dword>
c00025b2:	89 c6                	mov    esi,eax
c00025b4:	8d 45 62             	lea    eax,[ebp+0x62]
c00025b7:	e8 df f3 ff ff       	call   c000199b <ld_word>
c00025bc:	66 85 c0             	test   ax,ax
c00025bf:	0f 84 2e ff ff ff    	je     c00024f3 <mount_volume+0xc8>
c00025c5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ca:	0f b7 c8             	movzx  ecx,ax
c00025cd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025d6:	89 fa                	mov    edx,edi
c00025d8:	66 c1 ea 04          	shr    dx,0x4
c00025dc:	0f b7 d2             	movzx  edx,dx
c00025df:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025e3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ea:	39 c6                	cmp    esi,eax
c00025ec:	0f 82 01 ff ff ff    	jb     c00024f3 <mount_volume+0xc8>
c00025f2:	29 c6                	sub    esi,eax
c00025f4:	31 d2                	xor    edx,edx
c00025f6:	89 f0                	mov    eax,esi
c00025f8:	f7 f3                	div    ebx
c00025fa:	39 de                	cmp    esi,ebx
c00025fc:	0f 82 f1 fe ff ff    	jb     c00024f3 <mount_volume+0xc8>
c0002602:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002607:	0f 87 e6 fe ff ff    	ja     c00024f3 <mount_volume+0xc8>
c000260d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002612:	0f 86 63 03 00 00    	jbe    c000297b <mount_volume+0x550>
c0002618:	bb 03 00 00 00       	mov    ebx,0x3
c000261d:	8d 70 02             	lea    esi,[eax+0x2]
c0002620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002628:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000262b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000262e:	31 d2                	xor    edx,edx
c0002630:	89 c8                	mov    eax,ecx
c0002632:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002645:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002648:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000264b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000264f:	31 d2                	xor    edx,edx
c0002651:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002655:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002659:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000265c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000265f:	83 fb 03             	cmp    ebx,0x3
c0002662:	75 2b                	jne    c000268f <mount_volume+0x264>
c0002664:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002667:	e8 2f f3 ff ff       	call   c000199b <ld_word>
c000266c:	66 09 c7             	or     di,ax
c000266f:	0f 85 7e fe ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002675:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000267b:	c1 e6 02             	shl    esi,0x2
c000267e:	e8 25 f3 ff ff       	call   c00019a8 <ld_dword>
c0002683:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	eb 30                	jmp    c00026bf <mount_volume+0x294>
c000268f:	66 85 ff             	test   di,di
c0002692:	0f 84 5b fe ff ff    	je     c00024f3 <mount_volume+0xc8>
c0002698:	31 d2                	xor    edx,edx
c000269a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000269e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00026a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00026a6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026a9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00026ac:	83 fb 02             	cmp    ebx,0x2
c00026af:	75 04                	jne    c00026b5 <mount_volume+0x28a>
c00026b1:	01 f6                	add    esi,esi
c00026b3:	eb 0a                	jmp    c00026bf <mount_volume+0x294>
c00026b5:	8d 04 76             	lea    eax,[esi+esi*2]
c00026b8:	83 e6 01             	and    esi,0x1
c00026bb:	d1 e8                	shr    eax,1
c00026bd:	01 c6                	add    esi,eax
c00026bf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026c5:	c1 ee 09             	shr    esi,0x9
c00026c8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026cc:	0f 87 21 fe ff ff    	ja     c00024f3 <mount_volume+0xc8>
c00026d2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026d9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026e0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026e4:	83 fb 03             	cmp    ebx,0x3
c00026e7:	75 7a                	jne    c0002763 <mount_volume+0x338>
c00026e9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026ef:	e8 a7 f2 ff ff       	call   c000199b <ld_word>
c00026f4:	66 48                	dec    ax
c00026f6:	75 6b                	jne    c0002763 <mount_volume+0x338>
c00026f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	83 c2 01             	add    edx,0x1
c0002703:	89 e8                	mov    eax,ebp
c0002705:	83 d1 00             	adc    ecx,0x0
c0002708:	e8 6c fa ff ff       	call   c0002179 <move_window>
c000270d:	85 c0                	test   eax,eax
c000270f:	75 52                	jne    c0002763 <mount_volume+0x338>
c0002711:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002715:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000271b:	e8 7b f2 ff ff       	call   c000199b <ld_word>
c0002720:	66 3d 55 aa          	cmp    ax,0xaa55
c0002724:	75 3d                	jne    c0002763 <mount_volume+0x338>
c0002726:	8d 45 54             	lea    eax,[ebp+0x54]
c0002729:	e8 7a f2 ff ff       	call   c00019a8 <ld_dword>
c000272e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002733:	75 2e                	jne    c0002763 <mount_volume+0x338>
c0002735:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000273b:	e8 68 f2 ff ff       	call   c00019a8 <ld_dword>
c0002740:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002745:	75 1c                	jne    c0002763 <mount_volume+0x338>
c0002747:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000274d:	e8 56 f2 ff ff       	call   c00019a8 <ld_dword>
c0002752:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002755:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000275b:	e8 48 f2 ff ff       	call   c00019a8 <ld_dword>
c0002760:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002763:	66 a1 20 37 02 c0    	mov    ax,ds:0xc0023720
c0002769:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000276c:	40                   	inc    eax
c000276d:	31 db                	xor    ebx,ebx
c000276f:	66 a3 20 37 02 c0    	mov    ds:0xc0023720,ax
c0002775:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002779:	e9 0c 02 00 00       	jmp    c000298a <mount_volume+0x55f>
c000277e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002784:	e8 12 f2 ff ff       	call   c000199b <ld_word>
c0002789:	66 3d 00 01          	cmp    ax,0x100
c000278d:	0f 85 60 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c0002793:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000279a:	0f 85 53 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c00027a0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c00027a6:	e8 15 f2 ff ff       	call   c00019c0 <ld_qword>
c00027ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027b3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027b9:	e8 ea f1 ff ff       	call   c00019a8 <ld_dword>
c00027be:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027c1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ca:	fe c8                	dec    al
c00027cc:	0f 85 21 fd ff ff    	jne    c00024f3 <mount_volume+0xc8>
c00027d2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027d9:	bb 01 00 00 00       	mov    ebx,0x1
c00027de:	d3 e3                	shl    ebx,cl
c00027e0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027e4:	66 85 db             	test   bx,bx
c00027e7:	0f 84 06 fd ff ff    	je     c00024f3 <mount_volume+0xc8>
c00027ed:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027f3:	e8 b0 f1 ff ff       	call   c00019a8 <ld_dword>
c00027f8:	89 c6                	mov    esi,eax
c00027fa:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027ff:	0f 87 ee fc ff ff    	ja     c00024f3 <mount_volume+0xc8>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	8d 40 02             	lea    eax,[eax+0x2]
c000280c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000280f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002816:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002819:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c000281f:	e8 84 f1 ff ff       	call   c00019a8 <ld_dword>
c0002824:	31 d2                	xor    edx,edx
c0002826:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000282a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000282e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002832:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002836:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002839:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000283c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002842:	e8 61 f1 ff ff       	call   c00019a8 <ld_dword>
c0002847:	31 d2                	xor    edx,edx
c0002849:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000284d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002851:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002855:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002858:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000285b:	0f b7 c3             	movzx  eax,bx
c000285e:	31 d2                	xor    edx,edx
c0002860:	0f af f0             	imul   esi,eax
c0002863:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002867:	89 f0                	mov    eax,esi
c0002869:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000286d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002871:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002875:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002879:	39 c1                	cmp    ecx,eax
c000287b:	89 df                	mov    edi,ebx
c000287d:	19 d7                	sbb    edi,edx
c000287f:	0f 82 6e fc ff ff    	jb     c00024f3 <mount_volume+0xc8>
c0002885:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000288b:	31 db                	xor    ebx,ebx
c000288d:	e8 16 f1 ff ff       	call   c00019a8 <ld_dword>
c0002892:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002899:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000289c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00028a4:	85 db                	test   ebx,ebx
c00028a6:	75 39                	jne    c00028e1 <mount_volume+0x4b6>
c00028a8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028ac:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028b0:	0f 86 3d fc ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c00028b6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028b9:	31 ff                	xor    edi,edi
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	e8 72 f3 ff ff       	call   c0001c34 <clst2sect>
c00028c2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028c6:	01 c6                	add    esi,eax
c00028c8:	89 e8                	mov    eax,ebp
c00028ca:	11 d7                	adc    edi,edx
c00028cc:	89 f2                	mov    edx,esi
c00028ce:	89 f9                	mov    ecx,edi
c00028d0:	e8 a4 f8 ff ff       	call   c0002179 <move_window>
c00028d5:	85 c0                	test   eax,eax
c00028d7:	0f 85 07 fc ff ff    	jne    c00024e4 <mount_volume+0xb9>
c00028dd:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028e1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028e6:	74 0b                	je     c00028f3 <mount_volume+0x4c8>
c00028e8:	83 c3 20             	add    ebx,0x20
c00028eb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028f1:	eb b1                	jmp    c00028a4 <mount_volume+0x479>
c00028f3:	8d 75 54             	lea    esi,[ebp+0x54]
c00028f6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028fa:	e8 a9 f0 ff ff       	call   c00019a8 <ld_dword>
c00028ff:	89 c3                	mov    ebx,eax
c0002901:	83 f8 01             	cmp    eax,0x1
c0002904:	0f 86 e9 fb ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c000290a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000290d:	0f 86 e0 fb ff ff    	jbe    c00024f3 <mount_volume+0xc8>
c0002913:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002916:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000291a:	0f af c2             	imul   eax,edx
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002922:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002925:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002928:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000292b:	31 c9                	xor    ecx,ecx
c000292d:	89 da                	mov    edx,ebx
c000292f:	89 e8                	mov    eax,ebp
c0002931:	c1 ea 07             	shr    edx,0x7
c0002934:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002937:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000293a:	e8 3a f8 ff ff       	call   c0002179 <move_window>
c000293f:	85 c0                	test   eax,eax
c0002941:	0f 85 9d fb ff ff    	jne    c00024e4 <mount_volume+0xb9>
c0002947:	89 d8                	mov    eax,ebx
c0002949:	83 e0 7f             	and    eax,0x7f
c000294c:	8d 04 86             	lea    eax,[esi+eax*4]
c000294f:	e8 54 f0 ff ff       	call   c00019a8 <ld_dword>
c0002954:	83 f8 ff             	cmp    eax,0xffffffff
c0002957:	74 0a                	je     c0002963 <mount_volume+0x538>
c0002959:	43                   	inc    ebx
c000295a:	39 d8                	cmp    eax,ebx
c000295c:	74 cd                	je     c000292b <mount_volume+0x500>
c000295e:	e9 90 fb ff ff       	jmp    c00024f3 <mount_volume+0xc8>
c0002963:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000296a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002971:	bb 04 00 00 00       	mov    ebx,0x4
c0002976:	e9 e8 fd ff ff       	jmp    c0002763 <mount_volume+0x338>
c000297b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002980:	19 db                	sbb    ebx,ebx
c0002982:	83 c3 02             	add    ebx,0x2
c0002985:	e9 93 fc ff ff       	jmp    c000261d <mount_volume+0x1f2>
c000298a:	83 c4 3c             	add    esp,0x3c
c000298d:	89 d8                	mov    eax,ebx
c000298f:	5b                   	pop    ebx
c0002990:	5e                   	pop    esi
c0002991:	5f                   	pop    edi
c0002992:	5d                   	pop    ebp
c0002993:	c3                   	ret    

c0002994 <find_bitmap>:
c0002994:	55                   	push   ebp
c0002995:	57                   	push   edi
c0002996:	89 c7                	mov    edi,eax
c0002998:	56                   	push   esi
c0002999:	8d 72 fe             	lea    esi,[edx-0x2]
c000299c:	53                   	push   ebx
c000299d:	83 ec 1c             	sub    esp,0x1c
c00029a0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00029a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029a7:	83 e8 02             	sub    eax,0x2
c00029aa:	39 f0                	cmp    eax,esi
c00029ac:	77 02                	ja     c00029b0 <find_bitmap+0x1c>
c00029ae:	31 f6                	xor    esi,esi
c00029b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029b4:	89 f3                	mov    ebx,esi
c00029b6:	31 ed                	xor    ebp,ebp
c00029b8:	31 c9                	xor    ecx,ecx
c00029ba:	89 da                	mov    edx,ebx
c00029bc:	89 f8                	mov    eax,edi
c00029be:	c1 ea 0c             	shr    edx,0xc
c00029c1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029c4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029c7:	e8 ad f7 ff ff       	call   c0002179 <move_window>
c00029cc:	85 c0                	test   eax,eax
c00029ce:	75 68                	jne    c0002a38 <find_bitmap+0xa4>
c00029d0:	89 da                	mov    edx,ebx
c00029d2:	89 d9                	mov    ecx,ebx
c00029d4:	c1 ea 03             	shr    edx,0x3
c00029d7:	83 e1 07             	and    ecx,0x7
c00029da:	b8 01 00 00 00       	mov    eax,0x1
c00029df:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029e5:	d3 e0                	shl    eax,cl
c00029e7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ea:	83 e9 02             	sub    ecx,0x2
c00029ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029f1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029f5:	43                   	inc    ebx
c00029f6:	21 c1                	and    ecx,eax
c00029f8:	d1 e0                	shl    eax,1
c00029fa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029fe:	77 09                	ja     c0002a09 <find_bitmap+0x75>
c0002a00:	31 db                	xor    ebx,ebx
c0002a02:	ba 00 02 00 00       	mov    edx,0x200
c0002a07:	31 c0                	xor    eax,eax
c0002a09:	84 c9                	test   cl,cl
c0002a0b:	75 10                	jne    c0002a1d <find_bitmap+0x89>
c0002a0d:	45                   	inc    ebp
c0002a0e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a12:	75 0f                	jne    c0002a23 <find_bitmap+0x8f>
c0002a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a18:	83 c0 02             	add    eax,0x2
c0002a1b:	eb 22                	jmp    c0002a3f <find_bitmap+0xab>
c0002a1d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a21:	31 ed                	xor    ebp,ebp
c0002a23:	39 de                	cmp    esi,ebx
c0002a25:	74 16                	je     c0002a3d <find_bitmap+0xa9>
c0002a27:	84 c0                	test   al,al
c0002a29:	75 c6                	jne    c00029f1 <find_bitmap+0x5d>
c0002a2b:	42                   	inc    edx
c0002a2c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a32:	77 84                	ja     c00029b8 <find_bitmap+0x24>
c0002a34:	b0 01                	mov    al,0x1
c0002a36:	eb b9                	jmp    c00029f1 <find_bitmap+0x5d>
c0002a38:	83 c8 ff             	or     eax,0xffffffff
c0002a3b:	eb 02                	jmp    c0002a3f <find_bitmap+0xab>
c0002a3d:	31 c0                	xor    eax,eax
c0002a3f:	83 c4 1c             	add    esp,0x1c
c0002a42:	5b                   	pop    ebx
c0002a43:	5e                   	pop    esi
c0002a44:	5f                   	pop    edi
c0002a45:	5d                   	pop    ebp
c0002a46:	c3                   	ret    

c0002a47 <change_bitmap>:
c0002a47:	55                   	push   ebp
c0002a48:	89 cd                	mov    ebp,ecx
c0002a4a:	57                   	push   edi
c0002a4b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a4e:	56                   	push   esi
c0002a4f:	89 c7                	mov    edi,eax
c0002a51:	53                   	push   ebx
c0002a52:	89 c8                	mov    eax,ecx
c0002a54:	83 ec 1c             	sub    esp,0x1c
c0002a57:	31 d2                	xor    edx,edx
c0002a59:	89 ce                	mov    esi,ecx
c0002a5b:	c1 e8 0c             	shr    eax,0xc
c0002a5e:	bb 01 00 00 00       	mov    ebx,0x1
c0002a63:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a66:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a69:	c1 ee 03             	shr    esi,0x3
c0002a6c:	83 e1 07             	and    ecx,0x7
c0002a6f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a75:	d3 e3                	shl    ebx,cl
c0002a77:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a7b:	89 c1                	mov    ecx,eax
c0002a7d:	89 d3                	mov    ebx,edx
c0002a7f:	83 c1 01             	add    ecx,0x1
c0002a82:	83 d3 00             	adc    ebx,0x0
c0002a85:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a8d:	89 d1                	mov    ecx,edx
c0002a8f:	89 c2                	mov    edx,eax
c0002a91:	89 f8                	mov    eax,edi
c0002a93:	e8 e1 f6 ff ff       	call   c0002179 <move_window>
c0002a98:	89 c1                	mov    ecx,eax
c0002a9a:	85 c0                	test   eax,eax
c0002a9c:	75 48                	jne    c0002ae6 <change_bitmap+0x9f>
c0002a9e:	31 d2                	xor    edx,edx
c0002aa0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002aa4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002aa8:	0f 95 c2             	setne  dl
c0002aab:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aaf:	74 3c                	je     c0002aed <change_bitmap+0xa6>
c0002ab1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002ab5:	4d                   	dec    ebp
c0002ab6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aba:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002abe:	74 32                	je     c0002af2 <change_bitmap+0xab>
c0002ac0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ac4:	75 d8                	jne    c0002a9e <change_bitmap+0x57>
c0002ac6:	8d 46 01             	lea    eax,[esi+0x1]
c0002ac9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ace:	89 c3                	mov    ebx,eax
c0002ad0:	31 f6                	xor    esi,esi
c0002ad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ada:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ae0:	74 99                	je     c0002a7b <change_bitmap+0x34>
c0002ae2:	89 de                	mov    esi,ebx
c0002ae4:	eb b8                	jmp    c0002a9e <change_bitmap+0x57>
c0002ae6:	b9 01 00 00 00       	mov    ecx,0x1
c0002aeb:	eb 05                	jmp    c0002af2 <change_bitmap+0xab>
c0002aed:	b9 02 00 00 00       	mov    ecx,0x2
c0002af2:	83 c4 1c             	add    esp,0x1c
c0002af5:	89 c8                	mov    eax,ecx
c0002af7:	5b                   	pop    ebx
c0002af8:	5e                   	pop    esi
c0002af9:	5f                   	pop    edi
c0002afa:	5d                   	pop    ebp
c0002afb:	c3                   	ret    

c0002afc <put_fat>:
c0002afc:	83 fa 01             	cmp    edx,0x1
c0002aff:	0f 86 7b 01 00 00    	jbe    c0002c80 <put_fat+0x184>
c0002b05:	55                   	push   ebp
c0002b06:	57                   	push   edi
c0002b07:	89 cf                	mov    edi,ecx
c0002b09:	56                   	push   esi
c0002b0a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b0f:	53                   	push   ebx
c0002b10:	89 c6                	mov    esi,eax
c0002b12:	83 ec 1c             	sub    esp,0x1c
c0002b15:	89 d3                	mov    ebx,edx
c0002b17:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b1a:	0f 86 68 01 00 00    	jbe    c0002c88 <put_fat+0x18c>
c0002b20:	8a 00                	mov    al,BYTE PTR [eax]
c0002b22:	3c 02                	cmp    al,0x2
c0002b24:	0f 84 c7 00 00 00    	je     c0002bf1 <put_fat+0xf5>
c0002b2a:	77 09                	ja     c0002b35 <put_fat+0x39>
c0002b2c:	fe c8                	dec    al
c0002b2e:	74 17                	je     c0002b47 <put_fat+0x4b>
c0002b30:	e9 53 01 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002b35:	b9 02 00 00 00       	mov    ecx,0x2
c0002b3a:	3c 04                	cmp    al,0x4
c0002b3c:	0f 86 e1 00 00 00    	jbe    c0002c23 <put_fat+0x127>
c0002b42:	e9 41 01 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002b47:	89 d5                	mov    ebp,edx
c0002b49:	31 c9                	xor    ecx,ecx
c0002b4b:	d1 ed                	shr    ebp,1
c0002b4d:	89 f0                	mov    eax,esi
c0002b4f:	01 d5                	add    ebp,edx
c0002b51:	89 ea                	mov    edx,ebp
c0002b53:	c1 ea 09             	shr    edx,0x9
c0002b56:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b59:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b5c:	e8 18 f6 ff ff       	call   c0002179 <move_window>
c0002b61:	89 c1                	mov    ecx,eax
c0002b63:	85 c0                	test   eax,eax
c0002b65:	0f 85 1d 01 00 00    	jne    c0002c88 <put_fat+0x18c>
c0002b6b:	8d 46 54             	lea    eax,[esi+0x54]
c0002b6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b72:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b7f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b83:	89 f8                	mov    eax,edi
c0002b85:	83 e3 01             	and    ebx,0x1
c0002b88:	74 0d                	je     c0002b97 <put_fat+0x9b>
c0002b8a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b8d:	89 fa                	mov    edx,edi
c0002b8f:	83 e0 0f             	and    eax,0xf
c0002b92:	c1 e2 04             	shl    edx,0x4
c0002b95:	09 d0                	or     eax,edx
c0002b97:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b9e:	31 c9                	xor    ecx,ecx
c0002ba0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ba4:	c1 ea 09             	shr    edx,0x9
c0002ba7:	89 f0                	mov    eax,esi
c0002ba9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bac:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002baf:	e8 c5 f5 ff ff       	call   c0002179 <move_window>
c0002bb4:	89 c1                	mov    ecx,eax
c0002bb6:	85 c0                	test   eax,eax
c0002bb8:	0f 85 ca 00 00 00    	jne    c0002c88 <put_fat+0x18c>
c0002bbe:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bc2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bc8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bcc:	85 db                	test   ebx,ebx
c0002bce:	74 07                	je     c0002bd7 <put_fat+0xdb>
c0002bd0:	c1 ef 04             	shr    edi,0x4
c0002bd3:	89 fa                	mov    edx,edi
c0002bd5:	eb 0e                	jmp    c0002be5 <put_fat+0xe9>
c0002bd7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bda:	c1 ef 08             	shr    edi,0x8
c0002bdd:	83 e2 f0             	and    edx,0xfffffff0
c0002be0:	83 e7 0f             	and    edi,0xf
c0002be3:	09 fa                	or     edx,edi
c0002be5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002be8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bec:	e9 97 00 00 00       	jmp    c0002c88 <put_fat+0x18c>
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	c1 ea 08             	shr    edx,0x8
c0002bf6:	89 f0                	mov    eax,esi
c0002bf8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bfe:	e8 76 f5 ff ff       	call   c0002179 <move_window>
c0002c03:	89 c1                	mov    ecx,eax
c0002c05:	85 c0                	test   eax,eax
c0002c07:	75 7f                	jne    c0002c88 <put_fat+0x18c>
c0002c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0d:	01 db                	add    ebx,ebx
c0002c0f:	0f b7 d7             	movzx  edx,di
c0002c12:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c18:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c1c:	e8 ec ed ff ff       	call   c0001a0d <st_word>
c0002c21:	eb 53                	jmp    c0002c76 <put_fat+0x17a>
c0002c23:	31 c9                	xor    ecx,ecx
c0002c25:	c1 ea 07             	shr    edx,0x7
c0002c28:	89 f0                	mov    eax,esi
c0002c2a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c2d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c30:	e8 44 f5 ff ff       	call   c0002179 <move_window>
c0002c35:	89 c1                	mov    ecx,eax
c0002c37:	85 c0                	test   eax,eax
c0002c39:	75 4d                	jne    c0002c88 <put_fat+0x18c>
c0002c3b:	c1 e3 02             	shl    ebx,0x2
c0002c3e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c44:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c47:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c4b:	74 1c                	je     c0002c69 <put_fat+0x16d>
c0002c4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c51:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	e8 4a ed ff ff       	call   c00019a8 <ld_dword>
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c67:	09 c7                	or     edi,eax
c0002c69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c6d:	89 fa                	mov    edx,edi
c0002c6f:	89 d8                	mov    eax,ebx
c0002c71:	e8 9b ed ff ff       	call   c0001a11 <st_dword>
c0002c76:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c7e:	eb 08                	jmp    c0002c88 <put_fat+0x18c>
c0002c80:	b9 02 00 00 00       	mov    ecx,0x2
c0002c85:	89 c8                	mov    eax,ecx
c0002c87:	c3                   	ret    
c0002c88:	83 c4 1c             	add    esp,0x1c
c0002c8b:	89 c8                	mov    eax,ecx
c0002c8d:	5b                   	pop    ebx
c0002c8e:	5e                   	pop    esi
c0002c8f:	5f                   	pop    edi
c0002c90:	5d                   	pop    ebp
c0002c91:	c3                   	ret    

c0002c92 <fill_last_frag>:
c0002c92:	57                   	push   edi
c0002c93:	89 cf                	mov    edi,ecx
c0002c95:	56                   	push   esi
c0002c96:	89 d6                	mov    esi,edx
c0002c98:	53                   	push   ebx
c0002c99:	89 c3                	mov    ebx,eax
c0002c9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	74 21                	je     c0002cc3 <fill_last_frag+0x31>
c0002ca2:	89 f9                	mov    ecx,edi
c0002ca4:	83 f8 01             	cmp    eax,0x1
c0002ca7:	76 05                	jbe    c0002cae <fill_last_frag+0x1c>
c0002ca9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002cac:	29 c1                	sub    ecx,eax
c0002cae:	8d 56 01             	lea    edx,[esi+0x1]
c0002cb1:	29 c2                	sub    edx,eax
c0002cb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cb5:	e8 42 fe ff ff       	call   c0002afc <put_fat>
c0002cba:	85 c0                	test   eax,eax
c0002cbc:	75 05                	jne    c0002cc3 <fill_last_frag+0x31>
c0002cbe:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cc1:	eb d8                	jmp    c0002c9b <fill_last_frag+0x9>
c0002cc3:	5b                   	pop    ebx
c0002cc4:	5e                   	pop    esi
c0002cc5:	5f                   	pop    edi
c0002cc6:	c3                   	ret    

c0002cc7 <fill_first_frag>:
c0002cc7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002ccb:	75 2d                	jne    c0002cfa <fill_first_frag+0x33>
c0002ccd:	57                   	push   edi
c0002cce:	56                   	push   esi
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c3                	mov    ebx,eax
c0002cd2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cd5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cd8:	01 d7                	add    edi,edx
c0002cda:	39 fa                	cmp    edx,edi
c0002cdc:	74 14                	je     c0002cf2 <fill_first_frag+0x2b>
c0002cde:	8d 72 01             	lea    esi,[edx+0x1]
c0002ce1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ce3:	89 f1                	mov    ecx,esi
c0002ce5:	e8 12 fe ff ff       	call   c0002afc <put_fat>
c0002cea:	89 f2                	mov    edx,esi
c0002cec:	85 c0                	test   eax,eax
c0002cee:	74 ea                	je     c0002cda <fill_first_frag+0x13>
c0002cf0:	eb 0b                	jmp    c0002cfd <fill_first_frag+0x36>
c0002cf2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	eb 03                	jmp    c0002cfd <fill_first_frag+0x36>
c0002cfa:	31 c0                	xor    eax,eax
c0002cfc:	c3                   	ret    
c0002cfd:	5b                   	pop    ebx
c0002cfe:	5e                   	pop    esi
c0002cff:	5f                   	pop    edi
c0002d00:	c3                   	ret    

c0002d01 <get_fat>:
c0002d01:	83 fa 01             	cmp    edx,0x1
c0002d04:	0f 86 db 01 00 00    	jbe    c0002ee5 <get_fat+0x1e4>
c0002d0a:	55                   	push   ebp
c0002d0b:	b9 01 00 00 00       	mov    ecx,0x1
c0002d10:	57                   	push   edi
c0002d11:	56                   	push   esi
c0002d12:	53                   	push   ebx
c0002d13:	83 ec 1c             	sub    esp,0x1c
c0002d16:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d18:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d1b:	0f 86 cc 01 00 00    	jbe    c0002eed <get_fat+0x1ec>
c0002d21:	89 c3                	mov    ebx,eax
c0002d23:	89 d6                	mov    esi,edx
c0002d25:	8a 07                	mov    al,BYTE PTR [edi]
c0002d27:	3c 02                	cmp    al,0x2
c0002d29:	0f 84 99 00 00 00    	je     c0002dc8 <get_fat+0xc7>
c0002d2f:	77 09                	ja     c0002d3a <get_fat+0x39>
c0002d31:	fe c8                	dec    al
c0002d33:	74 1a                	je     c0002d4f <get_fat+0x4e>
c0002d35:	e9 b3 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d3a:	3c 03                	cmp    al,0x3
c0002d3c:	0f 84 b5 00 00 00    	je     c0002df7 <get_fat+0xf6>
c0002d42:	3c 04                	cmp    al,0x4
c0002d44:	0f 84 e3 00 00 00    	je     c0002e2d <get_fat+0x12c>
c0002d4a:	e9 9e 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d4f:	89 d3                	mov    ebx,edx
c0002d51:	31 c9                	xor    ecx,ecx
c0002d53:	d1 eb                	shr    ebx,1
c0002d55:	89 f8                	mov    eax,edi
c0002d57:	01 d3                	add    ebx,edx
c0002d59:	89 da                	mov    edx,ebx
c0002d5b:	c1 ea 09             	shr    edx,0x9
c0002d5e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d61:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d64:	e8 10 f4 ff ff       	call   c0002179 <move_window>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	74 08                	je     c0002d75 <get_fat+0x74>
c0002d6d:	83 c9 ff             	or     ecx,0xffffffff
c0002d70:	e9 78 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002d75:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d78:	31 c9                	xor    ecx,ecx
c0002d7a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d80:	89 ea                	mov    edx,ebp
c0002d82:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d86:	c1 ea 09             	shr    edx,0x9
c0002d89:	89 f8                	mov    eax,edi
c0002d8b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d8e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d91:	e8 e3 f3 ff ff       	call   c0002179 <move_window>
c0002d96:	85 c0                	test   eax,eax
c0002d98:	75 d3                	jne    c0002d6d <get_fat+0x6c>
c0002d9a:	0f b6 c3             	movzx  eax,bl
c0002d9d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002da3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002da8:	c1 e3 08             	shl    ebx,0x8
c0002dab:	09 c3                	or     ebx,eax
c0002dad:	89 d9                	mov    ecx,ebx
c0002daf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002db5:	83 e6 01             	and    esi,0x1
c0002db8:	0f 84 2f 01 00 00    	je     c0002eed <get_fat+0x1ec>
c0002dbe:	89 d9                	mov    ecx,ebx
c0002dc0:	c1 e9 04             	shr    ecx,0x4
c0002dc3:	e9 25 01 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002dc8:	31 c9                	xor    ecx,ecx
c0002dca:	c1 ea 08             	shr    edx,0x8
c0002dcd:	89 f8                	mov    eax,edi
c0002dcf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dd5:	e8 9f f3 ff ff       	call   c0002179 <move_window>
c0002dda:	85 c0                	test   eax,eax
c0002ddc:	75 8f                	jne    c0002d6d <get_fat+0x6c>
c0002dde:	01 f6                	add    esi,esi
c0002de0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002de6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dea:	e8 ac eb ff ff       	call   c000199b <ld_word>
c0002def:	0f b7 c8             	movzx  ecx,ax
c0002df2:	e9 f6 00 00 00       	jmp    c0002eed <get_fat+0x1ec>
c0002df7:	31 c9                	xor    ecx,ecx
c0002df9:	c1 ea 07             	shr    edx,0x7
c0002dfc:	89 f8                	mov    eax,edi
c0002dfe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e01:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e04:	e8 70 f3 ff ff       	call   c0002179 <move_window>
c0002e09:	85 c0                	test   eax,eax
c0002e0b:	0f 85 5c ff ff ff    	jne    c0002d6d <get_fat+0x6c>
c0002e11:	c1 e6 02             	shl    esi,0x2
c0002e14:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e1a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e1e:	e8 85 eb ff ff       	call   c00019a8 <ld_dword>
c0002e23:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e28:	e9 b4 00 00 00       	jmp    c0002ee1 <get_fat+0x1e0>
c0002e2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e33:	89 d1                	mov    ecx,edx
c0002e35:	09 c1                	or     ecx,eax
c0002e37:	74 06                	je     c0002e3f <get_fat+0x13e>
c0002e39:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e3d:	75 0f                	jne    c0002e4e <get_fat+0x14d>
c0002e3f:	b9 01 00 00 00       	mov    ecx,0x1
c0002e44:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e48:	0f 85 9f 00 00 00    	jne    c0002eed <get_fat+0x1ec>
c0002e4e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e52:	89 f5                	mov    ebp,esi
c0002e54:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e59:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e5c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e5f:	80 f9 02             	cmp    cl,0x2
c0002e62:	75 35                	jne    c0002e99 <get_fat+0x198>
c0002e64:	83 c0 ff             	add    eax,0xffffffff
c0002e67:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e6c:	83 d2 ff             	adc    edx,0xffffffff
c0002e6f:	31 db                	xor    ebx,ebx
c0002e71:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e75:	53                   	push   ebx
c0002e76:	c1 ea 09             	shr    edx,0x9
c0002e79:	51                   	push   ecx
c0002e7a:	52                   	push   edx
c0002e7b:	50                   	push   eax
c0002e7c:	e8 1b b9 01 00       	call   c001e79c <__udivdi3>
c0002e81:	83 c4 10             	add    esp,0x10
c0002e84:	b9 01 00 00 00       	mov    ecx,0x1
c0002e89:	39 c5                	cmp    ebp,eax
c0002e8b:	77 60                	ja     c0002eed <get_fat+0x1ec>
c0002e8d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e92:	74 59                	je     c0002eed <get_fat+0x1ec>
c0002e94:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e97:	eb 54                	jmp    c0002eed <get_fat+0x1ec>
c0002e99:	80 f9 03             	cmp    cl,0x3
c0002e9c:	75 05                	jne    c0002ea3 <get_fat+0x1a2>
c0002e9e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002ea1:	77 f1                	ja     c0002e94 <get_fat+0x193>
c0002ea3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002ea8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002eac:	75 3f                	jne    c0002eed <get_fat+0x1ec>
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	89 f2                	mov    edx,esi
c0002eb2:	89 f8                	mov    eax,edi
c0002eb4:	c1 ea 07             	shr    edx,0x7
c0002eb7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eba:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ebd:	e8 b7 f2 ff ff       	call   c0002179 <move_window>
c0002ec2:	85 c0                	test   eax,eax
c0002ec4:	0f 85 a3 fe ff ff    	jne    c0002d6d <get_fat+0x6c>
c0002eca:	c1 e6 02             	shl    esi,0x2
c0002ecd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed7:	e8 cc ea ff ff       	call   c00019a8 <ld_dword>
c0002edc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ee1:	89 c1                	mov    ecx,eax
c0002ee3:	eb 08                	jmp    c0002eed <get_fat+0x1ec>
c0002ee5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eea:	89 c8                	mov    eax,ecx
c0002eec:	c3                   	ret    
c0002eed:	83 c4 1c             	add    esp,0x1c
c0002ef0:	89 c8                	mov    eax,ecx
c0002ef2:	5b                   	pop    ebx
c0002ef3:	5e                   	pop    esi
c0002ef4:	5f                   	pop    edi
c0002ef5:	5d                   	pop    ebp
c0002ef6:	c3                   	ret    

c0002ef7 <dir_sdi>:
c0002ef7:	55                   	push   ebp
c0002ef8:	57                   	push   edi
c0002ef9:	56                   	push   esi
c0002efa:	53                   	push   ebx
c0002efb:	89 c3                	mov    ebx,eax
c0002efd:	83 ec 1c             	sub    esp,0x1c
c0002f00:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f02:	31 c0                	xor    eax,eax
c0002f04:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f07:	0f 94 c0             	sete   al
c0002f0a:	48                   	dec    eax
c0002f0b:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f10:	05 00 00 00 10       	add    eax,0x10000000
c0002f15:	39 d0                	cmp    eax,edx
c0002f17:	77 0a                	ja     c0002f23 <dir_sdi+0x2c>
c0002f19:	b8 02 00 00 00       	mov    eax,0x2
c0002f1e:	e9 c4 00 00 00       	jmp    c0002fe7 <dir_sdi+0xf0>
c0002f23:	89 d6                	mov    esi,edx
c0002f25:	f6 c2 1f             	test   dl,0x1f
c0002f28:	75 ef                	jne    c0002f19 <dir_sdi+0x22>
c0002f2a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f2d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f30:	85 c9                	test   ecx,ecx
c0002f32:	75 2d                	jne    c0002f61 <dir_sdi+0x6a>
c0002f34:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f37:	77 1b                	ja     c0002f54 <dir_sdi+0x5d>
c0002f39:	89 f2                	mov    edx,esi
c0002f3b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f3f:	c1 ea 05             	shr    edx,0x5
c0002f42:	39 c2                	cmp    edx,eax
c0002f44:	73 d3                	jae    c0002f19 <dir_sdi+0x22>
c0002f46:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f49:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f4f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f52:	eb 4b                	jmp    c0002f9f <dir_sdi+0xa8>
c0002f54:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f57:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f5b:	85 c0                	test   eax,eax
c0002f5d:	74 da                	je     c0002f39 <dir_sdi+0x42>
c0002f5f:	89 c1                	mov    ecx,eax
c0002f61:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f65:	c1 e5 09             	shl    ebp,0x9
c0002f68:	89 ca                	mov    edx,ecx
c0002f6a:	39 ee                	cmp    esi,ebp
c0002f6c:	72 1c                	jb     c0002f8a <dir_sdi+0x93>
c0002f6e:	89 d8                	mov    eax,ebx
c0002f70:	e8 8c fd ff ff       	call   c0002d01 <get_fat>
c0002f75:	89 c1                	mov    ecx,eax
c0002f77:	83 f8 ff             	cmp    eax,0xffffffff
c0002f7a:	74 66                	je     c0002fe2 <dir_sdi+0xeb>
c0002f7c:	83 f8 01             	cmp    eax,0x1
c0002f7f:	76 98                	jbe    c0002f19 <dir_sdi+0x22>
c0002f81:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f84:	76 93                	jbe    c0002f19 <dir_sdi+0x22>
c0002f86:	29 ee                	sub    esi,ebp
c0002f88:	eb de                	jmp    c0002f68 <dir_sdi+0x71>
c0002f8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f8e:	89 f8                	mov    eax,edi
c0002f90:	e8 9f ec ff ff       	call   c0001c34 <clst2sect>
c0002f95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f99:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f9c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f9f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002fa2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002fa5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002fa8:	89 d1                	mov    ecx,edx
c0002faa:	09 c1                	or     ecx,eax
c0002fac:	0f 84 67 ff ff ff    	je     c0002f19 <dir_sdi+0x22>
c0002fb2:	89 f1                	mov    ecx,esi
c0002fb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fbc:	c1 e9 09             	shr    ecx,0x9
c0002fbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fc3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fc7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fcb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fce:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fd4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fd7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fdb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fde:	31 c0                	xor    eax,eax
c0002fe0:	eb 05                	jmp    c0002fe7 <dir_sdi+0xf0>
c0002fe2:	b8 01 00 00 00       	mov    eax,0x1
c0002fe7:	83 c4 1c             	add    esp,0x1c
c0002fea:	5b                   	pop    ebx
c0002feb:	5e                   	pop    esi
c0002fec:	5f                   	pop    edi
c0002fed:	5d                   	pop    ebp
c0002fee:	c3                   	ret    

c0002fef <create_chain>:
c0002fef:	55                   	push   ebp
c0002ff0:	89 c5                	mov    ebp,eax
c0002ff2:	57                   	push   edi
c0002ff3:	56                   	push   esi
c0002ff4:	53                   	push   ebx
c0002ff5:	83 ec 1c             	sub    esp,0x1c
c0002ff8:	85 d2                	test   edx,edx
c0002ffa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ffe:	8b 30                	mov    esi,DWORD PTR [eax]
c0003000:	75 0e                	jne    c0003010 <create_chain+0x21>
c0003002:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003005:	85 ff                	test   edi,edi
c0003007:	74 39                	je     c0003042 <create_chain+0x53>
c0003009:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000300c:	77 39                	ja     c0003047 <create_chain+0x58>
c000300e:	eb 32                	jmp    c0003042 <create_chain+0x53>
c0003010:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003014:	e8 e8 fc ff ff       	call   c0002d01 <get_fat>
c0003019:	89 c3                	mov    ebx,eax
c000301b:	83 f8 01             	cmp    eax,0x1
c000301e:	77 0a                	ja     c000302a <create_chain+0x3b>
c0003020:	bb 01 00 00 00       	mov    ebx,0x1
c0003025:	e9 ba 01 00 00       	jmp    c00031e4 <create_chain+0x1f5>
c000302a:	83 f8 ff             	cmp    eax,0xffffffff
c000302d:	0f 84 62 01 00 00    	je     c0003195 <create_chain+0x1a6>
c0003033:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003036:	0f 87 a8 01 00 00    	ja     c00031e4 <create_chain+0x1f5>
c000303c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003040:	eb 05                	jmp    c0003047 <create_chain+0x58>
c0003042:	bf 01 00 00 00       	mov    edi,0x1
c0003047:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000304b:	75 07                	jne    c0003054 <create_chain+0x65>
c000304d:	31 db                	xor    ebx,ebx
c000304f:	e9 90 01 00 00       	jmp    c00031e4 <create_chain+0x1f5>
c0003054:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003057:	75 74                	jne    c00030cd <create_chain+0xde>
c0003059:	b9 01 00 00 00       	mov    ecx,0x1
c000305e:	89 fa                	mov    edx,edi
c0003060:	89 f0                	mov    eax,esi
c0003062:	e8 2d f9 ff ff       	call   c0002994 <find_bitmap>
c0003067:	89 c3                	mov    ebx,eax
c0003069:	8d 40 ff             	lea    eax,[eax-0x1]
c000306c:	83 f8 fd             	cmp    eax,0xfffffffd
c000306f:	0f 87 6f 01 00 00    	ja     c00031e4 <create_chain+0x1f5>
c0003075:	83 ec 0c             	sub    esp,0xc
c0003078:	b9 01 00 00 00       	mov    ecx,0x1
c000307d:	6a 01                	push   0x1
c000307f:	89 da                	mov    edx,ebx
c0003081:	89 f0                	mov    eax,esi
c0003083:	e8 bf f9 ff ff       	call   c0002a47 <change_bitmap>
c0003088:	83 c4 10             	add    esp,0x10
c000308b:	83 f8 02             	cmp    eax,0x2
c000308e:	74 90                	je     c0003020 <create_chain+0x31>
c0003090:	83 f8 01             	cmp    eax,0x1
c0003093:	0f 84 fc 00 00 00    	je     c0003195 <create_chain+0x1a6>
c0003099:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000309e:	75 09                	jne    c00030a9 <create_chain+0xba>
c00030a0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00030a4:	e9 0c 01 00 00       	jmp    c00031b5 <create_chain+0x1c6>
c00030a9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030ad:	0f 85 e7 00 00 00    	jne    c000319a <create_chain+0x1ab>
c00030b3:	8d 57 01             	lea    edx,[edi+0x1]
c00030b6:	39 da                	cmp    edx,ebx
c00030b8:	0f 84 f7 00 00 00    	je     c00031b5 <create_chain+0x1c6>
c00030be:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030c1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030c5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030c8:	e9 cd 00 00 00       	jmp    c000319a <create_chain+0x1ab>
c00030cd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030d1:	75 41                	jne    c0003114 <create_chain+0x125>
c00030d3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030d6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030d9:	77 05                	ja     c00030e0 <create_chain+0xf1>
c00030db:	bb 02 00 00 00       	mov    ebx,0x2
c00030e0:	89 da                	mov    edx,ebx
c00030e2:	89 e8                	mov    eax,ebp
c00030e4:	e8 18 fc ff ff       	call   c0002d01 <get_fat>
c00030e9:	83 f8 01             	cmp    eax,0x1
c00030ec:	0f 84 2e ff ff ff    	je     c0003020 <create_chain+0x31>
c00030f2:	83 f8 ff             	cmp    eax,0xffffffff
c00030f5:	0f 84 9a 00 00 00    	je     c0003195 <create_chain+0x1a6>
c00030fb:	85 c0                	test   eax,eax
c00030fd:	74 11                	je     c0003110 <create_chain+0x121>
c00030ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003102:	83 f8 01             	cmp    eax,0x1
c0003105:	76 0d                	jbe    c0003114 <create_chain+0x125>
c0003107:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000310a:	76 08                	jbe    c0003114 <create_chain+0x125>
c000310c:	89 c7                	mov    edi,eax
c000310e:	eb 04                	jmp    c0003114 <create_chain+0x125>
c0003110:	85 db                	test   ebx,ebx
c0003112:	75 38                	jne    c000314c <create_chain+0x15d>
c0003114:	89 fb                	mov    ebx,edi
c0003116:	43                   	inc    ebx
c0003117:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000311a:	77 0e                	ja     c000312a <create_chain+0x13b>
c000311c:	83 ff 01             	cmp    edi,0x1
c000311f:	0f 86 28 ff ff ff    	jbe    c000304d <create_chain+0x5e>
c0003125:	bb 02 00 00 00       	mov    ebx,0x2
c000312a:	89 da                	mov    edx,ebx
c000312c:	89 e8                	mov    eax,ebp
c000312e:	e8 ce fb ff ff       	call   c0002d01 <get_fat>
c0003133:	85 c0                	test   eax,eax
c0003135:	74 15                	je     c000314c <create_chain+0x15d>
c0003137:	83 f8 01             	cmp    eax,0x1
c000313a:	0f 84 e0 fe ff ff    	je     c0003020 <create_chain+0x31>
c0003140:	40                   	inc    eax
c0003141:	74 52                	je     c0003195 <create_chain+0x1a6>
c0003143:	39 fb                	cmp    ebx,edi
c0003145:	75 cf                	jne    c0003116 <create_chain+0x127>
c0003147:	e9 01 ff ff ff       	jmp    c000304d <create_chain+0x5e>
c000314c:	83 c9 ff             	or     ecx,0xffffffff
c000314f:	89 da                	mov    edx,ebx
c0003151:	89 f0                	mov    eax,esi
c0003153:	e8 a4 f9 ff ff       	call   c0002afc <put_fat>
c0003158:	85 c0                	test   eax,eax
c000315a:	75 32                	jne    c000318e <create_chain+0x19f>
c000315c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003161:	74 11                	je     c0003174 <create_chain+0x185>
c0003163:	89 d9                	mov    ecx,ebx
c0003165:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003169:	89 f0                	mov    eax,esi
c000316b:	e8 8c f9 ff ff       	call   c0002afc <put_fat>
c0003170:	85 c0                	test   eax,eax
c0003172:	75 1a                	jne    c000318e <create_chain+0x19f>
c0003174:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003177:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000317a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000317d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003180:	39 d0                	cmp    eax,edx
c0003182:	77 04                	ja     c0003188 <create_chain+0x199>
c0003184:	48                   	dec    eax
c0003185:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003188:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000318c:	eb 56                	jmp    c00031e4 <create_chain+0x1f5>
c000318e:	48                   	dec    eax
c000318f:	0f 85 8b fe ff ff    	jne    c0003020 <create_chain+0x31>
c0003195:	83 cb ff             	or     ebx,0xffffffff
c0003198:	eb 4a                	jmp    c00031e4 <create_chain+0x1f5>
c000319a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000319e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00031a1:	41                   	inc    ecx
c00031a2:	39 d9                	cmp    ecx,ebx
c00031a4:	75 19                	jne    c00031bf <create_chain+0x1d0>
c00031a6:	b9 02 00 00 00       	mov    ecx,0x2
c00031ab:	85 d2                	test   edx,edx
c00031ad:	74 03                	je     c00031b2 <create_chain+0x1c3>
c00031af:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031b2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031b5:	85 c0                	test   eax,eax
c00031b7:	0f 85 63 fe ff ff    	jne    c0003020 <create_chain+0x31>
c00031bd:	eb b5                	jmp    c0003174 <create_chain+0x185>
c00031bf:	85 d2                	test   edx,edx
c00031c1:	75 07                	jne    c00031ca <create_chain+0x1db>
c00031c3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d0:	89 e8                	mov    eax,ebp
c00031d2:	e8 bb fa ff ff       	call   c0002c92 <fill_last_frag>
c00031d7:	85 c0                	test   eax,eax
c00031d9:	75 b3                	jne    c000318e <create_chain+0x19f>
c00031db:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031e2:	eb 90                	jmp    c0003174 <create_chain+0x185>
c00031e4:	83 c4 1c             	add    esp,0x1c
c00031e7:	89 d8                	mov    eax,ebx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	5f                   	pop    edi
c00031ec:	5d                   	pop    ebp
c00031ed:	c3                   	ret    

c00031ee <remove_chain>:
c00031ee:	55                   	push   ebp
c00031ef:	57                   	push   edi
c00031f0:	56                   	push   esi
c00031f1:	53                   	push   ebx
c00031f2:	83 ec 1c             	sub    esp,0x1c
c00031f5:	83 fa 01             	cmp    edx,0x1
c00031f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031fe:	77 0a                	ja     c000320a <remove_chain+0x1c>
c0003200:	b8 02 00 00 00       	mov    eax,0x2
c0003205:	e9 24 01 00 00       	jmp    c000332e <remove_chain+0x140>
c000320a:	89 d6                	mov    esi,edx
c000320c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000320f:	76 ef                	jbe    c0003200 <remove_chain+0x12>
c0003211:	89 c7                	mov    edi,eax
c0003213:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003218:	75 06                	jne    c0003220 <remove_chain+0x32>
c000321a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000321e:	eb 54                	jmp    c0003274 <remove_chain+0x86>
c0003220:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003223:	75 06                	jne    c000322b <remove_chain+0x3d>
c0003225:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003229:	74 ef                	je     c000321a <remove_chain+0x2c>
c000322b:	83 c9 ff             	or     ecx,0xffffffff
c000322e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003232:	89 d8                	mov    eax,ebx
c0003234:	e8 c3 f8 ff ff       	call   c0002afc <put_fat>
c0003239:	85 c0                	test   eax,eax
c000323b:	74 dd                	je     c000321a <remove_chain+0x2c>
c000323d:	e9 ec 00 00 00       	jmp    c000332e <remove_chain+0x140>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	74 b9                	je     c0003200 <remove_chain+0x12>
c0003247:	83 f8 ff             	cmp    eax,0xffffffff
c000324a:	74 6d                	je     c00032b9 <remove_chain+0xcb>
c000324c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000324f:	75 6f                	jne    c00032c0 <remove_chain+0xd2>
c0003251:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003254:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003257:	8d 51 fe             	lea    edx,[ecx-0x2]
c000325a:	39 d0                	cmp    eax,edx
c000325c:	73 08                	jae    c0003266 <remove_chain+0x78>
c000325e:	40                   	inc    eax
c000325f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003263:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003266:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003269:	39 e9                	cmp    ecx,ebp
c000326b:	75 64                	jne    c00032d1 <remove_chain+0xe3>
c000326d:	89 ee                	mov    esi,ebp
c000326f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003272:	76 0f                	jbe    c0003283 <remove_chain+0x95>
c0003274:	89 f2                	mov    edx,esi
c0003276:	89 f8                	mov    eax,edi
c0003278:	e8 84 fa ff ff       	call   c0002d01 <get_fat>
c000327d:	89 c5                	mov    ebp,eax
c000327f:	85 c0                	test   eax,eax
c0003281:	75 bf                	jne    c0003242 <remove_chain+0x54>
c0003283:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003286:	0f 85 a0 00 00 00    	jne    c000332c <remove_chain+0x13e>
c000328c:	eb 6c                	jmp    c00032fa <remove_chain+0x10c>
c000328e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003291:	84 c0                	test   al,al
c0003293:	75 7d                	jne    c0003312 <remove_chain+0x124>
c0003295:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003298:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000329c:	0f 84 86 00 00 00    	je     c0003328 <remove_chain+0x13a>
c00032a2:	89 da                	mov    edx,ebx
c00032a4:	89 f8                	mov    eax,edi
c00032a6:	e8 56 fa ff ff       	call   c0002d01 <get_fat>
c00032ab:	83 f8 01             	cmp    eax,0x1
c00032ae:	0f 86 4c ff ff ff    	jbe    c0003200 <remove_chain+0x12>
c00032b4:	83 f8 ff             	cmp    eax,0xffffffff
c00032b7:	75 4e                	jne    c0003307 <remove_chain+0x119>
c00032b9:	b8 01 00 00 00       	mov    eax,0x1
c00032be:	eb 6e                	jmp    c000332e <remove_chain+0x140>
c00032c0:	31 c9                	xor    ecx,ecx
c00032c2:	89 f2                	mov    edx,esi
c00032c4:	89 d8                	mov    eax,ebx
c00032c6:	e8 31 f8 ff ff       	call   c0002afc <put_fat>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 82                	je     c0003251 <remove_chain+0x63>
c00032cf:	eb 5d                	jmp    c000332e <remove_chain+0x140>
c00032d1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d4:	75 1b                	jne    c00032f1 <remove_chain+0x103>
c00032d6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032da:	89 d8                	mov    eax,ebx
c00032dc:	83 ec 0c             	sub    esp,0xc
c00032df:	6a 00                	push   0x0
c00032e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032e5:	e8 5d f7 ff ff       	call   c0002a47 <change_bitmap>
c00032ea:	83 c4 10             	add    esp,0x10
c00032ed:	85 c0                	test   eax,eax
c00032ef:	75 3d                	jne    c000332e <remove_chain+0x140>
c00032f1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032f5:	e9 73 ff ff ff       	jmp    c000326d <remove_chain+0x7f>
c00032fa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ff:	75 8d                	jne    c000328e <remove_chain+0xa0>
c0003301:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003305:	eb 25                	jmp    c000332c <remove_chain+0x13e>
c0003307:	8d 53 01             	lea    edx,[ebx+0x1]
c000330a:	89 c3                	mov    ebx,eax
c000330c:	39 c2                	cmp    edx,eax
c000330e:	74 88                	je     c0003298 <remove_chain+0xaa>
c0003310:	eb 1a                	jmp    c000332c <remove_chain+0x13e>
c0003312:	3c 03                	cmp    al,0x3
c0003314:	75 16                	jne    c000332c <remove_chain+0x13e>
c0003316:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003319:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000331d:	77 0d                	ja     c000332c <remove_chain+0x13e>
c000331f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003322:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003326:	72 04                	jb     c000332c <remove_chain+0x13e>
c0003328:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000332c:	31 c0                	xor    eax,eax
c000332e:	83 c4 1c             	add    esp,0x1c
c0003331:	5b                   	pop    ebx
c0003332:	5e                   	pop    esi
c0003333:	5f                   	pop    edi
c0003334:	5d                   	pop    ebp
c0003335:	c3                   	ret    

c0003336 <dir_clear>:
c0003336:	55                   	push   ebp
c0003337:	57                   	push   edi
c0003338:	56                   	push   esi
c0003339:	89 c6                	mov    esi,eax
c000333b:	53                   	push   ebx
c000333c:	83 ec 1c             	sub    esp,0x1c
c000333f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003343:	e8 9d ed ff ff       	call   c00020e5 <sync_window>
c0003348:	85 c0                	test   eax,eax
c000334a:	0f 85 de 00 00 00    	jne    c000342e <dir_clear+0xf8>
c0003350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003354:	89 f0                	mov    eax,esi
c0003356:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003359:	e8 d6 e8 ff ff       	call   c0001c34 <clst2sect>
c000335e:	b9 00 02 00 00       	mov    ecx,0x200
c0003363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003367:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000336b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000336e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003371:	89 e8                	mov    eax,ebp
c0003373:	31 d2                	xor    edx,edx
c0003375:	e8 b5 e6 ff ff       	call   c0001a2f <mem_set>
c000337a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000337e:	c1 e3 09             	shl    ebx,0x9
c0003381:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003387:	76 1f                	jbe    c00033a8 <dir_clear+0x72>
c0003389:	bb 00 80 00 00       	mov    ebx,0x8000
c000338e:	eb 18                	jmp    c00033a8 <dir_clear+0x72>
c0003390:	83 ec 0c             	sub    esp,0xc
c0003393:	53                   	push   ebx
c0003394:	e8 35 4e 00 00       	call   c00081ce <ff_memalloc>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	89 c7                	mov    edi,eax
c000339e:	85 c0                	test   eax,eax
c00033a0:	0f 85 8f 00 00 00    	jne    c0003435 <dir_clear+0xff>
c00033a6:	d1 eb                	shr    ebx,1
c00033a8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033ae:	77 e0                	ja     c0003390 <dir_clear+0x5a>
c00033b0:	31 db                	xor    ebx,ebx
c00033b2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033b6:	39 d8                	cmp    eax,ebx
c00033b8:	76 66                	jbe    c0003420 <dir_clear+0xea>
c00033ba:	83 ec 0c             	sub    esp,0xc
c00033bd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033c1:	6a 01                	push   0x1
c00033c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033cb:	55                   	push   ebp
c00033cc:	50                   	push   eax
c00033cd:	e8 94 e5 ff ff       	call   c0001966 <disk_write>
c00033d2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033d7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033dc:	83 c4 20             	add    esp,0x20
c00033df:	85 c0                	test   eax,eax
c00033e1:	75 3d                	jne    c0003420 <dir_clear+0xea>
c00033e3:	43                   	inc    ebx
c00033e4:	eb cc                	jmp    c00033b2 <dir_clear+0x7c>
c00033e6:	83 ec 0c             	sub    esp,0xc
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	55                   	push   ebp
c00033ec:	89 d8                	mov    eax,ebx
c00033ee:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033f2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033f6:	52                   	push   edx
c00033f7:	50                   	push   eax
c00033f8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033fc:	57                   	push   edi
c00033fd:	50                   	push   eax
c00033fe:	e8 63 e5 ff ff       	call   c0001966 <disk_write>
c0003403:	83 c4 20             	add    esp,0x20
c0003406:	85 c0                	test   eax,eax
c0003408:	75 0a                	jne    c0003414 <dir_clear+0xde>
c000340a:	01 eb                	add    ebx,ebp
c000340c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003410:	39 d8                	cmp    eax,ebx
c0003412:	77 d2                	ja     c00033e6 <dir_clear+0xb0>
c0003414:	83 ec 0c             	sub    esp,0xc
c0003417:	57                   	push   edi
c0003418:	e8 c7 4d 00 00       	call   c00081e4 <ff_memfree>
c000341d:	83 c4 10             	add    esp,0x10
c0003420:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003424:	39 d8                	cmp    eax,ebx
c0003426:	0f 95 c0             	setne  al
c0003429:	0f b6 c0             	movzx  eax,al
c000342c:	eb 19                	jmp    c0003447 <dir_clear+0x111>
c000342e:	b8 01 00 00 00       	mov    eax,0x1
c0003433:	eb 12                	jmp    c0003447 <dir_clear+0x111>
c0003435:	89 d9                	mov    ecx,ebx
c0003437:	31 d2                	xor    edx,edx
c0003439:	c1 eb 09             	shr    ebx,0x9
c000343c:	e8 ee e5 ff ff       	call   c0001a2f <mem_set>
c0003441:	89 dd                	mov    ebp,ebx
c0003443:	31 db                	xor    ebx,ebx
c0003445:	eb c5                	jmp    c000340c <dir_clear+0xd6>
c0003447:	83 c4 1c             	add    esp,0x1c
c000344a:	5b                   	pop    ebx
c000344b:	5e                   	pop    esi
c000344c:	5f                   	pop    edi
c000344d:	5d                   	pop    ebp
c000344e:	c3                   	ret    

c000344f <dir_next>:
c000344f:	55                   	push   ebp
c0003450:	57                   	push   edi
c0003451:	56                   	push   esi
c0003452:	53                   	push   ebx
c0003453:	89 c3                	mov    ebx,eax
c0003455:	83 ec 1c             	sub    esp,0x1c
c0003458:	8b 28                	mov    ebp,DWORD PTR [eax]
c000345a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000345e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003461:	8d 78 20             	lea    edi,[eax+0x20]
c0003464:	31 c0                	xor    eax,eax
c0003466:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000346a:	0f 94 c0             	sete   al
c000346d:	48                   	dec    eax
c000346e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003473:	05 00 00 00 10       	add    eax,0x10000000
c0003478:	39 f8                	cmp    eax,edi
c000347a:	77 0e                	ja     c000348a <dir_next+0x3b>
c000347c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003483:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000348a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000348d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003490:	b8 04 00 00 00       	mov    eax,0x4
c0003495:	89 ce                	mov    esi,ecx
c0003497:	09 d6                	or     esi,edx
c0003499:	0f 84 da 00 00 00    	je     c0003579 <dir_next+0x12a>
c000349f:	89 f8                	mov    eax,edi
c00034a1:	25 ff 01 00 00       	and    eax,0x1ff
c00034a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034aa:	0f 85 b9 00 00 00    	jne    c0003569 <dir_next+0x11a>
c00034b0:	83 c2 01             	add    edx,0x1
c00034b3:	83 d1 00             	adc    ecx,0x0
c00034b6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034b9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034bf:	85 d2                	test   edx,edx
c00034c1:	75 29                	jne    c00034ec <dir_next+0x9d>
c00034c3:	89 fa                	mov    edx,edi
c00034c5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034c9:	c1 ea 05             	shr    edx,0x5
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	0f 82 95 00 00 00    	jb     c0003569 <dir_next+0x11a>
c00034d4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034db:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034e2:	b8 04 00 00 00       	mov    eax,0x4
c00034e7:	e9 8d 00 00 00       	jmp    c0003579 <dir_next+0x12a>
c00034ec:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034f0:	89 f9                	mov    ecx,edi
c00034f2:	48                   	dec    eax
c00034f3:	c1 e9 09             	shr    ecx,0x9
c00034f6:	85 c8                	test   eax,ecx
c00034f8:	75 6f                	jne    c0003569 <dir_next+0x11a>
c00034fa:	89 d8                	mov    eax,ebx
c00034fc:	e8 00 f8 ff ff       	call   c0002d01 <get_fat>
c0003501:	89 c6                	mov    esi,eax
c0003503:	83 f8 01             	cmp    eax,0x1
c0003506:	77 07                	ja     c000350f <dir_next+0xc0>
c0003508:	b8 02 00 00 00       	mov    eax,0x2
c000350d:	eb 6a                	jmp    c0003579 <dir_next+0x12a>
c000350f:	83 f8 ff             	cmp    eax,0xffffffff
c0003512:	75 07                	jne    c000351b <dir_next+0xcc>
c0003514:	b8 01 00 00 00       	mov    eax,0x1
c0003519:	eb 5e                	jmp    c0003579 <dir_next+0x12a>
c000351b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000351e:	77 37                	ja     c0003557 <dir_next+0x108>
c0003520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003525:	74 ad                	je     c00034d4 <dir_next+0x85>
c0003527:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000352a:	89 d8                	mov    eax,ebx
c000352c:	e8 be fa ff ff       	call   c0002fef <create_chain>
c0003531:	89 c6                	mov    esi,eax
c0003533:	b8 07 00 00 00       	mov    eax,0x7
c0003538:	85 f6                	test   esi,esi
c000353a:	74 3d                	je     c0003579 <dir_next+0x12a>
c000353c:	83 fe 01             	cmp    esi,0x1
c000353f:	74 c7                	je     c0003508 <dir_next+0xb9>
c0003541:	83 fe ff             	cmp    esi,0xffffffff
c0003544:	74 ce                	je     c0003514 <dir_next+0xc5>
c0003546:	89 f2                	mov    edx,esi
c0003548:	89 e8                	mov    eax,ebp
c000354a:	e8 e7 fd ff ff       	call   c0003336 <dir_clear>
c000354f:	85 c0                	test   eax,eax
c0003551:	75 c1                	jne    c0003514 <dir_next+0xc5>
c0003553:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003557:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000355a:	89 f2                	mov    edx,esi
c000355c:	89 e8                	mov    eax,ebp
c000355e:	e8 d1 e6 ff ff       	call   c0001c34 <clst2sect>
c0003563:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003566:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000356d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003570:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003574:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003577:	31 c0                	xor    eax,eax
c0003579:	83 c4 1c             	add    esp,0x1c
c000357c:	5b                   	pop    ebx
c000357d:	5e                   	pop    esi
c000357e:	5f                   	pop    edi
c000357f:	5d                   	pop    ebp
c0003580:	c3                   	ret    

c0003581 <load_xdir>:
c0003581:	55                   	push   ebp
c0003582:	57                   	push   edi
c0003583:	56                   	push   esi
c0003584:	89 c6                	mov    esi,eax
c0003586:	53                   	push   ebx
c0003587:	83 ec 1c             	sub    esp,0x1c
c000358a:	8b 00                	mov    eax,DWORD PTR [eax]
c000358c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000358f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003592:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003595:	e8 df eb ff ff       	call   c0002179 <move_window>
c000359a:	89 c3                	mov    ebx,eax
c000359c:	85 c0                	test   eax,eax
c000359e:	0f 85 0c 01 00 00    	jne    c00036b0 <load_xdir+0x12f>
c00035a4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035a7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00035aa:	0f 85 fb 00 00 00    	jne    c00036ab <load_xdir+0x12a>
c00035b0:	89 f8                	mov    eax,edi
c00035b2:	b9 20 00 00 00       	mov    ecx,0x20
c00035b7:	e8 5e e4 ff ff       	call   c0001a1a <mem_cpy>
c00035bc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035c0:	40                   	inc    eax
c00035c1:	c1 e0 05             	shl    eax,0x5
c00035c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035c8:	83 e8 60             	sub    eax,0x60
c00035cb:	3d 00 02 00 00       	cmp    eax,0x200
c00035d0:	0f 87 d5 00 00 00    	ja     c00036ab <load_xdir+0x12a>
c00035d6:	31 d2                	xor    edx,edx
c00035d8:	89 f0                	mov    eax,esi
c00035da:	e8 70 fe ff ff       	call   c000344f <dir_next>
c00035df:	89 c3                	mov    ebx,eax
c00035e1:	83 f8 04             	cmp    eax,0x4
c00035e4:	0f 84 c1 00 00 00    	je     c00036ab <load_xdir+0x12a>
c00035ea:	85 c0                	test   eax,eax
c00035ec:	0f 85 be 00 00 00    	jne    c00036b0 <load_xdir+0x12f>
c00035f2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00035fa:	e8 7a eb ff ff       	call   c0002179 <move_window>
c00035ff:	89 c3                	mov    ebx,eax
c0003601:	85 c0                	test   eax,eax
c0003603:	0f 85 a7 00 00 00    	jne    c00036b0 <load_xdir+0x12f>
c0003609:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000360f:	0f 85 96 00 00 00    	jne    c00036ab <load_xdir+0x12a>
c0003615:	8d 47 20             	lea    eax,[edi+0x20]
c0003618:	b9 20 00 00 00       	mov    ecx,0x20
c000361d:	e8 f8 e3 ff ff       	call   c0001a1a <mem_cpy>
c0003622:	31 d2                	xor    edx,edx
c0003624:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003628:	b9 0f 00 00 00       	mov    ecx,0xf
c000362d:	83 c0 2c             	add    eax,0x2c
c0003630:	f7 f1                	div    ecx
c0003632:	c1 e0 05             	shl    eax,0x5
c0003635:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003639:	77 70                	ja     c00036ab <load_xdir+0x12a>
c000363b:	bd 40 00 00 00       	mov    ebp,0x40
c0003640:	31 d2                	xor    edx,edx
c0003642:	89 f0                	mov    eax,esi
c0003644:	e8 06 fe ff ff       	call   c000344f <dir_next>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	83 f8 04             	cmp    eax,0x4
c000364e:	74 5b                	je     c00036ab <load_xdir+0x12a>
c0003650:	85 c0                	test   eax,eax
c0003652:	75 5c                	jne    c00036b0 <load_xdir+0x12f>
c0003654:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003657:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000365a:	8b 06                	mov    eax,DWORD PTR [esi]
c000365c:	e8 18 eb ff ff       	call   c0002179 <move_window>
c0003661:	89 c3                	mov    ebx,eax
c0003663:	85 c0                	test   eax,eax
c0003665:	75 49                	jne    c00036b0 <load_xdir+0x12f>
c0003667:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000366a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000366d:	75 3c                	jne    c00036ab <load_xdir+0x12a>
c000366f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003675:	77 0d                	ja     c0003684 <load_xdir+0x103>
c0003677:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000367a:	b9 20 00 00 00       	mov    ecx,0x20
c000367f:	e8 96 e3 ff ff       	call   c0001a1a <mem_cpy>
c0003684:	83 c5 20             	add    ebp,0x20
c0003687:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000368b:	77 b3                	ja     c0003640 <load_xdir+0xbf>
c000368d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003693:	77 1b                	ja     c00036b0 <load_xdir+0x12f>
c0003695:	89 f8                	mov    eax,edi
c0003697:	e8 cd e7 ff ff       	call   c0001e69 <xdir_sum>
c000369c:	89 c1                	mov    ecx,eax
c000369e:	8d 47 02             	lea    eax,[edi+0x2]
c00036a1:	e8 f5 e2 ff ff       	call   c000199b <ld_word>
c00036a6:	66 39 c1             	cmp    cx,ax
c00036a9:	74 05                	je     c00036b0 <load_xdir+0x12f>
c00036ab:	bb 02 00 00 00       	mov    ebx,0x2
c00036b0:	83 c4 1c             	add    esp,0x1c
c00036b3:	89 d8                	mov    eax,ebx
c00036b5:	5b                   	pop    ebx
c00036b6:	5e                   	pop    esi
c00036b7:	5f                   	pop    edi
c00036b8:	5d                   	pop    ebp
c00036b9:	c3                   	ret    

c00036ba <load_obj_xdir>:
c00036ba:	53                   	push   ebx
c00036bb:	89 c3                	mov    ebx,eax
c00036bd:	83 ec 08             	sub    esp,0x8
c00036c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00036c2:	89 03                	mov    DWORD PTR [ebx],eax
c00036c4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ca:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036cd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036d0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036d3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036da:	30 c0                	xor    al,al
c00036dc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036e3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036e6:	89 d8                	mov    eax,ebx
c00036e8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036eb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036ee:	e8 04 f8 ff ff       	call   c0002ef7 <dir_sdi>
c00036f3:	85 c0                	test   eax,eax
c00036f5:	75 0b                	jne    c0003702 <load_obj_xdir+0x48>
c00036f7:	89 d8                	mov    eax,ebx
c00036f9:	83 c4 08             	add    esp,0x8
c00036fc:	5b                   	pop    ebx
c00036fd:	e9 7f fe ff ff       	jmp    c0003581 <load_xdir>
c0003702:	83 c4 08             	add    esp,0x8
c0003705:	5b                   	pop    ebx
c0003706:	c3                   	ret    

c0003707 <dir_read>:
c0003707:	55                   	push   ebp
c0003708:	bd 04 00 00 00       	mov    ebp,0x4
c000370d:	57                   	push   edi
c000370e:	56                   	push   esi
c000370f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003714:	53                   	push   ebx
c0003715:	89 c3                	mov    ebx,eax
c0003717:	83 ec 1c             	sub    esp,0x1c
c000371a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000371e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003720:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003725:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003728:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000372b:	89 c8                	mov    eax,ecx
c000372d:	09 d0                	or     eax,edx
c000372f:	0f 84 25 01 00 00    	je     c000385a <dir_read+0x153>
c0003735:	89 f8                	mov    eax,edi
c0003737:	e8 3d ea ff ff       	call   c0002179 <move_window>
c000373c:	89 c5                	mov    ebp,eax
c000373e:	85 c0                	test   eax,eax
c0003740:	0f 85 23 01 00 00    	jne    c0003869 <dir_read+0x162>
c0003746:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003749:	8a 0a                	mov    cl,BYTE PTR [edx]
c000374b:	84 c9                	test   cl,cl
c000374d:	0f 84 11 01 00 00    	je     c0003864 <dir_read+0x15d>
c0003753:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003756:	75 48                	jne    c00037a0 <dir_read+0x99>
c0003758:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000375d:	74 10                	je     c000376f <dir_read+0x68>
c000375f:	80 f9 83             	cmp    cl,0x83
c0003762:	0f 85 dd 00 00 00    	jne    c0003845 <dir_read+0x13e>
c0003768:	31 ed                	xor    ebp,ebp
c000376a:	e9 08 01 00 00       	jmp    c0003877 <dir_read+0x170>
c000376f:	80 f9 85             	cmp    cl,0x85
c0003772:	0f 85 cd 00 00 00    	jne    c0003845 <dir_read+0x13e>
c0003778:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000377b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000377e:	89 d8                	mov    eax,ebx
c0003780:	e8 fc fd ff ff       	call   c0003581 <load_xdir>
c0003785:	89 c5                	mov    ebp,eax
c0003787:	85 c0                	test   eax,eax
c0003789:	0f 85 da 00 00 00    	jne    c0003869 <dir_read+0x162>
c000378f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003792:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003795:	83 e0 3f             	and    eax,0x3f
c0003798:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000379b:	e9 d7 00 00 00       	jmp    c0003877 <dir_read+0x170>
c00037a0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c00037a3:	83 e0 3f             	and    eax,0x3f
c00037a6:	80 f9 2e             	cmp    cl,0x2e
c00037a9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037ad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037b0:	0f 84 8a 00 00 00    	je     c0003840 <dir_read+0x139>
c00037b6:	80 f9 e5             	cmp    cl,0xe5
c00037b9:	0f 84 81 00 00 00    	je     c0003840 <dir_read+0x139>
c00037bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037c3:	83 e0 1f             	and    eax,0x1f
c00037c6:	83 f8 08             	cmp    eax,0x8
c00037c9:	0f 94 c0             	sete   al
c00037cc:	0f b6 c0             	movzx  eax,al
c00037cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037d3:	75 6b                	jne    c0003840 <dir_read+0x139>
c00037d5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037da:	75 44                	jne    c0003820 <dir_read+0x119>
c00037dc:	f6 c1 40             	test   cl,0x40
c00037df:	74 12                	je     c00037f3 <dir_read+0xec>
c00037e1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e4:	83 e1 bf             	and    ecx,0xffffffbf
c00037e7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037ee:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f1:	eb 06                	jmp    c00037f9 <dir_read+0xf2>
c00037f3:	89 f0                	mov    eax,esi
c00037f5:	38 c8                	cmp    al,cl
c00037f7:	75 47                	jne    c0003840 <dir_read+0x139>
c00037f9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037fd:	be ff ff ff ff       	mov    esi,0xffffffff
c0003802:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003805:	75 3e                	jne    c0003845 <dir_read+0x13e>
c0003807:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000380b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000380e:	e8 8a e4 ff ff       	call   c0001c9d <pick_lfn>
c0003813:	85 c0                	test   eax,eax
c0003815:	74 2e                	je     c0003845 <dir_read+0x13e>
c0003817:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000381b:	8d 71 ff             	lea    esi,[ecx-0x1]
c000381e:	eb 25                	jmp    c0003845 <dir_read+0x13e>
c0003820:	89 f0                	mov    eax,esi
c0003822:	84 c0                	test   al,al
c0003824:	75 11                	jne    c0003837 <dir_read+0x130>
c0003826:	89 d0                	mov    eax,edx
c0003828:	e8 2a e6 ff ff       	call   c0001e57 <sum_sfn>
c000382d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003831:	0f 84 31 ff ff ff    	je     c0003768 <dir_read+0x61>
c0003837:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000383e:	eb 37                	jmp    c0003877 <dir_read+0x170>
c0003840:	be ff ff ff ff       	mov    esi,0xffffffff
c0003845:	31 d2                	xor    edx,edx
c0003847:	89 d8                	mov    eax,ebx
c0003849:	e8 01 fc ff ff       	call   c000344f <dir_next>
c000384e:	89 c5                	mov    ebp,eax
c0003850:	85 c0                	test   eax,eax
c0003852:	0f 84 cd fe ff ff    	je     c0003725 <dir_read+0x1e>
c0003858:	eb 0f                	jmp    c0003869 <dir_read+0x162>
c000385a:	85 ed                	test   ebp,ebp
c000385c:	0f 84 06 ff ff ff    	je     c0003768 <dir_read+0x61>
c0003862:	eb 05                	jmp    c0003869 <dir_read+0x162>
c0003864:	bd 04 00 00 00       	mov    ebp,0x4
c0003869:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003870:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003877:	83 c4 1c             	add    esp,0x1c
c000387a:	89 e8                	mov    eax,ebp
c000387c:	5b                   	pop    ebx
c000387d:	5e                   	pop    esi
c000387e:	5f                   	pop    edi
c000387f:	5d                   	pop    ebp
c0003880:	c3                   	ret    

c0003881 <dir_alloc>:
c0003881:	55                   	push   ebp
c0003882:	89 d5                	mov    ebp,edx
c0003884:	57                   	push   edi
c0003885:	31 d2                	xor    edx,edx
c0003887:	56                   	push   esi
c0003888:	53                   	push   ebx
c0003889:	89 c3                	mov    ebx,eax
c000388b:	83 ec 0c             	sub    esp,0xc
c000388e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003890:	e8 62 f6 ff ff       	call   c0002ef7 <dir_sdi>
c0003895:	85 c0                	test   eax,eax
c0003897:	75 4e                	jne    c00038e7 <dir_alloc+0x66>
c0003899:	31 f6                	xor    esi,esi
c000389b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000389e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 d1 e8 ff ff       	call   c0002179 <move_window>
c00038a8:	85 c0                	test   eax,eax
c00038aa:	75 3b                	jne    c00038e7 <dir_alloc+0x66>
c00038ac:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038af:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038b2:	8a 12                	mov    dl,BYTE PTR [edx]
c00038b4:	75 07                	jne    c00038bd <dir_alloc+0x3c>
c00038b6:	f7 d2                	not    edx
c00038b8:	c0 ea 07             	shr    dl,0x7
c00038bb:	eb 0d                	jmp    c00038ca <dir_alloc+0x49>
c00038bd:	84 d2                	test   dl,dl
c00038bf:	0f 94 c1             	sete   cl
c00038c2:	80 fa e5             	cmp    dl,0xe5
c00038c5:	0f 94 c2             	sete   dl
c00038c8:	09 ca                	or     edx,ecx
c00038ca:	84 d2                	test   dl,dl
c00038cc:	74 07                	je     c00038d5 <dir_alloc+0x54>
c00038ce:	46                   	inc    esi
c00038cf:	39 ee                	cmp    esi,ebp
c00038d1:	75 04                	jne    c00038d7 <dir_alloc+0x56>
c00038d3:	eb 1c                	jmp    c00038f1 <dir_alloc+0x70>
c00038d5:	31 f6                	xor    esi,esi
c00038d7:	ba 01 00 00 00       	mov    edx,0x1
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 6c fb ff ff       	call   c000344f <dir_next>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	74 b4                	je     c000389b <dir_alloc+0x1a>
c00038e7:	83 f8 04             	cmp    eax,0x4
c00038ea:	75 05                	jne    c00038f1 <dir_alloc+0x70>
c00038ec:	b8 07 00 00 00       	mov    eax,0x7
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <store_xdir>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	89 c7                	mov    edi,eax
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	83 ec 0c             	sub    esp,0xc
c0003902:	8b 00                	mov    eax,DWORD PTR [eax]
c0003904:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003907:	89 e8                	mov    eax,ebp
c0003909:	e8 5b e5 ff ff       	call   c0001e69 <xdir_sum>
c000390e:	0f b7 d0             	movzx  edx,ax
c0003911:	8d 45 02             	lea    eax,[ebp+0x2]
c0003914:	e8 f4 e0 ff ff       	call   c0001a0d <st_word>
c0003919:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c000391d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003920:	89 f8                	mov    eax,edi
c0003922:	e8 d0 f5 ff ff       	call   c0002ef7 <dir_sdi>
c0003927:	89 c6                	mov    esi,eax
c0003929:	85 f6                	test   esi,esi
c000392b:	75 3d                	jne    c000396a <store_xdir+0x71>
c000392d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003930:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	e8 3f e8 ff ff       	call   c0002179 <move_window>
c000393a:	89 c6                	mov    esi,eax
c000393c:	85 c0                	test   eax,eax
c000393e:	75 2a                	jne    c000396a <store_xdir+0x71>
c0003940:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003943:	b9 20 00 00 00       	mov    ecx,0x20
c0003948:	89 ea                	mov    edx,ebp
c000394a:	e8 cb e0 ff ff       	call   c0001a1a <mem_cpy>
c000394f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003951:	85 db                	test   ebx,ebx
c0003953:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003957:	74 11                	je     c000396a <store_xdir+0x71>
c0003959:	31 d2                	xor    edx,edx
c000395b:	89 f8                	mov    eax,edi
c000395d:	83 c5 20             	add    ebp,0x20
c0003960:	e8 ea fa ff ff       	call   c000344f <dir_next>
c0003965:	4b                   	dec    ebx
c0003966:	89 c6                	mov    esi,eax
c0003968:	eb bf                	jmp    c0003929 <store_xdir+0x30>
c000396a:	89 f0                	mov    eax,esi
c000396c:	83 fe 02             	cmp    esi,0x2
c000396f:	76 05                	jbe    c0003976 <store_xdir+0x7d>
c0003971:	b8 02 00 00 00       	mov    eax,0x2
c0003976:	83 c4 0c             	add    esp,0xc
c0003979:	5b                   	pop    ebx
c000397a:	5e                   	pop    esi
c000397b:	5f                   	pop    edi
c000397c:	5d                   	pop    ebp
c000397d:	c3                   	ret    

c000397e <dir_remove>:
c000397e:	57                   	push   edi
c000397f:	56                   	push   esi
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003986:	8b 30                	mov    esi,DWORD PTR [eax]
c0003988:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000398b:	83 fa ff             	cmp    edx,0xffffffff
c000398e:	74 09                	je     c0003999 <dir_remove+0x1b>
c0003990:	e8 62 f5 ff ff       	call   c0002ef7 <dir_sdi>
c0003995:	85 c0                	test   eax,eax
c0003997:	75 41                	jne    c00039da <dir_remove+0x5c>
c0003999:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000399c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000399f:	89 f0                	mov    eax,esi
c00039a1:	e8 d3 e7 ff ff       	call   c0002179 <move_window>
c00039a6:	85 c0                	test   eax,eax
c00039a8:	75 26                	jne    c00039d0 <dir_remove+0x52>
c00039aa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039ad:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039b0:	75 05                	jne    c00039b7 <dir_remove+0x39>
c00039b2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039b5:	eb 03                	jmp    c00039ba <dir_remove+0x3c>
c00039b7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039be:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039c1:	73 17                	jae    c00039da <dir_remove+0x5c>
c00039c3:	31 d2                	xor    edx,edx
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 83 fa ff ff       	call   c000344f <dir_next>
c00039cc:	85 c0                	test   eax,eax
c00039ce:	74 c9                	je     c0003999 <dir_remove+0x1b>
c00039d0:	83 f8 04             	cmp    eax,0x4
c00039d3:	75 05                	jne    c00039da <dir_remove+0x5c>
c00039d5:	b8 02 00 00 00       	mov    eax,0x2
c00039da:	5b                   	pop    ebx
c00039db:	5e                   	pop    esi
c00039dc:	5f                   	pop    edi
c00039dd:	c3                   	ret    

c00039de <create_name>:
c00039de:	55                   	push   ebp
c00039df:	89 d5                	mov    ebp,edx
c00039e1:	57                   	push   edi
c00039e2:	89 c7                	mov    edi,eax
c00039e4:	56                   	push   esi
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	53                   	push   ebx
c00039e8:	83 ec 3c             	sub    esp,0x3c
c00039eb:	8b 02                	mov    eax,DWORD PTR [edx]
c00039ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039f1:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039fa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039fe:	e8 72 e0 ff ff       	call   c0001a75 <tchar2uni>
c0003a03:	89 c3                	mov    ebx,eax
c0003a05:	83 f8 ff             	cmp    eax,0xffffffff
c0003a08:	75 0a                	jne    c0003a14 <create_name+0x36>
c0003a0a:	b8 06 00 00 00       	mov    eax,0x6
c0003a0f:	e9 9e 02 00 00       	jmp    c0003cb2 <create_name+0x2d4>
c0003a14:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a19:	76 0c                	jbe    c0003a27 <create_name+0x49>
c0003a1b:	c1 e8 10             	shr    eax,0x10
c0003a1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a22:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a26:	46                   	inc    esi
c0003a27:	66 83 fb 1f          	cmp    bx,0x1f
c0003a2b:	76 4f                	jbe    c0003a7c <create_name+0x9e>
c0003a2d:	66 83 fb 5c          	cmp    bx,0x5c
c0003a31:	74 35                	je     c0003a68 <create_name+0x8a>
c0003a33:	66 83 fb 2f          	cmp    bx,0x2f
c0003a37:	74 2f                	je     c0003a68 <create_name+0x8a>
c0003a39:	66 83 fb 7f          	cmp    bx,0x7f
c0003a3d:	77 11                	ja     c0003a50 <create_name+0x72>
c0003a3f:	0f b7 d3             	movzx  edx,bx
c0003a42:	b8 f2 f7 01 c0       	mov    eax,0xc001f7f2
c0003a47:	e8 11 e0 ff ff       	call   c0001a5d <chk_chr>
c0003a4c:	85 c0                	test   eax,eax
c0003a4e:	75 ba                	jne    c0003a0a <create_name+0x2c>
c0003a50:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a56:	77 b2                	ja     c0003a0a <create_name+0x2c>
c0003a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a5c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a60:	46                   	inc    esi
c0003a61:	eb 97                	jmp    c00039fa <create_name+0x1c>
c0003a63:	40                   	inc    eax
c0003a64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a6c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a6e:	80 fa 2f             	cmp    dl,0x2f
c0003a71:	74 f0                	je     c0003a63 <create_name+0x85>
c0003a73:	80 fa 5c             	cmp    dl,0x5c
c0003a76:	74 eb                	je     c0003a63 <create_name+0x85>
c0003a78:	31 db                	xor    ebx,ebx
c0003a7a:	eb 02                	jmp    c0003a7e <create_name+0xa0>
c0003a7c:	b3 04                	mov    bl,0x4
c0003a7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a82:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a85:	85 f6                	test   esi,esi
c0003a87:	74 18                	je     c0003aa1 <create_name+0xc3>
c0003a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a8d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a92:	66 83 f8 20          	cmp    ax,0x20
c0003a96:	74 06                	je     c0003a9e <create_name+0xc0>
c0003a98:	66 83 f8 2e          	cmp    ax,0x2e
c0003a9c:	75 03                	jne    c0003aa1 <create_name+0xc3>
c0003a9e:	4e                   	dec    esi
c0003a9f:	eb e4                	jmp    c0003a85 <create_name+0xa7>
c0003aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aa5:	31 ed                	xor    ebp,ebp
c0003aa7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aad:	85 f6                	test   esi,esi
c0003aaf:	0f 84 55 ff ff ff    	je     c0003a0a <create_name+0x2c>
c0003ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ab9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003abc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ac0:	66 83 f8 20          	cmp    ax,0x20
c0003ac4:	75 04                	jne    c0003aca <create_name+0xec>
c0003ac6:	89 d5                	mov    ebp,edx
c0003ac8:	eb eb                	jmp    c0003ab5 <create_name+0xd7>
c0003aca:	85 ed                	test   ebp,ebp
c0003acc:	75 06                	jne    c0003ad4 <create_name+0xf6>
c0003ace:	66 83 f8 2e          	cmp    ax,0x2e
c0003ad2:	75 08                	jne    c0003adc <create_name+0xfe>
c0003ad4:	83 cb 03             	or     ebx,0x3
c0003ad7:	eb 03                	jmp    c0003adc <create_name+0xfe>
c0003ad9:	4e                   	dec    esi
c0003ada:	74 0c                	je     c0003ae8 <create_name+0x10a>
c0003adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ae0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ae6:	75 f1                	jne    c0003ad9 <create_name+0xfb>
c0003ae8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003aed:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003af0:	ba 20 00 00 00       	mov    edx,0x20
c0003af5:	e8 35 df ff ff       	call   c0001a2f <mem_set>
c0003afa:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b02:	31 c9                	xor    ecx,ecx
c0003b04:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b09:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b14:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b18:	66 85 ed             	test   bp,bp
c0003b1b:	0f 84 30 01 00 00    	je     c0003c51 <create_name+0x273>
c0003b21:	66 83 fd 20          	cmp    bp,0x20
c0003b25:	74 10                	je     c0003b37 <create_name+0x159>
c0003b27:	66 83 fd 2e          	cmp    bp,0x2e
c0003b2b:	75 13                	jne    c0003b40 <create_name+0x162>
c0003b2d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b31:	0f 84 6b 01 00 00    	je     c0003ca2 <create_name+0x2c4>
c0003b37:	83 cb 03             	or     ebx,0x3
c0003b3a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b3e:	eb c9                	jmp    c0003b09 <create_name+0x12b>
c0003b40:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b44:	73 0b                	jae    c0003b51 <create_name+0x173>
c0003b46:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b4a:	75 47                	jne    c0003b93 <create_name+0x1b5>
c0003b4c:	e9 51 01 00 00       	jmp    c0003ca2 <create_name+0x2c4>
c0003b51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b56:	75 10                	jne    c0003b68 <create_name+0x18a>
c0003b58:	83 cb 03             	or     ebx,0x3
c0003b5b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b63:	e9 e9 00 00 00       	jmp    c0003c51 <create_name+0x273>
c0003b68:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b6c:	74 0d                	je     c0003b7b <create_name+0x19d>
c0003b6e:	83 cb 03             	or     ebx,0x3
c0003b71:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b75:	0f 87 d6 00 00 00    	ja     c0003c51 <create_name+0x273>
c0003b7b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b80:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b84:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b8c:	b9 08 00 00 00       	mov    ecx,0x8
c0003b91:	eb a7                	jmp    c0003b3a <create_name+0x15c>
c0003b93:	66 83 fd 7f          	cmp    bp,0x7f
c0003b97:	76 68                	jbe    c0003c01 <create_name+0x223>
c0003b99:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b9d:	88 da                	mov    dl,bl
c0003b9f:	83 ca 02             	or     edx,0x2
c0003ba2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003ba6:	50                   	push   eax
c0003ba7:	50                   	push   eax
c0003ba8:	68 b5 01 00 00       	push   0x1b5
c0003bad:	55                   	push   ebp
c0003bae:	e8 48 46 00 00       	call   c00081fb <ff_uni2oem>
c0003bb3:	83 c4 10             	add    esp,0x10
c0003bb6:	89 c5                	mov    ebp,eax
c0003bb8:	a8 80                	test   al,0x80
c0003bba:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bc2:	74 0c                	je     c0003bd0 <create_name+0x1f2>
c0003bc4:	83 e5 7f             	and    ebp,0x7f
c0003bc7:	0f b6 ad 40 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe08c0]
c0003bce:	eb 2a                	jmp    c0003bfa <create_name+0x21c>
c0003bd0:	66 3d ff 00          	cmp    ax,0xff
c0003bd4:	76 24                	jbe    c0003bfa <create_name+0x21c>
c0003bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bda:	48                   	dec    eax
c0003bdb:	39 c8                	cmp    eax,ecx
c0003bdd:	77 0c                	ja     c0003beb <create_name+0x20d>
c0003bdf:	83 cb 03             	or     ebx,0x3
c0003be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003be6:	e9 4f ff ff ff       	jmp    c0003b3a <create_name+0x15c>
c0003beb:	89 e8                	mov    eax,ebp
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 c1 e8 08          	shr    ax,0x8
c0003bf3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bf7:	41                   	inc    ecx
c0003bf8:	eb 4b                	jmp    c0003c45 <create_name+0x267>
c0003bfa:	88 d3                	mov    bl,dl
c0003bfc:	66 85 ed             	test   bp,bp
c0003bff:	74 19                	je     c0003c1a <create_name+0x23c>
c0003c01:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c05:	0f b7 d5             	movzx  edx,bp
c0003c08:	b8 fb f7 01 c0       	mov    eax,0xc001f7fb
c0003c0d:	e8 4b de ff ff       	call   c0001a5d <chk_chr>
c0003c12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c16:	85 c0                	test   eax,eax
c0003c18:	74 0a                	je     c0003c24 <create_name+0x246>
c0003c1a:	83 cb 03             	or     ebx,0x3
c0003c1d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c22:	eb 21                	jmp    c0003c45 <create_name+0x267>
c0003c24:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c27:	66 83 f8 19          	cmp    ax,0x19
c0003c2b:	77 07                	ja     c0003c34 <create_name+0x256>
c0003c2d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c32:	eb 11                	jmp    c0003c45 <create_name+0x267>
c0003c34:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c37:	66 83 f8 19          	cmp    ax,0x19
c0003c3b:	77 08                	ja     c0003c45 <create_name+0x267>
c0003c3d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c42:	83 ed 20             	sub    ebp,0x20
c0003c45:	89 e8                	mov    eax,ebp
c0003c47:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c4b:	41                   	inc    ecx
c0003c4c:	e9 e9 fe ff ff       	jmp    c0003b3a <create_name+0x15c>
c0003c51:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c55:	75 04                	jne    c0003c5b <create_name+0x27d>
c0003c57:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c5b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c60:	75 05                	jne    c0003c67 <create_name+0x289>
c0003c62:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c6b:	83 e0 0c             	and    eax,0xc
c0003c6e:	3c 0c                	cmp    al,0xc
c0003c70:	74 0b                	je     c0003c7d <create_name+0x29f>
c0003c72:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c76:	83 e0 03             	and    eax,0x3
c0003c79:	3c 03                	cmp    al,0x3
c0003c7b:	75 05                	jne    c0003c82 <create_name+0x2a4>
c0003c7d:	83 cb 02             	or     ebx,0x2
c0003c80:	eb 19                	jmp    c0003c9b <create_name+0x2bd>
c0003c82:	f6 c3 02             	test   bl,0x2
c0003c85:	75 14                	jne    c0003c9b <create_name+0x2bd>
c0003c87:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c8c:	74 03                	je     c0003c91 <create_name+0x2b3>
c0003c8e:	83 cb 10             	or     ebx,0x10
c0003c91:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c96:	74 03                	je     c0003c9b <create_name+0x2bd>
c0003c98:	83 cb 08             	or     ebx,0x8
c0003c9b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c9e:	31 c0                	xor    eax,eax
c0003ca0:	eb 10                	jmp    c0003cb2 <create_name+0x2d4>
c0003ca2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003ca7:	0f 85 ce fe ff ff    	jne    c0003b7b <create_name+0x19d>
c0003cad:	e9 a6 fe ff ff       	jmp    c0003b58 <create_name+0x17a>
c0003cb2:	83 c4 3c             	add    esp,0x3c
c0003cb5:	5b                   	pop    ebx
c0003cb6:	5e                   	pop    esi
c0003cb7:	5f                   	pop    edi
c0003cb8:	5d                   	pop    ebp
c0003cb9:	c3                   	ret    

c0003cba <xname_sum>:
c0003cba:	56                   	push   esi
c0003cbb:	53                   	push   ebx
c0003cbc:	89 c6                	mov    esi,eax
c0003cbe:	51                   	push   ecx
c0003cbf:	31 db                	xor    ebx,ebx
c0003cc1:	83 c6 02             	add    esi,0x2
c0003cc4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cc8:	66 85 c0             	test   ax,ax
c0003ccb:	74 1f                	je     c0003cec <xname_sum+0x32>
c0003ccd:	83 ec 0c             	sub    esp,0xc
c0003cd0:	66 d1 cb             	ror    bx,1
c0003cd3:	50                   	push   eax
c0003cd4:	e8 1e 46 00 00       	call   c00082f7 <ff_wtoupper>
c0003cd9:	83 c4 10             	add    esp,0x10
c0003cdc:	0f b6 d0             	movzx  edx,al
c0003cdf:	66 c1 e8 08          	shr    ax,0x8
c0003ce3:	01 d3                	add    ebx,edx
c0003ce5:	66 d1 cb             	ror    bx,1
c0003ce8:	01 c3                	add    ebx,eax
c0003cea:	eb d5                	jmp    c0003cc1 <xname_sum+0x7>
c0003cec:	89 d8                	mov    eax,ebx
c0003cee:	5a                   	pop    edx
c0003cef:	5b                   	pop    ebx
c0003cf0:	5e                   	pop    esi
c0003cf1:	c3                   	ret    

c0003cf2 <create_xdir>:
c0003cf2:	55                   	push   ebp
c0003cf3:	b9 40 00 00 00       	mov    ecx,0x40
c0003cf8:	57                   	push   edi
c0003cf9:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfe:	56                   	push   esi
c0003cff:	31 ff                	xor    edi,edi
c0003d01:	53                   	push   ebx
c0003d02:	be 40 00 00 00       	mov    esi,0x40
c0003d07:	89 c3                	mov    ebx,eax
c0003d09:	83 ec 1c             	sub    esp,0x1c
c0003d0c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d10:	31 d2                	xor    edx,edx
c0003d12:	e8 18 dd ff ff       	call   c0001a2f <mem_set>
c0003d17:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d1a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d1e:	31 c9                	xor    ecx,ecx
c0003d20:	8d 46 01             	lea    eax,[esi+0x1]
c0003d23:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d27:	83 c6 02             	add    esi,0x2
c0003d2a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d2e:	66 85 ed             	test   bp,bp
c0003d31:	74 12                	je     c0003d45 <create_xdir+0x53>
c0003d33:	0f b6 c1             	movzx  eax,cl
c0003d36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d3a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d3e:	66 83 fd 01          	cmp    bp,0x1
c0003d42:	80 d9 ff             	sbb    cl,0xff
c0003d45:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d48:	0f b7 d5             	movzx  edx,bp
c0003d4b:	83 c6 02             	add    esi,0x2
c0003d4e:	e8 ba dc ff ff       	call   c0001a0d <st_word>
c0003d53:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d59:	75 d3                	jne    c0003d2e <create_xdir+0x3c>
c0003d5b:	8d 47 01             	lea    eax,[edi+0x1]
c0003d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d66:	0f b6 c1             	movzx  eax,cl
c0003d69:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d6e:	74 07                	je     c0003d77 <create_xdir+0x85>
c0003d70:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d75:	eb a9                	jmp    c0003d20 <create_xdir+0x2e>
c0003d77:	8d 47 02             	lea    eax,[edi+0x2]
c0003d7a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d7d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d80:	89 d0                	mov    eax,edx
c0003d82:	e8 33 ff ff ff       	call   c0003cba <xname_sum>
c0003d87:	83 c4 1c             	add    esp,0x1c
c0003d8a:	0f b7 d0             	movzx  edx,ax
c0003d8d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d90:	5b                   	pop    ebx
c0003d91:	5e                   	pop    esi
c0003d92:	5f                   	pop    edi
c0003d93:	5d                   	pop    ebp
c0003d94:	e9 74 dc ff ff       	jmp    c0001a0d <st_word>

c0003d99 <cmp_lfn>:
c0003d99:	55                   	push   ebp
c0003d9a:	57                   	push   edi
c0003d9b:	89 d7                	mov    edi,edx
c0003d9d:	56                   	push   esi
c0003d9e:	53                   	push   ebx
c0003d9f:	83 ec 1c             	sub    esp,0x1c
c0003da2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003da9:	e8 ed db ff ff       	call   c000199b <ld_word>
c0003dae:	66 85 c0             	test   ax,ax
c0003db1:	74 07                	je     c0003dba <cmp_lfn+0x21>
c0003db3:	31 c0                	xor    eax,eax
c0003db5:	e9 9a 00 00 00       	jmp    c0003e54 <cmp_lfn+0xbb>
c0003dba:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003dbc:	bd 01 00 00 00       	mov    ebp,0x1
c0003dc1:	83 e3 3f             	and    ebx,0x3f
c0003dc4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dcc:	4b                   	dec    ebx
c0003dcd:	6b db 0d             	imul   ebx,ebx,0xd
c0003dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd4:	0f b6 80 c0 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0840]
c0003ddb:	01 f8                	add    eax,edi
c0003ddd:	e8 b9 db ff ff       	call   c000199b <ld_word>
c0003de2:	66 85 ed             	test   bp,bp
c0003de5:	89 c6                	mov    esi,eax
c0003de7:	74 3c                	je     c0003e25 <cmp_lfn+0x8c>
c0003de9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003def:	77 c2                	ja     c0003db3 <cmp_lfn+0x1a>
c0003df1:	83 ec 0c             	sub    esp,0xc
c0003df4:	0f b7 c0             	movzx  eax,ax
c0003df7:	50                   	push   eax
c0003df8:	e8 fa 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003dfd:	89 c5                	mov    ebp,eax
c0003dff:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e0a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e11:	e8 e1 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003e16:	83 c4 10             	add    esp,0x10
c0003e19:	39 c5                	cmp    ebp,eax
c0003e1b:	75 96                	jne    c0003db3 <cmp_lfn+0x1a>
c0003e1d:	89 f5                	mov    ebp,esi
c0003e1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e23:	eb 04                	jmp    c0003e29 <cmp_lfn+0x90>
c0003e25:	66 46                	inc    si
c0003e27:	75 8a                	jne    c0003db3 <cmp_lfn+0x1a>
c0003e29:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e2d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e32:	75 9c                	jne    c0003dd0 <cmp_lfn+0x37>
c0003e34:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e37:	74 16                	je     c0003e4f <cmp_lfn+0xb6>
c0003e39:	66 85 ed             	test   bp,bp
c0003e3c:	74 11                	je     c0003e4f <cmp_lfn+0xb6>
c0003e3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e42:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e47:	0f 94 c0             	sete   al
c0003e4a:	0f b6 c0             	movzx  eax,al
c0003e4d:	eb 05                	jmp    c0003e54 <cmp_lfn+0xbb>
c0003e4f:	b8 01 00 00 00       	mov    eax,0x1
c0003e54:	83 c4 1c             	add    esp,0x1c
c0003e57:	5b                   	pop    ebx
c0003e58:	5e                   	pop    esi
c0003e59:	5f                   	pop    edi
c0003e5a:	5d                   	pop    ebp
c0003e5b:	c3                   	ret    

c0003e5c <dir_find>:
c0003e5c:	55                   	push   ebp
c0003e5d:	31 d2                	xor    edx,edx
c0003e5f:	57                   	push   edi
c0003e60:	56                   	push   esi
c0003e61:	53                   	push   ebx
c0003e62:	89 c3                	mov    ebx,eax
c0003e64:	83 ec 1c             	sub    esp,0x1c
c0003e67:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e69:	e8 89 f0 ff ff       	call   c0002ef7 <dir_sdi>
c0003e6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e71:	85 c0                	test   eax,eax
c0003e73:	0f 85 9e 01 00 00    	jne    c0004017 <dir_find+0x1bb>
c0003e79:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e7c:	0f 85 8d 00 00 00    	jne    c0003f0f <dir_find+0xb3>
c0003e82:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e85:	e8 30 fe ff ff       	call   c0003cba <xname_sum>
c0003e8a:	89 c7                	mov    edi,eax
c0003e8c:	31 d2                	xor    edx,edx
c0003e8e:	89 d8                	mov    eax,ebx
c0003e90:	e8 72 f8 ff ff       	call   c0003707 <dir_read>
c0003e95:	85 c0                	test   eax,eax
c0003e97:	0f 85 5e 01 00 00    	jne    c0003ffb <dir_find+0x19f>
c0003e9d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003ea0:	8d 41 24             	lea    eax,[ecx+0x24]
c0003ea3:	e8 f3 da ff ff       	call   c000199b <ld_word>
c0003ea8:	66 39 f8             	cmp    ax,di
c0003eab:	75 df                	jne    c0003e8c <dir_find+0x30>
c0003ead:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003eb0:	31 ed                	xor    ebp,ebp
c0003eb2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003eb6:	ba 40 00 00 00       	mov    edx,0x40
c0003ebb:	89 e9                	mov    ecx,ebp
c0003ebd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ec1:	0f 84 42 01 00 00    	je     c0004009 <dir_find+0x1ad>
c0003ec7:	f6 c2 1f             	test   dl,0x1f
c0003eca:	75 03                	jne    c0003ecf <dir_find+0x73>
c0003ecc:	83 c2 02             	add    edx,0x2
c0003ecf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ed3:	89 d0                	mov    eax,edx
c0003ed5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ed8:	e8 be da ff ff       	call   c000199b <ld_word>
c0003edd:	83 ec 0c             	sub    esp,0xc
c0003ee0:	0f b7 c0             	movzx  eax,ax
c0003ee3:	50                   	push   eax
c0003ee4:	e8 0e 44 00 00       	call   c00082f7 <ff_wtoupper>
c0003ee9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003eed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ef0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef7:	e8 fb 43 00 00       	call   c00082f7 <ff_wtoupper>
c0003efc:	83 c4 10             	add    esp,0x10
c0003eff:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f03:	75 87                	jne    c0003e8c <dir_find+0x30>
c0003f05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f09:	45                   	inc    ebp
c0003f0a:	83 c2 02             	add    edx,0x2
c0003f0d:	eb ac                	jmp    c0003ebb <dir_find+0x5f>
c0003f0f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f16:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f1b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f20:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f23:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f26:	89 f0                	mov    eax,esi
c0003f28:	e8 4c e2 ff ff       	call   c0002179 <move_window>
c0003f2d:	85 c0                	test   eax,eax
c0003f2f:	0f 85 c6 00 00 00    	jne    c0003ffb <dir_find+0x19f>
c0003f35:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f38:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f3b:	84 c9                	test   cl,cl
c0003f3d:	0f 84 bd 00 00 00    	je     c0004000 <dir_find+0x1a4>
c0003f43:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f46:	88 d0                	mov    al,dl
c0003f48:	83 e0 3f             	and    eax,0x3f
c0003f4b:	80 f9 e5             	cmp    cl,0xe5
c0003f4e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f51:	0f 84 87 00 00 00    	je     c0003fde <dir_find+0x182>
c0003f57:	80 e2 08             	and    dl,0x8
c0003f5a:	74 06                	je     c0003f62 <dir_find+0x106>
c0003f5c:	3c 0f                	cmp    al,0xf
c0003f5e:	75 7e                	jne    c0003fde <dir_find+0x182>
c0003f60:	eb 04                	jmp    c0003f66 <dir_find+0x10a>
c0003f62:	3c 0f                	cmp    al,0xf
c0003f64:	75 4c                	jne    c0003fb2 <dir_find+0x156>
c0003f66:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f6a:	75 7e                	jne    c0003fea <dir_find+0x18e>
c0003f6c:	f6 c1 40             	test   cl,0x40
c0003f6f:	74 12                	je     c0003f83 <dir_find+0x127>
c0003f71:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f74:	83 e1 bf             	and    ecx,0xffffffbf
c0003f77:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f7b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f7e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f81:	eb 06                	jmp    c0003f89 <dir_find+0x12d>
c0003f83:	89 f8                	mov    eax,edi
c0003f85:	38 c8                	cmp    al,cl
c0003f87:	75 5c                	jne    c0003fe5 <dir_find+0x189>
c0003f89:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f8d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f92:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f95:	75 53                	jne    c0003fea <dir_find+0x18e>
c0003f97:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f9b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	e8 f4 fd ff ff       	call   c0003d99 <cmp_lfn>
c0003fa5:	85 c0                	test   eax,eax
c0003fa7:	74 41                	je     c0003fea <dir_find+0x18e>
c0003fa9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fad:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fb0:	eb 38                	jmp    c0003fea <dir_find+0x18e>
c0003fb2:	89 f8                	mov    eax,edi
c0003fb4:	84 c0                	test   al,al
c0003fb6:	75 0d                	jne    c0003fc5 <dir_find+0x169>
c0003fb8:	89 e8                	mov    eax,ebp
c0003fba:	e8 98 de ff ff       	call   c0001e57 <sum_sfn>
c0003fbf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fc3:	74 52                	je     c0004017 <dir_find+0x1bb>
c0003fc5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fc9:	75 13                	jne    c0003fde <dir_find+0x182>
c0003fcb:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fce:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fd3:	89 e8                	mov    eax,ebp
c0003fd5:	e8 60 da ff ff       	call   c0001a3a <mem_cmp>
c0003fda:	85 c0                	test   eax,eax
c0003fdc:	74 39                	je     c0004017 <dir_find+0x1bb>
c0003fde:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fe5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fea:	31 d2                	xor    edx,edx
c0003fec:	89 d8                	mov    eax,ebx
c0003fee:	e8 5c f4 ff ff       	call   c000344f <dir_next>
c0003ff3:	85 c0                	test   eax,eax
c0003ff5:	0f 84 25 ff ff ff    	je     c0003f20 <dir_find+0xc4>
c0003ffb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ffe:	eb 17                	jmp    c0004017 <dir_find+0x1bb>
c0004000:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004007:	eb 0e                	jmp    c0004017 <dir_find+0x1bb>
c0004009:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000400c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004011:	0f 85 75 fe ff ff    	jne    c0003e8c <dir_find+0x30>
c0004017:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000401a:	83 c4 1c             	add    esp,0x1c
c000401d:	5b                   	pop    ebx
c000401e:	5e                   	pop    esi
c000401f:	5f                   	pop    edi
c0004020:	5d                   	pop    ebp
c0004021:	c3                   	ret    

c0004022 <dir_register>:
c0004022:	55                   	push   ebp
c0004023:	57                   	push   edi
c0004024:	56                   	push   esi
c0004025:	be 06 00 00 00       	mov    esi,0x6
c000402a:	53                   	push   ebx
c000402b:	83 ec 6c             	sub    esp,0x6c
c000402e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004032:	0f 85 62 02 00 00    	jne    c000429a <dir_register+0x278>
c0004038:	8b 28                	mov    ebp,DWORD PTR [eax]
c000403a:	31 ff                	xor    edi,edi
c000403c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000403f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004044:	74 03                	je     c0004049 <dir_register+0x27>
c0004046:	47                   	inc    edi
c0004047:	eb f6                	jmp    c000403f <dir_register+0x1d>
c0004049:	89 c3                	mov    ebx,eax
c000404b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000404f:	0f 85 e1 00 00 00    	jne    c0004136 <dir_register+0x114>
c0004055:	83 c7 0e             	add    edi,0xe
c0004058:	b9 0f 00 00 00       	mov    ecx,0xf
c000405d:	89 f8                	mov    eax,edi
c000405f:	31 d2                	xor    edx,edx
c0004061:	f7 f1                	div    ecx
c0004063:	8d 50 02             	lea    edx,[eax+0x2]
c0004066:	89 c7                	mov    edi,eax
c0004068:	89 d8                	mov    eax,ebx
c000406a:	e8 12 f8 ff ff       	call   c0003881 <dir_alloc>
c000406f:	89 c6                	mov    esi,eax
c0004071:	85 c0                	test   eax,eax
c0004073:	0f 85 21 02 00 00    	jne    c000429a <dir_register+0x278>
c0004079:	81 c7 01 00 00 08    	add    edi,0x8000001
c000407f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004082:	c1 e7 05             	shl    edi,0x5
c0004085:	29 f8                	sub    eax,edi
c0004087:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000408a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000408d:	a8 04                	test   al,0x4
c000408f:	0f 84 91 00 00 00    	je     c0004126 <dir_register+0x104>
c0004095:	83 e0 fb             	and    eax,0xfffffffb
c0004098:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 25 ec ff ff       	call   c0002cc7 <fill_first_frag>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 85 ee 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040aa:	83 c9 ff             	or     ecx,0xffffffff
c00040ad:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040b0:	89 d8                	mov    eax,ebx
c00040b2:	e8 db eb ff ff       	call   c0002c92 <fill_last_frag>
c00040b7:	85 c0                	test   eax,eax
c00040b9:	0f 85 d9 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040c3:	74 61                	je     c0004126 <dir_register+0x104>
c00040c5:	89 da                	mov    edx,ebx
c00040c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040cb:	e8 ea f5 ff ff       	call   c00036ba <load_obj_xdir>
c00040d0:	85 c0                	test   eax,eax
c00040d2:	0f 85 c0 01 00 00    	jne    c0004298 <dir_register+0x276>
c00040d8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040dc:	31 c9                	xor    ecx,ecx
c00040de:	c1 e2 09             	shl    edx,0x9
c00040e1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040e4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040e7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ea:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040f0:	83 c0 38             	add    eax,0x38
c00040f3:	e8 1c d9 ff ff       	call   c0001a14 <st_qword>
c00040f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040fe:	83 c0 28             	add    eax,0x28
c0004101:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004104:	e8 0b d9 ff ff       	call   c0001a14 <st_qword>
c0004109:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000410c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000410f:	83 c8 01             	or     eax,0x1
c0004112:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004115:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004119:	e8 db f7 ff ff       	call   c00038f9 <store_xdir>
c000411e:	85 c0                	test   eax,eax
c0004120:	0f 85 72 01 00 00    	jne    c0004298 <dir_register+0x276>
c0004126:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004129:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000412c:	e8 c1 fb ff ff       	call   c0003cf2 <create_xdir>
c0004131:	e9 64 01 00 00       	jmp    c000429a <dir_register+0x278>
c0004136:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004139:	b9 0c 00 00 00       	mov    ecx,0xc
c000413e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004142:	89 c2                	mov    edx,eax
c0004144:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004148:	e8 cd d8 ff ff       	call   c0001a1a <mem_cpy>
c000414d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004152:	74 58                	je     c00041ac <dir_register+0x18a>
c0004154:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004158:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004160:	83 ec 0c             	sub    esp,0xc
c0004163:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000416a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000416e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004172:	e8 24 dc ff ff       	call   c0001d9b <gen_numname>
c0004177:	89 d8                	mov    eax,ebx
c0004179:	e8 de fc ff ff       	call   c0003e5c <dir_find>
c000417e:	83 c4 10             	add    esp,0x10
c0004181:	89 c6                	mov    esi,eax
c0004183:	85 c0                	test   eax,eax
c0004185:	75 15                	jne    c000419c <dir_register+0x17a>
c0004187:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000418b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004190:	75 ce                	jne    c0004160 <dir_register+0x13e>
c0004192:	be 07 00 00 00       	mov    esi,0x7
c0004197:	e9 fe 00 00 00       	jmp    c000429a <dir_register+0x278>
c000419c:	83 f8 04             	cmp    eax,0x4
c000419f:	0f 85 f5 00 00 00    	jne    c000429a <dir_register+0x278>
c00041a5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00041a9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00041ac:	b9 01 00 00 00       	mov    ecx,0x1
c00041b1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041b6:	74 0f                	je     c00041c7 <dir_register+0x1a5>
c00041b8:	b9 0d 00 00 00       	mov    ecx,0xd
c00041bd:	8d 47 0c             	lea    eax,[edi+0xc]
c00041c0:	31 d2                	xor    edx,edx
c00041c2:	f7 f1                	div    ecx
c00041c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00041c7:	89 ca                	mov    edx,ecx
c00041c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cd:	89 d8                	mov    eax,ebx
c00041cf:	e8 ad f6 ff ff       	call   c0003881 <dir_alloc>
c00041d4:	89 c6                	mov    esi,eax
c00041d6:	85 c0                	test   eax,eax
c00041d8:	0f 85 bc 00 00 00    	jne    c000429a <dir_register+0x278>
c00041de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041e2:	49                   	dec    ecx
c00041e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041e7:	74 6a                	je     c0004253 <dir_register+0x231>
c00041e9:	89 c8                	mov    eax,ecx
c00041eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041ee:	c1 e0 05             	shl    eax,0x5
c00041f1:	29 c2                	sub    edx,eax
c00041f3:	89 d8                	mov    eax,ebx
c00041f5:	e8 fd ec ff ff       	call   c0002ef7 <dir_sdi>
c00041fa:	89 c6                	mov    esi,eax
c00041fc:	85 c0                	test   eax,eax
c00041fe:	0f 85 96 00 00 00    	jne    c000429a <dir_register+0x278>
c0004204:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004208:	e8 4a dc ff ff       	call   c0001e57 <sum_sfn>
c000420d:	0f b6 f8             	movzx  edi,al
c0004210:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004213:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004216:	89 e8                	mov    eax,ebp
c0004218:	e8 5c df ff ff       	call   c0002179 <move_window>
c000421d:	89 c6                	mov    esi,eax
c000421f:	85 c0                	test   eax,eax
c0004221:	75 77                	jne    c000429a <dir_register+0x278>
c0004223:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004228:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000422b:	83 ec 0c             	sub    esp,0xc
c000422e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004231:	57                   	push   edi
c0004232:	e8 e0 da ff ff       	call   c0001d17 <put_lfn>
c0004237:	31 d2                	xor    edx,edx
c0004239:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000423d:	89 d8                	mov    eax,ebx
c000423f:	e8 0b f2 ff ff       	call   c000344f <dir_next>
c0004244:	83 c4 10             	add    esp,0x10
c0004247:	89 c6                	mov    esi,eax
c0004249:	85 c0                	test   eax,eax
c000424b:	75 4d                	jne    c000429a <dir_register+0x278>
c000424d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004251:	75 bd                	jne    c0004210 <dir_register+0x1ee>
c0004253:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004256:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004259:	89 e8                	mov    eax,ebp
c000425b:	e8 19 df ff ff       	call   c0002179 <move_window>
c0004260:	89 c6                	mov    esi,eax
c0004262:	85 c0                	test   eax,eax
c0004264:	75 34                	jne    c000429a <dir_register+0x278>
c0004266:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004269:	b9 20 00 00 00       	mov    ecx,0x20
c000426e:	31 d2                	xor    edx,edx
c0004270:	e8 ba d7 ff ff       	call   c0001a2f <mem_set>
c0004275:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000427c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004281:	e8 94 d7 ff ff       	call   c0001a1a <mem_cpy>
c0004286:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004289:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000428c:	83 e0 18             	and    eax,0x18
c000428f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004292:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004296:	eb 02                	jmp    c000429a <dir_register+0x278>
c0004298:	89 c6                	mov    esi,eax
c000429a:	83 c4 6c             	add    esp,0x6c
c000429d:	89 f0                	mov    eax,esi
c000429f:	5b                   	pop    ebx
c00042a0:	5e                   	pop    esi
c00042a1:	5f                   	pop    edi
c00042a2:	5d                   	pop    ebp
c00042a3:	c3                   	ret    

c00042a4 <sync_fs>:
c00042a4:	56                   	push   esi
c00042a5:	53                   	push   ebx
c00042a6:	53                   	push   ebx
c00042a7:	89 c3                	mov    ebx,eax
c00042a9:	e8 37 de ff ff       	call   c00020e5 <sync_window>
c00042ae:	85 c0                	test   eax,eax
c00042b0:	0f 85 b1 00 00 00    	jne    c0004367 <sync_fs+0xc3>
c00042b6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042b9:	0f 85 8e 00 00 00    	jne    c000434d <sync_fs+0xa9>
c00042bf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042c3:	0f 85 84 00 00 00    	jne    c000434d <sync_fs+0xa9>
c00042c9:	b9 00 02 00 00       	mov    ecx,0x200
c00042ce:	8d 73 54             	lea    esi,[ebx+0x54]
c00042d1:	31 d2                	xor    edx,edx
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 55 d7 ff ff       	call   c0001a2f <mem_set>
c00042da:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042e5:	e8 23 d7 ff ff       	call   c0001a0d <st_word>
c00042ea:	ba 52 52 61 41       	mov    edx,0x41615252
c00042ef:	89 f0                	mov    eax,esi
c00042f1:	e8 1b d7 ff ff       	call   c0001a11 <st_dword>
c00042f6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042fc:	ba 72 72 41 61       	mov    edx,0x61417272
c0004301:	e8 0b d7 ff ff       	call   c0001a11 <st_dword>
c0004306:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004309:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000430f:	e8 fd d6 ff ff       	call   c0001a11 <st_dword>
c0004314:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004317:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000431d:	e8 ef d6 ff ff       	call   c0001a11 <st_dword>
c0004322:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004325:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004328:	83 c0 01             	add    eax,0x1
c000432b:	83 d2 00             	adc    edx,0x0
c000432e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004331:	83 ec 0c             	sub    esp,0xc
c0004334:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004337:	6a 01                	push   0x1
c0004339:	52                   	push   edx
c000433a:	50                   	push   eax
c000433b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000433f:	56                   	push   esi
c0004340:	50                   	push   eax
c0004341:	e8 20 d6 ff ff       	call   c0001966 <disk_write>
c0004346:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000434a:	83 c4 20             	add    esp,0x20
c000434d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004351:	51                   	push   ecx
c0004352:	6a 00                	push   0x0
c0004354:	6a 00                	push   0x0
c0004356:	50                   	push   eax
c0004357:	e8 20 d6 ff ff       	call   c000197c <disk_ioctl>
c000435c:	83 c4 10             	add    esp,0x10
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 95 c0             	setne  al
c0004364:	0f b6 c0             	movzx  eax,al
c0004367:	5a                   	pop    edx
c0004368:	5b                   	pop    ebx
c0004369:	5e                   	pop    esi
c000436a:	c3                   	ret    

c000436b <create_partition>:
c000436b:	55                   	push   ebp
c000436c:	0f b6 c0             	movzx  eax,al
c000436f:	57                   	push   edi
c0004370:	56                   	push   esi
c0004371:	53                   	push   ebx
c0004372:	83 ec 60             	sub    esp,0x60
c0004375:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004379:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000437d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004381:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004385:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004389:	50                   	push   eax
c000438a:	6a 01                	push   0x1
c000438c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004390:	e8 e7 d5 ff ff       	call   c000197c <disk_ioctl>
c0004395:	83 c4 10             	add    esp,0x10
c0004398:	85 c0                	test   eax,eax
c000439a:	74 0a                	je     c00043a6 <create_partition+0x3b>
c000439c:	b8 01 00 00 00       	mov    eax,0x1
c00043a1:	e9 67 05 00 00       	jmp    c000490d <create_partition+0x5a2>
c00043a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00043aa:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043bb:	0f 86 ed 03 00 00    	jbe    c00047ae <create_partition+0x443>
c00043c1:	83 c0 df             	add    eax,0xffffffdf
c00043c4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043cc:	83 d2 ff             	adc    edx,0xffffffff
c00043cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043df:	83 c0 bd             	add    eax,0xffffffbd
c00043e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043e9:	83 d2 ff             	adc    edx,0xffffffff
c00043ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043f4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043fc:	be 22 00 00 00       	mov    esi,0x22
c0004401:	31 ff                	xor    edi,edi
c0004403:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000440b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004413:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000441b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000441f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004425:	75 0e                	jne    c0004435 <create_partition+0xca>
c0004427:	b9 00 02 00 00       	mov    ecx,0x200
c000442c:	31 d2                	xor    edx,edx
c000442e:	89 d8                	mov    eax,ebx
c0004430:	e8 fa d5 ff ff       	call   c0001a2f <mem_set>
c0004435:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004439:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000443d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004441:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004444:	0f 84 23 01 00 00    	je     c000456d <create_partition+0x202>
c000444a:	89 f0                	mov    eax,esi
c000444c:	89 fa                	mov    edx,edi
c000444e:	05 ff 07 00 00       	add    eax,0x7ff
c0004453:	83 d2 00             	adc    edx,0x0
c0004456:	89 c1                	mov    ecx,eax
c0004458:	89 d7                	mov    edi,edx
c000445a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004460:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004464:	89 ce                	mov    esi,ecx
c0004466:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000446a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000446e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004472:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004475:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004479:	89 04 24             	mov    DWORD PTR [esp],eax
c000447c:	b8 64 00 00 00       	mov    eax,0x64
c0004481:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004484:	b8 00 00 00 00       	mov    eax,0x0
c0004489:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000448d:	72 41                	jb     c00044d0 <create_partition+0x165>
c000448f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004497:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000449b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00044a0:	01 c1                	add    ecx,eax
c00044a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00044a6:	f7 24 24             	mul    DWORD PTR [esp]
c00044a9:	6a 00                	push   0x0
c00044ab:	01 ca                	add    edx,ecx
c00044ad:	6a 64                	push   0x64
c00044af:	52                   	push   edx
c00044b0:	50                   	push   eax
c00044b1:	e8 e6 a2 01 00       	call   c001e79c <__udivdi3>
c00044b6:	83 c4 10             	add    esp,0x10
c00044b9:	05 ff 07 00 00       	add    eax,0x7ff
c00044be:	83 d2 00             	adc    edx,0x0
c00044c1:	89 c1                	mov    ecx,eax
c00044c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044c7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044cd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044d7:	01 f0                	add    eax,esi
c00044d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044dd:	11 fa                	adc    edx,edi
c00044df:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044e3:	19 d1                	sbb    ecx,edx
c00044e5:	73 2e                	jae    c0004515 <create_partition+0x1aa>
c00044e7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044eb:	89 f8                	mov    eax,edi
c00044ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044f4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044f8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004500:	73 6b                	jae    c000456d <create_partition+0x202>
c0004502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004506:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000450a:	29 f0                	sub    eax,esi
c000450c:	19 fa                	sbb    edx,edi
c000450e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004511:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004515:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004519:	0b 04 24             	or     eax,DWORD PTR [esp]
c000451c:	74 4f                	je     c000456d <create_partition+0x202>
c000451e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004521:	b9 10 00 00 00       	mov    ecx,0x10
c0004526:	ba d0 f7 01 c0       	mov    edx,0xc001f7d0
c000452b:	e8 ea d4 ff ff       	call   c0001a1a <mem_cpy>
c0004530:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004534:	b9 10 00 00 00       	mov    ecx,0x10
c0004539:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000453d:	e8 2c db ff ff       	call   c000206e <make_rand>
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000454a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000454e:	e8 c1 d4 ff ff       	call   c0001a14 <st_qword>
c0004553:	03 34 24             	add    esi,DWORD PTR [esp]
c0004556:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000455a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000455e:	89 f2                	mov    edx,esi
c0004560:	89 f9                	mov    ecx,edi
c0004562:	83 c2 ff             	add    edx,0xffffffff
c0004565:	83 d1 ff             	adc    ecx,0xffffffff
c0004568:	e8 a7 d4 ff ff       	call   c0001a14 <st_qword>
c000456d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004571:	83 e8 80             	sub    eax,0xffffff80
c0004574:	89 c5                	mov    ebp,eax
c0004576:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000457a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004580:	75 6b                	jne    c00045ed <create_partition+0x282>
c0004582:	45                   	inc    ebp
c0004583:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004587:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000458c:	e8 39 da ff ff       	call   c0001fca <crc32>
c0004591:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004597:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000459b:	75 e5                	jne    c0004582 <create_partition+0x217>
c000459d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045a1:	31 d2                	xor    edx,edx
c00045a3:	83 ec 0c             	sub    esp,0xc
c00045a6:	c1 ed 09             	shr    ebp,0x9
c00045a9:	6a 01                	push   0x1
c00045ab:	8d 45 02             	lea    eax,[ebp+0x2]
c00045ae:	52                   	push   edx
c00045af:	50                   	push   eax
c00045b0:	53                   	push   ebx
c00045b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045b5:	e8 ac d3 ff ff       	call   c0001966 <disk_write>
c00045ba:	83 c4 20             	add    esp,0x20
c00045bd:	85 c0                	test   eax,eax
c00045bf:	0f 85 d7 fd ff ff    	jne    c000439c <create_partition+0x31>
c00045c5:	83 ec 0c             	sub    esp,0xc
c00045c8:	31 d2                	xor    edx,edx
c00045ca:	6a 01                	push   0x1
c00045cc:	89 e8                	mov    eax,ebp
c00045ce:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045d2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045d6:	52                   	push   edx
c00045d7:	50                   	push   eax
c00045d8:	53                   	push   ebx
c00045d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045dd:	e8 84 d3 ff ff       	call   c0001966 <disk_write>
c00045e2:	83 c4 20             	add    esp,0x20
c00045e5:	85 c0                	test   eax,eax
c00045e7:	0f 85 af fd ff ff    	jne    c000439c <create_partition+0x31>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045f5:	3d 00 40 00 00       	cmp    eax,0x4000
c00045fa:	74 0d                	je     c0004609 <create_partition+0x29e>
c00045fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004600:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004604:	e9 12 fe ff ff       	jmp    c000441b <create_partition+0xb0>
c0004609:	31 d2                	xor    edx,edx
c000460b:	b9 00 02 00 00       	mov    ecx,0x200
c0004610:	89 d8                	mov    eax,ebx
c0004612:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004615:	e8 15 d4 ff ff       	call   c0001a2f <mem_set>
c000461a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000461d:	b9 10 00 00 00       	mov    ecx,0x10
c0004622:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0004627:	89 d8                	mov    eax,ebx
c0004629:	e8 ec d3 ff ff       	call   c0001a1a <mem_cpy>
c000462e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004632:	8d 43 58             	lea    eax,[ebx+0x58]
c0004635:	f7 d2                	not    edx
c0004637:	e8 d5 d3 ff ff       	call   c0001a11 <st_dword>
c000463c:	8d 43 18             	lea    eax,[ebx+0x18]
c000463f:	31 c9                	xor    ecx,ecx
c0004641:	89 04 24             	mov    DWORD PTR [esp],eax
c0004644:	ba 01 00 00 00       	mov    edx,0x1
c0004649:	e8 c6 d3 ff ff       	call   c0001a14 <st_qword>
c000464e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004652:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004656:	83 c2 ff             	add    edx,0xffffffff
c0004659:	89 e8                	mov    eax,ebp
c000465b:	83 d1 ff             	adc    ecx,0xffffffff
c000465e:	e8 b1 d3 ff ff       	call   c0001a14 <st_qword>
c0004663:	31 c9                	xor    ecx,ecx
c0004665:	8d 43 28             	lea    eax,[ebx+0x28]
c0004668:	ba 22 00 00 00       	mov    edx,0x22
c000466d:	e8 a2 d3 ff ff       	call   c0001a14 <st_qword>
c0004672:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004676:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000467a:	83 c2 de             	add    edx,0xffffffde
c000467d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004680:	83 d1 ff             	adc    ecx,0xffffffff
c0004683:	31 f6                	xor    esi,esi
c0004685:	e8 8a d3 ff ff       	call   c0001a14 <st_qword>
c000468a:	8d 43 54             	lea    eax,[ebx+0x54]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 7a d3 ff ff       	call   c0001a11 <st_dword>
c0004697:	8d 43 50             	lea    eax,[ebx+0x50]
c000469a:	ba 80 00 00 00       	mov    edx,0x80
c000469f:	e8 6d d3 ff ff       	call   c0001a11 <st_dword>
c00046a4:	ba 02 00 00 00       	mov    edx,0x2
c00046a9:	89 f8                	mov    eax,edi
c00046ab:	e8 61 d3 ff ff       	call   c0001a11 <st_dword>
c00046b0:	8d 53 38             	lea    edx,[ebx+0x38]
c00046b3:	b9 10 00 00 00       	mov    ecx,0x10
c00046b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046bc:	e8 ad d9 ff ff       	call   c000206e <make_rand>
c00046c1:	83 c8 ff             	or     eax,0xffffffff
c00046c4:	46                   	inc    esi
c00046c5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ca:	e8 fb d8 ff ff       	call   c0001fca <crc32>
c00046cf:	83 fe 5c             	cmp    esi,0x5c
c00046d2:	75 f0                	jne    c00046c4 <create_partition+0x359>
c00046d4:	f7 d0                	not    eax
c00046d6:	8d 73 10             	lea    esi,[ebx+0x10]
c00046d9:	89 c2                	mov    edx,eax
c00046db:	89 f0                	mov    eax,esi
c00046dd:	e8 2f d3 ff ff       	call   c0001a11 <st_dword>
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	6a 01                	push   0x1
c00046e7:	6a 00                	push   0x0
c00046e9:	6a 01                	push   0x1
c00046eb:	53                   	push   ebx
c00046ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046f0:	e8 71 d2 ff ff       	call   c0001966 <disk_write>
c00046f5:	83 c4 20             	add    esp,0x20
c00046f8:	85 c0                	test   eax,eax
c00046fa:	0f 85 9c fc ff ff    	jne    c000439c <create_partition+0x31>
c0004700:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004704:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004708:	83 c2 ff             	add    edx,0xffffffff
c000470b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000470e:	83 d1 ff             	adc    ecx,0xffffffff
c0004711:	e8 fe d2 ff ff       	call   c0001a14 <st_qword>
c0004716:	ba 01 00 00 00       	mov    edx,0x1
c000471b:	31 c9                	xor    ecx,ecx
c000471d:	89 e8                	mov    eax,ebp
c000471f:	e8 f0 d2 ff ff       	call   c0001a14 <st_qword>
c0004724:	89 f8                	mov    eax,edi
c0004726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000472a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000472e:	31 ff                	xor    edi,edi
c0004730:	e8 df d2 ff ff       	call   c0001a14 <st_qword>
c0004735:	89 f0                	mov    eax,esi
c0004737:	31 d2                	xor    edx,edx
c0004739:	e8 d3 d2 ff ff       	call   c0001a11 <st_dword>
c000473e:	83 c8 ff             	or     eax,0xffffffff
c0004741:	47                   	inc    edi
c0004742:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004747:	e8 7e d8 ff ff       	call   c0001fca <crc32>
c000474c:	83 ff 5c             	cmp    edi,0x5c
c000474f:	75 f0                	jne    c0004741 <create_partition+0x3d6>
c0004751:	f7 d0                	not    eax
c0004753:	89 c2                	mov    edx,eax
c0004755:	89 f0                	mov    eax,esi
c0004757:	e8 b5 d2 ff ff       	call   c0001a11 <st_dword>
c000475c:	83 ec 0c             	sub    esp,0xc
c000475f:	6a 01                	push   0x1
c0004761:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004765:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004769:	83 c0 ff             	add    eax,0xffffffff
c000476c:	83 d2 ff             	adc    edx,0xffffffff
c000476f:	52                   	push   edx
c0004770:	50                   	push   eax
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 eb d1 ff ff       	call   c0001966 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 16 fc ff ff    	jne    c000439c <create_partition+0x31>
c0004786:	31 d2                	xor    edx,edx
c0004788:	89 d8                	mov    eax,ebx
c000478a:	b9 00 02 00 00       	mov    ecx,0x200
c000478f:	e8 9b d2 ff ff       	call   c0001a2f <mem_set>
c0004794:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000479a:	b9 10 00 00 00       	mov    ecx,0x10
c000479f:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c00047a4:	e8 71 d2 ff ff       	call   c0001a1a <mem_cpy>
c00047a9:	e9 21 01 00 00       	jmp    c00048cf <create_partition+0x564>
c00047ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047b2:	b9 05 00 00 00       	mov    ecx,0x5
c00047b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ba:	bf 08 00 00 00       	mov    edi,0x8
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	0f b6 f0             	movzx  esi,al
c00047c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c9:	f7 f6                	div    esi
c00047cb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047d0:	76 0a                	jbe    c00047dc <create_partition+0x471>
c00047d2:	d1 e7                	shl    edi,1
c00047d4:	49                   	dec    ecx
c00047d5:	75 e8                	jne    c00047bf <create_partition+0x454>
c00047d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047dc:	b9 00 02 00 00       	mov    ecx,0x200
c00047e1:	31 d2                	xor    edx,edx
c00047e3:	89 d8                	mov    eax,ebx
c00047e5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047eb:	e8 3f d2 ff ff       	call   c0001a2f <mem_set>
c00047f0:	b9 64 00 00 00       	mov    ecx,0x64
c00047f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047f8:	31 d2                	xor    edx,edx
c00047fa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004802:	f7 f1                	div    ecx
c0004804:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004809:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000480d:	89 f8                	mov    eax,edi
c000480f:	0f b6 c0             	movzx  eax,al
c0004812:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004816:	e9 80 00 00 00       	jmp    c000489b <create_partition+0x530>
c000481b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000481e:	29 cf                	sub    edi,ecx
c0004820:	89 ca                	mov    edx,ecx
c0004822:	89 f0                	mov    eax,esi
c0004824:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004829:	e8 e3 d1 ff ff       	call   c0001a11 <st_dword>
c000482e:	8d 46 04             	lea    eax,[esi+0x4]
c0004831:	89 fa                	mov    edx,edi
c0004833:	83 c6 10             	add    esi,0x10
c0004836:	e8 d6 d1 ff ff       	call   c0001a11 <st_dword>
c000483b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000483f:	31 d2                	xor    edx,edx
c0004841:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004844:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004848:	89 c8                	mov    eax,ecx
c000484a:	01 f9                	add    ecx,edi
c000484c:	f7 f5                	div    ebp
c000484e:	89 d5                	mov    ebp,edx
c0004850:	31 d2                	xor    edx,edx
c0004852:	45                   	inc    ebp
c0004853:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004857:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000485a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000485d:	89 c2                	mov    edx,eax
c000485f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004862:	c1 ea 02             	shr    edx,0x2
c0004865:	83 e2 c0             	and    edx,0xffffffc0
c0004868:	09 ea                	or     edx,ebp
c000486a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000486f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004872:	31 d2                	xor    edx,edx
c0004874:	f7 f5                	div    ebp
c0004876:	89 d7                	mov    edi,edx
c0004878:	31 d2                	xor    edx,edx
c000487a:	47                   	inc    edi
c000487b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000487f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004882:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004885:	89 c5                	mov    ebp,eax
c0004887:	c1 ed 02             	shr    ebp,0x2
c000488a:	83 e5 c0             	and    ebp,0xffffffc0
c000488d:	09 ef                	or     edi,ebp
c000488f:	89 fa                	mov    edx,edi
c0004891:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004894:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004899:	74 34                	je     c00048cf <create_partition+0x564>
c000489b:	85 c9                	test   ecx,ecx
c000489d:	74 30                	je     c00048cf <create_partition+0x564>
c000489f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00048a2:	76 2b                	jbe    c00048cf <create_partition+0x564>
c00048a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00048ac:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048af:	83 ff 64             	cmp    edi,0x64
c00048b2:	76 4b                	jbe    c00048ff <create_partition+0x594>
c00048b4:	89 f8                	mov    eax,edi
c00048b6:	01 c8                	add    eax,ecx
c00048b8:	0f 82 5d ff ff ff    	jb     c000481b <create_partition+0x4b0>
c00048be:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048c1:	0f 87 54 ff ff ff    	ja     c000481b <create_partition+0x4b0>
c00048c7:	85 ff                	test   edi,edi
c00048c9:	0f 85 51 ff ff ff    	jne    c0004820 <create_partition+0x4b5>
c00048cf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048d5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048da:	e8 2e d1 ff ff       	call   c0001a0d <st_word>
c00048df:	83 ec 0c             	sub    esp,0xc
c00048e2:	6a 01                	push   0x1
c00048e4:	6a 00                	push   0x0
c00048e6:	6a 00                	push   0x0
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 74 d0 ff ff       	call   c0001966 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 95 c0             	setne  al
c00048fa:	0f b6 c0             	movzx  eax,al
c00048fd:	eb 0e                	jmp    c000490d <create_partition+0x5a2>
c00048ff:	74 07                	je     c0004908 <create_partition+0x59d>
c0004901:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004906:	eb ac                	jmp    c00048b4 <create_partition+0x549>
c0004908:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000490b:	eb a7                	jmp    c00048b4 <create_partition+0x549>
c000490d:	83 c4 5c             	add    esp,0x5c
c0004910:	5b                   	pop    ebx
c0004911:	5e                   	pop    esi
c0004912:	5f                   	pop    edi
c0004913:	5d                   	pop    ebp
c0004914:	c3                   	ret    

c0004915 <get_fileinfo>:
c0004915:	55                   	push   ebp
c0004916:	57                   	push   edi
c0004917:	56                   	push   esi
c0004918:	53                   	push   ebx
c0004919:	83 ec 1c             	sub    esp,0x1c
c000491c:	8b 30                	mov    esi,DWORD PTR [eax]
c000491e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004922:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004926:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004929:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000492c:	0f 84 dc 01 00 00    	je     c0004b0e <get_fileinfo+0x1f9>
c0004932:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004935:	75 0f                	jne    c0004946 <get_fileinfo+0x31>
c0004937:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000493a:	83 c4 1c             	add    esp,0x1c
c000493d:	5b                   	pop    ebx
c000493e:	5e                   	pop    esi
c000493f:	5f                   	pop    edi
c0004940:	5d                   	pop    ebp
c0004941:	e9 58 d5 ff ff       	jmp    c0001e9e <get_xfileinfo>
c0004946:	89 d3                	mov    ebx,edx
c0004948:	89 c6                	mov    esi,eax
c000494a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c000494e:	74 6a                	je     c00049ba <get_fileinfo+0xa5>
c0004950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004958:	31 ed                	xor    ebp,ebp
c000495a:	31 ff                	xor    edi,edi
c000495c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004960:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004964:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004967:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000496b:	66 85 d2             	test   dx,dx
c000496e:	74 3e                	je     c00049ae <get_fileinfo+0x99>
c0004970:	66 85 ed             	test   bp,bp
c0004973:	75 0c                	jne    c0004981 <get_fileinfo+0x6c>
c0004975:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000497b:	66 3d ff 07          	cmp    ax,0x7ff
c000497f:	76 22                	jbe    c00049a3 <get_fileinfo+0x8e>
c0004981:	b9 ff 00 00 00       	mov    ecx,0xff
c0004986:	89 e8                	mov    eax,ebp
c0004988:	29 f9                	sub    ecx,edi
c000498a:	c1 e0 10             	shl    eax,0x10
c000498d:	09 d0                	or     eax,edx
c000498f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004993:	e8 a3 d1 ff ff       	call   c0001b3b <put_utf>
c0004998:	84 c0                	test   al,al
c000499a:	74 10                	je     c00049ac <get_fileinfo+0x97>
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	31 d2                	xor    edx,edx
c00049a1:	01 c7                	add    edi,eax
c00049a3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c00049a8:	89 d5                	mov    ebp,edx
c00049aa:	eb b0                	jmp    c000495c <get_fileinfo+0x47>
c00049ac:	31 ff                	xor    edi,edi
c00049ae:	66 85 ed             	test   bp,bp
c00049b1:	74 02                	je     c00049b5 <get_fileinfo+0xa0>
c00049b3:	31 ff                	xor    edi,edi
c00049b5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	31 c9                	xor    ecx,ecx
c00049be:	83 f9 0a             	cmp    ecx,0xa
c00049c1:	0f 87 ad 00 00 00    	ja     c0004a74 <get_fileinfo+0x15f>
c00049c7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ca:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049cd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049d1:	66 83 fa 20          	cmp    dx,0x20
c00049d5:	0f 84 92 00 00 00    	je     c0004a6d <get_fileinfo+0x158>
c00049db:	66 83 fa 05          	cmp    dx,0x5
c00049df:	75 05                	jne    c00049e6 <get_fileinfo+0xd1>
c00049e1:	ba e5 00 00 00       	mov    edx,0xe5
c00049e6:	83 ff 0b             	cmp    edi,0xb
c00049e9:	77 0b                	ja     c00049f6 <get_fileinfo+0xe1>
c00049eb:	83 fd 09             	cmp    ebp,0x9
c00049ee:	75 06                	jne    c00049f6 <get_fileinfo+0xe1>
c00049f0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049f5:	47                   	inc    edi
c00049f6:	0f b7 c2             	movzx  eax,dx
c00049f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049fd:	e8 6d d0 ff ff       	call   c0001a6f <dbc_1st>
c0004a02:	85 c0                	test   eax,eax
c0004a04:	74 2f                	je     c0004a35 <get_fileinfo+0x120>
c0004a06:	83 fd 08             	cmp    ebp,0x8
c0004a09:	74 2a                	je     c0004a35 <get_fileinfo+0x120>
c0004a0b:	83 fd 0b             	cmp    ebp,0xb
c0004a0e:	74 25                	je     c0004a35 <get_fileinfo+0x120>
c0004a10:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a13:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a17:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a1b:	e8 52 d0 ff ff       	call   c0001a72 <dbc_2nd>
c0004a20:	85 c0                	test   eax,eax
c0004a22:	74 11                	je     c0004a35 <get_fileinfo+0x120>
c0004a24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a2d:	c1 e2 08             	shl    edx,0x8
c0004a30:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a33:	09 c2                	or     edx,eax
c0004a35:	0f b7 d2             	movzx  edx,dx
c0004a38:	50                   	push   eax
c0004a39:	50                   	push   eax
c0004a3a:	68 b5 01 00 00       	push   0x1b5
c0004a3f:	52                   	push   edx
c0004a40:	e8 46 38 00 00       	call   c000828b <ff_oem2uni>
c0004a45:	83 c4 10             	add    esp,0x10
c0004a48:	66 85 c0             	test   ax,ax
c0004a4b:	75 04                	jne    c0004a51 <get_fileinfo+0x13c>
c0004a4d:	31 ff                	xor    edi,edi
c0004a4f:	eb 23                	jmp    c0004a74 <get_fileinfo+0x15f>
c0004a51:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a56:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a5a:	29 f9                	sub    ecx,edi
c0004a5c:	0f b7 c0             	movzx  eax,ax
c0004a5f:	e8 d7 d0 ff ff       	call   c0001b3b <put_utf>
c0004a64:	84 c0                	test   al,al
c0004a66:	74 e5                	je     c0004a4d <get_fileinfo+0x138>
c0004a68:	0f b6 c0             	movzx  eax,al
c0004a6b:	01 c7                	add    edi,eax
c0004a6d:	89 e9                	mov    ecx,ebp
c0004a6f:	e9 4a ff ff ff       	jmp    c00049be <get_fileinfo+0xa9>
c0004a74:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a79:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a7d:	75 54                	jne    c0004ad3 <get_fileinfo+0x1be>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	75 0b                	jne    c0004a8e <get_fileinfo+0x179>
c0004a83:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a87:	ba 01 00 00 00       	mov    edx,0x1
c0004a8c:	eb 33                	jmp    c0004ac1 <get_fileinfo+0x1ac>
c0004a8e:	b1 08                	mov    cl,0x8
c0004a90:	31 d2                	xor    edx,edx
c0004a92:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a98:	84 c0                	test   al,al
c0004a9a:	74 25                	je     c0004ac1 <get_fileinfo+0x1ac>
c0004a9c:	66 83 f8 2e          	cmp    ax,0x2e
c0004aa0:	74 16                	je     c0004ab8 <get_fileinfo+0x1a3>
c0004aa2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004aa5:	66 83 ff 19          	cmp    di,0x19
c0004aa9:	77 0f                	ja     c0004aba <get_fileinfo+0x1a5>
c0004aab:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aae:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004ab1:	74 07                	je     c0004aba <get_fileinfo+0x1a5>
c0004ab3:	83 c0 20             	add    eax,0x20
c0004ab6:	eb 02                	jmp    c0004aba <get_fileinfo+0x1a5>
c0004ab8:	b1 10                	mov    cl,0x10
c0004aba:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004abe:	42                   	inc    edx
c0004abf:	eb d1                	jmp    c0004a92 <get_fileinfo+0x17d>
c0004ac1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004acd:	75 04                	jne    c0004ad3 <get_fileinfo+0x1be>
c0004acf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ad3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ad9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004adc:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004adf:	83 c0 1c             	add    eax,0x1c
c0004ae2:	e8 c1 ce ff ff       	call   c00019a8 <ld_dword>
c0004ae7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004aee:	89 03                	mov    DWORD PTR [ebx],eax
c0004af0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af3:	83 c0 16             	add    eax,0x16
c0004af6:	e8 a0 ce ff ff       	call   c000199b <ld_word>
c0004afb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004aff:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b02:	83 c0 18             	add    eax,0x18
c0004b05:	e8 91 ce ff ff       	call   c000199b <ld_word>
c0004b0a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b0e:	83 c4 1c             	add    esp,0x1c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <ld_clust.isra.0>:
c0004b16:	56                   	push   esi
c0004b17:	89 c6                	mov    esi,eax
c0004b19:	53                   	push   ebx
c0004b1a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b1d:	89 d3                	mov    ebx,edx
c0004b1f:	e8 77 ce ff ff       	call   c000199b <ld_word>
c0004b24:	0f b7 c8             	movzx  ecx,ax
c0004b27:	89 f0                	mov    eax,esi
c0004b29:	3c 03                	cmp    al,0x3
c0004b2b:	75 0d                	jne    c0004b3a <ld_clust.isra.0+0x24>
c0004b2d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b30:	e8 66 ce ff ff       	call   c000199b <ld_word>
c0004b35:	c1 e0 10             	shl    eax,0x10
c0004b38:	09 c1                	or     ecx,eax
c0004b3a:	89 c8                	mov    eax,ecx
c0004b3c:	5b                   	pop    ebx
c0004b3d:	5e                   	pop    esi
c0004b3e:	c3                   	ret    

c0004b3f <st_clust.isra.1>:
c0004b3f:	56                   	push   esi
c0004b40:	89 c6                	mov    esi,eax
c0004b42:	53                   	push   ebx
c0004b43:	89 d3                	mov    ebx,edx
c0004b45:	0f b7 d1             	movzx  edx,cx
c0004b48:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b4b:	e8 bd ce ff ff       	call   c0001a0d <st_word>
c0004b50:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b53:	75 0f                	jne    c0004b64 <st_clust.isra.1+0x25>
c0004b55:	c1 e9 10             	shr    ecx,0x10
c0004b58:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b5b:	89 ca                	mov    edx,ecx
c0004b5d:	5b                   	pop    ebx
c0004b5e:	5e                   	pop    esi
c0004b5f:	e9 a9 ce ff ff       	jmp    c0001a0d <st_word>
c0004b64:	5b                   	pop    ebx
c0004b65:	5e                   	pop    esi
c0004b66:	c3                   	ret    

c0004b67 <init_alloc_info.isra.2>:
c0004b67:	56                   	push   esi
c0004b68:	53                   	push   ebx
c0004b69:	89 c6                	mov    esi,eax
c0004b6b:	89 d3                	mov    ebx,edx
c0004b6d:	51                   	push   ecx
c0004b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b70:	83 c0 34             	add    eax,0x34
c0004b73:	e8 30 ce ff ff       	call   c00019a8 <ld_dword>
c0004b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b7d:	83 c0 38             	add    eax,0x38
c0004b80:	e8 3b ce ff ff       	call   c00019c0 <ld_qword>
c0004b85:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b88:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b8d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b90:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b97:	83 e0 02             	and    eax,0x2
c0004b9a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b9d:	5b                   	pop    ebx
c0004b9e:	5b                   	pop    ebx
c0004b9f:	5e                   	pop    esi
c0004ba0:	c3                   	ret    

c0004ba1 <follow_path>:
c0004ba1:	56                   	push   esi
c0004ba2:	53                   	push   ebx
c0004ba3:	89 c3                	mov    ebx,eax
c0004ba5:	83 ec 14             	sub    esp,0x14
c0004ba8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bac:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bb2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004bb4:	80 fa 5c             	cmp    dl,0x5c
c0004bb7:	75 07                	jne    c0004bc0 <follow_path+0x1f>
c0004bb9:	40                   	inc    eax
c0004bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbe:	eb ee                	jmp    c0004bae <follow_path+0xd>
c0004bc0:	80 fa 2f             	cmp    dl,0x2f
c0004bc3:	74 f4                	je     c0004bb9 <follow_path+0x18>
c0004bc5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bcc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bd3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bd6:	77 52                	ja     c0004c2a <follow_path+0x89>
c0004bd8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bdc:	31 d2                	xor    edx,edx
c0004bde:	89 d8                	mov    eax,ebx
c0004be0:	e8 12 e3 ff ff       	call   c0002ef7 <dir_sdi>
c0004be5:	eb 7c                	jmp    c0004c63 <follow_path+0xc2>
c0004be7:	89 d8                	mov    eax,ebx
c0004be9:	e8 6e f2 ff ff       	call   c0003e5c <dir_find>
c0004bee:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bf1:	85 c0                	test   eax,eax
c0004bf3:	75 46                	jne    c0004c3b <follow_path+0x9a>
c0004bf5:	80 e2 04             	and    dl,0x4
c0004bf8:	75 69                	jne    c0004c63 <follow_path+0xc2>
c0004bfa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bfe:	74 5e                	je     c0004c5e <follow_path+0xbd>
c0004c00:	8a 06                	mov    al,BYTE PTR [esi]
c0004c02:	3c 04                	cmp    al,0x4
c0004c04:	75 41                	jne    c0004c47 <follow_path+0xa6>
c0004c06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c09:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c0d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c13:	30 c0                	xor    al,al
c0004c15:	09 d0                	or     eax,edx
c0004c17:	89 da                	mov    edx,ebx
c0004c19:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c1c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c22:	8d 46 10             	lea    eax,[esi+0x10]
c0004c25:	e8 3d ff ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004c2a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c2e:	89 d8                	mov    eax,ebx
c0004c30:	e8 a9 ed ff ff       	call   c00039de <create_name>
c0004c35:	85 c0                	test   eax,eax
c0004c37:	74 ae                	je     c0004be7 <follow_path+0x46>
c0004c39:	eb 28                	jmp    c0004c63 <follow_path+0xc2>
c0004c3b:	83 f8 04             	cmp    eax,0x4
c0004c3e:	75 23                	jne    c0004c63 <follow_path+0xc2>
c0004c40:	80 e2 04             	and    dl,0x4
c0004c43:	74 19                	je     c0004c5e <follow_path+0xbd>
c0004c45:	eb 1c                	jmp    c0004c63 <follow_path+0xc2>
c0004c47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c4a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c50:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c54:	e8 bd fe ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004c59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c5c:	eb cc                	jmp    c0004c2a <follow_path+0x89>
c0004c5e:	b8 05 00 00 00       	mov    eax,0x5
c0004c63:	83 c4 14             	add    esp,0x14
c0004c66:	5b                   	pop    ebx
c0004c67:	5e                   	pop    esi
c0004c68:	c3                   	ret    

c0004c69 <f_mount>:
c0004c69:	53                   	push   ebx
c0004c6a:	83 ec 18             	sub    esp,0x18
c0004c6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c7d:	e8 fb d2 ff ff       	call   c0001f7d <get_ldnumber>
c0004c82:	89 c2                	mov    edx,eax
c0004c84:	b8 0b 00 00 00       	mov    eax,0xb
c0004c89:	85 d2                	test   edx,edx
c0004c8b:	78 39                	js     c0004cc6 <f_mount+0x5d>
c0004c8d:	8b 04 95 40 37 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc8c0]
c0004c94:	85 c0                	test   eax,eax
c0004c96:	74 03                	je     c0004c9b <f_mount+0x32>
c0004c98:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9f:	85 c0                	test   eax,eax
c0004ca1:	74 03                	je     c0004ca6 <f_mount+0x3d>
c0004ca3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004caa:	89 04 95 40 37 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc8c0],eax
c0004cb1:	31 c0                	xor    eax,eax
c0004cb3:	84 db                	test   bl,bl
c0004cb5:	74 0f                	je     c0004cc6 <f_mount+0x5d>
c0004cb7:	31 c9                	xor    ecx,ecx
c0004cb9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cbd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cc1:	e8 65 d7 ff ff       	call   c000242b <mount_volume>
c0004cc6:	83 c4 18             	add    esp,0x18
c0004cc9:	5b                   	pop    ebx
c0004cca:	c3                   	ret    

c0004ccb <f_open>:
c0004ccb:	55                   	push   ebp
c0004ccc:	bd 09 00 00 00       	mov    ebp,0x9
c0004cd1:	57                   	push   edi
c0004cd2:	56                   	push   esi
c0004cd3:	53                   	push   ebx
c0004cd4:	83 ec 7c             	sub    esp,0x7c
c0004cd7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cde:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ce5:	85 db                	test   ebx,ebx
c0004ce7:	0f 84 10 04 00 00    	je     c00050fd <f_open+0x432>
c0004ced:	89 fe                	mov    esi,edi
c0004cef:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cf3:	83 e6 3f             	and    esi,0x3f
c0004cf6:	89 f0                	mov    eax,esi
c0004cf8:	0f b6 c8             	movzx  ecx,al
c0004cfb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d02:	e8 24 d7 ff ff       	call   c000242b <mount_volume>
c0004d07:	89 c5                	mov    ebp,eax
c0004d09:	85 c0                	test   eax,eax
c0004d0b:	0f 85 e6 03 00 00    	jne    c00050f7 <f_open+0x42c>
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	bd 11 00 00 00       	mov    ebp,0x11
c0004d1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d1e:	83 ec 0c             	sub    esp,0xc
c0004d21:	68 60 04 00 00       	push   0x460
c0004d26:	e8 a3 34 00 00       	call   c00081ce <ff_memalloc>
c0004d2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d2f:	83 c4 10             	add    esp,0x10
c0004d32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d37:	0f 84 c0 03 00 00    	je     c00050fd <f_open+0x432>
c0004d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d45:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d4b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d4e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d51:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d58:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d5c:	e8 40 fe ff ff       	call   c0004ba1 <follow_path>
c0004d61:	89 c5                	mov    ebp,eax
c0004d63:	85 c0                	test   eax,eax
c0004d65:	75 0c                	jne    c0004d73 <f_open+0xa8>
c0004d67:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d6c:	79 05                	jns    c0004d73 <f_open+0xa8>
c0004d6e:	bd 06 00 00 00       	mov    ebp,0x6
c0004d73:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d79:	0f 84 84 01 00 00    	je     c0004f03 <f_open+0x238>
c0004d7f:	85 ed                	test   ebp,ebp
c0004d81:	74 20                	je     c0004da3 <f_open+0xd8>
c0004d83:	83 fd 04             	cmp    ebp,0x4
c0004d86:	0f 85 58 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004d8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d90:	83 ce 08             	or     esi,0x8
c0004d93:	e8 8a f2 ff ff       	call   c0004022 <dir_register>
c0004d98:	89 c5                	mov    ebp,eax
c0004d9a:	85 c0                	test   eax,eax
c0004d9c:	74 2f                	je     c0004dcd <f_open+0x102>
c0004d9e:	e9 41 03 00 00       	jmp    c00050e4 <f_open+0x419>
c0004da3:	bd 07 00 00 00       	mov    ebp,0x7
c0004da8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004dad:	0f 85 31 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004db3:	bd 08 00 00 00       	mov    ebp,0x8
c0004db8:	f7 c7 04 00 00 00    	test   edi,0x4
c0004dbe:	0f 85 20 03 00 00    	jne    c00050e4 <f_open+0x419>
c0004dc4:	83 e7 08             	and    edi,0x8
c0004dc7:	0f 84 65 01 00 00    	je     c0004f32 <f_open+0x267>
c0004dcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dd1:	8a 02                	mov    al,BYTE PTR [edx]
c0004dd3:	3c 04                	cmp    al,0x4
c0004dd5:	0f 85 97 00 00 00    	jne    c0004e72 <f_open+0x1a7>
c0004ddb:	8d 42 10             	lea    eax,[edx+0x10]
c0004dde:	89 13                	mov    DWORD PTR [ebx],edx
c0004de0:	89 da                	mov    edx,ebx
c0004de2:	e8 80 fd ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004de7:	31 d2                	xor    edx,edx
c0004de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ded:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004df2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004df5:	83 c0 02             	add    eax,0x2
c0004df8:	e8 32 cc ff ff       	call   c0001a2f <mem_set>
c0004dfd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e02:	31 d2                	xor    edx,edx
c0004e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0b:	83 c0 26             	add    eax,0x26
c0004e0e:	e8 1c cc ff ff       	call   c0001a2f <mem_set>
c0004e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e17:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e1a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e1e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e26:	83 c0 08             	add    eax,0x8
c0004e29:	e8 e3 cb ff ff       	call   c0001a11 <st_dword>
c0004e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e32:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e35:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3d:	e8 b7 ea ff ff       	call   c00038f9 <store_xdir>
c0004e42:	89 c5                	mov    ebp,eax
c0004e44:	85 c0                	test   eax,eax
c0004e46:	0f 85 98 02 00 00    	jne    c00050e4 <f_open+0x419>
c0004e4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e4f:	85 d2                	test   edx,edx
c0004e51:	0f 84 db 00 00 00    	je     c0004f32 <f_open+0x267>
c0004e57:	31 c9                	xor    ecx,ecx
c0004e59:	89 d8                	mov    eax,ebx
c0004e5b:	e8 8e e3 ff ff       	call   c00031ee <remove_chain>
c0004e60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e64:	89 c5                	mov    ebp,eax
c0004e66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e69:	48                   	dec    eax
c0004e6a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e6d:	e9 b8 00 00 00       	jmp    c0004f2a <f_open+0x25f>
c0004e72:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e76:	89 ea                	mov    edx,ebp
c0004e78:	e8 99 fc ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004e7d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e82:	89 c7                	mov    edi,eax
c0004e84:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e87:	e8 85 cb ff ff       	call   c0001a11 <st_dword>
c0004e8c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e90:	31 c9                	xor    ecx,ecx
c0004e92:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e9e:	e8 9c fc ff ff       	call   c0004b3f <st_clust.isra.1>
c0004ea3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ea7:	31 d2                	xor    edx,edx
c0004ea9:	83 c0 1c             	add    eax,0x1c
c0004eac:	e8 60 cb ff ff       	call   c0001a11 <st_dword>
c0004eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb5:	85 ff                	test   edi,edi
c0004eb7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ebb:	74 75                	je     c0004f32 <f_open+0x267>
c0004ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec1:	31 c9                	xor    ecx,ecx
c0004ec3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004ec6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ec9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ecd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ed1:	89 fa                	mov    edx,edi
c0004ed3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed7:	e8 12 e3 ff ff       	call   c00031ee <remove_chain>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	85 c0                	test   eax,eax
c0004ee0:	0f 85 fe 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004ee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004eea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef2:	4f                   	dec    edi
c0004ef3:	e8 81 d2 ff ff       	call   c0002179 <move_window>
c0004ef8:	89 c5                	mov    ebp,eax
c0004efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004efe:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f01:	eb 27                	jmp    c0004f2a <f_open+0x25f>
c0004f03:	85 ed                	test   ebp,ebp
c0004f05:	0f 85 d9 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f0b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f0f:	bd 04 00 00 00       	mov    ebp,0x4
c0004f14:	a8 10                	test   al,0x10
c0004f16:	0f 85 c8 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f1c:	83 e7 02             	and    edi,0x2
c0004f1f:	74 11                	je     c0004f32 <f_open+0x267>
c0004f21:	bd 07 00 00 00       	mov    ebp,0x7
c0004f26:	a8 01                	test   al,0x1
c0004f28:	eb 02                	jmp    c0004f2c <f_open+0x261>
c0004f2a:	85 ed                	test   ebp,ebp
c0004f2c:	0f 85 b2 01 00 00    	jne    c00050e4 <f_open+0x419>
c0004f32:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f38:	74 03                	je     c0004f3d <f_open+0x272>
c0004f3a:	83 ce 40             	or     esi,0x40
c0004f3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f41:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f44:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f47:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f4a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f4d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f51:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f54:	8a 02                	mov    al,BYTE PTR [edx]
c0004f56:	3c 04                	cmp    al,0x4
c0004f58:	75 2a                	jne    c0004f84 <f_open+0x2b9>
c0004f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f5e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f63:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f6a:	30 c0                	xor    al,al
c0004f6c:	09 c8                	or     eax,ecx
c0004f6e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f75:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f78:	8d 42 10             	lea    eax,[edx+0x10]
c0004f7b:	89 da                	mov    edx,ebx
c0004f7d:	e8 e5 fb ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0004f82:	eb 1c                	jmp    c0004fa0 <f_open+0x2d5>
c0004f84:	89 fa                	mov    edx,edi
c0004f86:	e8 8b fb ff ff       	call   c0004b16 <ld_clust.isra.0>
c0004f8b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f8e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f91:	e8 12 ca ff ff       	call   c00019a8 <ld_dword>
c0004f96:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f9d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004fab:	89 03                	mov    DWORD PTR [ebx],eax
c0004fad:	31 d2                	xor    edx,edx
c0004faf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fb3:	b9 00 02 00 00       	mov    ecx,0x200
c0004fb8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fbc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fc0:	89 f0                	mov    eax,esi
c0004fc2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fc9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fcc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fd3:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fd6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fdd:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fe8:	e8 42 ca ff ff       	call   c0001a2f <mem_set>
c0004fed:	83 e6 20             	and    esi,0x20
c0004ff0:	75 07                	jne    c0004ff9 <f_open+0x32e>
c0004ff2:	31 ed                	xor    ebp,ebp
c0004ff4:	e9 eb 00 00 00       	jmp    c00050e4 <f_open+0x419>
c0004ff9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ffc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000500b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000500f:	74 e1                	je     c0004ff2 <f_open+0x327>
c0005011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005019:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000501c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000501f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005023:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005026:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000502a:	31 ff                	xor    edi,edi
c000502c:	c1 e5 09             	shl    ebp,0x9
c000502f:	89 ee                	mov    esi,ebp
c0005031:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005035:	89 f8                	mov    eax,edi
c0005037:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000503b:	73 22                	jae    c000505f <f_open+0x394>
c000503d:	89 d8                	mov    eax,ebx
c000503f:	e8 bd dc ff ff       	call   c0002d01 <get_fat>
c0005044:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005048:	89 c2                	mov    edx,eax
c000504a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000504e:	83 f8 01             	cmp    eax,0x1
c0005051:	76 10                	jbe    c0005063 <f_open+0x398>
c0005053:	83 f8 ff             	cmp    eax,0xffffffff
c0005056:	75 d9                	jne    c0005031 <f_open+0x366>
c0005058:	bd 01 00 00 00       	mov    ebp,0x1
c000505d:	eb 09                	jmp    c0005068 <f_open+0x39d>
c000505f:	31 ed                	xor    ebp,ebp
c0005061:	eb 05                	jmp    c0005068 <f_open+0x39d>
c0005063:	bd 02 00 00 00       	mov    ebp,0x2
c0005068:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000506b:	85 ed                	test   ebp,ebp
c000506d:	75 75                	jne    c00050e4 <f_open+0x419>
c000506f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005073:	25 ff 01 00 00       	and    eax,0x1ff
c0005078:	0f 84 74 ff ff ff    	je     c0004ff2 <f_open+0x327>
c000507e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005082:	bd 02 00 00 00       	mov    ebp,0x2
c0005087:	89 c8                	mov    eax,ecx
c0005089:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000508d:	e8 a2 cb ff ff       	call   c0001c34 <clst2sect>
c0005092:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005096:	89 d7                	mov    edi,edx
c0005098:	09 c7                	or     edi,eax
c000509a:	74 48                	je     c00050e4 <f_open+0x419>
c000509c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00050a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00050a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00050ac:	0f ac fe 09          	shrd   esi,edi,0x9
c00050b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050b8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050bb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050bf:	83 ec 0c             	sub    esp,0xc
c00050c2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050c5:	6a 01                	push   0x1
c00050c7:	52                   	push   edx
c00050c8:	50                   	push   eax
c00050c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050d1:	50                   	push   eax
c00050d2:	e8 79 c8 ff ff       	call   c0001950 <disk_read>
c00050d7:	83 c4 20             	add    esp,0x20
c00050da:	85 c0                	test   eax,eax
c00050dc:	0f 95 c0             	setne  al
c00050df:	0f b6 c0             	movzx  eax,al
c00050e2:	89 c5                	mov    ebp,eax
c00050e4:	83 ec 0c             	sub    esp,0xc
c00050e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050eb:	e8 f4 30 00 00       	call   c00081e4 <ff_memfree>
c00050f0:	83 c4 10             	add    esp,0x10
c00050f3:	85 ed                	test   ebp,ebp
c00050f5:	74 06                	je     c00050fd <f_open+0x432>
c00050f7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050fd:	83 c4 7c             	add    esp,0x7c
c0005100:	89 e8                	mov    eax,ebp
c0005102:	5b                   	pop    ebx
c0005103:	5e                   	pop    esi
c0005104:	5f                   	pop    edi
c0005105:	5d                   	pop    ebp
c0005106:	c3                   	ret    

c0005107 <f_read>:
c0005107:	55                   	push   ebp
c0005108:	57                   	push   edi
c0005109:	56                   	push   esi
c000510a:	53                   	push   ebx
c000510b:	83 ec 2c             	sub    esp,0x2c
c000510e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005112:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005116:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000511c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005120:	89 d8                	mov    eax,ebx
c0005122:	e8 77 cf ff ff       	call   c000209e <validate>
c0005127:	89 c5                	mov    ebp,eax
c0005129:	85 c0                	test   eax,eax
c000512b:	0f 85 4c 02 00 00    	jne    c000537d <f_read+0x276>
c0005131:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005135:	85 ed                	test   ebp,ebp
c0005137:	0f 85 40 02 00 00    	jne    c000537d <f_read+0x276>
c000513d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005141:	0f 84 31 02 00 00    	je     c0005378 <f_read+0x271>
c0005147:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000514a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000514d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005150:	bf 00 00 00 00       	mov    edi,0x0
c0005155:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005158:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000515c:	89 d1                	mov    ecx,edx
c000515e:	19 f9                	sbb    ecx,edi
c0005160:	0f 83 cf 00 00 00    	jae    c0005235 <f_read+0x12e>
c0005166:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000516a:	e9 c6 00 00 00       	jmp    c0005235 <f_read+0x12e>
c000516f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005172:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005175:	89 d0                	mov    eax,edx
c0005177:	25 ff 01 00 00       	and    eax,0x1ff
c000517c:	0f 85 c9 01 00 00    	jne    c000534b <f_read+0x244>
c0005182:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005186:	89 d6                	mov    esi,edx
c0005188:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000518c:	89 cf                	mov    edi,ecx
c000518e:	48                   	dec    eax
c000518f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005193:	21 f0                	and    eax,esi
c0005195:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005199:	0f 84 a6 00 00 00    	je     c0005245 <f_read+0x13e>
c000519f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00051a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00051a6:	89 c8                	mov    eax,ecx
c00051a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00051ab:	e8 84 ca ff ff       	call   c0001c34 <clst2sect>
c00051b0:	89 d7                	mov    edi,edx
c00051b2:	09 c7                	or     edi,eax
c00051b4:	0f 84 b4 00 00 00    	je     c000526e <f_read+0x167>
c00051ba:	31 ff                	xor    edi,edi
c00051bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051c0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051c3:	01 c6                	add    esi,eax
c00051c5:	11 d7                	adc    edi,edx
c00051c7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051cf:	0f 86 fd 00 00 00    	jbe    c00052d2 <f_read+0x1cb>
c00051d5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051dd:	c1 e8 09             	shr    eax,0x9
c00051e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051e7:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ea:	39 c2                	cmp    edx,eax
c00051ec:	76 07                	jbe    c00051f5 <f_read+0xee>
c00051ee:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00051f5:	83 ec 0c             	sub    esp,0xc
c00051f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051fc:	57                   	push   edi
c00051fd:	56                   	push   esi
c00051fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005202:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005206:	50                   	push   eax
c0005207:	e8 44 c7 ff ff       	call   c0001950 <disk_read>
c000520c:	83 c4 20             	add    esp,0x20
c000520f:	85 c0                	test   eax,eax
c0005211:	75 6e                	jne    c0005281 <f_read+0x17a>
c0005213:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005217:	78 7e                	js     c0005297 <f_read+0x190>
c0005219:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000521c:	c1 e6 09             	shl    esi,0x9
c000521f:	31 ff                	xor    edi,edi
c0005221:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005225:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005229:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000522d:	01 30                	add    DWORD PTR [eax],esi
c000522f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005232:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005235:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000523a:	0f 85 2f ff ff ff    	jne    c000516f <f_read+0x68>
c0005240:	e9 38 01 00 00       	jmp    c000537d <f_read+0x276>
c0005245:	89 c8                	mov    eax,ecx
c0005247:	09 d0                	or     eax,edx
c0005249:	75 05                	jne    c0005250 <f_read+0x149>
c000524b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000524e:	eb 19                	jmp    c0005269 <f_read+0x162>
c0005250:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005254:	74 09                	je     c000525f <f_read+0x158>
c0005256:	89 d8                	mov    eax,ebx
c0005258:	e8 f8 c9 ff ff       	call   c0001c55 <clmt_clust>
c000525d:	eb 0a                	jmp    c0005269 <f_read+0x162>
c000525f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005262:	89 d8                	mov    eax,ebx
c0005264:	e8 98 da ff ff       	call   c0002d01 <get_fat>
c0005269:	83 f8 01             	cmp    eax,0x1
c000526c:	77 0e                	ja     c000527c <f_read+0x175>
c000526e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005272:	bd 02 00 00 00       	mov    ebp,0x2
c0005277:	e9 01 01 00 00       	jmp    c000537d <f_read+0x276>
c000527c:	83 f8 ff             	cmp    eax,0xffffffff
c000527f:	75 0e                	jne    c000528f <f_read+0x188>
c0005281:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005285:	bd 01 00 00 00       	mov    ebp,0x1
c000528a:	e9 ee 00 00 00       	jmp    c000537d <f_read+0x276>
c000528f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005292:	e9 08 ff ff ff       	jmp    c000519f <f_read+0x98>
c0005297:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000529a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000529d:	29 f0                	sub    eax,esi
c000529f:	19 fa                	sbb    edx,edi
c00052a1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00052a4:	89 d7                	mov    edi,edx
c00052a6:	ba 00 00 00 00       	mov    edx,0x0
c00052ab:	89 f9                	mov    ecx,edi
c00052ad:	19 d1                	sbb    ecx,edx
c00052af:	0f 83 64 ff ff ff    	jae    c0005219 <f_read+0x112>
c00052b5:	89 c7                	mov    edi,eax
c00052b7:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ba:	c1 e7 09             	shl    edi,0x9
c00052bd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052c1:	b9 00 02 00 00       	mov    ecx,0x200
c00052c6:	01 f8                	add    eax,edi
c00052c8:	e8 4d c7 ff ff       	call   c0001a1a <mem_cpy>
c00052cd:	e9 47 ff ff ff       	jmp    c0005219 <f_read+0x112>
c00052d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052d5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00052db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052df:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052e3:	75 05                	jne    c00052ea <f_read+0x1e3>
c00052e5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052e8:	74 5b                	je     c0005345 <f_read+0x23e>
c00052ea:	8d 43 50             	lea    eax,[ebx+0x50]
c00052ed:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052f5:	79 2a                	jns    c0005321 <f_read+0x21a>
c00052f7:	83 ec 0c             	sub    esp,0xc
c00052fa:	6a 01                	push   0x1
c00052fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005308:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000530c:	50                   	push   eax
c000530d:	e8 54 c6 ff ff       	call   c0001966 <disk_write>
c0005312:	83 c4 20             	add    esp,0x20
c0005315:	85 c0                	test   eax,eax
c0005317:	0f 85 64 ff ff ff    	jne    c0005281 <f_read+0x17a>
c000531d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005321:	83 ec 0c             	sub    esp,0xc
c0005324:	6a 01                	push   0x1
c0005326:	57                   	push   edi
c0005327:	56                   	push   esi
c0005328:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000532c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005330:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005334:	50                   	push   eax
c0005335:	e8 16 c6 ff ff       	call   c0001950 <disk_read>
c000533a:	83 c4 20             	add    esp,0x20
c000533d:	85 c0                	test   eax,eax
c000533f:	0f 85 3c ff ff ff    	jne    c0005281 <f_read+0x17a>
c0005345:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005348:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000534b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000534e:	ba 00 02 00 00       	mov    edx,0x200
c0005353:	25 ff 01 00 00       	and    eax,0x1ff
c0005358:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000535c:	29 c2                	sub    edx,eax
c000535e:	39 d6                	cmp    esi,edx
c0005360:	76 02                	jbe    c0005364 <f_read+0x25d>
c0005362:	89 d6                	mov    esi,edx
c0005364:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005368:	89 f1                	mov    ecx,esi
c000536a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000536e:	e8 a7 c6 ff ff       	call   c0001a1a <mem_cpy>
c0005373:	e9 a7 fe ff ff       	jmp    c000521f <f_read+0x118>
c0005378:	bd 07 00 00 00       	mov    ebp,0x7
c000537d:	83 c4 2c             	add    esp,0x2c
c0005380:	89 e8                	mov    eax,ebp
c0005382:	5b                   	pop    ebx
c0005383:	5e                   	pop    esi
c0005384:	5f                   	pop    edi
c0005385:	5d                   	pop    ebp
c0005386:	c3                   	ret    

c0005387 <f_write>:
c0005387:	55                   	push   ebp
c0005388:	57                   	push   edi
c0005389:	56                   	push   esi
c000538a:	53                   	push   ebx
c000538b:	83 ec 2c             	sub    esp,0x2c
c000538e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005392:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000539c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053a0:	89 d8                	mov    eax,ebx
c00053a2:	e8 f7 cc ff ff       	call   c000209e <validate>
c00053a7:	89 c5                	mov    ebp,eax
c00053a9:	85 c0                	test   eax,eax
c00053ab:	0f 85 86 02 00 00    	jne    c0005637 <f_write+0x2b0>
c00053b1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053b5:	85 ed                	test   ebp,ebp
c00053b7:	0f 85 7a 02 00 00    	jne    c0005637 <f_write+0x2b0>
c00053bd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053c1:	0f 84 6b 02 00 00    	je     c0005632 <f_write+0x2ab>
c00053c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053ce:	0f 84 43 01 00 00    	je     c0005517 <f_write+0x190>
c00053d4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053d7:	89 c1                	mov    ecx,eax
c00053d9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053dd:	0f 83 34 01 00 00    	jae    c0005517 <f_write+0x190>
c00053e3:	f7 d0                	not    eax
c00053e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053e9:	e9 29 01 00 00       	jmp    c0005517 <f_write+0x190>
c00053ee:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053f1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053f4:	89 d0                	mov    eax,edx
c00053f6:	25 ff 01 00 00       	and    eax,0x1ff
c00053fb:	0f 85 00 02 00 00    	jne    c0005601 <f_write+0x27a>
c0005401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005405:	89 d6                	mov    esi,edx
c0005407:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000540b:	89 cf                	mov    edi,ecx
c000540d:	48                   	dec    eax
c000540e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005412:	21 f0                	and    eax,esi
c0005414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005418:	0f 84 06 01 00 00    	je     c0005524 <f_write+0x19d>
c000541e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005422:	0f 88 6e 01 00 00    	js     c0005596 <f_write+0x20f>
c0005428:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000542f:	89 c8                	mov    eax,ecx
c0005431:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005435:	e8 fa c7 ff ff       	call   c0001c34 <clst2sect>
c000543a:	89 d1                	mov    ecx,edx
c000543c:	09 c1                	or     ecx,eax
c000543e:	0f 84 1c 01 00 00    	je     c0005560 <f_write+0x1d9>
c0005444:	31 ff                	xor    edi,edi
c0005446:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000544e:	01 c6                	add    esi,eax
c0005450:	11 d7                	adc    edi,edx
c0005452:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545a:	0f 86 63 01 00 00    	jbe    c00055c3 <f_write+0x23c>
c0005460:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005468:	c1 e8 09             	shr    eax,0x9
c000546b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005477:	39 c2                	cmp    edx,eax
c0005479:	76 08                	jbe    c0005483 <f_write+0xfc>
c000547b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000548a:	57                   	push   edi
c000548b:	56                   	push   esi
c000548c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005490:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005494:	50                   	push   eax
c0005495:	e8 cc c4 ff ff       	call   c0001966 <disk_write>
c000549a:	83 c4 20             	add    esp,0x20
c000549d:	85 c0                	test   eax,eax
c000549f:	0f 85 ce 00 00 00    	jne    c0005573 <f_write+0x1ec>
c00054a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054ab:	29 f0                	sub    eax,esi
c00054ad:	19 fa                	sbb    edx,edi
c00054af:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054b3:	89 d7                	mov    edi,edx
c00054b5:	ba 00 00 00 00       	mov    edx,0x0
c00054ba:	89 f9                	mov    ecx,edi
c00054bc:	19 d1                	sbb    ecx,edx
c00054be:	73 1c                	jae    c00054dc <f_write+0x155>
c00054c0:	89 c7                	mov    edi,eax
c00054c2:	b9 00 02 00 00       	mov    ecx,0x200
c00054c7:	c1 e7 09             	shl    edi,0x9
c00054ca:	8d 43 50             	lea    eax,[ebx+0x50]
c00054cd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054d1:	89 fa                	mov    edx,edi
c00054d3:	e8 42 c5 ff ff       	call   c0001a1a <mem_cpy>
c00054d8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054dc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054e0:	c1 e6 09             	shl    esi,0x9
c00054e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054e7:	31 ff                	xor    edi,edi
c00054e9:	01 30                	add    DWORD PTR [eax],esi
c00054eb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054f6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054fc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054ff:	89 c1                	mov    ecx,eax
c0005501:	39 f2                	cmp    edx,esi
c0005503:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005506:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005509:	19 f9                	sbb    ecx,edi
c000550b:	73 04                	jae    c0005511 <f_write+0x18a>
c000550d:	89 f2                	mov    edx,esi
c000550f:	89 f8                	mov    eax,edi
c0005511:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005514:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005517:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000551c:	0f 85 cc fe ff ff    	jne    c00053ee <f_write+0x67>
c0005522:	eb 2e                	jmp    c0005552 <f_write+0x1cb>
c0005524:	89 c8                	mov    eax,ecx
c0005526:	09 d0                	or     eax,edx
c0005528:	75 0b                	jne    c0005535 <f_write+0x1ae>
c000552a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000552d:	31 d2                	xor    edx,edx
c000552f:	85 c0                	test   eax,eax
c0005531:	75 28                	jne    c000555b <f_write+0x1d4>
c0005533:	eb 12                	jmp    c0005547 <f_write+0x1c0>
c0005535:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005539:	74 09                	je     c0005544 <f_write+0x1bd>
c000553b:	89 d8                	mov    eax,ebx
c000553d:	e8 13 c7 ff ff       	call   c0001c55 <clmt_clust>
c0005542:	eb 0a                	jmp    c000554e <f_write+0x1c7>
c0005544:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005547:	89 d8                	mov    eax,ebx
c0005549:	e8 a1 da ff ff       	call   c0002fef <create_chain>
c000554e:	85 c0                	test   eax,eax
c0005550:	75 09                	jne    c000555b <f_write+0x1d4>
c0005552:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005556:	e9 dc 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c000555b:	83 f8 01             	cmp    eax,0x1
c000555e:	75 0e                	jne    c000556e <f_write+0x1e7>
c0005560:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005564:	bd 02 00 00 00       	mov    ebp,0x2
c0005569:	e9 c9 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c000556e:	83 f8 ff             	cmp    eax,0xffffffff
c0005571:	75 0e                	jne    c0005581 <f_write+0x1fa>
c0005573:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005577:	bd 01 00 00 00       	mov    ebp,0x1
c000557c:	e9 b6 00 00 00       	jmp    c0005637 <f_write+0x2b0>
c0005581:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005584:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005588:	0f 85 90 fe ff ff    	jne    c000541e <f_write+0x97>
c000558e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005591:	e9 88 fe ff ff       	jmp    c000541e <f_write+0x97>
c0005596:	83 ec 0c             	sub    esp,0xc
c0005599:	8d 43 50             	lea    eax,[ebx+0x50]
c000559c:	6a 01                	push   0x1
c000559e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00055a1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00055a4:	50                   	push   eax
c00055a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055ad:	50                   	push   eax
c00055ae:	e8 b3 c3 ff ff       	call   c0001966 <disk_write>
c00055b3:	83 c4 20             	add    esp,0x20
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 b9                	jne    c0005573 <f_write+0x1ec>
c00055ba:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055be:	e9 65 fe ff ff       	jmp    c0005428 <f_write+0xa1>
c00055c3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055c6:	75 05                	jne    c00055cd <f_write+0x246>
c00055c8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055cb:	74 2e                	je     c00055fb <f_write+0x274>
c00055cd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055d3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055d6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055d9:	73 20                	jae    c00055fb <f_write+0x274>
c00055db:	83 ec 0c             	sub    esp,0xc
c00055de:	8d 43 50             	lea    eax,[ebx+0x50]
c00055e1:	6a 01                	push   0x1
c00055e3:	57                   	push   edi
c00055e4:	56                   	push   esi
c00055e5:	50                   	push   eax
c00055e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ea:	50                   	push   eax
c00055eb:	e8 60 c3 ff ff       	call   c0001950 <disk_read>
c00055f0:	83 c4 20             	add    esp,0x20
c00055f3:	85 c0                	test   eax,eax
c00055f5:	0f 85 78 ff ff ff    	jne    c0005573 <f_write+0x1ec>
c00055fb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055fe:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005601:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005604:	ba 00 02 00 00       	mov    edx,0x200
c0005609:	25 ff 01 00 00       	and    eax,0x1ff
c000560e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005612:	29 c2                	sub    edx,eax
c0005614:	39 d6                	cmp    esi,edx
c0005616:	76 02                	jbe    c000561a <f_write+0x293>
c0005618:	89 d6                	mov    esi,edx
c000561a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000561e:	89 f1                	mov    ecx,esi
c0005620:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005624:	e8 f1 c3 ff ff       	call   c0001a1a <mem_cpy>
c0005629:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000562d:	e9 b1 fe ff ff       	jmp    c00054e3 <f_write+0x15c>
c0005632:	bd 07 00 00 00       	mov    ebp,0x7
c0005637:	83 c4 2c             	add    esp,0x2c
c000563a:	89 e8                	mov    eax,ebp
c000563c:	5b                   	pop    ebx
c000563d:	5e                   	pop    esi
c000563e:	5f                   	pop    edi
c000563f:	5d                   	pop    ebp
c0005640:	c3                   	ret    

c0005641 <f_sync>:
c0005641:	56                   	push   esi
c0005642:	53                   	push   ebx
c0005643:	83 ec 64             	sub    esp,0x64
c0005646:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000564a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000564e:	89 d8                	mov    eax,ebx
c0005650:	e8 49 ca ff ff       	call   c000209e <validate>
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ba 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c000565d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005660:	f6 c2 40             	test   dl,0x40
c0005663:	0f 84 ae 01 00 00    	je     c0005817 <f_sync+0x1d6>
c0005669:	84 d2                	test   dl,dl
c000566b:	79 33                	jns    c00056a0 <f_sync+0x5f>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005678:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000567b:	50                   	push   eax
c000567c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005680:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005684:	50                   	push   eax
c0005685:	e8 dc c2 ff ff       	call   c0001966 <disk_write>
c000568a:	83 c4 20             	add    esp,0x20
c000568d:	89 c2                	mov    edx,eax
c000568f:	b8 01 00 00 00       	mov    eax,0x1
c0005694:	85 d2                	test   edx,edx
c0005696:	0f 85 7b 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c000569c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056a7:	0f 85 11 01 00 00    	jne    c00057be <f_sync+0x17d>
c00056ad:	89 d8                	mov    eax,ebx
c00056af:	e8 13 d6 ff ff       	call   c0002cc7 <fill_first_frag>
c00056b4:	85 c0                	test   eax,eax
c00056b6:	0f 85 5b 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c00056bc:	83 c9 ff             	or     ecx,0xffffffff
c00056bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056c2:	89 d8                	mov    eax,ebx
c00056c4:	e8 c9 d5 ff ff       	call   c0002c92 <fill_last_frag>
c00056c9:	85 c0                	test   eax,eax
c00056cb:	0f 85 46 01 00 00    	jne    c0005817 <f_sync+0x1d6>
c00056d1:	83 ec 0c             	sub    esp,0xc
c00056d4:	68 60 04 00 00       	push   0x460
c00056d9:	e8 f0 2a 00 00       	call   c00081ce <ff_memalloc>
c00056de:	83 c4 10             	add    esp,0x10
c00056e1:	89 c6                	mov    esi,eax
c00056e3:	b8 11 00 00 00       	mov    eax,0x11
c00056e8:	85 f6                	test   esi,esi
c00056ea:	0f 84 27 01 00 00    	je     c0005817 <f_sync+0x1d6>
c00056f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056f4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056fa:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056fd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005700:	89 da                	mov    edx,ebx
c0005702:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005706:	e8 af df ff ff       	call   c00036ba <load_obj_xdir>
c000570b:	85 c0                	test   eax,eax
c000570d:	0f 85 95 00 00 00    	jne    c00057a8 <f_sync+0x167>
c0005713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000571a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c000571e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005721:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005724:	83 ca 01             	or     edx,0x1
c0005727:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000572a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000572d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005730:	83 c0 34             	add    eax,0x34
c0005733:	e8 d9 c2 ff ff       	call   c0001a11 <st_dword>
c0005738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000573c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005742:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005745:	83 c0 38             	add    eax,0x38
c0005748:	e8 c7 c2 ff ff       	call   c0001a14 <st_qword>
c000574d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005757:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000575a:	83 c0 28             	add    eax,0x28
c000575d:	e8 b2 c2 ff ff       	call   c0001a14 <st_qword>
c0005762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005766:	ba 00 00 21 50       	mov    edx,0x50210000
c000576b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576e:	83 c0 0c             	add    eax,0xc
c0005771:	e8 9b c2 ff ff       	call   c0001a11 <st_dword>
c0005776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000577d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005781:	31 d2                	xor    edx,edx
c0005783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005786:	83 c0 10             	add    eax,0x10
c0005789:	e8 83 c2 ff ff       	call   c0001a11 <st_dword>
c000578e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005792:	e8 62 e1 ff ff       	call   c00038f9 <store_xdir>
c0005797:	85 c0                	test   eax,eax
c0005799:	75 0d                	jne    c00057a8 <f_sync+0x167>
c000579b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000579f:	e8 00 eb ff ff       	call   c00042a4 <sync_fs>
c00057a4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057ac:	83 ec 0c             	sub    esp,0xc
c00057af:	56                   	push   esi
c00057b0:	e8 2f 2a 00 00       	call   c00081e4 <ff_memfree>
c00057b5:	83 c4 10             	add    esp,0x10
c00057b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057bc:	eb 59                	jmp    c0005817 <f_sync+0x1d6>
c00057be:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057c1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057c4:	e8 b0 c9 ff ff       	call   c0002179 <move_window>
c00057c9:	85 c0                	test   eax,eax
c00057cb:	75 4a                	jne    c0005817 <f_sync+0x1d6>
c00057cd:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057d0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057d4:	89 f2                	mov    edx,esi
c00057d6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057db:	e8 5f f3 ff ff       	call   c0004b3f <st_clust.isra.1>
c00057e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057e6:	e8 26 c2 ff ff       	call   c0001a11 <st_dword>
c00057eb:	8d 46 16             	lea    eax,[esi+0x16]
c00057ee:	ba 00 00 21 50       	mov    edx,0x50210000
c00057f3:	e8 19 c2 ff ff       	call   c0001a11 <st_dword>
c00057f8:	8d 46 12             	lea    eax,[esi+0x12]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	e8 0b c2 ff ff       	call   c0001a0d <st_word>
c0005802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005806:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000580a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580e:	e8 91 ea ff ff       	call   c00042a4 <sync_fs>
c0005813:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005817:	83 c4 64             	add    esp,0x64
c000581a:	5b                   	pop    ebx
c000581b:	5e                   	pop    esi
c000581c:	c3                   	ret    

c000581d <f_close>:
c000581d:	53                   	push   ebx
c000581e:	83 ec 24             	sub    esp,0x24
c0005821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005825:	53                   	push   ebx
c0005826:	e8 16 fe ff ff       	call   c0005641 <f_sync>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	85 c0                	test   eax,eax
c0005830:	75 15                	jne    c0005847 <f_close+0x2a>
c0005832:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005836:	89 d8                	mov    eax,ebx
c0005838:	e8 61 c8 ff ff       	call   c000209e <validate>
c000583d:	85 c0                	test   eax,eax
c000583f:	75 06                	jne    c0005847 <f_close+0x2a>
c0005841:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005847:	83 c4 18             	add    esp,0x18
c000584a:	5b                   	pop    ebx
c000584b:	c3                   	ret    

c000584c <f_lseek>:
c000584c:	55                   	push   ebp
c000584d:	57                   	push   edi
c000584e:	56                   	push   esi
c000584f:	53                   	push   ebx
c0005850:	83 ec 3c             	sub    esp,0x3c
c0005853:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005857:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000585b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000585f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005862:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005866:	89 d8                	mov    eax,ebx
c0005868:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000586c:	e8 2d c8 ff ff       	call   c000209e <validate>
c0005871:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005875:	85 c0                	test   eax,eax
c0005877:	0f 85 7a 04 00 00    	jne    c0005cf7 <f_lseek+0x4ab>
c000587d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005881:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005885:	85 c0                	test   eax,eax
c0005887:	0f 85 6a 04 00 00    	jne    c0005cf7 <f_lseek+0x4ab>
c000588d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005891:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005894:	74 0c                	je     c00058a2 <f_lseek+0x56>
c0005896:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005899:	85 c0                	test   eax,eax
c000589b:	75 1f                	jne    c00058bc <f_lseek+0x70>
c000589d:	e9 b5 01 00 00       	jmp    c0005a57 <f_lseek+0x20b>
c00058a2:	83 c9 ff             	or     ecx,0xffffffff
c00058a5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00058a8:	89 d8                	mov    eax,ebx
c00058aa:	e8 e3 d3 ff ff       	call   c0002c92 <fill_last_frag>
c00058af:	85 c0                	test   eax,eax
c00058b1:	74 e3                	je     c0005896 <f_lseek+0x4a>
c00058b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058b7:	e9 3b 04 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c00058bc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058c1:	0f 85 ac 00 00 00    	jne    c0005973 <f_lseek+0x127>
c00058c7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058cb:	0f 85 a2 00 00 00    	jne    c0005973 <f_lseek+0x127>
c00058d1:	8d 78 04             	lea    edi,[eax+0x4]
c00058d4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00058d9:	be 02 00 00 00       	mov    esi,0x2
c00058de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058e2:	85 ed                	test   ebp,ebp
c00058e4:	74 73                	je     c0005959 <f_lseek+0x10d>
c00058e6:	89 e9                	mov    ecx,ebp
c00058e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058ef:	ff 04 24             	inc    DWORD PTR [esp]
c00058f2:	89 ca                	mov    edx,ecx
c00058f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	e8 02 d4 ff ff       	call   c0002d01 <get_fat>
c00058ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005903:	83 f8 01             	cmp    eax,0x1
c0005906:	77 11                	ja     c0005919 <f_lseek+0xcd>
c0005908:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000590c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005914:	e9 de 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c0005919:	83 f8 ff             	cmp    eax,0xffffffff
c000591c:	75 11                	jne    c000592f <f_lseek+0xe3>
c000591e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005922:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000592a:	e9 c8 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c000592f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005932:	89 c1                	mov    ecx,eax
c0005934:	39 c2                	cmp    edx,eax
c0005936:	74 b7                	je     c00058ef <f_lseek+0xa3>
c0005938:	83 c6 02             	add    esi,0x2
c000593b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000593f:	72 0b                	jb     c000594c <f_lseek+0x100>
c0005941:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005944:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005947:	89 0f                	mov    DWORD PTR [edi],ecx
c0005949:	83 c7 08             	add    edi,0x8
c000594c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005950:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005953:	76 04                	jbe    c0005959 <f_lseek+0x10d>
c0005955:	89 c5                	mov    ebp,eax
c0005957:	eb 8d                	jmp    c00058e6 <f_lseek+0x9a>
c0005959:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000595c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005960:	89 30                	mov    DWORD PTR [eax],esi
c0005962:	0f 87 87 03 00 00    	ja     c0005cef <f_lseek+0x4a3>
c0005968:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000596e:	e9 84 03 00 00       	jmp    c0005cf7 <f_lseek+0x4ab>
c0005973:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005976:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000597d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005985:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000598c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005990:	73 0f                	jae    c00059a1 <f_lseek+0x155>
c0005992:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005999:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000599d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00059a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00059ac:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059b7:	0f 84 3a 03 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c00059bd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059c5:	83 c6 ff             	add    esi,0xffffffff
c00059c8:	89 d8                	mov    eax,ebx
c00059ca:	83 d7 ff             	adc    edi,0xffffffff
c00059cd:	89 f2                	mov    edx,esi
c00059cf:	89 f9                	mov    ecx,edi
c00059d1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00059d8:	e8 78 c2 ff ff       	call   c0001c55 <clmt_clust>
c00059dd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059e1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059e4:	89 c2                	mov    edx,eax
c00059e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ea:	89 c8                	mov    eax,ecx
c00059ec:	e8 43 c2 ff ff       	call   c0001c34 <clst2sect>
c00059f1:	89 d7                	mov    edi,edx
c00059f3:	09 c7                	or     edi,eax
c00059f5:	0f 84 0d ff ff ff    	je     c0005908 <f_lseek+0xbc>
c00059fb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059ff:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a05:	0f 84 ec 02 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c0005a0b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a16:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a1a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a1e:	4d                   	dec    ebp
c0005a1f:	31 ff                	xor    edi,edi
c0005a21:	21 ee                	and    esi,ebp
c0005a23:	01 c6                	add    esi,eax
c0005a25:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a28:	11 d7                	adc    edi,edx
c0005a2a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a2d:	39 fa                	cmp    edx,edi
c0005a2f:	75 08                	jne    c0005a39 <f_lseek+0x1ed>
c0005a31:	39 f0                	cmp    eax,esi
c0005a33:	0f 84 be 02 00 00    	je     c0005cf7 <f_lseek+0x4ab>
c0005a39:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a3c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a40:	0f 89 80 02 00 00    	jns    c0005cc6 <f_lseek+0x47a>
c0005a46:	83 ec 0c             	sub    esp,0xc
c0005a49:	6a 01                	push   0x1
c0005a4b:	52                   	push   edx
c0005a4c:	50                   	push   eax
c0005a4d:	55                   	push   ebp
c0005a4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a52:	e9 5a 02 00 00       	jmp    c0005cb1 <f_lseek+0x465>
c0005a57:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a5b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a5e:	74 16                	je     c0005a76 <f_lseek+0x22a>
c0005a60:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a65:	76 0f                	jbe    c0005a76 <f_lseek+0x22a>
c0005a67:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a6e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a79:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a7c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a7f:	89 c7                	mov    edi,eax
c0005a81:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a85:	73 0d                	jae    c0005a94 <f_lseek+0x248>
c0005a87:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a8b:	75 07                	jne    c0005a94 <f_lseek+0x248>
c0005a8d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a94:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a97:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a9a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a9e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005aa5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005aac:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aaf:	75 09                	jne    c0005aba <f_lseek+0x26e>
c0005ab1:	31 f6                	xor    esi,esi
c0005ab3:	31 ff                	xor    edi,edi
c0005ab5:	e9 af 01 00 00       	jmp    c0005c69 <f_lseek+0x41d>
c0005aba:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005abe:	89 d7                	mov    edi,edx
c0005ac0:	c1 e1 09             	shl    ecx,0x9
c0005ac3:	09 c7                	or     edi,eax
c0005ac5:	89 cd                	mov    ebp,ecx
c0005ac7:	74 6d                	je     c0005b36 <f_lseek+0x2ea>
c0005ac9:	83 c0 ff             	add    eax,0xffffffff
c0005acc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ad0:	83 d2 ff             	adc    edx,0xffffffff
c0005ad3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ada:	83 c0 ff             	add    eax,0xffffffff
c0005add:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ae1:	83 d2 ff             	adc    edx,0xffffffff
c0005ae4:	31 ff                	xor    edi,edi
c0005ae6:	57                   	push   edi
c0005ae7:	51                   	push   ecx
c0005ae8:	52                   	push   edx
c0005ae9:	50                   	push   eax
c0005aea:	e8 ad 8c 01 00       	call   c001e79c <__udivdi3>
c0005aef:	83 c4 10             	add    esp,0x10
c0005af2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005af6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005afa:	57                   	push   edi
c0005afb:	55                   	push   ebp
c0005afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b04:	e8 93 8c 01 00       	call   c001e79c <__udivdi3>
c0005b09:	83 c4 10             	add    esp,0x10
c0005b0c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b14:	19 d1                	sbb    ecx,edx
c0005b16:	72 1e                	jb     c0005b36 <f_lseek+0x2ea>
c0005b18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b1c:	89 e9                	mov    ecx,ebp
c0005b1e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b21:	f7 d9                	neg    ecx
c0005b23:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b26:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b2a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b2d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b30:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b34:	eb 28                	jmp    c0005b5e <f_lseek+0x312>
c0005b36:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b39:	85 c0                	test   eax,eax
c0005b3b:	75 1e                	jne    c0005b5b <f_lseek+0x30f>
c0005b3d:	31 d2                	xor    edx,edx
c0005b3f:	89 d8                	mov    eax,ebx
c0005b41:	e8 a9 d4 ff ff       	call   c0002fef <create_chain>
c0005b46:	83 f8 01             	cmp    eax,0x1
c0005b49:	0f 84 b9 fd ff ff    	je     c0005908 <f_lseek+0xbc>
c0005b4f:	83 f8 ff             	cmp    eax,0xffffffff
c0005b52:	0f 84 c6 fd ff ff    	je     c000591e <f_lseek+0xd2>
c0005b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b5b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b5e:	85 c0                	test   eax,eax
c0005b60:	0f 84 4b ff ff ff    	je     c0005ab1 <f_lseek+0x265>
c0005b66:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b6a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b72:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b75:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b79:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b7c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b7f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b83:	0f 83 9d 00 00 00    	jae    c0005c26 <f_lseek+0x3da>
c0005b89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b91:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b94:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b98:	01 f2                	add    edx,esi
c0005b9a:	11 f9                	adc    ecx,edi
c0005b9c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ba0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005ba4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005ba7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005baa:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005bad:	f6 c1 02             	test   cl,0x2
c0005bb0:	74 35                	je     c0005be7 <f_lseek+0x39b>
c0005bb2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005bb6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bb9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005bbc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bc0:	73 16                	jae    c0005bd8 <f_lseek+0x38c>
c0005bc2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bc6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bca:	88 ca                	mov    dl,cl
c0005bcc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bcf:	83 ca 40             	or     edx,0x40
c0005bd2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bd5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bd8:	89 c2                	mov    edx,eax
c0005bda:	89 d8                	mov    eax,ebx
c0005bdc:	e8 0e d4 ff ff       	call   c0002fef <create_chain>
c0005be1:	85 c0                	test   eax,eax
c0005be3:	75 0b                	jne    c0005bf0 <f_lseek+0x3a4>
c0005be5:	eb 30                	jmp    c0005c17 <f_lseek+0x3cb>
c0005be7:	89 c2                	mov    edx,eax
c0005be9:	89 d8                	mov    eax,ebx
c0005beb:	e8 11 d1 ff ff       	call   c0002d01 <get_fat>
c0005bf0:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf3:	0f 84 25 fd ff ff    	je     c000591e <f_lseek+0xd2>
c0005bf9:	83 f8 01             	cmp    eax,0x1
c0005bfc:	0f 86 06 fd ff ff    	jbe    c0005908 <f_lseek+0xbc>
c0005c02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c06:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c09:	0f 86 f9 fc ff ff    	jbe    c0005908 <f_lseek+0xbc>
c0005c0f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c12:	e9 5b ff ff ff       	jmp    c0005b72 <f_lseek+0x326>
c0005c17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c26:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c29:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c2d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c30:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c33:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c36:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c3c:	0f 84 6f fe ff ff    	je     c0005ab1 <f_lseek+0x265>
c0005c42:	89 c2                	mov    edx,eax
c0005c44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c48:	e8 e7 bf ff ff       	call   c0001c34 <clst2sect>
c0005c4d:	89 d7                	mov    edi,edx
c0005c4f:	09 c7                	or     edi,eax
c0005c51:	0f 84 b1 fc ff ff    	je     c0005908 <f_lseek+0xbc>
c0005c57:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c5e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c62:	c1 ef 09             	shr    edi,0x9
c0005c65:	01 c6                	add    esi,eax
c0005c67:	11 d7                	adc    edi,edx
c0005c69:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c6c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c72:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c75:	19 d1                	sbb    ecx,edx
c0005c77:	73 0a                	jae    c0005c83 <f_lseek+0x437>
c0005c79:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c7c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c7f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c83:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c88:	74 6d                	je     c0005cf7 <f_lseek+0x4ab>
c0005c8a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c90:	39 fa                	cmp    edx,edi
c0005c92:	75 04                	jne    c0005c98 <f_lseek+0x44c>
c0005c94:	39 f0                	cmp    eax,esi
c0005c96:	74 5f                	je     c0005cf7 <f_lseek+0x4ab>
c0005c98:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c9b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c9f:	79 25                	jns    c0005cc6 <f_lseek+0x47a>
c0005ca1:	83 ec 0c             	sub    esp,0xc
c0005ca4:	6a 01                	push   0x1
c0005ca6:	52                   	push   edx
c0005ca7:	50                   	push   eax
c0005ca8:	55                   	push   ebp
c0005ca9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cad:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cb1:	50                   	push   eax
c0005cb2:	e8 af bc ff ff       	call   c0001966 <disk_write>
c0005cb7:	83 c4 20             	add    esp,0x20
c0005cba:	85 c0                	test   eax,eax
c0005cbc:	0f 85 5c fc ff ff    	jne    c000591e <f_lseek+0xd2>
c0005cc2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cc6:	83 ec 0c             	sub    esp,0xc
c0005cc9:	6a 01                	push   0x1
c0005ccb:	57                   	push   edi
c0005ccc:	56                   	push   esi
c0005ccd:	55                   	push   ebp
c0005cce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cd2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cd6:	50                   	push   eax
c0005cd7:	e8 74 bc ff ff       	call   c0001950 <disk_read>
c0005cdc:	83 c4 20             	add    esp,0x20
c0005cdf:	85 c0                	test   eax,eax
c0005ce1:	0f 85 37 fc ff ff    	jne    c000591e <f_lseek+0xd2>
c0005ce7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cea:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ced:	eb 08                	jmp    c0005cf7 <f_lseek+0x4ab>
c0005cef:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cfb:	83 c4 3c             	add    esp,0x3c
c0005cfe:	5b                   	pop    ebx
c0005cff:	5e                   	pop    esi
c0005d00:	5f                   	pop    edi
c0005d01:	5d                   	pop    ebp
c0005d02:	c3                   	ret    

c0005d03 <f_opendir>:
c0005d03:	56                   	push   esi
c0005d04:	b8 09 00 00 00       	mov    eax,0x9
c0005d09:	53                   	push   ebx
c0005d0a:	83 ec 24             	sub    esp,0x24
c0005d0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d11:	85 db                	test   ebx,ebx
c0005d13:	0f 84 e6 00 00 00    	je     c0005dff <f_opendir+0xfc>
c0005d19:	31 c9                	xor    ecx,ecx
c0005d1b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d1f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d23:	e8 03 c7 ff ff       	call   c000242b <mount_volume>
c0005d28:	85 c0                	test   eax,eax
c0005d2a:	0f 85 c9 00 00 00    	jne    c0005df9 <f_opendir+0xf6>
c0005d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d34:	83 ec 0c             	sub    esp,0xc
c0005d37:	89 03                	mov    DWORD PTR [ebx],eax
c0005d39:	68 60 04 00 00       	push   0x460
c0005d3e:	e8 8b 24 00 00       	call   c00081ce <ff_memalloc>
c0005d43:	83 c4 10             	add    esp,0x10
c0005d46:	89 c6                	mov    esi,eax
c0005d48:	b8 11 00 00 00       	mov    eax,0x11
c0005d4d:	85 f6                	test   esi,esi
c0005d4f:	0f 84 aa 00 00 00    	je     c0005dff <f_opendir+0xfc>
c0005d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d59:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d5f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d62:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d69:	89 d8                	mov    eax,ebx
c0005d6b:	e8 31 ee ff ff       	call   c0004ba1 <follow_path>
c0005d70:	85 c0                	test   eax,eax
c0005d72:	75 61                	jne    c0005dd5 <f_opendir+0xd2>
c0005d74:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d78:	78 46                	js     c0005dc0 <f_opendir+0xbd>
c0005d7a:	b8 05 00 00 00       	mov    eax,0x5
c0005d7f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d83:	74 50                	je     c0005dd5 <f_opendir+0xd2>
c0005d85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d89:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d8b:	3c 04                	cmp    al,0x4
c0005d8d:	75 26                	jne    c0005db5 <f_opendir+0xb2>
c0005d8f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d92:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d95:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d98:	30 d2                	xor    dl,dl
c0005d9a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d9e:	09 c2                	or     edx,eax
c0005da0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005da3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005da6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005da9:	89 da                	mov    edx,ebx
c0005dab:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dae:	e8 b4 ed ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c0005db3:	eb 0b                	jmp    c0005dc0 <f_opendir+0xbd>
c0005db5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005db8:	e8 59 ed ff ff       	call   c0004b16 <ld_clust.isra.0>
c0005dbd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc4:	31 d2                	xor    edx,edx
c0005dc6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dca:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dce:	89 d8                	mov    eax,ebx
c0005dd0:	e8 22 d1 ff ff       	call   c0002ef7 <dir_sdi>
c0005dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd9:	83 ec 0c             	sub    esp,0xc
c0005ddc:	56                   	push   esi
c0005ddd:	e8 02 24 00 00       	call   c00081e4 <ff_memfree>
c0005de2:	83 c4 10             	add    esp,0x10
c0005de5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005de9:	83 f8 04             	cmp    eax,0x4
c0005dec:	74 06                	je     c0005df4 <f_opendir+0xf1>
c0005dee:	85 c0                	test   eax,eax
c0005df0:	74 0d                	je     c0005dff <f_opendir+0xfc>
c0005df2:	eb 05                	jmp    c0005df9 <f_opendir+0xf6>
c0005df4:	b8 05 00 00 00       	mov    eax,0x5
c0005df9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005dff:	83 c4 24             	add    esp,0x24
c0005e02:	5b                   	pop    ebx
c0005e03:	5e                   	pop    esi
c0005e04:	c3                   	ret    

c0005e05 <f_closedir>:
c0005e05:	53                   	push   ebx
c0005e06:	83 ec 18             	sub    esp,0x18
c0005e09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e0d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e11:	89 d8                	mov    eax,ebx
c0005e13:	e8 86 c2 ff ff       	call   c000209e <validate>
c0005e18:	85 c0                	test   eax,eax
c0005e1a:	75 06                	jne    c0005e22 <f_closedir+0x1d>
c0005e1c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e22:	83 c4 18             	add    esp,0x18
c0005e25:	5b                   	pop    ebx
c0005e26:	c3                   	ret    

c0005e27 <f_readdir>:
c0005e27:	57                   	push   edi
c0005e28:	56                   	push   esi
c0005e29:	53                   	push   ebx
c0005e2a:	83 ec 20             	sub    esp,0x20
c0005e2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e35:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e39:	89 d8                	mov    eax,ebx
c0005e3b:	e8 5e c2 ff ff       	call   c000209e <validate>
c0005e40:	85 c0                	test   eax,eax
c0005e42:	75 77                	jne    c0005ebb <f_readdir+0x94>
c0005e44:	85 ff                	test   edi,edi
c0005e46:	75 0b                	jne    c0005e53 <f_readdir+0x2c>
c0005e48:	31 d2                	xor    edx,edx
c0005e4a:	89 d8                	mov    eax,ebx
c0005e4c:	e8 a6 d0 ff ff       	call   c0002ef7 <dir_sdi>
c0005e51:	eb 68                	jmp    c0005ebb <f_readdir+0x94>
c0005e53:	83 ec 0c             	sub    esp,0xc
c0005e56:	68 60 04 00 00       	push   0x460
c0005e5b:	e8 6e 23 00 00       	call   c00081ce <ff_memalloc>
c0005e60:	83 c4 10             	add    esp,0x10
c0005e63:	89 c6                	mov    esi,eax
c0005e65:	b8 11 00 00 00       	mov    eax,0x11
c0005e6a:	85 f6                	test   esi,esi
c0005e6c:	74 4d                	je     c0005ebb <f_readdir+0x94>
c0005e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e72:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e78:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e7b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e7e:	31 d2                	xor    edx,edx
c0005e80:	89 d8                	mov    eax,ebx
c0005e82:	e8 80 d8 ff ff       	call   c0003707 <dir_read>
c0005e87:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e8c:	75 19                	jne    c0005ea7 <f_readdir+0x80>
c0005e8e:	89 fa                	mov    edx,edi
c0005e90:	89 d8                	mov    eax,ebx
c0005e92:	e8 7e ea ff ff       	call   c0004915 <get_fileinfo>
c0005e97:	31 d2                	xor    edx,edx
c0005e99:	89 d8                	mov    eax,ebx
c0005e9b:	e8 af d5 ff ff       	call   c000344f <dir_next>
c0005ea0:	83 f8 04             	cmp    eax,0x4
c0005ea3:	75 02                	jne    c0005ea7 <f_readdir+0x80>
c0005ea5:	31 c0                	xor    eax,eax
c0005ea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eab:	83 ec 0c             	sub    esp,0xc
c0005eae:	56                   	push   esi
c0005eaf:	e8 30 23 00 00       	call   c00081e4 <ff_memfree>
c0005eb4:	83 c4 10             	add    esp,0x10
c0005eb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ebb:	83 c4 20             	add    esp,0x20
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	c3                   	ret    

c0005ec2 <f_stat>:
c0005ec2:	57                   	push   edi
c0005ec3:	31 c9                	xor    ecx,ecx
c0005ec5:	56                   	push   esi
c0005ec6:	53                   	push   ebx
c0005ec7:	83 ec 50             	sub    esp,0x50
c0005eca:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ece:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ed2:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ed6:	e8 50 c5 ff ff       	call   c000242b <mount_volume>
c0005edb:	89 c3                	mov    ebx,eax
c0005edd:	85 c0                	test   eax,eax
c0005edf:	75 67                	jne    c0005f48 <f_stat+0x86>
c0005ee1:	83 ec 0c             	sub    esp,0xc
c0005ee4:	bb 11 00 00 00       	mov    ebx,0x11
c0005ee9:	68 60 04 00 00       	push   0x460
c0005eee:	e8 db 22 00 00       	call   c00081ce <ff_memalloc>
c0005ef3:	83 c4 10             	add    esp,0x10
c0005ef6:	89 c6                	mov    esi,eax
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	74 4c                	je     c0005f48 <f_stat+0x86>
c0005efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f06:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f09:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f0c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 88 ec ff ff       	call   c0004ba1 <follow_path>
c0005f19:	89 c3                	mov    ebx,eax
c0005f1b:	85 c0                	test   eax,eax
c0005f1d:	75 1d                	jne    c0005f3c <f_stat+0x7a>
c0005f1f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f24:	78 11                	js     c0005f37 <f_stat+0x75>
c0005f26:	85 ff                	test   edi,edi
c0005f28:	74 12                	je     c0005f3c <f_stat+0x7a>
c0005f2a:	89 fa                	mov    edx,edi
c0005f2c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f30:	e8 e0 e9 ff ff       	call   c0004915 <get_fileinfo>
c0005f35:	eb 05                	jmp    c0005f3c <f_stat+0x7a>
c0005f37:	bb 06 00 00 00       	mov    ebx,0x6
c0005f3c:	83 ec 0c             	sub    esp,0xc
c0005f3f:	56                   	push   esi
c0005f40:	e8 9f 22 00 00       	call   c00081e4 <ff_memfree>
c0005f45:	83 c4 10             	add    esp,0x10
c0005f48:	83 c4 50             	add    esp,0x50
c0005f4b:	89 d8                	mov    eax,ebx
c0005f4d:	5b                   	pop    ebx
c0005f4e:	5e                   	pop    esi
c0005f4f:	5f                   	pop    edi
c0005f50:	c3                   	ret    

c0005f51 <f_getfree>:
c0005f51:	55                   	push   ebp
c0005f52:	31 c9                	xor    ecx,ecx
c0005f54:	57                   	push   edi
c0005f55:	56                   	push   esi
c0005f56:	53                   	push   ebx
c0005f57:	83 ec 5c             	sub    esp,0x5c
c0005f5a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f62:	e8 c4 c4 ff ff       	call   c000242b <mount_volume>
c0005f67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 9d 01 00 00    	jne    c0006110 <f_getfree+0x1bf>
c0005f73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f7b:	89 02                	mov    DWORD PTR [edx],eax
c0005f7d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f83:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f86:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f8a:	39 f2                	cmp    edx,esi
c0005f8c:	77 0b                	ja     c0005f99 <f_getfree+0x48>
c0005f8e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f92:	89 10                	mov    DWORD PTR [eax],edx
c0005f94:	e9 77 01 00 00       	jmp    c0006110 <f_getfree+0x1bf>
c0005f99:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f9b:	80 fa 01             	cmp    dl,0x1
c0005f9e:	75 3a                	jne    c0005fda <f_getfree+0x89>
c0005fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fa4:	be 02 00 00 00       	mov    esi,0x2
c0005fa9:	31 db                	xor    ebx,ebx
c0005fab:	89 f2                	mov    edx,esi
c0005fad:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fb1:	e8 4b cd ff ff       	call   c0002d01 <get_fat>
c0005fb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005fb9:	0f 84 28 01 00 00    	je     c00060e7 <f_getfree+0x196>
c0005fbf:	83 f8 01             	cmp    eax,0x1
c0005fc2:	0f 84 29 01 00 00    	je     c00060f1 <f_getfree+0x1a0>
c0005fc8:	83 d3 00             	adc    ebx,0x0
c0005fcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fcf:	46                   	inc    esi
c0005fd0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fd3:	77 d6                	ja     c0005fab <f_getfree+0x5a>
c0005fd5:	e9 25 01 00 00       	jmp    c00060ff <f_getfree+0x1ae>
c0005fda:	80 fa 04             	cmp    dl,0x4
c0005fdd:	0f 85 88 00 00 00    	jne    c000606b <f_getfree+0x11a>
c0005fe3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fe6:	31 ed                	xor    ebp,ebp
c0005fe8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005feb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ff3:	31 db                	xor    ebx,ebx
c0005ff5:	85 ed                	test   ebp,ebp
c0005ff7:	75 3f                	jne    c0006038 <f_getfree+0xe7>
c0005ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006001:	83 c0 01             	add    eax,0x1
c0006004:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006008:	83 d2 00             	adc    edx,0x0
c000600b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000600f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006017:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000601b:	e8 59 c1 ff ff       	call   c0002179 <move_window>
c0006020:	85 c0                	test   eax,eax
c0006022:	0f 85 d3 00 00 00    	jne    c00060fb <f_getfree+0x1aa>
c0006028:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000602c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006034:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000603c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000603f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006043:	89 cf                	mov    edi,ecx
c0006045:	85 f6                	test   esi,esi
c0006047:	74 12                	je     c000605b <f_getfree+0x10a>
c0006049:	88 c1                	mov    cl,al
c000604b:	83 e1 01             	and    ecx,0x1
c000604e:	80 f9 01             	cmp    cl,0x1
c0006051:	83 d3 00             	adc    ebx,0x0
c0006054:	d0 e8                	shr    al,1
c0006056:	4e                   	dec    esi
c0006057:	39 fe                	cmp    esi,edi
c0006059:	75 ea                	jne    c0006045 <f_getfree+0xf4>
c000605b:	45                   	inc    ebp
c000605c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006062:	85 f6                	test   esi,esi
c0006064:	75 8f                	jne    c0005ff5 <f_getfree+0xa4>
c0006066:	e9 94 00 00 00       	jmp    c00060ff <f_getfree+0x1ae>
c000606b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000606e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006071:	31 f6                	xor    esi,esi
c0006073:	31 db                	xor    ebx,ebx
c0006075:	85 f6                	test   esi,esi
c0006077:	75 1b                	jne    c0006094 <f_getfree+0x143>
c0006079:	89 d7                	mov    edi,edx
c000607b:	89 cd                	mov    ebp,ecx
c000607d:	83 c7 01             	add    edi,0x1
c0006080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006084:	83 d5 00             	adc    ebp,0x0
c0006087:	e8 ed c0 ff ff       	call   c0002179 <move_window>
c000608c:	85 c0                	test   eax,eax
c000608e:	75 6b                	jne    c00060fb <f_getfree+0x1aa>
c0006090:	89 fa                	mov    edx,edi
c0006092:	89 e9                	mov    ecx,ebp
c0006094:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006098:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000609c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00060a0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00060a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060a7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060ab:	75 11                	jne    c00060be <f_getfree+0x16d>
c00060ad:	e8 e9 b8 ff ff       	call   c000199b <ld_word>
c00060b2:	66 83 f8 01          	cmp    ax,0x1
c00060b6:	83 d3 00             	adc    ebx,0x0
c00060b9:	83 c6 02             	add    esi,0x2
c00060bc:	eb 13                	jmp    c00060d1 <f_getfree+0x180>
c00060be:	e8 e5 b8 ff ff       	call   c00019a8 <ld_dword>
c00060c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060c8:	83 f8 01             	cmp    eax,0x1
c00060cb:	83 d3 00             	adc    ebx,0x0
c00060ce:	83 c6 04             	add    esi,0x4
c00060d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060df:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060e3:	75 90                	jne    c0006075 <f_getfree+0x124>
c00060e5:	eb 18                	jmp    c00060ff <f_getfree+0x1ae>
c00060e7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060ef:	eb 0e                	jmp    c00060ff <f_getfree+0x1ae>
c00060f1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060f9:	eb 04                	jmp    c00060ff <f_getfree+0x1ae>
c00060fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060ff:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006103:	89 18                	mov    DWORD PTR [eax],ebx
c0006105:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006109:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000610c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006114:	83 c4 5c             	add    esp,0x5c
c0006117:	5b                   	pop    ebx
c0006118:	5e                   	pop    esi
c0006119:	5f                   	pop    edi
c000611a:	5d                   	pop    ebp
c000611b:	c3                   	ret    

c000611c <f_truncate>:
c000611c:	56                   	push   esi
c000611d:	53                   	push   ebx
c000611e:	83 ec 14             	sub    esp,0x14
c0006121:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006125:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006129:	89 d8                	mov    eax,ebx
c000612b:	e8 6e bf ff ff       	call   c000209e <validate>
c0006130:	89 c6                	mov    esi,eax
c0006132:	85 c0                	test   eax,eax
c0006134:	0f 85 d2 00 00 00    	jne    c000620c <f_truncate+0xf0>
c000613a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000613e:	85 f6                	test   esi,esi
c0006140:	0f 85 c6 00 00 00    	jne    c000620c <f_truncate+0xf0>
c0006146:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000614a:	0f 84 b7 00 00 00    	je     c0006207 <f_truncate+0xeb>
c0006150:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006153:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006156:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006159:	89 d1                	mov    ecx,edx
c000615b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000615e:	0f 83 a8 00 00 00    	jae    c000620c <f_truncate+0xf0>
c0006164:	09 c2                	or     edx,eax
c0006166:	75 15                	jne    c000617d <f_truncate+0x61>
c0006168:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	89 d8                	mov    eax,ebx
c000616f:	e8 7a d0 ff ff       	call   c00031ee <remove_chain>
c0006174:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000617b:	eb 35                	jmp    c00061b2 <f_truncate+0x96>
c000617d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006180:	89 d8                	mov    eax,ebx
c0006182:	e8 7a cb ff ff       	call   c0002d01 <get_fat>
c0006187:	89 c2                	mov    edx,eax
c0006189:	b8 01 00 00 00       	mov    eax,0x1
c000618e:	83 fa ff             	cmp    edx,0xffffffff
c0006191:	74 1f                	je     c00061b2 <f_truncate+0x96>
c0006193:	b8 02 00 00 00       	mov    eax,0x2
c0006198:	83 fa 01             	cmp    edx,0x1
c000619b:	74 15                	je     c00061b2 <f_truncate+0x96>
c000619d:	31 c0                	xor    eax,eax
c000619f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061a3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00061a6:	76 0a                	jbe    c00061b2 <f_truncate+0x96>
c00061a8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00061ab:	89 d8                	mov    eax,ebx
c00061ad:	e8 3c d0 ff ff       	call   c00031ee <remove_chain>
c00061b2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061b5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061bb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061be:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061c1:	83 ca 40             	or     edx,0x40
c00061c4:	85 c0                	test   eax,eax
c00061c6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061c9:	75 35                	jne    c0006200 <f_truncate+0xe4>
c00061cb:	84 d2                	test   dl,dl
c00061cd:	79 3d                	jns    c000620c <f_truncate+0xf0>
c00061cf:	83 ec 0c             	sub    esp,0xc
c00061d2:	8d 43 50             	lea    eax,[ebx+0x50]
c00061d5:	6a 01                	push   0x1
c00061d7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061dd:	50                   	push   eax
c00061de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061e6:	50                   	push   eax
c00061e7:	e8 7a b7 ff ff       	call   c0001966 <disk_write>
c00061ec:	83 c4 20             	add    esp,0x20
c00061ef:	85 c0                	test   eax,eax
c00061f1:	75 08                	jne    c00061fb <f_truncate+0xdf>
c00061f3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061f7:	31 f6                	xor    esi,esi
c00061f9:	eb 11                	jmp    c000620c <f_truncate+0xf0>
c00061fb:	b8 01 00 00 00       	mov    eax,0x1
c0006200:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006203:	89 c6                	mov    esi,eax
c0006205:	eb 05                	jmp    c000620c <f_truncate+0xf0>
c0006207:	be 07 00 00 00       	mov    esi,0x7
c000620c:	89 f0                	mov    eax,esi
c000620e:	83 c4 14             	add    esp,0x14
c0006211:	5b                   	pop    ebx
c0006212:	5e                   	pop    esi
c0006213:	c3                   	ret    

c0006214 <f_unlink>:
c0006214:	56                   	push   esi
c0006215:	b9 02 00 00 00       	mov    ecx,0x2
c000621a:	53                   	push   ebx
c000621b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006221:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006225:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000622c:	e8 fa c1 ff ff       	call   c000242b <mount_volume>
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 55 01 00 00    	jne    c000638e <f_unlink+0x17a>
c0006239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000623d:	83 ec 0c             	sub    esp,0xc
c0006240:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006244:	68 60 04 00 00       	push   0x460
c0006249:	e8 80 1f 00 00       	call   c00081ce <ff_memalloc>
c000624e:	83 c4 10             	add    esp,0x10
c0006251:	89 c3                	mov    ebx,eax
c0006253:	b8 11 00 00 00       	mov    eax,0x11
c0006258:	85 db                	test   ebx,ebx
c000625a:	0f 84 2e 01 00 00    	je     c000638e <f_unlink+0x17a>
c0006260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006264:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000626a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000626d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006270:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006277:	8d 44 24 48          	lea    eax,[esp+0x48]
c000627b:	e8 21 e9 ff ff       	call   c0004ba1 <follow_path>
c0006280:	85 c0                	test   eax,eax
c0006282:	0f 85 f2 00 00 00    	jne    c000637a <f_unlink+0x166>
c0006288:	b8 06 00 00 00       	mov    eax,0x6
c000628d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006295:	0f 88 df 00 00 00    	js     c000637a <f_unlink+0x166>
c000629b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062a0:	74 0a                	je     c00062ac <f_unlink+0x98>
c00062a2:	b8 07 00 00 00       	mov    eax,0x7
c00062a7:	e9 ce 00 00 00       	jmp    c000637a <f_unlink+0x166>
c00062ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062b0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062b4:	8a 02                	mov    al,BYTE PTR [edx]
c00062b6:	3c 04                	cmp    al,0x4
c00062b8:	75 12                	jne    c00062cc <f_unlink+0xb8>
c00062ba:	8d 42 10             	lea    eax,[edx+0x10]
c00062bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062c1:	e8 a1 e8 ff ff       	call   c0004b67 <init_alloc_info.isra.2>
c00062c6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ca:	eb 0e                	jmp    c00062da <f_unlink+0xc6>
c00062cc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062d3:	e8 3e e8 ff ff       	call   c0004b16 <ld_clust.isra.0>
c00062d8:	89 c6                	mov    esi,eax
c00062da:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062df:	75 12                	jne    c00062f3 <f_unlink+0xdf>
c00062e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e5:	e8 94 d6 ff ff       	call   c000397e <dir_remove>
c00062ea:	85 c0                	test   eax,eax
c00062ec:	74 6c                	je     c000635a <f_unlink+0x146>
c00062ee:	e9 87 00 00 00       	jmp    c000637a <f_unlink+0x166>
c00062f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062f7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062fe:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006305:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006308:	75 21                	jne    c000632b <f_unlink+0x117>
c000630a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000630e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006312:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006319:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006320:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006324:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000632b:	31 d2                	xor    edx,edx
c000632d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006334:	e8 be cb ff ff       	call   c0002ef7 <dir_sdi>
c0006339:	85 c0                	test   eax,eax
c000633b:	75 3d                	jne    c000637a <f_unlink+0x166>
c000633d:	31 d2                	xor    edx,edx
c000633f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006346:	e8 bc d3 ff ff       	call   c0003707 <dir_read>
c000634b:	85 c0                	test   eax,eax
c000634d:	0f 84 4f ff ff ff    	je     c00062a2 <f_unlink+0x8e>
c0006353:	83 f8 04             	cmp    eax,0x4
c0006356:	75 22                	jne    c000637a <f_unlink+0x166>
c0006358:	eb 87                	jmp    c00062e1 <f_unlink+0xcd>
c000635a:	85 f6                	test   esi,esi
c000635c:	75 0b                	jne    c0006369 <f_unlink+0x155>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	e8 3d df ff ff       	call   c00042a4 <sync_fs>
c0006367:	eb 11                	jmp    c000637a <f_unlink+0x166>
c0006369:	31 c9                	xor    ecx,ecx
c000636b:	89 f2                	mov    edx,esi
c000636d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006371:	e8 78 ce ff ff       	call   c00031ee <remove_chain>
c0006376:	85 c0                	test   eax,eax
c0006378:	74 e4                	je     c000635e <f_unlink+0x14a>
c000637a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000637e:	83 ec 0c             	sub    esp,0xc
c0006381:	53                   	push   ebx
c0006382:	e8 5d 1e 00 00       	call   c00081e4 <ff_memfree>
c0006387:	83 c4 10             	add    esp,0x10
c000638a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000638e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006394:	5b                   	pop    ebx
c0006395:	5e                   	pop    esi
c0006396:	c3                   	ret    

c0006397 <f_mkdir>:
c0006397:	57                   	push   edi
c0006398:	b9 02 00 00 00       	mov    ecx,0x2
c000639d:	56                   	push   esi
c000639e:	53                   	push   ebx
c000639f:	83 c4 80             	add    esp,0xffffff80
c00063a2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00063a6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063ad:	e8 79 c0 ff ff       	call   c000242b <mount_volume>
c00063b2:	89 c3                	mov    ebx,eax
c00063b4:	85 c0                	test   eax,eax
c00063b6:	0f 85 fe 01 00 00    	jne    c00065ba <f_mkdir+0x223>
c00063bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063c0:	bb 11 00 00 00       	mov    ebx,0x11
c00063c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063c9:	83 ec 0c             	sub    esp,0xc
c00063cc:	68 60 04 00 00       	push   0x460
c00063d1:	e8 f8 1d 00 00       	call   c00081ce <ff_memalloc>
c00063d6:	83 c4 10             	add    esp,0x10
c00063d9:	89 c7                	mov    edi,eax
c00063db:	85 c0                	test   eax,eax
c00063dd:	0f 84 d7 01 00 00    	je     c00065ba <f_mkdir+0x223>
c00063e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063e7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063f3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063fe:	e8 9e e7 ff ff       	call   c0004ba1 <follow_path>
c0006403:	89 c3                	mov    ebx,eax
c0006405:	85 c0                	test   eax,eax
c0006407:	74 3e                	je     c0006447 <f_mkdir+0xb0>
c0006409:	83 f8 04             	cmp    eax,0x4
c000640c:	75 3e                	jne    c000644c <f_mkdir+0xb5>
c000640e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006412:	31 d2                	xor    edx,edx
c0006414:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006418:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000641c:	e8 ce cb ff ff       	call   c0002fef <create_chain>
c0006421:	89 c6                	mov    esi,eax
c0006423:	85 c0                	test   eax,eax
c0006425:	74 0c                	je     c0006433 <f_mkdir+0x9c>
c0006427:	bb 02 00 00 00       	mov    ebx,0x2
c000642c:	83 f8 01             	cmp    eax,0x1
c000642f:	74 07                	je     c0006438 <f_mkdir+0xa1>
c0006431:	eb 2a                	jmp    c000645d <f_mkdir+0xc6>
c0006433:	bb 07 00 00 00       	mov    ebx,0x7
c0006438:	31 c9                	xor    ecx,ecx
c000643a:	89 f2                	mov    edx,esi
c000643c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006440:	e8 a9 cd ff ff       	call   c00031ee <remove_chain>
c0006445:	eb 05                	jmp    c000644c <f_mkdir+0xb5>
c0006447:	bb 08 00 00 00       	mov    ebx,0x8
c000644c:	83 ec 0c             	sub    esp,0xc
c000644f:	57                   	push   edi
c0006450:	e8 8f 1d 00 00       	call   c00081e4 <ff_memfree>
c0006455:	83 c4 10             	add    esp,0x10
c0006458:	e9 5d 01 00 00       	jmp    c00065ba <f_mkdir+0x223>
c000645d:	bb 01 00 00 00       	mov    ebx,0x1
c0006462:	83 f8 ff             	cmp    eax,0xffffffff
c0006465:	74 d1                	je     c0006438 <f_mkdir+0xa1>
c0006467:	89 f2                	mov    edx,esi
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	e8 c4 ce ff ff       	call   c0003336 <dir_clear>
c0006472:	89 c3                	mov    ebx,eax
c0006474:	85 c0                	test   eax,eax
c0006476:	75 c0                	jne    c0006438 <f_mkdir+0xa1>
c0006478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000647f:	74 69                	je     c00064ea <f_mkdir+0x153>
c0006481:	b9 0b 00 00 00       	mov    ecx,0xb
c0006486:	83 c0 54             	add    eax,0x54
c0006489:	ba 20 00 00 00       	mov    edx,0x20
c000648e:	e8 9c b5 ff ff       	call   c0001a2f <mem_set>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	ba 00 00 21 50       	mov    edx,0x50210000
c000649c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00064a0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00064a4:	83 c0 6a             	add    eax,0x6a
c00064a7:	e8 65 b5 ff ff       	call   c0001a11 <st_dword>
c00064ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b0:	89 f1                	mov    ecx,esi
c00064b2:	8d 50 54             	lea    edx,[eax+0x54]
c00064b5:	e8 85 e6 ff ff       	call   c0004b3f <st_clust.isra.1>
c00064ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064be:	b9 20 00 00 00       	mov    ecx,0x20
c00064c3:	8d 50 54             	lea    edx,[eax+0x54]
c00064c6:	83 c0 74             	add    eax,0x74
c00064c9:	e8 4c b5 ff ff       	call   c0001a1a <mem_cpy>
c00064ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064d6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064da:	8d 50 74             	lea    edx,[eax+0x74]
c00064dd:	e8 5d e6 ff ff       	call   c0004b3f <st_clust.isra.1>
c00064e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ea:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ee:	e8 2f db ff ff       	call   c0004022 <dir_register>
c00064f3:	89 c3                	mov    ebx,eax
c00064f5:	85 c0                	test   eax,eax
c00064f7:	0f 85 3b ff ff ff    	jne    c0006438 <f_mkdir+0xa1>
c00064fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006501:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006504:	75 74                	jne    c000657a <f_mkdir+0x1e3>
c0006506:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006509:	ba 00 00 21 50       	mov    edx,0x50210000
c000650e:	83 c0 0c             	add    eax,0xc
c0006511:	e8 fb b4 ff ff       	call   c0001a11 <st_dword>
c0006516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651a:	89 f2                	mov    edx,esi
c000651c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000651f:	83 c0 34             	add    eax,0x34
c0006522:	e8 ea b4 ff ff       	call   c0001a11 <st_dword>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000652f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006532:	c1 e2 09             	shl    edx,0x9
c0006535:	83 c0 38             	add    eax,0x38
c0006538:	e8 d4 b4 ff ff       	call   c0001a11 <st_dword>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006545:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006548:	c1 e2 09             	shl    edx,0x9
c000654b:	83 c0 28             	add    eax,0x28
c000654e:	e8 be b4 ff ff       	call   c0001a11 <st_dword>
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000655a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000655e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006561:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006565:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006569:	e8 8b d3 ff ff       	call   c00038f9 <store_xdir>
c000656e:	89 c3                	mov    ebx,eax
c0006570:	85 c0                	test   eax,eax
c0006572:	0f 85 d4 fe ff ff    	jne    c000644c <f_mkdir+0xb5>
c0006578:	eb 30                	jmp    c00065aa <f_mkdir+0x213>
c000657a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000657e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006583:	83 c0 16             	add    eax,0x16
c0006586:	e8 86 b4 ff ff       	call   c0001a11 <st_dword>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	89 f1                	mov    ecx,esi
c0006591:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006595:	e8 a5 e5 ff ff       	call   c0004b3f <st_clust.isra.1>
c000659a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000659e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ae:	e8 f1 dc ff ff       	call   c00042a4 <sync_fs>
c00065b3:	89 c3                	mov    ebx,eax
c00065b5:	e9 92 fe ff ff       	jmp    c000644c <f_mkdir+0xb5>
c00065ba:	83 ec 80             	sub    esp,0xffffff80
c00065bd:	89 d8                	mov    eax,ebx
c00065bf:	5b                   	pop    ebx
c00065c0:	5e                   	pop    esi
c00065c1:	5f                   	pop    edi
c00065c2:	c3                   	ret    

c00065c3 <f_rename>:
c00065c3:	55                   	push   ebp
c00065c4:	57                   	push   edi
c00065c5:	56                   	push   esi
c00065c6:	53                   	push   ebx
c00065c7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065d4:	e8 a4 b9 ff ff       	call   c0001f7d <get_ldnumber>
c00065d9:	b9 02 00 00 00       	mov    ecx,0x2
c00065de:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065e2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065e9:	e8 3d be ff ff       	call   c000242b <mount_volume>
c00065ee:	85 c0                	test   eax,eax
c00065f0:	0f 85 b5 02 00 00    	jne    c00068ab <f_rename+0x2e8>
c00065f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065fa:	83 ec 0c             	sub    esp,0xc
c00065fd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006601:	68 60 04 00 00       	push   0x460
c0006606:	e8 c3 1b 00 00       	call   c00081ce <ff_memalloc>
c000660b:	83 c4 10             	add    esp,0x10
c000660e:	89 c3                	mov    ebx,eax
c0006610:	b8 11 00 00 00       	mov    eax,0x11
c0006615:	85 db                	test   ebx,ebx
c0006617:	0f 84 8e 02 00 00    	je     c00068ab <f_rename+0x2e8>
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006627:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000662a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000662d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006634:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006638:	e8 64 e5 ff ff       	call   c0004ba1 <follow_path>
c000663d:	85 c0                	test   eax,eax
c000663f:	0f 85 52 02 00 00    	jne    c0006897 <f_rename+0x2d4>
c0006645:	b8 06 00 00 00       	mov    eax,0x6
c000664a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006652:	0f 85 3f 02 00 00    	jne    c0006897 <f_rename+0x2d4>
c0006658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000665f:	0f 85 05 01 00 00    	jne    c000676a <f_rename+0x1a7>
c0006665:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006668:	b9 40 00 00 00       	mov    ecx,0x40
c000666d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006671:	e8 a4 b3 ff ff       	call   c0001a1a <mem_cpy>
c0006676:	b9 4c 00 00 00       	mov    ecx,0x4c
c000667b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000667f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006686:	e8 8f b3 ff ff       	call   c0001a1a <mem_cpy>
c000668b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006692:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006699:	e8 03 e5 ff ff       	call   c0004ba1 <follow_path>
c000669e:	85 c0                	test   eax,eax
c00066a0:	75 29                	jne    c00066cb <f_rename+0x108>
c00066a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00066a6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066ad:	74 0a                	je     c00066b9 <f_rename+0xf6>
c00066af:	b8 08 00 00 00       	mov    eax,0x8
c00066b4:	e9 de 01 00 00       	jmp    c0006897 <f_rename+0x2d4>
c00066b9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066c0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066c7:	75 e6                	jne    c00066af <f_rename+0xec>
c00066c9:	eb 09                	jmp    c00066d4 <f_rename+0x111>
c00066cb:	83 f8 04             	cmp    eax,0x4
c00066ce:	0f 85 c3 01 00 00    	jne    c0006897 <f_rename+0x2d4>
c00066d4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066db:	e8 42 d9 ff ff       	call   c0004022 <dir_register>
c00066e0:	85 c0                	test   eax,eax
c00066e2:	0f 85 af 01 00 00    	jne    c0006897 <f_rename+0x2d4>
c00066e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ec:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066ef:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066f2:	89 c5                	mov    ebp,eax
c00066f4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066fb:	8d 46 24             	lea    eax,[esi+0x24]
c00066fe:	e8 98 b2 ff ff       	call   c000199b <ld_word>
c0006703:	b9 40 00 00 00       	mov    ecx,0x40
c0006708:	89 c7                	mov    edi,eax
c000670a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000670e:	89 f0                	mov    eax,esi
c0006710:	e8 05 b3 ff ff       	call   c0001a1a <mem_cpy>
c0006715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006719:	89 e9                	mov    ecx,ebp
c000671b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000671e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006721:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006729:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000672f:	0f b7 d7             	movzx  edx,di
c0006732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006735:	83 c0 24             	add    eax,0x24
c0006738:	e8 d0 b2 ff ff       	call   c0001a0d <st_word>
c000673d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006741:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006744:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006747:	a8 10                	test   al,0x10
c0006749:	75 06                	jne    c0006751 <f_rename+0x18e>
c000674b:	83 c8 20             	or     eax,0x20
c000674e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006751:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006758:	e8 9c d1 ff ff       	call   c00038f9 <store_xdir>
c000675d:	85 c0                	test   eax,eax
c000675f:	0f 84 1c 01 00 00    	je     c0006881 <f_rename+0x2be>
c0006765:	e9 2d 01 00 00       	jmp    c0006897 <f_rename+0x2d4>
c000676a:	b9 20 00 00 00       	mov    ecx,0x20
c000676f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006776:	8d 44 24 18          	lea    eax,[esp+0x18]
c000677a:	e8 9b b2 ff ff       	call   c0001a1a <mem_cpy>
c000677f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006784:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006788:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678f:	e8 86 b2 ff ff       	call   c0001a1a <mem_cpy>
c0006794:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000679b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067a2:	e8 fa e3 ff ff       	call   c0004ba1 <follow_path>
c00067a7:	85 c0                	test   eax,eax
c00067a9:	75 27                	jne    c00067d2 <f_rename+0x20f>
c00067ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067af:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067b6:	0f 85 f3 fe ff ff    	jne    c00066af <f_rename+0xec>
c00067bc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067c3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ca:	0f 85 df fe ff ff    	jne    c00066af <f_rename+0xec>
c00067d0:	eb 09                	jmp    c00067db <f_rename+0x218>
c00067d2:	83 f8 04             	cmp    eax,0x4
c00067d5:	0f 85 bc 00 00 00    	jne    c0006897 <f_rename+0x2d4>
c00067db:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067e2:	e8 3b d8 ff ff       	call   c0004022 <dir_register>
c00067e7:	85 c0                	test   eax,eax
c00067e9:	0f 85 a8 00 00 00    	jne    c0006897 <f_rename+0x2d4>
c00067ef:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067f6:	b9 13 00 00 00       	mov    ecx,0x13
c00067fb:	8d 46 0d             	lea    eax,[esi+0xd]
c00067fe:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006802:	e8 13 b2 ff ff       	call   c0001a1a <mem_cpy>
c0006807:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000680b:	a8 10                	test   al,0x10
c000680d:	75 03                	jne    c0006812 <f_rename+0x24f>
c000680f:	83 c8 20             	or     eax,0x20
c0006812:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006819:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000681d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006821:	74 5e                	je     c0006881 <f_rename+0x2be>
c0006823:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000682a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c000682e:	74 51                	je     c0006881 <f_rename+0x2be>
c0006830:	89 f2                	mov    edx,esi
c0006832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006836:	8a 07                	mov    al,BYTE PTR [edi]
c0006838:	e8 d9 e2 ff ff       	call   c0004b16 <ld_clust.isra.0>
c000683d:	89 c2                	mov    edx,eax
c000683f:	89 f8                	mov    eax,edi
c0006841:	e8 ee b3 ff ff       	call   c0001c34 <clst2sect>
c0006846:	89 c6                	mov    esi,eax
c0006848:	89 d1                	mov    ecx,edx
c000684a:	b8 02 00 00 00       	mov    eax,0x2
c000684f:	09 f2                	or     edx,esi
c0006851:	74 44                	je     c0006897 <f_rename+0x2d4>
c0006853:	89 f2                	mov    edx,esi
c0006855:	89 f8                	mov    eax,edi
c0006857:	e8 1d b9 ff ff       	call   c0002179 <move_window>
c000685c:	85 c0                	test   eax,eax
c000685e:	75 37                	jne    c0006897 <f_rename+0x2d4>
c0006860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006864:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006868:	75 17                	jne    c0006881 <f_rename+0x2be>
c000686a:	8d 50 74             	lea    edx,[eax+0x74]
c000686d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006874:	e8 c6 e2 ff ff       	call   c0004b3f <st_clust.isra.1>
c0006879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006881:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006885:	e8 f4 d0 ff ff       	call   c000397e <dir_remove>
c000688a:	85 c0                	test   eax,eax
c000688c:	75 09                	jne    c0006897 <f_rename+0x2d4>
c000688e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006892:	e8 0d da ff ff       	call   c00042a4 <sync_fs>
c0006897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000689b:	83 ec 0c             	sub    esp,0xc
c000689e:	53                   	push   ebx
c000689f:	e8 40 19 00 00       	call   c00081e4 <ff_memfree>
c00068a4:	83 c4 10             	add    esp,0x10
c00068a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00068ab:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068b1:	5b                   	pop    ebx
c00068b2:	5e                   	pop    esi
c00068b3:	5f                   	pop    edi
c00068b4:	5d                   	pop    ebp
c00068b5:	c3                   	ret    

c00068b6 <f_chmod>:
c00068b6:	57                   	push   edi
c00068b7:	b9 02 00 00 00       	mov    ecx,0x2
c00068bc:	56                   	push   esi
c00068bd:	53                   	push   ebx
c00068be:	83 ec 60             	sub    esp,0x60
c00068c1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068c5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068c9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068cd:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068d1:	e8 55 bb ff ff       	call   c000242b <mount_volume>
c00068d6:	85 c0                	test   eax,eax
c00068d8:	0f 85 af 00 00 00    	jne    c000698d <f_chmod+0xd7>
c00068de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068e2:	83 ec 0c             	sub    esp,0xc
c00068e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068e9:	68 60 04 00 00       	push   0x460
c00068ee:	e8 db 18 00 00       	call   c00081ce <ff_memalloc>
c00068f3:	83 c4 10             	add    esp,0x10
c00068f6:	89 c6                	mov    esi,eax
c00068f8:	b8 11 00 00 00       	mov    eax,0x11
c00068fd:	85 f6                	test   esi,esi
c00068ff:	0f 84 88 00 00 00    	je     c000698d <f_chmod+0xd7>
c0006905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006909:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000690f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006912:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006915:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006919:	8d 44 24 14          	lea    eax,[esp+0x14]
c000691d:	e8 7f e2 ff ff       	call   c0004ba1 <follow_path>
c0006922:	85 c0                	test   eax,eax
c0006924:	75 53                	jne    c0006979 <f_chmod+0xc3>
c0006926:	b8 06 00 00 00       	mov    eax,0x6
c000692b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006930:	75 47                	jne    c0006979 <f_chmod+0xc3>
c0006932:	89 f9                	mov    ecx,edi
c0006934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006938:	83 e1 27             	and    ecx,0x27
c000693b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000693e:	75 1d                	jne    c000695d <f_chmod+0xa7>
c0006940:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006943:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006946:	21 cb                	and    ebx,ecx
c0006948:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000694b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c000694e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006952:	e8 a2 cf ff ff       	call   c00038f9 <store_xdir>
c0006957:	85 c0                	test   eax,eax
c0006959:	75 1e                	jne    c0006979 <f_chmod+0xc3>
c000695b:	eb 13                	jmp    c0006970 <f_chmod+0xba>
c000695d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006961:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006964:	21 cb                	and    ebx,ecx
c0006966:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006969:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000696c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006974:	e8 2b d9 ff ff       	call   c00042a4 <sync_fs>
c0006979:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000697d:	83 ec 0c             	sub    esp,0xc
c0006980:	56                   	push   esi
c0006981:	e8 5e 18 00 00       	call   c00081e4 <ff_memfree>
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000698d:	83 c4 60             	add    esp,0x60
c0006990:	5b                   	pop    ebx
c0006991:	5e                   	pop    esi
c0006992:	5f                   	pop    edi
c0006993:	c3                   	ret    

c0006994 <f_utime>:
c0006994:	56                   	push   esi
c0006995:	b9 02 00 00 00       	mov    ecx,0x2
c000699a:	53                   	push   ebx
c000699b:	83 ec 64             	sub    esp,0x64
c000699e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00069a2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069a6:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069aa:	e8 7c ba ff ff       	call   c000242b <mount_volume>
c00069af:	85 c0                	test   eax,eax
c00069b1:	0f 85 b5 00 00 00    	jne    c0006a6c <f_utime+0xd8>
c00069b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069bb:	83 ec 0c             	sub    esp,0xc
c00069be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069c2:	68 60 04 00 00       	push   0x460
c00069c7:	e8 02 18 00 00       	call   c00081ce <ff_memalloc>
c00069cc:	83 c4 10             	add    esp,0x10
c00069cf:	89 c3                	mov    ebx,eax
c00069d1:	b8 11 00 00 00       	mov    eax,0x11
c00069d6:	85 db                	test   ebx,ebx
c00069d8:	0f 84 8e 00 00 00    	je     c0006a6c <f_utime+0xd8>
c00069de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069e8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069eb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ee:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f6:	e8 a6 e1 ff ff       	call   c0004ba1 <follow_path>
c00069fb:	85 c0                	test   eax,eax
c00069fd:	75 59                	jne    c0006a58 <f_utime+0xc4>
c00069ff:	b8 06 00 00 00       	mov    eax,0x6
c0006a04:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a09:	75 4d                	jne    c0006a58 <f_utime+0xc4>
c0006a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a0f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a13:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a17:	c1 e2 10             	shl    edx,0x10
c0006a1a:	09 ca                	or     edx,ecx
c0006a1c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a1f:	75 1a                	jne    c0006a3b <f_utime+0xa7>
c0006a21:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a24:	83 c0 0c             	add    eax,0xc
c0006a27:	e8 e5 af ff ff       	call   c0001a11 <st_dword>
c0006a2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a30:	e8 c4 ce ff ff       	call   c00038f9 <store_xdir>
c0006a35:	85 c0                	test   eax,eax
c0006a37:	75 1f                	jne    c0006a58 <f_utime+0xc4>
c0006a39:	eb 14                	jmp    c0006a4f <f_utime+0xbb>
c0006a3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a3f:	83 c0 16             	add    eax,0x16
c0006a42:	e8 ca af ff ff       	call   c0001a11 <st_dword>
c0006a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a53:	e8 4c d8 ff ff       	call   c00042a4 <sync_fs>
c0006a58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5c:	83 ec 0c             	sub    esp,0xc
c0006a5f:	53                   	push   ebx
c0006a60:	e8 7f 17 00 00       	call   c00081e4 <ff_memfree>
c0006a65:	83 c4 10             	add    esp,0x10
c0006a68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6c:	83 c4 64             	add    esp,0x64
c0006a6f:	5b                   	pop    ebx
c0006a70:	5e                   	pop    esi
c0006a71:	c3                   	ret    

c0006a72 <f_getlabel>:
c0006a72:	55                   	push   ebp
c0006a73:	31 c9                	xor    ecx,ecx
c0006a75:	57                   	push   edi
c0006a76:	56                   	push   esi
c0006a77:	53                   	push   ebx
c0006a78:	83 ec 6c             	sub    esp,0x6c
c0006a7b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a7f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a86:	e8 a0 b9 ff ff       	call   c000242b <mount_volume>
c0006a8b:	89 c6                	mov    esi,eax
c0006a8d:	85 c0                	test   eax,eax
c0006a8f:	0f 85 c1 01 00 00    	jne    c0006c56 <f_getlabel+0x1e4>
c0006a95:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a9d:	0f 84 5f 01 00 00    	je     c0006c02 <f_getlabel+0x190>
c0006aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa7:	31 d2                	xor    edx,edx
c0006aa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006ab5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab9:	e8 39 c4 ff ff       	call   c0002ef7 <dir_sdi>
c0006abe:	85 c0                	test   eax,eax
c0006ac0:	0f 85 2d 01 00 00    	jne    c0006bf3 <f_getlabel+0x181>
c0006ac6:	ba 01 00 00 00       	mov    edx,0x1
c0006acb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006acf:	e8 33 cc ff ff       	call   c0003707 <dir_read>
c0006ad4:	85 c0                	test   eax,eax
c0006ad6:	0f 85 17 01 00 00    	jne    c0006bf3 <f_getlabel+0x181>
c0006adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ae3:	74 09                	je     c0006aee <f_getlabel+0x7c>
c0006ae5:	31 db                	xor    ebx,ebx
c0006ae7:	31 c9                	xor    ecx,ecx
c0006ae9:	e9 c8 00 00 00       	jmp    c0006bb6 <f_getlabel+0x144>
c0006aee:	31 ed                	xor    ebp,ebp
c0006af0:	31 db                	xor    ebx,ebx
c0006af2:	31 ff                	xor    edi,edi
c0006af4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006af8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006afc:	39 fa                	cmp    edx,edi
c0006afe:	76 4b                	jbe    c0006b4b <f_getlabel+0xd9>
c0006b00:	47                   	inc    edi
c0006b01:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b04:	01 d0                	add    eax,edx
c0006b06:	e8 90 ae ff ff       	call   c000199b <ld_word>
c0006b0b:	66 85 ed             	test   bp,bp
c0006b0e:	75 0d                	jne    c0006b1d <f_getlabel+0xab>
c0006b10:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b16:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b1b:	76 28                	jbe    c0006b45 <f_getlabel+0xd3>
c0006b1d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b24:	89 e9                	mov    ecx,ebp
c0006b26:	01 da                	add    edx,ebx
c0006b28:	c1 e1 10             	shl    ecx,0x10
c0006b2b:	0f b7 c0             	movzx  eax,ax
c0006b2e:	09 c8                	or     eax,ecx
c0006b30:	b9 04 00 00 00       	mov    ecx,0x4
c0006b35:	e8 01 b0 ff ff       	call   c0001b3b <put_utf>
c0006b3a:	84 c0                	test   al,al
c0006b3c:	74 0b                	je     c0006b49 <f_getlabel+0xd7>
c0006b3e:	0f b6 c0             	movzx  eax,al
c0006b41:	01 c3                	add    ebx,eax
c0006b43:	31 c0                	xor    eax,eax
c0006b45:	89 c5                	mov    ebp,eax
c0006b47:	eb ab                	jmp    c0006af4 <f_getlabel+0x82>
c0006b49:	31 db                	xor    ebx,ebx
c0006b4b:	66 85 ed             	test   bp,bp
c0006b4e:	74 02                	je     c0006b52 <f_getlabel+0xe0>
c0006b50:	31 db                	xor    ebx,ebx
c0006b52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b59:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b5d:	e9 a0 00 00 00       	jmp    c0006c02 <f_getlabel+0x190>
c0006b62:	83 ff 0b             	cmp    edi,0xb
c0006b65:	74 11                	je     c0006b78 <f_getlabel+0x106>
c0006b67:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b70:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b73:	c1 e0 08             	shl    eax,0x8
c0006b76:	09 c2                	or     edx,eax
c0006b78:	0f b7 d2             	movzx  edx,dx
c0006b7b:	50                   	push   eax
c0006b7c:	50                   	push   eax
c0006b7d:	68 b5 01 00 00       	push   0x1b5
c0006b82:	52                   	push   edx
c0006b83:	e8 03 17 00 00       	call   c000828b <ff_oem2uni>
c0006b88:	83 c4 10             	add    esp,0x10
c0006b8b:	66 85 c0             	test   ax,ax
c0006b8e:	74 46                	je     c0006bd6 <f_getlabel+0x164>
c0006b90:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b97:	0f b7 c0             	movzx  eax,ax
c0006b9a:	01 da                	add    edx,ebx
c0006b9c:	b9 04 00 00 00       	mov    ecx,0x4
c0006ba1:	e8 95 af ff ff       	call   c0001b3b <put_utf>
c0006ba6:	84 c0                	test   al,al
c0006ba8:	74 2c                	je     c0006bd6 <f_getlabel+0x164>
c0006baa:	0f b6 c0             	movzx  eax,al
c0006bad:	01 c3                	add    ebx,eax
c0006baf:	83 ff 0b             	cmp    edi,0xb
c0006bb2:	74 24                	je     c0006bd8 <f_getlabel+0x166>
c0006bb4:	89 f9                	mov    ecx,edi
c0006bb6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bba:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bbd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bc2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bcb:	e8 9f ae ff ff       	call   c0001a6f <dbc_1st>
c0006bd0:	85 c0                	test   eax,eax
c0006bd2:	74 a4                	je     c0006b78 <f_getlabel+0x106>
c0006bd4:	eb 8c                	jmp    c0006b62 <f_getlabel+0xf0>
c0006bd6:	31 db                	xor    ebx,ebx
c0006bd8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bdf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006be2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006be9:	74 17                	je     c0006c02 <f_getlabel+0x190>
c0006beb:	4b                   	dec    ebx
c0006bec:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bef:	74 ee                	je     c0006bdf <f_getlabel+0x16d>
c0006bf1:	eb 0f                	jmp    c0006c02 <f_getlabel+0x190>
c0006bf3:	83 f8 04             	cmp    eax,0x4
c0006bf6:	75 5c                	jne    c0006c54 <f_getlabel+0x1e2>
c0006bf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c02:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c0a:	74 4a                	je     c0006c56 <f_getlabel+0x1e4>
c0006c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c10:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c13:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c16:	e8 5e b5 ff ff       	call   c0002179 <move_window>
c0006c1b:	89 c6                	mov    esi,eax
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 35                	jne    c0006c56 <f_getlabel+0x1e4>
c0006c21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c25:	b8 43 00 00 00       	mov    eax,0x43
c0006c2a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c2c:	80 f9 03             	cmp    cl,0x3
c0006c2f:	74 0f                	je     c0006c40 <f_getlabel+0x1ce>
c0006c31:	31 c0                	xor    eax,eax
c0006c33:	80 f9 04             	cmp    cl,0x4
c0006c36:	0f 94 c0             	sete   al
c0006c39:	48                   	dec    eax
c0006c3a:	83 e0 c3             	and    eax,0xffffffc3
c0006c3d:	83 c0 64             	add    eax,0x64
c0006c40:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c44:	e8 5f ad ff ff       	call   c00019a8 <ld_dword>
c0006c49:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c50:	89 07                	mov    DWORD PTR [edi],eax
c0006c52:	eb 02                	jmp    c0006c56 <f_getlabel+0x1e4>
c0006c54:	89 c6                	mov    esi,eax
c0006c56:	83 c4 6c             	add    esp,0x6c
c0006c59:	89 f0                	mov    eax,esi
c0006c5b:	5b                   	pop    ebx
c0006c5c:	5e                   	pop    esi
c0006c5d:	5f                   	pop    edi
c0006c5e:	5d                   	pop    ebp
c0006c5f:	c3                   	ret    

c0006c60 <f_setlabel>:
c0006c60:	56                   	push   esi
c0006c61:	b9 02 00 00 00       	mov    ecx,0x2
c0006c66:	53                   	push   ebx
c0006c67:	83 ec 74             	sub    esp,0x74
c0006c6a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c6e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c75:	e8 b1 b7 ff ff       	call   c000242b <mount_volume>
c0006c7a:	89 c6                	mov    esi,eax
c0006c7c:	85 c0                	test   eax,eax
c0006c7e:	0f 85 41 02 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c8b:	0f 85 8e 00 00 00    	jne    c0006d1f <f_setlabel+0xbf>
c0006c91:	b9 16 00 00 00       	mov    ecx,0x16
c0006c96:	31 d2                	xor    edx,edx
c0006c98:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c9c:	31 db                	xor    ebx,ebx
c0006c9e:	e8 8c ad ff ff       	call   c0001a2f <mem_set>
c0006ca3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006caa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006cad:	0f 86 0a 01 00 00    	jbe    c0006dbd <f_setlabel+0x15d>
c0006cb3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cba:	e8 b6 ad ff ff       	call   c0001a75 <tchar2uni>
c0006cbf:	89 c6                	mov    esi,eax
c0006cc1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cc6:	76 2a                	jbe    c0006cf2 <f_setlabel+0x92>
c0006cc8:	83 f8 ff             	cmp    eax,0xffffffff
c0006ccb:	74 05                	je     c0006cd2 <f_setlabel+0x72>
c0006ccd:	83 fb 09             	cmp    ebx,0x9
c0006cd0:	76 0a                	jbe    c0006cdc <f_setlabel+0x7c>
c0006cd2:	be 06 00 00 00       	mov    esi,0x6
c0006cd7:	e9 e9 01 00 00       	jmp    c0006ec5 <f_setlabel+0x265>
c0006cdc:	89 c2                	mov    edx,eax
c0006cde:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ce2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ce5:	c1 ea 10             	shr    edx,0x10
c0006ce8:	01 c8                	add    eax,ecx
c0006cea:	43                   	inc    ebx
c0006ceb:	e8 1d ad ff ff       	call   c0001a0d <st_word>
c0006cf0:	eb 04                	jmp    c0006cf6 <f_setlabel+0x96>
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	74 dc                	je     c0006cd2 <f_setlabel+0x72>
c0006cf6:	89 f2                	mov    edx,esi
c0006cf8:	b8 17 f7 01 c0       	mov    eax,0xc001f717
c0006cfd:	e8 5b ad ff ff       	call   c0001a5d <chk_chr>
c0006d02:	85 c0                	test   eax,eax
c0006d04:	75 cc                	jne    c0006cd2 <f_setlabel+0x72>
c0006d06:	83 fb 0a             	cmp    ebx,0xa
c0006d09:	77 c7                	ja     c0006cd2 <f_setlabel+0x72>
c0006d0b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d0e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d12:	0f b7 d6             	movzx  edx,si
c0006d15:	01 c8                	add    eax,ecx
c0006d17:	43                   	inc    ebx
c0006d18:	e8 f0 ac ff ff       	call   c0001a0d <st_word>
c0006d1d:	eb 84                	jmp    c0006ca3 <f_setlabel+0x43>
c0006d1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d24:	ba 20 00 00 00       	mov    edx,0x20
c0006d29:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d2d:	31 db                	xor    ebx,ebx
c0006d2f:	e8 fb ac ff ff       	call   c0001a2f <mem_set>
c0006d34:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d3e:	76 60                	jbe    c0006da0 <f_setlabel+0x140>
c0006d40:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d47:	e8 29 ad ff ff       	call   c0001a75 <tchar2uni>
c0006d4c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d51:	0f 87 7b ff ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006d57:	83 ec 0c             	sub    esp,0xc
c0006d5a:	50                   	push   eax
c0006d5b:	e8 97 15 00 00       	call   c00082f7 <ff_wtoupper>
c0006d60:	5a                   	pop    edx
c0006d61:	59                   	pop    ecx
c0006d62:	68 b5 01 00 00       	push   0x1b5
c0006d67:	50                   	push   eax
c0006d68:	e8 8e 14 00 00       	call   c00081fb <ff_uni2oem>
c0006d6d:	83 c4 10             	add    esp,0x10
c0006d70:	89 c6                	mov    esi,eax
c0006d72:	66 85 c0             	test   ax,ax
c0006d75:	0f 84 57 ff ff ff    	je     c0006cd2 <f_setlabel+0x72>
c0006d7b:	0f b7 d0             	movzx  edx,ax
c0006d7e:	b8 10 f7 01 c0       	mov    eax,0xc001f710
c0006d83:	e8 d5 ac ff ff       	call   c0001a5d <chk_chr>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	0f 85 42 ff ff ff    	jne    c0006cd2 <f_setlabel+0x72>
c0006d90:	66 81 fe ff 00       	cmp    si,0xff
c0006d95:	0f 87 14 01 00 00    	ja     c0006eaf <f_setlabel+0x24f>
c0006d9b:	e9 fa 00 00 00       	jmp    c0006e9a <f_setlabel+0x23a>
c0006da0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006da5:	0f 84 27 ff ff ff    	je     c0006cd2 <f_setlabel+0x72>
c0006dab:	85 db                	test   ebx,ebx
c0006dad:	74 0e                	je     c0006dbd <f_setlabel+0x15d>
c0006daf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006db2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006db7:	75 04                	jne    c0006dbd <f_setlabel+0x15d>
c0006db9:	89 c3                	mov    ebx,eax
c0006dbb:	eb ee                	jmp    c0006dab <f_setlabel+0x14b>
c0006dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006dc1:	31 d2                	xor    edx,edx
c0006dc3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dc7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dd3:	e8 1f c1 ff ff       	call   c0002ef7 <dir_sdi>
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	85 c0                	test   eax,eax
c0006ddc:	0f 85 e3 00 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006de2:	ba 01 00 00 00       	mov    edx,0x1
c0006de7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006deb:	e8 17 c9 ff ff       	call   c0003707 <dir_read>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	75 21                	jne    c0006e15 <f_setlabel+0x1b5>
c0006df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006df8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006dfc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006dff:	74 5d                	je     c0006e5e <f_setlabel+0x1fe>
c0006e01:	85 db                	test   ebx,ebx
c0006e03:	74 0b                	je     c0006e10 <f_setlabel+0x1b0>
c0006e05:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e0a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e0e:	eb 70                	jmp    c0006e80 <f_setlabel+0x220>
c0006e10:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e13:	eb 70                	jmp    c0006e85 <f_setlabel+0x225>
c0006e15:	83 f8 04             	cmp    eax,0x4
c0006e18:	75 7c                	jne    c0006e96 <f_setlabel+0x236>
c0006e1a:	85 db                	test   ebx,ebx
c0006e1c:	0f 84 a3 00 00 00    	je     c0006ec5 <f_setlabel+0x265>
c0006e22:	ba 01 00 00 00       	mov    edx,0x1
c0006e27:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2b:	e8 51 ca ff ff       	call   c0003881 <dir_alloc>
c0006e30:	89 c6                	mov    esi,eax
c0006e32:	85 c0                	test   eax,eax
c0006e34:	0f 85 8b 00 00 00    	jne    c0006ec5 <f_setlabel+0x265>
c0006e3a:	31 d2                	xor    edx,edx
c0006e3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e40:	b9 20 00 00 00       	mov    ecx,0x20
c0006e45:	e8 e5 ab ff ff       	call   c0001a2f <mem_set>
c0006e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e55:	75 18                	jne    c0006e6f <f_setlabel+0x20f>
c0006e57:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e5a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e6a:	83 c0 02             	add    eax,0x2
c0006e6d:	eb 9b                	jmp    c0006e0a <f_setlabel+0x1aa>
c0006e6f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e73:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e78:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e80:	e8 95 ab ff ff       	call   c0001a1a <mem_cpy>
c0006e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e89:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e91:	e8 0e d4 ff ff       	call   c00042a4 <sync_fs>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	eb 2b                	jmp    c0006ec5 <f_setlabel+0x265>
c0006e9a:	83 fb 0a             	cmp    ebx,0xa
c0006e9d:	0f 87 2f fe ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006ea3:	89 f0                	mov    eax,esi
c0006ea5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea9:	43                   	inc    ebx
c0006eaa:	e9 85 fe ff ff       	jmp    c0006d34 <f_setlabel+0xd4>
c0006eaf:	83 fb 09             	cmp    ebx,0x9
c0006eb2:	0f 87 1a fe ff ff    	ja     c0006cd2 <f_setlabel+0x72>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	66 c1 e8 08          	shr    ax,0x8
c0006ebe:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ec2:	43                   	inc    ebx
c0006ec3:	eb de                	jmp    c0006ea3 <f_setlabel+0x243>
c0006ec5:	89 f0                	mov    eax,esi
c0006ec7:	83 c4 74             	add    esp,0x74
c0006eca:	5b                   	pop    ebx
c0006ecb:	5e                   	pop    esi
c0006ecc:	c3                   	ret    

c0006ecd <f_forward>:
c0006ecd:	55                   	push   ebp
c0006ece:	57                   	push   edi
c0006ecf:	56                   	push   esi
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 2c             	sub    esp,0x2c
c0006ed4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ed8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006edc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ee2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ee6:	89 d8                	mov    eax,ebx
c0006ee8:	e8 b1 b1 ff ff       	call   c000209e <validate>
c0006eed:	89 c5                	mov    ebp,eax
c0006eef:	85 c0                	test   eax,eax
c0006ef1:	0f 85 aa 01 00 00    	jne    c00070a1 <f_forward+0x1d4>
c0006ef7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006efb:	85 ed                	test   ebp,ebp
c0006efd:	0f 85 9e 01 00 00    	jne    c00070a1 <f_forward+0x1d4>
c0006f03:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f07:	0f 84 8f 01 00 00    	je     c000709c <f_forward+0x1cf>
c0006f0d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f10:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f13:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f16:	bf 00 00 00 00       	mov    edi,0x0
c0006f1b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f1e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f22:	89 d1                	mov    ecx,edx
c0006f24:	19 f9                	sbb    ecx,edi
c0006f26:	0f 83 cf 00 00 00    	jae    c0006ffb <f_forward+0x12e>
c0006f2c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f30:	e9 c6 00 00 00       	jmp    c0006ffb <f_forward+0x12e>
c0006f35:	50                   	push   eax
c0006f36:	50                   	push   eax
c0006f37:	6a 00                	push   0x0
c0006f39:	6a 00                	push   0x0
c0006f3b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f3f:	83 c4 10             	add    esp,0x10
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 84 57 01 00 00    	je     c00070a1 <f_forward+0x1d4>
c0006f4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f54:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f58:	89 d7                	mov    edi,edx
c0006f5a:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f5d:	89 c6                	mov    esi,eax
c0006f5f:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f63:	21 ce                	and    esi,ecx
c0006f65:	89 c1                	mov    ecx,eax
c0006f67:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f6d:	0f 84 98 00 00 00    	je     c000700b <f_forward+0x13e>
c0006f73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f77:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f7a:	89 c8                	mov    eax,ecx
c0006f7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f80:	e8 af ac ff ff       	call   c0001c34 <clst2sect>
c0006f85:	89 d7                	mov    edi,edx
c0006f87:	09 c7                	or     edi,eax
c0006f89:	0f 84 9e 00 00 00    	je     c000702d <f_forward+0x160>
c0006f8f:	31 ff                	xor    edi,edi
c0006f91:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f94:	01 c6                	add    esi,eax
c0006f96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f9a:	11 d7                	adc    edi,edx
c0006f9c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f9f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fa6:	39 fa                	cmp    edx,edi
c0006fa8:	0f 85 a2 00 00 00    	jne    c0007050 <f_forward+0x183>
c0006fae:	39 f0                	cmp    eax,esi
c0006fb0:	0f 85 9a 00 00 00    	jne    c0007050 <f_forward+0x183>
c0006fb6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb9:	ba 00 02 00 00       	mov    edx,0x200
c0006fbe:	25 ff 01 00 00       	and    eax,0x1ff
c0006fc3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fc7:	29 c2                	sub    edx,eax
c0006fc9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fcc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fcf:	39 d1                	cmp    ecx,edx
c0006fd1:	76 02                	jbe    c0006fd5 <f_forward+0x108>
c0006fd3:	89 d1                	mov    ecx,edx
c0006fd5:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fd8:	52                   	push   edx
c0006fd9:	01 c6                	add    esi,eax
c0006fdb:	52                   	push   edx
c0006fdc:	51                   	push   ecx
c0006fdd:	56                   	push   esi
c0006fde:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe2:	83 c4 10             	add    esp,0x10
c0006fe5:	85 c0                	test   eax,eax
c0006fe7:	74 44                	je     c000702d <f_forward+0x160>
c0006fe9:	31 ff                	xor    edi,edi
c0006feb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fee:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006ff1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006ff5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006ff9:	01 07                	add    DWORD PTR [edi],eax
c0006ffb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007000:	0f 85 2f ff ff ff    	jne    c0006f35 <f_forward+0x68>
c0007006:	e9 96 00 00 00       	jmp    c00070a1 <f_forward+0x1d4>
c000700b:	85 f6                	test   esi,esi
c000700d:	0f 85 60 ff ff ff    	jne    c0006f73 <f_forward+0xa6>
c0007013:	89 d7                	mov    edi,edx
c0007015:	09 c7                	or     edi,eax
c0007017:	75 05                	jne    c000701e <f_forward+0x151>
c0007019:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000701c:	eb 0a                	jmp    c0007028 <f_forward+0x15b>
c000701e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007021:	89 d8                	mov    eax,ebx
c0007023:	e8 d9 bc ff ff       	call   c0002d01 <get_fat>
c0007028:	83 f8 01             	cmp    eax,0x1
c000702b:	77 0b                	ja     c0007038 <f_forward+0x16b>
c000702d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007031:	bd 02 00 00 00       	mov    ebp,0x2
c0007036:	eb 69                	jmp    c00070a1 <f_forward+0x1d4>
c0007038:	83 f8 ff             	cmp    eax,0xffffffff
c000703b:	75 0b                	jne    c0007048 <f_forward+0x17b>
c000703d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007041:	bd 01 00 00 00       	mov    ebp,0x1
c0007046:	eb 59                	jmp    c00070a1 <f_forward+0x1d4>
c0007048:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000704b:	e9 23 ff ff ff       	jmp    c0006f73 <f_forward+0xa6>
c0007050:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007054:	79 20                	jns    c0007076 <f_forward+0x1a9>
c0007056:	83 ec 0c             	sub    esp,0xc
c0007059:	6a 01                	push   0x1
c000705b:	52                   	push   edx
c000705c:	50                   	push   eax
c000705d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007061:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007065:	50                   	push   eax
c0007066:	e8 fb a8 ff ff       	call   c0001966 <disk_write>
c000706b:	83 c4 20             	add    esp,0x20
c000706e:	85 c0                	test   eax,eax
c0007070:	75 cb                	jne    c000703d <f_forward+0x170>
c0007072:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007076:	83 ec 0c             	sub    esp,0xc
c0007079:	6a 01                	push   0x1
c000707b:	57                   	push   edi
c000707c:	56                   	push   esi
c000707d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007081:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007085:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007089:	50                   	push   eax
c000708a:	e8 c1 a8 ff ff       	call   c0001950 <disk_read>
c000708f:	83 c4 20             	add    esp,0x20
c0007092:	85 c0                	test   eax,eax
c0007094:	0f 84 1c ff ff ff    	je     c0006fb6 <f_forward+0xe9>
c000709a:	eb a1                	jmp    c000703d <f_forward+0x170>
c000709c:	bd 07 00 00 00       	mov    ebp,0x7
c00070a1:	83 c4 2c             	add    esp,0x2c
c00070a4:	89 e8                	mov    eax,ebp
c00070a6:	5b                   	pop    ebx
c00070a7:	5e                   	pop    esi
c00070a8:	5f                   	pop    edi
c00070a9:	5d                   	pop    ebp
c00070aa:	c3                   	ret    

c00070ab <f_mkfs>:
c00070ab:	55                   	push   ebp
c00070ac:	57                   	push   edi
c00070ad:	56                   	push   esi
c00070ae:	53                   	push   ebx
c00070af:	bb 0b 00 00 00       	mov    ebx,0xb
c00070b4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ba:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070c1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070c8:	e8 b0 ae ff ff       	call   c0001f7d <get_ldnumber>
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 88 ec 10 00 00    	js     c00081c1 <f_mkfs+0x1116>
c00070d5:	8b 14 85 40 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8c0]
c00070dc:	85 d2                	test   edx,edx
c00070de:	74 03                	je     c00070e3 <f_mkfs+0x38>
c00070e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070e3:	85 f6                	test   esi,esi
c00070e5:	75 05                	jne    c00070ec <f_mkfs+0x41>
c00070e7:	be 00 f7 01 c0       	mov    esi,0xc001f700
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	0f b6 c0             	movzx  eax,al
c00070f2:	bb 03 00 00 00       	mov    ebx,0x3
c00070f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070ff:	e8 49 a8 ff ff       	call   c000194d <disk_initialize>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	a8 01                	test   al,0x1
c0007109:	0f 85 b2 10 00 00    	jne    c00081c1 <f_mkfs+0x1116>
c000710f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007114:	a8 04                	test   al,0x4
c0007116:	0f 85 a5 10 00 00    	jne    c00081c1 <f_mkfs+0x1116>
c000711c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000711f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007123:	85 c0                	test   eax,eax
c0007125:	75 20                	jne    c0007147 <f_mkfs+0x9c>
c0007127:	51                   	push   ecx
c0007128:	8d 44 24 78          	lea    eax,[esp+0x78]
c000712c:	50                   	push   eax
c000712d:	6a 03                	push   0x3
c000712f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007133:	e8 44 a8 ff ff       	call   c000197c <disk_ioctl>
c0007138:	83 c4 10             	add    esp,0x10
c000713b:	85 c0                	test   eax,eax
c000713d:	74 08                	je     c0007147 <f_mkfs+0x9c>
c000713f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007147:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000714b:	8d 42 ff             	lea    eax,[edx-0x1]
c000714e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007153:	77 04                	ja     c0007159 <f_mkfs+0xae>
c0007155:	85 c2                	test   edx,eax
c0007157:	74 08                	je     c0007161 <f_mkfs+0xb6>
c0007159:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007161:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007164:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007168:	48                   	dec    eax
c0007169:	3c 01                	cmp    al,0x1
c000716b:	76 05                	jbe    c0007172 <f_mkfs+0xc7>
c000716d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007172:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007179:	48                   	dec    eax
c000717a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000717f:	77 07                	ja     c0007188 <f_mkfs+0xdd>
c0007181:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007186:	74 08                	je     c0007190 <f_mkfs+0xe5>
c0007188:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007190:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007193:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007199:	77 07                	ja     c00071a2 <f_mkfs+0xf7>
c000719b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000719e:	85 d8                	test   eax,ebx
c00071a0:	74 02                	je     c00071a4 <f_mkfs+0xf9>
c00071a2:	31 db                	xor    ebx,ebx
c00071a4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071af:	77 0a                	ja     c00071bb <f_mkfs+0x110>
c00071b1:	bb 11 00 00 00       	mov    ebx,0x11
c00071b6:	e9 06 10 00 00       	jmp    c00081c1 <f_mkfs+0x1116>
c00071bb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071c2:	8b 36                	mov    esi,DWORD PTR [esi]
c00071c4:	85 ed                	test   ebp,ebp
c00071c6:	75 1e                	jne    c00071e6 <f_mkfs+0x13b>
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071d2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071d7:	50                   	push   eax
c00071d8:	e8 f1 0f 00 00       	call   c00081ce <ff_memalloc>
c00071dd:	83 c4 10             	add    esp,0x10
c00071e0:	89 c5                	mov    ebp,eax
c00071e2:	85 c0                	test   eax,eax
c00071e4:	74 cb                	je     c00071b1 <f_mkfs+0x106>
c00071e6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071ee:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071f6:	52                   	push   edx
c00071f7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071fb:	50                   	push   eax
c00071fc:	6a 01                	push   0x1
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	e8 75 a7 ff ff       	call   c000197c <disk_ioctl>
c0007207:	83 c4 10             	add    esp,0x10
c000720a:	85 c0                	test   eax,eax
c000720c:	0f 85 4a 0f 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007212:	89 f1                	mov    ecx,esi
c0007214:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000721c:	83 e1 0f             	and    ecx,0xf
c000721f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007227:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000722b:	83 e6 08             	and    esi,0x8
c000722e:	75 56                	jne    c0007286 <f_mkfs+0x1db>
c0007230:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007234:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007238:	83 ff 00             	cmp    edi,0x0
c000723b:	76 20                	jbe    c000725d <f_mkfs+0x1b2>
c000723d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007242:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000724a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007250:	83 d7 ff             	adc    edi,0xffffffff
c0007253:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007257:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000725b:	eb 21                	jmp    c000727e <f_mkfs+0x1d3>
c000725d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007262:	39 f2                	cmp    edx,esi
c0007264:	19 f8                	sbb    eax,edi
c0007266:	73 1e                	jae    c0007286 <f_mkfs+0x1db>
c0007268:	83 c6 c1             	add    esi,0xffffffc1
c000726b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007273:	83 d7 ff             	adc    edi,0xffffffff
c0007276:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000727a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000727e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007286:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000728a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000728e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007291:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007295:	31 c0                	xor    eax,eax
c0007297:	ba 7f 00 00 00       	mov    edx,0x7f
c000729c:	89 c7                	mov    edi,eax
c000729e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072a1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00072a5:	0f 83 c5 0a 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c00072ab:	89 df                	mov    edi,ebx
c00072ad:	c1 ef 09             	shr    edi,0x9
c00072b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072b4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072bb:	c1 ef 09             	shr    edi,0x9
c00072be:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072c3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072c7:	74 29                	je     c00072f2 <f_mkfs+0x247>
c00072c9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072cf:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072d4:	0f 97 c2             	seta   dl
c00072d7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072da:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072de:	0f 92 c0             	setb   al
c00072e1:	08 c2                	or     dl,al
c00072e3:	75 5b                	jne    c0007340 <f_mkfs+0x295>
c00072e5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072e9:	83 e0 07             	and    eax,0x7
c00072ec:	3c 04                	cmp    al,0x4
c00072ee:	74 50                	je     c0007340 <f_mkfs+0x295>
c00072f0:	eb 1b                	jmp    c000730d <f_mkfs+0x262>
c00072f2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072f7:	0f 87 73 0a 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c00072fd:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007303:	76 08                	jbe    c000730d <f_mkfs+0x262>
c0007305:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000730d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007311:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007315:	83 e0 01             	and    eax,0x1
c0007318:	80 e1 02             	and    cl,0x2
c000731b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000731f:	74 0d                	je     c000732e <f_mkfs+0x283>
c0007321:	84 c0                	test   al,al
c0007323:	0f 84 53 09 00 00    	je     c0007c7c <f_mkfs+0xbd1>
c0007329:	e9 12 08 00 00       	jmp    c0007b40 <f_mkfs+0xa95>
c000732e:	bb 13 00 00 00       	mov    ebx,0x13
c0007333:	84 c0                	test   al,al
c0007335:	0f 85 05 08 00 00    	jne    c0007b40 <f_mkfs+0xa95>
c000733b:	e9 39 0e 00 00       	jmp    c0008179 <f_mkfs+0x10ce>
c0007340:	31 c0                	xor    eax,eax
c0007342:	ba ff 0f 00 00       	mov    edx,0xfff
c0007347:	89 c7                	mov    edi,eax
c0007349:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000734c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007350:	0f 83 1a 0a 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c0007356:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000735c:	77 39                	ja     c0007397 <f_mkfs+0x2ec>
c000735e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007363:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000736b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000736e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007372:	73 08                	jae    c000737c <f_mkfs+0x2d1>
c0007374:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000737c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007381:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007384:	b8 00 00 00 00       	mov    eax,0x0
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	73 08                	jae    c0007397 <f_mkfs+0x2ec>
c000738f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000739b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000739f:	83 c0 20             	add    eax,0x20
c00073a2:	83 d2 00             	adc    edx,0x0
c00073a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073a9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073b1:	31 d2                	xor    edx,edx
c00073b3:	31 ff                	xor    edi,edi
c00073b5:	52                   	push   edx
c00073b6:	89 fb                	mov    ebx,edi
c00073b8:	50                   	push   eax
c00073b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073c1:	e8 d6 73 01 00       	call   c001e79c <__udivdi3>
c00073c6:	83 c4 10             	add    esp,0x10
c00073c9:	c1 e0 02             	shl    eax,0x2
c00073cc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073d0:	05 07 02 00 00       	add    eax,0x207
c00073d5:	89 f1                	mov    ecx,esi
c00073d7:	c1 e8 09             	shr    eax,0x9
c00073da:	83 c1 ff             	add    ecx,0xffffffff
c00073dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073e1:	83 d3 ff             	adc    ebx,0xffffffff
c00073e4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073e8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073ec:	31 d2                	xor    edx,edx
c00073ee:	01 c8                	add    eax,ecx
c00073f0:	11 da                	adc    edx,ebx
c00073f2:	89 c1                	mov    ecx,eax
c00073f4:	f7 de                	neg    esi
c00073f6:	89 d0                	mov    eax,edx
c00073f8:	83 d7 00             	adc    edi,0x0
c00073fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073ff:	f7 df                	neg    edi
c0007401:	21 f1                	and    ecx,esi
c0007403:	21 f8                	and    eax,edi
c0007405:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000740d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007411:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007415:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007419:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000741c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007420:	0f ac d0 01          	shrd   eax,edx,0x1
c0007424:	89 df                	mov    edi,ebx
c0007426:	d1 ea                	shr    edx,1
c0007428:	39 c1                	cmp    ecx,eax
c000742a:	19 d7                	sbb    edi,edx
c000742c:	0f 83 3e 09 00 00    	jae    c0007d70 <f_mkfs+0xcc5>
c0007432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007436:	31 d2                	xor    edx,edx
c0007438:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000743c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007440:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007444:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007447:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000744b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000744f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007453:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007457:	83 f8 0f             	cmp    eax,0xf
c000745a:	0f 86 10 09 00 00    	jbe    c0007d70 <f_mkfs+0xcc5>
c0007460:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007468:	0f 87 02 09 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c000746e:	31 d2                	xor    edx,edx
c0007470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007474:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000747c:	83 c0 07             	add    eax,0x7
c000747f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007487:	c1 e8 03             	shr    eax,0x3
c000748a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007491:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007499:	c1 e0 09             	shl    eax,0x9
c000749c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00074a0:	48                   	dec    eax
c00074a1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00074a5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00074a9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074b1:	31 d2                	xor    edx,edx
c00074b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074b7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074c2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074c7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074cb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074cf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074d3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074d7:	31 ff                	xor    edi,edi
c00074d9:	31 f6                	xor    esi,esi
c00074db:	31 db                	xor    ebx,ebx
c00074dd:	85 ff                	test   edi,edi
c00074df:	74 05                	je     c00074e6 <f_mkfs+0x43b>
c00074e1:	4f                   	dec    edi
c00074e2:	74 44                	je     c0007528 <f_mkfs+0x47d>
c00074e4:	eb 4f                	jmp    c0007535 <f_mkfs+0x48a>
c00074e6:	83 ec 0c             	sub    esp,0xc
c00074e9:	0f b7 c3             	movzx  eax,bx
c00074ec:	50                   	push   eax
c00074ed:	e8 05 0e 00 00       	call   c00082f7 <ff_wtoupper>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	89 c1                	mov    ecx,eax
c00074f7:	8d 53 01             	lea    edx,[ebx+0x1]
c00074fa:	66 39 c3             	cmp    bx,ax
c00074fd:	75 3e                	jne    c000753d <f_mkfs+0x492>
c00074ff:	be 01 00 00 00       	mov    esi,0x1
c0007504:	89 df                	mov    edi,ebx
c0007506:	66 01 f7             	add    di,si
c0007509:	75 07                	jne    c0007512 <f_mkfs+0x467>
c000750b:	83 fe 7f             	cmp    esi,0x7f
c000750e:	77 31                	ja     c0007541 <f_mkfs+0x496>
c0007510:	eb 16                	jmp    c0007528 <f_mkfs+0x47d>
c0007512:	83 ec 0c             	sub    esp,0xc
c0007515:	0f b7 ff             	movzx  edi,di
c0007518:	57                   	push   edi
c0007519:	e8 d9 0d 00 00       	call   c00082f7 <ff_wtoupper>
c000751e:	83 c4 10             	add    esp,0x10
c0007521:	39 c7                	cmp    edi,eax
c0007523:	75 e6                	jne    c000750b <f_mkfs+0x460>
c0007525:	46                   	inc    esi
c0007526:	eb dc                	jmp    c0007504 <f_mkfs+0x459>
c0007528:	31 c0                	xor    eax,eax
c000752a:	89 d9                	mov    ecx,ebx
c000752c:	4e                   	dec    esi
c000752d:	0f 95 c0             	setne  al
c0007530:	43                   	inc    ebx
c0007531:	89 c7                	mov    edi,eax
c0007533:	eb 14                	jmp    c0007549 <f_mkfs+0x49e>
c0007535:	89 f1                	mov    ecx,esi
c0007537:	01 f3                	add    ebx,esi
c0007539:	31 ff                	xor    edi,edi
c000753b:	eb 0c                	jmp    c0007549 <f_mkfs+0x49e>
c000753d:	89 d3                	mov    ebx,edx
c000753f:	eb 08                	jmp    c0007549 <f_mkfs+0x49e>
c0007541:	bf 02 00 00 00       	mov    edi,0x2
c0007546:	83 c9 ff             	or     ecx,0xffffffff
c0007549:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000754d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007550:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007554:	0f b6 c1             	movzx  eax,cl
c0007557:	e8 3a a9 ff ff       	call   c0001e96 <xsum32>
c000755c:	66 c1 e9 08          	shr    cx,0x8
c0007560:	89 c2                	mov    edx,eax
c0007562:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007565:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007569:	0f b7 c1             	movzx  eax,cx
c000756c:	e8 25 a9 ff ff       	call   c0001e96 <xsum32>
c0007571:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000757a:	66 85 db             	test   bx,bx
c000757d:	74 1f                	je     c000759e <f_mkfs+0x4f3>
c000757f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007582:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007589:	83 c0 02             	add    eax,0x2
c000758c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007592:	39 c2                	cmp    edx,eax
c0007594:	74 08                	je     c000759e <f_mkfs+0x4f3>
c0007596:	89 04 24             	mov    DWORD PTR [esp],eax
c0007599:	e9 3f ff ff ff       	jmp    c00074dd <f_mkfs+0x432>
c000759e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a1:	83 ec 0c             	sub    esp,0xc
c00075a4:	05 01 02 00 00       	add    eax,0x201
c00075a9:	c1 e8 09             	shr    eax,0x9
c00075ac:	50                   	push   eax
c00075ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075b9:	55                   	push   ebp
c00075ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075be:	e8 a3 a3 ff ff       	call   c0001966 <disk_write>
c00075c3:	83 c4 20             	add    esp,0x20
c00075c6:	85 c0                	test   eax,eax
c00075c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075cb:	0f 85 8b 0b 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00075d1:	89 d0                	mov    eax,edx
c00075d3:	31 d2                	xor    edx,edx
c00075d5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075d9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075dd:	66 85 db             	test   bx,bx
c00075e0:	74 04                	je     c00075e6 <f_mkfs+0x53b>
c00075e2:	31 c0                	xor    eax,eax
c00075e4:	eb b0                	jmp    c0007596 <f_mkfs+0x4eb>
c00075e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075ea:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075ee:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075f2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075f8:	31 d2                	xor    edx,edx
c00075fa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007605:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007609:	c1 eb 09             	shr    ebx,0x9
c000760c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007613:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007617:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000761b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000761f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007623:	8d 70 01             	lea    esi,[eax+0x1]
c0007626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000762a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000762e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007635:	31 d2                	xor    edx,edx
c0007637:	25 00 fe ff ff       	and    eax,0xfffffe00
c000763c:	89 04 24             	mov    DWORD PTR [esp],eax
c000763f:	89 c1                	mov    ecx,eax
c0007641:	89 e8                	mov    eax,ebp
c0007643:	e8 e7 a3 ff ff       	call   c0001a2f <mem_set>
c0007648:	31 c0                	xor    eax,eax
c000764a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000764d:	76 10                	jbe    c000765f <f_mkfs+0x5b4>
c000764f:	83 fe 07             	cmp    esi,0x7
c0007652:	76 0b                	jbe    c000765f <f_mkfs+0x5b4>
c0007654:	40                   	inc    eax
c0007655:	83 ee 08             	sub    esi,0x8
c0007658:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000765d:	eb eb                	jmp    c000764a <f_mkfs+0x59f>
c000765f:	b2 01                	mov    dl,0x1
c0007661:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007665:	85 f6                	test   esi,esi
c0007667:	74 0c                	je     c0007675 <f_mkfs+0x5ca>
c0007669:	39 04 24             	cmp    DWORD PTR [esp],eax
c000766c:	76 07                	jbe    c0007675 <f_mkfs+0x5ca>
c000766e:	08 11                	or     BYTE PTR [ecx],dl
c0007670:	4e                   	dec    esi
c0007671:	d1 e2                	shl    edx,1
c0007673:	eb f0                	jmp    c0007665 <f_mkfs+0x5ba>
c0007675:	89 df                	mov    edi,ebx
c0007677:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000767b:	76 04                	jbe    c0007681 <f_mkfs+0x5d6>
c000767d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007681:	83 ec 0c             	sub    esp,0xc
c0007684:	57                   	push   edi
c0007685:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000768d:	55                   	push   ebp
c000768e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007692:	e8 cf a2 ff ff       	call   c0001966 <disk_write>
c0007697:	83 c4 20             	add    esp,0x20
c000769a:	85 c0                	test   eax,eax
c000769c:	0f 85 ba 0a 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00076a2:	31 d2                	xor    edx,edx
c00076a4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00076a8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00076ac:	29 fb                	sub    ebx,edi
c00076ae:	0f 85 7a ff ff ff    	jne    c000762e <f_mkfs+0x583>
c00076b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076c0:	31 f6                	xor    esi,esi
c00076c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076c6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076c9:	31 d2                	xor    edx,edx
c00076cb:	89 e8                	mov    eax,ebp
c00076cd:	e8 5d a3 ff ff       	call   c0001a2f <mem_set>
c00076d2:	31 c9                	xor    ecx,ecx
c00076d4:	85 db                	test   ebx,ebx
c00076d6:	75 40                	jne    c0007718 <f_mkfs+0x66d>
c00076d8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076dd:	89 e8                	mov    eax,ebp
c00076df:	bb 02 00 00 00       	mov    ebx,0x2
c00076e4:	e8 28 a3 ff ff       	call   c0001a11 <st_dword>
c00076e9:	8d 45 04             	lea    eax,[ebp+0x4]
c00076ec:	83 ca ff             	or     edx,0xffffffff
c00076ef:	e8 1d a3 ff ff       	call   c0001a11 <st_dword>
c00076f4:	b9 08 00 00 00       	mov    ecx,0x8
c00076f9:	eb 1d                	jmp    c0007718 <f_mkfs+0x66d>
c00076fb:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076fe:	76 3b                	jbe    c000773b <f_mkfs+0x690>
c0007700:	43                   	inc    ebx
c0007701:	83 fe 01             	cmp    esi,0x1
c0007704:	89 da                	mov    edx,ebx
c0007706:	77 03                	ja     c000770b <f_mkfs+0x660>
c0007708:	83 ca ff             	or     edx,0xffffffff
c000770b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000770f:	4e                   	dec    esi
c0007710:	e8 fc a2 ff ff       	call   c0001a11 <st_dword>
c0007715:	83 c1 04             	add    ecx,0x4
c0007718:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000771c:	85 f6                	test   esi,esi
c000771e:	75 db                	jne    c00076fb <f_mkfs+0x650>
c0007720:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007725:	77 14                	ja     c000773b <f_mkfs+0x690>
c0007727:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000772b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007732:	85 f6                	test   esi,esi
c0007734:	74 05                	je     c000773b <f_mkfs+0x690>
c0007736:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007739:	77 dd                	ja     c0007718 <f_mkfs+0x66d>
c000773b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000773f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007743:	39 cf                	cmp    edi,ecx
c0007745:	76 02                	jbe    c0007749 <f_mkfs+0x69e>
c0007747:	89 cf                	mov    edi,ecx
c0007749:	83 ec 0c             	sub    esp,0xc
c000774c:	57                   	push   edi
c000774d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007751:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007755:	55                   	push   ebp
c0007756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000775a:	e8 07 a2 ff ff       	call   c0001966 <disk_write>
c000775f:	83 c4 20             	add    esp,0x20
c0007762:	85 c0                	test   eax,eax
c0007764:	0f 85 f2 09 00 00    	jne    c000815c <f_mkfs+0x10b1>
c000776a:	31 d2                	xor    edx,edx
c000776c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007770:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007774:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007778:	0f 85 48 ff ff ff    	jne    c00076c6 <f_mkfs+0x61b>
c000777e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007781:	31 d2                	xor    edx,edx
c0007783:	89 e8                	mov    eax,ebp
c0007785:	31 ff                	xor    edi,edi
c0007787:	e8 a3 a2 ff ff       	call   c0001a2f <mem_set>
c000778c:	8d 45 34             	lea    eax,[ebp+0x34]
c000778f:	ba 02 00 00 00       	mov    edx,0x2
c0007794:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007798:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000779c:	e8 70 a2 ff ff       	call   c0001a11 <st_dword>
c00077a1:	8d 45 38             	lea    eax,[ebp+0x38]
c00077a4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00077a8:	e8 64 a2 ff ff       	call   c0001a11 <st_dword>
c00077ad:	8d 45 44             	lea    eax,[ebp+0x44]
c00077b0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077b4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077b8:	e8 54 a2 ff ff       	call   c0001a11 <st_dword>
c00077bd:	8d 45 54             	lea    eax,[ebp+0x54]
c00077c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077c8:	83 c2 02             	add    edx,0x2
c00077cb:	e8 41 a2 ff ff       	call   c0001a11 <st_dword>
c00077d0:	8d 45 58             	lea    eax,[ebp+0x58]
c00077d3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077d7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077db:	e8 31 a2 ff ff       	call   c0001a11 <st_dword>
c00077e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077e9:	89 c6                	mov    esi,eax
c00077eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077ef:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00077f6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077fa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007801:	39 cb                	cmp    ebx,ecx
c0007803:	76 02                	jbe    c0007807 <f_mkfs+0x75c>
c0007805:	89 cb                	mov    ebx,ecx
c0007807:	83 ec 0c             	sub    esp,0xc
c000780a:	53                   	push   ebx
c000780b:	57                   	push   edi
c000780c:	56                   	push   esi
c000780d:	55                   	push   ebp
c000780e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007812:	e8 4f a1 ff ff       	call   c0001966 <disk_write>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	85 c0                	test   eax,eax
c000781c:	0f 85 3a 09 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007822:	31 d2                	xor    edx,edx
c0007824:	b9 00 02 00 00       	mov    ecx,0x200
c0007829:	89 e8                	mov    eax,ebp
c000782b:	e8 ff a1 ff ff       	call   c0001a2f <mem_set>
c0007830:	31 d2                	xor    edx,edx
c0007832:	01 de                	add    esi,ebx
c0007834:	11 d7                	adc    edi,edx
c0007836:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007839:	75 bf                	jne    c00077fa <f_mkfs+0x74f>
c000783b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000783f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007843:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000784b:	b9 00 02 00 00       	mov    ecx,0x200
c0007850:	31 d2                	xor    edx,edx
c0007852:	89 e8                	mov    eax,ebp
c0007854:	e8 d6 a1 ff ff       	call   c0001a2f <mem_set>
c0007859:	b9 0b 00 00 00       	mov    ecx,0xb
c000785e:	ba e0 f7 01 c0       	mov    edx,0xc001f7e0
c0007863:	89 e8                	mov    eax,ebp
c0007865:	e8 b0 a1 ff ff       	call   c0001a1a <mem_cpy>
c000786a:	8d 45 40             	lea    eax,[ebp+0x40]
c000786d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007871:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007875:	e8 9a a1 ff ff       	call   c0001a14 <st_qword>
c000787a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000787e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007881:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007885:	e8 8a a1 ff ff       	call   c0001a14 <st_qword>
c000788a:	8d 45 50             	lea    eax,[ebp+0x50]
c000788d:	ba 20 00 00 00       	mov    edx,0x20
c0007892:	e8 7a a1 ff ff       	call   c0001a11 <st_dword>
c0007897:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000789b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000789f:	e8 6d a1 ff ff       	call   c0001a11 <st_dword>
c00078a4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00078a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00078ac:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078b0:	e8 5c a1 ff ff       	call   c0001a11 <st_dword>
c00078b5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078bc:	e8 50 a1 ff ff       	call   c0001a11 <st_dword>
c00078c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078c5:	8d 50 02             	lea    edx,[eax+0x2]
c00078c8:	8d 45 60             	lea    eax,[ebp+0x60]
c00078cb:	e8 41 a1 ff ff       	call   c0001a11 <st_dword>
c00078d0:	8d 45 64             	lea    eax,[ebp+0x64]
c00078d3:	ba 00 00 21 50       	mov    edx,0x50210000
c00078d8:	e8 34 a1 ff ff       	call   c0001a11 <st_dword>
c00078dd:	8d 45 68             	lea    eax,[ebp+0x68]
c00078e0:	ba 00 01 00 00       	mov    edx,0x100
c00078e5:	e8 23 a1 ff ff       	call   c0001a0d <st_word>
c00078ea:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078ee:	b8 0a 00 00 00       	mov    eax,0xa
c00078f3:	48                   	dec    eax
c00078f4:	74 05                	je     c00078fb <f_mkfs+0x850>
c00078f6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078f9:	eb f8                	jmp    c00078f3 <f_mkfs+0x848>
c00078fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078ff:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007903:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007907:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c000790b:	74 05                	je     c0007912 <f_mkfs+0x867>
c000790d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007910:	eb f5                	jmp    c0007907 <f_mkfs+0x85c>
c0007912:	8d 45 78             	lea    eax,[ebp+0x78]
c0007915:	ba eb fe 00 00       	mov    edx,0xfeeb
c000791a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007920:	31 db                	xor    ebx,ebx
c0007922:	e8 e6 a0 ff ff       	call   c0001a0d <st_word>
c0007927:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000792d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007932:	89 04 24             	mov    DWORD PTR [esp],eax
c0007935:	e8 d3 a0 ff ff       	call   c0001a0d <st_word>
c000793a:	31 c9                	xor    ecx,ecx
c000793c:	8d 41 96             	lea    eax,[ecx-0x6a]
c000793f:	83 f8 01             	cmp    eax,0x1
c0007942:	76 13                	jbe    c0007957 <f_mkfs+0x8ac>
c0007944:	83 f9 70             	cmp    ecx,0x70
c0007947:	74 0e                	je     c0007957 <f_mkfs+0x8ac>
c0007949:	89 da                	mov    edx,ebx
c000794b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007950:	e8 41 a5 ff ff       	call   c0001e96 <xsum32>
c0007955:	89 c3                	mov    ebx,eax
c0007957:	41                   	inc    ecx
c0007958:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000795e:	75 dc                	jne    c000793c <f_mkfs+0x891>
c0007960:	89 f0                	mov    eax,esi
c0007962:	89 fa                	mov    edx,edi
c0007964:	83 c0 01             	add    eax,0x1
c0007967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000796b:	83 d2 00             	adc    edx,0x0
c000796e:	83 ec 0c             	sub    esp,0xc
c0007971:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007975:	6a 01                	push   0x1
c0007977:	57                   	push   edi
c0007978:	56                   	push   esi
c0007979:	55                   	push   ebp
c000797a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000797e:	e8 e3 9f ff ff       	call   c0001966 <disk_write>
c0007983:	83 c4 20             	add    esp,0x20
c0007986:	85 c0                	test   eax,eax
c0007988:	0f 85 ce 07 00 00    	jne    c000815c <f_mkfs+0x10b1>
c000798e:	31 d2                	xor    edx,edx
c0007990:	b9 00 02 00 00       	mov    ecx,0x200
c0007995:	89 e8                	mov    eax,ebp
c0007997:	e8 93 a0 ff ff       	call   c0001a2f <mem_set>
c000799c:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a4:	e8 64 a0 ff ff       	call   c0001a0d <st_word>
c00079a9:	89 f0                	mov    eax,esi
c00079ab:	89 fa                	mov    edx,edi
c00079ad:	83 c0 09             	add    eax,0x9
c00079b0:	83 d2 00             	adc    edx,0x0
c00079b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00079b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ba:	31 c9                	xor    ecx,ecx
c00079bc:	41                   	inc    ecx
c00079bd:	89 da                	mov    edx,ebx
c00079bf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079c4:	e8 cd a4 ff ff       	call   c0001e96 <xsum32>
c00079c9:	89 c3                	mov    ebx,eax
c00079cb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d1:	75 e9                	jne    c00079bc <f_mkfs+0x911>
c00079d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079db:	83 c0 01             	add    eax,0x1
c00079de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079e2:	83 d2 00             	adc    edx,0x0
c00079e5:	83 ec 0c             	sub    esp,0xc
c00079e8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079ec:	6a 01                	push   0x1
c00079ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079f6:	55                   	push   ebp
c00079f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079fb:	e8 66 9f ff ff       	call   c0001966 <disk_write>
c0007a00:	83 c4 20             	add    esp,0x20
c0007a03:	85 c0                	test   eax,eax
c0007a05:	0f 85 51 07 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a0f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a13:	75 09                	jne    c0007a1e <f_mkfs+0x973>
c0007a15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a18:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a1c:	74 12                	je     c0007a30 <f_mkfs+0x985>
c0007a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a2e:	eb 8a                	jmp    c00079ba <f_mkfs+0x90f>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	b9 00 02 00 00       	mov    ecx,0x200
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 f1 9f ff ff       	call   c0001a2f <mem_set>
c0007a3e:	83 c6 0b             	add    esi,0xb
c0007a41:	83 d7 00             	adc    edi,0x0
c0007a44:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a48:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a4c:	31 c9                	xor    ecx,ecx
c0007a4e:	41                   	inc    ecx
c0007a4f:	89 da                	mov    edx,ebx
c0007a51:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a56:	e8 3b a4 ff ff       	call   c0001e96 <xsum32>
c0007a5b:	89 c3                	mov    ebx,eax
c0007a5d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a63:	75 e9                	jne    c0007a4e <f_mkfs+0x9a3>
c0007a65:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a6c:	83 c6 01             	add    esi,0x1
c0007a6f:	83 d7 00             	adc    edi,0x0
c0007a72:	83 ec 0c             	sub    esp,0xc
c0007a75:	6a 01                	push   0x1
c0007a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a7f:	55                   	push   ebp
c0007a80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a84:	e8 dd 9e ff ff       	call   c0001966 <disk_write>
c0007a89:	83 c4 20             	add    esp,0x20
c0007a8c:	85 c0                	test   eax,eax
c0007a8e:	0f 85 c8 06 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007a94:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a98:	75 06                	jne    c0007aa0 <f_mkfs+0x9f5>
c0007a9a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a9e:	74 09                	je     c0007aa9 <f_mkfs+0x9fe>
c0007aa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007aa3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007aa7:	eb a3                	jmp    c0007a4c <f_mkfs+0x9a1>
c0007aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aad:	89 da                	mov    edx,ebx
c0007aaf:	01 e8                	add    eax,ebp
c0007ab1:	e8 5b 9f ff ff       	call   c0001a11 <st_dword>
c0007ab6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007abb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ac3:	75 e4                	jne    c0007aa9 <f_mkfs+0x9fe>
c0007ac5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007acc:	83 c6 02             	add    esi,0x2
c0007acf:	83 d7 00             	adc    edi,0x0
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	6a 01                	push   0x1
c0007ad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007adb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007adf:	55                   	push   ebp
c0007ae0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae4:	e8 7d 9e ff ff       	call   c0001966 <disk_write>
c0007ae9:	83 c4 20             	add    esp,0x20
c0007aec:	85 c0                	test   eax,eax
c0007aee:	0f 85 68 06 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007af4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007af9:	74 0d                	je     c0007b08 <f_mkfs+0xa5d>
c0007afb:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b03:	e9 43 fd ff ff       	jmp    c000784b <f_mkfs+0x7a0>
c0007b08:	b1 07                	mov    cl,0x7
c0007b0a:	e9 e3 05 00 00       	jmp    c00080f2 <f_mkfs+0x1047>
c0007b0f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b14:	0f 85 4f 02 00 00    	jne    c0007d69 <f_mkfs+0xcbe>
c0007b1a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b1f:	0f 86 22 02 00 00    	jbe    c0007d47 <f_mkfs+0xc9c>
c0007b25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b2a:	0f 85 81 06 00 00    	jne    c00081b1 <f_mkfs+0x1106>
c0007b30:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b37:	83 f8 40             	cmp    eax,0x40
c0007b3a:	0f 87 51 06 00 00    	ja     c0008191 <f_mkfs+0x10e6>
c0007b40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b44:	85 ff                	test   edi,edi
c0007b46:	75 1c                	jne    c0007b64 <f_mkfs+0xab9>
c0007b48:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b4b:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c0007b50:	c1 e9 0c             	shr    ecx,0xc
c0007b53:	bf 01 00 00 00       	mov    edi,0x1
c0007b58:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b5b:	66 85 c0             	test   ax,ax
c0007b5e:	0f 85 95 01 00 00    	jne    c0007cf9 <f_mkfs+0xc4e>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b69:	f7 f7                	div    edi
c0007b6b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b70:	0f 86 95 01 00 00    	jbe    c0007d0b <f_mkfs+0xc60>
c0007b76:	83 c0 02             	add    eax,0x2
c0007b79:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b7e:	01 c0                	add    eax,eax
c0007b80:	05 ff 01 00 00       	add    eax,0x1ff
c0007b85:	be 01 00 00 00       	mov    esi,0x1
c0007b8a:	c1 e8 09             	shr    eax,0x9
c0007b8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b95:	c1 e0 05             	shl    eax,0x5
c0007b98:	c1 e8 09             	shr    eax,0x9
c0007b9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b9f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007ba4:	31 d2                	xor    edx,edx
c0007ba6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007baa:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007bae:	89 f0                	mov    eax,esi
c0007bb0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007bb4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007bbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bc4:	31 d2                	xor    edx,edx
c0007bc6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bcb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bcf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bd3:	31 db                	xor    ebx,ebx
c0007bd5:	01 c8                	add    eax,ecx
c0007bd7:	11 da                	adc    edx,ebx
c0007bd9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bdd:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007be1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007be5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007be9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007bed:	f7 da                	neg    edx
c0007bef:	21 d1                	and    ecx,edx
c0007bf1:	29 d9                	sub    ecx,ebx
c0007bf3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007bf8:	0f 85 20 01 00 00    	jne    c0007d1e <f_mkfs+0xc73>
c0007bfe:	31 db                	xor    ebx,ebx
c0007c00:	01 ce                	add    esi,ecx
c0007c02:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c06:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c0a:	31 d2                	xor    edx,edx
c0007c0c:	89 f8                	mov    eax,edi
c0007c0e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c12:	c1 e0 04             	shl    eax,0x4
c0007c15:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c19:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c1d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c21:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c25:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c28:	19 d3                	sbb    ebx,edx
c0007c2a:	0f 82 40 01 00 00    	jb     c0007d70 <f_mkfs+0xcc5>
c0007c30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c37:	89 c8                	mov    eax,ecx
c0007c39:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c3e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c42:	29 f0                	sub    eax,esi
c0007c44:	29 d0                	sub    eax,edx
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	f7 f7                	div    edi
c0007c4a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c4f:	89 c3                	mov    ebx,eax
c0007c51:	0f 85 b8 fe ff ff    	jne    c0007b0f <f_mkfs+0xa64>
c0007c57:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c5c:	0f 87 1d 01 00 00    	ja     c0007d7f <f_mkfs+0xcd4>
c0007c62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c67:	0f 85 03 01 00 00    	jne    c0007d70 <f_mkfs+0xcc5>
c0007c6d:	83 ff 01             	cmp    edi,0x1
c0007c70:	0f 86 fa 00 00 00    	jbe    c0007d70 <f_mkfs+0xcc5>
c0007c76:	d1 ef                	shr    edi,1
c0007c78:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c80:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c83:	85 db                	test   ebx,ebx
c0007c85:	75 2d                	jne    c0007cb4 <f_mkfs+0xc09>
c0007c87:	89 cb                	mov    ebx,ecx
c0007c89:	ba f0 f6 01 c0       	mov    edx,0xc001f6f0
c0007c8e:	c1 eb 11             	shr    ebx,0x11
c0007c91:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c99:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c9c:	66 85 c0             	test   ax,ax
c0007c9f:	74 11                	je     c0007cb2 <f_mkfs+0xc07>
c0007ca1:	83 c2 02             	add    edx,0x2
c0007ca4:	39 d8                	cmp    eax,ebx
c0007ca6:	77 0a                	ja     c0007cb2 <f_mkfs+0xc07>
c0007ca8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007cac:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007cb0:	eb e7                	jmp    c0007c99 <f_mkfs+0xbee>
c0007cb2:	31 db                	xor    ebx,ebx
c0007cb4:	31 d2                	xor    edx,edx
c0007cb6:	89 c8                	mov    eax,ecx
c0007cb8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007cbc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cc3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cc8:	c1 ea 09             	shr    edx,0x9
c0007ccb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cd0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cd4:	0f 87 96 00 00 00    	ja     c0007d70 <f_mkfs+0xcc5>
c0007cda:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cde:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ce6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cea:	be 20 00 00 00       	mov    esi,0x20
c0007cef:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007cf4:	e9 a6 fe ff ff       	jmp    c0007b9f <f_mkfs+0xaf4>
c0007cf9:	83 c2 02             	add    edx,0x2
c0007cfc:	39 c8                	cmp    eax,ecx
c0007cfe:	0f 87 60 fe ff ff    	ja     c0007b64 <f_mkfs+0xab9>
c0007d04:	01 ff                	add    edi,edi
c0007d06:	e9 4d fe ff ff       	jmp    c0007b58 <f_mkfs+0xaad>
c0007d0b:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d0e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d13:	40                   	inc    eax
c0007d14:	d1 e8                	shr    eax,1
c0007d16:	83 c0 03             	add    eax,0x3
c0007d19:	e9 62 fe ff ff       	jmp    c0007b80 <f_mkfs+0xad5>
c0007d1e:	31 d2                	xor    edx,edx
c0007d20:	89 c8                	mov    eax,ecx
c0007d22:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d26:	85 d2                	test   edx,edx
c0007d28:	74 0c                	je     c0007d36 <f_mkfs+0xc8b>
c0007d2a:	49                   	dec    ecx
c0007d2b:	46                   	inc    esi
c0007d2c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d31:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d36:	89 c8                	mov    eax,ecx
c0007d38:	31 d2                	xor    edx,edx
c0007d3a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d3e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d42:	e9 c3 fe ff ff       	jmp    c0007c0a <f_mkfs+0xb5f>
c0007d47:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d4c:	77 31                	ja     c0007d7f <f_mkfs+0xcd4>
c0007d4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d53:	75 1b                	jne    c0007d70 <f_mkfs+0xcc5>
c0007d55:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d5c:	3d 80 00 00 00       	cmp    eax,0x80
c0007d61:	0f 86 d9 fd ff ff    	jbe    c0007b40 <f_mkfs+0xa95>
c0007d67:	eb 07                	jmp    c0007d70 <f_mkfs+0xcc5>
c0007d69:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d6e:	76 0a                	jbe    c0007d7a <f_mkfs+0xccf>
c0007d70:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d75:	e9 ff 03 00 00       	jmp    c0008179 <f_mkfs+0x10ce>
c0007d7a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7f:	31 d2                	xor    edx,edx
c0007d81:	b9 00 02 00 00       	mov    ecx,0x200
c0007d86:	89 e8                	mov    eax,ebp
c0007d88:	e8 a2 9c ff ff       	call   c0001a2f <mem_set>
c0007d8d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d92:	ba 02 f8 01 c0       	mov    edx,0xc001f802
c0007d97:	89 e8                	mov    eax,ebp
c0007d99:	e8 7c 9c ff ff       	call   c0001a1a <mem_cpy>
c0007d9e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007da1:	ba 00 02 00 00       	mov    edx,0x200
c0007da6:	e8 62 9c ff ff       	call   c0001a0d <st_word>
c0007dab:	89 f8                	mov    eax,edi
c0007dad:	0f b7 d6             	movzx  edx,si
c0007db0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007db3:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007db6:	e8 52 9c ff ff       	call   c0001a0d <st_word>
c0007dbb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007dbf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007dc4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dc7:	75 08                	jne    c0007dd1 <f_mkfs+0xd26>
c0007dc9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dd1:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dd8:	e8 30 9c ff ff       	call   c0001a0d <st_word>
c0007ddd:	b8 ff ff 00 00       	mov    eax,0xffff
c0007de2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007de6:	39 d0                	cmp    eax,edx
c0007de8:	b8 00 00 00 00       	mov    eax,0x0
c0007ded:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007df1:	72 0a                	jb     c0007dfd <f_mkfs+0xd52>
c0007df3:	8d 45 13             	lea    eax,[ebp+0x13]
c0007df6:	e8 12 9c ff ff       	call   c0001a0d <st_word>
c0007dfb:	eb 08                	jmp    c0007e05 <f_mkfs+0xd5a>
c0007dfd:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e00:	e8 0c 9c ff ff       	call   c0001a11 <st_dword>
c0007e05:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e08:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e0d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e11:	e8 f7 9b ff ff       	call   c0001a0d <st_word>
c0007e16:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e19:	ba ff 00 00 00       	mov    edx,0xff
c0007e1e:	e8 ea 9b ff ff       	call   c0001a0d <st_word>
c0007e23:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e2a:	e8 e2 9b ff ff       	call   c0001a11 <st_dword>
c0007e2f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e34:	75 57                	jne    c0007e8d <f_mkfs+0xde2>
c0007e36:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e39:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e3e:	e8 ce 9b ff ff       	call   c0001a11 <st_dword>
c0007e43:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e46:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e4a:	e8 c2 9b ff ff       	call   c0001a11 <st_dword>
c0007e4f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e52:	ba 02 00 00 00       	mov    edx,0x2
c0007e57:	e8 b5 9b ff ff       	call   c0001a11 <st_dword>
c0007e5c:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e5f:	ba 01 00 00 00       	mov    edx,0x1
c0007e64:	e8 a4 9b ff ff       	call   c0001a0d <st_word>
c0007e69:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e6c:	ba 06 00 00 00       	mov    edx,0x6
c0007e71:	e8 97 9b ff ff       	call   c0001a0d <st_word>
c0007e76:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e7a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e7e:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e81:	b9 13 00 00 00       	mov    ecx,0x13
c0007e86:	ba 0e f8 01 c0       	mov    edx,0xc001f80e
c0007e8b:	eb 2f                	jmp    c0007ebc <f_mkfs+0xe11>
c0007e8d:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e90:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e95:	e8 77 9b ff ff       	call   c0001a11 <st_dword>
c0007e9a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e9f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007ea2:	e8 66 9b ff ff       	call   c0001a0d <st_word>
c0007ea7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007eab:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007eaf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007eb2:	b9 13 00 00 00       	mov    ecx,0x13
c0007eb7:	ba 22 f8 01 c0       	mov    edx,0xc001f822
c0007ebc:	e8 59 9b ff ff       	call   c0001a1a <mem_cpy>
c0007ec1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007ec7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ecc:	89 f0                	mov    eax,esi
c0007ece:	e8 3a 9b ff ff       	call   c0001a0d <st_word>
c0007ed3:	83 ec 0c             	sub    esp,0xc
c0007ed6:	6a 01                	push   0x1
c0007ed8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007edc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ee0:	55                   	push   ebp
c0007ee1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ee5:	e8 7c 9a ff ff       	call   c0001966 <disk_write>
c0007eea:	83 c4 20             	add    esp,0x20
c0007eed:	85 c0                	test   eax,eax
c0007eef:	0f 85 67 02 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0007ef5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007efa:	0f 85 b7 00 00 00    	jne    c0007fb7 <f_mkfs+0xf0c>
c0007f00:	83 ec 0c             	sub    esp,0xc
c0007f03:	6a 01                	push   0x1
c0007f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f0d:	83 c0 06             	add    eax,0x6
c0007f10:	83 d2 00             	adc    edx,0x0
c0007f13:	52                   	push   edx
c0007f14:	50                   	push   eax
c0007f15:	55                   	push   ebp
c0007f16:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f1a:	e8 47 9a ff ff       	call   c0001966 <disk_write>
c0007f1f:	83 c4 20             	add    esp,0x20
c0007f22:	b9 00 02 00 00       	mov    ecx,0x200
c0007f27:	31 d2                	xor    edx,edx
c0007f29:	89 e8                	mov    eax,ebp
c0007f2b:	e8 ff 9a ff ff       	call   c0001a2f <mem_set>
c0007f30:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f35:	89 e8                	mov    eax,ebp
c0007f37:	e8 d5 9a ff ff       	call   c0001a11 <st_dword>
c0007f3c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f42:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f47:	e8 c5 9a ff ff       	call   c0001a11 <st_dword>
c0007f4c:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f4f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f55:	e8 b7 9a ff ff       	call   c0001a11 <st_dword>
c0007f5a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f60:	ba 02 00 00 00       	mov    edx,0x2
c0007f65:	e8 a7 9a ff ff       	call   c0001a11 <st_dword>
c0007f6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f6f:	89 f0                	mov    eax,esi
c0007f71:	e8 97 9a ff ff       	call   c0001a0d <st_word>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 07             	add    eax,0x7
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 d1 99 ff ff       	call   c0001966 <disk_write>
c0007f95:	83 c4 14             	add    esp,0x14
c0007f98:	6a 01                	push   0x1
c0007f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fa2:	83 c0 01             	add    eax,0x1
c0007fa5:	83 d2 00             	adc    edx,0x0
c0007fa8:	52                   	push   edx
c0007fa9:	50                   	push   eax
c0007faa:	55                   	push   ebp
c0007fab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007faf:	e8 b2 99 ff ff       	call   c0001966 <disk_write>
c0007fb4:	83 c4 20             	add    esp,0x20
c0007fb7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fbe:	31 d2                	xor    edx,edx
c0007fc0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fc6:	31 db                	xor    ebx,ebx
c0007fc8:	89 e8                	mov    eax,ebp
c0007fca:	e8 60 9a ff ff       	call   c0001a2f <mem_set>
c0007fcf:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fdb:	0f 94 c3             	sete   bl
c0007fde:	4b                   	dec    ebx
c0007fdf:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fe5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007feb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ff0:	75 21                	jne    c0008013 <f_mkfs+0xf68>
c0007ff2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ff7:	89 e8                	mov    eax,ebp
c0007ff9:	e8 13 9a ff ff       	call   c0001a11 <st_dword>
c0007ffe:	8d 45 04             	lea    eax,[ebp+0x4]
c0008001:	83 ca ff             	or     edx,0xffffffff
c0008004:	e8 08 9a ff ff       	call   c0001a11 <st_dword>
c0008009:	8d 45 08             	lea    eax,[ebp+0x8]
c000800c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008011:	eb 04                	jmp    c0008017 <f_mkfs+0xf6c>
c0008013:	89 da                	mov    edx,ebx
c0008015:	89 e8                	mov    eax,ebp
c0008017:	e8 f5 99 ff ff       	call   c0001a11 <st_dword>
c000801c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008024:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008028:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000802c:	39 ce                	cmp    esi,ecx
c000802e:	76 02                	jbe    c0008032 <f_mkfs+0xf87>
c0008030:	89 ce                	mov    esi,ecx
c0008032:	83 ec 0c             	sub    esp,0xc
c0008035:	56                   	push   esi
c0008036:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000803a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000803e:	55                   	push   ebp
c000803f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008043:	e8 1e 99 ff ff       	call   c0001966 <disk_write>
c0008048:	83 c4 20             	add    esp,0x20
c000804b:	85 c0                	test   eax,eax
c000804d:	0f 85 09 01 00 00    	jne    c000815c <f_mkfs+0x10b1>
c0008053:	31 d2                	xor    edx,edx
c0008055:	b9 00 02 00 00       	mov    ecx,0x200
c000805a:	89 e8                	mov    eax,ebp
c000805c:	e8 ce 99 ff ff       	call   c0001a2f <mem_set>
c0008061:	31 d2                	xor    edx,edx
c0008063:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008067:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000806b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000806f:	75 b3                	jne    c0008024 <f_mkfs+0xf79>
c0008071:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008074:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000807b:	40                   	inc    eax
c000807c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008080:	0f 87 65 ff ff ff    	ja     c0007feb <f_mkfs+0xf40>
c0008086:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808b:	74 04                	je     c0008091 <f_mkfs+0xfe6>
c000808d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008091:	89 fb                	mov    ebx,edi
c0008093:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008097:	76 04                	jbe    c000809d <f_mkfs+0xff2>
c0008099:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000809d:	83 ec 0c             	sub    esp,0xc
c00080a0:	53                   	push   ebx
c00080a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a9:	55                   	push   ebp
c00080aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ae:	e8 b3 98 ff ff       	call   c0001966 <disk_write>
c00080b3:	83 c4 20             	add    esp,0x20
c00080b6:	85 c0                	test   eax,eax
c00080b8:	0f 85 9e 00 00 00    	jne    c000815c <f_mkfs+0x10b1>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 df                	sub    edi,ebx
c00080ca:	75 c5                	jne    c0008091 <f_mkfs+0xfe6>
c00080cc:	b1 0c                	mov    cl,0xc
c00080ce:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d3:	74 1d                	je     c00080f2 <f_mkfs+0x1047>
c00080d5:	b8 ff ff 00 00       	mov    eax,0xffff
c00080da:	b1 06                	mov    cl,0x6
c00080dc:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080e0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080e4:	72 0c                	jb     c00080f2 <f_mkfs+0x1047>
c00080e6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080eb:	0f 94 c1             	sete   cl
c00080ee:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080f2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080f7:	75 4c                	jne    c0008145 <f_mkfs+0x109a>
c00080f9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080fd:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008101:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008108:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000810f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000811a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008125:	0f b6 c9             	movzx  ecx,cl
c0008128:	83 ec 0c             	sub    esp,0xc
c000812b:	55                   	push   ebp
c000812c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008137:	e8 2f c2 ff ff       	call   c000436b <create_partition>
c000813c:	83 c4 10             	add    esp,0x10
c000813f:	89 c3                	mov    ebx,eax
c0008141:	85 c0                	test   eax,eax
c0008143:	75 34                	jne    c0008179 <f_mkfs+0x10ce>
c0008145:	31 db                	xor    ebx,ebx
c0008147:	50                   	push   eax
c0008148:	6a 00                	push   0x0
c000814a:	6a 00                	push   0x0
c000814c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008150:	e8 27 98 ff ff       	call   c000197c <disk_ioctl>
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	85 c0                	test   eax,eax
c000815a:	74 1d                	je     c0008179 <f_mkfs+0x10ce>
c000815c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008164:	75 0c                	jne    c0008172 <f_mkfs+0x10c7>
c0008166:	83 ec 0c             	sub    esp,0xc
c0008169:	55                   	push   ebp
c000816a:	e8 75 00 00 00       	call   c00081e4 <ff_memfree>
c000816f:	83 c4 10             	add    esp,0x10
c0008172:	bb 01 00 00 00       	mov    ebx,0x1
c0008177:	eb 48                	jmp    c00081c1 <f_mkfs+0x1116>
c0008179:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008181:	75 3e                	jne    c00081c1 <f_mkfs+0x1116>
c0008183:	83 ec 0c             	sub    esp,0xc
c0008186:	55                   	push   ebp
c0008187:	e8 58 00 00 00       	call   c00081e4 <ff_memfree>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	eb 30                	jmp    c00081c1 <f_mkfs+0x1116>
c0008191:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008196:	0f 85 eb fa ff ff    	jne    c0007c87 <f_mkfs+0xbdc>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00081a6:	0f 86 b8 f9 ff ff    	jbe    c0007b64 <f_mkfs+0xab9>
c00081ac:	e9 bf fb ff ff       	jmp    c0007d70 <f_mkfs+0xcc5>
c00081b1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081b6:	0f 85 c0 fa ff ff    	jne    c0007c7c <f_mkfs+0xbd1>
c00081bc:	e9 af fb ff ff       	jmp    c0007d70 <f_mkfs+0xcc5>
c00081c1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081c7:	89 d8                	mov    eax,ebx
c00081c9:	5b                   	pop    ebx
c00081ca:	5e                   	pop    esi
c00081cb:	5f                   	pop    edi
c00081cc:	5d                   	pop    ebp
c00081cd:	c3                   	ret    

c00081ce <ff_memalloc>:
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	83 ec 0c             	sub    esp,0xc
c00081d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081d8:	e8 6f 3a 00 00       	call   c000bc4c <malloc>
c00081dd:	83 c4 10             	add    esp,0x10
c00081e0:	83 c4 0c             	add    esp,0xc
c00081e3:	c3                   	ret    

c00081e4 <ff_memfree>:
c00081e4:	83 ec 0c             	sub    esp,0xc
c00081e7:	83 ec 0c             	sub    esp,0xc
c00081ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081ee:	e8 69 3a 00 00       	call   c000bc5c <free>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	90                   	nop
c00081f7:	83 c4 0c             	add    esp,0xc
c00081fa:	c3                   	ret    

c00081fb <ff_uni2oem>:
c00081fb:	83 ec 14             	sub    esp,0x14
c00081fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008202:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008206:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000820d:	c7 44 24 0c 40 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb40
c0008215:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000821a:	77 0b                	ja     c0008227 <ff_uni2oem+0x2c>
c000821c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008220:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008225:	eb 5b                	jmp    c0008282 <ff_uni2oem+0x87>
c0008227:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000822f:	77 51                	ja     c0008282 <ff_uni2oem+0x87>
c0008231:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008237:	75 49                	jne    c0008282 <ff_uni2oem+0x87>
c0008239:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008240:	eb 0b                	jmp    c000824d <ff_uni2oem+0x52>
c0008242:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008247:	40                   	inc    eax
c0008248:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000824d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008253:	77 1b                	ja     c0008270 <ff_uni2oem+0x75>
c0008255:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000825a:	01 c0                	add    eax,eax
c000825c:	89 c2                	mov    edx,eax
c000825e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008262:	01 d0                	add    eax,edx
c0008264:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008267:	0f b7 c0             	movzx  eax,ax
c000826a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000826e:	75 d2                	jne    c0008242 <ff_uni2oem+0x47>
c0008270:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008275:	83 e8 80             	sub    eax,0xffffff80
c0008278:	25 ff 00 00 00       	and    eax,0xff
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008287:	83 c4 14             	add    esp,0x14
c000828a:	c3                   	ret    

c000828b <ff_oem2uni>:
c000828b:	83 ec 18             	sub    esp,0x18
c000828e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008296:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000829b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000829f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00082a6:	c7 44 24 10 40 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb40
c00082ae:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082b4:	77 0b                	ja     c00082c1 <ff_oem2uni+0x36>
c00082b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082bf:	eb 2d                	jmp    c00082ee <ff_oem2uni+0x63>
c00082c1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082c7:	75 25                	jne    c00082ee <ff_oem2uni+0x63>
c00082c9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082d0:	77 1c                	ja     c00082ee <ff_oem2uni+0x63>
c00082d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082d7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082dc:	01 c0                	add    eax,eax
c00082de:	89 c2                	mov    edx,eax
c00082e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082e4:	01 d0                	add    eax,edx
c00082e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082e9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082ee:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082f3:	83 c4 18             	add    esp,0x18
c00082f6:	c3                   	ret    

c00082f7 <ff_wtoupper>:
c00082f7:	83 ec 10             	sub    esp,0x10
c00082fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008302:	0f 87 3e 01 00 00    	ja     c0008446 <ff_wtoupper+0x14f>
c0008308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000830c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008311:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008318:	77 07                	ja     c0008321 <ff_wtoupper+0x2a>
c000831a:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c000831f:	eb 05                	jmp    c0008326 <ff_wtoupper+0x2f>
c0008321:	b8 80 f8 01 c0       	mov    eax,0xc001f880
c0008326:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000832a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000832e:	8d 50 02             	lea    edx,[eax+0x2]
c0008331:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008335:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008338:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000833d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008343:	0f 84 f4 00 00 00    	je     c000843d <ff_wtoupper+0x146>
c0008349:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000834e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008353:	0f 82 e4 00 00 00    	jb     c000843d <ff_wtoupper+0x146>
c0008359:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835d:	8d 50 02             	lea    edx,[eax+0x2]
c0008360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008364:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008367:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000836c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008371:	66 c1 e8 08          	shr    ax,0x8
c0008375:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000837a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008381:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008386:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000838b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008390:	01 ca                	add    edx,ecx
c0008392:	39 d0                	cmp    eax,edx
c0008394:	0f 8d 86 00 00 00    	jge    c0008420 <ff_wtoupper+0x129>
c000839a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000839f:	83 f8 08             	cmp    eax,0x8
c00083a2:	0f 87 94 00 00 00    	ja     c000843c <ff_wtoupper+0x145>
c00083a8:	8b 04 85 40 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07c0]
c00083af:	ff e0                	jmp    eax
c00083b1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083b6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083bb:	29 c2                	sub    edx,eax
c00083bd:	89 d0                	mov    eax,edx
c00083bf:	01 c0                	add    eax,eax
c00083c1:	89 c2                	mov    edx,eax
c00083c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c7:	01 d0                	add    eax,edx
c00083c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083d1:	eb 4b                	jmp    c000841e <ff_wtoupper+0x127>
c00083d3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083d8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083dc:	83 e0 01             	and    eax,0x1
c00083df:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083e4:	eb 38                	jmp    c000841e <ff_wtoupper+0x127>
c00083e6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083ec:	eb 30                	jmp    c000841e <ff_wtoupper+0x127>
c00083ee:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083f4:	eb 28                	jmp    c000841e <ff_wtoupper+0x127>
c00083f6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083fc:	eb 20                	jmp    c000841e <ff_wtoupper+0x127>
c00083fe:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008404:	eb 18                	jmp    c000841e <ff_wtoupper+0x127>
c0008406:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000840c:	eb 10                	jmp    c000841e <ff_wtoupper+0x127>
c000840e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008414:	eb 08                	jmp    c000841e <ff_wtoupper+0x127>
c0008416:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000841d:	90                   	nop
c000841e:	eb 1c                	jmp    c000843c <ff_wtoupper+0x145>
c0008420:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008426:	0f 85 fe fe ff ff    	jne    c000832a <ff_wtoupper+0x33>
c000842c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008431:	01 c0                	add    eax,eax
c0008433:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008437:	e9 ee fe ff ff       	jmp    c000832a <ff_wtoupper+0x33>
c000843c:	90                   	nop
c000843d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008442:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008446:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	c3                   	ret    

c000844e <is_bad_src_ratio>:
c000844e:	83 ec 0c             	sub    esp,0xc
c0008451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008455:	89 04 24             	mov    DWORD PTR [esp],eax
c0008458:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008460:	dd 04 24             	fld    QWORD PTR [esp]
c0008463:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008469:	de d9                	fcompp 
c000846b:	df e0                	fnstsw ax
c000846d:	f6 c4 45             	test   ah,0x45
c0008470:	74 10                	je     c0008482 <is_bad_src_ratio+0x34>
c0008472:	dd 04 24             	fld    QWORD PTR [esp]
c0008475:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000847b:	df e0                	fnstsw ax
c000847d:	f6 c4 45             	test   ah,0x45
c0008480:	75 07                	jne    c0008489 <is_bad_src_ratio+0x3b>
c0008482:	b8 01 00 00 00       	mov    eax,0x1
c0008487:	eb 05                	jmp    c000848e <is_bad_src_ratio+0x40>
c0008489:	b8 00 00 00 00       	mov    eax,0x0
c000848e:	83 c4 0c             	add    esp,0xc
c0008491:	c3                   	ret    

c0008492 <psrc_set_converter>:
c0008492:	56                   	push   esi
c0008493:	89 d6                	mov    esi,edx
c0008495:	53                   	push   ebx
c0008496:	89 c3                	mov    ebx,eax
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	52                   	push   edx
c000849c:	50                   	push   eax
c000849d:	e8 33 24 00 00       	call   c000a8d5 <sinc_set_converter>
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	85 c0                	test   eax,eax
c00084a7:	74 25                	je     c00084ce <psrc_set_converter+0x3c>
c00084a9:	50                   	push   eax
c00084aa:	50                   	push   eax
c00084ab:	56                   	push   esi
c00084ac:	53                   	push   ebx
c00084ad:	e8 32 28 00 00       	call   c000ace4 <zoh_set_converter>
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	85 c0                	test   eax,eax
c00084b7:	74 15                	je     c00084ce <psrc_set_converter+0x3c>
c00084b9:	51                   	push   ecx
c00084ba:	51                   	push   ecx
c00084bb:	56                   	push   esi
c00084bc:	53                   	push   ebx
c00084bd:	e8 10 0a 00 00       	call   c0008ed2 <linear_set_converter>
c00084c2:	83 c4 10             	add    esp,0x10
c00084c5:	ba 0a 00 00 00       	mov    edx,0xa
c00084ca:	85 c0                	test   eax,eax
c00084cc:	75 02                	jne    c00084d0 <psrc_set_converter+0x3e>
c00084ce:	31 d2                	xor    edx,edx
c00084d0:	89 d0                	mov    eax,edx
c00084d2:	5a                   	pop    edx
c00084d3:	5b                   	pop    ebx
c00084d4:	5e                   	pop    esi
c00084d5:	c3                   	ret    

c00084d6 <src_delete>:
c00084d6:	53                   	push   ebx
c00084d7:	83 ec 08             	sub    esp,0x8
c00084da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084de:	85 db                	test   ebx,ebx
c00084e0:	74 29                	je     c000850b <src_delete+0x35>
c00084e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084e5:	85 c0                	test   eax,eax
c00084e7:	74 0c                	je     c00084f5 <src_delete+0x1f>
c00084e9:	83 ec 0c             	sub    esp,0xc
c00084ec:	50                   	push   eax
c00084ed:	e8 6a 37 00 00       	call   c000bc5c <free>
c00084f2:	83 c4 10             	add    esp,0x10
c00084f5:	50                   	push   eax
c00084f6:	6a 3c                	push   0x3c
c00084f8:	6a 00                	push   0x0
c00084fa:	53                   	push   ebx
c00084fb:	e8 08 81 ff ff       	call   c0000608 <memset>
c0008500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008503:	e8 54 37 00 00       	call   c000bc5c <free>
c0008508:	83 c4 10             	add    esp,0x10
c000850b:	31 c0                	xor    eax,eax
c000850d:	83 c4 08             	add    esp,0x8
c0008510:	5b                   	pop    ebx
c0008511:	c3                   	ret    

c0008512 <src_process>:
c0008512:	56                   	push   esi
c0008513:	53                   	push   ebx
c0008514:	53                   	push   ebx
c0008515:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008519:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000851d:	85 f6                	test   esi,esi
c000851f:	0f 84 e2 00 00 00    	je     c0008607 <src_process+0xf5>
c0008525:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008529:	0f 84 df 00 00 00    	je     c000860e <src_process+0xfc>
c000852f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008533:	0f 84 d5 00 00 00    	je     c000860e <src_process+0xfc>
c0008539:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008540:	0f 85 cf 00 00 00    	jne    c0008615 <src_process+0x103>
c0008546:	85 db                	test   ebx,ebx
c0008548:	0f 84 ce 00 00 00    	je     c000861c <src_process+0x10a>
c000854e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008551:	0f 84 cc 00 00 00    	je     c0008623 <src_process+0x111>
c0008557:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000855b:	0f 84 c2 00 00 00    	je     c0008623 <src_process+0x111>
c0008561:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008564:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008567:	e8 e2 fe ff ff       	call   c000844e <is_bad_src_ratio>
c000856c:	5a                   	pop    edx
c000856d:	85 c0                	test   eax,eax
c000856f:	59                   	pop    ecx
c0008570:	0f 85 b4 00 00 00    	jne    c000862a <src_process+0x118>
c0008576:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x71>
c000857c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008583:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008587:	79 07                	jns    c0008590 <src_process+0x7e>
c0008589:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008590:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008592:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008595:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008598:	39 ca                	cmp    edx,ecx
c000859a:	73 0b                	jae    c00085a7 <src_process+0x95>
c000859c:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00085a0:	8d 04 82             	lea    eax,[edx+eax*4]
c00085a3:	39 c1                	cmp    ecx,eax
c00085a5:	eb 09                	jmp    c00085b0 <src_process+0x9e>
c00085a7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00085ab:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085ae:	39 c2                	cmp    edx,eax
c00085b0:	72 7f                	jb     c0008631 <src_process+0x11f>
c00085b2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085c0:	d9 05 20 01 02 c0    	fld    DWORD PTR ds:0xc0020120
c00085c6:	dc 1e                	fcomp  QWORD PTR [esi]
c00085c8:	df e0                	fnstsw ax
c00085ca:	9e                   	sahf   
c00085cb:	76 05                	jbe    c00085d2 <src_process+0xc0>
c00085cd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085d0:	dd 1e                	fstp   QWORD PTR [esi]
c00085d2:	83 ec 10             	sub    esp,0x10
c00085d5:	dd 06                	fld    QWORD PTR [esi]
c00085d7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085da:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085dd:	e8 de 63 01 00       	call   c001e9c0 <fabs>
c00085e2:	83 c4 10             	add    esp,0x10
c00085e5:	dd 05 10 01 02 c0    	fld    QWORD PTR ds:0xc0020110
c00085eb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085ef:	de d9                	fcompp 
c00085f1:	df e0                	fnstsw ax
c00085f3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085f7:	9e                   	sahf   
c00085f8:	76 05                	jbe    c00085ff <src_process+0xed>
c00085fa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085fd:	eb 03                	jmp    c0008602 <src_process+0xf0>
c00085ff:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008602:	59                   	pop    ecx
c0008603:	5b                   	pop    ebx
c0008604:	5e                   	pop    esi
c0008605:	ff e0                	jmp    eax
c0008607:	b8 02 00 00 00       	mov    eax,0x2
c000860c:	eb 28                	jmp    c0008636 <src_process+0x124>
c000860e:	b8 07 00 00 00       	mov    eax,0x7
c0008613:	eb 21                	jmp    c0008636 <src_process+0x124>
c0008615:	b8 12 00 00 00       	mov    eax,0x12
c000861a:	eb 1a                	jmp    c0008636 <src_process+0x124>
c000861c:	b8 03 00 00 00       	mov    eax,0x3
c0008621:	eb 13                	jmp    c0008636 <src_process+0x124>
c0008623:	b8 04 00 00 00       	mov    eax,0x4
c0008628:	eb 0c                	jmp    c0008636 <src_process+0x124>
c000862a:	b8 06 00 00 00       	mov    eax,0x6
c000862f:	eb 05                	jmp    c0008636 <src_process+0x124>
c0008631:	b8 10 00 00 00       	mov    eax,0x10
c0008636:	5a                   	pop    edx
c0008637:	5b                   	pop    ebx
c0008638:	5e                   	pop    esi
c0008639:	c3                   	ret    

c000863a <src_callback_read>:
c000863a:	55                   	push   ebp
c000863b:	57                   	push   edi
c000863c:	56                   	push   esi
c000863d:	53                   	push   ebx
c000863e:	83 ec 4c             	sub    esp,0x4c
c0008641:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008645:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008649:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000864d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008651:	85 ff                	test   edi,edi
c0008653:	0f 8e 36 01 00 00    	jle    c000878f <src_callback_read+0x155>
c0008659:	85 db                	test   ebx,ebx
c000865b:	0f 84 2e 01 00 00    	je     c000878f <src_callback_read+0x155>
c0008661:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008668:	74 0c                	je     c0008676 <src_callback_read+0x3c>
c000866a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008671:	e9 19 01 00 00       	jmp    c000878f <src_callback_read+0x155>
c0008676:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000867a:	75 0c                	jne    c0008688 <src_callback_read+0x4e>
c000867c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008683:	e9 07 01 00 00       	jmp    c000878f <src_callback_read+0x155>
c0008688:	51                   	push   ecx
c0008689:	6a 24                	push   0x24
c000868b:	6a 00                	push   0x0
c000868d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008691:	50                   	push   eax
c0008692:	e8 71 7f ff ff       	call   c0000608 <memset>
c0008697:	5e                   	pop    esi
c0008698:	5d                   	pop    ebp
c0008699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	e8 a8 fd ff ff       	call   c000844e <is_bad_src_ratio>
c00086a6:	83 c4 10             	add    esp,0x10
c00086a9:	85 c0                	test   eax,eax
c00086ab:	74 0c                	je     c00086b9 <src_callback_read+0x7f>
c00086ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086b4:	e9 d6 00 00 00       	jmp    c000878f <src_callback_read+0x155>
c00086b9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086bd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086c5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086c9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086cc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086d4:	31 f6                	xor    esi,esi
c00086d6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086dd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086e2:	75 30                	jne    c0008714 <src_callback_read+0xda>
c00086e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086ec:	52                   	push   edx
c00086ed:	52                   	push   edx
c00086ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086f2:	50                   	push   eax
c00086f3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086f6:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 08                	jne    c0008714 <src_callback_read+0xda>
c000870c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008714:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000871b:	50                   	push   eax
c000871c:	50                   	push   eax
c000871d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008721:	50                   	push   eax
c0008722:	53                   	push   ebx
c0008723:	e8 ea fd ff ff       	call   c0008512 <src_process>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008732:	85 c0                	test   eax,eax
c0008734:	75 42                	jne    c0008778 <src_callback_read+0x13e>
c0008736:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000873a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000873d:	89 e9                	mov    ecx,ebp
c000873f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008743:	0f af ca             	imul   ecx,edx
c0008746:	c1 e1 02             	shl    ecx,0x2
c0008749:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c000874d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008751:	0f af d1             	imul   edx,ecx
c0008754:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008758:	c1 e2 02             	shl    edx,0x2
c000875b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c000875f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008762:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008767:	75 04                	jne    c000876d <src_callback_read+0x133>
c0008769:	85 c9                	test   ecx,ecx
c000876b:	74 0b                	je     c0008778 <src_callback_read+0x13e>
c000876d:	39 d7                	cmp    edi,edx
c000876f:	7e 09                	jle    c000877a <src_callback_read+0x140>
c0008771:	89 d6                	mov    esi,edx
c0008773:	e9 65 ff ff ff       	jmp    c00086dd <src_callback_read+0xa3>
c0008778:	89 f2                	mov    edx,esi
c000877a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000877e:	85 c0                	test   eax,eax
c0008780:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008783:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000878a:	74 05                	je     c0008791 <src_callback_read+0x157>
c000878c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000878f:	31 d2                	xor    edx,edx
c0008791:	83 c4 4c             	add    esp,0x4c
c0008794:	89 d0                	mov    eax,edx
c0008796:	5b                   	pop    ebx
c0008797:	5e                   	pop    esi
c0008798:	5f                   	pop    edi
c0008799:	5d                   	pop    ebp
c000879a:	c3                   	ret    

c000879b <src_set_ratio>:
c000879b:	53                   	push   ebx
c000879c:	b8 02 00 00 00       	mov    eax,0x2
c00087a1:	83 ec 08             	sub    esp,0x8
c00087a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087a8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 33                	je     c00087e3 <src_set_ratio+0x48>
c00087b0:	b8 07 00 00 00       	mov    eax,0x7
c00087b5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087b9:	74 2c                	je     c00087e7 <src_set_ratio+0x4c>
c00087bb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087bf:	74 2a                	je     c00087eb <src_set_ratio+0x50>
c00087c1:	50                   	push   eax
c00087c2:	50                   	push   eax
c00087c3:	dd 14 24             	fst    QWORD PTR [esp]
c00087c6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087ca:	e8 7f fc ff ff       	call   c000844e <is_bad_src_ratio>
c00087cf:	5a                   	pop    edx
c00087d0:	85 c0                	test   eax,eax
c00087d2:	59                   	pop    ecx
c00087d3:	75 07                	jne    c00087dc <src_set_ratio+0x41>
c00087d5:	dd 04 24             	fld    QWORD PTR [esp]
c00087d8:	dd 1b                	fstp   QWORD PTR [ebx]
c00087da:	eb 11                	jmp    c00087ed <src_set_ratio+0x52>
c00087dc:	b8 06 00 00 00       	mov    eax,0x6
c00087e1:	eb 0a                	jmp    c00087ed <src_set_ratio+0x52>
c00087e3:	dd d8                	fstp   st(0)
c00087e5:	eb 06                	jmp    c00087ed <src_set_ratio+0x52>
c00087e7:	dd d8                	fstp   st(0)
c00087e9:	eb 02                	jmp    c00087ed <src_set_ratio+0x52>
c00087eb:	dd d8                	fstp   st(0)
c00087ed:	83 c4 08             	add    esp,0x8
c00087f0:	5b                   	pop    ebx
c00087f1:	c3                   	ret    

c00087f2 <src_get_channels>:
c00087f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087f6:	b8 02 00 00 00       	mov    eax,0x2
c00087fb:	85 d2                	test   edx,edx
c00087fd:	74 14                	je     c0008813 <src_get_channels+0x21>
c00087ff:	b8 07 00 00 00       	mov    eax,0x7
c0008804:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008808:	74 09                	je     c0008813 <src_get_channels+0x21>
c000880a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000880e:	74 03                	je     c0008813 <src_get_channels+0x21>
c0008810:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008813:	c3                   	ret    

c0008814 <src_reset>:
c0008814:	53                   	push   ebx
c0008815:	b8 02 00 00 00       	mov    eax,0x2
c000881a:	83 ec 08             	sub    esp,0x8
c000881d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008821:	85 db                	test   ebx,ebx
c0008823:	74 2e                	je     c0008853 <src_reset+0x3f>
c0008825:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008828:	85 c0                	test   eax,eax
c000882a:	74 09                	je     c0008835 <src_reset+0x21>
c000882c:	83 ec 0c             	sub    esp,0xc
c000882f:	53                   	push   ebx
c0008830:	ff d0                	call   eax
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	d9 ee                	fldz   
c0008837:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000883e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008841:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008848:	dd 1b                	fstp   QWORD PTR [ebx]
c000884a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008851:	31 c0                	xor    eax,eax
c0008853:	83 c4 08             	add    esp,0x8
c0008856:	5b                   	pop    ebx
c0008857:	c3                   	ret    

c0008858 <src_new>:
c0008858:	57                   	push   edi
c0008859:	56                   	push   esi
c000885a:	53                   	push   ebx
c000885b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000885f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008863:	85 f6                	test   esi,esi
c0008865:	74 73                	je     c00088da <src_new+0x82>
c0008867:	85 ff                	test   edi,edi
c0008869:	7f 08                	jg     c0008873 <src_new+0x1b>
c000886b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008871:	eb 1e                	jmp    c0008891 <src_new+0x39>
c0008873:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008879:	50                   	push   eax
c000887a:	50                   	push   eax
c000887b:	6a 3c                	push   0x3c
c000887d:	6a 01                	push   0x1
c000887f:	e8 f8 33 00 00       	call   c000bc7c <calloc>
c0008884:	83 c4 10             	add    esp,0x10
c0008887:	89 c3                	mov    ebx,eax
c0008889:	85 c0                	test   eax,eax
c000888b:	75 10                	jne    c000889d <src_new+0x45>
c000888d:	85 f6                	test   esi,esi
c000888f:	75 04                	jne    c0008895 <src_new+0x3d>
c0008891:	31 db                	xor    ebx,ebx
c0008893:	eb 4b                	jmp    c00088e0 <src_new+0x88>
c0008895:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000889b:	eb 43                	jmp    c00088e0 <src_new+0x88>
c000889d:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00088a0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00088a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088ab:	e8 e2 fb ff ff       	call   c0008492 <psrc_set_converter>
c00088b0:	85 c0                	test   eax,eax
c00088b2:	74 18                	je     c00088cc <src_new+0x74>
c00088b4:	85 f6                	test   esi,esi
c00088b6:	74 06                	je     c00088be <src_new+0x66>
c00088b8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088be:	83 ec 0c             	sub    esp,0xc
c00088c1:	53                   	push   ebx
c00088c2:	31 db                	xor    ebx,ebx
c00088c4:	e8 93 33 00 00       	call   c000bc5c <free>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 3f ff ff ff       	call   c0008814 <src_reset>
c00088d5:	83 c4 10             	add    esp,0x10
c00088d8:	eb 06                	jmp    c00088e0 <src_new+0x88>
c00088da:	85 ff                	test   edi,edi
c00088dc:	7f 9b                	jg     c0008879 <src_new+0x21>
c00088de:	eb b1                	jmp    c0008891 <src_new+0x39>
c00088e0:	89 d8                	mov    eax,ebx
c00088e2:	5b                   	pop    ebx
c00088e3:	5e                   	pop    esi
c00088e4:	5f                   	pop    edi
c00088e5:	c3                   	ret    

c00088e6 <src_callback_new>:
c00088e6:	56                   	push   esi
c00088e7:	53                   	push   ebx
c00088e8:	53                   	push   ebx
c00088e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088f1:	85 f6                	test   esi,esi
c00088f3:	75 0e                	jne    c0008903 <src_callback_new+0x1d>
c00088f5:	31 db                	xor    ebx,ebx
c00088f7:	85 c0                	test   eax,eax
c00088f9:	74 47                	je     c0008942 <src_callback_new+0x5c>
c00088fb:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008901:	eb 3f                	jmp    c0008942 <src_callback_new+0x5c>
c0008903:	85 c0                	test   eax,eax
c0008905:	74 06                	je     c000890d <src_callback_new+0x27>
c0008907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000890d:	51                   	push   ecx
c000890e:	50                   	push   eax
c000890f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008913:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008917:	e8 3c ff ff ff       	call   c0008858 <src_new>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	89 c3                	mov    ebx,eax
c0008921:	85 c0                	test   eax,eax
c0008923:	74 1d                	je     c0008942 <src_callback_new+0x5c>
c0008925:	83 ec 0c             	sub    esp,0xc
c0008928:	50                   	push   eax
c0008929:	e8 e6 fe ff ff       	call   c0008814 <src_reset>
c000892e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008932:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008939:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000893c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	89 d8                	mov    eax,ebx
c0008944:	5a                   	pop    edx
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	c3                   	ret    

c0008948 <src_get_name>:
c0008948:	53                   	push   ebx
c0008949:	83 ec 14             	sub    esp,0x14
c000894c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008950:	53                   	push   ebx
c0008951:	e8 59 1f 00 00       	call   c000a8af <sinc_get_name>
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	85 c0                	test   eax,eax
c000895b:	75 1d                	jne    c000897a <src_get_name+0x32>
c000895d:	83 ec 0c             	sub    esp,0xc
c0008960:	53                   	push   ebx
c0008961:	e8 60 23 00 00       	call   c000acc6 <zoh_get_name>
c0008966:	83 c4 10             	add    esp,0x10
c0008969:	85 c0                	test   eax,eax
c000896b:	75 0d                	jne    c000897a <src_get_name+0x32>
c000896d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008971:	83 c4 08             	add    esp,0x8
c0008974:	5b                   	pop    ebx
c0008975:	e9 3a 05 00 00       	jmp    c0008eb4 <linear_get_name>
c000897a:	83 c4 08             	add    esp,0x8
c000897d:	5b                   	pop    ebx
c000897e:	c3                   	ret    

c000897f <src_get_description>:
c000897f:	53                   	push   ebx
c0008980:	83 ec 14             	sub    esp,0x14
c0008983:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008987:	53                   	push   ebx
c0008988:	e8 35 1f 00 00       	call   c000a8c2 <sinc_get_description>
c000898d:	83 c4 10             	add    esp,0x10
c0008990:	85 c0                	test   eax,eax
c0008992:	75 1d                	jne    c00089b1 <src_get_description+0x32>
c0008994:	83 ec 0c             	sub    esp,0xc
c0008997:	53                   	push   ebx
c0008998:	e8 38 23 00 00       	call   c000acd5 <zoh_get_description>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	75 0d                	jne    c00089b1 <src_get_description+0x32>
c00089a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089a8:	83 c4 08             	add    esp,0x8
c00089ab:	5b                   	pop    ebx
c00089ac:	e9 12 05 00 00       	jmp    c0008ec3 <linear_get_description>
c00089b1:	83 c4 08             	add    esp,0x8
c00089b4:	5b                   	pop    ebx
c00089b5:	c3                   	ret    

c00089b6 <src_get_version>:
c00089b6:	b8 40 fc 01 c0       	mov    eax,0xc001fc40
c00089bb:	c3                   	ret    

c00089bc <src_is_valid_ratio>:
c00089bc:	50                   	push   eax
c00089bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089c5:	e8 84 fa ff ff       	call   c000844e <is_bad_src_ratio>
c00089ca:	85 c0                	test   eax,eax
c00089cc:	0f 94 c0             	sete   al
c00089cf:	83 c4 0c             	add    esp,0xc
c00089d2:	0f b6 c0             	movzx  eax,al
c00089d5:	c3                   	ret    

c00089d6 <src_error>:
c00089d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089da:	31 c0                	xor    eax,eax
c00089dc:	85 d2                	test   edx,edx
c00089de:	74 03                	je     c00089e3 <src_error+0xd>
c00089e0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089e3:	c3                   	ret    

c00089e4 <src_strerror>:
c00089e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089e8:	31 c0                	xor    eax,eax
c00089ea:	83 fa 17             	cmp    edx,0x17
c00089ed:	77 07                	ja     c00089f6 <src_strerror+0x12>
c00089ef:	8b 04 95 a0 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff60]
c00089f6:	c3                   	ret    

c00089f7 <src_simple>:
c00089f7:	56                   	push   esi
c00089f8:	53                   	push   ebx
c00089f9:	83 ec 18             	sub    esp,0x18
c00089fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a04:	50                   	push   eax
c0008a05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a0d:	e8 46 fe ff ff       	call   c0008858 <src_new>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	85 c0                	test   eax,eax
c0008a17:	75 06                	jne    c0008a1f <src_simple+0x28>
c0008a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a1d:	eb 25                	jmp    c0008a44 <src_simple+0x4d>
c0008a1f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a26:	89 c3                	mov    ebx,eax
c0008a28:	50                   	push   eax
c0008a29:	50                   	push   eax
c0008a2a:	56                   	push   esi
c0008a2b:	53                   	push   ebx
c0008a2c:	e8 e1 fa ff ff       	call   c0008512 <src_process>
c0008a31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a38:	e8 99 fa ff ff       	call   c00084d6 <src_delete>
c0008a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	83 c4 14             	add    esp,0x14
c0008a47:	5b                   	pop    ebx
c0008a48:	5e                   	pop    esi
c0008a49:	c3                   	ret    

c0008a4a <src_short_to_float_array>:
c0008a4a:	83 ec 0c             	sub    esp,0xc
c0008a4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a51:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a59:	85 c0                	test   eax,eax
c0008a5b:	74 0f                	je     c0008a6c <src_short_to_float_array+0x22>
c0008a5d:	48                   	dec    eax
c0008a5e:	d9 05 24 01 02 c0    	fld    DWORD PTR ds:0xc0020124
c0008a64:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a67:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a6a:	eb ed                	jmp    c0008a59 <src_short_to_float_array+0xf>
c0008a6c:	83 c4 0c             	add    esp,0xc
c0008a6f:	c3                   	ret    

c0008a70 <src_float_to_short_array>:
c0008a70:	56                   	push   esi
c0008a71:	53                   	push   ebx
c0008a72:	52                   	push   edx
c0008a73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a7b:	85 db                	test   ebx,ebx
c0008a7d:	74 51                	je     c0008ad0 <src_float_to_short_array+0x60>
c0008a7f:	4b                   	dec    ebx
c0008a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a84:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008a8a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a8d:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008a93:	df e0                	fnstsw ax
c0008a95:	9e                   	sahf   
c0008a96:	72 0a                	jb     c0008aa2 <src_float_to_short_array+0x32>
c0008a98:	dd d8                	fstp   st(0)
c0008a9a:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008aa0:	eb d9                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008aa2:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008aa8:	d8 d9                	fcomp  st(1)
c0008aaa:	df e0                	fnstsw ax
c0008aac:	9e                   	sahf   
c0008aad:	72 0a                	jb     c0008ab9 <src_float_to_short_array+0x49>
c0008aaf:	dd d8                	fstp   st(0)
c0008ab1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ab7:	eb c2                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008ab9:	83 ec 10             	sub    esp,0x10
c0008abc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008abf:	e8 1c 5f 01 00       	call   c001e9e0 <lrint>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	c1 f8 10             	sar    eax,0x10
c0008aca:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ace:	eb ab                	jmp    c0008a7b <src_float_to_short_array+0xb>
c0008ad0:	58                   	pop    eax
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_int_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_int_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 30 01 02 c0    	fld    DWORD PTR ds:0xc0020130
c0008aee:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_int_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_int_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 4f                	je     c0008b58 <src_float_to_int_array+0x5e>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 28 01 02 c0    	fld    DWORD PTR ds:0xc0020128
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 18 01 02 c0    	fcom   QWORD PTR ds:0xc0020118
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0b                	jb     c0008b2d <src_float_to_int_array+0x33>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b2b:	eb d8                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b2d:	d9 05 2c 01 02 c0    	fld    DWORD PTR ds:0xc002012c
c0008b33:	d8 d9                	fcomp  st(1)
c0008b35:	df e0                	fnstsw ax
c0008b37:	9e                   	sahf   
c0008b38:	72 0b                	jb     c0008b45 <src_float_to_int_array+0x4b>
c0008b3a:	dd d8                	fstp   st(0)
c0008b3c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b43:	eb c0                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b45:	83 ec 10             	sub    esp,0x10
c0008b48:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b4b:	e8 90 5e 01 00       	call   c001e9e0 <lrint>
c0008b50:	83 c4 10             	add    esp,0x10
c0008b53:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b56:	eb ad                	jmp    c0008b05 <src_float_to_int_array+0xb>
c0008b58:	58                   	pop    eax
c0008b59:	5b                   	pop    ebx
c0008b5a:	5e                   	pop    esi
c0008b5b:	c3                   	ret    

c0008b5c <is_bad_src_ratio>:
c0008b5c:	83 ec 0c             	sub    esp,0xc
c0008b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b6e:	dd 04 24             	fld    QWORD PTR [esp]
c0008b71:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008b77:	de d9                	fcompp 
c0008b79:	df e0                	fnstsw ax
c0008b7b:	f6 c4 45             	test   ah,0x45
c0008b7e:	74 10                	je     c0008b90 <is_bad_src_ratio+0x34>
c0008b80:	dd 04 24             	fld    QWORD PTR [esp]
c0008b83:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0008b89:	df e0                	fnstsw ax
c0008b8b:	f6 c4 45             	test   ah,0x45
c0008b8e:	75 07                	jne    c0008b97 <is_bad_src_ratio+0x3b>
c0008b90:	b8 01 00 00 00       	mov    eax,0x1
c0008b95:	eb 05                	jmp    c0008b9c <is_bad_src_ratio+0x40>
c0008b97:	b8 00 00 00 00       	mov    eax,0x0
c0008b9c:	83 c4 0c             	add    esp,0xc
c0008b9f:	c3                   	ret    

c0008ba0 <fmod_one>:
c0008ba0:	83 ec 2c             	sub    esp,0x2c
c0008ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008baf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bb3:	83 ec 08             	sub    esp,0x8
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbe:	e8 1d 5e 01 00       	call   c001e9e0 <lrint>
c0008bc3:	83 c4 10             	add    esp,0x10
c0008bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bca:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bce:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bd2:	de e1                	fsubrp st(1),st
c0008bd4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bd8:	d9 ee                	fldz   
c0008bda:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bde:	df e0                	fnstsw ax
c0008be0:	f6 c4 45             	test   ah,0x45
c0008be3:	75 0a                	jne    c0008bef <fmod_one+0x4f>
c0008be5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be9:	d9 e8                	fld1   
c0008beb:	de c1                	faddp  st(1),st
c0008bed:	eb 04                	jmp    c0008bf3 <fmod_one+0x53>
c0008bef:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bf3:	83 c4 2c             	add    esp,0x2c
c0008bf6:	c3                   	ret    

c0008bf7 <linear_vari_process>:
c0008bf7:	55                   	push   ebp
c0008bf8:	57                   	push   edi
c0008bf9:	56                   	push   esi
c0008bfa:	53                   	push   ebx
c0008bfb:	83 ec 2c             	sub    esp,0x2c
c0008bfe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c02:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c06:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c0e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c12:	0f 8e 5e 02 00 00    	jle    c0008e76 <linear_vari_process+0x27f>
c0008c18:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c1b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c23:	85 db                	test   ebx,ebx
c0008c25:	0f 84 4b 02 00 00    	je     c0008e76 <linear_vari_process+0x27f>
c0008c2b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c2e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c32:	74 19                	je     c0008c4d <linear_vari_process+0x56>
c0008c34:	31 d2                	xor    edx,edx
c0008c36:	39 c2                	cmp    edx,eax
c0008c38:	7d 0c                	jge    c0008c46 <linear_vari_process+0x4f>
c0008c3a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c3c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c3f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c43:	42                   	inc    edx
c0008c44:	eb f0                	jmp    c0008c36 <linear_vari_process+0x3f>
c0008c46:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c50:	0f af d0             	imul   edx,eax
c0008c53:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c56:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c5a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c61:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c64:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c6b:	dd 07                	fld    QWORD PTR [edi]
c0008c6d:	dd 14 24             	fst    QWORD PTR [esp]
c0008c70:	50                   	push   eax
c0008c71:	50                   	push   eax
c0008c72:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c75:	e8 e2 fe ff ff       	call   c0008b5c <is_bad_src_ratio>
c0008c7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c7e:	5a                   	pop    edx
c0008c7f:	59                   	pop    ecx
c0008c80:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c85:	0f 85 e3 01 00 00    	jne    c0008e6e <linear_vari_process+0x277>
c0008c8b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c8e:	d9 e8                	fld1   
c0008c90:	d8 d1                	fcom   st(1)
c0008c92:	df e0                	fnstsw ax
c0008c94:	9e                   	sahf   
c0008c95:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c99:	0f 86 99 00 00 00    	jbe    c0008d38 <linear_vari_process+0x141>
c0008c9f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008ca2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008ca5:	0f 8d 8d 00 00 00    	jge    c0008d38 <linear_vari_process+0x141>
c0008cab:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008caf:	d8 c1                	fadd   st,st(1)
c0008cb1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008cb4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008cb7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cba:	df e0                	fnstsw ax
c0008cbc:	9e                   	sahf   
c0008cbd:	73 79                	jae    c0008d38 <linear_vari_process+0x141>
c0008cbf:	85 d2                	test   edx,edx
c0008cc1:	7e 38                	jle    c0008cfb <linear_vari_process+0x104>
c0008cc3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cc7:	83 ec 10             	sub    esp,0x10
c0008cca:	dd 07                	fld    QWORD PTR [edi]
c0008ccc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008ccf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cd2:	e8 e9 5c 01 00       	call   c001e9c0 <fabs>
c0008cd7:	83 c4 10             	add    esp,0x10
c0008cda:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c0008ce0:	df e0                	fnstsw ax
c0008ce2:	9e                   	sahf   
c0008ce3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ce7:	76 12                	jbe    c0008cfb <linear_vari_process+0x104>
c0008ce9:	dd 07                	fld    QWORD PTR [edi]
c0008ceb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008cee:	d8 e1                	fsub   st,st(1)
c0008cf0:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008cf3:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008cf6:	de c1                	faddp  st(1),st
c0008cf8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cfb:	31 c0                	xor    eax,eax
c0008cfd:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d00:	7e 1f                	jle    c0008d21 <linear_vari_process+0x12a>
c0008d02:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d06:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d08:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d0b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d0f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d12:	d8 e1                	fsub   st,st(1)
c0008d14:	40                   	inc    eax
c0008d15:	d8 ca                	fmul   st,st(2)
c0008d17:	de c1                	faddp  st(1),st
c0008d19:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d1c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d1f:	eb dc                	jmp    c0008cfd <linear_vari_process+0x106>
c0008d21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d25:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d28:	de c1                	faddp  st(1),st
c0008d2a:	e9 5f ff ff ff       	jmp    c0008c8e <linear_vari_process+0x97>
c0008d2f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d33:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d36:	de c1                	faddp  st(1),st
c0008d38:	83 ec 10             	sub    esp,0x10
c0008d3b:	dd 14 24             	fst    QWORD PTR [esp]
c0008d3e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d42:	e8 59 fe ff ff       	call   c0008ba0 <fmod_one>
c0008d47:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d4a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d4e:	d8 e1                	fsub   st,st(1)
c0008d50:	d9 c9                	fxch   st(1)
c0008d52:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d59:	e8 82 5c 01 00       	call   c001e9e0 <lrint>
c0008d5e:	83 c4 10             	add    esp,0x10
c0008d61:	0f af e8             	imul   ebp,eax
c0008d64:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d68:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d6b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d6e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d74:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d77:	0f 8d 97 00 00 00    	jge    c0008e14 <linear_vari_process+0x21d>
c0008d7d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d81:	d9 c0                	fld    st(0)
c0008d83:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d86:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d8a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d8e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d92:	de d9                	fcompp 
c0008d94:	df e0                	fnstsw ax
c0008d96:	9e                   	sahf   
c0008d97:	76 7b                	jbe    c0008e14 <linear_vari_process+0x21d>
c0008d99:	85 ed                	test   ebp,ebp
c0008d9b:	7e 38                	jle    c0008dd5 <linear_vari_process+0x1de>
c0008d9d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008da1:	83 ec 10             	sub    esp,0x10
c0008da4:	dd 07                	fld    QWORD PTR [edi]
c0008da6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008da9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dac:	e8 0f 5c 01 00       	call   c001e9c0 <fabs>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008dc1:	76 12                	jbe    c0008dd5 <linear_vari_process+0x1de>
c0008dc3:	dd 07                	fld    QWORD PTR [edi]
c0008dc5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dc8:	d8 e1                	fsub   st,st(1)
c0008dca:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dcd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dd0:	de c1                	faddp  st(1),st
c0008dd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dd5:	31 c0                	xor    eax,eax
c0008dd7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dda:	39 c2                	cmp    edx,eax
c0008ddc:	0f 8e 4d ff ff ff    	jle    c0008d2f <linear_vari_process+0x138>
c0008de2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008de4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008de7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008deb:	89 e9                	mov    ecx,ebp
c0008ded:	01 c5                	add    ebp,eax
c0008def:	29 d1                	sub    ecx,edx
c0008df1:	89 ca                	mov    edx,ecx
c0008df3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008df7:	01 c2                	add    edx,eax
c0008df9:	40                   	inc    eax
c0008dfa:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008dfd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e00:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e06:	d8 e1                	fsub   st,st(1)
c0008e08:	d8 ca                	fmul   st,st(2)
c0008e0a:	de c1                	faddp  st(1),st
c0008e0c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e12:	eb c3                	jmp    c0008dd7 <linear_vari_process+0x1e0>
c0008e14:	39 d1                	cmp    ecx,edx
c0008e16:	7d 13                	jge    c0008e2b <linear_vari_process+0x234>
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e1d:	29 c8                	sub    eax,ecx
c0008e1f:	99                   	cdq    
c0008e20:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e27:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e2b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e31:	85 c0                	test   eax,eax
c0008e33:	7f 1b                	jg     c0008e50 <linear_vari_process+0x259>
c0008e35:	dd 04 24             	fld    QWORD PTR [esp]
c0008e38:	dd 1f                	fstp   QWORD PTR [edi]
c0008e3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e3d:	99                   	cdq    
c0008e3e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e41:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e44:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e47:	99                   	cdq    
c0008e48:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e4b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e4e:	eb 26                	jmp    c0008e76 <linear_vari_process+0x27f>
c0008e50:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e53:	31 d2                	xor    edx,edx
c0008e55:	29 c8                	sub    eax,ecx
c0008e57:	c1 e0 02             	shl    eax,0x2
c0008e5a:	39 d1                	cmp    ecx,edx
c0008e5c:	7e d7                	jle    c0008e35 <linear_vari_process+0x23e>
c0008e5e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e60:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e64:	83 c0 04             	add    eax,0x4
c0008e67:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e6b:	42                   	inc    edx
c0008e6c:	eb ec                	jmp    c0008e5a <linear_vari_process+0x263>
c0008e6e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e7a:	83 c4 2c             	add    esp,0x2c
c0008e7d:	5b                   	pop    ebx
c0008e7e:	5e                   	pop    esi
c0008e7f:	5f                   	pop    edi
c0008e80:	5d                   	pop    ebp
c0008e81:	c3                   	ret    

c0008e82 <linear_reset>:
c0008e82:	83 ec 0c             	sub    esp,0xc
c0008e85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e8c:	85 c0                	test   eax,eax
c0008e8e:	74 20                	je     c0008eb0 <linear_reset+0x2e>
c0008e90:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e93:	83 c0 1c             	add    eax,0x1c
c0008e96:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e99:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008ea0:	c1 e2 02             	shl    edx,0x2
c0008ea3:	51                   	push   ecx
c0008ea4:	52                   	push   edx
c0008ea5:	6a 00                	push   0x0
c0008ea7:	50                   	push   eax
c0008ea8:	e8 5b 77 ff ff       	call   c0000608 <memset>
c0008ead:	83 c4 10             	add    esp,0x10
c0008eb0:	83 c4 0c             	add    esp,0xc
c0008eb3:	c3                   	ret    

c0008eb4 <linear_get_name>:
c0008eb4:	31 c0                	xor    eax,eax
c0008eb6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebb:	75 05                	jne    c0008ec2 <linear_get_name+0xe>
c0008ebd:	b8 34 01 02 c0       	mov    eax,0xc0020134
c0008ec2:	c3                   	ret    

c0008ec3 <linear_get_description>:
c0008ec3:	31 c0                	xor    eax,eax
c0008ec5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eca:	75 05                	jne    c0008ed1 <linear_get_description+0xe>
c0008ecc:	b8 48 01 02 c0       	mov    eax,0xc0020148
c0008ed1:	c3                   	ret    

c0008ed2 <linear_set_converter>:
c0008ed2:	53                   	push   ebx
c0008ed3:	b8 0a 00 00 00       	mov    eax,0xa
c0008ed8:	83 ec 08             	sub    esp,0x8
c0008edb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008edf:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ee4:	75 6e                	jne    c0008f54 <linear_set_converter+0x82>
c0008ee6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008ee9:	85 c0                	test   eax,eax
c0008eeb:	74 13                	je     c0008f00 <linear_set_converter+0x2e>
c0008eed:	83 ec 0c             	sub    esp,0xc
c0008ef0:	50                   	push   eax
c0008ef1:	e8 66 2d 00 00       	call   c000bc5c <free>
c0008ef6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008efd:	83 c4 10             	add    esp,0x10
c0008f00:	50                   	push   eax
c0008f01:	50                   	push   eax
c0008f02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f05:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f0c:	50                   	push   eax
c0008f0d:	6a 01                	push   0x1
c0008f0f:	e8 68 2d 00 00       	call   c000bc7c <calloc>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 c2                	mov    edx,eax
c0008f19:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f1c:	85 d2                	test   edx,edx
c0008f1e:	b8 01 00 00 00       	mov    eax,0x1
c0008f23:	74 2f                	je     c0008f54 <linear_set_converter+0x82>
c0008f25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f28:	83 ec 0c             	sub    esp,0xc
c0008f2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f2e:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f34:	c7 43 24 f7 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bf7
c0008f3b:	c7 43 20 f7 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bf7
c0008f42:	c7 43 28 82 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e82
c0008f49:	53                   	push   ebx
c0008f4a:	e8 33 ff ff ff       	call   c0008e82 <linear_reset>
c0008f4f:	83 c4 10             	add    esp,0x10
c0008f52:	31 c0                	xor    eax,eax
c0008f54:	83 c4 08             	add    esp,0x8
c0008f57:	5b                   	pop    ebx
c0008f58:	c3                   	ret    

c0008f59 <is_bad_src_ratio>:
c0008f59:	83 ec 0c             	sub    esp,0xc
c0008f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f60:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f6b:	dd 04 24             	fld    QWORD PTR [esp]
c0008f6e:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c0008f74:	de d9                	fcompp 
c0008f76:	df e0                	fnstsw ax
c0008f78:	f6 c4 45             	test   ah,0x45
c0008f7b:	74 10                	je     c0008f8d <is_bad_src_ratio+0x34>
c0008f7d:	dd 04 24             	fld    QWORD PTR [esp]
c0008f80:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c0008f86:	df e0                	fnstsw ax
c0008f88:	f6 c4 45             	test   ah,0x45
c0008f8b:	75 07                	jne    c0008f94 <is_bad_src_ratio+0x3b>
c0008f8d:	b8 01 00 00 00       	mov    eax,0x1
c0008f92:	eb 05                	jmp    c0008f99 <is_bad_src_ratio+0x40>
c0008f94:	b8 00 00 00 00       	mov    eax,0x0
c0008f99:	83 c4 0c             	add    esp,0xc
c0008f9c:	c3                   	ret    

c0008f9d <int_to_fp>:
c0008f9d:	c1 e0 0c             	shl    eax,0xc
c0008fa0:	c3                   	ret    

c0008fa1 <fp_to_int>:
c0008fa1:	c1 f8 0c             	sar    eax,0xc
c0008fa4:	c3                   	ret    

c0008fa5 <fp_fraction_part>:
c0008fa5:	25 ff 0f 00 00       	and    eax,0xfff
c0008faa:	c3                   	ret    

c0008fab <fp_to_double>:
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	e8 f2 ff ff ff       	call   c0008fa5 <fp_fraction_part>
c0008fb3:	d9 05 08 03 02 c0    	fld    DWORD PTR ds:0xc0020308
c0008fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fbd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fc1:	83 c4 0c             	add    esp,0xc
c0008fc4:	c3                   	ret    

c0008fc5 <calc_output_single>:
c0008fc5:	55                   	push   ebp
c0008fc6:	57                   	push   edi
c0008fc7:	89 c7                	mov    edi,eax
c0008fc9:	56                   	push   esi
c0008fca:	53                   	push   ebx
c0008fcb:	89 d3                	mov    ebx,edx
c0008fcd:	83 ec 24             	sub    esp,0x24
c0008fd0:	89 de                	mov    esi,ebx
c0008fd2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fd5:	e8 c3 ff ff ff       	call   c0008f9d <int_to_fp>
c0008fda:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fe1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fe8:	29 c8                	sub    eax,ecx
c0008fea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ff2:	99                   	cdq    
c0008ff3:	f7 fb                	idiv   ebx
c0008ff5:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008ff8:	0f af f0             	imul   esi,eax
c0008ffb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008fff:	01 ce                	add    esi,ecx
c0009001:	29 c2                	sub    edx,eax
c0009003:	8d 14 97             	lea    edx,[edi+edx*4]
c0009006:	89 f0                	mov    eax,esi
c0009008:	e8 9e ff ff ff       	call   c0008fab <fp_to_double>
c000900d:	89 f0                	mov    eax,esi
c000900f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009013:	e8 89 ff ff ff       	call   c0008fa1 <fp_to_int>
c0009018:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901c:	83 c2 04             	add    edx,0x4
c000901f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009023:	d8 e1                	fsub   st,st(1)
c0009025:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009029:	de c9                	fmulp  st(1),st
c000902b:	de c1                	faddp  st(1),st
c000902d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009033:	29 de                	sub    esi,ebx
c0009035:	dc 04 24             	fadd   QWORD PTR [esp]
c0009038:	dd 1c 24             	fstp   QWORD PTR [esp]
c000903b:	79 c9                	jns    c0009006 <calc_output_single+0x41>
c000903d:	89 d8                	mov    eax,ebx
c000903f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009043:	29 c8                	sub    eax,ecx
c0009045:	d9 ee                	fldz   
c0009047:	89 c1                	mov    ecx,eax
c0009049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000904d:	29 c8                	sub    eax,ecx
c000904f:	99                   	cdq    
c0009050:	f7 fb                	idiv   ebx
c0009052:	89 da                	mov    edx,ebx
c0009054:	0f af d0             	imul   edx,eax
c0009057:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000905b:	01 d1                	add    ecx,edx
c000905d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009060:	89 c8                	mov    eax,ecx
c0009062:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009066:	e8 40 ff ff ff       	call   c0008fab <fp_to_double>
c000906b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000906f:	89 c8                	mov    eax,ecx
c0009071:	e8 2b ff ff ff       	call   c0008fa1 <fp_to_int>
c0009076:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000907a:	29 d9                	sub    ecx,ebx
c000907c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009080:	83 ea 04             	sub    edx,0x4
c0009083:	d8 e1                	fsub   st,st(1)
c0009085:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009089:	de c9                	fmulp  st(1),st
c000908b:	de c1                	faddp  st(1),st
c000908d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009093:	85 c9                	test   ecx,ecx
c0009095:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009099:	de c1                	faddp  st(1),st
c000909b:	7f c3                	jg     c0009060 <calc_output_single+0x9b>
c000909d:	dd 04 24             	fld    QWORD PTR [esp]
c00090a0:	83 c4 24             	add    esp,0x24
c00090a3:	de c1                	faddp  st(1),st
c00090a5:	5b                   	pop    ebx
c00090a6:	5e                   	pop    esi
c00090a7:	5f                   	pop    edi
c00090a8:	5d                   	pop    ebp
c00090a9:	c3                   	ret    

c00090aa <calc_output_stereo>:
c00090aa:	55                   	push   ebp
c00090ab:	57                   	push   edi
c00090ac:	89 c7                	mov    edi,eax
c00090ae:	56                   	push   esi
c00090af:	53                   	push   ebx
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	83 ec 44             	sub    esp,0x44
c00090b5:	89 de                	mov    esi,ebx
c00090b7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090bb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090be:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090c2:	e8 d6 fe ff ff       	call   c0008f9d <int_to_fp>
c00090c7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090ce:	d9 ee                	fldz   
c00090d0:	29 c8                	sub    eax,ecx
c00090d2:	dd 14 24             	fst    QWORD PTR [esp]
c00090d5:	99                   	cdq    
c00090d6:	f7 fb                	idiv   ebx
c00090d8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090db:	0f af f0             	imul   esi,eax
c00090de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090e2:	01 ce                	add    esi,ecx
c00090e4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090e7:	0f af c2             	imul   eax,edx
c00090ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090f2:	29 c2                	sub    edx,eax
c00090f4:	8d 14 97             	lea    edx,[edi+edx*4]
c00090f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090fb:	89 f0                	mov    eax,esi
c00090fd:	e8 a9 fe ff ff       	call   c0008fab <fp_to_double>
c0009102:	89 f0                	mov    eax,esi
c0009104:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009108:	e8 94 fe ff ff       	call   c0008fa1 <fp_to_int>
c000910d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009111:	83 c2 08             	add    edx,0x8
c0009114:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009118:	d8 e1                	fsub   st,st(1)
c000911a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000911e:	de c9                	fmulp  st(1),st
c0009120:	de c1                	faddp  st(1),st
c0009122:	d9 c0                	fld    st(0)
c0009124:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000912a:	dc 04 24             	fadd   QWORD PTR [esp]
c000912d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009130:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009136:	29 de                	sub    esi,ebx
c0009138:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000913c:	de c1                	faddp  st(1),st
c000913e:	79 b7                	jns    c00090f7 <calc_output_stereo+0x4d>
c0009140:	89 d8                	mov    eax,ebx
c0009142:	d9 ee                	fldz   
c0009144:	d9 ee                	fldz   
c0009146:	29 c8                	sub    eax,ecx
c0009148:	89 c1                	mov    ecx,eax
c000914a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000914e:	29 c8                	sub    eax,ecx
c0009150:	99                   	cdq    
c0009151:	f7 fb                	idiv   ebx
c0009153:	89 da                	mov    edx,ebx
c0009155:	0f af d0             	imul   edx,eax
c0009158:	40                   	inc    eax
c0009159:	01 d1                	add    ecx,edx
c000915b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009160:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009164:	8d 14 87             	lea    edx,[edi+eax*4]
c0009167:	eb 04                	jmp    c000916d <calc_output_stereo+0xc3>
c0009169:	d9 ca                	fxch   st(2)
c000916b:	d9 c9                	fxch   st(1)
c000916d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009171:	d9 c9                	fxch   st(1)
c0009173:	89 c8                	mov    eax,ecx
c0009175:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009179:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000917d:	e8 29 fe ff ff       	call   c0008fab <fp_to_double>
c0009182:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009186:	89 c8                	mov    eax,ecx
c0009188:	e8 14 fe ff ff       	call   c0008fa1 <fp_to_int>
c000918d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009191:	29 d9                	sub    ecx,ebx
c0009193:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009197:	83 ea 08             	sub    edx,0x8
c000919a:	d8 e1                	fsub   st,st(1)
c000919c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00091a0:	de c9                	fmulp  st(1),st
c00091a2:	de c1                	faddp  st(1),st
c00091a4:	d9 c0                	fld    st(0)
c00091a6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00091ac:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091b0:	de c1                	faddp  st(1),st
c00091b2:	d9 c9                	fxch   st(1)
c00091b4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ba:	85 c9                	test   ecx,ecx
c00091bc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091c0:	de c1                	faddp  st(1),st
c00091c2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091c6:	7f a1                	jg     c0009169 <calc_output_stereo+0xbf>
c00091c8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091cc:	dd 04 24             	fld    QWORD PTR [esp]
c00091cf:	de c3                	faddp  st(3),st
c00091d1:	d9 ca                	fxch   st(2)
c00091d3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d7:	d9 18                	fstp   DWORD PTR [eax]
c00091d9:	de c1                	faddp  st(1),st
c00091db:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091df:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091e2:	83 c4 44             	add    esp,0x44
c00091e5:	5b                   	pop    ebx
c00091e6:	5e                   	pop    esi
c00091e7:	5f                   	pop    edi
c00091e8:	5d                   	pop    ebp
c00091e9:	c3                   	ret    

c00091ea <calc_output_quad>:
c00091ea:	55                   	push   ebp
c00091eb:	57                   	push   edi
c00091ec:	56                   	push   esi
c00091ed:	89 c6                	mov    esi,eax
c00091ef:	53                   	push   ebx
c00091f0:	89 d3                	mov    ebx,edx
c00091f2:	83 ec 5c             	sub    esp,0x5c
c00091f5:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091f9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091ff:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009203:	e8 95 fd ff ff       	call   c0008f9d <int_to_fp>
c0009208:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000920b:	d9 ee                	fldz   
c000920d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009211:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009215:	29 c8                	sub    eax,ecx
c0009217:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000921b:	99                   	cdq    
c000921c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009220:	f7 fb                	idiv   ebx
c0009222:	89 da                	mov    edx,ebx
c0009224:	0f af d0             	imul   edx,eax
c0009227:	01 ca                	add    edx,ecx
c0009229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000922d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009230:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009234:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009237:	0f af c2             	imul   eax,edx
c000923a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000923e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009242:	29 c2                	sub    edx,eax
c0009244:	8d 14 96             	lea    edx,[esi+edx*4]
c0009247:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000924b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924f:	e8 57 fd ff ff       	call   c0008fab <fp_to_double>
c0009254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009258:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000925c:	e8 40 fd ff ff       	call   c0008fa1 <fp_to_int>
c0009261:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009265:	83 c2 10             	add    edx,0x10
c0009268:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000926c:	d8 e1                	fsub   st,st(1)
c000926e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009272:	de c9                	fmulp  st(1),st
c0009274:	de c1                	faddp  st(1),st
c0009276:	d9 c0                	fld    st(0)
c0009278:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000927e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009282:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009286:	d9 c0                	fld    st(0)
c0009288:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000928e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009292:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009296:	d9 c0                	fld    st(0)
c0009298:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000929e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00092a2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00092a6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00092ac:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092b0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092b4:	de c1                	faddp  st(1),st
c00092b6:	79 8f                	jns    c0009247 <calc_output_quad+0x5d>
c00092b8:	89 d8                	mov    eax,ebx
c00092ba:	d9 ee                	fldz   
c00092bc:	29 c8                	sub    eax,ecx
c00092be:	d9 ee                	fldz   
c00092c0:	89 c1                	mov    ecx,eax
c00092c2:	d9 ee                	fldz   
c00092c4:	d9 ee                	fldz   
c00092c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092ca:	29 c8                	sub    eax,ecx
c00092cc:	99                   	cdq    
c00092cd:	f7 fb                	idiv   ebx
c00092cf:	89 da                	mov    edx,ebx
c00092d1:	0f af d0             	imul   edx,eax
c00092d4:	40                   	inc    eax
c00092d5:	01 d1                	add    ecx,edx
c00092d7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092dc:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092e0:	8d 14 86             	lea    edx,[esi+eax*4]
c00092e3:	eb 0a                	jmp    c00092ef <calc_output_quad+0x105>
c00092e5:	d9 cc                	fxch   st(4)
c00092e7:	d9 ca                	fxch   st(2)
c00092e9:	d9 c9                	fxch   st(1)
c00092eb:	d9 cb                	fxch   st(3)
c00092ed:	d9 c9                	fxch   st(1)
c00092ef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092f3:	d9 c9                	fxch   st(1)
c00092f5:	89 c8                	mov    eax,ecx
c00092f7:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092fb:	d9 c9                	fxch   st(1)
c00092fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009301:	d9 c9                	fxch   st(1)
c0009303:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009307:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000930b:	e8 9b fc ff ff       	call   c0008fab <fp_to_double>
c0009310:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009314:	89 c8                	mov    eax,ecx
c0009316:	e8 86 fc ff ff       	call   c0008fa1 <fp_to_int>
c000931b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000931f:	29 d9                	sub    ecx,ebx
c0009321:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009325:	83 ea 10             	sub    edx,0x10
c0009328:	d8 e1                	fsub   st,st(1)
c000932a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000932e:	de c9                	fmulp  st(1),st
c0009330:	de c1                	faddp  st(1),st
c0009332:	d9 c0                	fld    st(0)
c0009334:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000933a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000933e:	de c1                	faddp  st(1),st
c0009340:	d9 c1                	fld    st(1)
c0009342:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009348:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000934c:	de c1                	faddp  st(1),st
c000934e:	d9 c2                	fld    st(2)
c0009350:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009356:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000935a:	de c1                	faddp  st(1),st
c000935c:	d9 cb                	fxch   st(3)
c000935e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009364:	85 c9                	test   ecx,ecx
c0009366:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000936a:	de c1                	faddp  st(1),st
c000936c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009370:	0f 8f 6f ff ff ff    	jg     c00092e5 <calc_output_quad+0xfb>
c0009376:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000937a:	de c4                	faddp  st(4),st
c000937c:	d9 cb                	fxch   st(3)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 1f                	fstp   DWORD PTR [edi]
c0009383:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009387:	de c2                	faddp  st(2),st
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009391:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009395:	de c3                	faddp  st(3),st
c0009397:	d9 ca                	fxch   st(2)
c0009399:	dc 0c 24             	fmul   QWORD PTR [esp]
c000939c:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000939f:	de c1                	faddp  st(1),st
c00093a1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00093a4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00093a7:	83 c4 5c             	add    esp,0x5c
c00093aa:	5b                   	pop    ebx
c00093ab:	5e                   	pop    esi
c00093ac:	5f                   	pop    edi
c00093ad:	5d                   	pop    ebp
c00093ae:	c3                   	ret    

c00093af <calc_output_hex>:
c00093af:	55                   	push   ebp
c00093b0:	57                   	push   edi
c00093b1:	89 c7                	mov    edi,eax
c00093b3:	56                   	push   esi
c00093b4:	53                   	push   ebx
c00093b5:	89 d3                	mov    ebx,edx
c00093b7:	83 ec 7c             	sub    esp,0x7c
c00093ba:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093c1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093c7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093ce:	e8 ca fb ff ff       	call   c0008f9d <int_to_fp>
c00093d3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093d6:	d9 ee                	fldz   
c00093d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093dc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093e6:	99                   	cdq    
c00093e7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093eb:	f7 fb                	idiv   ebx
c00093ed:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093f1:	89 da                	mov    edx,ebx
c00093f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093f7:	0f af d0             	imul   edx,eax
c00093fa:	01 ca                	add    edx,ecx
c00093fc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009400:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009403:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009407:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000940a:	0f af c2             	imul   eax,edx
c000940d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009411:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009415:	29 c2                	sub    edx,eax
c0009417:	8d 14 97             	lea    edx,[edi+edx*4]
c000941a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000941e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009422:	e8 84 fb ff ff       	call   c0008fab <fp_to_double>
c0009427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000942b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000942f:	e8 6d fb ff ff       	call   c0008fa1 <fp_to_int>
c0009434:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009438:	83 c2 18             	add    edx,0x18
c000943b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000943f:	d8 e1                	fsub   st,st(1)
c0009441:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009445:	de c9                	fmulp  st(1),st
c0009447:	de c1                	faddp  st(1),st
c0009449:	d9 c0                	fld    st(0)
c000944b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009451:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009455:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009459:	d9 c0                	fld    st(0)
c000945b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009461:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009465:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009469:	d9 c0                	fld    st(0)
c000946b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009471:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009475:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009479:	d9 c0                	fld    st(0)
c000947b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009481:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	d9 c0                	fld    st(0)
c000948b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009491:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009495:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009499:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000949f:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00094a3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094a7:	de c1                	faddp  st(1),st
c00094a9:	0f 89 6b ff ff ff    	jns    c000941a <calc_output_hex+0x6b>
c00094af:	d9 ee                	fldz   
c00094b1:	d9 ee                	fldz   
c00094b3:	89 d8                	mov    eax,ebx
c00094b5:	29 c8                	sub    eax,ecx
c00094b7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094bb:	89 c1                	mov    ecx,eax
c00094bd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094c1:	29 c8                	sub    eax,ecx
c00094c3:	99                   	cdq    
c00094c4:	f7 fb                	idiv   ebx
c00094c6:	89 da                	mov    edx,ebx
c00094c8:	0f af d0             	imul   edx,eax
c00094cb:	40                   	inc    eax
c00094cc:	01 d1                	add    ecx,edx
c00094ce:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094d3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094d7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094db:	8d 14 87             	lea    edx,[edi+eax*4]
c00094de:	d9 ee                	fldz   
c00094e0:	d9 ee                	fldz   
c00094e2:	d9 ca                	fxch   st(2)
c00094e4:	eb 08                	jmp    c00094ee <calc_output_hex+0x13f>
c00094e6:	d9 cc                	fxch   st(4)
c00094e8:	d9 cb                	fxch   st(3)
c00094ea:	d9 ca                	fxch   st(2)
c00094ec:	d9 c9                	fxch   st(1)
c00094ee:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094f2:	89 c8                	mov    eax,ecx
c00094f4:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094f8:	d9 ca                	fxch   st(2)
c00094fa:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094fe:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009502:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009506:	e8 a0 fa ff ff       	call   c0008fab <fp_to_double>
c000950b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000950f:	89 c8                	mov    eax,ecx
c0009511:	e8 8b fa ff ff       	call   c0008fa1 <fp_to_int>
c0009516:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000951a:	29 d9                	sub    ecx,ebx
c000951c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009520:	83 ea 18             	sub    edx,0x18
c0009523:	d8 e1                	fsub   st,st(1)
c0009525:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009529:	de c9                	fmulp  st(1),st
c000952b:	de c1                	faddp  st(1),st
c000952d:	d9 c0                	fld    st(0)
c000952f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009535:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009539:	de c1                	faddp  st(1),st
c000953b:	d9 c1                	fld    st(1)
c000953d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009543:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009547:	de c1                	faddp  st(1),st
c0009549:	d9 c2                	fld    st(2)
c000954b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009551:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009555:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009559:	d9 c2                	fld    st(2)
c000955b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009561:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009565:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009569:	d9 c2                	fld    st(2)
c000956b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009571:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009575:	de c1                	faddp  st(1),st
c0009577:	d9 cb                	fxch   st(3)
c0009579:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000957f:	85 c9                	test   ecx,ecx
c0009581:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009585:	de c1                	faddp  st(1),st
c0009587:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000958b:	0f 8f 55 ff ff ff    	jg     c00094e6 <calc_output_hex+0x137>
c0009591:	d9 cb                	fxch   st(3)
c0009593:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009597:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959a:	d9 1e                	fstp   DWORD PTR [esi]
c000959c:	d9 c9                	fxch   st(1)
c000959e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00095a2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00095a8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00095ac:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095b6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ba:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095be:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095c4:	d9 ca                	fxch   st(2)
c00095c6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095ca:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095cd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095d0:	de c1                	faddp  st(1),st
c00095d2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095d5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095d8:	83 c4 7c             	add    esp,0x7c
c00095db:	5b                   	pop    ebx
c00095dc:	5e                   	pop    esi
c00095dd:	5f                   	pop    edi
c00095de:	5d                   	pop    ebp
c00095df:	c3                   	ret    

c00095e0 <sinc_reset>:
c00095e0:	56                   	push   esi
c00095e1:	53                   	push   ebx
c00095e2:	51                   	push   ecx
c00095e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095e7:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095ea:	85 db                	test   ebx,ebx
c00095ec:	74 51                	je     c000963f <sinc_reset+0x5f>
c00095ee:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095f5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095fc:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009603:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009609:	d9 ee                	fldz   
c000960b:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c000960e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009611:	52                   	push   edx
c0009612:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009615:	c1 e0 02             	shl    eax,0x2
c0009618:	50                   	push   eax
c0009619:	6a 00                	push   0x0
c000961b:	56                   	push   esi
c000961c:	e8 e7 6f ff ff       	call   c0000608 <memset>
c0009621:	83 c4 0c             	add    esp,0xc
c0009624:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009627:	c1 e0 02             	shl    eax,0x2
c000962a:	50                   	push   eax
c000962b:	68 aa 00 00 00       	push   0xaa
c0009630:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009633:	8d 04 86             	lea    eax,[esi+eax*4]
c0009636:	50                   	push   eax
c0009637:	e8 cc 6f ff ff       	call   c0000608 <memset>
c000963c:	83 c4 10             	add    esp,0x10
c000963f:	58                   	pop    eax
c0009640:	5b                   	pop    ebx
c0009641:	5e                   	pop    esi
c0009642:	c3                   	ret    

c0009643 <calc_output_multi>:
c0009643:	55                   	push   ebp
c0009644:	57                   	push   edi
c0009645:	8d 78 44             	lea    edi,[eax+0x44]
c0009648:	56                   	push   esi
c0009649:	89 c6                	mov    esi,eax
c000964b:	53                   	push   ebx
c000964c:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009652:	83 ec 4c             	sub    esp,0x4c
c0009655:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009659:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000965d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009661:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009665:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000966d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009670:	e8 28 f9 ff ff       	call   c0008f9d <int_to_fp>
c0009675:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009678:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000967c:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009680:	99                   	cdq    
c0009681:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009685:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009689:	0f af d0             	imul   edx,eax
c000968c:	0f af c3             	imul   eax,ebx
c000968f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009693:	29 c5                	sub    ebp,eax
c0009695:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009699:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000969d:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c00096a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096a8:	52                   	push   edx
c00096a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096ad:	6a 00                	push   0x0
c00096af:	57                   	push   edi
c00096b0:	e8 53 6f ff ff       	call   c0000608 <memset>
c00096b5:	83 c4 10             	add    esp,0x10
c00096b8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096bc:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c4:	e8 e2 f8 ff ff       	call   c0008fab <fp_to_double>
c00096c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096cd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096d1:	e8 cb f8 ff ff       	call   c0008fa1 <fp_to_int>
c00096d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096d9:	89 d9                	mov    ecx,ebx
c00096db:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096de:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096e2:	d8 e1                	fsub   st,st(1)
c00096e4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096e8:	de c9                	fmulp  st(1),st
c00096ea:	de c1                	faddp  st(1),st
c00096ec:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096f0:	89 c8                	mov    eax,ecx
c00096f2:	bd 08 00 00 00       	mov    ebp,0x8
c00096f7:	99                   	cdq    
c00096f8:	f7 fd                	idiv   ebp
c00096fa:	4a                   	dec    edx
c00096fb:	83 fa 06             	cmp    edx,0x6
c00096fe:	77 07                	ja     c0009707 <calc_output_multi+0xc4>
c0009700:	ff 24 95 80 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe80]
c0009707:	49                   	dec    ecx
c0009708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000970c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000970f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009716:	d9 c1                	fld    st(1)
c0009718:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000971c:	dc 00                	fadd   QWORD PTR [eax]
c000971e:	dd 18                	fstp   QWORD PTR [eax]
c0009720:	49                   	dec    ecx
c0009721:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009725:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009728:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000972f:	d9 c1                	fld    st(1)
c0009731:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009735:	dc 00                	fadd   QWORD PTR [eax]
c0009737:	dd 18                	fstp   QWORD PTR [eax]
c0009739:	49                   	dec    ecx
c000973a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000973e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009741:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009748:	d9 c1                	fld    st(1)
c000974a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000974e:	dc 00                	fadd   QWORD PTR [eax]
c0009750:	dd 18                	fstp   QWORD PTR [eax]
c0009752:	49                   	dec    ecx
c0009753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009757:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000975a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009761:	d9 c1                	fld    st(1)
c0009763:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009767:	dc 00                	fadd   QWORD PTR [eax]
c0009769:	dd 18                	fstp   QWORD PTR [eax]
c000976b:	49                   	dec    ecx
c000976c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009770:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009773:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000977a:	d9 c1                	fld    st(1)
c000977c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009780:	dc 00                	fadd   QWORD PTR [eax]
c0009782:	dd 18                	fstp   QWORD PTR [eax]
c0009784:	49                   	dec    ecx
c0009785:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009789:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000978c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009793:	d9 c1                	fld    st(1)
c0009795:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009799:	dc 00                	fadd   QWORD PTR [eax]
c000979b:	dd 18                	fstp   QWORD PTR [eax]
c000979d:	49                   	dec    ecx
c000979e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097a2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ac:	d9 c1                	fld    st(1)
c00097ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b2:	dc 00                	fadd   QWORD PTR [eax]
c00097b4:	dd 18                	fstp   QWORD PTR [eax]
c00097b6:	49                   	dec    ecx
c00097b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097bb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097be:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097c5:	d9 c1                	fld    st(1)
c00097c7:	85 c9                	test   ecx,ecx
c00097c9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097cd:	dc 00                	fadd   QWORD PTR [eax]
c00097cf:	dd 18                	fstp   QWORD PTR [eax]
c00097d1:	0f 8f 19 ff ff ff    	jg     c00096f0 <calc_output_multi+0xad>
c00097d7:	dd d9                	fstp   st(1)
c00097d9:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097e1:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097e5:	0f 89 d1 fe ff ff    	jns    c00096bc <calc_output_multi+0x79>
c00097eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097ef:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097f3:	89 d1                	mov    ecx,edx
c00097f5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097f9:	29 c8                	sub    eax,ecx
c00097fb:	99                   	cdq    
c00097fc:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009800:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009804:	0f af d0             	imul   edx,eax
c0009807:	40                   	inc    eax
c0009808:	01 d1                	add    ecx,edx
c000980a:	0f af c3             	imul   eax,ebx
c000980d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009811:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009818:	50                   	push   eax
c0009819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000981d:	6a 00                	push   0x0
c000981f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009823:	e8 e0 6d ff ff       	call   c0000608 <memset>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000982f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009837:	e8 6f f7 ff ff       	call   c0008fab <fp_to_double>
c000983c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009840:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009844:	e8 58 f7 ff ff       	call   c0008fa1 <fp_to_int>
c0009849:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000984c:	89 d9                	mov    ecx,ebx
c000984e:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009851:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009855:	d8 e1                	fsub   st,st(1)
c0009857:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000985b:	de c9                	fmulp  st(1),st
c000985d:	de c1                	faddp  st(1),st
c000985f:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009863:	89 c8                	mov    eax,ecx
c0009865:	bd 08 00 00 00       	mov    ebp,0x8
c000986a:	99                   	cdq    
c000986b:	f7 fd                	idiv   ebp
c000986d:	4a                   	dec    edx
c000986e:	83 fa 06             	cmp    edx,0x6
c0009871:	77 07                	ja     c000987a <calc_output_multi+0x237>
c0009873:	ff 24 95 9c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe64]
c000987a:	49                   	dec    ecx
c000987b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009883:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009886:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000988d:	d9 c1                	fld    st(1)
c000988f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009893:	dc 00                	fadd   QWORD PTR [eax]
c0009895:	dd 18                	fstp   QWORD PTR [eax]
c0009897:	49                   	dec    ecx
c0009898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000989c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098a0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098a3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098aa:	d9 c1                	fld    st(1)
c00098ac:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098b0:	dc 00                	fadd   QWORD PTR [eax]
c00098b2:	dd 18                	fstp   QWORD PTR [eax]
c00098b4:	49                   	dec    ecx
c00098b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098bd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c7:	d9 c1                	fld    st(1)
c00098c9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098cd:	dc 00                	fadd   QWORD PTR [eax]
c00098cf:	dd 18                	fstp   QWORD PTR [eax]
c00098d1:	49                   	dec    ecx
c00098d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098da:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098e4:	d9 c1                	fld    st(1)
c00098e6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098ea:	dc 00                	fadd   QWORD PTR [eax]
c00098ec:	dd 18                	fstp   QWORD PTR [eax]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098f7:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098fa:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009901:	d9 c1                	fld    st(1)
c0009903:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009910:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009914:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009917:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991e:	d9 c1                	fld    st(1)
c0009920:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009931:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009934:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000993b:	d9 c1                	fld    st(1)
c000993d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000994a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000994e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009951:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009958:	d9 c1                	fld    st(1)
c000995a:	85 c9                	test   ecx,ecx
c000995c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009960:	dc 00                	fadd   QWORD PTR [eax]
c0009962:	dd 18                	fstp   QWORD PTR [eax]
c0009964:	0f 8f f9 fe ff ff    	jg     c0009863 <calc_output_multi+0x220>
c000996a:	dd d9                	fstp   st(1)
c000996c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009970:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009974:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009978:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000997d:	0f 8f ac fe ff ff    	jg     c000982f <calc_output_multi+0x1ec>
c0009983:	b9 08 00 00 00       	mov    ecx,0x8
c0009988:	89 d8                	mov    eax,ebx
c000998a:	99                   	cdq    
c000998b:	f7 f9                	idiv   ecx
c000998d:	4a                   	dec    edx
c000998e:	83 fa 06             	cmp    edx,0x6
c0009991:	77 07                	ja     c000999a <calc_output_multi+0x357>
c0009993:	ff 24 95 b8 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe48]
c000999a:	4b                   	dec    ebx
c000999b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000999f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099a5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099a9:	d8 c9                	fmul   st,st(1)
c00099ab:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ae:	4b                   	dec    ebx
c00099af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099b3:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099b6:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099bd:	d8 c9                	fmul   st,st(1)
c00099bf:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c2:	4b                   	dec    ebx
c00099c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099c7:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099ca:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099cd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d1:	d8 c9                	fmul   st,st(1)
c00099d3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099d6:	4b                   	dec    ebx
c00099d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099db:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099de:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099e5:	d8 c9                	fmul   st,st(1)
c00099e7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ea:	4b                   	dec    ebx
c00099eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ef:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099f9:	d8 c9                	fmul   st,st(1)
c00099fb:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099fe:	4b                   	dec    ebx
c00099ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a03:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a06:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a09:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a0d:	d8 c9                	fmul   st,st(1)
c0009a0f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a12:	4b                   	dec    ebx
c0009a13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a17:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a1a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a1d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a21:	d8 c9                	fmul   st,st(1)
c0009a23:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a26:	4b                   	dec    ebx
c0009a27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a2b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2e:	85 db                	test   ebx,ebx
c0009a30:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a33:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a37:	d8 c9                	fmul   st,st(1)
c0009a39:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3c:	0f 8f 46 ff ff ff    	jg     c0009988 <calc_output_multi+0x345>
c0009a42:	dd d8                	fstp   st(0)
c0009a44:	83 c4 4c             	add    esp,0x4c
c0009a47:	5b                   	pop    ebx
c0009a48:	5e                   	pop    esi
c0009a49:	5f                   	pop    edi
c0009a4a:	5d                   	pop    ebp
c0009a4b:	c3                   	ret    

c0009a4c <double_to_fp>:
c0009a4c:	d9 05 0c 03 02 c0    	fld    DWORD PTR ds:0xc002030c
c0009a52:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a56:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a5a:	e9 81 4f 01 00       	jmp    c001e9e0 <lrint>

c0009a5f <fmod_one>:
c0009a5f:	83 ec 2c             	sub    esp,0x2c
c0009a62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a72:	83 ec 08             	sub    esp,0x8
c0009a75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7d:	e8 5e 4f 01 00       	call   c001e9e0 <lrint>
c0009a82:	83 c4 10             	add    esp,0x10
c0009a85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a89:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a8d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a91:	de e1                	fsubrp st(1),st
c0009a93:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a97:	d9 ee                	fldz   
c0009a99:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a9d:	df e0                	fnstsw ax
c0009a9f:	f6 c4 45             	test   ah,0x45
c0009aa2:	75 0a                	jne    c0009aae <fmod_one+0x4f>
c0009aa4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa8:	d9 e8                	fld1   
c0009aaa:	de c1                	faddp  st(1),st
c0009aac:	eb 04                	jmp    c0009ab2 <fmod_one+0x53>
c0009aae:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009ab2:	83 c4 2c             	add    esp,0x2c
c0009ab5:	c3                   	ret    

c0009ab6 <prepare_data>:
c0009ab6:	55                   	push   ebp
c0009ab7:	57                   	push   edi
c0009ab8:	56                   	push   esi
c0009ab9:	53                   	push   ebx
c0009aba:	83 ec 1c             	sub    esp,0x1c
c0009abd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ac1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ac5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009ac9:	0f 89 57 01 00 00    	jns    c0009c26 <prepare_data+0x170>
c0009acf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ad2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ad5:	85 d2                	test   edx,edx
c0009ad7:	75 0d                	jne    c0009ae6 <prepare_data+0x30>
c0009ad9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009adc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009adf:	29 d0                	sub    eax,edx
c0009ae1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ae4:	eb 44                	jmp    c0009b2a <prepare_data+0x74>
c0009ae6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ae9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009aec:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009aef:	39 c1                	cmp    ecx,eax
c0009af1:	7d 04                	jge    c0009af7 <prepare_data+0x41>
c0009af3:	29 d0                	sub    eax,edx
c0009af5:	eb 2d                	jmp    c0009b24 <prepare_data+0x6e>
c0009af7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009afd:	29 d7                	sub    edi,edx
c0009aff:	01 f7                	add    edi,esi
c0009b01:	51                   	push   ecx
c0009b02:	29 f2                	sub    edx,esi
c0009b04:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b0b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b0e:	51                   	push   ecx
c0009b0f:	52                   	push   edx
c0009b10:	50                   	push   eax
c0009b11:	e8 84 6a ff ff       	call   c000059a <memmove>
c0009b16:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b19:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b1c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b1f:	29 f0                	sub    eax,esi
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	29 f0                	sub    eax,esi
c0009b26:	79 02                	jns    c0009b2a <prepare_data+0x74>
c0009b28:	31 c0                	xor    eax,eax
c0009b2a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b2d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b30:	29 ef                	sub    edi,ebp
c0009b32:	39 c7                	cmp    edi,eax
c0009b34:	7e 02                	jle    c0009b38 <prepare_data+0x82>
c0009b36:	89 c7                	mov    edi,eax
c0009b38:	89 f8                	mov    eax,edi
c0009b3a:	99                   	cdq    
c0009b3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b3e:	b8 15 00 00 00       	mov    eax,0x15
c0009b43:	29 d7                	sub    edi,edx
c0009b45:	0f 88 dd 00 00 00    	js     c0009c28 <prepare_data+0x172>
c0009b4b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b4e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b51:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b54:	0f 8f ce 00 00 00    	jg     c0009c28 <prepare_data+0x172>
c0009b5a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b60:	50                   	push   eax
c0009b61:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b68:	50                   	push   eax
c0009b69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b6f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b72:	50                   	push   eax
c0009b73:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b7a:	50                   	push   eax
c0009b7b:	e8 52 6a ff ff       	call   c00005d2 <memcpy>
c0009b80:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b83:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b86:	01 fd                	add    ebp,edi
c0009b88:	01 f9                	add    ecx,edi
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b90:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b93:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b9a:	0f 85 86 00 00 00    	jne    c0009c26 <prepare_data+0x170>
c0009ba0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009ba3:	89 e8                	mov    eax,ebp
c0009ba5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009ba8:	29 c8                	sub    eax,ecx
c0009baa:	39 f8                	cmp    eax,edi
c0009bac:	7d 78                	jge    c0009c26 <prepare_data+0x170>
c0009bae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009bb2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009bb6:	74 6e                	je     c0009c26 <prepare_data+0x170>
c0009bb8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bbb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bbf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bc2:	29 ef                	sub    edi,ebp
c0009bc4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bc8:	7c 29                	jl     c0009bf3 <prepare_data+0x13d>
c0009bca:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bcd:	29 f1                	sub    ecx,esi
c0009bcf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bd6:	55                   	push   ebp
c0009bd7:	50                   	push   eax
c0009bd8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bdb:	50                   	push   eax
c0009bdc:	52                   	push   edx
c0009bdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009be1:	e8 b4 69 ff ff       	call   c000059a <memmove>
c0009be6:	83 c4 10             	add    esp,0x10
c0009be9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bec:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009bf6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bf9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bfc:	83 c6 05             	add    esi,0x5
c0009bff:	78 07                	js     c0009c08 <prepare_data+0x152>
c0009c01:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c04:	39 cf                	cmp    edi,ecx
c0009c06:	7e 04                	jle    c0009c0c <prepare_data+0x156>
c0009c08:	89 ce                	mov    esi,ecx
c0009c0a:	29 c6                	sub    esi,eax
c0009c0c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c0f:	51                   	push   ecx
c0009c10:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c17:	51                   	push   ecx
c0009c18:	6a 00                	push   0x0
c0009c1a:	50                   	push   eax
c0009c1b:	e8 e8 69 ff ff       	call   c0000608 <memset>
c0009c20:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	83 c4 1c             	add    esp,0x1c
c0009c2b:	5b                   	pop    ebx
c0009c2c:	5e                   	pop    esi
c0009c2d:	5f                   	pop    edi
c0009c2e:	5d                   	pop    ebp
c0009c2f:	c3                   	ret    

c0009c30 <sinc_multichan_vari_process>:
c0009c30:	55                   	push   ebp
c0009c31:	b8 05 00 00 00       	mov    eax,0x5
c0009c36:	57                   	push   edi
c0009c37:	56                   	push   esi
c0009c38:	53                   	push   ebx
c0009c39:	83 ec 3c             	sub    esp,0x3c
c0009c3c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c40:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c44:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c47:	85 db                	test   ebx,ebx
c0009c49:	0f 84 5d 02 00 00    	je     c0009eac <sinc_multichan_vari_process+0x27c>
c0009c4f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c55:	0f af d0             	imul   edx,eax
c0009c58:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c5b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c5f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c69:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c70:	dd 06                	fld    QWORD PTR [esi]
c0009c72:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c76:	55                   	push   ebp
c0009c77:	55                   	push   ebp
c0009c78:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c7b:	e8 d9 f2 ff ff       	call   c0008f59 <is_bad_src_ratio>
c0009c80:	89 c2                	mov    edx,eax
c0009c82:	58                   	pop    eax
c0009c83:	85 d2                	test   edx,edx
c0009c85:	59                   	pop    ecx
c0009c86:	b8 16 00 00 00       	mov    eax,0x16
c0009c8b:	0f 85 1b 02 00 00    	jne    c0009eac <sinc_multichan_vari_process+0x27c>
c0009c91:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c0009c97:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c9a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c9d:	dd 06                	fld    QWORD PTR [esi]
c0009c9f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ca2:	d8 d1                	fcom   st(1)
c0009ca4:	df e0                	fnstsw ax
c0009ca6:	9e                   	sahf   
c0009ca7:	76 0f                	jbe    c0009cb8 <sinc_multichan_vari_process+0x88>
c0009ca9:	dd d8                	fstp   st(0)
c0009cab:	d9 e8                	fld1   
c0009cad:	d8 d9                	fcomp  st(1)
c0009caf:	df e0                	fnstsw ax
c0009cb1:	9e                   	sahf   
c0009cb2:	77 0f                	ja     c0009cc3 <sinc_multichan_vari_process+0x93>
c0009cb4:	dd d8                	fstp   st(0)
c0009cb6:	eb 11                	jmp    c0009cc9 <sinc_multichan_vari_process+0x99>
c0009cb8:	dd d9                	fstp   st(1)
c0009cba:	d9 e8                	fld1   
c0009cbc:	d8 d9                	fcomp  st(1)
c0009cbe:	df e0                	fnstsw ax
c0009cc0:	9e                   	sahf   
c0009cc1:	76 04                	jbe    c0009cc7 <sinc_multichan_vari_process+0x97>
c0009cc3:	de f9                	fdivp  st(1),st
c0009cc5:	eb 02                	jmp    c0009cc9 <sinc_multichan_vari_process+0x99>
c0009cc7:	dd d8                	fstp   st(0)
c0009cc9:	83 ec 10             	sub    esp,0x10
c0009ccc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ccf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cd2:	e8 09 4d 01 00       	call   c001e9e0 <lrint>
c0009cd7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009cda:	40                   	inc    eax
c0009cdb:	dd 14 24             	fst    QWORD PTR [esp]
c0009cde:	0f af c5             	imul   eax,ebp
c0009ce1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ce5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ce9:	e8 71 fd ff ff       	call   c0009a5f <fmod_one>
c0009cee:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009cf1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009cf5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cf8:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d00:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d04:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d07:	e8 d4 4c 01 00       	call   c001e9e0 <lrint>
c0009d0c:	0f af e8             	imul   ebp,eax
c0009d0f:	d9 e8                	fld1   
c0009d11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d15:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d19:	01 e8                	add    eax,ebp
c0009d1b:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c0009d21:	99                   	cdq    
c0009d22:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d26:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d29:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d2c:	83 c4 10             	add    esp,0x10
c0009d2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d35:	7d 4b                	jge    c0009d82 <sinc_multichan_vari_process+0x152>
c0009d37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d3d:	01 c8                	add    eax,ecx
c0009d3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d42:	99                   	cdq    
c0009d43:	f7 f9                	idiv   ecx
c0009d45:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d49:	7d 09                	jge    c0009d54 <sinc_multichan_vari_process+0x124>
c0009d4b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d4e:	85 c0                	test   eax,eax
c0009d50:	79 57                	jns    c0009da9 <sinc_multichan_vari_process+0x179>
c0009d52:	eb 70                	jmp    c0009dc4 <sinc_multichan_vari_process+0x194>
c0009d54:	51                   	push   ecx
c0009d55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d59:	57                   	push   edi
c0009d5a:	53                   	push   ebx
c0009d5b:	e8 56 fd ff ff       	call   c0009ab6 <prepare_data>
c0009d60:	83 c4 10             	add    esp,0x10
c0009d63:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d66:	85 c0                	test   eax,eax
c0009d68:	0f 85 3e 01 00 00    	jne    c0009eac <sinc_multichan_vari_process+0x27c>
c0009d6e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d74:	01 c8                	add    eax,ecx
c0009d76:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d79:	99                   	cdq    
c0009d7a:	f7 f9                	idiv   ecx
c0009d7c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d80:	7c c9                	jl     c0009d4b <sinc_multichan_vari_process+0x11b>
c0009d82:	dd 04 24             	fld    QWORD PTR [esp]
c0009d85:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d88:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d8c:	dd 1e                	fstp   QWORD PTR [esi]
c0009d8e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d91:	99                   	cdq    
c0009d92:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d95:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d9b:	99                   	cdq    
c0009d9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d9f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009da2:	31 c0                	xor    eax,eax
c0009da4:	e9 03 01 00 00       	jmp    c0009eac <sinc_multichan_vari_process+0x27c>
c0009da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dad:	dd 04 24             	fld    QWORD PTR [esp]
c0009db0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009db3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009db7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dbb:	d9 c9                	fxch   st(1)
c0009dbd:	de d9                	fcompp 
c0009dbf:	df e0                	fnstsw ax
c0009dc1:	9e                   	sahf   
c0009dc2:	73 be                	jae    c0009d82 <sinc_multichan_vari_process+0x152>
c0009dc4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dc8:	7e 31                	jle    c0009dfb <sinc_multichan_vari_process+0x1cb>
c0009dca:	83 ec 10             	sub    esp,0x10
c0009dcd:	dd 06                	fld    QWORD PTR [esi]
c0009dcf:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dd5:	e8 e6 4b 01 00       	call   c001e9c0 <fabs>
c0009dda:	83 c4 10             	add    esp,0x10
c0009ddd:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c0009de3:	df e0                	fnstsw ax
c0009de5:	9e                   	sahf   
c0009de6:	76 13                	jbe    c0009dfb <sinc_multichan_vari_process+0x1cb>
c0009de8:	dd 06                	fld    QWORD PTR [esi]
c0009dea:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ded:	d8 e1                	fsub   st,st(1)
c0009def:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009df2:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009df5:	de c1                	faddp  st(1),st
c0009df7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dfb:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009dfe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e02:	d9 e8                	fld1   
c0009e04:	d8 d9                	fcomp  st(1)
c0009e06:	df e0                	fnstsw ax
c0009e08:	9e                   	sahf   
c0009e09:	77 04                	ja     c0009e0f <sinc_multichan_vari_process+0x1df>
c0009e0b:	dd d8                	fstp   st(0)
c0009e0d:	d9 e8                	fld1   
c0009e0f:	de c9                	fmulp  st(1),st
c0009e11:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e15:	50                   	push   eax
c0009e16:	50                   	push   eax
c0009e17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e1f:	e8 28 fc ff ff       	call   c0009a4c <double_to_fp>
c0009e24:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e28:	89 c5                	mov    ebp,eax
c0009e2a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e2e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e31:	e8 16 fc ff ff       	call   c0009a4c <double_to_fp>
c0009e36:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e39:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e3c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e3f:	89 c1                	mov    ecx,eax
c0009e41:	52                   	push   edx
c0009e42:	89 d8                	mov    eax,ebx
c0009e44:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e48:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e4b:	52                   	push   edx
c0009e4c:	52                   	push   edx
c0009e4d:	89 ea                	mov    edx,ebp
c0009e4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e55:	e8 e9 f7 ff ff       	call   c0009643 <calc_output_multi>
c0009e5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e5d:	d9 e8                	fld1   
c0009e5f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e62:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e66:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	dd 14 24             	fst    QWORD PTR [esp]
c0009e70:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e74:	e8 e6 fb ff ff       	call   c0009a5f <fmod_one>
c0009e79:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e7c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e80:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e83:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e8b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e92:	e8 49 4b 01 00       	call   c001e9e0 <lrint>
c0009e97:	0f af e8             	imul   ebp,eax
c0009e9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e9e:	01 e8                	add    eax,ebp
c0009ea0:	99                   	cdq    
c0009ea1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009ea4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009ea7:	e9 80 fe ff ff       	jmp    c0009d2c <sinc_multichan_vari_process+0xfc>
c0009eac:	83 c4 3c             	add    esp,0x3c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    

c0009eb4 <sinc_hex_vari_process>:
c0009eb4:	55                   	push   ebp
c0009eb5:	b8 05 00 00 00       	mov    eax,0x5
c0009eba:	57                   	push   edi
c0009ebb:	56                   	push   esi
c0009ebc:	53                   	push   ebx
c0009ebd:	83 ec 3c             	sub    esp,0x3c
c0009ec0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ec4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ec8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ecb:	85 db                	test   ebx,ebx
c0009ecd:	0f 84 58 02 00 00    	je     c000a12b <sinc_hex_vari_process+0x277>
c0009ed3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ed6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ed9:	0f af d0             	imul   edx,eax
c0009edc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009edf:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ee3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009eea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009eed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ef4:	dd 06                	fld    QWORD PTR [esi]
c0009ef6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009efa:	55                   	push   ebp
c0009efb:	55                   	push   ebp
c0009efc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eff:	e8 55 f0 ff ff       	call   c0008f59 <is_bad_src_ratio>
c0009f04:	89 c2                	mov    edx,eax
c0009f06:	58                   	pop    eax
c0009f07:	85 d2                	test   edx,edx
c0009f09:	59                   	pop    ecx
c0009f0a:	b8 16 00 00 00       	mov    eax,0x16
c0009f0f:	0f 85 16 02 00 00    	jne    c000a12b <sinc_hex_vari_process+0x277>
c0009f15:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c0009f1b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f1e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f21:	dd 06                	fld    QWORD PTR [esi]
c0009f23:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f26:	d8 d1                	fcom   st(1)
c0009f28:	df e0                	fnstsw ax
c0009f2a:	9e                   	sahf   
c0009f2b:	76 0f                	jbe    c0009f3c <sinc_hex_vari_process+0x88>
c0009f2d:	dd d8                	fstp   st(0)
c0009f2f:	d9 e8                	fld1   
c0009f31:	d8 d9                	fcomp  st(1)
c0009f33:	df e0                	fnstsw ax
c0009f35:	9e                   	sahf   
c0009f36:	77 0f                	ja     c0009f47 <sinc_hex_vari_process+0x93>
c0009f38:	dd d8                	fstp   st(0)
c0009f3a:	eb 11                	jmp    c0009f4d <sinc_hex_vari_process+0x99>
c0009f3c:	dd d9                	fstp   st(1)
c0009f3e:	d9 e8                	fld1   
c0009f40:	d8 d9                	fcomp  st(1)
c0009f42:	df e0                	fnstsw ax
c0009f44:	9e                   	sahf   
c0009f45:	76 04                	jbe    c0009f4b <sinc_hex_vari_process+0x97>
c0009f47:	de f9                	fdivp  st(1),st
c0009f49:	eb 02                	jmp    c0009f4d <sinc_hex_vari_process+0x99>
c0009f4b:	dd d8                	fstp   st(0)
c0009f4d:	83 ec 10             	sub    esp,0x10
c0009f50:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f53:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f56:	e8 85 4a 01 00       	call   c001e9e0 <lrint>
c0009f5b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f5e:	40                   	inc    eax
c0009f5f:	dd 14 24             	fst    QWORD PTR [esp]
c0009f62:	0f af c5             	imul   eax,ebp
c0009f65:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f6d:	e8 ed fa ff ff       	call   c0009a5f <fmod_one>
c0009f72:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f75:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f7c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f84:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 50 4a 01 00       	call   c001e9e0 <lrint>
c0009f90:	0f af e8             	imul   ebp,eax
c0009f93:	d9 e8                	fld1   
c0009f95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f99:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f9d:	01 e8                	add    eax,ebp
c0009f9f:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c0009fa5:	99                   	cdq    
c0009fa6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009faa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fb0:	83 c4 10             	add    esp,0x10
c0009fb3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fb6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fb9:	7d 4b                	jge    c000a006 <sinc_hex_vari_process+0x152>
c0009fbb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fbe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fc1:	01 c8                	add    eax,ecx
c0009fc3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fc6:	99                   	cdq    
c0009fc7:	f7 f9                	idiv   ecx
c0009fc9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fcd:	7d 09                	jge    c0009fd8 <sinc_hex_vari_process+0x124>
c0009fcf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fd2:	85 c0                	test   eax,eax
c0009fd4:	79 57                	jns    c000a02d <sinc_hex_vari_process+0x179>
c0009fd6:	eb 70                	jmp    c000a048 <sinc_hex_vari_process+0x194>
c0009fd8:	51                   	push   ecx
c0009fd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fdd:	57                   	push   edi
c0009fde:	53                   	push   ebx
c0009fdf:	e8 d2 fa ff ff       	call   c0009ab6 <prepare_data>
c0009fe4:	83 c4 10             	add    esp,0x10
c0009fe7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fea:	85 c0                	test   eax,eax
c0009fec:	0f 85 39 01 00 00    	jne    c000a12b <sinc_hex_vari_process+0x277>
c0009ff2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009ff5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009ff8:	01 c8                	add    eax,ecx
c0009ffa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ffd:	99                   	cdq    
c0009ffe:	f7 f9                	idiv   ecx
c000a000:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a004:	7c c9                	jl     c0009fcf <sinc_hex_vari_process+0x11b>
c000a006:	dd 04 24             	fld    QWORD PTR [esp]
c000a009:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a00c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a010:	dd 1e                	fstp   QWORD PTR [esi]
c000a012:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a015:	99                   	cdq    
c000a016:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a019:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a01c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a01f:	99                   	cdq    
c000a020:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a023:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a026:	31 c0                	xor    eax,eax
c000a028:	e9 fe 00 00 00       	jmp    c000a12b <sinc_hex_vari_process+0x277>
c000a02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a031:	dd 04 24             	fld    QWORD PTR [esp]
c000a034:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a037:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a03b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a03f:	d9 c9                	fxch   st(1)
c000a041:	de d9                	fcompp 
c000a043:	df e0                	fnstsw ax
c000a045:	9e                   	sahf   
c000a046:	73 be                	jae    c000a006 <sinc_hex_vari_process+0x152>
c000a048:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a04c:	7e 31                	jle    c000a07f <sinc_hex_vari_process+0x1cb>
c000a04e:	83 ec 10             	sub    esp,0x10
c000a051:	dd 06                	fld    QWORD PTR [esi]
c000a053:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a056:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a059:	e8 62 49 01 00       	call   c001e9c0 <fabs>
c000a05e:	83 c4 10             	add    esp,0x10
c000a061:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a067:	df e0                	fnstsw ax
c000a069:	9e                   	sahf   
c000a06a:	76 13                	jbe    c000a07f <sinc_hex_vari_process+0x1cb>
c000a06c:	dd 06                	fld    QWORD PTR [esi]
c000a06e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a071:	d8 e1                	fsub   st,st(1)
c000a073:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a076:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a079:	de c1                	faddp  st(1),st
c000a07b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a07f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a082:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a086:	d9 e8                	fld1   
c000a088:	d8 d9                	fcomp  st(1)
c000a08a:	df e0                	fnstsw ax
c000a08c:	9e                   	sahf   
c000a08d:	77 04                	ja     c000a093 <sinc_hex_vari_process+0x1df>
c000a08f:	dd d8                	fstp   st(0)
c000a091:	d9 e8                	fld1   
c000a093:	de c9                	fmulp  st(1),st
c000a095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a099:	50                   	push   eax
c000a09a:	50                   	push   eax
c000a09b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a09f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0a3:	e8 a4 f9 ff ff       	call   c0009a4c <double_to_fp>
c000a0a8:	89 c5                	mov    ebp,eax
c000a0aa:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0ae:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0b5:	e8 92 f9 ff ff       	call   c0009a4c <double_to_fp>
c000a0ba:	83 c4 0c             	add    esp,0xc
c000a0bd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0c0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0c3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0c6:	89 c1                	mov    ecx,eax
c000a0c8:	52                   	push   edx
c000a0c9:	89 d8                	mov    eax,ebx
c000a0cb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0cf:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0d2:	52                   	push   edx
c000a0d3:	52                   	push   edx
c000a0d4:	89 ea                	mov    edx,ebp
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 d1 f2 ff ff       	call   c00093af <calc_output_hex>
c000a0de:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0e2:	d9 e8                	fld1   
c000a0e4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0e8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a0ef:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0f3:	e8 67 f9 ff ff       	call   c0009a5f <fmod_one>
c000a0f8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0fb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0ff:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a102:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a10a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a10e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a111:	e8 ca 48 01 00       	call   c001e9e0 <lrint>
c000a116:	0f af e8             	imul   ebp,eax
c000a119:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a11d:	01 e8                	add    eax,ebp
c000a11f:	99                   	cdq    
c000a120:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a123:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a126:	e9 85 fe ff ff       	jmp    c0009fb0 <sinc_hex_vari_process+0xfc>
c000a12b:	83 c4 3c             	add    esp,0x3c
c000a12e:	5b                   	pop    ebx
c000a12f:	5e                   	pop    esi
c000a130:	5f                   	pop    edi
c000a131:	5d                   	pop    ebp
c000a132:	c3                   	ret    

c000a133 <sinc_quad_vari_process>:
c000a133:	55                   	push   ebp
c000a134:	b8 05 00 00 00       	mov    eax,0x5
c000a139:	57                   	push   edi
c000a13a:	56                   	push   esi
c000a13b:	53                   	push   ebx
c000a13c:	83 ec 3c             	sub    esp,0x3c
c000a13f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a143:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a147:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a14a:	85 db                	test   ebx,ebx
c000a14c:	0f 84 58 02 00 00    	je     c000a3aa <sinc_quad_vari_process+0x277>
c000a152:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a155:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a158:	0f af d0             	imul   edx,eax
c000a15b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a15e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a169:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a16c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a173:	dd 06                	fld    QWORD PTR [esi]
c000a175:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a179:	55                   	push   ebp
c000a17a:	55                   	push   ebp
c000a17b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a17e:	e8 d6 ed ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a183:	89 c2                	mov    edx,eax
c000a185:	58                   	pop    eax
c000a186:	85 d2                	test   edx,edx
c000a188:	59                   	pop    ecx
c000a189:	b8 16 00 00 00       	mov    eax,0x16
c000a18e:	0f 85 16 02 00 00    	jne    c000a3aa <sinc_quad_vari_process+0x277>
c000a194:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a19a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a19d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a1a0:	dd 06                	fld    QWORD PTR [esi]
c000a1a2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a1a5:	d8 d1                	fcom   st(1)
c000a1a7:	df e0                	fnstsw ax
c000a1a9:	9e                   	sahf   
c000a1aa:	76 0f                	jbe    c000a1bb <sinc_quad_vari_process+0x88>
c000a1ac:	dd d8                	fstp   st(0)
c000a1ae:	d9 e8                	fld1   
c000a1b0:	d8 d9                	fcomp  st(1)
c000a1b2:	df e0                	fnstsw ax
c000a1b4:	9e                   	sahf   
c000a1b5:	77 0f                	ja     c000a1c6 <sinc_quad_vari_process+0x93>
c000a1b7:	dd d8                	fstp   st(0)
c000a1b9:	eb 11                	jmp    c000a1cc <sinc_quad_vari_process+0x99>
c000a1bb:	dd d9                	fstp   st(1)
c000a1bd:	d9 e8                	fld1   
c000a1bf:	d8 d9                	fcomp  st(1)
c000a1c1:	df e0                	fnstsw ax
c000a1c3:	9e                   	sahf   
c000a1c4:	76 04                	jbe    c000a1ca <sinc_quad_vari_process+0x97>
c000a1c6:	de f9                	fdivp  st(1),st
c000a1c8:	eb 02                	jmp    c000a1cc <sinc_quad_vari_process+0x99>
c000a1ca:	dd d8                	fstp   st(0)
c000a1cc:	83 ec 10             	sub    esp,0x10
c000a1cf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1d5:	e8 06 48 01 00       	call   c001e9e0 <lrint>
c000a1da:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1dd:	40                   	inc    eax
c000a1de:	dd 14 24             	fst    QWORD PTR [esp]
c000a1e1:	0f af c5             	imul   eax,ebp
c000a1e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1ec:	e8 6e f8 ff ff       	call   c0009a5f <fmod_one>
c000a1f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1f4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1f8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1fb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a203:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a207:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20a:	e8 d1 47 01 00       	call   c001e9e0 <lrint>
c000a20f:	0f af e8             	imul   ebp,eax
c000a212:	d9 e8                	fld1   
c000a214:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a218:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a21c:	01 e8                	add    eax,ebp
c000a21e:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a224:	99                   	cdq    
c000a225:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a229:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a22c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a235:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a238:	7d 4b                	jge    c000a285 <sinc_quad_vari_process+0x152>
c000a23a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a23d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a240:	01 c8                	add    eax,ecx
c000a242:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a245:	99                   	cdq    
c000a246:	f7 f9                	idiv   ecx
c000a248:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a24c:	7d 09                	jge    c000a257 <sinc_quad_vari_process+0x124>
c000a24e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a251:	85 c0                	test   eax,eax
c000a253:	79 57                	jns    c000a2ac <sinc_quad_vari_process+0x179>
c000a255:	eb 70                	jmp    c000a2c7 <sinc_quad_vari_process+0x194>
c000a257:	51                   	push   ecx
c000a258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a25c:	57                   	push   edi
c000a25d:	53                   	push   ebx
c000a25e:	e8 53 f8 ff ff       	call   c0009ab6 <prepare_data>
c000a263:	83 c4 10             	add    esp,0x10
c000a266:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a269:	85 c0                	test   eax,eax
c000a26b:	0f 85 39 01 00 00    	jne    c000a3aa <sinc_quad_vari_process+0x277>
c000a271:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a274:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a277:	01 c8                	add    eax,ecx
c000a279:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a27c:	99                   	cdq    
c000a27d:	f7 f9                	idiv   ecx
c000a27f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a283:	7c c9                	jl     c000a24e <sinc_quad_vari_process+0x11b>
c000a285:	dd 04 24             	fld    QWORD PTR [esp]
c000a288:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a28b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a28f:	dd 1e                	fstp   QWORD PTR [esi]
c000a291:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a294:	99                   	cdq    
c000a295:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a298:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a29b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a29e:	99                   	cdq    
c000a29f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a2a2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	e9 fe 00 00 00       	jmp    c000a3aa <sinc_quad_vari_process+0x277>
c000a2ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2b0:	dd 04 24             	fld    QWORD PTR [esp]
c000a2b3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2b6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ba:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2be:	d9 c9                	fxch   st(1)
c000a2c0:	de d9                	fcompp 
c000a2c2:	df e0                	fnstsw ax
c000a2c4:	9e                   	sahf   
c000a2c5:	73 be                	jae    c000a285 <sinc_quad_vari_process+0x152>
c000a2c7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2cb:	7e 31                	jle    c000a2fe <sinc_quad_vari_process+0x1cb>
c000a2cd:	83 ec 10             	sub    esp,0x10
c000a2d0:	dd 06                	fld    QWORD PTR [esi]
c000a2d2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2d8:	e8 e3 46 01 00       	call   c001e9c0 <fabs>
c000a2dd:	83 c4 10             	add    esp,0x10
c000a2e0:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a2e6:	df e0                	fnstsw ax
c000a2e8:	9e                   	sahf   
c000a2e9:	76 13                	jbe    c000a2fe <sinc_quad_vari_process+0x1cb>
c000a2eb:	dd 06                	fld    QWORD PTR [esi]
c000a2ed:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2f0:	d8 e1                	fsub   st,st(1)
c000a2f2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2f5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2f8:	de c1                	faddp  st(1),st
c000a2fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2fe:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a301:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a305:	d9 e8                	fld1   
c000a307:	d8 d9                	fcomp  st(1)
c000a309:	df e0                	fnstsw ax
c000a30b:	9e                   	sahf   
c000a30c:	77 04                	ja     c000a312 <sinc_quad_vari_process+0x1df>
c000a30e:	dd d8                	fstp   st(0)
c000a310:	d9 e8                	fld1   
c000a312:	de c9                	fmulp  st(1),st
c000a314:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a318:	50                   	push   eax
c000a319:	50                   	push   eax
c000a31a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a31e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a322:	e8 25 f7 ff ff       	call   c0009a4c <double_to_fp>
c000a327:	89 c5                	mov    ebp,eax
c000a329:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a32d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a331:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a334:	e8 13 f7 ff ff       	call   c0009a4c <double_to_fp>
c000a339:	83 c4 0c             	add    esp,0xc
c000a33c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a33f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a342:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a345:	89 c1                	mov    ecx,eax
c000a347:	52                   	push   edx
c000a348:	89 d8                	mov    eax,ebx
c000a34a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a34e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a351:	52                   	push   edx
c000a352:	52                   	push   edx
c000a353:	89 ea                	mov    edx,ebp
c000a355:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a358:	e8 8d ee ff ff       	call   c00091ea <calc_output_quad>
c000a35d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a361:	d9 e8                	fld1   
c000a363:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a367:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a36b:	dd 14 24             	fst    QWORD PTR [esp]
c000a36e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a372:	e8 e8 f6 ff ff       	call   c0009a5f <fmod_one>
c000a377:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a37a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a37e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a381:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a389:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a38d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a390:	e8 4b 46 01 00       	call   c001e9e0 <lrint>
c000a395:	0f af e8             	imul   ebp,eax
c000a398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a39c:	01 e8                	add    eax,ebp
c000a39e:	99                   	cdq    
c000a39f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a3a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a3a5:	e9 85 fe ff ff       	jmp    c000a22f <sinc_quad_vari_process+0xfc>
c000a3aa:	83 c4 3c             	add    esp,0x3c
c000a3ad:	5b                   	pop    ebx
c000a3ae:	5e                   	pop    esi
c000a3af:	5f                   	pop    edi
c000a3b0:	5d                   	pop    ebp
c000a3b1:	c3                   	ret    

c000a3b2 <sinc_stereo_vari_process>:
c000a3b2:	55                   	push   ebp
c000a3b3:	b8 05 00 00 00       	mov    eax,0x5
c000a3b8:	57                   	push   edi
c000a3b9:	56                   	push   esi
c000a3ba:	53                   	push   ebx
c000a3bb:	83 ec 3c             	sub    esp,0x3c
c000a3be:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3c2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3c6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 84 58 02 00 00    	je     c000a629 <sinc_stereo_vari_process+0x277>
c000a3d1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3d7:	0f af d0             	imul   edx,eax
c000a3da:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3dd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3e1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3f2:	dd 06                	fld    QWORD PTR [esi]
c000a3f4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3f8:	55                   	push   ebp
c000a3f9:	55                   	push   ebp
c000a3fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3fd:	e8 57 eb ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a402:	89 c2                	mov    edx,eax
c000a404:	58                   	pop    eax
c000a405:	85 d2                	test   edx,edx
c000a407:	59                   	pop    ecx
c000a408:	b8 16 00 00 00       	mov    eax,0x16
c000a40d:	0f 85 16 02 00 00    	jne    c000a629 <sinc_stereo_vari_process+0x277>
c000a413:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a419:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a41c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a41f:	dd 06                	fld    QWORD PTR [esi]
c000a421:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a424:	d8 d1                	fcom   st(1)
c000a426:	df e0                	fnstsw ax
c000a428:	9e                   	sahf   
c000a429:	76 0f                	jbe    c000a43a <sinc_stereo_vari_process+0x88>
c000a42b:	dd d8                	fstp   st(0)
c000a42d:	d9 e8                	fld1   
c000a42f:	d8 d9                	fcomp  st(1)
c000a431:	df e0                	fnstsw ax
c000a433:	9e                   	sahf   
c000a434:	77 0f                	ja     c000a445 <sinc_stereo_vari_process+0x93>
c000a436:	dd d8                	fstp   st(0)
c000a438:	eb 11                	jmp    c000a44b <sinc_stereo_vari_process+0x99>
c000a43a:	dd d9                	fstp   st(1)
c000a43c:	d9 e8                	fld1   
c000a43e:	d8 d9                	fcomp  st(1)
c000a440:	df e0                	fnstsw ax
c000a442:	9e                   	sahf   
c000a443:	76 04                	jbe    c000a449 <sinc_stereo_vari_process+0x97>
c000a445:	de f9                	fdivp  st(1),st
c000a447:	eb 02                	jmp    c000a44b <sinc_stereo_vari_process+0x99>
c000a449:	dd d8                	fstp   st(0)
c000a44b:	83 ec 10             	sub    esp,0x10
c000a44e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a451:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a454:	e8 87 45 01 00       	call   c001e9e0 <lrint>
c000a459:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a45c:	40                   	inc    eax
c000a45d:	dd 14 24             	fst    QWORD PTR [esp]
c000a460:	0f af c5             	imul   eax,ebp
c000a463:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a467:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a46b:	e8 ef f5 ff ff       	call   c0009a5f <fmod_one>
c000a470:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a473:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a477:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a47a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a47e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a482:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a486:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a489:	e8 52 45 01 00       	call   c001e9e0 <lrint>
c000a48e:	0f af e8             	imul   ebp,eax
c000a491:	d9 e8                	fld1   
c000a493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a497:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a49b:	01 e8                	add    eax,ebp
c000a49d:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a4a3:	99                   	cdq    
c000a4a4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4a8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a4ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4ae:	83 c4 10             	add    esp,0x10
c000a4b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4b4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4b7:	7d 4b                	jge    c000a504 <sinc_stereo_vari_process+0x152>
c000a4b9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4bf:	01 c8                	add    eax,ecx
c000a4c1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4c4:	99                   	cdq    
c000a4c5:	f7 f9                	idiv   ecx
c000a4c7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4cb:	7d 09                	jge    c000a4d6 <sinc_stereo_vari_process+0x124>
c000a4cd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4d0:	85 c0                	test   eax,eax
c000a4d2:	79 57                	jns    c000a52b <sinc_stereo_vari_process+0x179>
c000a4d4:	eb 70                	jmp    c000a546 <sinc_stereo_vari_process+0x194>
c000a4d6:	51                   	push   ecx
c000a4d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4db:	57                   	push   edi
c000a4dc:	53                   	push   ebx
c000a4dd:	e8 d4 f5 ff ff       	call   c0009ab6 <prepare_data>
c000a4e2:	83 c4 10             	add    esp,0x10
c000a4e5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4e8:	85 c0                	test   eax,eax
c000a4ea:	0f 85 39 01 00 00    	jne    c000a629 <sinc_stereo_vari_process+0x277>
c000a4f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4f6:	01 c8                	add    eax,ecx
c000a4f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4fb:	99                   	cdq    
c000a4fc:	f7 f9                	idiv   ecx
c000a4fe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a502:	7c c9                	jl     c000a4cd <sinc_stereo_vari_process+0x11b>
c000a504:	dd 04 24             	fld    QWORD PTR [esp]
c000a507:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a50a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a50e:	dd 1e                	fstp   QWORD PTR [esi]
c000a510:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a513:	99                   	cdq    
c000a514:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a517:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a51a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a51d:	99                   	cdq    
c000a51e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a521:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a524:	31 c0                	xor    eax,eax
c000a526:	e9 fe 00 00 00       	jmp    c000a629 <sinc_stereo_vari_process+0x277>
c000a52b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a52f:	dd 04 24             	fld    QWORD PTR [esp]
c000a532:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a535:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a539:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a53d:	d9 c9                	fxch   st(1)
c000a53f:	de d9                	fcompp 
c000a541:	df e0                	fnstsw ax
c000a543:	9e                   	sahf   
c000a544:	73 be                	jae    c000a504 <sinc_stereo_vari_process+0x152>
c000a546:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a54a:	7e 31                	jle    c000a57d <sinc_stereo_vari_process+0x1cb>
c000a54c:	83 ec 10             	sub    esp,0x10
c000a54f:	dd 06                	fld    QWORD PTR [esi]
c000a551:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a554:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a557:	e8 64 44 01 00       	call   c001e9c0 <fabs>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a565:	df e0                	fnstsw ax
c000a567:	9e                   	sahf   
c000a568:	76 13                	jbe    c000a57d <sinc_stereo_vari_process+0x1cb>
c000a56a:	dd 06                	fld    QWORD PTR [esi]
c000a56c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a56f:	d8 e1                	fsub   st,st(1)
c000a571:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a574:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a577:	de c1                	faddp  st(1),st
c000a579:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a57d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a580:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a584:	d9 e8                	fld1   
c000a586:	d8 d9                	fcomp  st(1)
c000a588:	df e0                	fnstsw ax
c000a58a:	9e                   	sahf   
c000a58b:	77 04                	ja     c000a591 <sinc_stereo_vari_process+0x1df>
c000a58d:	dd d8                	fstp   st(0)
c000a58f:	d9 e8                	fld1   
c000a591:	de c9                	fmulp  st(1),st
c000a593:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a597:	50                   	push   eax
c000a598:	50                   	push   eax
c000a599:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a59d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a5a1:	e8 a6 f4 ff ff       	call   c0009a4c <double_to_fp>
c000a5a6:	89 c5                	mov    ebp,eax
c000a5a8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a5ac:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5b0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5b3:	e8 94 f4 ff ff       	call   c0009a4c <double_to_fp>
c000a5b8:	83 c4 0c             	add    esp,0xc
c000a5bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5be:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5c1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5c4:	89 c1                	mov    ecx,eax
c000a5c6:	52                   	push   edx
c000a5c7:	89 d8                	mov    eax,ebx
c000a5c9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5cd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5d0:	52                   	push   edx
c000a5d1:	52                   	push   edx
c000a5d2:	89 ea                	mov    edx,ebp
c000a5d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d7:	e8 ce ea ff ff       	call   c00090aa <calc_output_stereo>
c000a5dc:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5e0:	d9 e8                	fld1   
c000a5e2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5e6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5ea:	dd 14 24             	fst    QWORD PTR [esp]
c000a5ed:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5f1:	e8 69 f4 ff ff       	call   c0009a5f <fmod_one>
c000a5f6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5f9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5fd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a600:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a604:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a608:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a60c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a60f:	e8 cc 43 01 00       	call   c001e9e0 <lrint>
c000a614:	0f af e8             	imul   ebp,eax
c000a617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a61b:	01 e8                	add    eax,ebp
c000a61d:	99                   	cdq    
c000a61e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a621:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a624:	e9 85 fe ff ff       	jmp    c000a4ae <sinc_stereo_vari_process+0xfc>
c000a629:	83 c4 3c             	add    esp,0x3c
c000a62c:	5b                   	pop    ebx
c000a62d:	5e                   	pop    esi
c000a62e:	5f                   	pop    edi
c000a62f:	5d                   	pop    ebp
c000a630:	c3                   	ret    

c000a631 <sinc_mono_vari_process>:
c000a631:	55                   	push   ebp
c000a632:	b8 05 00 00 00       	mov    eax,0x5
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	53                   	push   ebx
c000a63a:	83 ec 3c             	sub    esp,0x3c
c000a63d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a641:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a645:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a648:	85 db                	test   ebx,ebx
c000a64a:	0f 84 57 02 00 00    	je     c000a8a7 <sinc_mono_vari_process+0x276>
c000a650:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a653:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a656:	0f af d0             	imul   edx,eax
c000a659:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a65c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a660:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a667:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a66a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a671:	dd 06                	fld    QWORD PTR [esi]
c000a673:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a677:	51                   	push   ecx
c000a678:	51                   	push   ecx
c000a679:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a67c:	e8 d8 e8 ff ff       	call   c0008f59 <is_bad_src_ratio>
c000a681:	5d                   	pop    ebp
c000a682:	89 c2                	mov    edx,eax
c000a684:	58                   	pop    eax
c000a685:	85 d2                	test   edx,edx
c000a687:	b8 16 00 00 00       	mov    eax,0x16
c000a68c:	0f 85 15 02 00 00    	jne    c000a8a7 <sinc_mono_vari_process+0x276>
c000a692:	d9 05 10 03 02 c0    	fld    DWORD PTR ds:0xc0020310
c000a698:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a69b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a69e:	dd 06                	fld    QWORD PTR [esi]
c000a6a0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a6a3:	d8 d1                	fcom   st(1)
c000a6a5:	df e0                	fnstsw ax
c000a6a7:	9e                   	sahf   
c000a6a8:	76 0f                	jbe    c000a6b9 <sinc_mono_vari_process+0x88>
c000a6aa:	dd d8                	fstp   st(0)
c000a6ac:	d9 e8                	fld1   
c000a6ae:	d8 d9                	fcomp  st(1)
c000a6b0:	df e0                	fnstsw ax
c000a6b2:	9e                   	sahf   
c000a6b3:	77 0f                	ja     c000a6c4 <sinc_mono_vari_process+0x93>
c000a6b5:	dd d8                	fstp   st(0)
c000a6b7:	eb 11                	jmp    c000a6ca <sinc_mono_vari_process+0x99>
c000a6b9:	dd d9                	fstp   st(1)
c000a6bb:	d9 e8                	fld1   
c000a6bd:	d8 d9                	fcomp  st(1)
c000a6bf:	df e0                	fnstsw ax
c000a6c1:	9e                   	sahf   
c000a6c2:	76 04                	jbe    c000a6c8 <sinc_mono_vari_process+0x97>
c000a6c4:	de f9                	fdivp  st(1),st
c000a6c6:	eb 02                	jmp    c000a6ca <sinc_mono_vari_process+0x99>
c000a6c8:	dd d8                	fstp   st(0)
c000a6ca:	83 ec 10             	sub    esp,0x10
c000a6cd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6d3:	e8 08 43 01 00       	call   c001e9e0 <lrint>
c000a6d8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6db:	40                   	inc    eax
c000a6dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a6df:	0f af e8             	imul   ebp,eax
c000a6e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6e6:	e8 74 f3 ff ff       	call   c0009a5f <fmod_one>
c000a6eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f6:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a701:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a705:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a708:	e8 d3 42 01 00       	call   c001e9e0 <lrint>
c000a70d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a712:	d9 e8                	fld1   
c000a714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a718:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a71c:	99                   	cdq    
c000a71d:	dc 05 78 01 02 c0    	fadd   QWORD PTR ds:0xc0020178
c000a723:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a726:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a72a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a733:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a736:	7d 44                	jge    c000a77c <sinc_mono_vari_process+0x14b>
c000a738:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a73b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a73e:	01 c8                	add    eax,ecx
c000a740:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a743:	99                   	cdq    
c000a744:	f7 f9                	idiv   ecx
c000a746:	39 d5                	cmp    ebp,edx
c000a748:	7d 09                	jge    c000a753 <sinc_mono_vari_process+0x122>
c000a74a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a74d:	85 c0                	test   eax,eax
c000a74f:	79 52                	jns    c000a7a3 <sinc_mono_vari_process+0x172>
c000a751:	eb 6b                	jmp    c000a7be <sinc_mono_vari_process+0x18d>
c000a753:	52                   	push   edx
c000a754:	55                   	push   ebp
c000a755:	57                   	push   edi
c000a756:	53                   	push   ebx
c000a757:	e8 5a f3 ff ff       	call   c0009ab6 <prepare_data>
c000a75c:	83 c4 10             	add    esp,0x10
c000a75f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a762:	85 c0                	test   eax,eax
c000a764:	0f 85 3d 01 00 00    	jne    c000a8a7 <sinc_mono_vari_process+0x276>
c000a76a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a76d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a770:	01 c8                	add    eax,ecx
c000a772:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a775:	99                   	cdq    
c000a776:	f7 f9                	idiv   ecx
c000a778:	39 d5                	cmp    ebp,edx
c000a77a:	7c ce                	jl     c000a74a <sinc_mono_vari_process+0x119>
c000a77c:	dd 04 24             	fld    QWORD PTR [esp]
c000a77f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a782:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a786:	dd 1e                	fstp   QWORD PTR [esi]
c000a788:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a78b:	99                   	cdq    
c000a78c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a792:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a795:	99                   	cdq    
c000a796:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a799:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a79c:	31 c0                	xor    eax,eax
c000a79e:	e9 04 01 00 00       	jmp    c000a8a7 <sinc_mono_vari_process+0x276>
c000a7a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a7aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7ad:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7b1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7b5:	d9 c9                	fxch   st(1)
c000a7b7:	de d9                	fcompp 
c000a7b9:	df e0                	fnstsw ax
c000a7bb:	9e                   	sahf   
c000a7bc:	77 be                	ja     c000a77c <sinc_mono_vari_process+0x14b>
c000a7be:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7c2:	7e 31                	jle    c000a7f5 <sinc_mono_vari_process+0x1c4>
c000a7c4:	83 ec 10             	sub    esp,0x10
c000a7c7:	dd 06                	fld    QWORD PTR [esi]
c000a7c9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7cf:	e8 ec 41 01 00       	call   c001e9c0 <fabs>
c000a7d4:	83 c4 10             	add    esp,0x10
c000a7d7:	dc 1d 00 03 02 c0    	fcomp  QWORD PTR ds:0xc0020300
c000a7dd:	df e0                	fnstsw ax
c000a7df:	9e                   	sahf   
c000a7e0:	76 13                	jbe    c000a7f5 <sinc_mono_vari_process+0x1c4>
c000a7e2:	dd 06                	fld    QWORD PTR [esi]
c000a7e4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7e7:	d8 e1                	fsub   st,st(1)
c000a7e9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7ec:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7ef:	de c1                	faddp  st(1),st
c000a7f1:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7f5:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7f8:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7fc:	d9 e8                	fld1   
c000a7fe:	d8 d9                	fcomp  st(1)
c000a800:	df e0                	fnstsw ax
c000a802:	9e                   	sahf   
c000a803:	77 04                	ja     c000a809 <sinc_mono_vari_process+0x1d8>
c000a805:	dd d8                	fstp   st(0)
c000a807:	d9 e8                	fld1   
c000a809:	de c9                	fmulp  st(1),st
c000a80b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a80f:	50                   	push   eax
c000a810:	50                   	push   eax
c000a811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a819:	e8 2e f2 ff ff       	call   c0009a4c <double_to_fp>
c000a81e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a822:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a826:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a82a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a82d:	e8 1a f2 ff ff       	call   c0009a4c <double_to_fp>
c000a832:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a836:	89 c1                	mov    ecx,eax
c000a838:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a83c:	89 d8                	mov    eax,ebx
c000a83e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a841:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a845:	e8 7b e7 ff ff       	call   c0008fc5 <calc_output_single>
c000a84a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a84d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a850:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a854:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a857:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a85a:	d9 e8                	fld1   
c000a85c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a860:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a864:	dd 14 24             	fst    QWORD PTR [esp]
c000a867:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a86b:	e8 ef f1 ff ff       	call   c0009a5f <fmod_one>
c000a870:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a873:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a877:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a87b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a87f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a882:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a886:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a88a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a88d:	e8 4e 41 01 00       	call   c001e9e0 <lrint>
c000a892:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a897:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a89b:	99                   	cdq    
c000a89c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a89f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a8a2:	e9 86 fe ff ff       	jmp    c000a72d <sinc_mono_vari_process+0xfc>
c000a8a7:	83 c4 3c             	add    esp,0x3c
c000a8aa:	5b                   	pop    ebx
c000a8ab:	5e                   	pop    esi
c000a8ac:	5f                   	pop    edi
c000a8ad:	5d                   	pop    ebp
c000a8ae:	c3                   	ret    

c000a8af <sinc_get_name>:
c000a8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b3:	31 c0                	xor    eax,eax
c000a8b5:	83 fa 02             	cmp    edx,0x2
c000a8b8:	77 07                	ja     c000a8c1 <sinc_get_name+0x12>
c000a8ba:	8b 04 95 e0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe20]
c000a8c1:	c3                   	ret    

c000a8c2 <sinc_get_description>:
c000a8c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8c6:	31 c0                	xor    eax,eax
c000a8c8:	83 fa 02             	cmp    edx,0x2
c000a8cb:	77 07                	ja     c000a8d4 <sinc_get_description+0x12>
c000a8cd:	8b 04 95 d4 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe2c]
c000a8d4:	c3                   	ret    

c000a8d5 <sinc_set_converter>:
c000a8d5:	53                   	push   ebx
c000a8d6:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8dc:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8e3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8e6:	85 c0                	test   eax,eax
c000a8e8:	74 13                	je     c000a8fd <sinc_set_converter+0x28>
c000a8ea:	83 ec 0c             	sub    esp,0xc
c000a8ed:	50                   	push   eax
c000a8ee:	e8 69 13 00 00       	call   c000bc5c <free>
c000a8f3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8fa:	83 c4 10             	add    esp,0x10
c000a8fd:	50                   	push   eax
c000a8fe:	68 44 08 00 00       	push   0x844
c000a903:	6a 00                	push   0x0
c000a905:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a909:	50                   	push   eax
c000a90a:	e8 f9 5c ff ff       	call   c0000608 <memset>
c000a90f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a912:	83 c4 10             	add    esp,0x10
c000a915:	b8 0b 00 00 00       	mov    eax,0xb
c000a91a:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a920:	7f 6e                	jg     c000a990 <sinc_set_converter+0xbb>
c000a922:	83 fa 01             	cmp    edx,0x1
c000a925:	75 10                	jne    c000a937 <sinc_set_converter+0x62>
c000a927:	c7 43 24 31 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a631
c000a92e:	c7 43 20 31 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a631
c000a935:	eb 4d                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a937:	83 fa 02             	cmp    edx,0x2
c000a93a:	75 10                	jne    c000a94c <sinc_set_converter+0x77>
c000a93c:	c7 43 24 b2 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3b2
c000a943:	c7 43 20 b2 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3b2
c000a94a:	eb 38                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a94c:	83 fa 04             	cmp    edx,0x4
c000a94f:	75 10                	jne    c000a961 <sinc_set_converter+0x8c>
c000a951:	c7 43 24 33 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a133
c000a958:	c7 43 20 33 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a133
c000a95f:	eb 23                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a961:	83 fa 06             	cmp    edx,0x6
c000a964:	75 10                	jne    c000a976 <sinc_set_converter+0xa1>
c000a966:	c7 43 24 b4 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009eb4
c000a96d:	c7 43 20 b4 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009eb4
c000a974:	eb 0e                	jmp    c000a984 <sinc_set_converter+0xaf>
c000a976:	c7 43 24 30 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c30
c000a97d:	c7 43 20 30 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c30
c000a984:	c7 43 28 e0 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095e0
c000a98b:	b8 0a 00 00 00       	mov    eax,0xa
c000a990:	81 c4 58 08 00 00    	add    esp,0x858
c000a996:	5b                   	pop    ebx
c000a997:	c3                   	ret    

c000a998 <is_bad_src_ratio>:
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a99f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9aa:	dd 04 24             	fld    QWORD PTR [esp]
c000a9ad:	dd 05 00 01 02 c0    	fld    QWORD PTR ds:0xc0020100
c000a9b3:	de d9                	fcompp 
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	f6 c4 45             	test   ah,0x45
c000a9ba:	74 10                	je     c000a9cc <is_bad_src_ratio+0x34>
c000a9bc:	dd 04 24             	fld    QWORD PTR [esp]
c000a9bf:	dc 1d 08 01 02 c0    	fcomp  QWORD PTR ds:0xc0020108
c000a9c5:	df e0                	fnstsw ax
c000a9c7:	f6 c4 45             	test   ah,0x45
c000a9ca:	75 07                	jne    c000a9d3 <is_bad_src_ratio+0x3b>
c000a9cc:	b8 01 00 00 00       	mov    eax,0x1
c000a9d1:	eb 05                	jmp    c000a9d8 <is_bad_src_ratio+0x40>
c000a9d3:	b8 00 00 00 00       	mov    eax,0x0
c000a9d8:	83 c4 0c             	add    esp,0xc
c000a9db:	c3                   	ret    

c000a9dc <fmod_one>:
c000a9dc:	83 ec 2c             	sub    esp,0x2c
c000a9df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9ef:	83 ec 08             	sub    esp,0x8
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	e8 e1 3f 01 00       	call   c001e9e0 <lrint>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa06:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa0e:	de e1                	fsubrp st(1),st
c000aa10:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa14:	d9 ee                	fldz   
c000aa16:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa1a:	df e0                	fnstsw ax
c000aa1c:	f6 c4 45             	test   ah,0x45
c000aa1f:	75 0a                	jne    c000aa2b <fmod_one+0x4f>
c000aa21:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa25:	d9 e8                	fld1   
c000aa27:	de c1                	faddp  st(1),st
c000aa29:	eb 04                	jmp    c000aa2f <fmod_one+0x53>
c000aa2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa2f:	83 c4 2c             	add    esp,0x2c
c000aa32:	c3                   	ret    

c000aa33 <zoh_vari_process>:
c000aa33:	55                   	push   ebp
c000aa34:	57                   	push   edi
c000aa35:	56                   	push   esi
c000aa36:	53                   	push   ebx
c000aa37:	83 ec 2c             	sub    esp,0x2c
c000aa3a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa3e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa4a:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa4e:	0f 8e 34 02 00 00    	jle    c000ac88 <zoh_vari_process+0x255>
c000aa54:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa57:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa5f:	85 db                	test   ebx,ebx
c000aa61:	0f 84 21 02 00 00    	je     c000ac88 <zoh_vari_process+0x255>
c000aa67:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa6a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa6e:	74 19                	je     c000aa89 <zoh_vari_process+0x56>
c000aa70:	31 d2                	xor    edx,edx
c000aa72:	39 c2                	cmp    edx,eax
c000aa74:	7d 0c                	jge    c000aa82 <zoh_vari_process+0x4f>
c000aa76:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa78:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa7b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa7f:	42                   	inc    edx
c000aa80:	eb f0                	jmp    c000aa72 <zoh_vari_process+0x3f>
c000aa82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa89:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa8c:	0f af d0             	imul   edx,eax
c000aa8f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa92:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa96:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aaa0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aaa7:	dd 07                	fld    QWORD PTR [edi]
c000aaa9:	dd 14 24             	fst    QWORD PTR [esp]
c000aaac:	50                   	push   eax
c000aaad:	50                   	push   eax
c000aaae:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aab1:	e8 e2 fe ff ff       	call   c000a998 <is_bad_src_ratio>
c000aab6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaba:	5a                   	pop    edx
c000aabb:	59                   	pop    ecx
c000aabc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aac1:	0f 85 b9 01 00 00    	jne    c000ac80 <zoh_vari_process+0x24d>
c000aac7:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aaca:	d9 e8                	fld1   
c000aacc:	d8 d1                	fcom   st(1)
c000aace:	df e0                	fnstsw ax
c000aad0:	9e                   	sahf   
c000aad1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aad5:	0f 86 85 00 00 00    	jbe    c000ab60 <zoh_vari_process+0x12d>
c000aadb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aade:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aae1:	7d 7d                	jge    c000ab60 <zoh_vari_process+0x12d>
c000aae3:	d9 c0                	fld    st(0)
c000aae5:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aae8:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aaeb:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aaee:	df e0                	fnstsw ax
c000aaf0:	9e                   	sahf   
c000aaf1:	73 6d                	jae    c000ab60 <zoh_vari_process+0x12d>
c000aaf3:	85 d2                	test   edx,edx
c000aaf5:	7e 38                	jle    c000ab2f <zoh_vari_process+0xfc>
c000aaf7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aafb:	83 ec 10             	sub    esp,0x10
c000aafe:	dd 07                	fld    QWORD PTR [edi]
c000ab00:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab03:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab06:	e8 b5 3e 01 00       	call   c001e9c0 <fabs>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000ab14:	df e0                	fnstsw ax
c000ab16:	9e                   	sahf   
c000ab17:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab1b:	76 12                	jbe    c000ab2f <zoh_vari_process+0xfc>
c000ab1d:	dd 07                	fld    QWORD PTR [edi]
c000ab1f:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab22:	d8 e1                	fsub   st,st(1)
c000ab24:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab27:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab2a:	de c1                	faddp  st(1),st
c000ab2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab2f:	31 c0                	xor    eax,eax
c000ab31:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab34:	7e 13                	jle    c000ab49 <zoh_vari_process+0x116>
c000ab36:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab3a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab3d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab40:	40                   	inc    eax
c000ab41:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab44:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab47:	eb e8                	jmp    c000ab31 <zoh_vari_process+0xfe>
c000ab49:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4d:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab50:	de c1                	faddp  st(1),st
c000ab52:	e9 73 ff ff ff       	jmp    c000aaca <zoh_vari_process+0x97>
c000ab57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab5b:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab5e:	de c1                	faddp  st(1),st
c000ab60:	83 ec 10             	sub    esp,0x10
c000ab63:	dd 14 24             	fst    QWORD PTR [esp]
c000ab66:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab6a:	e8 6d fe ff ff       	call   c000a9dc <fmod_one>
c000ab6f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab72:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab76:	d8 e1                	fsub   st,st(1)
c000ab78:	d9 c9                	fxch   st(1)
c000ab7a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab81:	e8 5a 3e 01 00       	call   c001e9e0 <lrint>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	0f af e8             	imul   ebp,eax
c000ab8c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab8f:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab92:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab96:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab99:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab9c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab9f:	0f 8d 82 00 00 00    	jge    c000ac27 <zoh_vari_process+0x1f4>
c000aba5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000aba9:	d9 c0                	fld    st(0)
c000abab:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000abae:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000abb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000abb6:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abba:	de d9                	fcompp 
c000abbc:	df e0                	fnstsw ax
c000abbe:	9e                   	sahf   
c000abbf:	72 66                	jb     c000ac27 <zoh_vari_process+0x1f4>
c000abc1:	85 d2                	test   edx,edx
c000abc3:	7e 38                	jle    c000abfd <zoh_vari_process+0x1ca>
c000abc5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abc9:	83 ec 10             	sub    esp,0x10
c000abcc:	dd 07                	fld    QWORD PTR [edi]
c000abce:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abd1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abd4:	e8 e7 3d 01 00       	call   c001e9c0 <fabs>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	dc 1d 78 01 02 c0    	fcomp  QWORD PTR ds:0xc0020178
c000abe2:	df e0                	fnstsw ax
c000abe4:	9e                   	sahf   
c000abe5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abe9:	76 12                	jbe    c000abfd <zoh_vari_process+0x1ca>
c000abeb:	dd 07                	fld    QWORD PTR [edi]
c000abed:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abf0:	d8 e1                	fsub   st,st(1)
c000abf2:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abf5:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abf8:	de c1                	faddp  st(1),st
c000abfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abfd:	31 d2                	xor    edx,edx
c000abff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac02:	39 d0                	cmp    eax,edx
c000ac04:	0f 8e 4d ff ff ff    	jle    c000ab57 <zoh_vari_process+0x124>
c000ac0a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac0d:	29 c1                	sub    ecx,eax
c000ac0f:	89 c8                	mov    eax,ecx
c000ac11:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac13:	01 d0                	add    eax,edx
c000ac15:	42                   	inc    edx
c000ac16:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac19:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac1c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac1f:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac22:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac25:	eb d8                	jmp    c000abff <zoh_vari_process+0x1cc>
c000ac27:	39 e9                	cmp    ecx,ebp
c000ac29:	7d 13                	jge    c000ac3e <zoh_vari_process+0x20b>
c000ac2b:	89 e8                	mov    eax,ebp
c000ac2d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac30:	29 c8                	sub    eax,ecx
c000ac32:	99                   	cdq    
c000ac33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3a:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac3e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac44:	85 c0                	test   eax,eax
c000ac46:	7f 1b                	jg     c000ac63 <zoh_vari_process+0x230>
c000ac48:	dd 04 24             	fld    QWORD PTR [esp]
c000ac4b:	dd 1f                	fstp   QWORD PTR [edi]
c000ac4d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac50:	99                   	cdq    
c000ac51:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac54:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac5a:	99                   	cdq    
c000ac5b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac5e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac61:	eb 25                	jmp    c000ac88 <zoh_vari_process+0x255>
c000ac63:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac66:	31 d2                	xor    edx,edx
c000ac68:	29 e8                	sub    eax,ebp
c000ac6a:	c1 e0 02             	shl    eax,0x2
c000ac6d:	39 d5                	cmp    ebp,edx
c000ac6f:	7e d7                	jle    c000ac48 <zoh_vari_process+0x215>
c000ac71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac73:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac76:	83 c0 04             	add    eax,0x4
c000ac79:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac7d:	42                   	inc    edx
c000ac7e:	eb ed                	jmp    c000ac6d <zoh_vari_process+0x23a>
c000ac80:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac8c:	83 c4 2c             	add    esp,0x2c
c000ac8f:	5b                   	pop    ebx
c000ac90:	5e                   	pop    esi
c000ac91:	5f                   	pop    edi
c000ac92:	5d                   	pop    ebp
c000ac93:	c3                   	ret    

c000ac94 <zoh_reset>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac9b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac9e:	85 c0                	test   eax,eax
c000aca0:	74 20                	je     c000acc2 <zoh_reset+0x2e>
c000aca2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000aca5:	83 c0 1c             	add    eax,0x1c
c000aca8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000acab:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000acb2:	c1 e2 02             	shl    edx,0x2
c000acb5:	51                   	push   ecx
c000acb6:	52                   	push   edx
c000acb7:	6a 00                	push   0x0
c000acb9:	50                   	push   eax
c000acba:	e8 49 59 ff ff       	call   c0000608 <memset>
c000acbf:	83 c4 10             	add    esp,0x10
c000acc2:	83 c4 0c             	add    esp,0xc
c000acc5:	c3                   	ret    

c000acc6 <zoh_get_name>:
c000acc6:	31 c0                	xor    eax,eax
c000acc8:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accd:	75 05                	jne    c000acd4 <zoh_get_name+0xe>
c000accf:	b8 14 03 02 c0       	mov    eax,0xc0020314
c000acd4:	c3                   	ret    

c000acd5 <zoh_get_description>:
c000acd5:	31 c0                	xor    eax,eax
c000acd7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acdc:	75 05                	jne    c000ace3 <zoh_get_description+0xe>
c000acde:	b8 25 03 02 c0       	mov    eax,0xc0020325
c000ace3:	c3                   	ret    

c000ace4 <zoh_set_converter>:
c000ace4:	53                   	push   ebx
c000ace5:	b8 0a 00 00 00       	mov    eax,0xa
c000acea:	83 ec 08             	sub    esp,0x8
c000aced:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acf1:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000acf6:	75 6e                	jne    c000ad66 <zoh_set_converter+0x82>
c000acf8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acfb:	85 c0                	test   eax,eax
c000acfd:	74 13                	je     c000ad12 <zoh_set_converter+0x2e>
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	50                   	push   eax
c000ad03:	e8 54 0f 00 00       	call   c000bc5c <free>
c000ad08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad0f:	83 c4 10             	add    esp,0x10
c000ad12:	50                   	push   eax
c000ad13:	50                   	push   eax
c000ad14:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad17:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad1e:	50                   	push   eax
c000ad1f:	6a 01                	push   0x1
c000ad21:	e8 56 0f 00 00       	call   c000bc7c <calloc>
c000ad26:	83 c4 10             	add    esp,0x10
c000ad29:	89 c2                	mov    edx,eax
c000ad2b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad2e:	85 d2                	test   edx,edx
c000ad30:	b8 01 00 00 00       	mov    eax,0x1
c000ad35:	74 2f                	je     c000ad66 <zoh_set_converter+0x82>
c000ad37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad3a:	83 ec 0c             	sub    esp,0xc
c000ad3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad40:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad46:	c7 43 24 33 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa33
c000ad4d:	c7 43 20 33 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa33
c000ad54:	c7 43 28 94 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac94
c000ad5b:	53                   	push   ebx
c000ad5c:	e8 33 ff ff ff       	call   c000ac94 <zoh_reset>
c000ad61:	83 c4 10             	add    esp,0x10
c000ad64:	31 c0                	xor    eax,eax
c000ad66:	83 c4 08             	add    esp,0x8
c000ad69:	5b                   	pop    ebx
c000ad6a:	c3                   	ret    
c000ad6b:	90                   	nop

c000ad6c <Computer::close(int, int, void*)>:
c000ad6c:	57                   	push   edi
c000ad6d:	56                   	push   esi
c000ad6e:	53                   	push   ebx
c000ad6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad7b:	83 ec 0c             	sub    esp,0xc
c000ad7e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad84:	e8 21 58 00 00       	call   c00105aa <Device::closeAll()>
c000ad89:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad94:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad98:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ada0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ada4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ada8:	5b                   	pop    ebx
c000ada9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000adac:	5e                   	pop    esi
c000adad:	5f                   	pop    edi
c000adae:	ff e0                	jmp    eax

c000adb0 <Computer::Computer()>:
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb7:	83 ec 08             	sub    esp,0x8
c000adba:	68 5c 03 02 c0       	push   0xc002035c
c000adbf:	50                   	push   eax
c000adc0:	e8 5f 58 00 00       	call   c0010624 <Device::Device(char const*)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	ba ec 03 02 c0       	mov    edx,0xc00203ec
c000adcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add1:	89 10                	mov    DWORD PTR [eax],edx
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000adef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adf9:	83 ca 04             	or     edx,0x4
c000adfc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae0c:	0f b6 d0             	movzx  edx,al
c000ae0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae13:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae24:	0f b6 d0             	movzx  edx,al
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae3a:	8d 50 01             	lea    edx,[eax+0x1]
c000ae3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae47:	0f b6 d0             	movzx  edx,al
c000ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae52:	83 e1 3f             	and    ecx,0x3f
c000ae55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae63:	0f b6 d0             	movzx  edx,al
c000ae66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae7b:	0f b6 d0             	movzx  edx,al
c000ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae82:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae91:	8d 50 01             	lea    edx,[eax+0x1]
c000ae94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae98:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae9e:	0f b6 d0             	movzx  edx,al
c000aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aea9:	83 e1 3f             	and    ecx,0x3f
c000aeac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeba:	0f b6 d0             	movzx  edx,al
c000aebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed2:	0f b6 d0             	movzx  edx,al
c000aed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee8:	8d 50 01             	lea    edx,[eax+0x1]
c000aeeb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aef5:	0f b6 d0             	movzx  edx,al
c000aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af00:	83 e1 3f             	and    ecx,0x3f
c000af03:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af07:	90                   	nop
c000af08:	83 c4 0c             	add    esp,0xc
c000af0b:	c3                   	ret    

c000af0c <Computer::setBootMessage(char const*)>:
c000af0c:	c3                   	ret    
c000af0d:	90                   	nop

c000af0e <Computer::start()>:
c000af0e:	56                   	push   esi
c000af0f:	53                   	push   ebx
c000af10:	50                   	push   eax
c000af11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af15:	e8 e0 cc 00 00       	call   c0017bfa <lockScheduler()>
c000af1a:	e8 0f d0 00 00       	call   c0017f2e <schedule()>
c000af1f:	e8 d8 cc 00 00       	call   c0017bfc <unlockScheduler()>
c000af24:	fb                   	sti    
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	68 3b 07 00 00       	push   0x73b
c000af2d:	e8 08 40 00 00       	call   c000ef3a <operator new(unsigned long)>
c000af32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af39:	89 c6                	mov    esi,eax
c000af3b:	ff 35 f4 4b 02 c0    	push   DWORD PTR ds:0xc0024bf4
c000af41:	68 65 03 02 c0       	push   0xc0020365
c000af46:	6a 01                	push   0x1
c000af48:	50                   	push   eax
c000af49:	e8 0c cb 00 00       	call   c0017a5a <Process::Process(bool, char const*, Process*, char**)>
c000af4e:	83 c4 20             	add    esp,0x20
c000af51:	68 ff 00 00 00       	push   0xff
c000af56:	6a 00                	push   0x0
c000af58:	68 d9 b5 00 c0       	push   0xc000b5d9
c000af5d:	56                   	push   esi
c000af5e:	e8 c1 cd 00 00       	call   c0017d24 <Process::createThread(void (*)(void*), void*, int)>
c000af63:	6a 7a                	push   0x7a
c000af65:	6a 00                	push   0x0
c000af67:	68 5d 87 01 c0       	push   0xc001875d
c000af6c:	ff 35 f4 4b 02 c0    	push   DWORD PTR ds:0xc0024bf4
c000af72:	e8 ad cd 00 00       	call   c0017d24 <Process::createThread(void (*)(void*), void*, int)>
c000af77:	83 c4 20             	add    esp,0x20
c000af7a:	a3 a8 4b 02 c0       	mov    ds:0xc0024ba8,eax
c000af7f:	c6 05 ad 37 02 c0 01 	mov    BYTE PTR ds:0xc00237ad,0x1
c000af86:	e8 f9 43 00 00       	call   c000f384 <initVFS()>
c000af8b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af91:	8b 10                	mov    edx,DWORD PTR [eax]
c000af93:	6a 00                	push   0x0
c000af95:	6a 00                	push   0x0
c000af97:	6a 00                	push   0x0
c000af99:	50                   	push   eax
c000af9a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af9d:	e8 46 b5 00 00       	call   c00164e8 <setupSystemCalls()>
c000afa2:	e8 db 4e 00 00       	call   c000fe82 <loadClockSettings()>
c000afa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000afaa:	e8 cf 55 00 00       	call   c001057e <Device::loadDriversForAll()>
c000afaf:	5a                   	pop    edx
c000afb0:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c000afb6:	59                   	pop    ecx
c000afb7:	6a 01                	push   0x1
c000afb9:	68 72 03 02 c0       	push   0xc0020372
c000afbe:	e8 da c6 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c000afc3:	5e                   	pop    esi
c000afc4:	5a                   	pop    edx
c000afc5:	53                   	push   ebx
c000afc6:	50                   	push   eax
c000afc7:	e8 24 c8 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c000afcc:	c7 04 24 5c 14 02 c0 	mov    DWORD PTR [esp],0xc002145c
c000afd3:	e8 51 40 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000afd8:	83 c4 10             	add    esp,0x10
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	6a 02                	push   0x2
c000afe0:	e8 14 d2 00 00       	call   c00181f9 <blockTask(TaskState)>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	eb f1                	jmp    c000afdb <Computer::start()+0xcd>

c000afea <firstTask()>:
c000afea:	83 ec 18             	sub    esp,0x18
c000afed:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c000aff3:	e8 16 ff ff ff       	call   c000af0e <Computer::start()>

c000aff8 <Computer::detectFeatures()>:
c000aff8:	55                   	push   ebp
c000aff9:	57                   	push   edi
c000affa:	56                   	push   esi
c000affb:	53                   	push   ebx
c000affc:	83 ec 1c             	sub    esp,0x1c
c000afff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b003:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b00d:	e8 ad 52 ff ff       	call   c00002bf <detectCPUID>
c000b012:	85 c0                	test   eax,eax
c000b014:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b01a:	0f 95 c2             	setne  dl
c000b01d:	83 e0 fd             	and    eax,0xfffffffd
c000b020:	d1 e2                	shl    edx,1
c000b022:	09 d0                	or     eax,edx
c000b024:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b02a:	a8 02                	test   al,0x2
c000b02c:	75 46                	jne    c000b074 <Computer::detectFeatures()+0x7c>
c000b02e:	f6 05 c1 37 02 c0 04 	test   BYTE PTR ds:0xc00237c1,0x4
c000b035:	74 07                	je     c000b03e <Computer::detectFeatures()+0x46>
c000b037:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b03e:	e8 23 34 01 00       	call   c001e466 <x87Detect>
c000b043:	83 e0 01             	and    eax,0x1
c000b046:	c1 e0 04             	shl    eax,0x4
c000b049:	88 c2                	mov    dl,al
c000b04b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b051:	83 e0 ef             	and    eax,0xffffffef
c000b054:	09 d0                	or     eax,edx
c000b056:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b05c:	a8 10                	test   al,0x10
c000b05e:	0f 85 10 01 00 00    	jne    c000b174 <Computer::detectFeatures()+0x17c>
c000b064:	84 c0                	test   al,al
c000b066:	0f 88 2b 01 00 00    	js     c000b197 <Computer::detectFeatures()+0x19f>
c000b06c:	83 c4 1c             	add    esp,0x1c
c000b06f:	5b                   	pop    ebx
c000b070:	5e                   	pop    esi
c000b071:	5f                   	pop    edi
c000b072:	5d                   	pop    ebp
c000b073:	c3                   	ret    
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	6a 20                	push   0x20
c000b079:	e8 83 8e 00 00       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c000b07e:	83 e0 01             	and    eax,0x1
c000b081:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b088:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b08e:	83 e0 f7             	and    eax,0xfffffff7
c000b091:	09 d0                	or     eax,edx
c000b093:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b099:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b0a0:	e8 5c 8e 00 00       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c000b0a5:	83 e0 01             	and    eax,0x1
c000b0a8:	88 c2                	mov    dl,al
c000b0aa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0b0:	83 e0 fe             	and    eax,0xfffffffe
c000b0b3:	09 d0                	or     eax,edx
c000b0b5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0bb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0c2:	e8 3a 8e 00 00       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c000b0c7:	c1 e0 07             	shl    eax,0x7
c000b0ca:	88 c2                	mov    dl,al
c000b0cc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0d2:	83 e0 7f             	and    eax,0x7f
c000b0d5:	09 d0                	or     eax,edx
c000b0d7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0dd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0e4:	e8 18 8e 00 00       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c000b0e9:	83 c4 10             	add    esp,0x10
c000b0ec:	83 e0 01             	and    eax,0x1
c000b0ef:	c1 e0 05             	shl    eax,0x5
c000b0f2:	88 c2                	mov    dl,al
c000b0f4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0fa:	83 e0 df             	and    eax,0xffffffdf
c000b0fd:	09 d0                	or     eax,edx
c000b0ff:	f7 05 c0 37 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00237c0,0x401
c000b109:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10f:	0f 84 a8 00 00 00    	je     c000b1bd <Computer::detectFeatures()+0x1c5>
c000b115:	83 ec 0c             	sub    esp,0xc
c000b118:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b11f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b123:	50                   	push   eax
c000b124:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b128:	55                   	push   ebp
c000b129:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b12d:	57                   	push   edi
c000b12e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b132:	56                   	push   esi
c000b133:	68 00 00 00 80       	push   0x80000000
c000b138:	e8 41 8d 00 00       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b13d:	83 c4 20             	add    esp,0x20
c000b140:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b147:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b14b:	0f 86 dd fe ff ff    	jbe    c000b02e <Computer::detectFeatures()+0x36>
c000b151:	83 ec 0c             	sub    esp,0xc
c000b154:	50                   	push   eax
c000b155:	55                   	push   ebp
c000b156:	57                   	push   edi
c000b157:	56                   	push   esi
c000b158:	68 01 00 00 80       	push   0x80000001
c000b15d:	e8 1c 8d 00 00       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b162:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b16c:	83 c4 20             	add    esp,0x20
c000b16f:	e9 ba fe ff ff       	jmp    c000b02e <Computer::detectFeatures()+0x36>
c000b174:	e8 a7 32 01 00       	call   c001e420 <sseDetect>
c000b179:	88 c2                	mov    dl,al
c000b17b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b181:	c1 e2 07             	shl    edx,0x7
c000b184:	83 e0 7f             	and    eax,0x7f
c000b187:	09 d0                	or     eax,edx
c000b189:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b18f:	84 c0                	test   al,al
c000b191:	0f 89 d5 fe ff ff    	jns    c000b06c <Computer::detectFeatures()+0x74>
c000b197:	e8 74 32 01 00       	call   c001e410 <avxDetect>
c000b19c:	83 e0 01             	and    eax,0x1
c000b19f:	c1 e0 05             	shl    eax,0x5
c000b1a2:	88 c2                	mov    dl,al
c000b1a4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1aa:	83 e0 df             	and    eax,0xffffffdf
c000b1ad:	09 d0                	or     eax,edx
c000b1af:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1b5:	83 c4 1c             	add    esp,0x1c
c000b1b8:	5b                   	pop    ebx
c000b1b9:	5e                   	pop    esi
c000b1ba:	5f                   	pop    edi
c000b1bb:	5d                   	pop    ebp
c000b1bc:	c3                   	ret    
c000b1bd:	83 ec 0c             	sub    esp,0xc
c000b1c0:	68 00 02 00 00       	push   0x200
c000b1c5:	e8 37 8d 00 00       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c000b1ca:	83 c4 10             	add    esp,0x10
c000b1cd:	e9 43 ff ff ff       	jmp    c000b115 <Computer::detectFeatures()+0x11d>

c000b1d2 <Computer::displayFeatures()>:
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <Computer::rdmsr(unsigned int)>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1e2:	74 0a                	je     c000b1ee <Computer::rdmsr(unsigned int)+0x1a>
c000b1e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1e8:	0f 32                	rdmsr  
c000b1ea:	83 c4 0c             	add    esp,0xc
c000b1ed:	c3                   	ret    
c000b1ee:	83 ec 0c             	sub    esp,0xc
c000b1f1:	68 8e 03 02 c0       	push   0xc002038e
c000b1f6:	e8 c3 9a 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	eb e4                	jmp    c000b1e4 <Computer::rdmsr(unsigned int)+0x10>

c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b200:	57                   	push   edi
c000b201:	56                   	push   esi
c000b202:	52                   	push   edx
c000b203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b207:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b20b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b20f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b216:	74 0e                	je     c000b226 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b218:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b21c:	89 f0                	mov    eax,esi
c000b21e:	89 fa                	mov    edx,edi
c000b220:	0f 30                	wrmsr  
c000b222:	58                   	pop    eax
c000b223:	5e                   	pop    esi
c000b224:	5f                   	pop    edi
c000b225:	c3                   	ret    
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	68 94 03 02 c0       	push   0xc0020394
c000b22e:	e8 8b 9a 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000b233:	83 c4 10             	add    esp,0x10
c000b236:	eb e0                	jmp    c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b238 <Computer::nmiEnabled()>:
c000b238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <Computer::readCMOS(unsigned char)>:
c000b244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b248:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b24f:	19 c0                	sbb    eax,eax
c000b251:	83 e0 80             	and    eax,0xffffff80
c000b254:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b258:	e6 70                	out    0x70,al
c000b25a:	e4 71                	in     al,0x71
c000b25c:	c3                   	ret    
c000b25d:	90                   	nop

c000b25e <Computer::enableNMI(bool)>:
c000b25e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b266:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b26c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b274:	eb ce                	jmp    c000b244 <Computer::readCMOS(unsigned char)>

c000b276 <Computer::open(int, int, void*)>:
c000b276:	56                   	push   esi
c000b277:	53                   	push   ebx
c000b278:	83 ec 10             	sub    esp,0x10
c000b27b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b27f:	f6 05 c0 37 02 c0 04 	test   BYTE PTR ds:0xc00237c0,0x4
c000b286:	68 68 22 00 00       	push   0x2268
c000b28b:	0f 94 05 e0 2b 02 c0 	sete   BYTE PTR ds:0xc0022be0
c000b292:	e8 a3 3c 00 00       	call   c000ef3a <operator new(unsigned long)>
c000b297:	89 04 24             	mov    DWORD PTR [esp],eax
c000b29a:	89 c6                	mov    esi,eax
c000b29c:	e8 7d 82 00 00       	call   c001351e <ACPI::ACPI()>
c000b2a1:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b2a7:	58                   	pop    eax
c000b2a8:	5a                   	pop    edx
c000b2a9:	56                   	push   esi
c000b2aa:	53                   	push   ebx
c000b2ab:	e8 84 51 00 00       	call   c0010434 <Device::addChild(Device*)>
c000b2b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b3:	e8 40 fd ff ff       	call   c000aff8 <Computer::detectFeatures()>
c000b2b8:	59                   	pop    ecx
c000b2b9:	5e                   	pop    esi
c000b2ba:	6a 01                	push   0x1
c000b2bc:	53                   	push   ebx
c000b2bd:	e8 9c ff ff ff       	call   c000b25e <Computer::enableNMI(bool)>
c000b2c2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2c9:	e8 6c 3c 00 00       	call   c000ef3a <operator new(unsigned long)>
c000b2ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2d1:	89 c6                	mov    esi,eax
c000b2d3:	e8 f4 8c 00 00       	call   c0013fcc <CPU::CPU()>
c000b2d8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2de:	58                   	pop    eax
c000b2df:	5a                   	pop    edx
c000b2e0:	56                   	push   esi
c000b2e1:	53                   	push   ebx
c000b2e2:	e8 4d 51 00 00       	call   c0010434 <Device::addChild(Device*)>
c000b2e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2f3:	6a 00                	push   0x0
c000b2f5:	6a 00                	push   0x0
c000b2f7:	50                   	push   eax
c000b2f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2fb:	83 c4 20             	add    esp,0x20
c000b2fe:	e8 99 56 00 00       	call   c001099c <setupFPU()>
c000b303:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b309:	85 c0                	test   eax,eax
c000b30b:	74 1f                	je     c000b32c <Computer::open(int, int, void*)+0xb6>
c000b30d:	83 ec 08             	sub    esp,0x8
c000b310:	50                   	push   eax
c000b311:	53                   	push   ebx
c000b312:	e8 1d 51 00 00       	call   c0010434 <Device::addChild(Device*)>
c000b317:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b31d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b31f:	6a 00                	push   0x0
c000b321:	6a 00                	push   0x0
c000b323:	6a 00                	push   0x0
c000b325:	50                   	push   eax
c000b326:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b329:	83 c4 20             	add    esp,0x20
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	68 ea af 00 c0       	push   0xc000afea
c000b334:	e8 eb ca 00 00       	call   c0017e24 <setupMultitasking(void (*)())>
c000b339:	83 c4 14             	add    esp,0x14
c000b33c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b341:	5b                   	pop    ebx
c000b342:	5e                   	pop    esi
c000b343:	c3                   	ret    

c000b344 <Computer::disableNMI()>:
c000b344:	6a 00                	push   0x0
c000b346:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b34a:	e8 0f ff ff ff       	call   c000b25e <Computer::enableNMI(bool)>
c000b34f:	58                   	pop    eax
c000b350:	5a                   	pop    edx
c000b351:	c3                   	ret    

c000b352 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b356:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b35d:	19 c0                	sbb    eax,eax
c000b35f:	83 e0 80             	and    eax,0xffffff80
c000b362:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b366:	e6 70                	out    0x70,al
c000b368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b36c:	e6 71                	out    0x71,al
c000b36e:	c3                   	ret    
c000b36f:	90                   	nop

c000b370 <Computer::handleNMI()>:
c000b370:	56                   	push   esi
c000b371:	53                   	push   ebx
c000b372:	83 ec 10             	sub    esp,0x10
c000b375:	e4 92                	in     al,0x92
c000b377:	89 c6                	mov    esi,eax
c000b379:	e4 61                	in     al,0x61
c000b37b:	68 9a 03 02 c0       	push   0xc002039a
c000b380:	88 c3                	mov    bl,al
c000b382:	e8 a2 3c 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	83 e6 10             	and    esi,0x10
c000b38d:	75 0d                	jne    c000b39c <Computer::handleNMI()+0x2c>
c000b38f:	f6 c3 40             	test   bl,0x40
c000b392:	75 1d                	jne    c000b3b1 <Computer::handleNMI()+0x41>
c000b394:	84 db                	test   bl,bl
c000b396:	78 2d                	js     c000b3c5 <Computer::handleNMI()+0x55>
c000b398:	58                   	pop    eax
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	68 ab 03 02 c0       	push   0xc00203ab
c000b3a4:	e8 15 99 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	f6 c3 40             	test   bl,0x40
c000b3af:	74 e3                	je     c000b394 <Computer::handleNMI()+0x24>
c000b3b1:	83 ec 0c             	sub    esp,0xc
c000b3b4:	68 b8 03 02 c0       	push   0xc00203b8
c000b3b9:	e8 00 99 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	84 db                	test   bl,bl
c000b3c3:	79 d3                	jns    c000b398 <Computer::handleNMI()+0x28>
c000b3c5:	c7 44 24 10 c2 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203c2
c000b3cd:	5a                   	pop    edx
c000b3ce:	5b                   	pop    ebx
c000b3cf:	5e                   	pop    esi
c000b3d0:	e9 e9 98 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c000b3d5:	90                   	nop

c000b3d6 <Computer::setDiskActivityLight(int, bool)>:
c000b3d6:	56                   	push   esi
c000b3d7:	53                   	push   ebx
c000b3d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3dc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3e1:	77 1b                	ja     c000b3fe <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3e3:	e4 92                	in     al,0x92
c000b3e5:	bb 40 00 00 00       	mov    ebx,0x40
c000b3ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3ee:	89 da                	mov    edx,ebx
c000b3f0:	d3 e2                	shl    edx,cl
c000b3f2:	89 f1                	mov    ecx,esi
c000b3f4:	f7 d2                	not    edx
c000b3f6:	d3 e3                	shl    ebx,cl
c000b3f8:	21 d0                	and    eax,edx
c000b3fa:	09 d8                	or     eax,ebx
c000b3fc:	e6 92                	out    0x92,al
c000b3fe:	5b                   	pop    ebx
c000b3ff:	5e                   	pop    esi
c000b400:	c3                   	ret    

c000b401 <debug_strcpy>:
c000b401:	55                   	push   ebp
c000b402:	89 e5                	mov    ebp,esp
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b40a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000b412:	50                   	push   eax
c000b413:	68 cf 03 02 c0       	push   0xc00203cf
c000b418:	e8 0c 3c 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000b41d:	83 c4 10             	add    esp,0x10
c000b420:	c9                   	leave  
c000b421:	c3                   	ret    

c000b422 <GDTEntry::setBase(unsigned int)>:
c000b422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b426:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b42a:	89 c1                	mov    ecx,eax
c000b42c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b430:	c1 e9 10             	shr    ecx,0x10
c000b433:	c1 e8 18             	shr    eax,0x18
c000b436:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b439:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b43c:	c3                   	ret    
c000b43d:	90                   	nop

c000b43e <GDTEntry::setLimit(unsigned int)>:
c000b43e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b446:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b449:	66 89 01             	mov    WORD PTR [ecx],ax
c000b44c:	83 e2 f0             	and    edx,0xfffffff0
c000b44f:	c1 e8 10             	shr    eax,0x10
c000b452:	83 e0 0f             	and    eax,0xf
c000b455:	09 d0                	or     eax,edx
c000b457:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b45a:	c3                   	ret    
c000b45b:	90                   	nop

c000b45c <GDT::GDT()>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b470:	90                   	nop
c000b471:	c3                   	ret    

c000b472 <GDT::addEntry(GDTEntry)>:
c000b472:	53                   	push   ebx
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b47a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b483:	52                   	push   edx
c000b484:	50                   	push   eax
c000b485:	68 10 04 02 c0       	push   0xc0020410
c000b48a:	e8 9a 3b 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000b48f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b491:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b495:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b499:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b49d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b4a1:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a4:	c1 e0 03             	shl    eax,0x3
c000b4a7:	89 13                	mov    DWORD PTR [ebx],edx
c000b4a9:	83 c4 18             	add    esp,0x18
c000b4ac:	5b                   	pop    ebx
c000b4ad:	c3                   	ret    

c000b4ae <GDT::getNumberOfEntries()>:
c000b4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4b4:	c3                   	ret    
c000b4b5:	90                   	nop

c000b4b6 <GDT::flush()>:
c000b4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4bc:	83 c0 04             	add    eax,0x4
c000b4bf:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b4c6:	a3 b2 37 02 c0       	mov    ds:0xc00237b2,eax
c000b4cb:	66 89 15 b0 37 02 c0 	mov    WORD PTR ds:0xc00237b0,dx
c000b4d2:	e9 5c 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4d7:	90                   	nop

c000b4d8 <GDT::setup()>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 3c             	sub    esp,0x3c
c000b4df:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4e3:	6a 00                	push   0x0
c000b4e5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4e9:	53                   	push   ebx
c000b4ea:	e8 33 ff ff ff       	call   c000b422 <GDTEntry::setBase(unsigned int)>
c000b4ef:	6a 00                	push   0x0
c000b4f1:	53                   	push   ebx
c000b4f2:	e8 47 ff ff ff       	call   c000b43e <GDTEntry::setLimit(unsigned int)>
c000b4f7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4ff:	6a 00                	push   0x0
c000b501:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b505:	53                   	push   ebx
c000b506:	e8 17 ff ff ff       	call   c000b422 <GDTEntry::setBase(unsigned int)>
c000b50b:	68 ff ff ff 00       	push   0xffffff
c000b510:	53                   	push   ebx
c000b511:	e8 28 ff ff ff       	call   c000b43e <GDTEntry::setLimit(unsigned int)>
c000b516:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b51a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b51f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b524:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b528:	83 c4 20             	add    esp,0x20
c000b52b:	6a 00                	push   0x0
c000b52d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b531:	53                   	push   ebx
c000b532:	e8 eb fe ff ff       	call   c000b422 <GDTEntry::setBase(unsigned int)>
c000b537:	68 ff ff ff 00       	push   0xffffff
c000b53c:	53                   	push   ebx
c000b53d:	e8 fc fe ff ff       	call   c000b43e <GDTEntry::setLimit(unsigned int)>
c000b542:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b546:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b54a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b54e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b552:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b556:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b55b:	0d 00 92 c0 00       	or     eax,0xc09200
c000b560:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b564:	89 d8                	mov    eax,ebx
c000b566:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b56a:	80 cc 60             	or     ah,0x60
c000b56d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b571:	83 c4 0c             	add    esp,0xc
c000b574:	89 f8                	mov    eax,edi
c000b576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b57a:	80 cc 60             	or     ah,0x60
c000b57d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b581:	89 c7                	mov    edi,eax
c000b583:	55                   	push   ebp
c000b584:	e8 e9 fe ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000b589:	83 c4 0c             	add    esp,0xc
c000b58c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b590:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b594:	55                   	push   ebp
c000b595:	e8 d8 fe ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000b59a:	83 c4 0c             	add    esp,0xc
c000b59d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5a5:	55                   	push   ebp
c000b5a6:	e8 c7 fe ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000b5ab:	83 c4 0c             	add    esp,0xc
c000b5ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b5b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5b6:	53                   	push   ebx
c000b5b7:	51                   	push   ecx
c000b5b8:	55                   	push   ebp
c000b5b9:	e8 b4 fe ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000b5be:	83 c4 0c             	add    esp,0xc
c000b5c1:	57                   	push   edi
c000b5c2:	56                   	push   esi
c000b5c3:	55                   	push   ebp
c000b5c4:	e8 a9 fe ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000b5c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b5cc:	e8 e5 fe ff ff       	call   c000b4b6 <GDT::flush()>
c000b5d1:	83 c4 4c             	add    esp,0x4c
c000b5d4:	5b                   	pop    ebx
c000b5d5:	5e                   	pop    esi
c000b5d6:	5f                   	pop    edi
c000b5d7:	5d                   	pop    ebp
c000b5d8:	c3                   	ret    

c000b5d9 <idleFunction(void*)>:
c000b5d9:	53                   	push   ebx
c000b5da:	83 ec 08             	sub    esp,0x8
c000b5dd:	e8 1a c6 00 00       	call   c0017bfc <unlockScheduler()>
c000b5e2:	e8 d1 89 00 00       	call   c0013fb8 <thisCPU()>
c000b5e7:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5ee:	74 41                	je     c000b631 <idleFunction(void*)+0x58>
c000b5f0:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000b5f5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5fc:	74 33                	je     c000b631 <idleFunction(void*)+0x58>
c000b5fe:	31 db                	xor    ebx,ebx
c000b600:	52                   	push   edx
c000b601:	52                   	push   edx
c000b602:	68 e1 00 00 00       	push   0xe1
c000b607:	50                   	push   eax
c000b608:	e8 c7 fb ff ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c000b60d:	53                   	push   ebx
c000b60e:	83 e0 02             	and    eax,0x2
c000b611:	50                   	push   eax
c000b612:	68 e1 00 00 00       	push   0xe1
c000b617:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c000b61d:	e8 de fb ff ff       	call   c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b622:	83 c4 20             	add    esp,0x20
c000b625:	e8 26 4b ff ff       	call   c0000150 <doTPAUSE>
c000b62a:	e8 31 34 01 00       	call   c001ea60 <idleCommon()>
c000b62f:	eb f4                	jmp    c000b625 <idleFunction(void*)+0x4c>
c000b631:	fb                   	sti    
c000b632:	f4                   	hlt    
c000b633:	e8 28 34 01 00       	call   c001ea60 <idleCommon()>
c000b638:	eb f7                	jmp    c000b631 <idleFunction(void*)+0x58>

c000b63a <IDTEntry::IDTEntry(bool)>:
c000b63a:	83 ec 04             	sub    esp,0x4
c000b63d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b641:	88 04 24             	mov    BYTE PTR [esp],al
c000b644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b648:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b64e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b652:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b656:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b65d:	83 e2 f0             	and    edx,0xfffffff0
c000b660:	83 ca 0e             	or     edx,0xe
c000b663:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66d:	83 e2 ef             	and    edx,0xffffffef
c000b670:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b673:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b677:	74 04                	je     c000b67d <IDTEntry::IDTEntry(bool)+0x43>
c000b679:	b2 03                	mov    dl,0x3
c000b67b:	eb 02                	jmp    c000b67f <IDTEntry::IDTEntry(bool)+0x45>
c000b67d:	b2 00                	mov    dl,0x0
c000b67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b683:	83 e2 03             	and    edx,0x3
c000b686:	88 d1                	mov    cl,dl
c000b688:	c1 e1 05             	shl    ecx,0x5
c000b68b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b68e:	83 e2 9f             	and    edx,0xffffff9f
c000b691:	09 ca                	or     edx,ecx
c000b693:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b696:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b69d:	83 ca 80             	or     edx,0xffffff80
c000b6a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b6a3:	90                   	nop
c000b6a4:	83 c4 04             	add    esp,0x4
c000b6a7:	c3                   	ret    

c000b6a8 <IDTEntry::setOffset(unsigned int)>:
c000b6a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b6ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6b0:	66 89 02             	mov    WORD PTR [edx],ax
c000b6b3:	c1 e8 10             	shr    eax,0x10
c000b6b6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b6ba:	c3                   	ret    
c000b6bb:	90                   	nop

c000b6bc <IDT::IDT()>:
c000b6bc:	90                   	nop
c000b6bd:	c3                   	ret    

c000b6be <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6c2:	83 c0 30             	add    eax,0x30
c000b6c5:	c3                   	ret    

c000b6c6 <IDT::addEntry(IDTEntry, int)>:
c000b6c6:	53                   	push   ebx
c000b6c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6d7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6da:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6de:	5b                   	pop    ebx
c000b6df:	c3                   	ret    

c000b6e0 <IDT::addEntry(int, void (*)(), bool)>:
c000b6e0:	53                   	push   ebx
c000b6e1:	83 ec 10             	sub    esp,0x10
c000b6e4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6e9:	50                   	push   eax
c000b6ea:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6ee:	53                   	push   ebx
c000b6ef:	e8 46 ff ff ff       	call   c000b63a <IDTEntry::IDTEntry(bool)>
c000b6f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6f8:	53                   	push   ebx
c000b6f9:	e8 aa ff ff ff       	call   c000b6a8 <IDTEntry::setOffset(unsigned int)>
c000b6fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b702:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b706:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b70a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b70e:	e8 b3 ff ff ff       	call   c000b6c6 <IDT::addEntry(IDTEntry, int)>
c000b713:	83 c4 30             	add    esp,0x30
c000b716:	5b                   	pop    ebx
c000b717:	c3                   	ret    

c000b718 <IDT::flush()>:
c000b718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b71c:	66 c7 05 b8 37 02 c0 ff 07 	mov    WORD PTR ds:0xc00237b8,0x7ff
c000b725:	a3 ba 37 02 c0       	mov    ds:0xc00237ba,eax
c000b72a:	0f 01 1d b8 37 02 c0 	lidtd  ds:0xc00237b8
c000b731:	c3                   	ret    

c000b732 <IDT::setup()>:
c000b732:	57                   	push   edi
c000b733:	56                   	push   esi
c000b734:	53                   	push   ebx
c000b735:	83 ec 10             	sub    esp,0x10
c000b738:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b73c:	6a 00                	push   0x0
c000b73e:	68 53 03 00 c0       	push   0xc0000353
c000b743:	6a 00                	push   0x0
c000b745:	53                   	push   ebx
c000b746:	e8 95 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b74b:	6a 00                	push   0x0
c000b74d:	68 63 03 00 c0       	push   0xc0000363
c000b752:	6a 01                	push   0x1
c000b754:	53                   	push   ebx
c000b755:	e8 86 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b75a:	83 c4 20             	add    esp,0x20
c000b75d:	6a 00                	push   0x0
c000b75f:	68 6d 03 00 c0       	push   0xc000036d
c000b764:	6a 02                	push   0x2
c000b766:	53                   	push   ebx
c000b767:	e8 74 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b76c:	6a 00                	push   0x0
c000b76e:	68 77 03 00 c0       	push   0xc0000377
c000b773:	6a 03                	push   0x3
c000b775:	53                   	push   ebx
c000b776:	e8 65 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b77b:	83 c4 20             	add    esp,0x20
c000b77e:	6a 00                	push   0x0
c000b780:	68 81 03 00 c0       	push   0xc0000381
c000b785:	6a 04                	push   0x4
c000b787:	53                   	push   ebx
c000b788:	e8 53 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b78d:	6a 00                	push   0x0
c000b78f:	68 8b 03 00 c0       	push   0xc000038b
c000b794:	6a 05                	push   0x5
c000b796:	53                   	push   ebx
c000b797:	e8 44 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b79c:	83 c4 20             	add    esp,0x20
c000b79f:	6a 00                	push   0x0
c000b7a1:	68 95 03 00 c0       	push   0xc0000395
c000b7a6:	6a 06                	push   0x6
c000b7a8:	53                   	push   ebx
c000b7a9:	e8 32 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7ae:	6a 00                	push   0x0
c000b7b0:	68 9f 03 00 c0       	push   0xc000039f
c000b7b5:	6a 07                	push   0x7
c000b7b7:	53                   	push   ebx
c000b7b8:	e8 23 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7bd:	83 c4 20             	add    esp,0x20
c000b7c0:	6a 00                	push   0x0
c000b7c2:	68 a9 03 00 c0       	push   0xc00003a9
c000b7c7:	6a 08                	push   0x8
c000b7c9:	53                   	push   ebx
c000b7ca:	e8 11 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7cf:	6a 00                	push   0x0
c000b7d1:	68 b1 03 00 c0       	push   0xc00003b1
c000b7d6:	6a 09                	push   0x9
c000b7d8:	53                   	push   ebx
c000b7d9:	e8 02 ff ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7de:	83 c4 20             	add    esp,0x20
c000b7e1:	6a 00                	push   0x0
c000b7e3:	68 bb 03 00 c0       	push   0xc00003bb
c000b7e8:	6a 0a                	push   0xa
c000b7ea:	53                   	push   ebx
c000b7eb:	e8 f0 fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7f0:	6a 00                	push   0x0
c000b7f2:	68 c3 03 00 c0       	push   0xc00003c3
c000b7f7:	6a 0b                	push   0xb
c000b7f9:	53                   	push   ebx
c000b7fa:	e8 e1 fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b7ff:	83 c4 20             	add    esp,0x20
c000b802:	6a 00                	push   0x0
c000b804:	68 cb 03 00 c0       	push   0xc00003cb
c000b809:	6a 0c                	push   0xc
c000b80b:	53                   	push   ebx
c000b80c:	e8 cf fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b811:	6a 00                	push   0x0
c000b813:	68 d3 03 00 c0       	push   0xc00003d3
c000b818:	6a 0d                	push   0xd
c000b81a:	53                   	push   ebx
c000b81b:	e8 c0 fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b820:	83 c4 20             	add    esp,0x20
c000b823:	6a 00                	push   0x0
c000b825:	68 db 03 00 c0       	push   0xc00003db
c000b82a:	6a 0e                	push   0xe
c000b82c:	53                   	push   ebx
c000b82d:	e8 ae fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b832:	6a 00                	push   0x0
c000b834:	68 e3 03 00 c0       	push   0xc00003e3
c000b839:	6a 0f                	push   0xf
c000b83b:	53                   	push   ebx
c000b83c:	e8 9f fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b841:	83 c4 20             	add    esp,0x20
c000b844:	6a 00                	push   0x0
c000b846:	68 ed 03 00 c0       	push   0xc00003ed
c000b84b:	6a 10                	push   0x10
c000b84d:	53                   	push   ebx
c000b84e:	e8 8d fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b853:	6a 00                	push   0x0
c000b855:	68 f7 03 00 c0       	push   0xc00003f7
c000b85a:	6a 11                	push   0x11
c000b85c:	53                   	push   ebx
c000b85d:	e8 7e fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b862:	83 c4 20             	add    esp,0x20
c000b865:	6a 00                	push   0x0
c000b867:	68 01 04 00 c0       	push   0xc0000401
c000b86c:	6a 12                	push   0x12
c000b86e:	53                   	push   ebx
c000b86f:	e8 6c fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b874:	6a 01                	push   0x1
c000b876:	68 0b 04 00 c0       	push   0xc000040b
c000b87b:	6a 60                	push   0x60
c000b87d:	53                   	push   ebx
c000b87e:	e8 5d fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b883:	83 c4 20             	add    esp,0x20
c000b886:	6a 00                	push   0x0
c000b888:	68 15 04 00 c0       	push   0xc0000415
c000b88d:	6a 20                	push   0x20
c000b88f:	53                   	push   ebx
c000b890:	e8 4b fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b895:	6a 00                	push   0x0
c000b897:	68 1f 04 00 c0       	push   0xc000041f
c000b89c:	6a 21                	push   0x21
c000b89e:	53                   	push   ebx
c000b89f:	e8 3c fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8a4:	83 c4 20             	add    esp,0x20
c000b8a7:	6a 00                	push   0x0
c000b8a9:	68 29 04 00 c0       	push   0xc0000429
c000b8ae:	6a 22                	push   0x22
c000b8b0:	53                   	push   ebx
c000b8b1:	e8 2a fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8b6:	6a 00                	push   0x0
c000b8b8:	68 33 04 00 c0       	push   0xc0000433
c000b8bd:	6a 23                	push   0x23
c000b8bf:	53                   	push   ebx
c000b8c0:	e8 1b fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8c5:	83 c4 20             	add    esp,0x20
c000b8c8:	6a 00                	push   0x0
c000b8ca:	68 3d 04 00 c0       	push   0xc000043d
c000b8cf:	6a 24                	push   0x24
c000b8d1:	53                   	push   ebx
c000b8d2:	e8 09 fe ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8d7:	6a 00                	push   0x0
c000b8d9:	68 47 04 00 c0       	push   0xc0000447
c000b8de:	6a 25                	push   0x25
c000b8e0:	53                   	push   ebx
c000b8e1:	e8 fa fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8e6:	83 c4 20             	add    esp,0x20
c000b8e9:	6a 00                	push   0x0
c000b8eb:	68 51 04 00 c0       	push   0xc0000451
c000b8f0:	6a 26                	push   0x26
c000b8f2:	53                   	push   ebx
c000b8f3:	e8 e8 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b8f8:	6a 00                	push   0x0
c000b8fa:	68 5b 04 00 c0       	push   0xc000045b
c000b8ff:	6a 27                	push   0x27
c000b901:	53                   	push   ebx
c000b902:	e8 d9 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b907:	83 c4 20             	add    esp,0x20
c000b90a:	6a 00                	push   0x0
c000b90c:	68 65 04 00 c0       	push   0xc0000465
c000b911:	6a 28                	push   0x28
c000b913:	53                   	push   ebx
c000b914:	e8 c7 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b919:	6a 00                	push   0x0
c000b91b:	68 6f 04 00 c0       	push   0xc000046f
c000b920:	6a 29                	push   0x29
c000b922:	53                   	push   ebx
c000b923:	e8 b8 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b928:	83 c4 20             	add    esp,0x20
c000b92b:	6a 00                	push   0x0
c000b92d:	68 79 04 00 c0       	push   0xc0000479
c000b932:	6a 2a                	push   0x2a
c000b934:	53                   	push   ebx
c000b935:	e8 a6 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b93a:	6a 00                	push   0x0
c000b93c:	68 83 04 00 c0       	push   0xc0000483
c000b941:	6a 2b                	push   0x2b
c000b943:	53                   	push   ebx
c000b944:	e8 97 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b949:	83 c4 20             	add    esp,0x20
c000b94c:	6a 00                	push   0x0
c000b94e:	68 8d 04 00 c0       	push   0xc000048d
c000b953:	6a 2c                	push   0x2c
c000b955:	53                   	push   ebx
c000b956:	e8 85 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b95b:	6a 00                	push   0x0
c000b95d:	68 97 04 00 c0       	push   0xc0000497
c000b962:	6a 2d                	push   0x2d
c000b964:	53                   	push   ebx
c000b965:	e8 76 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b96a:	83 c4 20             	add    esp,0x20
c000b96d:	6a 00                	push   0x0
c000b96f:	68 a1 04 00 c0       	push   0xc00004a1
c000b974:	6a 2e                	push   0x2e
c000b976:	53                   	push   ebx
c000b977:	e8 64 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b97c:	6a 00                	push   0x0
c000b97e:	68 ab 04 00 c0       	push   0xc00004ab
c000b983:	6a 2f                	push   0x2f
c000b985:	53                   	push   ebx
c000b986:	e8 55 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b98b:	83 c4 20             	add    esp,0x20
c000b98e:	6a 00                	push   0x0
c000b990:	68 b5 04 00 c0       	push   0xc00004b5
c000b995:	6a 30                	push   0x30
c000b997:	53                   	push   ebx
c000b998:	e8 43 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b99d:	6a 00                	push   0x0
c000b99f:	68 bf 04 00 c0       	push   0xc00004bf
c000b9a4:	6a 31                	push   0x31
c000b9a6:	53                   	push   ebx
c000b9a7:	e8 34 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b9ac:	83 c4 20             	add    esp,0x20
c000b9af:	6a 00                	push   0x0
c000b9b1:	68 c9 04 00 c0       	push   0xc00004c9
c000b9b6:	6a 32                	push   0x32
c000b9b8:	53                   	push   ebx
c000b9b9:	e8 22 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b9be:	6a 00                	push   0x0
c000b9c0:	68 d3 04 00 c0       	push   0xc00004d3
c000b9c5:	6a 33                	push   0x33
c000b9c7:	53                   	push   ebx
c000b9c8:	e8 13 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b9cd:	83 c4 20             	add    esp,0x20
c000b9d0:	6a 00                	push   0x0
c000b9d2:	68 dd 04 00 c0       	push   0xc00004dd
c000b9d7:	6a 34                	push   0x34
c000b9d9:	53                   	push   ebx
c000b9da:	e8 01 fd ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b9df:	6a 00                	push   0x0
c000b9e1:	68 e7 04 00 c0       	push   0xc00004e7
c000b9e6:	6a 35                	push   0x35
c000b9e8:	53                   	push   ebx
c000b9e9:	e8 f2 fc ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000b9ee:	83 c4 20             	add    esp,0x20
c000b9f1:	6a 00                	push   0x0
c000b9f3:	68 f1 04 00 c0       	push   0xc00004f1
c000b9f8:	6a 36                	push   0x36
c000b9fa:	53                   	push   ebx
c000b9fb:	e8 e0 fc ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000ba00:	6a 00                	push   0x0
c000ba02:	68 fb 04 00 c0       	push   0xc00004fb
c000ba07:	6a 37                	push   0x37
c000ba09:	53                   	push   ebx
c000ba0a:	e8 d1 fc ff ff       	call   c000b6e0 <IDT::addEntry(int, void (*)(), bool)>
c000ba0f:	83 c4 20             	add    esp,0x20
c000ba12:	e8 22 25 00 00       	call   c000df39 <Virt::getAKernelVAS()>
c000ba17:	52                   	push   edx
c000ba18:	6a 03                	push   0x3
c000ba1a:	6a 02                	push   0x2
c000ba1c:	50                   	push   eax
c000ba1d:	e8 be 2a 00 00       	call   c000e4e0 <VAS::allocatePages(int, int)>
c000ba22:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ba29:	89 c6                	mov    esi,eax
c000ba2b:	e8 0a 35 00 00       	call   c000ef3a <operator new(unsigned long)>
c000ba30:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba36:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba39:	89 c7                	mov    edi,eax
c000ba3b:	e8 3a 1c 00 00       	call   c000d67a <TSS::TSS()>
c000ba40:	83 c4 0c             	add    esp,0xc
c000ba43:	68 a9 03 00 c0       	push   0xc00003a9
c000ba48:	56                   	push   esi
c000ba49:	57                   	push   edi
c000ba4a:	e8 6b 1c 00 00       	call   c000d6ba <TSS::setup(unsigned long, unsigned long)>
c000ba4f:	59                   	pop    ecx
c000ba50:	89 c6                	mov    esi,eax
c000ba52:	5f                   	pop    edi
c000ba53:	6a 00                	push   0x0
c000ba55:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba59:	50                   	push   eax
c000ba5a:	e8 db fb ff ff       	call   c000b63a <IDTEntry::IDTEntry(bool)>
c000ba5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba63:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba68:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba6f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba79:	80 ce 05             	or     dh,0x5
c000ba7c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba87:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba8d:	e8 86 fc ff ff       	call   c000b718 <IDT::flush()>
c000ba92:	83 c4 20             	add    esp,0x20
c000ba95:	5b                   	pop    ebx
c000ba96:	5e                   	pop    esi
c000ba97:	5f                   	pop    edi
c000ba98:	c3                   	ret    

c000ba99 <sbrk>:
c000ba99:	55                   	push   ebp
c000ba9a:	57                   	push   edi
c000ba9b:	56                   	push   esi
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 1c             	sub    esp,0x1c
c000baa0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000baa4:	85 db                	test   ebx,ebx
c000baa6:	74 37                	je     c000badf <sbrk+0x46>
c000baa8:	78 3f                	js     c000bae9 <sbrk+0x50>
c000baaa:	e8 09 85 00 00       	call   c0013fb8 <thisCPU()>
c000baaf:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bab5:	83 e0 01             	and    eax,0x1
c000bab8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000babc:	a1 cc 2b 02 c0       	mov    eax,ds:0xc0022bcc
c000bac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bac5:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bacb:	89 d8                	mov    eax,ebx
c000bacd:	78 35                	js     c000bb04 <sbrk+0x6b>
c000bacf:	c1 f8 0c             	sar    eax,0xc
c000bad2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bad6:	89 c7                	mov    edi,eax
c000bad8:	be 00 00 00 00       	mov    esi,0x0
c000badd:	eb 3c                	jmp    c000bb1b <sbrk+0x82>
c000badf:	a1 cc 2b 02 c0       	mov    eax,ds:0xc0022bcc
c000bae4:	e9 ad 00 00 00       	jmp    c000bb96 <sbrk+0xfd>
c000bae9:	83 ec 08             	sub    esp,0x8
c000baec:	53                   	push   ebx
c000baed:	68 2c 04 02 c0       	push   0xc002042c
c000baf2:	e8 32 35 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000baff:	e9 92 00 00 00       	jmp    c000bb96 <sbrk+0xfd>
c000bb04:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bb0a:	eb c3                	jmp    c000bacf <sbrk+0x36>
c000bb0c:	81 05 cc 2b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022bcc,0x1000
c000bb16:	46                   	inc    esi
c000bb17:	39 f7                	cmp    edi,esi
c000bb19:	74 34                	je     c000bb4f <sbrk+0xb6>
c000bb1b:	e8 19 24 00 00       	call   c000df39 <Virt::getAKernelVAS()>
c000bb20:	89 c3                	mov    ebx,eax
c000bb22:	8b 2d cc 2b 02 c0    	mov    ebp,DWORD PTR ds:0xc0022bcc
c000bb28:	e8 c9 06 00 00       	call   c000c1f6 <Phys::allocatePage()>
c000bb2d:	68 01 04 00 00       	push   0x401
c000bb32:	55                   	push   ebp
c000bb33:	50                   	push   eax
c000bb34:	53                   	push   ebx
c000bb35:	e8 a6 28 00 00       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb3a:	83 c4 10             	add    esp,0x10
c000bb3d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb42:	74 c8                	je     c000bb0c <sbrk+0x73>
c000bb44:	8b 1d cc 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022bcc
c000bb4a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb4d:	eb bd                	jmp    c000bb0c <sbrk+0x73>
c000bb4f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb54:	74 48                	je     c000bb9e <sbrk+0x105>
c000bb56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb5a:	89 d3                	mov    ebx,edx
c000bb5c:	c1 eb 0a             	shr    ebx,0xa
c000bb5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb65:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb6f:	c1 e0 0c             	shl    eax,0xc
c000bb72:	01 d0                	add    eax,edx
c000bb74:	c1 e8 0a             	shr    eax,0xa
c000bb77:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb7c:	2d 00 00 40 00       	sub    eax,0x400000
c000bb81:	39 c3                	cmp    ebx,eax
c000bb83:	77 0d                	ja     c000bb92 <sbrk+0xf9>
c000bb85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb88:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb8e:	39 d8                	cmp    eax,ebx
c000bb90:	73 f3                	jae    c000bb85 <sbrk+0xec>
c000bb92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb96:	83 c4 1c             	add    esp,0x1c
c000bb99:	5b                   	pop    ebx
c000bb9a:	5e                   	pop    esi
c000bb9b:	5f                   	pop    edi
c000bb9c:	5d                   	pop    ebp
c000bb9d:	c3                   	ret    
c000bb9e:	e8 d2 2e 01 00       	call   c001ea75 <CPU::readCR3()>
c000bba3:	83 ec 0c             	sub    esp,0xc
c000bba6:	50                   	push   eax
c000bba7:	e8 db 2e 01 00       	call   c001ea87 <CPU::writeCR3(unsigned long)>
c000bbac:	83 c4 10             	add    esp,0x10
c000bbaf:	eb e1                	jmp    c000bb92 <sbrk+0xf9>

c000bbb1 <mmap>:
c000bbb1:	83 ec 18             	sub    esp,0x18
c000bbb4:	68 5c 04 02 c0       	push   0xc002045c
c000bbb9:	e8 00 91 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000bbbe:	b8 00 00 00 00       	mov    eax,0x0
c000bbc3:	83 c4 1c             	add    esp,0x1c
c000bbc6:	c3                   	ret    

c000bbc7 <munmap>:
c000bbc7:	83 ec 18             	sub    esp,0x18
c000bbca:	68 61 04 02 c0       	push   0xc0020461
c000bbcf:	e8 ea 90 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000bbd4:	b8 00 00 00 00       	mov    eax,0x0
c000bbd9:	83 c4 1c             	add    esp,0x1c
c000bbdc:	c3                   	ret    

c000bbdd <liballoc_lock()>:
c000bbdd:	83 ec 0c             	sub    esp,0xc
c000bbe0:	e8 15 c0 00 00       	call   c0017bfa <lockScheduler()>
c000bbe5:	b8 00 00 00 00       	mov    eax,0x0
c000bbea:	83 c4 0c             	add    esp,0xc
c000bbed:	c3                   	ret    

c000bbee <liballoc_unlock()>:
c000bbee:	83 ec 0c             	sub    esp,0xc
c000bbf1:	e8 06 c0 00 00       	call   c0017bfc <unlockScheduler()>
c000bbf6:	b8 00 00 00 00       	mov    eax,0x0
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    

c000bbff <liballoc_alloc(int)>:
c000bbff:	83 ec 0c             	sub    esp,0xc
c000bc02:	e8 32 23 00 00       	call   c000df39 <Virt::getAKernelVAS()>
c000bc07:	83 ec 04             	sub    esp,0x4
c000bc0a:	6a 01                	push   0x1
c000bc0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc10:	50                   	push   eax
c000bc11:	e8 ca 28 00 00       	call   c000e4e0 <VAS::allocatePages(int, int)>
c000bc16:	83 c4 1c             	add    esp,0x1c
c000bc19:	c3                   	ret    

c000bc1a <liballoc_free(void*, int)>:
c000bc1a:	83 ec 0c             	sub    esp,0xc
c000bc1d:	e8 17 23 00 00       	call   c000df39 <Virt::getAKernelVAS()>
c000bc22:	83 ec 08             	sub    esp,0x8
c000bc25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc29:	50                   	push   eax
c000bc2a:	e8 d3 25 00 00       	call   c000e202 <VAS::freeAllocatedPages(unsigned long)>
c000bc2f:	b8 00 00 00 00       	mov    eax,0x0
c000bc34:	83 c4 1c             	add    esp,0x1c
c000bc37:	c3                   	ret    

c000bc38 <realloc>:
c000bc38:	83 ec 14             	sub    esp,0x14
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc43:	e8 46 57 ff ff       	call   c000138e <dlrealloc>
c000bc48:	83 c4 1c             	add    esp,0x1c
c000bc4b:	c3                   	ret    

c000bc4c <malloc>:
c000bc4c:	83 ec 18             	sub    esp,0x18
c000bc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc53:	e8 f9 51 ff ff       	call   c0000e51 <dlmalloc>
c000bc58:	83 c4 1c             	add    esp,0x1c
c000bc5b:	c3                   	ret    

c000bc5c <free>:
c000bc5c:	83 ec 18             	sub    esp,0x18
c000bc5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc63:	e8 8e 4e ff ff       	call   c0000af6 <dlfree>
c000bc68:	83 c4 1c             	add    esp,0x1c
c000bc6b:	c3                   	ret    

c000bc6c <rfree>:
c000bc6c:	83 ec 18             	sub    esp,0x18
c000bc6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc73:	e8 e4 ff ff ff       	call   c000bc5c <free>
c000bc78:	83 c4 1c             	add    esp,0x1c
c000bc7b:	c3                   	ret    

c000bc7c <calloc>:
c000bc7c:	56                   	push   esi
c000bc7d:	53                   	push   ebx
c000bc7e:	83 ec 10             	sub    esp,0x10
c000bc81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc85:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc8a:	53                   	push   ebx
c000bc8b:	e8 bc ff ff ff       	call   c000bc4c <malloc>
c000bc90:	89 c6                	mov    esi,eax
c000bc92:	83 c4 0c             	add    esp,0xc
c000bc95:	53                   	push   ebx
c000bc96:	6a 00                	push   0x0
c000bc98:	50                   	push   eax
c000bc99:	e8 6a 49 ff ff       	call   c0000608 <memset>
c000bc9e:	89 f0                	mov    eax,esi
c000bca0:	83 c4 14             	add    esp,0x14
c000bca3:	5b                   	pop    ebx
c000bca4:	5e                   	pop    esi
c000bca5:	c3                   	ret    

c000bca6 <hwTextMode_loadInData(VgaText*)>:
c000bca6:	57                   	push   edi
c000bca7:	56                   	push   esi
c000bca8:	53                   	push   ebx
c000bca9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcad:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bcb3:	85 c0                	test   eax,eax
c000bcb5:	7e 30                	jle    c000bce7 <hwTextMode_loadInData(VgaText*)+0x41>
c000bcb7:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bcba:	31 f6                	xor    esi,esi
c000bcbc:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bcbf:	31 c0                	xor    eax,eax
c000bcc1:	c1 e1 05             	shl    ecx,0x5
c000bcc4:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bcca:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bcce:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bcd2:	40                   	inc    eax
c000bcd3:	83 f8 50             	cmp    eax,0x50
c000bcd6:	75 f2                	jne    c000bcca <hwTextMode_loadInData(VgaText*)+0x24>
c000bcd8:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcde:	46                   	inc    esi
c000bcdf:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bce5:	7f d5                	jg     c000bcbc <hwTextMode_loadInData(VgaText*)+0x16>
c000bce7:	5b                   	pop    ebx
c000bce8:	5e                   	pop    esi
c000bce9:	5f                   	pop    edi
c000bcea:	c3                   	ret    

c000bceb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bceb:	56                   	push   esi
c000bcec:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcf1:	53                   	push   ebx
c000bcf2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcfa:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bd00:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bd06:	c1 e0 04             	shl    eax,0x4
c000bd09:	83 e6 0f             	and    esi,0xf
c000bd0c:	0f b6 c0             	movzx  eax,al
c000bd0f:	41                   	inc    ecx
c000bd10:	09 f0                	or     eax,esi
c000bd12:	83 c2 02             	add    edx,0x2
c000bd15:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bd19:	c1 e0 08             	shl    eax,0x8
c000bd1c:	09 f0                	or     eax,esi
c000bd1e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bd22:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bd28:	75 d0                	jne    c000bcfa <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bd2a:	5b                   	pop    ebx
c000bd2b:	5e                   	pop    esi
c000bd2c:	c3                   	ret    

c000bd2d <hwTextMode_showCursor(VgaText*, bool)>:
c000bd2d:	56                   	push   esi
c000bd2e:	53                   	push   ebx
c000bd2f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd34:	74 38                	je     c000bd6e <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd36:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd3b:	b0 0a                	mov    al,0xa
c000bd3d:	89 da                	mov    edx,ebx
c000bd3f:	ee                   	out    dx,al
c000bd40:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd45:	89 ca                	mov    edx,ecx
c000bd47:	ec                   	in     al,dx
c000bd48:	b2 0f                	mov    dl,0xf
c000bd4a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd4e:	83 e0 c0             	and    eax,0xffffffc0
c000bd51:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd57:	09 d0                	or     eax,edx
c000bd59:	89 ca                	mov    edx,ecx
c000bd5b:	ee                   	out    dx,al
c000bd5c:	b0 0b                	mov    al,0xb
c000bd5e:	89 da                	mov    edx,ebx
c000bd60:	ee                   	out    dx,al
c000bd61:	89 ca                	mov    edx,ecx
c000bd63:	ec                   	in     al,dx
c000bd64:	83 e0 e0             	and    eax,0xffffffe0
c000bd67:	83 c8 0f             	or     eax,0xf
c000bd6a:	ee                   	out    dx,al
c000bd6b:	5b                   	pop    ebx
c000bd6c:	5e                   	pop    esi
c000bd6d:	c3                   	ret    
c000bd6e:	b0 0a                	mov    al,0xa
c000bd70:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd75:	ee                   	out    dx,al
c000bd76:	b0 20                	mov    al,0x20
c000bd78:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd7d:	ee                   	out    dx,al
c000bd7e:	5b                   	pop    ebx
c000bd7f:	5e                   	pop    esi
c000bd80:	c3                   	ret    

c000bd81 <hwTextMode_update(VgaText*)>:
c000bd81:	c3                   	ret    

c000bd82 <hwTextMode_updateCursor(VgaText*)>:
c000bd82:	56                   	push   esi
c000bd83:	b9 19 00 00 00       	mov    ecx,0x19
c000bd88:	53                   	push   ebx
c000bd89:	be d4 03 00 00       	mov    esi,0x3d4
c000bd8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd92:	89 f2                	mov    edx,esi
c000bd94:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd9a:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bda0:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bda3:	c1 e1 04             	shl    ecx,0x4
c000bda6:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bdac:	b0 0f                	mov    al,0xf
c000bdae:	ee                   	out    dx,al
c000bdaf:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bdb4:	88 c8                	mov    al,cl
c000bdb6:	89 da                	mov    edx,ebx
c000bdb8:	ee                   	out    dx,al
c000bdb9:	b0 0e                	mov    al,0xe
c000bdbb:	89 f2                	mov    edx,esi
c000bdbd:	ee                   	out    dx,al
c000bdbe:	89 c8                	mov    eax,ecx
c000bdc0:	89 da                	mov    edx,ebx
c000bdc2:	66 c1 e8 08          	shr    ax,0x8
c000bdc6:	ee                   	out    dx,al
c000bdc7:	5b                   	pop    ebx
c000bdc8:	5e                   	pop    esi
c000bdc9:	c3                   	ret    

c000bdca <hwTextMode_disableBlink(VgaText*, bool)>:
c000bdca:	ba da 03 00 00       	mov    edx,0x3da
c000bdcf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bdd4:	75 18                	jne    c000bdee <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bdd6:	ec                   	in     al,dx
c000bdd7:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bddc:	b0 30                	mov    al,0x30
c000bdde:	89 ca                	mov    edx,ecx
c000bde0:	ee                   	out    dx,al
c000bde1:	ba c1 03 00 00       	mov    edx,0x3c1
c000bde6:	ec                   	in     al,dx
c000bde7:	83 c8 08             	or     eax,0x8
c000bdea:	89 ca                	mov    edx,ecx
c000bdec:	ee                   	out    dx,al
c000bded:	c3                   	ret    
c000bdee:	ec                   	in     al,dx
c000bdef:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdf4:	b0 30                	mov    al,0x30
c000bdf6:	89 ca                	mov    edx,ecx
c000bdf8:	ee                   	out    dx,al
c000bdf9:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdfe:	ec                   	in     al,dx
c000bdff:	83 e0 f7             	and    eax,0xfffffff7
c000be02:	89 ca                	mov    edx,ecx
c000be04:	ee                   	out    dx,al
c000be05:	c3                   	ret    

c000be06 <hwTextMode_scrollScreen(VgaText*)>:
c000be06:	55                   	push   ebp
c000be07:	bd 02 00 00 00       	mov    ebp,0x2
c000be0c:	57                   	push   edi
c000be0d:	56                   	push   esi
c000be0e:	53                   	push   ebx
c000be0f:	83 ec 1c             	sub    esp,0x1c
c000be12:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000be1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000be1e:	31 c0                	xor    eax,eax
c000be20:	eb 0b                	jmp    c000be2d <hwTextMode_scrollScreen(VgaText*)+0x27>
c000be22:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be28:	74 57                	je     c000be81 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000be2a:	43                   	inc    ebx
c000be2b:	89 f0                	mov    eax,esi
c000be2d:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be33:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be39:	88 13                	mov    BYTE PTR [ebx],dl
c000be3b:	8d 70 01             	lea    esi,[eax+0x1]
c000be3e:	83 fd 18             	cmp    ebp,0x18
c000be41:	75 df                	jne    c000be22 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be43:	a8 01                	test   al,0x1
c000be45:	75 13                	jne    c000be5a <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be47:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be4a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be50:	75 d8                	jne    c000be2a <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be52:	83 c4 1c             	add    esp,0x1c
c000be55:	5b                   	pop    ebx
c000be56:	5e                   	pop    esi
c000be57:	5f                   	pop    edi
c000be58:	5d                   	pop    ebp
c000be59:	c3                   	ret    
c000be5a:	83 ec 08             	sub    esp,0x8
c000be5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be61:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be68:	50                   	push   eax
c000be69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be6d:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be74:	50                   	push   eax
c000be75:	e8 e0 0a 00 00       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000be7a:	83 c4 10             	add    esp,0x10
c000be7d:	88 07                	mov    BYTE PTR [edi],al
c000be7f:	eb c9                	jmp    c000be4a <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be81:	45                   	inc    ebp
c000be82:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be8a:	eb 8e                	jmp    c000be1a <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be8c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be8c:	56                   	push   esi
c000be8d:	53                   	push   ebx
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be95:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be99:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be9e:	50                   	push   eax
c000be9f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000bea4:	50                   	push   eax
c000bea5:	e8 b0 0a 00 00       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000beaa:	5a                   	pop    edx
c000beab:	0f b6 c0             	movzx  eax,al
c000beae:	59                   	pop    ecx
c000beaf:	50                   	push   eax
c000beb0:	89 f0                	mov    eax,esi
c000beb2:	0f be f0             	movsx  esi,al
c000beb5:	56                   	push   esi
c000beb6:	e8 45 0b 00 00       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000bebb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bebf:	ba 19 00 00 00       	mov    edx,0x19
c000bec4:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000beca:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000becd:	8d 14 92             	lea    edx,[edx+edx*4]
c000bed0:	c1 e1 04             	shl    ecx,0x4
c000bed3:	c1 e2 04             	shl    edx,0x4
c000bed6:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beda:	01 ca                	add    edx,ecx
c000bedc:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000bee4:	83 c4 14             	add    esp,0x14
c000bee7:	5b                   	pop    ebx
c000bee8:	5e                   	pop    esi
c000bee9:	c3                   	ret    

c000beea <setupTextMode()>:
c000beea:	c7 05 58 38 02 c0 ca bd 00 c0 	mov    DWORD PTR ds:0xc0023858,0xc000bdca
c000bef4:	c7 05 44 38 02 c0 a6 bc 00 c0 	mov    DWORD PTR ds:0xc0023844,0xc000bca6
c000befe:	c7 05 40 38 02 c0 eb bc 00 c0 	mov    DWORD PTR ds:0xc0023840,0xc000bceb
c000bf08:	c7 05 4c 38 02 c0 06 be 00 c0 	mov    DWORD PTR ds:0xc002384c,0xc000be06
c000bf12:	c7 05 54 38 02 c0 2d bd 00 c0 	mov    DWORD PTR ds:0xc0023854,0xc000bd2d
c000bf1c:	c7 05 48 38 02 c0 81 bd 00 c0 	mov    DWORD PTR ds:0xc0023848,0xc000bd81
c000bf26:	c7 05 50 38 02 c0 82 bd 00 c0 	mov    DWORD PTR ds:0xc0023850,0xc000bd82
c000bf30:	c7 05 5c 38 02 c0 8c be 00 c0 	mov    DWORD PTR ds:0xc002385c,0xc000be8c
c000bf3a:	c3                   	ret    

c000bf3b <kernel_main>:
c000bf3b:	57                   	push   edi
c000bf3c:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf41:	56                   	push   esi
c000bf42:	31 f6                	xor    esi,esi
c000bf44:	53                   	push   ebx
c000bf45:	83 ec 10             	sub    esp,0x10
c000bf48:	e8 67 08 00 00       	call   c000c7b4 <installVgaTextImplementation()>
c000bf4d:	e8 98 ff ff ff       	call   c000beea <setupTextMode()>
c000bf52:	89 f0                	mov    eax,esi
c000bf54:	89 fa                	mov    edx,edi
c000bf56:	ee                   	out    dx,al
c000bf57:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf5c:	b0 80                	mov    al,0x80
c000bf5e:	89 da                	mov    edx,ebx
c000bf60:	ee                   	out    dx,al
c000bf61:	b1 03                	mov    cl,0x3
c000bf63:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf68:	88 c8                	mov    al,cl
c000bf6a:	ee                   	out    dx,al
c000bf6b:	89 f0                	mov    eax,esi
c000bf6d:	89 fa                	mov    edx,edi
c000bf6f:	ee                   	out    dx,al
c000bf70:	88 c8                	mov    al,cl
c000bf72:	89 da                	mov    edx,ebx
c000bf74:	ee                   	out    dx,al
c000bf75:	b0 c7                	mov    al,0xc7
c000bf77:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf7c:	ee                   	out    dx,al
c000bf7d:	b0 0b                	mov    al,0xb
c000bf7f:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf84:	ee                   	out    dx,al
c000bf85:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	05 ff 0f 00 00       	add    eax,0xfff
c000bf92:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf97:	50                   	push   eax
c000bf98:	e8 4d 03 00 00       	call   c000c2ea <Phys::physicalMemorySetup(unsigned int)>
c000bf9d:	e8 18 1f 00 00       	call   c000deba <Virt::virtualMemorySetup()>
c000bfa2:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bfa8:	83 c4 10             	add    esp,0x10
c000bfab:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bfb1:	75 0e                	jne    c000bfc1 <kernel_main+0x86>
c000bfb3:	89 d8                	mov    eax,ebx
c000bfb5:	25 48 03 00 00       	and    eax,0x348
c000bfba:	3d 00 03 00 00       	cmp    eax,0x300
c000bfbf:	74 10                	je     c000bfd1 <kernel_main+0x96>
c000bfc1:	83 ec 0c             	sub    esp,0xc
c000bfc4:	68 9b 18 02 c0       	push   0xc002189b
c000bfc9:	e8 f0 8c 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000bfce:	83 c4 10             	add    esp,0x10
c000bfd1:	83 ec 0c             	sub    esp,0xc
c000bfd4:	89 1d c0 37 02 c0    	mov    DWORD PTR ds:0xc00237c0,ebx
c000bfda:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfde:	53                   	push   ebx
c000bfdf:	e8 80 20 00 00       	call   c000e064 <VAS::VAS()>
c000bfe4:	89 1d 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,ebx
c000bfea:	e8 31 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfef:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bff6:	e8 3f 2f 00 00       	call   c000ef3a <operator new(unsigned long)>
c000bffb:	89 04 24             	mov    DWORD PTR [esp],eax
c000bffe:	89 c6                	mov    esi,eax
c000c000:	e8 ab ed ff ff       	call   c000adb0 <Computer::Computer()>
c000c005:	6a 00                	push   0x0
c000c007:	89 35 a8 37 02 c0    	mov    DWORD PTR ds:0xc00237a8,esi
c000c00d:	6a 00                	push   0x0
c000c00f:	6a 00                	push   0x0
c000c011:	56                   	push   esi
c000c012:	e8 5f f2 ff ff       	call   c000b276 <Computer::open(int, int, void*)>
c000c017:	83 c4 14             	add    esp,0x14
c000c01a:	53                   	push   ebx
c000c01b:	e8 54 22 00 00       	call   c000e274 <VAS::~VAS()>
c000c020:	c7 04 24 68 04 02 c0 	mov    DWORD PTR [esp],0xc0020468
c000c027:	e8 92 8c 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000c02c:	83 c4 20             	add    esp,0x20
c000c02f:	5b                   	pop    ebx
c000c030:	5e                   	pop    esi
c000c031:	5f                   	pop    edi
c000c032:	c3                   	ret    

c000c033 <Phys::allocateDMA(unsigned long)>:
c000c033:	55                   	push   ebp
c000c034:	31 d2                	xor    edx,edx
c000c036:	57                   	push   edi
c000c037:	31 ed                	xor    ebp,ebp
c000c039:	56                   	push   esi
c000c03a:	31 c9                	xor    ecx,ecx
c000c03c:	53                   	push   ebx
c000c03d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c041:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c047:	31 c0                	xor    eax,eax
c000c049:	c1 ee 0c             	shr    esi,0xc
c000c04c:	eb 17                	jmp    c000c065 <Phys::allocateDMA(unsigned long)+0x32>
c000c04e:	85 c9                	test   ecx,ecx
c000c050:	75 04                	jne    c000c056 <Phys::allocateDMA(unsigned long)+0x23>
c000c052:	89 d5                	mov    ebp,edx
c000c054:	89 d0                	mov    eax,edx
c000c056:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c059:	39 de                	cmp    esi,ebx
c000c05b:	74 20                	je     c000c07d <Phys::allocateDMA(unsigned long)+0x4a>
c000c05d:	42                   	inc    edx
c000c05e:	89 d9                	mov    ecx,ebx
c000c060:	83 fa 2f             	cmp    edx,0x2f
c000c063:	7f 11                	jg     c000c076 <Phys::allocateDMA(unsigned long)+0x43>
c000c065:	80 ba 00 38 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc800],0x0
c000c06c:	74 e0                	je     c000c04e <Phys::allocateDMA(unsigned long)+0x1b>
c000c06e:	31 c9                	xor    ecx,ecx
c000c070:	42                   	inc    edx
c000c071:	83 fa 2f             	cmp    edx,0x2f
c000c074:	7e ef                	jle    c000c065 <Phys::allocateDMA(unsigned long)+0x32>
c000c076:	5b                   	pop    ebx
c000c077:	31 c0                	xor    eax,eax
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	5d                   	pop    ebp
c000c07c:	c3                   	ret    
c000c07d:	8d 14 30             	lea    edx,[eax+esi*1]
c000c080:	89 d7                	mov    edi,edx
c000c082:	4f                   	dec    edi
c000c083:	79 03                	jns    c000c088 <Phys::allocateDMA(unsigned long)+0x55>
c000c085:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c088:	c1 ff 04             	sar    edi,0x4
c000c08b:	89 c2                	mov    edx,eax
c000c08d:	c1 fa 04             	sar    edx,0x4
c000c090:	39 fa                	cmp    edx,edi
c000c092:	75 2f                	jne    c000c0c3 <Phys::allocateDMA(unsigned long)+0x90>
c000c094:	85 db                	test   ebx,ebx
c000c096:	74 1a                	je     c000c0b2 <Phys::allocateDMA(unsigned long)+0x7f>
c000c098:	be 00 38 02 c0       	mov    esi,0xc0023800
c000c09d:	8d 90 00 38 02 c0    	lea    edx,[eax-0x3ffdc800]
c000c0a3:	f7 d6                	not    esi
c000c0a5:	29 c6                	sub    esi,eax
c000c0a7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c0aa:	42                   	inc    edx
c000c0ab:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c0ae:	39 d9                	cmp    ecx,ebx
c000c0b0:	7f f5                	jg     c000c0a7 <Phys::allocateDMA(unsigned long)+0x74>
c000c0b2:	85 ff                	test   edi,edi
c000c0b4:	74 13                	je     c000c0c9 <Phys::allocateDMA(unsigned long)+0x96>
c000c0b6:	5b                   	pop    ebx
c000c0b7:	05 50 20 0c 00       	add    eax,0xc2050
c000c0bc:	5e                   	pop    esi
c000c0bd:	c1 e0 0c             	shl    eax,0xc
c000c0c0:	5f                   	pop    edi
c000c0c1:	5d                   	pop    ebp
c000c0c2:	c3                   	ret    
c000c0c3:	89 ea                	mov    edx,ebp
c000c0c5:	31 c9                	xor    ecx,ecx
c000c0c7:	eb a7                	jmp    c000c070 <Phys::allocateDMA(unsigned long)+0x3d>
c000c0c9:	5b                   	pop    ebx
c000c0ca:	c1 e0 0c             	shl    eax,0xc
c000c0cd:	5e                   	pop    esi
c000c0ce:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0d3:	5f                   	pop    edi
c000c0d4:	5d                   	pop    ebp
c000c0d5:	c3                   	ret    

c000c0d6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0de:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0e4:	c1 e9 0c             	shr    ecx,0xc
c000c0e7:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0ec:	76 25                	jbe    c000c113 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0ee:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0f3:	c1 e8 0c             	shr    eax,0xc
c000c0f6:	8d 50 10             	lea    edx,[eax+0x10]
c000c0f9:	85 c9                	test   ecx,ecx
c000c0fb:	74 15                	je     c000c112 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0fd:	8d 82 00 38 02 c0    	lea    eax,[edx-0x3ffdc800]
c000c103:	8d 94 11 00 38 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc800]
c000c10a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c10d:	40                   	inc    eax
c000c10e:	39 d0                	cmp    eax,edx
c000c110:	75 f8                	jne    c000c10a <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c112:	c3                   	ret    
c000c113:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c119:	c1 ea 0c             	shr    edx,0xc
c000c11c:	eb db                	jmp    c000c0f9 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c11e <Phys::setPageState(unsigned long, bool)>:
c000c11e:	56                   	push   esi
c000c11f:	ba 01 00 00 00       	mov    edx,0x1
c000c124:	53                   	push   ebx
c000c125:	8b 35 d0 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022bd0
c000c12b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c12f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c133:	89 c8                	mov    eax,ecx
c000c135:	83 e1 07             	and    ecx,0x7
c000c138:	c1 e8 03             	shr    eax,0x3
c000c13b:	d3 e3                	shl    ebx,cl
c000c13d:	01 c6                	add    esi,eax
c000c13f:	d3 e2                	shl    edx,cl
c000c141:	f7 d2                	not    edx
c000c143:	20 16                	and    BYTE PTR [esi],dl
c000c145:	03 05 d0 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022bd0
c000c14b:	08 18                	or     BYTE PTR [eax],bl
c000c14d:	5b                   	pop    ebx
c000c14e:	5e                   	pop    esi
c000c14f:	c3                   	ret    

c000c150 <Phys::getPageState(unsigned long)>:
c000c150:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c154:	8b 15 d0 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022bd0
c000c15a:	89 c8                	mov    eax,ecx
c000c15c:	83 e1 07             	and    ecx,0x7
c000c15f:	c1 e8 03             	shr    eax,0x3
c000c162:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c166:	d3 f8                	sar    eax,cl
c000c168:	83 e0 01             	and    eax,0x1
c000c16b:	c3                   	ret    

c000c16c <Phys::freePage(unsigned long)>:
c000c16c:	53                   	push   ebx
c000c16d:	83 ec 08             	sub    esp,0x8
c000c170:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c174:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c17a:	76 57                	jbe    c000c1d3 <Phys::freePage(unsigned long)+0x67>
c000c17c:	c1 eb 0c             	shr    ebx,0xc
c000c17f:	53                   	push   ebx
c000c180:	e8 cb ff ff ff       	call   c000c150 <Phys::getPageState(unsigned long)>
c000c185:	5a                   	pop    edx
c000c186:	84 c0                	test   al,al
c000c188:	74 5b                	je     c000c1e5 <Phys::freePage(unsigned long)+0x79>
c000c18a:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c000c18f:	48                   	dec    eax
c000c190:	a3 ec 37 02 c0       	mov    ds:0xc00237ec,eax
c000c195:	8d 04 80             	lea    eax,[eax+eax*4]
c000c198:	8d 04 80             	lea    eax,[eax+eax*4]
c000c19b:	c1 e0 02             	shl    eax,0x2
c000c19e:	99                   	cdq    
c000c19f:	f7 3d f0 37 02 c0    	idiv   DWORD PTR ds:0xc00237f0
c000c1a5:	39 05 e8 37 02 c0    	cmp    DWORD PTR ds:0xc00237e8,eax
c000c1ab:	75 13                	jne    c000c1c0 <Phys::freePage(unsigned long)+0x54>
c000c1ad:	83 ec 08             	sub    esp,0x8
c000c1b0:	6a 00                	push   0x0
c000c1b2:	53                   	push   ebx
c000c1b3:	e8 66 ff ff ff       	call   c000c11e <Phys::setPageState(unsigned long, bool)>
c000c1b8:	83 c4 10             	add    esp,0x10
c000c1bb:	83 c4 08             	add    esp,0x8
c000c1be:	5b                   	pop    ebx
c000c1bf:	c3                   	ret    
c000c1c0:	83 ec 0c             	sub    esp,0xc
c000c1c3:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c000c1c8:	50                   	push   eax
c000c1c9:	e8 7a 09 00 00       	call   c000cb48 <VgaText::updateRAMUsageDisplay(int)>
c000c1ce:	83 c4 10             	add    esp,0x10
c000c1d1:	eb da                	jmp    c000c1ad <Phys::freePage(unsigned long)+0x41>
c000c1d3:	68 00 10 00 00       	push   0x1000
c000c1d8:	53                   	push   ebx
c000c1d9:	e8 f8 fe ff ff       	call   c000c0d6 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1de:	59                   	pop    ecx
c000c1df:	5b                   	pop    ebx
c000c1e0:	83 c4 08             	add    esp,0x8
c000c1e3:	5b                   	pop    ebx
c000c1e4:	c3                   	ret    
c000c1e5:	c7 44 24 10 83 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020483
c000c1ed:	83 c4 08             	add    esp,0x8
c000c1f0:	5b                   	pop    ebx
c000c1f1:	e9 c8 8a 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>

c000c1f6 <Phys::allocatePage()>:
c000c1f6:	56                   	push   esi
c000c1f7:	53                   	push   ebx
c000c1f8:	51                   	push   ecx
c000c1f9:	8b 35 e0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237e0
c000c1ff:	89 f3                	mov    ebx,esi
c000c201:	eb 0a                	jmp    c000c20d <Phys::allocatePage()+0x17>
c000c203:	89 1d e0 37 02 c0    	mov    DWORD PTR ds:0xc00237e0,ebx
c000c209:	39 de                	cmp    esi,ebx
c000c20b:	74 24                	je     c000c231 <Phys::allocatePage()+0x3b>
c000c20d:	53                   	push   ebx
c000c20e:	e8 3d ff ff ff       	call   c000c150 <Phys::getPageState(unsigned long)>
c000c213:	5a                   	pop    edx
c000c214:	84 c0                	test   al,al
c000c216:	74 4e                	je     c000c266 <Phys::allocatePage()+0x70>
c000c218:	43                   	inc    ebx
c000c219:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c21f:	75 e2                	jne    c000c203 <Phys::allocatePage()+0xd>
c000c221:	31 db                	xor    ebx,ebx
c000c223:	c7 05 e0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237e0,0x0
c000c22d:	39 de                	cmp    esi,ebx
c000c22f:	75 dc                	jne    c000c20d <Phys::allocatePage()+0x17>
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	68 00 10 00 00       	push   0x1000
c000c239:	e8 f5 fd ff ff       	call   c000c033 <Phys::allocateDMA(unsigned long)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	85 c0                	test   eax,eax
c000c243:	75 56                	jne    c000c29b <Phys::allocatePage()+0xa5>
c000c245:	83 ec 0c             	sub    esp,0xc
c000c248:	68 99 04 02 c0       	push   0xc0020499
c000c24d:	e8 6c 8a 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000c252:	83 c4 10             	add    esp,0x10
c000c255:	8b 1d e0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237e0
c000c25b:	53                   	push   ebx
c000c25c:	e8 ef fe ff ff       	call   c000c150 <Phys::getPageState(unsigned long)>
c000c261:	5a                   	pop    edx
c000c262:	84 c0                	test   al,al
c000c264:	75 b2                	jne    c000c218 <Phys::allocatePage()+0x22>
c000c266:	6a 01                	push   0x1
c000c268:	53                   	push   ebx
c000c269:	e8 b0 fe ff ff       	call   c000c11e <Phys::setPageState(unsigned long, bool)>
c000c26e:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c000c273:	59                   	pop    ecx
c000c274:	40                   	inc    eax
c000c275:	5b                   	pop    ebx
c000c276:	a3 ec 37 02 c0       	mov    ds:0xc00237ec,eax
c000c27b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c27e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c281:	c1 e0 02             	shl    eax,0x2
c000c284:	99                   	cdq    
c000c285:	f7 3d f0 37 02 c0    	idiv   DWORD PTR ds:0xc00237f0
c000c28b:	39 05 e8 37 02 c0    	cmp    DWORD PTR ds:0xc00237e8,eax
c000c291:	75 0c                	jne    c000c29f <Phys::allocatePage()+0xa9>
c000c293:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c000c298:	c1 e0 0c             	shl    eax,0xc
c000c29b:	5a                   	pop    edx
c000c29c:	5b                   	pop    ebx
c000c29d:	5e                   	pop    esi
c000c29e:	c3                   	ret    
c000c29f:	83 ec 0c             	sub    esp,0xc
c000c2a2:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c000c2a7:	50                   	push   eax
c000c2a8:	e8 9b 08 00 00       	call   c000cb48 <VgaText::updateRAMUsageDisplay(int)>
c000c2ad:	83 c4 10             	add    esp,0x10
c000c2b0:	eb e1                	jmp    c000c293 <Phys::allocatePage()+0x9d>

c000c2b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c2b2:	56                   	push   esi
c000c2b3:	53                   	push   ebx
c000c2b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2b8:	39 1d e4 37 02 c0    	cmp    DWORD PTR ds:0xc00237e4,ebx
c000c2be:	73 06                	jae    c000c2c6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c2c0:	89 1d e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,ebx
c000c2c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2ca:	c1 eb 0c             	shr    ebx,0xc
c000c2cd:	c1 e8 0c             	shr    eax,0xc
c000c2d0:	39 d8                	cmp    eax,ebx
c000c2d2:	73 13                	jae    c000c2e7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2d4:	6a 00                	push   0x0
c000c2d6:	8d 70 01             	lea    esi,[eax+0x1]
c000c2d9:	50                   	push   eax
c000c2da:	e8 3f fe ff ff       	call   c000c11e <Phys::setPageState(unsigned long, bool)>
c000c2df:	5a                   	pop    edx
c000c2e0:	89 f0                	mov    eax,esi
c000c2e2:	59                   	pop    ecx
c000c2e3:	39 f3                	cmp    ebx,esi
c000c2e5:	75 ed                	jne    c000c2d4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2e7:	5b                   	pop    ebx
c000c2e8:	5e                   	pop    esi
c000c2e9:	c3                   	ret    

c000c2ea <Phys::physicalMemorySetup(unsigned int)>:
c000c2ea:	55                   	push   ebp
c000c2eb:	57                   	push   edi
c000c2ec:	56                   	push   esi
c000c2ed:	53                   	push   ebx
c000c2ee:	31 db                	xor    ebx,ebx
c000c2f0:	83 ec 30             	sub    esp,0x30
c000c2f3:	6a 30                	push   0x30
c000c2f5:	6a 00                	push   0x0
c000c2f7:	68 00 38 02 c0       	push   0xc0023800
c000c2fc:	e8 07 43 ff ff       	call   c0000608 <memset>
c000c301:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c305:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30a:	05 00 10 00 00       	add    eax,0x1000
c000c30f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	83 ec 08             	sub    esp,0x8
c000c319:	6a 01                	push   0x1
c000c31b:	53                   	push   ebx
c000c31c:	43                   	inc    ebx
c000c31d:	e8 fc fd ff ff       	call   c000c11e <Phys::setPageState(unsigned long, bool)>
c000c322:	83 c4 10             	add    esp,0x10
c000c325:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c32b:	75 e9                	jne    c000c316 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c32d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c334:	66 85 c0             	test   ax,ax
c000c337:	0f 84 28 01 00 00    	je     c000c465 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c33d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c341:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c347:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c34c:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c352:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c358:	89 f1                	mov    ecx,esi
c000c35a:	89 fb                	mov    ebx,edi
c000c35c:	01 c1                	add    ecx,eax
c000c35e:	89 d5                	mov    ebp,edx
c000c360:	11 d3                	adc    ebx,edx
c000c362:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c365:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c369:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c36d:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c373:	09 dd                	or     ebp,ebx
c000c375:	0f 85 fa 00 00 00    	jne    c000c475 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c37b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c37f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c387:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c38f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c393:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c39b:	eb 45                	jmp    c000c3e2 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c39d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c3a1:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c3a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c3aa:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c3ae:	0f 84 c1 00 00 00    	je     c000c475 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3b4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3b8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c3bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c3be:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c3c1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c3c4:	89 c1                	mov    ecx,eax
c000c3c6:	89 d3                	mov    ebx,edx
c000c3c8:	01 f1                	add    ecx,esi
c000c3ca:	11 fb                	adc    ebx,edi
c000c3cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3cf:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c3d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3d6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3da:	09 d3                	or     ebx,edx
c000c3dc:	0f 85 93 00 00 00    	jne    c000c475 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3e2:	49                   	dec    ecx
c000c3e3:	75 b8                	jne    c000c39d <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3e5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3e8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3ec:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3f0:	39 e9                	cmp    ecx,ebp
c000c3f2:	89 d9                	mov    ecx,ebx
c000c3f4:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3f8:	72 a3                	jb     c000c39d <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3fa:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3ff:	39 f1                	cmp    ecx,esi
c000c401:	b9 00 00 00 00       	mov    ecx,0x0
c000c406:	19 f9                	sbb    ecx,edi
c000c408:	73 93                	jae    c000c39d <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c40a:	39 e8                	cmp    eax,ebp
c000c40c:	89 d1                	mov    ecx,edx
c000c40e:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c412:	73 13                	jae    c000c427 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c414:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c417:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c41b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c41f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c423:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c427:	83 ec 08             	sub    esp,0x8
c000c42a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c42e:	50                   	push   eax
c000c42f:	e8 7e fe ff ff       	call   c000c2b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c434:	83 c4 0c             	add    esp,0xc
c000c437:	89 fa                	mov    edx,edi
c000c439:	89 f0                	mov    eax,esi
c000c43b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c43f:	03 05 f0 37 02 c0    	add    eax,DWORD PTR ds:0xc00237f0
c000c445:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c44c:	a3 f0 37 02 c0       	mov    ds:0xc00237f0,eax
c000c451:	52                   	push   edx
c000c452:	50                   	push   eax
c000c453:	68 b5 04 02 c0       	push   0xc00204b5
c000c458:	e8 cc 2b 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	e9 38 ff ff ff       	jmp    c000c39d <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c465:	83 ec 0c             	sub    esp,0xc
c000c468:	68 a7 04 02 c0       	push   0xc00204a7
c000c46d:	e8 4c 88 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000c472:	83 c4 10             	add    esp,0x10
c000c475:	bb 40 01 00 00       	mov    ebx,0x140
c000c47a:	83 ec 08             	sub    esp,0x8
c000c47d:	6a 00                	push   0x0
c000c47f:	53                   	push   ebx
c000c480:	43                   	inc    ebx
c000c481:	e8 98 fc ff ff       	call   c000c11e <Phys::setPageState(unsigned long, bool)>
c000c486:	ff 05 f0 37 02 c0    	inc    DWORD PTR ds:0xc00237f0
c000c48c:	83 c4 10             	add    esp,0x10
c000c48f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c495:	75 e3                	jne    c000c47a <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c497:	83 c4 2c             	add    esp,0x2c
c000c49a:	5b                   	pop    ebx
c000c49b:	5e                   	pop    esi
c000c49c:	5f                   	pop    edi
c000c49d:	5d                   	pop    ebp
c000c49e:	c3                   	ret    
c000c49f:	90                   	nop

c000c4a0 <Pipe::isAtty()>:
c000c4a0:	31 c0                	xor    eax,eax
c000c4a2:	c3                   	ret    
c000c4a3:	90                   	nop

c000c4a4 <Pipe::~Pipe()>:
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	ba 14 05 02 c0       	mov    edx,0xc0020514
c000c4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b0:	89 10                	mov    DWORD PTR [eax],edx
c000c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4b6:	83 ec 0c             	sub    esp,0xc
c000c4b9:	50                   	push   eax
c000c4ba:	e8 5b 16 00 00       	call   c000db1a <UnixFile::~UnixFile()>
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	90                   	nop
c000c4c3:	83 c4 0c             	add    esp,0xc
c000c4c6:	c3                   	ret    
c000c4c7:	90                   	nop

c000c4c8 <Pipe::~Pipe()>:
c000c4c8:	83 ec 0c             	sub    esp,0xc
c000c4cb:	83 ec 0c             	sub    esp,0xc
c000c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d2:	e8 cd ff ff ff       	call   c000c4a4 <Pipe::~Pipe()>
c000c4d7:	83 c4 10             	add    esp,0x10
c000c4da:	83 ec 08             	sub    esp,0x8
c000c4dd:	6a 20                	push   0x20
c000c4df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4e3:	e8 61 2a 00 00       	call   c000ef49 <operator delete(void*, unsigned long)>
c000c4e8:	83 c4 10             	add    esp,0x10
c000c4eb:	83 c4 0c             	add    esp,0xc
c000c4ee:	c3                   	ret    
c000c4ef:	90                   	nop

c000c4f0 <Pipe::read(unsigned long long, void*, int*)>:
c000c4f0:	55                   	push   ebp
c000c4f1:	57                   	push   edi
c000c4f2:	56                   	push   esi
c000c4f3:	53                   	push   ebx
c000c4f4:	83 ec 1c             	sub    esp,0x1c
c000c4f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4fb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c503:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c506:	89 c8                	mov    eax,ecx
c000c508:	99                   	cdq    
c000c509:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c50d:	74 19                	je     c000c528 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c50f:	39 f9                	cmp    ecx,edi
c000c511:	89 d1                	mov    ecx,edx
c000c513:	19 f1                	sbb    ecx,esi
c000c515:	73 11                	jae    c000c528 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c517:	e8 de b6 00 00       	call   c0017bfa <lockScheduler()>
c000c51c:	e8 0d ba 00 00       	call   c0017f2e <schedule()>
c000c521:	e8 d6 b6 00 00       	call   c0017bfc <unlockScheduler()>
c000c526:	eb db                	jmp    c000c503 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c528:	39 f8                	cmp    eax,edi
c000c52a:	89 d1                	mov    ecx,edx
c000c52c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c530:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c534:	19 f1                	sbb    ecx,esi
c000c536:	73 08                	jae    c000c540 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c538:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c53c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c540:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c543:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c546:	29 c6                	sub    esi,eax
c000c548:	89 f1                	mov    ecx,esi
c000c54a:	c1 f9 1f             	sar    ecx,0x1f
c000c54d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c551:	89 ca                	mov    edx,ecx
c000c553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c557:	19 d1                	sbb    ecx,edx
c000c559:	73 04                	jae    c000c55f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c55b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c55f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c563:	89 fd                	mov    ebp,edi
c000c565:	29 f5                	sub    ebp,esi
c000c567:	85 f6                	test   esi,esi
c000c569:	74 12                	je     c000c57d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c56b:	52                   	push   edx
c000c56c:	56                   	push   esi
c000c56d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c570:	50                   	push   eax
c000c571:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c575:	e8 58 40 ff ff       	call   c00005d2 <memcpy>
c000c57a:	83 c4 10             	add    esp,0x10
c000c57d:	85 ed                	test   ebp,ebp
c000c57f:	74 12                	je     c000c593 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c581:	50                   	push   eax
c000c582:	55                   	push   ebp
c000c583:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c586:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c58a:	56                   	push   esi
c000c58b:	e8 42 40 ff ff       	call   c00005d2 <memcpy>
c000c590:	83 c4 10             	add    esp,0x10
c000c593:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c596:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c599:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c59c:	99                   	cdq    
c000c59d:	89 f7                	mov    edi,esi
c000c59f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c5a3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c5a7:	c1 ff 1f             	sar    edi,0x1f
c000c5aa:	57                   	push   edi
c000c5ab:	56                   	push   esi
c000c5ac:	52                   	push   edx
c000c5ad:	50                   	push   eax
c000c5ae:	e8 e9 22 01 00       	call   c001e89c <__umoddi3>
c000c5b3:	83 c4 10             	add    esp,0x10
c000c5b6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5b9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c5be:	75 10                	jne    c000c5d0 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c5c0:	83 ec 0c             	sub    esp,0xc
c000c5c3:	68 d1 04 02 c0       	push   0xc00204d1
c000c5c8:	e8 f1 86 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000c5cd:	83 c4 10             	add    esp,0x10
c000c5d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5d8:	89 10                	mov    DWORD PTR [eax],edx
c000c5da:	83 c4 1c             	add    esp,0x1c
c000c5dd:	31 c0                	xor    eax,eax
c000c5df:	5b                   	pop    ebx
c000c5e0:	5e                   	pop    esi
c000c5e1:	5f                   	pop    edi
c000c5e2:	5d                   	pop    ebp
c000c5e3:	c3                   	ret    

c000c5e4 <Pipe::write(unsigned long long, void*, int*)>:
c000c5e4:	55                   	push   ebp
c000c5e5:	57                   	push   edi
c000c5e6:	56                   	push   esi
c000c5e7:	53                   	push   ebx
c000c5e8:	83 ec 1c             	sub    esp,0x1c
c000c5eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5fa:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5fd:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c600:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c604:	89 de                	mov    esi,ebx
c000c606:	89 df                	mov    edi,ebx
c000c608:	c1 ff 1f             	sar    edi,0x1f
c000c60b:	01 c6                	add    esi,eax
c000c60d:	89 c8                	mov    eax,ecx
c000c60f:	11 d7                	adc    edi,edx
c000c611:	99                   	cdq    
c000c612:	39 f1                	cmp    ecx,esi
c000c614:	89 d0                	mov    eax,edx
c000c616:	19 f8                	sbb    eax,edi
c000c618:	b8 01 00 00 00       	mov    eax,0x1
c000c61d:	0f 82 80 00 00 00    	jb     c000c6a3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c626:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c629:	01 d8                	add    eax,ebx
c000c62b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c62f:	99                   	cdq    
c000c630:	f7 f9                	idiv   ecx
c000c632:	29 d1                	sub    ecx,edx
c000c634:	89 d7                	mov    edi,edx
c000c636:	89 c8                	mov    eax,ecx
c000c638:	99                   	cdq    
c000c639:	39 ce                	cmp    esi,ecx
c000c63b:	19 d3                	sbb    ebx,edx
c000c63d:	bb 00 00 00 00       	mov    ebx,0x0
c000c642:	72 04                	jb     c000c648 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c644:	89 f3                	mov    ebx,esi
c000c646:	29 cb                	sub    ebx,ecx
c000c648:	89 f1                	mov    ecx,esi
c000c64a:	29 d9                	sub    ecx,ebx
c000c64c:	74 1a                	je     c000c668 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c64e:	52                   	push   edx
c000c64f:	51                   	push   ecx
c000c650:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c654:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c658:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c65b:	57                   	push   edi
c000c65c:	e8 71 3f ff ff       	call   c00005d2 <memcpy>
c000c661:	83 c4 10             	add    esp,0x10
c000c664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c668:	85 db                	test   ebx,ebx
c000c66a:	74 12                	je     c000c67e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c66c:	50                   	push   eax
c000c66d:	53                   	push   ebx
c000c66e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c672:	51                   	push   ecx
c000c673:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c676:	e8 57 3f ff ff       	call   c00005d2 <memcpy>
c000c67b:	83 c4 10             	add    esp,0x10
c000c67e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c681:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c686:	75 10                	jne    c000c698 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c688:	83 ec 0c             	sub    esp,0xc
c000c68b:	68 ed 04 02 c0       	push   0xc00204ed
c000c690:	e8 29 86 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000c695:	83 c4 10             	add    esp,0x10
c000c698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c69f:	89 38                	mov    DWORD PTR [eax],edi
c000c6a1:	31 c0                	xor    eax,eax
c000c6a3:	83 c4 1c             	add    esp,0x1c
c000c6a6:	5b                   	pop    ebx
c000c6a7:	5e                   	pop    esi
c000c6a8:	5f                   	pop    edi
c000c6a9:	5d                   	pop    ebp
c000c6aa:	c3                   	ret    
c000c6ab:	90                   	nop

c000c6ac <Pipe::Pipe(int)>:
c000c6ac:	83 ec 0c             	sub    esp,0xc
c000c6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b3:	83 ec 08             	sub    esp,0x8
c000c6b6:	6a 00                	push   0x0
c000c6b8:	50                   	push   eax
c000c6b9:	e8 ba 12 00 00       	call   c000d978 <UnixFile::UnixFile(int)>
c000c6be:	83 c4 10             	add    esp,0x10
c000c6c1:	ba 14 05 02 c0       	mov    edx,0xc0020514
c000c6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ca:	89 10                	mov    DWORD PTR [eax],edx
c000c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6db:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6e6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6f1:	83 ec 0c             	sub    esp,0xc
c000c6f4:	50                   	push   eax
c000c6f5:	e8 52 f5 ff ff       	call   c000bc4c <malloc>
c000c6fa:	83 c4 10             	add    esp,0x10
c000c6fd:	89 c2                	mov    edx,eax
c000c6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c703:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c70a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c70e:	90                   	nop
c000c70f:	83 c4 0c             	add    esp,0xc
c000c712:	c3                   	ret    
c000c713:	90                   	nop

c000c714 <VgaText::isAtty()>:
c000c714:	b0 01                	mov    al,0x1
c000c716:	c3                   	ret    
c000c717:	90                   	nop

c000c718 <VgaText::~VgaText()>:
c000c718:	83 ec 0c             	sub    esp,0xc
c000c71b:	ba d0 05 02 c0       	mov    edx,0xc00205d0
c000c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c724:	89 10                	mov    DWORD PTR [eax],edx
c000c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c72a:	83 ec 0c             	sub    esp,0xc
c000c72d:	50                   	push   eax
c000c72e:	e8 e7 13 00 00       	call   c000db1a <UnixFile::~UnixFile()>
c000c733:	83 c4 10             	add    esp,0x10
c000c736:	90                   	nop
c000c737:	83 c4 0c             	add    esp,0xc
c000c73a:	c3                   	ret    
c000c73b:	90                   	nop

c000c73c <VgaText::~VgaText()>:
c000c73c:	83 ec 0c             	sub    esp,0xc
c000c73f:	83 ec 0c             	sub    esp,0xc
c000c742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c746:	e8 cd ff ff ff       	call   c000c718 <VgaText::~VgaText()>
c000c74b:	83 c4 10             	add    esp,0x10
c000c74e:	83 ec 08             	sub    esp,0x8
c000c751:	68 60 12 00 00       	push   0x1260
c000c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c75a:	e8 ea 27 00 00       	call   c000ef49 <operator delete(void*, unsigned long)>
c000c75f:	83 c4 10             	add    esp,0x10
c000c762:	83 c4 0c             	add    esp,0xc
c000c765:	c3                   	ret    

c000c766 <VgaText::read(unsigned long long, void*, int*)>:
c000c766:	83 ec 10             	sub    esp,0x10
c000c769:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c76d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c775:	e8 f0 53 00 00       	call   c0011b6a <readKeyboard(VgaText*, char*, unsigned long)>
c000c77a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c77e:	89 02                	mov    DWORD PTR [edx],eax
c000c780:	31 c0                	xor    eax,eax
c000c782:	83 c4 1c             	add    esp,0x1c
c000c785:	c3                   	ret    

c000c786 <setTerminalScrollLock(bool)>:
c000c786:	c3                   	ret    

c000c787 <addToTerminalCycle(VgaText*)>:
c000c787:	8b 15 60 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023860
c000c78d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c791:	85 d2                	test   edx,edx
c000c793:	75 0c                	jne    c000c7a1 <addToTerminalCycle(VgaText*)+0x1a>
c000c795:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c79b:	a3 60 38 02 c0       	mov    ds:0xc0023860,eax
c000c7a0:	c3                   	ret    
c000c7a1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c7a7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c7ad:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c7b3:	c3                   	ret    

c000c7b4 <installVgaTextImplementation()>:
c000c7b4:	83 ec 10             	sub    esp,0x10
c000c7b7:	6a 20                	push   0x20
c000c7b9:	6a 00                	push   0x0
c000c7bb:	68 40 38 02 c0       	push   0xc0023840
c000c7c0:	e8 43 3e ff ff       	call   c0000608 <memset>
c000c7c5:	83 c4 1c             	add    esp,0x1c
c000c7c8:	c3                   	ret    

c000c7c9 <scrollTerminalScrollLock(int)>:
c000c7c9:	c3                   	ret    

c000c7ca <VgaText::load()>:
c000c7ca:	53                   	push   ebx
c000c7cb:	31 c0                	xor    eax,eax
c000c7cd:	83 ec 58             	sub    esp,0x58
c000c7d0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7d4:	89 e2                	mov    edx,esp
c000c7d6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7da:	40                   	inc    eax
c000c7db:	83 f8 50             	cmp    eax,0x50
c000c7de:	75 f6                	jne    c000c7d6 <VgaText::load()+0xc>
c000c7e0:	31 c0                	xor    eax,eax
c000c7e2:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7e9:	84 c9                	test   cl,cl
c000c7eb:	74 06                	je     c000c7f3 <VgaText::load()+0x29>
c000c7ed:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7f0:	40                   	inc    eax
c000c7f1:	eb ef                	jmp    c000c7e2 <VgaText::load()+0x18>
c000c7f3:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7f9:	85 c0                	test   eax,eax
c000c7fb:	74 09                	je     c000c806 <VgaText::load()+0x3c>
c000c7fd:	51                   	push   ecx
c000c7fe:	51                   	push   ecx
c000c7ff:	52                   	push   edx
c000c800:	53                   	push   ebx
c000c801:	ff d0                	call   eax
c000c803:	83 c4 10             	add    esp,0x10
c000c806:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c80c:	85 c0                	test   eax,eax
c000c80e:	74 09                	je     c000c819 <VgaText::load()+0x4f>
c000c810:	83 ec 0c             	sub    esp,0xc
c000c813:	53                   	push   ebx
c000c814:	ff d0                	call   eax
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	83 c4 58             	add    esp,0x58
c000c81c:	5b                   	pop    ebx
c000c81d:	c3                   	ret    

c000c81e <VgaText::updateCursor()>:
c000c81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c822:	39 05 64 38 02 c0    	cmp    DWORD PTR ds:0xc0023864,eax
c000c828:	75 0c                	jne    c000c836 <VgaText::updateCursor()+0x18>
c000c82a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c830:	85 c0                	test   eax,eax
c000c832:	74 02                	je     c000c836 <VgaText::updateCursor()+0x18>
c000c834:	ff e0                	jmp    eax
c000c836:	c3                   	ret    
c000c837:	90                   	nop

c000c838 <VgaText::showCursor(bool)>:
c000c838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c83c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c840:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <VgaText::disableBlink(bool)>:
c000c848:	56                   	push   esi
c000c849:	53                   	push   ebx
c000c84a:	51                   	push   ecx
c000c84b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c84f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c853:	39 1d 64 38 02 c0    	cmp    DWORD PTR ds:0xc0023864,ebx
c000c859:	75 18                	jne    c000c873 <VgaText::disableBlink(bool)+0x2b>
c000c85b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c861:	85 c0                	test   eax,eax
c000c863:	74 0e                	je     c000c873 <VgaText::disableBlink(bool)+0x2b>
c000c865:	89 f1                	mov    ecx,esi
c000c867:	52                   	push   edx
c000c868:	52                   	push   edx
c000c869:	0f b6 d1             	movzx  edx,cl
c000c86c:	52                   	push   edx
c000c86d:	53                   	push   ebx
c000c86e:	ff d0                	call   eax
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	89 f0                	mov    eax,esi
c000c875:	83 f0 01             	xor    eax,0x1
c000c878:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c87e:	58                   	pop    eax
c000c87f:	5b                   	pop    ebx
c000c880:	5e                   	pop    esi
c000c881:	c3                   	ret    

c000c882 <VgaText::doANSI_SGR(int)>:
c000c882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c88a:	85 d2                	test   edx,edx
c000c88c:	75 14                	jne    c000c8a2 <VgaText::doANSI_SGR(int)+0x20>
c000c88e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c894:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c89a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c8a0:	eb 65                	jmp    c000c907 <VgaText::doANSI_SGR(int)+0x85>
c000c8a2:	83 fa 07             	cmp    edx,0x7
c000c8a5:	75 14                	jne    c000c8bb <VgaText::doANSI_SGR(int)+0x39>
c000c8a7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c8ad:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c8b3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c8b9:	eb 4c                	jmp    c000c907 <VgaText::doANSI_SGR(int)+0x85>
c000c8bb:	83 fa 1b             	cmp    edx,0x1b
c000c8be:	74 ce                	je     c000c88e <VgaText::doANSI_SGR(int)+0xc>
c000c8c0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c8c3:	83 f9 07             	cmp    ecx,0x7
c000c8c6:	77 09                	ja     c000c8d1 <VgaText::doANSI_SGR(int)+0x4f>
c000c8c8:	8b 14 8d 00 2c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd400]
c000c8cf:	eb 20                	jmp    c000c8f1 <VgaText::doANSI_SGR(int)+0x6f>
c000c8d1:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8d4:	83 f9 07             	cmp    ecx,0x7
c000c8d7:	77 09                	ja     c000c8e2 <VgaText::doANSI_SGR(int)+0x60>
c000c8d9:	8b 14 8d 00 2c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd400]
c000c8e0:	eb 25                	jmp    c000c907 <VgaText::doANSI_SGR(int)+0x85>
c000c8e2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8e5:	83 f9 07             	cmp    ecx,0x7
c000c8e8:	77 0e                	ja     c000c8f8 <VgaText::doANSI_SGR(int)+0x76>
c000c8ea:	8b 14 95 b8 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd548]
c000c8f1:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8f7:	c3                   	ret    
c000c8f8:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8fb:	83 f9 07             	cmp    ecx,0x7
c000c8fe:	77 0d                	ja     c000c90d <VgaText::doANSI_SGR(int)+0x8b>
c000c900:	8b 14 95 90 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd570]
c000c907:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c90d:	c3                   	ret    

c000c90e <VgaText::setDefaultBgColour(VgaColour)>:
c000c90e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c916:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c91c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c922:	c3                   	ret    
c000c923:	90                   	nop

c000c924 <VgaText::setDefaultFgColour(VgaColour)>:
c000c924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c928:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c92c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c932:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c938:	c3                   	ret    
c000c939:	90                   	nop

c000c93a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c93a:	53                   	push   ebx
c000c93b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c93f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c943:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c947:	51                   	push   ecx
c000c948:	e8 c1 ff ff ff       	call   c000c90e <VgaText::setDefaultBgColour(VgaColour)>
c000c94d:	58                   	pop    eax
c000c94e:	5a                   	pop    edx
c000c94f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c953:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c957:	5b                   	pop    ebx
c000c958:	eb ca                	jmp    c000c924 <VgaText::setDefaultFgColour(VgaColour)>

c000c95a <VgaText::combineColours(unsigned char, unsigned char)>:
c000c95a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c95e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c963:	83 e0 0f             	and    eax,0xf
c000c966:	c1 e2 04             	shl    edx,0x4
c000c969:	09 d0                	or     eax,edx
c000c96b:	c3                   	ret    

c000c96c <VgaText::scrollScreen()>:
c000c96c:	57                   	push   edi
c000c96d:	56                   	push   esi
c000c96e:	be 01 00 00 00       	mov    esi,0x1
c000c973:	53                   	push   ebx
c000c974:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c978:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c97e:	31 ff                	xor    edi,edi
c000c980:	01 d9                	add    ecx,ebx
c000c982:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c985:	83 fe 17             	cmp    esi,0x17
c000c988:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c98e:	75 28                	jne    c000c9b8 <VgaText::scrollScreen()+0x4c>
c000c990:	f7 c7 01 00 00 00    	test   edi,0x1
c000c996:	74 1c                	je     c000c9b4 <VgaText::scrollScreen()+0x48>
c000c998:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c99f:	50                   	push   eax
c000c9a0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c9a7:	50                   	push   eax
c000c9a8:	e8 ad ff ff ff       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000c9ad:	5a                   	pop    edx
c000c9ae:	5a                   	pop    edx
c000c9af:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c9b2:	eb 04                	jmp    c000c9b8 <VgaText::scrollScreen()+0x4c>
c000c9b4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c9b8:	47                   	inc    edi
c000c9b9:	41                   	inc    ecx
c000c9ba:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c9c0:	75 c0                	jne    c000c982 <VgaText::scrollScreen()+0x16>
c000c9c2:	46                   	inc    esi
c000c9c3:	83 fe 18             	cmp    esi,0x18
c000c9c6:	75 b0                	jne    c000c978 <VgaText::scrollScreen()+0xc>
c000c9c8:	39 1d 64 38 02 c0    	cmp    DWORD PTR ds:0xc0023864,ebx
c000c9ce:	75 24                	jne    c000c9f4 <VgaText::scrollScreen()+0x88>
c000c9d0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9d7:	74 08                	je     c000c9e1 <VgaText::scrollScreen()+0x75>
c000c9d9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9df:	eb 13                	jmp    c000c9f4 <VgaText::scrollScreen()+0x88>
c000c9e1:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9e7:	85 c0                	test   eax,eax
c000c9e9:	74 09                	je     c000c9f4 <VgaText::scrollScreen()+0x88>
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	53                   	push   ebx
c000c9ef:	ff d0                	call   eax
c000c9f1:	83 c4 10             	add    esp,0x10
c000c9f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9f8:	5b                   	pop    ebx
c000c9f9:	5e                   	pop    esi
c000c9fa:	5f                   	pop    edi
c000c9fb:	e9 1e fe ff ff       	jmp    c000c81e <VgaText::updateCursor()>

c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ca00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ca05:	c1 e0 08             	shl    eax,0x8
c000ca08:	89 c2                	mov    edx,eax
c000ca0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ca0f:	09 d0                	or     eax,edx
c000ca11:	c3                   	ret    

c000ca12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ca12:	53                   	push   ebx
c000ca13:	83 ec 08             	sub    esp,0x8
c000ca16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca1f:	50                   	push   eax
c000ca20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca25:	50                   	push   eax
c000ca26:	e8 2f ff ff ff       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000ca2b:	5a                   	pop    edx
c000ca2c:	0f b6 c0             	movzx  eax,al
c000ca2f:	5b                   	pop    ebx
c000ca30:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca35:	50                   	push   eax
c000ca36:	53                   	push   ebx
c000ca37:	e8 c4 ff ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000ca3c:	5a                   	pop    edx
c000ca3d:	5a                   	pop    edx
c000ca3e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca44:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca48:	0f b7 d2             	movzx  edx,dx
c000ca4b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca50:	39 0d 64 38 02 c0    	cmp    DWORD PTR ds:0xc0023864,ecx
c000ca56:	75 14                	jne    c000ca6c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca58:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca5e:	85 c0                	test   eax,eax
c000ca60:	74 0a                	je     c000ca6c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca62:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca66:	83 c4 08             	add    esp,0x8
c000ca69:	5b                   	pop    ebx
c000ca6a:	ff e0                	jmp    eax
c000ca6c:	83 c4 08             	add    esp,0x8
c000ca6f:	5b                   	pop    ebx
c000ca70:	c3                   	ret    
c000ca71:	90                   	nop

c000ca72 <VgaText::getCursorX()>:
c000ca72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca76:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <VgaText::getCursorY()>:
c000ca7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca82:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca88:	c3                   	ret    
c000ca89:	90                   	nop

c000ca8a <VgaText::setCursor(int, int)>:
c000ca8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca92:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca9c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000caa2:	e9 77 fd ff ff       	jmp    c000c81e <VgaText::updateCursor()>
c000caa7:	90                   	nop

c000caa8 <VgaText::setCursorX(int)>:
c000caa8:	83 ec 10             	sub    esp,0x10
c000caab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caaf:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab9:	50                   	push   eax
c000caba:	e8 cb ff ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000cabf:	83 c4 1c             	add    esp,0x1c
c000cac2:	c3                   	ret    
c000cac3:	90                   	nop

c000cac4 <VgaText::setCursorY(int)>:
c000cac4:	83 ec 10             	sub    esp,0x10
c000cac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cacb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cacf:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cad5:	50                   	push   eax
c000cad6:	e8 af ff ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000cadb:	83 c4 1c             	add    esp,0x1c
c000cade:	c3                   	ret    
c000cadf:	90                   	nop

c000cae0 <VgaText::incrementCursor(bool)>:
c000cae0:	56                   	push   esi
c000cae1:	53                   	push   ebx
c000cae2:	51                   	push   ecx
c000cae3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cae7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000caeb:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000caf1:	40                   	inc    eax
c000caf2:	83 f8 50             	cmp    eax,0x50
c000caf5:	74 08                	je     c000caff <VgaText::incrementCursor(bool)+0x1f>
c000caf7:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cafd:	eb 33                	jmp    c000cb32 <VgaText::incrementCursor(bool)+0x52>
c000caff:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cb05:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cb0f:	8d 50 01             	lea    edx,[eax+0x1]
c000cb12:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cb18:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cb1e:	75 12                	jne    c000cb32 <VgaText::incrementCursor(bool)+0x52>
c000cb20:	83 ec 0c             	sub    esp,0xc
c000cb23:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cb29:	53                   	push   ebx
c000cb2a:	e8 3d fe ff ff       	call   c000c96c <VgaText::scrollScreen()>
c000cb2f:	83 c4 10             	add    esp,0x10
c000cb32:	89 f0                	mov    eax,esi
c000cb34:	84 c0                	test   al,al
c000cb36:	74 0c                	je     c000cb44 <VgaText::incrementCursor(bool)+0x64>
c000cb38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb3c:	5a                   	pop    edx
c000cb3d:	5b                   	pop    ebx
c000cb3e:	5e                   	pop    esi
c000cb3f:	e9 da fc ff ff       	jmp    c000c81e <VgaText::updateCursor()>
c000cb44:	58                   	pop    eax
c000cb45:	5b                   	pop    ebx
c000cb46:	5e                   	pop    esi
c000cb47:	c3                   	ret    

c000cb48 <VgaText::updateRAMUsageDisplay(int)>:
c000cb48:	53                   	push   ebx
c000cb49:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb4e:	6a 0f                	push   0xf
c000cb50:	6a 00                	push   0x0
c000cb52:	e8 03 fe ff ff       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000cb57:	5a                   	pop    edx
c000cb58:	59                   	pop    ecx
c000cb59:	0f b6 c8             	movzx  ecx,al
c000cb5c:	51                   	push   ecx
c000cb5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb61:	99                   	cdq    
c000cb62:	f7 fb                	idiv   ebx
c000cb64:	89 d3                	mov    ebx,edx
c000cb66:	83 c0 30             	add    eax,0x30
c000cb69:	83 c3 30             	add    ebx,0x30
c000cb6c:	0f be c0             	movsx  eax,al
c000cb6f:	0f b6 db             	movzx  ebx,bl
c000cb72:	50                   	push   eax
c000cb73:	e8 88 fe ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb78:	5a                   	pop    edx
c000cb79:	5a                   	pop    edx
c000cb7a:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb80:	51                   	push   ecx
c000cb81:	53                   	push   ebx
c000cb82:	e8 79 fe ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb87:	5b                   	pop    ebx
c000cb88:	5a                   	pop    edx
c000cb89:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb8f:	51                   	push   ecx
c000cb90:	6a 25                	push   0x25
c000cb92:	e8 69 fe ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cb97:	59                   	pop    ecx
c000cb98:	5b                   	pop    ebx
c000cb99:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb9f:	5b                   	pop    ebx
c000cba0:	c3                   	ret    
c000cba1:	90                   	nop

c000cba2 <VgaText::updateDiskUsage()>:
c000cba2:	55                   	push   ebp
c000cba3:	bd 10 27 00 00       	mov    ebp,0x2710
c000cba8:	57                   	push   edi
c000cba9:	56                   	push   esi
c000cbaa:	53                   	push   ebx
c000cbab:	6a 0f                	push   0xf
c000cbad:	6a 00                	push   0x0
c000cbaf:	e8 a6 fd ff ff       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000cbb4:	5a                   	pop    edx
c000cbb5:	0f b6 d8             	movzx  ebx,al
c000cbb8:	59                   	pop    ecx
c000cbb9:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c000cbbe:	53                   	push   ebx
c000cbbf:	b9 0a 00 00 00       	mov    ecx,0xa
c000cbc4:	99                   	cdq    
c000cbc5:	f7 fd                	idiv   ebp
c000cbc7:	99                   	cdq    
c000cbc8:	f7 f9                	idiv   ecx
c000cbca:	8d 42 30             	lea    eax,[edx+0x30]
c000cbcd:	0f b6 c0             	movzx  eax,al
c000cbd0:	50                   	push   eax
c000cbd1:	e8 2a fe ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbd6:	5e                   	pop    esi
c000cbd7:	5f                   	pop    edi
c000cbd8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbde:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbe3:	53                   	push   ebx
c000cbe4:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c000cbe9:	99                   	cdq    
c000cbea:	f7 ff                	idiv   edi
c000cbec:	99                   	cdq    
c000cbed:	f7 f9                	idiv   ecx
c000cbef:	8d 42 30             	lea    eax,[edx+0x30]
c000cbf2:	0f b6 c0             	movzx  eax,al
c000cbf5:	50                   	push   eax
c000cbf6:	e8 05 fe ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cbfb:	5a                   	pop    edx
c000cbfc:	5e                   	pop    esi
c000cbfd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cc03:	be 64 00 00 00       	mov    esi,0x64
c000cc08:	53                   	push   ebx
c000cc09:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c000cc0e:	99                   	cdq    
c000cc0f:	f7 fe                	idiv   esi
c000cc11:	99                   	cdq    
c000cc12:	f7 f9                	idiv   ecx
c000cc14:	8d 42 30             	lea    eax,[edx+0x30]
c000cc17:	0f b6 c0             	movzx  eax,al
c000cc1a:	50                   	push   eax
c000cc1b:	e8 e0 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc20:	5a                   	pop    edx
c000cc21:	5a                   	pop    edx
c000cc22:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cc28:	53                   	push   ebx
c000cc29:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c000cc2e:	99                   	cdq    
c000cc2f:	f7 f9                	idiv   ecx
c000cc31:	99                   	cdq    
c000cc32:	f7 f9                	idiv   ecx
c000cc34:	8d 42 30             	lea    eax,[edx+0x30]
c000cc37:	0f b6 c0             	movzx  eax,al
c000cc3a:	50                   	push   eax
c000cc3b:	e8 c0 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc40:	5a                   	pop    edx
c000cc41:	5a                   	pop    edx
c000cc42:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc48:	53                   	push   ebx
c000cc49:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c000cc4e:	99                   	cdq    
c000cc4f:	f7 f9                	idiv   ecx
c000cc51:	8d 42 30             	lea    eax,[edx+0x30]
c000cc54:	0f b6 c0             	movzx  eax,al
c000cc57:	50                   	push   eax
c000cc58:	e8 a3 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc5d:	5a                   	pop    edx
c000cc5e:	5a                   	pop    edx
c000cc5f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc65:	53                   	push   ebx
c000cc66:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c000cc6b:	99                   	cdq    
c000cc6c:	f7 fd                	idiv   ebp
c000cc6e:	99                   	cdq    
c000cc6f:	f7 f9                	idiv   ecx
c000cc71:	8d 42 30             	lea    eax,[edx+0x30]
c000cc74:	0f b6 c0             	movzx  eax,al
c000cc77:	50                   	push   eax
c000cc78:	e8 83 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc7d:	5d                   	pop    ebp
c000cc7e:	5a                   	pop    edx
c000cc7f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc85:	53                   	push   ebx
c000cc86:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c000cc8b:	99                   	cdq    
c000cc8c:	f7 ff                	idiv   edi
c000cc8e:	99                   	cdq    
c000cc8f:	f7 f9                	idiv   ecx
c000cc91:	8d 42 30             	lea    eax,[edx+0x30]
c000cc94:	0f b6 c0             	movzx  eax,al
c000cc97:	50                   	push   eax
c000cc98:	e8 63 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000cc9d:	5f                   	pop    edi
c000cc9e:	5d                   	pop    ebp
c000cc9f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cca5:	53                   	push   ebx
c000cca6:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c000ccab:	99                   	cdq    
c000ccac:	f7 fe                	idiv   esi
c000ccae:	99                   	cdq    
c000ccaf:	f7 f9                	idiv   ecx
c000ccb1:	8d 42 30             	lea    eax,[edx+0x30]
c000ccb4:	0f b6 c0             	movzx  eax,al
c000ccb7:	50                   	push   eax
c000ccb8:	e8 43 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccbd:	5a                   	pop    edx
c000ccbe:	5e                   	pop    esi
c000ccbf:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000ccc5:	53                   	push   ebx
c000ccc6:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c000cccb:	99                   	cdq    
c000cccc:	f7 f9                	idiv   ecx
c000ccce:	99                   	cdq    
c000cccf:	f7 f9                	idiv   ecx
c000ccd1:	8d 42 30             	lea    eax,[edx+0x30]
c000ccd4:	0f b6 c0             	movzx  eax,al
c000ccd7:	50                   	push   eax
c000ccd8:	e8 23 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccdd:	5f                   	pop    edi
c000ccde:	5d                   	pop    ebp
c000ccdf:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000cce5:	53                   	push   ebx
c000cce6:	a1 40 55 02 c0       	mov    eax,ds:0xc0025540
c000cceb:	99                   	cdq    
c000ccec:	f7 f9                	idiv   ecx
c000ccee:	83 c2 30             	add    edx,0x30
c000ccf1:	0f b6 d2             	movzx  edx,dl
c000ccf4:	52                   	push   edx
c000ccf5:	e8 06 fd ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000ccfa:	5a                   	pop    edx
c000ccfb:	59                   	pop    ecx
c000ccfc:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000cd02:	5b                   	pop    ebx
c000cd03:	5e                   	pop    esi
c000cd04:	5f                   	pop    edi
c000cd05:	5d                   	pop    ebp
c000cd06:	c3                   	ret    
c000cd07:	90                   	nop

c000cd08 <VgaText::updateTitle()>:
c000cd08:	53                   	push   ebx
c000cd09:	31 c0                	xor    eax,eax
c000cd0b:	83 ec 58             	sub    esp,0x58
c000cd0e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cd12:	89 e1                	mov    ecx,esp
c000cd14:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000cd18:	40                   	inc    eax
c000cd19:	83 f8 50             	cmp    eax,0x50
c000cd1c:	75 f6                	jne    c000cd14 <VgaText::updateTitle()+0xc>
c000cd1e:	31 c0                	xor    eax,eax
c000cd20:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cd27:	84 db                	test   bl,bl
c000cd29:	74 06                	je     c000cd31 <VgaText::updateTitle()+0x29>
c000cd2b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd2e:	40                   	inc    eax
c000cd2f:	eb ef                	jmp    c000cd20 <VgaText::updateTitle()+0x18>
c000cd31:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd37:	85 c0                	test   eax,eax
c000cd39:	74 09                	je     c000cd44 <VgaText::updateTitle()+0x3c>
c000cd3b:	53                   	push   ebx
c000cd3c:	53                   	push   ebx
c000cd3d:	51                   	push   ecx
c000cd3e:	52                   	push   edx
c000cd3f:	ff d0                	call   eax
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	e8 59 fe ff ff       	call   c000cba2 <VgaText::updateDiskUsage()>
c000cd49:	83 c4 58             	add    esp,0x58
c000cd4c:	5b                   	pop    ebx
c000cd4d:	c3                   	ret    

c000cd4e <VgaText::setTitleTextColour(VgaColour)>:
c000cd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd56:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd5c:	eb aa                	jmp    c000cd08 <VgaText::updateTitle()>

c000cd5e <VgaText::setTitleColour(VgaColour)>:
c000cd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd66:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd6c:	eb 9a                	jmp    c000cd08 <VgaText::updateTitle()>

c000cd6e <VgaText::setTitle(char*)>:
c000cd6e:	53                   	push   ebx
c000cd6f:	83 ec 10             	sub    esp,0x10
c000cd72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd80:	50                   	push   eax
c000cd81:	e8 21 39 ff ff       	call   c00006a7 <strcpy>
c000cd86:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd8a:	83 c4 18             	add    esp,0x18
c000cd8d:	5b                   	pop    ebx
c000cd8e:	e9 75 ff ff ff       	jmp    c000cd08 <VgaText::updateTitle()>
c000cd93:	90                   	nop

c000cd94 <VgaText::decrementCursor(bool)>:
c000cd94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd9c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cda2:	85 c0                	test   eax,eax
c000cda4:	74 07                	je     c000cdad <VgaText::decrementCursor(bool)+0x19>
c000cda6:	48                   	dec    eax
c000cda7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cdad:	84 c9                	test   cl,cl
c000cdaf:	74 09                	je     c000cdba <VgaText::decrementCursor(bool)+0x26>
c000cdb1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdb5:	e9 64 fa ff ff       	jmp    c000c81e <VgaText::updateCursor()>
c000cdba:	c3                   	ret    
c000cdbb:	90                   	nop

c000cdbc <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cdbc:	53                   	push   ebx
c000cdbd:	83 ec 08             	sub    esp,0x8
c000cdc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cdc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdcc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cdd0:	3c 07                	cmp    al,0x7
c000cdd2:	75 2a                	jne    c000cdfe <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cdd4:	a1 0c 39 02 c0       	mov    eax,ds:0xc002390c
c000cdd9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cde1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cde9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdf5:	83 c4 08             	add    esp,0x8
c000cdf8:	5b                   	pop    ebx
c000cdf9:	e9 16 30 00 00       	jmp    c000fe14 <Buzzer::beep(int, int, bool)>
c000cdfe:	3c 0d                	cmp    al,0xd
c000ce00:	75 0c                	jne    c000ce0e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000ce02:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce0c:	eb 3b                	jmp    c000ce49 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000ce0e:	3c 0a                	cmp    al,0xa
c000ce10:	75 40                	jne    c000ce52 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000ce12:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce18:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce22:	8d 50 01             	lea    edx,[eax+0x1]
c000ce25:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ce2b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce31:	75 12                	jne    c000ce45 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce33:	83 ec 0c             	sub    esp,0xc
c000ce36:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce3c:	53                   	push   ebx
c000ce3d:	e8 2a fb ff ff       	call   c000c96c <VgaText::scrollScreen()>
c000ce42:	83 c4 10             	add    esp,0x10
c000ce45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce49:	83 c4 08             	add    esp,0x8
c000ce4c:	5b                   	pop    ebx
c000ce4d:	e9 cc f9 ff ff       	jmp    c000c81e <VgaText::updateCursor()>
c000ce52:	3c 08                	cmp    al,0x8
c000ce54:	75 31                	jne    c000ce87 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce56:	50                   	push   eax
c000ce57:	50                   	push   eax
c000ce58:	6a 01                	push   0x1
c000ce5a:	53                   	push   ebx
c000ce5b:	e8 34 ff ff ff       	call   c000cd94 <VgaText::decrementCursor(bool)>
c000ce60:	5a                   	pop    edx
c000ce61:	59                   	pop    ecx
c000ce62:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce68:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce6e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce74:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce7a:	6a 20                	push   0x20
c000ce7c:	53                   	push   ebx
c000ce7d:	e8 90 fb ff ff       	call   c000ca12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce82:	83 c4 28             	add    esp,0x28
c000ce85:	5b                   	pop    ebx
c000ce86:	c3                   	ret    
c000ce87:	83 ec 08             	sub    esp,0x8
c000ce8a:	0f be c0             	movsx  eax,al
c000ce8d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce93:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce99:	51                   	push   ecx
c000ce9a:	52                   	push   edx
c000ce9b:	50                   	push   eax
c000ce9c:	53                   	push   ebx
c000ce9d:	e8 70 fb ff ff       	call   c000ca12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000cea2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000cea6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ceae:	83 c4 28             	add    esp,0x28
c000ceb1:	5b                   	pop    ebx
c000ceb2:	e9 29 fc ff ff       	jmp    c000cae0 <VgaText::incrementCursor(bool)>
c000ceb7:	90                   	nop

c000ceb8 <VgaText::isShowingCursor()>:
c000ceb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::isBlinkDisabled()>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cece:	83 f0 01             	xor    eax,0x1
c000ced1:	c3                   	ret    

c000ced2 <VgaText::setCursorHeight(int)>:
c000ced2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceda:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000cee0:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cee7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceeb:	e9 48 f9 ff ff       	jmp    c000c838 <VgaText::showCursor(bool)>

c000cef0 <VgaText::getCursorHeight()>:
c000cef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cef4:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cefa:	c3                   	ret    

c000cefb <setActiveTerminal(VgaText*)>:
c000cefb:	53                   	push   ebx
c000cefc:	83 ec 08             	sub    esp,0x8
c000ceff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf03:	85 db                	test   ebx,ebx
c000cf05:	75 11                	jne    c000cf18 <setActiveTerminal(VgaText*)+0x1d>
c000cf07:	c7 44 24 10 28 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020528
c000cf0f:	83 c4 08             	add    esp,0x8
c000cf12:	5b                   	pop    ebx
c000cf13:	e9 a6 7d 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c000cf18:	50                   	push   eax
c000cf19:	50                   	push   eax
c000cf1a:	53                   	push   ebx
c000cf1b:	68 36 05 02 c0       	push   0xc0020536
c000cf20:	e8 04 21 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000cf25:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	85 c0                	test   eax,eax
c000cf2f:	74 0c                	je     c000cf3d <setActiveTerminal(VgaText*)+0x42>
c000cf31:	83 ec 0c             	sub    esp,0xc
c000cf34:	50                   	push   eax
c000cf35:	e8 e4 f8 ff ff       	call   c000c81e <VgaText::updateCursor()>
c000cf3a:	83 c4 10             	add    esp,0x10
c000cf3d:	89 1d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,ebx
c000cf43:	51                   	push   ecx
c000cf44:	51                   	push   ecx
c000cf45:	53                   	push   ebx
c000cf46:	68 4e 05 02 c0       	push   0xc002054e
c000cf4b:	e8 d9 20 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000cf50:	83 c4 0c             	add    esp,0xc
c000cf53:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf59:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf5f:	53                   	push   ebx
c000cf60:	e8 25 fb ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000cf65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf68:	e8 57 ff ff ff       	call   c000cec4 <VgaText::isBlinkDisabled()>
c000cf6d:	5a                   	pop    edx
c000cf6e:	0f b6 c0             	movzx  eax,al
c000cf71:	59                   	pop    ecx
c000cf72:	50                   	push   eax
c000cf73:	53                   	push   ebx
c000cf74:	e8 cf f8 ff ff       	call   c000c848 <VgaText::disableBlink(bool)>
c000cf79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf7c:	e8 6f ff ff ff       	call   c000cef0 <VgaText::getCursorHeight()>
c000cf81:	5a                   	pop    edx
c000cf82:	59                   	pop    ecx
c000cf83:	50                   	push   eax
c000cf84:	53                   	push   ebx
c000cf85:	e8 48 ff ff ff       	call   c000ced2 <VgaText::setCursorHeight(int)>
c000cf8a:	83 c4 10             	add    esp,0x10
c000cf8d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf94:	75 0a                	jne    c000cfa0 <setActiveTerminal(VgaText*)+0xa5>
c000cf96:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cfa0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cfa4:	83 c4 08             	add    esp,0x8
c000cfa7:	5b                   	pop    ebx
c000cfa8:	e9 1d f8 ff ff       	jmp    c000c7ca <VgaText::load()>

c000cfad <doTerminalCycle()>:
c000cfad:	83 ec 18             	sub    esp,0x18
c000cfb0:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c000cfb5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cfbb:	50                   	push   eax
c000cfbc:	a3 60 38 02 c0       	mov    ds:0xc0023860,eax
c000cfc1:	e8 35 ff ff ff       	call   c000cefb <setActiveTerminal(VgaText*)>
c000cfc6:	83 c4 1c             	add    esp,0x1c
c000cfc9:	c3                   	ret    

c000cfca <VgaText::doUpdate()>:
c000cfca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfce:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfd4:	85 c0                	test   eax,eax
c000cfd6:	74 02                	je     c000cfda <VgaText::doUpdate()+0x10>
c000cfd8:	ff e0                	jmp    eax
c000cfda:	c3                   	ret    
c000cfdb:	90                   	nop

c000cfdc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfdc:	55                   	push   ebp
c000cfdd:	57                   	push   edi
c000cfde:	56                   	push   esi
c000cfdf:	53                   	push   ebx
c000cfe0:	83 ec 1c             	sub    esp,0x1c
c000cfe3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfe7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfec:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cff3:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cff6:	50                   	push   eax
c000cff7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cffc:	50                   	push   eax
c000cffd:	e8 58 f9 ff ff       	call   c000c95a <VgaText::combineColours(unsigned char, unsigned char)>
c000d002:	59                   	pop    ecx
c000d003:	0f b6 c0             	movzx  eax,al
c000d006:	5b                   	pop    ebx
c000d007:	31 c9                	xor    ecx,ecx
c000d009:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d011:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d015:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d01f:	0f b7 db             	movzx  ebx,bx
c000d022:	01 db                	add    ebx,ebx
c000d024:	01 fb                	add    ebx,edi
c000d026:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d029:	84 c0                	test   al,al
c000d02b:	0f 84 38 01 00 00    	je     c000d169 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d031:	3c 0d                	cmp    al,0xd
c000d033:	75 0f                	jne    c000d044 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d035:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d03f:	e9 1f 01 00 00       	jmp    c000d163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d044:	3c 0a                	cmp    al,0xa
c000d046:	75 5b                	jne    c000d0a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d048:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d04e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d058:	8d 48 01             	lea    ecx,[eax+0x1]
c000d05b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d061:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d067:	75 12                	jne    c000d07b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d072:	55                   	push   ebp
c000d073:	e8 f4 f8 ff ff       	call   c000c96c <VgaText::scrollScreen()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	83 ec 0c             	sub    esp,0xc
c000d07e:	55                   	push   ebp
c000d07f:	e8 9a f7 ff ff       	call   c000c81e <VgaText::updateCursor()>
c000d084:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d08c:	83 c4 10             	add    esp,0x10
c000d08f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d095:	31 c9                	xor    ecx,ecx
c000d097:	0f b7 db             	movzx  ebx,bx
c000d09a:	01 db                	add    ebx,ebx
c000d09c:	01 fb                	add    ebx,edi
c000d09e:	e9 c0 00 00 00       	jmp    c000d163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0a3:	3c 08                	cmp    al,0x8
c000d0a5:	75 4e                	jne    c000d0f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d0a7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d0ab:	53                   	push   ebx
c000d0ac:	53                   	push   ebx
c000d0ad:	6a 01                	push   0x1
c000d0af:	55                   	push   ebp
c000d0b0:	e8 df fc ff ff       	call   c000cd94 <VgaText::decrementCursor(bool)>
c000d0b5:	58                   	pop    eax
c000d0b6:	5a                   	pop    edx
c000d0b7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0bd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0c3:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d0c9:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d0cf:	6a 20                	push   0x20
c000d0d1:	55                   	push   ebp
c000d0d2:	e8 3b f9 ff ff       	call   c000ca12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0d7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0df:	83 c4 20             	add    esp,0x20
c000d0e2:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0ec:	0f b7 db             	movzx  ebx,bx
c000d0ef:	01 db                	add    ebx,ebx
c000d0f1:	01 fb                	add    ebx,edi
c000d0f3:	eb 6e                	jmp    c000d163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0f5:	51                   	push   ecx
c000d0f6:	51                   	push   ecx
c000d0f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0fb:	50                   	push   eax
c000d0fc:	e8 ff f8 ff ff       	call   c000ca00 <VgaText::combineCharAndColour(char, unsigned char)>
c000d101:	83 c4 10             	add    esp,0x10
c000d104:	66 89 03             	mov    WORD PTR [ebx],ax
c000d107:	39 2d 64 38 02 c0    	cmp    DWORD PTR ds:0xc0023864,ebp
c000d10d:	75 2a                	jne    c000d139 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d10f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d115:	85 c0                	test   eax,eax
c000d117:	74 20                	je     c000d139 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d119:	52                   	push   edx
c000d11a:	52                   	push   edx
c000d11b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d121:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d127:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d12b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d12f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d132:	51                   	push   ecx
c000d133:	55                   	push   ebp
c000d134:	ff d0                	call   eax
c000d136:	83 c4 20             	add    esp,0x20
c000d139:	83 c3 02             	add    ebx,0x2
c000d13c:	50                   	push   eax
c000d13d:	50                   	push   eax
c000d13e:	6a 00                	push   0x0
c000d140:	55                   	push   ebp
c000d141:	e8 9a f9 ff ff       	call   c000cae0 <VgaText::incrementCursor(bool)>
c000d146:	83 c4 10             	add    esp,0x10
c000d149:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d150:	75 0f                	jne    c000d161 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d152:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d15a:	0f b7 db             	movzx  ebx,bx
c000d15d:	01 db                	add    ebx,ebx
c000d15f:	01 fb                	add    ebx,edi
c000d161:	b1 01                	mov    cl,0x1
c000d163:	46                   	inc    esi
c000d164:	e9 bd fe ff ff       	jmp    c000d026 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d169:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d16d:	83 ec 0c             	sub    esp,0xc
c000d170:	55                   	push   ebp
c000d171:	e8 a8 f6 ff ff       	call   c000c81e <VgaText::updateCursor()>
c000d176:	83 c4 10             	add    esp,0x10
c000d179:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d17d:	84 c9                	test   cl,cl
c000d17f:	74 0c                	je     c000d18d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d181:	83 ec 0c             	sub    esp,0xc
c000d184:	55                   	push   ebp
c000d185:	e8 40 fe ff ff       	call   c000cfca <VgaText::doUpdate()>
c000d18a:	83 c4 10             	add    esp,0x10
c000d18d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d194:	83 c4 1c             	add    esp,0x1c
c000d197:	5b                   	pop    ebx
c000d198:	5e                   	pop    esi
c000d199:	5f                   	pop    edi
c000d19a:	5d                   	pop    ebp
c000d19b:	c3                   	ret    

c000d19c <VgaText::clearScreen()>:
c000d19c:	57                   	push   edi
c000d19d:	56                   	push   esi
c000d19e:	31 f6                	xor    esi,esi
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d1a5:	52                   	push   edx
c000d1a6:	6a 00                	push   0x0
c000d1a8:	6a 00                	push   0x0
c000d1aa:	53                   	push   ebx
c000d1ab:	e8 da f8 ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000d1b0:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d1b7:	83 c4 10             	add    esp,0x10
c000d1ba:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d1c0:	7e 26                	jle    c000d1e8 <VgaText::clearScreen()+0x4c>
c000d1c2:	31 ff                	xor    edi,edi
c000d1c4:	50                   	push   eax
c000d1c5:	50                   	push   eax
c000d1c6:	56                   	push   esi
c000d1c7:	57                   	push   edi
c000d1c8:	47                   	inc    edi
c000d1c9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d1cf:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1d5:	6a 20                	push   0x20
c000d1d7:	53                   	push   ebx
c000d1d8:	e8 35 f8 ff ff       	call   c000ca12 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1dd:	83 c4 20             	add    esp,0x20
c000d1e0:	83 ff 50             	cmp    edi,0x50
c000d1e3:	75 df                	jne    c000d1c4 <VgaText::clearScreen()+0x28>
c000d1e5:	46                   	inc    esi
c000d1e6:	eb d2                	jmp    c000d1ba <VgaText::clearScreen()+0x1e>
c000d1e8:	83 ec 0c             	sub    esp,0xc
c000d1eb:	53                   	push   ebx
c000d1ec:	e8 d9 fd ff ff       	call   c000cfca <VgaText::doUpdate()>
c000d1f1:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1f8:	83 c4 10             	add    esp,0x10
c000d1fb:	5b                   	pop    ebx
c000d1fc:	5e                   	pop    esi
c000d1fd:	5f                   	pop    edi
c000d1fe:	c3                   	ret    
c000d1ff:	90                   	nop

c000d200 <VgaText::putchar(char)>:
c000d200:	56                   	push   esi
c000d201:	53                   	push   ebx
c000d202:	83 ec 14             	sub    esp,0x14
c000d205:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d209:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d20d:	3c 5b                	cmp    al,0x5b
c000d20f:	75 21                	jne    c000d232 <VgaText::putchar(char)+0x32>
c000d211:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d218:	74 28                	je     c000d242 <VgaText::putchar(char)+0x42>
c000d21a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d223:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d22d:	e9 e2 00 00 00       	jmp    c000d314 <VgaText::putchar(char)+0x114>
c000d232:	3c 1b                	cmp    al,0x1b
c000d234:	75 0c                	jne    c000d242 <VgaText::putchar(char)+0x42>
c000d236:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d23d:	e9 d2 00 00 00       	jmp    c000d314 <VgaText::putchar(char)+0x114>
c000d242:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d248:	84 c9                	test   cl,cl
c000d24a:	0f 84 ab 00 00 00    	je     c000d2fb <VgaText::putchar(char)+0xfb>
c000d250:	8d 50 c0             	lea    edx,[eax-0x40]
c000d253:	80 fa 3e             	cmp    dl,0x3e
c000d256:	0f 87 82 00 00 00    	ja     c000d2de <VgaText::putchar(char)+0xde>
c000d25c:	3c 6d                	cmp    al,0x6d
c000d25e:	75 4d                	jne    c000d2ad <VgaText::putchar(char)+0xad>
c000d260:	31 f6                	xor    esi,esi
c000d262:	31 d2                	xor    edx,edx
c000d264:	31 c0                	xor    eax,eax
c000d266:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d26c:	7e 30                	jle    c000d29e <VgaText::putchar(char)+0x9e>
c000d26e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d276:	80 fa 3b             	cmp    dl,0x3b
c000d279:	75 17                	jne    c000d292 <VgaText::putchar(char)+0x92>
c000d27b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d27f:	50                   	push   eax
c000d280:	53                   	push   ebx
c000d281:	e8 fc f5 ff ff       	call   c000c882 <VgaText::doANSI_SGR(int)>
c000d286:	59                   	pop    ecx
c000d287:	31 d2                	xor    edx,edx
c000d289:	58                   	pop    eax
c000d28a:	31 c0                	xor    eax,eax
c000d28c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d290:	eb 09                	jmp    c000d29b <VgaText::putchar(char)+0x9b>
c000d292:	6b c0 0a             	imul   eax,eax,0xa
c000d295:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d299:	88 ca                	mov    dl,cl
c000d29b:	46                   	inc    esi
c000d29c:	eb c8                	jmp    c000d266 <VgaText::putchar(char)+0x66>
c000d29e:	84 d2                	test   dl,dl
c000d2a0:	74 31                	je     c000d2d3 <VgaText::putchar(char)+0xd3>
c000d2a2:	50                   	push   eax
c000d2a3:	53                   	push   ebx
c000d2a4:	e8 d9 f5 ff ff       	call   c000c882 <VgaText::doANSI_SGR(int)>
c000d2a9:	58                   	pop    eax
c000d2aa:	5a                   	pop    edx
c000d2ab:	eb 26                	jmp    c000d2d3 <VgaText::putchar(char)+0xd3>
c000d2ad:	3c 4a                	cmp    al,0x4a
c000d2af:	75 22                	jne    c000d2d3 <VgaText::putchar(char)+0xd3>
c000d2b1:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d2b8:	75 19                	jne    c000d2d3 <VgaText::putchar(char)+0xd3>
c000d2ba:	83 ec 0c             	sub    esp,0xc
c000d2bd:	53                   	push   ebx
c000d2be:	e8 d9 fe ff ff       	call   c000d19c <VgaText::clearScreen()>
c000d2c3:	83 c4 0c             	add    esp,0xc
c000d2c6:	6a 00                	push   0x0
c000d2c8:	6a 00                	push   0x0
c000d2ca:	53                   	push   ebx
c000d2cb:	e8 ba f7 ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000d2d0:	83 c4 10             	add    esp,0x10
c000d2d3:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2dc:	eb 36                	jmp    c000d314 <VgaText::putchar(char)+0x114>
c000d2de:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2e4:	83 fa 0e             	cmp    edx,0xe
c000d2e7:	7f 2b                	jg     c000d314 <VgaText::putchar(char)+0x114>
c000d2e9:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2ec:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2f2:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2f9:	eb 19                	jmp    c000d314 <VgaText::putchar(char)+0x114>
c000d2fb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d301:	0f be c0             	movsx  eax,al
c000d304:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d30a:	50                   	push   eax
c000d30b:	53                   	push   ebx
c000d30c:	e8 ab fa ff ff       	call   c000cdbc <VgaText::putchar(char, VgaColour, VgaColour)>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	83 c4 14             	add    esp,0x14
c000d317:	5b                   	pop    ebx
c000d318:	5e                   	pop    esi
c000d319:	c3                   	ret    

c000d31a <VgaText::puts(char const*)>:
c000d31a:	53                   	push   ebx
c000d31b:	83 ec 08             	sub    esp,0x8
c000d31e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d322:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d325:	84 c0                	test   al,al
c000d327:	74 12                	je     c000d33b <VgaText::puts(char const*)+0x21>
c000d329:	43                   	inc    ebx
c000d32a:	51                   	push   ecx
c000d32b:	51                   	push   ecx
c000d32c:	50                   	push   eax
c000d32d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d331:	e8 ca fe ff ff       	call   c000d200 <VgaText::putchar(char)>
c000d336:	83 c4 10             	add    esp,0x10
c000d339:	eb e7                	jmp    c000d322 <VgaText::puts(char const*)+0x8>
c000d33b:	83 c4 08             	add    esp,0x8
c000d33e:	5b                   	pop    ebx
c000d33f:	c3                   	ret    

c000d340 <VgaText::putx(unsigned int)>:
c000d340:	57                   	push   edi
c000d341:	b9 11 00 00 00       	mov    ecx,0x11
c000d346:	56                   	push   esi
c000d347:	be 6a 05 02 c0       	mov    esi,0xc002056a
c000d34c:	53                   	push   ebx
c000d34d:	83 ec 20             	sub    esp,0x20
c000d350:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d354:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d358:	fc                   	cld    
c000d359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d35b:	be 08 00 00 00       	mov    esi,0x8
c000d360:	50                   	push   eax
c000d361:	50                   	push   eax
c000d362:	89 d8                	mov    eax,ebx
c000d364:	c1 e3 04             	shl    ebx,0x4
c000d367:	c1 e8 1c             	shr    eax,0x1c
c000d36a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d36f:	50                   	push   eax
c000d370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d374:	e8 87 fe ff ff       	call   c000d200 <VgaText::putchar(char)>
c000d379:	83 c4 10             	add    esp,0x10
c000d37c:	4e                   	dec    esi
c000d37d:	75 e1                	jne    c000d360 <VgaText::putx(unsigned int)+0x20>
c000d37f:	83 c4 20             	add    esp,0x20
c000d382:	5b                   	pop    ebx
c000d383:	5e                   	pop    esi
c000d384:	5f                   	pop    edi
c000d385:	c3                   	ret    

c000d386 <VgaText::VgaText(char const*)>:
c000d386:	57                   	push   edi
c000d387:	56                   	push   esi
c000d388:	53                   	push   ebx
c000d389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38d:	83 ec 08             	sub    esp,0x8
c000d390:	6a 00                	push   0x0
c000d392:	50                   	push   eax
c000d393:	e8 e0 05 00 00       	call   c000d978 <UnixFile::UnixFile(int)>
c000d398:	83 c4 10             	add    esp,0x10
c000d39b:	ba d0 05 02 c0       	mov    edx,0xc00205d0
c000d3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a4:	89 10                	mov    DWORD PTR [eax],edx
c000d3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3aa:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b8:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c6:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3ea:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f8:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d403:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d414:	bb 40 38 02 c0       	mov    ebx,0xc0023840
c000d419:	b8 08 00 00 00       	mov    eax,0x8
c000d41e:	fc                   	cld    
c000d41f:	89 d7                	mov    edi,edx
c000d421:	89 de                	mov    esi,ebx
c000d423:	89 c1                	mov    ecx,eax
c000d425:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d42b:	05 1e 10 00 00       	add    eax,0x101e
c000d430:	83 ec 08             	sub    esp,0x8
c000d433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d437:	50                   	push   eax
c000d438:	e8 6a 32 ff ff       	call   c00006a7 <strcpy>
c000d43d:	83 c4 10             	add    esp,0x10
c000d440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d444:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d452:	83 c0 0c             	add    eax,0xc
c000d455:	83 ec 04             	sub    esp,0x4
c000d458:	68 00 0f 00 00       	push   0xf00
c000d45d:	6a 00                	push   0x0
c000d45f:	50                   	push   eax
c000d460:	e8 a3 31 ff ff       	call   c0000608 <memset>
c000d465:	83 c4 10             	add    esp,0x10
c000d468:	83 ec 04             	sub    esp,0x4
c000d46b:	6a 00                	push   0x0
c000d46d:	6a 07                	push   0x7
c000d46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d473:	e8 c2 f4 ff ff       	call   c000c93a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	83 ec 08             	sub    esp,0x8
c000d47e:	6a 02                	push   0x2
c000d480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d484:	e8 49 fa ff ff       	call   c000ced2 <VgaText::setCursorHeight(int)>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 ec 04             	sub    esp,0x4
c000d48f:	6a 00                	push   0x0
c000d491:	6a 00                	push   0x0
c000d493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d497:	e8 ee f5 ff ff       	call   c000ca8a <VgaText::setCursor(int, int)>
c000d49c:	83 c4 10             	add    esp,0x10
c000d49f:	83 ec 08             	sub    esp,0x8
c000d4a2:	6a 01                	push   0x1
c000d4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a8:	e8 8b f3 ff ff       	call   c000c838 <VgaText::showCursor(bool)>
c000d4ad:	83 c4 10             	add    esp,0x10
c000d4b0:	83 ec 08             	sub    esp,0x8
c000d4b3:	6a 01                	push   0x1
c000d4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b9:	e8 8a f3 ff ff       	call   c000c848 <VgaText::disableBlink(bool)>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	83 ec 0c             	sub    esp,0xc
c000d4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c8:	e8 cf fc ff ff       	call   c000d19c <VgaText::clearScreen()>
c000d4cd:	83 c4 10             	add    esp,0x10
c000d4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4df:	05 9e 10 00 00       	add    eax,0x109e
c000d4e4:	83 ec 04             	sub    esp,0x4
c000d4e7:	68 96 00 00 00       	push   0x96
c000d4ec:	6a 00                	push   0x0
c000d4ee:	50                   	push   eax
c000d4ef:	e8 14 31 ff ff       	call   c0000608 <memset>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4fb:	05 34 11 00 00       	add    eax,0x1134
c000d500:	83 ec 04             	sub    esp,0x4
c000d503:	68 2c 01 00 00       	push   0x12c
c000d508:	6a 00                	push   0x0
c000d50a:	50                   	push   eax
c000d50b:	e8 f8 30 ff ff       	call   c0000608 <memset>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	90                   	nop
c000d514:	5b                   	pop    ebx
c000d515:	5e                   	pop    esi
c000d516:	5f                   	pop    edi
c000d517:	c3                   	ret    

c000d518 <VgaText::receiveKey(unsigned char)>:
c000d518:	55                   	push   ebp
c000d519:	57                   	push   edi
c000d51a:	56                   	push   esi
c000d51b:	53                   	push   ebx
c000d51c:	83 ec 1c             	sub    esp,0x1c
c000d51f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d523:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d527:	84 db                	test   bl,bl
c000d529:	0f 84 c9 00 00 00    	je     c000d5f8 <VgaText::receiveKey(unsigned char)+0xe0>
c000d52f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d535:	80 fb 08             	cmp    bl,0x8
c000d538:	75 2c                	jne    c000d566 <VgaText::receiveKey(unsigned char)+0x4e>
c000d53a:	83 ec 0c             	sub    esp,0xc
c000d53d:	57                   	push   edi
c000d53e:	e8 e2 30 ff ff       	call   c0000625 <strlen>
c000d543:	83 c4 10             	add    esp,0x10
c000d546:	85 c0                	test   eax,eax
c000d548:	74 41                	je     c000d58b <VgaText::receiveKey(unsigned char)+0x73>
c000d54a:	50                   	push   eax
c000d54b:	50                   	push   eax
c000d54c:	6a 08                	push   0x8
c000d54e:	56                   	push   esi
c000d54f:	e8 ac fc ff ff       	call   c000d200 <VgaText::putchar(char)>
c000d554:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d557:	e8 c9 30 ff ff       	call   c0000625 <strlen>
c000d55c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d564:	eb 22                	jmp    c000d588 <VgaText::receiveKey(unsigned char)+0x70>
c000d566:	0f be c3             	movsx  eax,bl
c000d569:	52                   	push   edx
c000d56a:	52                   	push   edx
c000d56b:	50                   	push   eax
c000d56c:	56                   	push   esi
c000d56d:	e8 8e fc ff ff       	call   c000d200 <VgaText::putchar(char)>
c000d572:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d576:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d57b:	59                   	pop    ecx
c000d57c:	5d                   	pop    ebp
c000d57d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d581:	50                   	push   eax
c000d582:	57                   	push   edi
c000d583:	e8 e3 31 ff ff       	call   c000076b <strcat>
c000d588:	83 c4 10             	add    esp,0x10
c000d58b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d592:	75 05                	jne    c000d599 <VgaText::receiveKey(unsigned char)+0x81>
c000d594:	80 fb 0a             	cmp    bl,0xa
c000d597:	75 53                	jne    c000d5ec <VgaText::receiveKey(unsigned char)+0xd4>
c000d599:	83 ec 0c             	sub    esp,0xc
c000d59c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d5a2:	53                   	push   ebx
c000d5a3:	e8 7d 30 ff ff       	call   c0000625 <strlen>
c000d5a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d5ab:	89 c5                	mov    ebp,eax
c000d5ad:	e8 73 30 ff ff       	call   c0000625 <strlen>
c000d5b2:	83 c4 10             	add    esp,0x10
c000d5b5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d5b9:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d5be:	76 10                	jbe    c000d5d0 <VgaText::receiveKey(unsigned char)+0xb8>
c000d5c0:	83 ec 0c             	sub    esp,0xc
c000d5c3:	68 7b 05 02 c0       	push   0xc002057b
c000d5c8:	e8 f1 76 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000d5cd:	83 c4 10             	add    esp,0x10
c000d5d0:	50                   	push   eax
c000d5d1:	50                   	push   eax
c000d5d2:	57                   	push   edi
c000d5d3:	53                   	push   ebx
c000d5d4:	e8 92 31 ff ff       	call   c000076b <strcat>
c000d5d9:	83 c4 0c             	add    esp,0xc
c000d5dc:	68 96 00 00 00       	push   0x96
c000d5e1:	6a 00                	push   0x0
c000d5e3:	57                   	push   edi
c000d5e4:	e8 1f 30 ff ff       	call   c0000608 <memset>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	83 ec 0c             	sub    esp,0xc
c000d5ef:	56                   	push   esi
c000d5f0:	e8 d5 f9 ff ff       	call   c000cfca <VgaText::doUpdate()>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	83 c4 1c             	add    esp,0x1c
c000d5fb:	5b                   	pop    ebx
c000d5fc:	5e                   	pop    esi
c000d5fd:	5f                   	pop    edi
c000d5fe:	5d                   	pop    ebp
c000d5ff:	c3                   	ret    

c000d600 <VgaText::write(unsigned long long, void*, int*)>:
c000d600:	55                   	push   ebp
c000d601:	57                   	push   edi
c000d602:	56                   	push   esi
c000d603:	53                   	push   ebx
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d60b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d60f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d613:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d61a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d61d:	39 eb                	cmp    ebx,ebp
c000d61f:	74 13                	je     c000d634 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d621:	43                   	inc    ebx
c000d622:	50                   	push   eax
c000d623:	50                   	push   eax
c000d624:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d628:	50                   	push   eax
c000d629:	56                   	push   esi
c000d62a:	e8 d1 fb ff ff       	call   c000d200 <VgaText::putchar(char)>
c000d62f:	83 c4 10             	add    esp,0x10
c000d632:	eb e9                	jmp    c000d61d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d63e:	56                   	push   esi
c000d63f:	e8 86 f9 ff ff       	call   c000cfca <VgaText::doUpdate()>
c000d644:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d648:	89 38                	mov    DWORD PTR [eax],edi
c000d64a:	83 c4 1c             	add    esp,0x1c
c000d64d:	31 c0                	xor    eax,eax
c000d64f:	5b                   	pop    ebx
c000d650:	5e                   	pop    esi
c000d651:	5f                   	pop    edi
c000d652:	5d                   	pop    ebp
c000d653:	c3                   	ret    

c000d654 <newTerminal(char*)>:
c000d654:	83 ec 28             	sub    esp,0x28
c000d657:	68 60 12 00 00       	push   0x1260
c000d65c:	e8 d9 18 00 00       	call   c000ef3a <operator new(unsigned long)>
c000d661:	5a                   	pop    edx
c000d662:	59                   	pop    ecx
c000d663:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d667:	50                   	push   eax
c000d668:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d66c:	e8 15 fd ff ff       	call   c000d386 <VgaText::VgaText(char const*)>
c000d671:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d675:	83 c4 2c             	add    esp,0x2c
c000d678:	c3                   	ret    
c000d679:	90                   	nop

c000d67a <TSS::TSS()>:
c000d67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d67e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d685:	90                   	nop
c000d686:	c3                   	ret    
c000d687:	90                   	nop

c000d688 <TSS::setESP(unsigned long)>:
c000d688:	55                   	push   ebp
c000d689:	89 e5                	mov    ebp,esp
c000d68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d691:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d694:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d697:	90                   	nop
c000d698:	5d                   	pop    ebp
c000d699:	c3                   	ret    

c000d69a <TSS::flush()>:
c000d69a:	55                   	push   ebp
c000d69b:	89 e5                	mov    ebp,esp
c000d69d:	83 ec 10             	sub    esp,0x10
c000d6a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6a5:	83 c8 03             	or     eax,0x3
c000d6a8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d6ac:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d6b0:	66 89 d0             	mov    ax,dx
c000d6b3:	0f 00 d8             	ltr    ax
c000d6b6:	90                   	nop
c000d6b7:	c9                   	leave  
c000d6b8:	c3                   	ret    
c000d6b9:	90                   	nop

c000d6ba <TSS::setup(unsigned long, unsigned long)>:
c000d6ba:	55                   	push   ebp
c000d6bb:	89 e5                	mov    ebp,esp
c000d6bd:	53                   	push   ebx
c000d6be:	83 ec 14             	sub    esp,0x14
c000d6c1:	83 ec 0c             	sub    esp,0xc
c000d6c4:	6a 68                	push   0x68
c000d6c6:	e8 81 e5 ff ff       	call   c000bc4c <malloc>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 c2                	mov    edx,eax
c000d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	83 ec 04             	sub    esp,0x4
c000d6df:	6a 68                	push   0x68
c000d6e1:	6a 00                	push   0x0
c000d6e3:	50                   	push   eax
c000d6e4:	e8 1f 2f ff ff       	call   c0000608 <memset>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f2:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6fe:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d707:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d70d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d713:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d716:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d722:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d72b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d72e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d737:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d73a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d746:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d749:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d74f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d752:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d755:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d75e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d768:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d76b:	e8 05 13 01 00       	call   c001ea75 <CPU::readCR3()>
c000d770:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d779:	83 ec 08             	sub    esp,0x8
c000d77c:	50                   	push   eax
c000d77d:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d780:	50                   	push   eax
c000d781:	e8 9c dc ff ff       	call   c000b422 <GDTEntry::setBase(unsigned int)>
c000d786:	83 c4 10             	add    esp,0x10
c000d789:	83 ec 08             	sub    esp,0x8
c000d78c:	6a 68                	push   0x68
c000d78e:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d791:	50                   	push   eax
c000d792:	e8 a7 dc ff ff       	call   c000b43e <GDTEntry::setLimit(unsigned int)>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d79e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7a1:	83 e0 0f             	and    eax,0xf
c000d7a4:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7a7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7aa:	83 c8 40             	or     eax,0x40
c000d7ad:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7b0:	e8 03 68 00 00       	call   c0013fb8 <thisCPU()>
c000d7b5:	05 78 01 00 00       	add    eax,0x178
c000d7ba:	83 ec 04             	sub    esp,0x4
c000d7bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d7c0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d7c3:	50                   	push   eax
c000d7c4:	e8 a9 dc ff ff       	call   c000b472 <GDT::addEntry(GDTEntry)>
c000d7c9:	83 c4 10             	add    esp,0x10
c000d7cc:	89 c2                	mov    edx,eax
c000d7ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d1:	89 10                	mov    DWORD PTR [eax],edx
c000d7d3:	e8 e0 67 00 00       	call   c0013fb8 <thisCPU()>
c000d7d8:	05 78 01 00 00       	add    eax,0x178
c000d7dd:	83 ec 0c             	sub    esp,0xc
c000d7e0:	50                   	push   eax
c000d7e1:	e8 d0 dc ff ff       	call   c000b4b6 <GDT::flush()>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ee:	83 ec 08             	sub    esp,0x8
c000d7f1:	50                   	push   eax
c000d7f2:	68 e4 05 02 c0       	push   0xc00205e4
c000d7f7:	e8 2d 18 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d802:	8b 00                	mov    eax,DWORD PTR [eax]
c000d804:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d807:	c9                   	leave  
c000d808:	c3                   	ret    
c000d809:	90                   	nop

c000d80a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d80a:	55                   	push   ebp
c000d80b:	57                   	push   edi
c000d80c:	56                   	push   esi
c000d80d:	53                   	push   ebx
c000d80e:	83 ec 0c             	sub    esp,0xc
c000d811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d815:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d819:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d81c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d820:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d824:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d828:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d82d:	75 08                	jne    c000d837 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d82f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d835:	eb 5e                	jmp    c000d895 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d837:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d83c:	75 3d                	jne    c000d87b <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	68 02 06 02 c0       	push   0xc0020602
c000d846:	e8 de 17 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000d84b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d850:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d853:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d859:	8b 10                	mov    edx,DWORD PTR [eax]
c000d85b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d85f:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d863:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d867:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d86b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d872:	83 c4 1c             	add    esp,0x1c
c000d875:	5b                   	pop    ebx
c000d876:	5e                   	pop    esi
c000d877:	5f                   	pop    edi
c000d878:	5d                   	pop    ebp
c000d879:	ff e0                	jmp    eax
c000d87b:	89 c2                	mov    edx,eax
c000d87d:	83 e2 fd             	and    edx,0xfffffffd
c000d880:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d886:	74 a7                	je     c000d82f <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d888:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d88d:	83 e0 ef             	and    eax,0xffffffef
c000d890:	83 f8 08             	cmp    eax,0x8
c000d893:	76 9a                	jbe    c000d82f <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d895:	83 c4 0c             	add    esp,0xc
c000d898:	31 c0                	xor    eax,eax
c000d89a:	5b                   	pop    ebx
c000d89b:	5e                   	pop    esi
c000d89c:	5f                   	pop    edi
c000d89d:	5d                   	pop    ebp
c000d89e:	c3                   	ret    
c000d89f:	90                   	nop

c000d8a0 <ReservedFilename::isAtty()>:
c000d8a0:	83 ec 18             	sub    esp,0x18
c000d8a3:	68 0f 06 02 c0       	push   0xc002060f
c000d8a8:	e8 7c 17 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	31 c0                	xor    eax,eax
c000d8b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8b6:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d8bd:	75 12                	jne    c000d8d1 <ReservedFilename::isAtty()+0x31>
c000d8bf:	83 ec 0c             	sub    esp,0xc
c000d8c2:	68 25 06 02 c0       	push   0xc0020625
c000d8c7:	e8 5d 17 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	b0 01                	mov    al,0x1
c000d8d1:	83 c4 0c             	add    esp,0xc
c000d8d4:	c3                   	ret    
c000d8d5:	90                   	nop

c000d8d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d8d6:	55                   	push   ebp
c000d8d7:	57                   	push   edi
c000d8d8:	56                   	push   esi
c000d8d9:	53                   	push   ebx
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d8e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8ec:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8f4:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d8f9:	75 08                	jne    c000d903 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d901:	eb 63                	jmp    c000d966 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d903:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d908:	75 3d                	jne    c000d947 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d90a:	83 ec 0c             	sub    esp,0xc
c000d90d:	68 38 06 02 c0       	push   0xc0020638
c000d912:	e8 12 17 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000d917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d91c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d91f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d925:	8b 10                	mov    edx,DWORD PTR [eax]
c000d927:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d92b:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d92f:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d933:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d937:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d93b:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d93e:	83 c4 1c             	add    esp,0x1c
c000d941:	5b                   	pop    ebx
c000d942:	5e                   	pop    esi
c000d943:	5f                   	pop    edi
c000d944:	5d                   	pop    ebp
c000d945:	ff e0                	jmp    eax
c000d947:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d94c:	75 04                	jne    c000d952 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d94e:	89 33                	mov    DWORD PTR [ebx],esi
c000d950:	eb 14                	jmp    c000d966 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d952:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d957:	74 a2                	je     c000d8fb <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d959:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d95e:	83 e0 ef             	and    eax,0xffffffef
c000d961:	83 f8 08             	cmp    eax,0x8
c000d964:	76 95                	jbe    c000d8fb <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d966:	83 c4 0c             	add    esp,0xc
c000d969:	31 c0                	xor    eax,eax
c000d96b:	5b                   	pop    ebx
c000d96c:	5e                   	pop    esi
c000d96d:	5f                   	pop    edi
c000d96e:	5d                   	pop    ebp
c000d96f:	c3                   	ret    

c000d970 <UnixFile::getFileDescriptor()>:
c000d970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d977:	c3                   	ret    

c000d978 <UnixFile::UnixFile(int)>:
c000d978:	53                   	push   ebx
c000d979:	83 ec 18             	sub    esp,0x18
c000d97c:	ba 54 07 02 c0       	mov    edx,0xc0020754
c000d981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d985:	89 10                	mov    DWORD PTR [eax],edx
c000d987:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d98f:	0f 8f 4d 01 00 00    	jg     c000dae2 <UnixFile::UnixFile(int)+0x16a>
c000d995:	a1 40 2c 02 c0       	mov    eax,ds:0xc0022c40
c000d99a:	8d 50 01             	lea    edx,[eax+0x1]
c000d99d:	89 15 40 2c 02 c0    	mov    DWORD PTR ds:0xc0022c40,edx
c000d9a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9a7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d9aa:	83 ec 08             	sub    esp,0x8
c000d9ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9b1:	68 f8 38 02 c0       	push   0xc00238f8
c000d9b6:	e8 2f 11 01 00       	call   c001eaea <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	a0 f4 38 02 c0       	mov    al,ds:0xc00238f4
c000d9c3:	83 f0 01             	xor    eax,0x1
c000d9c6:	84 c0                	test   al,al
c000d9c8:	0f 84 15 01 00 00    	je     c000dae3 <UnixFile::UnixFile(int)+0x16b>
c000d9ce:	c6 05 f4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238f4,0x1
c000d9d5:	83 ec 0c             	sub    esp,0xc
c000d9d8:	6a 0c                	push   0xc
c000d9da:	e8 5b 15 00 00       	call   c000ef3a <operator new(unsigned long)>
c000d9df:	83 c4 10             	add    esp,0x10
c000d9e2:	89 c3                	mov    ebx,eax
c000d9e4:	83 ec 08             	sub    esp,0x8
c000d9e7:	68 03 ff ff 0f       	push   0xfffff03
c000d9ec:	53                   	push   ebx
c000d9ed:	e8 f6 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000d9f2:	83 c4 10             	add    esp,0x10
c000d9f5:	89 1d ec 38 02 c0    	mov    DWORD PTR ds:0xc00238ec,ebx
c000d9fb:	83 ec 0c             	sub    esp,0xc
c000d9fe:	6a 0c                	push   0xc
c000da00:	e8 35 15 00 00       	call   c000ef3a <operator new(unsigned long)>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 c3                	mov    ebx,eax
c000da0a:	83 ec 08             	sub    esp,0x8
c000da0d:	68 01 ff ff 0f       	push   0xfffff01
c000da12:	53                   	push   ebx
c000da13:	e8 d0 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000da18:	83 c4 10             	add    esp,0x10
c000da1b:	89 1d f0 38 02 c0    	mov    DWORD PTR ds:0xc00238f0,ebx
c000da21:	83 ec 0c             	sub    esp,0xc
c000da24:	6a 0c                	push   0xc
c000da26:	e8 0f 15 00 00       	call   c000ef3a <operator new(unsigned long)>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	89 c3                	mov    ebx,eax
c000da30:	83 ec 08             	sub    esp,0x8
c000da33:	68 00 ff ff 0f       	push   0xfffff00
c000da38:	53                   	push   ebx
c000da39:	e8 aa 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000da3e:	83 c4 10             	add    esp,0x10
c000da41:	89 1d e4 38 02 c0    	mov    DWORD PTR ds:0xc00238e4,ebx
c000da47:	83 ec 0c             	sub    esp,0xc
c000da4a:	6a 0c                	push   0xc
c000da4c:	e8 e9 14 00 00       	call   c000ef3a <operator new(unsigned long)>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	89 c3                	mov    ebx,eax
c000da56:	83 ec 08             	sub    esp,0x8
c000da59:	68 02 ff ff 0f       	push   0xfffff02
c000da5e:	53                   	push   ebx
c000da5f:	e8 84 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	89 1d e8 38 02 c0    	mov    DWORD PTR ds:0xc00238e8,ebx
c000da6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da75:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da7a:	7f 67                	jg     c000dae3 <UnixFile::UnixFile(int)+0x16b>
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	6a 0c                	push   0xc
c000da81:	e8 b4 14 00 00       	call   c000ef3a <operator new(unsigned long)>
c000da86:	83 c4 10             	add    esp,0x10
c000da89:	89 c3                	mov    ebx,eax
c000da8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da8f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000da94:	83 ec 08             	sub    esp,0x8
c000da97:	50                   	push   eax
c000da98:	53                   	push   ebx
c000da99:	e8 4a 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000da9e:	83 c4 10             	add    esp,0x10
c000daa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daa5:	89 1c 85 c0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc740],ebx
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	6a 0c                	push   0xc
c000dab1:	e8 84 14 00 00       	call   c000ef3a <operator new(unsigned long)>
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	89 c3                	mov    ebx,eax
c000dabb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dabf:	05 20 ff ff 0f       	add    eax,0xfffff20
c000dac4:	83 ec 08             	sub    esp,0x8
c000dac7:	50                   	push   eax
c000dac8:	53                   	push   ebx
c000dac9:	e8 1a 00 00 00       	call   c000dae8 <ReservedFilename::ReservedFilename(int)>
c000dace:	83 c4 10             	add    esp,0x10
c000dad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad5:	89 1c 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],ebx
c000dadc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dae0:	eb 93                	jmp    c000da75 <UnixFile::UnixFile(int)+0xfd>
c000dae2:	90                   	nop
c000dae3:	83 c4 18             	add    esp,0x18
c000dae6:	5b                   	pop    ebx
c000dae7:	c3                   	ret    

c000dae8 <ReservedFilename::ReservedFilename(int)>:
c000dae8:	83 ec 0c             	sub    esp,0xc
c000daeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daef:	83 ec 08             	sub    esp,0x8
c000daf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf6:	50                   	push   eax
c000daf7:	e8 7c fe ff ff       	call   c000d978 <UnixFile::UnixFile(int)>
c000dafc:	83 c4 10             	add    esp,0x10
c000daff:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000db04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db08:	89 10                	mov    DWORD PTR [eax],edx
c000db0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000db12:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db15:	90                   	nop
c000db16:	83 c4 0c             	add    esp,0xc
c000db19:	c3                   	ret    

c000db1a <UnixFile::~UnixFile()>:
c000db1a:	83 ec 1c             	sub    esp,0x1c
c000db1d:	ba 54 07 02 c0       	mov    edx,0xc0020754
c000db22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db26:	89 10                	mov    DWORD PTR [eax],edx
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db2f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000db34:	7f 73                	jg     c000dba9 <UnixFile::~UnixFile()+0x8f>
c000db36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db3e:	83 ec 0c             	sub    esp,0xc
c000db41:	68 f8 38 02 c0       	push   0xc00238f8
c000db46:	e8 73 10 01 00       	call   c001ebbe <LinkedList<UnixFile>::getFirstElement()>
c000db4b:	83 c4 10             	add    esp,0x10
c000db4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db52:	83 ec 0c             	sub    esp,0xc
c000db55:	68 f8 38 02 c0       	push   0xc00238f8
c000db5a:	e8 67 10 01 00       	call   c001ebc6 <LinkedList<UnixFile>::removeFirst()>
c000db5f:	83 c4 10             	add    esp,0x10
c000db62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db66:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db6a:	74 40                	je     c000dbac <UnixFile::~UnixFile()+0x92>
c000db6c:	83 ec 08             	sub    esp,0x8
c000db6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db73:	68 f8 38 02 c0       	push   0xc00238f8
c000db78:	e8 6d 0f 01 00       	call   c001eaea <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db84:	8d 50 01             	lea    edx,[eax+0x1]
c000db87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db8b:	3d 88 13 00 00       	cmp    eax,0x1388
c000db90:	0f 94 c0             	sete   al
c000db93:	84 c0                	test   al,al
c000db95:	74 a7                	je     c000db3e <UnixFile::~UnixFile()+0x24>
c000db97:	83 ec 0c             	sub    esp,0xc
c000db9a:	68 2c 07 02 c0       	push   0xc002072c
c000db9f:	e8 1a 71 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	eb 95                	jmp    c000db3e <UnixFile::~UnixFile()+0x24>
c000dba9:	90                   	nop
c000dbaa:	eb 01                	jmp    c000dbad <UnixFile::~UnixFile()+0x93>
c000dbac:	90                   	nop
c000dbad:	90                   	nop
c000dbae:	83 c4 1c             	add    esp,0x1c
c000dbb1:	c3                   	ret    

c000dbb2 <UnixFile::~UnixFile()>:
c000dbb2:	83 ec 0c             	sub    esp,0xc
c000dbb5:	83 ec 0c             	sub    esp,0xc
c000dbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbbc:	e8 59 ff ff ff       	call   c000db1a <UnixFile::~UnixFile()>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	83 ec 08             	sub    esp,0x8
c000dbc7:	6a 0c                	push   0xc
c000dbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcd:	e8 77 13 00 00       	call   c000ef49 <operator delete(void*, unsigned long)>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	83 c4 0c             	add    esp,0xc
c000dbd8:	c3                   	ret    
c000dbd9:	90                   	nop

c000dbda <ReservedFilename::~ReservedFilename()>:
c000dbda:	83 ec 0c             	sub    esp,0xc
c000dbdd:	ba 70 07 02 c0       	mov    edx,0xc0020770
c000dbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe6:	89 10                	mov    DWORD PTR [eax],edx
c000dbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbec:	83 ec 0c             	sub    esp,0xc
c000dbef:	50                   	push   eax
c000dbf0:	e8 25 ff ff ff       	call   c000db1a <UnixFile::~UnixFile()>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	90                   	nop
c000dbf9:	83 c4 0c             	add    esp,0xc
c000dbfc:	c3                   	ret    
c000dbfd:	90                   	nop

c000dbfe <ReservedFilename::~ReservedFilename()>:
c000dbfe:	83 ec 0c             	sub    esp,0xc
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc08:	e8 cd ff ff ff       	call   c000dbda <ReservedFilename::~ReservedFilename()>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	83 ec 08             	sub    esp,0x8
c000dc13:	6a 0c                	push   0xc
c000dc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc19:	e8 2b 13 00 00       	call   c000ef49 <operator delete(void*, unsigned long)>
c000dc1e:	83 c4 10             	add    esp,0x10
c000dc21:	83 c4 0c             	add    esp,0xc
c000dc24:	c3                   	ret    

c000dc25 <getFromFileDescriptor(int)>:
c000dc25:	53                   	push   ebx
c000dc26:	83 ec 08             	sub    esp,0x8
c000dc29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc2d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dc33:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dc39:	7f 33                	jg     c000dc6e <getFromFileDescriptor(int)+0x49>
c000dc3b:	83 ec 0c             	sub    esp,0xc
c000dc3e:	68 f8 38 02 c0       	push   0xc00238f8
c000dc43:	e8 76 0f 01 00       	call   c001ebbe <LinkedList<UnixFile>::getFirstElement()>
c000dc48:	83 c4 10             	add    esp,0x10
c000dc4b:	85 c0                	test   eax,eax
c000dc4d:	75 07                	jne    c000dc56 <getFromFileDescriptor(int)+0x31>
c000dc4f:	31 c0                	xor    eax,eax
c000dc51:	e9 98 00 00 00       	jmp    c000dcee <getFromFileDescriptor(int)+0xc9>
c000dc56:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc59:	0f 84 8f 00 00 00    	je     c000dcee <getFromFileDescriptor(int)+0xc9>
c000dc5f:	52                   	push   edx
c000dc60:	52                   	push   edx
c000dc61:	50                   	push   eax
c000dc62:	68 f8 38 02 c0       	push   0xc00238f8
c000dc67:	e8 fc 0f 01 00       	call   c001ec68 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc6c:	eb da                	jmp    c000dc48 <getFromFileDescriptor(int)+0x23>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	68 45 06 02 c0       	push   0xc0020645
c000dc76:	e8 ae 13 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000dc7b:	83 c4 10             	add    esp,0x10
c000dc7e:	a1 ec 38 02 c0       	mov    eax,ds:0xc00238ec
c000dc83:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dc89:	74 63                	je     c000dcee <getFromFileDescriptor(int)+0xc9>
c000dc8b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dc91:	75 17                	jne    c000dcaa <getFromFileDescriptor(int)+0x85>
c000dc93:	83 ec 0c             	sub    esp,0xc
c000dc96:	68 6c 06 02 c0       	push   0xc002066c
c000dc9b:	e8 89 13 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000dca0:	a1 f0 38 02 c0       	mov    eax,ds:0xc00238f0
c000dca5:	83 c4 10             	add    esp,0x10
c000dca8:	eb 44                	jmp    c000dcee <getFromFileDescriptor(int)+0xc9>
c000dcaa:	a1 e8 38 02 c0       	mov    eax,ds:0xc00238e8
c000dcaf:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dcb5:	74 37                	je     c000dcee <getFromFileDescriptor(int)+0xc9>
c000dcb7:	a1 e4 38 02 c0       	mov    eax,ds:0xc00238e4
c000dcbc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dcc2:	74 2a                	je     c000dcee <getFromFileDescriptor(int)+0xc9>
c000dcc4:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dcca:	83 f8 08             	cmp    eax,0x8
c000dccd:	77 09                	ja     c000dcd8 <getFromFileDescriptor(int)+0xb3>
c000dccf:	8b 04 85 c0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc740]
c000dcd6:	eb 16                	jmp    c000dcee <getFromFileDescriptor(int)+0xc9>
c000dcd8:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dcde:	83 fb 08             	cmp    ebx,0x8
c000dce1:	0f 87 68 ff ff ff    	ja     c000dc4f <getFromFileDescriptor(int)+0x2a>
c000dce7:	8b 04 9d 80 38 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc780]
c000dcee:	83 c4 08             	add    esp,0x8
c000dcf1:	5b                   	pop    ebx
c000dcf2:	c3                   	ret    

c000dcf3 <__static_initialization_and_destruction_0(int, int)>:
c000dcf3:	83 ec 0c             	sub    esp,0xc
c000dcf6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dcfb:	75 34                	jne    c000dd31 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcfd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dd05:	75 2a                	jne    c000dd31 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd07:	83 ec 0c             	sub    esp,0xc
c000dd0a:	68 f8 38 02 c0       	push   0xc00238f8
c000dd0f:	e8 7e 0d 01 00       	call   c001ea92 <LinkedList<UnixFile>::LinkedList()>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	83 ec 04             	sub    esp,0x4
c000dd1a:	68 c8 2b 02 c0       	push   0xc0022bc8
c000dd1f:	68 f8 38 02 c0       	push   0xc00238f8
c000dd24:	68 90 ea 01 c0       	push   0xc001ea90
c000dd29:	e8 97 11 00 00       	call   c000eec5 <__cxa_atexit>
c000dd2e:	83 c4 10             	add    esp,0x10
c000dd31:	90                   	nop
c000dd32:	83 c4 0c             	add    esp,0xc
c000dd35:	c3                   	ret    

c000dd36 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dd36:	83 ec 0c             	sub    esp,0xc
c000dd39:	83 ec 08             	sub    esp,0x8
c000dd3c:	68 ff ff 00 00       	push   0xffff
c000dd41:	6a 01                	push   0x1
c000dd43:	e8 ab ff ff ff       	call   c000dcf3 <__static_initialization_and_destruction_0(int, int)>
c000dd48:	83 c4 10             	add    esp,0x10
c000dd4b:	83 c4 0c             	add    esp,0xc
c000dd4e:	c3                   	ret    
c000dd4f:	90                   	nop

c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd50:	53                   	push   ebx
c000dd51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd59:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd5f:	89 c8                	mov    eax,ecx
c000dd61:	d1 e8                	shr    eax,1
c000dd63:	03 05 48 2c 02 c0    	add    eax,DWORD PTR ds:0xc0022c48
c000dd69:	83 e1 01             	and    ecx,0x1
c000dd6c:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd6e:	75 09                	jne    c000dd79 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd70:	83 e2 f0             	and    edx,0xfffffff0
c000dd73:	09 da                	or     edx,ebx
c000dd75:	88 10                	mov    BYTE PTR [eax],dl
c000dd77:	5b                   	pop    ebx
c000dd78:	c3                   	ret    
c000dd79:	c1 e3 04             	shl    ebx,0x4
c000dd7c:	83 e2 0f             	and    edx,0xf
c000dd7f:	09 da                	or     edx,ebx
c000dd81:	88 10                	mov    BYTE PTR [eax],dl
c000dd83:	5b                   	pop    ebx
c000dd84:	c3                   	ret    

c000dd85 <Virt::getPageState(unsigned long)>:
c000dd85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd89:	8b 0d 48 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c48
c000dd8f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd95:	89 d0                	mov    eax,edx
c000dd97:	d1 e8                	shr    eax,1
c000dd99:	83 e2 01             	and    edx,0x1
c000dd9c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd9f:	75 04                	jne    c000dda5 <Virt::getPageState(unsigned long)+0x20>
c000dda1:	83 e0 0f             	and    eax,0xf
c000dda4:	c3                   	ret    
c000dda5:	c0 e8 04             	shr    al,0x4
c000dda8:	c3                   	ret    

c000dda9 <Virt::allocateKernelVirtualPages(int)>:
c000dda9:	55                   	push   ebp
c000ddaa:	31 ed                	xor    ebp,ebp
c000ddac:	57                   	push   edi
c000ddad:	56                   	push   esi
c000ddae:	53                   	push   ebx
c000ddaf:	31 db                	xor    ebx,ebx
c000ddb1:	83 ec 1c             	sub    esp,0x1c
c000ddb4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddb8:	8b 3d 44 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c44
c000ddbe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ddc3:	57                   	push   edi
c000ddc4:	e8 bc ff ff ff       	call   c000dd85 <Virt::getPageState(unsigned long)>
c000ddc9:	5a                   	pop    edx
c000ddca:	84 c0                	test   al,al
c000ddcc:	75 3a                	jne    c000de08 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000ddce:	85 db                	test   ebx,ebx
c000ddd0:	75 02                	jne    c000ddd4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000ddd2:	89 fd                	mov    ebp,edi
c000ddd4:	43                   	inc    ebx
c000ddd5:	39 f3                	cmp    ebx,esi
c000ddd7:	74 5a                	je     c000de33 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ddd9:	47                   	inc    edi
c000ddda:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dde0:	76 31                	jbe    c000de13 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dde2:	c7 05 44 2c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022c44,0xc8000
c000ddec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddf1:	75 28                	jne    c000de1b <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddf3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ddf8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ddfd:	57                   	push   edi
c000ddfe:	e8 82 ff ff ff       	call   c000dd85 <Virt::getPageState(unsigned long)>
c000de03:	5a                   	pop    edx
c000de04:	84 c0                	test   al,al
c000de06:	74 c6                	je     c000ddce <Virt::allocateKernelVirtualPages(int)+0x25>
c000de08:	31 db                	xor    ebx,ebx
c000de0a:	47                   	inc    edi
c000de0b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de11:	77 cf                	ja     c000dde2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000de13:	89 3d 44 2c 02 c0    	mov    DWORD PTR ds:0xc0022c44,edi
c000de19:	eb a8                	jmp    c000ddc3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de1b:	83 ec 0c             	sub    esp,0xc
c000de1e:	68 84 07 02 c0       	push   0xc0020784
c000de23:	e8 96 6e 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000de28:	8b 3d 44 2c 02 c0    	mov    edi,DWORD PTR ds:0xc0022c44
c000de2e:	83 c4 10             	add    esp,0x10
c000de31:	eb 90                	jmp    c000ddc3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de33:	89 2d 44 2c 02 c0    	mov    DWORD PTR ds:0xc0022c44,ebp
c000de39:	4b                   	dec    ebx
c000de3a:	74 5f                	je     c000de9b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000de3c:	85 f6                	test   esi,esi
c000de3e:	74 3d                	je     c000de7d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de40:	89 e8                	mov    eax,ebp
c000de42:	31 db                	xor    ebx,ebx
c000de44:	8d 7e ff             	lea    edi,[esi-0x1]
c000de47:	eb 14                	jmp    c000de5d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de49:	6a 01                	push   0x1
c000de4b:	43                   	inc    ebx
c000de4c:	50                   	push   eax
c000de4d:	e8 fe fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de52:	58                   	pop    eax
c000de53:	39 f3                	cmp    ebx,esi
c000de55:	5a                   	pop    edx
c000de56:	74 25                	je     c000de7d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de58:	a1 44 2c 02 c0       	mov    eax,ds:0xc0022c44
c000de5d:	8d 50 01             	lea    edx,[eax+0x1]
c000de60:	85 db                	test   ebx,ebx
c000de62:	89 15 44 2c 02 c0    	mov    DWORD PTR ds:0xc0022c44,edx
c000de68:	74 20                	je     c000de8a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de6a:	39 df                	cmp    edi,ebx
c000de6c:	75 db                	jne    c000de49 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de6e:	6a 03                	push   0x3
c000de70:	43                   	inc    ebx
c000de71:	50                   	push   eax
c000de72:	e8 d9 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de77:	59                   	pop    ecx
c000de78:	39 f3                	cmp    ebx,esi
c000de7a:	58                   	pop    eax
c000de7b:	75 db                	jne    c000de58 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de7d:	83 c4 1c             	add    esp,0x1c
c000de80:	89 e8                	mov    eax,ebp
c000de82:	5b                   	pop    ebx
c000de83:	c1 e0 0c             	shl    eax,0xc
c000de86:	5e                   	pop    esi
c000de87:	5f                   	pop    edi
c000de88:	5d                   	pop    ebp
c000de89:	c3                   	ret    
c000de8a:	6a 02                	push   0x2
c000de8c:	bb 01 00 00 00       	mov    ebx,0x1
c000de91:	50                   	push   eax
c000de92:	e8 b9 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de97:	58                   	pop    eax
c000de98:	5a                   	pop    edx
c000de99:	eb bd                	jmp    c000de58 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de9b:	6a 04                	push   0x4
c000de9d:	8d 45 01             	lea    eax,[ebp+0x1]
c000dea0:	55                   	push   ebp
c000dea1:	a3 44 2c 02 c0       	mov    ds:0xc0022c44,eax
c000dea6:	e8 a5 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000deab:	59                   	pop    ecx
c000deac:	89 e8                	mov    eax,ebp
c000deae:	5b                   	pop    ebx
c000deaf:	c1 e0 0c             	shl    eax,0xc
c000deb2:	83 c4 1c             	add    esp,0x1c
c000deb5:	5b                   	pop    ebx
c000deb6:	5e                   	pop    esi
c000deb7:	5f                   	pop    edi
c000deb8:	5d                   	pop    ebp
c000deb9:	c3                   	ret    

c000deba <Virt::virtualMemorySetup()>:
c000deba:	53                   	push   ebx
c000debb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dec0:	83 ec 08             	sub    esp,0x8
c000dec3:	6a 0f                	push   0xf
c000dec5:	53                   	push   ebx
c000dec6:	43                   	inc    ebx
c000dec7:	e8 84 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000decc:	59                   	pop    ecx
c000decd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000ded3:	58                   	pop    eax
c000ded4:	75 ed                	jne    c000dec3 <Virt::virtualMemorySetup()+0x9>
c000ded6:	83 ec 08             	sub    esp,0x8
c000ded9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dede:	68 00 00 00 c8       	push   0xc8000000
c000dee3:	68 2f 09 02 c0       	push   0xc002092f
c000dee8:	e8 3c 11 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000deed:	58                   	pop    eax
c000deee:	5a                   	pop    edx
c000deef:	68 00 f0 ff ef       	push   0xeffff000
c000def4:	68 43 09 02 c0       	push   0xc0020943
c000def9:	e8 2b 11 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	83 ec 08             	sub    esp,0x8
c000df04:	6a 00                	push   0x0
c000df06:	53                   	push   ebx
c000df07:	43                   	inc    ebx
c000df08:	e8 43 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df16:	75 e9                	jne    c000df01 <Virt::virtualMemorySetup()+0x47>
c000df18:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000df1d:	83 ec 08             	sub    esp,0x8
c000df20:	6a 0f                	push   0xf
c000df22:	53                   	push   ebx
c000df23:	43                   	inc    ebx
c000df24:	e8 27 fe ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000df32:	75 e9                	jne    c000df1d <Virt::virtualMemorySetup()+0x63>
c000df34:	83 c4 08             	add    esp,0x8
c000df37:	5b                   	pop    ebx
c000df38:	c3                   	ret    

c000df39 <Virt::getAKernelVAS()>:
c000df39:	a1 04 39 02 c0       	mov    eax,ds:0xc0023904
c000df3e:	c3                   	ret    

c000df3f <Virt::setupPageSwapping(int)>:
c000df3f:	57                   	push   edi
c000df40:	56                   	push   esi
c000df41:	53                   	push   ebx
c000df42:	83 ec 1c             	sub    esp,0x1c
c000df45:	68 14 01 00 00       	push   0x114
c000df4a:	e8 eb 0f 00 00       	call   c000ef3a <operator new(unsigned long)>
c000df4f:	83 c4 0c             	add    esp,0xc
c000df52:	89 c6                	mov    esi,eax
c000df54:	ff 35 f4 4b 02 c0    	push   DWORD PTR ds:0xc0024bf4
c000df5a:	68 57 09 02 c0       	push   0xc0020957
c000df5f:	50                   	push   eax
c000df60:	e8 f3 15 00 00       	call   c000f558 <File::File(char const*, Process*)>
c000df65:	89 34 24             	mov    DWORD PTR [esp],esi
c000df68:	e8 c7 17 00 00       	call   c000f734 <File::unlink()>
c000df6d:	58                   	pop    eax
c000df6e:	5a                   	pop    edx
c000df6f:	6a 12                	push   0x12
c000df71:	56                   	push   esi
c000df72:	e8 45 16 00 00       	call   c000f5bc <File::open(FileOpenMode)>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	85 c0                	test   eax,eax
c000df7c:	0f 85 bf 00 00 00    	jne    c000e041 <Virt::setupPageSwapping(int)+0x102>
c000df82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df8e:	c1 e3 08             	shl    ebx,0x8
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	68 00 00 01 00       	push   0x10000
c000df99:	e8 ae dc ff ff       	call   c000bc4c <malloc>
c000df9e:	83 c4 0c             	add    esp,0xc
c000dfa1:	89 c7                	mov    edi,eax
c000dfa3:	68 00 00 01 00       	push   0x10000
c000dfa8:	6a 00                	push   0x0
c000dfaa:	50                   	push   eax
c000dfab:	e8 58 26 ff ff       	call   c0000608 <memset>
c000dfb0:	83 c4 10             	add    esp,0x10
c000dfb3:	85 db                	test   ebx,ebx
c000dfb5:	79 03                	jns    c000dfba <Virt::setupPageSwapping(int)+0x7b>
c000dfb7:	83 c3 0f             	add    ebx,0xf
c000dfba:	c1 fb 04             	sar    ebx,0x4
c000dfbd:	4b                   	dec    ebx
c000dfbe:	83 fb ff             	cmp    ebx,0xffffffff
c000dfc1:	74 4b                	je     c000e00e <Virt::setupPageSwapping(int)+0xcf>
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfc8:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dfcc:	52                   	push   edx
c000dfcd:	57                   	push   edi
c000dfce:	6a 00                	push   0x0
c000dfd0:	68 00 00 01 00       	push   0x10000
c000dfd5:	56                   	push   esi
c000dfd6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dfd9:	83 c4 20             	add    esp,0x20
c000dfdc:	85 c0                	test   eax,eax
c000dfde:	75 4e                	jne    c000e02e <Virt::setupPageSwapping(int)+0xef>
c000dfe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfe4:	3d 00 00 01 00       	cmp    eax,0x10000
c000dfe9:	74 d2                	je     c000dfbd <Virt::setupPageSwapping(int)+0x7e>
c000dfeb:	83 ec 08             	sub    esp,0x8
c000dfee:	4b                   	dec    ebx
c000dfef:	50                   	push   eax
c000dff0:	68 aa 09 02 c0       	push   0xc00209aa
c000dff5:	e8 2f 10 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000dffa:	c7 04 24 b3 09 02 c0 	mov    DWORD PTR [esp],0xc00209b3
c000e001:	e8 b8 6c 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	83 fb ff             	cmp    ebx,0xffffffff
c000e00c:	75 b5                	jne    c000dfc3 <Virt::setupPageSwapping(int)+0x84>
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	56                   	push   esi
c000e012:	e8 03 16 00 00       	call   c000f61a <File::close()>
c000e017:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e01a:	e8 4d dc ff ff       	call   c000bc6c <rfree>
c000e01f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e022:	8b 06                	mov    eax,DWORD PTR [esi]
c000e024:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e027:	83 c4 20             	add    esp,0x20
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	c3                   	ret    
c000e02e:	83 ec 08             	sub    esp,0x8
c000e031:	50                   	push   eax
c000e032:	68 92 09 02 c0       	push   0xc0020992
c000e037:	e8 ed 0f 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e03c:	83 c4 10             	add    esp,0x10
c000e03f:	eb 9f                	jmp    c000dfe0 <Virt::setupPageSwapping(int)+0xa1>
c000e041:	83 ec 08             	sub    esp,0x8
c000e044:	50                   	push   eax
c000e045:	68 6e 09 02 c0       	push   0xc002096e
c000e04a:	e8 da 0f 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e04f:	c7 04 24 77 09 02 c0 	mov    DWORD PTR [esp],0xc0020977
c000e056:	e8 63 6c 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e05b:	83 c4 10             	add    esp,0x10
c000e05e:	e9 1f ff ff ff       	jmp    c000df82 <Virt::setupPageSwapping(int)+0x43>
c000e063:	90                   	nop

c000e064 <VAS::VAS()>:
c000e064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e068:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e06f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e073:	a3 04 39 02 c0       	mov    ds:0xc0023904,eax
c000e078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e07c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e084:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e08b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e092:	90                   	nop
c000e093:	c3                   	ret    

c000e094 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e098:	89 c2                	mov    edx,eax
c000e09a:	c1 e8 0a             	shr    eax,0xa
c000e09d:	c1 ea 16             	shr    edx,0x16
c000e0a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e0a5:	19 c9                	sbb    ecx,ecx
c000e0a7:	c1 e2 0c             	shl    edx,0xc
c000e0aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e0b0:	25 fc 0f 00 00       	and    eax,0xffc
c000e0b5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e0bc:	01 d0                	add    eax,edx
c000e0be:	c3                   	ret    
c000e0bf:	90                   	nop

c000e0c0 <VAS::getPageTableEntry(unsigned long)>:
c000e0c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e0c4:	89 ca                	mov    edx,ecx
c000e0c6:	c1 e9 0a             	shr    ecx,0xa
c000e0c9:	c1 ea 16             	shr    edx,0x16
c000e0cc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e0d2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e0d8:	c1 e0 0c             	shl    eax,0xc
c000e0db:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e0de:	c3                   	ret    

c000e0df <Virt::freeKernelVirtualPages(unsigned long)>:
c000e0df:	57                   	push   edi
c000e0e0:	56                   	push   esi
c000e0e1:	be 01 00 00 00       	mov    esi,0x1
c000e0e6:	53                   	push   ebx
c000e0e7:	83 ec 10             	sub    esp,0x10
c000e0ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0ee:	c1 eb 0c             	shr    ebx,0xc
c000e0f1:	eb 3f                	jmp    c000e132 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0f3:	e8 41 fe ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e0f8:	83 ec 08             	sub    esp,0x8
c000e0fb:	57                   	push   edi
c000e0fc:	50                   	push   eax
c000e0fd:	e8 be ff ff ff       	call   c000e0c0 <VAS::getPageTableEntry(unsigned long)>
c000e102:	83 c4 10             	add    esp,0x10
c000e105:	8b 00                	mov    eax,DWORD PTR [eax]
c000e107:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e10b:	f6 c4 04             	test   ah,0x4
c000e10e:	75 5f                	jne    c000e16f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e110:	80 fa 04             	cmp    dl,0x4
c000e113:	74 78                	je     c000e18d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e115:	80 fa 02             	cmp    dl,0x2
c000e118:	0f 84 88 00 00 00    	je     c000e1a6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e11e:	80 fa 03             	cmp    dl,0x3
c000e121:	0f 84 ad 00 00 00    	je     c000e1d4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e127:	fe ca                	dec    dl
c000e129:	0f 84 92 00 00 00    	je     c000e1c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e12f:	43                   	inc    ebx
c000e130:	31 f6                	xor    esi,esi
c000e132:	53                   	push   ebx
c000e133:	e8 4d fc ff ff       	call   c000dd85 <Virt::getPageState(unsigned long)>
c000e138:	5f                   	pop    edi
c000e139:	89 df                	mov    edi,ebx
c000e13b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e13f:	c1 e7 0c             	shl    edi,0xc
c000e142:	84 c0                	test   al,al
c000e144:	75 ad                	jne    c000e0f3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e146:	83 ec 0c             	sub    esp,0xc
c000e149:	68 b9 09 02 c0       	push   0xc00209b9
c000e14e:	e8 6b 6b 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e153:	e8 e1 fd ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e158:	5a                   	pop    edx
c000e159:	59                   	pop    ecx
c000e15a:	57                   	push   edi
c000e15b:	50                   	push   eax
c000e15c:	e8 5f ff ff ff       	call   c000e0c0 <VAS::getPageTableEntry(unsigned long)>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	8b 00                	mov    eax,DWORD PTR [eax]
c000e166:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e16a:	f6 c4 04             	test   ah,0x4
c000e16d:	74 c0                	je     c000e12f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e16f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e173:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	50                   	push   eax
c000e17c:	e8 eb df ff ff       	call   c000c16c <Phys::freePage(unsigned long)>
c000e181:	83 c4 10             	add    esp,0x10
c000e184:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e188:	80 fa 04             	cmp    dl,0x4
c000e18b:	75 88                	jne    c000e115 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e18d:	89 f0                	mov    eax,esi
c000e18f:	84 c0                	test   al,al
c000e191:	75 47                	jne    c000e1da <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e193:	c7 44 24 20 a4 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc00207a4
c000e19b:	83 c4 10             	add    esp,0x10
c000e19e:	5b                   	pop    ebx
c000e19f:	5e                   	pop    esi
c000e1a0:	5f                   	pop    edi
c000e1a1:	e9 18 6b 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c000e1a6:	89 f0                	mov    eax,esi
c000e1a8:	84 c0                	test   al,al
c000e1aa:	75 15                	jne    c000e1c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	68 d5 09 02 c0       	push   0xc00209d5
c000e1b4:	e8 05 6b 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	e9 6e ff ff ff       	jmp    c000e12f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1c1:	83 ec 08             	sub    esp,0x8
c000e1c4:	6a 00                	push   0x0
c000e1c6:	53                   	push   ebx
c000e1c7:	e8 84 fb ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	e9 5b ff ff ff       	jmp    c000e12f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1d4:	89 f0                	mov    eax,esi
c000e1d6:	84 c0                	test   al,al
c000e1d8:	75 15                	jne    c000e1ef <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e1da:	83 ec 08             	sub    esp,0x8
c000e1dd:	6a 00                	push   0x0
c000e1df:	53                   	push   ebx
c000e1e0:	e8 6b fb ff ff       	call   c000dd50 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e5:	83 c4 10             	add    esp,0x10
c000e1e8:	83 c4 10             	add    esp,0x10
c000e1eb:	5b                   	pop    ebx
c000e1ec:	5e                   	pop    esi
c000e1ed:	5f                   	pop    edi
c000e1ee:	c3                   	ret    
c000e1ef:	c7 44 24 20 f1 09 02 c0 	mov    DWORD PTR [esp+0x20],0xc00209f1
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	5b                   	pop    ebx
c000e1fb:	5e                   	pop    esi
c000e1fc:	5f                   	pop    edi
c000e1fd:	e9 bc 6a 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>

c000e202 <VAS::freeAllocatedPages(unsigned long)>:
c000e202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e206:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e20a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e20e:	74 09                	je     c000e219 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e210:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e214:	e9 c6 fe ff ff       	jmp    c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000e219:	c7 44 24 04 c8 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207c8
c000e221:	e9 03 0e 00 00       	jmp    c000f029 <Dbg::kprintf(char const*, ...)>

c000e226 <VAS::virtualToPhysical(unsigned long)>:
c000e226:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e22a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e22e:	e8 8d fe ff ff       	call   c000e0c0 <VAS::getPageTableEntry(unsigned long)>
c000e233:	5a                   	pop    edx
c000e234:	8b 00                	mov    eax,DWORD PTR [eax]
c000e236:	59                   	pop    ecx
c000e237:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e23c:	c3                   	ret    
c000e23d:	90                   	nop

c000e23e <VAS::mapOtherVASIn(bool, VAS*)>:
c000e23e:	83 ec 0c             	sub    esp,0xc
c000e241:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e246:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e24a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e251:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e254:	19 c0                	sbb    eax,eax
c000e256:	83 ca 03             	or     edx,0x3
c000e259:	83 e0 fc             	and    eax,0xfffffffc
c000e25c:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e263:	e8 0d 08 01 00       	call   c001ea75 <CPU::readCR3()>
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	83 c4 0c             	add    esp,0xc
c000e26f:	e9 13 08 01 00       	jmp    c001ea87 <CPU::writeCR3(unsigned long)>

c000e274 <VAS::~VAS()>:
c000e274:	83 ec 2c             	sub    esp,0x2c
c000e277:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e27f:	e8 76 99 00 00       	call   c0017bfa <lockScheduler()>
c000e284:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e289:	8b 00                	mov    eax,DWORD PTR [eax]
c000e28b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e28e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e294:	83 ec 04             	sub    esp,0x4
c000e297:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e29b:	6a 01                	push   0x1
c000e29d:	50                   	push   eax
c000e29e:	e8 9b ff ff ff       	call   c000e23e <VAS::mapOtherVASIn(bool, VAS*)>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e2ae:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e2b6:	0f 8f d7 00 00 00    	jg     c000e393 <VAS::~VAS()+0x11f>
c000e2bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e2c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e2c7:	c1 e2 02             	shl    edx,0x2
c000e2ca:	01 d0                	add    eax,edx
c000e2cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d6:	83 e0 01             	and    eax,0x1
c000e2d9:	0f 84 ab 00 00 00    	je     c000e38a <VAS::~VAS()+0x116>
c000e2df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2e7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2ef:	7f 75                	jg     c000e366 <VAS::~VAS()+0xf2>
c000e2f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2f5:	c1 e0 0a             	shl    eax,0xa
c000e2f8:	89 c2                	mov    edx,eax
c000e2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2fe:	01 d0                	add    eax,edx
c000e300:	c1 e0 0c             	shl    eax,0xc
c000e303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e307:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e30c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e30e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e311:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e317:	83 ec 04             	sub    esp,0x4
c000e31a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e31e:	6a 01                	push   0x1
c000e320:	50                   	push   eax
c000e321:	e8 6e fd ff ff       	call   c000e094 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e326:	83 c4 10             	add    esp,0x10
c000e329:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e32d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e331:	8b 00                	mov    eax,DWORD PTR [eax]
c000e333:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e33b:	25 01 04 00 00       	and    eax,0x401
c000e340:	3d 01 04 00 00       	cmp    eax,0x401
c000e345:	75 19                	jne    c000e360 <VAS::~VAS()+0xec>
c000e347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	50                   	push   eax
c000e354:	e8 13 de ff ff       	call   c000c16c <Phys::freePage(unsigned long)>
c000e359:	83 c4 10             	add    esp,0x10
c000e35c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e360:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e364:	eb 81                	jmp    c000e2e7 <VAS::~VAS()+0x73>
c000e366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36a:	25 00 04 00 00       	and    eax,0x400
c000e36f:	74 19                	je     c000e38a <VAS::~VAS()+0x116>
c000e371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e375:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e37a:	83 ec 0c             	sub    esp,0xc
c000e37d:	50                   	push   eax
c000e37e:	e8 e9 dd ff ff       	call   c000c16c <Phys::freePage(unsigned long)>
c000e383:	83 c4 10             	add    esp,0x10
c000e386:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e38a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e38e:	e9 1b ff ff ff       	jmp    c000e2ae <VAS::~VAS()+0x3a>
c000e393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e397:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e39a:	83 ec 0c             	sub    esp,0xc
c000e39d:	50                   	push   eax
c000e39e:	e8 3c fd ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000e3a3:	83 c4 10             	add    esp,0x10
c000e3a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e3aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3ad:	83 ec 0c             	sub    esp,0xc
c000e3b0:	50                   	push   eax
c000e3b1:	e8 b6 dd ff ff       	call   c000c16c <Phys::freePage(unsigned long)>
c000e3b6:	83 c4 10             	add    esp,0x10
c000e3b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3c1:	c1 e0 02             	shl    eax,0x2
c000e3c4:	83 ec 08             	sub    esp,0x8
c000e3c7:	50                   	push   eax
c000e3c8:	68 ec 07 02 c0       	push   0xc00207ec
c000e3cd:	e8 57 0c 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	e8 22 98 00 00       	call   c0017bfc <unlockScheduler()>
c000e3da:	90                   	nop
c000e3db:	83 c4 2c             	add    esp,0x2c
c000e3de:	c3                   	ret    
c000e3df:	90                   	nop

c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e3e0:	55                   	push   ebp
c000e3e1:	57                   	push   edi
c000e3e2:	56                   	push   esi
c000e3e3:	53                   	push   ebx
c000e3e4:	83 ec 1c             	sub    esp,0x1c
c000e3e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3ef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3f5:	77 08                	ja     c000e3ff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e3f7:	0f 20 d8             	mov    eax,cr3
c000e3fa:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e3fd:	75 47                	jne    c000e446 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e3ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e403:	09 d8                	or     eax,ebx
c000e405:	a9 ff 0f 00 00       	test   eax,0xfff
c000e40a:	75 57                	jne    c000e463 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e40c:	89 de                	mov    esi,ebx
c000e40e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e411:	c1 ee 16             	shr    esi,0x16
c000e414:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e41b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e41f:	74 54                	je     c000e475 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e421:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e425:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e42b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e42f:	c1 e6 0c             	shl    esi,0xc
c000e432:	c1 eb 0a             	shr    ebx,0xa
c000e435:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e43b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e43e:	83 c4 1c             	add    esp,0x1c
c000e441:	5b                   	pop    ebx
c000e442:	5e                   	pop    esi
c000e443:	5f                   	pop    edi
c000e444:	5d                   	pop    ebp
c000e445:	c3                   	ret    
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	68 0c 08 02 c0       	push   0xc002080c
c000e44e:	e8 d6 0b 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e45a:	09 d8                	or     eax,ebx
c000e45c:	a9 ff 0f 00 00       	test   eax,0xfff
c000e461:	74 a9                	je     c000e40c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e463:	83 ec 0c             	sub    esp,0xc
c000e466:	68 74 08 02 c0       	push   0xc0020874
c000e46b:	e8 4e 68 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e470:	83 c4 10             	add    esp,0x10
c000e473:	eb 97                	jmp    c000e40c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e475:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e479:	e8 78 dd ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e47e:	89 c5                	mov    ebp,eax
c000e480:	e8 b4 fa ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e485:	83 ec 0c             	sub    esp,0xc
c000e488:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e48c:	6a 01                	push   0x1
c000e48e:	e8 16 f9 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000e493:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e49a:	6a 01                	push   0x1
c000e49c:	50                   	push   eax
c000e49d:	55                   	push   ebp
c000e49e:	81 cd 07 04 00 00    	or     ebp,0x407
c000e4a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e4a8:	51                   	push   ecx
c000e4a9:	e8 1e 02 00 00       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4ae:	83 c4 1c             	add    esp,0x1c
c000e4b1:	68 00 10 00 00       	push   0x1000
c000e4b6:	6a 00                	push   0x0
c000e4b8:	50                   	push   eax
c000e4b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4bd:	e8 46 21 ff ff       	call   c0000608 <memset>
c000e4c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e4c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e4c9:	e8 11 fc ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000e4ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4d2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e4d5:	83 c4 10             	add    esp,0x10
c000e4d8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e4db:	e9 41 ff ff ff       	jmp    c000e421 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e4e0 <VAS::allocatePages(int, int)>:
c000e4e0:	55                   	push   ebp
c000e4e1:	57                   	push   edi
c000e4e2:	56                   	push   esi
c000e4e3:	53                   	push   ebx
c000e4e4:	83 ec 1c             	sub    esp,0x1c
c000e4e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4eb:	e8 c8 5a 00 00       	call   c0013fb8 <thisCPU()>
c000e4f0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4f6:	83 e0 01             	and    eax,0x1
c000e4f9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e4fd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e501:	0f 85 d7 00 00 00    	jne    c000e5de <VAS::allocatePages(int, int)+0xfe>
c000e507:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e50a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50e:	85 c0                	test   eax,eax
c000e510:	0f 84 ac 00 00 00    	je     c000e5c2 <VAS::allocatePages(int, int)+0xe2>
c000e516:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e51a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e51e:	c1 e6 0c             	shl    esi,0xc
c000e521:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e525:	85 c0                	test   eax,eax
c000e527:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e52a:	7e 33                	jle    c000e55f <VAS::allocatePages(int, int)+0x7f>
c000e52c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e530:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e534:	81 cd 00 04 00 00    	or     ebp,0x400
c000e53a:	e8 b7 dc ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e53f:	55                   	push   ebp
c000e540:	53                   	push   ebx
c000e541:	50                   	push   eax
c000e542:	57                   	push   edi
c000e543:	e8 98 fe ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e548:	83 c4 10             	add    esp,0x10
c000e54b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e550:	74 03                	je     c000e555 <VAS::allocatePages(int, int)+0x75>
c000e552:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e555:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e55b:	39 de                	cmp    esi,ebx
c000e55d:	75 db                	jne    c000e53a <VAS::allocatePages(int, int)+0x5a>
c000e55f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e564:	74 3f                	je     c000e5a5 <VAS::allocatePages(int, int)+0xc5>
c000e566:	c1 ee 0a             	shr    esi,0xa
c000e569:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e56d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e573:	c1 eb 0a             	shr    ebx,0xa
c000e576:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e57c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e582:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e588:	39 f3                	cmp    ebx,esi
c000e58a:	77 0d                	ja     c000e599 <VAS::allocatePages(int, int)+0xb9>
c000e58c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e58f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e595:	39 de                	cmp    esi,ebx
c000e597:	73 f3                	jae    c000e58c <VAS::allocatePages(int, int)+0xac>
c000e599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59d:	83 c4 1c             	add    esp,0x1c
c000e5a0:	5b                   	pop    ebx
c000e5a1:	5e                   	pop    esi
c000e5a2:	5f                   	pop    edi
c000e5a3:	5d                   	pop    ebp
c000e5a4:	c3                   	ret    
c000e5a5:	e8 cb 04 01 00       	call   c001ea75 <CPU::readCR3()>
c000e5aa:	83 ec 0c             	sub    esp,0xc
c000e5ad:	50                   	push   eax
c000e5ae:	e8 d4 04 01 00       	call   c001ea87 <CPU::writeCR3(unsigned long)>
c000e5b3:	83 c4 10             	add    esp,0x10
c000e5b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ba:	83 c4 1c             	add    esp,0x1c
c000e5bd:	5b                   	pop    ebx
c000e5be:	5e                   	pop    esi
c000e5bf:	5f                   	pop    edi
c000e5c0:	5d                   	pop    ebp
c000e5c1:	c3                   	ret    
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	68 98 08 02 c0       	push   0xc0020898
c000e5ca:	e8 ef 66 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000e5cf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e5d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5d6:	83 c4 10             	add    esp,0x10
c000e5d9:	e9 38 ff ff ff       	jmp    c000e516 <VAS::allocatePages(int, int)+0x36>
c000e5de:	83 ec 0c             	sub    esp,0xc
c000e5e1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e5e5:	e8 bf f7 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000e5ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5ee:	83 c4 10             	add    esp,0x10
c000e5f1:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e5f6:	0f 87 94 00 00 00    	ja     c000e690 <VAS::allocatePages(int, int)+0x1b0>
c000e5fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e600:	85 d2                	test   edx,edx
c000e602:	7e 3c                	jle    c000e640 <VAS::allocatePages(int, int)+0x160>
c000e604:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e608:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e60c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e610:	c1 e5 0c             	shl    ebp,0xc
c000e613:	81 ce 00 04 00 00    	or     esi,0x400
c000e619:	01 dd                	add    ebp,ebx
c000e61b:	e8 d6 db ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e620:	56                   	push   esi
c000e621:	53                   	push   ebx
c000e622:	50                   	push   eax
c000e623:	57                   	push   edi
c000e624:	e8 b7 fd ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e631:	74 03                	je     c000e636 <VAS::allocatePages(int, int)+0x156>
c000e633:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e636:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e63c:	39 dd                	cmp    ebp,ebx
c000e63e:	75 db                	jne    c000e61b <VAS::allocatePages(int, int)+0x13b>
c000e640:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e645:	0f 84 5a ff ff ff    	je     c000e5a5 <VAS::allocatePages(int, int)+0xc5>
c000e64b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e64f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e653:	89 d3                	mov    ebx,edx
c000e655:	c1 e0 0c             	shl    eax,0xc
c000e658:	c1 eb 0a             	shr    ebx,0xa
c000e65b:	01 d0                	add    eax,edx
c000e65d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e663:	c1 e8 0a             	shr    eax,0xa
c000e666:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e66c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e671:	2d 00 00 40 00       	sub    eax,0x400000
c000e676:	39 c3                	cmp    ebx,eax
c000e678:	0f 87 1b ff ff ff    	ja     c000e599 <VAS::allocatePages(int, int)+0xb9>
c000e67e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e681:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e687:	39 d8                	cmp    eax,ebx
c000e689:	73 f3                	jae    c000e67e <VAS::allocatePages(int, int)+0x19e>
c000e68b:	e9 09 ff ff ff       	jmp    c000e599 <VAS::allocatePages(int, int)+0xb9>
c000e690:	e8 23 59 00 00       	call   c0013fb8 <thisCPU()>
c000e695:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e69c:	0f 84 5a ff ff ff    	je     c000e5fc <VAS::allocatePages(int, int)+0x11c>
c000e6a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e6aa:	e9 4d ff ff ff       	jmp    c000e5fc <VAS::allocatePages(int, int)+0x11c>
c000e6af:	90                   	nop

c000e6b0 <VAS::setCPUSpecific(unsigned long)>:
c000e6b0:	83 ec 0c             	sub    esp,0xc
c000e6b3:	6a 05                	push   0x5
c000e6b5:	68 00 00 40 c2       	push   0xc2400000
c000e6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6c2:	e8 19 fd ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6c7:	83 c4 1c             	add    esp,0x1c
c000e6ca:	c3                   	ret    
c000e6cb:	90                   	nop

c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e6cc:	55                   	push   ebp
c000e6cd:	57                   	push   edi
c000e6ce:	56                   	push   esi
c000e6cf:	53                   	push   ebx
c000e6d0:	83 ec 1c             	sub    esp,0x1c
c000e6d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e6db:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e6df:	e8 d4 58 00 00       	call   c0013fb8 <thisCPU()>
c000e6e4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f5:	85 c0                	test   eax,eax
c000e6f7:	7e 39                	jle    c000e732 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e6f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6fd:	89 f3                	mov    ebx,esi
c000e6ff:	c1 e0 0c             	shl    eax,0xc
c000e702:	01 f0                	add    eax,esi
c000e704:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e708:	55                   	push   ebp
c000e709:	53                   	push   ebx
c000e70a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e70e:	29 f0                	sub    eax,esi
c000e710:	01 d8                	add    eax,ebx
c000e712:	50                   	push   eax
c000e713:	57                   	push   edi
c000e714:	e8 c7 fc ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e719:	83 c4 10             	add    esp,0x10
c000e71c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e721:	74 03                	je     c000e726 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e723:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e726:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e72c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e730:	75 d6                	jne    c000e708 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e732:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e737:	74 42                	je     c000e77b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e739:	89 f3                	mov    ebx,esi
c000e73b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e73f:	c1 eb 0a             	shr    ebx,0xa
c000e742:	c1 e0 0c             	shl    eax,0xc
c000e745:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e74b:	01 f0                	add    eax,esi
c000e74d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e753:	c1 e8 0a             	shr    eax,0xa
c000e756:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e75b:	2d 00 00 40 00       	sub    eax,0x400000
c000e760:	39 c3                	cmp    ebx,eax
c000e762:	77 0d                	ja     c000e771 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e764:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e767:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e76d:	39 d8                	cmp    eax,ebx
c000e76f:	73 f3                	jae    c000e764 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e771:	83 c4 1c             	add    esp,0x1c
c000e774:	89 f0                	mov    eax,esi
c000e776:	5b                   	pop    ebx
c000e777:	5e                   	pop    esi
c000e778:	5f                   	pop    edi
c000e779:	5d                   	pop    ebp
c000e77a:	c3                   	ret    
c000e77b:	e8 f5 02 01 00       	call   c001ea75 <CPU::readCR3()>
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	50                   	push   eax
c000e784:	e8 fe 02 01 00       	call   c001ea87 <CPU::writeCR3(unsigned long)>
c000e789:	89 f0                	mov    eax,esi
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	83 c4 1c             	add    esp,0x1c
c000e791:	5b                   	pop    ebx
c000e792:	5e                   	pop    esi
c000e793:	5f                   	pop    edi
c000e794:	5d                   	pop    ebp
c000e795:	c3                   	ret    

c000e796 <VAS::VAS(VAS*)>:
c000e796:	53                   	push   ebx
c000e797:	83 ec 38             	sub    esp,0x38
c000e79a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e79e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e7a5:	e8 77 94 00 00       	call   c0017c21 <lockStuff()>
c000e7aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e7b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e7b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e7bc:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e7bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7c3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e7c6:	e8 2b da ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e7cb:	89 c2                	mov    edx,eax
c000e7cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e7d4:	e8 60 f7 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e7d9:	89 c3                	mov    ebx,eax
c000e7db:	83 ec 0c             	sub    esp,0xc
c000e7de:	6a 01                	push   0x1
c000e7e0:	e8 c4 f5 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	89 c2                	mov    edx,eax
c000e7ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7f1:	83 ec 0c             	sub    esp,0xc
c000e7f4:	6a 03                	push   0x3
c000e7f6:	6a 01                	push   0x1
c000e7f8:	52                   	push   edx
c000e7f9:	50                   	push   eax
c000e7fa:	53                   	push   ebx
c000e7fb:	e8 cc fe ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e800:	83 c4 20             	add    esp,0x20
c000e803:	89 c2                	mov    edx,eax
c000e805:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e809:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e80c:	83 ec 04             	sub    esp,0x4
c000e80f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e813:	6a 01                	push   0x1
c000e815:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e819:	e8 20 fa ff ff       	call   c000e23e <VAS::mapOtherVASIn(bool, VAS*)>
c000e81e:	83 c4 10             	add    esp,0x10
c000e821:	83 ec 0c             	sub    esp,0xc
c000e824:	6a 01                	push   0x1
c000e826:	e8 7e f5 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e832:	83 ec 0c             	sub    esp,0xc
c000e835:	6a 01                	push   0x1
c000e837:	e8 6d f5 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000e83c:	83 c4 10             	add    esp,0x10
c000e83f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e843:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e84b:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e853:	0f 8f 5e 02 00 00    	jg     c000eab7 <VAS::VAS(VAS*)+0x321>
c000e859:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e85e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e860:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e863:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e869:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e86c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e870:	c1 e2 02             	shl    edx,0x2
c000e873:	01 d0                	add    eax,edx
c000e875:	8b 00                	mov    eax,DWORD PTR [eax]
c000e877:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e87b:	83 ec 08             	sub    esp,0x8
c000e87e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e882:	68 0b 0a 02 c0       	push   0xc0020a0b
c000e887:	e8 9d 07 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e88c:	83 c4 10             	add    esp,0x10
c000e88f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e893:	25 01 04 00 00       	and    eax,0x401
c000e898:	3d 01 04 00 00       	cmp    eax,0x401
c000e89d:	0f 85 e5 01 00 00    	jne    c000ea88 <VAS::VAS(VAS*)+0x2f2>
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 1c 0a 02 c0       	push   0xc0020a1c
c000e8ab:	e8 79 07 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	e8 3e d9 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e8b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8bc:	83 ec 08             	sub    esp,0x8
c000e8bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e8c3:	68 32 0a 02 c0       	push   0xc0020a32
c000e8c8:	e8 5c 07 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8d4:	25 ff 0f 00 00       	and    eax,0xfff
c000e8d9:	89 c1                	mov    ecx,eax
c000e8db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e8e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8e6:	c1 e2 02             	shl    edx,0x2
c000e8e9:	01 c2                	add    edx,eax
c000e8eb:	89 c8                	mov    eax,ecx
c000e8ed:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e8f1:	89 02                	mov    DWORD PTR [edx],eax
c000e8f3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e8fb:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e903:	0f 8f a5 01 00 00    	jg     c000eaae <VAS::VAS(VAS*)+0x318>
c000e909:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e90d:	c1 e0 0a             	shl    eax,0xa
c000e910:	89 c2                	mov    edx,eax
c000e912:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e916:	01 d0                	add    eax,edx
c000e918:	c1 e0 0c             	shl    eax,0xc
c000e91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e91f:	83 ec 08             	sub    esp,0x8
c000e922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e926:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e92a:	e8 91 f7 ff ff       	call   c000e0c0 <VAS::getPageTableEntry(unsigned long)>
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	8b 00                	mov    eax,DWORD PTR [eax]
c000e934:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e938:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e93d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e93f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e942:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e948:	83 ec 04             	sub    esp,0x4
c000e94b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94f:	6a 01                	push   0x1
c000e951:	50                   	push   eax
c000e952:	e8 3d f7 ff ff       	call   c000e094 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e957:	83 c4 10             	add    esp,0x10
c000e95a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e95e:	83 ec 04             	sub    esp,0x4
c000e961:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e969:	68 c4 08 02 c0       	push   0xc00208c4
c000e96e:	e8 b6 06 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e973:	83 c4 10             	add    esp,0x10
c000e976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e97a:	25 01 04 00 00       	and    eax,0x401
c000e97f:	3d 01 04 00 00       	cmp    eax,0x401
c000e984:	0f 85 db 00 00 00    	jne    c000ea65 <VAS::VAS(VAS*)+0x2cf>
c000e98a:	83 ec 0c             	sub    esp,0xc
c000e98d:	68 41 0a 02 c0       	push   0xc0020a41
c000e992:	e8 92 06 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	e8 57 d8 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000e99f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9a3:	83 ec 08             	sub    esp,0x8
c000e9a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9aa:	68 50 0a 02 c0       	push   0xc0020a50
c000e9af:	e8 75 06 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e9b4:	83 c4 10             	add    esp,0x10
c000e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e9c0:	83 ec 08             	sub    esp,0x8
c000e9c3:	50                   	push   eax
c000e9c4:	68 64 0a 02 c0       	push   0xc0020a64
c000e9c9:	e8 5b 06 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000e9ce:	83 c4 10             	add    esp,0x10
c000e9d1:	e8 63 f5 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	6a 03                	push   0x3
c000e9db:	6a 01                	push   0x1
c000e9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e9e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e9e5:	50                   	push   eax
c000e9e6:	e8 e1 fc ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9eb:	83 c4 20             	add    esp,0x20
c000e9ee:	e8 46 f5 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000e9f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9f7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9fd:	83 ec 0c             	sub    esp,0xc
c000ea00:	6a 03                	push   0x3
c000ea02:	6a 01                	push   0x1
c000ea04:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ea08:	52                   	push   edx
c000ea09:	50                   	push   eax
c000ea0a:	e8 bd fc ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea0f:	83 c4 20             	add    esp,0x20
c000ea12:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea1a:	83 ec 04             	sub    esp,0x4
c000ea1d:	68 00 10 00 00       	push   0x1000
c000ea22:	52                   	push   edx
c000ea23:	50                   	push   eax
c000ea24:	e8 a9 1b ff ff       	call   c00005d2 <memcpy>
c000ea29:	83 c4 10             	add    esp,0x10
c000ea2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea30:	25 ff 0f 00 00       	and    eax,0xfff
c000ea35:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea39:	89 c2                	mov    edx,eax
c000ea3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea3f:	89 10                	mov    DWORD PTR [eax],edx
c000ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea45:	25 ff 0f 00 00       	and    eax,0xfff
c000ea4a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea4e:	83 ec 04             	sub    esp,0x4
c000ea51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea55:	50                   	push   eax
c000ea56:	68 e8 08 02 c0       	push   0xc00208e8
c000ea5b:	e8 c9 05 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000ea60:	83 c4 10             	add    esp,0x10
c000ea63:	eb 1a                	jmp    c000ea7f <VAS::VAS(VAS*)+0x2e9>
c000ea65:	83 ec 0c             	sub    esp,0xc
c000ea68:	68 78 0a 02 c0       	push   0xc0020a78
c000ea6d:	e8 b7 05 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000ea72:	83 c4 10             	add    esp,0x10
c000ea75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea7d:	89 10                	mov    DWORD PTR [eax],edx
c000ea7f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ea83:	e9 73 fe ff ff       	jmp    c000e8fb <VAS::VAS(VAS*)+0x165>
c000ea88:	83 ec 0c             	sub    esp,0xc
c000ea8b:	68 7c 0a 02 c0       	push   0xc0020a7c
c000ea90:	e8 94 05 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea9f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eaa3:	c1 e2 02             	shl    edx,0x2
c000eaa6:	01 c2                	add    edx,eax
c000eaa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaac:	89 02                	mov    DWORD PTR [edx],eax
c000eaae:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000eab2:	e9 94 fd ff ff       	jmp    c000e84b <VAS::VAS(VAS*)+0xb5>
c000eab7:	83 ec 0c             	sub    esp,0xc
c000eaba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eabe:	e8 1c f6 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000eac3:	83 c4 10             	add    esp,0x10
c000eac6:	83 ec 0c             	sub    esp,0xc
c000eac9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eacd:	e8 0d f6 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	e8 d9 94 00 00       	call   c0017fb3 <unlockStuff()>
c000eada:	90                   	nop
c000eadb:	83 c4 38             	add    esp,0x38
c000eade:	5b                   	pop    ebx
c000eadf:	c3                   	ret    

c000eae0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000eae0:	55                   	push   ebp
c000eae1:	57                   	push   edi
c000eae2:	56                   	push   esi
c000eae3:	53                   	push   ebx
c000eae4:	83 ec 1c             	sub    esp,0x1c
c000eae7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaef:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000eaf3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eaf7:	a9 ff 0f 00 00       	test   eax,0xfff
c000eafc:	75 4a                	jne    c000eb48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000eafe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eb02:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb05:	c1 eb 16             	shr    ebx,0x16
c000eb08:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eb0f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eb13:	74 4d                	je     c000eb62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000eb15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb19:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000eb1d:	c1 e8 0a             	shr    eax,0xa
c000eb20:	80 fa 01             	cmp    dl,0x1
c000eb23:	19 d2                	sbb    edx,edx
c000eb25:	c1 e3 0c             	shl    ebx,0xc
c000eb28:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eb2c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eb32:	25 fc 0f 00 00       	and    eax,0xffc
c000eb37:	01 d8                	add    eax,ebx
c000eb39:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eb40:	83 c4 1c             	add    esp,0x1c
c000eb43:	5b                   	pop    ebx
c000eb44:	5e                   	pop    esi
c000eb45:	5f                   	pop    edi
c000eb46:	5d                   	pop    ebp
c000eb47:	c3                   	ret    
c000eb48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eb4c:	83 ec 0c             	sub    esp,0xc
c000eb4f:	68 0c 09 02 c0       	push   0xc002090c
c000eb54:	e8 65 61 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb60:	eb 9c                	jmp    c000eafe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eb62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb66:	e8 8b d6 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000eb6b:	89 c5                	mov    ebp,eax
c000eb6d:	e8 c7 f3 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000eb72:	83 ec 0c             	sub    esp,0xc
c000eb75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb79:	6a 01                	push   0x1
c000eb7b:	e8 29 f2 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000eb80:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb87:	6a 01                	push   0x1
c000eb89:	50                   	push   eax
c000eb8a:	55                   	push   ebp
c000eb8b:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb91:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb95:	51                   	push   ecx
c000eb96:	e8 31 fb ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb9b:	83 c4 1c             	add    esp,0x1c
c000eb9e:	68 00 10 00 00       	push   0x1000
c000eba3:	6a 00                	push   0x0
c000eba5:	50                   	push   eax
c000eba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebaa:	e8 59 1a ff ff       	call   c0000608 <memset>
c000ebaf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ebb3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ebb6:	e8 24 f5 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c000ebbb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebbe:	83 c4 10             	add    esp,0x10
c000ebc1:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ebc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ebc8:	e9 48 ff ff ff       	jmp    c000eb15 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ebcd:	90                   	nop

c000ebce <VAS::VAS(bool)>:
c000ebce:	53                   	push   ebx
c000ebcf:	83 ec 28             	sub    esp,0x28
c000ebd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebd6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ebda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ebe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebe9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ebed:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ebf0:	e8 01 d6 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000ebf5:	89 c2                	mov    edx,eax
c000ebf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebfb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ebfe:	e8 36 f3 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c000ec03:	89 c3                	mov    ebx,eax
c000ec05:	83 ec 0c             	sub    esp,0xc
c000ec08:	6a 01                	push   0x1
c000ec0a:	e8 9a f1 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	89 c2                	mov    edx,eax
c000ec14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	6a 03                	push   0x3
c000ec20:	6a 01                	push   0x1
c000ec22:	52                   	push   edx
c000ec23:	50                   	push   eax
c000ec24:	53                   	push   ebx
c000ec25:	e8 a2 fa ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec2a:	83 c4 20             	add    esp,0x20
c000ec2d:	89 c2                	mov    edx,eax
c000ec2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec36:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ec3e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ec46:	7f 1c                	jg     c000ec64 <VAS::VAS(bool)+0x96>
c000ec48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec53:	c1 e2 02             	shl    edx,0x2
c000ec56:	01 d0                	add    eax,edx
c000ec58:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec5e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ec62:	eb da                	jmp    c000ec3e <VAS::VAS(bool)+0x70>
c000ec64:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ec6c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ec74:	7f 71                	jg     c000ece7 <VAS::VAS(bool)+0x119>
c000ec76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec7a:	2d 00 02 00 00       	sub    eax,0x200
c000ec7f:	c1 e0 0c             	shl    eax,0xc
c000ec82:	83 c8 03             	or     eax,0x3
c000ec85:	89 c3                	mov    ebx,eax
c000ec87:	e8 2c 53 00 00       	call   c0013fb8 <thisCPU()>
c000ec8c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec92:	83 e0 10             	and    eax,0x10
c000ec95:	84 c0                	test   al,al
c000ec97:	74 07                	je     c000eca0 <VAS::VAS(bool)+0xd2>
c000ec99:	b8 00 01 00 00       	mov    eax,0x100
c000ec9e:	eb 05                	jmp    c000eca5 <VAS::VAS(bool)+0xd7>
c000eca0:	b8 00 00 00 00       	mov    eax,0x0
c000eca5:	09 d8                	or     eax,ebx
c000eca7:	89 c1                	mov    ecx,eax
c000eca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecb4:	c1 e2 02             	shl    edx,0x2
c000ecb7:	01 d0                	add    eax,edx
c000ecb9:	89 ca                	mov    edx,ecx
c000ecbb:	89 10                	mov    DWORD PTR [eax],edx
c000ecbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecc1:	2d 40 03 00 00       	sub    eax,0x340
c000ecc6:	83 f8 7f             	cmp    eax,0x7f
c000ecc9:	77 16                	ja     c000ece1 <VAS::VAS(bool)+0x113>
c000eccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eccf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ecd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecd6:	c1 e2 02             	shl    edx,0x2
c000ecd9:	01 d0                	add    eax,edx
c000ecdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ece1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ece5:	eb 85                	jmp    c000ec6c <VAS::VAS(bool)+0x9e>
c000ece7:	e8 cc 52 00 00       	call   c0013fb8 <thisCPU()>
c000ecec:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecf2:	83 e0 10             	and    eax,0x10
c000ecf5:	84 c0                	test   al,al
c000ecf7:	74 07                	je     c000ed00 <VAS::VAS(bool)+0x132>
c000ecf9:	b8 03 41 00 00       	mov    eax,0x4103
c000ecfe:	eb 05                	jmp    c000ed05 <VAS::VAS(bool)+0x137>
c000ed00:	b8 03 40 00 00       	mov    eax,0x4003
c000ed05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ed09:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ed0c:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ed12:	89 02                	mov    DWORD PTR [edx],eax
c000ed14:	e8 9f 52 00 00       	call   c0013fb8 <thisCPU()>
c000ed19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ed1f:	83 ec 08             	sub    esp,0x8
c000ed22:	50                   	push   eax
c000ed23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed27:	e8 84 f9 ff ff       	call   c000e6b0 <VAS::setCPUSpecific(unsigned long)>
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed33:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ed36:	e8 7d 52 00 00       	call   c0013fb8 <thisCPU()>
c000ed3b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed41:	83 e0 10             	and    eax,0x10
c000ed44:	84 c0                	test   al,al
c000ed46:	74 07                	je     c000ed4f <VAS::VAS(bool)+0x181>
c000ed48:	b8 00 01 00 00       	mov    eax,0x100
c000ed4d:	eb 05                	jmp    c000ed54 <VAS::VAS(bool)+0x186>
c000ed4f:	b8 00 00 00 00       	mov    eax,0x0
c000ed54:	09 d8                	or     eax,ebx
c000ed56:	89 c2                	mov    edx,eax
c000ed58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed5f:	05 fc 0f 00 00       	add    eax,0xffc
c000ed64:	83 ca 03             	or     edx,0x3
c000ed67:	89 10                	mov    DWORD PTR [eax],edx
c000ed69:	e8 4a 52 00 00       	call   c0013fb8 <thisCPU()>
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	50                   	push   eax
c000ed72:	e8 9f 19 00 00       	call   c0010716 <Device::getName()>
c000ed77:	83 c4 10             	add    esp,0x10
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	68 8c 0a 02 c0       	push   0xc0020a8c
c000ed82:	50                   	push   eax
c000ed83:	e8 7d 19 ff ff       	call   c0000705 <strcmp>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	85 c0                	test   eax,eax
c000ed8d:	0f 94 c0             	sete   al
c000ed90:	84 c0                	test   al,al
c000ed92:	74 64                	je     c000edf8 <VAS::VAS(bool)+0x22a>
c000ed94:	e8 44 8e 00 00       	call   c0017bdd <disableIRQs()>
c000ed99:	e8 1a 52 00 00       	call   c0013fb8 <thisCPU()>
c000ed9e:	05 7c 09 00 00       	add    eax,0x97c
c000eda3:	83 ec 0c             	sub    esp,0xc
c000eda6:	50                   	push   eax
c000eda7:	e8 12 c9 ff ff       	call   c000b6be <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000edac:	83 c4 10             	add    esp,0x10
c000edaf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000edb4:	89 c3                	mov    ebx,eax
c000edb6:	e8 fd 51 00 00       	call   c0013fb8 <thisCPU()>
c000edbb:	05 7c 09 00 00       	add    eax,0x97c
c000edc0:	83 ec 0c             	sub    esp,0xc
c000edc3:	50                   	push   eax
c000edc4:	e8 f5 c8 ff ff       	call   c000b6be <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000edc9:	83 c4 10             	add    esp,0x10
c000edcc:	83 ec 08             	sub    esp,0x8
c000edcf:	50                   	push   eax
c000edd0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edd4:	e8 e7 f2 ff ff       	call   c000e0c0 <VAS::getPageTableEntry(unsigned long)>
c000edd9:	83 c4 10             	add    esp,0x10
c000eddc:	8b 00                	mov    eax,DWORD PTR [eax]
c000edde:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ede3:	6a 11                	push   0x11
c000ede5:	53                   	push   ebx
c000ede6:	50                   	push   eax
c000ede7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000edeb:	e8 f0 f5 ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000edf0:	83 c4 10             	add    esp,0x10
c000edf3:	e8 f3 8d 00 00       	call   c0017beb <enableIRQs()>
c000edf8:	90                   	nop
c000edf9:	83 c4 28             	add    esp,0x28
c000edfc:	5b                   	pop    ebx
c000edfd:	c3                   	ret    

c000edfe <mapVASFirstTime>:
c000edfe:	55                   	push   ebp
c000edff:	57                   	push   edi
c000ee00:	56                   	push   esi
c000ee01:	53                   	push   ebx
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee0a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ee0d:	4a                   	dec    edx
c000ee0e:	0f 84 99 00 00 00    	je     c000eead <mapVASFirstTime+0xaf>
c000ee14:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ee17:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ee1a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ee1f:	c1 e5 15             	shl    ebp,0x15
c000ee22:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ee27:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ee2d:	29 eb                	sub    ebx,ebp
c000ee2f:	29 ee                	sub    esi,ebp
c000ee31:	e8 c0 d3 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000ee36:	83 ec 0c             	sub    esp,0xc
c000ee39:	68 03 04 00 00       	push   0x403
c000ee3e:	6a 01                	push   0x1
c000ee40:	53                   	push   ebx
c000ee41:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ee47:	50                   	push   eax
c000ee48:	57                   	push   edi
c000ee49:	e8 7e f8 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee4e:	83 c4 20             	add    esp,0x20
c000ee51:	39 f3                	cmp    ebx,esi
c000ee53:	75 dc                	jne    c000ee31 <mapVASFirstTime+0x33>
c000ee55:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ee5a:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ee5f:	29 ee                	sub    esi,ebp
c000ee61:	29 e8                	sub    eax,ebp
c000ee63:	89 c5                	mov    ebp,eax
c000ee65:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ee69:	19 db                	sbb    ebx,ebx
c000ee6b:	e8 86 d3 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c000ee70:	83 e3 04             	and    ebx,0x4
c000ee73:	83 ec 0c             	sub    esp,0xc
c000ee76:	81 c3 03 04 00 00    	add    ebx,0x403
c000ee7c:	53                   	push   ebx
c000ee7d:	6a 01                	push   0x1
c000ee7f:	56                   	push   esi
c000ee80:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee86:	50                   	push   eax
c000ee87:	57                   	push   edi
c000ee88:	e8 3f f8 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee8d:	83 c4 20             	add    esp,0x20
c000ee90:	39 f5                	cmp    ebp,esi
c000ee92:	75 d1                	jne    c000ee65 <mapVASFirstTime+0x67>
c000ee94:	e8 dc fb 00 00       	call   c001ea75 <CPU::readCR3()>
c000ee99:	83 ec 0c             	sub    esp,0xc
c000ee9c:	50                   	push   eax
c000ee9d:	e8 e5 fb 00 00       	call   c001ea87 <CPU::writeCR3(unsigned long)>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	83 c4 0c             	add    esp,0xc
c000eea8:	5b                   	pop    ebx
c000eea9:	5e                   	pop    esi
c000eeaa:	5f                   	pop    edi
c000eeab:	5d                   	pop    ebp
c000eeac:	c3                   	ret    
c000eead:	83 ec 0c             	sub    esp,0xc
c000eeb0:	68 9a 0a 02 c0       	push   0xc0020a9a
c000eeb5:	e8 6f 01 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000eeba:	83 c4 10             	add    esp,0x10
c000eebd:	83 c4 0c             	add    esp,0xc
c000eec0:	5b                   	pop    ebx
c000eec1:	5e                   	pop    esi
c000eec2:	5f                   	pop    edi
c000eec3:	5d                   	pop    ebp
c000eec4:	c3                   	ret    

c000eec5 <__cxa_atexit>:
c000eec5:	31 c0                	xor    eax,eax
c000eec7:	c3                   	ret    

c000eec8 <__cxa_finalize>:
c000eec8:	c3                   	ret    

c000eec9 <__stack_chk_fail>:
c000eec9:	55                   	push   ebp
c000eeca:	89 e5                	mov    ebp,esp
c000eecc:	83 ec 10             	sub    esp,0x10
c000eecf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000eed2:	68 b3 0a 02 c0       	push   0xc0020ab3
c000eed7:	e8 4d 01 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000eedc:	58                   	pop    eax
c000eedd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eee0:	5a                   	pop    edx
c000eee1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eee4:	68 b3 0a 02 c0       	push   0xc0020ab3
c000eee9:	e8 3b 01 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000eeee:	59                   	pop    ecx
c000eeef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eef2:	5a                   	pop    edx
c000eef3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eef5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eef8:	68 b3 0a 02 c0       	push   0xc0020ab3
c000eefd:	e8 27 01 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000ef02:	59                   	pop    ecx
c000ef03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef06:	5a                   	pop    edx
c000ef07:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef09:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef0b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ef0e:	68 b3 0a 02 c0       	push   0xc0020ab3
c000ef13:	e8 11 01 00 00       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c000ef18:	c7 04 24 bb 0a 02 c0 	mov    DWORD PTR [esp],0xc0020abb
c000ef1f:	e8 9a 5d 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000ef24:	83 c4 10             	add    esp,0x10
c000ef27:	c9                   	leave  
c000ef28:	c3                   	ret    

c000ef29 <__cxa_pure_virtual>:
c000ef29:	83 ec 18             	sub    esp,0x18
c000ef2c:	68 d3 0a 02 c0       	push   0xc0020ad3
c000ef31:	e8 88 5d 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c000ef36:	83 c4 1c             	add    esp,0x1c
c000ef39:	c3                   	ret    

c000ef3a <operator new(unsigned long)>:
c000ef3a:	e9 0d cd ff ff       	jmp    c000bc4c <malloc>

c000ef3f <operator new[](unsigned long)>:
c000ef3f:	e9 08 cd ff ff       	jmp    c000bc4c <malloc>

c000ef44 <operator delete(void*)>:
c000ef44:	e9 23 cd ff ff       	jmp    c000bc6c <rfree>

c000ef49 <operator delete(void*, unsigned long)>:
c000ef49:	e9 1e cd ff ff       	jmp    c000bc6c <rfree>

c000ef4e <operator delete[](void*)>:
c000ef4e:	e9 19 cd ff ff       	jmp    c000bc6c <rfree>

c000ef53 <operator delete[](void*, unsigned long)>:
c000ef53:	e9 14 cd ff ff       	jmp    c000bc6c <rfree>

c000ef58 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ef58:	57                   	push   edi
c000ef59:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ef5e:	56                   	push   esi
c000ef5f:	be e8 0a 02 c0       	mov    esi,0xc0020ae8
c000ef64:	53                   	push   ebx
c000ef65:	83 ec 40             	sub    esp,0x40
c000ef68:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ef6c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ef70:	fc                   	cld    
c000ef71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef73:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ef77:	83 f9 3e             	cmp    ecx,0x3e
c000ef7a:	7e 05                	jle    c000ef81 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ef7c:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ef81:	89 df                	mov    edi,ebx
c000ef83:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef87:	eb 02                	jmp    c000ef8b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef89:	89 c7                	mov    edi,eax
c000ef8b:	31 d2                	xor    edx,edx
c000ef8d:	46                   	inc    esi
c000ef8e:	89 f8                	mov    eax,edi
c000ef90:	f7 f1                	div    ecx
c000ef92:	39 cf                	cmp    edi,ecx
c000ef94:	73 f3                	jae    c000ef89 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ef96:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ef99:	eb 02                	jmp    c000ef9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ef9b:	89 c3                	mov    ebx,eax
c000ef9d:	31 d2                	xor    edx,edx
c000ef9f:	4e                   	dec    esi
c000efa0:	89 d8                	mov    eax,ebx
c000efa2:	f7 f1                	div    ecx
c000efa4:	39 cb                	cmp    ebx,ecx
c000efa6:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000efaa:	88 16                	mov    BYTE PTR [esi],dl
c000efac:	73 ed                	jae    c000ef9b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000efae:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efb2:	83 c4 40             	add    esp,0x40
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	5f                   	pop    edi
c000efb8:	c3                   	ret    

c000efb9 <Dbg::logc(char)>:
c000efb9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000efbd:	ba fd 03 00 00       	mov    edx,0x3fd
c000efc2:	ec                   	in     al,dx
c000efc3:	a8 20                	test   al,0x20
c000efc5:	74 fb                	je     c000efc2 <Dbg::logc(char)+0x9>
c000efc7:	ba f8 03 00 00       	mov    edx,0x3f8
c000efcc:	88 c8                	mov    al,cl
c000efce:	ee                   	out    dx,al
c000efcf:	c3                   	ret    

c000efd0 <Dbg::logs(char*)>:
c000efd0:	53                   	push   ebx
c000efd1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000efd5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efd8:	84 c0                	test   al,al
c000efda:	74 0f                	je     c000efeb <Dbg::logs(char*)+0x1b>
c000efdc:	50                   	push   eax
c000efdd:	43                   	inc    ebx
c000efde:	e8 d6 ff ff ff       	call   c000efb9 <Dbg::logc(char)>
c000efe3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efe6:	5a                   	pop    edx
c000efe7:	84 c0                	test   al,al
c000efe9:	75 f1                	jne    c000efdc <Dbg::logs(char*)+0xc>
c000efeb:	5b                   	pop    ebx
c000efec:	c3                   	ret    

c000efed <Dbg::logWriteInt(unsigned int)>:
c000efed:	83 ec 10             	sub    esp,0x10
c000eff0:	6a 0a                	push   0xa
c000eff2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000eff6:	50                   	push   eax
c000eff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000effb:	e8 58 ff ff ff       	call   c000ef58 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f000:	50                   	push   eax
c000f001:	e8 ca ff ff ff       	call   c000efd0 <Dbg::logs(char*)>
c000f006:	83 c4 20             	add    esp,0x20
c000f009:	c3                   	ret    

c000f00a <Dbg::logWriteIntBase(unsigned int, int)>:
c000f00a:	83 ec 10             	sub    esp,0x10
c000f00d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f011:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f015:	50                   	push   eax
c000f016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f01a:	e8 39 ff ff ff       	call   c000ef58 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f01f:	50                   	push   eax
c000f020:	e8 ab ff ff ff       	call   c000efd0 <Dbg::logs(char*)>
c000f025:	83 c4 20             	add    esp,0x20
c000f028:	c3                   	ret    

c000f029 <Dbg::kprintf(char const*, ...)>:
c000f029:	55                   	push   ebp
c000f02a:	57                   	push   edi
c000f02b:	56                   	push   esi
c000f02c:	53                   	push   ebx
c000f02d:	83 ec 0c             	sub    esp,0xc
c000f030:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f034:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f038:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f03c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f03f:	84 c0                	test   al,al
c000f041:	74 4a                	je     c000f08d <Dbg::kprintf(char const*, ...)+0x64>
c000f043:	31 db                	xor    ebx,ebx
c000f045:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f048:	3c 25                	cmp    al,0x25
c000f04a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f04d:	0f 85 e4 00 00 00    	jne    c000f137 <Dbg::kprintf(char const*, ...)+0x10e>
c000f053:	83 c3 02             	add    ebx,0x2
c000f056:	8a 07                	mov    al,BYTE PTR [edi]
c000f058:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f05b:	83 e8 25             	sub    eax,0x25
c000f05e:	3c 53                	cmp    al,0x53
c000f060:	0f 87 ba 00 00 00    	ja     c000f120 <Dbg::kprintf(char const*, ...)+0xf7>
c000f066:	0f b6 c0             	movzx  eax,al
c000f069:	ff 24 85 28 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf4d8]
c000f070:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f074:	89 c8                	mov    eax,ecx
c000f076:	83 c1 04             	add    ecx,0x4
c000f079:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f07d:	ff 30                	push   DWORD PTR [eax]
c000f07f:	e8 4c ff ff ff       	call   c000efd0 <Dbg::logs(char*)>
c000f084:	58                   	pop    eax
c000f085:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f089:	84 c0                	test   al,al
c000f08b:	75 b8                	jne    c000f045 <Dbg::kprintf(char const*, ...)+0x1c>
c000f08d:	83 c4 0c             	add    esp,0xc
c000f090:	5b                   	pop    ebx
c000f091:	5e                   	pop    esi
c000f092:	5f                   	pop    edi
c000f093:	5d                   	pop    ebp
c000f094:	c3                   	ret    
c000f095:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f099:	89 d0                	mov    eax,edx
c000f09b:	83 c2 04             	add    edx,0x4
c000f09e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0a2:	ff 30                	push   DWORD PTR [eax]
c000f0a4:	e8 44 ff ff ff       	call   c000efed <Dbg::logWriteInt(unsigned int)>
c000f0a9:	58                   	pop    eax
c000f0aa:	eb d9                	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0b0:	89 d0                	mov    eax,edx
c000f0b2:	83 c2 04             	add    edx,0x4
c000f0b5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f0b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0bc:	50                   	push   eax
c000f0bd:	e8 f7 fe ff ff       	call   c000efb9 <Dbg::logc(char)>
c000f0c2:	58                   	pop    eax
c000f0c3:	eb c0                	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0c9:	89 c8                	mov    eax,ecx
c000f0cb:	83 c1 04             	add    ecx,0x4
c000f0ce:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0d2:	ff 30                	push   DWORD PTR [eax]
c000f0d4:	e8 14 ff ff ff       	call   c000efed <Dbg::logWriteInt(unsigned int)>
c000f0d9:	5f                   	pop    edi
c000f0da:	eb a9                	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0e0:	89 c8                	mov    eax,ecx
c000f0e2:	83 c1 04             	add    ecx,0x4
c000f0e5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0e9:	6a 10                	push   0x10
c000f0eb:	ff 30                	push   DWORD PTR [eax]
c000f0ed:	e8 18 ff ff ff       	call   c000f00a <Dbg::logWriteIntBase(unsigned int, int)>
c000f0f2:	59                   	pop    ecx
c000f0f3:	5f                   	pop    edi
c000f0f4:	eb 8f                	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f0f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0fa:	89 d0                	mov    eax,edx
c000f0fc:	83 c2 08             	add    edx,0x8
c000f0ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f103:	6a 10                	push   0x10
c000f105:	ff 30                	push   DWORD PTR [eax]
c000f107:	e8 fe fe ff ff       	call   c000f00a <Dbg::logWriteIntBase(unsigned int, int)>
c000f10c:	58                   	pop    eax
c000f10d:	5a                   	pop    edx
c000f10e:	e9 72 ff ff ff       	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f113:	6a 25                	push   0x25
c000f115:	e8 9f fe ff ff       	call   c000efb9 <Dbg::logc(char)>
c000f11a:	58                   	pop    eax
c000f11b:	e9 65 ff ff ff       	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f120:	6a 25                	push   0x25
c000f122:	e8 92 fe ff ff       	call   c000efb9 <Dbg::logc(char)>
c000f127:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f12a:	50                   	push   eax
c000f12b:	e8 89 fe ff ff       	call   c000efb9 <Dbg::logc(char)>
c000f130:	5a                   	pop    edx
c000f131:	59                   	pop    ecx
c000f132:	e9 4e ff ff ff       	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f137:	50                   	push   eax
c000f138:	89 eb                	mov    ebx,ebp
c000f13a:	e8 7a fe ff ff       	call   c000efb9 <Dbg::logc(char)>
c000f13f:	89 fd                	mov    ebp,edi
c000f141:	58                   	pop    eax
c000f142:	e9 3e ff ff ff       	jmp    c000f085 <Dbg::kprintf(char const*, ...)+0x5c>
c000f147:	90                   	nop

c000f148 <File::read(unsigned long long, void*, int*)>:
c000f148:	53                   	push   ebx
c000f149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f158:	3c 19                	cmp    al,0x19
c000f15a:	77 35                	ja     c000f191 <File::read(unsigned long long, void*, int*)+0x49>
c000f15c:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c000f163:	85 c0                	test   eax,eax
c000f165:	74 2a                	je     c000f191 <File::read(unsigned long long, void*, int*)+0x49>
c000f167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f16d:	85 c0                	test   eax,eax
c000f16f:	74 20                	je     c000f191 <File::read(unsigned long long, void*, int*)+0x49>
c000f171:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f175:	74 21                	je     c000f198 <File::read(unsigned long long, void*, int*)+0x50>
c000f177:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f179:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f17d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f18b:	5b                   	pop    ebx
c000f18c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f18f:	ff e0                	jmp    eax
c000f191:	b8 0b 00 00 00       	mov    eax,0xb
c000f196:	eb 05                	jmp    c000f19d <File::read(unsigned long long, void*, int*)+0x55>
c000f198:	b8 05 00 00 00       	mov    eax,0x5
c000f19d:	5b                   	pop    ebx
c000f19e:	c3                   	ret    
c000f19f:	90                   	nop

c000f1a0 <File::write(unsigned long long, void*, int*)>:
c000f1a0:	53                   	push   ebx
c000f1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f1b0:	3c 19                	cmp    al,0x19
c000f1b2:	77 35                	ja     c000f1e9 <File::write(unsigned long long, void*, int*)+0x49>
c000f1b4:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c000f1bb:	85 c0                	test   eax,eax
c000f1bd:	74 2a                	je     c000f1e9 <File::write(unsigned long long, void*, int*)+0x49>
c000f1bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f1c5:	85 c0                	test   eax,eax
c000f1c7:	74 20                	je     c000f1e9 <File::write(unsigned long long, void*, int*)+0x49>
c000f1c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f1cd:	74 21                	je     c000f1f0 <File::write(unsigned long long, void*, int*)+0x50>
c000f1cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1e3:	5b                   	pop    ebx
c000f1e4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f1e7:	ff e0                	jmp    eax
c000f1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000f1ee:	eb 05                	jmp    c000f1f5 <File::write(unsigned long long, void*, int*)+0x55>
c000f1f0:	b8 05 00 00 00       	mov    eax,0x5
c000f1f5:	5b                   	pop    ebx
c000f1f6:	c3                   	ret    
c000f1f7:	90                   	nop

c000f1f8 <Directory::read(unsigned long long, void*, int*)>:
c000f1f8:	53                   	push   ebx
c000f1f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f201:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f208:	3c 19                	cmp    al,0x19
c000f20a:	77 35                	ja     c000f241 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f20c:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c000f213:	85 c0                	test   eax,eax
c000f215:	74 2a                	je     c000f241 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f217:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f21d:	85 c0                	test   eax,eax
c000f21f:	74 20                	je     c000f241 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f221:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f225:	74 21                	je     c000f248 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f227:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f229:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f22d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f233:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f237:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f23b:	5b                   	pop    ebx
c000f23c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f23f:	ff e0                	jmp    eax
c000f241:	b8 0b 00 00 00       	mov    eax,0xb
c000f246:	eb 05                	jmp    c000f24d <Directory::read(unsigned long long, void*, int*)+0x55>
c000f248:	b8 05 00 00 00       	mov    eax,0x5
c000f24d:	5b                   	pop    ebx
c000f24e:	c3                   	ret    
c000f24f:	90                   	nop

c000f250 <Directory::write(unsigned long long, void*, int*)>:
c000f250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f254:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f25b:	b8 0b 00 00 00       	mov    eax,0xb
c000f260:	80 fa 19             	cmp    dl,0x19
c000f263:	77 18                	ja     c000f27d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f265:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000f26c:	85 d2                	test   edx,edx
c000f26e:	74 0d                	je     c000f27d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f270:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f277:	19 c0                	sbb    eax,eax
c000f279:	83 e0 0a             	and    eax,0xa
c000f27c:	40                   	inc    eax
c000f27d:	c3                   	ret    

c000f27e <File::isAtty()>:
c000f27e:	31 c0                	xor    eax,eax
c000f280:	c3                   	ret    
c000f281:	90                   	nop

c000f282 <Directory::isAtty()>:
c000f282:	31 c0                	xor    eax,eax
c000f284:	c3                   	ret    
c000f285:	90                   	nop

c000f286 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f286:	b8 0a 00 00 00       	mov    eax,0xa
c000f28b:	c3                   	ret    

c000f28c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f28c:	b8 0a 00 00 00       	mov    eax,0xa
c000f291:	c3                   	ret    

c000f292 <File::~File()>:
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	ba e4 0c 02 c0       	mov    edx,0xc0020ce4
c000f29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29e:	89 10                	mov    DWORD PTR [eax],edx
c000f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a4:	83 ec 0c             	sub    esp,0xc
c000f2a7:	50                   	push   eax
c000f2a8:	e8 6d e8 ff ff       	call   c000db1a <UnixFile::~UnixFile()>
c000f2ad:	83 c4 10             	add    esp,0x10
c000f2b0:	90                   	nop
c000f2b1:	83 c4 0c             	add    esp,0xc
c000f2b4:	c3                   	ret    
c000f2b5:	90                   	nop

c000f2b6 <File::~File()>:
c000f2b6:	83 ec 0c             	sub    esp,0xc
c000f2b9:	83 ec 0c             	sub    esp,0xc
c000f2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2c0:	e8 cd ff ff ff       	call   c000f292 <File::~File()>
c000f2c5:	83 c4 10             	add    esp,0x10
c000f2c8:	83 ec 08             	sub    esp,0x8
c000f2cb:	68 14 01 00 00       	push   0x114
c000f2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2d4:	e8 70 fc ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000f2d9:	83 c4 10             	add    esp,0x10
c000f2dc:	83 c4 0c             	add    esp,0xc
c000f2df:	c3                   	ret    

c000f2e0 <Directory::~Directory()>:
c000f2e0:	83 ec 0c             	sub    esp,0xc
c000f2e3:	ba 00 0d 02 c0       	mov    edx,0xc0020d00
c000f2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ec:	89 10                	mov    DWORD PTR [eax],edx
c000f2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f2:	83 ec 0c             	sub    esp,0xc
c000f2f5:	50                   	push   eax
c000f2f6:	e8 1f e8 ff ff       	call   c000db1a <UnixFile::~UnixFile()>
c000f2fb:	83 c4 10             	add    esp,0x10
c000f2fe:	90                   	nop
c000f2ff:	83 c4 0c             	add    esp,0xc
c000f302:	c3                   	ret    
c000f303:	90                   	nop

c000f304 <Directory::~Directory()>:
c000f304:	83 ec 0c             	sub    esp,0xc
c000f307:	83 ec 0c             	sub    esp,0xc
c000f30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f30e:	e8 cd ff ff ff       	call   c000f2e0 <Directory::~Directory()>
c000f313:	83 c4 10             	add    esp,0x10
c000f316:	83 ec 08             	sub    esp,0x8
c000f319:	68 14 01 00 00       	push   0x114
c000f31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f322:	e8 22 fc ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000f327:	83 c4 10             	add    esp,0x10
c000f32a:	83 c4 0c             	add    esp,0xc
c000f32d:	c3                   	ret    

c000f32e <Filesystem::Filesystem()>:
c000f32e:	ba 80 0c 02 c0       	mov    edx,0xc0020c80
c000f333:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f337:	89 10                	mov    DWORD PTR [eax],edx
c000f339:	8b 15 08 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023908
c000f33f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f343:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f34a:	a3 08 39 02 c0       	mov    ds:0xc0023908,eax
c000f34f:	90                   	nop
c000f350:	c3                   	ret    
c000f351:	90                   	nop

c000f352 <Filesystem::~Filesystem()>:
c000f352:	ba 80 0c 02 c0       	mov    edx,0xc0020c80
c000f357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f35b:	89 10                	mov    DWORD PTR [eax],edx
c000f35d:	90                   	nop
c000f35e:	c3                   	ret    
c000f35f:	90                   	nop

c000f360 <Filesystem::~Filesystem()>:
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f367:	e8 e6 ff ff ff       	call   c000f352 <Filesystem::~Filesystem()>
c000f36c:	83 c4 04             	add    esp,0x4
c000f36f:	83 ec 08             	sub    esp,0x8
c000f372:	6a 08                	push   0x8
c000f374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f378:	e8 cc fb ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000f37d:	83 c4 10             	add    esp,0x10
c000f380:	83 c4 0c             	add    esp,0xc
c000f383:	c3                   	ret    

c000f384 <initVFS()>:
c000f384:	83 ec 18             	sub    esp,0x18
c000f387:	6a 08                	push   0x8
c000f389:	e8 ac fb ff ff       	call   c000ef3a <operator new(unsigned long)>
c000f38e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f391:	e8 46 a9 00 00       	call   c0019cdc <FAT::FAT()>
c000f396:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f39d:	e8 98 fb ff ff       	call   c000ef3a <operator new(unsigned long)>
c000f3a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3a5:	e8 a8 bb 00 00       	call   c001af52 <ISO9660::ISO9660()>
c000f3aa:	83 c4 1c             	add    esp,0x1c
c000f3ad:	c3                   	ret    

c000f3ae <standardiseFiles(char*, char const*, char const*)>:
c000f3ae:	55                   	push   ebp
c000f3af:	57                   	push   edi
c000f3b0:	56                   	push   esi
c000f3b1:	53                   	push   ebx
c000f3b2:	81 ec 10 04 00 00    	sub    esp,0x410
c000f3b8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f3bf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f3c6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f3cd:	68 00 04 00 00       	push   0x400
c000f3d2:	6a 00                	push   0x0
c000f3d4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f3d8:	56                   	push   esi
c000f3d9:	e8 2a 12 ff ff       	call   c0000608 <memset>
c000f3de:	83 c4 10             	add    esp,0x10
c000f3e1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f3e5:	75 0b                	jne    c000f3f2 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f3e7:	50                   	push   eax
c000f3e8:	50                   	push   eax
c000f3e9:	57                   	push   edi
c000f3ea:	56                   	push   esi
c000f3eb:	e8 b7 12 ff ff       	call   c00006a7 <strcpy>
c000f3f0:	eb 41                	jmp    c000f433 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f3f2:	8a 07                	mov    al,BYTE PTR [edi]
c000f3f4:	3c 5c                	cmp    al,0x5c
c000f3f6:	74 04                	je     c000f3fc <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f3f8:	3c 2f                	cmp    al,0x2f
c000f3fa:	75 18                	jne    c000f414 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f3fc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f3ff:	3c 60                	cmp    al,0x60
c000f401:	7e 03                	jle    c000f406 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f403:	83 e8 20             	sub    eax,0x20
c000f406:	88 04 24             	mov    BYTE PTR [esp],al
c000f409:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f410:	50                   	push   eax
c000f411:	50                   	push   eax
c000f412:	eb 18                	jmp    c000f42c <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f414:	50                   	push   eax
c000f415:	50                   	push   eax
c000f416:	55                   	push   ebp
c000f417:	56                   	push   esi
c000f418:	e8 8a 12 ff ff       	call   c00006a7 <strcpy>
c000f41d:	5a                   	pop    edx
c000f41e:	59                   	pop    ecx
c000f41f:	68 34 1e 02 c0       	push   0xc0021e34
c000f424:	56                   	push   esi
c000f425:	e8 41 13 ff ff       	call   c000076b <strcat>
c000f42a:	5d                   	pop    ebp
c000f42b:	58                   	pop    eax
c000f42c:	57                   	push   edi
c000f42d:	56                   	push   esi
c000f42e:	e8 38 13 ff ff       	call   c000076b <strcat>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f439:	3c 60                	cmp    al,0x60
c000f43b:	7e 03                	jle    c000f440 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f43d:	83 e8 20             	sub    eax,0x20
c000f440:	88 04 24             	mov    BYTE PTR [esp],al
c000f443:	88 03                	mov    BYTE PTR [ebx],al
c000f445:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f44c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f452:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f456:	bf 03 00 00 00       	mov    edi,0x3
c000f45b:	b8 03 00 00 00       	mov    eax,0x3
c000f460:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f463:	84 d2                	test   dl,dl
c000f465:	0f 84 91 00 00 00    	je     c000f4fc <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f46b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f46e:	80 fa 5c             	cmp    dl,0x5c
c000f471:	74 05                	je     c000f478 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f473:	80 fa 2f             	cmp    dl,0x2f
c000f476:	75 12                	jne    c000f48a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f478:	89 c5                	mov    ebp,eax
c000f47a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f47f:	74 09                	je     c000f48a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f481:	40                   	inc    eax
c000f482:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f486:	89 cf                	mov    edi,ecx
c000f488:	eb d6                	jmp    c000f460 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f48a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f48f:	75 5b                	jne    c000f4ec <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f491:	80 fa 2e             	cmp    dl,0x2e
c000f494:	75 56                	jne    c000f4ec <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f496:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f49a:	74 19                	je     c000f4b5 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f49c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f4a1:	74 53                	je     c000f4f6 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f4a3:	89 f9                	mov    ecx,edi
c000f4a5:	41                   	inc    ecx
c000f4a6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f4a9:	80 fa 2f             	cmp    dl,0x2f
c000f4ac:	74 f7                	je     c000f4a5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f4ae:	80 fa 5c             	cmp    dl,0x5c
c000f4b1:	74 f2                	je     c000f4a5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f4b3:	eb d1                	jmp    c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4b5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f4ba:	74 3a                	je     c000f4f6 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f4bc:	83 f8 03             	cmp    eax,0x3
c000f4bf:	74 c5                	je     c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4c1:	41                   	inc    ecx
c000f4c2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f4c5:	80 fa 2f             	cmp    dl,0x2f
c000f4c8:	74 f7                	je     c000f4c1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f4ca:	80 fa 5c             	cmp    dl,0x5c
c000f4cd:	74 f2                	je     c000f4c1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f4cf:	48                   	dec    eax
c000f4d0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4d4:	75 06                	jne    c000f4dc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4d6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4da:	eb f3                	jmp    c000f4cf <standardiseFiles(char*, char const*, char const*)+0x121>
c000f4dc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f4e0:	74 07                	je     c000f4e9 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f4e2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4e6:	48                   	dec    eax
c000f4e7:	eb f3                	jmp    c000f4dc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4e9:	40                   	inc    eax
c000f4ea:	eb 9a                	jmp    c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4ec:	80 fa 2f             	cmp    dl,0x2f
c000f4ef:	74 95                	je     c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4f1:	80 fa 5c             	cmp    dl,0x5c
c000f4f4:	74 90                	je     c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4f6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f4f9:	40                   	inc    eax
c000f4fa:	eb 8a                	jmp    c000f486 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f500:	83 ec 0c             	sub    esp,0xc
c000f503:	53                   	push   ebx
c000f504:	e8 1c 11 ff ff       	call   c0000625 <strlen>
c000f509:	83 c4 10             	add    esp,0x10
c000f50c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f511:	75 26                	jne    c000f539 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f513:	83 ec 0c             	sub    esp,0xc
c000f516:	53                   	push   ebx
c000f517:	e8 09 11 ff ff       	call   c0000625 <strlen>
c000f51c:	83 c4 10             	add    esp,0x10
c000f51f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f524:	74 26                	je     c000f54c <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f526:	83 ec 0c             	sub    esp,0xc
c000f529:	53                   	push   ebx
c000f52a:	e8 f6 10 ff ff       	call   c0000625 <strlen>
c000f52f:	83 c4 10             	add    esp,0x10
c000f532:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f537:	eb c7                	jmp    c000f500 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f539:	83 ec 0c             	sub    esp,0xc
c000f53c:	53                   	push   ebx
c000f53d:	e8 e3 10 ff ff       	call   c0000625 <strlen>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f54a:	74 c7                	je     c000f513 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f54c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f552:	5b                   	pop    ebx
c000f553:	5e                   	pop    esi
c000f554:	5f                   	pop    edi
c000f555:	5d                   	pop    ebp
c000f556:	c3                   	ret    
c000f557:	90                   	nop

c000f558 <File::File(char const*, Process*)>:
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	6a 00                	push   0x0
c000f564:	50                   	push   eax
c000f565:	e8 0e e4 ff ff       	call   c000d978 <UnixFile::UnixFile(int)>
c000f56a:	83 c4 10             	add    esp,0x10
c000f56d:	ba e4 0c 02 c0       	mov    edx,0xc0020ce4
c000f572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f576:	89 10                	mov    DWORD PTR [eax],edx
c000f578:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f57c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f586:	83 c0 0d             	add    eax,0xd
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	52                   	push   edx
c000f58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f591:	50                   	push   eax
c000f592:	e8 17 fe ff ff       	call   c000f3ae <standardiseFiles(char*, char const*, char const*)>
c000f597:	83 c4 10             	add    esp,0x10
c000f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f59e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f5a1:	8d 50 bf             	lea    edx,[eax-0x41]
c000f5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5b2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f5b6:	90                   	nop
c000f5b7:	83 c4 0c             	add    esp,0xc
c000f5ba:	c3                   	ret    
c000f5bb:	90                   	nop

c000f5bc <File::open(FileOpenMode)>:
c000f5bc:	53                   	push   ebx
c000f5bd:	b8 0b 00 00 00       	mov    eax,0xb
c000f5c2:	83 ec 08             	sub    esp,0x8
c000f5c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f5c9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f5d0:	80 fa 19             	cmp    dl,0x19
c000f5d3:	77 40                	ja     c000f615 <File::open(FileOpenMode)+0x59>
c000f5d5:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000f5dc:	85 d2                	test   edx,edx
c000f5de:	74 35                	je     c000f615 <File::open(FileOpenMode)+0x59>
c000f5e0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5e6:	85 d2                	test   edx,edx
c000f5e8:	74 2b                	je     c000f615 <File::open(FileOpenMode)+0x59>
c000f5ea:	b8 06 00 00 00       	mov    eax,0x6
c000f5ef:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f5f3:	75 20                	jne    c000f615 <File::open(FileOpenMode)+0x59>
c000f5f5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5f7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f5fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f601:	51                   	push   ecx
c000f602:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f605:	51                   	push   ecx
c000f606:	52                   	push   edx
c000f607:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f60a:	83 c4 10             	add    esp,0x10
c000f60d:	85 c0                	test   eax,eax
c000f60f:	75 04                	jne    c000f615 <File::open(FileOpenMode)+0x59>
c000f611:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f615:	83 c4 08             	add    esp,0x8
c000f618:	5b                   	pop    ebx
c000f619:	c3                   	ret    

c000f61a <File::close()>:
c000f61a:	53                   	push   ebx
c000f61b:	b8 0b 00 00 00       	mov    eax,0xb
c000f620:	83 ec 08             	sub    esp,0x8
c000f623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f627:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f62e:	80 fa 19             	cmp    dl,0x19
c000f631:	77 41                	ja     c000f674 <File::close()+0x5a>
c000f633:	8b 1c 95 a0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc260]
c000f63a:	85 db                	test   ebx,ebx
c000f63c:	74 36                	je     c000f674 <File::close()+0x5a>
c000f63e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f645:	74 2d                	je     c000f674 <File::close()+0x5a>
c000f647:	b8 05 00 00 00       	mov    eax,0x5
c000f64c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f650:	74 22                	je     c000f674 <File::close()+0x5a>
c000f652:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f656:	8b 04 95 a0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc260]
c000f65d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f663:	53                   	push   ebx
c000f664:	53                   	push   ebx
c000f665:	8b 10                	mov    edx,DWORD PTR [eax]
c000f667:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f66d:	50                   	push   eax
c000f66e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f671:	83 c4 10             	add    esp,0x10
c000f674:	83 c4 08             	add    esp,0x8
c000f677:	5b                   	pop    ebx
c000f678:	c3                   	ret    
c000f679:	90                   	nop

c000f67a <File::seek(unsigned long long)>:
c000f67a:	56                   	push   esi
c000f67b:	53                   	push   ebx
c000f67c:	b8 0b 00 00 00       	mov    eax,0xb
c000f681:	51                   	push   ecx
c000f682:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f686:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f68a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f691:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f695:	80 fa 19             	cmp    dl,0x19
c000f698:	77 31                	ja     c000f6cb <File::seek(unsigned long long)+0x51>
c000f69a:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000f6a1:	85 d2                	test   edx,edx
c000f6a3:	74 26                	je     c000f6cb <File::seek(unsigned long long)+0x51>
c000f6a5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6ab:	85 d2                	test   edx,edx
c000f6ad:	74 1c                	je     c000f6cb <File::seek(unsigned long long)+0x51>
c000f6af:	b8 05 00 00 00       	mov    eax,0x5
c000f6b4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f6b8:	74 11                	je     c000f6cb <File::seek(unsigned long long)+0x51>
c000f6ba:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6bc:	53                   	push   ebx
c000f6bd:	51                   	push   ecx
c000f6be:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f6c4:	52                   	push   edx
c000f6c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	5a                   	pop    edx
c000f6cc:	5b                   	pop    ebx
c000f6cd:	5e                   	pop    esi
c000f6ce:	c3                   	ret    
c000f6cf:	90                   	nop

c000f6d0 <File::tell(unsigned long long*)>:
c000f6d0:	83 ec 0c             	sub    esp,0xc
c000f6d3:	b8 0b 00 00 00       	mov    eax,0xb
c000f6d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f6dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f6e3:	80 fa 19             	cmp    dl,0x19
c000f6e6:	77 34                	ja     c000f71c <File::tell(unsigned long long*)+0x4c>
c000f6e8:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000f6ef:	85 d2                	test   edx,edx
c000f6f1:	74 29                	je     c000f71c <File::tell(unsigned long long*)+0x4c>
c000f6f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6f9:	85 d2                	test   edx,edx
c000f6fb:	74 1f                	je     c000f71c <File::tell(unsigned long long*)+0x4c>
c000f6fd:	b8 05 00 00 00       	mov    eax,0x5
c000f702:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f706:	74 14                	je     c000f71c <File::tell(unsigned long long*)+0x4c>
c000f708:	50                   	push   eax
c000f709:	8b 02                	mov    eax,DWORD PTR [edx]
c000f70b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f70f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f715:	52                   	push   edx
c000f716:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	83 c4 0c             	add    esp,0xc
c000f71f:	c3                   	ret    

c000f720 <File::rewind()>:
c000f720:	83 ec 10             	sub    esp,0x10
c000f723:	6a 00                	push   0x0
c000f725:	6a 00                	push   0x0
c000f727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f72b:	e8 4a ff ff ff       	call   c000f67a <File::seek(unsigned long long)>
c000f730:	83 c4 1c             	add    esp,0x1c
c000f733:	c3                   	ret    

c000f734 <File::unlink()>:
c000f734:	83 ec 0c             	sub    esp,0xc
c000f737:	b8 0b 00 00 00       	mov    eax,0xb
c000f73c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f740:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f747:	80 f9 19             	cmp    cl,0x19
c000f74a:	77 2f                	ja     c000f77b <File::unlink()+0x47>
c000f74c:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000f753:	85 c9                	test   ecx,ecx
c000f755:	74 24                	je     c000f77b <File::unlink()+0x47>
c000f757:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f75d:	85 c9                	test   ecx,ecx
c000f75f:	74 1a                	je     c000f77b <File::unlink()+0x47>
c000f761:	b8 06 00 00 00       	mov    eax,0x6
c000f766:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f76a:	75 0f                	jne    c000f77b <File::unlink()+0x47>
c000f76c:	83 c2 0d             	add    edx,0xd
c000f76f:	50                   	push   eax
c000f770:	50                   	push   eax
c000f771:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f773:	52                   	push   edx
c000f774:	51                   	push   ecx
c000f775:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	83 c4 0c             	add    esp,0xc
c000f77e:	c3                   	ret    
c000f77f:	90                   	nop

c000f780 <File::rename(char const*)>:
c000f780:	83 ec 0c             	sub    esp,0xc
c000f783:	b8 0b 00 00 00       	mov    eax,0xb
c000f788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f78c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f793:	80 f9 19             	cmp    cl,0x19
c000f796:	77 32                	ja     c000f7ca <File::rename(char const*)+0x4a>
c000f798:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000f79f:	85 c9                	test   ecx,ecx
c000f7a1:	74 27                	je     c000f7ca <File::rename(char const*)+0x4a>
c000f7a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7a9:	85 c9                	test   ecx,ecx
c000f7ab:	74 1d                	je     c000f7ca <File::rename(char const*)+0x4a>
c000f7ad:	b8 06 00 00 00       	mov    eax,0x6
c000f7b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f7b6:	75 12                	jne    c000f7ca <File::rename(char const*)+0x4a>
c000f7b8:	83 c2 0d             	add    edx,0xd
c000f7bb:	50                   	push   eax
c000f7bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f7be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7c2:	52                   	push   edx
c000f7c3:	51                   	push   ecx
c000f7c4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f7c7:	83 c4 10             	add    esp,0x10
c000f7ca:	83 c4 0c             	add    esp,0xc
c000f7cd:	c3                   	ret    

c000f7ce <File::chfatattr(unsigned char, unsigned char)>:
c000f7ce:	57                   	push   edi
c000f7cf:	b8 0b 00 00 00       	mov    eax,0xb
c000f7d4:	56                   	push   esi
c000f7d5:	53                   	push   ebx
c000f7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f7e9:	80 f9 19             	cmp    cl,0x19
c000f7ec:	77 37                	ja     c000f825 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7ee:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000f7f5:	85 c9                	test   ecx,ecx
c000f7f7:	74 2c                	je     c000f825 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7ff:	85 c9                	test   ecx,ecx
c000f801:	74 22                	je     c000f825 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f803:	b8 06 00 00 00       	mov    eax,0x6
c000f808:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f80c:	75 17                	jne    c000f825 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f80e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f810:	89 f0                	mov    eax,esi
c000f812:	83 c2 0d             	add    edx,0xd
c000f815:	0f b6 f0             	movzx  esi,al
c000f818:	0f b6 db             	movzx  ebx,bl
c000f81b:	56                   	push   esi
c000f81c:	53                   	push   ebx
c000f81d:	52                   	push   edx
c000f81e:	51                   	push   ecx
c000f81f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	5b                   	pop    ebx
c000f826:	5e                   	pop    esi
c000f827:	5f                   	pop    edi
c000f828:	c3                   	ret    
c000f829:	90                   	nop

c000f82a <File::exists()>:
c000f82a:	83 ec 0c             	sub    esp,0xc
c000f82d:	31 c0                	xor    eax,eax
c000f82f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f833:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f83a:	80 f9 19             	cmp    cl,0x19
c000f83d:	77 24                	ja     c000f863 <File::exists()+0x39>
c000f83f:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000f846:	85 c9                	test   ecx,ecx
c000f848:	74 19                	je     c000f863 <File::exists()+0x39>
c000f84a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f850:	85 c9                	test   ecx,ecx
c000f852:	74 0f                	je     c000f863 <File::exists()+0x39>
c000f854:	83 c2 0d             	add    edx,0xd
c000f857:	50                   	push   eax
c000f858:	50                   	push   eax
c000f859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f85b:	52                   	push   edx
c000f85c:	51                   	push   ecx
c000f85d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f860:	83 c4 10             	add    esp,0x10
c000f863:	83 c4 0c             	add    esp,0xc
c000f866:	c3                   	ret    
c000f867:	90                   	nop

c000f868 <File::stat(unsigned long long*, bool*)>:
c000f868:	56                   	push   esi
c000f869:	53                   	push   ebx
c000f86a:	50                   	push   eax
c000f86b:	b8 0b 00 00 00       	mov    eax,0xb
c000f870:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f883:	80 f9 19             	cmp    cl,0x19
c000f886:	77 3d                	ja     c000f8c5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f888:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000f88f:	85 c9                	test   ecx,ecx
c000f891:	74 32                	je     c000f8c5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f893:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f899:	85 c9                	test   ecx,ecx
c000f89b:	74 28                	je     c000f8c5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f89d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f89f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a3:	74 13                	je     c000f8b8 <File::stat(unsigned long long*, bool*)+0x50>
c000f8a5:	83 ec 04             	sub    esp,0x4
c000f8a8:	56                   	push   esi
c000f8a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f8af:	51                   	push   ecx
c000f8b0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f8b3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f8b6:	eb 0a                	jmp    c000f8c2 <File::stat(unsigned long long*, bool*)+0x5a>
c000f8b8:	53                   	push   ebx
c000f8b9:	83 c2 0d             	add    edx,0xd
c000f8bc:	56                   	push   esi
c000f8bd:	52                   	push   edx
c000f8be:	51                   	push   ecx
c000f8bf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	5a                   	pop    edx
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <getcwd(Process*, char*, int)>:
c000f8c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8cd:	31 c0                	xor    eax,eax
c000f8cf:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f8d2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f8d6:	7d 15                	jge    c000f8ed <getcwd(Process*, char*, int)+0x24>
c000f8d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8dc:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f8e3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f8e6:	84 c9                	test   cl,cl
c000f8e8:	74 06                	je     c000f8f0 <getcwd(Process*, char*, int)+0x27>
c000f8ea:	40                   	inc    eax
c000f8eb:	eb e2                	jmp    c000f8cf <getcwd(Process*, char*, int)+0x6>
c000f8ed:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f8f0:	31 c0                	xor    eax,eax
c000f8f2:	c3                   	ret    

c000f8f3 <setcwd(Process*, char*)>:
c000f8f3:	55                   	push   ebp
c000f8f4:	57                   	push   edi
c000f8f5:	56                   	push   esi
c000f8f6:	53                   	push   ebx
c000f8f7:	81 ec 20 02 00 00    	sub    esp,0x220
c000f8fd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f904:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f90a:	57                   	push   edi
c000f90b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f912:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f916:	56                   	push   esi
c000f917:	e8 92 fa ff ff       	call   c000f3ae <standardiseFiles(char*, char const*, char const*)>
c000f91c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f91f:	e8 01 0d ff ff       	call   c0000625 <strlen>
c000f924:	83 c4 10             	add    esp,0x10
c000f927:	83 f8 02             	cmp    eax,0x2
c000f92a:	77 17                	ja     c000f943 <setcwd(Process*, char*)+0x50>
c000f92c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f931:	83 e8 41             	sub    eax,0x41
c000f934:	83 f8 19             	cmp    eax,0x19
c000f937:	76 24                	jbe    c000f95d <setcwd(Process*, char*)+0x6a>
c000f939:	b8 03 00 00 00       	mov    eax,0x3
c000f93e:	e9 cb 00 00 00       	jmp    c000fa0e <setcwd(Process*, char*)+0x11b>
c000f943:	83 ec 0c             	sub    esp,0xc
c000f946:	56                   	push   esi
c000f947:	e8 d9 0c ff ff       	call   c0000625 <strlen>
c000f94c:	83 c4 10             	add    esp,0x10
c000f94f:	83 f8 03             	cmp    eax,0x3
c000f952:	75 33                	jne    c000f987 <setcwd(Process*, char*)+0x94>
c000f954:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f959:	75 2c                	jne    c000f987 <setcwd(Process*, char*)+0x94>
c000f95b:	eb cf                	jmp    c000f92c <setcwd(Process*, char*)+0x39>
c000f95d:	8b 14 85 a0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc260]
c000f964:	b8 05 00 00 00       	mov    eax,0x5
c000f969:	85 d2                	test   edx,edx
c000f96b:	0f 84 9d 00 00 00    	je     c000fa0e <setcwd(Process*, char*)+0x11b>
c000f971:	b8 06 00 00 00       	mov    eax,0x6
c000f976:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f97d:	0f 84 8b 00 00 00    	je     c000fa0e <setcwd(Process*, char*)+0x11b>
c000f983:	51                   	push   ecx
c000f984:	51                   	push   ecx
c000f985:	eb 7b                	jmp    c000fa02 <setcwd(Process*, char*)+0x10f>
c000f987:	83 ec 0c             	sub    esp,0xc
c000f98a:	68 14 01 00 00       	push   0x114
c000f98f:	e8 a6 f5 ff ff       	call   c000ef3a <operator new(unsigned long)>
c000f994:	83 c4 0c             	add    esp,0xc
c000f997:	89 c3                	mov    ebx,eax
c000f999:	55                   	push   ebp
c000f99a:	56                   	push   esi
c000f99b:	50                   	push   eax
c000f99c:	e8 b7 fb ff ff       	call   c000f558 <File::File(char const*, Process*)>
c000f9a1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f9a6:	83 c4 0c             	add    esp,0xc
c000f9a9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f9ad:	50                   	push   eax
c000f9ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f9b2:	50                   	push   eax
c000f9b3:	53                   	push   ebx
c000f9b4:	e8 af fe ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f9be:	83 f8 02             	cmp    eax,0x2
c000f9c1:	75 09                	jne    c000f9cc <setcwd(Process*, char*)+0xd9>
c000f9c3:	83 ec 0c             	sub    esp,0xc
c000f9c6:	53                   	push   ebx
c000f9c7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f9ca:	eb 0d                	jmp    c000f9d9 <setcwd(Process*, char*)+0xe6>
c000f9cc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f9cf:	85 c0                	test   eax,eax
c000f9d1:	74 10                	je     c000f9e3 <setcwd(Process*, char*)+0xf0>
c000f9d3:	83 ec 0c             	sub    esp,0xc
c000f9d6:	53                   	push   ebx
c000f9d7:	ff d2                	call   edx
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	b8 01 00 00 00       	mov    eax,0x1
c000f9e1:	eb 2b                	jmp    c000fa0e <setcwd(Process*, char*)+0x11b>
c000f9e3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f9e8:	75 10                	jne    c000f9fa <setcwd(Process*, char*)+0x107>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	53                   	push   ebx
c000f9ee:	ff d2                	call   edx
c000f9f0:	83 c4 10             	add    esp,0x10
c000f9f3:	b8 02 00 00 00       	mov    eax,0x2
c000f9f8:	eb 14                	jmp    c000fa0e <setcwd(Process*, char*)+0x11b>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	53                   	push   ebx
c000f9fe:	ff d2                	call   edx
c000fa00:	58                   	pop    eax
c000fa01:	5a                   	pop    edx
c000fa02:	56                   	push   esi
c000fa03:	57                   	push   edi
c000fa04:	e8 9e 0c ff ff       	call   c00006a7 <strcpy>
c000fa09:	83 c4 10             	add    esp,0x10
c000fa0c:	31 c0                	xor    eax,eax
c000fa0e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fa14:	5b                   	pop    ebx
c000fa15:	5e                   	pop    esi
c000fa16:	5f                   	pop    edi
c000fa17:	5d                   	pop    ebp
c000fa18:	c3                   	ret    
c000fa19:	90                   	nop

c000fa1a <Directory::Directory(char const*, Process*)>:
c000fa1a:	83 ec 0c             	sub    esp,0xc
c000fa1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa21:	83 ec 08             	sub    esp,0x8
c000fa24:	6a 00                	push   0x0
c000fa26:	50                   	push   eax
c000fa27:	e8 4c df ff ff       	call   c000d978 <UnixFile::UnixFile(int)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	ba 00 0d 02 c0       	mov    edx,0xc0020d00
c000fa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa38:	89 10                	mov    DWORD PTR [eax],edx
c000fa3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa48:	83 c0 0d             	add    eax,0xd
c000fa4b:	83 ec 04             	sub    esp,0x4
c000fa4e:	52                   	push   edx
c000fa4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa53:	50                   	push   eax
c000fa54:	e8 55 f9 ff ff       	call   c000f3ae <standardiseFiles(char*, char const*, char const*)>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa60:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fa63:	8d 50 bf             	lea    edx,[eax-0x41]
c000fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa74:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fa78:	90                   	nop
c000fa79:	83 c4 0c             	add    esp,0xc
c000fa7c:	c3                   	ret    
c000fa7d:	90                   	nop

c000fa7e <Directory::open()>:
c000fa7e:	53                   	push   ebx
c000fa7f:	b8 0b 00 00 00       	mov    eax,0xb
c000fa84:	83 ec 08             	sub    esp,0x8
c000fa87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa8b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa92:	80 fa 19             	cmp    dl,0x19
c000fa95:	77 3d                	ja     c000fad4 <Directory::open()+0x56>
c000fa97:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000fa9e:	85 d2                	test   edx,edx
c000faa0:	74 32                	je     c000fad4 <Directory::open()+0x56>
c000faa2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000faa8:	85 d2                	test   edx,edx
c000faaa:	74 28                	je     c000fad4 <Directory::open()+0x56>
c000faac:	b8 06 00 00 00       	mov    eax,0x6
c000fab1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fab5:	75 1d                	jne    c000fad4 <Directory::open()+0x56>
c000fab7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fabd:	50                   	push   eax
c000fabe:	8b 02                	mov    eax,DWORD PTR [edx]
c000fac0:	51                   	push   ecx
c000fac1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fac4:	51                   	push   ecx
c000fac5:	52                   	push   edx
c000fac6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fac9:	83 c4 10             	add    esp,0x10
c000facc:	85 c0                	test   eax,eax
c000face:	75 04                	jne    c000fad4 <Directory::open()+0x56>
c000fad0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fad4:	83 c4 08             	add    esp,0x8
c000fad7:	5b                   	pop    ebx
c000fad8:	c3                   	ret    
c000fad9:	90                   	nop

c000fada <Directory::close()>:
c000fada:	53                   	push   ebx
c000fadb:	b8 0b 00 00 00       	mov    eax,0xb
c000fae0:	83 ec 08             	sub    esp,0x8
c000fae3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fae7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000faee:	80 fa 19             	cmp    dl,0x19
c000faf1:	77 41                	ja     c000fb34 <Directory::close()+0x5a>
c000faf3:	8b 1c 95 a0 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc260]
c000fafa:	85 db                	test   ebx,ebx
c000fafc:	74 36                	je     c000fb34 <Directory::close()+0x5a>
c000fafe:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fb05:	74 2d                	je     c000fb34 <Directory::close()+0x5a>
c000fb07:	b8 05 00 00 00       	mov    eax,0x5
c000fb0c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fb10:	74 22                	je     c000fb34 <Directory::close()+0x5a>
c000fb12:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fb16:	8b 04 95 a0 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc260]
c000fb1d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fb23:	53                   	push   ebx
c000fb24:	53                   	push   ebx
c000fb25:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb27:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fb2d:	50                   	push   eax
c000fb2e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	83 c4 08             	add    esp,0x8
c000fb37:	5b                   	pop    ebx
c000fb38:	c3                   	ret    
c000fb39:	90                   	nop

c000fb3a <Directory::unlink()>:
c000fb3a:	83 ec 0c             	sub    esp,0xc
c000fb3d:	b8 0b 00 00 00       	mov    eax,0xb
c000fb42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb4d:	80 f9 19             	cmp    cl,0x19
c000fb50:	77 2f                	ja     c000fb81 <Directory::unlink()+0x47>
c000fb52:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000fb59:	85 c9                	test   ecx,ecx
c000fb5b:	74 24                	je     c000fb81 <Directory::unlink()+0x47>
c000fb5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb63:	85 c9                	test   ecx,ecx
c000fb65:	74 1a                	je     c000fb81 <Directory::unlink()+0x47>
c000fb67:	b8 06 00 00 00       	mov    eax,0x6
c000fb6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb70:	75 0f                	jne    c000fb81 <Directory::unlink()+0x47>
c000fb72:	83 c2 0d             	add    edx,0xd
c000fb75:	50                   	push   eax
c000fb76:	50                   	push   eax
c000fb77:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb79:	52                   	push   edx
c000fb7a:	51                   	push   ecx
c000fb7b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fb7e:	83 c4 10             	add    esp,0x10
c000fb81:	83 c4 0c             	add    esp,0xc
c000fb84:	c3                   	ret    
c000fb85:	90                   	nop

c000fb86 <Directory::rename(char const*)>:
c000fb86:	83 ec 0c             	sub    esp,0xc
c000fb89:	b8 0b 00 00 00       	mov    eax,0xb
c000fb8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb99:	80 f9 19             	cmp    cl,0x19
c000fb9c:	77 32                	ja     c000fbd0 <Directory::rename(char const*)+0x4a>
c000fb9e:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000fba5:	85 c9                	test   ecx,ecx
c000fba7:	74 27                	je     c000fbd0 <Directory::rename(char const*)+0x4a>
c000fba9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbaf:	85 c9                	test   ecx,ecx
c000fbb1:	74 1d                	je     c000fbd0 <Directory::rename(char const*)+0x4a>
c000fbb3:	b8 06 00 00 00       	mov    eax,0x6
c000fbb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fbbc:	75 12                	jne    c000fbd0 <Directory::rename(char const*)+0x4a>
c000fbbe:	83 c2 0d             	add    edx,0xd
c000fbc1:	50                   	push   eax
c000fbc2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbc8:	52                   	push   edx
c000fbc9:	51                   	push   ecx
c000fbca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fbcd:	83 c4 10             	add    esp,0x10
c000fbd0:	83 c4 0c             	add    esp,0xc
c000fbd3:	c3                   	ret    

c000fbd4 <Directory::exists()>:
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	31 c0                	xor    eax,eax
c000fbd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fbdd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fbe4:	80 f9 19             	cmp    cl,0x19
c000fbe7:	77 24                	ja     c000fc0d <Directory::exists()+0x39>
c000fbe9:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000fbf0:	85 c9                	test   ecx,ecx
c000fbf2:	74 19                	je     c000fc0d <Directory::exists()+0x39>
c000fbf4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbfa:	85 c9                	test   ecx,ecx
c000fbfc:	74 0f                	je     c000fc0d <Directory::exists()+0x39>
c000fbfe:	83 c2 0d             	add    edx,0xd
c000fc01:	50                   	push   eax
c000fc02:	50                   	push   eax
c000fc03:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc05:	52                   	push   edx
c000fc06:	51                   	push   ecx
c000fc07:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fc0a:	83 c4 10             	add    esp,0x10
c000fc0d:	83 c4 0c             	add    esp,0xc
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Directory::read(dirent*)>:
c000fc12:	83 ec 1c             	sub    esp,0x1c
c000fc15:	b8 0b 00 00 00       	mov    eax,0xb
c000fc1a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fc1e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc25:	80 fa 19             	cmp    dl,0x19
c000fc28:	77 30                	ja     c000fc5a <Directory::read(dirent*)+0x48>
c000fc2a:	8b 14 95 a0 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc260]
c000fc31:	85 d2                	test   edx,edx
c000fc33:	74 25                	je     c000fc5a <Directory::read(dirent*)+0x48>
c000fc35:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fc3c:	74 1c                	je     c000fc5a <Directory::read(dirent*)+0x48>
c000fc3e:	83 ec 0c             	sub    esp,0xc
c000fc41:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc43:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fc47:	52                   	push   edx
c000fc48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fc4c:	6a 00                	push   0x0
c000fc4e:	68 10 01 00 00       	push   0x110
c000fc53:	51                   	push   ecx
c000fc54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc57:	83 c4 20             	add    esp,0x20
c000fc5a:	83 c4 1c             	add    esp,0x1c
c000fc5d:	c3                   	ret    

c000fc5e <Directory::create()>:
c000fc5e:	83 ec 0c             	sub    esp,0xc
c000fc61:	b8 0b 00 00 00       	mov    eax,0xb
c000fc66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc71:	80 f9 19             	cmp    cl,0x19
c000fc74:	77 2f                	ja     c000fca5 <Directory::create()+0x47>
c000fc76:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c000fc7d:	85 c9                	test   ecx,ecx
c000fc7f:	74 24                	je     c000fca5 <Directory::create()+0x47>
c000fc81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc87:	85 c9                	test   ecx,ecx
c000fc89:	74 1a                	je     c000fca5 <Directory::create()+0x47>
c000fc8b:	b8 06 00 00 00       	mov    eax,0x6
c000fc90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc94:	75 0f                	jne    c000fca5 <Directory::create()+0x47>
c000fc96:	83 c2 0d             	add    edx,0xd
c000fc99:	50                   	push   eax
c000fc9a:	50                   	push   eax
c000fc9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc9d:	52                   	push   edx
c000fc9e:	51                   	push   ecx
c000fc9f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	83 c4 0c             	add    esp,0xc
c000fca8:	c3                   	ret    
c000fca9:	90                   	nop

c000fcaa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fcaa:	b8 0a 00 00 00       	mov    eax,0xa
c000fcaf:	c3                   	ret    

c000fcb0 <Bus::Bus(char const*)>:
c000fcb0:	83 ec 0c             	sub    esp,0xc
c000fcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb7:	83 ec 08             	sub    esp,0x8
c000fcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbe:	50                   	push   eax
c000fcbf:	e8 60 09 00 00       	call   c0010624 <Device::Device(char const*)>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	ba 1c 0d 02 c0       	mov    edx,0xc0020d1c
c000fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd0:	89 10                	mov    DWORD PTR [eax],edx
c000fcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fce0:	90                   	nop
c000fce1:	83 c4 0c             	add    esp,0xc
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <Bus::~Bus()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	ba 1c 0d 02 c0       	mov    edx,0xc0020d1c
c000fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf2:	89 10                	mov    DWORD PTR [eax],edx
c000fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf8:	83 ec 0c             	sub    esp,0xc
c000fcfb:	50                   	push   eax
c000fcfc:	e8 d5 05 00 00       	call   c00102d6 <Device::~Device()>
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	90                   	nop
c000fd05:	83 c4 0c             	add    esp,0xc
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Bus::~Bus()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd14:	e8 cd ff ff ff       	call   c000fce6 <Bus::~Bus()>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	83 ec 08             	sub    esp,0x8
c000fd1f:	68 58 01 00 00       	push   0x158
c000fd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd28:	e8 1c f2 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	83 c4 0c             	add    esp,0xc
c000fd33:	c3                   	ret    

c000fd34 <Buzzer::Buzzer(char const*)>:
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd3b:	83 ec 08             	sub    esp,0x8
c000fd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd42:	50                   	push   eax
c000fd43:	e8 dc 08 00 00       	call   c0010624 <Device::Device(char const*)>
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	ba 48 0d 02 c0       	mov    edx,0xc0020d48
c000fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd54:	89 10                	mov    DWORD PTR [eax],edx
c000fd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd68:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fd72:	90                   	nop
c000fd73:	83 c4 0c             	add    esp,0xc
c000fd76:	c3                   	ret    
c000fd77:	90                   	nop

c000fd78 <Buzzer::~Buzzer()>:
c000fd78:	83 ec 0c             	sub    esp,0xc
c000fd7b:	ba 48 0d 02 c0       	mov    edx,0xc0020d48
c000fd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd84:	89 10                	mov    DWORD PTR [eax],edx
c000fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd8a:	83 ec 0c             	sub    esp,0xc
c000fd8d:	50                   	push   eax
c000fd8e:	e8 43 05 00 00       	call   c00102d6 <Device::~Device()>
c000fd93:	83 c4 10             	add    esp,0x10
c000fd96:	90                   	nop
c000fd97:	83 c4 0c             	add    esp,0xc
c000fd9a:	c3                   	ret    
c000fd9b:	90                   	nop

c000fd9c <Buzzer::~Buzzer()>:
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	83 ec 0c             	sub    esp,0xc
c000fda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda6:	e8 cd ff ff ff       	call   c000fd78 <Buzzer::~Buzzer()>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	83 ec 08             	sub    esp,0x8
c000fdb1:	68 5c 01 00 00       	push   0x15c
c000fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdba:	e8 8a f1 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	83 c4 0c             	add    esp,0xc
c000fdc5:	c3                   	ret    

c000fdc6 <Buzzer::stop()>:
c000fdc6:	83 ec 14             	sub    esp,0x14
c000fdc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdcf:	6a 00                	push   0x0
c000fdd1:	50                   	push   eax
c000fdd2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fdd5:	83 c4 1c             	add    esp,0x1c
c000fdd8:	c3                   	ret    

c000fdd9 <beepThread(void*)>:
c000fdd9:	53                   	push   ebx
c000fdda:	83 ec 08             	sub    esp,0x8
c000fddd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde1:	e8 16 7e 00 00       	call   c0017bfc <unlockScheduler()>
c000fde6:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fdeb:	52                   	push   edx
c000fdec:	52                   	push   edx
c000fded:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fdf3:	52                   	push   edx
c000fdf4:	50                   	push   eax
c000fdf5:	e8 b9 84 00 00       	call   c00182b3 <nanoSleep(unsigned long long)>
c000fdfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdfd:	e8 c4 ff ff ff       	call   c000fdc6 <Buzzer::stop()>
c000fe02:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fe0a:	83 c4 18             	add    esp,0x18
c000fe0d:	5b                   	pop    ebx
c000fe0e:	e9 e6 83 00 00       	jmp    c00181f9 <blockTask(TaskState)>
c000fe13:	90                   	nop

c000fe14 <Buzzer::beep(int, int, bool)>:
c000fe14:	57                   	push   edi
c000fe15:	56                   	push   esi
c000fe16:	53                   	push   ebx
c000fe17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe23:	52                   	push   edx
c000fe24:	52                   	push   edx
c000fe25:	8b 06                	mov    eax,DWORD PTR [esi]
c000fe27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe2b:	56                   	push   esi
c000fe2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fe2f:	83 c4 10             	add    esp,0x10
c000fe32:	89 f8                	mov    eax,edi
c000fe34:	84 c0                	test   al,al
c000fe36:	74 1f                	je     c000fe57 <Buzzer::beep(int, int, bool)+0x43>
c000fe38:	50                   	push   eax
c000fe39:	50                   	push   eax
c000fe3a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fe40:	99                   	cdq    
c000fe41:	52                   	push   edx
c000fe42:	50                   	push   eax
c000fe43:	e8 6b 84 00 00       	call   c00182b3 <nanoSleep(unsigned long long)>
c000fe48:	83 c4 10             	add    esp,0x10
c000fe4b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe4f:	5b                   	pop    ebx
c000fe50:	5e                   	pop    esi
c000fe51:	5f                   	pop    edi
c000fe52:	e9 6f ff ff ff       	jmp    c000fdc6 <Buzzer::stop()>
c000fe57:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fe5d:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c000fe62:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fe6a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fe6e:	c7 44 24 14 d9 fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fdd9
c000fe76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe7a:	5b                   	pop    ebx
c000fe7b:	5e                   	pop    esi
c000fe7c:	5f                   	pop    edi
c000fe7d:	e9 a2 7e 00 00       	jmp    c0017d24 <Process::createThread(void (*)(void*), void*, int)>

c000fe82 <loadClockSettings()>:
c000fe82:	c7 05 14 39 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023914,0xa
c000fe8c:	c6 05 11 39 02 c0 00 	mov    BYTE PTR ds:0xc0023911,0x0
c000fe93:	c6 05 10 39 02 c0 01 	mov    BYTE PTR ds:0xc0023910,0x1
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <Clock::Clock(char const*)>:
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feaa:	50                   	push   eax
c000feab:	e8 74 07 00 00       	call   c0010624 <Device::Device(char const*)>
c000feb0:	83 c4 10             	add    esp,0x10
c000feb3:	ba 78 0d 02 c0       	mov    edx,0xc0020d78
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	89 10                	mov    DWORD PTR [eax],edx
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fecc:	90                   	nop
c000fecd:	83 c4 0c             	add    esp,0xc
c000fed0:	c3                   	ret    
c000fed1:	90                   	nop

c000fed2 <Clock::~Clock()>:
c000fed2:	83 ec 0c             	sub    esp,0xc
c000fed5:	ba 78 0d 02 c0       	mov    edx,0xc0020d78
c000feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fede:	89 10                	mov    DWORD PTR [eax],edx
c000fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	50                   	push   eax
c000fee8:	e8 e9 03 00 00       	call   c00102d6 <Device::~Device()>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	90                   	nop
c000fef1:	83 c4 0c             	add    esp,0xc
c000fef4:	c3                   	ret    
c000fef5:	90                   	nop

c000fef6 <Clock::~Clock()>:
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	83 ec 0c             	sub    esp,0xc
c000fefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff00:	e8 cd ff ff ff       	call   c000fed2 <Clock::~Clock()>
c000ff05:	83 c4 10             	add    esp,0x10
c000ff08:	83 ec 08             	sub    esp,0x8
c000ff0b:	68 58 01 00 00       	push   0x158
c000ff10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff14:	e8 30 f0 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c000ff19:	83 c4 10             	add    esp,0x10
c000ff1c:	83 c4 0c             	add    esp,0xc
c000ff1f:	c3                   	ret    

c000ff20 <Clock::timeInSecondsLocal()>:
c000ff20:	53                   	push   ebx
c000ff21:	83 ec 14             	sub    esp,0x14
c000ff24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff28:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff2a:	50                   	push   eax
c000ff2b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff2e:	0f b6 0d 10 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023910
c000ff35:	03 0d 14 39 02 c0    	add    ecx,DWORD PTR ds:0xc0023914
c000ff3b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ff41:	89 cb                	mov    ebx,ecx
c000ff43:	c1 fb 1f             	sar    ebx,0x1f
c000ff46:	01 c8                	add    eax,ecx
c000ff48:	11 da                	adc    edx,ebx
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	31 c9                	xor    ecx,ecx
c000ff4f:	80 3d 11 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023911,0x0
c000ff56:	74 05                	je     c000ff5d <Clock::timeInSecondsLocal()+0x3d>
c000ff58:	b9 08 07 00 00       	mov    ecx,0x708
c000ff5d:	31 db                	xor    ebx,ebx
c000ff5f:	01 c8                	add    eax,ecx
c000ff61:	11 da                	adc    edx,ebx
c000ff63:	83 c4 08             	add    esp,0x8
c000ff66:	5b                   	pop    ebx
c000ff67:	c3                   	ret    

c000ff68 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ff68:	57                   	push   edi
c000ff69:	56                   	push   esi
c000ff6a:	53                   	push   ebx
c000ff6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff75:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff79:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ff7c:	0f b6 05 10 39 02 c0 	movzx  eax,BYTE PTR ds:0xc0023910
c000ff83:	03 05 14 39 02 c0    	add    eax,DWORD PTR ds:0xc0023914
c000ff89:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff8f:	99                   	cdq    
c000ff90:	29 c6                	sub    esi,eax
c000ff92:	19 d7                	sbb    edi,edx
c000ff94:	89 f0                	mov    eax,esi
c000ff96:	89 fa                	mov    edx,edi
c000ff98:	31 f6                	xor    esi,esi
c000ff9a:	80 3d 11 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023911,0x0
c000ffa1:	74 05                	je     c000ffa8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ffa3:	be 08 07 00 00       	mov    esi,0x708
c000ffa8:	31 ff                	xor    edi,edi
c000ffaa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ffae:	29 f0                	sub    eax,esi
c000ffb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ffb4:	19 fa                	sbb    edx,edi
c000ffb6:	89 d8                	mov    eax,ebx
c000ffb8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	5f                   	pop    edi
c000ffbf:	ff e0                	jmp    eax

c000ffc1 <datetimeToSeconds(datetime_t)>:
c000ffc1:	55                   	push   ebp
c000ffc2:	57                   	push   edi
c000ffc3:	56                   	push   esi
c000ffc4:	53                   	push   ebx
c000ffc5:	83 ec 14             	sub    esp,0x14
c000ffc8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffcc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffd0:	89 d3                	mov    ebx,edx
c000ffd2:	0f b6 c6             	movzx  eax,dh
c000ffd5:	c1 eb 10             	shr    ebx,0x10
c000ffd8:	48                   	dec    eax
c000ffd9:	66 81 eb 6c 07       	sub    bx,0x76c
c000ffde:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ffe2:	0f b6 f5             	movzx  esi,ch
c000ffe5:	89 cf                	mov    edi,ecx
c000ffe7:	6b f6 3c             	imul   esi,esi,0x3c
c000ffea:	c1 ef 10             	shr    edi,0x10
c000ffed:	0f b6 c9             	movzx  ecx,cl
c000fff0:	89 f8                	mov    eax,edi
c000fff2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fff8:	0f b6 f8             	movzx  edi,al
c000fffb:	0f b6 d2             	movzx  edx,dl
c000fffe:	01 fe                	add    esi,edi
c0010000:	01 f1                	add    ecx,esi
c0010002:	0f b7 f3             	movzx  esi,bx
c0010005:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010009:	c1 f9 1f             	sar    ecx,0x1f
c001000c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010011:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010015:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001001a:	8b 0c 8d c0 0d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf240]
c0010021:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010025:	76 29                	jbe    c0010050 <datetimeToSeconds(datetime_t)+0x8f>
c0010027:	f6 c3 03             	test   bl,0x3
c001002a:	75 24                	jne    c0010050 <datetimeToSeconds(datetime_t)+0x8f>
c001002c:	31 d2                	xor    edx,edx
c001002e:	bf 64 00 00 00       	mov    edi,0x64
c0010033:	89 d8                	mov    eax,ebx
c0010035:	66 f7 f7             	div    di
c0010038:	66 85 d2             	test   dx,dx
c001003b:	75 12                	jne    c001004f <datetimeToSeconds(datetime_t)+0x8e>
c001003d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010043:	bf 90 01 00 00       	mov    edi,0x190
c0010048:	99                   	cdq    
c0010049:	f7 ff                	idiv   edi
c001004b:	85 d2                	test   edx,edx
c001004d:	75 01                	jne    c0010050 <datetimeToSeconds(datetime_t)+0x8f>
c001004f:	41                   	inc    ecx
c0010050:	66 83 fb 46          	cmp    bx,0x46
c0010054:	76 45                	jbe    c001009b <datetimeToSeconds(datetime_t)+0xda>
c0010056:	bb 46 00 00 00       	mov    ebx,0x46
c001005b:	bf 64 00 00 00       	mov    edi,0x64
c0010060:	bd 90 01 00 00       	mov    ebp,0x190
c0010065:	b8 6d 01 00 00       	mov    eax,0x16d
c001006a:	f6 c3 03             	test   bl,0x3
c001006d:	75 23                	jne    c0010092 <datetimeToSeconds(datetime_t)+0xd1>
c001006f:	89 d8                	mov    eax,ebx
c0010071:	99                   	cdq    
c0010072:	f7 ff                	idiv   edi
c0010074:	b8 6e 01 00 00       	mov    eax,0x16e
c0010079:	85 d2                	test   edx,edx
c001007b:	75 15                	jne    c0010092 <datetimeToSeconds(datetime_t)+0xd1>
c001007d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010083:	99                   	cdq    
c0010084:	f7 fd                	idiv   ebp
c0010086:	83 fa 01             	cmp    edx,0x1
c0010089:	19 c0                	sbb    eax,eax
c001008b:	f7 d0                	not    eax
c001008d:	05 6e 01 00 00       	add    eax,0x16e
c0010092:	01 c1                	add    ecx,eax
c0010094:	43                   	inc    ebx
c0010095:	39 f3                	cmp    ebx,esi
c0010097:	7c cc                	jl     c0010065 <datetimeToSeconds(datetime_t)+0xa4>
c0010099:	eb 35                	jmp    c00100d0 <datetimeToSeconds(datetime_t)+0x10f>
c001009b:	74 33                	je     c00100d0 <datetimeToSeconds(datetime_t)+0x10f>
c001009d:	b8 45 00 00 00       	mov    eax,0x45
c00100a2:	89 c2                	mov    edx,eax
c00100a4:	83 e2 03             	and    edx,0x3
c00100a7:	39 f0                	cmp    eax,esi
c00100a9:	7e 0f                	jle    c00100ba <datetimeToSeconds(datetime_t)+0xf9>
c00100ab:	83 fa 01             	cmp    edx,0x1
c00100ae:	19 d2                	sbb    edx,edx
c00100b0:	48                   	dec    eax
c00100b1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00100b8:	eb e8                	jmp    c00100a2 <datetimeToSeconds(datetime_t)+0xe1>
c00100ba:	b8 6d 01 00 00       	mov    eax,0x16d
c00100bf:	85 d2                	test   edx,edx
c00100c1:	75 0b                	jne    c00100ce <datetimeToSeconds(datetime_t)+0x10d>
c00100c3:	66 83 fb 01          	cmp    bx,0x1
c00100c7:	19 c0                	sbb    eax,eax
c00100c9:	05 6e 01 00 00       	add    eax,0x16e
c00100ce:	29 c1                	sub    ecx,eax
c00100d0:	b8 80 51 01 00       	mov    eax,0x15180
c00100d5:	f7 e9                	imul   ecx
c00100d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00100db:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00100df:	83 c4 14             	add    esp,0x14
c00100e2:	5b                   	pop    ebx
c00100e3:	5e                   	pop    esi
c00100e4:	5f                   	pop    edi
c00100e5:	5d                   	pop    ebp
c00100e6:	c3                   	ret    
c00100e7:	90                   	nop

c00100e8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00100e8:	57                   	push   edi
c00100e9:	56                   	push   esi
c00100ea:	53                   	push   ebx
c00100eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00100f1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00100f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100fc:	e8 c0 fe ff ff       	call   c000ffc1 <datetimeToSeconds(datetime_t)>
c0010101:	59                   	pop    ecx
c0010102:	0f b6 0d 10 39 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023910
c0010109:	5b                   	pop    ebx
c001010a:	03 0d 14 39 02 c0    	add    ecx,DWORD PTR ds:0xc0023914
c0010110:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010116:	89 cb                	mov    ebx,ecx
c0010118:	c1 fb 1f             	sar    ebx,0x1f
c001011b:	29 c8                	sub    eax,ecx
c001011d:	19 da                	sbb    edx,ebx
c001011f:	31 c9                	xor    ecx,ecx
c0010121:	80 3d 11 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023911,0x0
c0010128:	74 05                	je     c001012f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001012a:	b9 08 07 00 00       	mov    ecx,0x708
c001012f:	31 db                	xor    ebx,ebx
c0010131:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010135:	29 c8                	sub    eax,ecx
c0010137:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001013b:	19 da                	sbb    edx,ebx
c001013d:	89 f8                	mov    eax,edi
c001013f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010143:	5b                   	pop    ebx
c0010144:	5e                   	pop    esi
c0010145:	5f                   	pop    edi
c0010146:	ff e0                	jmp    eax

c0010148 <secondsToDatetime(unsigned long long)>:
c0010148:	55                   	push   ebp
c0010149:	57                   	push   edi
c001014a:	56                   	push   esi
c001014b:	53                   	push   ebx
c001014c:	83 ec 1c             	sub    esp,0x1c
c001014f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010153:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010157:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001015b:	6a 00                	push   0x0
c001015d:	68 80 51 01 00       	push   0x15180
c0010162:	55                   	push   ebp
c0010163:	57                   	push   edi
c0010164:	e8 33 e6 00 00       	call   c001e79c <__udivdi3>
c0010169:	83 c4 10             	add    esp,0x10
c001016c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010172:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010176:	6a 00                	push   0x0
c0010178:	68 80 51 01 00       	push   0x15180
c001017d:	55                   	push   ebp
c001017e:	57                   	push   edi
c001017f:	bf 10 0e 00 00       	mov    edi,0xe10
c0010184:	e8 13 e7 00 00       	call   c001e89c <__umoddi3>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	99                   	cdq    
c001018d:	f7 ff                	idiv   edi
c001018f:	bf 3c 00 00 00       	mov    edi,0x3c
c0010194:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010197:	89 d0                	mov    eax,edx
c0010199:	99                   	cdq    
c001019a:	f7 ff                	idiv   edi
c001019c:	85 db                	test   ebx,ebx
c001019e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00101a1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00101a4:	79 11                	jns    c00101b7 <secondsToDatetime(unsigned long long)+0x6f>
c00101a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101aa:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00101b0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00101b5:	eb 07                	jmp    c00101be <secondsToDatetime(unsigned long long)+0x76>
c00101b7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00101bc:	89 d8                	mov    eax,ebx
c00101be:	bf b4 05 00 00       	mov    edi,0x5b4
c00101c3:	99                   	cdq    
c00101c4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00101c9:	f7 f9                	idiv   ecx
c00101cb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00101d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101d4:	31 d2                	xor    edx,edx
c00101d6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00101de:	01 c3                	add    ebx,eax
c00101e0:	89 d8                	mov    eax,ebx
c00101e2:	f7 f1                	div    ecx
c00101e4:	31 d2                	xor    edx,edx
c00101e6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00101e9:	89 d8                	mov    eax,ebx
c00101eb:	f7 f7                	div    edi
c00101ed:	31 d2                	xor    edx,edx
c00101ef:	29 c1                	sub    ecx,eax
c00101f1:	89 d8                	mov    eax,ebx
c00101f3:	f7 f5                	div    ebp
c00101f5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00101fa:	29 c1                	sub    ecx,eax
c00101fc:	31 d2                	xor    edx,edx
c00101fe:	89 c8                	mov    eax,ecx
c0010200:	f7 f5                	div    ebp
c0010202:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001020b:	31 d2                	xor    edx,edx
c001020d:	89 c8                	mov    eax,ecx
c001020f:	f7 f5                	div    ebp
c0010211:	31 d2                	xor    edx,edx
c0010213:	01 c3                	add    ebx,eax
c0010215:	89 c8                	mov    eax,ecx
c0010217:	f7 f7                	div    edi
c0010219:	bf 99 00 00 00       	mov    edi,0x99
c001021e:	29 c3                	sub    ebx,eax
c0010220:	31 d2                	xor    edx,edx
c0010222:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001022a:	29 c3                	sub    ebx,eax
c001022c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001022f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010232:	bb 05 00 00 00       	mov    ebx,0x5
c0010237:	83 c1 02             	add    ecx,0x2
c001023a:	89 c8                	mov    eax,ecx
c001023c:	f7 f7                	div    edi
c001023e:	31 d2                	xor    edx,edx
c0010240:	89 c7                	mov    edi,eax
c0010242:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010248:	83 c0 02             	add    eax,0x2
c001024b:	f7 f3                	div    ebx
c001024d:	89 eb                	mov    ebx,ebp
c001024f:	29 c3                	sub    ebx,eax
c0010251:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010257:	88 1e                	mov    BYTE PTR [esi],bl
c0010259:	19 c0                	sbb    eax,eax
c001025b:	31 d2                	xor    edx,edx
c001025d:	83 e0 0c             	and    eax,0xc
c0010260:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010264:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001026c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010270:	83 f9 01             	cmp    ecx,0x1
c0010273:	0f 96 c2             	setbe  dl
c0010276:	41                   	inc    ecx
c0010277:	01 d0                	add    eax,edx
c0010279:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001027c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010280:	83 c4 1c             	add    esp,0x1c
c0010283:	89 f0                	mov    eax,esi
c0010285:	5b                   	pop    ebx
c0010286:	5e                   	pop    esi
c0010287:	5f                   	pop    edi
c0010288:	5d                   	pop    ebp
c0010289:	c2 04 00             	ret    0x4

c001028c <Clock::timeInDatetimeLocal()>:
c001028c:	53                   	push   ebx
c001028d:	83 ec 14             	sub    esp,0x14
c0010290:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010294:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010298:	e8 83 fc ff ff       	call   c000ff20 <Clock::timeInSecondsLocal()>
c001029d:	83 c4 0c             	add    esp,0xc
c00102a0:	52                   	push   edx
c00102a1:	50                   	push   eax
c00102a2:	53                   	push   ebx
c00102a3:	e8 a0 fe ff ff       	call   c0010148 <secondsToDatetime(unsigned long long)>
c00102a8:	89 d8                	mov    eax,ebx
c00102aa:	83 c4 14             	add    esp,0x14
c00102ad:	5b                   	pop    ebx
c00102ae:	c2 04 00             	ret    0x4
c00102b1:	90                   	nop

c00102b2 <Device::hibernate()>:
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <Device::wake()>:
c00102b4:	c3                   	ret    
c00102b5:	90                   	nop

c00102b6 <Device::detect()>:
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Device::disableLegacy()>:
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <Device::powerSaving(PowerSavingLevel)>:
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <DriverlessDevice::close(int, int, void*)>:
c00102bc:	31 c0                	xor    eax,eax
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <DriverlessDevice::detect()>:
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <DriverlessDevice::open(int, int, void*)>:
c00102c2:	83 ec 18             	sub    esp,0x18
c00102c5:	68 f0 0d 02 c0       	push   0xc0020df0
c00102ca:	e8 ef 49 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c00102cf:	83 c8 ff             	or     eax,0xffffffff
c00102d2:	83 c4 1c             	add    esp,0x1c
c00102d5:	c3                   	ret    

c00102d6 <Device::~Device()>:
c00102d6:	ba 18 0e 02 c0       	mov    edx,0xc0020e18
c00102db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102df:	89 10                	mov    DWORD PTR [eax],edx
c00102e1:	90                   	nop
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Device::~Device()>:
c00102e4:	83 ec 0c             	sub    esp,0xc
c00102e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102eb:	e8 e6 ff ff ff       	call   c00102d6 <Device::~Device()>
c00102f0:	83 c4 04             	add    esp,0x4
c00102f3:	83 ec 08             	sub    esp,0x8
c00102f6:	68 58 01 00 00       	push   0x158
c00102fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ff:	e8 45 ec ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0010304:	83 c4 10             	add    esp,0x10
c0010307:	83 c4 0c             	add    esp,0xc
c001030a:	c3                   	ret    
c001030b:	90                   	nop

c001030c <Device::findAndLoadDriver()>:
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <Device::preOpenPCI(PCIDeviceInfo)>:
c001030e:	57                   	push   edi
c001030f:	b9 09 00 00 00       	mov    ecx,0x9
c0010314:	56                   	push   esi
c0010315:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010319:	8d 74 24 10          	lea    esi,[esp+0x10]
c001031d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010327:	81 c7 18 01 00 00    	add    edi,0x118
c001032d:	fc                   	cld    
c001032e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010330:	5e                   	pop    esi
c0010331:	5f                   	pop    edi
c0010332:	c3                   	ret    
c0010333:	90                   	nop

c0010334 <Device::preOpenACPI(void*, char*, char*)>:
c0010334:	56                   	push   esi
c0010335:	53                   	push   ebx
c0010336:	83 ec 08             	sub    esp,0x8
c0010339:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001033d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010341:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001034b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001034f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010355:	6a 1e                	push   0x1e
c0010357:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001035d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010361:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010367:	50                   	push   eax
c0010368:	e8 65 02 ff ff       	call   c00005d2 <memcpy>
c001036d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010371:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010375:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001037d:	83 c4 14             	add    esp,0x14
c0010380:	5b                   	pop    ebx
c0010381:	5e                   	pop    esi
c0010382:	e9 4b 02 ff ff       	jmp    c00005d2 <memcpy>
c0010387:	90                   	nop

c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010388:	55                   	push   ebp
c0010389:	57                   	push   edi
c001038a:	56                   	push   esi
c001038b:	53                   	push   ebx
c001038c:	83 ec 0c             	sub    esp,0xc
c001038f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010393:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010397:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001039b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001039f:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00103a4:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00103ab:	75 0b                	jne    c00103b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00103ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00103af:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00103b3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00103b6:	eb 24                	jmp    c00103dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00103b8:	e8 fb 3b 00 00       	call   c0013fb8 <thisCPU()>
c00103bd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00103c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00103c5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00103c9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00103cd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00103d1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00103d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00103d9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00103dc:	83 c4 0c             	add    esp,0xc
c00103df:	5b                   	pop    ebx
c00103e0:	5e                   	pop    esi
c00103e1:	5f                   	pop    edi
c00103e2:	5d                   	pop    ebp
c00103e3:	ff e0                	jmp    eax
c00103e5:	90                   	nop

c00103e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00103e6:	57                   	push   edi
c00103e7:	56                   	push   esi
c00103e8:	53                   	push   ebx
c00103e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103f5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00103fa:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010401:	75 0b                	jne    c001040e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010403:	8b 00                	mov    eax,DWORD PTR [eax]
c0010405:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010409:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001040c:	eb 20                	jmp    c001042e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001040e:	e8 a5 3b 00 00       	call   c0013fb8 <thisCPU()>
c0010413:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010419:	8b 10                	mov    edx,DWORD PTR [eax]
c001041b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001041f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010423:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010427:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001042b:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001042e:	5b                   	pop    ebx
c001042f:	5e                   	pop    esi
c0010430:	5f                   	pop    edi
c0010431:	ff e0                	jmp    eax
c0010433:	90                   	nop

c0010434 <Device::addChild(Device*)>:
c0010434:	53                   	push   ebx
c0010435:	83 ec 08             	sub    esp,0x8
c0010438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001043c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010440:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010446:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001044c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001044e:	85 d2                	test   edx,edx
c0010450:	74 04                	je     c0010456 <Device::addChild(Device*)+0x22>
c0010452:	89 d3                	mov    ebx,edx
c0010454:	eb f6                	jmp    c001044c <Device::addChild(Device*)+0x18>
c0010456:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010459:	83 ec 0c             	sub    esp,0xc
c001045c:	6a 08                	push   0x8
c001045e:	e8 d7 ea ff ff       	call   c000ef3a <operator new(unsigned long)>
c0010463:	89 03                	mov    DWORD PTR [ebx],eax
c0010465:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001046b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010472:	83 c4 18             	add    esp,0x18
c0010475:	5b                   	pop    ebx
c0010476:	c3                   	ret    
c0010477:	90                   	nop

c0010478 <Device::removeAllChildren()>:
c0010478:	56                   	push   esi
c0010479:	53                   	push   ebx
c001047a:	52                   	push   edx
c001047b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001047f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010485:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010488:	74 17                	je     c00104a1 <Device::removeAllChildren()+0x29>
c001048a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001048d:	85 c0                	test   eax,eax
c001048f:	74 0c                	je     c001049d <Device::removeAllChildren()+0x25>
c0010491:	83 ec 0c             	sub    esp,0xc
c0010494:	8b 10                	mov    edx,DWORD PTR [eax]
c0010496:	50                   	push   eax
c0010497:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001049f:	eb e4                	jmp    c0010485 <Device::removeAllChildren()+0xd>
c00104a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00104a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104ad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00104b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104ba:	58                   	pop    eax
c00104bb:	5b                   	pop    ebx
c00104bc:	5e                   	pop    esi
c00104bd:	c3                   	ret    

c00104be <Device::hibernateAll()>:
c00104be:	53                   	push   ebx
c00104bf:	83 ec 14             	sub    esp,0x14
c00104c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104c8:	53                   	push   ebx
c00104c9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00104cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104d2:	83 c4 10             	add    esp,0x10
c00104d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104d8:	74 0f                	je     c00104e9 <Device::hibernateAll()+0x2b>
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104e0:	e8 d9 ff ff ff       	call   c00104be <Device::hibernateAll()>
c00104e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104e7:	eb e9                	jmp    c00104d2 <Device::hibernateAll()+0x14>
c00104e9:	83 c4 08             	add    esp,0x8
c00104ec:	5b                   	pop    ebx
c00104ed:	c3                   	ret    

c00104ee <Device::wakeAll()>:
c00104ee:	53                   	push   ebx
c00104ef:	83 ec 14             	sub    esp,0x14
c00104f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104f8:	53                   	push   ebx
c00104f9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00104fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010502:	83 c4 10             	add    esp,0x10
c0010505:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010508:	74 0f                	je     c0010519 <Device::wakeAll()+0x2b>
c001050a:	83 ec 0c             	sub    esp,0xc
c001050d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010510:	e8 d9 ff ff ff       	call   c00104ee <Device::wakeAll()>
c0010515:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010517:	eb e9                	jmp    c0010502 <Device::wakeAll()+0x14>
c0010519:	83 c4 08             	add    esp,0x8
c001051c:	5b                   	pop    ebx
c001051d:	c3                   	ret    

c001051e <Device::detectAll()>:
c001051e:	53                   	push   ebx
c001051f:	83 ec 14             	sub    esp,0x14
c0010522:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010528:	53                   	push   ebx
c0010529:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001052c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010538:	74 0f                	je     c0010549 <Device::detectAll()+0x2b>
c001053a:	83 ec 0c             	sub    esp,0xc
c001053d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010540:	e8 d9 ff ff ff       	call   c001051e <Device::detectAll()>
c0010545:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010547:	eb e9                	jmp    c0010532 <Device::detectAll()+0x14>
c0010549:	83 c4 08             	add    esp,0x8
c001054c:	5b                   	pop    ebx
c001054d:	c3                   	ret    

c001054e <Device::disableLegacyAll()>:
c001054e:	53                   	push   ebx
c001054f:	83 ec 14             	sub    esp,0x14
c0010552:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010558:	53                   	push   ebx
c0010559:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001055c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010568:	74 0f                	je     c0010579 <Device::disableLegacyAll()+0x2b>
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010570:	e8 d9 ff ff ff       	call   c001054e <Device::disableLegacyAll()>
c0010575:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010577:	eb e9                	jmp    c0010562 <Device::disableLegacyAll()+0x14>
c0010579:	83 c4 08             	add    esp,0x8
c001057c:	5b                   	pop    ebx
c001057d:	c3                   	ret    

c001057e <Device::loadDriversForAll()>:
c001057e:	53                   	push   ebx
c001057f:	83 ec 08             	sub    esp,0x8
c0010582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010586:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001058c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001058e:	85 db                	test   ebx,ebx
c0010590:	74 12                	je     c00105a4 <Device::loadDriversForAll()+0x26>
c0010592:	83 ec 0c             	sub    esp,0xc
c0010595:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010598:	e8 e1 ff ff ff       	call   c001057e <Device::loadDriversForAll()>
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	89 d8                	mov    eax,ebx
c00105a2:	eb e8                	jmp    c001058c <Device::loadDriversForAll()+0xe>
c00105a4:	83 c4 08             	add    esp,0x8
c00105a7:	5b                   	pop    ebx
c00105a8:	c3                   	ret    
c00105a9:	90                   	nop

c00105aa <Device::closeAll()>:
c00105aa:	53                   	push   ebx
c00105ab:	83 ec 08             	sub    esp,0x8
c00105ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105b4:	6a 00                	push   0x0
c00105b6:	6a 00                	push   0x0
c00105b8:	6a 00                	push   0x0
c00105ba:	53                   	push   ebx
c00105bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00105be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105c4:	83 c4 10             	add    esp,0x10
c00105c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105ca:	74 0f                	je     c00105db <Device::closeAll()+0x31>
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105d2:	e8 d3 ff ff ff       	call   c00105aa <Device::closeAll()>
c00105d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d9:	eb e9                	jmp    c00105c4 <Device::closeAll()+0x1a>
c00105db:	83 c4 08             	add    esp,0x8
c00105de:	5b                   	pop    ebx
c00105df:	c3                   	ret    

c00105e0 <Device::powerSavingAll(PowerSavingLevel)>:
c00105e0:	56                   	push   esi
c00105e1:	53                   	push   ebx
c00105e2:	83 ec 0c             	sub    esp,0xc
c00105e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00105ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ef:	56                   	push   esi
c00105f0:	53                   	push   ebx
c00105f1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00105f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010600:	74 0f                	je     c0010611 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010602:	52                   	push   edx
c0010603:	52                   	push   edx
c0010604:	56                   	push   esi
c0010605:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010608:	e8 d3 ff ff ff       	call   c00105e0 <Device::powerSavingAll(PowerSavingLevel)>
c001060d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001060f:	eb e9                	jmp    c00105fa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010611:	58                   	pop    eax
c0010612:	5b                   	pop    ebx
c0010613:	5e                   	pop    esi
c0010614:	c3                   	ret    
c0010615:	90                   	nop

c0010616 <Device::setName(char const*)>:
c0010616:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001061e:	e9 84 00 ff ff       	jmp    c00006a7 <strcpy>
c0010623:	90                   	nop

c0010624 <Device::Device(char const*)>:
c0010624:	83 ec 0c             	sub    esp,0xc
c0010627:	ba 18 0e 02 c0       	mov    edx,0xc0020e18
c001062c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010630:	89 10                	mov    DWORD PTR [eax],edx
c0010632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010636:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010652:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010660:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001066a:	83 ec 08             	sub    esp,0x8
c001066d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010675:	e8 9c ff ff ff       	call   c0010616 <Device::setName(char const*)>
c001067a:	83 c4 10             	add    esp,0x10
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	6a 08                	push   0x8
c0010682:	e8 b3 e8 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0010687:	83 c4 10             	add    esp,0x10
c001068a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010690:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010697:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001069b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00106a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00106cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00106d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00106e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00106f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010706:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010710:	90                   	nop
c0010711:	83 c4 0c             	add    esp,0xc
c0010714:	c3                   	ret    
c0010715:	90                   	nop

c0010716 <Device::getName()>:
c0010716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071a:	05 d0 00 00 00       	add    eax,0xd0
c001071f:	c3                   	ret    

c0010720 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010720:	83 ec 0c             	sub    esp,0xc
c0010723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010727:	83 ec 08             	sub    esp,0x8
c001072a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072e:	50                   	push   eax
c001072f:	e8 f0 fe ff ff       	call   c0010624 <Device::Device(char const*)>
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	ba 44 0e 02 c0       	mov    edx,0xc0020e44
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	89 10                	mov    DWORD PTR [eax],edx
c0010742:	90                   	nop
c0010743:	83 c4 0c             	add    esp,0xc
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010748:	57                   	push   edi
c0010749:	56                   	push   esi
c001074a:	53                   	push   ebx
c001074b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001074f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010753:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010757:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001075d:	75 0c                	jne    c001076b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001075f:	52                   	push   edx
c0010760:	52                   	push   edx
c0010761:	53                   	push   ebx
c0010762:	56                   	push   esi
c0010763:	e8 4c e5 00 00       	call   c001ecb4 <LinkedList<Device>::addElement(Device*)>
c0010768:	83 c4 10             	add    esp,0x10
c001076b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010771:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010774:	74 12                	je     c0010788 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010776:	50                   	push   eax
c0010777:	57                   	push   edi
c0010778:	56                   	push   esi
c0010779:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001077c:	e8 c7 ff ff ff       	call   c0010748 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010781:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010783:	83 c4 10             	add    esp,0x10
c0010786:	eb e9                	jmp    c0010771 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010788:	5b                   	pop    ebx
c0010789:	5e                   	pop    esi
c001078a:	5f                   	pop    edi
c001078b:	c3                   	ret    

c001078c <getDevicesOfType(DeviceType)>:
c001078c:	53                   	push   ebx
c001078d:	83 ec 14             	sub    esp,0x14
c0010790:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010794:	53                   	push   ebx
c0010795:	e8 f6 e5 00 00       	call   c001ed90 <LinkedList<Device>::LinkedList()>
c001079a:	83 c4 0c             	add    esp,0xc
c001079d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00107a1:	53                   	push   ebx
c00107a2:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c00107a8:	e8 9b ff ff ff       	call   c0010748 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00107ad:	89 d8                	mov    eax,ebx
c00107af:	83 c4 18             	add    esp,0x18
c00107b2:	5b                   	pop    ebx
c00107b3:	c2 04 00             	ret    0x4

c00107b6 <HardDiskController::HardDiskController(char const*)>:
c00107b6:	83 ec 0c             	sub    esp,0xc
c00107b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bd:	83 ec 08             	sub    esp,0x8
c00107c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c4:	50                   	push   eax
c00107c5:	e8 5a fe ff ff       	call   c0010624 <Device::Device(char const*)>
c00107ca:	83 c4 10             	add    esp,0x10
c00107cd:	ba 70 0e 02 c0       	mov    edx,0xc0020e70
c00107d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d6:	89 10                	mov    DWORD PTR [eax],edx
c00107d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107dc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00107e6:	90                   	nop
c00107e7:	83 c4 0c             	add    esp,0xc
c00107ea:	c3                   	ret    
c00107eb:	90                   	nop

c00107ec <HardDiskController::~HardDiskController()>:
c00107ec:	83 ec 0c             	sub    esp,0xc
c00107ef:	ba 70 0e 02 c0       	mov    edx,0xc0020e70
c00107f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107f8:	89 10                	mov    DWORD PTR [eax],edx
c00107fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fe:	83 ec 0c             	sub    esp,0xc
c0010801:	50                   	push   eax
c0010802:	e8 cf fa ff ff       	call   c00102d6 <Device::~Device()>
c0010807:	83 c4 10             	add    esp,0x10
c001080a:	90                   	nop
c001080b:	83 c4 0c             	add    esp,0xc
c001080e:	c3                   	ret    
c001080f:	90                   	nop

c0010810 <HardDiskController::~HardDiskController()>:
c0010810:	83 ec 0c             	sub    esp,0xc
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081a:	e8 cd ff ff ff       	call   c00107ec <HardDiskController::~HardDiskController()>
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	83 ec 08             	sub    esp,0x8
c0010825:	68 58 01 00 00       	push   0x158
c001082a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001082e:	e8 16 e7 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0010833:	83 c4 10             	add    esp,0x10
c0010836:	83 c4 0c             	add    esp,0xc
c0010839:	c3                   	ret    

c001083a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001083a:	83 ec 0c             	sub    esp,0xc
c001083d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010841:	83 ec 08             	sub    esp,0x8
c0010844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010848:	50                   	push   eax
c0010849:	e8 d6 fd ff ff       	call   c0010624 <Device::Device(char const*)>
c001084e:	83 c4 10             	add    esp,0x10
c0010851:	ba 9c 0e 02 c0       	mov    edx,0xc0020e9c
c0010856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085a:	89 10                	mov    DWORD PTR [eax],edx
c001085c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010860:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010876:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010884:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010888:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001088e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010892:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001089c:	90                   	nop
c001089d:	83 c4 0c             	add    esp,0xc
c00108a0:	c3                   	ret    
c00108a1:	90                   	nop

c00108a2 <PhysicalDisk::startCache()>:
c00108a2:	56                   	push   esi
c00108a3:	53                   	push   ebx
c00108a4:	83 ec 10             	sub    esp,0x10
c00108a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ab:	6a 30                	push   0x30
c00108ad:	e8 88 e6 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00108b2:	89 c6                	mov    esi,eax
c00108b4:	58                   	pop    eax
c00108b5:	5a                   	pop    edx
c00108b6:	53                   	push   ebx
c00108b7:	56                   	push   esi
c00108b8:	e8 6d 1e 00 00       	call   c001272a <VCache::VCache(PhysicalDisk*)>
c00108bd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00108c3:	83 c4 14             	add    esp,0x14
c00108c6:	5b                   	pop    ebx
c00108c7:	5e                   	pop    esi
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <PhysicalDisk::~PhysicalDisk()>:
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	ba 9c 0e 02 c0       	mov    edx,0xc0020e9c
c00108d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d6:	89 10                	mov    DWORD PTR [eax],edx
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	50                   	push   eax
c00108e0:	e8 f1 f9 ff ff       	call   c00102d6 <Device::~Device()>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	90                   	nop
c00108e9:	83 c4 0c             	add    esp,0xc
c00108ec:	c3                   	ret    
c00108ed:	90                   	nop

c00108ee <PhysicalDisk::~PhysicalDisk()>:
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	83 ec 0c             	sub    esp,0xc
c00108f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f8:	e8 cd ff ff ff       	call   c00108ca <PhysicalDisk::~PhysicalDisk()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	83 ec 08             	sub    esp,0x8
c0010903:	68 6c 01 00 00       	push   0x16c
c0010908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090c:	e8 38 e6 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0010911:	83 c4 10             	add    esp,0x10
c0010914:	83 c4 0c             	add    esp,0xc
c0010917:	c3                   	ret    

c0010918 <FPU::FPU(char const*)>:
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091f:	83 ec 08             	sub    esp,0x8
c0010922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010926:	50                   	push   eax
c0010927:	e8 f8 fc ff ff       	call   c0010624 <Device::Device(char const*)>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	89 10                	mov    DWORD PTR [eax],edx
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010948:	90                   	nop
c0010949:	83 c4 0c             	add    esp,0xc
c001094c:	c3                   	ret    
c001094d:	90                   	nop

c001094e <FPU::~FPU()>:
c001094e:	83 ec 0c             	sub    esp,0xc
c0010951:	ba dc 0e 02 c0       	mov    edx,0xc0020edc
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	89 10                	mov    DWORD PTR [eax],edx
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	50                   	push   eax
c0010964:	e8 6d f9 ff ff       	call   c00102d6 <Device::~Device()>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	90                   	nop
c001096d:	83 c4 0c             	add    esp,0xc
c0010970:	c3                   	ret    
c0010971:	90                   	nop

c0010972 <FPU::~FPU()>:
c0010972:	83 ec 0c             	sub    esp,0xc
c0010975:	83 ec 0c             	sub    esp,0xc
c0010978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097c:	e8 cd ff ff ff       	call   c001094e <FPU::~FPU()>
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	83 ec 08             	sub    esp,0x8
c0010987:	68 58 01 00 00       	push   0x158
c001098c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010990:	e8 b4 e5 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	83 c4 0c             	add    esp,0xc
c001099b:	c3                   	ret    

c001099c <setupFPU()>:
c001099c:	53                   	push   ebx
c001099d:	83 ec 08             	sub    esp,0x8
c00109a0:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00109a5:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00109ac:	74 19                	je     c00109c7 <setupFPU()+0x2b>
c00109ae:	83 ec 0c             	sub    esp,0xc
c00109b1:	68 58 01 00 00       	push   0x158
c00109b6:	e8 7f e5 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00109bb:	89 c3                	mov    ebx,eax
c00109bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c0:	e8 a9 ca 00 00       	call   c001d46e <AVX::AVX()>
c00109c5:	eb 5b                	jmp    c0010a22 <setupFPU()+0x86>
c00109c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00109cd:	84 c0                	test   al,al
c00109cf:	79 19                	jns    c00109ea <setupFPU()+0x4e>
c00109d1:	83 ec 0c             	sub    esp,0xc
c00109d4:	68 58 01 00 00       	push   0x158
c00109d9:	e8 5c e5 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00109de:	89 c3                	mov    ebx,eax
c00109e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00109e3:	e8 ac cb 00 00       	call   c001d594 <SSE::SSE()>
c00109e8:	eb 38                	jmp    c0010a22 <setupFPU()+0x86>
c00109ea:	a8 20                	test   al,0x20
c00109ec:	74 19                	je     c0010a07 <setupFPU()+0x6b>
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	68 58 01 00 00       	push   0x158
c00109f6:	e8 3f e5 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a00:	e8 f9 ca 00 00       	call   c001d4fe <MMX::MMX()>
c0010a05:	eb 1b                	jmp    c0010a22 <setupFPU()+0x86>
c0010a07:	a8 10                	test   al,0x10
c0010a09:	74 1c                	je     c0010a27 <setupFPU()+0x8b>
c0010a0b:	83 ec 0c             	sub    esp,0xc
c0010a0e:	68 58 01 00 00       	push   0x158
c0010a13:	e8 22 e5 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0010a18:	89 c3                	mov    ebx,eax
c0010a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a1d:	e8 00 cc 00 00       	call   c001d622 <x87::x87()>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	eb 2c                	jmp    c0010a53 <setupFPU()+0xb7>
c0010a27:	83 ec 0c             	sub    esp,0xc
c0010a2a:	31 db                	xor    ebx,ebx
c0010a2c:	68 c8 0e 02 c0       	push   0xc0020ec8
c0010a31:	e8 f3 e5 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010a36:	e8 7d 35 00 00       	call   c0013fb8 <thisCPU()>
c0010a3b:	e8 78 35 00 00       	call   c0013fb8 <thisCPU()>
c0010a40:	e8 a3 e3 00 00       	call   c001ede8 <CPU::readCR0()>
c0010a45:	83 c8 04             	or     eax,0x4
c0010a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a4b:	e8 aa e3 00 00       	call   c001edfa <CPU::writeCR0(unsigned long)>
c0010a50:	83 c4 10             	add    esp,0x10
c0010a53:	89 d8                	mov    eax,ebx
c0010a55:	83 c4 08             	add    esp,0x8
c0010a58:	5b                   	pop    ebx
c0010a59:	c3                   	ret    

c0010a5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010a5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a62:	c1 e0 04             	shl    eax,0x4
c0010a65:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010a69:	8d 50 10             	lea    edx,[eax+0x10]
c0010a6c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010a72:	74 08                	je     c0010a7c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010a74:	83 c0 04             	add    eax,0x4
c0010a77:	39 d0                	cmp    eax,edx
c0010a79:	75 f1                	jne    c0010a6c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010a7b:	c3                   	ret    
c0010a7c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a86:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a90:	eb e2                	jmp    c0010a74 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a92 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a92:	57                   	push   edi
c0010a93:	31 c0                	xor    eax,eax
c0010a95:	56                   	push   esi
c0010a96:	53                   	push   ebx
c0010a97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010a9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010aa3:	89 da                	mov    edx,ebx
c0010aa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010aa9:	c1 e2 04             	shl    edx,0x4
c0010aac:	01 ca                	add    edx,ecx
c0010aae:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010ab6:	74 16                	je     c0010ace <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010ab8:	40                   	inc    eax
c0010ab9:	83 f8 04             	cmp    eax,0x4
c0010abc:	75 f0                	jne    c0010aae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010abe:	c7 44 24 10 0c 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f0c
c0010ac6:	5b                   	pop    ebx
c0010ac7:	5e                   	pop    esi
c0010ac8:	5f                   	pop    edi
c0010ac9:	e9 f0 41 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c0010ace:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010ad1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010ad4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010ada:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010ae0:	5b                   	pop    ebx
c0010ae1:	5e                   	pop    esi
c0010ae2:	5f                   	pop    edi
c0010ae3:	c3                   	ret    

c0010ae4 <doubleFault(regs*, void*)>:
c0010ae4:	c7 44 24 04 3c 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002103c
c0010aec:	e9 cd 41 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c0010af1:	90                   	nop

c0010af2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010af2:	56                   	push   esi
c0010af3:	53                   	push   ebx
c0010af4:	50                   	push   eax
c0010af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010af9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010afd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010b02:	75 35                	jne    c0010b39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010b04:	8d 43 20             	lea    eax,[ebx+0x20]
c0010b07:	31 d2                	xor    edx,edx
c0010b09:	89 c1                	mov    ecx,eax
c0010b0b:	c1 e1 04             	shl    ecx,0x4
c0010b0e:	01 f1                	add    ecx,esi
c0010b10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010b18:	74 3e                	je     c0010b58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010b1a:	42                   	inc    edx
c0010b1b:	83 fa 04             	cmp    edx,0x4
c0010b1e:	75 f0                	jne    c0010b10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	68 80 0f 02 c0       	push   0xc0020f80
c0010b28:	e8 91 41 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0010b2d:	83 c4 10             	add    esp,0x10
c0010b30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b35:	5a                   	pop    edx
c0010b36:	5b                   	pop    ebx
c0010b37:	5e                   	pop    esi
c0010b38:	c3                   	ret    
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	56                   	push   esi
c0010b3d:	e8 d4 fb ff ff       	call   c0010716 <Device::getName()>
c0010b42:	83 c4 10             	add    esp,0x10
c0010b45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b48:	75 ba                	jne    c0010b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b4a:	83 fb 0f             	cmp    ebx,0xf
c0010b4d:	7f 29                	jg     c0010b78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010b4f:	0f b6 9b 00 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd100]
c0010b56:	eb ac                	jmp    c0010b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b58:	8d 04 82             	lea    eax,[edx+eax*4]
c0010b5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0010b62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010b72:	89 d8                	mov    eax,ebx
c0010b74:	5a                   	pop    edx
c0010b75:	5b                   	pop    ebx
c0010b76:	5e                   	pop    esi
c0010b77:	c3                   	ret    
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	68 48 0f 02 c0       	push   0xc0020f48
c0010b80:	e8 39 41 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	e9 77 ff ff ff       	jmp    c0010b04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b8d:	90                   	nop

c0010b8e <InterruptController::clearAllHandlers(int, bool)>:
c0010b8e:	56                   	push   esi
c0010b8f:	53                   	push   ebx
c0010b90:	52                   	push   edx
c0010b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010b99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010b9e:	75 61                	jne    c0010c01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010ba0:	8d 46 20             	lea    eax,[esi+0x20]
c0010ba3:	c1 e6 04             	shl    esi,0x4
c0010ba6:	c1 e0 04             	shl    eax,0x4
c0010ba9:	01 de                	add    esi,ebx
c0010bab:	01 d8                	add    eax,ebx
c0010bad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010bb7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010bc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010bcb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010bd5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010bdf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010be9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010bf3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010bfd:	58                   	pop    eax
c0010bfe:	5b                   	pop    ebx
c0010bff:	5e                   	pop    esi
c0010c00:	c3                   	ret    
c0010c01:	83 ec 0c             	sub    esp,0xc
c0010c04:	53                   	push   ebx
c0010c05:	e8 0c fb ff ff       	call   c0010716 <Device::getName()>
c0010c0a:	83 c4 10             	add    esp,0x10
c0010c0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c10:	75 8e                	jne    c0010ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c12:	83 fe 0f             	cmp    esi,0xf
c0010c15:	7f 09                	jg     c0010c20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010c17:	0f b6 b6 00 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd100]
c0010c1e:	eb 80                	jmp    c0010ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c20:	83 ec 0c             	sub    esp,0xc
c0010c23:	68 bc 0f 02 c0       	push   0xc0020fbc
c0010c28:	e8 91 40 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	e9 6b ff ff ff       	jmp    c0010ba0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010c35:	90                   	nop

c0010c36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010c36:	56                   	push   esi
c0010c37:	53                   	push   ebx
c0010c38:	52                   	push   edx
c0010c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c46:	75 3a                	jne    c0010c82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c4c:	8d 50 20             	lea    edx,[eax+0x20]
c0010c4f:	c1 e2 04             	shl    edx,0x4
c0010c52:	8d 04 16             	lea    eax,[esi+edx*1]
c0010c55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010c59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010c5f:	74 0b                	je     c0010c6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010c61:	83 c0 04             	add    eax,0x4
c0010c64:	39 d0                	cmp    eax,edx
c0010c66:	75 f1                	jne    c0010c59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010c68:	58                   	pop    eax
c0010c69:	5b                   	pop    ebx
c0010c6a:	5e                   	pop    esi
c0010c6b:	c3                   	ret    
c0010c6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c80:	eb df                	jmp    c0010c61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010c82:	83 ec 0c             	sub    esp,0xc
c0010c85:	56                   	push   esi
c0010c86:	e8 8b fa ff ff       	call   c0010716 <Device::getName()>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c91:	75 b5                	jne    c0010c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010c98:	7f 11                	jg     c0010cab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c9e:	0f b6 80 00 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd100]
c0010ca5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ca9:	eb 9d                	jmp    c0010c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010cab:	83 ec 0c             	sub    esp,0xc
c0010cae:	68 bc 0f 02 c0       	push   0xc0020fbc
c0010cb3:	e8 06 40 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0010cb8:	83 c4 10             	add    esp,0x10
c0010cbb:	eb 8b                	jmp    c0010c48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010cbd <nmiHandler(regs*, void*)>:
c0010cbd:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0010cc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cc6:	e9 a5 a6 ff ff       	jmp    c000b370 <Computer::handleNMI()>

c0010ccb <int_handler>:
c0010ccb:	55                   	push   ebp
c0010ccc:	57                   	push   edi
c0010ccd:	56                   	push   esi
c0010cce:	53                   	push   ebx
c0010ccf:	83 ec 0c             	sub    esp,0xc
c0010cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010cd6:	80 3d f0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241f0,0x0
c0010cdd:	74 0b                	je     c0010cea <int_handler+0x1f>
c0010cdf:	fa                   	cli    
c0010ce0:	f4                   	hlt    
c0010ce1:	80 3d f0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241f0,0x0
c0010ce8:	75 f5                	jne    c0010cdf <int_handler+0x14>
c0010cea:	e8 c9 32 00 00       	call   c0013fb8 <thisCPU()>
c0010cef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010cf2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010cf8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cfb:	83 f8 17             	cmp    eax,0x17
c0010cfe:	77 13                	ja     c0010d13 <int_handler+0x48>
c0010d00:	83 ec 08             	sub    esp,0x8
c0010d03:	8b 17                	mov    edx,DWORD PTR [edi]
c0010d05:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010d08:	0f b6 c0             	movzx  eax,al
c0010d0b:	50                   	push   eax
c0010d0c:	57                   	push   edi
c0010d0d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	83 c3 15             	add    ebx,0x15
c0010d16:	c1 e3 04             	shl    ebx,0x4
c0010d19:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010d1d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010d24:	31 db                	xor    ebx,ebx
c0010d26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010d2a:	85 c0                	test   eax,eax
c0010d2c:	74 13                	je     c0010d41 <int_handler+0x76>
c0010d2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010d31:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010d35:	74 1c                	je     c0010d53 <int_handler+0x88>
c0010d37:	83 ec 08             	sub    esp,0x8
c0010d3a:	52                   	push   edx
c0010d3b:	56                   	push   esi
c0010d3c:	ff d0                	call   eax
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	43                   	inc    ebx
c0010d42:	83 fb 04             	cmp    ebx,0x4
c0010d45:	75 df                	jne    c0010d26 <int_handler+0x5b>
c0010d47:	83 c4 0c             	add    esp,0xc
c0010d4a:	31 c0                	xor    eax,eax
c0010d4c:	5b                   	pop    ebx
c0010d4d:	31 d2                	xor    edx,edx
c0010d4f:	5e                   	pop    esi
c0010d50:	5f                   	pop    edi
c0010d51:	5d                   	pop    ebp
c0010d52:	c3                   	ret    
c0010d53:	83 ec 08             	sub    esp,0x8
c0010d56:	52                   	push   edx
c0010d57:	56                   	push   esi
c0010d58:	ff d0                	call   eax
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	83 c4 0c             	add    esp,0xc
c0010d60:	5b                   	pop    ebx
c0010d61:	5e                   	pop    esi
c0010d62:	5f                   	pop    edi
c0010d63:	5d                   	pop    ebp
c0010d64:	c3                   	ret    
c0010d65:	90                   	nop

c0010d66 <InterruptController::InterruptController(char const*)>:
c0010d66:	83 ec 1c             	sub    esp,0x1c
c0010d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d6d:	83 ec 08             	sub    esp,0x8
c0010d70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d74:	50                   	push   eax
c0010d75:	e8 aa f8 ff ff       	call   c0010624 <Device::Device(char const*)>
c0010d7a:	83 c4 10             	add    esp,0x10
c0010d7d:	ba d8 11 02 c0       	mov    edx,0xc00211d8
c0010d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d86:	89 10                	mov    DWORD PTR [eax],edx
c0010d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d8c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010d96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d9e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010da6:	7f 5e                	jg     c0010e06 <InterruptController::InterruptController(char const*)+0xa0>
c0010da8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010db0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010db5:	7f 49                	jg     c0010e00 <InterruptController::InterruptController(char const*)+0x9a>
c0010db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010dbf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dca:	01 ca                	add    edx,ecx
c0010dcc:	83 c2 54             	add    edx,0x54
c0010dcf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ddb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ddf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dea:	01 ca                	add    edx,ecx
c0010dec:	81 c2 54 04 00 00    	add    edx,0x454
c0010df2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010dfa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010dfe:	eb b0                	jmp    c0010db0 <InterruptController::InterruptController(char const*)+0x4a>
c0010e00:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010e04:	eb 98                	jmp    c0010d9e <InterruptController::InterruptController(char const*)+0x38>
c0010e06:	90                   	nop
c0010e07:	83 c4 1c             	add    esp,0x1c
c0010e0a:	c3                   	ret    
c0010e0b:	90                   	nop

c0010e0c <InterruptController::~InterruptController()>:
c0010e0c:	83 ec 0c             	sub    esp,0xc
c0010e0f:	ba d8 11 02 c0       	mov    edx,0xc00211d8
c0010e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e18:	89 10                	mov    DWORD PTR [eax],edx
c0010e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e1e:	83 ec 0c             	sub    esp,0xc
c0010e21:	50                   	push   eax
c0010e22:	e8 af f4 ff ff       	call   c00102d6 <Device::~Device()>
c0010e27:	83 c4 10             	add    esp,0x10
c0010e2a:	90                   	nop
c0010e2b:	83 c4 0c             	add    esp,0xc
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <InterruptController::~InterruptController()>:
c0010e30:	83 ec 0c             	sub    esp,0xc
c0010e33:	83 ec 0c             	sub    esp,0xc
c0010e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e3a:	e8 cd ff ff ff       	call   c0010e0c <InterruptController::~InterruptController()>
c0010e3f:	83 c4 10             	add    esp,0x10
c0010e42:	83 ec 08             	sub    esp,0x8
c0010e45:	68 58 21 00 00       	push   0x2158
c0010e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e4e:	e8 f6 e0 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	83 c4 0c             	add    esp,0xc
c0010e59:	c3                   	ret    

c0010e5a <displayDebugInfo(regs*)>:
c0010e5a:	55                   	push   ebp
c0010e5b:	57                   	push   edi
c0010e5c:	56                   	push   esi
c0010e5d:	53                   	push   ebx
c0010e5e:	83 ec 24             	sub    esp,0x24
c0010e61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e65:	0f 20 c2             	mov    edx,cr0
c0010e68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e6c:	0f 20 d7             	mov    edi,cr2
c0010e6f:	0f 20 de             	mov    esi,cr3
c0010e72:	0f 20 e5             	mov    ebp,cr4
c0010e75:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010e78:	68 49 10 02 c0       	push   0xc0021049
c0010e7d:	e8 a7 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010e82:	58                   	pop    eax
c0010e83:	5a                   	pop    edx
c0010e84:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e87:	68 54 10 02 c0       	push   0xc0021054
c0010e8c:	e8 98 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010e91:	59                   	pop    ecx
c0010e92:	58                   	pop    eax
c0010e93:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e96:	68 5f 10 02 c0       	push   0xc002105f
c0010e9b:	e8 89 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010ea0:	58                   	pop    eax
c0010ea1:	5a                   	pop    edx
c0010ea2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ea5:	68 6a 10 02 c0       	push   0xc002106a
c0010eaa:	e8 7a e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010eaf:	59                   	pop    ecx
c0010eb0:	58                   	pop    eax
c0010eb1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010eb4:	68 75 10 02 c0       	push   0xc0021075
c0010eb9:	e8 6b e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010ebe:	58                   	pop    eax
c0010ebf:	5a                   	pop    edx
c0010ec0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010ec3:	68 80 10 02 c0       	push   0xc0021080
c0010ec8:	e8 5c e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010ecd:	59                   	pop    ecx
c0010ece:	58                   	pop    eax
c0010ecf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010ed2:	68 9a 10 02 c0       	push   0xc002109a
c0010ed7:	e8 4d e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010edc:	58                   	pop    eax
c0010edd:	5a                   	pop    edx
c0010ede:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ee1:	68 8b 10 02 c0       	push   0xc002108b
c0010ee6:	e8 3e e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010eeb:	59                   	pop    ecx
c0010eec:	58                   	pop    eax
c0010eed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010ef0:	68 96 10 02 c0       	push   0xc0021096
c0010ef5:	e8 2f e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010efa:	58                   	pop    eax
c0010efb:	5a                   	pop    edx
c0010efc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010eff:	68 a5 10 02 c0       	push   0xc00210a5
c0010f04:	e8 20 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010f09:	59                   	pop    ecx
c0010f0a:	58                   	pop    eax
c0010f0b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f0e:	68 b0 10 02 c0       	push   0xc00210b0
c0010f13:	e8 11 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010f18:	58                   	pop    eax
c0010f19:	5a                   	pop    edx
c0010f1a:	57                   	push   edi
c0010f1b:	68 bb 10 02 c0       	push   0xc00210bb
c0010f20:	e8 04 e1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010f25:	59                   	pop    ecx
c0010f26:	58                   	pop    eax
c0010f27:	56                   	push   esi
c0010f28:	68 c6 10 02 c0       	push   0xc00210c6
c0010f2d:	e8 f7 e0 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0010f32:	58                   	pop    eax
c0010f33:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f3e:	e8 b8 bf ff ff       	call   c000cefb <setActiveTerminal(VgaText*)>
c0010f43:	58                   	pop    eax
c0010f44:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010f47:	5a                   	pop    edx
c0010f48:	c1 e0 05             	shl    eax,0x5
c0010f4b:	05 60 2c 02 c0       	add    eax,0xc0022c60
c0010f50:	50                   	push   eax
c0010f51:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f5c:	e8 b9 c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0010f61:	59                   	pop    ecx
c0010f62:	58                   	pop    eax
c0010f63:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010f68:	68 d1 10 02 c0       	push   0xc00210d1
c0010f6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f73:	e8 a2 c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0010f78:	58                   	pop    eax
c0010f79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f7e:	5a                   	pop    edx
c0010f7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f82:	83 c0 0c             	add    eax,0xc
c0010f85:	50                   	push   eax
c0010f86:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010f8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f91:	e8 84 c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0010f96:	59                   	pop    ecx
c0010f97:	58                   	pop    eax
c0010f98:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010f9d:	68 da 10 02 c0       	push   0xc00210da
c0010fa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa8:	e8 6d c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0010fad:	58                   	pop    eax
c0010fae:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010fb3:	5a                   	pop    edx
c0010fb4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fbd:	e8 7e c3 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0010fc2:	59                   	pop    ecx
c0010fc3:	58                   	pop    eax
c0010fc4:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010fc9:	68 e2 10 02 c0       	push   0xc00210e2
c0010fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fd4:	e8 41 c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0010fd9:	58                   	pop    eax
c0010fda:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010fdf:	5a                   	pop    edx
c0010fe0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fe3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fe9:	e8 52 c3 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0010fee:	59                   	pop    ecx
c0010fef:	58                   	pop    eax
c0010ff0:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0010ff5:	68 ea 10 02 c0       	push   0xc00210ea
c0010ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011000:	e8 15 c3 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011005:	58                   	pop    eax
c0011006:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c001100b:	5a                   	pop    edx
c001100c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001100f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011015:	e8 26 c3 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001101a:	59                   	pop    ecx
c001101b:	58                   	pop    eax
c001101c:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011021:	68 f2 10 02 c0       	push   0xc00210f2
c0011026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001102c:	e8 e9 c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011031:	58                   	pop    eax
c0011032:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011037:	5a                   	pop    edx
c0011038:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001103b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011041:	e8 fa c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0011046:	59                   	pop    ecx
c0011047:	58                   	pop    eax
c0011048:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c001104d:	68 fa 10 02 c0       	push   0xc00210fa
c0011052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011058:	e8 bd c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c001105d:	58                   	pop    eax
c001105e:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011063:	5a                   	pop    edx
c0011064:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011067:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001106d:	e8 ce c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0011072:	59                   	pop    ecx
c0011073:	58                   	pop    eax
c0011074:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011079:	68 02 11 02 c0       	push   0xc0021102
c001107e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011084:	e8 91 c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011089:	58                   	pop    eax
c001108a:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c001108f:	5a                   	pop    edx
c0011090:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011093:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011099:	e8 a2 c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001109e:	59                   	pop    ecx
c001109f:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00110a4:	5b                   	pop    ebx
c00110a5:	68 0a 11 02 c0       	push   0xc002110a
c00110aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b0:	e8 65 c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c00110b5:	58                   	pop    eax
c00110b6:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00110bb:	5a                   	pop    edx
c00110bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110c0:	52                   	push   edx
c00110c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c7:	e8 74 c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c00110cc:	59                   	pop    ecx
c00110cd:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00110d2:	5b                   	pop    ebx
c00110d3:	68 13 11 02 c0       	push   0xc0021113
c00110d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110de:	e8 37 c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c00110e3:	58                   	pop    eax
c00110e4:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00110e9:	5a                   	pop    edx
c00110ea:	57                   	push   edi
c00110eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f1:	e8 4a c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c00110f6:	59                   	pop    ecx
c00110f7:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00110fc:	5b                   	pop    ebx
c00110fd:	68 1b 11 02 c0       	push   0xc002111b
c0011102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011108:	e8 0d c2 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c001110d:	5f                   	pop    edi
c001110e:	58                   	pop    eax
c001110f:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011114:	56                   	push   esi
c0011115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111b:	e8 20 c2 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0011120:	58                   	pop    eax
c0011121:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011126:	5a                   	pop    edx
c0011127:	68 23 11 02 c0       	push   0xc0021123
c001112c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011132:	e8 e3 c1 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011137:	59                   	pop    ecx
c0011138:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c001113d:	5b                   	pop    ebx
c001113e:	55                   	push   ebp
c001113f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011145:	e8 f6 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001114a:	5e                   	pop    esi
c001114b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011150:	5f                   	pop    edi
c0011151:	68 2b 11 02 c0       	push   0xc002112b
c0011156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115c:	e8 b9 c1 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011161:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011166:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001116c:	e8 92 dc 00 00       	call   c001ee03 <CPU::readDR0()>
c0011171:	5d                   	pop    ebp
c0011172:	5a                   	pop    edx
c0011173:	50                   	push   eax
c0011174:	53                   	push   ebx
c0011175:	e8 c6 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001117a:	59                   	pop    ecx
c001117b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011180:	5b                   	pop    ebx
c0011181:	68 34 11 02 c0       	push   0xc0021134
c0011186:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118c:	e8 89 c1 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011191:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011196:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001119c:	e8 74 dc 00 00       	call   c001ee15 <CPU::readDR1()>
c00111a1:	5e                   	pop    esi
c00111a2:	5f                   	pop    edi
c00111a3:	50                   	push   eax
c00111a4:	53                   	push   ebx
c00111a5:	e8 96 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c00111aa:	5d                   	pop    ebp
c00111ab:	58                   	pop    eax
c00111ac:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00111b1:	68 3c 11 02 c0       	push   0xc002113c
c00111b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bc:	e8 59 c1 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c00111c1:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00111c6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111cc:	e8 56 dc 00 00       	call   c001ee27 <CPU::readDR2()>
c00111d1:	5a                   	pop    edx
c00111d2:	59                   	pop    ecx
c00111d3:	50                   	push   eax
c00111d4:	53                   	push   ebx
c00111d5:	e8 66 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c00111da:	5b                   	pop    ebx
c00111db:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00111e0:	5e                   	pop    esi
c00111e1:	68 44 11 02 c0       	push   0xc0021144
c00111e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ec:	e8 29 c1 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c00111f1:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00111f6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111fc:	e8 38 dc 00 00       	call   c001ee39 <CPU::readDR3()>
c0011201:	5f                   	pop    edi
c0011202:	5d                   	pop    ebp
c0011203:	50                   	push   eax
c0011204:	53                   	push   ebx
c0011205:	e8 36 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001120a:	58                   	pop    eax
c001120b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011210:	5a                   	pop    edx
c0011211:	68 4c 11 02 c0       	push   0xc002114c
c0011216:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121c:	e8 f9 c0 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011221:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011226:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001122c:	e8 1a dc 00 00       	call   c001ee4b <CPU::readDR6()>
c0011231:	59                   	pop    ecx
c0011232:	5e                   	pop    esi
c0011233:	50                   	push   eax
c0011234:	53                   	push   ebx
c0011235:	e8 06 c1 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001123a:	5f                   	pop    edi
c001123b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011240:	5d                   	pop    ebp
c0011241:	68 54 11 02 c0       	push   0xc0021154
c0011246:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124c:	e8 c9 c0 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0011251:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0011256:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001125c:	e8 fc db 00 00       	call   c001ee5d <CPU::readDR7()>
c0011261:	5a                   	pop    edx
c0011262:	59                   	pop    ecx
c0011263:	50                   	push   eax
c0011264:	53                   	push   ebx
c0011265:	e8 d6 c0 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c001126a:	fa                   	cli    
c001126b:	f4                   	hlt    
c001126c:	83 c4 10             	add    esp,0x10
c001126f:	eb fe                	jmp    c001126f <displayDebugInfo(regs*)+0x415>

c0011271 <x87EmulHandler(regs*, void*)>:
c0011271:	53                   	push   ebx
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	a1 34 39 02 c0       	mov    eax,ds:0xc0023934
c001127a:	85 c0                	test   eax,eax
c001127c:	74 15                	je     c0011293 <x87EmulHandler(regs*, void*)+0x22>
c001127e:	83 ec 0c             	sub    esp,0xc
c0011281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011285:	ff d0                	call   eax
c0011287:	83 c4 10             	add    esp,0x10
c001128a:	84 c0                	test   al,al
c001128c:	74 2f                	je     c00112bd <x87EmulHandler(regs*, void*)+0x4c>
c001128e:	83 c4 08             	add    esp,0x8
c0011291:	5b                   	pop    ebx
c0011292:	c3                   	ret    
c0011293:	83 ec 08             	sub    esp,0x8
c0011296:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c001129c:	6a 01                	push   0x1
c001129e:	68 5c 11 02 c0       	push   0xc002115c
c00112a3:	e8 f5 63 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c00112a8:	5a                   	pop    edx
c00112a9:	59                   	pop    ecx
c00112aa:	53                   	push   ebx
c00112ab:	50                   	push   eax
c00112ac:	e8 3f 65 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c00112b1:	a1 34 39 02 c0       	mov    eax,ds:0xc0023934
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	85 c0                	test   eax,eax
c00112bb:	75 c1                	jne    c001127e <x87EmulHandler(regs*, void*)+0xd>
c00112bd:	83 ec 0c             	sub    esp,0xc
c00112c0:	68 79 11 02 c0       	push   0xc0021179
c00112c5:	e8 5f dd ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00112ca:	58                   	pop    eax
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 86 fb ff ff       	call   c0010e5a <displayDebugInfo(regs*)>

c00112d4 <gpFault(regs*, void*)>:
c00112d4:	53                   	push   ebx
c00112d5:	83 ec 14             	sub    esp,0x14
c00112d8:	c7 05 30 39 02 c0 6d 8c 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc0018c6d
c00112e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00112e6:	53                   	push   ebx
c00112e7:	e8 81 79 00 00       	call   c0018c6d <Vm::faultHandler(regs*)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	84 c0                	test   al,al
c00112f1:	74 05                	je     c00112f8 <gpFault(regs*, void*)+0x24>
c00112f3:	83 c4 08             	add    esp,0x8
c00112f6:	5b                   	pop    ebx
c00112f7:	c3                   	ret    
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	68 79 11 02 c0       	push   0xc0021179
c0011300:	e8 24 dd ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0011305:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011308:	e8 4d fb ff ff       	call   c0010e5a <displayDebugInfo(regs*)>

c001130d <pgFault(regs*, void*)>:
c001130d:	83 ec 18             	sub    esp,0x18
c0011310:	68 94 11 02 c0       	push   0xc0021194
c0011315:	e8 0f dd ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001131a:	58                   	pop    eax
c001131b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131f:	e8 36 fb ff ff       	call   c0010e5a <displayDebugInfo(regs*)>

c0011324 <otherISRHandler(regs*, void*)>:
c0011324:	53                   	push   ebx
c0011325:	83 ec 0c             	sub    esp,0xc
c0011328:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001132c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001132f:	50                   	push   eax
c0011330:	50                   	push   eax
c0011331:	68 a1 11 02 c0       	push   0xc00211a1
c0011336:	e8 ee dc ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001133b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001133e:	e8 17 fb ff ff       	call   c0010e5a <displayDebugInfo(regs*)>

c0011343 <opcodeFault(regs*, void*)>:
c0011343:	53                   	push   ebx
c0011344:	83 ec 08             	sub    esp,0x8
c0011347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001134b:	e8 68 2c 00 00       	call   c0013fb8 <thisCPU()>
c0011350:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011357:	74 16                	je     c001136f <opcodeFault(regs*, void*)+0x2c>
c0011359:	83 ec 0c             	sub    esp,0xc
c001135c:	68 f8 0f 02 c0       	push   0xc0020ff8
c0011361:	e8 c3 dc ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0011366:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001136a:	83 c4 18             	add    esp,0x18
c001136d:	5b                   	pop    ebx
c001136e:	c3                   	ret    
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	68 be 11 02 c0       	push   0xc00211be
c0011377:	e8 ad dc ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001137c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001137f:	c1 e0 04             	shl    eax,0x4
c0011382:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011385:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011389:	89 14 24             	mov    DWORD PTR [esp],edx
c001138c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011390:	52                   	push   edx
c0011391:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011395:	52                   	push   edx
c0011396:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011399:	50                   	push   eax
c001139a:	68 1c 10 02 c0       	push   0xc002101c
c001139f:	e8 85 dc ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00113a4:	83 c4 14             	add    esp,0x14
c00113a7:	53                   	push   ebx
c00113a8:	e8 ad fa ff ff       	call   c0010e5a <displayDebugInfo(regs*)>

c00113ad <displayProgramFault(char const*)>:
c00113ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113bb:	85 c0                	test   eax,eax
c00113bd:	74 15                	je     c00113d4 <displayProgramFault(char const*)+0x27>
c00113bf:	83 ec 0c             	sub    esp,0xc
c00113c2:	6a 04                	push   0x4
c00113c4:	6a 0f                	push   0xf
c00113c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ca:	50                   	push   eax
c00113cb:	e8 0c bc ff ff       	call   c000cfdc <VgaText::puts(char const*, VgaColour, VgaColour)>
c00113d0:	83 c4 1c             	add    esp,0x1c
c00113d3:	c3                   	ret    
c00113d4:	c3                   	ret    
c00113d5:	90                   	nop

c00113d6 <InterruptController::convertLegacyIRQNumber(int)>:
c00113d6:	53                   	push   ebx
c00113d7:	83 ec 14             	sub    esp,0x14
c00113da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e2:	e8 2f f3 ff ff       	call   c0010716 <Device::getName()>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00113ed:	74 07                	je     c00113f6 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00113ef:	89 d8                	mov    eax,ebx
c00113f1:	83 c4 08             	add    esp,0x8
c00113f4:	5b                   	pop    ebx
c00113f5:	c3                   	ret    
c00113f6:	83 fb 0f             	cmp    ebx,0xf
c00113f9:	7f 0e                	jg     c0011409 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00113fb:	0f b6 9b 00 2f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd100]
c0011402:	83 c4 08             	add    esp,0x8
c0011405:	89 d8                	mov    eax,ebx
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	68 48 0f 02 c0       	push   0xc0020f48
c0011411:	e8 a8 38 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0011416:	89 d8                	mov    eax,ebx
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	83 c4 08             	add    esp,0x8
c001141e:	5b                   	pop    ebx
c001141f:	c3                   	ret    

c0011420 <setupInterruptController()>:
c0011420:	56                   	push   esi
c0011421:	53                   	push   ebx
c0011422:	51                   	push   ecx
c0011423:	e8 8d 2b 00 00       	call   c0013fb5 <getCPUNumber()>
c0011428:	85 c0                	test   eax,eax
c001142a:	0f 85 10 02 00 00    	jne    c0011640 <setupInterruptController()+0x220>
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0011438:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001143e:	68 58 21 00 00       	push   0x2158
c0011443:	83 e0 01             	and    eax,0x1
c0011446:	89 c6                	mov    esi,eax
c0011448:	e8 ed da ff ff       	call   c000ef3a <operator new(unsigned long)>
c001144d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011450:	89 c3                	mov    ebx,eax
c0011452:	e8 37 c8 00 00       	call   c001dc8e <PIC::PIC()>
c0011457:	6a 00                	push   0x0
c0011459:	6a 00                	push   0x0
c001145b:	6a 00                	push   0x0
c001145d:	53                   	push   ebx
c001145e:	e8 6f cb 00 00       	call   c001dfd2 <PIC::open(int, int, void*)>
c0011463:	83 c4 20             	add    esp,0x20
c0011466:	89 f0                	mov    eax,esi
c0011468:	84 c0                	test   al,al
c001146a:	0f 85 92 01 00 00    	jne    c0011602 <setupInterruptController()+0x1e2>
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	53                   	push   ebx
c0011474:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c001147a:	e8 b5 ef ff ff       	call   c0010434 <Device::addChild(Device*)>
c001147f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011481:	6a 00                	push   0x0
c0011483:	68 24 13 01 c0       	push   0xc0011324
c0011488:	6a 00                	push   0x0
c001148a:	53                   	push   ebx
c001148b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001148e:	83 c4 20             	add    esp,0x20
c0011491:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011493:	6a 00                	push   0x0
c0011495:	68 24 13 01 c0       	push   0xc0011324
c001149a:	6a 01                	push   0x1
c001149c:	53                   	push   ebx
c001149d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114a2:	6a 00                	push   0x0
c00114a4:	68 bd 0c 01 c0       	push   0xc0010cbd
c00114a9:	6a 02                	push   0x2
c00114ab:	53                   	push   ebx
c00114ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114b4:	6a 00                	push   0x0
c00114b6:	68 24 13 01 c0       	push   0xc0011324
c00114bb:	6a 03                	push   0x3
c00114bd:	53                   	push   ebx
c00114be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114c3:	6a 00                	push   0x0
c00114c5:	68 24 13 01 c0       	push   0xc0011324
c00114ca:	6a 04                	push   0x4
c00114cc:	53                   	push   ebx
c00114cd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114d0:	83 c4 20             	add    esp,0x20
c00114d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d5:	6a 00                	push   0x0
c00114d7:	68 24 13 01 c0       	push   0xc0011324
c00114dc:	6a 05                	push   0x5
c00114de:	53                   	push   ebx
c00114df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e4:	6a 00                	push   0x0
c00114e6:	68 43 13 01 c0       	push   0xc0011343
c00114eb:	6a 06                	push   0x6
c00114ed:	53                   	push   ebx
c00114ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114f1:	83 c4 20             	add    esp,0x20
c00114f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f6:	6a 00                	push   0x0
c00114f8:	68 71 12 01 c0       	push   0xc0011271
c00114fd:	6a 07                	push   0x7
c00114ff:	53                   	push   ebx
c0011500:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011503:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011505:	6a 00                	push   0x0
c0011507:	68 e4 0a 01 c0       	push   0xc0010ae4
c001150c:	6a 08                	push   0x8
c001150e:	53                   	push   ebx
c001150f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011512:	83 c4 20             	add    esp,0x20
c0011515:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011517:	6a 00                	push   0x0
c0011519:	68 24 13 01 c0       	push   0xc0011324
c001151e:	6a 09                	push   0x9
c0011520:	53                   	push   ebx
c0011521:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011524:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011526:	6a 00                	push   0x0
c0011528:	68 24 13 01 c0       	push   0xc0011324
c001152d:	6a 0a                	push   0xa
c001152f:	53                   	push   ebx
c0011530:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011533:	83 c4 20             	add    esp,0x20
c0011536:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011538:	6a 00                	push   0x0
c001153a:	68 24 13 01 c0       	push   0xc0011324
c001153f:	6a 0b                	push   0xb
c0011541:	53                   	push   ebx
c0011542:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011547:	6a 00                	push   0x0
c0011549:	68 24 13 01 c0       	push   0xc0011324
c001154e:	6a 0c                	push   0xc
c0011550:	53                   	push   ebx
c0011551:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011554:	83 c4 20             	add    esp,0x20
c0011557:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011559:	6a 00                	push   0x0
c001155b:	68 d4 12 01 c0       	push   0xc00112d4
c0011560:	6a 0d                	push   0xd
c0011562:	53                   	push   ebx
c0011563:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011566:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011568:	6a 00                	push   0x0
c001156a:	68 0d 13 01 c0       	push   0xc001130d
c001156f:	6a 0e                	push   0xe
c0011571:	53                   	push   ebx
c0011572:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011575:	83 c4 20             	add    esp,0x20
c0011578:	8b 03                	mov    eax,DWORD PTR [ebx]
c001157a:	6a 00                	push   0x0
c001157c:	68 24 13 01 c0       	push   0xc0011324
c0011581:	6a 0f                	push   0xf
c0011583:	53                   	push   ebx
c0011584:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011587:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011589:	6a 00                	push   0x0
c001158b:	68 24 13 01 c0       	push   0xc0011324
c0011590:	6a 10                	push   0x10
c0011592:	53                   	push   ebx
c0011593:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011596:	83 c4 20             	add    esp,0x20
c0011599:	8b 03                	mov    eax,DWORD PTR [ebx]
c001159b:	6a 00                	push   0x0
c001159d:	68 24 13 01 c0       	push   0xc0011324
c00115a2:	6a 11                	push   0x11
c00115a4:	53                   	push   ebx
c00115a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115aa:	6a 00                	push   0x0
c00115ac:	68 24 13 01 c0       	push   0xc0011324
c00115b1:	6a 12                	push   0x12
c00115b3:	53                   	push   ebx
c00115b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115b7:	83 c4 20             	add    esp,0x20
c00115ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115bc:	6a 00                	push   0x0
c00115be:	68 24 13 01 c0       	push   0xc0011324
c00115c3:	6a 13                	push   0x13
c00115c5:	53                   	push   ebx
c00115c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115cb:	6a 00                	push   0x0
c00115cd:	68 24 13 01 c0       	push   0xc0011324
c00115d2:	6a 14                	push   0x14
c00115d4:	53                   	push   ebx
c00115d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115d8:	83 c4 20             	add    esp,0x20
c00115db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115dd:	6a 00                	push   0x0
c00115df:	68 24 13 01 c0       	push   0xc0011324
c00115e4:	6a 1e                	push   0x1e
c00115e6:	53                   	push   ebx
c00115e7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115ec:	6a 00                	push   0x0
c00115ee:	68 a1 66 01 c0       	push   0xc00166a1
c00115f3:	6a 60                	push   0x60
c00115f5:	53                   	push   ebx
c00115f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115f9:	83 c4 20             	add    esp,0x20
c00115fc:	89 d8                	mov    eax,ebx
c00115fe:	5a                   	pop    edx
c00115ff:	5b                   	pop    ebx
c0011600:	5e                   	pop    esi
c0011601:	c3                   	ret    
c0011602:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011604:	6a 00                	push   0x0
c0011606:	6a 00                	push   0x0
c0011608:	6a 00                	push   0x0
c001160a:	53                   	push   ebx
c001160b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001160e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011610:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011613:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011616:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c001161d:	e8 18 d9 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0011622:	89 04 24             	mov    DWORD PTR [esp],eax
c0011625:	89 c3                	mov    ebx,eax
c0011627:	e8 a0 c1 00 00       	call   c001d7cc <APIC::APIC()>
c001162c:	6a 00                	push   0x0
c001162e:	6a 00                	push   0x0
c0011630:	6a 00                	push   0x0
c0011632:	53                   	push   ebx
c0011633:	e8 b2 c0 00 00       	call   c001d6ea <APIC::open(int, int, void*)>
c0011638:	83 c4 20             	add    esp,0x20
c001163b:	e9 30 fe ff ff       	jmp    c0011470 <setupInterruptController()+0x50>
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	68 58 21 00 00       	push   0x2158
c0011648:	e8 ed d8 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001164d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011650:	89 c3                	mov    ebx,eax
c0011652:	e8 75 c1 00 00       	call   c001d7cc <APIC::APIC()>
c0011657:	6a 00                	push   0x0
c0011659:	6a 00                	push   0x0
c001165b:	6a 00                	push   0x0
c001165d:	53                   	push   ebx
c001165e:	e8 87 c0 00 00       	call   c001d6ea <APIC::open(int, int, void*)>
c0011663:	83 c4 18             	add    esp,0x18
c0011666:	53                   	push   ebx
c0011667:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c001166d:	e8 c2 ed ff ff       	call   c0010434 <Device::addChild(Device*)>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	89 d8                	mov    eax,ebx
c0011677:	5a                   	pop    edx
c0011678:	5b                   	pop    ebx
c0011679:	5e                   	pop    esi
c001167a:	c3                   	ret    
c001167b:	90                   	nop

c001167c <startGUI(void*)>:
c001167c:	55                   	push   ebp
c001167d:	89 e5                	mov    ebp,esp
c001167f:	53                   	push   ebx
c0011680:	83 ec 04             	sub    esp,0x4
c0011683:	e8 74 65 00 00       	call   c0017bfc <unlockScheduler()>
c0011688:	e8 58 65 00 00       	call   c0017be5 <getIRQNestingLevel()>
c001168d:	83 ec 08             	sub    esp,0x8
c0011690:	50                   	push   eax
c0011691:	68 18 12 02 c0       	push   0xc0021218
c0011696:	e8 8e d9 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001169b:	83 c4 10             	add    esp,0x10
c001169e:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c00116a4:	83 ec 08             	sub    esp,0x8
c00116a7:	6a 01                	push   0x1
c00116a9:	68 32 12 02 c0       	push   0xc0021232
c00116ae:	e8 ea 5f 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	53                   	push   ebx
c00116ba:	50                   	push   eax
c00116bb:	e8 30 61 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	6a 01                	push   0x1
c00116ce:	68 4c 12 02 c0       	push   0xc002124c
c00116d3:	e8 c5 5f 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c00116d8:	83 c4 10             	add    esp,0x10
c00116db:	83 ec 08             	sub    esp,0x8
c00116de:	53                   	push   ebx
c00116df:	50                   	push   eax
c00116e0:	e8 0b 61 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	90                   	nop
c00116e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00116ec:	c9                   	leave  
c00116ed:	c3                   	ret    

c00116ee <sendKeyToTerminal(unsigned char)>:
c00116ee:	55                   	push   ebp
c00116ef:	89 e5                	mov    ebp,esp
c00116f1:	83 ec 28             	sub    esp,0x28
c00116f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00116fa:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c00116ff:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011703:	83 ec 08             	sub    esp,0x8
c0011706:	52                   	push   edx
c0011707:	50                   	push   eax
c0011708:	e8 0b be ff ff       	call   c000d518 <VgaText::receiveKey(unsigned char)>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011714:	75 41                	jne    c0011757 <sendKeyToTerminal(unsigned char)+0x69>
c0011716:	e8 06 65 00 00       	call   c0017c21 <lockStuff()>
c001171b:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c0011720:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011723:	c7 05 40 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023940,0x0
c001172d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011731:	74 1f                	je     c0011752 <sendKeyToTerminal(unsigned char)+0x64>
c0011733:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011736:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011739:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001173c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001173f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011742:	83 ec 0c             	sub    esp,0xc
c0011745:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011748:	e8 bd 6c 00 00       	call   c001840a <unblockTask(ThreadControlBlock*)>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	eb db                	jmp    c001172d <sendKeyToTerminal(unsigned char)+0x3f>
c0011752:	e8 5c 68 00 00       	call   c0017fb3 <unlockStuff()>
c0011757:	90                   	nop
c0011758:	c9                   	leave  
c0011759:	c3                   	ret    

c001175a <sendKeyboardToken(KeyboardToken)>:
c001175a:	55                   	push   ebp
c001175b:	89 e5                	mov    ebp,esp
c001175d:	83 ec 18             	sub    esp,0x18
c0011760:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011766:	0f b7 c0             	movzx  eax,ax
c0011769:	83 f2 01             	xor    edx,0x1
c001176c:	88 90 60 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc6a0],dl
c0011772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011775:	66 3d 03 02          	cmp    ax,0x203
c0011779:	75 07                	jne    c0011782 <sendKeyboardToken(KeyboardToken)+0x28>
c001177b:	a0 60 3a 02 c0       	mov    al,ds:0xc0023a60
c0011780:	84 c0                	test   al,al
c0011782:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011786:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011789:	a0 68 3d 02 c0       	mov    al,ds:0xc0023d68
c001178e:	38 c2                	cmp    dl,al
c0011790:	74 1c                	je     c00117ae <sendKeyboardToken(KeyboardToken)+0x54>
c0011792:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011795:	a2 68 3d 02 c0       	mov    ds:0xc0023d68,al
c001179a:	a0 68 3d 02 c0       	mov    al,ds:0xc0023d68
c001179f:	0f b6 c0             	movzx  eax,al
c00117a2:	83 ec 0c             	sub    esp,0xc
c00117a5:	50                   	push   eax
c00117a6:	e8 db af ff ff       	call   c000c786 <setTerminalScrollLock(bool)>
c00117ab:	83 c4 10             	add    esp,0x10
c00117ae:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00117b1:	84 c0                	test   al,al
c00117b3:	0f 84 ae 00 00 00    	je     c0011867 <sendKeyboardToken(KeyboardToken)+0x10d>
c00117b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bc:	66 3d 10 03          	cmp    ax,0x310
c00117c0:	75 06                	jne    c00117c8 <sendKeyboardToken(KeyboardToken)+0x6e>
c00117c2:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00117c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cb:	66 3d 11 03          	cmp    ax,0x311
c00117cf:	75 06                	jne    c00117d7 <sendKeyboardToken(KeyboardToken)+0x7d>
c00117d1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00117d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117da:	66 3d 12 03          	cmp    ax,0x312
c00117de:	75 06                	jne    c00117e6 <sendKeyboardToken(KeyboardToken)+0x8c>
c00117e0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00117e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e9:	66 3d 13 03          	cmp    ax,0x313
c00117ed:	75 06                	jne    c00117f5 <sendKeyboardToken(KeyboardToken)+0x9b>
c00117ef:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00117f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f8:	66 3d 14 03          	cmp    ax,0x314
c00117fc:	75 06                	jne    c0011804 <sendKeyboardToken(KeyboardToken)+0xaa>
c00117fe:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011807:	66 3d 15 03          	cmp    ax,0x315
c001180b:	75 06                	jne    c0011813 <sendKeyboardToken(KeyboardToken)+0xb9>
c001180d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011816:	66 3d 16 03          	cmp    ax,0x316
c001181a:	75 06                	jne    c0011822 <sendKeyboardToken(KeyboardToken)+0xc8>
c001181c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011825:	66 3d 17 03          	cmp    ax,0x317
c0011829:	75 06                	jne    c0011831 <sendKeyboardToken(KeyboardToken)+0xd7>
c001182b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011834:	66 3d 18 03          	cmp    ax,0x318
c0011838:	75 06                	jne    c0011840 <sendKeyboardToken(KeyboardToken)+0xe6>
c001183a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011843:	66 3d 19 03          	cmp    ax,0x319
c0011847:	75 06                	jne    c001184f <sendKeyboardToken(KeyboardToken)+0xf5>
c0011849:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001184f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011852:	66 3d 1a 03          	cmp    ax,0x31a
c0011856:	0f 85 c9 00 00 00    	jne    c0011925 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001185c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011862:	e9 be 00 00 00       	jmp    c0011925 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186a:	66 3d 10 03          	cmp    ax,0x310
c001186e:	75 0a                	jne    c001187a <sendKeyboardToken(KeyboardToken)+0x120>
c0011870:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011876:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187d:	66 3d 11 03          	cmp    ax,0x311
c0011881:	75 0a                	jne    c001188d <sendKeyboardToken(KeyboardToken)+0x133>
c0011883:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011889:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001188d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011890:	66 3d 12 03          	cmp    ax,0x312
c0011894:	75 0a                	jne    c00118a0 <sendKeyboardToken(KeyboardToken)+0x146>
c0011896:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001189c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a3:	66 3d 13 03          	cmp    ax,0x313
c00118a7:	75 0a                	jne    c00118b3 <sendKeyboardToken(KeyboardToken)+0x159>
c00118a9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00118af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b6:	66 3d 14 03          	cmp    ax,0x314
c00118ba:	75 0a                	jne    c00118c6 <sendKeyboardToken(KeyboardToken)+0x16c>
c00118bc:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00118c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c9:	66 3d 15 03          	cmp    ax,0x315
c00118cd:	75 0a                	jne    c00118d9 <sendKeyboardToken(KeyboardToken)+0x17f>
c00118cf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00118d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118dc:	66 3d 16 03          	cmp    ax,0x316
c00118e0:	75 0a                	jne    c00118ec <sendKeyboardToken(KeyboardToken)+0x192>
c00118e2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00118e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ef:	66 3d 17 03          	cmp    ax,0x317
c00118f3:	75 0a                	jne    c00118ff <sendKeyboardToken(KeyboardToken)+0x1a5>
c00118f5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00118fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011902:	66 3d 18 03          	cmp    ax,0x318
c0011906:	75 0a                	jne    c0011912 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0011908:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001190e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011915:	66 3d 19 03          	cmp    ax,0x319
c0011919:	75 0a                	jne    c0011925 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001191b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011921:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011928:	66 3d 00 02          	cmp    ax,0x200
c001192c:	75 2a                	jne    c0011958 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001192e:	a0 60 3d 02 c0       	mov    al,ds:0xc0023d60
c0011933:	83 f0 01             	xor    eax,0x1
c0011936:	84 c0                	test   al,al
c0011938:	74 1e                	je     c0011958 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001193a:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c001193f:	6a 01                	push   0x1
c0011941:	6a 00                	push   0x0
c0011943:	68 7c 16 01 c0       	push   0xc001167c
c0011948:	50                   	push   eax
c0011949:	e8 d6 63 00 00       	call   c0017d24 <Process::createThread(void (*)(void*), void*, int)>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	c6 05 60 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d60,0x1
c0011958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195b:	66 3d 1d 03          	cmp    ax,0x31d
c001195f:	75 06                	jne    c0011967 <sendKeyboardToken(KeyboardToken)+0x20d>
c0011961:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196a:	66 3d 1c 03          	cmp    ax,0x31c
c001196e:	75 06                	jne    c0011976 <sendKeyboardToken(KeyboardToken)+0x21c>
c0011970:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011979:	66 3d 1b 03          	cmp    ax,0x31b
c001197d:	75 06                	jne    c0011985 <sendKeyboardToken(KeyboardToken)+0x22b>
c001197f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011988:	66 3d 1e 03          	cmp    ax,0x31e
c001198c:	75 06                	jne    c0011994 <sendKeyboardToken(KeyboardToken)+0x23a>
c001198e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011997:	66 3d 1f 03          	cmp    ax,0x31f
c001199b:	75 06                	jne    c00119a3 <sendKeyboardToken(KeyboardToken)+0x249>
c001199d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00119a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a6:	66 3d 1a 03          	cmp    ax,0x31a
c00119aa:	75 06                	jne    c00119b2 <sendKeyboardToken(KeyboardToken)+0x258>
c00119ac:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00119b2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00119b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00119b9:	83 f0 01             	xor    eax,0x1
c00119bc:	84 c0                	test   al,al
c00119be:	74 77                	je     c0011a37 <sendKeyboardToken(KeyboardToken)+0x2dd>
c00119c0:	a0 61 3a 02 c0       	mov    al,ds:0xc0023a61
c00119c5:	84 c0                	test   al,al
c00119c7:	74 41                	je     c0011a0a <sendKeyboardToken(KeyboardToken)+0x2b0>
c00119c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119cd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00119d1:	74 2b                	je     c00119fe <sendKeyboardToken(KeyboardToken)+0x2a4>
c00119d3:	8b 15 64 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d64
c00119d9:	89 d0                	mov    eax,edx
c00119db:	c1 e0 02             	shl    eax,0x2
c00119de:	01 d0                	add    eax,edx
c00119e0:	01 c0                	add    eax,eax
c00119e2:	a3 64 3d 02 c0       	mov    ds:0xc0023d64,eax
c00119e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ea:	0f b7 c0             	movzx  eax,ax
c00119ed:	8d 50 d0             	lea    edx,[eax-0x30]
c00119f0:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c00119f5:	01 d0                	add    eax,edx
c00119f7:	a3 64 3d 02 c0       	mov    ds:0xc0023d64,eax
c00119fc:	eb 6d                	jmp    c0011a6b <sendKeyboardToken(KeyboardToken)+0x311>
c00119fe:	c7 05 64 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d64,0x0
c0011a08:	eb 61                	jmp    c0011a6b <sendKeyboardToken(KeyboardToken)+0x311>
c0011a0a:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c0011a0f:	85 c0                	test   eax,eax
c0011a11:	74 18                	je     c0011a2b <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011a13:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c0011a18:	0f b6 c0             	movzx  eax,al
c0011a1b:	83 ec 0c             	sub    esp,0xc
c0011a1e:	50                   	push   eax
c0011a1f:	e8 ca fc ff ff       	call   c00116ee <sendKeyToTerminal(unsigned char)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a2b:	c7 05 64 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d64,0x0
c0011a35:	eb 34                	jmp    c0011a6b <sendKeyboardToken(KeyboardToken)+0x311>
c0011a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3a:	66 3d 01 01          	cmp    ax,0x101
c0011a3e:	75 2b                	jne    c0011a6b <sendKeyboardToken(KeyboardToken)+0x311>
c0011a40:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 18                	je     c0011a61 <sendKeyboardToken(KeyboardToken)+0x307>
c0011a49:	a1 64 3d 02 c0       	mov    eax,ds:0xc0023d64
c0011a4e:	0f b6 c0             	movzx  eax,al
c0011a51:	83 ec 0c             	sub    esp,0xc
c0011a54:	50                   	push   eax
c0011a55:	e8 94 fc ff ff       	call   c00116ee <sendKeyToTerminal(unsigned char)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a61:	c7 05 64 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d64,0x0
c0011a6b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a6e:	83 f0 01             	xor    eax,0x1
c0011a71:	84 c0                	test   al,al
c0011a73:	74 4c                	je     c0011ac1 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a78:	83 f0 01             	xor    eax,0x1
c0011a7b:	84 c0                	test   al,al
c0011a7d:	74 42                	je     c0011ac1 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a7f:	a0 60 3a 02 c0       	mov    al,ds:0xc0023a60
c0011a84:	83 f0 01             	xor    eax,0x1
c0011a87:	84 c0                	test   al,al
c0011a89:	74 36                	je     c0011ac1 <sendKeyboardToken(KeyboardToken)+0x367>
c0011a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8e:	66 83 f8 1f          	cmp    ax,0x1f
c0011a92:	76 09                	jbe    c0011a9d <sendKeyboardToken(KeyboardToken)+0x343>
c0011a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a97:	66 83 f8 7e          	cmp    ax,0x7e
c0011a9b:	76 12                	jbe    c0011aaf <sendKeyboardToken(KeyboardToken)+0x355>
c0011a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa0:	66 83 f8 0a          	cmp    ax,0xa
c0011aa4:	74 09                	je     c0011aaf <sendKeyboardToken(KeyboardToken)+0x355>
c0011aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa9:	66 83 f8 08          	cmp    ax,0x8
c0011aad:	75 12                	jne    c0011ac1 <sendKeyboardToken(KeyboardToken)+0x367>
c0011aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab2:	0f b6 c0             	movzx  eax,al
c0011ab5:	83 ec 0c             	sub    esp,0xc
c0011ab8:	50                   	push   eax
c0011ab9:	e8 30 fc ff ff       	call   c00116ee <sendKeyToTerminal(unsigned char)>
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011ac4:	83 f0 01             	xor    eax,0x1
c0011ac7:	84 c0                	test   al,al
c0011ac9:	74 4f                	je     c0011b1a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011acb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011ace:	83 f0 01             	xor    eax,0x1
c0011ad1:	84 c0                	test   al,al
c0011ad3:	74 45                	je     c0011b1a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ad5:	a0 60 3a 02 c0       	mov    al,ds:0xc0023a60
c0011ada:	84 c0                	test   al,al
c0011adc:	74 3c                	je     c0011b1a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ae1:	66 83 f8 3f          	cmp    ax,0x3f
c0011ae5:	76 33                	jbe    c0011b1a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aea:	66 83 f8 7f          	cmp    ax,0x7f
c0011aee:	77 2a                	ja     c0011b1a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af3:	88 c2                	mov    dl,al
c0011af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af8:	66 83 f8 5f          	cmp    ax,0x5f
c0011afc:	76 04                	jbe    c0011b02 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011afe:	b0 20                	mov    al,0x20
c0011b00:	eb 02                	jmp    c0011b04 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011b02:	b0 00                	mov    al,0x0
c0011b04:	29 c2                	sub    edx,eax
c0011b06:	88 d0                	mov    al,dl
c0011b08:	83 e8 40             	sub    eax,0x40
c0011b0b:	0f b6 c0             	movzx  eax,al
c0011b0e:	83 ec 0c             	sub    esp,0xc
c0011b11:	50                   	push   eax
c0011b12:	e8 d7 fb ff ff       	call   c00116ee <sendKeyToTerminal(unsigned char)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1d:	66 3d 00 03          	cmp    ax,0x300
c0011b21:	75 0f                	jne    c0011b32 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b23:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011b26:	83 f0 01             	xor    eax,0x1
c0011b29:	84 c0                	test   al,al
c0011b2b:	74 05                	je     c0011b32 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b2d:	e8 7b b4 ff ff       	call   c000cfad <doTerminalCycle()>
c0011b32:	90                   	nop
c0011b33:	c9                   	leave  
c0011b34:	c3                   	ret    

c0011b35 <clearInternalKeybuffer(VgaText*)>:
c0011b35:	55                   	push   ebp
c0011b36:	89 e5                	mov    ebp,esp
c0011b38:	83 ec 08             	sub    esp,0x8
c0011b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b3e:	05 34 11 00 00       	add    eax,0x1134
c0011b43:	83 ec 0c             	sub    esp,0xc
c0011b46:	50                   	push   eax
c0011b47:	e8 d9 ea fe ff       	call   c0000625 <strlen>
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b52:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b58:	83 ec 04             	sub    esp,0x4
c0011b5b:	50                   	push   eax
c0011b5c:	6a 00                	push   0x0
c0011b5e:	52                   	push   edx
c0011b5f:	e8 a4 ea fe ff       	call   c0000608 <memset>
c0011b64:	83 c4 10             	add    esp,0x10
c0011b67:	90                   	nop
c0011b68:	c9                   	leave  
c0011b69:	c3                   	ret    

c0011b6a <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b6a:	55                   	push   ebp
c0011b6b:	89 e5                	mov    ebp,esp
c0011b6d:	83 ec 18             	sub    esp,0x18
c0011b70:	fb                   	sti    
c0011b71:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011b78:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011b7c:	74 77                	je     c0011bf5 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b81:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b87:	84 c0                	test   al,al
c0011b89:	75 02                	jne    c0011b8d <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b8b:	eb f1                	jmp    c0011b7e <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b90:	8d 50 01             	lea    edx,[eax+0x1]
c0011b93:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011b96:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b99:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011b9f:	88 10                	mov    BYTE PTR [eax],dl
c0011ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ba4:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011baa:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bb0:	05 34 11 00 00       	add    eax,0x1134
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	50                   	push   eax
c0011bb9:	e8 67 ea fe ff       	call   c0000625 <strlen>
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bc4:	81 c2 34 11 00 00    	add    edx,0x1134
c0011bca:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011bcd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bd0:	81 c2 34 11 00 00    	add    edx,0x1134
c0011bd6:	83 ec 04             	sub    esp,0x4
c0011bd9:	50                   	push   eax
c0011bda:	51                   	push   ecx
c0011bdb:	52                   	push   edx
c0011bdc:	e8 b9 e9 fe ff       	call   c000059a <memmove>
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011be7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011bea:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011bee:	75 88                	jne    c0011b78 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bf3:	eb 03                	jmp    c0011bf8 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011bf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bf8:	c9                   	leave  
c0011bf9:	c3                   	ret    

c0011bfa <Keyboard::Keyboard(char const*)>:
c0011bfa:	83 ec 0c             	sub    esp,0xc
c0011bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c01:	83 ec 08             	sub    esp,0x8
c0011c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c08:	50                   	push   eax
c0011c09:	e8 16 ea ff ff       	call   c0010624 <Device::Device(char const*)>
c0011c0e:	83 c4 10             	add    esp,0x10
c0011c11:	ba 70 12 02 c0       	mov    edx,0xc0021270
c0011c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c1a:	89 10                	mov    DWORD PTR [eax],edx
c0011c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c20:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011c2a:	c6 05 44 39 02 c0 01 	mov    BYTE PTR ds:0xc0023944,0x1
c0011c31:	90                   	nop
c0011c32:	83 c4 0c             	add    esp,0xc
c0011c35:	c3                   	ret    

c0011c36 <Keyboard::~Keyboard()>:
c0011c36:	83 ec 0c             	sub    esp,0xc
c0011c39:	ba 70 12 02 c0       	mov    edx,0xc0021270
c0011c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c42:	89 10                	mov    DWORD PTR [eax],edx
c0011c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	50                   	push   eax
c0011c4c:	e8 85 e6 ff ff       	call   c00102d6 <Device::~Device()>
c0011c51:	83 c4 10             	add    esp,0x10
c0011c54:	90                   	nop
c0011c55:	83 c4 0c             	add    esp,0xc
c0011c58:	c3                   	ret    
c0011c59:	90                   	nop

c0011c5a <Keyboard::~Keyboard()>:
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	83 ec 0c             	sub    esp,0xc
c0011c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c64:	e8 cd ff ff ff       	call   c0011c36 <Keyboard::~Keyboard()>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	83 ec 08             	sub    esp,0x8
c0011c6f:	68 5c 01 00 00       	push   0x15c
c0011c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c78:	e8 cc d2 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	83 c4 0c             	add    esp,0xc
c0011c83:	c3                   	ret    

c0011c84 <LogicalDisk::close(int, int, void*)>:
c0011c84:	83 c8 ff             	or     eax,0xffffffff
c0011c87:	c3                   	ret    

c0011c88 <LogicalDisk::~LogicalDisk()>:
c0011c88:	83 ec 0c             	sub    esp,0xc
c0011c8b:	ba 20 13 02 c0       	mov    edx,0xc0021320
c0011c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c94:	89 10                	mov    DWORD PTR [eax],edx
c0011c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c9a:	83 ec 0c             	sub    esp,0xc
c0011c9d:	50                   	push   eax
c0011c9e:	e8 33 e6 ff ff       	call   c00102d6 <Device::~Device()>
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	90                   	nop
c0011ca7:	83 c4 0c             	add    esp,0xc
c0011caa:	c3                   	ret    
c0011cab:	90                   	nop

c0011cac <LogicalDisk::~LogicalDisk()>:
c0011cac:	83 ec 0c             	sub    esp,0xc
c0011caf:	83 ec 0c             	sub    esp,0xc
c0011cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cb6:	e8 cd ff ff ff       	call   c0011c88 <LogicalDisk::~LogicalDisk()>
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	83 ec 08             	sub    esp,0x8
c0011cc1:	68 74 01 00 00       	push   0x174
c0011cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cca:	e8 7a d2 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0011ccf:	83 c4 10             	add    esp,0x10
c0011cd2:	83 c4 0c             	add    esp,0xc
c0011cd5:	c3                   	ret    

c0011cd6 <LogicalDisk::open(int, int, void*)>:
c0011cd6:	83 ec 18             	sub    esp,0x18
c0011cd9:	68 9c 12 02 c0       	push   0xc002129c
c0011cde:	e8 db 2f 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0011ce3:	83 c8 ff             	or     eax,0xffffffff
c0011ce6:	83 c4 1c             	add    esp,0x1c
c0011ce9:	c3                   	ret    

c0011cea <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011cea:	53                   	push   ebx
c0011ceb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cf7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011cfd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011d03:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011d09:	77 10                	ja     c0011d1b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011d0b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011d11:	89 d3                	mov    ebx,edx
c0011d13:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011d19:	72 05                	jb     c0011d20 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011d1b:	83 c8 ff             	or     eax,0xffffffff
c0011d1e:	89 c2                	mov    edx,eax
c0011d20:	5b                   	pop    ebx
c0011d21:	c3                   	ret    

c0011d22 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011d22:	56                   	push   esi
c0011d23:	83 c8 ff             	or     eax,0xffffffff
c0011d26:	53                   	push   ebx
c0011d27:	89 c2                	mov    edx,eax
c0011d29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011d2d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011d31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011d35:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d3b:	77 27                	ja     c0011d64 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d3d:	89 d8                	mov    eax,ebx
c0011d3f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011d45:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d50:	89 c2                	mov    edx,eax
c0011d52:	73 10                	jae    c0011d64 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d54:	89 c8                	mov    eax,ecx
c0011d56:	89 da                	mov    edx,ebx
c0011d58:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d5e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d64:	5b                   	pop    ebx
c0011d65:	5e                   	pop    esi
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d68:	83 ec 1c             	sub    esp,0x1c
c0011d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d8e:	83 ec 08             	sub    esp,0x8
c0011d91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d95:	50                   	push   eax
c0011d96:	e8 89 e8 ff ff       	call   c0010624 <Device::Device(char const*)>
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	ba 20 13 02 c0       	mov    edx,0xc0021320
c0011da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011da7:	89 10                	mov    DWORD PTR [eax],edx
c0011da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dad:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011dbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dc3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011dcd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011dd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dd9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011ddf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011de5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011de9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011dec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011df0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011df6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e04:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011e0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e0e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011e18:	90                   	nop
c0011e19:	83 c4 1c             	add    esp,0x1c
c0011e1c:	c3                   	ret    
c0011e1d:	90                   	nop

c0011e1e <LogicalDisk::assignDriveLetter()>:
c0011e1e:	55                   	push   ebp
c0011e1f:	57                   	push   edi
c0011e20:	56                   	push   esi
c0011e21:	53                   	push   ebx
c0011e22:	83 ec 14             	sub    esp,0x14
c0011e25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e29:	8b 3d 80 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d80
c0011e2f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011e35:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011e39:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011e3f:	8b 3d 84 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d84
c0011e45:	3c 01                	cmp    al,0x1
c0011e47:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e4f:	19 c0                	sbb    eax,eax
c0011e51:	83 e0 02             	and    eax,0x2
c0011e54:	83 c0 41             	add    eax,0x41
c0011e57:	0f be e8             	movsx  ebp,al
c0011e5a:	3c 43                	cmp    al,0x43
c0011e5c:	75 10                	jne    c0011e6e <LogicalDisk::assignDriveLetter()+0x50>
c0011e5e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e65:	75 5d                	jne    c0011ec4 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e67:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e6c:	75 56                	jne    c0011ec4 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e6e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e71:	ba 01 00 00 00       	mov    edx,0x1
c0011e76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011e7a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011e7e:	d3 e2                	shl    edx,cl
c0011e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e84:	89 d7                	mov    edi,edx
c0011e86:	89 d6                	mov    esi,edx
c0011e88:	c1 ff 1f             	sar    edi,0x1f
c0011e8b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e8f:	21 f9                	and    ecx,edi
c0011e91:	09 d1                	or     ecx,edx
c0011e93:	75 2f                	jne    c0011ec4 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011e99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e9d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011ea3:	09 f2                	or     edx,esi
c0011ea5:	89 15 80 3d 02 c0    	mov    DWORD PTR ds:0xc0023d80,edx
c0011eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eaf:	09 fa                	or     edx,edi
c0011eb1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011eb5:	89 15 84 3d 02 c0    	mov    DWORD PTR ds:0xc0023d84,edx
c0011ebb:	89 1c bd a0 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc260],ebx
c0011ec2:	eb 08                	jmp    c0011ecc <LogicalDisk::assignDriveLetter()+0xae>
c0011ec4:	45                   	inc    ebp
c0011ec5:	40                   	inc    eax
c0011ec6:	3c 5b                	cmp    al,0x5b
c0011ec8:	75 90                	jne    c0011e5a <LogicalDisk::assignDriveLetter()+0x3c>
c0011eca:	31 c0                	xor    eax,eax
c0011ecc:	83 c4 14             	add    esp,0x14
c0011ecf:	5b                   	pop    ebx
c0011ed0:	5e                   	pop    esi
c0011ed1:	5f                   	pop    edi
c0011ed2:	5d                   	pop    ebp
c0011ed3:	c3                   	ret    

c0011ed4 <LogicalDisk::mount()>:
c0011ed4:	56                   	push   esi
c0011ed5:	53                   	push   ebx
c0011ed6:	51                   	push   ecx
c0011ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011edb:	8b 1d 08 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023908
c0011ee1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011eeb:	85 db                	test   ebx,ebx
c0011eed:	74 50                	je     c0011f3f <LogicalDisk::mount()+0x6b>
c0011eef:	e8 f1 5c 00 00       	call   c0017be5 <getIRQNestingLevel()>
c0011ef4:	52                   	push   edx
c0011ef5:	52                   	push   edx
c0011ef6:	50                   	push   eax
c0011ef7:	68 c0 12 02 c0       	push   0xc00212c0
c0011efc:	e8 28 d1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0011f01:	83 c4 0c             	add    esp,0xc
c0011f04:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011f0b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f0d:	83 e8 41             	sub    eax,0x41
c0011f10:	50                   	push   eax
c0011f11:	56                   	push   esi
c0011f12:	53                   	push   ebx
c0011f13:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f16:	83 c4 10             	add    esp,0x10
c0011f19:	84 c0                	test   al,al
c0011f1b:	74 08                	je     c0011f25 <LogicalDisk::mount()+0x51>
c0011f1d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011f23:	eb 1c                	jmp    c0011f41 <LogicalDisk::mount()+0x6d>
c0011f25:	e8 bb 5c 00 00       	call   c0017be5 <getIRQNestingLevel()>
c0011f2a:	51                   	push   ecx
c0011f2b:	51                   	push   ecx
c0011f2c:	50                   	push   eax
c0011f2d:	68 db 12 02 c0       	push   0xc00212db
c0011f32:	e8 f2 d0 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0011f37:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011f3a:	83 c4 10             	add    esp,0x10
c0011f3d:	eb ac                	jmp    c0011eeb <LogicalDisk::mount()+0x17>
c0011f3f:	31 c0                	xor    eax,eax
c0011f41:	5a                   	pop    edx
c0011f42:	5b                   	pop    ebx
c0011f43:	5e                   	pop    esi
c0011f44:	c3                   	ret    
c0011f45:	90                   	nop

c0011f46 <LogicalDisk::unmount()>:
c0011f46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f4a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f54:	c3                   	ret    
c0011f55:	90                   	nop

c0011f56 <LogicalDisk::unassignDriveLetter()>:
c0011f56:	57                   	push   edi
c0011f57:	56                   	push   esi
c0011f58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f5c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f63:	84 c9                	test   cl,cl
c0011f65:	75 0f                	jne    c0011f76 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f67:	c7 44 24 0c f6 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc00212f6
c0011f6f:	5e                   	pop    esi
c0011f70:	5f                   	pop    edi
c0011f71:	e9 48 2d 00 00       	jmp    c0014cbe <Krnl::panic(char const*)>
c0011f76:	83 e9 41             	sub    ecx,0x41
c0011f79:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011f80:	b8 01 00 00 00       	mov    eax,0x1
c0011f85:	c7 04 8d a0 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc260],0x0
c0011f90:	d3 e0                	shl    eax,cl
c0011f92:	89 c7                	mov    edi,eax
c0011f94:	f7 d0                	not    eax
c0011f96:	c1 ff 1f             	sar    edi,0x1f
c0011f99:	21 05 80 3d 02 c0    	and    DWORD PTR ds:0xc0023d80,eax
c0011f9f:	89 fe                	mov    esi,edi
c0011fa1:	f7 d6                	not    esi
c0011fa3:	21 35 84 3d 02 c0    	and    DWORD PTR ds:0xc0023d84,esi
c0011fa9:	5e                   	pop    esi
c0011faa:	5f                   	pop    edi
c0011fab:	c3                   	ret    

c0011fac <LogicalDisk::read(unsigned long long, int, void*)>:
c0011fac:	57                   	push   edi
c0011fad:	56                   	push   esi
c0011fae:	53                   	push   ebx
c0011faf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fb7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fbf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011fc5:	77 41                	ja     c0012008 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011fc7:	99                   	cdq    
c0011fc8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011fce:	01 c8                	add    eax,ecx
c0011fd0:	11 da                	adc    edx,ebx
c0011fd2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011fd8:	19 d7                	sbb    edi,edx
c0011fda:	72 33                	jb     c001200f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011fdc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011fe2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011fe8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fec:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011ff0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011ff6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011ffc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012000:	5b                   	pop    ebx
c0012001:	5e                   	pop    esi
c0012002:	5f                   	pop    edi
c0012003:	e9 9a 09 00 00       	jmp    c00129a2 <VCache::read(unsigned long long, int, void*)>
c0012008:	b8 05 00 00 00       	mov    eax,0x5
c001200d:	eb 05                	jmp    c0012014 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001200f:	b8 07 00 00 00       	mov    eax,0x7
c0012014:	5b                   	pop    ebx
c0012015:	5e                   	pop    esi
c0012016:	5f                   	pop    edi
c0012017:	c3                   	ret    

c0012018 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012018:	57                   	push   edi
c0012019:	56                   	push   esi
c001201a:	53                   	push   ebx
c001201b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001201f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012023:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001202b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012031:	77 41                	ja     c0012074 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012033:	99                   	cdq    
c0012034:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001203a:	01 c8                	add    eax,ecx
c001203c:	11 da                	adc    edx,ebx
c001203e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012044:	19 d7                	sbb    edi,edx
c0012046:	72 33                	jb     c001207b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012048:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001204e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012054:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012058:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001205c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012062:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001206c:	5b                   	pop    ebx
c001206d:	5e                   	pop    esi
c001206e:	5f                   	pop    edi
c001206f:	e9 4a 08 00 00       	jmp    c00128be <VCache::write(unsigned long long, int, void*)>
c0012074:	b8 05 00 00 00       	mov    eax,0x5
c0012079:	eb 05                	jmp    c0012080 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001207b:	b8 07 00 00 00       	mov    eax,0x7
c0012080:	5b                   	pop    ebx
c0012081:	5e                   	pop    esi
c0012082:	5f                   	pop    edi
c0012083:	c3                   	ret    

c0012084 <Mouse::Mouse(char const*)>:
c0012084:	83 ec 0c             	sub    esp,0xc
c0012087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001208b:	83 ec 08             	sub    esp,0x8
c001208e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012092:	50                   	push   eax
c0012093:	e8 8c e5 ff ff       	call   c0010624 <Device::Device(char const*)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c00120a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120a4:	89 10                	mov    DWORD PTR [eax],edx
c00120a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120aa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00120b4:	90                   	nop
c00120b5:	83 c4 0c             	add    esp,0xc
c00120b8:	c3                   	ret    
c00120b9:	90                   	nop

c00120ba <Mouse::~Mouse()>:
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c00120c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120c6:	89 10                	mov    DWORD PTR [eax],edx
c00120c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120cc:	83 ec 0c             	sub    esp,0xc
c00120cf:	50                   	push   eax
c00120d0:	e8 01 e2 ff ff       	call   c00102d6 <Device::~Device()>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	90                   	nop
c00120d9:	83 c4 0c             	add    esp,0xc
c00120dc:	c3                   	ret    
c00120dd:	90                   	nop

c00120de <Mouse::~Mouse()>:
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	83 ec 0c             	sub    esp,0xc
c00120e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120e8:	e8 cd ff ff ff       	call   c00120ba <Mouse::~Mouse()>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	83 ec 08             	sub    esp,0x8
c00120f3:	68 58 01 00 00       	push   0x158
c00120f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120fc:	e8 48 ce ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 0c             	add    esp,0xc
c0012107:	c3                   	ret    

c0012108 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012108:	55                   	push   ebp
c0012109:	57                   	push   edi
c001210a:	56                   	push   esi
c001210b:	53                   	push   ebx
c001210c:	81 ec 28 01 00 00    	sub    esp,0x128
c0012112:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012119:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012120:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012127:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001212e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012132:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012136:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001213d:	e8 d4 e5 ff ff       	call   c0010716 <Device::getName()>
c0012142:	5a                   	pop    edx
c0012143:	59                   	pop    ecx
c0012144:	50                   	push   eax
c0012145:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012149:	55                   	push   ebp
c001214a:	e8 58 e5 fe ff       	call   c00006a7 <strcpy>
c001214f:	5b                   	pop    ebx
c0012150:	58                   	pop    eax
c0012151:	68 70 13 02 c0       	push   0xc0021370
c0012156:	55                   	push   ebp
c0012157:	e8 0f e6 fe ff       	call   c000076b <strcat>
c001215c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012163:	e8 d2 cd ff ff       	call   c000ef3a <operator new(unsigned long)>
c0012168:	83 c4 0c             	add    esp,0xc
c001216b:	89 c3                	mov    ebx,eax
c001216d:	57                   	push   edi
c001216e:	56                   	push   esi
c001216f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012173:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012177:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001217e:	55                   	push   ebp
c001217f:	50                   	push   eax
c0012180:	e8 e3 fb ff ff       	call   c0011d68 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012185:	83 c4 14             	add    esp,0x14
c0012188:	53                   	push   ebx
c0012189:	e8 90 fc ff ff       	call   c0011e1e <LogicalDisk::assignDriveLetter()>
c001218e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012191:	e8 3e fd ff ff       	call   c0011ed4 <LogicalDisk::mount()>
c0012196:	58                   	pop    eax
c0012197:	5a                   	pop    edx
c0012198:	53                   	push   ebx
c0012199:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00121a0:	e8 8f e2 ff ff       	call   c0010434 <Device::addChild(Device*)>
c00121a5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121ab:	5b                   	pop    ebx
c00121ac:	5e                   	pop    esi
c00121ad:	5f                   	pop    edi
c00121ae:	5d                   	pop    ebp
c00121af:	c3                   	ret    

c00121b0 <createPartitionsForDisk(PhysicalDisk*)>:
c00121b0:	55                   	push   ebp
c00121b1:	57                   	push   edi
c00121b2:	56                   	push   esi
c00121b3:	53                   	push   ebx
c00121b4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121ba:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00121c7:	3d 00 02 00 00       	cmp    eax,0x200
c00121cc:	74 27                	je     c00121f5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00121ce:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00121d4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00121da:	83 ec 10             	sub    esp,0x10
c00121dd:	0f a4 f7 0a          	shld   edi,esi,0xa
c00121e1:	99                   	cdq    
c00121e2:	c1 e6 0a             	shl    esi,0xa
c00121e5:	52                   	push   edx
c00121e6:	89 fd                	mov    ebp,edi
c00121e8:	50                   	push   eax
c00121e9:	55                   	push   ebp
c00121ea:	56                   	push   esi
c00121eb:	e8 ac c5 00 00       	call   c001e79c <__udivdi3>
c00121f0:	e9 b1 00 00 00       	jmp    c00122a6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121f5:	83 ec 0c             	sub    esp,0xc
c00121f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121fa:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00121fe:	56                   	push   esi
c00121ff:	6a 01                	push   0x1
c0012201:	6a 00                	push   0x0
c0012203:	6a 00                	push   0x0
c0012205:	53                   	push   ebx
c0012206:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012209:	83 c4 20             	add    esp,0x20
c001220c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012214:	75 0a                	jne    c0012220 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012216:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001221e:	74 2c                	je     c001224c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012220:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012226:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001222c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012232:	83 ec 10             	sub    esp,0x10
c0012235:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012239:	89 f7                	mov    edi,esi
c001223b:	c1 e0 0a             	shl    eax,0xa
c001223e:	c1 ff 1f             	sar    edi,0x1f
c0012241:	57                   	push   edi
c0012242:	56                   	push   esi
c0012243:	52                   	push   edx
c0012244:	50                   	push   eax
c0012245:	e8 52 c5 00 00       	call   c001e79c <__udivdi3>
c001224a:	eb 5a                	jmp    c00122a6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001224c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012253:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001225a:	83 e1 7f             	and    ecx,0x7f
c001225d:	83 e0 7f             	and    eax,0x7f
c0012260:	01 c1                	add    ecx,eax
c0012262:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012269:	83 e0 7f             	and    eax,0x7f
c001226c:	01 c1                	add    ecx,eax
c001226e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012275:	83 e0 7f             	and    eax,0x7f
c0012278:	00 c1                	add    cl,al
c001227a:	74 41                	je     c00122bd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001227c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012282:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012288:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001228e:	83 ec 10             	sub    esp,0x10
c0012291:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012295:	89 f7                	mov    edi,esi
c0012297:	c1 e0 0a             	shl    eax,0xa
c001229a:	c1 ff 1f             	sar    edi,0x1f
c001229d:	57                   	push   edi
c001229e:	56                   	push   esi
c001229f:	52                   	push   edx
c00122a0:	50                   	push   eax
c00122a1:	e8 f6 c4 00 00       	call   c001e79c <__udivdi3>
c00122a6:	83 c4 14             	add    esp,0x14
c00122a9:	52                   	push   edx
c00122aa:	50                   	push   eax
c00122ab:	6a 00                	push   0x0
c00122ad:	6a 00                	push   0x0
c00122af:	53                   	push   ebx
c00122b0:	e8 53 fe ff ff       	call   c0012108 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00122b5:	83 c4 20             	add    esp,0x20
c00122b8:	e9 79 01 00 00       	jmp    c0012436 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00122bd:	89 f0                	mov    eax,esi
c00122bf:	31 f6                	xor    esi,esi
c00122c1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00122c8:	75 02                	jne    c00122cc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00122ca:	89 f1                	mov    ecx,esi
c00122cc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00122d3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00122da:	c1 e2 08             	shl    edx,0x8
c00122dd:	c1 e7 10             	shl    edi,0x10
c00122e0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00122e8:	09 fa                	or     edx,edi
c00122ea:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00122f2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00122f9:	83 c0 10             	add    eax,0x10
c00122fc:	09 fa                	or     edx,edi
c00122fe:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012305:	c1 e7 18             	shl    edi,0x18
c0012308:	09 fa                	or     edx,edi
c001230a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012311:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012315:	c1 e7 10             	shl    edi,0x10
c0012318:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001231f:	c1 e2 08             	shl    edx,0x8
c0012322:	09 fa                	or     edx,edi
c0012324:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001232b:	09 fa                	or     edx,edi
c001232d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012334:	c1 e7 18             	shl    edi,0x18
c0012337:	09 fa                	or     edx,edi
c0012339:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001233d:	46                   	inc    esi
c001233e:	83 fe 04             	cmp    esi,0x4
c0012341:	0f 85 7a ff ff ff    	jne    c00122c1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234b:	83 f0 01             	xor    eax,0x1
c001234e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012352:	75 57                	jne    c00123ab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012358:	83 f0 01             	xor    eax,0x1
c001235b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001235f:	75 4a                	jne    c00123ab <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012361:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012365:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001236d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012375:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001237b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012381:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012387:	0f a4 c2 0a          	shld   edx,eax,0xa
c001238b:	89 f7                	mov    edi,esi
c001238d:	c1 e0 0a             	shl    eax,0xa
c0012390:	c1 ff 1f             	sar    edi,0x1f
c0012393:	57                   	push   edi
c0012394:	56                   	push   esi
c0012395:	52                   	push   edx
c0012396:	50                   	push   eax
c0012397:	e8 00 c4 00 00       	call   c001e79c <__udivdi3>
c001239c:	83 c4 10             	add    esp,0x10
c001239f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123a7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00123ab:	84 c9                	test   cl,cl
c00123ad:	74 53                	je     c0012402 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00123af:	0f b6 c9             	movzx  ecx,cl
c00123b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123ba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123be:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00123c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123ca:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00123ce:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00123d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00123da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123e2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00123e6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00123ea:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00123ee:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00123f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123f6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123fa:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00123fe:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012402:	31 ed                	xor    ebp,ebp
c0012404:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012408:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001240c:	89 f8                	mov    eax,edi
c001240e:	09 f0                	or     eax,esi
c0012410:	74 1e                	je     c0012430 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012412:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012416:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001241a:	89 d1                	mov    ecx,edx
c001241c:	09 c1                	or     ecx,eax
c001241e:	74 10                	je     c0012430 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012420:	83 ec 0c             	sub    esp,0xc
c0012423:	57                   	push   edi
c0012424:	56                   	push   esi
c0012425:	52                   	push   edx
c0012426:	50                   	push   eax
c0012427:	53                   	push   ebx
c0012428:	e8 db fc ff ff       	call   c0012108 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001242d:	83 c4 20             	add    esp,0x20
c0012430:	45                   	inc    ebp
c0012431:	83 fd 04             	cmp    ebp,0x4
c0012434:	75 ce                	jne    c0012404 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012436:	81 c4 5c 02 00 00    	add    esp,0x25c
c001243c:	5b                   	pop    ebx
c001243d:	5e                   	pop    esi
c001243e:	5f                   	pop    edi
c001243f:	5d                   	pop    ebp
c0012440:	c3                   	ret    
c0012441:	90                   	nop

c0012442 <Timer::Timer(char const*)>:
c0012442:	83 ec 0c             	sub    esp,0xc
c0012445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012449:	83 ec 08             	sub    esp,0x8
c001244c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012450:	50                   	push   eax
c0012451:	e8 ce e1 ff ff       	call   c0010624 <Device::Device(char const*)>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	ba 84 13 02 c0       	mov    edx,0xc0021384
c001245e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012462:	89 10                	mov    DWORD PTR [eax],edx
c0012464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012468:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012472:	90                   	nop
c0012473:	83 c4 0c             	add    esp,0xc
c0012476:	c3                   	ret    
c0012477:	90                   	nop

c0012478 <Timer::~Timer()>:
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	ba 84 13 02 c0       	mov    edx,0xc0021384
c0012480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012484:	89 10                	mov    DWORD PTR [eax],edx
c0012486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248a:	83 ec 0c             	sub    esp,0xc
c001248d:	50                   	push   eax
c001248e:	e8 43 de ff ff       	call   c00102d6 <Device::~Device()>
c0012493:	83 c4 10             	add    esp,0x10
c0012496:	90                   	nop
c0012497:	83 c4 0c             	add    esp,0xc
c001249a:	c3                   	ret    
c001249b:	90                   	nop

c001249c <Timer::~Timer()>:
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124a6:	e8 cd ff ff ff       	call   c0012478 <Timer::~Timer()>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	83 ec 08             	sub    esp,0x8
c00124b1:	68 5c 01 00 00       	push   0x15c
c00124b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ba:	e8 8a ca ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	83 c4 0c             	add    esp,0xc
c00124c5:	c3                   	ret    

c00124c6 <Timer::read()>:
c00124c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00124d0:	c3                   	ret    

c00124d1 <timerHandler(unsigned long long)>:
c00124d1:	55                   	push   ebp
c00124d2:	57                   	push   edi
c00124d3:	56                   	push   esi
c00124d4:	53                   	push   ebx
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00124dc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00124e0:	01 35 10 3e 02 c0    	add    DWORD PTR ds:0xc0023e10,esi
c00124e6:	11 3d 14 3e 02 c0    	adc    DWORD PTR ds:0xc0023e14,edi
c00124ec:	80 3d ad 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237ad,0x0
c00124f3:	0f 84 07 01 00 00    	je     c0012600 <timerHandler(unsigned long long)+0x12f>
c00124f9:	e8 23 57 00 00       	call   c0017c21 <lockStuff()>
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	68 dc 4b 02 c0       	push   0xc0024bdc
c0012506:	e8 65 c9 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001250b:	c7 04 24 dc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bdc
c0012512:	89 c3                	mov    ebx,eax
c0012514:	e8 5f c9 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	84 c0                	test   al,al
c001251e:	74 60                	je     c0012580 <timerHandler(unsigned long long)+0xaf>
c0012520:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012526:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012529:	85 c0                	test   eax,eax
c001252b:	0f 85 91 00 00 00    	jne    c00125c2 <timerHandler(unsigned long long)+0xf1>
c0012531:	e9 be 00 00 00       	jmp    c00125f4 <timerHandler(unsigned long long)+0x123>
c0012536:	83 ec 0c             	sub    esp,0xc
c0012539:	55                   	push   ebp
c001253a:	e8 cb 5e 00 00       	call   c001840a <unblockTask(ThreadControlBlock*)>
c001253f:	83 c4 10             	add    esp,0x10
c0012542:	39 eb                	cmp    ebx,ebp
c0012544:	75 12                	jne    c0012558 <timerHandler(unsigned long long)+0x87>
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	68 dc 4b 02 c0       	push   0xc0024bdc
c001254e:	e8 1d c9 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012553:	89 c3                	mov    ebx,eax
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	83 ec 0c             	sub    esp,0xc
c001255b:	68 dc 4b 02 c0       	push   0xc0024bdc
c0012560:	e8 13 c9 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012565:	83 c4 10             	add    esp,0x10
c0012568:	84 c0                	test   al,al
c001256a:	75 b4                	jne    c0012520 <timerHandler(unsigned long long)+0x4f>
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	68 dc 4b 02 c0       	push   0xc0024bdc
c0012574:	e8 f7 c8 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	39 d8                	cmp    eax,ebx
c001257e:	74 a0                	je     c0012520 <timerHandler(unsigned long long)+0x4f>
c0012580:	83 ec 0c             	sub    esp,0xc
c0012583:	68 dc 4b 02 c0       	push   0xc0024bdc
c0012588:	e8 e3 c8 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001258d:	c7 04 24 dc 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bdc
c0012594:	89 c5                	mov    ebp,eax
c0012596:	e8 f9 c8 00 00       	call   c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001259b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001259e:	83 c4 10             	add    esp,0x10
c00125a1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00125a4:	39 15 10 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e10,edx
c00125aa:	a1 14 3e 02 c0       	mov    eax,ds:0xc0023e14
c00125af:	19 c8                	sbb    eax,ecx
c00125b1:	73 83                	jae    c0012536 <timerHandler(unsigned long long)+0x65>
c00125b3:	50                   	push   eax
c00125b4:	50                   	push   eax
c00125b5:	55                   	push   ebp
c00125b6:	68 dc 4b 02 c0       	push   0xc0024bdc
c00125bb:	e8 82 c9 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00125c0:	eb 93                	jmp    c0012555 <timerHandler(unsigned long long)+0x84>
c00125c2:	80 3d ac 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237ac,0x0
c00125c9:	74 29                	je     c00125f4 <timerHandler(unsigned long long)+0x123>
c00125cb:	39 c6                	cmp    esi,eax
c00125cd:	bb 00 00 00 00       	mov    ebx,0x0
c00125d2:	19 df                	sbb    edi,ebx
c00125d4:	72 19                	jb     c00125ef <timerHandler(unsigned long long)+0x11e>
c00125d6:	e8 1f 56 00 00       	call   c0017bfa <lockScheduler()>
c00125db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00125e3:	e8 46 59 00 00       	call   c0017f2e <schedule()>
c00125e8:	e8 0f 56 00 00       	call   c0017bfc <unlockScheduler()>
c00125ed:	eb 05                	jmp    c00125f4 <timerHandler(unsigned long long)+0x123>
c00125ef:	29 f0                	sub    eax,esi
c00125f1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00125f4:	83 c4 0c             	add    esp,0xc
c00125f7:	5b                   	pop    ebx
c00125f8:	5e                   	pop    esi
c00125f9:	5f                   	pop    edi
c00125fa:	5d                   	pop    ebp
c00125fb:	e9 b3 59 00 00       	jmp    c0017fb3 <unlockStuff()>
c0012600:	83 c4 0c             	add    esp,0xc
c0012603:	5b                   	pop    ebx
c0012604:	5e                   	pop    esi
c0012605:	5f                   	pop    edi
c0012606:	5d                   	pop    ebp
c0012607:	c3                   	ret    

c0012608 <setupTimer(int)>:
c0012608:	57                   	push   edi
c0012609:	56                   	push   esi
c001260a:	53                   	push   ebx
c001260b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001260f:	e8 a1 19 00 00       	call   c0013fb5 <getCPUNumber()>
c0012614:	85 c0                	test   eax,eax
c0012616:	74 32                	je     c001264a <setupTimer(int)+0x42>
c0012618:	83 ec 0c             	sub    esp,0xc
c001261b:	68 60 01 00 00       	push   0x160
c0012620:	e8 15 c9 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0012625:	89 04 24             	mov    DWORD PTR [esp],eax
c0012628:	89 c3                	mov    ebx,eax
c001262a:	e8 0d bc 00 00       	call   c001e23c <APICTimer::APICTimer()>
c001262f:	6a 00                	push   0x0
c0012631:	6a 00                	push   0x0
c0012633:	56                   	push   esi
c0012634:	53                   	push   ebx
c0012635:	e8 0a bb 00 00       	call   c001e144 <APICTimer::open(int, int, void*)>
c001263a:	83 c4 20             	add    esp,0x20
c001263d:	e8 76 19 00 00       	call   c0013fb8 <thisCPU()>
c0012642:	56                   	push   esi
c0012643:	56                   	push   esi
c0012644:	53                   	push   ebx
c0012645:	e9 96 00 00 00       	jmp    c00126e0 <setupTimer(int)+0xd8>
c001264a:	e8 69 19 00 00       	call   c0013fb8 <thisCPU()>
c001264f:	83 ec 0c             	sub    esp,0xc
c0012652:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012658:	e8 b9 e0 ff ff       	call   c0010716 <Device::getName()>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012663:	0f 85 87 00 00 00    	jne    c00126f0 <setupTimer(int)+0xe8>
c0012669:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001266e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012675:	74 79                	je     c00126f0 <setupTimer(int)+0xe8>
c0012677:	83 ec 0c             	sub    esp,0xc
c001267a:	68 5c 01 00 00       	push   0x15c
c001267f:	e8 b6 c8 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0012684:	89 04 24             	mov    DWORD PTR [esp],eax
c0012687:	89 c3                	mov    ebx,eax
c0012689:	e8 fe bc 00 00       	call   c001e38c <PIT::PIT()>
c001268e:	59                   	pop    ecx
c001268f:	5f                   	pop    edi
c0012690:	53                   	push   ebx
c0012691:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0012697:	e8 98 dd ff ff       	call   c0010434 <Device::addChild(Device*)>
c001269c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001269e:	6a 00                	push   0x0
c00126a0:	6a 00                	push   0x0
c00126a2:	56                   	push   esi
c00126a3:	53                   	push   ebx
c00126a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126a7:	83 c4 14             	add    esp,0x14
c00126aa:	68 60 01 00 00       	push   0x160
c00126af:	e8 86 c8 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00126b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00126b7:	89 c7                	mov    edi,eax
c00126b9:	e8 7e bb 00 00       	call   c001e23c <APICTimer::APICTimer()>
c00126be:	6a 00                	push   0x0
c00126c0:	6a 00                	push   0x0
c00126c2:	56                   	push   esi
c00126c3:	57                   	push   edi
c00126c4:	e8 7b ba 00 00       	call   c001e144 <APICTimer::open(int, int, void*)>
c00126c9:	83 c4 20             	add    esp,0x20
c00126cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126ce:	6a 00                	push   0x0
c00126d0:	6a 00                	push   0x0
c00126d2:	6a 00                	push   0x0
c00126d4:	53                   	push   ebx
c00126d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126d8:	e8 db 18 00 00       	call   c0013fb8 <thisCPU()>
c00126dd:	5a                   	pop    edx
c00126de:	59                   	pop    ecx
c00126df:	57                   	push   edi
c00126e0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00126e6:	e8 49 dd ff ff       	call   c0010434 <Device::addChild(Device*)>
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	eb 33                	jmp    c0012723 <setupTimer(int)+0x11b>
c00126f0:	83 ec 0c             	sub    esp,0xc
c00126f3:	68 5c 01 00 00       	push   0x15c
c00126f8:	e8 3d c8 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00126fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0012700:	89 c3                	mov    ebx,eax
c0012702:	e8 85 bc 00 00       	call   c001e38c <PIT::PIT()>
c0012707:	58                   	pop    eax
c0012708:	5a                   	pop    edx
c0012709:	53                   	push   ebx
c001270a:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0012710:	e8 1f dd ff ff       	call   c0010434 <Device::addChild(Device*)>
c0012715:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012717:	6a 00                	push   0x0
c0012719:	6a 00                	push   0x0
c001271b:	56                   	push   esi
c001271c:	53                   	push   ebx
c001271d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012720:	83 c4 20             	add    esp,0x20
c0012723:	89 d8                	mov    eax,ebx
c0012725:	5b                   	pop    ebx
c0012726:	5e                   	pop    esi
c0012727:	5f                   	pop    edi
c0012728:	c3                   	ret    
c0012729:	90                   	nop

c001272a <VCache::VCache(PhysicalDisk*)>:
c001272a:	53                   	push   ebx
c001272b:	83 ec 08             	sub    esp,0x8
c001272e:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c0012733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012737:	89 10                	mov    DWORD PTR [eax],edx
c0012739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012748:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001274f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012753:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001275a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012765:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001276c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012777:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001277e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012782:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012786:	83 ec 0c             	sub    esp,0xc
c0012789:	6a 10                	push   0x10
c001278b:	e8 aa c7 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	89 c3                	mov    ebx,eax
c0012795:	83 ec 0c             	sub    esp,0xc
c0012798:	53                   	push   ebx
c0012799:	e8 74 55 00 00       	call   c0017d12 <Mutex::Mutex()>
c001279e:	83 c4 10             	add    esp,0x10
c00127a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00127a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00127b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00127be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00127c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127cc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127d3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00127d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00127e3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00127e6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00127e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ed:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127fb:	c1 e0 06             	shl    eax,0x6
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	50                   	push   eax
c0012802:	e8 45 94 ff ff       	call   c000bc4c <malloc>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	89 c2                	mov    edx,eax
c001280c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012810:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012813:	90                   	nop
c0012814:	83 c4 08             	add    esp,0x8
c0012817:	5b                   	pop    ebx
c0012818:	c3                   	ret    
c0012819:	90                   	nop

c001281a <VCache::writeWriteBuffer()>:
c001281a:	53                   	push   ebx
c001281b:	83 ec 14             	sub    esp,0x14
c001281e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012822:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012825:	8b 10                	mov    edx,DWORD PTR [eax]
c0012827:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001282a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001282d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012830:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012833:	50                   	push   eax
c0012834:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012837:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001283e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012845:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012849:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012850:	83 c4 28             	add    esp,0x28
c0012853:	5b                   	pop    ebx
c0012854:	c3                   	ret    
c0012855:	90                   	nop

c0012856 <VCache::~VCache()>:
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c001285e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012862:	89 10                	mov    DWORD PTR [eax],edx
c0012864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012868:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001286b:	84 c0                	test   al,al
c001286d:	74 0f                	je     c001287e <VCache::~VCache()+0x28>
c001286f:	83 ec 0c             	sub    esp,0xc
c0012872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012876:	e8 9f ff ff ff       	call   c001281a <VCache::writeWriteBuffer()>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012882:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012885:	83 ec 0c             	sub    esp,0xc
c0012888:	50                   	push   eax
c0012889:	e8 ce 93 ff ff       	call   c000bc5c <free>
c001288e:	83 c4 10             	add    esp,0x10
c0012891:	90                   	nop
c0012892:	83 c4 0c             	add    esp,0xc
c0012895:	c3                   	ret    

c0012896 <VCache::~VCache()>:
c0012896:	83 ec 0c             	sub    esp,0xc
c0012899:	83 ec 0c             	sub    esp,0xc
c001289c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a0:	e8 b1 ff ff ff       	call   c0012856 <VCache::~VCache()>
c00128a5:	83 c4 10             	add    esp,0x10
c00128a8:	83 ec 08             	sub    esp,0x8
c00128ab:	6a 30                	push   0x30
c00128ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128b1:	e8 93 c6 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	83 c4 0c             	add    esp,0xc
c00128bc:	c3                   	ret    
c00128bd:	90                   	nop

c00128be <VCache::write(unsigned long long, int, void*)>:
c00128be:	55                   	push   ebp
c00128bf:	57                   	push   edi
c00128c0:	56                   	push   esi
c00128c1:	53                   	push   ebx
c00128c2:	83 ec 28             	sub    esp,0x28
c00128c5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00128c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128d1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00128d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00128d8:	e8 09 5a 00 00       	call   c00182e6 <Semaphore::acquire()>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00128e4:	74 66                	je     c001294c <VCache::write(unsigned long long, int, void*)+0x8e>
c00128e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e9:	99                   	cdq    
c00128ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128ee:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00128f1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00128f4:	89 c1                	mov    ecx,eax
c00128f6:	89 d0                	mov    eax,edx
c00128f8:	31 f1                	xor    ecx,esi
c00128fa:	31 f8                	xor    eax,edi
c00128fc:	89 ca                	mov    edx,ecx
c00128fe:	09 c2                	or     edx,eax
c0012900:	75 3e                	jne    c0012940 <VCache::write(unsigned long long, int, void*)+0x82>
c0012902:	83 fd 01             	cmp    ebp,0x1
c0012905:	75 39                	jne    c0012940 <VCache::write(unsigned long long, int, void*)+0x82>
c0012907:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001290a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012910:	51                   	push   ecx
c0012911:	50                   	push   eax
c0012912:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012916:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001291a:	0f af c8             	imul   ecx,eax
c001291d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012920:	51                   	push   ecx
c0012921:	e8 ac dc fe ff       	call   c00005d2 <memcpy>
c0012926:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	40                   	inc    eax
c001292d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012930:	83 f8 40             	cmp    eax,0x40
c0012933:	75 57                	jne    c001298c <VCache::write(unsigned long long, int, void*)+0xce>
c0012935:	83 ec 0c             	sub    esp,0xc
c0012938:	53                   	push   ebx
c0012939:	e8 dc fe ff ff       	call   c001281a <VCache::writeWriteBuffer()>
c001293e:	eb 34                	jmp    c0012974 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012940:	83 ec 0c             	sub    esp,0xc
c0012943:	53                   	push   ebx
c0012944:	e8 d1 fe ff ff       	call   c001281a <VCache::writeWriteBuffer()>
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001294f:	83 fd 3f             	cmp    ebp,0x3f
c0012952:	7f 25                	jg     c0012979 <VCache::write(unsigned long long, int, void*)+0xbb>
c0012954:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012957:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001295a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001295d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012961:	52                   	push   edx
c0012962:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012968:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001296c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001296f:	e8 5e dc fe ff       	call   c00005d2 <memcpy>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	eb 13                	jmp    c001298c <VCache::write(unsigned long long, int, void*)+0xce>
c0012979:	83 ec 0c             	sub    esp,0xc
c001297c:	8b 10                	mov    edx,DWORD PTR [eax]
c001297e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012982:	55                   	push   ebp
c0012983:	57                   	push   edi
c0012984:	56                   	push   esi
c0012985:	50                   	push   eax
c0012986:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012989:	83 c4 20             	add    esp,0x20
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012992:	e8 65 5f 00 00       	call   c00188fc <Semaphore::release()>
c0012997:	83 c4 2c             	add    esp,0x2c
c001299a:	31 c0                	xor    eax,eax
c001299c:	5b                   	pop    ebx
c001299d:	5e                   	pop    esi
c001299e:	5f                   	pop    edi
c001299f:	5d                   	pop    ebp
c00129a0:	c3                   	ret    
c00129a1:	90                   	nop

c00129a2 <VCache::read(unsigned long long, int, void*)>:
c00129a2:	57                   	push   edi
c00129a3:	56                   	push   esi
c00129a4:	53                   	push   ebx
c00129a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00129ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00129b1:	83 ec 0c             	sub    esp,0xc
c00129b4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129b7:	e8 2a 59 00 00       	call   c00182e6 <Semaphore::acquire()>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00129c3:	74 0c                	je     c00129d1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00129c5:	83 ec 0c             	sub    esp,0xc
c00129c8:	53                   	push   ebx
c00129c9:	e8 4c fe ff ff       	call   c001281a <VCache::writeWriteBuffer()>
c00129ce:	83 c4 10             	add    esp,0x10
c00129d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00129d4:	83 ec 0c             	sub    esp,0xc
c00129d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00129d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129e1:	57                   	push   edi
c00129e2:	56                   	push   esi
c00129e3:	50                   	push   eax
c00129e4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129e7:	83 c4 14             	add    esp,0x14
c00129ea:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129ed:	e8 0a 5f 00 00       	call   c00188fc <Semaphore::release()>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	31 c0                	xor    eax,eax
c00129f7:	5b                   	pop    ebx
c00129f8:	5e                   	pop    esi
c00129f9:	5f                   	pop    edi
c00129fa:	c3                   	ret    
c00129fb:	90                   	nop

c00129fc <Video::putrect(int, int, int, int, unsigned int)>:
c00129fc:	55                   	push   ebp
c00129fd:	57                   	push   edi
c00129fe:	56                   	push   esi
c00129ff:	53                   	push   ebx
c0012a00:	83 ec 1c             	sub    esp,0x1c
c0012a03:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012a0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012a13:	01 e8                	add    eax,ebp
c0012a15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a1d:	01 df                	add    edi,ebx
c0012a1f:	39 fb                	cmp    ebx,edi
c0012a21:	7d 1b                	jge    c0012a3e <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012a23:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012a27:	7d 12                	jge    c0012a3b <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012a29:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a2f:	53                   	push   ebx
c0012a30:	55                   	push   ebp
c0012a31:	45                   	inc    ebp
c0012a32:	56                   	push   esi
c0012a33:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012a36:	83 c4 10             	add    esp,0x10
c0012a39:	eb e8                	jmp    c0012a23 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012a3b:	43                   	inc    ebx
c0012a3c:	eb e1                	jmp    c0012a1f <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012a3e:	83 c4 1c             	add    esp,0x1c
c0012a41:	5b                   	pop    ebx
c0012a42:	5e                   	pop    esi
c0012a43:	5f                   	pop    edi
c0012a44:	5d                   	pop    ebp
c0012a45:	c3                   	ret    

c0012a46 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a46:	55                   	push   ebp
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	53                   	push   ebx
c0012a4a:	83 ec 1c             	sub    esp,0x1c
c0012a4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a55:	85 c0                	test   eax,eax
c0012a57:	79 02                	jns    c0012a5b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a59:	31 c0                	xor    eax,eax
c0012a5b:	c1 e0 02             	shl    eax,0x2
c0012a5e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a6a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a6e:	39 d8                	cmp    eax,ebx
c0012a70:	7e 49                	jle    c0012abb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a72:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a78:	7c 41                	jl     c0012abb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a7a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a82:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a86:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a8a:	39 f9                	cmp    ecx,edi
c0012a8c:	7e 22                	jle    c0012ab0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a8e:	83 c5 04             	add    ebp,0x4
c0012a91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a97:	7c 14                	jl     c0012aad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012a99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012a9b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012a9e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012aa2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012aa6:	56                   	push   esi
c0012aa7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012aaa:	83 c4 10             	add    esp,0x10
c0012aad:	47                   	inc    edi
c0012aae:	eb d2                	jmp    c0012a82 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ab4:	43                   	inc    ebx
c0012ab5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012ab9:	eb ab                	jmp    c0012a66 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012abb:	83 c4 1c             	add    esp,0x1c
c0012abe:	5b                   	pop    ebx
c0012abf:	5e                   	pop    esi
c0012ac0:	5f                   	pop    edi
c0012ac1:	5d                   	pop    ebp
c0012ac2:	c3                   	ret    
c0012ac3:	90                   	nop

c0012ac4 <Video::clearScreen(unsigned int)>:
c0012ac4:	57                   	push   edi
c0012ac5:	56                   	push   esi
c0012ac6:	53                   	push   ebx
c0012ac7:	31 db                	xor    ebx,ebx
c0012ac9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012acd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012ad3:	7e 1f                	jle    c0012af4 <Video::clearScreen(unsigned int)+0x30>
c0012ad5:	31 ff                	xor    edi,edi
c0012ad7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012add:	7e 12                	jle    c0012af1 <Video::clearScreen(unsigned int)+0x2d>
c0012adf:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ae5:	53                   	push   ebx
c0012ae6:	57                   	push   edi
c0012ae7:	47                   	inc    edi
c0012ae8:	56                   	push   esi
c0012ae9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	eb e6                	jmp    c0012ad7 <Video::clearScreen(unsigned int)+0x13>
c0012af1:	43                   	inc    ebx
c0012af2:	eb d9                	jmp    c0012acd <Video::clearScreen(unsigned int)+0x9>
c0012af4:	5b                   	pop    ebx
c0012af5:	5e                   	pop    esi
c0012af6:	5f                   	pop    edi
c0012af7:	c3                   	ret    

c0012af8 <Video::putpixel(int, int, unsigned int)>:
c0012af8:	c7 44 24 04 bc 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213bc
c0012b00:	e9 24 c5 ff ff       	jmp    c000f029 <Dbg::kprintf(char const*, ...)>
c0012b05:	90                   	nop

c0012b06 <Video::Video(char const*)>:
c0012b06:	83 ec 0c             	sub    esp,0xc
c0012b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b0d:	83 ec 08             	sub    esp,0x8
c0012b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b14:	50                   	push   eax
c0012b15:	e8 0a db ff ff       	call   c0010624 <Device::Device(char const*)>
c0012b1a:	83 c4 10             	add    esp,0x10
c0012b1d:	ba d4 13 02 c0       	mov    edx,0xc00213d4
c0012b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b26:	89 10                	mov    DWORD PTR [eax],edx
c0012b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012b36:	90                   	nop
c0012b37:	83 c4 0c             	add    esp,0xc
c0012b3a:	c3                   	ret    
c0012b3b:	90                   	nop

c0012b3c <Video::~Video()>:
c0012b3c:	83 ec 0c             	sub    esp,0xc
c0012b3f:	ba d4 13 02 c0       	mov    edx,0xc00213d4
c0012b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b48:	89 10                	mov    DWORD PTR [eax],edx
c0012b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	50                   	push   eax
c0012b52:	e8 7f d7 ff ff       	call   c00102d6 <Device::~Device()>
c0012b57:	83 c4 10             	add    esp,0x10
c0012b5a:	90                   	nop
c0012b5b:	83 c4 0c             	add    esp,0xc
c0012b5e:	c3                   	ret    
c0012b5f:	90                   	nop

c0012b60 <Video::~Video()>:
c0012b60:	83 ec 0c             	sub    esp,0xc
c0012b63:	83 ec 0c             	sub    esp,0xc
c0012b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6a:	e8 cd ff ff ff       	call   c0012b3c <Video::~Video()>
c0012b6f:	83 c4 10             	add    esp,0x10
c0012b72:	83 ec 08             	sub    esp,0x8
c0012b75:	68 64 01 00 00       	push   0x164
c0012b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7e:	e8 c6 c3 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	83 c4 0c             	add    esp,0xc
c0012b89:	c3                   	ret    

c0012b8a <Video::isMonochrome()>:
c0012b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b94:	c3                   	ret    
c0012b95:	90                   	nop

c0012b96 <Video::getWidth()>:
c0012b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012ba0:	c3                   	ret    
c0012ba1:	90                   	nop

c0012ba2 <Video::getHeight()>:
c0012ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012bac:	c3                   	ret    
c0012bad:	90                   	nop

c0012bae <Video::drawCursor(int, int, unsigned char*, int)>:
c0012bae:	55                   	push   ebp
c0012baf:	57                   	push   edi
c0012bb0:	56                   	push   esi
c0012bb1:	53                   	push   ebx
c0012bb2:	83 ec 2c             	sub    esp,0x2c
c0012bb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012bb9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012bbd:	83 f8 01             	cmp    eax,0x1
c0012bc0:	19 c9                	sbb    ecx,ecx
c0012bc2:	31 db                	xor    ebx,ebx
c0012bc4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012bc8:	89 cd                	mov    ebp,ecx
c0012bca:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012bd2:	f7 d5                	not    ebp
c0012bd4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012bda:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012bde:	01 d8                	add    eax,ebx
c0012be0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012be4:	56                   	push   esi
c0012be5:	e8 b8 ff ff ff       	call   c0012ba2 <Video::getHeight()>
c0012bea:	59                   	pop    ecx
c0012beb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bef:	7e 70                	jle    c0012c61 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012bf1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bf5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012bf9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012bfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c00:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c04:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012c0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c0f:	89 f8                	mov    eax,edi
c0012c11:	83 c0 20             	add    eax,0x20
c0012c14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c18:	56                   	push   esi
c0012c19:	e8 78 ff ff ff       	call   c0012b96 <Video::getWidth()>
c0012c1e:	5a                   	pop    edx
c0012c1f:	39 c7                	cmp    edi,eax
c0012c21:	7d 34                	jge    c0012c57 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012c23:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012c28:	74 05                	je     c0012c2f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c2c:	55                   	push   ebp
c0012c2d:	eb 0d                	jmp    c0012c3c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012c2f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012c34:	74 12                	je     c0012c48 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012c36:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c40:	57                   	push   edi
c0012c41:	56                   	push   esi
c0012c42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c4c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c50:	47                   	inc    edi
c0012c51:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c55:	75 c1                	jne    c0012c18 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c57:	43                   	inc    ebx
c0012c58:	83 fb 20             	cmp    ebx,0x20
c0012c5b:	0f 85 79 ff ff ff    	jne    c0012bda <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c61:	83 c4 2c             	add    esp,0x2c
c0012c64:	5b                   	pop    ebx
c0012c65:	5e                   	pop    esi
c0012c66:	5f                   	pop    edi
c0012c67:	5d                   	pop    ebp
c0012c68:	c3                   	ret    
c0012c69:	90                   	nop

c0012c6a <ACPI::close(int, int, void*)>:
c0012c6a:	83 ec 1c             	sub    esp,0x1c
c0012c6d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012c75:	74 0a                	je     c0012c81 <ACPI::close(int, int, void*)+0x17>
c0012c77:	b8 00 00 00 00       	mov    eax,0x0
c0012c7c:	e9 9a 00 00 00       	jmp    c0012d1b <ACPI::close(int, int, void*)+0xb1>
c0012c81:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c86:	75 37                	jne    c0012cbf <ACPI::close(int, int, void*)+0x55>
c0012c88:	83 ec 0c             	sub    esp,0xc
c0012c8b:	68 0c 14 02 c0       	push   0xc002140c
c0012c90:	e8 94 c3 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0012c9d:	85 c0                	test   eax,eax
c0012c9f:	74 07                	je     c0012ca8 <ACPI::close(int, int, void*)+0x3e>
c0012ca1:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0012ca6:	ff d0                	call   eax
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	68 e0 14 02 c0       	push   0xc00214e0
c0012cb0:	e8 09 20 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012cbd:	eb 5c                	jmp    c0012d1b <ACPI::close(int, int, void*)+0xb1>
c0012cbf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012cc4:	75 50                	jne    c0012d16 <ACPI::close(int, int, void*)+0xac>
c0012cc6:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0012ccb:	85 c0                	test   eax,eax
c0012ccd:	74 07                	je     c0012cd6 <ACPI::close(int, int, void*)+0x6c>
c0012ccf:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0012cd4:	ff d0                	call   eax
c0012cd6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012cdb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012ce0:	83 e0 02             	and    eax,0x2
c0012ce3:	74 1c                	je     c0012d01 <ACPI::close(int, int, void*)+0x97>
c0012ce5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cf0:	89 c2                	mov    edx,eax
c0012cf2:	ec                   	in     al,dx
c0012cf3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cf7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cfb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012cff:	eb da                	jmp    c0012cdb <ACPI::close(int, int, void*)+0x71>
c0012d01:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012d08:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012d0d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012d11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d15:	ee                   	out    dx,al
c0012d16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012d1b:	83 c4 1c             	add    esp,0x1c
c0012d1e:	c3                   	ret    

c0012d1f <findRSDP()>:
c0012d1f:	83 ec 1c             	sub    esp,0x1c
c0012d22:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0012d27:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d2d:	83 e0 04             	and    eax,0x4
c0012d30:	84 c0                	test   al,al
c0012d32:	75 07                	jne    c0012d3b <findRSDP()+0x1c>
c0012d34:	b8 00 00 00 00       	mov    eax,0x0
c0012d39:	eb 6a                	jmp    c0012da5 <findRSDP()+0x86>
c0012d3b:	a1 f0 37 02 c0       	mov    eax,ds:0xc00237f0
c0012d40:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012d45:	7f 1b                	jg     c0012d62 <findRSDP()+0x43>
c0012d47:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0012d4c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d52:	83 e2 fb             	and    edx,0xfffffffb
c0012d55:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d5b:	b8 00 00 00 00       	mov    eax,0x0
c0012d60:	eb 43                	jmp    c0012da5 <findRSDP()+0x86>
c0012d62:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d6a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d72:	77 2c                	ja     c0012da0 <findRSDP()+0x81>
c0012d74:	83 ec 04             	sub    esp,0x4
c0012d77:	6a 08                	push   0x8
c0012d79:	68 19 14 02 c0       	push   0xc0021419
c0012d7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d82:	e8 e8 d7 fe ff       	call   c000056f <memcmp>
c0012d87:	83 c4 10             	add    esp,0x10
c0012d8a:	85 c0                	test   eax,eax
c0012d8c:	0f 94 c0             	sete   al
c0012d8f:	84 c0                	test   al,al
c0012d91:	74 06                	je     c0012d99 <findRSDP()+0x7a>
c0012d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d97:	eb 0c                	jmp    c0012da5 <findRSDP()+0x86>
c0012d99:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012d9e:	eb ca                	jmp    c0012d6a <findRSDP()+0x4b>
c0012da0:	b8 00 00 00 00       	mov    eax,0x0
c0012da5:	83 c4 1c             	add    esp,0x1c
c0012da8:	c3                   	ret    

c0012da9 <loadACPITables(unsigned char*)>:
c0012da9:	56                   	push   esi
c0012daa:	53                   	push   ebx
c0012dab:	83 ec 44             	sub    esp,0x44
c0012dae:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0012db3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012db9:	83 e0 04             	and    eax,0x4
c0012dbc:	84 c0                	test   al,al
c0012dbe:	0f 84 05 02 00 00    	je     c0012fc9 <loadACPITables(unsigned char*)+0x220>
c0012dc4:	a0 40 40 02 c0       	mov    al,ds:0xc0024040
c0012dc9:	84 c0                	test   al,al
c0012dcb:	74 75                	je     c0012e42 <loadACPITables(unsigned char*)+0x99>
c0012dcd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dd1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012dd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012dd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ddc:	83 e8 24             	sub    eax,0x24
c0012ddf:	c1 e8 03             	shr    eax,0x3
c0012de2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012de6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012dee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012df2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012df6:	0f 8d b2 00 00 00    	jge    c0012eae <loadACPITables(unsigned char*)+0x105>
c0012dfc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e00:	83 c0 24             	add    eax,0x24
c0012e03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012e07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012e0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e13:	c1 e0 03             	shl    eax,0x3
c0012e16:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012e1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e23:	89 c1                	mov    ecx,eax
c0012e25:	a1 2c 3e 02 c0       	mov    eax,ds:0xc0023e2c
c0012e2a:	8d 50 01             	lea    edx,[eax+0x1]
c0012e2d:	89 15 2c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e2c,edx
c0012e33:	89 ca                	mov    edx,ecx
c0012e35:	89 14 c5 44 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1bc],edx
c0012e3c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012e40:	eb ac                	jmp    c0012dee <loadACPITables(unsigned char*)+0x45>
c0012e42:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e51:	83 e8 24             	sub    eax,0x24
c0012e54:	c1 e8 02             	shr    eax,0x2
c0012e57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e5b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e67:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e6b:	7d 41                	jge    c0012eae <loadACPITables(unsigned char*)+0x105>
c0012e6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e71:	83 c0 24             	add    eax,0x24
c0012e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e84:	c1 e0 02             	shl    eax,0x2
c0012e87:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e91:	a1 2c 3e 02 c0       	mov    eax,ds:0xc0023e2c
c0012e96:	8d 50 01             	lea    edx,[eax+0x1]
c0012e99:	89 15 2c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e2c,edx
c0012e9f:	89 ca                	mov    edx,ecx
c0012ea1:	89 14 c5 44 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1bc],edx
c0012ea8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012eac:	eb b5                	jmp    c0012e63 <loadACPITables(unsigned char*)+0xba>
c0012eae:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012eb6:	a1 2c 3e 02 c0       	mov    eax,ds:0xc0023e2c
c0012ebb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012ebf:	0f 8d 05 01 00 00    	jge    c0012fca <loadACPITables(unsigned char*)+0x221>
c0012ec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ec9:	8b 04 c5 44 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc1bc]
c0012ed0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee0:	25 ff 0f 00 00       	and    eax,0xfff
c0012ee5:	89 c6                	mov    esi,eax
c0012ee7:	e8 4d b0 ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c0012eec:	89 c3                	mov    ebx,eax
c0012eee:	83 ec 0c             	sub    esp,0xc
c0012ef1:	6a 01                	push   0x1
c0012ef3:	e8 b1 ae ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012eff:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f05:	83 ec 0c             	sub    esp,0xc
c0012f08:	6a 01                	push   0x1
c0012f0a:	6a 01                	push   0x1
c0012f0c:	50                   	push   eax
c0012f0d:	52                   	push   edx
c0012f0e:	53                   	push   ebx
c0012f0f:	e8 b8 b7 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f14:	83 c4 20             	add    esp,0x20
c0012f17:	09 f0                	or     eax,esi
c0012f19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f21:	c1 e0 03             	shl    eax,0x3
c0012f24:	05 40 3e 02 c0       	add    eax,0xc0023e40
c0012f29:	83 ec 04             	sub    esp,0x4
c0012f2c:	6a 04                	push   0x4
c0012f2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f32:	50                   	push   eax
c0012f33:	e8 9a d6 fe ff       	call   c00005d2 <memcpy>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f4a:	05 00 10 00 00       	add    eax,0x1000
c0012f4f:	c1 e8 0c             	shr    eax,0xc
c0012f52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f61:	25 ff 0f 00 00       	and    eax,0xfff
c0012f66:	89 c6                	mov    esi,eax
c0012f68:	e8 cc af ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c0012f6d:	89 c3                	mov    ebx,eax
c0012f6f:	83 ec 0c             	sub    esp,0xc
c0012f72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f76:	e8 2e ae ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f82:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f88:	83 ec 0c             	sub    esp,0xc
c0012f8b:	6a 01                	push   0x1
c0012f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f91:	50                   	push   eax
c0012f92:	52                   	push   edx
c0012f93:	53                   	push   ebx
c0012f94:	e8 33 b7 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f99:	83 c4 20             	add    esp,0x20
c0012f9c:	09 f0                	or     eax,esi
c0012f9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fa2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012fa5:	83 ec 0c             	sub    esp,0xc
c0012fa8:	50                   	push   eax
c0012fa9:	e8 31 b1 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c0012fae:	83 c4 10             	add    esp,0x10
c0012fb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fb9:	89 14 c5 44 3e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc1bc],edx
c0012fc0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012fc4:	e9 ed fe ff ff       	jmp    c0012eb6 <loadACPITables(unsigned char*)+0x10d>
c0012fc9:	90                   	nop
c0012fca:	83 c4 44             	add    esp,0x44
c0012fcd:	5b                   	pop    ebx
c0012fce:	5e                   	pop    esi
c0012fcf:	c3                   	ret    

c0012fd0 <findRSDT(unsigned char*)>:
c0012fd0:	56                   	push   esi
c0012fd1:	53                   	push   ebx
c0012fd2:	83 ec 44             	sub    esp,0x44
c0012fd5:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0012fda:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012fe0:	83 e0 04             	and    eax,0x4
c0012fe3:	84 c0                	test   al,al
c0012fe5:	75 0a                	jne    c0012ff1 <findRSDT(unsigned char*)+0x21>
c0012fe7:	b8 00 00 00 00       	mov    eax,0x0
c0012fec:	e9 f7 00 00 00       	jmp    c00130e8 <findRSDT(unsigned char*)+0x118>
c0012ff1:	83 ec 04             	sub    esp,0x4
c0012ff4:	6a 24                	push   0x24
c0012ff6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012ffa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012ffe:	50                   	push   eax
c0012fff:	e8 ce d5 fe ff       	call   c00005d2 <memcpy>
c0013004:	83 c4 10             	add    esp,0x10
c0013007:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001300b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001300f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001301b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001301f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013027:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001302b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001302f:	25 ff 0f 00 00       	and    eax,0xfff
c0013034:	89 c6                	mov    esi,eax
c0013036:	e8 fe ae ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c001303b:	89 c3                	mov    ebx,eax
c001303d:	83 ec 0c             	sub    esp,0xc
c0013040:	6a 02                	push   0x2
c0013042:	e8 62 ad ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001304e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013054:	83 ec 0c             	sub    esp,0xc
c0013057:	6a 01                	push   0x1
c0013059:	6a 02                	push   0x2
c001305b:	50                   	push   eax
c001305c:	52                   	push   edx
c001305d:	53                   	push   ebx
c001305e:	e8 69 b6 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013063:	83 c4 20             	add    esp,0x20
c0013066:	09 f0                	or     eax,esi
c0013068:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001306c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013070:	25 ff 0f 00 00       	and    eax,0xfff
c0013075:	89 c6                	mov    esi,eax
c0013077:	e8 bd ae ff ff       	call   c000df39 <Virt::getAKernelVAS()>
c001307c:	89 c3                	mov    ebx,eax
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	6a 02                	push   0x2
c0013083:	e8 21 ad ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c0013088:	83 c4 10             	add    esp,0x10
c001308b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001308f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013095:	83 ec 0c             	sub    esp,0xc
c0013098:	6a 01                	push   0x1
c001309a:	6a 02                	push   0x2
c001309c:	50                   	push   eax
c001309d:	52                   	push   edx
c001309e:	53                   	push   ebx
c001309f:	e8 28 b6 ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130a4:	83 c4 20             	add    esp,0x20
c00130a7:	09 f0                	or     eax,esi
c00130a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00130ad:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00130b2:	75 11                	jne    c00130c5 <findRSDT(unsigned char*)+0xf5>
c00130b4:	c6 05 40 40 02 c0 00 	mov    BYTE PTR ds:0xc0024040,0x0
c00130bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130c3:	eb 1f                	jmp    c00130e4 <findRSDT(unsigned char*)+0x114>
c00130c5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00130ca:	75 11                	jne    c00130dd <findRSDT(unsigned char*)+0x10d>
c00130cc:	c6 05 40 40 02 c0 01 	mov    BYTE PTR ds:0xc0024040,0x1
c00130d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00130d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130db:	eb 07                	jmp    c00130e4 <findRSDT(unsigned char*)+0x114>
c00130dd:	b8 00 00 00 00       	mov    eax,0x0
c00130e2:	eb 04                	jmp    c00130e8 <findRSDT(unsigned char*)+0x118>
c00130e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00130e8:	83 c4 44             	add    esp,0x44
c00130eb:	5b                   	pop    ebx
c00130ec:	5e                   	pop    esi
c00130ed:	c3                   	ret    

c00130ee <findDataTable(unsigned char*, char*)>:
c00130ee:	83 ec 1c             	sub    esp,0x1c
c00130f1:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00130f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130fc:	83 e0 04             	and    eax,0x4
c00130ff:	84 c0                	test   al,al
c0013101:	75 07                	jne    c001310a <findDataTable(unsigned char*, char*)+0x1c>
c0013103:	b8 00 00 00 00       	mov    eax,0x0
c0013108:	eb 7c                	jmp    c0013186 <findDataTable(unsigned char*, char*)+0x98>
c001310a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013112:	a1 2c 3e 02 c0       	mov    eax,ds:0xc0023e2c
c0013117:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001311b:	7d 3a                	jge    c0013157 <findDataTable(unsigned char*, char*)+0x69>
c001311d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013121:	c1 e0 03             	shl    eax,0x3
c0013124:	05 40 3e 02 c0       	add    eax,0xc0023e40
c0013129:	83 ec 04             	sub    esp,0x4
c001312c:	6a 04                	push   0x4
c001312e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013132:	50                   	push   eax
c0013133:	e8 37 d4 fe ff       	call   c000056f <memcmp>
c0013138:	83 c4 10             	add    esp,0x10
c001313b:	85 c0                	test   eax,eax
c001313d:	0f 94 c0             	sete   al
c0013140:	84 c0                	test   al,al
c0013142:	74 0d                	je     c0013151 <findDataTable(unsigned char*, char*)+0x63>
c0013144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013148:	8b 04 c5 44 3e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc1bc]
c001314f:	eb 35                	jmp    c0013186 <findDataTable(unsigned char*, char*)+0x98>
c0013151:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013155:	eb bb                	jmp    c0013112 <findDataTable(unsigned char*, char*)+0x24>
c0013157:	a0 40 40 02 c0       	mov    al,ds:0xc0024040
c001315c:	84 c0                	test   al,al
c001315e:	74 07                	je     c0013167 <findDataTable(unsigned char*, char*)+0x79>
c0013160:	b8 58 00 00 00       	mov    eax,0x58
c0013165:	eb 05                	jmp    c001316c <findDataTable(unsigned char*, char*)+0x7e>
c0013167:	b8 52 00 00 00       	mov    eax,0x52
c001316c:	83 ec 04             	sub    esp,0x4
c001316f:	50                   	push   eax
c0013170:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013174:	68 04 15 02 c0       	push   0xc0021504
c0013179:	e8 ab be ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	b8 00 00 00 00       	mov    eax,0x0
c0013186:	83 c4 1c             	add    esp,0x1c
c0013189:	c3                   	ret    

c001318a <scanMADT()>:
c001318a:	83 ec 2c             	sub    esp,0x2c
c001318d:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013192:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013198:	83 e0 04             	and    eax,0x4
c001319b:	84 c0                	test   al,al
c001319d:	0f 84 73 03 00 00    	je     c0013516 <scanMADT()+0x38c>
c00131a3:	e8 77 fb ff ff       	call   c0012d1f <findRSDP()>
c00131a8:	a3 4c 40 02 c0       	mov    ds:0xc002404c,eax
c00131ad:	a1 4c 40 02 c0       	mov    eax,ds:0xc002404c
c00131b2:	85 c0                	test   eax,eax
c00131b4:	75 19                	jne    c00131cf <scanMADT()+0x45>
c00131b6:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00131bb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131c1:	83 e2 fb             	and    edx,0xfffffffb
c00131c4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131ca:	e9 4b 03 00 00       	jmp    c001351a <scanMADT()+0x390>
c00131cf:	a1 4c 40 02 c0       	mov    eax,ds:0xc002404c
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	50                   	push   eax
c00131d8:	e8 f3 fd ff ff       	call   c0012fd0 <findRSDT(unsigned char*)>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c00131e5:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c00131ea:	85 c0                	test   eax,eax
c00131ec:	75 19                	jne    c0013207 <scanMADT()+0x7d>
c00131ee:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00131f3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131f9:	83 e2 fb             	and    edx,0xfffffffb
c00131fc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013202:	e9 13 03 00 00       	jmp    c001351a <scanMADT()+0x390>
c0013207:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c001320c:	83 ec 0c             	sub    esp,0xc
c001320f:	50                   	push   eax
c0013210:	e8 94 fb ff ff       	call   c0012da9 <loadACPITables(unsigned char*)>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c001321d:	83 ec 08             	sub    esp,0x8
c0013220:	68 22 14 02 c0       	push   0xc0021422
c0013225:	50                   	push   eax
c0013226:	e8 c3 fe ff ff       	call   c00130ee <findDataTable(unsigned char*, char*)>
c001322b:	83 c4 10             	add    esp,0x10
c001322e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013232:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013237:	75 19                	jne    c0013252 <scanMADT()+0xc8>
c0013239:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001323e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013244:	83 e2 fe             	and    edx,0xfffffffe
c0013247:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001324d:	e9 c8 02 00 00       	jmp    c001351a <scanMADT()+0x390>
c0013252:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001325a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001325e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013261:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013265:	0f 87 af 02 00 00    	ja     c001351a <scanMADT()+0x390>
c001326b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013273:	0f 87 a1 02 00 00    	ja     c001351a <scanMADT()+0x390>
c0013279:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001327d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013281:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013285:	8d 50 01             	lea    edx,[eax+0x1]
c0013288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001328c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013290:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013294:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001329c:	8d 50 01             	lea    edx,[eax+0x1]
c001329f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00132ab:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00132af:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00132b4:	0f 86 5f 02 00 00    	jbe    c0013519 <scanMADT()+0x38f>
c00132ba:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00132bf:	75 57                	jne    c0013318 <scanMADT()+0x18e>
c00132c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132c5:	8d 50 01             	lea    edx,[eax+0x1]
c00132c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132cc:	8a 15 80 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024180
c00132d2:	0f b6 d2             	movzx  edx,dl
c00132d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132d9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132dd:	88 82 c0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe40],al
c00132e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132e7:	8d 50 01             	lea    edx,[eax+0x1]
c00132ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132ee:	8a 15 80 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024180
c00132f4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00132f7:	88 0d 80 41 02 c0    	mov    BYTE PTR ds:0xc0024180,cl
c00132fd:	0f b6 d2             	movzx  edx,dl
c0013300:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013304:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013308:	88 82 a0 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbe60],al
c001330e:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013313:	e9 ea 01 00 00       	jmp    c0013502 <scanMADT()+0x378>
c0013318:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c001331d:	0f 85 14 01 00 00    	jne    c0013437 <scanMADT()+0x2ad>
c0013323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013327:	8d 50 01             	lea    edx,[eax+0x1]
c001332a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001332e:	8a 15 50 40 02 c0    	mov    dl,BYTE PTR ds:0xc0024050
c0013334:	0f b6 d2             	movzx  edx,dl
c0013337:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001333b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001333f:	88 82 60 40 02 c0    	mov    BYTE PTR [edx-0x3ffdbfa0],al
c0013345:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013349:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001334d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013351:	01 d0                	add    eax,edx
c0013353:	83 c0 2c             	add    eax,0x2c
c0013356:	8a 00                	mov    al,BYTE PTR [eax]
c0013358:	0f b6 d0             	movzx  edx,al
c001335b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001335f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013362:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013366:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001336a:	0f b6 c0             	movzx  eax,al
c001336d:	c1 e0 08             	shl    eax,0x8
c0013370:	89 d1                	mov    ecx,edx
c0013372:	09 c1                	or     ecx,eax
c0013374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013378:	8d 50 02             	lea    edx,[eax+0x2]
c001337b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001337f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013383:	0f b6 c0             	movzx  eax,al
c0013386:	c1 e0 10             	shl    eax,0x10
c0013389:	09 c1                	or     ecx,eax
c001338b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001338f:	8d 50 03             	lea    edx,[eax+0x3]
c0013392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013396:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001339a:	0f b6 c0             	movzx  eax,al
c001339d:	c1 e0 18             	shl    eax,0x18
c00133a0:	09 c1                	or     ecx,eax
c00133a2:	89 ca                	mov    edx,ecx
c00133a4:	a0 50 40 02 c0       	mov    al,ds:0xc0024050
c00133a9:	0f b6 c0             	movzx  eax,al
c00133ac:	89 14 85 80 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf80],edx
c00133b3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c0:	01 d0                	add    eax,edx
c00133c2:	83 c0 2c             	add    eax,0x2c
c00133c5:	8a 00                	mov    al,BYTE PTR [eax]
c00133c7:	0f b6 d0             	movzx  edx,al
c00133ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00133d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00133d9:	0f b6 c0             	movzx  eax,al
c00133dc:	c1 e0 08             	shl    eax,0x8
c00133df:	89 d1                	mov    ecx,edx
c00133e1:	09 c1                	or     ecx,eax
c00133e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e7:	8d 50 02             	lea    edx,[eax+0x2]
c00133ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133f2:	0f b6 c0             	movzx  eax,al
c00133f5:	c1 e0 10             	shl    eax,0x10
c00133f8:	09 c1                	or     ecx,eax
c00133fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fe:	8d 50 03             	lea    edx,[eax+0x3]
c0013401:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013405:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013409:	0f b6 c0             	movzx  eax,al
c001340c:	c1 e0 18             	shl    eax,0x18
c001340f:	09 c1                	or     ecx,eax
c0013411:	89 ca                	mov    edx,ecx
c0013413:	a0 50 40 02 c0       	mov    al,ds:0xc0024050
c0013418:	0f b6 c0             	movzx  eax,al
c001341b:	89 14 85 00 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf00],edx
c0013422:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013427:	a0 50 40 02 c0       	mov    al,ds:0xc0024050
c001342c:	40                   	inc    eax
c001342d:	a2 50 40 02 c0       	mov    ds:0xc0024050,al
c0013432:	e9 cb 00 00 00       	jmp    c0013502 <scanMADT()+0x378>
c0013437:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c001343c:	0f 85 a6 00 00 00    	jne    c00134e8 <scanMADT()+0x35e>
c0013442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013446:	8d 50 01             	lea    edx,[eax+0x1]
c0013449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001344d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013451:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013455:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001345d:	8d 50 01             	lea    edx,[eax+0x1]
c0013460:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013464:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013468:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001346c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013478:	01 d0                	add    eax,edx
c001347a:	83 c0 2c             	add    eax,0x2c
c001347d:	8a 00                	mov    al,BYTE PTR [eax]
c001347f:	0f b6 d0             	movzx  edx,al
c0013482:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013486:	8d 48 01             	lea    ecx,[eax+0x1]
c0013489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013491:	0f b6 c0             	movzx  eax,al
c0013494:	c1 e0 08             	shl    eax,0x8
c0013497:	89 d1                	mov    ecx,edx
c0013499:	09 c1                	or     ecx,eax
c001349b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001349f:	8d 50 02             	lea    edx,[eax+0x2]
c00134a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134aa:	0f b6 c0             	movzx  eax,al
c00134ad:	c1 e0 10             	shl    eax,0x10
c00134b0:	09 c1                	or     ecx,eax
c00134b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b6:	8d 50 03             	lea    edx,[eax+0x3]
c00134b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134c1:	0f b6 c0             	movzx  eax,al
c00134c4:	c1 e0 18             	shl    eax,0x18
c00134c7:	09 c8                	or     eax,ecx
c00134c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134cd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134d2:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00134d7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00134dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134e0:	88 90 00 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd100],dl
c00134e6:	eb 1a                	jmp    c0013502 <scanMADT()+0x378>
c00134e8:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00134ed:	75 07                	jne    c00134f6 <scanMADT()+0x36c>
c00134ef:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134f4:	eb 0c                	jmp    c0013502 <scanMADT()+0x378>
c00134f6:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00134fb:	75 05                	jne    c0013502 <scanMADT()+0x378>
c00134fd:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013502:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001350b:	01 d0                	add    eax,edx
c001350d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013511:	e9 44 fd ff ff       	jmp    c001325a <scanMADT()+0xd0>
c0013516:	90                   	nop
c0013517:	eb 01                	jmp    c001351a <scanMADT()+0x390>
c0013519:	90                   	nop
c001351a:	83 c4 2c             	add    esp,0x2c
c001351d:	c3                   	ret    

c001351e <ACPI::ACPI()>:
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013525:	83 ec 08             	sub    esp,0x8
c0013528:	68 27 14 02 c0       	push   0xc0021427
c001352d:	50                   	push   eax
c001352e:	e8 f1 d0 ff ff       	call   c0010624 <Device::Device(char const*)>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c001353b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353f:	89 10                	mov    DWORD PTR [eax],edx
c0013541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013545:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013550:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001355a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013573:	e8 12 fc ff ff       	call   c001318a <scanMADT()>
c0013578:	90                   	nop
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001357e:	83 ec 2c             	sub    esp,0x2c
c0013581:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013585:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013589:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001358d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013591:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013596:	88 d0                	mov    al,dl
c0013598:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001359c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00135a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00135a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ad:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00135b3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135b7:	0f 8d 97 00 00 00    	jge    c0013654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00135bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135c5:	83 c2 2a             	add    edx,0x2a
c00135c8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00135cc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00135d1:	75 78                	jne    c001364b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135db:	83 c2 2a             	add    edx,0x2a
c00135de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00135e2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00135e6:	75 63                	jne    c001364b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00135ed:	74 3a                	je     c0013629 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00135ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135f7:	83 c2 2a             	add    edx,0x2a
c00135fa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00135fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013602:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013605:	39 c2                	cmp    edx,eax
c0013607:	74 10                	je     c0013619 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013609:	83 ec 0c             	sub    esp,0xc
c001360c:	68 34 15 02 c0       	push   0xc0021534
c0013611:	e8 a8 16 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0013616:	83 c4 10             	add    esp,0x10
c0013619:	83 ec 0c             	sub    esp,0xc
c001361c:	68 2c 14 02 c0       	push   0xc002142c
c0013621:	e8 98 16 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001362d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013635:	83 c2 2a             	add    edx,0x2a
c0013638:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001363c:	8b 02                	mov    eax,DWORD PTR [edx]
c001363e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013641:	89 01                	mov    DWORD PTR [ecx],eax
c0013643:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013646:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001364b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001364f:	e9 55 ff ff ff       	jmp    c00135a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013654:	90                   	nop
c0013655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013659:	83 c4 2c             	add    esp,0x2c
c001365c:	c2 04 00             	ret    0x4
c001365f:	90                   	nop

c0013660 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013660:	56                   	push   esi
c0013661:	53                   	push   ebx
c0013662:	83 ec 14             	sub    esp,0x14
c0013665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013669:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001366d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013671:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013676:	88 c8                	mov    al,cl
c0013678:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001367c:	88 d0                	mov    al,dl
c001367e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013686:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001368c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013690:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013696:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001369b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00136a0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a5:	83 ec 04             	sub    esp,0x4
c00136a8:	56                   	push   esi
c00136a9:	53                   	push   ebx
c00136aa:	51                   	push   ecx
c00136ab:	52                   	push   edx
c00136ac:	50                   	push   eax
c00136ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136b1:	68 64 15 02 c0       	push   0xc0021564
c00136b6:	e8 6e b9 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00136bb:	83 c4 20             	add    esp,0x20
c00136be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136cf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00136d3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00136d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136db:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136e5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00136e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ec:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00136f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136f5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136fb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00136ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0013702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013706:	83 c2 2a             	add    edx,0x2a
c0013709:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001370d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013711:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001371b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001371e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013722:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001372a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013730:	8d 50 01             	lea    edx,[eax+0x1]
c0013733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013737:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001373d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013741:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013747:	3d 00 08 00 00       	cmp    eax,0x800
c001374c:	75 10                	jne    c001375e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	68 3b 14 02 c0       	push   0xc002143b
c0013756:	e8 63 15 00 00       	call   c0014cbe <Krnl::panic(char const*)>
c001375b:	83 c4 10             	add    esp,0x10
c001375e:	90                   	nop
c001375f:	83 c4 14             	add    esp,0x14
c0013762:	5b                   	pop    ebx
c0013763:	5e                   	pop    esi
c0013764:	c3                   	ret    
c0013765:	90                   	nop

c0013766 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013766:	b8 00 00 00 00       	mov    eax,0x0
c001376b:	c3                   	ret    

c001376c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001376c:	83 ec 1c             	sub    esp,0x1c
c001376f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013773:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013776:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001377a:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001377f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013784:	83 ec 08             	sub    esp,0x8
c0013787:	52                   	push   edx
c0013788:	50                   	push   eax
c0013789:	e8 b6 7a ff ff       	call   c000b244 <Computer::readCMOS(unsigned char)>
c001378e:	83 c4 10             	add    esp,0x10
c0013791:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013795:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001379a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001379f:	83 ec 04             	sub    esp,0x4
c00137a2:	6a 01                	push   0x1
c00137a4:	52                   	push   edx
c00137a5:	50                   	push   eax
c00137a6:	e8 a7 7b ff ff       	call   c000b352 <Computer::writeCMOS(unsigned char, unsigned char)>
c00137ab:	83 c4 10             	add    esp,0x10
c00137ae:	90                   	nop
c00137af:	83 c4 1c             	add    esp,0x1c
c00137b2:	c3                   	ret    
c00137b3:	90                   	nop

c00137b4 <ACPI::open(int, int, void*)>:
c00137b4:	53                   	push   ebx
c00137b5:	83 ec 18             	sub    esp,0x18
c00137b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137bc:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00137c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137c7:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00137cd:	84 c0                	test   al,al
c00137cf:	74 60                	je     c0013831 <ACPI::open(int, int, void*)+0x7d>
c00137d1:	83 ec 0c             	sub    esp,0xc
c00137d4:	68 58 01 00 00       	push   0x158
c00137d9:	e8 5c b7 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	89 c3                	mov    ebx,eax
c00137e3:	83 ec 0c             	sub    esp,0xc
c00137e6:	53                   	push   ebx
c00137e7:	e8 fe 7c 00 00       	call   c001b4ea <PCI::PCI()>
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00137f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137f7:	83 ec 08             	sub    esp,0x8
c00137fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137fe:	50                   	push   eax
c00137ff:	e8 30 cc ff ff       	call   c0010434 <Device::addChild(Device*)>
c0013804:	83 c4 10             	add    esp,0x10
c0013807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001380b:	8b 00                	mov    eax,DWORD PTR [eax]
c001380d:	83 c0 08             	add    eax,0x8
c0013810:	8b 00                	mov    eax,DWORD PTR [eax]
c0013812:	6a 00                	push   0x0
c0013814:	6a 00                	push   0x0
c0013816:	6a 00                	push   0x0
c0013818:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001381c:	ff d0                	call   eax
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	83 ec 0c             	sub    esp,0xc
c0013824:	68 58 14 02 c0       	push   0xc0021458
c0013829:	e8 fb b7 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	83 ec 0c             	sub    esp,0xc
c0013834:	68 63 14 02 c0       	push   0xc0021463
c0013839:	e8 9a 33 00 00       	call   c0016bd8 <Thr::loadKernelSymbolTable(char const*)>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c0013847:	83 ec 08             	sub    esp,0x8
c001384a:	6a 01                	push   0x1
c001384c:	68 81 14 02 c0       	push   0xc0021481
c0013851:	e8 47 3e 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	83 ec 08             	sub    esp,0x8
c001385c:	53                   	push   ebx
c001385d:	50                   	push   eax
c001385e:	e8 8d 3f 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c001386c:	83 ec 08             	sub    esp,0x8
c001386f:	6a 01                	push   0x1
c0013871:	68 9e 14 02 c0       	push   0xc002149e
c0013876:	e8 22 3e 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c001387b:	83 c4 10             	add    esp,0x10
c001387e:	83 ec 08             	sub    esp,0x8
c0013881:	53                   	push   ebx
c0013882:	50                   	push   eax
c0013883:	e8 68 3f 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013890:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013896:	83 e0 04             	and    eax,0x4
c0013899:	84 c0                	test   al,al
c001389b:	0f 84 cf 00 00 00    	je     c0013970 <ACPI::open(int, int, void*)+0x1bc>
c00138a1:	83 ec 0c             	sub    esp,0xc
c00138a4:	68 14 01 00 00       	push   0x114
c00138a9:	e8 8c b6 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	89 c3                	mov    ebx,eax
c00138b3:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c00138b8:	83 ec 04             	sub    esp,0x4
c00138bb:	50                   	push   eax
c00138bc:	68 bb 14 02 c0       	push   0xc00214bb
c00138c1:	53                   	push   ebx
c00138c2:	e8 91 bc ff ff       	call   c000f558 <File::File(char const*, Process*)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00138ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138d3:	74 17                	je     c00138ec <ACPI::open(int, int, void*)+0x138>
c00138d5:	83 ec 0c             	sub    esp,0xc
c00138d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138dc:	e8 49 bf ff ff       	call   c000f82a <File::exists()>
c00138e1:	83 c4 10             	add    esp,0x10
c00138e4:	84 c0                	test   al,al
c00138e6:	74 04                	je     c00138ec <ACPI::open(int, int, void*)+0x138>
c00138e8:	b0 01                	mov    al,0x1
c00138ea:	eb 02                	jmp    c00138ee <ACPI::open(int, int, void*)+0x13a>
c00138ec:	b0 00                	mov    al,0x0
c00138ee:	84 c0                	test   al,al
c00138f0:	74 25                	je     c0013917 <ACPI::open(int, int, void*)+0x163>
c00138f2:	8b 1d a8 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237a8
c00138f8:	83 ec 08             	sub    esp,0x8
c00138fb:	6a 01                	push   0x1
c00138fd:	68 bb 14 02 c0       	push   0xc00214bb
c0013902:	e8 96 3d 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c0013907:	83 c4 10             	add    esp,0x10
c001390a:	83 ec 08             	sub    esp,0x8
c001390d:	53                   	push   ebx
c001390e:	50                   	push   eax
c001390f:	e8 dc 3e 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001391c:	74 1e                	je     c001393c <ACPI::open(int, int, void*)+0x188>
c001391e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013923:	74 17                	je     c001393c <ACPI::open(int, int, void*)+0x188>
c0013925:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013929:	8b 00                	mov    eax,DWORD PTR [eax]
c001392b:	83 c0 08             	add    eax,0x8
c001392e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013937:	ff d0                	call   eax
c0013939:	83 c4 10             	add    esp,0x10
c001393c:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c0013941:	83 ec 08             	sub    esp,0x8
c0013944:	68 d8 14 02 c0       	push   0xc00214d8
c0013949:	50                   	push   eax
c001394a:	e8 9f f7 ff ff       	call   c00130ee <findDataTable(unsigned char*, char*)>
c001394f:	83 c4 10             	add    esp,0x10
c0013952:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013956:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001395b:	74 13                	je     c0013970 <ACPI::open(int, int, void*)+0x1bc>
c001395d:	83 ec 08             	sub    esp,0x8
c0013960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013964:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013968:	e8 ff fd ff ff       	call   c001376c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001396d:	83 c4 10             	add    esp,0x10
c0013970:	b8 00 00 00 00       	mov    eax,0x0
c0013975:	83 c4 18             	add    esp,0x18
c0013978:	5b                   	pop    ebx
c0013979:	c3                   	ret    

c001397a <ACPI::sleep()>:
c001397a:	83 ec 0c             	sub    esp,0xc
c001397d:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0013982:	85 c0                	test   eax,eax
c0013984:	74 07                	je     c001398d <ACPI::sleep()+0x13>
c0013986:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c001398b:	ff d0                	call   eax
c001398d:	90                   	nop
c001398e:	83 c4 0c             	add    esp,0xc
c0013991:	c3                   	ret    

c0013992 <CPU::close(int, int, void*)>:
c0013992:	31 c0                	xor    eax,eax
c0013994:	c3                   	ret    

c0013995 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013995:	55                   	push   ebp
c0013996:	57                   	push   edi
c0013997:	56                   	push   esi
c0013998:	53                   	push   ebx
c0013999:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001399d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00139a1:	89 ce                	mov    esi,ecx
c00139a3:	89 d5                	mov    ebp,edx
c00139a5:	80 f9 04             	cmp    cl,0x4
c00139a8:	75 28                	jne    c00139d2 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00139aa:	8d 42 f9             	lea    eax,[edx-0x7]
c00139ad:	3c 03                	cmp    al,0x3
c00139af:	0f 86 63 01 00 00    	jbe    c0013b18 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00139b5:	80 fa 03             	cmp    dl,0x3
c00139b8:	0f 84 5a 01 00 00    	je     c0013b18 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00139be:	8d 7a f2             	lea    edi,[edx-0xe]
c00139c1:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c00139c6:	89 fb                	mov    ebx,edi
c00139c8:	80 fb 01             	cmp    bl,0x1
c00139cb:	77 4e                	ja     c0013a1b <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00139cd:	e9 52 01 00 00       	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139d2:	80 f9 05             	cmp    cl,0x5
c00139d5:	75 4d                	jne    c0013a24 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00139d7:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c00139dc:	80 fa 03             	cmp    dl,0x3
c00139df:	0f 86 3f 01 00 00    	jbe    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139e5:	8d 7a fa             	lea    edi,[edx-0x6]
c00139e8:	b8 f0 30 02 c0       	mov    eax,0xc00230f0
c00139ed:	89 fb                	mov    ebx,edi
c00139ef:	80 fb 01             	cmp    bl,0x1
c00139f2:	0f 86 2c 01 00 00    	jbe    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139f8:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00139fd:	80 fa 08             	cmp    dl,0x8
c0013a00:	0f 84 1e 01 00 00    	je     c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a06:	89 d7                	mov    edi,edx
c0013a08:	b8 10 31 02 c0       	mov    eax,0xc0023110
c0013a0d:	83 e7 fb             	and    edi,0xfffffffb
c0013a10:	89 fb                	mov    ebx,edi
c0013a12:	80 fb 09             	cmp    bl,0x9
c0013a15:	0f 84 09 01 00 00    	je     c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a1b:	31 c0                	xor    eax,eax
c0013a1d:	89 eb                	mov    ebx,ebp
c0013a1f:	0f b6 fb             	movzx  edi,bl
c0013a22:	eb 30                	jmp    c0013a54 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0013a24:	31 c0                	xor    eax,eax
c0013a26:	80 f9 06             	cmp    cl,0x6
c0013a29:	75 f2                	jne    c0013a1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a2b:	80 fa 0a             	cmp    dl,0xa
c0013a2e:	77 ed                	ja     c0013a1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a30:	bf de 05 00 00       	mov    edi,0x5de
c0013a35:	0f a3 d7             	bt     edi,edx
c0013a38:	73 e3                	jae    c0013a1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013a3a:	b8 20 31 02 c0       	mov    eax,0xc0023120
c0013a3f:	e9 e0 00 00 00       	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a44:	39 c7                	cmp    edi,eax
c0013a46:	0f 84 d3 00 00 00    	je     c0013b1f <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a4c:	40                   	inc    eax
c0013a4d:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a52:	74 09                	je     c0013a5d <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a54:	89 f3                	mov    ebx,esi
c0013a56:	80 fb 0f             	cmp    bl,0xf
c0013a59:	75 f1                	jne    c0013a4c <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a5b:	eb e7                	jmp    c0013a44 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a5d:	80 f9 10             	cmp    cl,0x10
c0013a60:	75 14                	jne    c0013a76 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a62:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a65:	83 e0 fb             	and    eax,0xfffffffb
c0013a68:	3c 02                	cmp    al,0x2
c0013a6a:	76 34                	jbe    c0013aa0 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a6c:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013a71:	80 fa 02             	cmp    dl,0x2
c0013a74:	eb 24                	jmp    c0013a9a <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a76:	80 f9 11             	cmp    cl,0x11
c0013a79:	75 13                	jne    c0013a8e <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a7b:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013a80:	80 fa 03             	cmp    dl,0x3
c0013a83:	0f 85 9b 00 00 00    	jne    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a89:	e9 91 00 00 00       	jmp    c0013b1f <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a8e:	80 f9 12             	cmp    cl,0x12
c0013a91:	75 14                	jne    c0013aa7 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a93:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013a98:	fe ca                	dec    dl
c0013a9a:	0f 85 84 00 00 00    	jne    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aa0:	b8 40 31 02 c0       	mov    eax,0xc0023140
c0013aa5:	eb 7d                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aa7:	80 f9 14             	cmp    cl,0x14
c0013aaa:	75 12                	jne    c0013abe <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013aac:	4a                   	dec    edx
c0013aad:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013ab2:	80 fa 01             	cmp    dl,0x1
c0013ab5:	77 6d                	ja     c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab7:	b8 50 31 02 c0       	mov    eax,0xc0023150
c0013abc:	eb 66                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013abe:	80 f9 15             	cmp    cl,0x15
c0013ac1:	75 31                	jne    c0013af4 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013ac3:	b8 60 31 02 c0       	mov    eax,0xc0023160
c0013ac8:	80 fa 01             	cmp    dl,0x1
c0013acb:	74 57                	je     c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013acd:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013ad2:	80 fa 13             	cmp    dl,0x13
c0013ad5:	76 0c                	jbe    c0013ae3 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013ad7:	80 fa 30             	cmp    dl,0x30
c0013ada:	75 48                	jne    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013adc:	b8 80 31 02 c0       	mov    eax,0xc0023180
c0013ae1:	eb 41                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ae3:	b9 04 00 09 00       	mov    ecx,0x90004
c0013ae8:	0f a3 d1             	bt     ecx,edx
c0013aeb:	73 37                	jae    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aed:	b8 70 31 02 c0       	mov    eax,0xc0023170
c0013af2:	eb 30                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013af4:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013af9:	80 f9 16             	cmp    cl,0x16
c0013afc:	75 26                	jne    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013afe:	b8 90 31 02 c0       	mov    eax,0xc0023190
c0013b03:	84 d2                	test   dl,dl
c0013b05:	74 1d                	je     c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b07:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013b0c:	80 fa 30             	cmp    dl,0x30
c0013b0f:	75 13                	jne    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b11:	b8 a0 31 02 c0       	mov    eax,0xc00231a0
c0013b16:	eb 0c                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b18:	b8 c0 30 02 c0       	mov    eax,0xc00230c0
c0013b1d:	eb 05                	jmp    c0013b24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b1f:	b8 30 31 02 c0       	mov    eax,0xc0023130
c0013b24:	5b                   	pop    ebx
c0013b25:	5e                   	pop    esi
c0013b26:	5f                   	pop    edi
c0013b27:	5d                   	pop    ebp
c0013b28:	c3                   	ret    

c0013b29 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013b29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b31:	80 f9 04             	cmp    cl,0x4
c0013b34:	75 6b                	jne    c0013ba1 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013b36:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013b3b:	80 fa 01             	cmp    dl,0x1
c0013b3e:	0f 86 92 02 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b44:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013b49:	80 fa 02             	cmp    dl,0x2
c0013b4c:	0f 84 84 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b52:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013b57:	80 fa 03             	cmp    dl,0x3
c0013b5a:	0f 84 76 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b60:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013b65:	80 fa 04             	cmp    dl,0x4
c0013b68:	0f 84 68 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b6e:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013b73:	80 fa 05             	cmp    dl,0x5
c0013b76:	0f 84 5a 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b7c:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013b81:	80 fa 07             	cmp    dl,0x7
c0013b84:	0f 84 4c 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b8a:	83 ea 08             	sub    edx,0x8
c0013b8d:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013b92:	80 fa 01             	cmp    dl,0x1
c0013b95:	0f 87 3b 02 00 00    	ja     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b9b:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013ba0:	c3                   	ret    
c0013ba1:	80 f9 05             	cmp    cl,0x5
c0013ba4:	75 45                	jne    c0013beb <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013ba6:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013ba9:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013bae:	80 f9 02             	cmp    cl,0x2
c0013bb1:	0f 86 1f 02 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bb7:	80 fa 04             	cmp    dl,0x4
c0013bba:	0f 84 f3 01 00 00    	je     c0013db3 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013bc0:	80 fa 07             	cmp    dl,0x7
c0013bc3:	0f 84 0d 02 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bc9:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013bce:	80 fa 08             	cmp    dl,0x8
c0013bd1:	0f 84 ff 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bd7:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013bdc:	80 fa 09             	cmp    dl,0x9
c0013bdf:	0f 85 f1 01 00 00    	jne    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be5:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013bea:	c3                   	ret    
c0013beb:	80 f9 06             	cmp    cl,0x6
c0013bee:	0f 85 85 01 00 00    	jne    c0013d79 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013bf4:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013bf9:	80 fa 01             	cmp    dl,0x1
c0013bfc:	0f 84 d4 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c02:	8d 42 fb             	lea    eax,[edx-0x5]
c0013c05:	3c 01                	cmp    al,0x1
c0013c07:	0f 86 ac 01 00 00    	jbe    c0013db9 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013c0d:	80 fa 03             	cmp    dl,0x3
c0013c10:	0f 84 a3 01 00 00    	je     c0013db9 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013c16:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013c19:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013c1e:	80 f9 01             	cmp    cl,0x1
c0013c21:	0f 86 af 01 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c27:	80 fa 09             	cmp    dl,0x9
c0013c2a:	0f 84 8f 01 00 00    	je     c0013dbf <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013c30:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013c33:	80 f9 01             	cmp    cl,0x1
c0013c36:	0f 86 9a 01 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c3c:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c41:	80 fa 0d             	cmp    dl,0xd
c0013c44:	0f 84 8c 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c4a:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013c4f:	80 fa 0e             	cmp    dl,0xe
c0013c52:	0f 84 7e 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c58:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013c5d:	80 fa 0f             	cmp    dl,0xf
c0013c60:	0f 84 70 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c66:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c6b:	80 fa 15             	cmp    dl,0x15
c0013c6e:	0f 84 62 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c74:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c77:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013c7c:	80 f9 01             	cmp    cl,0x1
c0013c7f:	0f 86 51 01 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c85:	80 fa 1a             	cmp    dl,0x1a
c0013c88:	0f 84 37 01 00 00    	je     c0013dc5 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c8e:	80 fa 1c             	cmp    dl,0x1c
c0013c91:	0f 84 34 01 00 00    	je     c0013dcb <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c97:	80 fa 1d             	cmp    dl,0x1d
c0013c9a:	0f 84 36 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ca0:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013ca5:	80 fa 25             	cmp    dl,0x25
c0013ca8:	0f 84 28 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cae:	8d 4a da             	lea    ecx,[edx-0x26]
c0013cb1:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013cb6:	80 f9 01             	cmp    cl,0x1
c0013cb9:	0f 86 17 01 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cbf:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013cc4:	80 fa 2a             	cmp    dl,0x2a
c0013cc7:	0f 84 09 01 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ccd:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013cd2:	80 fa 2c             	cmp    dl,0x2c
c0013cd5:	0f 84 fb 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cdb:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013ce0:	80 fa 2d             	cmp    dl,0x2d
c0013ce3:	0f 84 ed 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ce9:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013cee:	80 fa 2e             	cmp    dl,0x2e
c0013cf1:	0f 84 df 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf7:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013cfc:	80 fa 2f             	cmp    dl,0x2f
c0013cff:	0f 84 d1 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d05:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013d08:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013d0d:	80 f9 01             	cmp    cl,0x1
c0013d10:	0f 86 c0 00 00 00    	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d16:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013d1b:	80 fa 37             	cmp    dl,0x37
c0013d1e:	0f 84 b2 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d24:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013d29:	80 fa 3a             	cmp    dl,0x3a
c0013d2c:	0f 84 a4 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d32:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013d37:	80 fa 3c             	cmp    dl,0x3c
c0013d3a:	0f 84 96 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d40:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0013d45:	80 fa 3d             	cmp    dl,0x3d
c0013d48:	0f 84 88 00 00 00    	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d4e:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013d53:	80 fa 3e             	cmp    dl,0x3e
c0013d56:	74 7e                	je     c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d58:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d5b:	3c 01                	cmp    al,0x1
c0013d5d:	76 72                	jbe    c0013dd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d5f:	80 fa 3f             	cmp    dl,0x3f
c0013d62:	74 6d                	je     c0013dd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d64:	80 fa 4a             	cmp    dl,0x4a
c0013d67:	74 0a                	je     c0013d73 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d69:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013d6e:	80 fa 4d             	cmp    dl,0x4d
c0013d71:	75 63                	jne    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d73:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013d78:	c3                   	ret    
c0013d79:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013d7e:	80 f9 0b             	cmp    cl,0xb
c0013d81:	75 0a                	jne    c0013d8d <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d83:	fe ca                	dec    dl
c0013d85:	75 4f                	jne    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d87:	b8 90 30 02 c0       	mov    eax,0xc0023090
c0013d8c:	c3                   	ret    
c0013d8d:	80 f9 0f             	cmp    cl,0xf
c0013d90:	75 44                	jne    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d92:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c0013d97:	80 fa 02             	cmp    dl,0x2
c0013d9a:	76 3a                	jbe    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d9c:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d9f:	3c 01                	cmp    al,0x1
c0013da1:	76 0a                	jbe    c0013dad <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013da3:	b8 49 17 02 c0       	mov    eax,0xc0021749
c0013da8:	80 fa 06             	cmp    dl,0x6
c0013dab:	75 29                	jne    c0013dd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013dad:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c0013db2:	c3                   	ret    
c0013db3:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013db8:	c3                   	ret    
c0013db9:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013dbe:	c3                   	ret    
c0013dbf:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013dc4:	c3                   	ret    
c0013dc5:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013dca:	c3                   	ret    
c0013dcb:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013dd0:	c3                   	ret    
c0013dd1:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013dd6:	c3                   	ret    

c0013dd7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013dd7:	60                   	pusha  
c0013dd8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013de4:	9c                   	pushf  
c0013de5:	fa                   	cli    
c0013de6:	0f 09                	wbinvd 
c0013de8:	0f 30                	wrmsr  
c0013dea:	9d                   	popf   
c0013deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013def:	89 02                	mov    DWORD PTR [edx],eax
c0013df1:	61                   	popa   
c0013df2:	c3                   	ret    

c0013df3 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013df3:	60                   	pusha  
c0013df4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013df8:	9c                   	pushf  
c0013df9:	fa                   	cli    
c0013dfa:	0f 09                	wbinvd 
c0013dfc:	31 c0                	xor    eax,eax
c0013dfe:	31 d2                	xor    edx,edx
c0013e00:	0f 32                	rdmsr  
c0013e02:	9d                   	popf   
c0013e03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e07:	89 02                	mov    DWORD PTR [edx],eax
c0013e09:	61                   	popa   
c0013e0a:	c3                   	ret    

c0013e0b <AMD_K6_writeback(int, int, int)>:
c0013e0b:	56                   	push   esi
c0013e0c:	53                   	push   ebx
c0013e0d:	83 ec 10             	sub    esp,0x10
c0013e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e14:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013e19:	75 5d                	jne    c0013e78 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e1b:	83 f8 08             	cmp    eax,0x8
c0013e1e:	75 09                	jne    c0013e29 <AMD_K6_writeback(int, int, int)+0x1e>
c0013e20:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013e25:	7e 13                	jle    c0013e3a <AMD_K6_writeback(int, int, int)+0x2f>
c0013e27:	eb 30                	jmp    c0013e59 <AMD_K6_writeback(int, int, int)+0x4e>
c0013e29:	83 f8 06             	cmp    eax,0x6
c0013e2c:	7c 4a                	jl     c0013e78 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e2e:	83 f8 07             	cmp    eax,0x7
c0013e31:	7e 07                	jle    c0013e3a <AMD_K6_writeback(int, int, int)+0x2f>
c0013e33:	83 f8 09             	cmp    eax,0x9
c0013e36:	74 21                	je     c0013e59 <AMD_K6_writeback(int, int, int)+0x4e>
c0013e38:	eb 3e                	jmp    c0013e78 <AMD_K6_writeback(int, int, int)+0x6d>
c0013e3a:	89 e6                	mov    esi,esp
c0013e3c:	8b 1d e4 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237e4
c0013e42:	56                   	push   esi
c0013e43:	c1 eb 15             	shr    ebx,0x15
c0013e46:	68 82 00 00 c0       	push   0xc0000082
c0013e4b:	83 e3 7e             	and    ebx,0x7e
c0013e4e:	e8 a0 ff ff ff       	call   c0013df3 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e53:	56                   	push   esi
c0013e54:	6a 00                	push   0x0
c0013e56:	53                   	push   ebx
c0013e57:	eb 12                	jmp    c0013e6b <AMD_K6_writeback(int, int, int)+0x60>
c0013e59:	89 e3                	mov    ebx,esp
c0013e5b:	53                   	push   ebx
c0013e5c:	68 82 00 00 c0       	push   0xc0000082
c0013e61:	e8 8d ff ff ff       	call   c0013df3 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e66:	53                   	push   ebx
c0013e67:	6a 00                	push   0x0
c0013e69:	6a 00                	push   0x0
c0013e6b:	68 82 00 00 c0       	push   0xc0000082
c0013e70:	e8 62 ff ff ff       	call   c0013dd7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e75:	83 c4 18             	add    esp,0x18
c0013e78:	83 c4 10             	add    esp,0x10
c0013e7b:	5b                   	pop    ebx
c0013e7c:	5e                   	pop    esi
c0013e7d:	c3                   	ret    

c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e7e:	55                   	push   ebp
c0013e7f:	57                   	push   edi
c0013e80:	56                   	push   esi
c0013e81:	53                   	push   ebx
c0013e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e86:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e8e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e92:	39 05 c0 31 02 c0    	cmp    DWORD PTR ds:0xc00231c0,eax
c0013e98:	75 23                	jne    c0013ebd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e9a:	a1 ec 41 02 c0       	mov    eax,ds:0xc00241ec
c0013e9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ea3:	89 06                	mov    DWORD PTR [esi],eax
c0013ea5:	a1 e8 41 02 c0       	mov    eax,ds:0xc00241e8
c0013eaa:	89 07                	mov    DWORD PTR [edi],eax
c0013eac:	a1 e4 41 02 c0       	mov    eax,ds:0xc00241e4
c0013eb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013eb4:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0013eb9:	89 02                	mov    DWORD PTR [edx],eax
c0013ebb:	eb 3f                	jmp    c0013efc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013ebd:	31 c9                	xor    ecx,ecx
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	0f a2                	cpuid  
c0013ec5:	89 06                	mov    DWORD PTR [esi],eax
c0013ec7:	89 1f                	mov    DWORD PTR [edi],ebx
c0013ec9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ecd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013ed0:	89 10                	mov    DWORD PTR [eax],edx
c0013ed2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed6:	a3 c0 31 02 c0       	mov    ds:0xc00231c0,eax
c0013edb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013edd:	a3 ec 41 02 c0       	mov    ds:0xc00241ec,eax
c0013ee2:	8b 07                	mov    eax,DWORD PTR [edi]
c0013ee4:	a3 e8 41 02 c0       	mov    ds:0xc00241e8,eax
c0013ee9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013eec:	a3 e4 41 02 c0       	mov    ds:0xc00241e4,eax
c0013ef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ef5:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ef7:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c0013efc:	5b                   	pop    ebx
c0013efd:	5e                   	pop    esi
c0013efe:	5f                   	pop    edi
c0013eff:	5d                   	pop    ebp
c0013f00:	c3                   	ret    

c0013f01 <cpuidCheckEDX(unsigned int)>:
c0013f01:	83 ec 10             	sub    esp,0x10
c0013f04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f08:	50                   	push   eax
c0013f09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f0d:	50                   	push   eax
c0013f0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f12:	50                   	push   eax
c0013f13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f17:	50                   	push   eax
c0013f18:	6a 01                	push   0x1
c0013f1a:	e8 5f ff ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f23:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013f27:	0f 95 c0             	setne  al
c0013f2a:	83 c4 24             	add    esp,0x24
c0013f2d:	c3                   	ret    

c0013f2e <cpuidCheckECX(unsigned int)>:
c0013f2e:	83 ec 10             	sub    esp,0x10
c0013f31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f35:	50                   	push   eax
c0013f36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f3a:	50                   	push   eax
c0013f3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f3f:	50                   	push   eax
c0013f40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f44:	50                   	push   eax
c0013f45:	6a 01                	push   0x1
c0013f47:	e8 32 ff ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f50:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f54:	0f 95 c0             	setne  al
c0013f57:	83 c4 24             	add    esp,0x24
c0013f5a:	c3                   	ret    

c0013f5b <cpuidCheckExtendedEBX(unsigned int)>:
c0013f5b:	83 ec 10             	sub    esp,0x10
c0013f5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f62:	50                   	push   eax
c0013f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f67:	50                   	push   eax
c0013f68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f6c:	50                   	push   eax
c0013f6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f71:	50                   	push   eax
c0013f72:	6a 07                	push   0x7
c0013f74:	e8 05 ff ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f7d:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f81:	0f 95 c0             	setne  al
c0013f84:	83 c4 24             	add    esp,0x24
c0013f87:	c3                   	ret    

c0013f88 <cpuidCheckExtendedECX(unsigned int)>:
c0013f88:	83 ec 10             	sub    esp,0x10
c0013f8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f8f:	50                   	push   eax
c0013f90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f94:	50                   	push   eax
c0013f95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f99:	50                   	push   eax
c0013f9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f9e:	50                   	push   eax
c0013f9f:	6a 07                	push   0x7
c0013fa1:	e8 d8 fe ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013faa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013fae:	0f 95 c0             	setne  al
c0013fb1:	83 c4 24             	add    esp,0x24
c0013fb4:	c3                   	ret    

c0013fb5 <getCPUNumber()>:
c0013fb5:	31 c0                	xor    eax,eax
c0013fb7:	c3                   	ret    

c0013fb8 <thisCPU()>:
c0013fb8:	e8 f8 ff ff ff       	call   c0013fb5 <getCPUNumber()>
c0013fbd:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c0013fc3:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013fca:	c3                   	ret    
c0013fcb:	90                   	nop

c0013fcc <CPU::CPU()>:
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd3:	83 ec 08             	sub    esp,0x8
c0013fd6:	68 49 17 02 c0       	push   0xc0021749
c0013fdb:	50                   	push   eax
c0013fdc:	e8 43 c6 ff ff       	call   c0010624 <Device::Device(char const*)>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	ba 20 18 02 c0       	mov    edx,0xc0021820
c0013fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fed:	89 10                	mov    DWORD PTR [eax],edx
c0013fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014001:	05 78 01 00 00       	add    eax,0x178
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	50                   	push   eax
c001400a:	e8 4d 74 ff ff       	call   c000b45c <GDT::GDT()>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014016:	05 7c 09 00 00       	add    eax,0x97c
c001401b:	83 ec 0c             	sub    esp,0xc
c001401e:	50                   	push   eax
c001401f:	e8 98 76 ff ff       	call   c000b6bc <IDT::IDT()>
c0014024:	83 c4 10             	add    esp,0x10
c0014027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402b:	05 7c 11 00 00       	add    eax,0x117c
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	50                   	push   eax
c0014034:	e8 41 96 ff ff       	call   c000d67a <TSS::TSS()>
c0014039:	83 c4 10             	add    esp,0x10
c001403c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014040:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014055:	90                   	nop
c0014056:	83 c4 0c             	add    esp,0xc
c0014059:	c3                   	ret    

c001405a <CPU::displayFeatures()>:
c001405a:	c3                   	ret    
c001405b:	90                   	nop

c001405c <CPU::detectFeatures()>:
c001405c:	55                   	push   ebp
c001405d:	57                   	push   edi
c001405e:	56                   	push   esi
c001405f:	53                   	push   ebx
c0014060:	83 ec 50             	sub    esp,0x50
c0014063:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014067:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014071:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014078:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001407e:	6a 0d                	push   0xd
c0014080:	6a 00                	push   0x0
c0014082:	57                   	push   edi
c0014083:	e8 80 c5 fe ff       	call   c0000608 <memset>
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014090:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014097:	0f 84 20 09 00 00    	je     c00149bd <CPU::detectFeatures()+0x961>
c001409d:	83 ec 0c             	sub    esp,0xc
c00140a0:	6a 10                	push   0x10
c00140a2:	e8 5a fe ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c00140a7:	83 e0 01             	and    eax,0x1
c00140aa:	8d 14 00             	lea    edx,[eax+eax*1]
c00140ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140b3:	83 e0 fd             	and    eax,0xfffffffd
c00140b6:	09 d0                	or     eax,edx
c00140b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140be:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00140c5:	e8 37 fe ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c00140ca:	83 e0 01             	and    eax,0x1
c00140cd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00140d4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140da:	83 e0 fb             	and    eax,0xfffffffb
c00140dd:	09 d0                	or     eax,edx
c00140df:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00140ec:	e8 10 fe ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c00140f1:	83 e0 01             	and    eax,0x1
c00140f4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00140fb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014101:	83 e0 f7             	and    eax,0xfffffff7
c0014104:	09 d0                	or     eax,edx
c0014106:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001410c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014113:	e8 e9 fd ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c0014118:	83 e0 01             	and    eax,0x1
c001411b:	c1 e0 04             	shl    eax,0x4
c001411e:	88 c2                	mov    dl,al
c0014120:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014126:	83 e0 ef             	and    eax,0xffffffef
c0014129:	09 d0                	or     eax,edx
c001412b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014131:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014138:	e8 c4 fd ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c001413d:	83 e0 01             	and    eax,0x1
c0014140:	c1 e0 05             	shl    eax,0x5
c0014143:	88 c2                	mov    dl,al
c0014145:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001414b:	83 e0 df             	and    eax,0xffffffdf
c001414e:	09 d0                	or     eax,edx
c0014150:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014156:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001415d:	e8 9f fd ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c0014162:	83 e0 01             	and    eax,0x1
c0014165:	8d 14 00             	lea    edx,[eax+eax*1]
c0014168:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001416e:	83 e0 fd             	and    eax,0xfffffffd
c0014171:	09 d0                	or     eax,edx
c0014173:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014179:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014180:	e8 7c fd ff ff       	call   c0013f01 <cpuidCheckEDX(unsigned int)>
c0014185:	83 e0 01             	and    eax,0x1
c0014188:	c1 e0 06             	shl    eax,0x6
c001418b:	88 c2                	mov    dl,al
c001418d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014193:	83 e0 bf             	and    eax,0xffffffbf
c0014196:	09 d0                	or     eax,edx
c0014198:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001419e:	58                   	pop    eax
c001419f:	8d 74 24 28          	lea    esi,[esp+0x28]
c00141a3:	56                   	push   esi
c00141a4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00141a8:	55                   	push   ebp
c00141a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141ad:	50                   	push   eax
c00141ae:	8d 54 24 28          	lea    edx,[esp+0x28]
c00141b2:	52                   	push   edx
c00141b3:	6a 00                	push   0x0
c00141b5:	e8 c4 fc ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141ba:	83 c4 1c             	add    esp,0x1c
c00141bd:	6a 04                	push   0x4
c00141bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00141c3:	50                   	push   eax
c00141c4:	57                   	push   edi
c00141c5:	e8 08 c4 fe ff       	call   c00005d2 <memcpy>
c00141ca:	83 c4 0c             	add    esp,0xc
c00141cd:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00141d3:	6a 04                	push   0x4
c00141d5:	56                   	push   esi
c00141d6:	50                   	push   eax
c00141d7:	e8 f6 c3 fe ff       	call   c00005d2 <memcpy>
c00141dc:	83 c4 0c             	add    esp,0xc
c00141df:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00141e5:	6a 04                	push   0x4
c00141e7:	55                   	push   ebp
c00141e8:	50                   	push   eax
c00141e9:	e8 e4 c3 fe ff       	call   c00005d2 <memcpy>
c00141ee:	58                   	pop    eax
c00141ef:	5a                   	pop    edx
c00141f0:	68 f4 15 02 c0       	push   0xc00215f4
c00141f5:	57                   	push   edi
c00141f6:	e8 0a c5 fe ff       	call   c0000705 <strcmp>
c00141fb:	83 c4 10             	add    esp,0x10
c00141fe:	85 c0                	test   eax,eax
c0014200:	75 0f                	jne    c0014211 <CPU::detectFeatures()+0x1b5>
c0014202:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001420c:	e9 22 02 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c0014211:	50                   	push   eax
c0014212:	50                   	push   eax
c0014213:	68 01 16 02 c0       	push   0xc0021601
c0014218:	57                   	push   edi
c0014219:	e8 e7 c4 fe ff       	call   c0000705 <strcmp>
c001421e:	83 c4 10             	add    esp,0x10
c0014221:	85 c0                	test   eax,eax
c0014223:	74 dd                	je     c0014202 <CPU::detectFeatures()+0x1a6>
c0014225:	51                   	push   ecx
c0014226:	51                   	push   ecx
c0014227:	68 0e 16 02 c0       	push   0xc002160e
c001422c:	57                   	push   edi
c001422d:	e8 d3 c4 fe ff       	call   c0000705 <strcmp>
c0014232:	83 c4 10             	add    esp,0x10
c0014235:	85 c0                	test   eax,eax
c0014237:	74 2a                	je     c0014263 <CPU::detectFeatures()+0x207>
c0014239:	52                   	push   edx
c001423a:	52                   	push   edx
c001423b:	68 1b 16 02 c0       	push   0xc002161b
c0014240:	57                   	push   edi
c0014241:	e8 bf c4 fe ff       	call   c0000705 <strcmp>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	85 c0                	test   eax,eax
c001424b:	74 16                	je     c0014263 <CPU::detectFeatures()+0x207>
c001424d:	50                   	push   eax
c001424e:	50                   	push   eax
c001424f:	68 28 16 02 c0       	push   0xc0021628
c0014254:	57                   	push   edi
c0014255:	e8 ab c4 fe ff       	call   c0000705 <strcmp>
c001425a:	83 c4 10             	add    esp,0x10
c001425d:	85 c0                	test   eax,eax
c001425f:	74 48                	je     c00142a9 <CPU::detectFeatures()+0x24d>
c0014261:	eb 0f                	jmp    c0014272 <CPU::detectFeatures()+0x216>
c0014263:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001426d:	e9 c1 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c0014272:	50                   	push   eax
c0014273:	50                   	push   eax
c0014274:	68 35 16 02 c0       	push   0xc0021635
c0014279:	57                   	push   edi
c001427a:	e8 86 c4 fe ff       	call   c0000705 <strcmp>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	85 c0                	test   eax,eax
c0014284:	74 23                	je     c00142a9 <CPU::detectFeatures()+0x24d>
c0014286:	50                   	push   eax
c0014287:	50                   	push   eax
c0014288:	68 42 16 02 c0       	push   0xc0021642
c001428d:	57                   	push   edi
c001428e:	e8 72 c4 fe ff       	call   c0000705 <strcmp>
c0014293:	83 c4 10             	add    esp,0x10
c0014296:	85 c0                	test   eax,eax
c0014298:	75 1e                	jne    c00142b8 <CPU::detectFeatures()+0x25c>
c001429a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00142a4:	e9 8a 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00142a9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00142b3:	e9 7b 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00142b8:	50                   	push   eax
c00142b9:	50                   	push   eax
c00142ba:	68 4f 16 02 c0       	push   0xc002164f
c00142bf:	57                   	push   edi
c00142c0:	e8 40 c4 fe ff       	call   c0000705 <strcmp>
c00142c5:	83 c4 10             	add    esp,0x10
c00142c8:	85 c0                	test   eax,eax
c00142ca:	75 0f                	jne    c00142db <CPU::detectFeatures()+0x27f>
c00142cc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00142d6:	e9 58 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00142db:	50                   	push   eax
c00142dc:	50                   	push   eax
c00142dd:	68 0e 16 02 c0       	push   0xc002160e
c00142e2:	57                   	push   edi
c00142e3:	e8 1d c4 fe ff       	call   c0000705 <strcmp>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	85 c0                	test   eax,eax
c00142ed:	75 0f                	jne    c00142fe <CPU::detectFeatures()+0x2a2>
c00142ef:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00142f9:	e9 35 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00142fe:	50                   	push   eax
c00142ff:	50                   	push   eax
c0014300:	68 5c 16 02 c0       	push   0xc002165c
c0014305:	57                   	push   edi
c0014306:	e8 fa c3 fe ff       	call   c0000705 <strcmp>
c001430b:	83 c4 10             	add    esp,0x10
c001430e:	85 c0                	test   eax,eax
c0014310:	75 0f                	jne    c0014321 <CPU::detectFeatures()+0x2c5>
c0014312:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001431c:	e9 12 01 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c0014321:	51                   	push   ecx
c0014322:	51                   	push   ecx
c0014323:	68 69 16 02 c0       	push   0xc0021669
c0014328:	57                   	push   edi
c0014329:	e8 d7 c3 fe ff       	call   c0000705 <strcmp>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	85 c0                	test   eax,eax
c0014333:	75 0f                	jne    c0014344 <CPU::detectFeatures()+0x2e8>
c0014335:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001433f:	e9 ef 00 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c0014344:	52                   	push   edx
c0014345:	52                   	push   edx
c0014346:	68 76 16 02 c0       	push   0xc0021676
c001434b:	57                   	push   edi
c001434c:	e8 b4 c3 fe ff       	call   c0000705 <strcmp>
c0014351:	83 c4 10             	add    esp,0x10
c0014354:	85 c0                	test   eax,eax
c0014356:	75 0f                	jne    c0014367 <CPU::detectFeatures()+0x30b>
c0014358:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014362:	e9 cc 00 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c0014367:	50                   	push   eax
c0014368:	50                   	push   eax
c0014369:	68 83 16 02 c0       	push   0xc0021683
c001436e:	57                   	push   edi
c001436f:	e8 91 c3 fe ff       	call   c0000705 <strcmp>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	85 c0                	test   eax,eax
c0014379:	75 0f                	jne    c001438a <CPU::detectFeatures()+0x32e>
c001437b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014385:	e9 a9 00 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c001438a:	50                   	push   eax
c001438b:	50                   	push   eax
c001438c:	68 90 16 02 c0       	push   0xc0021690
c0014391:	57                   	push   edi
c0014392:	e8 6e c3 fe ff       	call   c0000705 <strcmp>
c0014397:	83 c4 10             	add    esp,0x10
c001439a:	85 c0                	test   eax,eax
c001439c:	75 0f                	jne    c00143ad <CPU::detectFeatures()+0x351>
c001439e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00143a8:	e9 86 00 00 00       	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00143ad:	50                   	push   eax
c00143ae:	50                   	push   eax
c00143af:	68 9d 16 02 c0       	push   0xc002169d
c00143b4:	57                   	push   edi
c00143b5:	e8 4b c3 fe ff       	call   c0000705 <strcmp>
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	85 c0                	test   eax,eax
c00143bf:	75 0c                	jne    c00143cd <CPU::detectFeatures()+0x371>
c00143c1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00143cb:	eb 66                	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00143cd:	50                   	push   eax
c00143ce:	50                   	push   eax
c00143cf:	68 aa 16 02 c0       	push   0xc00216aa
c00143d4:	57                   	push   edi
c00143d5:	e8 2b c3 fe ff       	call   c0000705 <strcmp>
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	85 c0                	test   eax,eax
c00143df:	75 0c                	jne    c00143ed <CPU::detectFeatures()+0x391>
c00143e1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00143eb:	eb 46                	jmp    c0014433 <CPU::detectFeatures()+0x3d7>
c00143ed:	50                   	push   eax
c00143ee:	50                   	push   eax
c00143ef:	68 b7 16 02 c0       	push   0xc00216b7
c00143f4:	57                   	push   edi
c00143f5:	e8 0b c3 fe ff       	call   c0000705 <strcmp>
c00143fa:	83 c4 10             	add    esp,0x10
c00143fd:	85 c0                	test   eax,eax
c00143ff:	74 e0                	je     c00143e1 <CPU::detectFeatures()+0x385>
c0014401:	50                   	push   eax
c0014402:	50                   	push   eax
c0014403:	68 c4 16 02 c0       	push   0xc00216c4
c0014408:	57                   	push   edi
c0014409:	e8 f7 c2 fe ff       	call   c0000705 <strcmp>
c001440e:	83 c4 10             	add    esp,0x10
c0014411:	85 c0                	test   eax,eax
c0014413:	74 cc                	je     c00143e1 <CPU::detectFeatures()+0x385>
c0014415:	51                   	push   ecx
c0014416:	51                   	push   ecx
c0014417:	68 d1 16 02 c0       	push   0xc00216d1
c001441c:	57                   	push   edi
c001441d:	e8 e3 c2 fe ff       	call   c0000705 <strcmp>
c0014422:	83 c4 10             	add    esp,0x10
c0014425:	85 c0                	test   eax,eax
c0014427:	74 b8                	je     c00143e1 <CPU::detectFeatures()+0x385>
c0014429:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014433:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014438:	0f 86 be 00 00 00    	jbe    c00144fc <CPU::detectFeatures()+0x4a0>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	68 80 00 00 00       	push   0x80
c0014446:	e8 10 fb ff ff       	call   c0013f5b <cpuidCheckExtendedEBX(unsigned int)>
c001444b:	83 e0 01             	and    eax,0x1
c001444e:	c1 e0 06             	shl    eax,0x6
c0014451:	88 c2                	mov    dl,al
c0014453:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014459:	83 e0 bf             	and    eax,0xffffffbf
c001445c:	09 d0                	or     eax,edx
c001445e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014464:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001446b:	e8 eb fa ff ff       	call   c0013f5b <cpuidCheckExtendedEBX(unsigned int)>
c0014470:	83 e0 01             	and    eax,0x1
c0014473:	c1 e0 04             	shl    eax,0x4
c0014476:	88 c2                	mov    dl,al
c0014478:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001447e:	83 e0 ef             	and    eax,0xffffffef
c0014481:	09 d0                	or     eax,edx
c0014483:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014489:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014490:	e8 c6 fa ff ff       	call   c0013f5b <cpuidCheckExtendedEBX(unsigned int)>
c0014495:	c1 e0 07             	shl    eax,0x7
c0014498:	88 c2                	mov    dl,al
c001449a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00144a0:	83 e0 7f             	and    eax,0x7f
c00144a3:	09 d0                	or     eax,edx
c00144a5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00144ab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00144b2:	e8 d1 fa ff ff       	call   c0013f88 <cpuidCheckExtendedECX(unsigned int)>
c00144b7:	83 e0 01             	and    eax,0x1
c00144ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00144c1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00144c7:	83 e0 f7             	and    eax,0xfffffff7
c00144ca:	09 d0                	or     eax,edx
c00144cc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00144d2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00144d9:	e8 aa fa ff ff       	call   c0013f88 <cpuidCheckExtendedECX(unsigned int)>
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	83 e0 01             	and    eax,0x1
c00144e4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00144eb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144f1:	83 e0 fb             	and    eax,0xfffffffb
c00144f4:	09 d0                	or     eax,edx
c00144f6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144fc:	83 ec 0c             	sub    esp,0xc
c00144ff:	56                   	push   esi
c0014500:	55                   	push   ebp
c0014501:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014505:	57                   	push   edi
c0014506:	8d 44 24 28          	lea    eax,[esp+0x28]
c001450a:	50                   	push   eax
c001450b:	6a 01                	push   0x1
c001450d:	e8 6c f9 ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014512:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014516:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001451c:	88 ca                	mov    dl,cl
c001451e:	83 e0 f0             	and    eax,0xfffffff0
c0014521:	83 e2 0f             	and    edx,0xf
c0014524:	09 d0                	or     eax,edx
c0014526:	88 ca                	mov    dl,cl
c0014528:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001452e:	c0 ea 04             	shr    dl,0x4
c0014531:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014535:	0f b6 c2             	movzx  eax,dl
c0014538:	83 c4 20             	add    esp,0x20
c001453b:	c1 e0 06             	shl    eax,0x6
c001453e:	89 c5                	mov    ebp,eax
c0014540:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014546:	66 25 3f c0          	and    ax,0xc03f
c001454a:	09 e8                	or     eax,ebp
c001454c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014553:	89 c8                	mov    eax,ecx
c0014555:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001455b:	c1 e8 08             	shr    eax,0x8
c001455e:	83 e2 3f             	and    edx,0x3f
c0014561:	83 e0 0f             	and    eax,0xf
c0014564:	89 c5                	mov    ebp,eax
c0014566:	c1 e5 06             	shl    ebp,0x6
c0014569:	09 d5                	or     ebp,edx
c001456b:	89 ea                	mov    edx,ebp
c001456d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014573:	88 c2                	mov    dl,al
c0014575:	c0 ea 02             	shr    dl,0x2
c0014578:	89 d5                	mov    ebp,edx
c001457a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014580:	83 e2 c0             	and    edx,0xffffffc0
c0014583:	09 d5                	or     ebp,edx
c0014585:	89 ea                	mov    edx,ebp
c0014587:	89 cd                	mov    ebp,ecx
c0014589:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001458f:	c1 ed 0c             	shr    ebp,0xc
c0014592:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014598:	83 e5 03             	and    ebp,0x3
c001459b:	83 e2 cf             	and    edx,0xffffffcf
c001459e:	c1 e5 04             	shl    ebp,0x4
c00145a1:	09 d5                	or     ebp,edx
c00145a3:	3c 06                	cmp    al,0x6
c00145a5:	89 ea                	mov    edx,ebp
c00145a7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00145ad:	74 04                	je     c00145b3 <CPU::detectFeatures()+0x557>
c00145af:	3c 0f                	cmp    al,0xf
c00145b1:	75 5c                	jne    c001460f <CPU::detectFeatures()+0x5b3>
c00145b3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00145b7:	89 cd                	mov    ebp,ecx
c00145b9:	c1 ed 10             	shr    ebp,0x10
c00145bc:	c1 e5 04             	shl    ebp,0x4
c00145bf:	09 ea                	or     edx,ebp
c00145c1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00145c7:	0f b6 d2             	movzx  edx,dl
c00145ca:	66 81 e5 3f c0       	and    bp,0xc03f
c00145cf:	c1 e2 06             	shl    edx,0x6
c00145d2:	09 ea                	or     edx,ebp
c00145d4:	3c 0f                	cmp    al,0xf
c00145d6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00145dd:	75 30                	jne    c001460f <CPU::detectFeatures()+0x5b3>
c00145df:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00145e5:	c1 e9 14             	shr    ecx,0x14
c00145e8:	83 e0 3f             	and    eax,0x3f
c00145eb:	83 c1 0f             	add    ecx,0xf
c00145ee:	88 ca                	mov    dl,cl
c00145f0:	c0 e9 02             	shr    cl,0x2
c00145f3:	c1 e2 06             	shl    edx,0x6
c00145f6:	09 d0                	or     eax,edx
c00145f8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00145fe:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014604:	83 e0 c0             	and    eax,0xffffffc0
c0014607:	09 c1                	or     ecx,eax
c0014609:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001460f:	83 ec 0c             	sub    esp,0xc
c0014612:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014619:	56                   	push   esi
c001461a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001461e:	50                   	push   eax
c001461f:	57                   	push   edi
c0014620:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014624:	55                   	push   ebp
c0014625:	68 00 00 00 80       	push   0x80000000
c001462a:	e8 4f f8 ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001462f:	83 c4 20             	add    esp,0x20
c0014632:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001463a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001463e:	76 1e                	jbe    c001465e <CPU::detectFeatures()+0x602>
c0014640:	83 ec 0c             	sub    esp,0xc
c0014643:	56                   	push   esi
c0014644:	50                   	push   eax
c0014645:	57                   	push   edi
c0014646:	55                   	push   ebp
c0014647:	68 01 00 00 80       	push   0x80000001
c001464c:	e8 2d f8 ff ff       	call   c0013e7e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014651:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001465b:	83 c4 20             	add    esp,0x20
c001465e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014664:	83 f8 01             	cmp    eax,0x1
c0014667:	75 6f                	jne    c00146d8 <CPU::detectFeatures()+0x67c>
c0014669:	51                   	push   ecx
c001466a:	51                   	push   ecx
c001466b:	68 dd 16 02 c0       	push   0xc00216dd
c0014670:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014674:	56                   	push   esi
c0014675:	e8 2d c0 fe ff       	call   c00006a7 <strcpy>
c001467a:	5f                   	pop    edi
c001467b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014681:	5d                   	pop    ebp
c0014682:	66 c1 e8 06          	shr    ax,0x6
c0014686:	0f b6 c0             	movzx  eax,al
c0014689:	50                   	push   eax
c001468a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014690:	c1 e8 0e             	shr    eax,0xe
c0014693:	0f b6 c0             	movzx  eax,al
c0014696:	50                   	push   eax
c0014697:	e8 8d f4 ff ff       	call   c0013b29 <lookupIntelCPUName(unsigned char, unsigned char)>
c001469c:	5a                   	pop    edx
c001469d:	59                   	pop    ecx
c001469e:	50                   	push   eax
c001469f:	56                   	push   esi
c00146a0:	e8 c6 c0 fe ff       	call   c000076b <strcat>
c00146a5:	5f                   	pop    edi
c00146a6:	5d                   	pop    ebp
c00146a7:	56                   	push   esi
c00146a8:	53                   	push   ebx
c00146a9:	e8 68 bf ff ff       	call   c0010616 <Device::setName(char const*)>
c00146ae:	58                   	pop    eax
c00146af:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146b5:	5a                   	pop    edx
c00146b6:	68 e4 16 02 c0       	push   0xc00216e4
c00146bb:	50                   	push   eax
c00146bc:	e8 44 c0 fe ff       	call   c0000705 <strcmp>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	85 c0                	test   eax,eax
c00146c6:	0f 85 73 03 00 00    	jne    c0014a3f <CPU::detectFeatures()+0x9e3>
c00146cc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00146d3:	e9 67 03 00 00       	jmp    c0014a3f <CPU::detectFeatures()+0x9e3>
c00146d8:	83 f8 02             	cmp    eax,0x2
c00146db:	0f 85 b5 00 00 00    	jne    c0014796 <CPU::detectFeatures()+0x73a>
c00146e1:	57                   	push   edi
c00146e2:	57                   	push   edi
c00146e3:	68 f6 16 02 c0       	push   0xc00216f6
c00146e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00146ec:	56                   	push   esi
c00146ed:	e8 b5 bf fe ff       	call   c00006a7 <strcpy>
c00146f2:	5d                   	pop    ebp
c00146f3:	58                   	pop    eax
c00146f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146fa:	66 c1 e8 06          	shr    ax,0x6
c00146fe:	0f b6 c0             	movzx  eax,al
c0014701:	50                   	push   eax
c0014702:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014708:	c1 e8 0e             	shr    eax,0xe
c001470b:	0f b6 c0             	movzx  eax,al
c001470e:	50                   	push   eax
c001470f:	e8 81 f2 ff ff       	call   c0013995 <lookupAMDCPUName(unsigned char, unsigned char)>
c0014714:	5a                   	pop    edx
c0014715:	59                   	pop    ecx
c0014716:	50                   	push   eax
c0014717:	56                   	push   esi
c0014718:	e8 4e c0 fe ff       	call   c000076b <strcat>
c001471d:	5f                   	pop    edi
c001471e:	5d                   	pop    ebp
c001471f:	56                   	push   esi
c0014720:	53                   	push   ebx
c0014721:	e8 f0 be ff ff       	call   c0010616 <Device::setName(char const*)>
c0014726:	58                   	pop    eax
c0014727:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001472d:	5a                   	pop    edx
c001472e:	68 fb 16 02 c0       	push   0xc00216fb
c0014733:	50                   	push   eax
c0014734:	e8 cc bf fe ff       	call   c0000705 <strcmp>
c0014739:	83 c4 10             	add    esp,0x10
c001473c:	85 c0                	test   eax,eax
c001473e:	75 20                	jne    c0014760 <CPU::detectFeatures()+0x704>
c0014740:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c0014746:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001474c:	a8 01                	test   al,0x1
c001474e:	74 10                	je     c0014760 <CPU::detectFeatures()+0x704>
c0014750:	83 e0 fe             	and    eax,0xfffffffe
c0014753:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014759:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014760:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014766:	c1 e8 0e             	shr    eax,0xe
c0014769:	3c 05                	cmp    al,0x5
c001476b:	0f 85 ce 02 00 00    	jne    c0014a3f <CPU::detectFeatures()+0x9e3>
c0014771:	56                   	push   esi
c0014772:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014778:	83 e0 0f             	and    eax,0xf
c001477b:	50                   	push   eax
c001477c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014782:	66 c1 e8 06          	shr    ax,0x6
c0014786:	0f b6 c0             	movzx  eax,al
c0014789:	50                   	push   eax
c001478a:	6a 05                	push   0x5
c001478c:	e8 7a f6 ff ff       	call   c0013e0b <AMD_K6_writeback(int, int, int)>
c0014791:	e9 1f 02 00 00       	jmp    c00149b5 <CPU::detectFeatures()+0x959>
c0014796:	8d 50 fd             	lea    edx,[eax-0x3]
c0014799:	83 fa 01             	cmp    edx,0x1
c001479c:	76 09                	jbe    c00147a7 <CPU::detectFeatures()+0x74b>
c001479e:	83 f8 06             	cmp    eax,0x6
c00147a1:	0f 85 91 01 00 00    	jne    c0014938 <CPU::detectFeatures()+0x8dc>
c00147a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147ad:	c1 ea 0e             	shr    edx,0xe
c00147b0:	80 fa 05             	cmp    dl,0x5
c00147b3:	75 7b                	jne    c0014830 <CPU::detectFeatures()+0x7d4>
c00147b5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147bb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00147c0:	66 81 fa 00 01       	cmp    dx,0x100
c00147c5:	75 0c                	jne    c00147d3 <CPU::detectFeatures()+0x777>
c00147c7:	51                   	push   ecx
c00147c8:	51                   	push   ecx
c00147c9:	68 02 17 02 c0       	push   0xc0021702
c00147ce:	e9 dc 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c00147d3:	66 81 fa 00 02       	cmp    dx,0x200
c00147d8:	75 0c                	jne    c00147e6 <CPU::detectFeatures()+0x78a>
c00147da:	52                   	push   edx
c00147db:	52                   	push   edx
c00147dc:	68 15 17 02 c0       	push   0xc0021715
c00147e1:	e9 c9 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c00147e6:	66 81 fa 40 02       	cmp    dx,0x240
c00147eb:	75 0c                	jne    c00147f9 <CPU::detectFeatures()+0x79d>
c00147ed:	50                   	push   eax
c00147ee:	50                   	push   eax
c00147ef:	68 27 17 02 c0       	push   0xc0021727
c00147f4:	e9 b6 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c00147f9:	83 f8 06             	cmp    eax,0x6
c00147fc:	75 0c                	jne    c001480a <CPU::detectFeatures()+0x7ae>
c00147fe:	50                   	push   eax
c00147ff:	50                   	push   eax
c0014800:	68 39 17 02 c0       	push   0xc0021739
c0014805:	e9 a5 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c001480a:	83 f8 04             	cmp    eax,0x4
c001480d:	75 0c                	jne    c001481b <CPU::detectFeatures()+0x7bf>
c001480f:	50                   	push   eax
c0014810:	50                   	push   eax
c0014811:	68 45 17 02 c0       	push   0xc0021745
c0014816:	e9 94 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c001481b:	83 f8 03             	cmp    eax,0x3
c001481e:	0f 85 1b 02 00 00    	jne    c0014a3f <CPU::detectFeatures()+0x9e3>
c0014824:	50                   	push   eax
c0014825:	50                   	push   eax
c0014826:	68 4d 17 02 c0       	push   0xc002174d
c001482b:	e9 7f 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014830:	80 fa 06             	cmp    dl,0x6
c0014833:	0f 85 db 00 00 00    	jne    c0014914 <CPU::detectFeatures()+0x8b8>
c0014839:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001483f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014844:	66 81 fa 80 01       	cmp    dx,0x180
c0014849:	75 0c                	jne    c0014857 <CPU::detectFeatures()+0x7fb>
c001484b:	50                   	push   eax
c001484c:	50                   	push   eax
c001484d:	68 58 17 02 c0       	push   0xc0021758
c0014852:	e9 58 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014857:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001485d:	66 f7 c1 80 ff       	test   cx,0xff80
c0014862:	75 0c                	jne    c0014870 <CPU::detectFeatures()+0x814>
c0014864:	50                   	push   eax
c0014865:	50                   	push   eax
c0014866:	68 68 17 02 c0       	push   0xc0021768
c001486b:	e9 3f 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014870:	66 81 fa 40 02       	cmp    dx,0x240
c0014875:	75 0c                	jne    c0014883 <CPU::detectFeatures()+0x827>
c0014877:	55                   	push   ebp
c0014878:	55                   	push   ebp
c0014879:	68 6f 17 02 c0       	push   0xc002176f
c001487e:	e9 2c 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014883:	66 81 fa 80 02       	cmp    dx,0x280
c0014888:	75 0c                	jne    c0014896 <CPU::detectFeatures()+0x83a>
c001488a:	57                   	push   edi
c001488b:	57                   	push   edi
c001488c:	68 78 17 02 c0       	push   0xc0021778
c0014891:	e9 19 01 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014896:	66 81 fa 40 03       	cmp    dx,0x340
c001489b:	74 ed                	je     c001488a <CPU::detectFeatures()+0x82e>
c001489d:	66 81 fa c0 03       	cmp    dx,0x3c0
c00148a2:	75 0c                	jne    c00148b0 <CPU::detectFeatures()+0x854>
c00148a4:	56                   	push   esi
c00148a5:	56                   	push   esi
c00148a6:	68 7f 17 02 c0       	push   0xc002177f
c00148ab:	e9 ff 00 00 00       	jmp    c00149af <CPU::detectFeatures()+0x953>
c00148b0:	83 f8 06             	cmp    eax,0x6
c00148b3:	0f 84 45 ff ff ff    	je     c00147fe <CPU::detectFeatures()+0x7a2>
c00148b9:	83 f8 04             	cmp    eax,0x4
c00148bc:	0f 84 4d ff ff ff    	je     c001480f <CPU::detectFeatures()+0x7b3>
c00148c2:	83 f8 03             	cmp    eax,0x3
c00148c5:	0f 85 74 01 00 00    	jne    c0014a3f <CPU::detectFeatures()+0x9e3>
c00148cb:	51                   	push   ecx
c00148cc:	51                   	push   ecx
c00148cd:	68 88 17 02 c0       	push   0xc0021788
c00148d2:	53                   	push   ebx
c00148d3:	e8 3e bd ff ff       	call   c0010616 <Device::setName(char const*)>
c00148d8:	b1 c1                	mov    cl,0xc1
c00148da:	88 c8                	mov    al,cl
c00148dc:	e6 22                	out    0x22,al
c00148de:	e4 23                	in     al,0x23
c00148e0:	88 c2                	mov    dl,al
c00148e2:	88 c8                	mov    al,cl
c00148e4:	e6 22                	out    0x22,al
c00148e6:	88 d0                	mov    al,dl
c00148e8:	83 c8 10             	or     eax,0x10
c00148eb:	e6 23                	out    0x23,al
c00148ed:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148f4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00148f7:	89 d0                	mov    eax,edx
c00148f9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00148ff:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014903:	40                   	inc    eax
c0014904:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001490a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001490f:	e9 a1 00 00 00       	jmp    c00149b5 <CPU::detectFeatures()+0x959>
c0014914:	83 f8 06             	cmp    eax,0x6
c0014917:	0f 84 e1 fe ff ff    	je     c00147fe <CPU::detectFeatures()+0x7a2>
c001491d:	83 f8 04             	cmp    eax,0x4
c0014920:	0f 84 e9 fe ff ff    	je     c001480f <CPU::detectFeatures()+0x7b3>
c0014926:	83 f8 03             	cmp    eax,0x3
c0014929:	0f 85 10 01 00 00    	jne    c0014a3f <CPU::detectFeatures()+0x9e3>
c001492f:	52                   	push   edx
c0014930:	52                   	push   edx
c0014931:	68 93 17 02 c0       	push   0xc0021793
c0014936:	eb 77                	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014938:	83 f8 07             	cmp    eax,0x7
c001493b:	75 09                	jne    c0014946 <CPU::detectFeatures()+0x8ea>
c001493d:	50                   	push   eax
c001493e:	50                   	push   eax
c001493f:	68 9d 17 02 c0       	push   0xc002179d
c0014944:	eb 69                	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014946:	83 f8 0a             	cmp    eax,0xa
c0014949:	75 09                	jne    c0014954 <CPU::detectFeatures()+0x8f8>
c001494b:	50                   	push   eax
c001494c:	50                   	push   eax
c001494d:	68 a8 17 02 c0       	push   0xc00217a8
c0014952:	eb 5b                	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014954:	83 f8 0b             	cmp    eax,0xb
c0014957:	75 09                	jne    c0014962 <CPU::detectFeatures()+0x906>
c0014959:	50                   	push   eax
c001495a:	50                   	push   eax
c001495b:	68 b0 17 02 c0       	push   0xc00217b0
c0014960:	eb 4d                	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014962:	83 f8 08             	cmp    eax,0x8
c0014965:	75 09                	jne    c0014970 <CPU::detectFeatures()+0x914>
c0014967:	50                   	push   eax
c0014968:	50                   	push   eax
c0014969:	68 b9 17 02 c0       	push   0xc00217b9
c001496e:	eb 3f                	jmp    c00149af <CPU::detectFeatures()+0x953>
c0014970:	83 f8 09             	cmp    eax,0x9
c0014973:	75 09                	jne    c001497e <CPU::detectFeatures()+0x922>
c0014975:	50                   	push   eax
c0014976:	50                   	push   eax
c0014977:	68 c1 17 02 c0       	push   0xc00217c1
c001497c:	eb 31                	jmp    c00149af <CPU::detectFeatures()+0x953>
c001497e:	83 f8 05             	cmp    eax,0x5
c0014981:	75 09                	jne    c001498c <CPU::detectFeatures()+0x930>
c0014983:	50                   	push   eax
c0014984:	50                   	push   eax
c0014985:	68 c9 17 02 c0       	push   0xc00217c9
c001498a:	eb 23                	jmp    c00149af <CPU::detectFeatures()+0x953>
c001498c:	83 f8 0c             	cmp    eax,0xc
c001498f:	75 09                	jne    c001499a <CPU::detectFeatures()+0x93e>
c0014991:	55                   	push   ebp
c0014992:	55                   	push   ebp
c0014993:	68 d7 17 02 c0       	push   0xc00217d7
c0014998:	eb 15                	jmp    c00149af <CPU::detectFeatures()+0x953>
c001499a:	83 f8 0d             	cmp    eax,0xd
c001499d:	75 09                	jne    c00149a8 <CPU::detectFeatures()+0x94c>
c001499f:	57                   	push   edi
c00149a0:	57                   	push   edi
c00149a1:	68 e2 17 02 c0       	push   0xc00217e2
c00149a6:	eb 07                	jmp    c00149af <CPU::detectFeatures()+0x953>
c00149a8:	56                   	push   esi
c00149a9:	56                   	push   esi
c00149aa:	68 f6 17 02 c0       	push   0xc00217f6
c00149af:	53                   	push   ebx
c00149b0:	e8 61 bc ff ff       	call   c0010616 <Device::setName(char const*)>
c00149b5:	83 c4 10             	add    esp,0x10
c00149b8:	e9 82 00 00 00       	jmp    c0014a3f <CPU::detectFeatures()+0x9e3>
c00149bd:	51                   	push   ecx
c00149be:	51                   	push   ecx
c00149bf:	68 42 16 02 c0       	push   0xc0021642
c00149c4:	57                   	push   edi
c00149c5:	e8 dd bc fe ff       	call   c00006a7 <strcpy>
c00149ca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00149d4:	e8 a6 b7 fe ff       	call   c000017f <is486>
c00149d9:	83 c4 10             	add    esp,0x10
c00149dc:	85 c0                	test   eax,eax
c00149de:	74 2d                	je     c0014a0d <CPU::detectFeatures()+0x9b1>
c00149e0:	52                   	push   edx
c00149e1:	52                   	push   edx
c00149e2:	68 02 18 02 c0       	push   0xc0021802
c00149e7:	53                   	push   ebx
c00149e8:	e8 29 bc ff ff       	call   c0010616 <Device::setName(char const*)>
c00149ed:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149f4:	e8 ef a3 00 00       	call   c001ede8 <CPU::readCR0()>
c00149f9:	83 c4 10             	add    esp,0x10
c00149fc:	83 e0 14             	and    eax,0x14
c00149ff:	83 f8 04             	cmp    eax,0x4
c0014a02:	75 1f                	jne    c0014a23 <CPU::detectFeatures()+0x9c7>
c0014a04:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014a0b:	eb 32                	jmp    c0014a3f <CPU::detectFeatures()+0x9e3>
c0014a0d:	50                   	push   eax
c0014a0e:	50                   	push   eax
c0014a0f:	68 0d 18 02 c0       	push   0xc002180d
c0014a14:	53                   	push   ebx
c0014a15:	e8 fc bb ff ff       	call   c0010616 <Device::setName(char const*)>
c0014a1a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014a21:	eb d1                	jmp    c00149f4 <CPU::detectFeatures()+0x998>
c0014a23:	e8 32 b7 fe ff       	call   c000015a <hasLegacyFPU>
c0014a28:	83 e0 01             	and    eax,0x1
c0014a2b:	8d 14 00             	lea    edx,[eax+eax*1]
c0014a2e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014a34:	83 e0 fd             	and    eax,0xfffffffd
c0014a37:	09 d0                	or     eax,edx
c0014a39:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014a3f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014a46:	83 c4 4c             	add    esp,0x4c
c0014a49:	5b                   	pop    ebx
c0014a4a:	5e                   	pop    esi
c0014a4b:	5f                   	pop    edi
c0014a4c:	5d                   	pop    ebp
c0014a4d:	c3                   	ret    

c0014a4e <CPU::setupSMEP()>:
c0014a4e:	83 ec 0c             	sub    esp,0xc
c0014a51:	e8 5c a6 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014a56:	0d 00 00 10 00       	or     eax,0x100000
c0014a5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a5f:	83 c4 0c             	add    esp,0xc
c0014a62:	e9 66 a6 00 00       	jmp    c001f0cd <CPU::writeCR4(unsigned long)>
c0014a67:	90                   	nop

c0014a68 <CPU::setupUMIP()>:
c0014a68:	83 ec 0c             	sub    esp,0xc
c0014a6b:	e8 42 a6 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014a70:	80 cc 08             	or     ah,0x8
c0014a73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a77:	83 c4 0c             	add    esp,0xc
c0014a7a:	e9 4e a6 00 00       	jmp    c001f0cd <CPU::writeCR4(unsigned long)>
c0014a7f:	90                   	nop

c0014a80 <CPU::setupTSC()>:
c0014a80:	83 ec 0c             	sub    esp,0xc
c0014a83:	e8 2a a6 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014a88:	83 c8 04             	or     eax,0x4
c0014a8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a8f:	83 c4 0c             	add    esp,0xc
c0014a92:	e9 36 a6 00 00       	jmp    c001f0cd <CPU::writeCR4(unsigned long)>
c0014a97:	90                   	nop

c0014a98 <CPU::setupLargePages()>:
c0014a98:	83 ec 0c             	sub    esp,0xc
c0014a9b:	e8 12 a6 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014aa0:	83 c8 10             	or     eax,0x10
c0014aa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014aa7:	83 c4 0c             	add    esp,0xc
c0014aaa:	e9 1e a6 00 00       	jmp    c001f0cd <CPU::writeCR4(unsigned long)>
c0014aaf:	90                   	nop

c0014ab0 <CPU::setupPAT()>:
c0014ab0:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014ab5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014abc:	74 2c                	je     c0014aea <CPU::setupPAT()+0x3a>
c0014abe:	53                   	push   ebx
c0014abf:	83 ec 10             	sub    esp,0x10
c0014ac2:	68 77 02 00 00       	push   0x277
c0014ac7:	50                   	push   eax
c0014ac8:	e8 07 67 ff ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c0014acd:	83 e2 f8             	and    edx,0xfffffff8
c0014ad0:	83 ca 01             	or     edx,0x1
c0014ad3:	52                   	push   edx
c0014ad4:	50                   	push   eax
c0014ad5:	68 77 02 00 00       	push   0x277
c0014ada:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0014ae0:	e8 1b 67 ff ff       	call   c000b200 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014ae5:	83 c4 28             	add    esp,0x28
c0014ae8:	5b                   	pop    ebx
c0014ae9:	c3                   	ret    
c0014aea:	c3                   	ret    
c0014aeb:	90                   	nop

c0014aec <CPU::setupMTRR()>:
c0014aec:	c3                   	ret    
c0014aed:	90                   	nop

c0014aee <CPU::setupGlobalPages()>:
c0014aee:	83 ec 0c             	sub    esp,0xc
c0014af1:	e8 bc a5 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014af6:	0c 80                	or     al,0x80
c0014af8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014afc:	83 c4 0c             	add    esp,0xc
c0014aff:	e9 c9 a5 00 00       	jmp    c001f0cd <CPU::writeCR4(unsigned long)>

c0014b04 <CPU::allowUsermodeDataAccess()>:
c0014b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b08:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014b0f:	74 03                	je     c0014b14 <CPU::allowUsermodeDataAccess()+0x10>
c0014b11:	0f 01 cb             	stac   
c0014b14:	c3                   	ret    
c0014b15:	90                   	nop

c0014b16 <CPU::prohibitUsermodeDataAccess()>:
c0014b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b1a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014b21:	74 03                	je     c0014b26 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014b23:	0f 01 ca             	clac   
c0014b26:	c3                   	ret    
c0014b27:	90                   	nop

c0014b28 <CPU::setupSMAP()>:
c0014b28:	53                   	push   ebx
c0014b29:	83 ec 08             	sub    esp,0x8
c0014b2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b30:	e8 7d a5 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	0d 00 00 20 00       	or     eax,0x200000
c0014b3d:	50                   	push   eax
c0014b3e:	e8 8a a5 00 00       	call   c001f0cd <CPU::writeCR4(unsigned long)>
c0014b43:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b47:	83 c4 18             	add    esp,0x18
c0014b4a:	5b                   	pop    ebx
c0014b4b:	eb c9                	jmp    c0014b16 <CPU::prohibitUsermodeDataAccess()>
c0014b4d:	90                   	nop

c0014b4e <CPU::setupFeatures()>:
c0014b4e:	53                   	push   ebx
c0014b4f:	83 ec 08             	sub    esp,0x8
c0014b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b56:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b5d:	74 0c                	je     c0014b6b <CPU::setupFeatures()+0x1d>
c0014b5f:	83 ec 0c             	sub    esp,0xc
c0014b62:	53                   	push   ebx
c0014b63:	e8 e6 fe ff ff       	call   c0014a4e <CPU::setupSMEP()>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b72:	74 0c                	je     c0014b80 <CPU::setupFeatures()+0x32>
c0014b74:	83 ec 0c             	sub    esp,0xc
c0014b77:	53                   	push   ebx
c0014b78:	e8 ab ff ff ff       	call   c0014b28 <CPU::setupSMAP()>
c0014b7d:	83 c4 10             	add    esp,0x10
c0014b80:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b87:	74 0c                	je     c0014b95 <CPU::setupFeatures()+0x47>
c0014b89:	83 ec 0c             	sub    esp,0xc
c0014b8c:	53                   	push   ebx
c0014b8d:	e8 d6 fe ff ff       	call   c0014a68 <CPU::setupUMIP()>
c0014b92:	83 c4 10             	add    esp,0x10
c0014b95:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b9c:	74 0c                	je     c0014baa <CPU::setupFeatures()+0x5c>
c0014b9e:	83 ec 0c             	sub    esp,0xc
c0014ba1:	53                   	push   ebx
c0014ba2:	e8 d9 fe ff ff       	call   c0014a80 <CPU::setupTSC()>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014bb1:	74 0c                	je     c0014bbf <CPU::setupFeatures()+0x71>
c0014bb3:	83 ec 0c             	sub    esp,0xc
c0014bb6:	53                   	push   ebx
c0014bb7:	e8 dc fe ff ff       	call   c0014a98 <CPU::setupLargePages()>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014bc6:	74 0c                	je     c0014bd4 <CPU::setupFeatures()+0x86>
c0014bc8:	83 ec 0c             	sub    esp,0xc
c0014bcb:	53                   	push   ebx
c0014bcc:	e8 1d ff ff ff       	call   c0014aee <CPU::setupGlobalPages()>
c0014bd1:	83 c4 10             	add    esp,0x10
c0014bd4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014bdb:	74 0d                	je     c0014bea <CPU::setupFeatures()+0x9c>
c0014bdd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014be1:	83 c4 08             	add    esp,0x8
c0014be4:	5b                   	pop    ebx
c0014be5:	e9 c6 fe ff ff       	jmp    c0014ab0 <CPU::setupPAT()>
c0014bea:	83 c4 08             	add    esp,0x8
c0014bed:	5b                   	pop    ebx
c0014bee:	c3                   	ret    
c0014bef:	90                   	nop

c0014bf0 <CPU::open(int, int, void*)>:
c0014bf0:	57                   	push   edi
c0014bf1:	56                   	push   esi
c0014bf2:	53                   	push   ebx
c0014bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bfb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014c0a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014c10:	50                   	push   eax
c0014c11:	e8 c2 68 ff ff       	call   c000b4d8 <GDT::setup()>
c0014c16:	83 c4 0c             	add    esp,0xc
c0014c19:	6a 00                	push   0x0
c0014c1b:	68 ef be ad de       	push   0xdeadbeef
c0014c20:	57                   	push   edi
c0014c21:	e8 94 8a ff ff       	call   c000d6ba <TSS::setup(unsigned long, unsigned long)>
c0014c26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c29:	e8 6c 8a ff ff       	call   c000d69a <TSS::flush()>
c0014c2e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c37:	e8 f6 6a ff ff       	call   c000b732 <IDT::setup()>
c0014c3c:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014c43:	e8 7c a4 00 00       	call   c001f0c4 <CPU::writeDR7(unsigned long)>
c0014c48:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c52:	e8 9f 75 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c0014c57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c5d:	89 30                	mov    DWORD PTR [eax],esi
c0014c5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c65:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c68:	58                   	pop    eax
c0014c69:	5a                   	pop    edx
c0014c6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c74:	e8 37 9a ff ff       	call   c000e6b0 <VAS::setCPUSpecific(unsigned long)>
c0014c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c7c:	e8 db f3 ff ff       	call   c001405c <CPU::detectFeatures()>
c0014c81:	e8 9a c7 ff ff       	call   c0011420 <setupInterruptController()>
c0014c86:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c8c:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0014c91:	83 e0 10             	and    eax,0x10
c0014c94:	83 f8 01             	cmp    eax,0x1
c0014c97:	19 c0                	sbb    eax,eax
c0014c99:	83 e0 46             	and    eax,0x46
c0014c9c:	83 c0 1e             	add    eax,0x1e
c0014c9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ca2:	e8 61 d9 ff ff       	call   c0012608 <setupTimer(int)>
c0014ca7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cb0:	e8 99 fe ff ff       	call   c0014b4e <CPU::setupFeatures()>
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	31 c0                	xor    eax,eax
c0014cba:	5b                   	pop    ebx
c0014cbb:	5e                   	pop    esi
c0014cbc:	5f                   	pop    edi
c0014cbd:	c3                   	ret    

c0014cbe <Krnl::panic(char const*)>:
c0014cbe:	55                   	push   ebp
c0014cbf:	89 e5                	mov    ebp,esp
c0014cc1:	53                   	push   ebx
c0014cc2:	83 ec 0c             	sub    esp,0xc
c0014cc5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014cc8:	fa                   	cli    
c0014cc9:	c6 05 f0 41 02 c0 01 	mov    BYTE PTR ds:0xc00241f0,0x1
c0014cd0:	53                   	push   ebx
c0014cd1:	c6 05 e0 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022be0,0x0
c0014cd8:	68 44 18 02 c0       	push   0xc0021844
c0014cdd:	e8 47 a3 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0014ce2:	58                   	pop    eax
c0014ce3:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014ce8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cee:	e8 08 82 ff ff       	call   c000cefb <setActiveTerminal(VgaText*)>
c0014cf3:	83 c4 0c             	add    esp,0xc
c0014cf6:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014cfb:	6a 01                	push   0x1
c0014cfd:	6a 0f                	push   0xf
c0014cff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d05:	e8 30 7c ff ff       	call   c000c93a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d0a:	5a                   	pop    edx
c0014d0b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d16:	e8 81 84 ff ff       	call   c000d19c <VgaText::clearScreen()>
c0014d1b:	59                   	pop    ecx
c0014d1c:	58                   	pop    eax
c0014d1d:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d22:	68 5d 18 02 c0       	push   0xc002185d
c0014d27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2d:	e8 e8 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014d32:	58                   	pop    eax
c0014d33:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d38:	5a                   	pop    edx
c0014d39:	68 fc 18 02 c0       	push   0xc00218fc
c0014d3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d44:	e8 d1 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014d49:	59                   	pop    ecx
c0014d4a:	58                   	pop    eax
c0014d4b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d50:	68 79 18 02 c0       	push   0xc0021879
c0014d55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d5b:	e8 ba 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014d60:	58                   	pop    eax
c0014d61:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d66:	5a                   	pop    edx
c0014d67:	53                   	push   ebx
c0014d68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6e:	e8 a7 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014d73:	59                   	pop    ecx
c0014d74:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d79:	5b                   	pop    ebx
c0014d7a:	68 99 18 02 c0       	push   0xc0021899
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 90 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014d8a:	58                   	pop    eax
c0014d8b:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014d90:	5a                   	pop    edx
c0014d91:	68 38 19 02 c0       	push   0xc0021938
c0014d96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d9c:	e8 79 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014da1:	59                   	pop    ecx
c0014da2:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014da7:	5b                   	pop    ebx
c0014da8:	68 79 18 02 c0       	push   0xc0021879
c0014dad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db3:	e8 62 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014db8:	58                   	pop    eax
c0014db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dbe:	5a                   	pop    edx
c0014dbf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dc2:	83 c0 0c             	add    eax,0xc
c0014dc5:	50                   	push   eax
c0014dc6:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014dcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd1:	e8 44 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014dd6:	59                   	pop    ecx
c0014dd7:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014ddc:	5b                   	pop    ebx
c0014ddd:	68 98 18 02 c0       	push   0xc0021898
c0014de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de8:	e8 2d 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014ded:	58                   	pop    eax
c0014dee:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014df3:	5a                   	pop    edx
c0014df4:	68 64 19 02 c0       	push   0xc0021964
c0014df9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dff:	e8 16 85 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014e04:	59                   	pop    ecx
c0014e05:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014e0a:	5b                   	pop    ebx
c0014e0b:	68 a4 19 02 c0       	push   0xc00219a4
c0014e10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e16:	e8 ff 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014e1b:	58                   	pop    eax
c0014e1c:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014e21:	5a                   	pop    edx
c0014e22:	68 84 18 02 c0       	push   0xc0021884
c0014e27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2d:	e8 e8 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014e32:	59                   	pop    ecx
c0014e33:	5b                   	pop    ebx
c0014e34:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014e37:	68 9c 18 02 c0       	push   0xc002189c
c0014e3c:	e8 e8 a1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0014e41:	58                   	pop    eax
c0014e42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e45:	5a                   	pop    edx
c0014e46:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e49:	68 a5 18 02 c0       	push   0xc00218a5
c0014e4e:	e8 d6 a1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0014e53:	59                   	pop    ecx
c0014e54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e57:	5b                   	pop    ebx
c0014e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e5d:	68 bd 10 02 c0       	push   0xc00210bd
c0014e62:	e8 c2 a1 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0014e67:	58                   	pop    eax
c0014e68:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014e6d:	5a                   	pop    edx
c0014e6e:	68 e8 19 02 c0       	push   0xc00219e8
c0014e73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e79:	e8 9c 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014e7e:	59                   	pop    ecx
c0014e7f:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014e84:	5b                   	pop    ebx
c0014e85:	68 ae 18 02 c0       	push   0xc00218ae
c0014e8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e90:	e8 85 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014e95:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014e9a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ea0:	e8 43 9f 00 00       	call   c001ede8 <CPU::readCR0()>
c0014ea5:	5a                   	pop    edx
c0014ea6:	59                   	pop    ecx
c0014ea7:	50                   	push   eax
c0014ea8:	53                   	push   ebx
c0014ea9:	e8 92 84 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014eae:	5b                   	pop    ebx
c0014eaf:	58                   	pop    eax
c0014eb0:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014eb5:	68 b8 18 02 c0       	push   0xc00218b8
c0014eba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec0:	e8 55 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014ec5:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014eca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014ed0:	e8 01 a2 00 00       	call   c001f0d6 <CPU::readCR2()>
c0014ed5:	5a                   	pop    edx
c0014ed6:	59                   	pop    ecx
c0014ed7:	50                   	push   eax
c0014ed8:	53                   	push   ebx
c0014ed9:	e8 62 84 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014ede:	5b                   	pop    ebx
c0014edf:	58                   	pop    eax
c0014ee0:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014ee5:	68 c2 18 02 c0       	push   0xc00218c2
c0014eea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef0:	e8 25 84 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014ef5:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014efa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014f00:	e8 70 9b 00 00       	call   c001ea75 <CPU::readCR3()>
c0014f05:	5a                   	pop    edx
c0014f06:	59                   	pop    ecx
c0014f07:	50                   	push   eax
c0014f08:	53                   	push   ebx
c0014f09:	e8 32 84 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014f0e:	5b                   	pop    ebx
c0014f0f:	58                   	pop    eax
c0014f10:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f15:	68 d5 18 02 c0       	push   0xc00218d5
c0014f1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f20:	e8 f5 83 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014f25:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f2a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014f30:	e8 7d a1 00 00       	call   c001f0b2 <CPU::readCR4()>
c0014f35:	5a                   	pop    edx
c0014f36:	59                   	pop    ecx
c0014f37:	50                   	push   eax
c0014f38:	53                   	push   ebx
c0014f39:	e8 02 84 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014f3e:	5b                   	pop    ebx
c0014f3f:	58                   	pop    eax
c0014f40:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f45:	68 df 18 02 c0       	push   0xc00218df
c0014f4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f50:	e8 c5 83 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014f55:	5a                   	pop    edx
c0014f56:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f5b:	59                   	pop    ecx
c0014f5c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f62:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014f65:	50                   	push   eax
c0014f66:	e8 d5 83 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014f6b:	5b                   	pop    ebx
c0014f6c:	58                   	pop    eax
c0014f6d:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f72:	68 f6 18 02 c0       	push   0xc00218f6
c0014f77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7d:	e8 98 83 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014f82:	5a                   	pop    edx
c0014f83:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014f88:	59                   	pop    ecx
c0014f89:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f8f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f92:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f95:	50                   	push   eax
c0014f96:	e8 a5 83 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014f9b:	5b                   	pop    ebx
c0014f9c:	58                   	pop    eax
c0014f9d:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014fa2:	68 f6 18 02 c0       	push   0xc00218f6
c0014fa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fad:	e8 68 83 ff ff       	call   c000d31a <VgaText::puts(char const*)>
c0014fb2:	59                   	pop    ecx
c0014fb3:	a1 f4 4b 02 c0       	mov    eax,ds:0xc0024bf4
c0014fb8:	5b                   	pop    ebx
c0014fb9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014fbf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014fc2:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fc4:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014fc7:	50                   	push   eax
c0014fc8:	e8 73 83 ff ff       	call   c000d340 <VgaText::putx(unsigned int)>
c0014fcd:	83 c4 10             	add    esp,0x10
c0014fd0:	b2 fe                	mov    dl,0xfe
c0014fd2:	e4 60                	in     al,0x60
c0014fd4:	3c 1c                	cmp    al,0x1c
c0014fd6:	74 04                	je     c0014fdc <Krnl::panic(char const*)+0x31e>
c0014fd8:	3c 5a                	cmp    al,0x5a
c0014fda:	75 f6                	jne    c0014fd2 <Krnl::panic(char const*)+0x314>
c0014fdc:	e4 64                	in     al,0x64
c0014fde:	a8 02                	test   al,0x2
c0014fe0:	75 fa                	jne    c0014fdc <Krnl::panic(char const*)+0x31e>
c0014fe2:	88 d0                	mov    al,dl
c0014fe4:	e6 64                	out    0x64,al
c0014fe6:	fa                   	cli    
c0014fe7:	f4                   	hlt    
c0014fe8:	eb e8                	jmp    c0014fd2 <Krnl::panic(char const*)+0x314>

c0014fea <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014fea:	55                   	push   ebp
c0014feb:	57                   	push   edi
c0014fec:	56                   	push   esi
c0014fed:	53                   	push   ebx
c0014fee:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014ff4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014ffb:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014ffd:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015000:	80 fb 40             	cmp    bl,0x40
c0015003:	75 1b                	jne    c0015020 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015005:	8a 16                	mov    dl,BYTE PTR [esi]
c0015007:	84 d2                	test   dl,dl
c0015009:	0f 84 f1 00 00 00    	je     c0015100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001500f:	8d 46 01             	lea    eax,[esi+0x1]
c0015012:	80 fa 3a             	cmp    dl,0x3a
c0015015:	74 04                	je     c001501b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015017:	89 c6                	mov    esi,eax
c0015019:	eb ea                	jmp    c0015005 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001501b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001501e:	89 c6                	mov    esi,eax
c0015020:	50                   	push   eax
c0015021:	6a 40                	push   0x40
c0015023:	6a 00                	push   0x0
c0015025:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015029:	50                   	push   eax
c001502a:	e8 d9 b5 fe ff       	call   c0000608 <memset>
c001502f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015036:	31 c0                	xor    eax,eax
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001503d:	84 c9                	test   cl,cl
c001503f:	0f 84 bb 00 00 00    	je     c0015100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015045:	3d c7 00 00 00       	cmp    eax,0xc7
c001504a:	0f 8f b0 00 00 00    	jg     c0015100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015050:	80 f9 0a             	cmp    cl,0xa
c0015053:	0f 85 98 00 00 00    	jne    c00150f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015059:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001505e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015062:	a8 df                	test   al,0xdf
c0015064:	0f 94 c1             	sete   cl
c0015067:	3c 23                	cmp    al,0x23
c0015069:	0f 94 c2             	sete   dl
c001506c:	08 d1                	or     cl,dl
c001506e:	75 4a                	jne    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015070:	8d 50 f7             	lea    edx,[eax-0x9]
c0015073:	80 fa 01             	cmp    dl,0x1
c0015076:	76 42                	jbe    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015078:	3c 5b                	cmp    al,0x5b
c001507a:	75 42                	jne    c00150be <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001507c:	80 fb 40             	cmp    bl,0x40
c001507f:	75 39                	jne    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015081:	83 ec 0c             	sub    esp,0xc
c0015084:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015088:	52                   	push   edx
c0015089:	e8 97 b5 fe ff       	call   c0000625 <strlen>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	83 f8 3f             	cmp    eax,0x3f
c0015094:	77 6a                	ja     c0015100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015096:	50                   	push   eax
c0015097:	50                   	push   eax
c0015098:	8d 54 24 61          	lea    edx,[esp+0x61]
c001509c:	52                   	push   edx
c001509d:	8d 54 24 24          	lea    edx,[esp+0x24]
c00150a1:	52                   	push   edx
c00150a2:	e8 00 b6 fe ff       	call   c00006a7 <strcpy>
c00150a7:	58                   	pop    eax
c00150a8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00150ac:	52                   	push   edx
c00150ad:	e8 73 b5 fe ff       	call   c0000625 <strlen>
c00150b2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	31 d2                	xor    edx,edx
c00150bc:	eb 3a                	jmp    c00150f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00150be:	80 fb 40             	cmp    bl,0x40
c00150c1:	74 06                	je     c00150c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00150c3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00150c7:	eb 20                	jmp    c00150e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00150c9:	50                   	push   eax
c00150ca:	50                   	push   eax
c00150cb:	55                   	push   ebp
c00150cc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00150d0:	50                   	push   eax
c00150d1:	e8 2f b6 fe ff       	call   c0000705 <strcmp>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	85 c0                	test   eax,eax
c00150db:	75 dd                	jne    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150dd:	eb e4                	jmp    c00150c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00150df:	8d 50 01             	lea    edx,[eax+0x1]
c00150e2:	80 f9 3d             	cmp    cl,0x3d
c00150e5:	74 1d                	je     c0015104 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00150e7:	89 d0                	mov    eax,edx
c00150e9:	8a 08                	mov    cl,BYTE PTR [eax]
c00150eb:	84 c9                	test   cl,cl
c00150ed:	75 f0                	jne    c00150df <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00150ef:	eb 0f                	jmp    c0015100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150f1:	8d 50 01             	lea    edx,[eax+0x1]
c00150f4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00150f8:	47                   	inc    edi
c00150f9:	89 d0                	mov    eax,edx
c00150fb:	e9 3b ff ff ff       	jmp    c001503b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015100:	31 c0                	xor    eax,eax
c0015102:	eb 33                	jmp    c0015137 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015104:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015108:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001510b:	50                   	push   eax
c001510c:	50                   	push   eax
c001510d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015111:	50                   	push   eax
c0015112:	56                   	push   esi
c0015113:	e8 ed b5 fe ff       	call   c0000705 <strcmp>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	85 c0                	test   eax,eax
c001511d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015121:	75 97                	jne    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015123:	51                   	push   ecx
c0015124:	51                   	push   ecx
c0015125:	52                   	push   edx
c0015126:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001512d:	e8 75 b5 fe ff       	call   c00006a7 <strcpy>
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	b0 01                	mov    al,0x1
c0015137:	81 c4 2c 01 00 00    	add    esp,0x12c
c001513d:	5b                   	pop    ebx
c001513e:	5e                   	pop    esi
c001513f:	5f                   	pop    edi
c0015140:	5d                   	pop    ebp
c0015141:	c3                   	ret    

c0015142 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015142:	57                   	push   edi
c0015143:	56                   	push   esi
c0015144:	53                   	push   ebx
c0015145:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001514b:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015152:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015159:	53                   	push   ebx
c001515a:	e8 c6 b4 fe ff       	call   c0000625 <strlen>
c001515f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015162:	89 c7                	mov    edi,eax
c0015164:	e8 bc b4 fe ff       	call   c0000625 <strlen>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015170:	31 ff                	xor    edi,edi
c0015172:	3d ff 00 00 00       	cmp    eax,0xff
c0015177:	0f 87 18 01 00 00    	ja     c0015295 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001517d:	51                   	push   ecx
c001517e:	51                   	push   ecx
c001517f:	56                   	push   esi
c0015180:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015184:	56                   	push   esi
c0015185:	e8 1d b5 fe ff       	call   c00006a7 <strcpy>
c001518a:	58                   	pop    eax
c001518b:	5a                   	pop    edx
c001518c:	68 34 1e 02 c0       	push   0xc0021e34
c0015191:	56                   	push   esi
c0015192:	e8 d4 b5 fe ff       	call   c000076b <strcat>
c0015197:	59                   	pop    ecx
c0015198:	58                   	pop    eax
c0015199:	53                   	push   ebx
c001519a:	56                   	push   esi
c001519b:	e8 cb b5 fe ff       	call   c000076b <strcat>
c00151a0:	58                   	pop    eax
c00151a1:	5a                   	pop    edx
c00151a2:	68 0e 1a 02 c0       	push   0xc0021a0e
c00151a7:	56                   	push   esi
c00151a8:	e8 be b5 fe ff       	call   c000076b <strcat>
c00151ad:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00151b4:	e8 81 9d ff ff       	call   c000ef3a <operator new(unsigned long)>
c00151b9:	83 c4 0c             	add    esp,0xc
c00151bc:	89 c3                	mov    ebx,eax
c00151be:	ff 35 f4 4b 02 c0    	push   DWORD PTR ds:0xc0024bf4
c00151c4:	56                   	push   esi
c00151c5:	50                   	push   eax
c00151c6:	e8 8d a3 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c00151cb:	59                   	pop    ecx
c00151cc:	5e                   	pop    esi
c00151cd:	6a 01                	push   0x1
c00151cf:	53                   	push   ebx
c00151d0:	e8 e7 a3 ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	85 c0                	test   eax,eax
c00151da:	74 08                	je     c00151e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c00151dc:	83 ec 0c             	sub    esp,0xc
c00151df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151e1:	53                   	push   ebx
c00151e2:	eb 2e                	jmp    c0015212 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00151e4:	52                   	push   edx
c00151e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c00151e9:	50                   	push   eax
c00151ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151ee:	50                   	push   eax
c00151ef:	53                   	push   ebx
c00151f0:	e8 73 a6 ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c00151f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	89 c1                	mov    ecx,eax
c00151fe:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015202:	75 13                	jne    c0015217 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015204:	83 ec 0c             	sub    esp,0xc
c0015207:	53                   	push   ebx
c0015208:	e8 0d a4 ff ff       	call   c000f61a <File::close()>
c001520d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001520f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015212:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015215:	eb 7b                	jmp    c0015292 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015217:	83 ec 0c             	sub    esp,0xc
c001521a:	50                   	push   eax
c001521b:	e8 2c 6a ff ff       	call   c000bc4c <malloc>
c0015220:	89 c6                	mov    esi,eax
c0015222:	58                   	pop    eax
c0015223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015225:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015229:	52                   	push   edx
c001522a:	56                   	push   esi
c001522b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001522f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015233:	53                   	push   ebx
c0015234:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015237:	83 c4 20             	add    esp,0x20
c001523a:	85 c0                	test   eax,eax
c001523c:	75 0a                	jne    c0015248 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001523e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015242:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015246:	74 18                	je     c0015260 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	31 ff                	xor    edi,edi
c001524d:	53                   	push   ebx
c001524e:	e8 c7 a3 ff ff       	call   c000f61a <File::close()>
c0015253:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015255:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	eb 35                	jmp    c0015295 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	53                   	push   ebx
c0015264:	e8 b1 a3 ff ff       	call   c000f61a <File::close()>
c0015269:	8b 03                	mov    eax,DWORD PTR [ebx]
c001526b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001526e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015271:	83 c4 0c             	add    esp,0xc
c0015274:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001527b:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015282:	56                   	push   esi
c0015283:	e8 62 fd ff ff       	call   c0014fea <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015288:	89 34 24             	mov    DWORD PTR [esp],esi
c001528b:	89 c7                	mov    edi,eax
c001528d:	e8 ca 69 ff ff       	call   c000bc5c <free>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	81 c4 10 01 00 00    	add    esp,0x110
c001529b:	89 f8                	mov    eax,edi
c001529d:	5b                   	pop    ebx
c001529e:	5e                   	pop    esi
c001529f:	5f                   	pop    edi
c00152a0:	c3                   	ret    

c00152a1 <Reg::getLine(char*, char*, char*)>:
c00152a1:	57                   	push   edi
c00152a2:	56                   	push   esi
c00152a3:	53                   	push   ebx
c00152a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00152a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00152ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00152b0:	57                   	push   edi
c00152b1:	56                   	push   esi
c00152b2:	53                   	push   ebx
c00152b3:	68 13 1a 02 c0       	push   0xc0021a13
c00152b8:	e8 85 fe ff ff       	call   c0015142 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00152bd:	83 c4 10             	add    esp,0x10
c00152c0:	84 c0                	test   al,al
c00152c2:	75 10                	jne    c00152d4 <Reg::getLine(char*, char*, char*)+0x33>
c00152c4:	57                   	push   edi
c00152c5:	56                   	push   esi
c00152c6:	53                   	push   ebx
c00152c7:	68 38 1a 02 c0       	push   0xc0021a38
c00152cc:	e8 71 fe ff ff       	call   c0015142 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	5b                   	pop    ebx
c00152d5:	5e                   	pop    esi
c00152d6:	5f                   	pop    edi
c00152d7:	c3                   	ret    

c00152d8 <Reg::readInt(char*, char*, int*)>:
c00152d8:	55                   	push   ebp
c00152d9:	57                   	push   edi
c00152da:	56                   	push   esi
c00152db:	53                   	push   ebx
c00152dc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00152e2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00152e6:	57                   	push   edi
c00152e7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152ee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152f5:	e8 a7 ff ff ff       	call   c00152a1 <Reg::getLine(char*, char*, char*)>
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	84 c0                	test   al,al
c00152ff:	0f 84 b3 00 00 00    	je     c00153b8 <Reg::readInt(char*, char*, int*)+0xe0>
c0015305:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015309:	80 fa 2b             	cmp    dl,0x2b
c001530c:	74 0c                	je     c001531a <Reg::readInt(char*, char*, int*)+0x42>
c001530e:	80 fa 2d             	cmp    dl,0x2d
c0015311:	75 0e                	jne    c0015321 <Reg::readInt(char*, char*, int*)+0x49>
c0015313:	ba 01 00 00 00       	mov    edx,0x1
c0015318:	eb 0b                	jmp    c0015325 <Reg::readInt(char*, char*, int*)+0x4d>
c001531a:	ba 01 00 00 00       	mov    edx,0x1
c001531f:	eb 02                	jmp    c0015323 <Reg::readInt(char*, char*, int*)+0x4b>
c0015321:	31 d2                	xor    edx,edx
c0015323:	31 c0                	xor    eax,eax
c0015325:	be 0a 00 00 00       	mov    esi,0xa
c001532a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001532f:	75 20                	jne    c0015351 <Reg::readInt(char*, char*, int*)+0x79>
c0015331:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015335:	80 f9 78             	cmp    cl,0x78
c0015338:	75 0a                	jne    c0015344 <Reg::readInt(char*, char*, int*)+0x6c>
c001533a:	83 c2 02             	add    edx,0x2
c001533d:	be 10 00 00 00       	mov    esi,0x10
c0015342:	eb 0d                	jmp    c0015351 <Reg::readInt(char*, char*, int*)+0x79>
c0015344:	80 f9 62             	cmp    cl,0x62
c0015347:	75 08                	jne    c0015351 <Reg::readInt(char*, char*, int*)+0x79>
c0015349:	83 c2 02             	add    edx,0x2
c001534c:	be 02 00 00 00       	mov    esi,0x2
c0015351:	01 d7                	add    edi,edx
c0015353:	31 d2                	xor    edx,edx
c0015355:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015357:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001535b:	80 fb 0d             	cmp    bl,0xd
c001535e:	0f 94 c3             	sete   bl
c0015361:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015366:	0f 94 c1             	sete   cl
c0015369:	08 cb                	or     bl,cl
c001536b:	75 3a                	jne    c00153a7 <Reg::readInt(char*, char*, int*)+0xcf>
c001536d:	0f af d6             	imul   edx,esi
c0015370:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015375:	83 fe 10             	cmp    esi,0x10
c0015378:	75 26                	jne    c00153a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001537a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001537e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015381:	89 e9                	mov    ecx,ebp
c0015383:	80 f9 05             	cmp    cl,0x5
c0015386:	77 06                	ja     c001538e <Reg::readInt(char*, char*, int*)+0xb6>
c0015388:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001538c:	eb 16                	jmp    c00153a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001538e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015392:	83 e9 61             	sub    ecx,0x61
c0015395:	80 f9 05             	cmp    cl,0x5
c0015398:	77 06                	ja     c00153a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001539a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001539e:	eb 04                	jmp    c00153a4 <Reg::readInt(char*, char*, int*)+0xcc>
c00153a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00153a4:	47                   	inc    edi
c00153a5:	eb ae                	jmp    c0015355 <Reg::readInt(char*, char*, int*)+0x7d>
c00153a7:	84 c0                	test   al,al
c00153a9:	74 02                	je     c00153ad <Reg::readInt(char*, char*, int*)+0xd5>
c00153ab:	f7 da                	neg    edx
c00153ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00153b4:	89 10                	mov    DWORD PTR [eax],edx
c00153b6:	88 d8                	mov    al,bl
c00153b8:	81 c4 ec 00 00 00    	add    esp,0xec
c00153be:	5b                   	pop    ebx
c00153bf:	5e                   	pop    esi
c00153c0:	5f                   	pop    edi
c00153c1:	5d                   	pop    ebp
c00153c2:	c3                   	ret    

c00153c3 <Reg::readString(char*, char*, char*, int)>:
c00153c3:	57                   	push   edi
c00153c4:	56                   	push   esi
c00153c5:	53                   	push   ebx
c00153c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c00153cc:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00153d3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00153d7:	57                   	push   edi
c00153d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153e6:	e8 b6 fe ff ff       	call   c00152a1 <Reg::getLine(char*, char*, char*)>
c00153eb:	83 c4 10             	add    esp,0x10
c00153ee:	89 c6                	mov    esi,eax
c00153f0:	84 c0                	test   al,al
c00153f2:	74 44                	je     c0015438 <Reg::readString(char*, char*, char*, int)+0x75>
c00153f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00153fb:	31 c0                	xor    eax,eax
c00153fd:	4a                   	dec    edx
c00153fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015401:	84 c9                	test   cl,cl
c0015403:	74 0f                	je     c0015414 <Reg::readString(char*, char*, char*, int)+0x51>
c0015405:	39 c2                	cmp    edx,eax
c0015407:	7e 0b                	jle    c0015414 <Reg::readString(char*, char*, char*, int)+0x51>
c0015409:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001540c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015411:	40                   	inc    eax
c0015412:	eb ea                	jmp    c00153fe <Reg::readString(char*, char*, char*, int)+0x3b>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	53                   	push   ebx
c0015418:	e8 08 b2 fe ff       	call   c0000625 <strlen>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015425:	75 11                	jne    c0015438 <Reg::readString(char*, char*, char*, int)+0x75>
c0015427:	83 ec 0c             	sub    esp,0xc
c001542a:	53                   	push   ebx
c001542b:	e8 f5 b1 fe ff       	call   c0000625 <strlen>
c0015430:	83 c4 10             	add    esp,0x10
c0015433:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015438:	81 c4 d0 00 00 00    	add    esp,0xd0
c001543e:	89 f0                	mov    eax,esi
c0015440:	5b                   	pop    ebx
c0015441:	5e                   	pop    esi
c0015442:	5f                   	pop    edi
c0015443:	c3                   	ret    

c0015444 <Reg::readBool(char*, char*, bool*)>:
c0015444:	83 ec 20             	sub    esp,0x20
c0015447:	8d 44 24 10          	lea    eax,[esp+0x10]
c001544b:	50                   	push   eax
c001544c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015450:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015454:	e8 7f fe ff ff       	call   c00152d8 <Reg::readInt(char*, char*, int*)>
c0015459:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001545e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015462:	0f 95 02             	setne  BYTE PTR [edx]
c0015465:	83 c4 2c             	add    esp,0x2c
c0015468:	c3                   	ret    

c0015469 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015469:	53                   	push   ebx
c001546a:	83 ec 1c             	sub    esp,0x1c
c001546d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015471:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015475:	50                   	push   eax
c0015476:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001547a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001547e:	e8 c1 ff ff ff       	call   c0015444 <Reg::readBool(char*, char*, bool*)>
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	84 c0                	test   al,al
c0015488:	74 04                	je     c001548e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001548a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001548e:	88 d8                	mov    al,bl
c0015490:	83 c4 18             	add    esp,0x18
c0015493:	5b                   	pop    ebx
c0015494:	c3                   	ret    

c0015495 <Reg::readIntWithDefault(char*, char*, int)>:
c0015495:	53                   	push   ebx
c0015496:	83 ec 1c             	sub    esp,0x1c
c0015499:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001549d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00154a1:	50                   	push   eax
c00154a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154aa:	e8 29 fe ff ff       	call   c00152d8 <Reg::readInt(char*, char*, int*)>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	84 c0                	test   al,al
c00154b4:	74 04                	je     c00154ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00154b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00154ba:	89 d8                	mov    eax,ebx
c00154bc:	83 c4 18             	add    esp,0x18
c00154bf:	5b                   	pop    ebx
c00154c0:	c3                   	ret    

c00154c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00154c1:	56                   	push   esi
c00154c2:	53                   	push   ebx
c00154c3:	51                   	push   ecx
c00154c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00154c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d0:	56                   	push   esi
c00154d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d9:	e8 e5 fe ff ff       	call   c00153c3 <Reg::readString(char*, char*, char*, int)>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	84 c0                	test   al,al
c00154e3:	74 02                	je     c00154e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00154e5:	89 f3                	mov    ebx,esi
c00154e7:	89 d8                	mov    eax,ebx
c00154e9:	5a                   	pop    edx
c00154ea:	5b                   	pop    ebx
c00154eb:	5e                   	pop    esi
c00154ec:	c3                   	ret    

c00154ed <Sys::exit(regs*)>:
c00154ed:	83 ec 18             	sub    esp,0x18
c00154f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154f7:	e8 14 33 00 00       	call   c0018810 <terminateTask(int)>
c00154fc:	83 c8 ff             	or     eax,0xffffffff
c00154ff:	83 c4 1c             	add    esp,0x1c
c0015502:	89 c2                	mov    edx,eax
c0015504:	c3                   	ret    

c0015505 <Sys::loadDLL(regs*)>:
c0015505:	56                   	push   esi
c0015506:	53                   	push   ebx
c0015507:	31 d2                	xor    edx,edx
c0015509:	51                   	push   ecx
c001550a:	b8 01 00 00 00       	mov    eax,0x1
c001550f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015513:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015517:	74 7d                	je     c0015596 <Sys::loadDLL(regs*)+0x91>
c0015519:	83 ec 0c             	sub    esp,0xc
c001551c:	68 14 01 00 00       	push   0x114
c0015521:	e8 14 9a ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015526:	83 c4 0c             	add    esp,0xc
c0015529:	89 c3                	mov    ebx,eax
c001552b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015530:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015533:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015536:	53                   	push   ebx
c0015537:	e8 1c a0 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c001553c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001553f:	e8 e6 a2 ff ff       	call   c000f82a <File::exists()>
c0015544:	83 c4 10             	add    esp,0x10
c0015547:	84 c0                	test   al,al
c0015549:	8b 03                	mov    eax,DWORD PTR [ebx]
c001554b:	75 11                	jne    c001555e <Sys::loadDLL(regs*)+0x59>
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	53                   	push   ebx
c0015551:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	b8 03 00 00 00       	mov    eax,0x3
c001555c:	eb 36                	jmp    c0015594 <Sys::loadDLL(regs*)+0x8f>
c001555e:	83 ec 0c             	sub    esp,0xc
c0015561:	53                   	push   ebx
c0015562:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015565:	58                   	pop    eax
c0015566:	5a                   	pop    edx
c0015567:	6a 00                	push   0x0
c0015569:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001556c:	e8 2c 21 00 00       	call   c001769d <Thr::loadDLL(char const*, bool)>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	89 c1                	mov    ecx,eax
c0015576:	31 d2                	xor    edx,edx
c0015578:	b8 04 00 00 00       	mov    eax,0x4
c001557d:	85 c9                	test   ecx,ecx
c001557f:	74 15                	je     c0015596 <Sys::loadDLL(regs*)+0x91>
c0015581:	53                   	push   ebx
c0015582:	53                   	push   ebx
c0015583:	ff 35 a8 37 02 c0    	push   DWORD PTR ds:0xc00237a8
c0015589:	51                   	push   ecx
c001558a:	e8 61 22 00 00       	call   c00177f0 <Thr::executeDLL(unsigned long, void*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	31 c0                	xor    eax,eax
c0015594:	31 d2                	xor    edx,edx
c0015596:	59                   	pop    ecx
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	c3                   	ret    

c001559a <Sys::read(regs*)>:
c001559a:	57                   	push   edi
c001559b:	56                   	push   esi
c001559c:	53                   	push   ebx
c001559d:	83 ec 10             	sub    esp,0x10
c00155a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00155a7:	83 f8 02             	cmp    eax,0x2
c00155aa:	77 10                	ja     c00155bc <Sys::read(regs*)+0x22>
c00155ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155ba:	eb 0e                	jmp    c00155ca <Sys::read(regs*)+0x30>
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	50                   	push   eax
c00155c0:	e8 60 86 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	89 c1                	mov    ecx,eax
c00155ca:	83 c8 ff             	or     eax,0xffffffff
c00155cd:	85 c9                	test   ecx,ecx
c00155cf:	89 c2                	mov    edx,eax
c00155d1:	74 28                	je     c00155fb <Sys::read(regs*)+0x61>
c00155d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00155db:	31 ff                	xor    edi,edi
c00155dd:	83 ec 0c             	sub    esp,0xc
c00155e0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00155e2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155e6:	52                   	push   edx
c00155e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155ea:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155ed:	57                   	push   edi
c00155ee:	56                   	push   esi
c00155ef:	51                   	push   ecx
c00155f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155f7:	83 c4 20             	add    esp,0x20
c00155fa:	99                   	cdq    
c00155fb:	83 c4 10             	add    esp,0x10
c00155fe:	5b                   	pop    ebx
c00155ff:	5e                   	pop    esi
c0015600:	5f                   	pop    edi
c0015601:	c3                   	ret    

c0015602 <Sys::sbrk(regs*)>:
c0015602:	56                   	push   esi
c0015603:	53                   	push   ebx
c0015604:	50                   	push   eax
c0015605:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001560a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001560e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015611:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015614:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001561a:	85 db                	test   ebx,ebx
c001561c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001561f:	74 02                	je     c0015623 <Sys::sbrk(regs*)+0x21>
c0015621:	79 06                	jns    c0015629 <Sys::sbrk(regs*)+0x27>
c0015623:	89 f0                	mov    eax,esi
c0015625:	31 d2                	xor    edx,edx
c0015627:	eb 2a                	jmp    c0015653 <Sys::sbrk(regs*)+0x51>
c0015629:	83 c8 ff             	or     eax,0xffffffff
c001562c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015632:	89 c2                	mov    edx,eax
c0015634:	77 1d                	ja     c0015653 <Sys::sbrk(regs*)+0x51>
c0015636:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001563c:	50                   	push   eax
c001563d:	c1 ea 0c             	shr    edx,0xc
c0015640:	68 07 04 00 00       	push   0x407
c0015645:	52                   	push   edx
c0015646:	51                   	push   ecx
c0015647:	e8 94 8e ff ff       	call   c000e4e0 <VAS::allocatePages(int, int)>
c001564c:	89 f0                	mov    eax,esi
c001564e:	31 d2                	xor    edx,edx
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	59                   	pop    ecx
c0015654:	5b                   	pop    ebx
c0015655:	5e                   	pop    esi
c0015656:	c3                   	ret    

c0015657 <Sys::write(regs*)>:
c0015657:	57                   	push   edi
c0015658:	56                   	push   esi
c0015659:	53                   	push   ebx
c001565a:	83 ec 18             	sub    esp,0x18
c001565d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015661:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015664:	68 53 1a 02 c0       	push   0xc0021a53
c0015669:	e8 bb 99 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015675:	77 10                	ja     c0015687 <Sys::write(regs*)+0x30>
c0015677:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001567c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001567f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015685:	eb 1b                	jmp    c00156a2 <Sys::write(regs*)+0x4b>
c0015687:	83 ec 0c             	sub    esp,0xc
c001568a:	68 72 1a 02 c0       	push   0xc0021a72
c001568f:	e8 95 99 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015694:	58                   	pop    eax
c0015695:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015698:	e8 88 85 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	89 c1                	mov    ecx,eax
c00156a2:	83 c8 ff             	or     eax,0xffffffff
c00156a5:	85 c9                	test   ecx,ecx
c00156a7:	89 c2                	mov    edx,eax
c00156a9:	74 28                	je     c00156d3 <Sys::write(regs*)+0x7c>
c00156ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156b3:	31 ff                	xor    edi,edi
c00156b5:	83 ec 0c             	sub    esp,0xc
c00156b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00156ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00156be:	52                   	push   edx
c00156bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156c2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00156c5:	57                   	push   edi
c00156c6:	56                   	push   esi
c00156c7:	51                   	push   ecx
c00156c8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00156cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00156cf:	83 c4 20             	add    esp,0x20
c00156d2:	99                   	cdq    
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	5b                   	pop    ebx
c00156d7:	5e                   	pop    esi
c00156d8:	5f                   	pop    edi
c00156d9:	c3                   	ret    

c00156da <Sys::yield(regs*)>:
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	e8 18 25 00 00       	call   c0017bfa <lockScheduler()>
c00156e2:	e8 47 28 00 00       	call   c0017f2e <schedule()>
c00156e7:	e8 10 25 00 00       	call   c0017bfc <unlockScheduler()>
c00156ec:	31 c0                	xor    eax,eax
c00156ee:	31 d2                	xor    edx,edx
c00156f0:	83 c4 0c             	add    esp,0xc
c00156f3:	c3                   	ret    

c00156f4 <sysCallGetPID(regs*)>:
c00156f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fe:	99                   	cdq    
c00156ff:	c3                   	ret    

c0015700 <sysCallSeekDir(regs*)>:
c0015700:	31 c0                	xor    eax,eax
c0015702:	31 d2                	xor    edx,edx
c0015704:	c3                   	ret    

c0015705 <sysCallTellDir(regs*)>:
c0015705:	31 c0                	xor    eax,eax
c0015707:	31 d2                	xor    edx,edx
c0015709:	c3                   	ret    

c001570a <sysCallVerify(regs*)>:
c001570a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001570e:	31 d2                	xor    edx,edx
c0015710:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015713:	c3                   	ret    

c0015714 <sysCallGetArgc(regs*)>:
c0015714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015719:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001571c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015722:	99                   	cdq    
c0015723:	c3                   	ret    

c0015724 <sysFormatDisk(regs*)>:
c0015724:	56                   	push   esi
c0015725:	53                   	push   ebx
c0015726:	53                   	push   ebx
c0015727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001572b:	8b 1d 08 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023908
c0015731:	eb 25                	jmp    c0015758 <sysFormatDisk(regs*)+0x34>
c0015733:	83 ec 0c             	sub    esp,0xc
c0015736:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015739:	8b 13                	mov    edx,DWORD PTR [ebx]
c001573b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001573e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015741:	50                   	push   eax
c0015742:	ff 34 85 a0 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc260]
c0015749:	53                   	push   ebx
c001574a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001574d:	83 c4 20             	add    esp,0x20
c0015750:	83 f8 08             	cmp    eax,0x8
c0015753:	75 12                	jne    c0015767 <sysFormatDisk(regs*)+0x43>
c0015755:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015758:	85 db                	test   ebx,ebx
c001575a:	75 d7                	jne    c0015733 <sysFormatDisk(regs*)+0xf>
c001575c:	59                   	pop    ecx
c001575d:	b8 03 00 00 00       	mov    eax,0x3
c0015762:	31 d2                	xor    edx,edx
c0015764:	5b                   	pop    ebx
c0015765:	5e                   	pop    esi
c0015766:	c3                   	ret    
c0015767:	85 c0                	test   eax,eax
c0015769:	74 1b                	je     c0015786 <sysFormatDisk(regs*)+0x62>
c001576b:	83 f8 09             	cmp    eax,0x9
c001576e:	74 0b                	je     c001577b <sysFormatDisk(regs*)+0x57>
c0015770:	59                   	pop    ecx
c0015771:	b8 02 00 00 00       	mov    eax,0x2
c0015776:	31 d2                	xor    edx,edx
c0015778:	5b                   	pop    ebx
c0015779:	5e                   	pop    esi
c001577a:	c3                   	ret    
c001577b:	59                   	pop    ecx
c001577c:	b8 01 00 00 00       	mov    eax,0x1
c0015781:	31 d2                	xor    edx,edx
c0015783:	5b                   	pop    ebx
c0015784:	5e                   	pop    esi
c0015785:	c3                   	ret    
c0015786:	59                   	pop    ecx
c0015787:	31 c0                	xor    eax,eax
c0015789:	31 d2                	xor    edx,edx
c001578b:	5b                   	pop    ebx
c001578c:	5e                   	pop    esi
c001578d:	c3                   	ret    

c001578e <sysSetDiskVolumeLabel(regs*)>:
c001578e:	56                   	push   esi
c001578f:	53                   	push   ebx
c0015790:	53                   	push   ebx
c0015791:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015795:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015798:	83 f8 19             	cmp    eax,0x19
c001579b:	77 29                	ja     c00157c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001579d:	8b 0c 85 a0 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc260]
c00157a4:	85 c9                	test   ecx,ecx
c00157a6:	74 1e                	je     c00157c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00157ab:	85 d2                	test   edx,edx
c00157ad:	74 17                	je     c00157c6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00157af:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00157b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00157b7:	52                   	push   edx
c00157b8:	50                   	push   eax
c00157b9:	51                   	push   ecx
c00157ba:	53                   	push   ebx
c00157bb:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00157be:	83 c4 10             	add    esp,0x10
c00157c1:	99                   	cdq    
c00157c2:	59                   	pop    ecx
c00157c3:	5b                   	pop    ebx
c00157c4:	5e                   	pop    esi
c00157c5:	c3                   	ret    
c00157c6:	59                   	pop    ecx
c00157c7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157d1:	5b                   	pop    ebx
c00157d2:	5e                   	pop    esi
c00157d3:	c3                   	ret    

c00157d4 <sysGetDiskVolumeLabel(regs*)>:
c00157d4:	57                   	push   edi
c00157d5:	56                   	push   esi
c00157d6:	53                   	push   ebx
c00157d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157db:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00157de:	83 fa 19             	cmp    edx,0x19
c00157e1:	77 34                	ja     c0015817 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157e3:	8b 0c 95 a0 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc260]
c00157ea:	85 c9                	test   ecx,ecx
c00157ec:	74 29                	je     c0015817 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157ee:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00157f1:	85 db                	test   ebx,ebx
c00157f3:	74 22                	je     c0015817 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157f5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157f8:	85 c0                	test   eax,eax
c00157fa:	74 1b                	je     c0015817 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157fc:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015802:	83 ec 0c             	sub    esp,0xc
c0015805:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015807:	50                   	push   eax
c0015808:	53                   	push   ebx
c0015809:	52                   	push   edx
c001580a:	51                   	push   ecx
c001580b:	56                   	push   esi
c001580c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001580f:	83 c4 20             	add    esp,0x20
c0015812:	99                   	cdq    
c0015813:	5b                   	pop    ebx
c0015814:	5e                   	pop    esi
c0015815:	5f                   	pop    edi
c0015816:	c3                   	ret    
c0015817:	5b                   	pop    ebx
c0015818:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001581d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015822:	5e                   	pop    esi
c0015823:	5f                   	pop    edi
c0015824:	c3                   	ret    

c0015825 <sysShutdown(regs*)>:
c0015825:	83 ec 0c             	sub    esp,0xc
c0015828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001582c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001582f:	85 c0                	test   eax,eax
c0015831:	74 18                	je     c001584b <sysShutdown(regs*)+0x26>
c0015833:	83 f8 01             	cmp    eax,0x1
c0015836:	74 38                	je     c0015870 <sysShutdown(regs*)+0x4b>
c0015838:	83 f8 02             	cmp    eax,0x2
c001583b:	74 24                	je     c0015861 <sysShutdown(regs*)+0x3c>
c001583d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015842:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015847:	83 c4 0c             	add    esp,0xc
c001584a:	c3                   	ret    
c001584b:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0015850:	8b 10                	mov    edx,DWORD PTR [eax]
c0015852:	6a 00                	push   0x0
c0015854:	6a 00                	push   0x0
c0015856:	6a 00                	push   0x0
c0015858:	50                   	push   eax
c0015859:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001585c:	83 c4 10             	add    esp,0x10
c001585f:	eb dc                	jmp    c001583d <sysShutdown(regs*)+0x18>
c0015861:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0015866:	8b 10                	mov    edx,DWORD PTR [eax]
c0015868:	6a 00                	push   0x0
c001586a:	6a 00                	push   0x0
c001586c:	6a 01                	push   0x1
c001586e:	eb e8                	jmp    c0015858 <sysShutdown(regs*)+0x33>
c0015870:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0015875:	85 c0                	test   eax,eax
c0015877:	74 02                	je     c001587b <sysShutdown(regs*)+0x56>
c0015879:	ff d0                	call   eax
c001587b:	31 c0                	xor    eax,eax
c001587d:	31 d2                	xor    edx,edx
c001587f:	83 c4 0c             	add    esp,0xc
c0015882:	c3                   	ret    

c0015883 <sysCallGetCwd(regs*)>:
c0015883:	83 ec 10             	sub    esp,0x10
c0015886:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001588a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001588d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015890:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015895:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015898:	e8 2c a0 ff ff       	call   c000f8c9 <getcwd(Process*, char*, int)>
c001589d:	83 c4 1c             	add    esp,0x1c
c00158a0:	99                   	cdq    
c00158a1:	c3                   	ret    

c00158a2 <sysCallSetCwd(regs*)>:
c00158a2:	83 ec 14             	sub    esp,0x14
c00158a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158a9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158b4:	e8 3a a0 ff ff       	call   c000f8f3 <setcwd(Process*, char*)>
c00158b9:	83 c4 1c             	add    esp,0x1c
c00158bc:	99                   	cdq    
c00158bd:	c3                   	ret    

c00158be <sysCallRealpath(regs*)>:
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00158c8:	85 d2                	test   edx,edx
c00158ca:	74 07                	je     c00158d3 <sysCallRealpath(regs*)+0x15>
c00158cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00158cf:	85 c0                	test   eax,eax
c00158d1:	75 0b                	jne    c00158de <sysCallRealpath(regs*)+0x20>
c00158d3:	b8 01 00 00 00       	mov    eax,0x1
c00158d8:	31 d2                	xor    edx,edx
c00158da:	83 c4 0c             	add    esp,0xc
c00158dd:	c3                   	ret    
c00158de:	51                   	push   ecx
c00158df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158e5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158e8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158ee:	51                   	push   ecx
c00158ef:	52                   	push   edx
c00158f0:	50                   	push   eax
c00158f1:	e8 b8 9a ff ff       	call   c000f3ae <standardiseFiles(char*, char const*, char const*)>
c00158f6:	83 c4 10             	add    esp,0x10
c00158f9:	31 c0                	xor    eax,eax
c00158fb:	31 d2                	xor    edx,edx
c00158fd:	83 c4 0c             	add    esp,0xc
c0015900:	c3                   	ret    

c0015901 <sysCallReadDir(regs*)>:
c0015901:	53                   	push   ebx
c0015902:	83 ec 18             	sub    esp,0x18
c0015905:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015909:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001590c:	83 f8 02             	cmp    eax,0x2
c001590f:	76 53                	jbe    c0015964 <sysCallReadDir(regs*)+0x63>
c0015911:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015914:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001591a:	77 4f                	ja     c001596b <sysCallReadDir(regs*)+0x6a>
c001591c:	83 ec 0c             	sub    esp,0xc
c001591f:	50                   	push   eax
c0015920:	e8 00 83 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	85 c0                	test   eax,eax
c001592a:	74 50                	je     c001597c <sysCallReadDir(regs*)+0x7b>
c001592c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	8b 10                	mov    edx,DWORD PTR [eax]
c0015939:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001593d:	51                   	push   ecx
c001593e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015941:	6a 00                	push   0x0
c0015943:	68 10 01 00 00       	push   0x110
c0015948:	50                   	push   eax
c0015949:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001594c:	83 c4 20             	add    esp,0x20
c001594f:	85 c0                	test   eax,eax
c0015951:	74 38                	je     c001598b <sysCallReadDir(regs*)+0x8a>
c0015953:	83 f8 07             	cmp    eax,0x7
c0015956:	74 0c                	je     c0015964 <sysCallReadDir(regs*)+0x63>
c0015958:	b8 02 00 00 00       	mov    eax,0x2
c001595d:	31 d2                	xor    edx,edx
c001595f:	83 c4 18             	add    esp,0x18
c0015962:	5b                   	pop    ebx
c0015963:	c3                   	ret    
c0015964:	b8 01 00 00 00       	mov    eax,0x1
c0015969:	eb f2                	jmp    c001595d <sysCallReadDir(regs*)+0x5c>
c001596b:	83 ec 08             	sub    esp,0x8
c001596e:	52                   	push   edx
c001596f:	68 94 1a 02 c0       	push   0xc0021a94
c0015974:	e8 b0 96 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015981:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015986:	83 c4 18             	add    esp,0x18
c0015989:	5b                   	pop    ebx
c001598a:	c3                   	ret    
c001598b:	31 c0                	xor    eax,eax
c001598d:	eb ce                	jmp    c001595d <sysCallReadDir(regs*)+0x5c>

c001598f <sysCallIsATTY(regs*)>:
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015996:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015999:	83 f8 02             	cmp    eax,0x2
c001599c:	76 07                	jbe    c00159a5 <sysCallIsATTY(regs*)+0x16>
c001599e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00159a3:	75 26                	jne    c00159cb <sysCallIsATTY(regs*)+0x3c>
c00159a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159b3:	85 c0                	test   eax,eax
c00159b5:	74 24                	je     c00159db <sysCallIsATTY(regs*)+0x4c>
c00159b7:	83 ec 0c             	sub    esp,0xc
c00159ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00159bc:	50                   	push   eax
c00159bd:	ff 12                	call   DWORD PTR [edx]
c00159bf:	31 d2                	xor    edx,edx
c00159c1:	0f b6 c0             	movzx  eax,al
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	83 c4 0c             	add    esp,0xc
c00159ca:	c3                   	ret    
c00159cb:	83 ec 0c             	sub    esp,0xc
c00159ce:	50                   	push   eax
c00159cf:	e8 51 82 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	85 c0                	test   eax,eax
c00159d9:	75 dc                	jne    c00159b7 <sysCallIsATTY(regs*)+0x28>
c00159db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159e5:	83 c4 0c             	add    esp,0xc
c00159e8:	c3                   	ret    

c00159e9 <sysCallSeek(regs*)>:
c00159e9:	53                   	push   ebx
c00159ea:	83 ec 08             	sub    esp,0x8
c00159ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159f4:	83 f8 02             	cmp    eax,0x2
c00159f7:	76 4a                	jbe    c0015a43 <sysCallSeek(regs*)+0x5a>
c00159f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159fe:	77 32                	ja     c0015a32 <sysCallSeek(regs*)+0x49>
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	50                   	push   eax
c0015a04:	e8 1c 82 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015a09:	83 c4 0c             	add    esp,0xc
c0015a0c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015a0f:	31 db                	xor    ebx,ebx
c0015a11:	53                   	push   ebx
c0015a12:	51                   	push   ecx
c0015a13:	50                   	push   eax
c0015a14:	e8 61 9c ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	85 c0                	test   eax,eax
c0015a1e:	0f 95 c0             	setne  al
c0015a21:	31 d2                	xor    edx,edx
c0015a23:	0f b6 c0             	movzx  eax,al
c0015a26:	f7 d8                	neg    eax
c0015a28:	83 d2 00             	adc    edx,0x0
c0015a2b:	83 c4 08             	add    esp,0x8
c0015a2e:	f7 da                	neg    edx
c0015a30:	5b                   	pop    ebx
c0015a31:	c3                   	ret    
c0015a32:	83 ec 08             	sub    esp,0x8
c0015a35:	50                   	push   eax
c0015a36:	68 50 1b 02 c0       	push   0xc0021b50
c0015a3b:	e8 e9 95 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015a40:	83 c4 10             	add    esp,0x10
c0015a43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a4d:	83 c4 08             	add    esp,0x8
c0015a50:	5b                   	pop    ebx
c0015a51:	c3                   	ret    

c0015a52 <sysCallTell(regs*)>:
c0015a52:	53                   	push   ebx
c0015a53:	83 ec 08             	sub    esp,0x8
c0015a56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a5d:	83 f8 02             	cmp    eax,0x2
c0015a60:	76 5e                	jbe    c0015ac0 <sysCallTell(regs*)+0x6e>
c0015a62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a67:	77 2d                	ja     c0015a96 <sysCallTell(regs*)+0x44>
c0015a69:	83 ec 0c             	sub    esp,0xc
c0015a6c:	50                   	push   eax
c0015a6d:	e8 b3 81 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015a72:	5a                   	pop    edx
c0015a73:	59                   	pop    ecx
c0015a74:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a77:	50                   	push   eax
c0015a78:	e8 53 9c ff ff       	call   c000f6d0 <File::tell(unsigned long long*)>
c0015a7d:	83 c4 10             	add    esp,0x10
c0015a80:	85 c0                	test   eax,eax
c0015a82:	0f 95 c0             	setne  al
c0015a85:	31 d2                	xor    edx,edx
c0015a87:	0f b6 c0             	movzx  eax,al
c0015a8a:	f7 d8                	neg    eax
c0015a8c:	83 d2 00             	adc    edx,0x0
c0015a8f:	83 c4 08             	add    esp,0x8
c0015a92:	f7 da                	neg    edx
c0015a94:	5b                   	pop    ebx
c0015a95:	c3                   	ret    
c0015a96:	83 ec 08             	sub    esp,0x8
c0015a99:	50                   	push   eax
c0015a9a:	68 6a 1b 02 c0       	push   0xc0021b6a
c0015a9f:	e8 85 95 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015aa4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015aa7:	83 c4 10             	add    esp,0x10
c0015aaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ab7:	31 d2                	xor    edx,edx
c0015ab9:	31 c0                	xor    eax,eax
c0015abb:	83 c4 08             	add    esp,0x8
c0015abe:	5b                   	pop    ebx
c0015abf:	c3                   	ret    
c0015ac0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ac5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015aca:	83 c4 08             	add    esp,0x8
c0015acd:	5b                   	pop    ebx
c0015ace:	c3                   	ret    

c0015acf <sysCallSizeFromFilename(regs*)>:
c0015acf:	57                   	push   edi
c0015ad0:	56                   	push   esi
c0015ad1:	53                   	push   ebx
c0015ad2:	83 ec 10             	sub    esp,0x10
c0015ad5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015ad9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015adc:	83 fb 02             	cmp    ebx,0x2
c0015adf:	0f 86 8a 00 00 00    	jbe    c0015b6f <sysCallSizeFromFilename(regs*)+0xa0>
c0015ae5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015aeb:	77 56                	ja     c0015b43 <sysCallSizeFromFilename(regs*)+0x74>
c0015aed:	83 ec 0c             	sub    esp,0xc
c0015af0:	68 14 01 00 00       	push   0x114
c0015af5:	e8 40 94 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015afa:	83 c4 0c             	add    esp,0xc
c0015afd:	89 c7                	mov    edi,eax
c0015aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b04:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b07:	53                   	push   ebx
c0015b08:	57                   	push   edi
c0015b09:	e8 4a 9a ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0015b0e:	83 c4 0c             	add    esp,0xc
c0015b11:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015b15:	50                   	push   eax
c0015b16:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b19:	57                   	push   edi
c0015b1a:	e8 49 9d ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c0015b1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015b22:	89 c3                	mov    ebx,eax
c0015b24:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	31 c0                	xor    eax,eax
c0015b2e:	85 db                	test   ebx,ebx
c0015b30:	0f 95 c0             	setne  al
c0015b33:	31 d2                	xor    edx,edx
c0015b35:	f7 d8                	neg    eax
c0015b37:	83 d2 00             	adc    edx,0x0
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	f7 da                	neg    edx
c0015b3f:	5b                   	pop    ebx
c0015b40:	5e                   	pop    esi
c0015b41:	5f                   	pop    edi
c0015b42:	c3                   	ret    
c0015b43:	83 ec 08             	sub    esp,0x8
c0015b46:	53                   	push   ebx
c0015b47:	68 84 1b 02 c0       	push   0xc0021b84
c0015b4c:	e8 d8 94 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015b51:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b54:	83 c4 10             	add    esp,0x10
c0015b57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b5d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b64:	31 d2                	xor    edx,edx
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	31 c0                	xor    eax,eax
c0015b6b:	5b                   	pop    ebx
c0015b6c:	5e                   	pop    esi
c0015b6d:	5f                   	pop    edi
c0015b6e:	c3                   	ret    
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b77:	5b                   	pop    ebx
c0015b78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b7d:	5e                   	pop    esi
c0015b7e:	5f                   	pop    edi
c0015b7f:	c3                   	ret    

c0015b80 <sysCallSize(regs*)>:
c0015b80:	53                   	push   ebx
c0015b81:	83 ec 18             	sub    esp,0x18
c0015b84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b8b:	83 f8 02             	cmp    eax,0x2
c0015b8e:	76 64                	jbe    c0015bf4 <sysCallSize(regs*)+0x74>
c0015b90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b95:	77 33                	ja     c0015bca <sysCallSize(regs*)+0x4a>
c0015b97:	83 ec 0c             	sub    esp,0xc
c0015b9a:	50                   	push   eax
c0015b9b:	e8 85 80 ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015ba0:	83 c4 0c             	add    esp,0xc
c0015ba3:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015ba7:	52                   	push   edx
c0015ba8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015bab:	50                   	push   eax
c0015bac:	e8 b7 9c ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c0015bb1:	83 c4 10             	add    esp,0x10
c0015bb4:	85 c0                	test   eax,eax
c0015bb6:	0f 95 c0             	setne  al
c0015bb9:	31 d2                	xor    edx,edx
c0015bbb:	0f b6 c0             	movzx  eax,al
c0015bbe:	f7 d8                	neg    eax
c0015bc0:	83 d2 00             	adc    edx,0x0
c0015bc3:	83 c4 18             	add    esp,0x18
c0015bc6:	f7 da                	neg    edx
c0015bc8:	5b                   	pop    ebx
c0015bc9:	c3                   	ret    
c0015bca:	83 ec 08             	sub    esp,0x8
c0015bcd:	50                   	push   eax
c0015bce:	68 84 1b 02 c0       	push   0xc0021b84
c0015bd3:	e8 51 94 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015bd8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015be4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015beb:	31 d2                	xor    edx,edx
c0015bed:	31 c0                	xor    eax,eax
c0015bef:	83 c4 18             	add    esp,0x18
c0015bf2:	5b                   	pop    ebx
c0015bf3:	c3                   	ret    
c0015bf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bfe:	83 c4 18             	add    esp,0x18
c0015c01:	5b                   	pop    ebx
c0015c02:	c3                   	ret    

c0015c03 <sysCallClose(regs*)>:
c0015c03:	53                   	push   ebx
c0015c04:	83 ec 08             	sub    esp,0x8
c0015c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c0e:	83 f8 02             	cmp    eax,0x2
c0015c11:	76 50                	jbe    c0015c63 <sysCallClose(regs*)+0x60>
c0015c13:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015c18:	74 58                	je     c0015c72 <sysCallClose(regs*)+0x6f>
c0015c1a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015c1f:	74 60                	je     c0015c81 <sysCallClose(regs*)+0x7e>
c0015c21:	77 2f                	ja     c0015c52 <sysCallClose(regs*)+0x4f>
c0015c23:	83 ec 0c             	sub    esp,0xc
c0015c26:	50                   	push   eax
c0015c27:	e8 f9 7f ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015c2c:	89 c3                	mov    ebx,eax
c0015c2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c31:	e8 e4 99 ff ff       	call   c000f61a <File::close()>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	85 db                	test   ebx,ebx
c0015c3b:	74 0c                	je     c0015c49 <sysCallClose(regs*)+0x46>
c0015c3d:	83 ec 0c             	sub    esp,0xc
c0015c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c42:	53                   	push   ebx
c0015c43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	31 c0                	xor    eax,eax
c0015c4b:	31 d2                	xor    edx,edx
c0015c4d:	83 c4 08             	add    esp,0x8
c0015c50:	5b                   	pop    ebx
c0015c51:	c3                   	ret    
c0015c52:	83 ec 08             	sub    esp,0x8
c0015c55:	50                   	push   eax
c0015c56:	68 b8 1a 02 c0       	push   0xc0021ab8
c0015c5b:	e8 c9 93 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c68:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c6d:	83 c4 08             	add    esp,0x8
c0015c70:	5b                   	pop    ebx
c0015c71:	c3                   	ret    
c0015c72:	83 ec 0c             	sub    esp,0xc
c0015c75:	68 9f 1b 02 c0       	push   0xc0021b9f
c0015c7a:	e8 aa 93 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015c7f:	eb c5                	jmp    c0015c46 <sysCallClose(regs*)+0x43>
c0015c81:	83 ec 0c             	sub    esp,0xc
c0015c84:	68 ad 1b 02 c0       	push   0xc0021bad
c0015c89:	eb ef                	jmp    c0015c7a <sysCallClose(regs*)+0x77>

c0015c8b <sysCallOpenDir(regs*)>:
c0015c8b:	56                   	push   esi
c0015c8c:	53                   	push   ebx
c0015c8d:	53                   	push   ebx
c0015c8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c92:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c95:	85 f6                	test   esi,esi
c0015c97:	74 51                	je     c0015cea <sysCallOpenDir(regs*)+0x5f>
c0015c99:	83 ec 0c             	sub    esp,0xc
c0015c9c:	68 14 01 00 00       	push   0x114
c0015ca1:	e8 94 92 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015ca6:	83 c4 0c             	add    esp,0xc
c0015ca9:	89 c6                	mov    esi,eax
c0015cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cb3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cb6:	56                   	push   esi
c0015cb7:	e8 5e 9d ff ff       	call   c000fa1a <Directory::Directory(char const*, Process*)>
c0015cbc:	89 34 24             	mov    DWORD PTR [esp],esi
c0015cbf:	e8 ba 9d ff ff       	call   c000fa7e <Directory::open()>
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	85 c0                	test   eax,eax
c0015cc9:	75 1f                	jne    c0015cea <sysCallOpenDir(regs*)+0x5f>
c0015ccb:	83 ec 0c             	sub    esp,0xc
c0015cce:	56                   	push   esi
c0015ccf:	e8 9c 7c ff ff       	call   c000d970 <UnixFile::getFileDescriptor()>
c0015cd4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	89 02                	mov    DWORD PTR [edx],eax
c0015cdc:	c1 f8 1f             	sar    eax,0x1f
c0015cdf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ce2:	31 c0                	xor    eax,eax
c0015ce4:	59                   	pop    ecx
c0015ce5:	31 d2                	xor    edx,edx
c0015ce7:	5b                   	pop    ebx
c0015ce8:	5e                   	pop    esi
c0015ce9:	c3                   	ret    
c0015cea:	59                   	pop    ecx
c0015ceb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cf5:	5b                   	pop    ebx
c0015cf6:	5e                   	pop    esi
c0015cf7:	c3                   	ret    

c0015cf8 <sysCallMakeDir(regs*)>:
c0015cf8:	56                   	push   esi
c0015cf9:	53                   	push   ebx
c0015cfa:	83 ec 10             	sub    esp,0x10
c0015cfd:	68 14 01 00 00       	push   0x114
c0015d02:	e8 33 92 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015d07:	83 c4 0c             	add    esp,0xc
c0015d0a:	89 c3                	mov    ebx,eax
c0015d0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d1b:	53                   	push   ebx
c0015d1c:	e8 f9 9c ff ff       	call   c000fa1a <Directory::Directory(char const*, Process*)>
c0015d21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d24:	e8 35 9f ff ff       	call   c000fc5e <Directory::create()>
c0015d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d2c:	89 c6                	mov    esi,eax
c0015d2e:	e8 a7 9d ff ff       	call   c000fada <Directory::close()>
c0015d33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d3b:	31 c0                	xor    eax,eax
c0015d3d:	85 f6                	test   esi,esi
c0015d3f:	0f 95 c0             	setne  al
c0015d42:	31 d2                	xor    edx,edx
c0015d44:	f7 d8                	neg    eax
c0015d46:	83 d2 00             	adc    edx,0x0
c0015d49:	83 c4 14             	add    esp,0x14
c0015d4c:	f7 da                	neg    edx
c0015d4e:	5b                   	pop    ebx
c0015d4f:	5e                   	pop    esi
c0015d50:	c3                   	ret    

c0015d51 <sysCallCloseDir(regs*)>:
c0015d51:	53                   	push   ebx
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d59:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d5c:	83 f8 02             	cmp    eax,0x2
c0015d5f:	76 47                	jbe    c0015da8 <sysCallCloseDir(regs*)+0x57>
c0015d61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d66:	77 2f                	ja     c0015d97 <sysCallCloseDir(regs*)+0x46>
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	50                   	push   eax
c0015d6c:	e8 b4 7e ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015d71:	89 c3                	mov    ebx,eax
c0015d73:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d76:	e8 5f 9d ff ff       	call   c000fada <Directory::close()>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	85 db                	test   ebx,ebx
c0015d80:	74 0c                	je     c0015d8e <sysCallCloseDir(regs*)+0x3d>
c0015d82:	83 ec 0c             	sub    esp,0xc
c0015d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d87:	53                   	push   ebx
c0015d88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	31 c0                	xor    eax,eax
c0015d90:	31 d2                	xor    edx,edx
c0015d92:	83 c4 08             	add    esp,0x8
c0015d95:	5b                   	pop    ebx
c0015d96:	c3                   	ret    
c0015d97:	83 ec 08             	sub    esp,0x8
c0015d9a:	50                   	push   eax
c0015d9b:	68 e0 1a 02 c0       	push   0xc0021ae0
c0015da0:	e8 84 92 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015db2:	83 c4 08             	add    esp,0x8
c0015db5:	5b                   	pop    ebx
c0015db6:	c3                   	ret    

c0015db7 <sysCallWait(regs*)>:
c0015db7:	83 ec 10             	sub    esp,0x10
c0015dba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dbe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015dc1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015dc4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015dc7:	e8 4e 24 00 00       	call   c001821a <waitTask(int, int*, int)>
c0015dcc:	83 c4 1c             	add    esp,0x1c
c0015dcf:	99                   	cdq    
c0015dd0:	c3                   	ret    

c0015dd1 <sysCallFork(regs*)>:
c0015dd1:	83 ec 18             	sub    esp,0x18
c0015dd4:	68 bb 1b 02 c0       	push   0xc0021bbb
c0015dd9:	e8 4b 92 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015dde:	58                   	pop    eax
c0015ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de3:	e8 00 22 00 00       	call   c0017fe8 <forkProcess(regs*)>
c0015de8:	83 c4 1c             	add    esp,0x1c
c0015deb:	99                   	cdq    
c0015dec:	c3                   	ret    

c0015ded <sysCallExecve(regs*)>:
c0015ded:	53                   	push   ebx
c0015dee:	81 ec 24 01 00 00    	sub    esp,0x124
c0015df4:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015dfb:	68 c9 1b 02 c0       	push   0xc0021bc9
c0015e00:	e8 24 92 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0015e05:	83 c4 0c             	add    esp,0xc
c0015e08:	68 00 01 00 00       	push   0x100
c0015e0d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e11:	50                   	push   eax
c0015e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e1a:	e8 aa 9a ff ff       	call   c000f8c9 <getcwd(Process*, char*, int)>
c0015e1f:	83 c4 0c             	add    esp,0xc
c0015e22:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e28:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015e2b:	e8 1e 25 00 00       	call   c001834e <execveProcess(char const*, char* const*, char* const*)>
c0015e30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e3a:	81 c4 28 01 00 00    	add    esp,0x128
c0015e40:	5b                   	pop    ebx
c0015e41:	c3                   	ret    

c0015e42 <sysCallRmdir(regs*)>:
c0015e42:	56                   	push   esi
c0015e43:	53                   	push   ebx
c0015e44:	83 ec 10             	sub    esp,0x10
c0015e47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e4e:	68 14 01 00 00       	push   0x114
c0015e53:	e8 e2 90 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015e58:	83 c4 0c             	add    esp,0xc
c0015e5b:	89 c3                	mov    ebx,eax
c0015e5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e62:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e65:	56                   	push   esi
c0015e66:	53                   	push   ebx
c0015e67:	e8 ec 96 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0015e6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e6f:	e8 c0 98 ff ff       	call   c000f734 <File::unlink()>
c0015e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e77:	89 c6                	mov    esi,eax
c0015e79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e7e:	31 c0                	xor    eax,eax
c0015e80:	85 f6                	test   esi,esi
c0015e82:	0f 95 c0             	setne  al
c0015e85:	31 d2                	xor    edx,edx
c0015e87:	f7 d8                	neg    eax
c0015e89:	83 d2 00             	adc    edx,0x0
c0015e8c:	83 c4 14             	add    esp,0x14
c0015e8f:	f7 da                	neg    edx
c0015e91:	5b                   	pop    ebx
c0015e92:	5e                   	pop    esi
c0015e93:	c3                   	ret    

c0015e94 <sysCallUnlink(regs*)>:
c0015e94:	56                   	push   esi
c0015e95:	53                   	push   ebx
c0015e96:	83 ec 10             	sub    esp,0x10
c0015e99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e9d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015ea0:	68 14 01 00 00       	push   0x114
c0015ea5:	e8 90 90 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0015eaa:	83 c4 0c             	add    esp,0xc
c0015ead:	89 c3                	mov    ebx,eax
c0015eaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015eb7:	56                   	push   esi
c0015eb8:	53                   	push   ebx
c0015eb9:	e8 9a 96 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0015ebe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec1:	e8 6e 98 ff ff       	call   c000f734 <File::unlink()>
c0015ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec9:	89 c6                	mov    esi,eax
c0015ecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ecd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ed0:	31 c0                	xor    eax,eax
c0015ed2:	85 f6                	test   esi,esi
c0015ed4:	0f 95 c0             	setne  al
c0015ed7:	31 d2                	xor    edx,edx
c0015ed9:	f7 d8                	neg    eax
c0015edb:	83 d2 00             	adc    edx,0x0
c0015ede:	83 c4 14             	add    esp,0x14
c0015ee1:	f7 da                	neg    edx
c0015ee3:	5b                   	pop    ebx
c0015ee4:	5e                   	pop    esi
c0015ee5:	c3                   	ret    

c0015ee6 <sysCallGetArgv(regs*)>:
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015ef0:	85 c0                	test   eax,eax
c0015ef2:	78 2b                	js     c0015f1f <sysCallGetArgv(regs*)+0x39>
c0015ef4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015efa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015efd:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015f03:	7d 1a                	jge    c0015f1f <sysCallGetArgv(regs*)+0x39>
c0015f05:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015f0c:	85 c0                	test   eax,eax
c0015f0e:	74 17                	je     c0015f27 <sysCallGetArgv(regs*)+0x41>
c0015f10:	83 ec 08             	sub    esp,0x8
c0015f13:	50                   	push   eax
c0015f14:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015f17:	e8 8b a7 fe ff       	call   c00006a7 <strcpy>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	31 c0                	xor    eax,eax
c0015f21:	31 d2                	xor    edx,edx
c0015f23:	83 c4 0c             	add    esp,0xc
c0015f26:	c3                   	ret    
c0015f27:	b8 01 00 00 00       	mov    eax,0x1
c0015f2c:	31 d2                	xor    edx,edx
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	c3                   	ret    

c0015f32 <sysCallTTYName(regs*)>:
c0015f32:	56                   	push   esi
c0015f33:	53                   	push   ebx
c0015f34:	53                   	push   ebx
c0015f35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015f3c:	85 c0                	test   eax,eax
c0015f3e:	74 5f                	je     c0015f9f <sysCallTTYName(regs*)+0x6d>
c0015f40:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015f43:	83 f8 02             	cmp    eax,0x2
c0015f46:	77 3e                	ja     c0015f86 <sysCallTTYName(regs*)+0x54>
c0015f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f50:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015f56:	85 db                	test   ebx,ebx
c0015f58:	74 45                	je     c0015f9f <sysCallTTYName(regs*)+0x6d>
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f5f:	53                   	push   ebx
c0015f60:	ff 10                	call   DWORD PTR [eax]
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	84 c0                	test   al,al
c0015f67:	74 41                	je     c0015faa <sysCallTTYName(regs*)+0x78>
c0015f69:	83 ec 08             	sub    esp,0x8
c0015f6c:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015f72:	53                   	push   ebx
c0015f73:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015f76:	e8 2c a7 fe ff       	call   c00006a7 <strcpy>
c0015f7b:	83 c4 10             	add    esp,0x10
c0015f7e:	31 c0                	xor    eax,eax
c0015f80:	59                   	pop    ecx
c0015f81:	31 d2                	xor    edx,edx
c0015f83:	5b                   	pop    ebx
c0015f84:	5e                   	pop    esi
c0015f85:	c3                   	ret    
c0015f86:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f8b:	74 bb                	je     c0015f48 <sysCallTTYName(regs*)+0x16>
c0015f8d:	83 ec 0c             	sub    esp,0xc
c0015f90:	50                   	push   eax
c0015f91:	e8 8f 7c ff ff       	call   c000dc25 <getFromFileDescriptor(int)>
c0015f96:	83 c4 10             	add    esp,0x10
c0015f99:	89 c3                	mov    ebx,eax
c0015f9b:	85 db                	test   ebx,ebx
c0015f9d:	75 bb                	jne    c0015f5a <sysCallTTYName(regs*)+0x28>
c0015f9f:	59                   	pop    ecx
c0015fa0:	b8 01 00 00 00       	mov    eax,0x1
c0015fa5:	31 d2                	xor    edx,edx
c0015fa7:	5b                   	pop    ebx
c0015fa8:	5e                   	pop    esi
c0015fa9:	c3                   	ret    
c0015faa:	59                   	pop    ecx
c0015fab:	b8 02 00 00 00       	mov    eax,0x2
c0015fb0:	31 d2                	xor    edx,edx
c0015fb2:	5b                   	pop    ebx
c0015fb3:	5e                   	pop    esi
c0015fb4:	c3                   	ret    

c0015fb5 <sysCallGetEnv(regs*)>:
c0015fb5:	83 ec 0c             	sub    esp,0xc
c0015fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fbc:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015fbf:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015fc2:	85 c9                	test   ecx,ecx
c0015fc4:	75 0c                	jne    c0015fd2 <sysCallGetEnv(regs*)+0x1d>
c0015fc6:	85 d2                	test   edx,edx
c0015fc8:	74 14                	je     c0015fde <sysCallGetEnv(regs*)+0x29>
c0015fca:	31 c0                	xor    eax,eax
c0015fcc:	31 d2                	xor    edx,edx
c0015fce:	83 c4 0c             	add    esp,0xc
c0015fd1:	c3                   	ret    
c0015fd2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015fd5:	85 d2                	test   edx,edx
c0015fd7:	74 1b                	je     c0015ff4 <sysCallGetEnv(regs*)+0x3f>
c0015fd9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015fdc:	eb ec                	jmp    c0015fca <sysCallGetEnv(regs*)+0x15>
c0015fde:	83 ec 0c             	sub    esp,0xc
c0015fe1:	68 04 1b 02 c0       	push   0xc0021b04
c0015fe6:	e8 3a a6 fe ff       	call   c0000625 <strlen>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	31 d2                	xor    edx,edx
c0015ff0:	83 c4 0c             	add    esp,0xc
c0015ff3:	c3                   	ret    
c0015ff4:	83 ec 08             	sub    esp,0x8
c0015ff7:	68 04 1b 02 c0       	push   0xc0021b04
c0015ffc:	50                   	push   eax
c0015ffd:	e8 a5 a6 fe ff       	call   c00006a7 <strcpy>
c0016002:	83 c4 10             	add    esp,0x10
c0016005:	eb c3                	jmp    c0015fca <sysCallGetEnv(regs*)+0x15>

c0016007 <sysCallUSleep(regs*)>:
c0016007:	83 ec 14             	sub    esp,0x14
c001600a:	b8 e8 03 00 00       	mov    eax,0x3e8
c001600f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016013:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001601a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001601d:	01 ca                	add    edx,ecx
c001601f:	52                   	push   edx
c0016020:	50                   	push   eax
c0016021:	e8 8d 22 00 00       	call   c00182b3 <nanoSleep(unsigned long long)>
c0016026:	31 c0                	xor    eax,eax
c0016028:	31 d2                	xor    edx,edx
c001602a:	83 c4 1c             	add    esp,0x1c
c001602d:	c3                   	ret    

c001602e <sysCallSpawn(regs*)>:
c001602e:	56                   	push   esi
c001602f:	53                   	push   ebx
c0016030:	53                   	push   ebx
c0016031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016035:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016038:	85 f6                	test   esi,esi
c001603a:	75 08                	jne    c0016044 <sysCallSpawn(regs*)+0x16>
c001603c:	59                   	pop    ecx
c001603d:	31 c0                	xor    eax,eax
c001603f:	31 d2                	xor    edx,edx
c0016041:	5b                   	pop    ebx
c0016042:	5e                   	pop    esi
c0016043:	c3                   	ret    
c0016044:	83 ec 0c             	sub    esp,0xc
c0016047:	68 d9 1b 02 c0       	push   0xc0021bd9
c001604c:	e8 d8 8f ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0016051:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0016058:	e8 dd 8e ff ff       	call   c000ef3a <operator new(unsigned long)>
c001605d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016060:	89 c6                	mov    esi,eax
c0016062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016067:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001606a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001606d:	56                   	push   esi
c001606e:	e8 2f 18 00 00       	call   c00178a2 <Process::Process(char const*, Process*, char**)>
c0016073:	83 c4 20             	add    esp,0x20
c0016076:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001607d:	75 bd                	jne    c001603c <sysCallSpawn(regs*)+0xe>
c001607f:	83 ec 0c             	sub    esp,0xc
c0016082:	68 e4 1b 02 c0       	push   0xc0021be4
c0016087:	e8 9d 8f ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001608c:	89 34 24             	mov    DWORD PTR [esp],esi
c001608f:	e8 74 1d 00 00       	call   c0017e08 <Process::createUserThread()>
c0016094:	8b 06                	mov    eax,DWORD PTR [esi]
c0016096:	83 c4 10             	add    esp,0x10
c0016099:	99                   	cdq    
c001609a:	59                   	pop    ecx
c001609b:	5b                   	pop    ebx
c001609c:	5e                   	pop    esi
c001609d:	c3                   	ret    

c001609e <sysAppSettings(regs*)>:
c001609e:	53                   	push   ebx
c001609f:	83 ec 08             	sub    esp,0x8
c00160a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00160a9:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c00160af:	25 e0 1f 00 00       	and    eax,0x1fe0
c00160b4:	66 3d c0 09          	cmp    ax,0x9c0
c00160b8:	75 2f                	jne    c00160e9 <sysAppSettings(regs*)+0x4b>
c00160ba:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c00160c0:	83 e0 1f             	and    eax,0x1f
c00160c3:	3c 01                	cmp    al,0x1
c00160c5:	74 2e                	je     c00160f5 <sysAppSettings(regs*)+0x57>
c00160c7:	3c 07                	cmp    al,0x7
c00160c9:	0f 84 bd 00 00 00    	je     c001618c <sysAppSettings(regs*)+0xee>
c00160cf:	84 c0                	test   al,al
c00160d1:	0f 84 dc 00 00 00    	je     c00161b3 <sysAppSettings(regs*)+0x115>
c00160d7:	3c 08                	cmp    al,0x8
c00160d9:	74 6d                	je     c0016148 <sysAppSettings(regs*)+0xaa>
c00160db:	0f b6 c0             	movzx  eax,al
c00160de:	83 c4 08             	add    esp,0x8
c00160e1:	05 e8 03 00 00       	add    eax,0x3e8
c00160e6:	5b                   	pop    ebx
c00160e7:	99                   	cdq    
c00160e8:	c3                   	ret    
c00160e9:	b8 01 00 00 00       	mov    eax,0x1
c00160ee:	31 d2                	xor    edx,edx
c00160f0:	83 c4 08             	add    esp,0x8
c00160f3:	5b                   	pop    ebx
c00160f4:	c3                   	ret    
c00160f5:	51                   	push   ecx
c00160f6:	68 00 01 00 00       	push   0x100
c00160fb:	6a 00                	push   0x0
c00160fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016102:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016105:	83 c0 0c             	add    eax,0xc
c0016108:	50                   	push   eax
c0016109:	e8 fa a4 fe ff       	call   c0000608 <memset>
c001610e:	83 c4 0c             	add    esp,0xc
c0016111:	68 ff 00 00 00       	push   0xff
c0016116:	53                   	push   ebx
c0016117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001611c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001611f:	83 c0 0c             	add    eax,0xc
c0016122:	50                   	push   eax
c0016123:	e8 aa a4 fe ff       	call   c00005d2 <memcpy>
c0016128:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001612d:	5b                   	pop    ebx
c001612e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016131:	5a                   	pop    edx
c0016132:	8d 50 0c             	lea    edx,[eax+0xc]
c0016135:	52                   	push   edx
c0016136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001613c:	e8 2d 6c ff ff       	call   c000cd6e <VgaText::setTitle(char*)>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	31 c0                	xor    eax,eax
c0016146:	eb a6                	jmp    c00160ee <sysAppSettings(regs*)+0x50>
c0016148:	83 ec 08             	sub    esp,0x8
c001614b:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016151:	83 e0 0f             	and    eax,0xf
c0016154:	50                   	push   eax
c0016155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001615a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001615d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016163:	e8 f6 6b ff ff       	call   c000cd5e <VgaText::setTitleColour(VgaColour)>
c0016168:	58                   	pop    eax
c0016169:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001616f:	5a                   	pop    edx
c0016170:	c1 e8 04             	shr    eax,0x4
c0016173:	83 e0 0f             	and    eax,0xf
c0016176:	50                   	push   eax
c0016177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001617c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001617f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016185:	e8 c4 6b ff ff       	call   c000cd4e <VgaText::setTitleTextColour(VgaColour)>
c001618a:	eb b5                	jmp    c0016141 <sysAppSettings(regs*)+0xa3>
c001618c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016191:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016194:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001619a:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c00161a0:	c0 e8 06             	shr    al,0x6
c00161a3:	83 e0 01             	and    eax,0x1
c00161a6:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c00161ac:	31 c0                	xor    eax,eax
c00161ae:	e9 3b ff ff ff       	jmp    c00160ee <sysAppSettings(regs*)+0x50>
c00161b3:	b8 02 00 00 00       	mov    eax,0x2
c00161b8:	e9 31 ff ff ff       	jmp    c00160ee <sysAppSettings(regs*)+0x50>

c00161bd <sysSetFatAttrib(regs*)>:
c00161bd:	57                   	push   edi
c00161be:	56                   	push   esi
c00161bf:	53                   	push   ebx
c00161c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161c4:	83 ec 0c             	sub    esp,0xc
c00161c7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00161ca:	68 14 01 00 00       	push   0x114
c00161cf:	e8 66 8d ff ff       	call   c000ef3a <operator new(unsigned long)>
c00161d4:	83 c4 0c             	add    esp,0xc
c00161d7:	89 c3                	mov    ebx,eax
c00161d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161de:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161e1:	57                   	push   edi
c00161e2:	53                   	push   ebx
c00161e3:	e8 70 93 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c00161e8:	83 c4 0c             	add    esp,0xc
c00161eb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161ee:	0f b6 d4             	movzx  edx,ah
c00161f1:	0f b6 c0             	movzx  eax,al
c00161f4:	52                   	push   edx
c00161f5:	50                   	push   eax
c00161f6:	53                   	push   ebx
c00161f7:	e8 d2 95 ff ff       	call   c000f7ce <File::chfatattr(unsigned char, unsigned char)>
c00161fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161ff:	89 c6                	mov    esi,eax
c0016201:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016203:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016206:	83 c4 10             	add    esp,0x10
c0016209:	31 c0                	xor    eax,eax
c001620b:	5b                   	pop    ebx
c001620c:	85 f6                	test   esi,esi
c001620e:	5e                   	pop    esi
c001620f:	0f 95 c0             	setne  al
c0016212:	5f                   	pop    edi
c0016213:	31 d2                	xor    edx,edx
c0016215:	f7 d8                	neg    eax
c0016217:	83 d2 00             	adc    edx,0x0
c001621a:	f7 da                	neg    edx
c001621c:	c3                   	ret    

c001621d <sysPanic(regs*)>:
c001621d:	83 ec 18             	sub    esp,0x18
c0016220:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016224:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016227:	e8 92 ea ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001622c:	c7 04 24 f1 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bf1
c0016233:	e8 86 ea ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0016238:	b8 01 00 00 00       	mov    eax,0x1
c001623d:	31 d2                	xor    edx,edx
c001623f:	83 c4 1c             	add    esp,0x1c
c0016242:	c3                   	ret    

c0016243 <sysPipe(regs*)>:
c0016243:	57                   	push   edi
c0016244:	56                   	push   esi
c0016245:	53                   	push   ebx
c0016246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624a:	83 ec 0c             	sub    esp,0xc
c001624d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016250:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016253:	6a 20                	push   0x20
c0016255:	e8 e0 8c ff ff       	call   c000ef3a <operator new(unsigned long)>
c001625a:	89 c3                	mov    ebx,eax
c001625c:	58                   	pop    eax
c001625d:	5a                   	pop    edx
c001625e:	68 00 50 00 00       	push   0x5000
c0016263:	53                   	push   ebx
c0016264:	e8 43 64 ff ff       	call   c000c6ac <Pipe::Pipe(int)>
c0016269:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001626c:	e8 ff 76 ff ff       	call   c000d970 <UnixFile::getFileDescriptor()>
c0016271:	89 07                	mov    DWORD PTR [edi],eax
c0016273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016276:	e8 f5 76 ff ff       	call   c000d970 <UnixFile::getFileDescriptor()>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	89 06                	mov    DWORD PTR [esi],eax
c0016280:	31 d2                	xor    edx,edx
c0016282:	5b                   	pop    ebx
c0016283:	31 c0                	xor    eax,eax
c0016285:	5e                   	pop    esi
c0016286:	5f                   	pop    edi
c0016287:	c3                   	ret    

c0016288 <sysGetUnixTime(regs*)>:
c0016288:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001628d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016293:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016297:	e9 84 9c ff ff       	jmp    c000ff20 <Clock::timeInSecondsLocal()>

c001629c <string_ends_with(char const*, char const*)>:
c001629c:	57                   	push   edi
c001629d:	56                   	push   esi
c001629e:	53                   	push   ebx
c001629f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	53                   	push   ebx
c00162ab:	e8 75 a3 fe ff       	call   c0000625 <strlen>
c00162b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162b3:	89 c6                	mov    esi,eax
c00162b5:	e8 6b a3 fe ff       	call   c0000625 <strlen>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	39 c6                	cmp    esi,eax
c00162bf:	7d 06                	jge    c00162c7 <string_ends_with(char const*, char const*)+0x2b>
c00162c1:	5b                   	pop    ebx
c00162c2:	31 c0                	xor    eax,eax
c00162c4:	5e                   	pop    esi
c00162c5:	5f                   	pop    edi
c00162c6:	c3                   	ret    
c00162c7:	83 ec 08             	sub    esp,0x8
c00162ca:	29 c6                	sub    esi,eax
c00162cc:	57                   	push   edi
c00162cd:	01 f3                	add    ebx,esi
c00162cf:	53                   	push   ebx
c00162d0:	e8 30 a4 fe ff       	call   c0000705 <strcmp>
c00162d5:	83 c4 10             	add    esp,0x10
c00162d8:	85 c0                	test   eax,eax
c00162da:	5b                   	pop    ebx
c00162db:	0f 94 c0             	sete   al
c00162de:	5e                   	pop    esi
c00162df:	0f b6 c0             	movzx  eax,al
c00162e2:	5f                   	pop    edi
c00162e3:	c3                   	ret    

c00162e4 <sysCallOpen(regs*)>:
c00162e4:	56                   	push   esi
c00162e5:	53                   	push   ebx
c00162e6:	81 ec 04 01 00 00    	sub    esp,0x104
c00162ec:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162f6:	85 d2                	test   edx,edx
c00162f8:	0f 84 c1 00 00 00    	je     c00163bf <sysCallOpen(regs*)+0xdb>
c00162fe:	50                   	push   eax
c00162ff:	68 00 1c 02 c0       	push   0xc0021c00
c0016304:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016307:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001630b:	56                   	push   esi
c001630c:	e8 9d 90 ff ff       	call   c000f3ae <standardiseFiles(char*, char const*, char const*)>
c0016311:	89 34 24             	mov    DWORD PTR [esp],esi
c0016314:	e8 0c a3 fe ff       	call   c0000625 <strlen>
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	48                   	dec    eax
c001631d:	74 1d                	je     c001633c <sysCallOpen(regs*)+0x58>
c001631f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016322:	eb 0f                	jmp    c0016333 <sysCallOpen(regs*)+0x4f>
c0016324:	80 fa 3a             	cmp    dl,0x3a
c0016327:	74 0f                	je     c0016338 <sysCallOpen(regs*)+0x54>
c0016329:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001632d:	48                   	dec    eax
c001632e:	74 0c                	je     c001633c <sysCallOpen(regs*)+0x58>
c0016330:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016333:	80 fa 2e             	cmp    dl,0x2e
c0016336:	75 ec                	jne    c0016324 <sysCallOpen(regs*)+0x40>
c0016338:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001633c:	83 ec 08             	sub    esp,0x8
c001633f:	68 04 1c 02 c0       	push   0xc0021c04
c0016344:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016347:	e8 50 ff ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c001634c:	83 c4 10             	add    esp,0x10
c001634f:	85 c0                	test   eax,eax
c0016351:	75 2e                	jne    c0016381 <sysCallOpen(regs*)+0x9d>
c0016353:	83 ec 08             	sub    esp,0x8
c0016356:	68 25 1c 02 c0       	push   0xc0021c25
c001635b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001635e:	e8 39 ff ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	85 c0                	test   eax,eax
c0016368:	75 17                	jne    c0016381 <sysCallOpen(regs*)+0x9d>
c001636a:	83 ec 08             	sub    esp,0x8
c001636d:	68 05 1c 02 c0       	push   0xc0021c05
c0016372:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016375:	e8 8b a3 fe ff       	call   c0000705 <strcmp>
c001637a:	83 c4 10             	add    esp,0x10
c001637d:	85 c0                	test   eax,eax
c001637f:	75 51                	jne    c00163d2 <sysCallOpen(regs*)+0xee>
c0016381:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016384:	83 ec 08             	sub    esp,0x8
c0016387:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001638d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016394:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016397:	ff 30                	push   DWORD PTR [eax]
c0016399:	68 09 1c 02 c0       	push   0xc0021c09
c001639e:	e8 86 8c ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00163a3:	c7 04 24 18 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c18
c00163aa:	e8 7a 8c ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	81 c4 04 01 00 00    	add    esp,0x104
c00163b8:	31 c0                	xor    eax,eax
c00163ba:	31 d2                	xor    edx,edx
c00163bc:	5b                   	pop    ebx
c00163bd:	5e                   	pop    esi
c00163be:	c3                   	ret    
c00163bf:	81 c4 04 01 00 00    	add    esp,0x104
c00163c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163cf:	5b                   	pop    ebx
c00163d0:	5e                   	pop    esi
c00163d1:	c3                   	ret    
c00163d2:	83 ec 08             	sub    esp,0x8
c00163d5:	68 04 1c 02 c0       	push   0xc0021c04
c00163da:	56                   	push   esi
c00163db:	e8 bc fe ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	85 c0                	test   eax,eax
c00163e5:	75 9a                	jne    c0016381 <sysCallOpen(regs*)+0x9d>
c00163e7:	83 ec 08             	sub    esp,0x8
c00163ea:	68 2a 1c 02 c0       	push   0xc0021c2a
c00163ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163f2:	e8 a5 fe ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	85 c0                	test   eax,eax
c00163fc:	0f 85 d1 00 00 00    	jne    c00164d3 <sysCallOpen(regs*)+0x1ef>
c0016402:	83 ec 08             	sub    esp,0x8
c0016405:	68 2f 1c 02 c0       	push   0xc0021c2f
c001640a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001640d:	e8 8a fe ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c0016412:	83 c4 10             	add    esp,0x10
c0016415:	85 c0                	test   eax,eax
c0016417:	0f 85 b6 00 00 00    	jne    c00164d3 <sysCallOpen(regs*)+0x1ef>
c001641d:	83 ec 08             	sub    esp,0x8
c0016420:	68 2b 1c 02 c0       	push   0xc0021c2b
c0016425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016428:	e8 d8 a2 fe ff       	call   c0000705 <strcmp>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	85 c0                	test   eax,eax
c0016432:	0f 84 9b 00 00 00    	je     c00164d3 <sysCallOpen(regs*)+0x1ef>
c0016438:	83 ec 08             	sub    esp,0x8
c001643b:	68 2a 1c 02 c0       	push   0xc0021c2a
c0016440:	56                   	push   esi
c0016441:	e8 56 fe ff ff       	call   c001629c <string_ends_with(char const*, char const*)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	85 c0                	test   eax,eax
c001644b:	0f 85 82 00 00 00    	jne    c00164d3 <sysCallOpen(regs*)+0x1ef>
c0016451:	83 ec 0c             	sub    esp,0xc
c0016454:	68 14 01 00 00       	push   0x114
c0016459:	e8 dc 8a ff ff       	call   c000ef3a <operator new(unsigned long)>
c001645e:	83 c4 0c             	add    esp,0xc
c0016461:	89 c6                	mov    esi,eax
c0016463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016468:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001646b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001646e:	56                   	push   esi
c001646f:	e8 e4 90 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0016474:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016477:	83 c4 10             	add    esp,0x10
c001647a:	0f b6 c2             	movzx  eax,dl
c001647d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016480:	89 d0                	mov    eax,edx
c0016482:	83 e0 01             	and    eax,0x1
c0016485:	f6 c2 02             	test   dl,0x2
c0016488:	74 03                	je     c001648d <sysCallOpen(regs*)+0x1a9>
c001648a:	83 c8 02             	or     eax,0x2
c001648d:	f6 c2 04             	test   dl,0x4
c0016490:	74 03                	je     c0016495 <sysCallOpen(regs*)+0x1b1>
c0016492:	83 c8 04             	or     eax,0x4
c0016495:	f6 c2 08             	test   dl,0x8
c0016498:	74 03                	je     c001649d <sysCallOpen(regs*)+0x1b9>
c001649a:	83 c8 0a             	or     eax,0xa
c001649d:	83 e2 10             	and    edx,0x10
c00164a0:	74 03                	je     c00164a5 <sysCallOpen(regs*)+0x1c1>
c00164a2:	83 c8 12             	or     eax,0x12
c00164a5:	83 ec 08             	sub    esp,0x8
c00164a8:	50                   	push   eax
c00164a9:	56                   	push   esi
c00164aa:	e8 0d 91 ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	85 c0                	test   eax,eax
c00164b4:	0f 85 05 ff ff ff    	jne    c00163bf <sysCallOpen(regs*)+0xdb>
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	56                   	push   esi
c00164be:	e8 ad 74 ff ff       	call   c000d970 <UnixFile::getFileDescriptor()>
c00164c3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00164c6:	89 02                	mov    DWORD PTR [edx],eax
c00164c8:	c1 f8 1f             	sar    eax,0x1f
c00164cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164ce:	e9 dc fe ff ff       	jmp    c00163af <sysCallOpen(regs*)+0xcb>
c00164d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00164d6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00164dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00164e3:	e9 ca fe ff ff       	jmp    c00163b2 <sysCallOpen(regs*)+0xce>

c00164e8 <setupSystemCalls()>:
c00164e8:	c7 05 00 42 02 c0 da 56 01 c0 	mov    DWORD PTR ds:0xc0024200,0xc00156da
c00164f2:	c7 05 04 42 02 c0 ed 54 01 c0 	mov    DWORD PTR ds:0xc0024204,0xc00154ed
c00164fc:	c7 05 08 42 02 c0 02 56 01 c0 	mov    DWORD PTR ds:0xc0024208,0xc0015602
c0016506:	c7 05 0c 42 02 c0 57 56 01 c0 	mov    DWORD PTR ds:0xc002420c,0xc0015657
c0016510:	c7 05 10 42 02 c0 9a 55 01 c0 	mov    DWORD PTR ds:0xc0024210,0xc001559a
c001651a:	c7 05 14 42 02 c0 f4 56 01 c0 	mov    DWORD PTR ds:0xc0024214,0xc00156f4
c0016524:	c7 05 18 42 02 c0 83 58 01 c0 	mov    DWORD PTR ds:0xc0024218,0xc0015883
c001652e:	c7 05 1c 42 02 c0 a2 58 01 c0 	mov    DWORD PTR ds:0xc002421c,0xc00158a2
c0016538:	c7 05 24 42 02 c0 03 5c 01 c0 	mov    DWORD PTR ds:0xc0024224,0xc0015c03
c0016542:	c7 05 20 42 02 c0 e4 62 01 c0 	mov    DWORD PTR ds:0xc0024220,0xc00162e4
c001654c:	c7 05 28 42 02 c0 8b 5c 01 c0 	mov    DWORD PTR ds:0xc0024228,0xc0015c8b
c0016556:	c7 05 2c 42 02 c0 01 59 01 c0 	mov    DWORD PTR ds:0xc002422c,0xc0015901
c0016560:	c7 05 30 42 02 c0 00 57 01 c0 	mov    DWORD PTR ds:0xc0024230,0xc0015700
c001656a:	c7 05 34 42 02 c0 05 57 01 c0 	mov    DWORD PTR ds:0xc0024234,0xc0015705
c0016574:	c7 05 38 42 02 c0 f8 5c 01 c0 	mov    DWORD PTR ds:0xc0024238,0xc0015cf8
c001657e:	c7 05 3c 42 02 c0 51 5d 01 c0 	mov    DWORD PTR ds:0xc002423c,0xc0015d51
c0016588:	c7 05 40 42 02 c0 e9 59 01 c0 	mov    DWORD PTR ds:0xc0024240,0xc00159e9
c0016592:	c7 05 44 42 02 c0 52 5a 01 c0 	mov    DWORD PTR ds:0xc0024244,0xc0015a52
c001659c:	c7 05 48 42 02 c0 80 5b 01 c0 	mov    DWORD PTR ds:0xc0024248,0xc0015b80
c00165a6:	c7 05 4c 42 02 c0 0a 57 01 c0 	mov    DWORD PTR ds:0xc002424c,0xc001570a
c00165b0:	c7 05 50 42 02 c0 b7 5d 01 c0 	mov    DWORD PTR ds:0xc0024250,0xc0015db7
c00165ba:	c7 05 54 42 02 c0 d1 5d 01 c0 	mov    DWORD PTR ds:0xc0024254,0xc0015dd1
c00165c4:	c7 05 58 42 02 c0 ed 5d 01 c0 	mov    DWORD PTR ds:0xc0024258,0xc0015ded
c00165ce:	c7 05 5c 42 02 c0 42 5e 01 c0 	mov    DWORD PTR ds:0xc002425c,0xc0015e42
c00165d8:	c7 05 60 42 02 c0 94 5e 01 c0 	mov    DWORD PTR ds:0xc0024260,0xc0015e94
c00165e2:	c7 05 64 42 02 c0 14 57 01 c0 	mov    DWORD PTR ds:0xc0024264,0xc0015714
c00165ec:	c7 05 68 42 02 c0 e6 5e 01 c0 	mov    DWORD PTR ds:0xc0024268,0xc0015ee6
c00165f6:	c7 05 6c 42 02 c0 be 58 01 c0 	mov    DWORD PTR ds:0xc002426c,0xc00158be
c0016600:	c7 05 70 42 02 c0 32 5f 01 c0 	mov    DWORD PTR ds:0xc0024270,0xc0015f32
c001660a:	c7 05 74 42 02 c0 8f 59 01 c0 	mov    DWORD PTR ds:0xc0024274,0xc001598f
c0016614:	c7 05 78 42 02 c0 07 60 01 c0 	mov    DWORD PTR ds:0xc0024278,0xc0016007
c001661e:	c7 05 7c 42 02 c0 cf 5a 01 c0 	mov    DWORD PTR ds:0xc002427c,0xc0015acf
c0016628:	c7 05 80 42 02 c0 2e 60 01 c0 	mov    DWORD PTR ds:0xc0024280,0xc001602e
c0016632:	c7 05 84 42 02 c0 b5 5f 01 c0 	mov    DWORD PTR ds:0xc0024284,0xc0015fb5
c001663c:	c7 05 88 42 02 c0 9e 60 01 c0 	mov    DWORD PTR ds:0xc0024288,0xc001609e
c0016646:	c7 05 8c 42 02 c0 24 57 01 c0 	mov    DWORD PTR ds:0xc002428c,0xc0015724
c0016650:	c7 05 90 42 02 c0 8e 57 01 c0 	mov    DWORD PTR ds:0xc0024290,0xc001578e
c001665a:	c7 05 94 42 02 c0 d4 57 01 c0 	mov    DWORD PTR ds:0xc0024294,0xc00157d4
c0016664:	c7 05 98 42 02 c0 bd 61 01 c0 	mov    DWORD PTR ds:0xc0024298,0xc00161bd
c001666e:	c7 05 9c 42 02 c0 1d 62 01 c0 	mov    DWORD PTR ds:0xc002429c,0xc001621d
c0016678:	c7 05 a0 42 02 c0 25 58 01 c0 	mov    DWORD PTR ds:0xc00242a0,0xc0015825
c0016682:	c7 05 a4 42 02 c0 43 62 01 c0 	mov    DWORD PTR ds:0xc00242a4,0xc0016243
c001668c:	c7 05 a8 42 02 c0 88 62 01 c0 	mov    DWORD PTR ds:0xc00242a8,0xc0016288
c0016696:	c7 05 ac 42 02 c0 05 55 01 c0 	mov    DWORD PTR ds:0xc00242ac,0xc0015505
c00166a0:	c3                   	ret    

c00166a1 <systemCall(regs*, void*)>:
c00166a1:	53                   	push   ebx
c00166a2:	83 ec 08             	sub    esp,0x8
c00166a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166ac:	83 f8 7f             	cmp    eax,0x7f
c00166af:	77 16                	ja     c00166c7 <systemCall(regs*, void*)+0x26>
c00166b1:	8b 14 85 00 42 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe00]
c00166b8:	85 d2                	test   edx,edx
c00166ba:	74 0b                	je     c00166c7 <systemCall(regs*, void*)+0x26>
c00166bc:	83 ec 0c             	sub    esp,0xc
c00166bf:	53                   	push   ebx
c00166c0:	ff d2                	call   edx
c00166c2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166c5:	eb 0d                	jmp    c00166d4 <systemCall(regs*, void*)+0x33>
c00166c7:	52                   	push   edx
c00166c8:	52                   	push   edx
c00166c9:	50                   	push   eax
c00166ca:	68 34 1c 02 c0       	push   0xc0021c34
c00166cf:	e8 55 89 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00166d4:	83 c4 10             	add    esp,0x10
c00166d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00166dc:	31 d2                	xor    edx,edx
c00166de:	83 c4 08             	add    esp,0x8
c00166e1:	5b                   	pop    ebx
c00166e2:	c3                   	ret    

c00166e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00166e3:	55                   	push   ebp
c00166e4:	89 e5                	mov    ebp,esp
c00166e6:	57                   	push   edi
c00166e7:	56                   	push   esi
c00166e8:	53                   	push   ebx
c00166e9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166ef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00166f2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00166f5:	85 c0                	test   eax,eax
c00166f7:	0f 95 c1             	setne  cl
c00166fa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00166fe:	0f 94 c2             	sete   dl
c0016701:	84 d1                	test   cl,dl
c0016703:	74 26                	je     c001672b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016705:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001670c:	74 1d                	je     c001672b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001670e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016711:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016717:	89 d6                	mov    esi,edx
c0016719:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001671f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016725:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016728:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001672b:	83 ec 0c             	sub    esp,0xc
c001672e:	05 ff 0f 00 00       	add    eax,0xfff
c0016733:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016736:	6a 01                	push   0x1
c0016738:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001673e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016744:	e8 60 76 ff ff       	call   c000dda9 <Virt::allocateKernelVirtualPages(int)>
c0016749:	83 c4 10             	add    esp,0x10
c001674c:	89 c6                	mov    esi,eax
c001674e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016754:	0f 86 21 01 00 00    	jbe    c001687b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001675a:	c1 eb 0c             	shr    ebx,0xc
c001675d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016767:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001676d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016770:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016773:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016779:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001677c:	29 d8                	sub    eax,ebx
c001677e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016784:	0f 83 f4 00 00 00    	jae    c001687e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016793:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016796:	3d 00 10 00 00       	cmp    eax,0x1000
c001679b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001679d:	52                   	push   edx
c001679e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00167a4:	52                   	push   edx
c00167a5:	76 05                	jbe    c00167ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00167a7:	b8 00 10 00 00       	mov    eax,0x1000
c00167ac:	31 d2                	xor    edx,edx
c00167ae:	52                   	push   edx
c00167af:	50                   	push   eax
c00167b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00167b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167b6:	83 c4 20             	add    esp,0x20
c00167b9:	85 c0                	test   eax,eax
c00167bb:	74 1f                	je     c00167dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00167bd:	51                   	push   ecx
c00167be:	51                   	push   ecx
c00167bf:	50                   	push   eax
c00167c0:	68 48 1c 02 c0       	push   0xc0021c48
c00167c5:	e8 5f 88 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00167ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00167cd:	e8 0d 79 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	31 c0                	xor    eax,eax
c00167d7:	e9 7c 01 00 00       	jmp    c0016958 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00167dc:	e8 19 14 00 00       	call   c0017bfa <lockScheduler()>
c00167e1:	e8 10 5a ff ff       	call   c000c1f6 <Phys::allocatePage()>
c00167e6:	6a 07                	push   0x7
c00167e8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00167ee:	56                   	push   esi
c00167ef:	50                   	push   eax
c00167f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167f6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167f9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167ff:	e8 dc 7b ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016804:	83 c4 0c             	add    esp,0xc
c0016807:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001680d:	6a 00                	push   0x0
c001680f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016815:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016818:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001681e:	e8 1b 7a ff ff       	call   c000e23e <VAS::mapOtherVASIn(bool, VAS*)>
c0016823:	58                   	pop    eax
c0016824:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001682a:	5a                   	pop    edx
c001682b:	68 07 04 00 00       	push   0x407
c0016830:	53                   	push   ebx
c0016831:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016837:	50                   	push   eax
c0016838:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001683e:	6a 00                	push   0x0
c0016840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016845:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016848:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001684e:	e8 8d 82 ff ff       	call   c000eae0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016853:	83 c4 1c             	add    esp,0x1c
c0016856:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001685c:	68 00 10 00 00       	push   0x1000
c0016861:	50                   	push   eax
c0016862:	56                   	push   esi
c0016863:	e8 6a 9d fe ff       	call   c00005d2 <memcpy>
c0016868:	e8 8f 13 00 00       	call   c0017bfc <unlockScheduler()>
c001686d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	e9 f5 fe ff ff       	jmp    c0016770 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001687b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001687e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016888:	0f 86 bc 00 00 00    	jbe    c001694a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001688e:	e8 67 13 00 00       	call   c0017bfa <lockScheduler()>
c0016893:	51                   	push   ecx
c0016894:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001689a:	6a 00                	push   0x0
c001689c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168aa:	e8 8f 79 ff ff       	call   c000e23e <VAS::mapOtherVASIn(bool, VAS*)>
c00168af:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00168b5:	83 c4 10             	add    esp,0x10
c00168b8:	c1 e8 0c             	shr    eax,0xc
c00168bb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00168c5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00168cb:	e8 26 59 ff ff       	call   c000c1f6 <Phys::allocatePage()>
c00168d0:	6a 07                	push   0x7
c00168d2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00168d8:	56                   	push   esi
c00168d9:	50                   	push   eax
c00168da:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00168e0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00168e3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00168e9:	e8 f2 7a ff ff       	call   c000e3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00168ee:	58                   	pop    eax
c00168ef:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00168f5:	5a                   	pop    edx
c00168f6:	68 07 04 00 00       	push   0x407
c00168fb:	53                   	push   ebx
c00168fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016902:	50                   	push   eax
c0016903:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016909:	6a 00                	push   0x0
c001690b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016910:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016913:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016919:	e8 c2 81 ff ff       	call   c000eae0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001691e:	83 c4 1c             	add    esp,0x1c
c0016921:	68 00 10 00 00       	push   0x1000
c0016926:	6a 00                	push   0x0
c0016928:	56                   	push   esi
c0016929:	e8 da 9c fe ff       	call   c0000608 <memset>
c001692e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016934:	83 c4 10             	add    esp,0x10
c0016937:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001693d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016943:	77 86                	ja     c00168cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0016945:	e8 b2 12 00 00       	call   c0017bfc <unlockScheduler()>
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	56                   	push   esi
c001694e:	e8 8c 77 ff ff       	call   c000e0df <Virt::freeKernelVirtualPages(unsigned long)>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	b0 01                	mov    al,0x1
c0016958:	8d 65 f4             	lea    esp,[ebp-0xc]
c001695b:	5b                   	pop    ebx
c001695c:	5e                   	pop    esi
c001695d:	5f                   	pop    edi
c001695e:	5d                   	pop    ebp
c001695f:	c3                   	ret    

c0016960 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016960:	55                   	push   ebp
c0016961:	57                   	push   edi
c0016962:	56                   	push   esi
c0016963:	53                   	push   ebx
c0016964:	83 ec 48             	sub    esp,0x48
c0016967:	68 14 01 00 00       	push   0x114
c001696c:	e8 c9 85 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0016971:	83 c4 0c             	add    esp,0xc
c0016974:	89 c6                	mov    esi,eax
c0016976:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001697a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001697e:	50                   	push   eax
c001697f:	e8 d4 8b ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0016984:	58                   	pop    eax
c0016985:	5a                   	pop    edx
c0016986:	6a 01                	push   0x1
c0016988:	56                   	push   esi
c0016989:	e8 2e 8c ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	85 c0                	test   eax,eax
c0016993:	0f 85 47 01 00 00    	jne    c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016999:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	6a 34                	push   0x34
c00169a6:	e8 a1 52 ff ff       	call   c000bc4c <malloc>
c00169ab:	89 c3                	mov    ebx,eax
c00169ad:	58                   	pop    eax
c00169ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00169b0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00169b4:	57                   	push   edi
c00169b5:	53                   	push   ebx
c00169b6:	6a 00                	push   0x0
c00169b8:	6a 34                	push   0x34
c00169ba:	56                   	push   esi
c00169bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169be:	83 c4 20             	add    esp,0x20
c00169c1:	85 c0                	test   eax,eax
c00169c3:	0f 85 17 01 00 00    	jne    c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169c9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00169cf:	0f 85 0b 01 00 00    	jne    c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169d8:	85 c0                	test   eax,eax
c00169da:	0f 84 00 01 00 00    	je     c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169e0:	31 d2                	xor    edx,edx
c00169e2:	55                   	push   ebp
c00169e3:	52                   	push   edx
c00169e4:	50                   	push   eax
c00169e5:	56                   	push   esi
c00169e6:	e8 8f 8c ff ff       	call   c000f67a <File::seek(unsigned long long)>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	85 c0                	test   eax,eax
c00169f0:	0f 85 ea 00 00 00    	jne    c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169f6:	83 ec 0c             	sub    esp,0xc
c00169f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169fc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a04:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a08:	0f af c2             	imul   eax,edx
c0016a0b:	50                   	push   eax
c0016a0c:	e8 3b 52 ff ff       	call   c000bc4c <malloc>
c0016a11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016a18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a1e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016a22:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016a26:	0f af c2             	imul   eax,edx
c0016a29:	99                   	cdq    
c0016a2a:	52                   	push   edx
c0016a2b:	50                   	push   eax
c0016a2c:	56                   	push   esi
c0016a2d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a30:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016a33:	83 c4 20             	add    esp,0x20
c0016a36:	85 c0                	test   eax,eax
c0016a38:	0f 84 a2 00 00 00    	je     c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a3e:	31 d2                	xor    edx,edx
c0016a40:	51                   	push   ecx
c0016a41:	52                   	push   edx
c0016a42:	50                   	push   eax
c0016a43:	56                   	push   esi
c0016a44:	e8 31 8c ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016a49:	83 c4 10             	add    esp,0x10
c0016a4c:	85 c0                	test   eax,eax
c0016a4e:	0f 85 8c 00 00 00    	jne    c0016ae0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a54:	83 ec 0c             	sub    esp,0xc
c0016a57:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a5b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a5f:	31 ed                	xor    ebp,ebp
c0016a61:	0f af c2             	imul   eax,edx
c0016a64:	50                   	push   eax
c0016a65:	e8 e2 51 ff ff       	call   c000bc4c <malloc>
c0016a6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a77:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a7b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a7f:	0f af c2             	imul   eax,edx
c0016a82:	99                   	cdq    
c0016a83:	52                   	push   edx
c0016a84:	50                   	push   eax
c0016a85:	56                   	push   esi
c0016a86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a89:	83 c4 20             	add    esp,0x20
c0016a8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a94:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016a98:	0f 86 80 00 00 00    	jbe    c0016b1e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016a9e:	0f b7 fd             	movzx  edi,bp
c0016aa1:	c1 e7 05             	shl    edi,0x5
c0016aa4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016aa8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016aab:	75 6b                	jne    c0016b18 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016aad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016ab0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ab4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016ab7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016abb:	52                   	push   edx
c0016abc:	31 d2                	xor    edx,edx
c0016abe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016ac1:	52                   	push   edx
c0016ac2:	50                   	push   eax
c0016ac3:	56                   	push   esi
c0016ac4:	e8 b1 8b ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	85 c0                	test   eax,eax
c0016ace:	74 17                	je     c0016ae7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	68 73 1c 02 c0       	push   0xc0021c73
c0016ad8:	e8 4c 85 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	31 c0                	xor    eax,eax
c0016ae2:	e9 87 00 00 00       	jmp    c0016b6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016ae7:	83 ec 0c             	sub    esp,0xc
c0016aea:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016aed:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016af0:	50                   	push   eax
c0016af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016af5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016af9:	56                   	push   esi
c0016afa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016afe:	e8 e0 fb ff ff       	call   c00166e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016b03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b07:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016b0b:	83 c4 20             	add    esp,0x20
c0016b0e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016b12:	73 04                	jae    c0016b18 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016b14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b18:	45                   	inc    ebp
c0016b19:	e9 76 ff ff ff       	jmp    c0016a94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016b1e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016b22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b2a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016b30:	83 ec 0c             	sub    esp,0xc
c0016b33:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016b39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b3e:	05 00 10 00 00       	add    eax,0x1000
c0016b43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b4a:	e8 0d 51 ff ff       	call   c000bc5c <free>
c0016b4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b52:	e8 05 51 ff ff       	call   c000bc5c <free>
c0016b57:	58                   	pop    eax
c0016b58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b5c:	e8 fb 50 ff ff       	call   c000bc5c <free>
c0016b61:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b64:	e8 b1 8a ff ff       	call   c000f61a <File::close()>
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	b0 01                	mov    al,0x1
c0016b6e:	83 c4 3c             	add    esp,0x3c
c0016b71:	5b                   	pop    ebx
c0016b72:	5e                   	pop    esi
c0016b73:	5f                   	pop    edi
c0016b74:	5d                   	pop    ebp
c0016b75:	c3                   	ret    

c0016b76 <Thr::runtimeReferenceHelper()>:
c0016b76:	83 ec 18             	sub    esp,0x18
c0016b79:	68 7b 1c 02 c0       	push   0xc0021c7b
c0016b7e:	e8 a6 84 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0016b83:	fa                   	cli    
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	eb fe                	jmp    c0016b87 <Thr::runtimeReferenceHelper()+0x11>

c0016b89 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b89:	57                   	push   edi
c0016b8a:	56                   	push   esi
c0016b8b:	53                   	push   ebx
c0016b8c:	31 db                	xor    ebx,ebx
c0016b8e:	39 1d a0 4b 02 c0    	cmp    DWORD PTR ds:0xc0024ba0,ebx
c0016b94:	7e 3c                	jle    c0016bd2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016b96:	8b 34 9d 20 4b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb4e0]
c0016b9d:	31 ff                	xor    edi,edi
c0016b9f:	39 3c 9d 20 4a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb5e0],edi
c0016ba6:	7e 27                	jle    c0016bcf <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016ba8:	50                   	push   eax
c0016ba9:	50                   	push   eax
c0016baa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bae:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bb0:	03 04 9d a0 4a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb560]
c0016bb7:	50                   	push   eax
c0016bb8:	e8 48 9b fe ff       	call   c0000705 <strcmp>
c0016bbd:	83 c4 10             	add    esp,0x10
c0016bc0:	85 c0                	test   eax,eax
c0016bc2:	75 05                	jne    c0016bc9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016bc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016bc7:	eb 0b                	jmp    c0016bd4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016bc9:	83 c6 10             	add    esi,0x10
c0016bcc:	47                   	inc    edi
c0016bcd:	eb d0                	jmp    c0016b9f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016bcf:	43                   	inc    ebx
c0016bd0:	eb bc                	jmp    c0016b8e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016bd2:	31 c0                	xor    eax,eax
c0016bd4:	5b                   	pop    ebx
c0016bd5:	5e                   	pop    esi
c0016bd6:	5f                   	pop    edi
c0016bd7:	c3                   	ret    

c0016bd8 <Thr::loadKernelSymbolTable(char const*)>:
c0016bd8:	55                   	push   ebp
c0016bd9:	57                   	push   edi
c0016bda:	56                   	push   esi
c0016bdb:	53                   	push   ebx
c0016bdc:	83 ec 68             	sub    esp,0x68
c0016bdf:	8b 35 f4 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024bf4
c0016be5:	68 14 01 00 00       	push   0x114
c0016bea:	e8 4b 83 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0016bef:	83 c4 0c             	add    esp,0xc
c0016bf2:	89 c3                	mov    ebx,eax
c0016bf4:	56                   	push   esi
c0016bf5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016bf9:	50                   	push   eax
c0016bfa:	e8 59 89 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0016bff:	5e                   	pop    esi
c0016c00:	5f                   	pop    edi
c0016c01:	6a 01                	push   0x1
c0016c03:	53                   	push   ebx
c0016c04:	e8 b3 89 ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	31 d2                	xor    edx,edx
c0016c0e:	85 c0                	test   eax,eax
c0016c10:	0f 85 79 02 00 00    	jne    c0016e8f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c16:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	6a 34                	push   0x34
c0016c23:	e8 24 50 ff ff       	call   c000bc4c <malloc>
c0016c28:	59                   	pop    ecx
c0016c29:	89 c7                	mov    edi,eax
c0016c2b:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016c2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c31:	56                   	push   esi
c0016c32:	57                   	push   edi
c0016c33:	6a 00                	push   0x0
c0016c35:	6a 34                	push   0x34
c0016c37:	53                   	push   ebx
c0016c38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c3b:	83 c4 20             	add    esp,0x20
c0016c3e:	85 c0                	test   eax,eax
c0016c40:	74 17                	je     c0016c59 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	68 9d 1c 02 c0       	push   0xc0021c9d
c0016c4a:	e8 6f e0 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	31 d2                	xor    edx,edx
c0016c54:	e9 36 02 00 00       	jmp    c0016e8f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c59:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c5f:	75 e1                	jne    c0016c42 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c61:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c64:	85 c0                	test   eax,eax
c0016c66:	74 da                	je     c0016c42 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c68:	52                   	push   edx
c0016c69:	31 d2                	xor    edx,edx
c0016c6b:	52                   	push   edx
c0016c6c:	50                   	push   eax
c0016c6d:	53                   	push   ebx
c0016c6e:	e8 07 8a ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016c73:	83 c4 10             	add    esp,0x10
c0016c76:	85 c0                	test   eax,eax
c0016c78:	75 c8                	jne    c0016c42 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c81:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c85:	31 ed                	xor    ebp,ebp
c0016c87:	0f af c2             	imul   eax,edx
c0016c8a:	50                   	push   eax
c0016c8b:	e8 bc 4f ff ff       	call   c000bc4c <malloc>
c0016c90:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c9d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ca1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ca5:	0f af c2             	imul   eax,edx
c0016ca8:	99                   	cdq    
c0016ca9:	52                   	push   edx
c0016caa:	50                   	push   eax
c0016cab:	53                   	push   ebx
c0016cac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016caf:	83 c4 20             	add    esp,0x20
c0016cb2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016cba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016cc2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016cca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016cd2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016cd6:	0f 86 aa 00 00 00    	jbe    c0016d86 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016cdc:	0f b7 f5             	movzx  esi,bp
c0016cdf:	6b f6 28             	imul   esi,esi,0x28
c0016ce2:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016ce6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ced:	50                   	push   eax
c0016cee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016cf2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016cf6:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cf8:	6b c0 28             	imul   eax,eax,0x28
c0016cfb:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016cff:	89 d0                	mov    eax,edx
c0016d01:	31 d2                	xor    edx,edx
c0016d03:	52                   	push   edx
c0016d04:	50                   	push   eax
c0016d05:	53                   	push   ebx
c0016d06:	e8 6f 89 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016d0b:	83 c4 0c             	add    esp,0xc
c0016d0e:	6a 20                	push   0x20
c0016d10:	6a 00                	push   0x0
c0016d12:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d16:	52                   	push   edx
c0016d17:	e8 ec 98 fe ff       	call   c0000608 <memset>
c0016d1c:	58                   	pop    eax
c0016d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d1f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016d23:	51                   	push   ecx
c0016d24:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016d28:	52                   	push   edx
c0016d29:	6a 00                	push   0x0
c0016d2b:	6a 1f                	push   0x1f
c0016d2d:	53                   	push   ebx
c0016d2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d31:	83 c4 18             	add    esp,0x18
c0016d34:	68 b4 1c 02 c0       	push   0xc0021cb4
c0016d39:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016d3d:	52                   	push   edx
c0016d3e:	e8 c2 99 fe ff       	call   c0000705 <strcmp>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	85 c0                	test   eax,eax
c0016d48:	75 0f                	jne    c0016d59 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016d4a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d59:	50                   	push   eax
c0016d5a:	50                   	push   eax
c0016d5b:	68 bc 1c 02 c0       	push   0xc0021cbc
c0016d60:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d64:	50                   	push   eax
c0016d65:	e8 9b 99 fe ff       	call   c0000705 <strcmp>
c0016d6a:	83 c4 10             	add    esp,0x10
c0016d6d:	85 c0                	test   eax,eax
c0016d6f:	75 0f                	jne    c0016d80 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016d71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d80:	45                   	inc    ebp
c0016d81:	e9 4c ff ff ff       	jmp    c0016cd2 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016d86:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d8b:	75 10                	jne    c0016d9d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	68 c4 1c 02 c0       	push   0xc0021cc4
c0016d95:	e8 24 df ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016da2:	75 10                	jne    c0016db4 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	68 c4 1c 02 c0       	push   0xc0021cc4
c0016dac:	e8 0d df ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0016db1:	83 c4 10             	add    esp,0x10
c0016db4:	31 d2                	xor    edx,edx
c0016db6:	50                   	push   eax
c0016db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbb:	52                   	push   edx
c0016dbc:	50                   	push   eax
c0016dbd:	53                   	push   ebx
c0016dbe:	e8 b7 88 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016dc3:	5a                   	pop    edx
c0016dc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dc8:	e8 7f 4e ff ff       	call   c000bc4c <malloc>
c0016dcd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016dd5:	89 c1                	mov    ecx,eax
c0016dd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ddb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ddf:	5e                   	pop    esi
c0016de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016de2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016de6:	55                   	push   ebp
c0016de7:	51                   	push   ecx
c0016de8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016dec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016df0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016df4:	53                   	push   ebx
c0016df5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016df8:	83 c4 14             	add    esp,0x14
c0016dfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016dff:	e8 48 4e ff ff       	call   c000bc4c <malloc>
c0016e04:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e07:	89 c6                	mov    esi,eax
c0016e09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e0b:	56                   	push   esi
c0016e0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e14:	53                   	push   ebx
c0016e15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e1c:	8b 15 a0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024ba0
c0016e22:	83 c4 1c             	add    esp,0x1c
c0016e25:	c1 e8 04             	shr    eax,0x4
c0016e28:	89 04 95 20 4a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb5e0],eax
c0016e2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e33:	31 d2                	xor    edx,edx
c0016e35:	52                   	push   edx
c0016e36:	50                   	push   eax
c0016e37:	53                   	push   ebx
c0016e38:	e8 3d 88 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016e3d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e40:	31 d2                	xor    edx,edx
c0016e42:	56                   	push   esi
c0016e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e47:	52                   	push   edx
c0016e48:	50                   	push   eax
c0016e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e4b:	53                   	push   ebx
c0016e4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e4f:	83 c4 14             	add    esp,0x14
c0016e52:	53                   	push   ebx
c0016e53:	e8 c2 87 ff ff       	call   c000f61a <File::close()>
c0016e58:	5d                   	pop    ebp
c0016e59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e5d:	e8 fa 4d ff ff       	call   c000bc5c <free>
c0016e62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e65:	e8 f2 4d ff ff       	call   c000bc5c <free>
c0016e6a:	a1 a0 4b 02 c0       	mov    eax,ds:0xc0024ba0
c0016e6f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016e73:	8d 50 01             	lea    edx,[eax+0x1]
c0016e76:	89 0c 85 20 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4e0],ecx
c0016e7d:	89 15 a0 4b 02 c0    	mov    DWORD PTR ds:0xc0024ba0,edx
c0016e83:	89 34 85 a0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb560],esi
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	b2 01                	mov    dl,0x1
c0016e8f:	83 c4 5c             	add    esp,0x5c
c0016e92:	88 d0                	mov    al,dl
c0016e94:	5b                   	pop    ebx
c0016e95:	5e                   	pop    esi
c0016e96:	5f                   	pop    edi
c0016e97:	5d                   	pop    ebp
c0016e98:	c3                   	ret    

c0016e99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016e99:	55                   	push   ebp
c0016e9a:	57                   	push   edi
c0016e9b:	56                   	push   esi
c0016e9c:	53                   	push   ebx
c0016e9d:	81 ec 68 03 00 00    	sub    esp,0x368
c0016ea3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016eaa:	8b 1d f4 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024bf4
c0016eb0:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016eb4:	68 14 01 00 00       	push   0x114
c0016eb9:	e8 7c 80 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0016ebe:	83 c4 0c             	add    esp,0xc
c0016ec1:	89 c5                	mov    ebp,eax
c0016ec3:	53                   	push   ebx
c0016ec4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016ecb:	50                   	push   eax
c0016ecc:	e8 87 86 ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0016ed1:	58                   	pop    eax
c0016ed2:	5a                   	pop    edx
c0016ed3:	6a 01                	push   0x1
c0016ed5:	55                   	push   ebp
c0016ed6:	e8 e1 86 ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	85 c0                	test   eax,eax
c0016ee0:	0f 85 f2 06 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ee6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016eee:	83 ec 0c             	sub    esp,0xc
c0016ef1:	6a 34                	push   0x34
c0016ef3:	e8 54 4d ff ff       	call   c000bc4c <malloc>
c0016ef8:	89 c7                	mov    edi,eax
c0016efa:	58                   	pop    eax
c0016efb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016efe:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016f02:	53                   	push   ebx
c0016f03:	57                   	push   edi
c0016f04:	6a 00                	push   0x0
c0016f06:	6a 34                	push   0x34
c0016f08:	55                   	push   ebp
c0016f09:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f0c:	83 c4 20             	add    esp,0x20
c0016f0f:	85 c0                	test   eax,eax
c0016f11:	0f 85 c1 06 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f17:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016f1d:	0f 85 b5 06 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f23:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016f26:	85 c0                	test   eax,eax
c0016f28:	0f 84 aa 06 00 00    	je     c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f2e:	31 d2                	xor    edx,edx
c0016f30:	56                   	push   esi
c0016f31:	52                   	push   edx
c0016f32:	50                   	push   eax
c0016f33:	55                   	push   ebp
c0016f34:	e8 41 87 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	85 c0                	test   eax,eax
c0016f3e:	0f 85 94 06 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f44:	83 ec 0c             	sub    esp,0xc
c0016f47:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016f4a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016f52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f56:	0f af c2             	imul   eax,edx
c0016f59:	50                   	push   eax
c0016f5a:	e8 ed 4c ff ff       	call   c000bc4c <malloc>
c0016f5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f6d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f75:	0f af c2             	imul   eax,edx
c0016f78:	99                   	cdq    
c0016f79:	52                   	push   edx
c0016f7a:	50                   	push   eax
c0016f7b:	55                   	push   ebp
c0016f7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f7f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f82:	83 c4 20             	add    esp,0x20
c0016f85:	85 c0                	test   eax,eax
c0016f87:	0f 84 4b 06 00 00    	je     c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f8d:	31 d2                	xor    edx,edx
c0016f8f:	51                   	push   ecx
c0016f90:	52                   	push   edx
c0016f91:	50                   	push   eax
c0016f92:	55                   	push   ebp
c0016f93:	e8 e2 86 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0016f98:	83 c4 10             	add    esp,0x10
c0016f9b:	85 c0                	test   eax,eax
c0016f9d:	0f 85 35 06 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016fa3:	83 ec 0c             	sub    esp,0xc
c0016fa6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016faa:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fae:	31 f6                	xor    esi,esi
c0016fb0:	0f af c2             	imul   eax,edx
c0016fb3:	50                   	push   eax
c0016fb4:	e8 93 4c ff ff       	call   c000bc4c <malloc>
c0016fb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fbc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016fc0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fc7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016fcb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016fcf:	0f af c2             	imul   eax,edx
c0016fd2:	99                   	cdq    
c0016fd3:	52                   	push   edx
c0016fd4:	50                   	push   eax
c0016fd5:	55                   	push   ebp
c0016fd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fd9:	83 c4 20             	add    esp,0x20
c0016fdc:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016fe0:	0f 86 8a 00 00 00    	jbe    c0017070 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016fe6:	0f b7 de             	movzx  ebx,si
c0016fe9:	c1 e3 05             	shl    ebx,0x5
c0016fec:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016ff0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016ff3:	75 75                	jne    c001706a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016ff5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ff8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ffc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017003:	52                   	push   edx
c0017004:	31 d2                	xor    edx,edx
c0017006:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017009:	52                   	push   edx
c001700a:	50                   	push   eax
c001700b:	55                   	push   ebp
c001700c:	e8 69 86 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0017011:	83 c4 10             	add    esp,0x10
c0017014:	85 c0                	test   eax,eax
c0017016:	0f 85 bc 05 00 00    	jne    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001701c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017023:	31 d2                	xor    edx,edx
c0017025:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017029:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001702c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017030:	83 ec 0c             	sub    esp,0xc
c0017033:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017037:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001703e:	50                   	push   eax
c001703f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017043:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017047:	52                   	push   edx
c0017048:	50                   	push   eax
c0017049:	55                   	push   ebp
c001704a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001704d:	83 c4 1c             	add    esp,0x1c
c0017050:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017053:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017056:	50                   	push   eax
c0017057:	6a 00                	push   0x0
c0017059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0017061:	50                   	push   eax
c0017062:	e8 a1 95 fe ff       	call   c0000608 <memset>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	46                   	inc    esi
c001706b:	e9 6c ff ff ff       	jmp    c0016fdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017070:	31 db                	xor    ebx,ebx
c0017072:	50                   	push   eax
c0017073:	68 00 01 00 00       	push   0x100
c0017078:	6a 00                	push   0x0
c001707a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001707e:	50                   	push   eax
c001707f:	e8 84 95 fe ff       	call   c0000608 <memset>
c0017084:	83 c4 0c             	add    esp,0xc
c0017087:	68 00 01 00 00       	push   0x100
c001708c:	6a 00                	push   0x0
c001708e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017095:	50                   	push   eax
c0017096:	e8 6d 95 fe ff       	call   c0000608 <memset>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00170a6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00170ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00170b6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00170c6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00170ca:	0f 86 30 01 00 00    	jbe    c0017200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00170d0:	0f b7 f3             	movzx  esi,bx
c00170d3:	6b f6 28             	imul   esi,esi,0x28
c00170d6:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00170da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170e1:	50                   	push   eax
c00170e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170e6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00170ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00170ec:	6b d2 28             	imul   edx,edx,0x28
c00170ef:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170f3:	31 d2                	xor    edx,edx
c00170f5:	52                   	push   edx
c00170f6:	50                   	push   eax
c00170f7:	55                   	push   ebp
c00170f8:	e8 7d 85 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c00170fd:	83 c4 0c             	add    esp,0xc
c0017100:	6a 20                	push   0x20
c0017102:	6a 00                	push   0x0
c0017104:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001710b:	51                   	push   ecx
c001710c:	e8 f7 94 fe ff       	call   c0000608 <memset>
c0017111:	58                   	pop    eax
c0017112:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017115:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017119:	52                   	push   edx
c001711a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017121:	51                   	push   ecx
c0017122:	6a 00                	push   0x0
c0017124:	6a 1f                	push   0x1f
c0017126:	55                   	push   ebp
c0017127:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001712a:	83 c4 1c             	add    esp,0x1c
c001712d:	6a 09                	push   0x9
c001712f:	68 de 1c 02 c0       	push   0xc0021cde
c0017134:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001713b:	51                   	push   ecx
c001713c:	e8 2e 94 fe ff       	call   c000056f <memcmp>
c0017141:	83 c4 10             	add    esp,0x10
c0017144:	85 c0                	test   eax,eax
c0017146:	75 21                	jne    c0017169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001714c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017154:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017158:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001715b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017162:	89 c8                	mov    eax,ecx
c0017164:	40                   	inc    eax
c0017165:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017169:	50                   	push   eax
c001716a:	6a 09                	push   0x9
c001716c:	68 e8 1c 02 c0       	push   0xc0021ce8
c0017171:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017178:	50                   	push   eax
c0017179:	e8 f1 93 fe ff       	call   c000056f <memcmp>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	85 c0                	test   eax,eax
c0017183:	75 21                	jne    c00171a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017189:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001718d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017191:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017195:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017198:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001719f:	89 c8                	mov    eax,ecx
c00171a1:	40                   	inc    eax
c00171a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171a6:	50                   	push   eax
c00171a7:	50                   	push   eax
c00171a8:	68 b4 1c 02 c0       	push   0xc0021cb4
c00171ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171b4:	50                   	push   eax
c00171b5:	e8 4b 95 fe ff       	call   c0000705 <strcmp>
c00171ba:	83 c4 10             	add    esp,0x10
c00171bd:	85 c0                	test   eax,eax
c00171bf:	75 0f                	jne    c00171d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00171c1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171d0:	50                   	push   eax
c00171d1:	50                   	push   eax
c00171d2:	68 bc 1c 02 c0       	push   0xc0021cbc
c00171d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00171de:	50                   	push   eax
c00171df:	e8 21 95 fe ff       	call   c0000705 <strcmp>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	85 c0                	test   eax,eax
c00171e9:	75 0f                	jne    c00171fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00171eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171fa:	43                   	inc    ebx
c00171fb:	e9 c6 fe ff ff       	jmp    c00170c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017200:	31 d2                	xor    edx,edx
c0017202:	50                   	push   eax
c0017203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017207:	52                   	push   edx
c0017208:	50                   	push   eax
c0017209:	55                   	push   ebp
c001720a:	e8 6b 84 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c001720f:	5a                   	pop    edx
c0017210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017214:	e8 33 4a ff ff       	call   c000bc4c <malloc>
c0017219:	31 d2                	xor    edx,edx
c001721b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001721f:	59                   	pop    ecx
c0017220:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017223:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017227:	53                   	push   ebx
c0017228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001722c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017230:	52                   	push   edx
c0017231:	50                   	push   eax
c0017232:	55                   	push   ebp
c0017233:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017236:	83 c4 14             	add    esp,0x14
c0017239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001723d:	e8 0a 4a ff ff       	call   c000bc4c <malloc>
c0017242:	31 d2                	xor    edx,edx
c0017244:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017248:	83 c4 0c             	add    esp,0xc
c001724b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001724f:	52                   	push   edx
c0017250:	50                   	push   eax
c0017251:	55                   	push   ebp
c0017252:	e8 23 84 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c0017257:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001725a:	31 d2                	xor    edx,edx
c001725c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017260:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017263:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017267:	52                   	push   edx
c0017268:	50                   	push   eax
c0017269:	55                   	push   ebp
c001726a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001726d:	83 c4 20             	add    esp,0x20
c0017270:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001727c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017280:	0f 84 56 03 00 00    	je     c00175dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0017286:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001728d:	31 d2                	xor    edx,edx
c001728f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017293:	c1 e8 03             	shr    eax,0x3
c0017296:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001729a:	50                   	push   eax
c001729b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001729f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00172a3:	52                   	push   edx
c00172a4:	50                   	push   eax
c00172a5:	55                   	push   ebp
c00172a6:	e8 cf 83 ff ff       	call   c000f67a <File::seek(unsigned long long)>
c00172ab:	58                   	pop    eax
c00172ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172b0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00172b7:	e8 90 49 ff ff       	call   c000bc4c <malloc>
c00172bc:	31 d2                	xor    edx,edx
c00172be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172c2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172c5:	58                   	pop    eax
c00172c6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00172ca:	50                   	push   eax
c00172cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00172cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172d3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00172da:	52                   	push   edx
c00172db:	50                   	push   eax
c00172dc:	55                   	push   ebp
c00172dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172e0:	83 c4 20             	add    esp,0x20
c00172e3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172eb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00172ef:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00172f3:	0f 8d c7 02 00 00    	jge    c00175c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c00172f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017301:	31 db                	xor    ebx,ebx
c0017303:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017306:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001730a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001730e:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017312:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017316:	c1 e8 08             	shr    eax,0x8
c0017319:	89 c6                	mov    esi,eax
c001731b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001731f:	c1 e6 04             	shl    esi,0x4
c0017322:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017326:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017329:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001732d:	85 c0                	test   eax,eax
c001732f:	0f 85 17 01 00 00    	jne    c001744c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017335:	83 ec 0c             	sub    esp,0xc
c0017338:	b3 01                	mov    bl,0x1
c001733a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001733e:	03 06                	add    eax,DWORD PTR [esi]
c0017340:	50                   	push   eax
c0017341:	e8 43 f8 ff ff       	call   c0016b89 <Thr::getAddressOfKernelSymbol(char const*)>
c0017346:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017352:	0f 85 f4 00 00 00    	jne    c001744c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017358:	50                   	push   eax
c0017359:	50                   	push   eax
c001735a:	68 f2 1c 02 c0       	push   0xc0021cf2
c001735f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017363:	03 06                	add    eax,DWORD PTR [esi]
c0017365:	50                   	push   eax
c0017366:	e8 9a 93 fe ff       	call   c0000705 <strcmp>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	85 c0                	test   eax,eax
c0017370:	75 0a                	jne    c001737c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0017372:	b8 9c e7 01 c0       	mov    eax,0xc001e79c
c0017377:	e9 ca 00 00 00       	jmp    c0017446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001737c:	50                   	push   eax
c001737d:	50                   	push   eax
c001737e:	68 fc 1c 02 c0       	push   0xc0021cfc
c0017383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017387:	03 06                	add    eax,DWORD PTR [esi]
c0017389:	50                   	push   eax
c001738a:	e8 76 93 fe ff       	call   c0000705 <strcmp>
c001738f:	83 c4 10             	add    esp,0x10
c0017392:	85 c0                	test   eax,eax
c0017394:	75 0a                	jne    c00173a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c0017396:	b8 d0 e4 01 c0       	mov    eax,0xc001e4d0
c001739b:	e9 a6 00 00 00       	jmp    c0017446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00173a0:	53                   	push   ebx
c00173a1:	53                   	push   ebx
c00173a2:	68 05 1d 02 c0       	push   0xc0021d05
c00173a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173ab:	03 06                	add    eax,DWORD PTR [esi]
c00173ad:	50                   	push   eax
c00173ae:	e8 52 93 fe ff       	call   c0000705 <strcmp>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	85 c0                	test   eax,eax
c00173b8:	75 0a                	jne    c00173c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c00173ba:	b8 9c e8 01 c0       	mov    eax,0xc001e89c
c00173bf:	e9 82 00 00 00       	jmp    c0017446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00173c4:	51                   	push   ecx
c00173c5:	51                   	push   ecx
c00173c6:	68 0f 1d 02 c0       	push   0xc0021d0f
c00173cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173cf:	03 06                	add    eax,DWORD PTR [esi]
c00173d1:	50                   	push   eax
c00173d2:	e8 2e 93 fe ff       	call   c0000705 <strcmp>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	85 c0                	test   eax,eax
c00173dc:	74 63                	je     c0017441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c00173de:	50                   	push   eax
c00173df:	50                   	push   eax
c00173e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e4:	03 06                	add    eax,DWORD PTR [esi]
c00173e6:	50                   	push   eax
c00173e7:	68 18 1d 02 c0       	push   0xc0021d18
c00173ec:	e8 38 7c ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00173f1:	58                   	pop    eax
c00173f2:	5a                   	pop    edx
c00173f3:	68 32 1d 02 c0       	push   0xc0021d32
c00173f8:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00173ff:	53                   	push   ebx
c0017400:	e8 a2 92 fe ff       	call   c00006a7 <strcpy>
c0017405:	59                   	pop    ecx
c0017406:	58                   	pop    eax
c0017407:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001740b:	03 06                	add    eax,DWORD PTR [esi]
c001740d:	50                   	push   eax
c001740e:	53                   	push   ebx
c001740f:	e8 57 93 fe ff       	call   c000076b <strcat>
c0017414:	58                   	pop    eax
c0017415:	5a                   	pop    edx
c0017416:	68 c8 1d 02 c0       	push   0xc0021dc8
c001741b:	53                   	push   ebx
c001741c:	e8 4a 93 fe ff       	call   c000076b <strcat>
c0017421:	83 c4 10             	add    esp,0x10
c0017424:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017429:	0f 84 4b 01 00 00    	je     c001757a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001742f:	83 ec 0c             	sub    esp,0xc
c0017432:	53                   	push   ebx
c0017433:	e8 86 d8 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0017438:	83 c4 10             	add    esp,0x10
c001743b:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001743f:	eb 0b                	jmp    c001744c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017441:	b8 1c e6 01 c0       	mov    eax,0xc001e61c
c0017446:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001744a:	b3 01                	mov    bl,0x1
c001744c:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017451:	0f 85 80 00 00 00    	jne    c00174d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0017457:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001745e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017462:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017466:	01 ce                	add    esi,ecx
c0017468:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017470:	8b 06                	mov    eax,DWORD PTR [esi]
c0017472:	0f 94 c2             	sete   dl
c0017475:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001747d:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017482:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017486:	84 db                	test   bl,bl
c0017488:	74 31                	je     c00174bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001748a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001748e:	01 c3                	add    ebx,eax
c0017490:	84 d2                	test   dl,dl
c0017492:	75 0a                	jne    c001749e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c0017494:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017498:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001749c:	76 32                	jbe    c00174d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001749e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174a3:	0f 84 d1 00 00 00    	je     c001757a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174a9:	83 ec 0c             	sub    esp,0xc
c00174ac:	68 49 1d 02 c0       	push   0xc0021d49
c00174b1:	e8 08 d8 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c00174b6:	83 c4 10             	add    esp,0x10
c00174b9:	eb 15                	jmp    c00174d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174bb:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00174be:	84 d2                	test   dl,dl
c00174c0:	75 0e                	jne    c00174d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174c2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174c6:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174ca:	77 04                	ja     c00174d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00174cc:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174d0:	89 1e                	mov    DWORD PTR [esi],ebx
c00174d2:	e9 e0 00 00 00       	jmp    c00175b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00174d7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00174dc:	75 6e                	jne    c001754c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c00174de:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00174e5:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00174e9:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00174ed:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00174f5:	74 17                	je     c001750e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174f7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00174ff:	74 0d                	je     c001750e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017501:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017505:	83 e8 04             	sub    eax,0x4
c0017508:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001750c:	76 17                	jbe    c0017525 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001750e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017513:	74 65                	je     c001757a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017515:	83 ec 0c             	sub    esp,0xc
c0017518:	68 65 1d 02 c0       	push   0xc0021d65
c001751d:	e8 9c d7 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	8b 16                	mov    edx,DWORD PTR [esi]
c0017527:	84 db                	test   bl,bl
c0017529:	74 13                	je     c001753e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001752b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752f:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017536:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001753a:	01 d0                	add    eax,edx
c001753c:	eb 06                	jmp    c0017544 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001753e:	89 d0                	mov    eax,edx
c0017540:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017544:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017548:	89 06                	mov    DWORD PTR [esi],eax
c001754a:	eb 6b                	jmp    c00175b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001754c:	50                   	push   eax
c001754d:	50                   	push   eax
c001754e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017553:	50                   	push   eax
c0017554:	68 81 1d 02 c0       	push   0xc0021d81
c0017559:	e8 cb 7a ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017566:	74 12                	je     c001757a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	68 8c 1d 02 c0       	push   0xc0021d8c
c0017570:	e8 49 d7 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0017575:	83 c4 10             	add    esp,0x10
c0017578:	eb 3d                	jmp    c00175b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	55                   	push   ebp
c001757e:	e8 97 80 ff ff       	call   c000f61a <File::close()>
c0017583:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017586:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017589:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001758c:	59                   	pop    ecx
c001758d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017591:	e8 c6 46 ff ff       	call   c000bc5c <free>
c0017596:	5b                   	pop    ebx
c0017597:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001759b:	e8 bc 46 ff ff       	call   c000bc5c <free>
c00175a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175a3:	e8 b4 46 ff ff       	call   c000bc5c <free>
c00175a8:	5e                   	pop    esi
c00175a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175ad:	e8 aa 46 ff ff       	call   c000bc5c <free>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	eb 21                	jmp    c00175d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00175b7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00175bb:	e9 2b fd ff ff       	jmp    c00172eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175c7:	e8 90 46 ff ff       	call   c000bc5c <free>
c00175cc:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00175d0:	83 c4 10             	add    esp,0x10
c00175d3:	e9 a0 fc ff ff       	jmp    c0017278 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00175d8:	31 c0                	xor    eax,eax
c00175da:	eb 33                	jmp    c001760f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	55                   	push   ebp
c00175e0:	e8 35 80 ff ff       	call   c000f61a <File::close()>
c00175e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175ee:	58                   	pop    eax
c00175ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175f3:	e8 64 46 ff ff       	call   c000bc5c <free>
c00175f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175fb:	e8 5c 46 ff ff       	call   c000bc5c <free>
c0017600:	5a                   	pop    edx
c0017601:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017605:	e8 52 46 ff ff       	call   c000bc5c <free>
c001760a:	83 c4 10             	add    esp,0x10
c001760d:	b0 01                	mov    al,0x1
c001760f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017615:	5b                   	pop    ebx
c0017616:	5e                   	pop    esi
c0017617:	5f                   	pop    edi
c0017618:	5d                   	pop    ebp
c0017619:	c3                   	ret    

c001761a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001761a:	56                   	push   esi
c001761b:	31 d2                	xor    edx,edx
c001761d:	53                   	push   ebx
c001761e:	8b 1d 00 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024400
c0017624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017628:	39 d3                	cmp    ebx,edx
c001762a:	7e 1b                	jle    c0017647 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001762c:	8b 04 95 20 46 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb9e0]
c0017633:	39 c8                	cmp    eax,ecx
c0017635:	77 0d                	ja     c0017644 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017637:	8b 34 95 20 44 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbbe0]
c001763e:	01 c6                	add    esi,eax
c0017640:	39 ce                	cmp    esi,ecx
c0017642:	77 05                	ja     c0017649 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017644:	42                   	inc    edx
c0017645:	eb e1                	jmp    c0017628 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017647:	31 c0                	xor    eax,eax
c0017649:	5b                   	pop    ebx
c001764a:	5e                   	pop    esi
c001764b:	c3                   	ret    

c001764c <Thr::getDriverNameFromAddress(unsigned long)>:
c001764c:	53                   	push   ebx
c001764d:	31 c0                	xor    eax,eax
c001764f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017653:	8b 1d 00 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024400
c0017659:	39 c3                	cmp    ebx,eax
c001765b:	7e 22                	jle    c001767f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001765d:	8b 14 85 20 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb9e0]
c0017664:	39 ca                	cmp    edx,ecx
c0017666:	77 14                	ja     c001767c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017668:	03 14 85 20 44 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbbe0]
c001766f:	39 ca                	cmp    edx,ecx
c0017671:	76 09                	jbe    c001767c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017673:	8b 04 85 20 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb7e0]
c001767a:	eb 05                	jmp    c0017681 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001767c:	40                   	inc    eax
c001767d:	eb da                	jmp    c0017659 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001767f:	31 c0                	xor    eax,eax
c0017681:	5b                   	pop    ebx
c0017682:	c3                   	ret    

c0017683 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017683:	53                   	push   ebx
c0017684:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017688:	53                   	push   ebx
c0017689:	e8 8c ff ff ff       	call   c001761a <Thr::getDriverBaseFromAddress(unsigned long)>
c001768e:	5a                   	pop    edx
c001768f:	31 d2                	xor    edx,edx
c0017691:	85 c0                	test   eax,eax
c0017693:	74 04                	je     c0017699 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017695:	89 da                	mov    edx,ebx
c0017697:	29 c2                	sub    edx,eax
c0017699:	89 d0                	mov    eax,edx
c001769b:	5b                   	pop    ebx
c001769c:	c3                   	ret    

c001769d <Thr::loadDLL(char const*, bool)>:
c001769d:	55                   	push   ebp
c001769e:	57                   	push   edi
c001769f:	56                   	push   esi
c00176a0:	53                   	push   ebx
c00176a1:	81 ec 24 01 00 00    	sub    esp,0x124
c00176a7:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00176ae:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00176b5:	56                   	push   esi
c00176b6:	68 a4 1d 02 c0       	push   0xc0021da4
c00176bb:	e8 69 79 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00176c0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00176c7:	e8 6e 78 ff ff       	call   c000ef3a <operator new(unsigned long)>
c00176cc:	83 c4 0c             	add    esp,0xc
c00176cf:	89 c3                	mov    ebx,eax
c00176d1:	ff 35 f4 4b 02 c0    	push   DWORD PTR ds:0xc0024bf4
c00176d7:	56                   	push   esi
c00176d8:	50                   	push   eax
c00176d9:	e8 7a 7e ff ff       	call   c000f558 <File::File(char const*, Process*)>
c00176de:	83 c4 0c             	add    esp,0xc
c00176e1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00176e5:	50                   	push   eax
c00176e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00176ea:	50                   	push   eax
c00176eb:	53                   	push   ebx
c00176ec:	e8 77 81 ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c00176f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0017701:	75 0a                	jne    c001770d <Thr::loadDLL(char const*, bool)+0x70>
c0017703:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017707:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001770b:	75 3e                	jne    c001774b <Thr::loadDLL(char const*, bool)+0xae>
c001770d:	89 f8                	mov    eax,edi
c001770f:	31 db                	xor    ebx,ebx
c0017711:	84 c0                	test   al,al
c0017713:	0f 84 ca 00 00 00    	je     c00177e3 <Thr::loadDLL(char const*, bool)+0x146>
c0017719:	50                   	push   eax
c001771a:	50                   	push   eax
c001771b:	68 b5 1d 02 c0       	push   0xc0021db5
c0017720:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017724:	53                   	push   ebx
c0017725:	e8 7d 8f fe ff       	call   c00006a7 <strcpy>
c001772a:	58                   	pop    eax
c001772b:	5a                   	pop    edx
c001772c:	56                   	push   esi
c001772d:	53                   	push   ebx
c001772e:	e8 38 90 fe ff       	call   c000076b <strcat>
c0017733:	59                   	pop    ecx
c0017734:	5d                   	pop    ebp
c0017735:	68 c8 1d 02 c0       	push   0xc0021dc8
c001773a:	53                   	push   ebx
c001773b:	e8 2b 90 fe ff       	call   c000076b <strcat>
c0017740:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017743:	e8 76 d5 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0017748:	83 c4 10             	add    esp,0x10
c001774b:	83 ec 0c             	sub    esp,0xc
c001774e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017752:	e8 f5 44 ff ff       	call   c000bc4c <malloc>
c0017757:	89 34 24             	mov    DWORD PTR [esp],esi
c001775a:	89 c3                	mov    ebx,eax
c001775c:	e8 c4 8e fe ff       	call   c0000625 <strlen>
c0017761:	8b 2d 00 44 02 c0    	mov    ebp,DWORD PTR ds:0xc0024400
c0017767:	40                   	inc    eax
c0017768:	89 04 24             	mov    DWORD PTR [esp],eax
c001776b:	e8 dc 44 ff ff       	call   c000bc4c <malloc>
c0017770:	89 04 ad 20 48 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb7e0],eax
c0017777:	58                   	pop    eax
c0017778:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c001777d:	5a                   	pop    edx
c001777e:	56                   	push   esi
c001777f:	ff 34 85 20 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb7e0]
c0017786:	e8 1c 8f fe ff       	call   c00006a7 <strcpy>
c001778b:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c0017790:	8d 50 01             	lea    edx,[eax+0x1]
c0017793:	89 1c 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],ebx
c001779a:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c00177a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177a4:	59                   	pop    ecx
c00177a5:	89 14 85 20 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbbe0],edx
c00177ac:	5d                   	pop    ebp
c00177ad:	53                   	push   ebx
c00177ae:	68 ca 1d 02 c0       	push   0xc0021dca
c00177b3:	e8 71 78 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00177b8:	83 c4 0c             	add    esp,0xc
c00177bb:	6a 01                	push   0x1
c00177bd:	53                   	push   ebx
c00177be:	56                   	push   esi
c00177bf:	e8 d5 f6 ff ff       	call   c0016e99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	84 c0                	test   al,al
c00177c9:	75 18                	jne    c00177e3 <Thr::loadDLL(char const*, bool)+0x146>
c00177cb:	31 db                	xor    ebx,ebx
c00177cd:	89 f8                	mov    eax,edi
c00177cf:	84 c0                	test   al,al
c00177d1:	74 10                	je     c00177e3 <Thr::loadDLL(char const*, bool)+0x146>
c00177d3:	83 ec 0c             	sub    esp,0xc
c00177d6:	68 e9 1d 02 c0       	push   0xc0021de9
c00177db:	e8 de d4 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177e9:	89 d8                	mov    eax,ebx
c00177eb:	5b                   	pop    ebx
c00177ec:	5e                   	pop    esi
c00177ed:	5f                   	pop    edi
c00177ee:	5d                   	pop    ebp
c00177ef:	c3                   	ret    

c00177f0 <Thr::executeDLL(unsigned long, void*)>:
c00177f0:	56                   	push   esi
c00177f1:	53                   	push   ebx
c00177f2:	51                   	push   ecx
c00177f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177fb:	85 db                	test   ebx,ebx
c00177fd:	75 10                	jne    c001780f <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	68 08 1e 02 c0       	push   0xc0021e08
c0017807:	e8 b2 d4 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017813:	89 d8                	mov    eax,ebx
c0017815:	5a                   	pop    edx
c0017816:	5b                   	pop    ebx
c0017817:	5e                   	pop    esi
c0017818:	ff e0                	jmp    eax

c001781a <changeTSS>:
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	e8 96 c7 ff ff       	call   c0013fb8 <thisCPU()>
c0017822:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017828:	83 ec 08             	sub    esp,0x8
c001782b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001782e:	05 7c 11 00 00       	add    eax,0x117c
c0017833:	c1 e1 15             	shl    ecx,0x15
c0017836:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001783b:	29 ca                	sub    edx,ecx
c001783d:	52                   	push   edx
c001783e:	50                   	push   eax
c001783f:	e8 44 5e ff ff       	call   c000d688 <TSS::setESP(unsigned long)>
c0017844:	83 c4 1c             	add    esp,0x1c
c0017847:	c3                   	ret    

c0017848 <Process::addArgs(char**)>:
c0017848:	57                   	push   edi
c0017849:	56                   	push   esi
c001784a:	53                   	push   ebx
c001784b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001784f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017853:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001785d:	85 ff                	test   edi,edi
c001785f:	74 3d                	je     c001789e <Process::addArgs(char**)+0x56>
c0017861:	8b 07                	mov    eax,DWORD PTR [edi]
c0017863:	85 c0                	test   eax,eax
c0017865:	74 37                	je     c001789e <Process::addArgs(char**)+0x56>
c0017867:	31 db                	xor    ebx,ebx
c0017869:	83 ec 0c             	sub    esp,0xc
c001786c:	50                   	push   eax
c001786d:	e8 b3 8d fe ff       	call   c0000625 <strlen>
c0017872:	40                   	inc    eax
c0017873:	89 04 24             	mov    DWORD PTR [esp],eax
c0017876:	e8 d1 43 ff ff       	call   c000bc4c <malloc>
c001787b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017882:	5a                   	pop    edx
c0017883:	59                   	pop    ecx
c0017884:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017887:	43                   	inc    ebx
c0017888:	50                   	push   eax
c0017889:	e8 19 8e fe ff       	call   c00006a7 <strcpy>
c001788e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0017894:	83 c4 10             	add    esp,0x10
c0017897:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001789a:	85 c0                	test   eax,eax
c001789c:	75 cb                	jne    c0017869 <Process::addArgs(char**)+0x21>
c001789e:	5b                   	pop    ebx
c001789f:	5e                   	pop    esi
c00178a0:	5f                   	pop    edi
c00178a1:	c3                   	ret    

c00178a2 <Process::Process(char const*, Process*, char**)>:
c00178a2:	56                   	push   esi
c00178a3:	53                   	push   ebx
c00178a4:	83 ec 14             	sub    esp,0x14
c00178a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ab:	05 0c 02 00 00       	add    eax,0x20c
c00178b0:	bb 07 00 00 00       	mov    ebx,0x7
c00178b5:	89 c6                	mov    esi,eax
c00178b7:	85 db                	test   ebx,ebx
c00178b9:	78 12                	js     c00178cd <Process::Process(char const*, Process*, char**)+0x2b>
c00178bb:	83 ec 0c             	sub    esp,0xc
c00178be:	56                   	push   esi
c00178bf:	e8 26 78 00 00       	call   c001f0ea <ThreadControlBlock::ThreadControlBlock()>
c00178c4:	83 c4 10             	add    esp,0x10
c00178c7:	83 c6 63             	add    esi,0x63
c00178ca:	4b                   	dec    ebx
c00178cb:	eb ea                	jmp    c00178b7 <Process::Process(char const*, Process*, char**)+0x15>
c00178cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00178d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178dc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00178e5:	a1 c4 31 02 c0       	mov    eax,ds:0xc00231c4
c00178ea:	8d 50 01             	lea    edx,[eax+0x1]
c00178ed:	89 15 c4 31 02 c0    	mov    DWORD PTR ds:0xc00231c4,edx
c00178f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178f7:	89 02                	mov    DWORD PTR [edx],eax
c00178f9:	83 ec 0c             	sub    esp,0xc
c00178fc:	6a 10                	push   0x10
c00178fe:	e8 37 76 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	89 c3                	mov    ebx,eax
c0017908:	83 ec 08             	sub    esp,0x8
c001790b:	6a 00                	push   0x0
c001790d:	53                   	push   ebx
c001790e:	e8 bb 72 ff ff       	call   c000ebce <VAS::VAS(bool)>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017924:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001792e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017932:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017936:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001793c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017940:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017946:	85 c0                	test   eax,eax
c0017948:	74 42                	je     c001798c <Process::Process(char const*, Process*, char**)+0xea>
c001794a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017954:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001795a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017968:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001796e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017978:	05 0c 01 00 00       	add    eax,0x10c
c001797d:	83 ec 08             	sub    esp,0x8
c0017980:	52                   	push   edx
c0017981:	50                   	push   eax
c0017982:	e8 20 8d fe ff       	call   c00006a7 <strcpy>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	eb 5c                	jmp    c00179e8 <Process::Process(char const*, Process*, char**)+0x146>
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	68 60 12 00 00       	push   0x1260
c0017994:	e8 a1 75 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	89 c3                	mov    ebx,eax
c001799e:	83 ec 08             	sub    esp,0x8
c00179a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179a5:	53                   	push   ebx
c00179a6:	e8 db 59 ff ff       	call   c000d386 <VgaText::VgaText(char const*)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00179b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00179c2:	83 ec 0c             	sub    esp,0xc
c00179c5:	50                   	push   eax
c00179c6:	e8 bc 4d ff ff       	call   c000c787 <addToTerminalCycle(VgaText*)>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d2:	05 0c 01 00 00       	add    eax,0x10c
c00179d7:	83 ec 08             	sub    esp,0x8
c00179da:	68 32 1e 02 c0       	push   0xc0021e32
c00179df:	50                   	push   eax
c00179e0:	e8 c2 8c fe ff       	call   c00006a7 <strcpy>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ec:	83 c0 0c             	add    eax,0xc
c00179ef:	83 ec 08             	sub    esp,0x8
c00179f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179f6:	50                   	push   eax
c00179f7:	e8 ab 8c fe ff       	call   c00006a7 <strcpy>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	83 ec 08             	sub    esp,0x8
c0017a02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a0a:	e8 39 fe ff ff       	call   c0017848 <Process::addArgs(char**)>
c0017a0f:	83 c4 10             	add    esp,0x10
c0017a12:	83 ec 08             	sub    esp,0x8
c0017a15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a1d:	e8 3e ef ff ff       	call   c0016960 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a2d:	83 f0 01             	xor    eax,0x1
c0017a30:	88 c2                	mov    dl,al
c0017a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a36:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017a3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a41:	83 ec 08             	sub    esp,0x8
c0017a44:	50                   	push   eax
c0017a45:	68 30 1f 02 c0       	push   0xc0021f30
c0017a4a:	e8 da 75 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	90                   	nop
c0017a53:	83 c4 14             	add    esp,0x14
c0017a56:	5b                   	pop    ebx
c0017a57:	5e                   	pop    esi
c0017a58:	c3                   	ret    
c0017a59:	90                   	nop

c0017a5a <Process::Process(bool, char const*, Process*, char**)>:
c0017a5a:	56                   	push   esi
c0017a5b:	53                   	push   ebx
c0017a5c:	83 ec 14             	sub    esp,0x14
c0017a5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6b:	05 0c 02 00 00       	add    eax,0x20c
c0017a70:	bb 07 00 00 00       	mov    ebx,0x7
c0017a75:	89 c6                	mov    esi,eax
c0017a77:	85 db                	test   ebx,ebx
c0017a79:	78 12                	js     c0017a8d <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017a7b:	83 ec 0c             	sub    esp,0xc
c0017a7e:	56                   	push   esi
c0017a7f:	e8 66 76 00 00       	call   c001f0ea <ThreadControlBlock::ThreadControlBlock()>
c0017a84:	83 c4 10             	add    esp,0x10
c0017a87:	83 c6 63             	add    esi,0x63
c0017a8a:	4b                   	dec    ebx
c0017a8b:	eb ea                	jmp    c0017a77 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a91:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017aa5:	a1 c4 31 02 c0       	mov    eax,ds:0xc00231c4
c0017aaa:	8d 50 01             	lea    edx,[eax+0x1]
c0017aad:	89 15 c4 31 02 c0    	mov    DWORD PTR ds:0xc00231c4,edx
c0017ab3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ab7:	89 02                	mov    DWORD PTR [edx],eax
c0017ab9:	83 ec 0c             	sub    esp,0xc
c0017abc:	6a 10                	push   0x10
c0017abe:	e8 77 74 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	89 c3                	mov    ebx,eax
c0017ac8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	50                   	push   eax
c0017ad1:	53                   	push   ebx
c0017ad2:	e8 f7 70 ff ff       	call   c000ebce <VAS::VAS(bool)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ade:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae8:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017afa:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b04:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	74 42                	je     c0017b50 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b12:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b18:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b22:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b2c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017b32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3c:	05 0c 01 00 00       	add    eax,0x10c
c0017b41:	83 ec 08             	sub    esp,0x8
c0017b44:	52                   	push   edx
c0017b45:	50                   	push   eax
c0017b46:	e8 5c 8b fe ff       	call   c00006a7 <strcpy>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	eb 5c                	jmp    c0017bac <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	68 60 12 00 00       	push   0x1260
c0017b58:	e8 dd 73 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	89 c3                	mov    ebx,eax
c0017b62:	83 ec 08             	sub    esp,0x8
c0017b65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b69:	53                   	push   ebx
c0017b6a:	e8 17 58 ff ff       	call   c000d386 <VgaText::VgaText(char const*)>
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b76:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	50                   	push   eax
c0017b8a:	e8 f8 4b ff ff       	call   c000c787 <addToTerminalCycle(VgaText*)>
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b96:	05 0c 01 00 00       	add    eax,0x10c
c0017b9b:	83 ec 08             	sub    esp,0x8
c0017b9e:	68 32 1e 02 c0       	push   0xc0021e32
c0017ba3:	50                   	push   eax
c0017ba4:	e8 fe 8a fe ff       	call   c00006a7 <strcpy>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb0:	83 c0 0c             	add    eax,0xc
c0017bb3:	83 ec 08             	sub    esp,0x8
c0017bb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bba:	50                   	push   eax
c0017bbb:	e8 e7 8a fe ff       	call   c00006a7 <strcpy>
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	83 ec 08             	sub    esp,0x8
c0017bc6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017bca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bce:	e8 75 fc ff ff       	call   c0017848 <Process::addArgs(char**)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	90                   	nop
c0017bd7:	83 c4 14             	add    esp,0x14
c0017bda:	5b                   	pop    ebx
c0017bdb:	5e                   	pop    esi
c0017bdc:	c3                   	ret    

c0017bdd <disableIRQs()>:
c0017bdd:	fa                   	cli    
c0017bde:	ff 05 cc 4b 02 c0    	inc    DWORD PTR ds:0xc0024bcc
c0017be4:	c3                   	ret    

c0017be5 <getIRQNestingLevel()>:
c0017be5:	a1 cc 4b 02 c0       	mov    eax,ds:0xc0024bcc
c0017bea:	c3                   	ret    

c0017beb <enableIRQs()>:
c0017beb:	a1 cc 4b 02 c0       	mov    eax,ds:0xc0024bcc
c0017bf0:	48                   	dec    eax
c0017bf1:	a3 cc 4b 02 c0       	mov    ds:0xc0024bcc,eax
c0017bf6:	75 01                	jne    c0017bf9 <enableIRQs()+0xe>
c0017bf8:	fb                   	sti    
c0017bf9:	c3                   	ret    

c0017bfa <lockScheduler()>:
c0017bfa:	eb e1                	jmp    c0017bdd <disableIRQs()>

c0017bfc <unlockScheduler()>:
c0017bfc:	eb ed                	jmp    c0017beb <enableIRQs()>

c0017bfe <userModeEntryPoint(void*)>:
c0017bfe:	83 ec 0c             	sub    esp,0xc
c0017c01:	e8 f6 ff ff ff       	call   c0017bfc <unlockScheduler()>
c0017c06:	fb                   	sti    
c0017c07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c0f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017c15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c19:	83 c4 0c             	add    esp,0xc
c0017c1c:	e9 c5 85 fe ff       	jmp    c00001e6 <goToUsermode>

c0017c21 <lockStuff()>:
c0017c21:	e8 b7 ff ff ff       	call   c0017bdd <disableIRQs()>
c0017c26:	ff 05 c8 4b 02 c0    	inc    DWORD PTR ds:0xc0024bc8
c0017c2c:	c3                   	ret    

c0017c2d <taskStartupFunction>:
c0017c2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c32:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017c35:	c3                   	ret    

c0017c36 <updateTimeUsed()>:
c0017c36:	57                   	push   edi
c0017c37:	56                   	push   esi
c0017c38:	53                   	push   ebx
c0017c39:	e8 7a c3 ff ff       	call   c0013fb8 <thisCPU()>
c0017c3e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017c45:	74 49                	je     c0017c90 <updateTimeUsed()+0x5a>
c0017c47:	0f 31                	rdtsc  
c0017c49:	89 c1                	mov    ecx,eax
c0017c4b:	a3 08 4c 02 c0       	mov    ds:0xc0024c08,eax
c0017c50:	2b 0d f8 4b 02 c0    	sub    ecx,DWORD PTR ds:0xc0024bf8
c0017c56:	89 d3                	mov    ebx,edx
c0017c58:	89 0d 00 4c 02 c0    	mov    DWORD PTR ds:0xc0024c00,ecx
c0017c5e:	1b 1d fc 4b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024bfc
c0017c64:	a3 f8 4b 02 c0       	mov    ds:0xc0024bf8,eax
c0017c69:	89 1d 04 4c 02 c0    	mov    DWORD PTR ds:0xc0024c04,ebx
c0017c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c74:	89 15 0c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c0c,edx
c0017c7a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017c7d:	89 15 fc 4b 02 c0    	mov    DWORD PTR ds:0xc0024bfc,edx
c0017c83:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017c86:	01 f1                	add    ecx,esi
c0017c88:	11 fb                	adc    ebx,edi
c0017c8a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017c8d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017c90:	5b                   	pop    ebx
c0017c91:	5e                   	pop    esi
c0017c92:	5f                   	pop    edi
c0017c93:	c3                   	ret    

c0017c94 <switchToThread(ThreadControlBlock*)>:
c0017c94:	53                   	push   ebx
c0017c95:	83 ec 08             	sub    esp,0x8
c0017c98:	a1 c8 4b 02 c0       	mov    eax,ds:0xc0024bc8
c0017c9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ca1:	85 c0                	test   eax,eax
c0017ca3:	75 30                	jne    c0017cd5 <switchToThread(ThreadControlBlock*)+0x41>
c0017ca5:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017ca8:	3c ff                	cmp    al,0xff
c0017caa:	74 25                	je     c0017cd1 <switchToThread(ThreadControlBlock*)+0x3d>
c0017cac:	0f b6 d0             	movzx  edx,al
c0017caf:	b8 84 03 00 00       	mov    eax,0x384
c0017cb4:	29 d0                	sub    eax,edx
c0017cb6:	c1 e0 10             	shl    eax,0x10
c0017cb9:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017cbc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017cbf:	e8 72 ff ff ff       	call   c0017c36 <updateTimeUsed()>
c0017cc4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017cc8:	83 c4 08             	add    esp,0x8
c0017ccb:	5b                   	pop    ebx
c0017ccc:	e9 4e 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017cd1:	31 c0                	xor    eax,eax
c0017cd3:	eb e7                	jmp    c0017cbc <switchToThread(ThreadControlBlock*)+0x28>
c0017cd5:	c7 05 c4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024bc4,0x1
c0017cdf:	83 c4 08             	add    esp,0x8
c0017ce2:	5b                   	pop    ebx
c0017ce3:	c3                   	ret    

c0017ce4 <Semaphore::Semaphore(int)>:
c0017ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cec:	89 10                	mov    DWORD PTR [eax],edx
c0017cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d0f:	90                   	nop
c0017d10:	c3                   	ret    
c0017d11:	90                   	nop

c0017d12 <Mutex::Mutex()>:
c0017d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d16:	6a 01                	push   0x1
c0017d18:	50                   	push   eax
c0017d19:	e8 c6 ff ff ff       	call   c0017ce4 <Semaphore::Semaphore(int)>
c0017d1e:	83 c4 08             	add    esp,0x8
c0017d21:	90                   	nop
c0017d22:	c3                   	ret    
c0017d23:	90                   	nop

c0017d24 <Process::createThread(void (*)(void*), void*, int)>:
c0017d24:	55                   	push   ebp
c0017d25:	31 c9                	xor    ecx,ecx
c0017d27:	57                   	push   edi
c0017d28:	56                   	push   esi
c0017d29:	53                   	push   ebx
c0017d2a:	83 ec 1c             	sub    esp,0x1c
c0017d2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017d31:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017d38:	89 f2                	mov    edx,esi
c0017d3a:	0f b7 c2             	movzx  eax,dx
c0017d3d:	83 e2 01             	and    edx,0x1
c0017d40:	74 14                	je     c0017d56 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017d42:	d1 f8                	sar    eax,1
c0017d44:	41                   	inc    ecx
c0017d45:	89 c2                	mov    edx,eax
c0017d47:	83 f9 10             	cmp    ecx,0x10
c0017d4a:	75 ee                	jne    c0017d3a <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017d4c:	83 c4 1c             	add    esp,0x1c
c0017d4f:	31 c0                	xor    eax,eax
c0017d51:	5b                   	pop    ebx
c0017d52:	5e                   	pop    esi
c0017d53:	5f                   	pop    edi
c0017d54:	5d                   	pop    ebp
c0017d55:	c3                   	ret    
c0017d56:	83 ec 08             	sub    esp,0x8
c0017d59:	b8 01 00 00 00       	mov    eax,0x1
c0017d5e:	d3 e0                	shl    eax,cl
c0017d60:	09 c6                	or     esi,eax
c0017d62:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d68:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d6f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017d72:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d75:	01 ce                	add    esi,ecx
c0017d77:	89 f0                	mov    eax,esi
c0017d79:	c1 e0 05             	shl    eax,0x5
c0017d7c:	01 c6                	add    esi,eax
c0017d7e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017d81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d87:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d91:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017d97:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017d9d:	89 ca                	mov    edx,ecx
c0017d9f:	f7 da                	neg    edx
c0017da1:	c1 e2 15             	shl    edx,0x15
c0017da4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017daa:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017db0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017db4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017dbe:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017dc4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017dc8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017dce:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017dd8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017de2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017de9:	50                   	push   eax
c0017dea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dee:	68 e8 4b 02 c0       	push   0xc0024be8
c0017df3:	e8 4a 71 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dff:	83 c4 1c             	add    esp,0x1c
c0017e02:	5b                   	pop    ebx
c0017e03:	5e                   	pop    esi
c0017e04:	5f                   	pop    edi
c0017e05:	5d                   	pop    ebp
c0017e06:	c3                   	ret    
c0017e07:	90                   	nop

c0017e08 <Process::createUserThread()>:
c0017e08:	83 ec 0c             	sub    esp,0xc
c0017e0b:	68 80 00 00 00       	push   0x80
c0017e10:	6a 00                	push   0x0
c0017e12:	68 fe 7b 01 c0       	push   0xc0017bfe
c0017e17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1b:	e8 04 ff ff ff       	call   c0017d24 <Process::createThread(void (*)(void*), void*, int)>
c0017e20:	83 c4 1c             	add    esp,0x1c
c0017e23:	c3                   	ret    

c0017e24 <setupMultitasking(void (*)())>:
c0017e24:	56                   	push   esi
c0017e25:	53                   	push   ebx
c0017e26:	53                   	push   ebx
c0017e27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e2b:	eb 10                	jmp    c0017e3d <setupMultitasking(void (*)())+0x19>
c0017e2d:	83 ec 0c             	sub    esp,0xc
c0017e30:	68 e8 4b 02 c0       	push   0xc0024be8
c0017e35:	e8 5a 70 00 00       	call   c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e3a:	83 c4 10             	add    esp,0x10
c0017e3d:	83 ec 0c             	sub    esp,0xc
c0017e40:	68 e8 4b 02 c0       	push   0xc0024be8
c0017e45:	e8 2e 70 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	84 c0                	test   al,al
c0017e4f:	74 dc                	je     c0017e2d <setupMultitasking(void (*)())+0x9>
c0017e51:	83 ec 0c             	sub    esp,0xc
c0017e54:	68 3b 07 00 00       	push   0x73b
c0017e59:	e8 dc 70 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0017e5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e65:	89 c3                	mov    ebx,eax
c0017e67:	6a 00                	push   0x0
c0017e69:	68 36 1e 02 c0       	push   0xc0021e36
c0017e6e:	6a 01                	push   0x1
c0017e70:	50                   	push   eax
c0017e71:	e8 e4 fb ff ff       	call   c0017a5a <Process::Process(bool, char const*, Process*, char**)>
c0017e76:	83 c4 18             	add    esp,0x18
c0017e79:	89 1d f4 4b 02 c0    	mov    DWORD PTR ds:0xc0024bf4,ebx
c0017e7f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e85:	68 58 1f 02 c0       	push   0xc0021f58
c0017e8a:	e8 9a 71 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0017e8f:	58                   	pop    eax
c0017e90:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e96:	e8 60 50 ff ff       	call   c000cefb <setActiveTerminal(VgaText*)>
c0017e9b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017ea3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017ea9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017eac:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017eb6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ebc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017ec2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017ecc:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017ed6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017ee0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ee6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017eec:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017ef6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017efc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f06:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f0c:	5a                   	pop    edx
c0017f0d:	59                   	pop    ecx
c0017f0e:	68 32 1e 02 c0       	push   0xc0021e32
c0017f13:	50                   	push   eax
c0017f14:	e8 8e 87 fe ff       	call   c00006a7 <strcpy>
c0017f19:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017f20:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f24:	83 c4 14             	add    esp,0x14
c0017f27:	5b                   	pop    ebx
c0017f28:	5e                   	pop    esi
c0017f29:	e9 e3 82 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017f2e <schedule()>:
c0017f2e:	a1 c8 4b 02 c0       	mov    eax,ds:0xc0024bc8
c0017f33:	85 c0                	test   eax,eax
c0017f35:	74 0b                	je     c0017f42 <schedule()+0x14>
c0017f37:	c7 05 c4 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024bc4,0x1
c0017f41:	c3                   	ret    
c0017f42:	53                   	push   ebx
c0017f43:	83 ec 14             	sub    esp,0x14
c0017f46:	68 e8 4b 02 c0       	push   0xc0024be8
c0017f4b:	e8 28 6f 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	84 c0                	test   al,al
c0017f55:	75 38                	jne    c0017f8f <schedule()+0x61>
c0017f57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f5f:	4a                   	dec    edx
c0017f60:	74 32                	je     c0017f94 <schedule()+0x66>
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 e8 4b 02 c0       	push   0xc0024be8
c0017f6a:	e8 01 6f 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f6f:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c0017f76:	89 c3                	mov    ebx,eax
c0017f78:	e8 17 6f 00 00       	call   c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f7d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f87:	e8 08 fd ff ff       	call   c0017c94 <switchToThread(ThreadControlBlock*)>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	83 c4 08             	add    esp,0x8
c0017f92:	5b                   	pop    ebx
c0017f93:	c3                   	ret    
c0017f94:	83 ec 08             	sub    esp,0x8
c0017f97:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f9e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017fa4:	68 e8 4b 02 c0       	push   0xc0024be8
c0017fa9:	e8 94 6f 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017fae:	83 c4 10             	add    esp,0x10
c0017fb1:	eb af                	jmp    c0017f62 <schedule()+0x34>

c0017fb3 <unlockStuff()>:
c0017fb3:	a1 c8 4b 02 c0       	mov    eax,ds:0xc0024bc8
c0017fb8:	48                   	dec    eax
c0017fb9:	a3 c8 4b 02 c0       	mov    ds:0xc0024bc8,eax
c0017fbe:	75 09                	jne    c0017fc9 <unlockStuff()+0x16>
c0017fc0:	a1 c4 4b 02 c0       	mov    eax,ds:0xc0024bc4
c0017fc5:	85 c0                	test   eax,eax
c0017fc7:	75 05                	jne    c0017fce <unlockStuff()+0x1b>
c0017fc9:	e9 1d fc ff ff       	jmp    c0017beb <enableIRQs()>
c0017fce:	83 ec 0c             	sub    esp,0xc
c0017fd1:	c7 05 c4 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024bc4,0x0
c0017fdb:	e8 4e ff ff ff       	call   c0017f2e <schedule()>
c0017fe0:	83 c4 0c             	add    esp,0xc
c0017fe3:	e9 03 fc ff ff       	jmp    c0017beb <enableIRQs()>

c0017fe8 <forkProcess(regs*)>:
c0017fe8:	56                   	push   esi
c0017fe9:	53                   	push   ebx
c0017fea:	50                   	push   eax
c0017feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ff0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017ff3:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017ffb:	0f 85 3e 01 00 00    	jne    c001813f <forkProcess(regs*)+0x157>
c0018001:	e8 1b fc ff ff       	call   c0017c21 <lockStuff()>
c0018006:	83 ec 0c             	sub    esp,0xc
c0018009:	68 3b 07 00 00       	push   0x73b
c001800e:	e8 27 6f ff ff       	call   c000ef3a <operator new(unsigned long)>
c0018013:	89 c3                	mov    ebx,eax
c0018015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001801a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001801d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018024:	50                   	push   eax
c0018025:	83 c0 0c             	add    eax,0xc
c0018028:	50                   	push   eax
c0018029:	6a 00                	push   0x0
c001802b:	53                   	push   ebx
c001802c:	e8 29 fa ff ff       	call   c0017a5a <Process::Process(bool, char const*, Process*, char**)>
c0018031:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0018037:	83 c4 20             	add    esp,0x20
c001803a:	85 f6                	test   esi,esi
c001803c:	74 16                	je     c0018054 <forkProcess(regs*)+0x6c>
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	56                   	push   esi
c0018042:	e8 2d 62 ff ff       	call   c000e274 <VAS::~VAS()>
c0018047:	59                   	pop    ecx
c0018048:	58                   	pop    eax
c0018049:	6a 10                	push   0x10
c001804b:	56                   	push   esi
c001804c:	e8 f8 6e ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c0018051:	83 c4 10             	add    esp,0x10
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0018060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018065:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018068:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001806e:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0018074:	6a 10                	push   0x10
c0018076:	e8 bf 6e ff ff       	call   c000ef3a <operator new(unsigned long)>
c001807b:	59                   	pop    ecx
c001807c:	89 c6                	mov    esi,eax
c001807e:	58                   	pop    eax
c001807f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018084:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018087:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001808d:	56                   	push   esi
c001808e:	e8 03 67 ff ff       	call   c000e796 <VAS::VAS(VAS*)>
c0018093:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0018099:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001809c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001809e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00180a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180ac:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c00180b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00180ba:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00180c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c5:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c00180c8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00180d2:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c00180d8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00180de:	81 c3 0c 02 00 00    	add    ebx,0x20c
c00180e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00180ec:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00180f3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00180f6:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c00180fd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0018104:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001810b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018110:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018113:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0018116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001811e:	58                   	pop    eax
c001811f:	5a                   	pop    edx
c0018120:	53                   	push   ebx
c0018121:	68 e8 4b 02 c0       	push   0xc0024be8
c0018126:	e8 17 6e 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001812b:	e8 83 fe ff ff       	call   c0017fb3 <unlockStuff()>
c0018130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001813b:	5a                   	pop    edx
c001813c:	5b                   	pop    ebx
c001813d:	5e                   	pop    esi
c001813e:	c3                   	ret    
c001813f:	83 ec 0c             	sub    esp,0xc
c0018142:	68 8c 1f 02 c0       	push   0xc0021f8c
c0018147:	e8 dd 6e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018154:	eb e5                	jmp    c001813b <forkProcess(regs*)+0x153>

c0018156 <Semaphore::tryAcquire()>:
c0018156:	83 ec 0c             	sub    esp,0xc
c0018159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815d:	e8 bf fa ff ff       	call   c0017c21 <lockStuff()>
c0018162:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018165:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018167:	7c 0b                	jl     c0018174 <Semaphore::tryAcquire()+0x1e>
c0018169:	e8 45 fe ff ff       	call   c0017fb3 <unlockStuff()>
c001816e:	31 c0                	xor    eax,eax
c0018170:	83 c4 0c             	add    esp,0xc
c0018173:	c3                   	ret    
c0018174:	42                   	inc    edx
c0018175:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018178:	e8 36 fe ff ff       	call   c0017fb3 <unlockStuff()>
c001817d:	b0 01                	mov    al,0x1
c001817f:	83 c4 0c             	add    esp,0xc
c0018182:	c3                   	ret    
c0018183:	90                   	nop

c0018184 <Semaphore::assertLocked(char const*)>:
c0018184:	83 ec 0c             	sub    esp,0xc
c0018187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001818f:	e8 8d fa ff ff       	call   c0017c21 <lockStuff()>
c0018194:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018196:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018199:	7c 08                	jl     c00181a3 <Semaphore::assertLocked(char const*)+0x1f>
c001819b:	83 c4 0c             	add    esp,0xc
c001819e:	e9 10 fe ff ff       	jmp    c0017fb3 <unlockStuff()>
c00181a3:	83 ec 0c             	sub    esp,0xc
c00181a6:	52                   	push   edx
c00181a7:	e8 12 cb ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	83 c4 0c             	add    esp,0xc
c00181b2:	e9 fc fd ff ff       	jmp    c0017fb3 <unlockStuff()>

c00181b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00181b7:	83 ec 0c             	sub    esp,0xc
c00181ba:	e8 26 fa ff ff       	call   c0017be5 <getIRQNestingLevel()>
c00181bf:	83 ec 08             	sub    esp,0x8
c00181c2:	50                   	push   eax
c00181c3:	68 b8 1f 02 c0       	push   0xc0021fb8
c00181c8:	e8 5c 6e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00181cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181d9:	e8 50 fd ff ff       	call   c0017f2e <schedule()>
c00181de:	e8 19 fa ff ff       	call   c0017bfc <unlockScheduler()>
c00181e3:	e8 fd f9 ff ff       	call   c0017be5 <getIRQNestingLevel()>
c00181e8:	5a                   	pop    edx
c00181e9:	59                   	pop    ecx
c00181ea:	50                   	push   eax
c00181eb:	68 ec 1f 02 c0       	push   0xc0021fec
c00181f0:	e8 34 6e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00181f5:	83 c4 1c             	add    esp,0x1c
c00181f8:	c3                   	ret    

c00181f9 <blockTask(TaskState)>:
c00181f9:	83 ec 0c             	sub    esp,0xc
c00181fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018200:	e8 f5 f9 ff ff       	call   c0017bfa <lockScheduler()>
c0018205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001820a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001820d:	e8 1c fd ff ff       	call   c0017f2e <schedule()>
c0018212:	83 c4 0c             	add    esp,0xc
c0018215:	e9 e2 f9 ff ff       	jmp    c0017bfc <unlockScheduler()>

c001821a <waitTask(int, int*, int)>:
c001821a:	83 ec 18             	sub    esp,0x18
c001821d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018222:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018226:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018229:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001822d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018232:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018235:	6a 07                	push   0x7
c0018237:	e8 bd ff ff ff       	call   c00181f9 <blockTask(TaskState)>
c001823c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018247:	85 d2                	test   edx,edx
c0018249:	74 0a                	je     c0018255 <waitTask(int, int*, int)+0x3b>
c001824b:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001824e:	89 02                	mov    DWORD PTR [edx],eax
c0018250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018255:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018258:	83 c4 0c             	add    esp,0xc
c001825b:	c3                   	ret    

c001825c <nanoSleepUntil(unsigned long long)>:
c001825c:	83 ec 0c             	sub    esp,0xc
c001825f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018263:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018267:	3b 05 10 3e 02 c0    	cmp    eax,DWORD PTR ds:0xc0023e10
c001826d:	89 d1                	mov    ecx,edx
c001826f:	1b 0d 14 3e 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023e14
c0018275:	73 04                	jae    c001827b <nanoSleepUntil(unsigned long long)+0x1f>
c0018277:	83 c4 0c             	add    esp,0xc
c001827a:	c3                   	ret    
c001827b:	e8 a1 f9 ff ff       	call   c0017c21 <lockStuff()>
c0018280:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018286:	83 ec 08             	sub    esp,0x8
c0018289:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001828c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001828f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018295:	68 dc 4b 02 c0       	push   0xc0024bdc
c001829a:	e8 a3 6c 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001829f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00182a6:	e8 4e ff ff ff       	call   c00181f9 <blockTask(TaskState)>
c00182ab:	83 c4 1c             	add    esp,0x1c
c00182ae:	e9 00 fd ff ff       	jmp    c0017fb3 <unlockStuff()>

c00182b3 <nanoSleep(unsigned long long)>:
c00182b3:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c00182b8:	8b 15 14 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e14
c00182be:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00182c2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00182c6:	eb 94                	jmp    c001825c <nanoSleepUntil(unsigned long long)>

c00182c8 <sleep(unsigned long long)>:
c00182c8:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c00182d0:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c00182d5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00182d9:	01 ca                	add    edx,ecx
c00182db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00182e3:	eb ce                	jmp    c00182b3 <nanoSleep(unsigned long long)>
c00182e5:	90                   	nop

c00182e6 <Semaphore::acquire()>:
c00182e6:	83 ec 0c             	sub    esp,0xc
c00182e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ed:	e8 2f f9 ff ff       	call   c0017c21 <lockStuff()>
c00182f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00182f5:	3b 10                	cmp    edx,DWORD PTR [eax]
c00182f7:	7d 0c                	jge    c0018305 <Semaphore::acquire()+0x1f>
c00182f9:	42                   	inc    edx
c00182fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00182fd:	83 c4 0c             	add    esp,0xc
c0018300:	e9 ae fc ff ff       	jmp    c0017fb3 <unlockStuff()>
c0018305:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001830b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018312:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018315:	85 d2                	test   edx,edx
c0018317:	74 2a                	je     c0018343 <Semaphore::acquire()+0x5d>
c0018319:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001831c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018322:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018325:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001832b:	83 ec 0c             	sub    esp,0xc
c001832e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018331:	6a 05                	push   0x5
c0018333:	e8 c1 fe ff ff       	call   c00181f9 <blockTask(TaskState)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	83 c4 0c             	add    esp,0xc
c001833e:	e9 70 fc ff ff       	jmp    c0017fb3 <unlockStuff()>
c0018343:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001834c:	eb d7                	jmp    c0018325 <Semaphore::acquire()+0x3f>

c001834e <execveProcess(char const*, char* const*, char* const*)>:
c001834e:	56                   	push   esi
c001834f:	53                   	push   ebx
c0018350:	50                   	push   eax
c0018351:	e8 cb f8 ff ff       	call   c0017c21 <lockStuff()>
c0018356:	83 ec 0c             	sub    esp,0xc
c0018359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001835e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018361:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0018367:	68 3b 07 00 00       	push   0x73b
c001836c:	e8 c9 6b ff ff       	call   c000ef3a <operator new(unsigned long)>
c0018371:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018375:	89 c3                	mov    ebx,eax
c0018377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001837c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001837f:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c0018385:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018389:	53                   	push   ebx
c001838a:	e8 13 f5 ff ff       	call   c00178a2 <Process::Process(char const*, Process*, char**)>
c001838f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018394:	83 c4 20             	add    esp,0x20
c0018397:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001839a:	85 f6                	test   esi,esi
c001839c:	8b 00                	mov    eax,DWORD PTR [eax]
c001839e:	89 03                	mov    DWORD PTR [ebx],eax
c00183a0:	74 06                	je     c00183a8 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c00183a2:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	53                   	push   ebx
c00183ac:	e8 57 fa ff ff       	call   c0017e08 <Process::createUserThread()>
c00183b1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00183b8:	e8 3c fe ff ff       	call   c00181f9 <blockTask(TaskState)>
c00183bd:	e8 f1 fb ff ff       	call   c0017fb3 <unlockStuff()>
c00183c2:	e8 33 f8 ff ff       	call   c0017bfa <lockScheduler()>
c00183c7:	e8 62 fb ff ff       	call   c0017f2e <schedule()>
c00183cc:	e8 2b f8 ff ff       	call   c0017bfc <unlockScheduler()>
c00183d1:	83 c4 14             	add    esp,0x14
c00183d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00183d9:	5b                   	pop    ebx
c00183da:	5e                   	pop    esi
c00183db:	c3                   	ret    

c00183dc <taskReturned>:
c00183dc:	83 ec 18             	sub    esp,0x18
c00183df:	68 20 20 02 c0       	push   0xc0022020
c00183e4:	e8 d5 c8 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c00183e9:	83 c4 10             	add    esp,0x10
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	6a 02                	push   0x2
c00183f1:	e8 03 fe ff ff       	call   c00181f9 <blockTask(TaskState)>
c00183f6:	e8 ff f7 ff ff       	call   c0017bfa <lockScheduler()>
c00183fb:	e8 2e fb ff ff       	call   c0017f2e <schedule()>
c0018400:	e8 f7 f7 ff ff       	call   c0017bfc <unlockScheduler()>
c0018405:	83 c4 10             	add    esp,0x10
c0018408:	eb e2                	jmp    c00183ec <taskReturned+0x10>

c001840a <unblockTask(ThreadControlBlock*)>:
c001840a:	53                   	push   ebx
c001840b:	83 ec 08             	sub    esp,0x8
c001840e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018412:	e8 e3 f7 ff ff       	call   c0017bfa <lockScheduler()>
c0018417:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001841a:	85 c0                	test   eax,eax
c001841c:	74 5c                	je     c001847a <unblockTask(ThreadControlBlock*)+0x70>
c001841e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018421:	48                   	dec    eax
c0018422:	74 31                	je     c0018455 <unblockTask(ThreadControlBlock*)+0x4b>
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	68 e8 4b 02 c0       	push   0xc0024be8
c001842c:	e8 3f 6a 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018431:	83 c4 10             	add    esp,0x10
c0018434:	85 c0                	test   eax,eax
c0018436:	75 17                	jne    c001844f <unblockTask(ThreadControlBlock*)+0x45>
c0018438:	eb 65                	jmp    c001849f <unblockTask(ThreadControlBlock*)+0x95>
c001843a:	83 ec 08             	sub    esp,0x8
c001843d:	50                   	push   eax
c001843e:	68 e8 4b 02 c0       	push   0xc0024be8
c0018443:	e8 38 6d 00 00       	call   c001f180 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018448:	83 c4 10             	add    esp,0x10
c001844b:	85 c0                	test   eax,eax
c001844d:	74 50                	je     c001849f <unblockTask(ThreadControlBlock*)+0x95>
c001844f:	39 c3                	cmp    ebx,eax
c0018451:	75 e7                	jne    c001843a <unblockTask(ThreadControlBlock*)+0x30>
c0018453:	eb 1c                	jmp    c0018471 <unblockTask(ThreadControlBlock*)+0x67>
c0018455:	83 ec 0c             	sub    esp,0xc
c0018458:	68 10 21 02 c0       	push   0xc0022110
c001845d:	e8 c7 6b ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018462:	c7 04 24 9c 20 02 c0 	mov    DWORD PTR [esp],0xc002209c
c0018469:	e8 bb 6b ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	83 c4 08             	add    esp,0x8
c0018474:	5b                   	pop    ebx
c0018475:	e9 82 f7 ff ff       	jmp    c0017bfc <unlockScheduler()>
c001847a:	83 ec 0c             	sub    esp,0xc
c001847d:	68 54 20 02 c0       	push   0xc0022054
c0018482:	e8 a2 6b ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018487:	c7 04 24 9c 20 02 c0 	mov    DWORD PTR [esp],0xc002209c
c001848e:	e8 96 6b ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	83 c4 08             	add    esp,0x8
c0018499:	5b                   	pop    ebx
c001849a:	e9 5d f7 ff ff       	jmp    c0017bfc <unlockScheduler()>
c001849f:	83 ec 08             	sub    esp,0x8
c00184a2:	53                   	push   ebx
c00184a3:	68 e8 4b 02 c0       	push   0xc0024be8
c00184a8:	e8 95 6a 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184ad:	83 c4 10             	add    esp,0x10
c00184b0:	83 c4 08             	add    esp,0x8
c00184b3:	5b                   	pop    ebx
c00184b4:	e9 43 f7 ff ff       	jmp    c0017bfc <unlockScheduler()>

c00184b9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184b9:	55                   	push   ebp
c00184ba:	57                   	push   edi
c00184bb:	56                   	push   esi
c00184bc:	53                   	push   ebx
c00184bd:	83 ec 1c             	sub    esp,0x1c
c00184c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184c7:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c00184cd:	85 c9                	test   ecx,ecx
c00184cf:	7e 20                	jle    c00184f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c00184d1:	31 f6                	xor    esi,esi
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c00184dd:	46                   	inc    esi
c00184de:	e8 79 37 ff ff       	call   c000bc5c <free>
c00184e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184e6:	83 c4 10             	add    esp,0x10
c00184e9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184ef:	7f e2                	jg     c00184d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00184f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00184fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018500:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018503:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018506:	d3 c0                	rol    eax,cl
c0018508:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001850f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018512:	89 f7                	mov    edi,esi
c0018514:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001851c:	0f 85 4f 01 00 00    	jne    c0018671 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018522:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018528:	85 c0                	test   eax,eax
c001852a:	0f 84 aa 00 00 00    	je     c00185da <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018530:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018533:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018537:	31 c9                	xor    ecx,ecx
c0018539:	eb 10                	jmp    c001854b <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001853b:	41                   	inc    ecx
c001853c:	83 f9 10             	cmp    ecx,0x10
c001853f:	0f 84 95 00 00 00    	je     c00185da <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018545:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001854b:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018552:	d3 fa                	sar    edx,cl
c0018554:	83 e2 01             	and    edx,0x1
c0018557:	74 e2                	je     c001853b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018559:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001855c:	01 ca                	add    edx,ecx
c001855e:	89 d5                	mov    ebp,edx
c0018560:	c1 e5 05             	shl    ebp,0x5
c0018563:	01 ea                	add    edx,ebp
c0018565:	01 d0                	add    eax,edx
c0018567:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001856d:	83 fd 07             	cmp    ebp,0x7
c0018570:	75 c9                	jne    c001853b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018572:	05 40 02 00 00       	add    eax,0x240
c0018577:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001857a:	83 fd ff             	cmp    ebp,0xffffffff
c001857d:	0f 8c 08 01 00 00    	jl     c001868b <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018583:	0f 84 b9 01 00 00    	je     c0018742 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018589:	85 ed                	test   ebp,ebp
c001858b:	0f 84 a0 01 00 00    	je     c0018731 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018591:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018593:	75 a6                	jne    c001853b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018595:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001859b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001859f:	01 d0                	add    eax,edx
c00185a1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185a5:	83 ec 0c             	sub    esp,0xc
c00185a8:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00185ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185b1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185b7:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185be:	50                   	push   eax
c00185bf:	e8 46 fe ff ff       	call   c001840a <unblockTask(ThreadControlBlock*)>
c00185c4:	83 c4 10             	add    esp,0x10
c00185c7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00185ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185ce:	89 f7                	mov    edi,esi
c00185d0:	41                   	inc    ecx
c00185d1:	83 f9 10             	cmp    ecx,0x10
c00185d4:	0f 85 6b ff ff ff    	jne    c0018545 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00185da:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c00185e0:	85 c0                	test   eax,eax
c00185e2:	74 5d                	je     c0018641 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185e4:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00185ea:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185f0:	74 4f                	je     c0018641 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185f2:	83 ec 0c             	sub    esp,0xc
c00185f5:	68 e8 4b 02 c0       	push   0xc0024be8
c00185fa:	e8 71 68 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185ff:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c0018606:	89 c7                	mov    edi,eax
c0018608:	e8 6b 68 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	84 c0                	test   al,al
c0018612:	0f 84 e4 00 00 00    	je     c00186fc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0018618:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001861b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018621:	85 d2                	test   edx,edx
c0018623:	74 0f                	je     c0018634 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0018625:	83 ec 0c             	sub    esp,0xc
c0018628:	8b 02                	mov    eax,DWORD PTR [edx]
c001862a:	52                   	push   edx
c001862b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001862e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001863e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018641:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018647:	85 db                	test   ebx,ebx
c0018649:	74 16                	je     c0018661 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001864b:	83 ec 0c             	sub    esp,0xc
c001864e:	53                   	push   ebx
c001864f:	e8 20 5c ff ff       	call   c000e274 <VAS::~VAS()>
c0018654:	58                   	pop    eax
c0018655:	5a                   	pop    edx
c0018656:	6a 10                	push   0x10
c0018658:	53                   	push   ebx
c0018659:	e8 eb 68 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001865e:	83 c4 10             	add    esp,0x10
c0018661:	83 ec 0c             	sub    esp,0xc
c0018664:	68 3d 1e 02 c0       	push   0xc0021e3d
c0018669:	e8 bb 69 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	83 ec 08             	sub    esp,0x8
c0018674:	68 3b 07 00 00       	push   0x73b
c0018679:	68 4b 1e 02 c0       	push   0xc0021e4b
c001867e:	e8 a6 69 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018683:	83 c4 2c             	add    esp,0x2c
c0018686:	5b                   	pop    ebx
c0018687:	5e                   	pop    esi
c0018688:	5f                   	pop    edi
c0018689:	5d                   	pop    ebp
c001868a:	c3                   	ret    
c001868b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	68 54 21 02 c0       	push   0xc0022154
c0018697:	e8 22 c6 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001869c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001869f:	83 c4 10             	add    esp,0x10
c00186a2:	89 f7                	mov    edi,esi
c00186a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186a8:	e9 8e fe ff ff       	jmp    c001853b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00186ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00186b3:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00186b9:	75 1c                	jne    c00186d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186bb:	83 ec 0c             	sub    esp,0xc
c00186be:	68 bc 21 02 c0       	push   0xc00221bc
c00186c3:	e8 61 69 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00186c8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186cf:	e8 25 fb ff ff       	call   c00181f9 <blockTask(TaskState)>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	83 ec 08             	sub    esp,0x8
c00186da:	56                   	push   esi
c00186db:	68 e8 4b 02 c0       	push   0xc0024be8
c00186e0:	e8 5d 68 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186e5:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c00186ec:	e8 7f 67 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186f1:	83 c4 10             	add    esp,0x10
c00186f4:	39 f8                	cmp    eax,edi
c00186f6:	0f 84 1c ff ff ff    	je     c0018618 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00186fc:	83 ec 0c             	sub    esp,0xc
c00186ff:	68 e8 4b 02 c0       	push   0xc0024be8
c0018704:	e8 67 67 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018709:	c7 04 24 e8 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be8
c0018710:	89 c6                	mov    esi,eax
c0018712:	e8 7d 67 00 00       	call   c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	39 f3                	cmp    ebx,esi
c001871c:	74 b9                	je     c00186d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001871e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018721:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018724:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001872a:	75 ab                	jne    c00186d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001872c:	e9 7c ff ff ff       	jmp    c00186ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018731:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018735:	83 ec 0c             	sub    esp,0xc
c0018738:	68 88 21 02 c0       	push   0xc0022188
c001873d:	e9 55 ff ff ff       	jmp    c0018697 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0018742:	8b 36                	mov    esi,DWORD PTR [esi]
c0018744:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018748:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001874b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001874e:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018754:	01 d7                	add    edi,edx
c0018756:	89 f8                	mov    eax,edi
c0018758:	e9 44 fe ff ff       	jmp    c00185a1 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001875d <cleanerTaskFunction(void*)>:
c001875d:	53                   	push   ebx
c001875e:	83 ec 08             	sub    esp,0x8
c0018761:	e8 96 f4 ff ff       	call   c0017bfc <unlockScheduler()>
c0018766:	e8 8f f4 ff ff       	call   c0017bfa <lockScheduler()>
c001876b:	80 3d ac 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024bac,0x0
c0018772:	0f 85 8e 00 00 00    	jne    c0018806 <cleanerTaskFunction(void*)+0xa9>
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	6a 02                	push   0x2
c001877d:	e8 35 fa ff ff       	call   c00181b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	c6 05 ac 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024bac,0x0
c001878c:	e8 90 f4 ff ff       	call   c0017c21 <lockStuff()>
c0018791:	e8 64 f4 ff ff       	call   c0017bfa <lockScheduler()>
c0018796:	83 ec 0c             	sub    esp,0xc
c0018799:	68 d0 4b 02 c0       	push   0xc0024bd0
c001879e:	e8 d5 66 00 00       	call   c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00187a3:	83 c4 10             	add    esp,0x10
c00187a6:	84 c0                	test   al,al
c00187a8:	75 40                	jne    c00187ea <cleanerTaskFunction(void*)+0x8d>
c00187aa:	83 ec 0c             	sub    esp,0xc
c00187ad:	68 d0 4b 02 c0       	push   0xc0024bd0
c00187b2:	e8 b9 66 00 00       	call   c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187b7:	c7 04 24 d0 4b 02 c0 	mov    DWORD PTR [esp],0xc0024bd0
c00187be:	89 c3                	mov    ebx,eax
c00187c0:	e8 cf 66 00 00       	call   c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187c5:	c7 04 24 61 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e61
c00187cc:	e8 58 68 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00187d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187d4:	e8 e0 fc ff ff       	call   c00184b9 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187d9:	c7 04 24 7a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e7a
c00187e0:	e8 44 68 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00187e5:	83 c4 10             	add    esp,0x10
c00187e8:	eb ac                	jmp    c0018796 <cleanerTaskFunction(void*)+0x39>
c00187ea:	e8 0d f4 ff ff       	call   c0017bfc <unlockScheduler()>
c00187ef:	e8 bf f7 ff ff       	call   c0017fb3 <unlockStuff()>
c00187f4:	e8 01 f4 ff ff       	call   c0017bfa <lockScheduler()>
c00187f9:	80 3d ac 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024bac,0x0
c0018800:	0f 84 72 ff ff ff    	je     c0018778 <cleanerTaskFunction(void*)+0x1b>
c0018806:	e8 f1 f3 ff ff       	call   c0017bfc <unlockScheduler()>
c001880b:	e9 75 ff ff ff       	jmp    c0018785 <cleanerTaskFunction(void*)+0x28>

c0018810 <terminateTask(int)>:
c0018810:	83 ec 14             	sub    esp,0x14
c0018813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018818:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001881b:	83 c0 0c             	add    eax,0xc
c001881e:	50                   	push   eax
c001881f:	68 e4 21 02 c0       	push   0xc00221e4
c0018824:	e8 00 68 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018829:	e8 f3 f3 ff ff       	call   c0017c21 <lockStuff()>
c001882e:	e8 c7 f3 ff ff       	call   c0017bfa <lockScheduler()>
c0018833:	c7 04 24 8d 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e8d
c001883a:	e8 ea 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001883f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018848:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001884b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018850:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018853:	5a                   	pop    edx
c0018854:	59                   	pop    ecx
c0018855:	50                   	push   eax
c0018856:	68 d0 4b 02 c0       	push   0xc0024bd0
c001885b:	e8 e2 66 00 00       	call   c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018865:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001886c:	c7 04 24 a7 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ea7
c0018873:	e8 b1 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	a1 a8 4b 02 c0       	mov    eax,ds:0xc0024ba8
c0018880:	85 c0                	test   eax,eax
c0018882:	74 5a                	je     c00188de <terminateTask(int)+0xce>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 c1 1e 02 c0       	push   0xc0021ec1
c001888c:	e8 98 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0018891:	58                   	pop    eax
c0018892:	c6 05 ac 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024bac,0x1
c0018899:	ff 35 a8 4b 02 c0    	push   DWORD PTR ds:0xc0024ba8
c001889f:	e8 66 fb ff ff       	call   c001840a <unblockTask(ThreadControlBlock*)>
c00188a4:	c7 04 24 db 1e 02 c0 	mov    DWORD PTR [esp],0xc0021edb
c00188ab:	e8 79 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00188b0:	83 c4 10             	add    esp,0x10
c00188b3:	e8 44 f3 ff ff       	call   c0017bfc <unlockScheduler()>
c00188b8:	e8 f6 f6 ff ff       	call   c0017fb3 <unlockStuff()>
c00188bd:	83 ec 0c             	sub    esp,0xc
c00188c0:	68 13 1f 02 c0       	push   0xc0021f13
c00188c5:	e8 5f 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00188ca:	83 c4 10             	add    esp,0x10
c00188cd:	e8 28 f3 ff ff       	call   c0017bfa <lockScheduler()>
c00188d2:	e8 57 f6 ff ff       	call   c0017f2e <schedule()>
c00188d7:	e8 20 f3 ff ff       	call   c0017bfc <unlockScheduler()>
c00188dc:	eb ef                	jmp    c00188cd <terminateTask(int)+0xbd>
c00188de:	83 ec 0c             	sub    esp,0xc
c00188e1:	68 f5 1e 02 c0       	push   0xc0021ef5
c00188e6:	e8 3e 67 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c00188eb:	83 c4 10             	add    esp,0x10
c00188ee:	eb c3                	jmp    c00188b3 <terminateTask(int)+0xa3>

c00188f0 <Thr::terminateFromIRQ(int)>:
c00188f0:	83 ec 18             	sub    esp,0x18
c00188f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188f7:	e8 14 ff ff ff       	call   c0018810 <terminateTask(int)>

c00188fc <Semaphore::release()>:
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018903:	e8 19 f3 ff ff       	call   c0017c21 <lockStuff()>
c0018908:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001890b:	85 d2                	test   edx,edx
c001890d:	74 1a                	je     c0018929 <Semaphore::release()+0x2d>
c001890f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018912:	83 ec 0c             	sub    esp,0xc
c0018915:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018918:	52                   	push   edx
c0018919:	e8 ec fa ff ff       	call   c001840a <unblockTask(ThreadControlBlock*)>
c001891e:	83 c4 10             	add    esp,0x10
c0018921:	83 c4 0c             	add    esp,0xc
c0018924:	e9 8a f6 ff ff       	jmp    c0017fb3 <unlockStuff()>
c0018929:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001892c:	83 c4 0c             	add    esp,0xc
c001892f:	e9 7f f6 ff ff       	jmp    c0017fb3 <unlockStuff()>

c0018934 <__static_initialization_and_destruction_0(int, int)>:
c0018934:	83 ec 0c             	sub    esp,0xc
c0018937:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001893c:	0f 85 88 00 00 00    	jne    c00189ca <__static_initialization_and_destruction_0(int, int)+0x96>
c0018942:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001894a:	75 7e                	jne    c00189ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	68 e8 4b 02 c0       	push   0xc0024be8
c0018954:	e8 cf 67 00 00       	call   c001f128 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018959:	83 c4 10             	add    esp,0x10
c001895c:	83 ec 04             	sub    esp,0x4
c001895f:	68 c8 2b 02 c0       	push   0xc0022bc8
c0018964:	68 e8 4b 02 c0       	push   0xc0024be8
c0018969:	68 e8 f0 01 c0       	push   0xc001f0e8
c001896e:	e8 52 65 ff ff       	call   c000eec5 <__cxa_atexit>
c0018973:	83 c4 10             	add    esp,0x10
c0018976:	83 ec 0c             	sub    esp,0xc
c0018979:	68 dc 4b 02 c0       	push   0xc0024bdc
c001897e:	e8 a5 67 00 00       	call   c001f128 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018983:	83 c4 10             	add    esp,0x10
c0018986:	83 ec 04             	sub    esp,0x4
c0018989:	68 c8 2b 02 c0       	push   0xc0022bc8
c001898e:	68 dc 4b 02 c0       	push   0xc0024bdc
c0018993:	68 e8 f0 01 c0       	push   0xc001f0e8
c0018998:	e8 28 65 ff ff       	call   c000eec5 <__cxa_atexit>
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	83 ec 0c             	sub    esp,0xc
c00189a3:	68 d0 4b 02 c0       	push   0xc0024bd0
c00189a8:	e8 7b 67 00 00       	call   c001f128 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	83 ec 04             	sub    esp,0x4
c00189b3:	68 c8 2b 02 c0       	push   0xc0022bc8
c00189b8:	68 d0 4b 02 c0       	push   0xc0024bd0
c00189bd:	68 e8 f0 01 c0       	push   0xc001f0e8
c00189c2:	e8 fe 64 ff ff       	call   c000eec5 <__cxa_atexit>
c00189c7:	83 c4 10             	add    esp,0x10
c00189ca:	90                   	nop
c00189cb:	83 c4 0c             	add    esp,0xc
c00189ce:	c3                   	ret    

c00189cf <_GLOBAL__sub_I_kernelProcess>:
c00189cf:	83 ec 0c             	sub    esp,0xc
c00189d2:	83 ec 08             	sub    esp,0x8
c00189d5:	68 ff ff 00 00       	push   0xffff
c00189da:	6a 01                	push   0x1
c00189dc:	e8 53 ff ff ff       	call   c0018934 <__static_initialization_and_destruction_0(int, int)>
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	83 c4 0c             	add    esp,0xc
c00189e7:	c3                   	ret    

c00189e8 <Vm::vm8086EntryPoint(void*)>:
c00189e8:	83 ec 0c             	sub    esp,0xc
c00189eb:	e8 0c f2 ff ff       	call   c0017bfc <unlockScheduler()>
c00189f0:	fb                   	sti    
c00189f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189f6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00189fa:	52                   	push   edx
c00189fb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00189ff:	52                   	push   edx
c0018a00:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018a04:	52                   	push   edx
c0018a05:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018a09:	50                   	push   eax
c0018a0a:	e8 a6 77 fe ff       	call   c00001b5 <goToVM86>
c0018a0f:	83 c4 1c             	add    esp,0x1c
c0018a12:	c3                   	ret    

c0018a13 <Vm::inbv(unsigned short)>:
c0018a13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a17:	ec                   	in     al,dx
c0018a18:	c3                   	ret    

c0018a19 <Vm::outbv(unsigned short, unsigned char)>:
c0018a19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a21:	ee                   	out    dx,al
c0018a22:	c3                   	ret    

c0018a23 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a2d:	c1 e0 04             	shl    eax,0x4
c0018a30:	01 d0                	add    eax,edx
c0018a32:	c3                   	ret    

c0018a33 <Vm::getSegment(unsigned int)>:
c0018a33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a37:	c1 e8 10             	shr    eax,0x10
c0018a3a:	c3                   	ret    

c0018a3b <Vm::getOffset(unsigned int)>:
c0018a3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a3f:	c3                   	ret    

c0018a40 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018a40:	55                   	push   ebp
c0018a41:	57                   	push   edi
c0018a42:	56                   	push   esi
c0018a43:	53                   	push   ebx
c0018a44:	83 ec 2c             	sub    esp,0x2c
c0018a47:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018a4b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a53:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018a57:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a5b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018a5f:	e8 96 f1 ff ff       	call   c0017bfa <lockScheduler()>
c0018a64:	68 80 00 00 00       	push   0x80
c0018a69:	6a 00                	push   0x0
c0018a6b:	68 e8 89 01 c0       	push   0xc00189e8
c0018a70:	55                   	push   ebp
c0018a71:	e8 ae f2 ff ff       	call   c0017d24 <Process::createThread(void (*)(void*), void*, int)>
c0018a76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a7a:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018a7e:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018a82:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018a86:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018a8a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018a8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a95:	e8 a0 64 ff ff       	call   c000ef3a <operator new(unsigned long)>
c0018a9a:	83 c4 0c             	add    esp,0xc
c0018a9d:	89 c3                	mov    ebx,eax
c0018a9f:	55                   	push   ebp
c0018aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018aa4:	50                   	push   eax
c0018aa5:	e8 ae 6a ff ff       	call   c000f558 <File::File(char const*, Process*)>
c0018aaa:	83 c4 0c             	add    esp,0xc
c0018aad:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018ab1:	50                   	push   eax
c0018ab2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018ab6:	50                   	push   eax
c0018ab7:	53                   	push   ebx
c0018ab8:	e8 ab 6d ff ff       	call   c000f868 <File::stat(unsigned long long*, bool*)>
c0018abd:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018ac1:	83 c4 10             	add    esp,0x10
c0018ac4:	84 d2                	test   dl,dl
c0018ac6:	74 1c                	je     c0018ae4 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018ac8:	83 ec 0c             	sub    esp,0xc
c0018acb:	68 03 22 02 c0       	push   0xc0022203
c0018ad0:	e8 e9 c1 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0018ad5:	e8 22 f1 ff ff       	call   c0017bfc <unlockScheduler()>
c0018ada:	83 c4 10             	add    esp,0x10
c0018add:	31 d2                	xor    edx,edx
c0018adf:	e9 81 00 00 00       	jmp    c0018b65 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018ae4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018ae8:	51                   	push   ecx
c0018ae9:	51                   	push   ecx
c0018aea:	6a 01                	push   0x1
c0018aec:	53                   	push   ebx
c0018aed:	e8 ca 6a ff ff       	call   c000f5bc <File::open(FileOpenMode)>
c0018af2:	83 c4 10             	add    esp,0x10
c0018af5:	85 c0                	test   eax,eax
c0018af7:	74 1b                	je     c0018b14 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018af9:	83 ec 0c             	sub    esp,0xc
c0018afc:	68 1c 22 02 c0       	push   0xc002221c
c0018b01:	e8 b8 c1 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c0018b06:	e8 f1 f0 ff ff       	call   c0017bfc <unlockScheduler()>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018b12:	eb 51                	jmp    c0018b65 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018b14:	83 ec 0c             	sub    esp,0xc
c0018b17:	0f b7 ff             	movzx  edi,di
c0018b1a:	6a 07                	push   0x7
c0018b1c:	0f b7 f6             	movzx  esi,si
c0018b1f:	68 00 01 00 00       	push   0x100
c0018b24:	6a 00                	push   0x0
c0018b26:	6a 00                	push   0x0
c0018b28:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018b2e:	e8 99 5b ff ff       	call   c000e6cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b33:	83 c4 18             	add    esp,0x18
c0018b36:	57                   	push   edi
c0018b37:	56                   	push   esi
c0018b38:	e8 e6 fe ff ff       	call   c0018a23 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b3d:	5a                   	pop    edx
c0018b3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b40:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018b44:	51                   	push   ecx
c0018b45:	50                   	push   eax
c0018b46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b4e:	53                   	push   ebx
c0018b4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b52:	83 c4 14             	add    esp,0x14
c0018b55:	53                   	push   ebx
c0018b56:	e8 bf 6a ff ff       	call   c000f61a <File::close()>
c0018b5b:	e8 9c f0 ff ff       	call   c0017bfc <unlockScheduler()>
c0018b60:	83 c4 10             	add    esp,0x10
c0018b63:	b2 01                	mov    dl,0x1
c0018b65:	83 c4 2c             	add    esp,0x2c
c0018b68:	88 d0                	mov    al,dl
c0018b6a:	5b                   	pop    ebx
c0018b6b:	5e                   	pop    esi
c0018b6c:	5f                   	pop    edi
c0018b6d:	5d                   	pop    ebp
c0018b6e:	c3                   	ret    

c0018b6f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b6f:	57                   	push   edi
c0018b70:	56                   	push   esi
c0018b71:	53                   	push   ebx
c0018b72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b7e:	83 e8 06             	sub    eax,0x6
c0018b81:	0f b7 c0             	movzx  eax,ax
c0018b84:	50                   	push   eax
c0018b85:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018b8a:	50                   	push   eax
c0018b8b:	e8 93 fe ff ff       	call   c0018a23 <Vm::realToLinear(unsigned short, unsigned short)>
c0018b90:	5a                   	pop    edx
c0018b91:	5e                   	pop    esi
c0018b92:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018b95:	8d 56 fa             	lea    edx,[esi-0x6]
c0018b98:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018b9e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018ba1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018ba4:	83 c2 02             	add    edx,0x2
c0018ba7:	66 89 10             	mov    WORD PTR [eax],dx
c0018baa:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018bad:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018bb1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018bb4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018bb8:	89 d6                	mov    esi,edx
c0018bba:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018bc0:	66 81 e6 ff fd       	and    si,0xfdff
c0018bc5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018bc9:	74 07                	je     c0018bd2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018bcb:	89 d6                	mov    esi,edx
c0018bcd:	66 81 ce 00 02       	or     si,0x200
c0018bd2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018bd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bdb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018bdf:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018be7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018bea:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018bf2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018bf5:	5b                   	pop    ebx
c0018bf6:	5e                   	pop    esi
c0018bf7:	5f                   	pop    edi
c0018bf8:	c3                   	ret    

c0018bf9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018bf9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c03:	c1 e0 04             	shl    eax,0x4
c0018c06:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018c09:	c3                   	ret    

c0018c0a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018c0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c14:	c1 e0 04             	shl    eax,0x4
c0018c17:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018c1b:	c3                   	ret    

c0018c1c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018c1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c26:	c1 e0 04             	shl    eax,0x4
c0018c29:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018c2c:	c3                   	ret    

c0018c2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018c2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c37:	c1 e0 04             	shl    eax,0x4
c0018c3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c3e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018c41:	c3                   	ret    

c0018c42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018c42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c4c:	c1 e0 04             	shl    eax,0x4
c0018c4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c53:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018c57:	c3                   	ret    

c0018c58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018c58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c62:	c1 e0 04             	shl    eax,0x4
c0018c65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c69:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c6c:	c3                   	ret    

c0018c6d <Vm::faultHandler(regs*)>:
c0018c6d:	55                   	push   ebp
c0018c6e:	57                   	push   edi
c0018c6f:	56                   	push   esi
c0018c70:	53                   	push   ebx
c0018c71:	83 ec 1c             	sub    esp,0x1c
c0018c74:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c7b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c7f:	0f b7 f0             	movzx  esi,ax
c0018c82:	52                   	push   edx
c0018c83:	0f b7 c0             	movzx  eax,ax
c0018c86:	50                   	push   eax
c0018c87:	e8 97 fd ff ff       	call   c0018a23 <Vm::realToLinear(unsigned short, unsigned short)>
c0018c8c:	5a                   	pop    edx
c0018c8d:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018c90:	59                   	pop    ecx
c0018c91:	89 c7                	mov    edi,eax
c0018c93:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018c96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c9a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ca3:	0f b7 c5             	movzx  eax,bp
c0018ca6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018caa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018cae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018cb2:	e8 6c fd ff ff       	call   c0018a23 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cb7:	5a                   	pop    edx
c0018cb8:	59                   	pop    ecx
c0018cb9:	b1 06                	mov    cl,0x6
c0018cbb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018cc0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018cc5:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018cc8:	80 fa 9d             	cmp    dl,0x9d
c0018ccb:	0f 84 1d 02 00 00    	je     c0018eee <Vm::faultHandler(regs*)+0x281>
c0018cd1:	0f 87 8e 00 00 00    	ja     c0018d65 <Vm::faultHandler(regs*)+0xf8>
c0018cd7:	80 fa 66             	cmp    dl,0x66
c0018cda:	0f 84 89 01 00 00    	je     c0018e69 <Vm::faultHandler(regs*)+0x1fc>
c0018ce0:	77 44                	ja     c0018d26 <Vm::faultHandler(regs*)+0xb9>
c0018ce2:	80 fa 36             	cmp    dl,0x36
c0018ce5:	0f 84 74 01 00 00    	je     c0018e5f <Vm::faultHandler(regs*)+0x1f2>
c0018ceb:	77 1a                	ja     c0018d07 <Vm::faultHandler(regs*)+0x9a>
c0018ced:	80 fa 26             	cmp    dl,0x26
c0018cf0:	0f 84 4b 01 00 00    	je     c0018e41 <Vm::faultHandler(regs*)+0x1d4>
c0018cf6:	80 fa 2e             	cmp    dl,0x2e
c0018cf9:	0f 85 4a 05 00 00    	jne    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018cff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d02:	31 c9                	xor    ecx,ecx
c0018d04:	47                   	inc    edi
c0018d05:	eb be                	jmp    c0018cc5 <Vm::faultHandler(regs*)+0x58>
c0018d07:	80 fa 64             	cmp    dl,0x64
c0018d0a:	0f 84 3b 01 00 00    	je     c0018e4b <Vm::faultHandler(regs*)+0x1de>
c0018d10:	0f 87 3f 01 00 00    	ja     c0018e55 <Vm::faultHandler(regs*)+0x1e8>
c0018d16:	80 fa 3e             	cmp    dl,0x3e
c0018d19:	0f 85 2a 05 00 00    	jne    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018d1f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d22:	b1 01                	mov    cl,0x1
c0018d24:	eb de                	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018d26:	80 fa 6d             	cmp    dl,0x6d
c0018d29:	0f 84 bf 02 00 00    	je     c0018fee <Vm::faultHandler(regs*)+0x381>
c0018d2f:	77 17                	ja     c0018d48 <Vm::faultHandler(regs*)+0xdb>
c0018d31:	80 fa 67             	cmp    dl,0x67
c0018d34:	0f 84 3c 01 00 00    	je     c0018e76 <Vm::faultHandler(regs*)+0x209>
c0018d3a:	80 fa 6c             	cmp    dl,0x6c
c0018d3d:	0f 84 5d 02 00 00    	je     c0018fa0 <Vm::faultHandler(regs*)+0x333>
c0018d43:	e9 01 05 00 00       	jmp    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018d48:	80 fa 6f             	cmp    dl,0x6f
c0018d4b:	0f 84 8b 03 00 00    	je     c00190dc <Vm::faultHandler(regs*)+0x46f>
c0018d51:	0f 82 0f 03 00 00    	jb     c0019066 <Vm::faultHandler(regs*)+0x3f9>
c0018d57:	80 fa 9c             	cmp    dl,0x9c
c0018d5a:	0f 84 23 01 00 00    	je     c0018e83 <Vm::faultHandler(regs*)+0x216>
c0018d60:	e9 e4 04 00 00       	jmp    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018d65:	80 fa ec             	cmp    dl,0xec
c0018d68:	0f 84 7f 04 00 00    	je     c00191ed <Vm::faultHandler(regs*)+0x580>
c0018d6e:	77 7b                	ja     c0018deb <Vm::faultHandler(regs*)+0x17e>
c0018d70:	80 fa e4             	cmp    dl,0xe4
c0018d73:	0f 84 fe 03 00 00    	je     c0019177 <Vm::faultHandler(regs*)+0x50a>
c0018d79:	77 53                	ja     c0018dce <Vm::faultHandler(regs*)+0x161>
c0018d7b:	80 fa cd             	cmp    dl,0xcd
c0018d7e:	0f 84 cd 01 00 00    	je     c0018f51 <Vm::faultHandler(regs*)+0x2e4>
c0018d84:	80 fa cf             	cmp    dl,0xcf
c0018d87:	0f 85 bc 04 00 00    	jne    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018d8d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d90:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018d93:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018d97:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018d9a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018d9e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018da4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018da7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018dab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018db1:	66 c1 e8 09          	shr    ax,0x9
c0018db5:	83 e0 01             	and    eax,0x1
c0018db8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018dbb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018dbe:	83 c0 06             	add    eax,0x6
c0018dc1:	25 ff ff 00 00       	and    eax,0xffff
c0018dc6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018dc9:	e9 77 04 00 00       	jmp    c0019245 <Vm::faultHandler(regs*)+0x5d8>
c0018dce:	80 fa e6             	cmp    dl,0xe6
c0018dd1:	0f 84 ea 03 00 00    	je     c00191c1 <Vm::faultHandler(regs*)+0x554>
c0018dd7:	0f 82 b6 03 00 00    	jb     c0019193 <Vm::faultHandler(regs*)+0x526>
c0018ddd:	80 fa e7             	cmp    dl,0xe7
c0018de0:	0f 84 f2 03 00 00    	je     c00191d8 <Vm::faultHandler(regs*)+0x56b>
c0018de6:	e9 5e 04 00 00       	jmp    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018deb:	80 fa ef             	cmp    dl,0xef
c0018dee:	0f 84 3c 04 00 00    	je     c0019230 <Vm::faultHandler(regs*)+0x5c3>
c0018df4:	77 28                	ja     c0018e1e <Vm::faultHandler(regs*)+0x1b1>
c0018df6:	80 fa ed             	cmp    dl,0xed
c0018df9:	0f 84 0a 04 00 00    	je     c0019209 <Vm::faultHandler(regs*)+0x59c>
c0018dff:	80 fa ee             	cmp    dl,0xee
c0018e02:	0f 85 41 04 00 00    	jne    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018e08:	50                   	push   eax
c0018e09:	50                   	push   eax
c0018e0a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018e0e:	50                   	push   eax
c0018e0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018e13:	50                   	push   eax
c0018e14:	e8 00 fc ff ff       	call   c0018a19 <Vm::outbv(unsigned short, unsigned char)>
c0018e19:	e9 0a 04 00 00       	jmp    c0019228 <Vm::faultHandler(regs*)+0x5bb>
c0018e1e:	80 fa fa             	cmp    dl,0xfa
c0018e21:	0f 84 5d 01 00 00    	je     c0018f84 <Vm::faultHandler(regs*)+0x317>
c0018e27:	80 fa fb             	cmp    dl,0xfb
c0018e2a:	0f 84 62 01 00 00    	je     c0018f92 <Vm::faultHandler(regs*)+0x325>
c0018e30:	80 fa f3             	cmp    dl,0xf3
c0018e33:	0f 85 10 04 00 00    	jne    c0019249 <Vm::faultHandler(regs*)+0x5dc>
c0018e39:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e3c:	e9 c3 fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e44:	b1 02                	mov    cl,0x2
c0018e46:	e9 b9 fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e4e:	b1 03                	mov    cl,0x3
c0018e50:	e9 af fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e58:	b1 04                	mov    cl,0x4
c0018e5a:	e9 a5 fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e62:	b1 05                	mov    cl,0x5
c0018e64:	e9 9b fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e6c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e71:	e9 8e fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e76:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e79:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018e7e:	e9 81 fe ff ff       	jmp    c0018d04 <Vm::faultHandler(regs*)+0x97>
c0018e83:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018e86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e8f:	74 30                	je     c0018ec1 <Vm::faultHandler(regs*)+0x254>
c0018e91:	83 e9 04             	sub    ecx,0x4
c0018e94:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018e9a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ea0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ea3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ea6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018eac:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018eb0:	0f 84 8c 03 00 00    	je     c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018eb6:	80 ce 02             	or     dh,0x2
c0018eb9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018ebc:	e9 81 03 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018ec1:	83 e9 02             	sub    ecx,0x2
c0018ec4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018eca:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018ecd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ed1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ed7:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018edb:	74 05                	je     c0018ee2 <Vm::faultHandler(regs*)+0x275>
c0018edd:	80 ce 02             	or     dh,0x2
c0018ee0:	eb 03                	jmp    c0018ee5 <Vm::faultHandler(regs*)+0x278>
c0018ee2:	80 e6 fd             	and    dh,0xfd
c0018ee5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ee9:	e9 54 03 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018eee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ef3:	74 2a                	je     c0018f1f <Vm::faultHandler(regs*)+0x2b2>
c0018ef5:	8b 10                	mov    edx,DWORD PTR [eax]
c0018ef7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018efd:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f03:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f06:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f0e:	c1 e8 09             	shr    eax,0x9
c0018f11:	83 e0 01             	and    eax,0x1
c0018f14:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018f17:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f1a:	83 c0 04             	add    eax,0x4
c0018f1d:	eb 25                	jmp    c0018f44 <Vm::faultHandler(regs*)+0x2d7>
c0018f1f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f22:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f28:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f2b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018f2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f34:	66 c1 e8 09          	shr    ax,0x9
c0018f38:	83 e0 01             	and    eax,0x1
c0018f3b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018f3e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f41:	83 c0 02             	add    eax,0x2
c0018f44:	25 ff ff 00 00       	and    eax,0xffff
c0018f49:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f4c:	e9 f1 02 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018f51:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018f55:	3c ff                	cmp    al,0xff
c0018f57:	75 10                	jne    c0018f69 <Vm::faultHandler(regs*)+0x2fc>
c0018f59:	83 ec 0c             	sub    esp,0xc
c0018f5c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f5f:	e8 8c f9 ff ff       	call   c00188f0 <Thr::terminateFromIRQ(int)>
c0018f64:	e9 c2 02 00 00       	jmp    c001922b <Vm::faultHandler(regs*)+0x5be>
c0018f69:	83 ec 0c             	sub    esp,0xc
c0018f6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f74:	57                   	push   edi
c0018f75:	50                   	push   eax
c0018f76:	53                   	push   ebx
c0018f77:	e8 f3 fb ff ff       	call   c0018b6f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018f7c:	83 c4 20             	add    esp,0x20
c0018f7f:	e9 c1 02 00 00       	jmp    c0019245 <Vm::faultHandler(regs*)+0x5d8>
c0018f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f89:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f8d:	e9 b0 02 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018f92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f97:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018f9b:	e9 a2 02 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0018fa0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018fa5:	74 0d                	je     c0018fb4 <Vm::faultHandler(regs*)+0x347>
c0018fa7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018fae:	0f 87 e9 02 00 00    	ja     c001929d <Vm::faultHandler(regs*)+0x630>
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018fba:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fbe:	50                   	push   eax
c0018fbf:	e8 4f fa ff ff       	call   c0018a13 <Vm::inbv(unsigned short)>
c0018fc4:	83 c4 0c             	add    esp,0xc
c0018fc7:	0f b6 c0             	movzx  eax,al
c0018fca:	0f b7 c9             	movzx  ecx,cx
c0018fcd:	50                   	push   eax
c0018fce:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018fd2:	50                   	push   eax
c0018fd3:	51                   	push   ecx
c0018fd4:	e8 54 fc ff ff       	call   c0018c2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018fdf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018fe3:	74 03                	je     c0018fe8 <Vm::faultHandler(regs*)+0x37b>
c0018fe5:	48                   	dec    eax
c0018fe6:	eb 01                	jmp    c0018fe9 <Vm::faultHandler(regs*)+0x37c>
c0018fe8:	40                   	inc    eax
c0018fe9:	0f b7 c0             	movzx  eax,ax
c0018fec:	eb 70                	jmp    c001905e <Vm::faultHandler(regs*)+0x3f1>
c0018fee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018ff1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018ff4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ff9:	74 0c                	je     c0019007 <Vm::faultHandler(regs*)+0x39a>
c0018ffb:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019001:	0f 87 96 02 00 00    	ja     c001929d <Vm::faultHandler(regs*)+0x630>
c0019007:	0f b7 c9             	movzx  ecx,cx
c001900a:	0f b7 f6             	movzx  esi,si
c001900d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019010:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019015:	74 20                	je     c0019037 <Vm::faultHandler(regs*)+0x3ca>
c0019017:	ed                   	in     eax,dx
c0019018:	55                   	push   ebp
c0019019:	50                   	push   eax
c001901a:	51                   	push   ecx
c001901b:	56                   	push   esi
c001901c:	e8 37 fc ff ff       	call   c0018c58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019027:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001902b:	74 05                	je     c0019032 <Vm::faultHandler(regs*)+0x3c5>
c001902d:	83 e8 04             	sub    eax,0x4
c0019030:	eb 27                	jmp    c0019059 <Vm::faultHandler(regs*)+0x3ec>
c0019032:	83 c0 04             	add    eax,0x4
c0019035:	eb 22                	jmp    c0019059 <Vm::faultHandler(regs*)+0x3ec>
c0019037:	66 ed                	in     ax,dx
c0019039:	0f b7 c0             	movzx  eax,ax
c001903c:	57                   	push   edi
c001903d:	50                   	push   eax
c001903e:	51                   	push   ecx
c001903f:	56                   	push   esi
c0019040:	e8 fd fb ff ff       	call   c0018c42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001904b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001904f:	74 05                	je     c0019056 <Vm::faultHandler(regs*)+0x3e9>
c0019051:	83 e8 02             	sub    eax,0x2
c0019054:	eb 03                	jmp    c0019059 <Vm::faultHandler(regs*)+0x3ec>
c0019056:	83 c0 02             	add    eax,0x2
c0019059:	25 ff ff 00 00       	and    eax,0xffff
c001905e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019061:	e9 dc 01 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0019066:	49                   	dec    ecx
c0019067:	80 f9 05             	cmp    cl,0x5
c001906a:	77 24                	ja     c0019090 <Vm::faultHandler(regs*)+0x423>
c001906c:	0f b6 c9             	movzx  ecx,cl
c001906f:	ff 24 8d 64 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddd9c]
c0019076:	0f b7 f5             	movzx  esi,bp
c0019079:	eb 15                	jmp    c0019090 <Vm::faultHandler(regs*)+0x423>
c001907b:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001907f:	eb 0f                	jmp    c0019090 <Vm::faultHandler(regs*)+0x423>
c0019081:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019085:	eb 09                	jmp    c0019090 <Vm::faultHandler(regs*)+0x423>
c0019087:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001908b:	eb 03                	jmp    c0019090 <Vm::faultHandler(regs*)+0x423>
c001908d:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019090:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019093:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019098:	74 0b                	je     c00190a5 <Vm::faultHandler(regs*)+0x438>
c001909a:	3d ff ff 00 00       	cmp    eax,0xffff
c001909f:	0f 87 f8 01 00 00    	ja     c001929d <Vm::faultHandler(regs*)+0x630>
c00190a5:	0f b7 c0             	movzx  eax,ax
c00190a8:	52                   	push   edx
c00190a9:	52                   	push   edx
c00190aa:	50                   	push   eax
c00190ab:	56                   	push   esi
c00190ac:	e8 48 fb ff ff       	call   c0018bf9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00190b1:	59                   	pop    ecx
c00190b2:	0f b6 c0             	movzx  eax,al
c00190b5:	5e                   	pop    esi
c00190b6:	50                   	push   eax
c00190b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00190bb:	50                   	push   eax
c00190bc:	e8 58 f9 ff ff       	call   c0018a19 <Vm::outbv(unsigned short, unsigned char)>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00190c7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00190cb:	74 03                	je     c00190d0 <Vm::faultHandler(regs*)+0x463>
c00190cd:	48                   	dec    eax
c00190ce:	eb 01                	jmp    c00190d1 <Vm::faultHandler(regs*)+0x464>
c00190d0:	40                   	inc    eax
c00190d1:	0f b7 c0             	movzx  eax,ax
c00190d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00190d7:	e9 66 01 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c00190dc:	49                   	dec    ecx
c00190dd:	80 f9 05             	cmp    cl,0x5
c00190e0:	77 1f                	ja     c0019101 <Vm::faultHandler(regs*)+0x494>
c00190e2:	0f b6 c9             	movzx  ecx,cl
c00190e5:	ff 24 8d 7c 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddd84]
c00190ec:	89 ee                	mov    esi,ebp
c00190ee:	eb 11                	jmp    c0019101 <Vm::faultHandler(regs*)+0x494>
c00190f0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00190f3:	eb 0c                	jmp    c0019101 <Vm::faultHandler(regs*)+0x494>
c00190f5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00190f8:	eb 07                	jmp    c0019101 <Vm::faultHandler(regs*)+0x494>
c00190fa:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00190fd:	eb 02                	jmp    c0019101 <Vm::faultHandler(regs*)+0x494>
c00190ff:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019101:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019104:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019109:	74 0c                	je     c0019117 <Vm::faultHandler(regs*)+0x4aa>
c001910b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019111:	0f 87 86 01 00 00    	ja     c001929d <Vm::faultHandler(regs*)+0x630>
c0019117:	0f b7 d6             	movzx  edx,si
c001911a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001911d:	0f b7 c1             	movzx  eax,cx
c0019120:	81 e7 00 04 00 00    	and    edi,0x400
c0019126:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019129:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001912e:	74 1d                	je     c001914d <Vm::faultHandler(regs*)+0x4e0>
c0019130:	55                   	push   ebp
c0019131:	55                   	push   ebp
c0019132:	50                   	push   eax
c0019133:	52                   	push   edx
c0019134:	e8 e3 fa ff ff       	call   c0018c1c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	89 f2                	mov    edx,esi
c001913e:	ef                   	out    dx,eax
c001913f:	85 ff                	test   edi,edi
c0019141:	74 05                	je     c0019148 <Vm::faultHandler(regs*)+0x4db>
c0019143:	83 e9 04             	sub    ecx,0x4
c0019146:	eb 21                	jmp    c0019169 <Vm::faultHandler(regs*)+0x4fc>
c0019148:	83 c1 04             	add    ecx,0x4
c001914b:	eb 1c                	jmp    c0019169 <Vm::faultHandler(regs*)+0x4fc>
c001914d:	55                   	push   ebp
c001914e:	55                   	push   ebp
c001914f:	50                   	push   eax
c0019150:	52                   	push   edx
c0019151:	e8 b4 fa ff ff       	call   c0018c0a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	89 f2                	mov    edx,esi
c001915b:	66 ef                	out    dx,ax
c001915d:	85 ff                	test   edi,edi
c001915f:	74 05                	je     c0019166 <Vm::faultHandler(regs*)+0x4f9>
c0019161:	83 e9 02             	sub    ecx,0x2
c0019164:	eb 03                	jmp    c0019169 <Vm::faultHandler(regs*)+0x4fc>
c0019166:	83 c1 02             	add    ecx,0x2
c0019169:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001916f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019172:	e9 cb 00 00 00       	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0019177:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001917e:	83 ec 0c             	sub    esp,0xc
c0019181:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019185:	50                   	push   eax
c0019186:	e8 88 f8 ff ff       	call   c0018a13 <Vm::inbv(unsigned short)>
c001918b:	0f b6 c0             	movzx  eax,al
c001918e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019191:	eb 3f                	jmp    c00191d2 <Vm::faultHandler(regs*)+0x565>
c0019193:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019198:	74 07                	je     c00191a1 <Vm::faultHandler(regs*)+0x534>
c001919a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001919e:	ed                   	in     eax,dx
c001919f:	eb 14                	jmp    c00191b5 <Vm::faultHandler(regs*)+0x548>
c00191a1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00191a4:	66 31 c9             	xor    cx,cx
c00191a7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00191aa:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191ae:	66 ed                	in     ax,dx
c00191b0:	0f b7 c0             	movzx  eax,ax
c00191b3:	09 c8                	or     eax,ecx
c00191b5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00191b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191bc:	e9 84 00 00 00       	jmp    c0019245 <Vm::faultHandler(regs*)+0x5d8>
c00191c1:	52                   	push   edx
c00191c2:	52                   	push   edx
c00191c3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00191c7:	50                   	push   eax
c00191c8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00191cc:	50                   	push   eax
c00191cd:	e8 47 f8 ff ff       	call   c0018a19 <Vm::outbv(unsigned short, unsigned char)>
c00191d2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00191d6:	eb 53                	jmp    c001922b <Vm::faultHandler(regs*)+0x5be>
c00191d8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00191db:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00191df:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191e4:	74 03                	je     c00191e9 <Vm::faultHandler(regs*)+0x57c>
c00191e6:	ef                   	out    dx,eax
c00191e7:	eb cf                	jmp    c00191b8 <Vm::faultHandler(regs*)+0x54b>
c00191e9:	66 ef                	out    dx,ax
c00191eb:	eb cb                	jmp    c00191b8 <Vm::faultHandler(regs*)+0x54b>
c00191ed:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00191f4:	83 ec 0c             	sub    esp,0xc
c00191f7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191fb:	50                   	push   eax
c00191fc:	e8 12 f8 ff ff       	call   c0018a13 <Vm::inbv(unsigned short)>
c0019201:	0f b6 c0             	movzx  eax,al
c0019204:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019207:	eb 1f                	jmp    c0019228 <Vm::faultHandler(regs*)+0x5bb>
c0019209:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001920c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019211:	74 03                	je     c0019216 <Vm::faultHandler(regs*)+0x5a9>
c0019213:	ed                   	in     eax,dx
c0019214:	eb 0d                	jmp    c0019223 <Vm::faultHandler(regs*)+0x5b6>
c0019216:	66 ed                	in     ax,dx
c0019218:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001921b:	0f b7 c0             	movzx  eax,ax
c001921e:	66 31 d2             	xor    dx,dx
c0019221:	09 d0                	or     eax,edx
c0019223:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019226:	eb 1a                	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0019228:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001922b:	83 c4 10             	add    esp,0x10
c001922e:	eb 15                	jmp    c0019245 <Vm::faultHandler(regs*)+0x5d8>
c0019230:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019233:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019236:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001923b:	74 03                	je     c0019240 <Vm::faultHandler(regs*)+0x5d3>
c001923d:	ef                   	out    dx,eax
c001923e:	eb 02                	jmp    c0019242 <Vm::faultHandler(regs*)+0x5d5>
c0019240:	66 ef                	out    dx,ax
c0019242:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019245:	b0 01                	mov    al,0x1
c0019247:	eb 56                	jmp    c001929f <Vm::faultHandler(regs*)+0x632>
c0019249:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001924d:	50                   	push   eax
c001924e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019252:	50                   	push   eax
c0019253:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019257:	50                   	push   eax
c0019258:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001925c:	50                   	push   eax
c001925d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019261:	50                   	push   eax
c0019262:	52                   	push   edx
c0019263:	52                   	push   edx
c0019264:	68 35 22 02 c0       	push   0xc0022235
c0019269:	e8 bb 5d ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001926e:	83 c4 20             	add    esp,0x20
c0019271:	83 ec 0c             	sub    esp,0xc
c0019274:	6a 60                	push   0x60
c0019276:	e8 98 f7 ff ff       	call   c0018a13 <Vm::inbv(unsigned short)>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	3c 1c                	cmp    al,0x1c
c0019280:	74 04                	je     c0019286 <Vm::faultHandler(regs*)+0x619>
c0019282:	3c 5a                	cmp    al,0x5a
c0019284:	75 eb                	jne    c0019271 <Vm::faultHandler(regs*)+0x604>
c0019286:	3c 5a                	cmp    al,0x5a
c0019288:	74 04                	je     c001928e <Vm::faultHandler(regs*)+0x621>
c001928a:	3c 1c                	cmp    al,0x1c
c001928c:	75 0f                	jne    c001929d <Vm::faultHandler(regs*)+0x630>
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	6a 60                	push   0x60
c0019293:	e8 7b f7 ff ff       	call   c0018a13 <Vm::inbv(unsigned short)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	eb e9                	jmp    c0019286 <Vm::faultHandler(regs*)+0x619>
c001929d:	31 c0                	xor    eax,eax
c001929f:	83 c4 1c             	add    esp,0x1c
c00192a2:	5b                   	pop    ebx
c00192a3:	5e                   	pop    esi
c00192a4:	5f                   	pop    edi
c00192a5:	5d                   	pop    ebp
c00192a6:	c3                   	ret    
c00192a7:	90                   	nop

c00192a8 <FAT::getName()>:
c00192a8:	b8 94 22 02 c0       	mov    eax,0xc0022294
c00192ad:	c3                   	ret    

c00192ae <FAT::tell(void*, unsigned long long*)>:
c00192ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192b3:	75 06                	jne    c00192bb <FAT::tell(void*, unsigned long long*)+0xd>
c00192b5:	b8 04 00 00 00       	mov    eax,0x4
c00192ba:	c3                   	ret    
c00192bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192c0:	75 06                	jne    c00192c8 <FAT::tell(void*, unsigned long long*)+0x1a>
c00192c2:	b8 04 00 00 00       	mov    eax,0x4
c00192c7:	c3                   	ret    
c00192c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192cc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00192cf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192d6:	89 01                	mov    DWORD PTR [ecx],eax
c00192d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192db:	b8 00 00 00 00       	mov    eax,0x0
c00192e0:	c3                   	ret    
c00192e1:	90                   	nop

c00192e2 <FAT::stat(void*, unsigned long long*)>:
c00192e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192e7:	75 06                	jne    c00192ef <FAT::stat(void*, unsigned long long*)+0xd>
c00192e9:	b8 04 00 00 00       	mov    eax,0x4
c00192ee:	c3                   	ret    
c00192ef:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192f4:	75 06                	jne    c00192fc <FAT::stat(void*, unsigned long long*)+0x1a>
c00192f6:	b8 04 00 00 00       	mov    eax,0x4
c00192fb:	c3                   	ret    
c00192fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019300:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019303:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019306:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001930a:	89 01                	mov    DWORD PTR [ecx],eax
c001930c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001930f:	b8 00 00 00 00       	mov    eax,0x0
c0019314:	c3                   	ret    
c0019315:	90                   	nop

c0019316 <FAT::~FAT()>:
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	ba 18 23 02 c0       	mov    edx,0xc0022318
c001931e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019322:	89 10                	mov    DWORD PTR [eax],edx
c0019324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019328:	83 ec 0c             	sub    esp,0xc
c001932b:	50                   	push   eax
c001932c:	e8 21 60 ff ff       	call   c000f352 <Filesystem::~Filesystem()>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	90                   	nop
c0019335:	83 c4 0c             	add    esp,0xc
c0019338:	c3                   	ret    
c0019339:	90                   	nop

c001933a <FAT::~FAT()>:
c001933a:	83 ec 0c             	sub    esp,0xc
c001933d:	83 ec 0c             	sub    esp,0xc
c0019340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019344:	e8 cd ff ff ff       	call   c0019316 <FAT::~FAT()>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	83 ec 08             	sub    esp,0x8
c001934f:	6a 08                	push   0x8
c0019351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019355:	e8 ef 5b ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	83 c4 0c             	add    esp,0xc
c0019360:	c3                   	ret    
c0019361:	90                   	nop

c0019362 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019362:	83 ec 1c             	sub    esp,0x1c
c0019365:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001936c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019375:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c001937c:	83 f8 ff             	cmp    eax,0xffffffff
c001937f:	75 34                	jne    c00193b5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019381:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019385:	88 c2                	mov    dl,al
c0019387:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c001938c:	01 d0                	add    eax,edx
c001938e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019392:	8b 15 20 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c20
c0019398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001939c:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c00193a3:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00193a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00193ac:	89 14 85 c0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb340],edx
c00193b3:	eb 17                	jmp    c00193cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00193b5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00193b9:	88 c2                	mov    dl,al
c00193bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193bf:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c00193c6:	01 d0                	add    eax,edx
c00193c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00193cc:	83 ec 04             	sub    esp,0x4
c00193cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00193db:	50                   	push   eax
c00193dc:	e8 91 d6 fe ff       	call   c0006a72 <f_getlabel>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00193ed:	75 07                	jne    c00193f6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00193ef:	b8 00 00 00 00       	mov    eax,0x0
c00193f4:	eb 05                	jmp    c00193fb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00193f6:	b8 01 00 00 00       	mov    eax,0x1
c00193fb:	83 c4 1c             	add    esp,0x1c
c00193fe:	c3                   	ret    
c00193ff:	90                   	nop

c0019400 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019400:	57                   	push   edi
c0019401:	83 ec 58             	sub    esp,0x58
c0019404:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001940c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019410:	b9 0f 00 00 00       	mov    ecx,0xf
c0019415:	b8 00 00 00 00       	mov    eax,0x0
c001941a:	fc                   	cld    
c001941b:	89 d7                	mov    edi,edx
c001941d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001941f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019423:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c001942a:	83 f8 ff             	cmp    eax,0xffffffff
c001942d:	75 34                	jne    c0019463 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001942f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019433:	88 c2                	mov    dl,al
c0019435:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c001943a:	01 d0                	add    eax,edx
c001943c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019440:	8b 15 20 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c20
c0019446:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001944a:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0019451:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c0019456:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001945a:	89 14 85 c0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb340],edx
c0019461:	eb 17                	jmp    c001947a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019463:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019467:	88 c2                	mov    dl,al
c0019469:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001946d:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c0019474:	01 d0                	add    eax,edx
c0019476:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001947a:	83 ec 08             	sub    esp,0x8
c001947d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019481:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019485:	50                   	push   eax
c0019486:	e8 e0 72 fe ff       	call   c000076b <strcat>
c001948b:	83 c4 10             	add    esp,0x10
c001948e:	83 ec 0c             	sub    esp,0xc
c0019491:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019495:	50                   	push   eax
c0019496:	e8 c5 d7 fe ff       	call   c0006c60 <f_setlabel>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00194a2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00194a7:	75 07                	jne    c00194b0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00194a9:	b8 00 00 00 00       	mov    eax,0x0
c00194ae:	eb 05                	jmp    c00194b5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00194b0:	b8 01 00 00 00       	mov    eax,0x1
c00194b5:	83 c4 58             	add    esp,0x58
c00194b8:	5f                   	pop    edi
c00194b9:	c3                   	ret    

c00194ba <FAT::format(LogicalDisk*, int, char const*, int)>:
c00194ba:	83 ec 2c             	sub    esp,0x2c
c00194bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00194c5:	83 ec 08             	sub    esp,0x8
c00194c8:	68 b8 22 02 c0       	push   0xc00222b8
c00194cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194d1:	e8 2f 72 fe ff       	call   c0000705 <strcmp>
c00194d6:	83 c4 10             	add    esp,0x10
c00194d9:	85 c0                	test   eax,eax
c00194db:	0f 94 c0             	sete   al
c00194de:	84 c0                	test   al,al
c00194e0:	74 0d                	je     c00194ef <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00194e2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194ea:	e9 a6 00 00 00       	jmp    c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194ef:	83 ec 08             	sub    esp,0x8
c00194f2:	68 aa 22 02 c0       	push   0xc00222aa
c00194f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194fb:	e8 05 72 fe ff       	call   c0000705 <strcmp>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	85 c0                	test   eax,eax
c0019505:	0f 94 c0             	sete   al
c0019508:	84 c0                	test   al,al
c001950a:	74 0a                	je     c0019516 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001950c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019514:	eb 7f                	jmp    c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019516:	83 ec 08             	sub    esp,0x8
c0019519:	68 b0 22 02 c0       	push   0xc00222b0
c001951e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019522:	e8 de 71 fe ff       	call   c0000705 <strcmp>
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	85 c0                	test   eax,eax
c001952c:	0f 94 c0             	sete   al
c001952f:	84 c0                	test   al,al
c0019531:	74 0a                	je     c001953d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019533:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001953b:	eb 58                	jmp    c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001953d:	83 ec 08             	sub    esp,0x8
c0019540:	68 ec f7 01 c0       	push   0xc001f7ec
c0019545:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019549:	e8 b7 71 fe ff       	call   c0000705 <strcmp>
c001954e:	83 c4 10             	add    esp,0x10
c0019551:	85 c0                	test   eax,eax
c0019553:	0f 94 c0             	sete   al
c0019556:	84 c0                	test   al,al
c0019558:	74 0a                	je     c0019564 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001955a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019562:	eb 31                	jmp    c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019564:	83 ec 08             	sub    esp,0x8
c0019567:	68 b6 22 02 c0       	push   0xc00222b6
c001956c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019570:	e8 90 71 fe ff       	call   c0000705 <strcmp>
c0019575:	83 c4 10             	add    esp,0x10
c0019578:	85 c0                	test   eax,eax
c001957a:	0f 94 c0             	sete   al
c001957d:	84 c0                	test   al,al
c001957f:	74 0a                	je     c001958b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019581:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019589:	eb 0a                	jmp    c0019595 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001958b:	b8 08 00 00 00       	mov    eax,0x8
c0019590:	e9 04 01 00 00       	jmp    c0019699 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019595:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001959c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00195a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195a5:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c00195ac:	83 f8 ff             	cmp    eax,0xffffffff
c00195af:	75 34                	jne    c00195e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00195b1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195b5:	88 c2                	mov    dl,al
c00195b7:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00195bc:	01 d0                	add    eax,edx
c00195be:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195c2:	8b 15 20 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c20
c00195c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195cc:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c00195d3:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00195d8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00195dc:	89 14 85 c0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb340],edx
c00195e3:	eb 17                	jmp    c00195fc <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00195e5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195e9:	88 c2                	mov    dl,al
c00195eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ef:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c00195f6:	01 d0                	add    eax,edx
c00195f8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019600:	88 04 24             	mov    BYTE PTR [esp],al
c0019603:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001960b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019613:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019618:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	68 00 20 00 00       	push   0x2000
c0019628:	e8 1f 26 ff ff       	call   c000bc4c <malloc>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019634:	68 00 20 00 00       	push   0x2000
c0019639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001963d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019641:	50                   	push   eax
c0019642:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019646:	50                   	push   eax
c0019647:	e8 5f da fe ff       	call   c00070ab <f_mkfs>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019658:	75 07                	jne    c0019661 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001965a:	b8 00 00 00 00       	mov    eax,0x0
c001965f:	eb 38                	jmp    c0019699 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019661:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019666:	75 17                	jne    c001967f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	68 e8 22 02 c0       	push   0xc00222e8
c0019670:	e8 b4 59 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0019675:	83 c4 10             	add    esp,0x10
c0019678:	b8 09 00 00 00       	mov    eax,0x9
c001967d:	eb 1a                	jmp    c0019699 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001967f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019683:	83 ec 08             	sub    esp,0x8
c0019686:	50                   	push   eax
c0019687:	68 bc 22 02 c0       	push   0xc00222bc
c001968c:	e8 98 59 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c0019691:	83 c4 10             	add    esp,0x10
c0019694:	b8 01 00 00 00       	mov    eax,0x1
c0019699:	83 c4 2c             	add    esp,0x2c
c001969c:	c3                   	ret    
c001969d:	90                   	nop

c001969e <FAT::tryMount(LogicalDisk*, int)>:
c001969e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00196a4:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c00196a9:	83 f8 14             	cmp    eax,0x14
c00196ac:	75 17                	jne    c00196c5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	68 ce 22 02 c0       	push   0xc00222ce
c00196b6:	e8 03 b6 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c00196bb:	83 c4 10             	add    esp,0x10
c00196be:	b0 00                	mov    al,0x0
c00196c0:	e9 d7 01 00 00       	jmp    c001989c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196c5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00196cc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196d8:	3d 00 02 00 00       	cmp    eax,0x200
c00196dd:	74 07                	je     c00196e6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00196df:	b0 00                	mov    al,0x0
c00196e1:	e9 b6 01 00 00       	jmp    c001989c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196e6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00196ee:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196f5:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c00196fc:	83 f8 ff             	cmp    eax,0xffffffff
c00196ff:	74 07                	je     c0019708 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019701:	b0 01                	mov    al,0x1
c0019703:	e9 94 01 00 00       	jmp    c001989c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019708:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019712:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001971a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019721:	88 c2                	mov    dl,al
c0019723:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c0019728:	01 d0                	add    eax,edx
c001972a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019731:	8b 15 20 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c20
c0019737:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001973e:	89 14 85 40 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3c0],edx
c0019745:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c001974a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019751:	89 14 85 c0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb340],edx
c0019758:	83 ec 0c             	sub    esp,0xc
c001975b:	68 54 02 00 00       	push   0x254
c0019760:	e8 e7 24 ff ff       	call   c000bc4c <malloc>
c0019765:	83 c4 10             	add    esp,0x10
c0019768:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001976f:	83 ec 04             	sub    esp,0x4
c0019772:	6a 00                	push   0x0
c0019774:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001977b:	50                   	push   eax
c001977c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019783:	e8 e1 b4 fe ff       	call   c0004c69 <f_mount>
c0019788:	83 c4 10             	add    esp,0x10
c001978b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019792:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001979a:	74 19                	je     c00197b5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00197a6:	e8 c1 24 ff ff       	call   c000bc6c <rfree>
c00197ab:	83 c4 10             	add    esp,0x10
c00197ae:	b0 00                	mov    al,0x0
c00197b0:	e9 e7 00 00 00       	jmp    c001989c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00197b5:	83 ec 04             	sub    esp,0x4
c00197b8:	68 00 01 00 00       	push   0x100
c00197bd:	6a 00                	push   0x0
c00197bf:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197c6:	50                   	push   eax
c00197c7:	e8 3c 6e fe ff       	call   c0000608 <memset>
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	83 ec 08             	sub    esp,0x8
c00197d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00197d9:	50                   	push   eax
c00197da:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197e1:	50                   	push   eax
c00197e2:	e8 84 6f fe ff       	call   c000076b <strcat>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	83 ec 08             	sub    esp,0x8
c00197ed:	68 dc 22 02 c0       	push   0xc00222dc
c00197f2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197f9:	50                   	push   eax
c00197fa:	e8 6c 6f fe ff       	call   c000076b <strcat>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	83 ec 04             	sub    esp,0x4
c0019805:	6a 01                	push   0x1
c0019807:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001980e:	50                   	push   eax
c001980f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019813:	50                   	push   eax
c0019814:	e8 b2 b4 fe ff       	call   c0004ccb <f_open>
c0019819:	83 c4 10             	add    esp,0x10
c001981c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019823:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001982a:	85 c0                	test   eax,eax
c001982c:	74 0a                	je     c0019838 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001982e:	78 2d                	js     c001985d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019830:	83 e8 04             	sub    eax,0x4
c0019833:	83 f8 01             	cmp    eax,0x1
c0019836:	77 25                	ja     c001985d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019838:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019847:	50                   	push   eax
c0019848:	e8 d0 bf fe ff       	call   c000581d <f_close>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	90                   	nop
c0019851:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019859:	74 3a                	je     c0019895 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001985b:	eb 2d                	jmp    c001988a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001985d:	83 ec 0c             	sub    esp,0xc
c0019860:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019867:	e8 00 24 ff ff       	call   c000bc6c <rfree>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	83 ec 04             	sub    esp,0x4
c0019872:	6a 00                	push   0x0
c0019874:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001987b:	50                   	push   eax
c001987c:	6a 00                	push   0x0
c001987e:	e8 e6 b3 fe ff       	call   c0004c69 <f_mount>
c0019883:	83 c4 10             	add    esp,0x10
c0019886:	b0 00                	mov    al,0x0
c0019888:	eb 12                	jmp    c001989c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001988a:	a1 20 4c 02 c0       	mov    eax,ds:0xc0024c20
c001988f:	40                   	inc    eax
c0019890:	a3 20 4c 02 c0       	mov    ds:0xc0024c20,eax
c0019895:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001989c:	81 c4 6c 03 00 00    	add    esp,0x36c
c00198a2:	c3                   	ret    
c00198a3:	90                   	nop

c00198a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00198a4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00198aa:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00198b2:	74 0a                	je     c00198be <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00198b4:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00198bc:	75 0a                	jne    c00198c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00198be:	b8 04 00 00 00       	mov    eax,0x4
c00198c3:	e9 db 00 00 00       	jmp    c00199a3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00198d2:	50                   	push   eax
c00198d3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00198da:	e8 48 c5 fe ff       	call   c0005e27 <f_readdir>
c00198df:	83 c4 10             	add    esp,0x10
c00198e2:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00198e9:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198ef:	83 ec 0c             	sub    esp,0xc
c00198f2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00198f9:	83 c0 1a             	add    eax,0x1a
c00198fc:	50                   	push   eax
c00198fd:	e8 23 6d fe ff       	call   c0000625 <strlen>
c0019902:	83 c4 10             	add    esp,0x10
c0019905:	ba 00 00 00 00       	mov    edx,0x0
c001990a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001990e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019912:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019919:	0f b6 c0             	movzx  eax,al
c001991c:	83 e0 10             	and    eax,0x10
c001991f:	74 07                	je     c0019928 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019921:	b8 02 00 00 00       	mov    eax,0x2
c0019926:	eb 05                	jmp    c001992d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019928:	b8 01 00 00 00       	mov    eax,0x1
c001992d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019931:	83 ec 08             	sub    esp,0x8
c0019934:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001993b:	83 c0 1a             	add    eax,0x1a
c001993e:	50                   	push   eax
c001993f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019943:	83 c0 10             	add    eax,0x10
c0019946:	50                   	push   eax
c0019947:	e8 5b 6d fe ff       	call   c00006a7 <strcpy>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	83 ec 04             	sub    esp,0x4
c0019952:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019959:	8d 44 24 08          	lea    eax,[esp+0x8]
c001995d:	50                   	push   eax
c001995e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019965:	e8 68 6c fe ff       	call   c00005d2 <memcpy>
c001996a:	83 c4 10             	add    esp,0x10
c001996d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019974:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001997a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019981:	84 c0                	test   al,al
c0019983:	75 07                	jne    c001998c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0019985:	b8 07 00 00 00       	mov    eax,0x7
c001998a:	eb 17                	jmp    c00199a3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001998c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019993:	85 c0                	test   eax,eax
c0019995:	75 07                	jne    c001999e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0019997:	b8 00 00 00 00       	mov    eax,0x0
c001999c:	eb 05                	jmp    c00199a3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001999e:	b8 01 00 00 00       	mov    eax,0x1
c00199a3:	81 c4 3c 02 00 00    	add    esp,0x23c
c00199a9:	c3                   	ret    

c00199aa <FAT::read(void*, unsigned long, void*, int*)>:
c00199aa:	83 ec 1c             	sub    esp,0x1c
c00199ad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199b2:	74 07                	je     c00199bb <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00199b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199b9:	75 07                	jne    c00199c2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00199bb:	b8 04 00 00 00       	mov    eax,0x4
c00199c0:	eb 3d                	jmp    c00199ff <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199c6:	50                   	push   eax
c00199c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d3:	e8 2f b7 fe ff       	call   c0005107 <f_read>
c00199d8:	83 c4 10             	add    esp,0x10
c00199db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199e3:	89 c2                	mov    edx,eax
c00199e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199e9:	89 10                	mov    DWORD PTR [eax],edx
c00199eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ef:	85 c0                	test   eax,eax
c00199f1:	75 07                	jne    c00199fa <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00199f3:	b8 00 00 00 00       	mov    eax,0x0
c00199f8:	eb 05                	jmp    c00199ff <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199fa:	b8 01 00 00 00       	mov    eax,0x1
c00199ff:	83 c4 1c             	add    esp,0x1c
c0019a02:	c3                   	ret    
c0019a03:	90                   	nop

c0019a04 <FAT::write(void*, unsigned long, void*, int*)>:
c0019a04:	83 ec 1c             	sub    esp,0x1c
c0019a07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a0c:	74 07                	je     c0019a15 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019a0e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019a13:	75 07                	jne    c0019a1c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019a15:	b8 04 00 00 00       	mov    eax,0x4
c0019a1a:	eb 3d                	jmp    c0019a59 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a20:	50                   	push   eax
c0019a21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a2d:	e8 55 b9 fe ff       	call   c0005387 <f_write>
c0019a32:	83 c4 10             	add    esp,0x10
c0019a35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a3d:	89 c2                	mov    edx,eax
c0019a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a43:	89 10                	mov    DWORD PTR [eax],edx
c0019a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a49:	85 c0                	test   eax,eax
c0019a4b:	75 07                	jne    c0019a54 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019a4d:	b8 00 00 00 00       	mov    eax,0x0
c0019a52:	eb 05                	jmp    c0019a59 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a54:	b8 01 00 00 00       	mov    eax,0x1
c0019a59:	83 c4 1c             	add    esp,0x1c
c0019a5c:	c3                   	ret    
c0019a5d:	90                   	nop

c0019a5e <FAT::close(void*)>:
c0019a5e:	83 ec 1c             	sub    esp,0x1c
c0019a61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a66:	75 07                	jne    c0019a6f <FAT::close(void*)+0x11>
c0019a68:	b8 04 00 00 00       	mov    eax,0x4
c0019a6d:	eb 36                	jmp    c0019aa5 <FAT::close(void*)+0x47>
c0019a6f:	83 ec 0c             	sub    esp,0xc
c0019a72:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a76:	e8 a2 bd fe ff       	call   c000581d <f_close>
c0019a7b:	83 c4 10             	add    esp,0x10
c0019a7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a82:	83 ec 0c             	sub    esp,0xc
c0019a85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a89:	e8 ce 21 ff ff       	call   c000bc5c <free>
c0019a8e:	83 c4 10             	add    esp,0x10
c0019a91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a95:	85 c0                	test   eax,eax
c0019a97:	75 07                	jne    c0019aa0 <FAT::close(void*)+0x42>
c0019a99:	b8 00 00 00 00       	mov    eax,0x0
c0019a9e:	eb 05                	jmp    c0019aa5 <FAT::close(void*)+0x47>
c0019aa0:	b8 01 00 00 00       	mov    eax,0x1
c0019aa5:	83 c4 1c             	add    esp,0x1c
c0019aa8:	c3                   	ret    
c0019aa9:	90                   	nop

c0019aaa <FAT::closeDir(void*)>:
c0019aaa:	83 ec 1c             	sub    esp,0x1c
c0019aad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019ab2:	75 07                	jne    c0019abb <FAT::closeDir(void*)+0x11>
c0019ab4:	b8 04 00 00 00       	mov    eax,0x4
c0019ab9:	eb 36                	jmp    c0019af1 <FAT::closeDir(void*)+0x47>
c0019abb:	83 ec 0c             	sub    esp,0xc
c0019abe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ac2:	e8 3e c3 fe ff       	call   c0005e05 <f_closedir>
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ace:	83 ec 0c             	sub    esp,0xc
c0019ad1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ad5:	e8 82 21 ff ff       	call   c000bc5c <free>
c0019ada:	83 c4 10             	add    esp,0x10
c0019add:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ae1:	85 c0                	test   eax,eax
c0019ae3:	75 07                	jne    c0019aec <FAT::closeDir(void*)+0x42>
c0019ae5:	b8 00 00 00 00       	mov    eax,0x0
c0019aea:	eb 05                	jmp    c0019af1 <FAT::closeDir(void*)+0x47>
c0019aec:	b8 01 00 00 00       	mov    eax,0x1
c0019af1:	83 c4 1c             	add    esp,0x1c
c0019af4:	c3                   	ret    
c0019af5:	90                   	nop

c0019af6 <FAT::seek(void*, unsigned long long)>:
c0019af6:	83 ec 2c             	sub    esp,0x2c
c0019af9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b09:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b0e:	75 07                	jne    c0019b17 <FAT::seek(void*, unsigned long long)+0x21>
c0019b10:	b8 04 00 00 00       	mov    eax,0x4
c0019b15:	eb 2f                	jmp    c0019b46 <FAT::seek(void*, unsigned long long)+0x50>
c0019b17:	83 ec 04             	sub    esp,0x4
c0019b1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019b22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b26:	e8 21 bd fe ff       	call   c000584c <f_lseek>
c0019b2b:	83 c4 10             	add    esp,0x10
c0019b2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b36:	85 c0                	test   eax,eax
c0019b38:	75 07                	jne    c0019b41 <FAT::seek(void*, unsigned long long)+0x4b>
c0019b3a:	b8 00 00 00 00       	mov    eax,0x0
c0019b3f:	eb 05                	jmp    c0019b46 <FAT::seek(void*, unsigned long long)+0x50>
c0019b41:	b8 01 00 00 00       	mov    eax,0x1
c0019b46:	83 c4 2c             	add    esp,0x2c
c0019b49:	c3                   	ret    

c0019b4a <fatWrapperReadDisk>:
c0019b4a:	83 ec 1c             	sub    esp,0x1c
c0019b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b51:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b59:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b69:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c0019b70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b74:	83 ec 0c             	sub    esp,0xc
c0019b77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b7b:	52                   	push   edx
c0019b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b84:	50                   	push   eax
c0019b85:	e8 22 84 ff ff       	call   c0011fac <LogicalDisk::read(unsigned long long, int, void*)>
c0019b8a:	83 c4 20             	add    esp,0x20
c0019b8d:	83 c4 1c             	add    esp,0x1c
c0019b90:	c3                   	ret    

c0019b91 <fatWrapperWriteDisk>:
c0019b91:	83 ec 1c             	sub    esp,0x1c
c0019b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ba0:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ba3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ba7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bb0:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c0019bb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bbb:	83 ec 0c             	sub    esp,0xc
c0019bbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bc2:	52                   	push   edx
c0019bc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bcb:	50                   	push   eax
c0019bcc:	e8 47 84 ff ff       	call   c0012018 <LogicalDisk::write(unsigned long long, int, void*)>
c0019bd1:	83 c4 20             	add    esp,0x20
c0019bd4:	83 c4 1c             	add    esp,0x1c
c0019bd7:	c3                   	ret    

c0019bd8 <fatWrapperIoctl>:
c0019bd8:	53                   	push   ebx
c0019bd9:	83 ec 28             	sub    esp,0x28
c0019bdc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019be0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019be4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019be8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bec:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019bf1:	75 31                	jne    c0019c24 <fatWrapperIoctl+0x4c>
c0019bf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bfb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c00:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c0019c07:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c0d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c17:	66 89 02             	mov    WORD PTR [edx],ax
c0019c1a:	b8 00 00 00 00       	mov    eax,0x0
c0019c1f:	e9 b2 00 00 00       	jmp    c0019cd6 <fatWrapperIoctl+0xfe>
c0019c24:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019c29:	75 6a                	jne    c0019c95 <fatWrapperIoctl+0xbd>
c0019c2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c33:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c38:	8b 04 85 a0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc260]
c0019c3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c45:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c4b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c51:	89 c8                	mov    eax,ecx
c0019c53:	89 da                	mov    edx,ebx
c0019c55:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c59:	c1 e0 0a             	shl    eax,0xa
c0019c5c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c61:	8b 0c 8d a0 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc260]
c0019c68:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c6e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c74:	89 cb                	mov    ebx,ecx
c0019c76:	c1 fb 1f             	sar    ebx,0x1f
c0019c79:	53                   	push   ebx
c0019c7a:	51                   	push   ecx
c0019c7b:	52                   	push   edx
c0019c7c:	50                   	push   eax
c0019c7d:	e8 1a 4b 00 00       	call   c001e79c <__udivdi3>
c0019c82:	83 c4 10             	add    esp,0x10
c0019c85:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c89:	89 01                	mov    DWORD PTR [ecx],eax
c0019c8b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c8e:	b8 00 00 00 00       	mov    eax,0x0
c0019c93:	eb 41                	jmp    c0019cd6 <fatWrapperIoctl+0xfe>
c0019c95:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019c9a:	75 07                	jne    c0019ca3 <fatWrapperIoctl+0xcb>
c0019c9c:	b8 00 00 00 00       	mov    eax,0x0
c0019ca1:	eb 33                	jmp    c0019cd6 <fatWrapperIoctl+0xfe>
c0019ca3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019ca8:	75 19                	jne    c0019cc3 <fatWrapperIoctl+0xeb>
c0019caa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cb6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019cbc:	b8 00 00 00 00       	mov    eax,0x0
c0019cc1:	eb 13                	jmp    c0019cd6 <fatWrapperIoctl+0xfe>
c0019cc3:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019cc8:	75 07                	jne    c0019cd1 <fatWrapperIoctl+0xf9>
c0019cca:	b8 00 00 00 00       	mov    eax,0x0
c0019ccf:	eb 05                	jmp    c0019cd6 <fatWrapperIoctl+0xfe>
c0019cd1:	b8 04 00 00 00       	mov    eax,0x4
c0019cd6:	83 c4 28             	add    esp,0x28
c0019cd9:	5b                   	pop    ebx
c0019cda:	c3                   	ret    
c0019cdb:	90                   	nop

c0019cdc <FAT::FAT()>:
c0019cdc:	83 ec 1c             	sub    esp,0x1c
c0019cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ce3:	83 ec 0c             	sub    esp,0xc
c0019ce6:	50                   	push   eax
c0019ce7:	e8 42 56 ff ff       	call   c000f32e <Filesystem::Filesystem()>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	ba 18 23 02 c0       	mov    edx,0xc0022318
c0019cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cf8:	89 10                	mov    DWORD PTR [eax],edx
c0019cfa:	c7 05 20 4c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024c20,0x0
c0019d04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d0c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d11:	7f 15                	jg     c0019d28 <FAT::FAT()+0x4c>
c0019d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d17:	c7 04 85 40 4c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb3c0],0xffffffff
c0019d22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d26:	eb e4                	jmp    c0019d0c <FAT::FAT()+0x30>
c0019d28:	90                   	nop
c0019d29:	83 c4 1c             	add    esp,0x1c
c0019d2c:	c3                   	ret    
c0019d2d:	90                   	nop

c0019d2e <FAT::fixFilepath(char*)>:
c0019d2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d32:	8a 00                	mov    al,BYTE PTR [eax]
c0019d34:	3c 40                	cmp    al,0x40
c0019d36:	7e 2c                	jle    c0019d64 <FAT::fixFilepath(char*)+0x36>
c0019d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0019d3e:	83 e8 41             	sub    eax,0x41
c0019d41:	88 c2                	mov    dl,al
c0019d43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d47:	88 10                	mov    BYTE PTR [eax],dl
c0019d49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0019d4f:	0f be c0             	movsx  eax,al
c0019d52:	8b 04 85 40 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3c0]
c0019d59:	83 c0 30             	add    eax,0x30
c0019d5c:	88 c2                	mov    dl,al
c0019d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d62:	88 10                	mov    BYTE PTR [eax],dl
c0019d64:	90                   	nop
c0019d65:	c3                   	ret    

c0019d66 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d6c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d74:	74 0a                	je     c0019d80 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019d76:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d7e:	75 0a                	jne    c0019d8a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019d80:	b8 04 00 00 00       	mov    eax,0x4
c0019d85:	e9 fd 00 00 00       	jmp    c0019e87 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019d8a:	83 ec 08             	sub    esp,0x8
c0019d8d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d98:	50                   	push   eax
c0019d99:	e8 09 69 fe ff       	call   c00006a7 <strcpy>
c0019d9e:	83 c4 10             	add    esp,0x10
c0019da1:	83 ec 08             	sub    esp,0x8
c0019da4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019da8:	50                   	push   eax
c0019da9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019db0:	e8 79 ff ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c0019db5:	83 c4 10             	add    esp,0x10
c0019db8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc7:	83 e0 01             	and    eax,0x1
c0019dca:	74 08                	je     c0019dd4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019dcc:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019dd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ddb:	83 e0 04             	and    eax,0x4
c0019dde:	74 10                	je     c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019de0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019de8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019df0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019df7:	83 e0 02             	and    eax,0x2
c0019dfa:	74 08                	je     c0019e04 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019dfc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019e04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e0b:	83 e0 08             	and    eax,0x8
c0019e0e:	74 08                	je     c0019e18 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019e10:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019e18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e1f:	83 e0 10             	and    eax,0x10
c0019e22:	74 08                	je     c0019e2c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019e24:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019e2c:	83 ec 0c             	sub    esp,0xc
c0019e2f:	68 50 02 00 00       	push   0x250
c0019e34:	e8 13 1e ff ff       	call   c000bc4c <malloc>
c0019e39:	83 c4 10             	add    esp,0x10
c0019e3c:	89 c2                	mov    edx,eax
c0019e3e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e45:	89 10                	mov    DWORD PTR [eax],edx
c0019e47:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e4f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e58:	83 ec 04             	sub    esp,0x4
c0019e5b:	52                   	push   edx
c0019e5c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e60:	52                   	push   edx
c0019e61:	50                   	push   eax
c0019e62:	e8 64 ae fe ff       	call   c0004ccb <f_open>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e71:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e79:	74 07                	je     c0019e82 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019e7b:	b8 01 00 00 00       	mov    eax,0x1
c0019e80:	eb 05                	jmp    c0019e87 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019e82:	b8 00 00 00 00       	mov    eax,0x0
c0019e87:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e8d:	c3                   	ret    

c0019e8e <FAT::openDir(char const*, void**)>:
c0019e8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e9c:	74 0a                	je     c0019ea8 <FAT::openDir(char const*, void**)+0x1a>
c0019e9e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ea6:	75 07                	jne    c0019eaf <FAT::openDir(char const*, void**)+0x21>
c0019ea8:	b8 04 00 00 00       	mov    eax,0x4
c0019ead:	eb 7d                	jmp    c0019f2c <FAT::openDir(char const*, void**)+0x9e>
c0019eaf:	83 ec 08             	sub    esp,0x8
c0019eb2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019eb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ebd:	50                   	push   eax
c0019ebe:	e8 e4 67 fe ff       	call   c00006a7 <strcpy>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	83 ec 08             	sub    esp,0x8
c0019ec9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ecd:	50                   	push   eax
c0019ece:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ed5:	e8 54 fe ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c0019eda:	83 c4 10             	add    esp,0x10
c0019edd:	83 ec 0c             	sub    esp,0xc
c0019ee0:	6a 4c                	push   0x4c
c0019ee2:	e8 65 1d ff ff       	call   c000bc4c <malloc>
c0019ee7:	83 c4 10             	add    esp,0x10
c0019eea:	89 c2                	mov    edx,eax
c0019eec:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ef3:	89 10                	mov    DWORD PTR [eax],edx
c0019ef5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019efe:	83 ec 08             	sub    esp,0x8
c0019f01:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f05:	52                   	push   edx
c0019f06:	50                   	push   eax
c0019f07:	e8 f7 bd fe ff       	call   c0005d03 <f_opendir>
c0019f0c:	83 c4 10             	add    esp,0x10
c0019f0f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f16:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f1e:	74 07                	je     c0019f27 <FAT::openDir(char const*, void**)+0x99>
c0019f20:	b8 01 00 00 00       	mov    eax,0x1
c0019f25:	eb 05                	jmp    c0019f2c <FAT::openDir(char const*, void**)+0x9e>
c0019f27:	b8 00 00 00 00       	mov    eax,0x0
c0019f2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f32:	c3                   	ret    
c0019f33:	90                   	nop

c0019f34 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f34:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f3a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f42:	75 0a                	jne    c0019f4e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019f44:	b8 04 00 00 00       	mov    eax,0x4
c0019f49:	e9 c9 00 00 00       	jmp    c001a017 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f4e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f56:	75 0a                	jne    c0019f62 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019f58:	b8 04 00 00 00       	mov    eax,0x4
c0019f5d:	e9 b5 00 00 00       	jmp    c001a017 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f62:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f6a:	75 0a                	jne    c0019f76 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019f6c:	b8 04 00 00 00       	mov    eax,0x4
c0019f71:	e9 a1 00 00 00       	jmp    c001a017 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f76:	83 ec 08             	sub    esp,0x8
c0019f79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f80:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f87:	50                   	push   eax
c0019f88:	e8 1a 67 fe ff       	call   c00006a7 <strcpy>
c0019f8d:	83 c4 10             	add    esp,0x10
c0019f90:	83 ec 08             	sub    esp,0x8
c0019f93:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f9a:	50                   	push   eax
c0019f9b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fa2:	e8 87 fd ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	83 ec 08             	sub    esp,0x8
c0019fad:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fb1:	50                   	push   eax
c0019fb2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fb9:	50                   	push   eax
c0019fba:	e8 03 bf fe ff       	call   c0005ec2 <f_stat>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019fc9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019fd0:	85 c0                	test   eax,eax
c0019fd2:	74 07                	je     c0019fdb <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019fd4:	83 f8 04             	cmp    eax,0x4
c0019fd7:	74 32                	je     c001a00b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019fd9:	eb 37                	jmp    c001a012 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019fdb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fdf:	0f b6 c0             	movzx  eax,al
c0019fe2:	83 e0 10             	and    eax,0x10
c0019fe5:	0f 95 c2             	setne  dl
c0019fe8:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fef:	88 10                	mov    BYTE PTR [eax],dl
c0019ff1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019ff4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ff8:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fff:	89 01                	mov    DWORD PTR [ecx],eax
c001a001:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a004:	b8 00 00 00 00       	mov    eax,0x0
c001a009:	eb 0c                	jmp    c001a017 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a00b:	b8 02 00 00 00       	mov    eax,0x2
c001a010:	eb 05                	jmp    c001a017 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a012:	b8 01 00 00 00       	mov    eax,0x1
c001a017:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a01d:	c3                   	ret    

c001a01e <FAT::unlink(char const*)>:
c001a01e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a024:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a02c:	75 07                	jne    c001a035 <FAT::unlink(char const*)+0x17>
c001a02e:	b8 04 00 00 00       	mov    eax,0x4
c001a033:	eb 5c                	jmp    c001a091 <FAT::unlink(char const*)+0x73>
c001a035:	83 ec 08             	sub    esp,0x8
c001a038:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a03f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a043:	50                   	push   eax
c001a044:	e8 5e 66 fe ff       	call   c00006a7 <strcpy>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a053:	50                   	push   eax
c001a054:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a05b:	e8 ce fc ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	83 ec 0c             	sub    esp,0xc
c001a066:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a06a:	50                   	push   eax
c001a06b:	e8 a4 c1 fe ff       	call   c0006214 <f_unlink>
c001a070:	83 c4 10             	add    esp,0x10
c001a073:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a07a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a081:	85 c0                	test   eax,eax
c001a083:	75 07                	jne    c001a08c <FAT::unlink(char const*)+0x6e>
c001a085:	b8 00 00 00 00       	mov    eax,0x0
c001a08a:	eb 05                	jmp    c001a091 <FAT::unlink(char const*)+0x73>
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a097:	c3                   	ret    

c001a098 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a098:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a09e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a0a5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a0ac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a0b0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0b4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a0bc:	75 0a                	jne    c001a0c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a0be:	b8 04 00 00 00       	mov    eax,0x4
c001a0c3:	e9 1c 01 00 00       	jmp    c001a1e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a0c8:	83 ec 08             	sub    esp,0x8
c001a0cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0d6:	50                   	push   eax
c001a0d7:	e8 cb 65 fe ff       	call   c00006a7 <strcpy>
c001a0dc:	83 c4 10             	add    esp,0x10
c001a0df:	83 ec 08             	sub    esp,0x8
c001a0e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0e6:	50                   	push   eax
c001a0e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0ee:	e8 3b fc ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a0f3:	83 c4 10             	add    esp,0x10
c001a0f6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0fe:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a106:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a10b:	83 e0 01             	and    eax,0x1
c001a10e:	74 08                	je     c001a118 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a110:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a118:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a11d:	83 e0 02             	and    eax,0x2
c001a120:	74 08                	je     c001a12a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a122:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a12a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a12f:	83 e0 04             	and    eax,0x4
c001a132:	74 08                	je     c001a13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a134:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a13c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a141:	83 e0 08             	and    eax,0x8
c001a144:	74 08                	je     c001a14e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a146:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a14e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a153:	83 e0 01             	and    eax,0x1
c001a156:	74 08                	je     c001a160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a158:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a160:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a165:	83 e0 02             	and    eax,0x2
c001a168:	74 08                	je     c001a172 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a16a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a172:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a177:	83 e0 04             	and    eax,0x4
c001a17a:	74 08                	je     c001a184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a17c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a184:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a189:	83 e0 08             	and    eax,0x8
c001a18c:	74 08                	je     c001a196 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a18e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a196:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a19d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a1a4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1ac:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1b4:	83 ec 04             	sub    esp,0x4
c001a1b7:	52                   	push   edx
c001a1b8:	50                   	push   eax
c001a1b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1bd:	50                   	push   eax
c001a1be:	e8 f3 c6 fe ff       	call   c00068b6 <f_chmod>
c001a1c3:	83 c4 10             	add    esp,0x10
c001a1c6:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1cd:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1d4:	85 c0                	test   eax,eax
c001a1d6:	75 07                	jne    c001a1df <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a1d8:	b8 00 00 00 00       	mov    eax,0x0
c001a1dd:	eb 05                	jmp    c001a1e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a1df:	b8 01 00 00 00       	mov    eax,0x1
c001a1e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1ea:	c3                   	ret    
c001a1eb:	90                   	nop

c001a1ec <FAT::rename(char const*, char const*)>:
c001a1ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1f2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1fa:	74 0a                	je     c001a206 <FAT::rename(char const*, char const*)+0x1a>
c001a1fc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a204:	75 0a                	jne    c001a210 <FAT::rename(char const*, char const*)+0x24>
c001a206:	b8 04 00 00 00       	mov    eax,0x4
c001a20b:	e9 98 00 00 00       	jmp    c001a2a8 <FAT::rename(char const*, char const*)+0xbc>
c001a210:	83 ec 08             	sub    esp,0x8
c001a213:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a21a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a221:	50                   	push   eax
c001a222:	e8 80 64 fe ff       	call   c00006a7 <strcpy>
c001a227:	83 c4 10             	add    esp,0x10
c001a22a:	83 ec 08             	sub    esp,0x8
c001a22d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a234:	50                   	push   eax
c001a235:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a23c:	e8 ed fa ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	83 ec 08             	sub    esp,0x8
c001a247:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a24e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a252:	50                   	push   eax
c001a253:	e8 4f 64 fe ff       	call   c00006a7 <strcpy>
c001a258:	83 c4 10             	add    esp,0x10
c001a25b:	83 ec 08             	sub    esp,0x8
c001a25e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a262:	50                   	push   eax
c001a263:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a26a:	e8 bf fa ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a26f:	83 c4 10             	add    esp,0x10
c001a272:	83 ec 08             	sub    esp,0x8
c001a275:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a279:	50                   	push   eax
c001a27a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a281:	50                   	push   eax
c001a282:	e8 3c c3 fe ff       	call   c00065c3 <f_rename>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a291:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a298:	85 c0                	test   eax,eax
c001a29a:	75 07                	jne    c001a2a3 <FAT::rename(char const*, char const*)+0xb7>
c001a29c:	b8 00 00 00 00       	mov    eax,0x0
c001a2a1:	eb 05                	jmp    c001a2a8 <FAT::rename(char const*, char const*)+0xbc>
c001a2a3:	b8 01 00 00 00       	mov    eax,0x1
c001a2a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2ae:	c3                   	ret    
c001a2af:	90                   	nop

c001a2b0 <FAT::mkdir(char const*)>:
c001a2b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2be:	75 07                	jne    c001a2c7 <FAT::mkdir(char const*)+0x17>
c001a2c0:	b8 04 00 00 00       	mov    eax,0x4
c001a2c5:	eb 5c                	jmp    c001a323 <FAT::mkdir(char const*)+0x73>
c001a2c7:	83 ec 08             	sub    esp,0x8
c001a2ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2d5:	50                   	push   eax
c001a2d6:	e8 cc 63 fe ff       	call   c00006a7 <strcpy>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	83 ec 08             	sub    esp,0x8
c001a2e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e5:	50                   	push   eax
c001a2e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2ed:	e8 3c fa ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a2f2:	83 c4 10             	add    esp,0x10
c001a2f5:	83 ec 0c             	sub    esp,0xc
c001a2f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2fc:	50                   	push   eax
c001a2fd:	e8 95 c0 fe ff       	call   c0006397 <f_mkdir>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a30c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a313:	85 c0                	test   eax,eax
c001a315:	75 07                	jne    c001a31e <FAT::mkdir(char const*)+0x6e>
c001a317:	b8 00 00 00 00       	mov    eax,0x0
c001a31c:	eb 05                	jmp    c001a323 <FAT::mkdir(char const*)+0x73>
c001a31e:	b8 01 00 00 00       	mov    eax,0x1
c001a323:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a329:	c3                   	ret    

c001a32a <FAT::exists(char const*)>:
c001a32a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a330:	83 ec 08             	sub    esp,0x8
c001a333:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a33a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a33e:	50                   	push   eax
c001a33f:	e8 63 63 fe ff       	call   c00006a7 <strcpy>
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	83 ec 08             	sub    esp,0x8
c001a34a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a34e:	50                   	push   eax
c001a34f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a356:	e8 d3 f9 ff ff       	call   c0019d2e <FAT::fixFilepath(char*)>
c001a35b:	83 c4 10             	add    esp,0x10
c001a35e:	83 ec 08             	sub    esp,0x8
c001a361:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a368:	50                   	push   eax
c001a369:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a36d:	50                   	push   eax
c001a36e:	e8 4f bb fe ff       	call   c0005ec2 <f_stat>
c001a373:	83 c4 10             	add    esp,0x10
c001a376:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a37d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a384:	85 c0                	test   eax,eax
c001a386:	75 04                	jne    c001a38c <FAT::exists(char const*)+0x62>
c001a388:	b0 01                	mov    al,0x1
c001a38a:	eb 02                	jmp    c001a38e <FAT::exists(char const*)+0x64>
c001a38c:	b0 00                	mov    al,0x0
c001a38e:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a394:	c3                   	ret    
c001a395:	90                   	nop

c001a396 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a396:	b8 08 00 00 00       	mov    eax,0x8
c001a39b:	c3                   	ret    

c001a39c <ISO9660::seek(void*, unsigned long long)>:
c001a39c:	53                   	push   ebx
c001a39d:	b8 04 00 00 00       	mov    eax,0x4
c001a3a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3ae:	85 d2                	test   edx,edx
c001a3b0:	74 17                	je     c001a3c9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a3b2:	89 c8                	mov    eax,ecx
c001a3b4:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a3b7:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a3ba:	b8 01 00 00 00       	mov    eax,0x1
c001a3bf:	73 08                	jae    c001a3c9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a3c1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a3c4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a3c7:	31 c0                	xor    eax,eax
c001a3c9:	5b                   	pop    ebx
c001a3ca:	c3                   	ret    
c001a3cb:	90                   	nop

c001a3cc <ISO9660::tell(void*, unsigned long long*)>:
c001a3cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3d4:	85 d2                	test   edx,edx
c001a3d6:	74 12                	je     c001a3ea <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3d8:	85 c0                	test   eax,eax
c001a3da:	74 0e                	je     c001a3ea <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a3dc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a3df:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a3e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3e5:	89 10                	mov    DWORD PTR [eax],edx
c001a3e7:	31 c0                	xor    eax,eax
c001a3e9:	c3                   	ret    
c001a3ea:	b8 04 00 00 00       	mov    eax,0x4
c001a3ef:	c3                   	ret    

c001a3f0 <ISO9660::getName()>:
c001a3f0:	b8 74 23 02 c0       	mov    eax,0xc0022374
c001a3f5:	c3                   	ret    

c001a3f6 <ISO9660::stat(void*, unsigned long long*)>:
c001a3f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3fe:	85 d2                	test   edx,edx
c001a400:	74 12                	je     c001a414 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a402:	85 c0                	test   eax,eax
c001a404:	74 0e                	je     c001a414 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a406:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a409:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a40c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a40f:	89 10                	mov    DWORD PTR [eax],edx
c001a411:	31 c0                	xor    eax,eax
c001a413:	c3                   	ret    
c001a414:	b8 04 00 00 00       	mov    eax,0x4
c001a419:	c3                   	ret    

c001a41a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a41a:	b8 01 00 00 00       	mov    eax,0x1
c001a41f:	c3                   	ret    

c001a420 <ISO9660::unlink(char const*)>:
c001a420:	b8 01 00 00 00       	mov    eax,0x1
c001a425:	c3                   	ret    

c001a426 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a426:	b8 01 00 00 00       	mov    eax,0x1
c001a42b:	c3                   	ret    

c001a42c <ISO9660::rename(char const*, char const*)>:
c001a42c:	b8 01 00 00 00       	mov    eax,0x1
c001a431:	c3                   	ret    

c001a432 <ISO9660::mkdir(char const*)>:
c001a432:	b8 01 00 00 00       	mov    eax,0x1
c001a437:	c3                   	ret    

c001a438 <ISO9660::close(void*)>:
c001a438:	83 ec 0c             	sub    esp,0xc
c001a43b:	b8 04 00 00 00       	mov    eax,0x4
c001a440:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a444:	85 d2                	test   edx,edx
c001a446:	74 0e                	je     c001a456 <ISO9660::close(void*)+0x1e>
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	52                   	push   edx
c001a44c:	e8 0b 18 ff ff       	call   c000bc5c <free>
c001a451:	83 c4 10             	add    esp,0x10
c001a454:	31 c0                	xor    eax,eax
c001a456:	83 c4 0c             	add    esp,0xc
c001a459:	c3                   	ret    

c001a45a <ISO9660::closeDir(void*)>:
c001a45a:	83 ec 0c             	sub    esp,0xc
c001a45d:	b8 04 00 00 00       	mov    eax,0x4
c001a462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a466:	85 d2                	test   edx,edx
c001a468:	74 0e                	je     c001a478 <ISO9660::closeDir(void*)+0x1e>
c001a46a:	83 ec 0c             	sub    esp,0xc
c001a46d:	52                   	push   edx
c001a46e:	e8 e9 17 ff ff       	call   c000bc5c <free>
c001a473:	83 c4 10             	add    esp,0x10
c001a476:	31 c0                	xor    eax,eax
c001a478:	83 c4 0c             	add    esp,0xc
c001a47b:	c3                   	ret    

c001a47c <ISO9660::~ISO9660()>:
c001a47c:	83 ec 0c             	sub    esp,0xc
c001a47f:	ba c8 23 02 c0       	mov    edx,0xc00223c8
c001a484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a488:	89 10                	mov    DWORD PTR [eax],edx
c001a48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48e:	83 ec 0c             	sub    esp,0xc
c001a491:	50                   	push   eax
c001a492:	e8 bb 4e ff ff       	call   c000f352 <Filesystem::~Filesystem()>
c001a497:	83 c4 10             	add    esp,0x10
c001a49a:	90                   	nop
c001a49b:	83 c4 0c             	add    esp,0xc
c001a49e:	c3                   	ret    
c001a49f:	90                   	nop

c001a4a0 <ISO9660::~ISO9660()>:
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	83 ec 0c             	sub    esp,0xc
c001a4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4aa:	e8 cd ff ff ff       	call   c001a47c <ISO9660::~ISO9660()>
c001a4af:	83 c4 10             	add    esp,0x10
c001a4b2:	83 ec 08             	sub    esp,0x8
c001a4b5:	6a 08                	push   0x8
c001a4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4bb:	e8 89 4a ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001a4c0:	83 c4 10             	add    esp,0x10
c001a4c3:	83 c4 0c             	add    esp,0xc
c001a4c6:	c3                   	ret    

c001a4c7 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a4c7:	55                   	push   ebp
c001a4c8:	31 c9                	xor    ecx,ecx
c001a4ca:	57                   	push   edi
c001a4cb:	56                   	push   esi
c001a4cc:	53                   	push   ebx
c001a4cd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a4d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4d5:	89 eb                	mov    ebx,ebp
c001a4d7:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a4db:	39 ce                	cmp    esi,ecx
c001a4dd:	7e 17                	jle    c001a4f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a4df:	31 d2                	xor    edx,edx
c001a4e1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a4e5:	7d 13                	jge    c001a4fa <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a4e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4eb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a4ee:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a4f1:	75 0d                	jne    c001a500 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a4f3:	42                   	inc    edx
c001a4f4:	eb eb                	jmp    c001a4e1 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a4f6:	31 c0                	xor    eax,eax
c001a4f8:	eb 0a                	jmp    c001a504 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4fa:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a4fe:	eb 04                	jmp    c001a504 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a500:	41                   	inc    ecx
c001a501:	43                   	inc    ebx
c001a502:	eb d7                	jmp    c001a4db <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a504:	5b                   	pop    ebx
c001a505:	5e                   	pop    esi
c001a506:	5f                   	pop    edi
c001a507:	5d                   	pop    ebp
c001a508:	c3                   	ret    

c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a509:	56                   	push   esi
c001a50a:	53                   	push   ebx
c001a50b:	52                   	push   edx
c001a50c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a510:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a518:	39 0d 20 4d 02 c0    	cmp    DWORD PTR ds:0xc0024d20,ecx
c001a51e:	75 08                	jne    c001a528 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a520:	38 05 c8 31 02 c0    	cmp    BYTE PTR ds:0xc00231c8,al
c001a526:	74 2b                	je     c001a553 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	a2 c8 31 02 c0       	mov    ds:0xc00231c8,al
c001a530:	68 40 4d 02 c0       	push   0xc0024d40
c001a535:	0f be c0             	movsx  eax,al
c001a538:	6a 01                	push   0x1
c001a53a:	89 0d 20 4d 02 c0    	mov    DWORD PTR ds:0xc0024d20,ecx
c001a540:	31 db                	xor    ebx,ebx
c001a542:	53                   	push   ebx
c001a543:	51                   	push   ecx
c001a544:	ff 34 85 9c 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc364]
c001a54b:	e8 5c 7a ff ff       	call   c0011fac <LogicalDisk::read(unsigned long long, int, void*)>
c001a550:	83 c4 20             	add    esp,0x20
c001a553:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a55b:	c7 44 24 14 40 4d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024d40
c001a563:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a567:	58                   	pop    eax
c001a568:	5b                   	pop    ebx
c001a569:	5e                   	pop    esi
c001a56a:	e9 63 60 fe ff       	jmp    c00005d2 <memcpy>
c001a56f:	90                   	nop

c001a570 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a570:	81 ec 10 08 00 00    	sub    esp,0x810
c001a576:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a57d:	83 c0 41             	add    eax,0x41
c001a580:	0f be c0             	movsx  eax,al
c001a583:	50                   	push   eax
c001a584:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a588:	50                   	push   eax
c001a589:	6a 10                	push   0x10
c001a58b:	e8 79 ff ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a590:	83 c4 10             	add    esp,0x10
c001a593:	31 c0                	xor    eax,eax
c001a595:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a59a:	75 1d                	jne    c001a5b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a59c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a5a1:	75 16                	jne    c001a5b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5a3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a5a8:	75 0f                	jne    c001a5b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5aa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a5af:	75 08                	jne    c001a5b9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a5b1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a5b6:	0f 94 c0             	sete   al
c001a5b9:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a5bf:	c3                   	ret    

c001a5c0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5c0:	55                   	push   ebp
c001a5c1:	57                   	push   edi
c001a5c2:	56                   	push   esi
c001a5c3:	53                   	push   ebx
c001a5c4:	81 ec 34 08 00 00    	sub    esp,0x834
c001a5ca:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a5d1:	55                   	push   ebp
c001a5d2:	68 8f 23 02 c0       	push   0xc002238f
c001a5d7:	e8 4d 4a ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a5e7:	0f 84 06 02 00 00    	je     c001a7f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5ed:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a5f5:	0f 84 f8 01 00 00    	je     c001a7f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5fb:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a602:	b8 01 00 00 00       	mov    eax,0x1
c001a607:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a60b:	0f 85 e7 01 00 00    	jne    c001a7f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a611:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a614:	31 d2                	xor    edx,edx
c001a616:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a619:	89 e9                	mov    ecx,ebp
c001a61b:	89 d3                	mov    ebx,edx
c001a61d:	01 f1                	add    ecx,esi
c001a61f:	11 fb                	adc    ebx,edi
c001a621:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a625:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a629:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a630:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a633:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a636:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a63a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a63e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a642:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a646:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a64a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a64e:	72 19                	jb     c001a669 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a650:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a658:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a65c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a65f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a663:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a667:	eb 13                	jmp    c001a67c <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a669:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a66d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a671:	29 f0                	sub    eax,esi
c001a673:	19 fa                	sbb    edx,edi
c001a675:	89 04 24             	mov    DWORD PTR [esp],eax
c001a678:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a67c:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a683:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a686:	8b 00                	mov    eax,DWORD PTR [eax]
c001a688:	53                   	push   ebx
c001a689:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a68d:	c1 e0 0b             	shl    eax,0xb
c001a690:	01 c6                	add    esi,eax
c001a692:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a699:	11 d7                	adc    edi,edx
c001a69b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a69f:	89 fa                	mov    edx,edi
c001a6a1:	50                   	push   eax
c001a6a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a6a6:	50                   	push   eax
c001a6a7:	89 f0                	mov    eax,esi
c001a6a9:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a6ad:	50                   	push   eax
c001a6ae:	e8 56 fe ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6b3:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a6ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a6c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a6c5:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a6cb:	83 c4 10             	add    esp,0x10
c001a6ce:	b8 00 08 00 00       	mov    eax,0x800
c001a6d3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a6d7:	29 d0                	sub    eax,edx
c001a6d9:	39 c1                	cmp    ecx,eax
c001a6db:	83 db 00             	sbb    ebx,0x0
c001a6de:	7d 19                	jge    c001a6f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a6e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a6e5:	75 16                	jne    c001a6fd <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a6e7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6f4:	e9 f6 00 00 00       	jmp    c001a7ef <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a6f9:	89 c5                	mov    ebp,eax
c001a6fb:	eb 03                	jmp    c001a700 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a6fd:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a700:	51                   	push   ecx
c001a701:	55                   	push   ebp
c001a702:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a706:	50                   	push   eax
c001a707:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a70e:	e8 bf 5e fe ff       	call   c00005d2 <memcpy>
c001a713:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a717:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a71b:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a722:	01 e8                	add    eax,ebp
c001a724:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a728:	89 e8                	mov    eax,ebp
c001a72a:	99                   	cdq    
c001a72b:	01 ee                	add    esi,ebp
c001a72d:	11 d7                	adc    edi,edx
c001a72f:	29 e9                	sub    ecx,ebp
c001a731:	19 d3                	sbb    ebx,edx
c001a733:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a737:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a73b:	83 c4 10             	add    esp,0x10
c001a73e:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a743:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a746:	b8 00 00 00 00       	mov    eax,0x0
c001a74b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a74f:	7d 3f                	jge    c001a790 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a751:	52                   	push   edx
c001a752:	89 fa                	mov    edx,edi
c001a754:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a75b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a75f:	50                   	push   eax
c001a760:	89 f0                	mov    eax,esi
c001a762:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a766:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a76a:	50                   	push   eax
c001a76b:	e8 99 fd ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a770:	81 c6 00 08 00 00    	add    esi,0x800
c001a776:	83 d7 00             	adc    edi,0x0
c001a779:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a781:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a789:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a78e:	eb ab                	jmp    c001a73b <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a794:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a797:	74 34                	je     c001a7cd <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a799:	89 fa                	mov    edx,edi
c001a79b:	50                   	push   eax
c001a79c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a7a3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a7a7:	50                   	push   eax
c001a7a8:	89 f0                	mov    eax,esi
c001a7aa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a7ae:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a7b2:	55                   	push   ebp
c001a7b3:	50                   	push   eax
c001a7b4:	e8 50 fd ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a7b9:	83 c4 0c             	add    esp,0xc
c001a7bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a7c0:	55                   	push   ebp
c001a7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7c5:	e8 08 5e fe ff       	call   c00005d2 <memcpy>
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a7d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a7d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7dc:	89 38                	mov    DWORD PTR [eax],edi
c001a7de:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a7e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7e9:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a7ec:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a7ef:	31 c0                	xor    eax,eax
c001a7f1:	eb 05                	jmp    c001a7f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a7f3:	b8 04 00 00 00       	mov    eax,0x4
c001a7f8:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a7fe:	5b                   	pop    ebx
c001a7ff:	5e                   	pop    esi
c001a800:	5f                   	pop    edi
c001a801:	5d                   	pop    ebp
c001a802:	c3                   	ret    
c001a803:	90                   	nop

c001a804 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a804:	55                   	push   ebp
c001a805:	57                   	push   edi
c001a806:	56                   	push   esi
c001a807:	53                   	push   ebx
c001a808:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a80e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a815:	85 f6                	test   esi,esi
c001a817:	0f 84 64 02 00 00    	je     c001aa81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a81d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a825:	0f 84 56 02 00 00    	je     c001aa81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a82b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a82e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a831:	75 0a                	jne    c001a83d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a833:	b8 07 00 00 00       	mov    eax,0x7
c001a838:	e9 49 02 00 00       	jmp    c001aa86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a83d:	50                   	push   eax
c001a83e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a842:	50                   	push   eax
c001a843:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a84a:	53                   	push   ebx
c001a84b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a84d:	c1 e0 0b             	shl    eax,0xb
c001a850:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a853:	c1 e8 0b             	shr    eax,0xb
c001a856:	50                   	push   eax
c001a857:	e8 ad fc ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a85c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	89 c1                	mov    ecx,eax
c001a864:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a867:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a86d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a870:	84 db                	test   bl,bl
c001a872:	0f 85 90 00 00 00    	jne    c001a908 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a878:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a87e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a884:	29 c7                	sub    edi,eax
c001a886:	89 fb                	mov    ebx,edi
c001a888:	c1 fb 1f             	sar    ebx,0x1f
c001a88b:	01 f8                	add    eax,edi
c001a88d:	11 da                	adc    edx,ebx
c001a88f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a893:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a897:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a89a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a89d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a8a0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a8a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8aa:	89 d8                	mov    eax,ebx
c001a8ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a8af:	ba 00 00 00 00       	mov    edx,0x0
c001a8b4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a8b8:	b8 00 00 00 00       	mov    eax,0x0
c001a8bd:	73 0b                	jae    c001a8ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a8bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a8c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8c6:	29 f8                	sub    eax,edi
c001a8c8:	19 da                	sbb    edx,ebx
c001a8ca:	89 d3                	mov    ebx,edx
c001a8cc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a8cf:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a8d2:	09 c3                	or     ebx,eax
c001a8d4:	0f 84 59 ff ff ff    	je     c001a833 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a8da:	55                   	push   ebp
c001a8db:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a8df:	50                   	push   eax
c001a8e0:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a8e7:	53                   	push   ebx
c001a8e8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8ea:	c1 e0 0b             	shl    eax,0xb
c001a8ed:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a8f1:	c1 e8 0b             	shr    eax,0xb
c001a8f4:	50                   	push   eax
c001a8f5:	e8 0f fc ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	25 ff 07 00 00       	and    eax,0x7ff
c001a905:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a908:	57                   	push   edi
c001a909:	6a 28                	push   0x28
c001a90b:	6a 00                	push   0x0
c001a90d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a911:	50                   	push   eax
c001a912:	e8 f1 5c fe ff       	call   c0000608 <memset>
c001a917:	31 d2                	xor    edx,edx
c001a919:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a91c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a922:	89 f8                	mov    eax,edi
c001a924:	83 c0 21             	add    eax,0x21
c001a927:	83 d2 00             	adc    edx,0x0
c001a92a:	89 c7                	mov    edi,eax
c001a92c:	89 d5                	mov    ebp,edx
c001a92e:	83 c4 10             	add    esp,0x10
c001a931:	31 c9                	xor    ecx,ecx
c001a933:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a93a:	83 f9 28             	cmp    ecx,0x28
c001a93d:	88 04 24             	mov    BYTE PTR [esp],al
c001a940:	0f 94 c2             	sete   dl
c001a943:	88 d0                	mov    al,dl
c001a945:	ba ff 07 00 00       	mov    edx,0x7ff
c001a94a:	39 fa                	cmp    edx,edi
c001a94c:	ba 00 00 00 00       	mov    edx,0x0
c001a951:	19 ea                	sbb    edx,ebp
c001a953:	0f 92 c2             	setb   dl
c001a956:	09 c2                	or     edx,eax
c001a958:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a95c:	0f 94 c0             	sete   al
c001a95f:	08 d0                	or     al,dl
c001a961:	75 16                	jne    c001a979 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a963:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a967:	74 10                	je     c001a979 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a969:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a96c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a970:	41                   	inc    ecx
c001a971:	83 c7 01             	add    edi,0x1
c001a974:	83 d5 00             	adc    ebp,0x0
c001a977:	eb ba                	jmp    c001a933 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a979:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a987:	57                   	push   edi
c001a988:	e8 98 5c fe ff       	call   c0000625 <strlen>
c001a98d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a995:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a999:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a9a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a9a3:	5a                   	pop    edx
c001a9a4:	25 ff 07 00 00       	and    eax,0x7ff
c001a9a9:	01 c8                	add    eax,ecx
c001a9ab:	59                   	pop    ecx
c001a9ac:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a9b2:	83 e0 02             	and    eax,0x2
c001a9b5:	3c 01                	cmp    al,0x1
c001a9b7:	19 c0                	sbb    eax,eax
c001a9b9:	83 c0 02             	add    eax,0x2
c001a9bc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9c0:	57                   	push   edi
c001a9c1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a9c5:	50                   	push   eax
c001a9c6:	e8 dc 5c fe ff       	call   c00006a7 <strcpy>
c001a9cb:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	84 c0                	test   al,al
c001a9d4:	75 21                	jne    c001a9f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a9d6:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a9de:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9e6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9ee:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a9f5:	eb 28                	jmp    c001aa1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9f7:	fe c8                	dec    al
c001a9f9:	75 24                	jne    c001aa1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9fb:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001aa03:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aa0b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001aa13:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001aa1a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001aa1f:	0f b6 fb             	movzx  edi,bl
c001aa22:	31 db                	xor    ebx,ebx
c001aa24:	50                   	push   eax
c001aa25:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001aa2c:	8d 44 24 48          	lea    eax,[esp+0x48]
c001aa30:	50                   	push   eax
c001aa31:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001aa38:	e8 95 5b fe ff       	call   c00005d2 <memcpy>
c001aa3d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001aa44:	89 f9                	mov    ecx,edi
c001aa46:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001aa4c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001aa4f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001aa52:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001aa55:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001aa58:	83 c4 10             	add    esp,0x10
c001aa5b:	39 c7                	cmp    edi,eax
c001aa5d:	89 df                	mov    edi,ebx
c001aa5f:	19 d7                	sbb    edi,edx
c001aa61:	72 10                	jb     c001aa73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001aa63:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001aa6a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001aa71:	eb 0a                	jmp    c001aa7d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001aa73:	29 c8                	sub    eax,ecx
c001aa75:	19 da                	sbb    edx,ebx
c001aa77:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001aa7a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001aa7d:	31 c0                	xor    eax,eax
c001aa7f:	eb 05                	jmp    c001aa86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001aa81:	b8 04 00 00 00       	mov    eax,0x4
c001aa86:	81 c4 5c 09 00 00    	add    esp,0x95c
c001aa8c:	5b                   	pop    ebx
c001aa8d:	5e                   	pop    esi
c001aa8e:	5f                   	pop    edi
c001aa8f:	5d                   	pop    ebp
c001aa90:	c3                   	ret    

c001aa91 <readRoot(unsigned int*, unsigned int*, char)>:
c001aa91:	81 ec 40 08 00 00    	sub    esp,0x840
c001aa97:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001aa9f:	50                   	push   eax
c001aaa0:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aaa4:	50                   	push   eax
c001aaa5:	6a 10                	push   0x10
c001aaa7:	e8 5d fa ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aaac:	83 c4 0c             	add    esp,0xc
c001aaaf:	6a 22                	push   0x22
c001aab1:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aab8:	50                   	push   eax
c001aab9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aabd:	50                   	push   eax
c001aabe:	e8 0f 5b fe ff       	call   c00005d2 <memcpy>
c001aac3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aaca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aace:	89 10                	mov    DWORD PTR [eax],edx
c001aad0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aad7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aadb:	89 10                	mov    DWORD PTR [eax],edx
c001aadd:	b0 01                	mov    al,0x1
c001aadf:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aae5:	c3                   	ret    

c001aae6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aae6:	55                   	push   ebp
c001aae7:	57                   	push   edi
c001aae8:	56                   	push   esi
c001aae9:	53                   	push   ebx
c001aaea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aaf0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aaf7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001aafe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab02:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ab06:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ab0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab0e:	75 03                	jne    c001ab13 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ab10:	83 c3 02             	add    ebx,0x2
c001ab13:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001ab16:	75 03                	jne    c001ab1b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001ab18:	43                   	inc    ebx
c001ab19:	eb f8                	jmp    c001ab13 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ab1b:	51                   	push   ecx
c001ab1c:	68 00 01 00 00       	push   0x100
c001ab21:	6a 00                	push   0x0
c001ab23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab27:	50                   	push   eax
c001ab28:	e8 db 5a fe ff       	call   c0000608 <memset>
c001ab2d:	83 c4 10             	add    esp,0x10
c001ab30:	31 d2                	xor    edx,edx
c001ab32:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ab35:	84 c0                	test   al,al
c001ab37:	74 21                	je     c001ab5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ab39:	3c 2f                	cmp    al,0x2f
c001ab3b:	75 0b                	jne    c001ab48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ab3d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ab41:	bd 01 00 00 00       	mov    ebp,0x1
c001ab46:	eb 14                	jmp    c001ab5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ab48:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ab4b:	80 f9 19             	cmp    cl,0x19
c001ab4e:	77 03                	ja     c001ab53 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ab50:	83 e8 20             	sub    eax,0x20
c001ab53:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ab57:	42                   	inc    edx
c001ab58:	eb d8                	jmp    c001ab32 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ab5a:	31 ed                	xor    ebp,ebp
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ab66:	e8 e1 10 ff ff       	call   c000bc4c <malloc>
c001ab6b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab72:	89 c6                	mov    esi,eax
c001ab74:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001ab7a:	c1 ef 0b             	shr    edi,0xb
c001ab7d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ab84:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ab90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab94:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001ab9b:	74 28                	je     c001abc5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001ab9d:	52                   	push   edx
c001ab9e:	57                   	push   edi
c001ab9f:	50                   	push   eax
c001aba0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aba4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abab:	e8 59 f9 ff ff       	call   c001a509 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abb4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001abbb:	05 00 08 00 00       	add    eax,0x800
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	eb cb                	jmp    c001ab90 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001abc5:	83 ec 0c             	sub    esp,0xc
c001abc8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abcc:	57                   	push   edi
c001abcd:	e8 53 5a fe ff       	call   c0000625 <strlen>
c001abd2:	50                   	push   eax
c001abd3:	57                   	push   edi
c001abd4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001abdb:	56                   	push   esi
c001abdc:	e8 e6 f8 ff ff       	call   c001a4c7 <__memmem(unsigned char*, int, unsigned char*, int)>
c001abe1:	83 c4 20             	add    esp,0x20
c001abe4:	85 c0                	test   eax,eax
c001abe6:	75 13                	jne    c001abfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	56                   	push   esi
c001abec:	e8 6b 10 ff ff       	call   c000bc5c <free>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	31 c0                	xor    eax,eax
c001abf6:	e9 b3 00 00 00       	jmp    c001acae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001abfb:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001abff:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ac03:	c1 e7 08             	shl    edi,0x8
c001ac06:	c1 e2 10             	shl    edx,0x10
c001ac09:	09 d7                	or     edi,edx
c001ac0b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ac0f:	09 d7                	or     edi,edx
c001ac11:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ac15:	c1 e2 18             	shl    edx,0x18
c001ac18:	09 d7                	or     edi,edx
c001ac1a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ac1e:	89 d1                	mov    ecx,edx
c001ac20:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ac24:	c1 e1 08             	shl    ecx,0x8
c001ac27:	c1 e2 10             	shl    edx,0x10
c001ac2a:	09 ca                	or     edx,ecx
c001ac2c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ac30:	09 ca                	or     edx,ecx
c001ac32:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ac36:	c1 e1 18             	shl    ecx,0x18
c001ac39:	09 ca                	or     edx,ecx
c001ac3b:	89 e9                	mov    ecx,ebp
c001ac3d:	84 c9                	test   cl,cl
c001ac3f:	74 3c                	je     c001ac7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001ac41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ac45:	83 ec 0c             	sub    esp,0xc
c001ac48:	56                   	push   esi
c001ac49:	e8 0e 10 ff ff       	call   c000bc5c <free>
c001ac4e:	83 c4 0c             	add    esp,0xc
c001ac51:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac58:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac5d:	50                   	push   eax
c001ac5e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac65:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac70:	52                   	push   edx
c001ac71:	57                   	push   edi
c001ac72:	53                   	push   ebx
c001ac73:	e8 6e fe ff ff       	call   c001aae6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac78:	83 c4 20             	add    esp,0x20
c001ac7b:	eb 31                	jmp    c001acae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac7d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ac80:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ac87:	d0 e8                	shr    al,1
c001ac89:	89 3b                	mov    DWORD PTR [ebx],edi
c001ac8b:	83 e0 01             	and    eax,0x1
c001ac8e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac95:	83 ec 0c             	sub    esp,0xc
c001ac98:	89 13                	mov    DWORD PTR [ebx],edx
c001ac9a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001aca1:	89 03                	mov    DWORD PTR [ebx],eax
c001aca3:	56                   	push   esi
c001aca4:	e8 b3 0f ff ff       	call   c000bc5c <free>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	b0 01                	mov    al,0x1
c001acae:	81 c4 1c 01 00 00    	add    esp,0x11c
c001acb4:	5b                   	pop    ebx
c001acb5:	5e                   	pop    esi
c001acb6:	5f                   	pop    edi
c001acb7:	5d                   	pop    ebp
c001acb8:	c3                   	ret    

c001acb9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001acb9:	55                   	push   ebp
c001acba:	57                   	push   edi
c001acbb:	56                   	push   esi
c001acbc:	53                   	push   ebx
c001acbd:	83 ec 20             	sub    esp,0x20
c001acc0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acc4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001acc8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001accc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acd4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001acdc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ace1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001ace7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001aced:	57                   	push   edi
c001acee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acf2:	50                   	push   eax
c001acf3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acf7:	50                   	push   eax
c001acf8:	e8 94 fd ff ff       	call   c001aa91 <readRoot(unsigned int*, unsigned int*, char)>
c001acfd:	5a                   	pop    edx
c001acfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad02:	e8 1e 59 fe ff       	call   c0000625 <strlen>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	83 f8 03             	cmp    eax,0x3
c001ad0d:	77 17                	ja     c001ad26 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ad0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad13:	89 03                	mov    DWORD PTR [ebx],eax
c001ad15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad19:	89 06                	mov    DWORD PTR [esi],eax
c001ad1b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001ad22:	b0 01                	mov    al,0x1
c001ad24:	eb 19                	jmp    c001ad3f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ad26:	50                   	push   eax
c001ad27:	55                   	push   ebp
c001ad28:	57                   	push   edi
c001ad29:	56                   	push   esi
c001ad2a:	53                   	push   ebx
c001ad2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad2f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad37:	e8 aa fd ff ff       	call   c001aae6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ad3c:	83 c4 20             	add    esp,0x20
c001ad3f:	83 c4 1c             	add    esp,0x1c
c001ad42:	5b                   	pop    ebx
c001ad43:	5e                   	pop    esi
c001ad44:	5f                   	pop    edi
c001ad45:	5d                   	pop    ebp
c001ad46:	c3                   	ret    
c001ad47:	90                   	nop

c001ad48 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ad48:	57                   	push   edi
c001ad49:	56                   	push   esi
c001ad4a:	53                   	push   ebx
c001ad4b:	83 ec 10             	sub    esp,0x10
c001ad4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ad52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad56:	85 ff                	test   edi,edi
c001ad58:	74 7b                	je     c001add5 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad5a:	85 f6                	test   esi,esi
c001ad5c:	74 77                	je     c001add5 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad5e:	83 ec 0c             	sub    esp,0xc
c001ad61:	6a 1c                	push   0x1c
c001ad63:	e8 e4 0e ff ff       	call   c000bc4c <malloc>
c001ad68:	89 07                	mov    DWORD PTR [edi],eax
c001ad6a:	89 c3                	mov    ebx,eax
c001ad6c:	58                   	pop    eax
c001ad6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad71:	50                   	push   eax
c001ad72:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ad75:	50                   	push   eax
c001ad76:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad7a:	50                   	push   eax
c001ad7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad7f:	50                   	push   eax
c001ad80:	56                   	push   esi
c001ad81:	e8 33 ff ff ff       	call   c001acb9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad86:	83 c4 20             	add    esp,0x20
c001ad89:	84 c0                	test   al,al
c001ad8b:	74 07                	je     c001ad94 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ad8d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad92:	74 0b                	je     c001ad9f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad94:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ad98:	b8 01 00 00 00       	mov    eax,0x1
c001ad9d:	eb 3b                	jmp    c001adda <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ada3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ada7:	89 03                	mov    DWORD PTR [ebx],eax
c001ada9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001adb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001adbb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001adc2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001adc5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001adcc:	8a 06                	mov    al,BYTE PTR [esi]
c001adce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001add1:	31 c0                	xor    eax,eax
c001add3:	eb 05                	jmp    c001adda <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001add5:	b8 04 00 00 00       	mov    eax,0x4
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	5b                   	pop    ebx
c001adde:	5e                   	pop    esi
c001addf:	5f                   	pop    edi
c001ade0:	c3                   	ret    
c001ade1:	90                   	nop

c001ade2 <ISO9660::exists(char const*)>:
c001ade2:	83 ec 28             	sub    esp,0x28
c001ade5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ade9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aded:	52                   	push   edx
c001adee:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001adf1:	52                   	push   edx
c001adf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001adf6:	52                   	push   edx
c001adf7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001adfb:	52                   	push   edx
c001adfc:	50                   	push   eax
c001adfd:	e8 b7 fe ff ff       	call   c001acb9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae02:	83 c4 3c             	add    esp,0x3c
c001ae05:	c3                   	ret    

c001ae06 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae06:	56                   	push   esi
c001ae07:	53                   	push   ebx
c001ae08:	83 ec 14             	sub    esp,0x14
c001ae0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae0f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ae13:	85 db                	test   ebx,ebx
c001ae15:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ae19:	0f 94 c2             	sete   dl
c001ae1c:	85 f6                	test   esi,esi
c001ae1e:	0f 94 c0             	sete   al
c001ae21:	08 c2                	or     dl,al
c001ae23:	75 68                	jne    c001ae8d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae25:	85 c9                	test   ecx,ecx
c001ae27:	74 64                	je     c001ae8d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ae29:	83 ec 0c             	sub    esp,0xc
c001ae2c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae33:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae39:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae40:	50                   	push   eax
c001ae41:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ae44:	50                   	push   eax
c001ae45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae49:	50                   	push   eax
c001ae4a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae4e:	50                   	push   eax
c001ae4f:	51                   	push   ecx
c001ae50:	e8 64 fe ff ff       	call   c001acb9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae55:	83 c4 20             	add    esp,0x20
c001ae58:	ba 01 00 00 00       	mov    edx,0x1
c001ae5d:	84 c0                	test   al,al
c001ae5f:	74 31                	je     c001ae92 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae6c:	89 03                	mov    DWORD PTR [ebx],eax
c001ae6e:	ba 00 00 00 00       	mov    edx,0x0
c001ae73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae77:	85 c0                	test   eax,eax
c001ae79:	0f 95 06             	setne  BYTE PTR [esi]
c001ae7c:	74 14                	je     c001ae92 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae7e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae84:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae8b:	eb 05                	jmp    c001ae92 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae8d:	ba 04 00 00 00       	mov    edx,0x4
c001ae92:	83 c4 14             	add    esp,0x14
c001ae95:	89 d0                	mov    eax,edx
c001ae97:	5b                   	pop    ebx
c001ae98:	5e                   	pop    esi
c001ae99:	c3                   	ret    

c001ae9a <ISO9660::openDir(char const*, void**)>:
c001ae9a:	57                   	push   edi
c001ae9b:	56                   	push   esi
c001ae9c:	53                   	push   ebx
c001ae9d:	83 ec 10             	sub    esp,0x10
c001aea0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aea4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aea8:	85 ff                	test   edi,edi
c001aeaa:	0f 84 95 00 00 00    	je     c001af45 <ISO9660::openDir(char const*, void**)+0xab>
c001aeb0:	85 f6                	test   esi,esi
c001aeb2:	0f 84 8d 00 00 00    	je     c001af45 <ISO9660::openDir(char const*, void**)+0xab>
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	6a 1c                	push   0x1c
c001aebd:	e8 8a 0d ff ff       	call   c000bc4c <malloc>
c001aec2:	89 07                	mov    DWORD PTR [edi],eax
c001aec4:	89 c3                	mov    ebx,eax
c001aec6:	59                   	pop    ecx
c001aec7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aecb:	50                   	push   eax
c001aecc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aecf:	50                   	push   eax
c001aed0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aed4:	50                   	push   eax
c001aed5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aed9:	50                   	push   eax
c001aeda:	56                   	push   esi
c001aedb:	e8 d9 fd ff ff       	call   c001acb9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aee0:	83 c4 20             	add    esp,0x20
c001aee3:	84 c0                	test   al,al
c001aee5:	74 07                	je     c001aeee <ISO9660::openDir(char const*, void**)+0x54>
c001aee7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aeec:	75 21                	jne    c001af0f <ISO9660::openDir(char const*, void**)+0x75>
c001aeee:	0f b6 c0             	movzx  eax,al
c001aef1:	52                   	push   edx
c001aef2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aef6:	50                   	push   eax
c001aef7:	68 a2 23 02 c0       	push   0xc00223a2
c001aefc:	e8 28 41 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001af01:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	b8 01 00 00 00       	mov    eax,0x1
c001af0d:	eb 3b                	jmp    c001af4a <ISO9660::openDir(char const*, void**)+0xb0>
c001af0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af13:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001af17:	89 03                	mov    DWORD PTR [ebx],eax
c001af19:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001af20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af24:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001af2b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af32:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001af35:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001af3c:	8a 06                	mov    al,BYTE PTR [esi]
c001af3e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001af41:	31 c0                	xor    eax,eax
c001af43:	eb 05                	jmp    c001af4a <ISO9660::openDir(char const*, void**)+0xb0>
c001af45:	b8 04 00 00 00       	mov    eax,0x4
c001af4a:	83 c4 10             	add    esp,0x10
c001af4d:	5b                   	pop    ebx
c001af4e:	5e                   	pop    esi
c001af4f:	5f                   	pop    edi
c001af50:	c3                   	ret    
c001af51:	90                   	nop

c001af52 <ISO9660::ISO9660()>:
c001af52:	83 ec 0c             	sub    esp,0xc
c001af55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	50                   	push   eax
c001af5d:	e8 cc 43 ff ff       	call   c000f32e <Filesystem::Filesystem()>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	ba c8 23 02 c0       	mov    edx,0xc00223c8
c001af6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6e:	89 10                	mov    DWORD PTR [eax],edx
c001af70:	90                   	nop
c001af71:	83 c4 0c             	add    esp,0xc
c001af74:	c3                   	ret    
c001af75:	90                   	nop

c001af76 <SoundChannel::~SoundChannel()>:
c001af76:	83 ec 0c             	sub    esp,0xc
c001af79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	50                   	push   eax
c001af84:	e8 d3 0c ff ff       	call   c000bc5c <free>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	90                   	nop
c001af8d:	83 c4 0c             	add    esp,0xc
c001af90:	c3                   	ret    
c001af91:	90                   	nop

c001af92 <SoundChannel::setSpeed(float)>:
c001af92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af96:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001af9a:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001af9d:	c3                   	ret    

c001af9e <SoundChannel::getSpeed()>:
c001af9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa2:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001afa5:	c3                   	ret    

c001afa6 <SoundChannel::setVolume(int)>:
c001afa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afaa:	83 f8 64             	cmp    eax,0x64
c001afad:	7e 05                	jle    c001afb4 <SoundChannel::setVolume(int)+0xe>
c001afaf:	b8 64 00 00 00       	mov    eax,0x64
c001afb4:	85 c0                	test   eax,eax
c001afb6:	79 02                	jns    c001afba <SoundChannel::setVolume(int)+0x14>
c001afb8:	31 c0                	xor    eax,eax
c001afba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001afbe:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001afc1:	c3                   	ret    

c001afc2 <SoundChannel::getVolume()>:
c001afc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afc6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001afc9:	c3                   	ret    

c001afca <SoundChannel::pause()>:
c001afca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afce:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001afd2:	c3                   	ret    
c001afd3:	90                   	nop

c001afd4 <SoundChannel::SoundChannel(int, int, int, int)>:
c001afd4:	83 ec 1c             	sub    esp,0x1c
c001afd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001afdb:	e8 ea ff ff ff       	call   c001afca <SoundChannel::pause()>
c001afe0:	83 c4 04             	add    esp,0x4
c001afe3:	6a 50                	push   0x50
c001afe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afe9:	e8 b8 ff ff ff       	call   c001afa6 <SoundChannel::setVolume(int)>
c001afee:	83 c4 08             	add    esp,0x8
c001aff1:	d9 e8                	fld1   
c001aff3:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aff7:	d9 1c 24             	fstp   DWORD PTR [esp]
c001affa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001affe:	e8 8f ff ff ff       	call   c001af92 <SoundChannel::setSpeed(float)>
c001b003:	83 c4 08             	add    esp,0x8
c001b006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b00e:	89 10                	mov    DWORD PTR [eax],edx
c001b010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b014:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b018:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b01b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b023:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b026:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b02b:	75 23                	jne    c001b050 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001b02d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b031:	8b 10                	mov    edx,DWORD PTR [eax]
c001b033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b03a:	0f af c2             	imul   eax,edx
c001b03d:	85 c0                	test   eax,eax
c001b03f:	79 03                	jns    c001b044 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001b041:	83 c0 03             	add    eax,0x3
c001b044:	c1 f8 02             	sar    eax,0x2
c001b047:	05 a0 0f 00 00       	add    eax,0xfa0
c001b04c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b054:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b058:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b05f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b06a:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b075:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b078:	c1 e0 02             	shl    eax,0x2
c001b07b:	83 ec 0c             	sub    esp,0xc
c001b07e:	50                   	push   eax
c001b07f:	e8 c8 0b ff ff       	call   c000bc4c <malloc>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	89 c2                	mov    edx,eax
c001b089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b08d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b090:	83 ec 04             	sub    esp,0x4
c001b093:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b097:	50                   	push   eax
c001b098:	6a 01                	push   0x1
c001b09a:	6a 04                	push   0x4
c001b09c:	e8 b7 d7 fe ff       	call   c0008858 <src_new>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	89 c2                	mov    edx,eax
c001b0a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b0ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0b1:	85 c0                	test   eax,eax
c001b0b3:	74 10                	je     c001b0c5 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b0b5:	83 ec 0c             	sub    esp,0xc
c001b0b8:	68 24 24 02 c0       	push   0xc0022424
c001b0bd:	e8 fc 9b ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001b0c2:	83 c4 10             	add    esp,0x10
c001b0c5:	90                   	nop
c001b0c6:	83 c4 1c             	add    esp,0x1c
c001b0c9:	c3                   	ret    

c001b0ca <SoundChannel::play()>:
c001b0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0ce:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b0d2:	c3                   	ret    
c001b0d3:	90                   	nop

c001b0d4 <SoundChannel::paused()>:
c001b0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0d8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b0db:	c3                   	ret    

c001b0dc <SoundChannel::getSampleRate()>:
c001b0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0e2:	c3                   	ret    
c001b0e3:	90                   	nop

c001b0e4 <SoundChannel::getBits()>:
c001b0e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b0eb:	c3                   	ret    

c001b0ec <SoundChannel::getBufferUsed()>:
c001b0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b0f3:	c3                   	ret    

c001b0f4 <SoundChannel::getBufferSize()>:
c001b0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0fb:	c3                   	ret    

c001b0fc <SoundChannel::unbuffer(float*, int, int)>:
c001b0fc:	53                   	push   ebx
c001b0fd:	83 ec 40             	sub    esp,0x40
c001b100:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b104:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b10c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b10f:	db 03                	fild   DWORD PTR [ebx]
c001b111:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b115:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b119:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b11c:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b11f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b123:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b127:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b12b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b12f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b133:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b137:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b13b:	50                   	push   eax
c001b13c:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b13f:	e8 ce d3 fe ff       	call   c0008512 <src_process>
c001b144:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b148:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b14b:	83 c4 0c             	add    esp,0xc
c001b14e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b151:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b154:	29 d0                	sub    eax,edx
c001b156:	c1 e0 02             	shl    eax,0x2
c001b159:	50                   	push   eax
c001b15a:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b15d:	50                   	push   eax
c001b15e:	51                   	push   ecx
c001b15f:	e8 36 54 fe ff       	call   c000059a <memmove>
c001b164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b168:	83 c4 48             	add    esp,0x48
c001b16b:	5b                   	pop    ebx
c001b16c:	c3                   	ret    
c001b16d:	90                   	nop

c001b16e <SoundChannel::buffer8(unsigned char*, int)>:
c001b16e:	53                   	push   ebx
c001b16f:	31 c0                	xor    eax,eax
c001b171:	83 ec 08             	sub    esp,0x8
c001b174:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b178:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b17b:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b17e:	74 35                	je     c001b1b5 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b180:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b184:	7d 2f                	jge    c001b1b5 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b186:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b18a:	d9 05 40 24 02 c0    	fld    DWORD PTR ds:0xc0022440
c001b190:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b194:	40                   	inc    eax
c001b195:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b19a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b19d:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b1a1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b1a4:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b1a7:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b1aa:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b1ad:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b1b0:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b1b3:	eb c9                	jmp    c001b17e <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b1b5:	83 c4 08             	add    esp,0x8
c001b1b8:	5b                   	pop    ebx
c001b1b9:	c3                   	ret    

c001b1ba <SoundDevice::SoundDevice(char const*)>:
c001b1ba:	83 ec 1c             	sub    esp,0x1c
c001b1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1c1:	83 ec 08             	sub    esp,0x8
c001b1c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1c8:	50                   	push   eax
c001b1c9:	e8 56 54 ff ff       	call   c0010624 <Device::Device(char const*)>
c001b1ce:	83 c4 10             	add    esp,0x10
c001b1d1:	ba 4c 24 02 c0       	mov    edx,0xc002244c
c001b1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1da:	89 10                	mov    DWORD PTR [eax],edx
c001b1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1e0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b1f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b200:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b205:	7f 19                	jg     c001b220 <SoundDevice::SoundDevice(char const*)+0x66>
c001b207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b20b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b20f:	83 c2 54             	add    edx,0x54
c001b212:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b21a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b21e:	eb e0                	jmp    c001b200 <SoundDevice::SoundDevice(char const*)+0x46>
c001b220:	90                   	nop
c001b221:	83 c4 1c             	add    esp,0x1c
c001b224:	c3                   	ret    
c001b225:	90                   	nop

c001b226 <SoundDevice::~SoundDevice()>:
c001b226:	53                   	push   ebx
c001b227:	83 ec 18             	sub    esp,0x18
c001b22a:	ba 4c 24 02 c0       	mov    edx,0xc002244c
c001b22f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b233:	89 10                	mov    DWORD PTR [eax],edx
c001b235:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b23d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b242:	7f 46                	jg     c001b28a <SoundDevice::~SoundDevice()+0x64>
c001b244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b248:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b24c:	83 c2 54             	add    edx,0x54
c001b24f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b253:	85 c0                	test   eax,eax
c001b255:	74 2d                	je     c001b284 <SoundDevice::~SoundDevice()+0x5e>
c001b257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b25b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b25f:	83 c2 54             	add    edx,0x54
c001b262:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b266:	85 db                	test   ebx,ebx
c001b268:	74 1a                	je     c001b284 <SoundDevice::~SoundDevice()+0x5e>
c001b26a:	83 ec 0c             	sub    esp,0xc
c001b26d:	53                   	push   ebx
c001b26e:	e8 03 fd ff ff       	call   c001af76 <SoundChannel::~SoundChannel()>
c001b273:	83 c4 10             	add    esp,0x10
c001b276:	83 ec 08             	sub    esp,0x8
c001b279:	6a 2c                	push   0x2c
c001b27b:	53                   	push   ebx
c001b27c:	e8 c8 3c ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001b281:	83 c4 10             	add    esp,0x10
c001b284:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b288:	eb b3                	jmp    c001b23d <SoundDevice::~SoundDevice()+0x17>
c001b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	50                   	push   eax
c001b292:	e8 3f 50 ff ff       	call   c00102d6 <Device::~Device()>
c001b297:	83 c4 10             	add    esp,0x10
c001b29a:	90                   	nop
c001b29b:	83 c4 18             	add    esp,0x18
c001b29e:	5b                   	pop    ebx
c001b29f:	c3                   	ret    

c001b2a0 <SoundDevice::~SoundDevice()>:
c001b2a0:	83 ec 0c             	sub    esp,0xc
c001b2a3:	83 ec 0c             	sub    esp,0xc
c001b2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2aa:	e8 77 ff ff ff       	call   c001b226 <SoundDevice::~SoundDevice()>
c001b2af:	83 c4 10             	add    esp,0x10
c001b2b2:	83 ec 08             	sub    esp,0x8
c001b2b5:	68 e4 01 00 00       	push   0x1e4
c001b2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2be:	e8 86 3c ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001b2c3:	83 c4 10             	add    esp,0x10
c001b2c6:	83 c4 0c             	add    esp,0xc
c001b2c9:	c3                   	ret    

c001b2ca <SoundDevice::getFreeChannelNum()>:
c001b2ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b2ce:	31 c0                	xor    eax,eax
c001b2d0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b2d8:	74 09                	je     c001b2e3 <SoundDevice::getFreeChannelNum()+0x19>
c001b2da:	40                   	inc    eax
c001b2db:	83 f8 20             	cmp    eax,0x20
c001b2de:	75 f0                	jne    c001b2d0 <SoundDevice::getFreeChannelNum()+0x6>
c001b2e0:	83 c8 ff             	or     eax,0xffffffff
c001b2e3:	c3                   	ret    

c001b2e4 <SoundDevice::addChannel(SoundChannel*)>:
c001b2e4:	56                   	push   esi
c001b2e5:	53                   	push   ebx
c001b2e6:	51                   	push   ecx
c001b2e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2ef:	53                   	push   ebx
c001b2f0:	e8 d5 ff ff ff       	call   c001b2ca <SoundDevice::getFreeChannelNum()>
c001b2f5:	5a                   	pop    edx
c001b2f6:	83 f8 ff             	cmp    eax,0xffffffff
c001b2f9:	74 51                	je     c001b34c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2fb:	85 f6                	test   esi,esi
c001b2fd:	74 4d                	je     c001b34c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2ff:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b306:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b30d:	75 30                	jne    c001b33f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b30f:	83 ec 0c             	sub    esp,0xc
c001b312:	56                   	push   esi
c001b313:	e8 c4 fd ff ff       	call   c001b0dc <SoundChannel::getSampleRate()>
c001b318:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b31e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b321:	e8 be fd ff ff       	call   c001b0e4 <SoundChannel::getBits()>
c001b326:	83 c4 0c             	add    esp,0xc
c001b329:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b32f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b331:	50                   	push   eax
c001b332:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b338:	53                   	push   ebx
c001b339:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b345:	b8 01 00 00 00       	mov    eax,0x1
c001b34a:	eb 03                	jmp    c001b34f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b34c:	83 c8 ff             	or     eax,0xffffffff
c001b34f:	5a                   	pop    edx
c001b350:	5b                   	pop    ebx
c001b351:	5e                   	pop    esi
c001b352:	c3                   	ret    
c001b353:	90                   	nop

c001b354 <SoundDevice::removeChannel(int)>:
c001b354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b35c:	83 fa 1f             	cmp    edx,0x1f
c001b35f:	77 23                	ja     c001b384 <SoundDevice::removeChannel(int)+0x30>
c001b361:	8d 14 90             	lea    edx,[eax+edx*4]
c001b364:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b36b:	74 17                	je     c001b384 <SoundDevice::removeChannel(int)+0x30>
c001b36d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b377:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b37d:	75 05                	jne    c001b384 <SoundDevice::removeChannel(int)+0x30>
c001b37f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b381:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b384:	c3                   	ret    
c001b385:	90                   	nop

c001b386 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b386:	56                   	push   esi
c001b387:	53                   	push   ebx
c001b388:	31 db                	xor    ebx,ebx
c001b38a:	83 ec 14             	sub    esp,0x14
c001b38d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b391:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b395:	7d 55                	jge    c001b3ec <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b397:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b39b:	d9 e8                	fld1   
c001b39d:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b3a0:	d8 0d 7c 24 02 c0    	fmul   DWORD PTR ds:0xc002247c
c001b3a6:	d8 0d 80 24 02 c0    	fmul   DWORD PTR ds:0xc0022480
c001b3ac:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b3b0:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b3b4:	d8 15 84 24 02 c0    	fcom   DWORD PTR ds:0xc0022484
c001b3ba:	df e0                	fnstsw ax
c001b3bc:	9e                   	sahf   
c001b3bd:	72 08                	jb     c001b3c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b3bf:	dd d8                	fstp   st(0)
c001b3c1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b3c5:	eb 22                	jmp    c001b3e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3c7:	d9 ee                	fldz   
c001b3c9:	d8 d9                	fcomp  st(1)
c001b3cb:	df e0                	fnstsw ax
c001b3cd:	9e                   	sahf   
c001b3ce:	72 08                	jb     c001b3d8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b3d0:	dd d8                	fstp   st(0)
c001b3d2:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b3d6:	eb 11                	jmp    c001b3e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b3d8:	83 ec 10             	sub    esp,0x10
c001b3db:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b3de:	e8 09 36 00 00       	call   c001e9ec <lrintf>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b3e9:	43                   	inc    ebx
c001b3ea:	eb a5                	jmp    c001b391 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b3ec:	83 c4 14             	add    esp,0x14
c001b3ef:	5b                   	pop    ebx
c001b3f0:	5e                   	pop    esi
c001b3f1:	c3                   	ret    

c001b3f2 <SoundDevice::getAudio(int, float*, float*)>:
c001b3f2:	55                   	push   ebp
c001b3f3:	57                   	push   edi
c001b3f4:	56                   	push   esi
c001b3f5:	53                   	push   ebx
c001b3f6:	31 db                	xor    ebx,ebx
c001b3f8:	83 ec 20             	sub    esp,0x20
c001b3fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b403:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b407:	c1 e0 02             	shl    eax,0x2
c001b40a:	50                   	push   eax
c001b40b:	6a 00                	push   0x0
c001b40d:	55                   	push   ebp
c001b40e:	e8 f5 51 fe ff       	call   c0000608 <memset>
c001b413:	83 c4 10             	add    esp,0x10
c001b416:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b41a:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b421:	85 c0                	test   eax,eax
c001b423:	0f 84 94 00 00 00    	je     c001b4bd <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b429:	83 ec 0c             	sub    esp,0xc
c001b42c:	50                   	push   eax
c001b42d:	e8 a2 fc ff ff       	call   c001b0d4 <SoundChannel::paused()>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	84 c0                	test   al,al
c001b437:	0f 85 80 00 00 00    	jne    c001b4bd <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b43d:	83 ec 0c             	sub    esp,0xc
c001b440:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b447:	e8 76 fb ff ff       	call   c001afc2 <SoundChannel::getVolume()>
c001b44c:	83 c4 10             	add    esp,0x10
c001b44f:	85 c0                	test   eax,eax
c001b451:	74 6a                	je     c001b4bd <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b453:	83 ec 0c             	sub    esp,0xc
c001b456:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b45d:	e8 60 fb ff ff       	call   c001afc2 <SoundChannel::getVolume()>
c001b462:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b466:	d9 05 88 24 02 c0    	fld    DWORD PTR ds:0xc0022488
c001b46c:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b470:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b474:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b478:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b47e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b482:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b489:	e8 6e fc ff ff       	call   c001b0fc <SoundChannel::unbuffer(float*, int, int)>
c001b48e:	83 c4 20             	add    esp,0x20
c001b491:	31 d2                	xor    edx,edx
c001b493:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b497:	39 c2                	cmp    edx,eax
c001b499:	7d 1a                	jge    c001b4b5 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b49b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b49f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b4a2:	d8 c9                	fmul   st,st(1)
c001b4a4:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b4aa:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b4ae:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b4b2:	42                   	inc    edx
c001b4b3:	eb e2                	jmp    c001b497 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b4b5:	dd d8                	fstp   st(0)
c001b4b7:	39 c7                	cmp    edi,eax
c001b4b9:	7e 02                	jle    c001b4bd <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b4bb:	89 c7                	mov    edi,eax
c001b4bd:	43                   	inc    ebx
c001b4be:	83 fb 20             	cmp    ebx,0x20
c001b4c1:	0f 85 53 ff ff ff    	jne    c001b41a <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b4c7:	83 c4 1c             	add    esp,0x1c
c001b4ca:	89 f8                	mov    eax,edi
c001b4cc:	5b                   	pop    ebx
c001b4cd:	5e                   	pop    esi
c001b4ce:	5f                   	pop    edi
c001b4cf:	5d                   	pop    ebp
c001b4d0:	c3                   	ret    
c001b4d1:	90                   	nop

c001b4d2 <PCI::open(int, int, void*)>:
c001b4d2:	83 ec 18             	sub    esp,0x18
c001b4d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4db:	50                   	push   eax
c001b4dc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b4df:	31 c0                	xor    eax,eax
c001b4e1:	83 c4 1c             	add    esp,0x1c
c001b4e4:	c3                   	ret    
c001b4e5:	90                   	nop

c001b4e6 <PCI::close(int, int, void*)>:
c001b4e6:	31 c0                	xor    eax,eax
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <PCI::PCI()>:
c001b4ea:	83 ec 0c             	sub    esp,0xc
c001b4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f1:	83 ec 08             	sub    esp,0x8
c001b4f4:	68 8c 24 02 c0       	push   0xc002248c
c001b4f9:	50                   	push   eax
c001b4fa:	e8 b1 47 ff ff       	call   c000fcb0 <Bus::Bus(char const*)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	ba 38 25 02 c0       	mov    edx,0xc0022538
c001b507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50b:	89 10                	mov    DWORD PTR [eax],edx
c001b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b511:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b517:	0f b6 d0             	movzx  edx,al
c001b51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b529:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b52f:	0f b6 d0             	movzx  edx,al
c001b532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b536:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b545:	8d 50 01             	lea    edx,[eax+0x1]
c001b548:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b54c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b552:	0f b6 d0             	movzx  edx,al
c001b555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b559:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b55d:	83 c9 c0             	or     ecx,0xffffffc0
c001b560:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b564:	90                   	nop
c001b565:	83 c4 0c             	add    esp,0xc
c001b568:	c3                   	ret    
c001b569:	90                   	nop

c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b56a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b56e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b573:	89 ca                	mov    edx,ecx
c001b575:	c1 e0 10             	shl    eax,0x10
c001b578:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b57e:	09 d0                	or     eax,edx
c001b580:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b585:	c1 e2 08             	shl    edx,0x8
c001b588:	09 d0                	or     eax,edx
c001b58a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b58f:	c1 e2 0b             	shl    edx,0xb
c001b592:	09 d0                	or     eax,edx
c001b594:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b599:	0d 00 00 00 80       	or     eax,0x80000000
c001b59e:	ef                   	out    dx,eax
c001b59f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5a4:	ed                   	in     eax,dx
c001b5a5:	83 e1 02             	and    ecx,0x2
c001b5a8:	0f b6 c9             	movzx  ecx,cl
c001b5ab:	c1 e1 03             	shl    ecx,0x3
c001b5ae:	d3 e8                	shr    eax,cl
c001b5b0:	c3                   	ret    
c001b5b1:	90                   	nop

c001b5b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b5b2:	6a 00                	push   0x0
c001b5b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5b9:	50                   	push   eax
c001b5ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5bf:	50                   	push   eax
c001b5c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5c5:	50                   	push   eax
c001b5c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5ca:	e8 9b ff ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5cf:	83 c4 14             	add    esp,0x14
c001b5d2:	c3                   	ret    
c001b5d3:	90                   	nop

c001b5d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b5d4:	6a 0e                	push   0xe
c001b5d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5db:	50                   	push   eax
c001b5dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5e1:	50                   	push   eax
c001b5e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5e7:	50                   	push   eax
c001b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5ec:	e8 79 ff ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f1:	83 c4 14             	add    esp,0x14
c001b5f4:	0f b6 c0             	movzx  eax,al
c001b5f7:	c3                   	ret    

c001b5f8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b5f8:	55                   	push   ebp
c001b5f9:	57                   	push   edi
c001b5fa:	56                   	push   esi
c001b5fb:	53                   	push   ebx
c001b5fc:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b601:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b606:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b60b:	6a 0a                	push   0xa
c001b60d:	56                   	push   esi
c001b60e:	55                   	push   ebp
c001b60f:	57                   	push   edi
c001b610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b614:	e8 51 ff ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b619:	6a 0a                	push   0xa
c001b61b:	89 c3                	mov    ebx,eax
c001b61d:	56                   	push   esi
c001b61e:	0f b6 db             	movzx  ebx,bl
c001b621:	55                   	push   ebp
c001b622:	57                   	push   edi
c001b623:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b627:	e8 3e ff ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b62c:	83 c4 28             	add    esp,0x28
c001b62f:	25 00 ff 00 00       	and    eax,0xff00
c001b634:	09 d8                	or     eax,ebx
c001b636:	5b                   	pop    ebx
c001b637:	5e                   	pop    esi
c001b638:	5f                   	pop    edi
c001b639:	5d                   	pop    ebp
c001b63a:	c3                   	ret    
c001b63b:	90                   	nop

c001b63c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b63c:	6a 08                	push   0x8
c001b63e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b643:	50                   	push   eax
c001b644:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b649:	50                   	push   eax
c001b64a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b64f:	50                   	push   eax
c001b650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b654:	e8 11 ff ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b659:	83 c4 14             	add    esp,0x14
c001b65c:	0f b6 c4             	movzx  eax,ah
c001b65f:	c3                   	ret    

c001b660 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b660:	6a 08                	push   0x8
c001b662:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b667:	50                   	push   eax
c001b668:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b66d:	50                   	push   eax
c001b66e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b673:	50                   	push   eax
c001b674:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b678:	e8 ed fe ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b67d:	83 c4 14             	add    esp,0x14
c001b680:	c3                   	ret    
c001b681:	90                   	nop

c001b682 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b682:	6a 3c                	push   0x3c
c001b684:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b689:	50                   	push   eax
c001b68a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b68f:	50                   	push   eax
c001b690:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b695:	50                   	push   eax
c001b696:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b69a:	e8 cb fe ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b69f:	83 c4 14             	add    esp,0x14
c001b6a2:	c3                   	ret    
c001b6a3:	90                   	nop

c001b6a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b6a4:	6a 18                	push   0x18
c001b6a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6ab:	50                   	push   eax
c001b6ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6b1:	50                   	push   eax
c001b6b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b6b7:	50                   	push   eax
c001b6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b6bc:	e8 a9 fe ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6c1:	83 c4 14             	add    esp,0x14
c001b6c4:	0f b6 c4             	movzx  eax,ah
c001b6c7:	c3                   	ret    

c001b6c8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b6c8:	55                   	push   ebp
c001b6c9:	57                   	push   edi
c001b6ca:	56                   	push   esi
c001b6cb:	53                   	push   ebx
c001b6cc:	50                   	push   eax
c001b6cd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b6d1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b6d6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6db:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b6e0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b6e7:	8d 43 12             	lea    eax,[ebx+0x12]
c001b6ea:	83 c3 10             	add    ebx,0x10
c001b6ed:	0f b6 c0             	movzx  eax,al
c001b6f0:	0f b6 db             	movzx  ebx,bl
c001b6f3:	50                   	push   eax
c001b6f4:	51                   	push   ecx
c001b6f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b6f9:	57                   	push   edi
c001b6fa:	55                   	push   ebp
c001b6fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6ff:	e8 66 fe ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b704:	53                   	push   ebx
c001b705:	89 c6                	mov    esi,eax
c001b707:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b70b:	c1 e6 10             	shl    esi,0x10
c001b70e:	51                   	push   ecx
c001b70f:	57                   	push   edi
c001b710:	55                   	push   ebp
c001b711:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b715:	e8 50 fe ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b71a:	83 c4 2c             	add    esp,0x2c
c001b71d:	0f b7 c0             	movzx  eax,ax
c001b720:	5b                   	pop    ebx
c001b721:	09 f0                	or     eax,esi
c001b723:	5e                   	pop    esi
c001b724:	5f                   	pop    edi
c001b725:	5d                   	pop    ebp
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b728:	53                   	push   ebx
c001b729:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b72e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b733:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b737:	c1 e1 10             	shl    ecx,0x10
c001b73a:	25 fc 00 00 00       	and    eax,0xfc
c001b73f:	09 c1                	or     ecx,eax
c001b741:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b746:	c1 e0 08             	shl    eax,0x8
c001b749:	09 c1                	or     ecx,eax
c001b74b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b750:	c1 e0 0b             	shl    eax,0xb
c001b753:	09 c1                	or     ecx,eax
c001b755:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b75b:	89 c8                	mov    eax,ecx
c001b75d:	ef                   	out    dx,eax
c001b75e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b763:	ed                   	in     eax,dx
c001b764:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b769:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b76e:	74 0a                	je     c001b77a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b770:	0f b7 d8             	movzx  ebx,ax
c001b773:	89 d0                	mov    eax,edx
c001b775:	c1 e0 10             	shl    eax,0x10
c001b778:	eb 05                	jmp    c001b77f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b77a:	66 31 c0             	xor    ax,ax
c001b77d:	89 d3                	mov    ebx,edx
c001b77f:	09 c3                	or     ebx,eax
c001b781:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b786:	89 c8                	mov    eax,ecx
c001b788:	ef                   	out    dx,eax
c001b789:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b78e:	89 d8                	mov    eax,ebx
c001b790:	ef                   	out    dx,eax
c001b791:	5b                   	pop    ebx
c001b792:	c3                   	ret    
c001b793:	90                   	nop

c001b794 <PCI::checkBus(unsigned char)>:
c001b794:	56                   	push   esi
c001b795:	53                   	push   ebx
c001b796:	31 db                	xor    ebx,ebx
c001b798:	51                   	push   ecx
c001b799:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b79e:	52                   	push   edx
c001b79f:	53                   	push   ebx
c001b7a0:	43                   	inc    ebx
c001b7a1:	56                   	push   esi
c001b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7a6:	e8 4d 03 00 00       	call   c001baf8 <PCI::checkDevice(unsigned char, unsigned char)>
c001b7ab:	83 c4 10             	add    esp,0x10
c001b7ae:	83 fb 20             	cmp    ebx,0x20
c001b7b1:	75 eb                	jne    c001b79e <PCI::checkBus(unsigned char)+0xa>
c001b7b3:	58                   	pop    eax
c001b7b4:	5b                   	pop    ebx
c001b7b5:	5e                   	pop    esi
c001b7b6:	c3                   	ret    
c001b7b7:	90                   	nop

c001b7b8 <PCI::foundDevice(PCIDeviceInfo)>:
c001b7b8:	55                   	push   ebp
c001b7b9:	57                   	push   edi
c001b7ba:	56                   	push   esi
c001b7bb:	53                   	push   ebx
c001b7bc:	83 ec 1c             	sub    esp,0x1c
c001b7bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b7c3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b7c9:	0f 84 51 01 00 00    	je     c001b920 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b7cf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b7d3:	66 81 f9 06 04       	cmp    cx,0x406
c001b7d8:	75 2c                	jne    c001b806 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b7da:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b7df:	50                   	push   eax
c001b7e0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b7e5:	50                   	push   eax
c001b7e6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b7eb:	50                   	push   eax
c001b7ec:	56                   	push   esi
c001b7ed:	e8 b2 fe ff ff       	call   c001b6a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b7f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7f6:	0f b6 c0             	movzx  eax,al
c001b7f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b7fd:	83 c4 2c             	add    esp,0x2c
c001b800:	5b                   	pop    ebx
c001b801:	5e                   	pop    esi
c001b802:	5f                   	pop    edi
c001b803:	5d                   	pop    ebp
c001b804:	eb 8e                	jmp    c001b794 <PCI::checkBus(unsigned char)>
c001b806:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b80a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b810:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b814:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b818:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b81c:	88 d3                	mov    bl,dl
c001b81e:	85 c0                	test   eax,eax
c001b820:	74 33                	je     c001b855 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b822:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b825:	85 d2                	test   edx,edx
c001b827:	74 28                	je     c001b851 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b829:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b82f:	31 ef                	xor    edi,ebp
c001b831:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b837:	75 18                	jne    c001b851 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b839:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b83d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b843:	75 0c                	jne    c001b851 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b845:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b84b:	0f 84 cf 00 00 00    	je     c001b920 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b851:	8b 00                	mov    eax,DWORD PTR [eax]
c001b853:	eb c9                	jmp    c001b81e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b855:	66 81 f9 01 06       	cmp    cx,0x601
c001b85a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b85e:	75 18                	jne    c001b878 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	68 58 01 00 00       	push   0x158
c001b868:	e8 cd 36 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001b86d:	59                   	pop    ecx
c001b86e:	89 c5                	mov    ebp,eax
c001b870:	5f                   	pop    edi
c001b871:	68 94 24 02 c0       	push   0xc0022494
c001b876:	eb 7d                	jmp    c001b8f5 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b878:	66 81 f9 01 01       	cmp    cx,0x101
c001b87d:	75 60                	jne    c001b8df <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b87f:	83 ec 0c             	sub    esp,0xc
c001b882:	68 70 02 00 00       	push   0x270
c001b887:	e8 ae 36 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001b88c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b88f:	89 c5                	mov    ebp,eax
c001b891:	e8 26 03 00 00       	call   c001bbbc <IDE::IDE()>
c001b896:	58                   	pop    eax
c001b897:	5a                   	pop    edx
c001b898:	55                   	push   ebp
c001b899:	56                   	push   esi
c001b89a:	e8 95 4b ff ff       	call   c0010434 <Device::addChild(Device*)>
c001b89f:	83 ec 1c             	sub    esp,0x1c
c001b8a2:	b9 09 00 00 00       	mov    ecx,0x9
c001b8a7:	fc                   	cld    
c001b8a8:	89 e7                	mov    edi,esp
c001b8aa:	89 de                	mov    esi,ebx
c001b8ac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8ae:	55                   	push   ebp
c001b8af:	e8 5a 4a ff ff       	call   c001030e <Device::preOpenPCI(PCIDeviceInfo)>
c001b8b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b8b7:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b8bb:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b8c3:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b8cb:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b8d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b8d6:	83 c4 4c             	add    esp,0x4c
c001b8d9:	5b                   	pop    ebx
c001b8da:	5e                   	pop    esi
c001b8db:	5f                   	pop    edi
c001b8dc:	5d                   	pop    ebp
c001b8dd:	ff e0                	jmp    eax
c001b8df:	83 ec 0c             	sub    esp,0xc
c001b8e2:	68 58 01 00 00       	push   0x158
c001b8e7:	e8 4e 36 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001b8ec:	59                   	pop    ecx
c001b8ed:	89 c5                	mov    ebp,eax
c001b8ef:	5f                   	pop    edi
c001b8f0:	68 b3 24 02 c0       	push   0xc00224b3
c001b8f5:	55                   	push   ebp
c001b8f6:	e8 25 4e ff ff       	call   c0010720 <DriverlessDevice::DriverlessDevice(char const*)>
c001b8fb:	58                   	pop    eax
c001b8fc:	5a                   	pop    edx
c001b8fd:	55                   	push   ebp
c001b8fe:	56                   	push   esi
c001b8ff:	e8 30 4b ff ff       	call   c0010434 <Device::addChild(Device*)>
c001b904:	b9 09 00 00 00       	mov    ecx,0x9
c001b909:	fc                   	cld    
c001b90a:	89 df                	mov    edi,ebx
c001b90c:	89 de                	mov    esi,ebx
c001b90e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b910:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b914:	83 c4 2c             	add    esp,0x2c
c001b917:	5b                   	pop    ebx
c001b918:	5e                   	pop    esi
c001b919:	5f                   	pop    edi
c001b91a:	5d                   	pop    ebp
c001b91b:	e9 ee 49 ff ff       	jmp    c001030e <Device::preOpenPCI(PCIDeviceInfo)>
c001b920:	83 c4 1c             	add    esp,0x1c
c001b923:	5b                   	pop    ebx
c001b924:	5e                   	pop    esi
c001b925:	5f                   	pop    edi
c001b926:	5d                   	pop    ebp
c001b927:	c3                   	ret    

c001b928 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b928:	55                   	push   ebp
c001b929:	57                   	push   edi
c001b92a:	56                   	push   esi
c001b92b:	53                   	push   ebx
c001b92c:	83 ec 5c             	sub    esp,0x5c
c001b92f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b933:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b937:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b93b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b940:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b944:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b948:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b94d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b951:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b956:	6a 0c                	push   0xc
c001b958:	55                   	push   ebp
c001b959:	53                   	push   ebx
c001b95a:	57                   	push   edi
c001b95b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b962:	e8 03 fc ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b967:	83 c4 0c             	add    esp,0xc
c001b96a:	6a 00                	push   0x0
c001b96c:	68 cd 24 02 c0       	push   0xc00224cd
c001b971:	e8 b3 36 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001b976:	55                   	push   ebp
c001b977:	53                   	push   ebx
c001b978:	57                   	push   edi
c001b979:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b980:	e8 73 fc ff ff       	call   c001b5f8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b985:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b98a:	83 c4 20             	add    esp,0x20
c001b98d:	55                   	push   ebp
c001b98e:	53                   	push   ebx
c001b98f:	57                   	push   edi
c001b990:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b994:	e8 e9 fc ff ff       	call   c001b682 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b999:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b9a0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b9a4:	55                   	push   ebp
c001b9a5:	53                   	push   ebx
c001b9a6:	57                   	push   edi
c001b9a7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b9ae:	e8 b7 fb ff ff       	call   c001b56a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9b3:	0f b6 c4             	movzx  eax,ah
c001b9b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b9ba:	83 c4 18             	add    esp,0x18
c001b9bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b9c1:	68 e1 24 02 c0       	push   0xc00224e1
c001b9c6:	e8 5e 36 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001b9cb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b9cf:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b9d3:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001b9d8:	83 c4 10             	add    esp,0x10
c001b9db:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b9e1:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b9e8:	74 6c                	je     c001ba56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9ea:	31 f6                	xor    esi,esi
c001b9ec:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c001b9f2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b9f8:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b9fe:	7e 56                	jle    c001ba56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001ba00:	8d 14 f2             	lea    edx,[edx+esi*8]
c001ba03:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001ba0a:	39 cb                	cmp    ebx,ecx
c001ba0c:	75 45                	jne    c001ba53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001ba0e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001ba15:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001ba19:	75 38                	jne    c001ba53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	68 f0 24 02 c0       	push   0xc00224f0
c001ba23:	e8 01 36 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001ba28:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c001ba2e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001ba34:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001ba3c:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001ba40:	52                   	push   edx
c001ba41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba45:	53                   	push   ebx
c001ba46:	68 15 25 02 c0       	push   0xc0022515
c001ba4b:	e8 d9 35 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001ba50:	83 c4 20             	add    esp,0x20
c001ba53:	46                   	inc    esi
c001ba54:	eb 96                	jmp    c001b9ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	83 ec 0c             	sub    esp,0xc
c001ba5b:	55                   	push   ebp
c001ba5c:	53                   	push   ebx
c001ba5d:	57                   	push   edi
c001ba5e:	52                   	push   edx
c001ba5f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba63:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba6a:	e8 59 fc ff ff       	call   c001b6c8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba6f:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001ba73:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba77:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ba7b:	42                   	inc    edx
c001ba7c:	83 c4 20             	add    esp,0x20
c001ba7f:	83 fa 06             	cmp    edx,0x6
c001ba82:	75 d4                	jne    c001ba58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001ba84:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba88:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001ba8c:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ba90:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001ba94:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ba98:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ba9c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001baa1:	86 e0                	xchg   al,ah
c001baa3:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001baa8:	55                   	push   ebp
c001baa9:	53                   	push   ebx
c001baaa:	57                   	push   edi
c001baab:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001baaf:	e8 88 fb ff ff       	call   c001b63c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bab4:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bab8:	55                   	push   ebp
c001bab9:	53                   	push   ebx
c001baba:	57                   	push   edi
c001babb:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bac2:	e8 eb fa ff ff       	call   c001b5b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bac7:	83 ec 0c             	sub    esp,0xc
c001baca:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001bacf:	b9 09 00 00 00       	mov    ecx,0x9
c001bad4:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001bad8:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001badc:	fc                   	cld    
c001badd:	89 e7                	mov    edi,esp
c001badf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bae1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001bae8:	e8 cb fc ff ff       	call   c001b7b8 <PCI::foundDevice(PCIDeviceInfo)>
c001baed:	81 c4 8c 00 00 00    	add    esp,0x8c
c001baf3:	5b                   	pop    ebx
c001baf4:	5e                   	pop    esi
c001baf5:	5f                   	pop    edi
c001baf6:	5d                   	pop    ebp
c001baf7:	c3                   	ret    

c001baf8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001baf8:	55                   	push   ebp
c001baf9:	57                   	push   edi
c001bafa:	56                   	push   esi
c001bafb:	53                   	push   ebx
c001bafc:	83 ec 0c             	sub    esp,0xc
c001baff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bb03:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bb08:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bb0d:	6a 00                	push   0x0
c001bb0f:	56                   	push   esi
c001bb10:	57                   	push   edi
c001bb11:	55                   	push   ebp
c001bb12:	e8 9b fa ff ff       	call   c001b5b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb17:	6a 00                	push   0x0
c001bb19:	56                   	push   esi
c001bb1a:	57                   	push   edi
c001bb1b:	55                   	push   ebp
c001bb1c:	e8 07 fe ff ff       	call   c001b928 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb21:	83 c4 20             	add    esp,0x20
c001bb24:	6a 00                	push   0x0
c001bb26:	56                   	push   esi
c001bb27:	57                   	push   edi
c001bb28:	55                   	push   ebp
c001bb29:	e8 a6 fa ff ff       	call   c001b5d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb2e:	83 c4 10             	add    esp,0x10
c001bb31:	84 c0                	test   al,al
c001bb33:	79 27                	jns    c001bb5c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bb35:	bb 01 00 00 00       	mov    ebx,0x1
c001bb3a:	53                   	push   ebx
c001bb3b:	56                   	push   esi
c001bb3c:	57                   	push   edi
c001bb3d:	55                   	push   ebp
c001bb3e:	e8 6f fa ff ff       	call   c001b5b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	66 40                	inc    ax
c001bb48:	74 0c                	je     c001bb56 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001bb4a:	53                   	push   ebx
c001bb4b:	56                   	push   esi
c001bb4c:	57                   	push   edi
c001bb4d:	55                   	push   ebp
c001bb4e:	e8 d5 fd ff ff       	call   c001b928 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	43                   	inc    ebx
c001bb57:	83 fb 08             	cmp    ebx,0x8
c001bb5a:	75 de                	jne    c001bb3a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bb5c:	83 c4 0c             	add    esp,0xc
c001bb5f:	5b                   	pop    ebx
c001bb60:	5e                   	pop    esi
c001bb61:	5f                   	pop    edi
c001bb62:	5d                   	pop    ebp
c001bb63:	c3                   	ret    

c001bb64 <PCI::detect()>:
c001bb64:	56                   	push   esi
c001bb65:	53                   	push   ebx
c001bb66:	53                   	push   ebx
c001bb67:	31 db                	xor    ebx,ebx
c001bb69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb6d:	6a 00                	push   0x0
c001bb6f:	6a 00                	push   0x0
c001bb71:	6a 00                	push   0x0
c001bb73:	56                   	push   esi
c001bb74:	e8 5b fa ff ff       	call   c001b5d4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	a8 80                	test   al,0x80
c001bb7e:	75 21                	jne    c001bba1 <PCI::detect()+0x3d>
c001bb80:	51                   	push   ecx
c001bb81:	51                   	push   ecx
c001bb82:	6a 00                	push   0x0
c001bb84:	56                   	push   esi
c001bb85:	e8 0a fc ff ff       	call   c001b794 <PCI::checkBus(unsigned char)>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	eb 24                	jmp    c001bbb3 <PCI::detect()+0x4f>
c001bb8f:	52                   	push   edx
c001bb90:	52                   	push   edx
c001bb91:	53                   	push   ebx
c001bb92:	43                   	inc    ebx
c001bb93:	56                   	push   esi
c001bb94:	e8 fb fb ff ff       	call   c001b794 <PCI::checkBus(unsigned char)>
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	83 fb 08             	cmp    ebx,0x8
c001bb9f:	74 12                	je     c001bbb3 <PCI::detect()+0x4f>
c001bba1:	53                   	push   ebx
c001bba2:	6a 00                	push   0x0
c001bba4:	6a 00                	push   0x0
c001bba6:	56                   	push   esi
c001bba7:	e8 06 fa ff ff       	call   c001b5b2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	66 40                	inc    ax
c001bbb1:	74 dc                	je     c001bb8f <PCI::detect()+0x2b>
c001bbb3:	58                   	pop    eax
c001bbb4:	5b                   	pop    ebx
c001bbb5:	5e                   	pop    esi
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop

c001bbb8 <IDE::close(int, int, void*)>:
c001bbb8:	83 c8 ff             	or     eax,0xffffffff
c001bbbb:	c3                   	ret    

c001bbbc <IDE::IDE()>:
c001bbbc:	83 ec 0c             	sub    esp,0xc
c001bbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc3:	83 ec 08             	sub    esp,0x8
c001bbc6:	68 5c 25 02 c0       	push   0xc002255c
c001bbcb:	50                   	push   eax
c001bbcc:	e8 e5 4b ff ff       	call   c00107b6 <HardDiskController::HardDiskController(char const*)>
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	ba 9c 27 02 c0       	mov    edx,0xc002279c
c001bbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdd:	89 10                	mov    DWORD PTR [eax],edx
c001bbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bbea:	90                   	nop
c001bbeb:	83 c4 0c             	add    esp,0xc
c001bbee:	c3                   	ret    
c001bbef:	90                   	nop

c001bbf0 <IDE::prepareInterrupt(unsigned char)>:
c001bbf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bbf9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bc01:	c3                   	ret    

c001bc02 <selectDrive(unsigned char, unsigned char)>:
c001bc02:	c3                   	ret    
c001bc03:	90                   	nop

c001bc04 <IDE::getBase(unsigned char)>:
c001bc04:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bc09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc0d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bc15:	c3                   	ret    

c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bc16:	55                   	push   ebp
c001bc17:	57                   	push   edi
c001bc18:	56                   	push   esi
c001bc19:	53                   	push   ebx
c001bc1a:	83 ec 1c             	sub    esp,0x1c
c001bc1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc25:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bc28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bc30:	80 f9 03             	cmp    cl,0x3
c001bc33:	77 51                	ja     c001bc86 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bc35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc39:	0f b6 f2             	movzx  esi,dl
c001bc3c:	0f b6 db             	movzx  ebx,bl
c001bc3f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc42:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bc46:	83 ca 80             	or     edx,0xffffff80
c001bc49:	0f b6 d2             	movzx  edx,dl
c001bc4c:	52                   	push   edx
c001bc4d:	6a 0c                	push   0xc
c001bc4f:	56                   	push   esi
c001bc50:	57                   	push   edi
c001bc51:	e8 c0 ff ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc56:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bc5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc5f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bc63:	ee                   	out    dx,al
c001bc64:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc69:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc6d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc71:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc75:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc7d:	83 c4 2c             	add    esp,0x2c
c001bc80:	5b                   	pop    ebx
c001bc81:	5e                   	pop    esi
c001bc82:	5f                   	pop    edi
c001bc83:	5d                   	pop    ebp
c001bc84:	eb 90                	jmp    c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc86:	80 fb 07             	cmp    bl,0x7
c001bc89:	77 12                	ja     c001bc9d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc8b:	0f b6 d2             	movzx  edx,dl
c001bc8e:	0f b6 db             	movzx  ebx,bl
c001bc91:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc99:	89 da                	mov    edx,ebx
c001bc9b:	eb 2f                	jmp    c001bccc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc9d:	80 fb 0d             	cmp    bl,0xd
c001bca0:	77 13                	ja     c001bcb5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bca2:	0f b6 d2             	movzx  edx,dl
c001bca5:	0f b6 db             	movzx  ebx,bl
c001bca8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bcaf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bcb3:	eb 17                	jmp    c001bccc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bcb5:	80 fb 15             	cmp    bl,0x15
c001bcb8:	77 13                	ja     c001bccd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bcba:	0f b6 d2             	movzx  edx,dl
c001bcbd:	0f b6 db             	movzx  ebx,bl
c001bcc0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bcc8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bccc:	ee                   	out    dx,al
c001bccd:	83 c4 1c             	add    esp,0x1c
c001bcd0:	5b                   	pop    ebx
c001bcd1:	5e                   	pop    esi
c001bcd2:	5f                   	pop    edi
c001bcd3:	5d                   	pop    ebp
c001bcd4:	c3                   	ret    
c001bcd5:	90                   	nop

c001bcd6 <IDE::read(unsigned char, unsigned char)>:
c001bcd6:	55                   	push   ebp
c001bcd7:	57                   	push   edi
c001bcd8:	56                   	push   esi
c001bcd9:	53                   	push   ebx
c001bcda:	83 ec 1c             	sub    esp,0x1c
c001bcdd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bce1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bce5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bce8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bcec:	3c 03                	cmp    al,0x3
c001bcee:	77 43                	ja     c001bd33 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bcf0:	0f b6 f2             	movzx  esi,dl
c001bcf3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bcf6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bcfa:	83 c8 80             	or     eax,0xffffff80
c001bcfd:	0f b6 c0             	movzx  eax,al
c001bd00:	50                   	push   eax
c001bd01:	6a 0c                	push   0xc
c001bd03:	56                   	push   esi
c001bd04:	57                   	push   edi
c001bd05:	e8 0c ff ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bd0f:	0f b6 c3             	movzx  eax,bl
c001bd12:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bd16:	ec                   	in     al,dx
c001bd17:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bd1b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bd20:	52                   	push   edx
c001bd21:	6a 0c                	push   0xc
c001bd23:	56                   	push   esi
c001bd24:	57                   	push   edi
c001bd25:	e8 ec fe ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2a:	83 c4 20             	add    esp,0x20
c001bd2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd31:	eb 49                	jmp    c001bd7c <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd33:	80 fb 07             	cmp    bl,0x7
c001bd36:	77 12                	ja     c001bd4a <IDE::read(unsigned char, unsigned char)+0x74>
c001bd38:	0f b6 d2             	movzx  edx,dl
c001bd3b:	0f b6 c3             	movzx  eax,bl
c001bd3e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bd46:	89 c2                	mov    edx,eax
c001bd48:	eb 31                	jmp    c001bd7b <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd4a:	80 fb 0d             	cmp    bl,0xd
c001bd4d:	77 13                	ja     c001bd62 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bd4f:	0f b6 d2             	movzx  edx,dl
c001bd52:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bd59:	0f b6 d3             	movzx  edx,bl
c001bd5c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bd60:	eb 19                	jmp    c001bd7b <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd62:	31 c0                	xor    eax,eax
c001bd64:	80 fb 15             	cmp    bl,0x15
c001bd67:	77 13                	ja     c001bd7c <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd69:	0f b6 d2             	movzx  edx,dl
c001bd6c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd74:	0f b6 d3             	movzx  edx,bl
c001bd77:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd7b:	ec                   	in     al,dx
c001bd7c:	83 c4 1c             	add    esp,0x1c
c001bd7f:	5b                   	pop    ebx
c001bd80:	5e                   	pop    esi
c001bd81:	5f                   	pop    edi
c001bd82:	5d                   	pop    ebp
c001bd83:	c3                   	ret    

c001bd84 <IDE::waitInterrupt(unsigned char)>:
c001bd84:	55                   	push   ebp
c001bd85:	57                   	push   edi
c001bd86:	56                   	push   esi
c001bd87:	53                   	push   ebx
c001bd88:	31 db                	xor    ebx,ebx
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd91:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd96:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd9e:	89 e8                	mov    eax,ebp
c001bda0:	84 c0                	test   al,al
c001bda2:	75 34                	jne    c001bdd8 <IDE::waitInterrupt(unsigned char)+0x54>
c001bda4:	52                   	push   edx
c001bda5:	6a 0c                	push   0xc
c001bda7:	56                   	push   esi
c001bda8:	57                   	push   edi
c001bda9:	e8 28 ff ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	a8 01                	test   al,0x1
c001bdb3:	75 2b                	jne    c001bde0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bdb5:	f6 c3 04             	test   bl,0x4
c001bdb8:	75 16                	jne    c001bdd0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bdba:	83 fb 32             	cmp    ebx,0x32
c001bdbd:	7e 11                	jle    c001bdd0 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bdbf:	50                   	push   eax
c001bdc0:	50                   	push   eax
c001bdc1:	6a 00                	push   0x0
c001bdc3:	68 80 96 98 00       	push   0x989680
c001bdc8:	e8 e6 c4 ff ff       	call   c00182b3 <nanoSleep(unsigned long long)>
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	83 fb 3c             	cmp    ebx,0x3c
c001bdd3:	74 0b                	je     c001bde0 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bdd5:	43                   	inc    ebx
c001bdd6:	eb be                	jmp    c001bd96 <IDE::waitInterrupt(unsigned char)+0x12>
c001bdd8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bde0:	83 c4 0c             	add    esp,0xc
c001bde3:	89 e8                	mov    eax,ebp
c001bde5:	5b                   	pop    ebx
c001bde6:	5e                   	pop    esi
c001bde7:	5f                   	pop    edi
c001bde8:	5d                   	pop    ebp
c001bde9:	c3                   	ret    

c001bdea <ideChannel0IRQHandler(regs*, void*)>:
c001bdea:	83 ec 10             	sub    esp,0x10
c001bded:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdf1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bdf8:	6a 07                	push   0x7
c001bdfa:	6a 00                	push   0x0
c001bdfc:	50                   	push   eax
c001bdfd:	e8 d4 fe ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001be02:	83 c4 1c             	add    esp,0x1c
c001be05:	c3                   	ret    

c001be06 <ideChannel1IRQHandler(regs*, void*)>:
c001be06:	83 ec 10             	sub    esp,0x10
c001be09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be0d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001be14:	6a 07                	push   0x7
c001be16:	6a 01                	push   0x1
c001be18:	50                   	push   eax
c001be19:	e8 b8 fe ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001be1e:	83 c4 1c             	add    esp,0x1c
c001be21:	c3                   	ret    

c001be22 <IDE::enableIRQs(unsigned char, bool)>:
c001be22:	57                   	push   edi
c001be23:	56                   	push   esi
c001be24:	be 04 00 00 00       	mov    esi,0x4
c001be29:	53                   	push   ebx
c001be2a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001be2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be33:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001be38:	0f 94 c0             	sete   al
c001be3b:	d1 e0                	shl    eax,1
c001be3d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001be44:	0f b6 c0             	movzx  eax,al
c001be47:	50                   	push   eax
c001be48:	6a 0c                	push   0xc
c001be4a:	57                   	push   edi
c001be4b:	53                   	push   ebx
c001be4c:	e8 c5 fd ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be51:	83 c4 10             	add    esp,0x10
c001be54:	50                   	push   eax
c001be55:	6a 0c                	push   0xc
c001be57:	57                   	push   edi
c001be58:	53                   	push   ebx
c001be59:	e8 78 fe ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	4e                   	dec    esi
c001be62:	75 f0                	jne    c001be54 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be64:	5b                   	pop    ebx
c001be65:	5e                   	pop    esi
c001be66:	5f                   	pop    edi
c001be67:	c3                   	ret    

c001be68 <IDE::open(int, int, void*)>:
c001be68:	55                   	push   ebp
c001be69:	57                   	push   edi
c001be6a:	56                   	push   esi
c001be6b:	53                   	push   ebx
c001be6c:	83 ec 1c             	sub    esp,0x1c
c001be6f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be73:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be7c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be85:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be8c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be93:	0f 85 b0 02 00 00    	jne    c001c149 <IDE::open(int, int, void*)+0x2e1>
c001be99:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be9f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bea3:	83 e0 7f             	and    eax,0x7f
c001bea6:	3c 05                	cmp    al,0x5
c001bea8:	74 04                	je     c001beae <IDE::open(int, int, void*)+0x46>
c001beaa:	3c 0f                	cmp    al,0xf
c001beac:	75 32                	jne    c001bee0 <IDE::open(int, int, void*)+0x78>
c001beae:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001beb4:	83 e0 fc             	and    eax,0xfffffffc
c001beb7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bebe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bec4:	83 e0 fc             	and    eax,0xfffffffc
c001bec7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bece:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bed4:	83 e0 fc             	and    eax,0xfffffffc
c001bed7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bede:	eb 14                	jmp    c001bef4 <IDE::open(int, int, void*)+0x8c>
c001bee0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001beea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bef4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001befb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bf02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf06:	89 c6                	mov    esi,eax
c001bf08:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf0d:	c1 e6 10             	shl    esi,0x10
c001bf10:	89 e8                	mov    eax,ebp
c001bf12:	89 fa                	mov    edx,edi
c001bf14:	c1 e0 0b             	shl    eax,0xb
c001bf17:	09 f0                	or     eax,esi
c001bf19:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bf20:	c1 e6 08             	shl    esi,0x8
c001bf23:	09 c6                	or     esi,eax
c001bf25:	89 f0                	mov    eax,esi
c001bf27:	0d 08 00 00 80       	or     eax,0x80000008
c001bf2c:	ef                   	out    dx,eax
c001bf2d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bf32:	89 ca                	mov    edx,ecx
c001bf34:	ed                   	in     eax,dx
c001bf35:	c1 e8 10             	shr    eax,0x10
c001bf38:	3d ff ff 00 00       	cmp    eax,0xffff
c001bf3d:	0f 84 f5 00 00 00    	je     c001c038 <IDE::open(int, int, void*)+0x1d0>
c001bf43:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bf49:	89 fa                	mov    edx,edi
c001bf4b:	89 f0                	mov    eax,esi
c001bf4d:	ef                   	out    dx,eax
c001bf4e:	b0 fe                	mov    al,0xfe
c001bf50:	89 ca                	mov    edx,ecx
c001bf52:	ee                   	out    dx,al
c001bf53:	89 f0                	mov    eax,esi
c001bf55:	89 fa                	mov    edx,edi
c001bf57:	ef                   	out    dx,eax
c001bf58:	89 ca                	mov    edx,ecx
c001bf5a:	ed                   	in     eax,dx
c001bf5b:	3c fe                	cmp    al,0xfe
c001bf5d:	0f 85 a9 00 00 00    	jne    c001c00c <IDE::open(int, int, void*)+0x1a4>
c001bf63:	8b 15 a8 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a8
c001bf69:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf70:	74 33                	je     c001bfa5 <IDE::open(int, int, void*)+0x13d>
c001bf72:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf78:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf7c:	40                   	inc    eax
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	0f b6 c0             	movzx  eax,al
c001bf83:	50                   	push   eax
c001bf84:	55                   	push   ebp
c001bf85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf89:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf8f:	51                   	push   ecx
c001bf90:	e8 e9 75 ff ff       	call   c001357e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf95:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf9a:	83 c4 1c             	add    esp,0x1c
c001bf9d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bfa3:	eb 0a                	jmp    c001bfaf <IDE::open(int, int, void*)+0x147>
c001bfa5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bfaf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bfb6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bfbd:	c1 e1 10             	shl    ecx,0x10
c001bfc0:	c1 e0 08             	shl    eax,0x8
c001bfc3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bfc8:	09 c1                	or     ecx,eax
c001bfca:	89 fa                	mov    edx,edi
c001bfcc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bfd3:	c1 e0 0b             	shl    eax,0xb
c001bfd6:	09 c1                	or     ecx,eax
c001bfd8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bfde:	89 c8                	mov    eax,ecx
c001bfe0:	ef                   	out    dx,eax
c001bfe1:	be fc 0c 00 00       	mov    esi,0xcfc
c001bfe6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bfec:	89 f2                	mov    edx,esi
c001bfee:	ee                   	out    dx,al
c001bfef:	89 c8                	mov    eax,ecx
c001bff1:	89 fa                	mov    edx,edi
c001bff3:	ef                   	out    dx,eax
c001bff4:	89 f2                	mov    edx,esi
c001bff6:	ed                   	in     eax,dx
c001bff7:	0f b6 c0             	movzx  eax,al
c001bffa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c000:	74 46                	je     c001c048 <IDE::open(int, int, void*)+0x1e0>
c001c002:	83 ec 0c             	sub    esp,0xc
c001c005:	68 74 25 02 c0       	push   0xc0022574
c001c00a:	eb 34                	jmp    c001c040 <IDE::open(int, int, void*)+0x1d8>
c001c00c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c015:	75 17                	jne    c001c02e <IDE::open(int, int, void*)+0x1c6>
c001c017:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c01c:	74 07                	je     c001c025 <IDE::open(int, int, void*)+0x1bd>
c001c01e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c023:	75 09                	jne    c001c02e <IDE::open(int, int, void*)+0x1c6>
c001c025:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c02c:	eb 1a                	jmp    c001c048 <IDE::open(int, int, void*)+0x1e0>
c001c02e:	83 ec 0c             	sub    esp,0xc
c001c031:	68 7c 25 02 c0       	push   0xc002257c
c001c036:	eb 08                	jmp    c001c040 <IDE::open(int, int, void*)+0x1d8>
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	68 ad 25 02 c0       	push   0xc00225ad
c001c040:	e8 79 8c ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001c045:	83 c4 10             	add    esp,0x10
c001c048:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c04f:	79 1a                	jns    c001c06b <IDE::open(int, int, void*)+0x203>
c001c051:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c057:	83 e0 fc             	and    eax,0xfffffffc
c001c05a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c061:	83 c0 08             	add    eax,0x8
c001c064:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c06b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c071:	89 c2                	mov    edx,eax
c001c073:	83 e2 0f             	and    edx,0xf
c001c076:	66 83 fa 08          	cmp    dx,0x8
c001c07a:	75 0a                	jne    c001c086 <IDE::open(int, int, void*)+0x21e>
c001c07c:	83 e8 02             	sub    eax,0x2
c001c07f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c086:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c08c:	89 c2                	mov    edx,eax
c001c08e:	83 e2 0f             	and    edx,0xf
c001c091:	66 83 fa 08          	cmp    dx,0x8
c001c095:	75 0a                	jne    c001c0a1 <IDE::open(int, int, void*)+0x239>
c001c097:	83 e8 02             	sub    eax,0x2
c001c09a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c0a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c0a8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c0af:	89 d0                	mov    eax,edx
c001c0b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0b8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c0bc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c0bf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0c4:	0f b6 c9             	movzx  ecx,cl
c001c0c7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c0ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0d5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c0d9:	8d 50 02             	lea    edx,[eax+0x2]
c001c0dc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0e1:	0f b6 d2             	movzx  edx,dl
c001c0e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c0ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0ed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0f1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c0f5:	8d 48 03             	lea    ecx,[eax+0x3]
c001c0f8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0fd:	0f b6 c9             	movzx  ecx,cl
c001c100:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c106:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c109:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c10d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c111:	8d 50 04             	lea    edx,[eax+0x4]
c001c114:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c11a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c11f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c126:	66 85 f6             	test   si,si
c001c129:	74 3e                	je     c001c169 <IDE::open(int, int, void*)+0x301>
c001c12b:	0f b6 d2             	movzx  edx,dl
c001c12e:	83 c0 05             	add    eax,0x5
c001c131:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c134:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c138:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c13c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c142:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c147:	eb 20                	jmp    c001c169 <IDE::open(int, int, void*)+0x301>
c001c149:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c153:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c15d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c164:	e9 02 ff ff ff       	jmp    c001c06b <IDE::open(int, int, void*)+0x203>
c001c169:	52                   	push   edx
c001c16a:	52                   	push   edx
c001c16b:	6a 00                	push   0x0
c001c16d:	53                   	push   ebx
c001c16e:	e8 7d fa ff ff       	call   c001bbf0 <IDE::prepareInterrupt(unsigned char)>
c001c173:	59                   	pop    ecx
c001c174:	5e                   	pop    esi
c001c175:	6a 01                	push   0x1
c001c177:	53                   	push   ebx
c001c178:	e8 73 fa ff ff       	call   c001bbf0 <IDE::prepareInterrupt(unsigned char)>
c001c17d:	83 c4 0c             	add    esp,0xc
c001c180:	6a 00                	push   0x0
c001c182:	6a 00                	push   0x0
c001c184:	53                   	push   ebx
c001c185:	e8 98 fc ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001c18a:	83 c4 0c             	add    esp,0xc
c001c18d:	6a 00                	push   0x0
c001c18f:	6a 01                	push   0x1
c001c191:	53                   	push   ebx
c001c192:	e8 8b fc ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c1a1:	74 40                	je     c001c1e3 <IDE::open(int, int, void*)+0x37b>
c001c1a3:	83 ec 0c             	sub    esp,0xc
c001c1a6:	68 d7 25 02 c0       	push   0xc00225d7
c001c1ab:	e8 79 2e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c1b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1b3:	6a 01                	push   0x1
c001c1b5:	68 ea bd 01 c0       	push   0xc001bdea
c001c1ba:	6a 0e                	push   0xe
c001c1bc:	53                   	push   ebx
c001c1bd:	e8 c6 41 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1c2:	83 c4 14             	add    esp,0x14
c001c1c5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1cb:	53                   	push   ebx
c001c1cc:	6a 01                	push   0x1
c001c1ce:	68 06 be 01 c0       	push   0xc001be06
c001c1d3:	6a 0f                	push   0xf
c001c1d5:	53                   	push   ebx
c001c1d6:	e8 ad 41 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1db:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c1e1:	eb 4a                	jmp    c001c22d <IDE::open(int, int, void*)+0x3c5>
c001c1e3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c1ed:	50                   	push   eax
c001c1ee:	6a 0f                	push   0xf
c001c1f0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1f6:	68 f3 25 02 c0       	push   0xc00225f3
c001c1fb:	e8 29 2e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c203:	6a 00                	push   0x0
c001c205:	68 ea bd 01 c0       	push   0xc001bdea
c001c20a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c210:	53                   	push   ebx
c001c211:	e8 72 41 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c216:	83 c4 14             	add    esp,0x14
c001c219:	53                   	push   ebx
c001c21a:	6a 00                	push   0x0
c001c21c:	68 06 be 01 c0       	push   0xc001be06
c001c221:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c227:	53                   	push   ebx
c001c228:	e8 5b 41 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c22d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c22f:	83 c4 20             	add    esp,0x20
c001c232:	83 ec 0c             	sub    esp,0xc
c001c235:	53                   	push   ebx
c001c236:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	6a 07                	push   0x7
c001c23e:	6a 00                	push   0x0
c001c240:	53                   	push   ebx
c001c241:	e8 90 fa ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c246:	83 c4 0c             	add    esp,0xc
c001c249:	6a 07                	push   0x7
c001c24b:	6a 01                	push   0x1
c001c24d:	53                   	push   ebx
c001c24e:	e8 83 fa ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c253:	83 c4 0c             	add    esp,0xc
c001c256:	6a 01                	push   0x1
c001c258:	6a 00                	push   0x0
c001c25a:	53                   	push   ebx
c001c25b:	e8 c2 fb ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001c260:	83 c4 0c             	add    esp,0xc
c001c263:	6a 01                	push   0x1
c001c265:	6a 01                	push   0x1
c001c267:	53                   	push   ebx
c001c268:	e8 b5 fb ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001c26d:	83 c4 2c             	add    esp,0x2c
c001c270:	31 c0                	xor    eax,eax
c001c272:	5b                   	pop    ebx
c001c273:	5e                   	pop    esi
c001c274:	5f                   	pop    edi
c001c275:	5d                   	pop    ebp
c001c276:	c3                   	ret    
c001c277:	90                   	nop

c001c278 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c278:	55                   	push   ebp
c001c279:	57                   	push   edi
c001c27a:	56                   	push   esi
c001c27b:	53                   	push   ebx
c001c27c:	83 ec 1c             	sub    esp,0x1c
c001c27f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c283:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c287:	8d 50 f8             	lea    edx,[eax-0x8]
c001c28a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c28e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c292:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c296:	80 fa 03             	cmp    dl,0x3
c001c299:	77 5d                	ja     c001c2f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c29b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c29f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2a3:	0f b6 db             	movzx  ebx,bl
c001c2a6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c2a9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c2ad:	83 ca 80             	or     edx,0xffffff80
c001c2b0:	0f b6 d2             	movzx  edx,dl
c001c2b3:	52                   	push   edx
c001c2b4:	6a 0c                	push   0xc
c001c2b6:	53                   	push   ebx
c001c2b7:	56                   	push   esi
c001c2b8:	e8 59 f9 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2bd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c2c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c2ca:	0f b6 c0             	movzx  eax,al
c001c2cd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c2d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2d3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c2d8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c2dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c2e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c2e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c2ec:	83 c4 2c             	add    esp,0x2c
c001c2ef:	5b                   	pop    ebx
c001c2f0:	5e                   	pop    esi
c001c2f1:	5f                   	pop    edi
c001c2f2:	5d                   	pop    ebp
c001c2f3:	e9 1e f9 ff ff       	jmp    c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2f8:	3c 07                	cmp    al,0x7
c001c2fa:	77 10                	ja     c001c30c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c2fc:	0f b6 db             	movzx  ebx,bl
c001c2ff:	0f b6 d0             	movzx  edx,al
c001c302:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c30a:	eb 2d                	jmp    c001c339 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c30c:	3c 0d                	cmp    al,0xd
c001c30e:	77 13                	ja     c001c323 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c310:	0f b6 db             	movzx  ebx,bl
c001c313:	0f b6 c0             	movzx  eax,al
c001c316:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c31d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c321:	eb 16                	jmp    c001c339 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c323:	3c 15                	cmp    al,0x15
c001c325:	77 14                	ja     c001c33b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c327:	0f b6 db             	movzx  ebx,bl
c001c32a:	0f b6 c0             	movzx  eax,al
c001c32d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c335:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c339:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c33b:	83 c4 1c             	add    esp,0x1c
c001c33e:	5b                   	pop    ebx
c001c33f:	5e                   	pop    esi
c001c340:	5f                   	pop    edi
c001c341:	5d                   	pop    ebp
c001c342:	c3                   	ret    
c001c343:	90                   	nop

c001c344 <IDE::detect()>:
c001c344:	55                   	push   ebp
c001c345:	57                   	push   edi
c001c346:	56                   	push   esi
c001c347:	53                   	push   ebx
c001c348:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c34e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c355:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c35c:	0f 85 be 02 00 00    	jne    c001c620 <IDE::detect()+0x2dc>
c001c362:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c369:	31 f6                	xor    esi,esi
c001c36b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c373:	31 ed                	xor    ebp,ebp
c001c375:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c379:	c1 e0 06             	shl    eax,0x6
c001c37c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c384:	89 e8                	mov    eax,ebp
c001c386:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c38a:	c1 e0 04             	shl    eax,0x4
c001c38d:	83 c8 a0             	or     eax,0xffffffa0
c001c390:	0f b6 c0             	movzx  eax,al
c001c393:	50                   	push   eax
c001c394:	6a 06                	push   0x6
c001c396:	56                   	push   esi
c001c397:	53                   	push   ebx
c001c398:	e8 79 f8 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c39d:	83 c4 0c             	add    esp,0xc
c001c3a0:	6a 0c                	push   0xc
c001c3a2:	56                   	push   esi
c001c3a3:	53                   	push   ebx
c001c3a4:	e8 2d f9 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3a9:	83 c4 0c             	add    esp,0xc
c001c3ac:	6a 0c                	push   0xc
c001c3ae:	56                   	push   esi
c001c3af:	53                   	push   ebx
c001c3b0:	e8 21 f9 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3b5:	83 c4 0c             	add    esp,0xc
c001c3b8:	6a 0c                	push   0xc
c001c3ba:	56                   	push   esi
c001c3bb:	53                   	push   ebx
c001c3bc:	e8 15 f9 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3c1:	83 c4 0c             	add    esp,0xc
c001c3c4:	6a 0c                	push   0xc
c001c3c6:	56                   	push   esi
c001c3c7:	53                   	push   ebx
c001c3c8:	e8 09 f9 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3cd:	68 ec 00 00 00       	push   0xec
c001c3d2:	6a 07                	push   0x7
c001c3d4:	56                   	push   esi
c001c3d5:	53                   	push   ebx
c001c3d6:	e8 3b f8 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3db:	83 c4 1c             	add    esp,0x1c
c001c3de:	6a 0c                	push   0xc
c001c3e0:	56                   	push   esi
c001c3e1:	53                   	push   ebx
c001c3e2:	e8 ef f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3e7:	83 c4 0c             	add    esp,0xc
c001c3ea:	6a 0c                	push   0xc
c001c3ec:	56                   	push   esi
c001c3ed:	53                   	push   ebx
c001c3ee:	e8 e3 f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3f3:	83 c4 0c             	add    esp,0xc
c001c3f6:	6a 0c                	push   0xc
c001c3f8:	56                   	push   esi
c001c3f9:	53                   	push   ebx
c001c3fa:	e8 d7 f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c3ff:	83 c4 0c             	add    esp,0xc
c001c402:	6a 0c                	push   0xc
c001c404:	56                   	push   esi
c001c405:	53                   	push   ebx
c001c406:	e8 cb f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c40b:	83 c4 0c             	add    esp,0xc
c001c40e:	6a 0c                	push   0xc
c001c410:	56                   	push   esi
c001c411:	53                   	push   ebx
c001c412:	e8 bf f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	84 c0                	test   al,al
c001c41c:	0f 84 8b 01 00 00    	je     c001c5ad <IDE::detect()+0x269>
c001c422:	31 ff                	xor    edi,edi
c001c424:	50                   	push   eax
c001c425:	6a 0c                	push   0xc
c001c427:	56                   	push   esi
c001c428:	53                   	push   ebx
c001c429:	e8 a8 f8 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	a8 01                	test   al,0x1
c001c433:	0f 85 8e 01 00 00    	jne    c001c5c7 <IDE::detect()+0x283>
c001c439:	84 c0                	test   al,al
c001c43b:	78 04                	js     c001c441 <IDE::detect()+0xfd>
c001c43d:	a8 08                	test   al,0x8
c001c43f:	75 27                	jne    c001c468 <IDE::detect()+0x124>
c001c441:	47                   	inc    edi
c001c442:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c448:	7e da                	jle    c001c424 <IDE::detect()+0xe0>
c001c44a:	50                   	push   eax
c001c44b:	50                   	push   eax
c001c44c:	6a 00                	push   0x0
c001c44e:	68 40 4b 4c 00       	push   0x4c4b40
c001c453:	e8 5b be ff ff       	call   c00182b3 <nanoSleep(unsigned long long)>
c001c458:	83 c4 10             	add    esp,0x10
c001c45b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c461:	75 c1                	jne    c001c424 <IDE::detect()+0xe0>
c001c463:	e9 5f 01 00 00       	jmp    c001c5c7 <IDE::detect()+0x283>
c001c468:	31 c9                	xor    ecx,ecx
c001c46a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c46e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c472:	83 ec 0c             	sub    esp,0xc
c001c475:	68 80 00 00 00       	push   0x80
c001c47a:	57                   	push   edi
c001c47b:	6a 00                	push   0x0
c001c47d:	56                   	push   esi
c001c47e:	53                   	push   ebx
c001c47f:	e8 f4 fd ff ff       	call   c001c278 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c484:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c489:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c48d:	89 d1                	mov    ecx,edx
c001c48f:	c1 e0 06             	shl    eax,0x6
c001c492:	01 d8                	add    eax,ebx
c001c494:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c49b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c4a2:	89 f2                	mov    edx,esi
c001c4a4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c4aa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c4ae:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c4b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c4b8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c4bf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c4c7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c4ce:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c4d6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c4dc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c4e3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c4e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4ed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4f1:	83 c4 20             	add    esp,0x20
c001c4f4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c4f7:	83 c0 02             	add    eax,0x2
c001c4fa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c500:	83 c7 02             	add    edi,0x2
c001c503:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c506:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c50c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c510:	75 e2                	jne    c001c4f4 <IDE::detect()+0x1b0>
c001c512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c516:	c1 e0 06             	shl    eax,0x6
c001c519:	01 d8                	add    eax,ebx
c001c51b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c521:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c528:	66 c1 ea 09          	shr    dx,0x9
c001c52c:	83 e2 01             	and    edx,0x1
c001c52f:	84 c9                	test   cl,cl
c001c531:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c537:	75 2f                	jne    c001c568 <IDE::detect()+0x224>
c001c539:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c53f:	85 c0                	test   eax,eax
c001c541:	74 66                	je     c001c5a9 <IDE::detect()+0x265>
c001c543:	50                   	push   eax
c001c544:	55                   	push   ebp
c001c545:	56                   	push   esi
c001c546:	68 0f 26 02 c0       	push   0xc002260f
c001c54b:	e8 d9 2a ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c550:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c557:	e8 de 29 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001c55c:	89 c7                	mov    edi,eax
c001c55e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c561:	e8 e8 02 00 00       	call   c001c84e <ATA::ATA()>
c001c566:	eb 28                	jmp    c001c590 <IDE::detect()+0x24c>
c001c568:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c56e:	55                   	push   ebp
c001c56f:	56                   	push   esi
c001c570:	68 3e 26 02 c0       	push   0xc002263e
c001c575:	e8 af 2a ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c57a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c581:	e8 b4 29 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001c586:	89 c7                	mov    edi,eax
c001c588:	89 04 24             	mov    DWORD PTR [esp],eax
c001c58b:	e8 ee 08 00 00       	call   c001ce7e <ATAPI::ATAPI()>
c001c590:	5a                   	pop    edx
c001c591:	59                   	pop    ecx
c001c592:	57                   	push   edi
c001c593:	53                   	push   ebx
c001c594:	e8 9b 3e ff ff       	call   c0010434 <Device::addChild(Device*)>
c001c599:	8b 07                	mov    eax,DWORD PTR [edi]
c001c59b:	53                   	push   ebx
c001c59c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5a0:	6a 00                	push   0x0
c001c5a2:	57                   	push   edi
c001c5a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5a6:	83 c4 20             	add    esp,0x20
c001c5a9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c5ad:	4d                   	dec    ebp
c001c5ae:	74 0a                	je     c001c5ba <IDE::detect()+0x276>
c001c5b0:	bd 01 00 00 00       	mov    ebp,0x1
c001c5b5:	e9 bb fd ff ff       	jmp    c001c375 <IDE::detect()+0x31>
c001c5ba:	4e                   	dec    esi
c001c5bb:	74 63                	je     c001c620 <IDE::detect()+0x2dc>
c001c5bd:	be 01 00 00 00       	mov    esi,0x1
c001c5c2:	e9 ac fd ff ff       	jmp    c001c373 <IDE::detect()+0x2f>
c001c5c7:	50                   	push   eax
c001c5c8:	6a 04                	push   0x4
c001c5ca:	56                   	push   esi
c001c5cb:	53                   	push   ebx
c001c5cc:	e8 05 f7 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c5d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c5d5:	83 c4 0c             	add    esp,0xc
c001c5d8:	6a 05                	push   0x5
c001c5da:	56                   	push   esi
c001c5db:	53                   	push   ebx
c001c5dc:	e8 f5 f6 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c5e1:	83 c4 10             	add    esp,0x10
c001c5e4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c5e8:	80 fa 14             	cmp    dl,0x14
c001c5eb:	75 04                	jne    c001c5f1 <IDE::detect()+0x2ad>
c001c5ed:	3c eb                	cmp    al,0xeb
c001c5ef:	eb 07                	jmp    c001c5f8 <IDE::detect()+0x2b4>
c001c5f1:	3c 96                	cmp    al,0x96
c001c5f3:	75 b8                	jne    c001c5ad <IDE::detect()+0x269>
c001c5f5:	80 fa 69             	cmp    dl,0x69
c001c5f8:	75 b3                	jne    c001c5ad <IDE::detect()+0x269>
c001c5fa:	68 a1 00 00 00       	push   0xa1
c001c5ff:	6a 07                	push   0x7
c001c601:	56                   	push   esi
c001c602:	53                   	push   ebx
c001c603:	e8 0e f6 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c608:	5f                   	pop    edi
c001c609:	58                   	pop    eax
c001c60a:	6a 00                	push   0x0
c001c60c:	68 40 42 0f 00       	push   0xf4240
c001c611:	e8 9d bc ff ff       	call   c00182b3 <nanoSleep(unsigned long long)>
c001c616:	83 c4 10             	add    esp,0x10
c001c619:	b1 01                	mov    cl,0x1
c001c61b:	e9 4a fe ff ff       	jmp    c001c46a <IDE::detect()+0x126>
c001c620:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c626:	5b                   	pop    ebx
c001c627:	5e                   	pop    esi
c001c628:	5f                   	pop    edi
c001c629:	5d                   	pop    ebp
c001c62a:	c3                   	ret    
c001c62b:	90                   	nop

c001c62c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c62c:	55                   	push   ebp
c001c62d:	57                   	push   edi
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	83 ec 1c             	sub    esp,0x1c
c001c633:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c637:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c63b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c63f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c643:	88 c3                	mov    bl,al
c001c645:	84 c0                	test   al,al
c001c647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c64b:	0f 84 67 01 00 00    	je     c001c7b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c651:	83 ec 0c             	sub    esp,0xc
c001c654:	68 6f 26 02 c0       	push   0xc002266f
c001c659:	e8 cb 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c665:	3c 01                	cmp    al,0x1
c001c667:	75 17                	jne    c001c680 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c669:	83 ec 0c             	sub    esp,0xc
c001c66c:	b3 13                	mov    bl,0x13
c001c66e:	68 7b 26 02 c0       	push   0xc002267b
c001c673:	e8 b1 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	e9 25 01 00 00       	jmp    c001c7a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c680:	3c 02                	cmp    al,0x2
c001c682:	0f 85 ef 00 00 00    	jne    c001c777 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c688:	d1 e6                	shl    esi,1
c001c68a:	09 ee                	or     esi,ebp
c001c68c:	52                   	push   edx
c001c68d:	89 f0                	mov    eax,esi
c001c68f:	6a 01                	push   0x1
c001c691:	0f b6 f0             	movzx  esi,al
c001c694:	c1 e6 06             	shl    esi,0x6
c001c697:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c69f:	50                   	push   eax
c001c6a0:	57                   	push   edi
c001c6a1:	e8 30 f6 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	89 c6                	mov    esi,eax
c001c6ab:	a8 01                	test   al,0x1
c001c6ad:	74 12                	je     c001c6c1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c6af:	83 ec 0c             	sub    esp,0xc
c001c6b2:	b3 07                	mov    bl,0x7
c001c6b4:	68 90 26 02 c0       	push   0xc0022690
c001c6b9:	e8 6b 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	f7 c6 02 00 00 00    	test   esi,0x2
c001c6c7:	74 12                	je     c001c6db <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	b3 03                	mov    bl,0x3
c001c6ce:	68 ae 26 02 c0       	push   0xc00226ae
c001c6d3:	e8 51 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c6d8:	83 c4 10             	add    esp,0x10
c001c6db:	f7 c6 04 00 00 00    	test   esi,0x4
c001c6e1:	74 12                	je     c001c6f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	b3 14                	mov    bl,0x14
c001c6e8:	68 ce 26 02 c0       	push   0xc00226ce
c001c6ed:	e8 37 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c6f2:	83 c4 10             	add    esp,0x10
c001c6f5:	f7 c6 08 00 00 00    	test   esi,0x8
c001c6fb:	74 12                	je     c001c70f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c6fd:	83 ec 0c             	sub    esp,0xc
c001c700:	b3 03                	mov    bl,0x3
c001c702:	68 ae 26 02 c0       	push   0xc00226ae
c001c707:	e8 1d 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c70c:	83 c4 10             	add    esp,0x10
c001c70f:	f7 c6 10 00 00 00    	test   esi,0x10
c001c715:	74 12                	je     c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	b3 15                	mov    bl,0x15
c001c71c:	68 e6 26 02 c0       	push   0xc00226e6
c001c721:	e8 03 29 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	f7 c6 20 00 00 00    	test   esi,0x20
c001c72f:	74 12                	je     c001c743 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c731:	83 ec 0c             	sub    esp,0xc
c001c734:	b3 03                	mov    bl,0x3
c001c736:	68 ae 26 02 c0       	push   0xc00226ae
c001c73b:	e8 e9 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c740:	83 c4 10             	add    esp,0x10
c001c743:	f7 c6 40 00 00 00    	test   esi,0x40
c001c749:	74 12                	je     c001c75d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c74b:	83 ec 0c             	sub    esp,0xc
c001c74e:	b3 16                	mov    bl,0x16
c001c750:	68 00 27 02 c0       	push   0xc0022700
c001c755:	e8 cf 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c75a:	83 c4 10             	add    esp,0x10
c001c75d:	89 f0                	mov    eax,esi
c001c75f:	84 c0                	test   al,al
c001c761:	79 42                	jns    c001c7a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c763:	83 ec 0c             	sub    esp,0xc
c001c766:	b3 0d                	mov    bl,0xd
c001c768:	68 21 27 02 c0       	push   0xc0022721
c001c76d:	e8 b7 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c772:	83 c4 10             	add    esp,0x10
c001c775:	eb 2e                	jmp    c001c7a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c777:	3c 03                	cmp    al,0x3
c001c779:	75 14                	jne    c001c78f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	b3 17                	mov    bl,0x17
c001c780:	68 35 27 02 c0       	push   0xc0022735
c001c785:	e8 9f 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c78a:	83 c4 10             	add    esp,0x10
c001c78d:	eb 16                	jmp    c001c7a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c78f:	3c 04                	cmp    al,0x4
c001c791:	75 12                	jne    c001c7a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c793:	83 ec 0c             	sub    esp,0xc
c001c796:	b3 08                	mov    bl,0x8
c001c798:	68 4b 27 02 c0       	push   0xc002274b
c001c79d:	e8 87 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	50                   	push   eax
c001c7a6:	50                   	push   eax
c001c7a7:	0f b6 c3             	movzx  eax,bl
c001c7aa:	50                   	push   eax
c001c7ab:	68 63 27 02 c0       	push   0xc0022763
c001c7b0:	e8 74 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c7b5:	83 c4 10             	add    esp,0x10
c001c7b8:	83 c4 1c             	add    esp,0x1c
c001c7bb:	88 d8                	mov    al,bl
c001c7bd:	5b                   	pop    ebx
c001c7be:	5e                   	pop    esi
c001c7bf:	5f                   	pop    edi
c001c7c0:	5d                   	pop    ebp
c001c7c1:	c3                   	ret    

c001c7c2 <IDE::polling(unsigned char, unsigned int)>:
c001c7c2:	57                   	push   edi
c001c7c3:	56                   	push   esi
c001c7c4:	53                   	push   ebx
c001c7c5:	bb 04 00 00 00       	mov    ebx,0x4
c001c7ca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7ce:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7d3:	52                   	push   edx
c001c7d4:	6a 0c                	push   0xc
c001c7d6:	56                   	push   esi
c001c7d7:	57                   	push   edi
c001c7d8:	e8 f9 f4 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c7dd:	83 c4 10             	add    esp,0x10
c001c7e0:	4b                   	dec    ebx
c001c7e1:	75 f0                	jne    c001c7d3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c7e3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7e8:	50                   	push   eax
c001c7e9:	6a 0c                	push   0xc
c001c7eb:	56                   	push   esi
c001c7ec:	57                   	push   edi
c001c7ed:	e8 e4 f4 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	a8 01                	test   al,0x1
c001c7f7:	74 12                	je     c001c80b <IDE::polling(unsigned char, unsigned int)+0x49>
c001c7f9:	83 ec 0c             	sub    esp,0xc
c001c7fc:	68 7d 27 02 c0       	push   0xc002277d
c001c801:	e8 23 28 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	eb 17                	jmp    c001c822 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c80b:	a8 20                	test   al,0x20
c001c80d:	75 0f                	jne    c001c81e <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c80f:	4b                   	dec    ebx
c001c810:	74 10                	je     c001c822 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c812:	84 c0                	test   al,al
c001c814:	78 d2                	js     c001c7e8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c816:	a8 08                	test   al,0x8
c001c818:	74 ce                	je     c001c7e8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c81a:	31 c0                	xor    eax,eax
c001c81c:	eb 06                	jmp    c001c824 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c81e:	b0 01                	mov    al,0x1
c001c820:	eb 02                	jmp    c001c824 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c822:	b0 02                	mov    al,0x2
c001c824:	5b                   	pop    ebx
c001c825:	5e                   	pop    esi
c001c826:	5f                   	pop    edi
c001c827:	c3                   	ret    

c001c828 <ATA::close(int, int, void*)>:
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c835:	85 c0                	test   eax,eax
c001c837:	74 0c                	je     c001c845 <ATA::close(int, int, void*)+0x1d>
c001c839:	83 ec 0c             	sub    esp,0xc
c001c83c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c83e:	50                   	push   eax
c001c83f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c842:	83 c4 10             	add    esp,0x10
c001c845:	31 c0                	xor    eax,eax
c001c847:	83 c4 0c             	add    esp,0xc
c001c84a:	c3                   	ret    
c001c84b:	90                   	nop

c001c84c <ATA::powerSaving(PowerSavingLevel)>:
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop

c001c84e <ATA::ATA()>:
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c855:	83 ec 04             	sub    esp,0x4
c001c858:	68 00 02 00 00       	push   0x200
c001c85d:	68 c0 27 02 c0       	push   0xc00227c0
c001c862:	50                   	push   eax
c001c863:	e8 d2 3f ff ff       	call   c001083a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c868:	83 c4 10             	add    esp,0x10
c001c86b:	ba ec 27 02 c0       	mov    edx,0xc00227ec
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	89 10                	mov    DWORD PTR [eax],edx
c001c876:	90                   	nop
c001c877:	83 c4 0c             	add    esp,0xc
c001c87a:	c3                   	ret    
c001c87b:	90                   	nop

c001c87c <ATA::flush(bool)>:
c001c87c:	53                   	push   ebx
c001c87d:	83 ec 08             	sub    esp,0x8
c001c880:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c889:	19 c0                	sbb    eax,eax
c001c88b:	83 e0 fd             	and    eax,0xfffffffd
c001c88e:	05 ea 00 00 00       	add    eax,0xea
c001c893:	50                   	push   eax
c001c894:	6a 07                	push   0x7
c001c896:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c89d:	50                   	push   eax
c001c89e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a4:	e8 6d f3 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a9:	83 c4 0c             	add    esp,0xc
c001c8ac:	6a 00                	push   0x0
c001c8ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b5:	50                   	push   eax
c001c8b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8bc:	e8 01 ff ff ff       	call   c001c7c2 <IDE::polling(unsigned char, unsigned int)>
c001c8c1:	83 c4 18             	add    esp,0x18
c001c8c4:	5b                   	pop    ebx
c001c8c5:	c3                   	ret    

c001c8c6 <ATA::readyForCommand()>:
c001c8c6:	56                   	push   esi
c001c8c7:	53                   	push   ebx
c001c8c8:	31 db                	xor    ebx,ebx
c001c8ca:	50                   	push   eax
c001c8cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8cf:	50                   	push   eax
c001c8d0:	6a 0c                	push   0xc
c001c8d2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c8d9:	50                   	push   eax
c001c8da:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c8e0:	e8 f1 f3 ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	a8 88                	test   al,0x88
c001c8ea:	74 23                	je     c001c90f <ATA::readyForCommand()+0x49>
c001c8ec:	43                   	inc    ebx
c001c8ed:	83 fb 63             	cmp    ebx,0x63
c001c8f0:	7e dd                	jle    c001c8cf <ATA::readyForCommand()+0x9>
c001c8f2:	51                   	push   ecx
c001c8f3:	51                   	push   ecx
c001c8f4:	6a 00                	push   0x0
c001c8f6:	68 40 42 0f 00       	push   0xf4240
c001c8fb:	e8 b3 b9 ff ff       	call   c00182b3 <nanoSleep(unsigned long long)>
c001c900:	83 c4 10             	add    esp,0x10
c001c903:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c909:	75 c4                	jne    c001c8cf <ATA::readyForCommand()+0x9>
c001c90b:	31 c0                	xor    eax,eax
c001c90d:	eb 02                	jmp    c001c911 <ATA::readyForCommand()+0x4b>
c001c90f:	b0 01                	mov    al,0x1
c001c911:	5a                   	pop    edx
c001c912:	5b                   	pop    ebx
c001c913:	5e                   	pop    esi
c001c914:	c3                   	ret    
c001c915:	90                   	nop

c001c916 <ATA::access(unsigned long long, int, void*, bool)>:
c001c916:	55                   	push   ebp
c001c917:	57                   	push   edi
c001c918:	56                   	push   esi
c001c919:	53                   	push   ebx
c001c91a:	83 ec 2c             	sub    esp,0x2c
c001c91d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c921:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c925:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c929:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c92d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c931:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c935:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c939:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c943:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c949:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c94d:	c1 e0 06             	shl    eax,0x6
c001c950:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c958:	74 5d                	je     c001c9b7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c95a:	89 fa                	mov    edx,edi
c001c95c:	89 f0                	mov    eax,esi
c001c95e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c962:	c1 ea 1c             	shr    edx,0x1c
c001c965:	89 d1                	mov    ecx,edx
c001c967:	09 c1                	or     ecx,eax
c001c969:	74 25                	je     c001c990 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c96b:	31 ed                	xor    ebp,ebp
c001c96d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c974:	89 fa                	mov    edx,edi
c001c976:	89 f0                	mov    eax,esi
c001c978:	0f ad d0             	shrd   eax,edx,cl
c001c97b:	d3 ea                	shr    edx,cl
c001c97d:	f6 c1 20             	test   cl,0x20
c001c980:	74 02                	je     c001c984 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c982:	89 d0                	mov    eax,edx
c001c984:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c988:	45                   	inc    ebp
c001c989:	83 fd 06             	cmp    ebp,0x6
c001c98c:	75 df                	jne    c001c96d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c98e:	eb 76                	jmp    c001ca06 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c990:	89 f0                	mov    eax,esi
c001c992:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c997:	89 fa                	mov    edx,edi
c001c999:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9a0:	0f ac d0 10          	shrd   eax,edx,0x10
c001c9a4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9a9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c9ad:	c1 ee 18             	shr    esi,0x18
c001c9b0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c9b5:	eb 56                	jmp    c001ca0d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9b7:	6a 00                	push   0x0
c001c9b9:	6a 3f                	push   0x3f
c001c9bb:	57                   	push   edi
c001c9bc:	56                   	push   esi
c001c9bd:	e8 da 1e 00 00       	call   c001e89c <__umoddi3>
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	40                   	inc    eax
c001c9c6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c9ca:	6a 00                	push   0x0
c001c9cc:	68 f0 03 00 00       	push   0x3f0
c001c9d1:	57                   	push   edi
c001c9d2:	56                   	push   esi
c001c9d3:	e8 c4 1d 00 00       	call   c001e79c <__udivdi3>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c9e0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9e7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9ec:	6a 00                	push   0x0
c001c9ee:	6a 3f                	push   0x3f
c001c9f0:	57                   	push   edi
c001c9f1:	56                   	push   esi
c001c9f2:	e8 a5 1d 00 00       	call   c001e79c <__udivdi3>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	89 c6                	mov    esi,eax
c001c9fc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ca01:	83 e6 0f             	and    esi,0xf
c001ca04:	eb 07                	jmp    c001ca0d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ca06:	31 f6                	xor    esi,esi
c001ca08:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ca0d:	bf 01 00 00 00       	mov    edi,0x1
c001ca12:	50                   	push   eax
c001ca13:	6a 00                	push   0x0
c001ca15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca1c:	50                   	push   eax
c001ca1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca21:	e8 fc f3 ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001ca26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca29:	e8 98 fe ff ff       	call   c001c8c6 <ATA::readyForCommand()>
c001ca2e:	83 c4 10             	add    esp,0x10
c001ca31:	84 c0                	test   al,al
c001ca33:	0f 84 50 02 00 00    	je     c001cc89 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001ca39:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca3f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca45:	c1 e0 04             	shl    eax,0x4
c001ca48:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca4f:	09 c6                	or     esi,eax
c001ca51:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ca56:	75 05                	jne    c001ca5d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca58:	83 ce a0             	or     esi,0xffffffa0
c001ca5b:	eb 03                	jmp    c001ca60 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca5d:	83 ce e0             	or     esi,0xffffffe0
c001ca60:	89 f0                	mov    eax,esi
c001ca62:	0f b6 f0             	movzx  esi,al
c001ca65:	56                   	push   esi
c001ca66:	6a 06                	push   0x6
c001ca68:	51                   	push   ecx
c001ca69:	52                   	push   edx
c001ca6a:	e8 a7 f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	6a 00                	push   0x0
c001ca74:	6a 01                	push   0x1
c001ca76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7d:	50                   	push   eax
c001ca7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca84:	e8 8d f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca89:	83 c4 10             	add    esp,0x10
c001ca8c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca91:	75 6e                	jne    c001cb01 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca93:	6a 00                	push   0x0
c001ca95:	6a 08                	push   0x8
c001ca97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9e:	50                   	push   eax
c001ca9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caa5:	e8 6c f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caaa:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001caaf:	50                   	push   eax
c001cab0:	6a 09                	push   0x9
c001cab2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab9:	50                   	push   eax
c001caba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cac0:	e8 51 f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac5:	83 c4 20             	add    esp,0x20
c001cac8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cacd:	50                   	push   eax
c001cace:	6a 0a                	push   0xa
c001cad0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad7:	50                   	push   eax
c001cad8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cade:	e8 33 f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cae3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cae8:	50                   	push   eax
c001cae9:	6a 0b                	push   0xb
c001caeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caf2:	50                   	push   eax
c001caf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caf9:	e8 18 f1 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cafe:	83 c4 20             	add    esp,0x20
c001cb01:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cb06:	50                   	push   eax
c001cb07:	6a 02                	push   0x2
c001cb09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb10:	50                   	push   eax
c001cb11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb17:	e8 fa f0 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cb21:	50                   	push   eax
c001cb22:	6a 03                	push   0x3
c001cb24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb2b:	50                   	push   eax
c001cb2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb32:	e8 df f0 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb37:	83 c4 20             	add    esp,0x20
c001cb3a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cb3f:	50                   	push   eax
c001cb40:	6a 04                	push   0x4
c001cb42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb49:	50                   	push   eax
c001cb4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb50:	e8 c1 f0 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb5a:	50                   	push   eax
c001cb5b:	6a 05                	push   0x5
c001cb5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb64:	50                   	push   eax
c001cb65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb6b:	e8 a6 f0 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb70:	83 c4 20             	add    esp,0x20
c001cb73:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb78:	0f 94 c0             	sete   al
c001cb7b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb80:	74 09                	je     c001cb8b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb82:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb89:	eb 07                	jmp    c001cb92 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb92:	0f b6 c0             	movzx  eax,al
c001cb95:	50                   	push   eax
c001cb96:	6a 07                	push   0x7
c001cb98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb9f:	50                   	push   eax
c001cba0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba6:	e8 6b f0 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbab:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cbaf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	85 f6                	test   esi,esi
c001cbb8:	0f 84 ac 00 00 00    	je     c001cc6a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cbbe:	50                   	push   eax
c001cbbf:	6a 01                	push   0x1
c001cbc1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbc8:	50                   	push   eax
c001cbc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbcf:	e8 ee fb ff ff       	call   c001c7c2 <IDE::polling(unsigned char, unsigned int)>
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbdd:	84 c0                	test   al,al
c001cbdf:	74 20                	je     c001cc01 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cbe1:	0f b6 f8             	movzx  edi,al
c001cbe4:	0f b6 d2             	movzx  edx,dl
c001cbe7:	57                   	push   edi
c001cbe8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cbef:	50                   	push   eax
c001cbf0:	52                   	push   edx
c001cbf1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf7:	e8 30 fa ff ff       	call   c001c62c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cbfc:	e9 85 00 00 00       	jmp    c001cc86 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cc01:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cc06:	74 41                	je     c001cc49 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cc08:	31 c9                	xor    ecx,ecx
c001cc0a:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cc0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cc12:	50                   	push   eax
c001cc13:	50                   	push   eax
c001cc14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc1b:	50                   	push   eax
c001cc1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc22:	e8 dd ef ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001cc27:	89 c2                	mov    edx,eax
c001cc29:	89 e8                	mov    eax,ebp
c001cc2b:	66 ef                	out    dx,ax
c001cc2d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cc31:	83 c4 10             	add    esp,0x10
c001cc34:	41                   	inc    ecx
c001cc35:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cc3b:	75 cd                	jne    c001cc0a <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cc3d:	4e                   	dec    esi
c001cc3e:	81 c7 00 02 00 00    	add    edi,0x200
c001cc44:	e9 6d ff ff ff       	jmp    c001cbb6 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cc49:	0f b6 d2             	movzx  edx,dl
c001cc4c:	51                   	push   ecx
c001cc4d:	51                   	push   ecx
c001cc4e:	52                   	push   edx
c001cc4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc55:	e8 aa ef ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001cc5a:	b9 00 01 00 00       	mov    ecx,0x100
c001cc5f:	89 c2                	mov    edx,eax
c001cc61:	fc                   	cld    
c001cc62:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc65:	83 c4 10             	add    esp,0x10
c001cc68:	eb d3                	jmp    c001cc3d <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc6a:	31 ff                	xor    edi,edi
c001cc6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc71:	74 16                	je     c001cc89 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc73:	50                   	push   eax
c001cc74:	50                   	push   eax
c001cc75:	31 c0                	xor    eax,eax
c001cc77:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc7c:	0f 94 c0             	sete   al
c001cc7f:	50                   	push   eax
c001cc80:	53                   	push   ebx
c001cc81:	e8 f6 fb ff ff       	call   c001c87c <ATA::flush(bool)>
c001cc86:	83 c4 10             	add    esp,0x10
c001cc89:	83 c4 2c             	add    esp,0x2c
c001cc8c:	89 f8                	mov    eax,edi
c001cc8e:	5b                   	pop    ebx
c001cc8f:	5e                   	pop    esi
c001cc90:	5f                   	pop    edi
c001cc91:	5d                   	pop    ebp
c001cc92:	c3                   	ret    
c001cc93:	90                   	nop

c001cc94 <ATA::read(unsigned long long, int, void*)>:
c001cc94:	57                   	push   edi
c001cc95:	b8 04 00 00 00       	mov    eax,0x4
c001cc9a:	56                   	push   esi
c001cc9b:	53                   	push   ebx
c001cc9c:	83 ec 10             	sub    esp,0x10
c001cc9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cca3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cca7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001ccaa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccb2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001ccb8:	77 3b                	ja     c001ccf5 <ATA::read(unsigned long long, int, void*)+0x61>
c001ccba:	b8 06 00 00 00       	mov    eax,0x6
c001ccbf:	85 d2                	test   edx,edx
c001ccc1:	74 32                	je     c001ccf5 <ATA::read(unsigned long long, int, void*)+0x61>
c001ccc3:	50                   	push   eax
c001ccc4:	50                   	push   eax
c001ccc5:	6a 00                	push   0x0
c001ccc7:	52                   	push   edx
c001ccc8:	53                   	push   ebx
c001ccc9:	57                   	push   edi
c001ccca:	56                   	push   esi
c001cccb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cccf:	e8 42 fc ff ff       	call   c001c916 <ATA::access(unsigned long long, int, void*, bool)>
c001ccd4:	83 c4 20             	add    esp,0x20
c001ccd7:	85 c0                	test   eax,eax
c001ccd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccdd:	75 11                	jne    c001ccf0 <ATA::read(unsigned long long, int, void*)+0x5c>
c001ccdf:	01 1d 44 55 02 c0    	add    DWORD PTR ds:0xc0025544,ebx
c001cce5:	e8 b8 fe fe ff       	call   c000cba2 <VgaText::updateDiskUsage()>
c001ccea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccee:	eb 05                	jmp    c001ccf5 <ATA::read(unsigned long long, int, void*)+0x61>
c001ccf0:	b8 01 00 00 00       	mov    eax,0x1
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	5b                   	pop    ebx
c001ccf9:	5e                   	pop    esi
c001ccfa:	5f                   	pop    edi
c001ccfb:	c3                   	ret    

c001ccfc <ATA::write(unsigned long long, int, void*)>:
c001ccfc:	57                   	push   edi
c001ccfd:	b8 04 00 00 00       	mov    eax,0x4
c001cd02:	56                   	push   esi
c001cd03:	53                   	push   ebx
c001cd04:	83 ec 10             	sub    esp,0x10
c001cd07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd0b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cd0f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cd12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd1a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cd20:	77 3b                	ja     c001cd5d <ATA::write(unsigned long long, int, void*)+0x61>
c001cd22:	b8 06 00 00 00       	mov    eax,0x6
c001cd27:	85 d2                	test   edx,edx
c001cd29:	74 32                	je     c001cd5d <ATA::write(unsigned long long, int, void*)+0x61>
c001cd2b:	50                   	push   eax
c001cd2c:	50                   	push   eax
c001cd2d:	6a 01                	push   0x1
c001cd2f:	52                   	push   edx
c001cd30:	53                   	push   ebx
c001cd31:	57                   	push   edi
c001cd32:	56                   	push   esi
c001cd33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd37:	e8 da fb ff ff       	call   c001c916 <ATA::access(unsigned long long, int, void*, bool)>
c001cd3c:	83 c4 20             	add    esp,0x20
c001cd3f:	85 c0                	test   eax,eax
c001cd41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd45:	75 11                	jne    c001cd58 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cd47:	01 1d 40 55 02 c0    	add    DWORD PTR ds:0xc0025540,ebx
c001cd4d:	e8 50 fe fe ff       	call   c000cba2 <VgaText::updateDiskUsage()>
c001cd52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd56:	eb 05                	jmp    c001cd5d <ATA::write(unsigned long long, int, void*)+0x61>
c001cd58:	b8 01 00 00 00       	mov    eax,0x1
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	5b                   	pop    ebx
c001cd61:	5e                   	pop    esi
c001cd62:	5f                   	pop    edi
c001cd63:	c3                   	ret    

c001cd64 <ATA::detectCHS()>:
c001cd64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd68:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd6e:	c1 e0 06             	shl    eax,0x6
c001cd71:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd77:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd81:	c7 44 24 04 cf 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc00227cf
c001cd89:	e9 30 7f ff ff       	jmp    c0014cbe <Krnl::panic(char const*)>

c001cd8e <ATA::open(int, int, void*)>:
c001cd8e:	53                   	push   ebx
c001cd8f:	83 ec 08             	sub    esp,0x8
c001cd92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd9e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cda4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cdaa:	c1 e0 06             	shl    eax,0x6
c001cdad:	01 d0                	add    eax,edx
c001cdaf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cdb6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cdbc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cdc3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdcd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cdd3:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cdda:	75 0c                	jne    c001cde8 <ATA::open(int, int, void*)+0x5a>
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	53                   	push   ebx
c001cde0:	e8 7f ff ff ff       	call   c001cd64 <ATA::detectCHS()>
c001cde5:	83 c4 10             	add    esp,0x10
c001cde8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdee:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdf4:	c1 e0 06             	shl    eax,0x6
c001cdf7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cdfe:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce08:	d1 e8                	shr    eax,1
c001ce0a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ce10:	6a 04                	push   0x4
c001ce12:	6a 0c                	push   0xc
c001ce14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce1b:	50                   	push   eax
c001ce1c:	52                   	push   edx
c001ce1d:	e8 f4 ed ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce22:	90                   	nop
c001ce23:	90                   	nop
c001ce24:	6a 00                	push   0x0
c001ce26:	6a 0c                	push   0xc
c001ce28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce2f:	50                   	push   eax
c001ce30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce36:	e8 db ed ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3b:	83 c4 14             	add    esp,0x14
c001ce3e:	53                   	push   ebx
c001ce3f:	e8 5e 3a ff ff       	call   c00108a2 <PhysicalDisk::startCache()>
c001ce44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce47:	e8 64 53 ff ff       	call   c00121b0 <createPartitionsForDisk(PhysicalDisk*)>
c001ce4c:	31 c0                	xor    eax,eax
c001ce4e:	83 c4 18             	add    esp,0x18
c001ce51:	5b                   	pop    ebx
c001ce52:	c3                   	ret    
c001ce53:	90                   	nop

c001ce54 <ATAPI::write(unsigned long long, int, void*)>:
c001ce54:	b8 03 00 00 00       	mov    eax,0x3
c001ce59:	c3                   	ret    

c001ce5a <ATAPI::close(int, int, void*)>:
c001ce5a:	83 ec 0c             	sub    esp,0xc
c001ce5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce67:	85 c0                	test   eax,eax
c001ce69:	74 0c                	je     c001ce77 <ATAPI::close(int, int, void*)+0x1d>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce70:	50                   	push   eax
c001ce71:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce74:	83 c4 10             	add    esp,0x10
c001ce77:	31 c0                	xor    eax,eax
c001ce79:	83 c4 0c             	add    esp,0xc
c001ce7c:	c3                   	ret    
c001ce7d:	90                   	nop

c001ce7e <ATAPI::ATAPI()>:
c001ce7e:	83 ec 0c             	sub    esp,0xc
c001ce81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce85:	83 ec 04             	sub    esp,0x4
c001ce88:	68 00 08 00 00       	push   0x800
c001ce8d:	68 18 28 02 c0       	push   0xc0022818
c001ce92:	50                   	push   eax
c001ce93:	e8 a2 39 ff ff       	call   c001083a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	ba 58 28 02 c0       	mov    edx,0xc0022858
c001cea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea4:	89 10                	mov    DWORD PTR [eax],edx
c001cea6:	90                   	nop
c001cea7:	83 c4 0c             	add    esp,0xc
c001ceaa:	c3                   	ret    
c001ceab:	90                   	nop

c001ceac <ATAPI::readyForCommand()>:
c001ceac:	56                   	push   esi
c001cead:	53                   	push   ebx
c001ceae:	31 db                	xor    ebx,ebx
c001ceb0:	50                   	push   eax
c001ceb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceb5:	50                   	push   eax
c001ceb6:	6a 0c                	push   0xc
c001ceb8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cebf:	50                   	push   eax
c001cec0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cec6:	e8 0b ee ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	a8 88                	test   al,0x88
c001ced0:	74 23                	je     c001cef5 <ATAPI::readyForCommand()+0x49>
c001ced2:	43                   	inc    ebx
c001ced3:	83 fb 63             	cmp    ebx,0x63
c001ced6:	7e dd                	jle    c001ceb5 <ATAPI::readyForCommand()+0x9>
c001ced8:	51                   	push   ecx
c001ced9:	51                   	push   ecx
c001ceda:	6a 00                	push   0x0
c001cedc:	68 40 42 0f 00       	push   0xf4240
c001cee1:	e8 cd b3 ff ff       	call   c00182b3 <nanoSleep(unsigned long long)>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ceef:	75 c4                	jne    c001ceb5 <ATAPI::readyForCommand()+0x9>
c001cef1:	31 c0                	xor    eax,eax
c001cef3:	eb 02                	jmp    c001cef7 <ATAPI::readyForCommand()+0x4b>
c001cef5:	b0 01                	mov    al,0x1
c001cef7:	5a                   	pop    edx
c001cef8:	5b                   	pop    ebx
c001cef9:	5e                   	pop    esi
c001cefa:	c3                   	ret    
c001cefb:	90                   	nop

c001cefc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cefc:	55                   	push   ebp
c001cefd:	57                   	push   edi
c001cefe:	56                   	push   esi
c001ceff:	53                   	push   ebx
c001cf00:	83 ec 20             	sub    esp,0x20
c001cf03:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cf07:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf0b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cf0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cf13:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cf17:	6a 01                	push   0x1
c001cf19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf20:	50                   	push   eax
c001cf21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf27:	e8 f6 ee ff ff       	call   c001be22 <IDE::enableIRQs(unsigned char, bool)>
c001cf2c:	5e                   	pop    esi
c001cf2d:	58                   	pop    eax
c001cf2e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf35:	50                   	push   eax
c001cf36:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf3c:	e8 af ec ff ff       	call   c001bbf0 <IDE::prepareInterrupt(unsigned char)>
c001cf41:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf44:	e8 63 ff ff ff       	call   c001ceac <ATAPI::readyForCommand()>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	84 c0                	test   al,al
c001cf4e:	75 0a                	jne    c001cf5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cf50:	bb 01 00 00 00       	mov    ebx,0x1
c001cf55:	e9 57 02 00 00       	jmp    c001d1b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf5a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cf60:	c1 e0 04             	shl    eax,0x4
c001cf63:	0f b6 c0             	movzx  eax,al
c001cf66:	50                   	push   eax
c001cf67:	6a 06                	push   0x6
c001cf69:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf70:	50                   	push   eax
c001cf71:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf77:	e8 9a ec ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7c:	6a 00                	push   0x0
c001cf7e:	6a 01                	push   0x1
c001cf80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf87:	50                   	push   eax
c001cf88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf8e:	e8 83 ec ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf93:	83 c4 20             	add    esp,0x20
c001cf96:	0f b6 c3             	movzx  eax,bl
c001cf99:	0f b6 df             	movzx  ebx,bh
c001cf9c:	50                   	push   eax
c001cf9d:	6a 04                	push   0x4
c001cf9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfa6:	50                   	push   eax
c001cfa7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfad:	e8 64 ec ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb2:	53                   	push   ebx
c001cfb3:	6a 05                	push   0x5
c001cfb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfbc:	50                   	push   eax
c001cfbd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfc3:	e8 4e ec ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc8:	83 c4 20             	add    esp,0x20
c001cfcb:	68 a0 00 00 00       	push   0xa0
c001cfd0:	6a 07                	push   0x7
c001cfd2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfd9:	50                   	push   eax
c001cfda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfe0:	e8 31 ec ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfe5:	83 c4 0c             	add    esp,0xc
c001cfe8:	6a 01                	push   0x1
c001cfea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cff1:	50                   	push   eax
c001cff2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cff8:	e8 c5 f7 ff ff       	call   c001c7c2 <IDE::polling(unsigned char, unsigned int)>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d006:	84 c0                	test   al,al
c001d008:	74 23                	je     c001d02d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d00a:	0f b6 d8             	movzx  ebx,al
c001d00d:	0f b6 d2             	movzx  edx,dl
c001d010:	53                   	push   ebx
c001d011:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d018:	50                   	push   eax
c001d019:	52                   	push   edx
c001d01a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d020:	e8 07 f6 ff ff       	call   c001c62c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	e9 84 01 00 00       	jmp    c001d1b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d02d:	0f b6 d2             	movzx  edx,dl
c001d030:	53                   	push   ebx
c001d031:	53                   	push   ebx
c001d032:	52                   	push   edx
c001d033:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d039:	e8 c6 eb ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001d03e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d042:	b9 06 00 00 00       	mov    ecx,0x6
c001d047:	89 c2                	mov    edx,eax
c001d049:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d04c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d050:	83 c4 10             	add    esp,0x10
c001d053:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d059:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d060:	85 db                	test   ebx,ebx
c001d062:	0f 84 ec 00 00 00    	je     c001d154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d068:	51                   	push   ecx
c001d069:	51                   	push   ecx
c001d06a:	52                   	push   edx
c001d06b:	50                   	push   eax
c001d06c:	e8 13 ed ff ff       	call   c001bd84 <IDE::waitInterrupt(unsigned char)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	84 c0                	test   al,al
c001d076:	0f 84 d4 fe ff ff    	je     c001cf50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d07c:	56                   	push   esi
c001d07d:	56                   	push   esi
c001d07e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d085:	50                   	push   eax
c001d086:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d08c:	e8 5f eb ff ff       	call   c001bbf0 <IDE::prepareInterrupt(unsigned char)>
c001d091:	83 c4 0c             	add    esp,0xc
c001d094:	6a 04                	push   0x4
c001d096:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d09d:	50                   	push   eax
c001d09e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0a4:	e8 2d ec ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	89 c6                	mov    esi,eax
c001d0ae:	6a 05                	push   0x5
c001d0b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b7:	50                   	push   eax
c001d0b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0be:	e8 13 ec ff ff       	call   c001bcd6 <IDE::read(unsigned char, unsigned char)>
c001d0c3:	89 f1                	mov    ecx,esi
c001d0c5:	0f b6 c0             	movzx  eax,al
c001d0c8:	0f b6 f1             	movzx  esi,cl
c001d0cb:	c1 e0 08             	shl    eax,0x8
c001d0ce:	09 c6                	or     esi,eax
c001d0d0:	d1 fe                	sar    esi,1
c001d0d2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d0d6:	83 c4 10             	add    esp,0x10
c001d0d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d0de:	74 41                	je     c001d121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d0e0:	31 c9                	xor    ecx,ecx
c001d0e2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0e8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0ef:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d0f3:	75 0a                	jne    c001d0ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d0f5:	01 c9                	add    ecx,ecx
c001d0f7:	01 cd                	add    ebp,ecx
c001d0f9:	4b                   	dec    ebx
c001d0fa:	e9 54 ff ff ff       	jmp    c001d053 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d0ff:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d104:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d108:	51                   	push   ecx
c001d109:	51                   	push   ecx
c001d10a:	52                   	push   edx
c001d10b:	50                   	push   eax
c001d10c:	e8 f3 ea ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001d111:	89 c2                	mov    edx,eax
c001d113:	89 f0                	mov    eax,esi
c001d115:	66 ef                	out    dx,ax
c001d117:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d11b:	83 c4 10             	add    esp,0x10
c001d11e:	41                   	inc    ecx
c001d11f:	eb c1                	jmp    c001d0e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d121:	31 f6                	xor    esi,esi
c001d123:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d129:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d130:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d134:	75 06                	jne    c001d13c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d136:	01 f6                	add    esi,esi
c001d138:	01 f5                	add    ebp,esi
c001d13a:	eb bd                	jmp    c001d0f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d13c:	51                   	push   ecx
c001d13d:	51                   	push   ecx
c001d13e:	52                   	push   edx
c001d13f:	50                   	push   eax
c001d140:	e8 bf ea ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001d145:	89 c2                	mov    edx,eax
c001d147:	66 ed                	in     ax,dx
c001d149:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d14e:	83 c4 10             	add    esp,0x10
c001d151:	46                   	inc    esi
c001d152:	eb cf                	jmp    c001d123 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d154:	51                   	push   ecx
c001d155:	51                   	push   ecx
c001d156:	52                   	push   edx
c001d157:	50                   	push   eax
c001d158:	e8 27 ec ff ff       	call   c001bd84 <IDE::waitInterrupt(unsigned char)>
c001d15d:	83 c4 10             	add    esp,0x10
c001d160:	84 c0                	test   al,al
c001d162:	0f 84 e8 fd ff ff    	je     c001cf50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d168:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d16d:	52                   	push   edx
c001d16e:	52                   	push   edx
c001d16f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d176:	50                   	push   eax
c001d177:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17d:	e8 6e ea ff ff       	call   c001bbf0 <IDE::prepareInterrupt(unsigned char)>
c001d182:	83 c4 10             	add    esp,0x10
c001d185:	50                   	push   eax
c001d186:	50                   	push   eax
c001d187:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d18e:	50                   	push   eax
c001d18f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d195:	e8 6a ea ff ff       	call   c001bc04 <IDE::getBase(unsigned char)>
c001d19a:	8d 50 07             	lea    edx,[eax+0x7]
c001d19d:	ec                   	in     al,dx
c001d19e:	83 c4 10             	add    esp,0x10
c001d1a1:	a8 88                	test   al,0x88
c001d1a3:	74 0a                	je     c001d1af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d1a5:	4b                   	dec    ebx
c001d1a6:	75 dd                	jne    c001d185 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d1a8:	bb 02 00 00 00       	mov    ebx,0x2
c001d1ad:	eb 02                	jmp    c001d1b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1af:	31 db                	xor    ebx,ebx
c001d1b1:	83 c4 1c             	add    esp,0x1c
c001d1b4:	89 d8                	mov    eax,ebx
c001d1b6:	5b                   	pop    ebx
c001d1b7:	5e                   	pop    esi
c001d1b8:	5f                   	pop    edi
c001d1b9:	5d                   	pop    ebp
c001d1ba:	c3                   	ret    
c001d1bb:	90                   	nop

c001d1bc <ATAPI::diskRemoved()>:
c001d1bc:	83 ec 18             	sub    esp,0x18
c001d1bf:	68 23 28 02 c0       	push   0xc0022823
c001d1c4:	e8 60 1e ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001d1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1cd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d1d4:	83 c4 1c             	add    esp,0x1c
c001d1d7:	c3                   	ret    

c001d1d8 <ATAPI::eject()>:
c001d1d8:	57                   	push   edi
c001d1d9:	b9 03 00 00 00       	mov    ecx,0x3
c001d1de:	53                   	push   ebx
c001d1df:	83 ec 14             	sub    esp,0x14
c001d1e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1e6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d1ea:	fc                   	cld    
c001d1eb:	31 c0                	xor    eax,eax
c001d1ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1ef:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d1f4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d1f9:	50                   	push   eax
c001d1fa:	50                   	push   eax
c001d1fb:	6a 00                	push   0x0
c001d1fd:	6a 00                	push   0x0
c001d1ff:	6a 00                	push   0x0
c001d201:	6a 02                	push   0x2
c001d203:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d207:	50                   	push   eax
c001d208:	53                   	push   ebx
c001d209:	e8 ee fc ff ff       	call   c001cefc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d20e:	83 c4 14             	add    esp,0x14
c001d211:	53                   	push   ebx
c001d212:	e8 a5 ff ff ff       	call   c001d1bc <ATAPI::diskRemoved()>
c001d217:	83 c4 24             	add    esp,0x24
c001d21a:	5b                   	pop    ebx
c001d21b:	5f                   	pop    edi
c001d21c:	c3                   	ret    
c001d21d:	90                   	nop

c001d21e <ATAPI::diskInserted()>:
c001d21e:	53                   	push   ebx
c001d21f:	83 ec 14             	sub    esp,0x14
c001d222:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d226:	68 39 28 02 c0       	push   0xc0022839
c001d22b:	e8 f9 1d ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001d230:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d237:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d23a:	e8 63 36 ff ff       	call   c00108a2 <PhysicalDisk::startCache()>
c001d23f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d243:	83 c4 18             	add    esp,0x18
c001d246:	5b                   	pop    ebx
c001d247:	e9 64 4f ff ff       	jmp    c00121b0 <createPartitionsForDisk(PhysicalDisk*)>

c001d24c <ATAPI::detectMedia()>:
c001d24c:	56                   	push   esi
c001d24d:	53                   	push   ebx
c001d24e:	83 ec 28             	sub    esp,0x28
c001d251:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d255:	6a 0c                	push   0xc
c001d257:	6a 00                	push   0x0
c001d259:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d25d:	56                   	push   esi
c001d25e:	e8 a5 33 fe ff       	call   c0000608 <memset>
c001d263:	58                   	pop    eax
c001d264:	5a                   	pop    edx
c001d265:	6a 00                	push   0x0
c001d267:	6a 00                	push   0x0
c001d269:	6a 00                	push   0x0
c001d26b:	6a 00                	push   0x0
c001d26d:	56                   	push   esi
c001d26e:	53                   	push   ebx
c001d26f:	e8 88 fc ff ff       	call   c001cefc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d274:	83 c4 1c             	add    esp,0x1c
c001d277:	6a 0c                	push   0xc
c001d279:	6a 00                	push   0x0
c001d27b:	56                   	push   esi
c001d27c:	e8 87 33 fe ff       	call   c0000608 <memset>
c001d281:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d286:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d28b:	59                   	pop    ecx
c001d28c:	58                   	pop    eax
c001d28d:	6a 01                	push   0x1
c001d28f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d293:	50                   	push   eax
c001d294:	6a 00                	push   0x0
c001d296:	6a 12                	push   0x12
c001d298:	56                   	push   esi
c001d299:	53                   	push   ebx
c001d29a:	e8 5d fc ff ff       	call   c001cefc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d29f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d2a3:	83 c4 20             	add    esp,0x20
c001d2a6:	83 e0 7f             	and    eax,0x7f
c001d2a9:	3c 70                	cmp    al,0x70
c001d2ab:	74 15                	je     c001d2c2 <ATAPI::detectMedia()+0x76>
c001d2ad:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2b4:	75 0c                	jne    c001d2c2 <ATAPI::detectMedia()+0x76>
c001d2b6:	83 ec 0c             	sub    esp,0xc
c001d2b9:	53                   	push   ebx
c001d2ba:	e8 5f ff ff ff       	call   c001d21e <ATAPI::diskInserted()>
c001d2bf:	83 c4 10             	add    esp,0x10
c001d2c2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d2c6:	83 e0 0f             	and    eax,0xf
c001d2c9:	3c 02                	cmp    al,0x2
c001d2cb:	75 1b                	jne    c001d2e8 <ATAPI::detectMedia()+0x9c>
c001d2cd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d2d2:	75 2d                	jne    c001d301 <ATAPI::detectMedia()+0xb5>
c001d2d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2db:	74 24                	je     c001d301 <ATAPI::detectMedia()+0xb5>
c001d2dd:	83 ec 0c             	sub    esp,0xc
c001d2e0:	53                   	push   ebx
c001d2e1:	e8 d6 fe ff ff       	call   c001d1bc <ATAPI::diskRemoved()>
c001d2e6:	eb 16                	jmp    c001d2fe <ATAPI::detectMedia()+0xb2>
c001d2e8:	84 c0                	test   al,al
c001d2ea:	75 15                	jne    c001d301 <ATAPI::detectMedia()+0xb5>
c001d2ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2f3:	75 0c                	jne    c001d301 <ATAPI::detectMedia()+0xb5>
c001d2f5:	83 ec 0c             	sub    esp,0xc
c001d2f8:	53                   	push   ebx
c001d2f9:	e8 20 ff ff ff       	call   c001d21e <ATAPI::diskInserted()>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	83 c4 24             	add    esp,0x24
c001d304:	5b                   	pop    ebx
c001d305:	5e                   	pop    esi
c001d306:	c3                   	ret    
c001d307:	90                   	nop

c001d308 <ATAPI::open(int, int, void*)>:
c001d308:	53                   	push   ebx
c001d309:	83 ec 08             	sub    esp,0x8
c001d30c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d318:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d31e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d324:	c1 e0 06             	shl    eax,0x6
c001d327:	01 d0                	add    eax,edx
c001d329:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d330:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d336:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d33d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d347:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d34d:	6a 04                	push   0x4
c001d34f:	6a 0c                	push   0xc
c001d351:	51                   	push   ecx
c001d352:	52                   	push   edx
c001d353:	e8 be e8 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d358:	90                   	nop
c001d359:	90                   	nop
c001d35a:	6a 00                	push   0x0
c001d35c:	6a 0c                	push   0xc
c001d35e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d365:	50                   	push   eax
c001d366:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d36c:	e8 a5 e8 ff ff       	call   c001bc16 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d371:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d378:	83 c4 14             	add    esp,0x14
c001d37b:	53                   	push   ebx
c001d37c:	e8 cb fe ff ff       	call   c001d24c <ATAPI::detectMedia()>
c001d381:	31 c0                	xor    eax,eax
c001d383:	83 c4 18             	add    esp,0x18
c001d386:	5b                   	pop    ebx
c001d387:	c3                   	ret    

c001d388 <ATAPI::read(unsigned long long, int, void*)>:
c001d388:	55                   	push   ebp
c001d389:	57                   	push   edi
c001d38a:	56                   	push   esi
c001d38b:	53                   	push   ebx
c001d38c:	83 ec 1c             	sub    esp,0x1c
c001d38f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d393:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d397:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d39b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d3a2:	74 41                	je     c001d3e5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d3a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3a8:	b9 03 00 00 00       	mov    ecx,0x3
c001d3ad:	fc                   	cld    
c001d3ae:	31 c0                	xor    eax,eax
c001d3b0:	86 fb                	xchg   bl,bh
c001d3b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3b4:	c1 c3 10             	rol    ebx,0x10
c001d3b7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d3bc:	89 e8                	mov    eax,ebp
c001d3be:	86 fb                	xchg   bl,bh
c001d3c0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d3c4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d3c8:	50                   	push   eax
c001d3c9:	50                   	push   eax
c001d3ca:	55                   	push   ebp
c001d3cb:	c1 e5 0b             	shl    ebp,0xb
c001d3ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3d2:	6a 00                	push   0x0
c001d3d4:	55                   	push   ebp
c001d3d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3d9:	50                   	push   eax
c001d3da:	56                   	push   esi
c001d3db:	e8 1c fb ff ff       	call   c001cefc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3e0:	83 c4 20             	add    esp,0x20
c001d3e3:	eb 1a                	jmp    c001d3ff <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d3e5:	83 ec 0c             	sub    esp,0xc
c001d3e8:	56                   	push   esi
c001d3e9:	e8 5e fe ff ff       	call   c001d24c <ATAPI::detectMedia()>
c001d3ee:	83 c4 10             	add    esp,0x10
c001d3f1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d3f8:	75 aa                	jne    c001d3a4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d3fa:	b8 02 00 00 00       	mov    eax,0x2
c001d3ff:	83 c4 1c             	add    esp,0x1c
c001d402:	5b                   	pop    ebx
c001d403:	5e                   	pop    esi
c001d404:	5f                   	pop    edi
c001d405:	5d                   	pop    ebp
c001d406:	c3                   	ret    
c001d407:	90                   	nop

c001d408 <AVX::open(int, int, void*)>:
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	e8 08 10 00 00       	call   c001e418 <avxInit>
c001d410:	b8 00 00 00 00       	mov    eax,0x0
c001d415:	83 c4 0c             	add    esp,0xc
c001d418:	c3                   	ret    
c001d419:	90                   	nop

c001d41a <AVX::close(int, int, void*)>:
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	e8 f7 0f 00 00       	call   c001e419 <avxClose>
c001d422:	b8 00 00 00 00       	mov    eax,0x0
c001d427:	83 c4 0c             	add    esp,0xc
c001d42a:	c3                   	ret    
c001d42b:	90                   	nop

c001d42c <AVX::available()>:
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	e8 dc 0f 00 00       	call   c001e410 <avxDetect>
c001d434:	85 c0                	test   eax,eax
c001d436:	0f 95 c0             	setne  al
c001d439:	83 c4 0c             	add    esp,0xc
c001d43c:	c3                   	ret    
c001d43d:	90                   	nop

c001d43e <AVX::save(void*)>:
c001d43e:	83 ec 0c             	sub    esp,0xc
c001d441:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	50                   	push   eax
c001d449:	e8 c8 0f 00 00       	call   c001e416 <avxSave>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	90                   	nop
c001d452:	83 c4 0c             	add    esp,0xc
c001d455:	c3                   	ret    

c001d456 <AVX::load(void*)>:
c001d456:	83 ec 0c             	sub    esp,0xc
c001d459:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	50                   	push   eax
c001d461:	e8 b1 0f 00 00       	call   c001e417 <avxLoad>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	90                   	nop
c001d46a:	83 c4 0c             	add    esp,0xc
c001d46d:	c3                   	ret    

c001d46e <AVX::AVX()>:
c001d46e:	83 ec 0c             	sub    esp,0xc
c001d471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d475:	83 ec 08             	sub    esp,0x8
c001d478:	68 84 28 02 c0       	push   0xc0022884
c001d47d:	50                   	push   eax
c001d47e:	e8 95 34 ff ff       	call   c0010918 <FPU::FPU(char const*)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	ba 94 28 02 c0       	mov    edx,0xc0022894
c001d48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48f:	89 10                	mov    DWORD PTR [eax],edx
c001d491:	90                   	nop
c001d492:	83 c4 0c             	add    esp,0xc
c001d495:	c3                   	ret    

c001d496 <MMX::available()>:
c001d496:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001d49b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d4a1:	83 e0 20             	and    eax,0x20
c001d4a4:	84 c0                	test   al,al
c001d4a6:	0f 95 c0             	setne  al
c001d4a9:	c3                   	ret    

c001d4aa <MMX::open(int, int, void*)>:
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	e8 da 0f 00 00       	call   c001e48c <x87Init>
c001d4b2:	b8 00 00 00 00       	mov    eax,0x0
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	c3                   	ret    
c001d4bb:	90                   	nop

c001d4bc <MMX::close(int, int, void*)>:
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	e8 e2 0f 00 00       	call   c001e4a6 <x87Close>
c001d4c4:	b8 00 00 00 00       	mov    eax,0x0
c001d4c9:	83 c4 0c             	add    esp,0xc
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <MMX::save(void*)>:
c001d4ce:	83 ec 0c             	sub    esp,0xc
c001d4d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	50                   	push   eax
c001d4d9:	e8 a3 0f 00 00       	call   c001e481 <x87Save>
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	90                   	nop
c001d4e2:	83 c4 0c             	add    esp,0xc
c001d4e5:	c3                   	ret    

c001d4e6 <MMX::load(void*)>:
c001d4e6:	83 ec 0c             	sub    esp,0xc
c001d4e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4ed:	83 ec 0c             	sub    esp,0xc
c001d4f0:	50                   	push   eax
c001d4f1:	e8 91 0f 00 00       	call   c001e487 <x87Load>
c001d4f6:	83 c4 10             	add    esp,0x10
c001d4f9:	90                   	nop
c001d4fa:	83 c4 0c             	add    esp,0xc
c001d4fd:	c3                   	ret    

c001d4fe <MMX::MMX()>:
c001d4fe:	83 ec 0c             	sub    esp,0xc
c001d501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d505:	83 ec 08             	sub    esp,0x8
c001d508:	68 c4 28 02 c0       	push   0xc00228c4
c001d50d:	50                   	push   eax
c001d50e:	e8 05 34 ff ff       	call   c0010918 <FPU::FPU(char const*)>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	ba d4 28 02 c0       	mov    edx,0xc00228d4
c001d51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51f:	89 10                	mov    DWORD PTR [eax],edx
c001d521:	90                   	nop
c001d522:	83 c4 0c             	add    esp,0xc
c001d525:	c3                   	ret    

c001d526 <SSE::open(int, int, void*)>:
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	e8 19 0f 00 00       	call   c001e447 <sseInit>
c001d52e:	b8 00 00 00 00       	mov    eax,0x0
c001d533:	83 c4 0c             	add    esp,0xc
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <SSE::close(int, int, void*)>:
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	e8 17 0f 00 00       	call   c001e457 <sseClose>
c001d540:	b8 00 00 00 00       	mov    eax,0x0
c001d545:	83 c4 0c             	add    esp,0xc
c001d548:	c3                   	ret    
c001d549:	90                   	nop

c001d54a <SSE::available()>:
c001d54a:	83 ec 1c             	sub    esp,0x1c
c001d54d:	e8 ce 0e 00 00       	call   c001e420 <sseDetect>
c001d552:	85 c0                	test   eax,eax
c001d554:	0f 95 c0             	setne  al
c001d557:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d55b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d55f:	83 c4 1c             	add    esp,0x1c
c001d562:	c3                   	ret    
c001d563:	90                   	nop

c001d564 <SSE::save(void*)>:
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	50                   	push   eax
c001d56f:	e8 c7 0e 00 00       	call   c001e43b <sseSave>
c001d574:	83 c4 10             	add    esp,0x10
c001d577:	90                   	nop
c001d578:	83 c4 0c             	add    esp,0xc
c001d57b:	c3                   	ret    

c001d57c <SSE::load(void*)>:
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d583:	83 ec 0c             	sub    esp,0xc
c001d586:	50                   	push   eax
c001d587:	e8 b5 0e 00 00       	call   c001e441 <sseLoad>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	90                   	nop
c001d590:	83 c4 0c             	add    esp,0xc
c001d593:	c3                   	ret    

c001d594 <SSE::SSE()>:
c001d594:	83 ec 0c             	sub    esp,0xc
c001d597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59b:	83 ec 08             	sub    esp,0x8
c001d59e:	68 04 29 02 c0       	push   0xc0022904
c001d5a3:	50                   	push   eax
c001d5a4:	e8 6f 33 ff ff       	call   c0010918 <FPU::FPU(char const*)>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	ba 14 29 02 c0       	mov    edx,0xc0022914
c001d5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b5:	89 10                	mov    DWORD PTR [eax],edx
c001d5b7:	90                   	nop
c001d5b8:	83 c4 0c             	add    esp,0xc
c001d5bb:	c3                   	ret    

c001d5bc <x87::open(int, int, void*)>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	e8 c8 0e 00 00       	call   c001e48c <x87Init>
c001d5c4:	b8 00 00 00 00       	mov    eax,0x0
c001d5c9:	83 c4 0c             	add    esp,0xc
c001d5cc:	c3                   	ret    
c001d5cd:	90                   	nop

c001d5ce <x87::close(int, int, void*)>:
c001d5ce:	83 ec 0c             	sub    esp,0xc
c001d5d1:	e8 d0 0e 00 00       	call   c001e4a6 <x87Close>
c001d5d6:	b8 00 00 00 00       	mov    eax,0x0
c001d5db:	83 c4 0c             	add    esp,0xc
c001d5de:	c3                   	ret    
c001d5df:	90                   	nop

c001d5e0 <x87::available()>:
c001d5e0:	83 ec 0c             	sub    esp,0xc
c001d5e3:	e8 7e 0e 00 00       	call   c001e466 <x87Detect>
c001d5e8:	85 c0                	test   eax,eax
c001d5ea:	0f 95 c0             	setne  al
c001d5ed:	83 c4 0c             	add    esp,0xc
c001d5f0:	c3                   	ret    
c001d5f1:	90                   	nop

c001d5f2 <x87::save(void*)>:
c001d5f2:	83 ec 0c             	sub    esp,0xc
c001d5f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5f9:	83 ec 0c             	sub    esp,0xc
c001d5fc:	50                   	push   eax
c001d5fd:	e8 7f 0e 00 00       	call   c001e481 <x87Save>
c001d602:	83 c4 10             	add    esp,0x10
c001d605:	90                   	nop
c001d606:	83 c4 0c             	add    esp,0xc
c001d609:	c3                   	ret    

c001d60a <x87::load(void*)>:
c001d60a:	83 ec 0c             	sub    esp,0xc
c001d60d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d611:	83 ec 0c             	sub    esp,0xc
c001d614:	50                   	push   eax
c001d615:	e8 6d 0e 00 00       	call   c001e487 <x87Load>
c001d61a:	83 c4 10             	add    esp,0x10
c001d61d:	90                   	nop
c001d61e:	83 c4 0c             	add    esp,0xc
c001d621:	c3                   	ret    

c001d622 <x87::x87()>:
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d629:	83 ec 08             	sub    esp,0x8
c001d62c:	68 44 29 02 c0       	push   0xc0022944
c001d631:	50                   	push   eax
c001d632:	e8 e1 32 ff ff       	call   c0010918 <FPU::FPU(char const*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	ba 54 29 02 c0       	mov    edx,0xc0022954
c001d63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d643:	89 10                	mov    DWORD PTR [eax],edx
c001d645:	90                   	nop
c001d646:	83 c4 0c             	add    esp,0xc
c001d649:	c3                   	ret    

c001d64a <APIC::disable()>:
c001d64a:	90                   	nop
c001d64b:	c3                   	ret    

c001d64c <APIC::close(int, int, void*)>:
c001d64c:	55                   	push   ebp
c001d64d:	89 e5                	mov    ebp,esp
c001d64f:	83 ec 08             	sub    esp,0x8
c001d652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d655:	8b 00                	mov    eax,DWORD PTR [eax]
c001d657:	83 c0 3c             	add    eax,0x3c
c001d65a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d65c:	83 ec 0c             	sub    esp,0xc
c001d65f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d662:	ff d0                	call   eax
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	b8 00 00 00 00       	mov    eax,0x0
c001d66c:	c9                   	leave  
c001d66d:	c3                   	ret    

c001d66e <IOAPIC::close(int, int, void*)>:
c001d66e:	b8 00 00 00 00       	mov    eax,0x0
c001d673:	c3                   	ret    

c001d674 <APIC::io_wait()>:
c001d674:	eb 00                	jmp    c001d676 <APIC::io_wait()+0x2>
c001d676:	eb 00                	jmp    c001d678 <APIC::io_wait()+0x4>
c001d678:	90                   	nop
c001d679:	c3                   	ret    

c001d67a <APIC::getBase()>:
c001d67a:	55                   	push   ebp
c001d67b:	89 e5                	mov    ebp,esp
c001d67d:	83 ec 18             	sub    esp,0x18
c001d680:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001d685:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d68b:	83 e0 08             	and    eax,0x8
c001d68e:	84 c0                	test   al,al
c001d690:	75 07                	jne    c001d699 <APIC::getBase()+0x1f>
c001d692:	b8 00 00 00 00       	mov    eax,0x0
c001d697:	eb 21                	jmp    c001d6ba <APIC::getBase()+0x40>
c001d699:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001d69e:	83 ec 08             	sub    esp,0x8
c001d6a1:	6a 1b                	push   0x1b
c001d6a3:	50                   	push   eax
c001d6a4:	e8 2b db fe ff       	call   c000b1d4 <Computer::rdmsr(unsigned int)>
c001d6a9:	83 c4 10             	add    esp,0x10
c001d6ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d6af:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d6b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d6ba:	c9                   	leave  
c001d6bb:	c3                   	ret    

c001d6bc <APIC::eoi(unsigned char)>:
c001d6bc:	55                   	push   ebp
c001d6bd:	89 e5                	mov    ebp,esp
c001d6bf:	83 ec 28             	sub    esp,0x28
c001d6c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6c5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6ce:	e8 a7 ff ff ff       	call   c001d67a <APIC::getBase()>
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	05 b0 00 00 00       	add    eax,0xb0
c001d6db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d6de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d6e1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d6e7:	90                   	nop
c001d6e8:	c9                   	leave  
c001d6e9:	c3                   	ret    

c001d6ea <APIC::open(int, int, void*)>:
c001d6ea:	55                   	push   ebp
c001d6eb:	89 e5                	mov    ebp,esp
c001d6ed:	57                   	push   edi
c001d6ee:	56                   	push   esi
c001d6ef:	53                   	push   ebx
c001d6f0:	83 ec 1c             	sub    esp,0x1c
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6f9:	e8 7c ff ff ff       	call   c001d67a <APIC::getBase()>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	05 f0 00 00 00       	add    eax,0xf0
c001d706:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d709:	83 ec 0c             	sub    esp,0xc
c001d70c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d70f:	e8 66 ff ff ff       	call   c001d67a <APIC::getBase()>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	89 c2                	mov    edx,eax
c001d719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d71c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d722:	0f b6 f8             	movzx  edi,al
c001d725:	89 d0                	mov    eax,edx
c001d727:	ba 00 00 00 00       	mov    edx,0x0
c001d72c:	89 c1                	mov    ecx,eax
c001d72e:	80 e5 ff             	and    ch,0xff
c001d731:	89 cb                	mov    ebx,ecx
c001d733:	0f b6 f2             	movzx  esi,dl
c001d736:	89 d8                	mov    eax,ebx
c001d738:	89 f2                	mov    edx,esi
c001d73a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d73d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d740:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d744:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d748:	83 e0 00             	and    eax,0x0
c001d74b:	09 d0                	or     eax,edx
c001d74d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d754:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d75a:	8d 50 01             	lea    edx,[eax+0x1]
c001d75d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d760:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d766:	0f b6 d0             	movzx  edx,al
c001d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d76c:	83 c2 08             	add    edx,0x8
c001d76f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d773:	0f b6 c9             	movzx  ecx,cl
c001d776:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d77c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d780:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d783:	8b 00                	mov    eax,DWORD PTR [eax]
c001d785:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d788:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d78f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d792:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d795:	89 10                	mov    DWORD PTR [eax],edx
c001d797:	b8 00 00 00 00       	mov    eax,0x0
c001d79c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d79f:	5b                   	pop    ebx
c001d7a0:	5e                   	pop    esi
c001d7a1:	5f                   	pop    edi
c001d7a2:	5d                   	pop    ebp
c001d7a3:	c3                   	ret    

c001d7a4 <IOAPIC::IOAPIC()>:
c001d7a4:	83 ec 0c             	sub    esp,0xc
c001d7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ab:	83 ec 08             	sub    esp,0x8
c001d7ae:	68 84 29 02 c0       	push   0xc0022984
c001d7b3:	50                   	push   eax
c001d7b4:	e8 6b 2e ff ff       	call   c0010624 <Device::Device(char const*)>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	ba ac 2a 02 c0       	mov    edx,0xc0022aac
c001d7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c5:	89 10                	mov    DWORD PTR [eax],edx
c001d7c7:	90                   	nop
c001d7c8:	83 c4 0c             	add    esp,0xc
c001d7cb:	c3                   	ret    

c001d7cc <APIC::APIC()>:
c001d7cc:	53                   	push   ebx
c001d7cd:	83 ec 18             	sub    esp,0x18
c001d7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d4:	83 ec 08             	sub    esp,0x8
c001d7d7:	68 8c 29 02 c0       	push   0xc002298c
c001d7dc:	50                   	push   eax
c001d7dd:	e8 84 35 ff ff       	call   c0010d66 <InterruptController::InterruptController(char const*)>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001d7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7ee:	89 10                	mov    DWORD PTR [eax],edx
c001d7f0:	a0 a0 55 02 c0       	mov    al,ds:0xc00255a0
c001d7f5:	83 f0 01             	xor    eax,0x1
c001d7f8:	84 c0                	test   al,al
c001d7fa:	0f 84 96 00 00 00    	je     c001d896 <APIC::APIC()+0xca>
c001d800:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d805:	a0 50 40 02 c0       	mov    al,ds:0xc0024050
c001d80a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d80e:	73 7f                	jae    c001d88f <APIC::APIC()+0xc3>
c001d810:	83 ec 0c             	sub    esp,0xc
c001d813:	68 68 01 00 00       	push   0x168
c001d818:	e8 1d 17 ff ff       	call   c000ef3a <operator new(unsigned long)>
c001d81d:	83 c4 10             	add    esp,0x10
c001d820:	89 c3                	mov    ebx,eax
c001d822:	83 ec 0c             	sub    esp,0xc
c001d825:	53                   	push   ebx
c001d826:	e8 79 ff ff ff       	call   c001d7a4 <IOAPIC::IOAPIC()>
c001d82b:	83 c4 10             	add    esp,0x10
c001d82e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d832:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d837:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d83b:	89 14 85 80 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa80],edx
c001d842:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c001d847:	40                   	inc    eax
c001d848:	a3 60 55 02 c0       	mov    ds:0xc0025560,eax
c001d84d:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001d852:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d858:	83 ec 08             	sub    esp,0x8
c001d85b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d85f:	50                   	push   eax
c001d860:	e8 cf 2b ff ff       	call   c0010434 <Device::addChild(Device*)>
c001d865:	83 c4 10             	add    esp,0x10
c001d868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d86c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d86e:	83 c0 08             	add    eax,0x8
c001d871:	8b 00                	mov    eax,DWORD PTR [eax]
c001d873:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d878:	6a 00                	push   0x0
c001d87a:	6a 00                	push   0x0
c001d87c:	52                   	push   edx
c001d87d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d881:	ff d0                	call   eax
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d88a:	e9 76 ff ff ff       	jmp    c001d805 <APIC::APIC()+0x39>
c001d88f:	c6 05 a0 55 02 c0 01 	mov    BYTE PTR ds:0xc00255a0,0x1
c001d896:	90                   	nop
c001d897:	83 c4 18             	add    esp,0x18
c001d89a:	5b                   	pop    ebx
c001d89b:	c3                   	ret    

c001d89c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d89c:	55                   	push   ebp
c001d89d:	89 e5                	mov    ebp,esp
c001d89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8a8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d8ab:	72 1d                	jb     c001d8ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d8ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d8bf:	01 d0                	add    eax,edx
c001d8c1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d8c4:	73 04                	jae    c001d8ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d8c6:	b0 01                	mov    al,0x1
c001d8c8:	eb 02                	jmp    c001d8cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d8ca:	b0 00                	mov    al,0x0
c001d8cc:	5d                   	pop    ebp
c001d8cd:	c3                   	ret    

c001d8ce <IOAPIC::read(int)>:
c001d8ce:	55                   	push   ebp
c001d8cf:	89 e5                	mov    ebp,esp
c001d8d1:	83 ec 10             	sub    esp,0x10
c001d8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8e3:	0f b6 d0             	movzx  edx,al
c001d8e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8e9:	89 10                	mov    DWORD PTR [eax],edx
c001d8eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8ee:	83 c0 10             	add    eax,0x10
c001d8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8f3:	c9                   	leave  
c001d8f4:	c3                   	ret    
c001d8f5:	90                   	nop

c001d8f6 <IOAPIC::open(int, int, void*)>:
c001d8f6:	55                   	push   ebp
c001d8f7:	89 e5                	mov    ebp,esp
c001d8f9:	57                   	push   edi
c001d8fa:	56                   	push   esi
c001d8fb:	53                   	push   ebx
c001d8fc:	83 ec 0c             	sub    esp,0xc
c001d8ff:	83 ec 0c             	sub    esp,0xc
c001d902:	68 b7 29 02 c0       	push   0xc00229b7
c001d907:	e8 1d 17 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d912:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d915:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d924:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c001d92b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d92e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d937:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d93d:	8b 14 85 00 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf00]
c001d944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d947:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d94d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d950:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d959:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d95f:	0f b6 f8             	movzx  edi,al
c001d962:	89 d0                	mov    eax,edx
c001d964:	ba 00 00 00 00       	mov    edx,0x0
c001d969:	89 c1                	mov    ecx,eax
c001d96b:	80 e5 ff             	and    ch,0xff
c001d96e:	89 cb                	mov    ebx,ecx
c001d970:	0f b6 f2             	movzx  esi,dl
c001d973:	89 d8                	mov    eax,ebx
c001d975:	89 f2                	mov    edx,esi
c001d977:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d97a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d97d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d981:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d985:	83 e0 00             	and    eax,0x0
c001d988:	09 d0                	or     eax,edx
c001d98a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d98e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d991:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d997:	8d 50 01             	lea    edx,[eax+0x1]
c001d99a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d99d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d9a3:	0f b6 d0             	movzx  edx,al
c001d9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9a9:	83 c2 08             	add    edx,0x8
c001d9ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d9b0:	0f b6 c9             	movzx  ecx,cl
c001d9b3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d9b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d9bd:	83 ec 08             	sub    esp,0x8
c001d9c0:	6a 01                	push   0x1
c001d9c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9c5:	e8 04 ff ff ff       	call   c001d8ce <IOAPIC::read(int)>
c001d9ca:	83 c4 10             	add    esp,0x10
c001d9cd:	c1 f8 10             	sar    eax,0x10
c001d9d0:	0f b6 c0             	movzx  eax,al
c001d9d3:	8d 50 01             	lea    edx,[eax+0x1]
c001d9d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9d9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d9df:	b8 00 00 00 00       	mov    eax,0x0
c001d9e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d9e7:	5b                   	pop    ebx
c001d9e8:	5e                   	pop    esi
c001d9e9:	5f                   	pop    edi
c001d9ea:	5d                   	pop    ebp
c001d9eb:	c3                   	ret    

c001d9ec <IOAPIC::write(int, int)>:
c001d9ec:	55                   	push   ebp
c001d9ed:	89 e5                	mov    ebp,esp
c001d9ef:	83 ec 10             	sub    esp,0x10
c001d9f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da01:	0f b6 d0             	movzx  edx,al
c001da04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da07:	89 10                	mov    DWORD PTR [eax],edx
c001da09:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da0c:	8d 50 10             	lea    edx,[eax+0x10]
c001da0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001da12:	89 02                	mov    DWORD PTR [edx],eax
c001da14:	90                   	nop
c001da15:	c9                   	leave  
c001da16:	c3                   	ret    
c001da17:	90                   	nop

c001da18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001da18:	55                   	push   ebp
c001da19:	89 e5                	mov    ebp,esp
c001da1b:	83 ec 20             	sub    esp,0x20
c001da1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da21:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001da24:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001da27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001da2a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001da2d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da30:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001da33:	88 d0                	mov    al,dl
c001da35:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001da38:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da3c:	83 c0 08             	add    eax,0x8
c001da3f:	01 c0                	add    eax,eax
c001da41:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da44:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da48:	83 c0 08             	add    eax,0x8
c001da4b:	01 c0                	add    eax,eax
c001da4d:	40                   	inc    eax
c001da4e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001da51:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da54:	50                   	push   eax
c001da55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da58:	e8 71 fe ff ff       	call   c001d8ce <IOAPIC::read(int)>
c001da5d:	83 c4 08             	add    esp,0x8
c001da60:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da63:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da6d:	c1 e0 18             	shl    eax,0x18
c001da70:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da73:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da76:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da79:	52                   	push   edx
c001da7a:	50                   	push   eax
c001da7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da7e:	e8 69 ff ff ff       	call   c001d9ec <IOAPIC::write(int, int)>
c001da83:	83 c4 0c             	add    esp,0xc
c001da86:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da89:	50                   	push   eax
c001da8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da8d:	e8 3c fe ff ff       	call   c001d8ce <IOAPIC::read(int)>
c001da92:	83 c4 08             	add    esp,0x8
c001da95:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da98:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da9f:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001daa6:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001daad:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001dab4:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001dab8:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001dabb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001dabe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dac1:	52                   	push   edx
c001dac2:	50                   	push   eax
c001dac3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dac6:	e8 21 ff ff ff       	call   c001d9ec <IOAPIC::write(int, int)>
c001dacb:	83 c4 0c             	add    esp,0xc
c001dace:	90                   	nop
c001dacf:	c9                   	leave  
c001dad0:	c3                   	ret    
c001dad1:	90                   	nop

c001dad2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001dad2:	55                   	push   ebp
c001dad3:	89 e5                	mov    ebp,esp
c001dad5:	56                   	push   esi
c001dad6:	53                   	push   ebx
c001dad7:	83 ec 20             	sub    esp,0x20
c001dada:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dadd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dae0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001dae4:	74 28                	je     c001db0e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001dae6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001daea:	7f 12                	jg     c001dafe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001daec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daef:	05 00 2f 02 c0       	add    eax,0xc0022f00
c001daf4:	8a 00                	mov    al,BYTE PTR [eax]
c001daf6:	0f b6 c0             	movzx  eax,al
c001daf9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001dafc:	eb 10                	jmp    c001db0e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001dafe:	83 ec 0c             	sub    esp,0xc
c001db01:	68 c8 29 02 c0       	push   0xc00229c8
c001db06:	e8 b3 71 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001db12:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c001db17:	83 ec 08             	sub    esp,0x8
c001db1a:	50                   	push   eax
c001db1b:	68 00 2a 02 c0       	push   0xc0022a00
c001db20:	e8 04 15 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001db25:	83 c4 10             	add    esp,0x10
c001db28:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001db2f:	a1 60 55 02 c0       	mov    eax,ds:0xc0025560
c001db34:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001db37:	7d 58                	jge    c001db91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db3c:	8b 04 85 80 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa80]
c001db43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db46:	83 ec 08             	sub    esp,0x8
c001db49:	52                   	push   edx
c001db4a:	50                   	push   eax
c001db4b:	e8 4c fd ff ff       	call   c001d89c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001db50:	83 c4 10             	add    esp,0x10
c001db53:	84 c0                	test   al,al
c001db55:	74 35                	je     c001db8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001db57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db5a:	8b 1c 85 80 55 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdaa80]
c001db61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db64:	83 c0 20             	add    eax,0x20
c001db67:	0f b6 f0             	movzx  esi,al
c001db6a:	e8 46 64 ff ff       	call   c0013fb5 <getCPUNumber()>
c001db6f:	99                   	cdq    
c001db70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db73:	0f b6 c9             	movzx  ecx,cl
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	56                   	push   esi
c001db7a:	52                   	push   edx
c001db7b:	50                   	push   eax
c001db7c:	51                   	push   ecx
c001db7d:	53                   	push   ebx
c001db7e:	e8 95 fe ff ff       	call   c001da18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db83:	83 c4 20             	add    esp,0x20
c001db86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db8a:	eb 05                	jmp    c001db91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db8c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db8f:	eb 9e                	jmp    c001db2f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db91:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db94:	83 f0 01             	xor    eax,0x1
c001db97:	84 c0                	test   al,al
c001db99:	74 10                	je     c001dbab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db9b:	83 ec 0c             	sub    esp,0xc
c001db9e:	68 17 2a 02 c0       	push   0xc0022a17
c001dba3:	e8 16 71 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001dbaf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001dbb6:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001dbba:	7f 65                	jg     c001dc21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001dbbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbc2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbc9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbcc:	01 ca                	add    edx,ecx
c001dbce:	83 c2 54             	add    edx,0x54
c001dbd1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001dbd5:	85 c0                	test   eax,eax
c001dbd7:	75 43                	jne    c001dc1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001dbd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbdc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbdf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbe6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbe9:	01 ca                	add    edx,ecx
c001dbeb:	8d 4a 54             	lea    ecx,[edx+0x54]
c001dbee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001dbf1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbf8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbfb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dc02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc05:	01 ca                	add    edx,ecx
c001dc07:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dc0d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dc10:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dc14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc17:	83 e8 20             	sub    eax,0x20
c001dc1a:	eb 1a                	jmp    c001dc36 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dc1c:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dc1f:	eb 95                	jmp    c001dbb6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dc21:	83 ec 0c             	sub    esp,0xc
c001dc24:	68 24 2a 02 c0       	push   0xc0022a24
c001dc29:	e8 90 70 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dc36:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dc39:	5b                   	pop    ebx
c001dc3a:	5e                   	pop    esi
c001dc3b:	5d                   	pop    ebp
c001dc3c:	c3                   	ret    
c001dc3d:	90                   	nop

c001dc3e <PIC::disable()>:
c001dc3e:	55                   	push   ebp
c001dc3f:	89 e5                	mov    ebp,esp
c001dc41:	83 ec 10             	sub    esp,0x10
c001dc44:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dc4a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dc4e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc51:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dc55:	ee                   	out    dx,al
c001dc56:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dc5c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dc60:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc63:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc67:	ee                   	out    dx,al
c001dc68:	90                   	nop
c001dc69:	c9                   	leave  
c001dc6a:	c3                   	ret    
c001dc6b:	90                   	nop

c001dc6c <PIC::close(int, int, void*)>:
c001dc6c:	55                   	push   ebp
c001dc6d:	89 e5                	mov    ebp,esp
c001dc6f:	83 ec 08             	sub    esp,0x8
c001dc72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc75:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc77:	83 c0 3c             	add    eax,0x3c
c001dc7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc82:	ff d0                	call   eax
c001dc84:	83 c4 10             	add    esp,0x10
c001dc87:	b8 00 00 00 00       	mov    eax,0x0
c001dc8c:	c9                   	leave  
c001dc8d:	c3                   	ret    

c001dc8e <PIC::PIC()>:
c001dc8e:	83 ec 0c             	sub    esp,0xc
c001dc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc95:	83 ec 08             	sub    esp,0x8
c001dc98:	68 d0 2a 02 c0       	push   0xc0022ad0
c001dc9d:	50                   	push   eax
c001dc9e:	e8 c3 30 ff ff       	call   c0010d66 <InterruptController::InterruptController(char const*)>
c001dca3:	83 c4 10             	add    esp,0x10
c001dca6:	ba fc 2a 02 c0       	mov    edx,0xc0022afc
c001dcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcaf:	89 10                	mov    DWORD PTR [eax],edx
c001dcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcbb:	0f b6 d0             	movzx  edx,al
c001dcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dcc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcd3:	0f b6 d0             	movzx  edx,al
c001dcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcda:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dce9:	8d 50 01             	lea    edx,[eax+0x1]
c001dcec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcf6:	0f b6 d0             	movzx  edx,al
c001dcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd01:	83 e1 3f             	and    ecx,0x3f
c001dd04:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd12:	0f b6 d0             	movzx  edx,al
c001dd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd19:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd2a:	0f b6 d0             	movzx  edx,al
c001dd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd31:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd40:	8d 50 01             	lea    edx,[eax+0x1]
c001dd43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd47:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd4d:	0f b6 d0             	movzx  edx,al
c001dd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd54:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd58:	83 e1 3f             	and    ecx,0x3f
c001dd5b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd5f:	90                   	nop
c001dd60:	83 c4 0c             	add    esp,0xc
c001dd63:	c3                   	ret    

c001dd64 <PIC::ioWait()>:
c001dd64:	eb 00                	jmp    c001dd66 <PIC::ioWait()+0x2>
c001dd66:	eb 00                	jmp    c001dd68 <PIC::ioWait()+0x4>
c001dd68:	90                   	nop
c001dd69:	c3                   	ret    

c001dd6a <PIC::getIRQReg(int)>:
c001dd6a:	55                   	push   ebp
c001dd6b:	89 e5                	mov    ebp,esp
c001dd6d:	83 ec 10             	sub    esp,0x10
c001dd70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd73:	0f b6 c0             	movzx  eax,al
c001dd76:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd7c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd7f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd82:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd86:	ee                   	out    dx,al
c001dd87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd8a:	0f b6 c0             	movzx  eax,al
c001dd8d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd93:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd96:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd99:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd9d:	ee                   	out    dx,al
c001dd9e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dda4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dda8:	89 c2                	mov    edx,eax
c001ddaa:	ec                   	in     al,dx
c001ddab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001ddae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddb1:	0f b6 c0             	movzx  eax,al
c001ddb4:	c1 e0 08             	shl    eax,0x8
c001ddb7:	89 c1                	mov    ecx,eax
c001ddb9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001ddbf:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001ddc3:	89 c2                	mov    edx,eax
c001ddc5:	ec                   	in     al,dx
c001ddc6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001ddc9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001ddcc:	0f b6 c0             	movzx  eax,al
c001ddcf:	09 c8                	or     eax,ecx
c001ddd1:	c9                   	leave  
c001ddd2:	c3                   	ret    
c001ddd3:	90                   	nop

c001ddd4 <PIC::eoi(unsigned char)>:
c001ddd4:	55                   	push   ebp
c001ddd5:	89 e5                	mov    ebp,esp
c001ddd7:	83 ec 14             	sub    esp,0x14
c001ddda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dddd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dde0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dde4:	75 1e                	jne    c001de04 <PIC::eoi(unsigned char)+0x30>
c001dde6:	6a 0b                	push   0xb
c001dde8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddeb:	e8 7a ff ff ff       	call   c001dd6a <PIC::getIRQReg(int)>
c001ddf0:	83 c4 08             	add    esp,0x8
c001ddf3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001ddf7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001ddfb:	25 80 00 00 00       	and    eax,0x80
c001de00:	85 c0                	test   eax,eax
c001de02:	74 5f                	je     c001de63 <PIC::eoi(unsigned char)+0x8f>
c001de04:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001de08:	75 2d                	jne    c001de37 <PIC::eoi(unsigned char)+0x63>
c001de0a:	6a 0b                	push   0xb
c001de0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de0f:	e8 56 ff ff ff       	call   c001dd6a <PIC::getIRQReg(int)>
c001de14:	83 c4 08             	add    esp,0x8
c001de17:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001de1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de1e:	66 85 c0             	test   ax,ax
c001de21:	78 14                	js     c001de37 <PIC::eoi(unsigned char)+0x63>
c001de23:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001de29:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001de2d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001de30:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001de34:	ee                   	out    dx,al
c001de35:	eb 2d                	jmp    c001de64 <PIC::eoi(unsigned char)+0x90>
c001de37:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001de3b:	76 12                	jbe    c001de4f <PIC::eoi(unsigned char)+0x7b>
c001de3d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001de43:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001de47:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de4a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de4e:	ee                   	out    dx,al
c001de4f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001de55:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001de59:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de5c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de60:	ee                   	out    dx,al
c001de61:	eb 01                	jmp    c001de64 <PIC::eoi(unsigned char)+0x90>
c001de63:	90                   	nop
c001de64:	c9                   	leave  
c001de65:	c3                   	ret    

c001de66 <PIC::remap()>:
c001de66:	55                   	push   ebp
c001de67:	89 e5                	mov    ebp,esp
c001de69:	83 ec 48             	sub    esp,0x48
c001de6c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de73:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de7a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de80:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de83:	89 c2                	mov    edx,eax
c001de85:	ec                   	in     al,dx
c001de86:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de89:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de8c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de8f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de95:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de98:	89 c2                	mov    edx,eax
c001de9a:	ec                   	in     al,dx
c001de9b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de9e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001dea1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001dea4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001deaa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001deae:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001deb1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001deb4:	ee                   	out    dx,al
c001deb5:	83 ec 0c             	sub    esp,0xc
c001deb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001debb:	e8 a4 fe ff ff       	call   c001dd64 <PIC::ioWait()>
c001dec0:	83 c4 10             	add    esp,0x10
c001dec3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001dec9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001decd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ded0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ded3:	ee                   	out    dx,al
c001ded4:	83 ec 0c             	sub    esp,0xc
c001ded7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deda:	e8 85 fe ff ff       	call   c001dd64 <PIC::ioWait()>
c001dedf:	83 c4 10             	add    esp,0x10
c001dee2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dee5:	0f b6 c0             	movzx  eax,al
c001dee8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001deee:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001def1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001def4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001def7:	ee                   	out    dx,al
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001defe:	e8 61 fe ff ff       	call   c001dd64 <PIC::ioWait()>
c001df03:	83 c4 10             	add    esp,0x10
c001df06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df09:	0f b6 c0             	movzx  eax,al
c001df0c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001df12:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001df15:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001df18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001df1b:	ee                   	out    dx,al
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df22:	e8 3d fe ff ff       	call   c001dd64 <PIC::ioWait()>
c001df27:	83 c4 10             	add    esp,0x10
c001df2a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001df30:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001df34:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001df37:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001df3a:	ee                   	out    dx,al
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df41:	e8 1e fe ff ff       	call   c001dd64 <PIC::ioWait()>
c001df46:	83 c4 10             	add    esp,0x10
c001df49:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001df4f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001df53:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001df56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001df59:	ee                   	out    dx,al
c001df5a:	83 ec 0c             	sub    esp,0xc
c001df5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df60:	e8 ff fd ff ff       	call   c001dd64 <PIC::ioWait()>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df6e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df72:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df75:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df78:	ee                   	out    dx,al
c001df79:	83 ec 0c             	sub    esp,0xc
c001df7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df7f:	e8 e0 fd ff ff       	call   c001dd64 <PIC::ioWait()>
c001df84:	83 c4 10             	add    esp,0x10
c001df87:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df8d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df91:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df94:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df97:	ee                   	out    dx,al
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df9e:	e8 c1 fd ff ff       	call   c001dd64 <PIC::ioWait()>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dfaa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dfb0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dfb3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001dfb6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dfb9:	ee                   	out    dx,al
c001dfba:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dfbe:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dfc4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dfc7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dfca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dfcd:	ee                   	out    dx,al
c001dfce:	90                   	nop
c001dfcf:	c9                   	leave  
c001dfd0:	c3                   	ret    
c001dfd1:	90                   	nop

c001dfd2 <PIC::open(int, int, void*)>:
c001dfd2:	55                   	push   ebp
c001dfd3:	89 e5                	mov    ebp,esp
c001dfd5:	83 ec 18             	sub    esp,0x18
c001dfd8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dfde:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dfe2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dfe5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dfe9:	ee                   	out    dx,al
c001dfea:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dff0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dff4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dff7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dffb:	ee                   	out    dx,al
c001dffc:	83 ec 0c             	sub    esp,0xc
c001dfff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e002:	e8 5f fe ff ff       	call   c001de66 <PIC::remap()>
c001e007:	83 c4 10             	add    esp,0x10
c001e00a:	b8 00 00 00 00       	mov    eax,0x0
c001e00f:	c9                   	leave  
c001e010:	c3                   	ret    
c001e011:	90                   	nop

c001e012 <APICTimer::close(int, int, void*)>:
c001e012:	b8 00 00 00 00       	mov    eax,0x0
c001e017:	c3                   	ret    

c001e018 <apicTimerHandler(regs*, void*)>:
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e01f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e021:	99                   	cdq    
c001e022:	52                   	push   edx
c001e023:	50                   	push   eax
c001e024:	6a 00                	push   0x0
c001e026:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e02b:	e8 6c 07 00 00       	call   c001e79c <__udivdi3>
c001e030:	83 c4 10             	add    esp,0x10
c001e033:	83 ec 08             	sub    esp,0x8
c001e036:	52                   	push   edx
c001e037:	50                   	push   eax
c001e038:	e8 94 44 ff ff       	call   c00124d1 <timerHandler(unsigned long long)>
c001e03d:	83 c4 10             	add    esp,0x10
c001e040:	90                   	nop
c001e041:	83 c4 0c             	add    esp,0xc
c001e044:	c3                   	ret    
c001e045:	90                   	nop

c001e046 <APICTimer::write(int)>:
c001e046:	53                   	push   ebx
c001e047:	83 ec 28             	sub    esp,0x28
c001e04a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e04e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e052:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e058:	e8 5b 5f ff ff       	call   c0013fb8 <thisCPU()>
c001e05d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e063:	83 ec 0c             	sub    esp,0xc
c001e066:	50                   	push   eax
c001e067:	e8 0e f6 ff ff       	call   c001d67a <APIC::getBase()>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e073:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001e078:	8b 15 14 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e14
c001e07e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e082:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e08a:	05 e0 03 00 00       	add    eax,0x3e0
c001e08f:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e099:	05 80 03 00 00       	add    eax,0x380
c001e09e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e0a4:	fb                   	sti    
c001e0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0ad:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e0b2:	83 d2 00             	adc    edx,0x0
c001e0b5:	89 c1                	mov    ecx,eax
c001e0b7:	89 d3                	mov    ebx,edx
c001e0b9:	a1 10 3e 02 c0       	mov    eax,ds:0xc0023e10
c001e0be:	8b 15 14 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e14
c001e0c4:	39 c8                	cmp    eax,ecx
c001e0c6:	89 d0                	mov    eax,edx
c001e0c8:	19 d8                	sbb    eax,ebx
c001e0ca:	73 02                	jae    c001e0ce <APICTimer::write(int)+0x88>
c001e0cc:	eb d7                	jmp    c001e0a5 <APICTimer::write(int)+0x5f>
c001e0ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0d2:	05 20 03 00 00       	add    eax,0x320
c001e0d7:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e0dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0e1:	05 90 03 00 00       	add    eax,0x390
c001e0e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0e8:	f7 d0                	not    eax
c001e0ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0f6:	ba 00 00 00 00       	mov    edx,0x0
c001e0fb:	f7 f3                	div    ebx
c001e0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e105:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e10b:	0d 00 00 02 00       	or     eax,0x20000
c001e110:	89 c2                	mov    edx,eax
c001e112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e116:	05 20 03 00 00       	add    eax,0x320
c001e11b:	89 10                	mov    DWORD PTR [eax],edx
c001e11d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e121:	05 e0 03 00 00       	add    eax,0x3e0
c001e126:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e12c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e130:	05 80 03 00 00       	add    eax,0x380
c001e135:	89 c2                	mov    edx,eax
c001e137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e13b:	89 02                	mov    DWORD PTR [edx],eax
c001e13d:	90                   	nop
c001e13e:	83 c4 28             	add    esp,0x28
c001e141:	5b                   	pop    ebx
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <APICTimer::open(int, int, void*)>:
c001e144:	57                   	push   edi
c001e145:	56                   	push   esi
c001e146:	53                   	push   ebx
c001e147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e14d:	83 c0 24             	add    eax,0x24
c001e150:	8b 00                	mov    eax,DWORD PTR [eax]
c001e152:	83 ec 08             	sub    esp,0x8
c001e155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e15d:	ff d0                	call   eax
c001e15f:	83 c4 10             	add    esp,0x10
c001e162:	e8 51 5e ff ff       	call   c0013fb8 <thisCPU()>
c001e167:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e16d:	83 ec 0c             	sub    esp,0xc
c001e170:	50                   	push   eax
c001e171:	e8 04 f5 ff ff       	call   c001d67a <APIC::getBase()>
c001e176:	83 c4 10             	add    esp,0x10
c001e179:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e183:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e189:	0f b6 f8             	movzx  edi,al
c001e18c:	89 d0                	mov    eax,edx
c001e18e:	ba 00 00 00 00       	mov    edx,0x0
c001e193:	89 c1                	mov    ecx,eax
c001e195:	80 e5 ff             	and    ch,0xff
c001e198:	89 cb                	mov    ebx,ecx
c001e19a:	0f b6 f2             	movzx  esi,dl
c001e19d:	89 d8                	mov    eax,ebx
c001e19f:	89 f2                	mov    edx,esi
c001e1a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1a5:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e1a8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e1ac:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e1b0:	83 e0 00             	and    eax,0x0
c001e1b3:	09 d0                	or     eax,edx
c001e1b5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e1b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e1c3:	8d 50 01             	lea    edx,[eax+0x1]
c001e1c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1ca:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e1d0:	0f b6 d0             	movzx  edx,al
c001e1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d7:	83 c2 08             	add    edx,0x8
c001e1da:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e1de:	0f b6 c9             	movzx  ecx,cl
c001e1e1:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1e7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1f3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e201:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e207:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e20b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e211:	83 ec 0c             	sub    esp,0xc
c001e214:	51                   	push   ecx
c001e215:	6a 01                	push   0x1
c001e217:	68 18 e0 01 c0       	push   0xc001e018
c001e21c:	52                   	push   edx
c001e21d:	50                   	push   eax
c001e21e:	e8 65 21 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e223:	83 c4 20             	add    esp,0x20
c001e226:	89 c2                	mov    edx,eax
c001e228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e232:	b8 00 00 00 00       	mov    eax,0x0
c001e237:	5b                   	pop    ebx
c001e238:	5e                   	pop    esi
c001e239:	5f                   	pop    edi
c001e23a:	c3                   	ret    
c001e23b:	90                   	nop

c001e23c <APICTimer::APICTimer()>:
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e243:	83 ec 08             	sub    esp,0x8
c001e246:	68 3c 2b 02 c0       	push   0xc0022b3c
c001e24b:	50                   	push   eax
c001e24c:	e8 f1 41 ff ff       	call   c0012442 <Timer::Timer(char const*)>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	89 10                	mov    DWORD PTR [eax],edx
c001e25f:	90                   	nop
c001e260:	83 c4 0c             	add    esp,0xc
c001e263:	c3                   	ret    

c001e264 <PIT::write(int)>:
c001e264:	83 ec 10             	sub    esp,0x10
c001e267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e26b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e26f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e275:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e279:	a3 a4 55 02 c0       	mov    ds:0xc00255a4,eax
c001e27e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e283:	99                   	cdq    
c001e284:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e28c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e293:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e298:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e29c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e2a1:	ee                   	out    dx,al
c001e2a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2a6:	0f b6 c0             	movzx  eax,al
c001e2a9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e2b0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e2b4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e2b8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e2bd:	ee                   	out    dx,al
c001e2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2c2:	c1 f8 08             	sar    eax,0x8
c001e2c5:	0f b6 c0             	movzx  eax,al
c001e2c8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e2cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e2dc:	ee                   	out    dx,al
c001e2dd:	90                   	nop
c001e2de:	83 c4 10             	add    esp,0x10
c001e2e1:	c3                   	ret    

c001e2e2 <pitHandler(regs*, void*)>:
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	a1 a4 55 02 c0       	mov    eax,ds:0xc00255a4
c001e2ea:	99                   	cdq    
c001e2eb:	52                   	push   edx
c001e2ec:	50                   	push   eax
c001e2ed:	6a 00                	push   0x0
c001e2ef:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e2f4:	e8 a3 04 00 00       	call   c001e79c <__udivdi3>
c001e2f9:	83 c4 10             	add    esp,0x10
c001e2fc:	83 ec 08             	sub    esp,0x8
c001e2ff:	52                   	push   edx
c001e300:	50                   	push   eax
c001e301:	e8 cb 41 ff ff       	call   c00124d1 <timerHandler(unsigned long long)>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	90                   	nop
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    

c001e30e <PIT::open(int, int, void*)>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e315:	8b 00                	mov    eax,DWORD PTR [eax]
c001e317:	83 c0 24             	add    eax,0x24
c001e31a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e31c:	83 ec 08             	sub    esp,0x8
c001e31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e327:	ff d0                	call   eax
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	6a 00                	push   0x0
c001e335:	6a 01                	push   0x1
c001e337:	68 e2 e2 01 c0       	push   0xc001e2e2
c001e33c:	6a 00                	push   0x0
c001e33e:	50                   	push   eax
c001e33f:	e8 44 20 ff ff       	call   c0010388 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e344:	83 c4 20             	add    esp,0x20
c001e347:	89 c2                	mov    edx,eax
c001e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e353:	b8 00 00 00 00       	mov    eax,0x0
c001e358:	83 c4 0c             	add    esp,0xc
c001e35b:	c3                   	ret    

c001e35c <PIT::close(int, int, void*)>:
c001e35c:	83 ec 0c             	sub    esp,0xc
c001e35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e363:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e371:	6a 01                	push   0x1
c001e373:	68 e2 e2 01 c0       	push   0xc001e2e2
c001e378:	6a 00                	push   0x0
c001e37a:	50                   	push   eax
c001e37b:	e8 66 20 ff ff       	call   c00103e6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e380:	83 c4 10             	add    esp,0x10
c001e383:	b8 00 00 00 00       	mov    eax,0x0
c001e388:	83 c4 0c             	add    esp,0xc
c001e38b:	c3                   	ret    

c001e38c <PIT::PIT()>:
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e393:	83 ec 08             	sub    esp,0x8
c001e396:	68 78 2b 02 c0       	push   0xc0022b78
c001e39b:	50                   	push   eax
c001e39c:	e8 a1 40 ff ff       	call   c0012442 <Timer::Timer(char const*)>
c001e3a1:	83 c4 10             	add    esp,0x10
c001e3a4:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001e3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ad:	89 10                	mov    DWORD PTR [eax],edx
c001e3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3b9:	0f b6 d0             	movzx  edx,al
c001e3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3d1:	0f b6 d0             	movzx  edx,al
c001e3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3e7:	8d 50 01             	lea    edx,[eax+0x1]
c001e3ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3ee:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e3f4:	0f b6 d0             	movzx  edx,al
c001e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e3ff:	83 e1 3f             	and    ecx,0x3f
c001e402:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e406:	90                   	nop
c001e407:	83 c4 0c             	add    esp,0xc
c001e40a:	c3                   	ret    
c001e40b:	66 90                	xchg   ax,ax
c001e40d:	66 90                	xchg   ax,ax
c001e40f:	90                   	nop

c001e410 <avxDetect>:
c001e410:	b8 00 00 00 00       	mov    eax,0x0
c001e415:	c3                   	ret    

c001e416 <avxSave>:
c001e416:	c3                   	ret    

c001e417 <avxLoad>:
c001e417:	c3                   	ret    

c001e418 <avxInit>:
c001e418:	c3                   	ret    

c001e419 <avxClose>:
c001e419:	c3                   	ret    
c001e41a:	66 90                	xchg   ax,ax
c001e41c:	66 90                	xchg   ax,ax
c001e41e:	66 90                	xchg   ax,ax

c001e420 <sseDetect>:
c001e420:	b8 01 00 00 00       	mov    eax,0x1
c001e425:	0f a2                	cpuid  
c001e427:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e42d:	74 06                	je     c001e435 <sseDetect.noSSE>
c001e42f:	b8 01 00 00 00       	mov    eax,0x1
c001e434:	c3                   	ret    

c001e435 <sseDetect.noSSE>:
c001e435:	b8 00 00 00 00       	mov    eax,0x0
c001e43a:	c3                   	ret    

c001e43b <sseSave>:
c001e43b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e440:	c3                   	ret    

c001e441 <sseLoad>:
c001e441:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e446:	c3                   	ret    

c001e447 <sseInit>:
c001e447:	e8 40 00 00 00       	call   c001e48c <x87Init>
c001e44c:	0f 20 e0             	mov    eax,cr4
c001e44f:	66 0d 00 06          	or     ax,0x600
c001e453:	0f 22 e0             	mov    cr4,eax
c001e456:	c3                   	ret    

c001e457 <sseClose>:
c001e457:	c3                   	ret    
c001e458:	66 90                	xchg   ax,ax
c001e45a:	66 90                	xchg   ax,ax
c001e45c:	66 90                	xchg   ax,ax
c001e45e:	66 90                	xchg   ax,ax

c001e460 <value_37F>:
c001e460:	7f 03                	jg     c001e465 <value_37A+0x1>

c001e462 <value_37E>:
c001e462:	7e 03                	jle    c001e467 <x87Detect+0x1>

c001e464 <value_37A>:
c001e464:	7a 03                	jp     c001e469 <x87Detect+0x3>

c001e466 <x87Detect>:
c001e466:	b8 01 00 00 00       	mov    eax,0x1
c001e46b:	0f a2                	cpuid  
c001e46d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e473:	74 06                	je     c001e47b <x87Detect.nox87>
c001e475:	b8 01 00 00 00       	mov    eax,0x1
c001e47a:	c3                   	ret    

c001e47b <x87Detect.nox87>:
c001e47b:	b8 00 00 00 00       	mov    eax,0x0
c001e480:	c3                   	ret    

c001e481 <x87Save>:
c001e481:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e486:	c3                   	ret    

c001e487 <x87Load>:
c001e487:	dd 64 24 08          	frstor [esp+0x8]
c001e48b:	c3                   	ret    

c001e48c <x87Init>:
c001e48c:	9b db e3             	finit  
c001e48f:	0f 20 c0             	mov    eax,cr0
c001e492:	66 25 fb ff          	and    ax,0xfffb
c001e496:	66 0d 22 00          	or     ax,0x22
c001e49a:	0f 22 c0             	mov    cr0,eax
c001e49d:	0f 06                	clts   
c001e49f:	d9 2d 64 e4 01 c0    	fldcw  WORD PTR ds:0xc001e464
c001e4a5:	c3                   	ret    

c001e4a6 <x87Close>:
c001e4a6:	c3                   	ret    
c001e4a7:	90                   	nop

c001e4a8 <__do_global_ctors_aux>:
c001e4a8:	a1 88 f5 01 c0       	mov    eax,ds:0xc001f588
c001e4ad:	83 f8 ff             	cmp    eax,0xffffffff
c001e4b0:	74 1a                	je     c001e4cc <__do_global_ctors_aux+0x24>
c001e4b2:	55                   	push   ebp
c001e4b3:	89 e5                	mov    ebp,esp
c001e4b5:	53                   	push   ebx
c001e4b6:	52                   	push   edx
c001e4b7:	bb 88 f5 01 c0       	mov    ebx,0xc001f588
c001e4bc:	ff d0                	call   eax
c001e4be:	83 eb 04             	sub    ebx,0x4
c001e4c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e4c3:	83 f8 ff             	cmp    eax,0xffffffff
c001e4c6:	75 f4                	jne    c001e4bc <__do_global_ctors_aux+0x14>
c001e4c8:	58                   	pop    eax
c001e4c9:	5b                   	pop    ebx
c001e4ca:	5d                   	pop    ebp
c001e4cb:	c3                   	ret    
c001e4cc:	c3                   	ret    
c001e4cd:	66 90                	xchg   ax,ax
c001e4cf:	90                   	nop

c001e4d0 <__divdi3>:
c001e4d0:	55                   	push   ebp
c001e4d1:	57                   	push   edi
c001e4d2:	56                   	push   esi
c001e4d3:	53                   	push   ebx
c001e4d4:	83 ec 1c             	sub    esp,0x1c
c001e4d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e4db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e4ee:	85 db                	test   ebx,ebx
c001e4f0:	0f 88 8e 00 00 00    	js     c001e584 <__divdi3+0xb4>
c001e4f6:	89 dd                	mov    ebp,ebx
c001e4f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e500:	89 d3                	mov    ebx,edx
c001e502:	85 d2                	test   edx,edx
c001e504:	79 0d                	jns    c001e513 <__divdi3+0x43>
c001e506:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e50a:	f7 d8                	neg    eax
c001e50c:	83 d2 00             	adc    edx,0x0
c001e50f:	f7 da                	neg    edx
c001e511:	89 d3                	mov    ebx,edx
c001e513:	89 c7                	mov    edi,eax
c001e515:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e518:	85 db                	test   ebx,ebx
c001e51a:	75 48                	jne    c001e564 <__divdi3+0x94>
c001e51c:	39 ef                	cmp    edi,ebp
c001e51e:	76 24                	jbe    c001e544 <__divdi3+0x74>
c001e520:	89 ea                	mov    edx,ebp
c001e522:	f7 f7                	div    edi
c001e524:	89 c1                	mov    ecx,eax
c001e526:	31 f6                	xor    esi,esi
c001e528:	89 c8                	mov    eax,ecx
c001e52a:	89 f2                	mov    edx,esi
c001e52c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e530:	85 c9                	test   ecx,ecx
c001e532:	74 07                	je     c001e53b <__divdi3+0x6b>
c001e534:	f7 d8                	neg    eax
c001e536:	83 d2 00             	adc    edx,0x0
c001e539:	f7 da                	neg    edx
c001e53b:	83 c4 1c             	add    esp,0x1c
c001e53e:	5b                   	pop    ebx
c001e53f:	5e                   	pop    esi
c001e540:	5f                   	pop    edi
c001e541:	5d                   	pop    ebp
c001e542:	c3                   	ret    
c001e543:	90                   	nop
c001e544:	85 ff                	test   edi,edi
c001e546:	75 0b                	jne    c001e553 <__divdi3+0x83>
c001e548:	b8 01 00 00 00       	mov    eax,0x1
c001e54d:	31 d2                	xor    edx,edx
c001e54f:	f7 f3                	div    ebx
c001e551:	89 c7                	mov    edi,eax
c001e553:	31 d2                	xor    edx,edx
c001e555:	89 e8                	mov    eax,ebp
c001e557:	f7 f7                	div    edi
c001e559:	89 c6                	mov    esi,eax
c001e55b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e55e:	f7 f7                	div    edi
c001e560:	89 c1                	mov    ecx,eax
c001e562:	eb c4                	jmp    c001e528 <__divdi3+0x58>
c001e564:	39 eb                	cmp    ebx,ebp
c001e566:	77 3c                	ja     c001e5a4 <__divdi3+0xd4>
c001e568:	0f bd f3             	bsr    esi,ebx
c001e56b:	83 f6 1f             	xor    esi,0x1f
c001e56e:	75 40                	jne    c001e5b0 <__divdi3+0xe0>
c001e570:	39 eb                	cmp    ebx,ebp
c001e572:	72 09                	jb     c001e57d <__divdi3+0xad>
c001e574:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e577:	0f 87 97 00 00 00    	ja     c001e614 <__divdi3+0x144>
c001e57d:	b9 01 00 00 00       	mov    ecx,0x1
c001e582:	eb a4                	jmp    c001e528 <__divdi3+0x58>
c001e584:	f7 d9                	neg    ecx
c001e586:	83 d3 00             	adc    ebx,0x0
c001e589:	f7 db                	neg    ebx
c001e58b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e58e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e592:	89 dd                	mov    ebp,ebx
c001e594:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e59c:	e9 5f ff ff ff       	jmp    c001e500 <__divdi3+0x30>
c001e5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a4:	31 f6                	xor    esi,esi
c001e5a6:	31 c9                	xor    ecx,ecx
c001e5a8:	e9 7b ff ff ff       	jmp    c001e528 <__divdi3+0x58>
c001e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e5b0:	b8 20 00 00 00       	mov    eax,0x20
c001e5b5:	29 f0                	sub    eax,esi
c001e5b7:	89 f1                	mov    ecx,esi
c001e5b9:	d3 e3                	shl    ebx,cl
c001e5bb:	89 fa                	mov    edx,edi
c001e5bd:	88 c1                	mov    cl,al
c001e5bf:	d3 ea                	shr    edx,cl
c001e5c1:	09 da                	or     edx,ebx
c001e5c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e5c7:	89 f1                	mov    ecx,esi
c001e5c9:	d3 e7                	shl    edi,cl
c001e5cb:	89 eb                	mov    ebx,ebp
c001e5cd:	88 c1                	mov    cl,al
c001e5cf:	d3 eb                	shr    ebx,cl
c001e5d1:	89 f1                	mov    ecx,esi
c001e5d3:	d3 e5                	shl    ebp,cl
c001e5d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e5d8:	88 c1                	mov    cl,al
c001e5da:	d3 ea                	shr    edx,cl
c001e5dc:	09 d5                	or     ebp,edx
c001e5de:	89 e8                	mov    eax,ebp
c001e5e0:	89 da                	mov    edx,ebx
c001e5e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e5e6:	89 d3                	mov    ebx,edx
c001e5e8:	89 c5                	mov    ebp,eax
c001e5ea:	f7 e7                	mul    edi
c001e5ec:	39 d3                	cmp    ebx,edx
c001e5ee:	72 18                	jb     c001e608 <__divdi3+0x138>
c001e5f0:	74 0a                	je     c001e5fc <__divdi3+0x12c>
c001e5f2:	89 e9                	mov    ecx,ebp
c001e5f4:	31 f6                	xor    esi,esi
c001e5f6:	e9 2d ff ff ff       	jmp    c001e528 <__divdi3+0x58>
c001e5fb:	90                   	nop
c001e5fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e5ff:	89 f1                	mov    ecx,esi
c001e601:	d3 e7                	shl    edi,cl
c001e603:	39 c7                	cmp    edi,eax
c001e605:	73 eb                	jae    c001e5f2 <__divdi3+0x122>
c001e607:	90                   	nop
c001e608:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e60b:	31 f6                	xor    esi,esi
c001e60d:	e9 16 ff ff ff       	jmp    c001e528 <__divdi3+0x58>
c001e612:	66 90                	xchg   ax,ax
c001e614:	31 c9                	xor    ecx,ecx
c001e616:	e9 0d ff ff ff       	jmp    c001e528 <__divdi3+0x58>
c001e61b:	90                   	nop

c001e61c <__moddi3>:
c001e61c:	55                   	push   ebp
c001e61d:	57                   	push   edi
c001e61e:	56                   	push   esi
c001e61f:	53                   	push   ebx
c001e620:	83 ec 2c             	sub    esp,0x2c
c001e623:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e627:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e62b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e62f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e633:	85 db                	test   ebx,ebx
c001e635:	0f 88 85 00 00 00    	js     c001e6c0 <__moddi3+0xa4>
c001e63b:	89 de                	mov    esi,ebx
c001e63d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e645:	89 d7                	mov    edi,edx
c001e647:	85 d2                	test   edx,edx
c001e649:	79 09                	jns    c001e654 <__moddi3+0x38>
c001e64b:	f7 d8                	neg    eax
c001e64d:	83 d2 00             	adc    edx,0x0
c001e650:	f7 da                	neg    edx
c001e652:	89 d7                	mov    edi,edx
c001e654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e658:	89 cd                	mov    ebp,ecx
c001e65a:	85 ff                	test   edi,edi
c001e65c:	75 52                	jne    c001e6b0 <__moddi3+0x94>
c001e65e:	89 c3                	mov    ebx,eax
c001e660:	39 f0                	cmp    eax,esi
c001e662:	76 24                	jbe    c001e688 <__moddi3+0x6c>
c001e664:	89 c8                	mov    eax,ecx
c001e666:	89 f2                	mov    edx,esi
c001e668:	f7 f3                	div    ebx
c001e66a:	89 d6                	mov    esi,edx
c001e66c:	89 f0                	mov    eax,esi
c001e66e:	31 d2                	xor    edx,edx
c001e670:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e674:	85 c9                	test   ecx,ecx
c001e676:	74 07                	je     c001e67f <__moddi3+0x63>
c001e678:	f7 d8                	neg    eax
c001e67a:	83 d2 00             	adc    edx,0x0
c001e67d:	f7 da                	neg    edx
c001e67f:	83 c4 2c             	add    esp,0x2c
c001e682:	5b                   	pop    ebx
c001e683:	5e                   	pop    esi
c001e684:	5f                   	pop    edi
c001e685:	5d                   	pop    ebp
c001e686:	c3                   	ret    
c001e687:	90                   	nop
c001e688:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e68c:	85 db                	test   ebx,ebx
c001e68e:	75 0d                	jne    c001e69d <__moddi3+0x81>
c001e690:	b8 01 00 00 00       	mov    eax,0x1
c001e695:	31 d2                	xor    edx,edx
c001e697:	f7 f7                	div    edi
c001e699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e69d:	89 f0                	mov    eax,esi
c001e69f:	31 d2                	xor    edx,edx
c001e6a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6a5:	f7 f7                	div    edi
c001e6a7:	89 e8                	mov    eax,ebp
c001e6a9:	f7 f7                	div    edi
c001e6ab:	89 d6                	mov    esi,edx
c001e6ad:	eb bd                	jmp    c001e66c <__moddi3+0x50>
c001e6af:	90                   	nop
c001e6b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6b4:	39 f7                	cmp    edi,esi
c001e6b6:	76 20                	jbe    c001e6d8 <__moddi3+0xbc>
c001e6b8:	89 c8                	mov    eax,ecx
c001e6ba:	89 f2                	mov    edx,esi
c001e6bc:	eb b2                	jmp    c001e670 <__moddi3+0x54>
c001e6be:	66 90                	xchg   ax,ax
c001e6c0:	f7 d9                	neg    ecx
c001e6c2:	83 d3 00             	adc    ebx,0x0
c001e6c5:	f7 db                	neg    ebx
c001e6c7:	89 de                	mov    esi,ebx
c001e6c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e6d1:	e9 6f ff ff ff       	jmp    c001e645 <__moddi3+0x29>
c001e6d6:	66 90                	xchg   ax,ax
c001e6d8:	0f bd c7             	bsr    eax,edi
c001e6db:	83 f0 1f             	xor    eax,0x1f
c001e6de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e6e2:	75 24                	jne    c001e708 <__moddi3+0xec>
c001e6e4:	39 f7                	cmp    edi,esi
c001e6e6:	72 06                	jb     c001e6ee <__moddi3+0xd2>
c001e6e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e6ec:	77 0c                	ja     c001e6fa <__moddi3+0xde>
c001e6ee:	89 e9                	mov    ecx,ebp
c001e6f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e6f4:	19 fe                	sbb    esi,edi
c001e6f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6fe:	89 f2                	mov    edx,esi
c001e700:	e9 6b ff ff ff       	jmp    c001e670 <__moddi3+0x54>
c001e705:	8d 76 00             	lea    esi,[esi+0x0]
c001e708:	b8 20 00 00 00       	mov    eax,0x20
c001e70d:	89 c2                	mov    edx,eax
c001e70f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e713:	29 da                	sub    edx,ebx
c001e715:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e719:	88 d9                	mov    cl,bl
c001e71b:	d3 e7                	shl    edi,cl
c001e71d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e721:	88 d1                	mov    cl,dl
c001e723:	d3 e8                	shr    eax,cl
c001e725:	09 c7                	or     edi,eax
c001e727:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e72b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e72f:	89 d8                	mov    eax,ebx
c001e731:	88 d9                	mov    cl,bl
c001e733:	d3 e7                	shl    edi,cl
c001e735:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e739:	89 f3                	mov    ebx,esi
c001e73b:	88 d1                	mov    cl,dl
c001e73d:	d3 eb                	shr    ebx,cl
c001e73f:	89 c7                	mov    edi,eax
c001e741:	88 c1                	mov    cl,al
c001e743:	d3 e6                	shl    esi,cl
c001e745:	89 e8                	mov    eax,ebp
c001e747:	88 d1                	mov    cl,dl
c001e749:	d3 e8                	shr    eax,cl
c001e74b:	09 f0                	or     eax,esi
c001e74d:	89 f9                	mov    ecx,edi
c001e74f:	d3 e5                	shl    ebp,cl
c001e751:	89 da                	mov    edx,ebx
c001e753:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e757:	89 d3                	mov    ebx,edx
c001e759:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e75d:	89 c6                	mov    esi,eax
c001e75f:	89 d1                	mov    ecx,edx
c001e761:	39 d3                	cmp    ebx,edx
c001e763:	72 27                	jb     c001e78c <__moddi3+0x170>
c001e765:	74 21                	je     c001e788 <__moddi3+0x16c>
c001e767:	29 f5                	sub    ebp,esi
c001e769:	19 cb                	sbb    ebx,ecx
c001e76b:	89 de                	mov    esi,ebx
c001e76d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e771:	d3 e6                	shl    esi,cl
c001e773:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e777:	89 f9                	mov    ecx,edi
c001e779:	d3 ed                	shr    ebp,cl
c001e77b:	09 ee                	or     esi,ebp
c001e77d:	89 f0                	mov    eax,esi
c001e77f:	d3 eb                	shr    ebx,cl
c001e781:	89 da                	mov    edx,ebx
c001e783:	e9 e8 fe ff ff       	jmp    c001e670 <__moddi3+0x54>
c001e788:	39 c5                	cmp    ebp,eax
c001e78a:	73 db                	jae    c001e767 <__moddi3+0x14b>
c001e78c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e790:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e794:	89 d1                	mov    ecx,edx
c001e796:	89 c6                	mov    esi,eax
c001e798:	eb cd                	jmp    c001e767 <__moddi3+0x14b>
c001e79a:	66 90                	xchg   ax,ax

c001e79c <__udivdi3>:
c001e79c:	55                   	push   ebp
c001e79d:	57                   	push   edi
c001e79e:	56                   	push   esi
c001e79f:	53                   	push   ebx
c001e7a0:	83 ec 1c             	sub    esp,0x1c
c001e7a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e7a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e7ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e7b3:	85 d2                	test   edx,edx
c001e7b5:	75 41                	jne    c001e7f8 <__udivdi3+0x5c>
c001e7b7:	39 f7                	cmp    edi,esi
c001e7b9:	76 15                	jbe    c001e7d0 <__udivdi3+0x34>
c001e7bb:	89 e8                	mov    eax,ebp
c001e7bd:	89 f2                	mov    edx,esi
c001e7bf:	f7 f7                	div    edi
c001e7c1:	31 db                	xor    ebx,ebx
c001e7c3:	89 da                	mov    edx,ebx
c001e7c5:	83 c4 1c             	add    esp,0x1c
c001e7c8:	5b                   	pop    ebx
c001e7c9:	5e                   	pop    esi
c001e7ca:	5f                   	pop    edi
c001e7cb:	5d                   	pop    ebp
c001e7cc:	c3                   	ret    
c001e7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d0:	89 f9                	mov    ecx,edi
c001e7d2:	85 ff                	test   edi,edi
c001e7d4:	75 0b                	jne    c001e7e1 <__udivdi3+0x45>
c001e7d6:	b8 01 00 00 00       	mov    eax,0x1
c001e7db:	31 d2                	xor    edx,edx
c001e7dd:	f7 f7                	div    edi
c001e7df:	89 c1                	mov    ecx,eax
c001e7e1:	31 d2                	xor    edx,edx
c001e7e3:	89 f0                	mov    eax,esi
c001e7e5:	f7 f1                	div    ecx
c001e7e7:	89 c3                	mov    ebx,eax
c001e7e9:	89 e8                	mov    eax,ebp
c001e7eb:	f7 f1                	div    ecx
c001e7ed:	89 da                	mov    edx,ebx
c001e7ef:	83 c4 1c             	add    esp,0x1c
c001e7f2:	5b                   	pop    ebx
c001e7f3:	5e                   	pop    esi
c001e7f4:	5f                   	pop    edi
c001e7f5:	5d                   	pop    ebp
c001e7f6:	c3                   	ret    
c001e7f7:	90                   	nop
c001e7f8:	39 f2                	cmp    edx,esi
c001e7fa:	77 1c                	ja     c001e818 <__udivdi3+0x7c>
c001e7fc:	0f bd da             	bsr    ebx,edx
c001e7ff:	83 f3 1f             	xor    ebx,0x1f
c001e802:	75 24                	jne    c001e828 <__udivdi3+0x8c>
c001e804:	39 f2                	cmp    edx,esi
c001e806:	72 08                	jb     c001e810 <__udivdi3+0x74>
c001e808:	39 ef                	cmp    edi,ebp
c001e80a:	0f 87 84 00 00 00    	ja     c001e894 <__udivdi3+0xf8>
c001e810:	b8 01 00 00 00       	mov    eax,0x1
c001e815:	eb ac                	jmp    c001e7c3 <__udivdi3+0x27>
c001e817:	90                   	nop
c001e818:	31 db                	xor    ebx,ebx
c001e81a:	31 c0                	xor    eax,eax
c001e81c:	89 da                	mov    edx,ebx
c001e81e:	83 c4 1c             	add    esp,0x1c
c001e821:	5b                   	pop    ebx
c001e822:	5e                   	pop    esi
c001e823:	5f                   	pop    edi
c001e824:	5d                   	pop    ebp
c001e825:	c3                   	ret    
c001e826:	66 90                	xchg   ax,ax
c001e828:	b8 20 00 00 00       	mov    eax,0x20
c001e82d:	29 d8                	sub    eax,ebx
c001e82f:	88 d9                	mov    cl,bl
c001e831:	d3 e2                	shl    edx,cl
c001e833:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e837:	89 fa                	mov    edx,edi
c001e839:	88 c1                	mov    cl,al
c001e83b:	d3 ea                	shr    edx,cl
c001e83d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e841:	09 d1                	or     ecx,edx
c001e843:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e847:	88 d9                	mov    cl,bl
c001e849:	d3 e7                	shl    edi,cl
c001e84b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e84f:	89 f7                	mov    edi,esi
c001e851:	88 c1                	mov    cl,al
c001e853:	d3 ef                	shr    edi,cl
c001e855:	88 d9                	mov    cl,bl
c001e857:	d3 e6                	shl    esi,cl
c001e859:	89 ea                	mov    edx,ebp
c001e85b:	88 c1                	mov    cl,al
c001e85d:	d3 ea                	shr    edx,cl
c001e85f:	09 d6                	or     esi,edx
c001e861:	89 f0                	mov    eax,esi
c001e863:	89 fa                	mov    edx,edi
c001e865:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e869:	89 d7                	mov    edi,edx
c001e86b:	89 c6                	mov    esi,eax
c001e86d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e871:	39 d7                	cmp    edi,edx
c001e873:	72 13                	jb     c001e888 <__udivdi3+0xec>
c001e875:	74 09                	je     c001e880 <__udivdi3+0xe4>
c001e877:	89 f0                	mov    eax,esi
c001e879:	31 db                	xor    ebx,ebx
c001e87b:	e9 43 ff ff ff       	jmp    c001e7c3 <__udivdi3+0x27>
c001e880:	88 d9                	mov    cl,bl
c001e882:	d3 e5                	shl    ebp,cl
c001e884:	39 c5                	cmp    ebp,eax
c001e886:	73 ef                	jae    c001e877 <__udivdi3+0xdb>
c001e888:	8d 46 ff             	lea    eax,[esi-0x1]
c001e88b:	31 db                	xor    ebx,ebx
c001e88d:	e9 31 ff ff ff       	jmp    c001e7c3 <__udivdi3+0x27>
c001e892:	66 90                	xchg   ax,ax
c001e894:	31 c0                	xor    eax,eax
c001e896:	e9 28 ff ff ff       	jmp    c001e7c3 <__udivdi3+0x27>
c001e89b:	90                   	nop

c001e89c <__umoddi3>:
c001e89c:	55                   	push   ebp
c001e89d:	57                   	push   edi
c001e89e:	56                   	push   esi
c001e89f:	53                   	push   ebx
c001e8a0:	83 ec 1c             	sub    esp,0x1c
c001e8a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e8a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e8ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e8af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e8b3:	89 da                	mov    edx,ebx
c001e8b5:	85 c0                	test   eax,eax
c001e8b7:	75 37                	jne    c001e8f0 <__umoddi3+0x54>
c001e8b9:	39 df                	cmp    edi,ebx
c001e8bb:	76 13                	jbe    c001e8d0 <__umoddi3+0x34>
c001e8bd:	89 f0                	mov    eax,esi
c001e8bf:	f7 f7                	div    edi
c001e8c1:	89 d0                	mov    eax,edx
c001e8c3:	31 d2                	xor    edx,edx
c001e8c5:	83 c4 1c             	add    esp,0x1c
c001e8c8:	5b                   	pop    ebx
c001e8c9:	5e                   	pop    esi
c001e8ca:	5f                   	pop    edi
c001e8cb:	5d                   	pop    ebp
c001e8cc:	c3                   	ret    
c001e8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e8d0:	89 fd                	mov    ebp,edi
c001e8d2:	85 ff                	test   edi,edi
c001e8d4:	75 0b                	jne    c001e8e1 <__umoddi3+0x45>
c001e8d6:	b8 01 00 00 00       	mov    eax,0x1
c001e8db:	31 d2                	xor    edx,edx
c001e8dd:	f7 f7                	div    edi
c001e8df:	89 c5                	mov    ebp,eax
c001e8e1:	89 d8                	mov    eax,ebx
c001e8e3:	31 d2                	xor    edx,edx
c001e8e5:	f7 f5                	div    ebp
c001e8e7:	89 f0                	mov    eax,esi
c001e8e9:	f7 f5                	div    ebp
c001e8eb:	89 d0                	mov    eax,edx
c001e8ed:	eb d4                	jmp    c001e8c3 <__umoddi3+0x27>
c001e8ef:	90                   	nop
c001e8f0:	89 f1                	mov    ecx,esi
c001e8f2:	39 d8                	cmp    eax,ebx
c001e8f4:	76 0a                	jbe    c001e900 <__umoddi3+0x64>
c001e8f6:	89 f0                	mov    eax,esi
c001e8f8:	83 c4 1c             	add    esp,0x1c
c001e8fb:	5b                   	pop    ebx
c001e8fc:	5e                   	pop    esi
c001e8fd:	5f                   	pop    edi
c001e8fe:	5d                   	pop    ebp
c001e8ff:	c3                   	ret    
c001e900:	0f bd e8             	bsr    ebp,eax
c001e903:	83 f5 1f             	xor    ebp,0x1f
c001e906:	75 1c                	jne    c001e924 <__umoddi3+0x88>
c001e908:	39 d8                	cmp    eax,ebx
c001e90a:	72 04                	jb     c001e910 <__umoddi3+0x74>
c001e90c:	39 f7                	cmp    edi,esi
c001e90e:	77 08                	ja     c001e918 <__umoddi3+0x7c>
c001e910:	89 da                	mov    edx,ebx
c001e912:	29 fe                	sub    esi,edi
c001e914:	19 c2                	sbb    edx,eax
c001e916:	89 f1                	mov    ecx,esi
c001e918:	89 c8                	mov    eax,ecx
c001e91a:	83 c4 1c             	add    esp,0x1c
c001e91d:	5b                   	pop    ebx
c001e91e:	5e                   	pop    esi
c001e91f:	5f                   	pop    edi
c001e920:	5d                   	pop    ebp
c001e921:	c3                   	ret    
c001e922:	66 90                	xchg   ax,ax
c001e924:	ba 20 00 00 00       	mov    edx,0x20
c001e929:	29 ea                	sub    edx,ebp
c001e92b:	89 e9                	mov    ecx,ebp
c001e92d:	d3 e0                	shl    eax,cl
c001e92f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e933:	89 f8                	mov    eax,edi
c001e935:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e939:	88 d1                	mov    cl,dl
c001e93b:	d3 e8                	shr    eax,cl
c001e93d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e941:	09 c1                	or     ecx,eax
c001e943:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e947:	89 e9                	mov    ecx,ebp
c001e949:	d3 e7                	shl    edi,cl
c001e94b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e94f:	89 d8                	mov    eax,ebx
c001e951:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e955:	88 d1                	mov    cl,dl
c001e957:	d3 e8                	shr    eax,cl
c001e959:	89 c7                	mov    edi,eax
c001e95b:	89 e9                	mov    ecx,ebp
c001e95d:	d3 e3                	shl    ebx,cl
c001e95f:	89 f0                	mov    eax,esi
c001e961:	88 d1                	mov    cl,dl
c001e963:	d3 e8                	shr    eax,cl
c001e965:	09 d8                	or     eax,ebx
c001e967:	89 e9                	mov    ecx,ebp
c001e969:	d3 e6                	shl    esi,cl
c001e96b:	89 f3                	mov    ebx,esi
c001e96d:	89 fa                	mov    edx,edi
c001e96f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e973:	89 d1                	mov    ecx,edx
c001e975:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e979:	89 c6                	mov    esi,eax
c001e97b:	89 d7                	mov    edi,edx
c001e97d:	39 d1                	cmp    ecx,edx
c001e97f:	72 27                	jb     c001e9a8 <__umoddi3+0x10c>
c001e981:	74 21                	je     c001e9a4 <__umoddi3+0x108>
c001e983:	89 ca                	mov    edx,ecx
c001e985:	29 f3                	sub    ebx,esi
c001e987:	19 fa                	sbb    edx,edi
c001e989:	89 d0                	mov    eax,edx
c001e98b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e98f:	d3 e0                	shl    eax,cl
c001e991:	89 e9                	mov    ecx,ebp
c001e993:	d3 eb                	shr    ebx,cl
c001e995:	09 d8                	or     eax,ebx
c001e997:	d3 ea                	shr    edx,cl
c001e999:	83 c4 1c             	add    esp,0x1c
c001e99c:	5b                   	pop    ebx
c001e99d:	5e                   	pop    esi
c001e99e:	5f                   	pop    edi
c001e99f:	5d                   	pop    ebp
c001e9a0:	c3                   	ret    
c001e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9a4:	39 c3                	cmp    ebx,eax
c001e9a6:	73 db                	jae    c001e983 <__umoddi3+0xe7>
c001e9a8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e9ac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e9b0:	89 d7                	mov    edi,edx
c001e9b2:	89 c6                	mov    esi,eax
c001e9b4:	eb cd                	jmp    c001e983 <__umoddi3+0xe7>
c001e9b6:	66 90                	xchg   ax,ax
c001e9b8:	66 90                	xchg   ax,ax
c001e9ba:	66 90                	xchg   ax,ax
c001e9bc:	66 90                	xchg   ax,ax
c001e9be:	66 90                	xchg   ax,ax

c001e9c0 <fabs>:
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e9ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e9ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e9d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9d7:	dd 04 24             	fld    QWORD PTR [esp]
c001e9da:	83 c4 0c             	add    esp,0xc
c001e9dd:	c3                   	ret    
c001e9de:	66 90                	xchg   ax,ax

c001e9e0 <lrint>:
c001e9e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e9e4:	83 ec 04             	sub    esp,0x4
c001e9e7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9ea:	58                   	pop    eax
c001e9eb:	c3                   	ret    

c001e9ec <lrintf>:
c001e9ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e9f0:	83 ec 04             	sub    esp,0x4
c001e9f3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9f6:	58                   	pop    eax
c001e9f7:	c3                   	ret    

Disassembly of section .init:

c001e9f8 <_init>:
c001e9f8:	55                   	push   ebp
c001e9f9:	89 e5                	mov    ebp,esp
c001e9fb:	e8 18 17 fe ff       	call   c0000118 <frame_dummy>
c001ea00:	e8 a3 fa ff ff       	call   c001e4a8 <__do_global_ctors_aux>
c001ea05:	5d                   	pop    ebp
c001ea06:	c3                   	ret    

Disassembly of section .fini:

c001ea07 <_fini>:
c001ea07:	55                   	push   ebp
c001ea08:	89 e5                	mov    ebp,esp
c001ea0a:	e8 99 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001ea0f:	5d                   	pop    ebp
c001ea10:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ea12 <Computer::~Computer()>:
c001ea12:	83 ec 0c             	sub    esp,0xc
c001ea15:	ba ec 03 02 c0       	mov    edx,0xc00203ec
c001ea1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1e:	89 10                	mov    DWORD PTR [eax],edx
c001ea20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	50                   	push   eax
c001ea28:	e8 a9 18 ff ff       	call   c00102d6 <Device::~Device()>
c001ea2d:	83 c4 10             	add    esp,0x10
c001ea30:	90                   	nop
c001ea31:	83 c4 0c             	add    esp,0xc
c001ea34:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ea36 <Computer::~Computer()>:
c001ea36:	83 ec 0c             	sub    esp,0xc
c001ea39:	83 ec 0c             	sub    esp,0xc
c001ea3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea40:	e8 cd ff ff ff       	call   c001ea12 <Computer::~Computer()>
c001ea45:	83 c4 10             	add    esp,0x10
c001ea48:	83 ec 08             	sub    esp,0x8
c001ea4b:	68 ec 01 00 00       	push   0x1ec
c001ea50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea54:	e8 f0 04 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	83 c4 0c             	add    esp,0xc
c001ea5f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea60 <idleCommon()>:
c001ea60:	83 ec 0c             	sub    esp,0xc
c001ea63:	e8 92 91 ff ff       	call   c0017bfa <lockScheduler()>
c001ea68:	e8 c1 94 ff ff       	call   c0017f2e <schedule()>
c001ea6d:	83 c4 0c             	add    esp,0xc
c001ea70:	e9 87 91 ff ff       	jmp    c0017bfc <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea75 <CPU::readCR3()>:
c001ea75:	83 ec 10             	sub    esp,0x10
c001ea78:	0f 20 d8             	mov    eax,cr3
c001ea7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea83:	83 c4 10             	add    esp,0x10
c001ea86:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea87 <CPU::writeCR3(unsigned long)>:
c001ea87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea8b:	0f 22 d8             	mov    cr3,eax
c001ea8e:	90                   	nop
c001ea8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ea90 <LinkedList<UnixFile>::~LinkedList()>:
c001ea90:	90                   	nop
c001ea91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ea92 <LinkedList<UnixFile>::LinkedList()>:
c001ea92:	83 ec 0c             	sub    esp,0xc
c001ea95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	68 85 06 02 c0       	push   0xc0020685
c001eadd:	e8 47 05 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	90                   	nop
c001eae6:	83 c4 0c             	add    esp,0xc
c001eae9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001eaea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001eaea:	83 ec 0c             	sub    esp,0xc
c001eaed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eaf2:	75 10                	jne    c001eb04 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eaf4:	83 ec 0c             	sub    esp,0xc
c001eaf7:	68 a0 06 02 c0       	push   0xc00206a0
c001eafc:	e8 bd 61 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eb01:	83 c4 10             	add    esp,0x10
c001eb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb08:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb0a:	85 c0                	test   eax,eax
c001eb0c:	74 34                	je     c001eb42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb15:	85 c0                	test   eax,eax
c001eb17:	74 29                	je     c001eb42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb40:	eb 65                	jmp    c001eba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb46:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb48:	85 c0                	test   eax,eax
c001eb4a:	75 4b                	jne    c001eb97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb53:	85 c0                	test   eax,eax
c001eb55:	75 40                	jne    c001eb97 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5f:	89 10                	mov    DWORD PTR [eax],edx
c001eb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb73:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb81:	85 c0                	test   eax,eax
c001eb83:	74 22                	je     c001eba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb85:	83 ec 0c             	sub    esp,0xc
c001eb88:	68 c2 06 02 c0       	push   0xc00206c2
c001eb8d:	e8 2c 61 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eb92:	83 c4 10             	add    esp,0x10
c001eb95:	eb 10                	jmp    c001eba7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb97:	83 ec 0c             	sub    esp,0xc
c001eb9a:	68 cc 06 02 c0       	push   0xc00206cc
c001eb9f:	e8 1a 61 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eba4:	83 c4 10             	add    esp,0x10
c001eba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebae:	8d 50 01             	lea    edx,[eax+0x1]
c001ebb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebb8:	90                   	nop
c001ebb9:	83 c4 0c             	add    esp,0xc
c001ebbc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ebbe <LinkedList<UnixFile>::getFirstElement()>:
c001ebbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ebc6 <LinkedList<UnixFile>::removeFirst()>:
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebcf:	85 c0                	test   eax,eax
c001ebd1:	75 12                	jne    c001ebe5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ebd3:	83 ec 0c             	sub    esp,0xc
c001ebd6:	68 d8 06 02 c0       	push   0xc00206d8
c001ebdb:	e8 de 60 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ebe0:	83 c4 10             	add    esp,0x10
c001ebe3:	eb 7e                	jmp    c001ec63 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ebe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebef:	85 c0                	test   eax,eax
c001ebf1:	74 10                	je     c001ec03 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ebf3:	83 ec 0c             	sub    esp,0xc
c001ebf6:	68 23 07 02 c0       	push   0xc0020723
c001ebfb:	e8 be 60 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec0c:	85 c0                	test   eax,eax
c001ec0e:	75 33                	jne    c001ec43 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec29:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec2c:	83 f8 01             	cmp    eax,0x1
c001ec2f:	74 21                	je     c001ec52 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec31:	83 ec 0c             	sub    esp,0xc
c001ec34:	68 fc 06 02 c0       	push   0xc00206fc
c001ec39:	e8 80 60 ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	eb 0f                	jmp    c001ec52 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec49:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	89 10                	mov    DWORD PTR [eax],edx
c001ec52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec59:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec63:	83 c4 0c             	add    esp,0xc
c001ec66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ec68 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ec68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec6f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ec70 <DriverlessDevice::~DriverlessDevice()>:
c001ec70:	ba 44 0e 02 c0       	mov    edx,0xc0020e44
c001ec75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec79:	89 10                	mov    DWORD PTR [eax],edx
c001ec7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec7f:	50                   	push   eax
c001ec80:	e8 51 16 ff ff       	call   c00102d6 <Device::~Device()>
c001ec85:	83 c4 04             	add    esp,0x4
c001ec88:	90                   	nop
c001ec89:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ec8a <DriverlessDevice::~DriverlessDevice()>:
c001ec8a:	83 ec 0c             	sub    esp,0xc
c001ec8d:	83 ec 0c             	sub    esp,0xc
c001ec90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec94:	e8 d7 ff ff ff       	call   c001ec70 <DriverlessDevice::~DriverlessDevice()>
c001ec99:	83 c4 10             	add    esp,0x10
c001ec9c:	83 ec 08             	sub    esp,0x8
c001ec9f:	68 58 01 00 00       	push   0x158
c001eca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eca8:	e8 9c 02 ff ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001ecad:	83 c4 10             	add    esp,0x10
c001ecb0:	83 c4 0c             	add    esp,0xc
c001ecb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ecb4 <LinkedList<Device>::addElement(Device*)>:
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecbc:	75 10                	jne    c001ecce <LinkedList<Device>::addElement(Device*)+0x1a>
c001ecbe:	83 ec 0c             	sub    esp,0xc
c001ecc1:	68 a0 06 02 c0       	push   0xc00206a0
c001ecc6:	e8 f3 5f ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd4:	85 c0                	test   eax,eax
c001ecd6:	74 3a                	je     c001ed12 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecdf:	85 c0                	test   eax,eax
c001ece1:	74 2f                	je     c001ed12 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ece3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecee:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecfc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed06:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed10:	eb 68                	jmp    c001ed7a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed16:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed18:	85 c0                	test   eax,eax
c001ed1a:	75 4e                	jne    c001ed6a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed23:	85 c0                	test   eax,eax
c001ed25:	75 43                	jne    c001ed6a <LinkedList<Device>::addElement(Device*)+0xb6>
c001ed27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed2f:	89 10                	mov    DWORD PTR [eax],edx
c001ed31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed43:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed54:	85 c0                	test   eax,eax
c001ed56:	74 22                	je     c001ed7a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	68 c2 06 02 c0       	push   0xc00206c2
c001ed60:	e8 59 5f ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ed65:	83 c4 10             	add    esp,0x10
c001ed68:	eb 10                	jmp    c001ed7a <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed6a:	83 ec 0c             	sub    esp,0xc
c001ed6d:	68 cc 06 02 c0       	push   0xc00206cc
c001ed72:	e8 47 5f ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed81:	8d 50 01             	lea    edx,[eax+0x1]
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed8b:	90                   	nop
c001ed8c:	83 c4 0c             	add    esp,0xc
c001ed8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ed90 <LinkedList<Device>::LinkedList()>:
c001ed90:	83 ec 0c             	sub    esp,0xc
c001ed93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edd3:	83 ec 0c             	sub    esp,0xc
c001edd6:	68 85 06 02 c0       	push   0xc0020685
c001eddb:	e8 49 02 ff ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001ede0:	83 c4 10             	add    esp,0x10
c001ede3:	90                   	nop
c001ede4:	83 c4 0c             	add    esp,0xc
c001ede7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001ede8 <CPU::readCR0()>:
c001ede8:	83 ec 10             	sub    esp,0x10
c001edeb:	0f 20 c0             	mov    eax,cr0
c001edee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf6:	83 c4 10             	add    esp,0x10
c001edf9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001edfa <CPU::writeCR0(unsigned long)>:
c001edfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edfe:	0f 22 c0             	mov    cr0,eax
c001ee01:	90                   	nop
c001ee02:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ee03 <CPU::readDR0()>:
c001ee03:	83 ec 10             	sub    esp,0x10
c001ee06:	0f 21 c0             	mov    eax,db0
c001ee09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ee15 <CPU::readDR1()>:
c001ee15:	83 ec 10             	sub    esp,0x10
c001ee18:	0f 21 c8             	mov    eax,db1
c001ee1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee23:	83 c4 10             	add    esp,0x10
c001ee26:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ee27 <CPU::readDR2()>:
c001ee27:	83 ec 10             	sub    esp,0x10
c001ee2a:	0f 21 d0             	mov    eax,db2
c001ee2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee35:	83 c4 10             	add    esp,0x10
c001ee38:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ee39 <CPU::readDR3()>:
c001ee39:	83 ec 10             	sub    esp,0x10
c001ee3c:	0f 21 d8             	mov    eax,db3
c001ee3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ee4b <CPU::readDR6()>:
c001ee4b:	83 ec 10             	sub    esp,0x10
c001ee4e:	0f 21 f0             	mov    eax,db6
c001ee51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee59:	83 c4 10             	add    esp,0x10
c001ee5c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ee5d <CPU::readDR7()>:
c001ee5d:	83 ec 10             	sub    esp,0x10
c001ee60:	0f 21 f8             	mov    eax,db7
c001ee63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee6b:	83 c4 10             	add    esp,0x10
c001ee6e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ee70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ee70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee76:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ee78 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ee78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7e:	85 c0                	test   eax,eax
c001ee80:	75 0e                	jne    c001ee90 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee89:	85 c0                	test   eax,eax
c001ee8b:	75 03                	jne    c001ee90 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee8d:	b0 01                	mov    al,0x1
c001ee8f:	c3                   	ret    
c001ee90:	b0 00                	mov    al,0x0
c001ee92:	90                   	nop
c001ee93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ee94 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9d:	85 c0                	test   eax,eax
c001ee9f:	75 15                	jne    c001eeb6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eea1:	83 ec 0c             	sub    esp,0xc
c001eea4:	68 d8 06 02 c0       	push   0xc00206d8
c001eea9:	e8 10 5e ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eeae:	83 c4 10             	add    esp,0x10
c001eeb1:	e9 88 00 00 00       	jmp    c001ef3e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eebd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eec0:	85 c0                	test   eax,eax
c001eec2:	0f 95 c0             	setne  al
c001eec5:	84 c0                	test   al,al
c001eec7:	74 10                	je     c001eed9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	68 23 07 02 c0       	push   0xc0020723
c001eed1:	e8 e8 5d ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eedf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eee2:	85 c0                	test   eax,eax
c001eee4:	0f 94 c0             	sete   al
c001eee7:	84 c0                	test   al,al
c001eee9:	74 33                	je     c001ef1e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef07:	83 f8 01             	cmp    eax,0x1
c001ef0a:	74 21                	je     c001ef2d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	68 fc 06 02 c0       	push   0xc00206fc
c001ef14:	e8 a5 5d ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	eb 0f                	jmp    c001ef2d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef24:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	89 10                	mov    DWORD PTR [eax],edx
c001ef2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef34:	8d 50 ff             	lea    edx,[eax-0x1]
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef3e:	83 c4 0c             	add    esp,0xc
c001ef41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ef42 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ef42:	83 ec 0c             	sub    esp,0xc
c001ef45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef4a:	75 10                	jne    c001ef5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	68 a0 06 02 c0       	push   0xc00206a0
c001ef54:	e8 65 5d ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001ef59:	83 c4 10             	add    esp,0x10
c001ef5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef62:	85 c0                	test   eax,eax
c001ef64:	74 34                	je     c001ef9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef6d:	85 c0                	test   eax,eax
c001ef6f:	74 29                	je     c001ef9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ef7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef98:	eb 65                	jmp    c001efff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001efa0:	85 c0                	test   eax,eax
c001efa2:	75 4b                	jne    c001efef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efab:	85 c0                	test   eax,eax
c001efad:	75 40                	jne    c001efef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001efaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efb7:	89 10                	mov    DWORD PTR [eax],edx
c001efb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001efc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efcb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efd9:	85 c0                	test   eax,eax
c001efdb:	74 22                	je     c001efff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efdd:	83 ec 0c             	sub    esp,0xc
c001efe0:	68 c2 06 02 c0       	push   0xc00206c2
c001efe5:	e8 d4 5c ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	eb 10                	jmp    c001efff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efef:	83 ec 0c             	sub    esp,0xc
c001eff2:	68 cc 06 02 c0       	push   0xc00206cc
c001eff7:	e8 c2 5c ff ff       	call   c0014cbe <Krnl::panic(char const*)>
c001effc:	83 c4 10             	add    esp,0x10
c001efff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f003:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f006:	8d 50 01             	lea    edx,[eax+0x1]
c001f009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f010:	90                   	nop
c001f011:	83 c4 0c             	add    esp,0xc
c001f014:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f016 <ACPI::~ACPI()>:
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c001f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f022:	89 10                	mov    DWORD PTR [eax],edx
c001f024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	50                   	push   eax
c001f02c:	e8 a5 12 ff ff       	call   c00102d6 <Device::~Device()>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	90                   	nop
c001f035:	83 c4 0c             	add    esp,0xc
c001f038:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f03a <ACPI::~ACPI()>:
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	83 ec 0c             	sub    esp,0xc
c001f040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f044:	e8 cd ff ff ff       	call   c001f016 <ACPI::~ACPI()>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	83 ec 08             	sub    esp,0x8
c001f04f:	68 68 22 00 00       	push   0x2268
c001f054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f058:	e8 ec fe fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	83 c4 0c             	add    esp,0xc
c001f063:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f064 <CPU::~CPU()>:
c001f064:	83 ec 0c             	sub    esp,0xc
c001f067:	ba 20 18 02 c0       	mov    edx,0xc0021820
c001f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f070:	89 10                	mov    DWORD PTR [eax],edx
c001f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	50                   	push   eax
c001f07a:	e8 57 12 ff ff       	call   c00102d6 <Device::~Device()>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	90                   	nop
c001f083:	83 c4 0c             	add    esp,0xc
c001f086:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f088 <CPU::~CPU()>:
c001f088:	83 ec 0c             	sub    esp,0xc
c001f08b:	83 ec 0c             	sub    esp,0xc
c001f08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f092:	e8 cd ff ff ff       	call   c001f064 <CPU::~CPU()>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	83 ec 08             	sub    esp,0x8
c001f09d:	68 98 11 00 00       	push   0x1198
c001f0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a6:	e8 9e fe fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	83 c4 0c             	add    esp,0xc
c001f0b1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f0b2 <CPU::readCR4()>:
c001f0b2:	83 ec 10             	sub    esp,0x10
c001f0b5:	0f 20 e0             	mov    eax,cr4
c001f0b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0c4 <CPU::writeDR7(unsigned long)>:
c001f0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c8:	0f 23 f8             	mov    db7,eax
c001f0cb:	90                   	nop
c001f0cc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0cd <CPU::writeCR4(unsigned long)>:
c001f0cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d1:	0f 22 e0             	mov    cr4,eax
c001f0d4:	90                   	nop
c001f0d5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f0d6 <CPU::readCR2()>:
c001f0d6:	83 ec 10             	sub    esp,0x10
c001f0d9:	0f 20 d0             	mov    eax,cr2
c001f0dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0e4:	83 c4 10             	add    esp,0x10
c001f0e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f0e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f0e8:	90                   	nop
c001f0e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f0ea <ThreadControlBlock::ThreadControlBlock()>:
c001f0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f104:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f10b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f10f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f11a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f11e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f122:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f126:	90                   	nop
c001f127:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f128 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f128:	83 ec 0c             	sub    esp,0xc
c001f12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f159:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f16b:	83 ec 0c             	sub    esp,0xc
c001f16e:	68 85 06 02 c0       	push   0xc0020685
c001f173:	e8 b1 fe fe ff       	call   c000f029 <Dbg::kprintf(char const*, ...)>
c001f178:	83 c4 10             	add    esp,0x10
c001f17b:	90                   	nop
c001f17c:	83 c4 0c             	add    esp,0xc
c001f17f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f180 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f184:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f187:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f188 <PCI::~PCI()>:
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	ba 38 25 02 c0       	mov    edx,0xc0022538
c001f190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f194:	89 10                	mov    DWORD PTR [eax],edx
c001f196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	50                   	push   eax
c001f19e:	e8 43 0b ff ff       	call   c000fce6 <Bus::~Bus()>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	90                   	nop
c001f1a7:	83 c4 0c             	add    esp,0xc
c001f1aa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f1ac <PCI::~PCI()>:
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	83 ec 0c             	sub    esp,0xc
c001f1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b6:	e8 cd ff ff ff       	call   c001f188 <PCI::~PCI()>
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	83 ec 08             	sub    esp,0x8
c001f1c1:	68 58 01 00 00       	push   0x158
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 7a fd fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 c4 0c             	add    esp,0xc
c001f1d5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f1d6 <IDE::~IDE()>:
c001f1d6:	83 ec 0c             	sub    esp,0xc
c001f1d9:	ba 9c 27 02 c0       	mov    edx,0xc002279c
c001f1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e2:	89 10                	mov    DWORD PTR [eax],edx
c001f1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	50                   	push   eax
c001f1ec:	e8 fb 15 ff ff       	call   c00107ec <HardDiskController::~HardDiskController()>
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	90                   	nop
c001f1f5:	83 c4 0c             	add    esp,0xc
c001f1f8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1fa <IDE::~IDE()>:
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	83 ec 0c             	sub    esp,0xc
c001f200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f204:	e8 cd ff ff ff       	call   c001f1d6 <IDE::~IDE()>
c001f209:	83 c4 10             	add    esp,0x10
c001f20c:	83 ec 08             	sub    esp,0x8
c001f20f:	68 70 02 00 00       	push   0x270
c001f214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f218:	e8 2c fd fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	83 c4 0c             	add    esp,0xc
c001f223:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f224 <ATA::~ATA()>:
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	ba ec 27 02 c0       	mov    edx,0xc00227ec
c001f22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f230:	89 10                	mov    DWORD PTR [eax],edx
c001f232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f236:	83 ec 0c             	sub    esp,0xc
c001f239:	50                   	push   eax
c001f23a:	e8 8b 16 ff ff       	call   c00108ca <PhysicalDisk::~PhysicalDisk()>
c001f23f:	83 c4 10             	add    esp,0x10
c001f242:	90                   	nop
c001f243:	83 c4 0c             	add    esp,0xc
c001f246:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f248 <ATA::~ATA()>:
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	83 ec 0c             	sub    esp,0xc
c001f24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f252:	e8 cd ff ff ff       	call   c001f224 <ATA::~ATA()>
c001f257:	83 c4 10             	add    esp,0x10
c001f25a:	83 ec 08             	sub    esp,0x8
c001f25d:	68 7c 01 00 00       	push   0x17c
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 de fc fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 c4 0c             	add    esp,0xc
c001f271:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f272 <ATAPI::~ATAPI()>:
c001f272:	83 ec 0c             	sub    esp,0xc
c001f275:	ba 58 28 02 c0       	mov    edx,0xc0022858
c001f27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27e:	89 10                	mov    DWORD PTR [eax],edx
c001f280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f284:	83 ec 0c             	sub    esp,0xc
c001f287:	50                   	push   eax
c001f288:	e8 3d 16 ff ff       	call   c00108ca <PhysicalDisk::~PhysicalDisk()>
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	90                   	nop
c001f291:	83 c4 0c             	add    esp,0xc
c001f294:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f296 <ATAPI::~ATAPI()>:
c001f296:	83 ec 0c             	sub    esp,0xc
c001f299:	83 ec 0c             	sub    esp,0xc
c001f29c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a0:	e8 cd ff ff ff       	call   c001f272 <ATAPI::~ATAPI()>
c001f2a5:	83 c4 10             	add    esp,0x10
c001f2a8:	83 ec 08             	sub    esp,0x8
c001f2ab:	68 80 01 00 00       	push   0x180
c001f2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b4:	e8 90 fc fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f2b9:	83 c4 10             	add    esp,0x10
c001f2bc:	83 c4 0c             	add    esp,0xc
c001f2bf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f2c0 <AVX::~AVX()>:
c001f2c0:	83 ec 0c             	sub    esp,0xc
c001f2c3:	ba 94 28 02 c0       	mov    edx,0xc0022894
c001f2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2cc:	89 10                	mov    DWORD PTR [eax],edx
c001f2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d2:	83 ec 0c             	sub    esp,0xc
c001f2d5:	50                   	push   eax
c001f2d6:	e8 73 16 ff ff       	call   c001094e <FPU::~FPU()>
c001f2db:	83 c4 10             	add    esp,0x10
c001f2de:	90                   	nop
c001f2df:	83 c4 0c             	add    esp,0xc
c001f2e2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2e4 <AVX::~AVX()>:
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	83 ec 0c             	sub    esp,0xc
c001f2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ee:	e8 cd ff ff ff       	call   c001f2c0 <AVX::~AVX()>
c001f2f3:	83 c4 10             	add    esp,0x10
c001f2f6:	83 ec 08             	sub    esp,0x8
c001f2f9:	68 58 01 00 00       	push   0x158
c001f2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f302:	e8 42 fc fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f307:	83 c4 10             	add    esp,0x10
c001f30a:	83 c4 0c             	add    esp,0xc
c001f30d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f30e <MMX::~MMX()>:
c001f30e:	83 ec 0c             	sub    esp,0xc
c001f311:	ba d4 28 02 c0       	mov    edx,0xc00228d4
c001f316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31a:	89 10                	mov    DWORD PTR [eax],edx
c001f31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f320:	83 ec 0c             	sub    esp,0xc
c001f323:	50                   	push   eax
c001f324:	e8 25 16 ff ff       	call   c001094e <FPU::~FPU()>
c001f329:	83 c4 10             	add    esp,0x10
c001f32c:	90                   	nop
c001f32d:	83 c4 0c             	add    esp,0xc
c001f330:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f332 <MMX::~MMX()>:
c001f332:	83 ec 0c             	sub    esp,0xc
c001f335:	83 ec 0c             	sub    esp,0xc
c001f338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f33c:	e8 cd ff ff ff       	call   c001f30e <MMX::~MMX()>
c001f341:	83 c4 10             	add    esp,0x10
c001f344:	83 ec 08             	sub    esp,0x8
c001f347:	68 58 01 00 00       	push   0x158
c001f34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f350:	e8 f4 fb fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f355:	83 c4 10             	add    esp,0x10
c001f358:	83 c4 0c             	add    esp,0xc
c001f35b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f35c <SSE::~SSE()>:
c001f35c:	83 ec 0c             	sub    esp,0xc
c001f35f:	ba 14 29 02 c0       	mov    edx,0xc0022914
c001f364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f368:	89 10                	mov    DWORD PTR [eax],edx
c001f36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36e:	83 ec 0c             	sub    esp,0xc
c001f371:	50                   	push   eax
c001f372:	e8 d7 15 ff ff       	call   c001094e <FPU::~FPU()>
c001f377:	83 c4 10             	add    esp,0x10
c001f37a:	90                   	nop
c001f37b:	83 c4 0c             	add    esp,0xc
c001f37e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f380 <SSE::~SSE()>:
c001f380:	83 ec 0c             	sub    esp,0xc
c001f383:	83 ec 0c             	sub    esp,0xc
c001f386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f38a:	e8 cd ff ff ff       	call   c001f35c <SSE::~SSE()>
c001f38f:	83 c4 10             	add    esp,0x10
c001f392:	83 ec 08             	sub    esp,0x8
c001f395:	68 58 01 00 00       	push   0x158
c001f39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f39e:	e8 a6 fb fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f3a3:	83 c4 10             	add    esp,0x10
c001f3a6:	83 c4 0c             	add    esp,0xc
c001f3a9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f3aa <x87::~x87()>:
c001f3aa:	83 ec 0c             	sub    esp,0xc
c001f3ad:	ba 54 29 02 c0       	mov    edx,0xc0022954
c001f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b6:	89 10                	mov    DWORD PTR [eax],edx
c001f3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	50                   	push   eax
c001f3c0:	e8 89 15 ff ff       	call   c001094e <FPU::~FPU()>
c001f3c5:	83 c4 10             	add    esp,0x10
c001f3c8:	90                   	nop
c001f3c9:	83 c4 0c             	add    esp,0xc
c001f3cc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f3ce <x87::~x87()>:
c001f3ce:	83 ec 0c             	sub    esp,0xc
c001f3d1:	83 ec 0c             	sub    esp,0xc
c001f3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d8:	e8 cd ff ff ff       	call   c001f3aa <x87::~x87()>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	83 ec 08             	sub    esp,0x8
c001f3e3:	68 58 01 00 00       	push   0x158
c001f3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ec:	e8 58 fb fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f3f1:	83 c4 10             	add    esp,0x10
c001f3f4:	83 c4 0c             	add    esp,0xc
c001f3f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3f8 <IOAPIC::~IOAPIC()>:
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	ba ac 2a 02 c0       	mov    edx,0xc0022aac
c001f400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f404:	89 10                	mov    DWORD PTR [eax],edx
c001f406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f40a:	83 ec 0c             	sub    esp,0xc
c001f40d:	50                   	push   eax
c001f40e:	e8 c3 0e ff ff       	call   c00102d6 <Device::~Device()>
c001f413:	83 c4 10             	add    esp,0x10
c001f416:	90                   	nop
c001f417:	83 c4 0c             	add    esp,0xc
c001f41a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f41c <IOAPIC::~IOAPIC()>:
c001f41c:	83 ec 0c             	sub    esp,0xc
c001f41f:	83 ec 0c             	sub    esp,0xc
c001f422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f426:	e8 cd ff ff ff       	call   c001f3f8 <IOAPIC::~IOAPIC()>
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	83 ec 08             	sub    esp,0x8
c001f431:	68 68 01 00 00       	push   0x168
c001f436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f43a:	e8 0a fb fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f43f:	83 c4 10             	add    esp,0x10
c001f442:	83 c4 0c             	add    esp,0xc
c001f445:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f446 <APIC::~APIC()>:
c001f446:	83 ec 0c             	sub    esp,0xc
c001f449:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001f44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f452:	89 10                	mov    DWORD PTR [eax],edx
c001f454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	50                   	push   eax
c001f45c:	e8 ab 19 ff ff       	call   c0010e0c <InterruptController::~InterruptController()>
c001f461:	83 c4 10             	add    esp,0x10
c001f464:	90                   	nop
c001f465:	83 c4 0c             	add    esp,0xc
c001f468:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f46a <APIC::~APIC()>:
c001f46a:	83 ec 0c             	sub    esp,0xc
c001f46d:	83 ec 0c             	sub    esp,0xc
c001f470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f474:	e8 cd ff ff ff       	call   c001f446 <APIC::~APIC()>
c001f479:	83 c4 10             	add    esp,0x10
c001f47c:	83 ec 08             	sub    esp,0x8
c001f47f:	68 58 21 00 00       	push   0x2158
c001f484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f488:	e8 bc fa fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f48d:	83 c4 10             	add    esp,0x10
c001f490:	83 c4 0c             	add    esp,0xc
c001f493:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f494 <PIC::~PIC()>:
c001f494:	83 ec 0c             	sub    esp,0xc
c001f497:	ba fc 2a 02 c0       	mov    edx,0xc0022afc
c001f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a0:	89 10                	mov    DWORD PTR [eax],edx
c001f4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a6:	83 ec 0c             	sub    esp,0xc
c001f4a9:	50                   	push   eax
c001f4aa:	e8 5d 19 ff ff       	call   c0010e0c <InterruptController::~InterruptController()>
c001f4af:	83 c4 10             	add    esp,0x10
c001f4b2:	90                   	nop
c001f4b3:	83 c4 0c             	add    esp,0xc
c001f4b6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f4b8 <PIC::~PIC()>:
c001f4b8:	83 ec 0c             	sub    esp,0xc
c001f4bb:	83 ec 0c             	sub    esp,0xc
c001f4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c2:	e8 cd ff ff ff       	call   c001f494 <PIC::~PIC()>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	83 ec 08             	sub    esp,0x8
c001f4cd:	68 58 21 00 00       	push   0x2158
c001f4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4d6:	e8 6e fa fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f4db:	83 c4 10             	add    esp,0x10
c001f4de:	83 c4 0c             	add    esp,0xc
c001f4e1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4e2 <APICTimer::~APICTimer()>:
c001f4e2:	83 ec 0c             	sub    esp,0xc
c001f4e5:	ba 50 2b 02 c0       	mov    edx,0xc0022b50
c001f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ee:	89 10                	mov    DWORD PTR [eax],edx
c001f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	50                   	push   eax
c001f4f8:	e8 7b 2f ff ff       	call   c0012478 <Timer::~Timer()>
c001f4fd:	83 c4 10             	add    esp,0x10
c001f500:	90                   	nop
c001f501:	83 c4 0c             	add    esp,0xc
c001f504:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f506 <APICTimer::~APICTimer()>:
c001f506:	83 ec 0c             	sub    esp,0xc
c001f509:	83 ec 0c             	sub    esp,0xc
c001f50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f510:	e8 cd ff ff ff       	call   c001f4e2 <APICTimer::~APICTimer()>
c001f515:	83 c4 10             	add    esp,0x10
c001f518:	83 ec 08             	sub    esp,0x8
c001f51b:	68 60 01 00 00       	push   0x160
c001f520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f524:	e8 20 fa fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f529:	83 c4 10             	add    esp,0x10
c001f52c:	83 c4 0c             	add    esp,0xc
c001f52f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f530 <PIT::~PIT()>:
c001f530:	83 ec 0c             	sub    esp,0xc
c001f533:	ba a0 2b 02 c0       	mov    edx,0xc0022ba0
c001f538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53c:	89 10                	mov    DWORD PTR [eax],edx
c001f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f542:	83 ec 0c             	sub    esp,0xc
c001f545:	50                   	push   eax
c001f546:	e8 2d 2f ff ff       	call   c0012478 <Timer::~Timer()>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	90                   	nop
c001f54f:	83 c4 0c             	add    esp,0xc
c001f552:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f554 <PIT::~PIT()>:
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	83 ec 0c             	sub    esp,0xc
c001f55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f55e:	e8 cd ff ff ff       	call   c001f530 <PIT::~PIT()>
c001f563:	83 c4 10             	add    esp,0x10
c001f566:	83 ec 08             	sub    esp,0x8
c001f569:	68 5c 01 00 00       	push   0x15c
c001f56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f572:	e8 d2 f9 fe ff       	call   c000ef49 <operator delete(void*, unsigned long)>
c001f577:	83 c4 10             	add    esp,0x10
c001f57a:	83 c4 0c             	add    esp,0xc
c001f57d:	c3                   	ret    
