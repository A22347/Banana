
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c8 c2 00 00       	call   c000c2e8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 f7 01 00       	call   c001f768 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 02 02 c0       	mov    ebx,0xc00202f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 02 02 c0    	cmp    ebx,0xc00202fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 03 02 c0       	mov    ebx,0xc0020304
c00000bb:	81 eb 00 03 02 c0    	sub    ebx,0xc0020300
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 03 02 c0       	mov    esi,0xc0020300
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c000029d:	fa                   	cli    
c000029e:	55                   	push   ebp
c000029f:	89 e5                	mov    ebp,esp
c00002a1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002a4:	66 b8 23 00          	mov    ax,0x23
c00002a8:	66 8e d8             	mov    ds,ax
c00002ab:	66 8e c0             	mov    es,ax
c00002ae:	66 8e e0             	mov    fs,ax
c00002b1:	66 8e e8             	mov    gs,ax
c00002b4:	89 e0                	mov    eax,esp
c00002b6:	68 23 00 00 00       	push   0x23
c00002bb:	50                   	push   eax
c00002bc:	68 02 02 00 00       	push   0x202
c00002c1:	68 1b 00 00 00       	push   0x1b
c00002c6:	53                   	push   ebx
c00002c7:	cf                   	iret   

c00002c8 <switchToThreadASMFirstTime>:
c00002c8:	9c                   	pushf  
c00002c9:	fa                   	cli    
c00002ca:	50                   	push   eax
c00002cb:	53                   	push   ebx
c00002cc:	51                   	push   ecx
c00002cd:	52                   	push   edx
c00002ce:	56                   	push   esi
c00002cf:	57                   	push   edi
c00002d0:	55                   	push   ebp
c00002d1:	e9 11 00 00 00       	jmp    c00002e7 <commonThreadSwitch>

c00002d6 <switchToThreadASM>:
c00002d6:	9c                   	pushf  
c00002d7:	50                   	push   eax
c00002d8:	53                   	push   ebx
c00002d9:	51                   	push   ecx
c00002da:	52                   	push   edx
c00002db:	56                   	push   esi
c00002dc:	57                   	push   edi
c00002dd:	55                   	push   ebp
c00002de:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002e4:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e7 <commonThreadSwitch>:
c00002e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002eb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00002f3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f9:	0f 20 d9             	mov    ecx,cr3
c00002fc:	39 c8                	cmp    eax,ecx
c00002fe:	74 03                	je     c0000303 <commonThreadSwitch.doneVAS>
c0000300:	0f 22 d8             	mov    cr3,eax

c0000303 <commonThreadSwitch.doneVAS>:
c0000303:	85 d2                	test   edx,edx
c0000305:	74 4e                	je     c0000355 <commonThreadSwitch.notFirstTime>
c0000307:	fa                   	cli    
c0000308:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000030b:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000310:	60                   	pusha  
c0000311:	e8 88 ec 00 00       	call   c000ef9e <mapVASFirstTime>
c0000316:	61                   	popa   
c0000317:	89 c4                	mov    esp,eax
c0000319:	56                   	push   esi
c000031a:	52                   	push   edx
c000031b:	e8 32 83 01 00       	call   c0018652 <changeTSS>
c0000320:	5a                   	pop    edx
c0000321:	5e                   	pop    esi
c0000322:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000329:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032f:	74 39                	je     c000036a <commonThreadSwitch.cameOffAFork>
c0000331:	5d                   	pop    ebp
c0000332:	5f                   	pop    edi
c0000333:	5e                   	pop    esi
c0000334:	59                   	pop    ecx
c0000335:	59                   	pop    ecx
c0000336:	5b                   	pop    ebx
c0000337:	58                   	pop    eax
c0000338:	81 c4 04 00 00 00    	add    esp,0x4
c000033e:	6a 02                	push   0x2
c0000340:	9d                   	popf   
c0000341:	52                   	push   edx
c0000342:	e8 38 87 01 00       	call   c0018a7f <taskStartupFunction>
c0000347:	5a                   	pop    edx
c0000348:	50                   	push   eax
c0000349:	ff d2                	call   edx
c000034b:	e8 ed 8c 01 00       	call   c001903d <taskReturned>
c0000350:	e9 fb ff ff ff       	jmp    c0000350 <commonThreadSwitch.doneVAS+0x4d>

c0000355 <commonThreadSwitch.notFirstTime>:
c0000355:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000358:	56                   	push   esi
c0000359:	52                   	push   edx
c000035a:	e8 f3 82 01 00       	call   c0018652 <changeTSS>
c000035f:	5a                   	pop    edx
c0000360:	5e                   	pop    esi
c0000361:	5d                   	pop    ebp
c0000362:	5f                   	pop    edi
c0000363:	5e                   	pop    esi
c0000364:	5a                   	pop    edx
c0000365:	59                   	pop    ecx
c0000366:	5b                   	pop    ebx
c0000367:	58                   	pop    eax
c0000368:	9d                   	popf   
c0000369:	c3                   	ret    

c000036a <commonThreadSwitch.cameOffAFork>:
c000036a:	31 c0                	xor    eax,eax
c000036c:	31 d2                	xor    edx,edx
c000036e:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000371:	e9 a2 02 00 00       	jmp    c0000618 <offAForkJumpThingy>

c0000376 <detectCPUID>:
c0000376:	9c                   	pushf  
c0000377:	9c                   	pushf  
c0000378:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037f:	9d                   	popf   
c0000380:	9c                   	pushf  
c0000381:	58                   	pop    eax
c0000382:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000385:	9d                   	popf   
c0000386:	25 00 00 20 00       	and    eax,0x200000
c000038b:	c3                   	ret    

c000038c <asmQuickAcquireLock>:
c000038c:	55                   	push   ebp
c000038d:	89 e5                	mov    ebp,esp
c000038f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000392 <asmQuickAcquireLock.retry>:
c0000392:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000397:	72 02                	jb     c000039b <asmQuickAcquireLock.spin_with_pause>
c0000399:	fa                   	cli    
c000039a:	c3                   	ret    

c000039b <asmQuickAcquireLock.spin_with_pause>:
c000039b:	f3 90                	pause  
c000039d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003a3:	75 f6                	jne    c000039b <asmQuickAcquireLock.spin_with_pause>
c00003a5:	e9 e8 ff ff ff       	jmp    c0000392 <asmQuickAcquireLock.retry>

c00003aa <asmQuickReleaseLock>:
c00003aa:	55                   	push   ebp
c00003ab:	89 e5                	mov    ebp,esp
c00003ad:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003b4:	5d                   	pop    ebp
c00003b5:	c3                   	ret    

c00003b6 <asmAcquireLock>:
c00003b6:	55                   	push   ebp
c00003b7:	89 e5                	mov    ebp,esp
c00003b9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bc <asmAcquireLock.retry>:
c00003bc:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c1:	72 05                	jb     c00003c8 <asmAcquireLock.spin_with_pause>
c00003c3:	9c                   	pushf  
c00003c4:	58                   	pop    eax
c00003c5:	fa                   	cli    
c00003c6:	5d                   	pop    ebp
c00003c7:	c3                   	ret    

c00003c8 <asmAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmAcquireLock.spin_with_pause>
c00003d2:	e9 e5 ff ff ff       	jmp    c00003bc <asmAcquireLock.retry>

c00003d7 <asmReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003e0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e6:	52                   	push   edx
c00003e7:	9d                   	popf   
c00003e8:	5d                   	pop    ebp
c00003e9:	c3                   	ret    

c00003ea <loadGDT>:
c00003ea:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c00003f1:	66 b8 10 00          	mov    ax,0x10
c00003f5:	66 8e d8             	mov    ds,ax
c00003f8:	66 8e c0             	mov    es,ax
c00003fb:	66 8e e0             	mov    fs,ax
c00003fe:	66 8e e8             	mov    gs,ax
c0000401:	66 8e d0             	mov    ss,ax
c0000404:	e9 00 00 00 00       	jmp    c0000409 <flush2>

c0000409 <flush2>:
c0000409:	c3                   	ret    

c000040a <isr0>:
c000040a:	fa                   	cli    
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	68 00 00 00 00       	push   0x0
c0000415:	e9 a2 01 00 00       	jmp    c00005bc <int_common_stub>

c000041a <isr1>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 01                	push   0x1
c000041f:	e9 98 01 00 00       	jmp    c00005bc <int_common_stub>

c0000424 <isr2>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 02                	push   0x2
c0000429:	e9 8e 01 00 00       	jmp    c00005bc <int_common_stub>

c000042e <isr3>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 03                	push   0x3
c0000433:	e9 84 01 00 00       	jmp    c00005bc <int_common_stub>

c0000438 <isr4>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 04                	push   0x4
c000043d:	e9 7a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000442 <isr5>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 05                	push   0x5
c0000447:	e9 70 01 00 00       	jmp    c00005bc <int_common_stub>

c000044c <isr6>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 06                	push   0x6
c0000451:	e9 66 01 00 00       	jmp    c00005bc <int_common_stub>

c0000456 <isr7>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 07                	push   0x7
c000045b:	e9 5c 01 00 00       	jmp    c00005bc <int_common_stub>

c0000460 <isr8>:
c0000460:	fa                   	cli    
c0000461:	6a 08                	push   0x8
c0000463:	e9 54 01 00 00       	jmp    c00005bc <int_common_stub>

c0000468 <isr9>:
c0000468:	fa                   	cli    
c0000469:	6a 00                	push   0x0
c000046b:	6a 09                	push   0x9
c000046d:	e9 4a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000472 <isr10>:
c0000472:	fa                   	cli    
c0000473:	6a 0a                	push   0xa
c0000475:	e9 42 01 00 00       	jmp    c00005bc <int_common_stub>

c000047a <isr11>:
c000047a:	fa                   	cli    
c000047b:	6a 0b                	push   0xb
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr12>:
c0000482:	fa                   	cli    
c0000483:	6a 0c                	push   0xc
c0000485:	e9 32 01 00 00       	jmp    c00005bc <int_common_stub>

c000048a <isr13>:
c000048a:	fa                   	cli    
c000048b:	6a 0d                	push   0xd
c000048d:	e9 2a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000492 <isr14>:
c0000492:	fa                   	cli    
c0000493:	6a 0e                	push   0xe
c0000495:	e9 22 01 00 00       	jmp    c00005bc <int_common_stub>

c000049a <isr15>:
c000049a:	fa                   	cli    
c000049b:	6a 00                	push   0x0
c000049d:	6a 0f                	push   0xf
c000049f:	e9 18 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a4 <isr16>:
c00004a4:	fa                   	cli    
c00004a5:	6a 00                	push   0x0
c00004a7:	6a 10                	push   0x10
c00004a9:	e9 0e 01 00 00       	jmp    c00005bc <int_common_stub>

c00004ae <isr17>:
c00004ae:	fa                   	cli    
c00004af:	6a 00                	push   0x0
c00004b1:	6a 11                	push   0x11
c00004b3:	e9 04 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b8 <isr18>:
c00004b8:	fa                   	cli    
c00004b9:	6a 00                	push   0x0
c00004bb:	6a 12                	push   0x12
c00004bd:	e9 fa 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c2 <isr96>:
c00004c2:	fa                   	cli    
c00004c3:	6a 00                	push   0x0
c00004c5:	6a 60                	push   0x60
c00004c7:	e9 20 01 00 00       	jmp    c00005ec <syscall_common_stub>

c00004cc <irq0>:
c00004cc:	fa                   	cli    
c00004cd:	6a 00                	push   0x0
c00004cf:	6a 20                	push   0x20
c00004d1:	e9 e6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d6 <irq1>:
c00004d6:	fa                   	cli    
c00004d7:	6a 00                	push   0x0
c00004d9:	6a 21                	push   0x21
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <irq2>:
c00004e0:	fa                   	cli    
c00004e1:	6a 00                	push   0x0
c00004e3:	6a 22                	push   0x22
c00004e5:	e9 d2 00 00 00       	jmp    c00005bc <int_common_stub>

c00004ea <irq3>:
c00004ea:	fa                   	cli    
c00004eb:	6a 00                	push   0x0
c00004ed:	6a 23                	push   0x23
c00004ef:	e9 c8 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f4 <irq4>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 24                	push   0x24
c00004f9:	e9 be 00 00 00       	jmp    c00005bc <int_common_stub>

c00004fe <irq5>:
c00004fe:	fa                   	cli    
c00004ff:	6a 00                	push   0x0
c0000501:	6a 25                	push   0x25
c0000503:	e9 b4 00 00 00       	jmp    c00005bc <int_common_stub>

c0000508 <irq6>:
c0000508:	fa                   	cli    
c0000509:	6a 00                	push   0x0
c000050b:	6a 26                	push   0x26
c000050d:	e9 aa 00 00 00       	jmp    c00005bc <int_common_stub>

c0000512 <irq7>:
c0000512:	fa                   	cli    
c0000513:	6a 00                	push   0x0
c0000515:	6a 27                	push   0x27
c0000517:	e9 a0 00 00 00       	jmp    c00005bc <int_common_stub>

c000051c <irq8>:
c000051c:	fa                   	cli    
c000051d:	6a 00                	push   0x0
c000051f:	6a 28                	push   0x28
c0000521:	e9 96 00 00 00       	jmp    c00005bc <int_common_stub>

c0000526 <irq9>:
c0000526:	fa                   	cli    
c0000527:	6a 00                	push   0x0
c0000529:	6a 29                	push   0x29
c000052b:	e9 8c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000530 <irq10>:
c0000530:	fa                   	cli    
c0000531:	6a 00                	push   0x0
c0000533:	6a 2a                	push   0x2a
c0000535:	e9 82 00 00 00       	jmp    c00005bc <int_common_stub>

c000053a <irq11>:
c000053a:	fa                   	cli    
c000053b:	6a 00                	push   0x0
c000053d:	6a 2b                	push   0x2b
c000053f:	e9 78 00 00 00       	jmp    c00005bc <int_common_stub>

c0000544 <irq12>:
c0000544:	fa                   	cli    
c0000545:	6a 00                	push   0x0
c0000547:	6a 2c                	push   0x2c
c0000549:	e9 6e 00 00 00       	jmp    c00005bc <int_common_stub>

c000054e <irq13>:
c000054e:	fa                   	cli    
c000054f:	6a 00                	push   0x0
c0000551:	6a 2d                	push   0x2d
c0000553:	e9 64 00 00 00       	jmp    c00005bc <int_common_stub>

c0000558 <irq14>:
c0000558:	fa                   	cli    
c0000559:	6a 00                	push   0x0
c000055b:	6a 2e                	push   0x2e
c000055d:	e9 5a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000562 <irq15>:
c0000562:	fa                   	cli    
c0000563:	6a 00                	push   0x0
c0000565:	6a 2f                	push   0x2f
c0000567:	e9 50 00 00 00       	jmp    c00005bc <int_common_stub>

c000056c <irq16>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 30                	push   0x30
c0000571:	e9 46 00 00 00       	jmp    c00005bc <int_common_stub>

c0000576 <irq17>:
c0000576:	fa                   	cli    
c0000577:	6a 00                	push   0x0
c0000579:	6a 31                	push   0x31
c000057b:	e9 3c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000580 <irq18>:
c0000580:	fa                   	cli    
c0000581:	6a 00                	push   0x0
c0000583:	6a 32                	push   0x32
c0000585:	e9 32 00 00 00       	jmp    c00005bc <int_common_stub>

c000058a <irq19>:
c000058a:	fa                   	cli    
c000058b:	6a 00                	push   0x0
c000058d:	6a 33                	push   0x33
c000058f:	e9 28 00 00 00       	jmp    c00005bc <int_common_stub>

c0000594 <irq20>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 34                	push   0x34
c0000599:	e9 1e 00 00 00       	jmp    c00005bc <int_common_stub>

c000059e <irq21>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 35                	push   0x35
c00005a3:	e9 14 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a8 <irq22>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 36                	push   0x36
c00005ad:	e9 0a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005b2 <irq23>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 37                	push   0x37
c00005b7:	e9 00 00 00 00       	jmp    c00005bc <int_common_stub>

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	89 e1                	mov    ecx,esp
c00005d5:	51                   	push   ecx
c00005d6:	b9 c7 0e 01 c0       	mov    ecx,0xc0010ec7
c00005db:	ff d1                	call   ecx
c00005dd:	59                   	pop    ecx
c00005de:	0f a9                	pop    gs
c00005e0:	0f a1                	pop    fs
c00005e2:	07                   	pop    es
c00005e3:	1f                   	pop    ds
c00005e4:	61                   	popa   
c00005e5:	81 c4 08 00 00 00    	add    esp,0x8
c00005eb:	cf                   	iret   

c00005ec <syscall_common_stub>:
c00005ec:	60                   	pusha  
c00005ed:	1e                   	push   ds
c00005ee:	06                   	push   es
c00005ef:	0f a0                	push   fs
c00005f1:	0f a8                	push   gs
c00005f3:	66 b8 10 00          	mov    ax,0x10
c00005f7:	66 8e d8             	mov    ds,ax
c00005fa:	66 8e c0             	mov    es,ax
c00005fd:	66 8e e0             	mov    fs,ax
c0000600:	66 8e e8             	mov    gs,ax
c0000603:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000609:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c000060c:	89 e1                	mov    ecx,esp
c000060e:	51                   	push   ecx
c000060f:	fb                   	sti    
c0000610:	b9 c7 0e 01 c0       	mov    ecx,0xc0010ec7
c0000615:	ff d1                	call   ecx
c0000617:	59                   	pop    ecx

c0000618 <offAForkJumpThingy>:
c0000618:	0f a9                	pop    gs
c000061a:	0f a1                	pop    fs
c000061c:	07                   	pop    es
c000061d:	1f                   	pop    ds
c000061e:	61                   	popa   
c000061f:	81 c4 08 00 00 00    	add    esp,0x8
c0000625:	cf                   	iret   

c0000626 <memcmp>:
c0000626:	56                   	push   esi
c0000627:	53                   	push   ebx
c0000628:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000062c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000634:	01 d6                	add    esi,edx
c0000636:	39 f2                	cmp    edx,esi
c0000638:	74 0e                	je     c0000648 <memcmp+0x22>
c000063a:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000063d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000640:	38 c8                	cmp    al,cl
c0000642:	75 08                	jne    c000064c <memcmp+0x26>
c0000644:	42                   	inc    edx
c0000645:	43                   	inc    ebx
c0000646:	eb ee                	jmp    c0000636 <memcmp+0x10>
c0000648:	31 c0                	xor    eax,eax
c000064a:	eb 02                	jmp    c000064e <memcmp+0x28>
c000064c:	29 c8                	sub    eax,ecx
c000064e:	5b                   	pop    ebx
c000064f:	5e                   	pop    esi
c0000650:	c3                   	ret    

c0000651 <memmove>:
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000657:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000065b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065f:	39 c8                	cmp    eax,ecx
c0000661:	73 12                	jae    c0000675 <memmove+0x24>
c0000663:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000666:	89 c3                	mov    ebx,eax
c0000668:	39 f1                	cmp    ecx,esi
c000066a:	74 1a                	je     c0000686 <memmove+0x35>
c000066c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066e:	43                   	inc    ebx
c000066f:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000672:	41                   	inc    ecx
c0000673:	eb f3                	jmp    c0000668 <memmove+0x17>
c0000675:	76 0f                	jbe    c0000686 <memmove+0x35>
c0000677:	85 d2                	test   edx,edx
c0000679:	74 0b                	je     c0000686 <memmove+0x35>
c000067b:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067f:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000683:	4a                   	dec    edx
c0000684:	eb f1                	jmp    c0000677 <memmove+0x26>
c0000686:	5b                   	pop    ebx
c0000687:	5e                   	pop    esi
c0000688:	c3                   	ret    

c0000689 <memcpy>:
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000694:	89 da                	mov    edx,ebx
c0000696:	89 d9                	mov    ecx,ebx
c0000698:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000069c:	83 e2 fc             	and    edx,0xfffffffc
c000069f:	c1 e9 02             	shr    ecx,0x2
c00006a2:	89 c7                	mov    edi,eax
c00006a4:	fc                   	cld    
c00006a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a7:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006aa:	01 c2                	add    edx,eax
c00006ac:	01 de                	add    esi,ebx
c00006ae:	39 f1                	cmp    ecx,esi
c00006b0:	74 09                	je     c00006bb <memcpy+0x32>
c00006b2:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006b4:	42                   	inc    edx
c00006b5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b8:	41                   	inc    ecx
c00006b9:	eb f3                	jmp    c00006ae <memcpy+0x25>
c00006bb:	5b                   	pop    ebx
c00006bc:	5e                   	pop    esi
c00006bd:	5f                   	pop    edi
c00006be:	c3                   	ret    

c00006bf <memset>:
c00006bf:	53                   	push   ebx
c00006c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c8:	01 c1                	add    ecx,eax
c00006ca:	89 c2                	mov    edx,eax
c00006cc:	39 ca                	cmp    edx,ecx
c00006ce:	74 0a                	je     c00006da <memset+0x1b>
c00006d0:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d4:	42                   	inc    edx
c00006d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d8:	eb f2                	jmp    c00006cc <memset+0xd>
c00006da:	5b                   	pop    ebx
c00006db:	c3                   	ret    

c00006dc <strlen>:
c00006dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e0:	31 c0                	xor    eax,eax
c00006e2:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e6:	74 03                	je     c00006eb <strlen+0xf>
c00006e8:	40                   	inc    eax
c00006e9:	eb f7                	jmp    c00006e2 <strlen+0x6>
c00006eb:	c3                   	ret    

c00006ec <strpbrk>:
c00006ec:	53                   	push   ebx
c00006ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f1:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f3:	84 c9                	test   cl,cl
c00006f5:	74 14                	je     c000070b <strpbrk+0x1f>
c00006f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006fb:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006fd:	84 db                	test   bl,bl
c00006ff:	74 07                	je     c0000708 <strpbrk+0x1c>
c0000701:	38 cb                	cmp    bl,cl
c0000703:	74 08                	je     c000070d <strpbrk+0x21>
c0000705:	42                   	inc    edx
c0000706:	eb f3                	jmp    c00006fb <strpbrk+0xf>
c0000708:	40                   	inc    eax
c0000709:	eb e6                	jmp    c00006f1 <strpbrk+0x5>
c000070b:	31 c0                	xor    eax,eax
c000070d:	5b                   	pop    ebx
c000070e:	c3                   	ret    

c000070f <strtok>:
c000070f:	56                   	push   esi
c0000710:	53                   	push   ebx
c0000711:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000719:	85 db                	test   ebx,ebx
c000071b:	75 0e                	jne    c000072b <strtok+0x1c>
c000071d:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c0000723:	85 db                	test   ebx,ebx
c0000725:	75 04                	jne    c000072b <strtok+0x1c>
c0000727:	31 db                	xor    ebx,ebx
c0000729:	eb 2e                	jmp    c0000759 <strtok+0x4a>
c000072b:	56                   	push   esi
c000072c:	53                   	push   ebx
c000072d:	e8 ba ff ff ff       	call   c00006ec <strpbrk>
c0000732:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c0000737:	5a                   	pop    edx
c0000738:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c000073d:	59                   	pop    ecx
c000073e:	39 d8                	cmp    eax,ebx
c0000740:	75 07                	jne    c0000749 <strtok+0x3a>
c0000742:	43                   	inc    ebx
c0000743:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000747:	eb e2                	jmp    c000072b <strtok+0x1c>
c0000749:	85 c0                	test   eax,eax
c000074b:	74 da                	je     c0000727 <strtok+0x18>
c000074d:	8d 50 01             	lea    edx,[eax+0x1]
c0000750:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000753:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c0000759:	89 d8                	mov    eax,ebx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcpy>:
c000075e:	53                   	push   ebx
c000075f:	31 d2                	xor    edx,edx
c0000761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000765:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000769:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000076c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076f:	84 c9                	test   cl,cl
c0000771:	74 06                	je     c0000779 <strcpy+0x1b>
c0000773:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000776:	42                   	inc    edx
c0000777:	eb ec                	jmp    c0000765 <strcpy+0x7>
c0000779:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000077c:	5b                   	pop    ebx
c000077d:	c3                   	ret    

c000077e <strncpy>:
c000077e:	56                   	push   esi
c000077f:	53                   	push   ebx
c0000780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000784:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000788:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000078c:	89 c3                	mov    ebx,eax
c000078e:	85 c9                	test   ecx,ecx
c0000790:	74 1a                	je     c00007ac <strncpy+0x2e>
c0000792:	46                   	inc    esi
c0000793:	43                   	inc    ebx
c0000794:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000797:	49                   	dec    ecx
c0000798:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000079b:	84 d2                	test   dl,dl
c000079d:	75 ef                	jne    c000078e <strncpy+0x10>
c000079f:	31 d2                	xor    edx,edx
c00007a1:	39 d1                	cmp    ecx,edx
c00007a3:	74 07                	je     c00007ac <strncpy+0x2e>
c00007a5:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a9:	42                   	inc    edx
c00007aa:	eb f5                	jmp    c00007a1 <strncpy+0x23>
c00007ac:	5b                   	pop    ebx
c00007ad:	5e                   	pop    esi
c00007ae:	c3                   	ret    

c00007af <strcmp>:
c00007af:	31 c9                	xor    ecx,ecx
c00007b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b9:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007bd:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c1:	38 d0                	cmp    al,dl
c00007c3:	75 08                	jne    c00007cd <strcmp+0x1e>
c00007c5:	41                   	inc    ecx
c00007c6:	84 c0                	test   al,al
c00007c8:	75 e7                	jne    c00007b1 <strcmp+0x2>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	c3                   	ret    
c00007cd:	29 d0                	sub    eax,edx
c00007cf:	c3                   	ret    

c00007d0 <strchr>:
c00007d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d4:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d6:	84 d2                	test   dl,dl
c00007d8:	74 09                	je     c00007e3 <strchr+0x13>
c00007da:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007de:	74 05                	je     c00007e5 <strchr+0x15>
c00007e0:	40                   	inc    eax
c00007e1:	eb f1                	jmp    c00007d4 <strchr+0x4>
c00007e3:	31 c0                	xor    eax,eax
c00007e5:	c3                   	ret    

c00007e6 <strncmp>:
c00007e6:	56                   	push   esi
c00007e7:	53                   	push   ebx
c00007e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f4:	01 d6                	add    esi,edx
c00007f6:	39 f2                	cmp    edx,esi
c00007f8:	74 12                	je     c000080c <strncmp+0x26>
c00007fa:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007fd:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000800:	38 c8                	cmp    al,cl
c0000802:	75 0c                	jne    c0000810 <strncmp+0x2a>
c0000804:	42                   	inc    edx
c0000805:	84 c0                	test   al,al
c0000807:	74 03                	je     c000080c <strncmp+0x26>
c0000809:	43                   	inc    ebx
c000080a:	eb ea                	jmp    c00007f6 <strncmp+0x10>
c000080c:	31 c0                	xor    eax,eax
c000080e:	eb 02                	jmp    c0000812 <strncmp+0x2c>
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5b                   	pop    ebx
c0000813:	5e                   	pop    esi
c0000814:	c3                   	ret    

c0000815 <strcat>:
c0000815:	53                   	push   ebx
c0000816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081a:	89 c1                	mov    ecx,eax
c000081c:	8d 51 01             	lea    edx,[ecx+0x1]
c000081f:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000823:	74 04                	je     c0000829 <strcat+0x14>
c0000825:	89 d1                	mov    ecx,edx
c0000827:	eb f3                	jmp    c000081c <strcat+0x7>
c0000829:	31 d2                	xor    edx,edx
c000082b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082f:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000832:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000835:	42                   	inc    edx
c0000836:	84 db                	test   bl,bl
c0000838:	75 f1                	jne    c000082b <strcat+0x16>
c000083a:	5b                   	pop    ebx
c000083b:	c3                   	ret    

c000083c <strncat>:
c000083c:	56                   	push   esi
c000083d:	53                   	push   ebx
c000083e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000842:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000846:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084a:	89 c2                	mov    edx,eax
c000084c:	85 db                	test   ebx,ebx
c000084e:	74 23                	je     c0000873 <strncat+0x37>
c0000850:	8d 72 01             	lea    esi,[edx+0x1]
c0000853:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000857:	74 04                	je     c000085d <strncat+0x21>
c0000859:	89 f2                	mov    edx,esi
c000085b:	eb f3                	jmp    c0000850 <strncat+0x14>
c000085d:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000860:	41                   	inc    ecx
c0000861:	42                   	inc    edx
c0000862:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000865:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000868:	84 db                	test   bl,bl
c000086a:	74 07                	je     c0000873 <strncat+0x37>
c000086c:	39 f1                	cmp    ecx,esi
c000086e:	75 f0                	jne    c0000860 <strncat+0x24>
c0000870:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000873:	5b                   	pop    ebx
c0000874:	5e                   	pop    esi
c0000875:	c3                   	ret    

c0000876 <strstr>:
c0000876:	57                   	push   edi
c0000877:	56                   	push   esi
c0000878:	53                   	push   ebx
c0000879:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000881:	57                   	push   edi
c0000882:	e8 55 fe ff ff       	call   c00006dc <strlen>
c0000887:	59                   	pop    ecx
c0000888:	89 c6                	mov    esi,eax
c000088a:	85 c0                	test   eax,eax
c000088c:	74 1f                	je     c00008ad <strstr+0x37>
c000088e:	53                   	push   ebx
c000088f:	e8 48 fe ff ff       	call   c00006dc <strlen>
c0000894:	5a                   	pop    edx
c0000895:	39 f0                	cmp    eax,esi
c0000897:	72 12                	jb     c00008ab <strstr+0x35>
c0000899:	56                   	push   esi
c000089a:	57                   	push   edi
c000089b:	53                   	push   ebx
c000089c:	e8 85 fd ff ff       	call   c0000626 <memcmp>
c00008a1:	83 c4 0c             	add    esp,0xc
c00008a4:	85 c0                	test   eax,eax
c00008a6:	74 05                	je     c00008ad <strstr+0x37>
c00008a8:	43                   	inc    ebx
c00008a9:	eb e3                	jmp    c000088e <strstr+0x18>
c00008ab:	31 db                	xor    ebx,ebx
c00008ad:	89 d8                	mov    eax,ebx
c00008af:	5b                   	pop    ebx
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	c3                   	ret    

c00008b3 <toupper>:
c00008b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b7:	0f b6 d0             	movzx  edx,al
c00008ba:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008c1:	74 03                	je     c00008c6 <toupper+0x13>
c00008c3:	83 e8 20             	sub    eax,0x20
c00008c6:	c3                   	ret    

c00008c7 <tolower>:
c00008c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008cb:	0f b6 d0             	movzx  edx,al
c00008ce:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008d5:	74 03                	je     c00008da <tolower+0x13>
c00008d7:	83 c0 20             	add    eax,0x20
c00008da:	c3                   	ret    

c00008db <simple_strtoul>:
c00008db:	55                   	push   ebp
c00008dc:	57                   	push   edi
c00008dd:	56                   	push   esi
c00008de:	53                   	push   ebx
c00008df:	83 ec 08             	sub    esp,0x8
c00008e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ea:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ed:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c00008f4:	74 03                	je     c00008f9 <simple_strtoul+0x1e>
c00008f6:	41                   	inc    ecx
c00008f7:	eb f1                	jmp    c00008ea <simple_strtoul+0xf>
c00008f9:	80 fa 09             	cmp    dl,0x9
c00008fc:	74 f8                	je     c00008f6 <simple_strtoul+0x1b>
c00008fe:	80 fa 2d             	cmp    dl,0x2d
c0000901:	75 0b                	jne    c000090e <simple_strtoul+0x33>
c0000903:	41                   	inc    ecx
c0000904:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000090c:	eb 0e                	jmp    c000091c <simple_strtoul+0x41>
c000090e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000916:	80 fa 2b             	cmp    dl,0x2b
c0000919:	75 01                	jne    c000091c <simple_strtoul+0x41>
c000091b:	41                   	inc    ecx
c000091c:	85 f6                	test   esi,esi
c000091e:	75 22                	jne    c0000942 <simple_strtoul+0x67>
c0000920:	be 0a 00 00 00       	mov    esi,0xa
c0000925:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000928:	75 5a                	jne    c0000984 <simple_strtoul+0xa9>
c000092a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000092e:	50                   	push   eax
c000092f:	e8 93 ff ff ff       	call   c00008c7 <tolower>
c0000934:	5a                   	pop    edx
c0000935:	83 f8 78             	cmp    eax,0x78
c0000938:	74 03                	je     c000093d <simple_strtoul+0x62>
c000093a:	41                   	inc    ecx
c000093b:	eb 16                	jmp    c0000953 <simple_strtoul+0x78>
c000093d:	83 c1 02             	add    ecx,0x2
c0000940:	eb 22                	jmp    c0000964 <simple_strtoul+0x89>
c0000942:	8d 46 fe             	lea    eax,[esi-0x2]
c0000945:	83 f8 22             	cmp    eax,0x22
c0000948:	0f 87 ab 00 00 00    	ja     c00009f9 <simple_strtoul+0x11e>
c000094e:	83 fe 08             	cmp    esi,0x8
c0000951:	75 0c                	jne    c000095f <simple_strtoul+0x84>
c0000953:	be 08 00 00 00       	mov    esi,0x8
c0000958:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000095b:	75 27                	jne    c0000984 <simple_strtoul+0xa9>
c000095d:	eb 1f                	jmp    c000097e <simple_strtoul+0xa3>
c000095f:	83 fe 10             	cmp    esi,0x10
c0000962:	75 20                	jne    c0000984 <simple_strtoul+0xa9>
c0000964:	be 10 00 00 00       	mov    esi,0x10
c0000969:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096c:	75 16                	jne    c0000984 <simple_strtoul+0xa9>
c000096e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000972:	50                   	push   eax
c0000973:	e8 4f ff ff ff       	call   c00008c7 <tolower>
c0000978:	5d                   	pop    ebp
c0000979:	83 f8 78             	cmp    eax,0x78
c000097c:	74 03                	je     c0000981 <simple_strtoul+0xa6>
c000097e:	41                   	inc    ecx
c000097f:	eb 03                	jmp    c0000984 <simple_strtoul+0xa9>
c0000981:	83 c1 02             	add    ecx,0x2
c0000984:	31 ed                	xor    ebp,ebp
c0000986:	31 db                	xor    ebx,ebx
c0000988:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000991:	84 d2                	test   dl,dl
c0000993:	74 27                	je     c00009bc <simple_strtoul+0xe1>
c0000995:	0f b6 fa             	movzx  edi,dl
c0000998:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c000099f:	74 05                	je     c00009a6 <simple_strtoul+0xcb>
c00009a1:	83 ef 30             	sub    edi,0x30
c00009a4:	eb 22                	jmp    c00009c8 <simple_strtoul+0xed>
c00009a6:	0f be d2             	movsx  edx,dl
c00009a9:	52                   	push   edx
c00009aa:	e8 04 ff ff ff       	call   c00008b3 <toupper>
c00009af:	0f b6 d0             	movzx  edx,al
c00009b2:	5f                   	pop    edi
c00009b3:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009ba:	75 09                	jne    c00009c5 <simple_strtoul+0xea>
c00009bc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c1:	75 2d                	jne    c00009f0 <simple_strtoul+0x115>
c00009c3:	eb 59                	jmp    c0000a1e <simple_strtoul+0x143>
c00009c5:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c8:	39 f7                	cmp    edi,esi
c00009ca:	73 f0                	jae    c00009bc <simple_strtoul+0xe1>
c00009cc:	89 f8                	mov    eax,edi
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	f7 d0                	not    eax
c00009d2:	f7 f6                	div    esi
c00009d4:	39 d8                	cmp    eax,ebx
c00009d6:	72 0e                	jb     c00009e6 <simple_strtoul+0x10b>
c00009d8:	0f af de             	imul   ebx,esi
c00009db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e2:	01 fb                	add    ebx,edi
c00009e4:	eb 07                	jmp    c00009ed <simple_strtoul+0x112>
c00009e6:	bd 01 00 00 00       	mov    ebp,0x1
c00009eb:	31 db                	xor    ebx,ebx
c00009ed:	41                   	inc    ecx
c00009ee:	eb 9f                	jmp    c000098f <simple_strtoul+0xb4>
c00009f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f3:	09 d8                	or     eax,ebx
c00009f5:	75 21                	jne    c0000a18 <simple_strtoul+0x13d>
c00009f7:	eb 11                	jmp    c0000a0a <simple_strtoul+0x12f>
c00009f9:	31 db                	xor    ebx,ebx
c00009fb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a00:	74 22                	je     c0000a24 <simple_strtoul+0x149>
c0000a02:	31 ed                	xor    ebp,ebp
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	85 c9                	test   ecx,ecx
c0000a08:	74 0e                	je     c0000a18 <simple_strtoul+0x13d>
c0000a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	89 38                	mov    DWORD PTR [eax],edi
c0000a16:	eb 06                	jmp    c0000a1e <simple_strtoul+0x143>
c0000a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1c:	89 08                	mov    DWORD PTR [eax],ecx
c0000a1e:	4d                   	dec    ebp
c0000a1f:	75 03                	jne    c0000a24 <simple_strtoul+0x149>
c0000a21:	83 cb ff             	or     ebx,0xffffffff
c0000a24:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a29:	75 02                	jne    c0000a2d <simple_strtoul+0x152>
c0000a2b:	f7 db                	neg    ebx
c0000a2d:	83 c4 08             	add    esp,0x8
c0000a30:	89 d8                	mov    eax,ebx
c0000a32:	5b                   	pop    ebx
c0000a33:	5e                   	pop    esi
c0000a34:	5f                   	pop    edi
c0000a35:	5d                   	pop    ebp
c0000a36:	c3                   	ret    

c0000a37 <largebin_index>:
c0000a37:	89 c2                	mov    edx,eax
c0000a39:	c1 ea 08             	shr    edx,0x8
c0000a3c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a42:	77 10                	ja     c0000a54 <largebin_index+0x1d>
c0000a44:	0f bd d2             	bsr    edx,edx
c0000a47:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4a:	d3 e8                	shr    eax,cl
c0000a4c:	83 e0 03             	and    eax,0x3
c0000a4f:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a53:	c3                   	ret    
c0000a54:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a59:	c3                   	ret    

c0000a5a <malloc_init_state>:
c0000a5a:	8d 50 34             	lea    edx,[eax+0x34]
c0000a5d:	53                   	push   ebx
c0000a5e:	89 d1                	mov    ecx,edx
c0000a60:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a66:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a69:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6c:	83 c2 08             	add    edx,0x8
c0000a6f:	39 da                	cmp    edx,ebx
c0000a71:	75 f3                	jne    c0000a66 <malloc_init_state+0xc>
c0000a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a75:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7f:	83 e2 03             	and    edx,0x3
c0000a82:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8c:	83 ca 48             	or     edx,0x48
c0000a8f:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a99:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa3:	89 10                	mov    DWORD PTR [eax],edx
c0000aa5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aac:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaf:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab9:	5b                   	pop    ebx
c0000aba:	c3                   	ret    

c0000abb <malloc_consolidate>:
c0000abb:	8b 10                	mov    edx,DWORD PTR [eax]
c0000abd:	85 d2                	test   edx,edx
c0000abf:	0f 84 d8 00 00 00    	je     c0000b9d <malloc_consolidate+0xe2>
c0000ac5:	55                   	push   ebp
c0000ac6:	83 e2 fd             	and    edx,0xfffffffd
c0000ac9:	57                   	push   edi
c0000aca:	8d 78 34             	lea    edi,[eax+0x34]
c0000acd:	56                   	push   esi
c0000ace:	89 c5                	mov    ebp,eax
c0000ad0:	53                   	push   ebx
c0000ad1:	83 ec 10             	sub    esp,0x10
c0000ad4:	89 10                	mov    DWORD PTR [eax],edx
c0000ad6:	c1 ea 03             	shr    edx,0x3
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae8:	85 d2                	test   edx,edx
c0000aea:	0f 84 98 00 00 00    	je     c0000b88 <malloc_consolidate+0xcd>
c0000af0:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afa:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000afd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b01:	89 f9                	mov    ecx,edi
c0000b03:	83 e1 fe             	and    ecx,0xfffffffe
c0000b06:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b09:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0c:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0f:	83 e7 01             	and    edi,0x1
c0000b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b15:	75 14                	jne    c0000b2b <malloc_consolidate+0x70>
c0000b17:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b19:	29 fa                	sub    edx,edi
c0000b1b:	01 f9                	add    ecx,edi
c0000b1d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b20:	89 fb                	mov    ebx,edi
c0000b22:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b25:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b28:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2b:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b2e:	74 40                	je     c0000b70 <malloc_consolidate+0xb5>
c0000b30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b33:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b36:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3a:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b3d:	83 e7 01             	and    edi,0x1
c0000b40:	75 0e                	jne    c0000b50 <malloc_consolidate+0x95>
c0000b42:	01 d9                	add    ecx,ebx
c0000b44:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b47:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b4d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b50:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b53:	89 ce                	mov    esi,ecx
c0000b55:	83 ce 01             	or     esi,0x1
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b5e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b61:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b68:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6b:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b6e:	eb 0c                	jmp    c0000b7c <malloc_consolidate+0xc1>
c0000b70:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b73:	83 c9 01             	or     ecx,0x1
c0000b76:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b79:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b80:	85 d2                	test   edx,edx
c0000b82:	0f 85 6f ff ff ff    	jne    c0000af7 <malloc_consolidate+0x3c>
c0000b88:	83 c5 04             	add    ebp,0x4
c0000b8b:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8f:	0f 85 50 ff ff ff    	jne    c0000ae5 <malloc_consolidate+0x2a>
c0000b95:	83 c4 10             	add    esp,0x10
c0000b98:	5b                   	pop    ebx
c0000b99:	5e                   	pop    esi
c0000b9a:	5f                   	pop    edi
c0000b9b:	5d                   	pop    ebp
c0000b9c:	c3                   	ret    
c0000b9d:	e9 b8 fe ff ff       	jmp    c0000a5a <malloc_init_state>

c0000ba2 <dlfree>:
c0000ba2:	57                   	push   edi
c0000ba3:	56                   	push   esi
c0000ba4:	53                   	push   ebx
c0000ba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba9:	85 db                	test   ebx,ebx
c0000bab:	0f 84 e2 00 00 00    	je     c0000c93 <dlfree+0xf1>
c0000bb1:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb4:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bba:	89 f0                	mov    eax,esi
c0000bbc:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bbf:	83 e0 fc             	and    eax,0xfffffffc
c0000bc2:	39 c1                	cmp    ecx,eax
c0000bc4:	72 24                	jb     c0000bea <dlfree+0x48>
c0000bc6:	c1 e8 03             	shr    eax,0x3
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	83 e8 02             	sub    eax,0x2
c0000bcf:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000bd5:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000bdc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bde:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000be5:	e9 a9 00 00 00       	jmp    c0000c93 <dlfree+0xf1>
c0000bea:	83 e6 02             	and    esi,0x2
c0000bed:	0f 85 a0 00 00 00    	jne    c0000c93 <dlfree+0xf1>
c0000bf3:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000bff:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c02:	83 e1 fc             	and    ecx,0xfffffffc
c0000c05:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c09:	75 13                	jne    c0000c1e <dlfree+0x7c>
c0000c0b:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c0e:	29 da                	sub    edx,ebx
c0000c10:	01 d8                	add    eax,ebx
c0000c12:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c15:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c18:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c1e:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c24:	74 40                	je     c0000c66 <dlfree+0xc4>
c0000c26:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2a:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c2d:	80 e3 01             	and    bl,0x1
c0000c30:	75 0e                	jne    c0000c40 <dlfree+0x9e>
c0000c32:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c35:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c38:	01 c8                	add    eax,ecx
c0000c3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c40:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c46:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c4d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c50:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c56:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c59:	89 c1                	mov    ecx,eax
c0000c5b:	83 c9 01             	or     ecx,0x1
c0000c5e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c61:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c64:	eb 10                	jmp    c0000c76 <dlfree+0xd4>
c0000c66:	01 c8                	add    eax,ecx
c0000c68:	89 c1                	mov    ecx,eax
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c76:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7b:	76 16                	jbe    c0000c93 <dlfree+0xf1>
c0000c7d:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c84:	74 0d                	je     c0000c93 <dlfree+0xf1>
c0000c86:	5b                   	pop    ebx
c0000c87:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000c8c:	5e                   	pop    esi
c0000c8d:	5f                   	pop    edi
c0000c8e:	e9 28 fe ff ff       	jmp    c0000abb <malloc_consolidate>
c0000c93:	5b                   	pop    ebx
c0000c94:	5e                   	pop    esi
c0000c95:	5f                   	pop    edi
c0000c96:	c3                   	ret    

c0000c97 <sYSMALLOc>:
c0000c97:	55                   	push   ebp
c0000c98:	57                   	push   edi
c0000c99:	56                   	push   esi
c0000c9a:	53                   	push   ebx
c0000c9b:	89 d3                	mov    ebx,edx
c0000c9d:	83 ec 2c             	sub    esp,0x2c
c0000ca0:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca6:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cad:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb4:	74 1f                	je     c0000cd5 <sYSMALLOc+0x3e>
c0000cb6:	89 d0                	mov    eax,edx
c0000cb8:	e8 fe fd ff ff       	call   c0000abb <malloc_consolidate>
c0000cbd:	83 ec 0c             	sub    esp,0xc
c0000cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cc4:	83 e8 07             	sub    eax,0x7
c0000cc7:	50                   	push   eax
c0000cc8:	e8 33 02 00 00       	call   c0000f00 <dlmalloc>
c0000ccd:	83 c4 10             	add    esp,0x10
c0000cd0:	e9 23 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x261>
c0000cd5:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cdc:	83 c0 10             	add    eax,0x10
c0000cdf:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce5:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce8:	01 c2                	add    edx,eax
c0000cea:	83 e5 fc             	and    ebp,0xfffffffc
c0000ced:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cf1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf8:	74 02                	je     c0000cfc <sYSMALLOc+0x65>
c0000cfa:	29 ea                	sub    edx,ebp
c0000cfc:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d00:	f7 d9                	neg    ecx
c0000d02:	21 ca                	and    edx,ecx
c0000d04:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d08:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d0c:	7f 07                	jg     c0000d15 <sYSMALLOc+0x7e>
c0000d0e:	31 c0                	xor    eax,eax
c0000d10:	e9 e3 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x261>
c0000d15:	83 ec 0c             	sub    esp,0xc
c0000d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d1c:	e8 0a b1 00 00       	call   c000be2b <sbrk>
c0000d21:	83 c4 10             	add    esp,0x10
c0000d24:	89 c6                	mov    esi,eax
c0000d26:	83 f8 ff             	cmp    eax,0xffffffff
c0000d29:	74 e3                	je     c0000d0e <sYSMALLOc+0x77>
c0000d2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2f:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d32:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d38:	39 c2                	cmp    edx,eax
c0000d3a:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d40:	75 11                	jne    c0000d53 <sYSMALLOc+0xbc>
c0000d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d46:	01 e8                	add    eax,ebp
c0000d48:	83 c8 01             	or     eax,0x1
c0000d4b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d4e:	e9 93 00 00 00       	jmp    c0000de6 <sYSMALLOc+0x14f>
c0000d53:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d59:	a8 01                	test   al,0x1
c0000d5b:	0f 84 73 01 00 00    	je     c0000ed4 <sYSMALLOc+0x23d>
c0000d61:	85 ed                	test   ebp,ebp
c0000d63:	74 12                	je     c0000d77 <sYSMALLOc+0xe0>
c0000d65:	39 f2                	cmp    edx,esi
c0000d67:	76 0e                	jbe    c0000d77 <sYSMALLOc+0xe0>
c0000d69:	83 e0 fe             	and    eax,0xfffffffe
c0000d6c:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d72:	e9 5d 01 00 00       	jmp    c0000ed4 <sYSMALLOc+0x23d>
c0000d77:	85 ed                	test   ebp,ebp
c0000d79:	74 0c                	je     c0000d87 <sYSMALLOc+0xf0>
c0000d7b:	89 f0                	mov    eax,esi
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	01 c1                	add    ecx,eax
c0000d81:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d87:	89 f2                	mov    edx,esi
c0000d89:	83 e2 07             	and    edx,0x7
c0000d8c:	0f 84 b1 00 00 00    	je     c0000e43 <sYSMALLOc+0x1ac>
c0000d92:	b8 08 00 00 00       	mov    eax,0x8
c0000d97:	29 d0                	sub    eax,edx
c0000d99:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000da0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000da4:	01 e8                	add    eax,ebp
c0000da6:	83 ec 0c             	sub    esp,0xc
c0000da9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000dac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000db0:	01 f2                	add    edx,esi
c0000db2:	01 d1                	add    ecx,edx
c0000db4:	29 d0                	sub    eax,edx
c0000db6:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dba:	01 c1                	add    ecx,eax
c0000dbc:	51                   	push   ecx
c0000dbd:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dc1:	e8 65 b0 00 00       	call   c000be2b <sbrk>
c0000dc6:	83 c4 10             	add    esp,0x10
c0000dc9:	83 f8 ff             	cmp    eax,0xffffffff
c0000dcc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dd0:	75 7c                	jne    c0000e4e <sYSMALLOc+0x1b7>
c0000dd2:	83 ec 0c             	sub    esp,0xc
c0000dd5:	6a 00                	push   0x0
c0000dd7:	e8 4f b0 00 00       	call   c000be2b <sbrk>
c0000ddc:	83 c4 10             	add    esp,0x10
c0000ddf:	31 c9                	xor    ecx,ecx
c0000de1:	83 f8 ff             	cmp    eax,0xffffffff
c0000de4:	75 7e                	jne    c0000e64 <sYSMALLOc+0x1cd>
c0000de6:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dec:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df2:	73 06                	jae    c0000dfa <sYSMALLOc+0x163>
c0000df4:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfa:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e00:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e06:	73 06                	jae    c0000e0e <sYSMALLOc+0x177>
c0000e08:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e14:	83 e2 fc             	and    edx,0xfffffffc
c0000e17:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e1b:	0f 87 ed fe ff ff    	ja     c0000d0e <sYSMALLOc+0x77>
c0000e21:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e25:	29 fa                	sub    edx,edi
c0000e27:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e2a:	83 ca 01             	or     edx,0x1
c0000e2d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e30:	89 fb                	mov    ebx,edi
c0000e32:	83 cb 01             	or     ebx,0x1
c0000e35:	83 c0 08             	add    eax,0x8
c0000e38:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3e:	e9 b5 00 00 00       	jmp    c0000ef8 <sYSMALLOc+0x261>
c0000e43:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e47:	31 c0                	xor    eax,eax
c0000e49:	e9 52 ff ff ff       	jmp    c0000da0 <sYSMALLOc+0x109>
c0000e4e:	39 c6                	cmp    esi,eax
c0000e50:	76 12                	jbe    c0000e64 <sYSMALLOc+0x1cd>
c0000e52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e56:	01 f0                	add    eax,esi
c0000e58:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5f:	e9 7b ff ff ff       	jmp    c0000ddf <sYSMALLOc+0x148>
c0000e64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e68:	29 f0                	sub    eax,esi
c0000e6a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e6d:	01 c8                	add    eax,ecx
c0000e6f:	83 c8 01             	or     eax,0x1
c0000e72:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e75:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e7b:	85 ed                	test   ebp,ebp
c0000e7d:	0f 84 63 ff ff ff    	je     c0000de6 <sYSMALLOc+0x14f>
c0000e83:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e86:	83 e0 f8             	and    eax,0xfffffff8
c0000e89:	89 c2                	mov    edx,eax
c0000e8b:	83 ca 01             	or     edx,0x1
c0000e8e:	83 f8 0f             	cmp    eax,0xf
c0000e91:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e94:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e9c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea4:	0f 86 3c ff ff ff    	jbe    c0000de6 <sYSMALLOc+0x14f>
c0000eaa:	83 ec 0c             	sub    esp,0xc
c0000ead:	83 c7 08             	add    edi,0x8
c0000eb0:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ec0:	57                   	push   edi
c0000ec1:	e8 dc fc ff ff       	call   c0000ba2 <dlfree>
c0000ec6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	e9 12 ff ff ff       	jmp    c0000de6 <sYSMALLOc+0x14f>
c0000ed4:	83 ec 0c             	sub    esp,0xc
c0000ed7:	6a 00                	push   0x0
c0000ed9:	e8 4d af 00 00       	call   c000be2b <sbrk>
c0000ede:	89 c2                	mov    edx,eax
c0000ee0:	29 f2                	sub    edx,esi
c0000ee2:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee6:	83 c4 10             	add    esp,0x10
c0000ee9:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eef:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ef3:	e9 e7 fe ff ff       	jmp    c0000ddf <sYSMALLOc+0x148>
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f41:	e8 75 fb ff ff       	call   c0000abb <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7f:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8c fa ff ff       	call   c0000a37 <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fb9:	e8 fd fa ff ff       	call   c0000abb <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fcb:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	89 fa                	mov    edx,edi
c0000fff:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001002:	29 f2                	sub    edx,esi
c0001004:	83 ce 01             	or     esi,0x1
c0001007:	89 d1                	mov    ecx,edx
c0001009:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c000100e:	83 c9 01             	or     ecx,0x1
c0001011:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001016:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c000101b:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001022:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c0001029:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c000106b:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 be f9 ff ff       	call   c0000a37 <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c0001086:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	01 d3                	add    ebx,edx
c000111d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001120:	83 ff 0f             	cmp    edi,0xf
c0001123:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c0001140:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c0001146:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c000114d:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	c1 eb 05             	shr    ebx,0x5
c0001179:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	21 cf                	and    edi,ecx
c00011d2:	01 c0                	add    eax,eax
c00011d4:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c0001213:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c0001219:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c0001220:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	29 f2                	sub    edx,esi
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	83 ca 01             	or     edx,0x1
c0001260:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c0001266:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c000127b:	5b                   	pop    ebx
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 13 fa ff ff       	jmp    c0000c97 <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c000129e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b5:	e8 01 f8 ff ff       	call   c0000abb <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	83 ec 0c             	sub    esp,0xc
c0001368:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c000136e:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 fd f2 ff ff       	call   c00006bf <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	83 cb 01             	or     ebx,0x1
c00013d8:	8d 48 08             	lea    ecx,[eax+0x8]
c00013db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013eb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c000149f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	83 e0 01             	and    eax,0x1
c00014b9:	01 fd                	add    ebp,edi
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c4:	29 f8                	sub    eax,edi
c00014c6:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	83 ec 0c             	sub    esp,0xc
c0001506:	8d 47 f9             	lea    eax,[edi-0x7]
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 43 f1 ff ff       	call   c0000689 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 03 f6 ff ff       	call   c0000ba2 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ca 01             	or     edx,0x1
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ec 0c             	sub    esp,0xc
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015dc:	83 c5 08             	add    ebp,0x8
c00015df:	55                   	push   ebp
c00015e0:	e8 bd f5 ff ff       	call   c0000ba2 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	89 f8                	mov    eax,edi
c0001674:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	89 d0                	mov    eax,edx
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d1 f4 ff ff       	call   c0000ba2 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	29 e8                	sub    eax,ebp
c00016ea:	83 c8 01             	or     eax,0x1
c00016ed:	83 ec 0c             	sub    esp,0xc
c00016f0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016f3:	83 c2 08             	add    edx,0x8
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9b f4 ff ff       	call   c0000ba2 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1a ef ff ff       	call   c00006bf <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	83 c4 08             	add    esp,0x8
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 ee f3 ff ff       	jmp    c0000ba2 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001801:	e8 b5 f2 ff ff       	call   c0000abb <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000182c:	e8 8a f2 ff ff       	call   c0000abb <malloc_consolidate>
c0001831:	52                   	push   edx
c0001832:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c0001837:	52                   	push   edx
c0001838:	89 c1                	mov    ecx,eax
c000183a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000183e:	f7 d9                	neg    ecx
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001856:	e8 60 f2 ff ff       	call   c0000abb <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c000189d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018a8:	e8 0e f2 ff ff       	call   c0000abb <malloc_consolidate>
c00018ad:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	31 c9                	xor    ecx,ecx
c00018b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c000191a:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c0001920:	89 03                	mov    DWORD PTR [ebx],eax
c0001922:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001925:	29 d0                	sub    eax,edx
c0001927:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c000192d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001930:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001933:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001936:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c000193c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001940:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001943:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001946:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001949:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000194c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001952:	83 c4 08             	add    esp,0x8
c0001955:	89 d8                	mov    eax,ebx
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 38 f1 ff ff       	call   c0000abb <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	5b                   	pop    ebx
c00019f5:	89 f0                	mov    eax,esi
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 a3 8d 01 00       	jmp    c001a7b8 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 d8 8d 01 00       	jmp    c001a803 <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 04 8e 01 00       	jmp    c001a84e <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	09 ca                	or     edx,ecx
c0001a66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	c1 e6 08             	shl    esi,0x8
c0001aa4:	89 fb                	mov    ebx,edi
c0001aa6:	09 f2                	or     edx,esi
c0001aa8:	89 d1                	mov    ecx,edx
c0001aaa:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aae:	89 da                	mov    edx,ebx
c0001ab0:	5b                   	pop    ebx
c0001ab1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab4:	c1 e1 08             	shl    ecx,0x8
c0001ab7:	5e                   	pop    esi
c0001ab8:	09 c8                	or     eax,ecx
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bab:	76 34                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bad:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb0:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb6:	77 29                	ja     c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	c1 e8 06             	shr    eax,0x6
c0001c62:	83 e3 3f             	and    ebx,0x3f
c0001c65:	83 e0 3f             	and    eax,0x3f
c0001c68:	83 cb 80             	or     ebx,0xffffff80
c0001c6b:	83 c8 80             	or     eax,0xffffff80
c0001c6e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	66 31 c9             	xor    cx,cx
c0001c82:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c88:	0f b7 c3             	movzx  eax,bx
c0001c8b:	c1 e9 06             	shr    ecx,0x6
c0001c8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c94:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	c1 e8 06             	shr    eax,0x6
c0001cc9:	83 e3 3f             	and    ebx,0x3f
c0001ccc:	83 e0 3f             	and    eax,0x3f
c0001ccf:	83 cb 80             	or     ebx,0xffffff80
c0001cd2:	83 c8 80             	or     eax,0xffffff80
c0001cd5:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce8:	83 ea 02             	sub    edx,0x2
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d10:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d14:	c1 ef 09             	shr    edi,0x9
c0001d17:	89 f2                	mov    edx,esi
c0001d19:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d1c:	89 f9                	mov    ecx,edi
c0001d1e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 df d7 01 00       	call   c001f50c <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	83 e1 bf             	and    ecx,0xffffffbf
c0001d6b:	bd 01 00 00 00       	mov    ebp,0x1
c0001d70:	49                   	dec    ecx
c0001d71:	31 ff                	xor    edi,edi
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dda:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de3:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de6:	31 d2                	xor    edx,edx
c0001de8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	89 c1                	mov    ecx,eax
c0001e79:	01 db                	add    ebx,ebx
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	83 fa 07             	cmp    edx,0x7
c0001ef9:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	5b                   	pop    ebx
c0001f41:	89 c8                	mov    eax,ecx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	29 fa                	sub    edx,edi
c0001fb9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fbd:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc1:	0f b7 c0             	movzx  eax,ax
c0001fc4:	09 c8                	or     eax,ecx
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff0:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff3:	31 c0                	xor    eax,eax
c0001ff5:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff8:	31 d2                	xor    edx,edx
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	57                   	push   edi
c000202d:	56                   	push   esi
c000202e:	53                   	push   ebx
c000202f:	83 cb ff             	or     ebx,0xffffffff
c0002032:	8b 10                	mov    edx,DWORD PTR [eax]
c0002034:	85 d2                	test   edx,edx
c0002036:	74 34                	je     c000206c <get_ldnumber+0x40>
c0002038:	89 c7                	mov    edi,eax
c000203a:	89 d1                	mov    ecx,edx
c000203c:	41                   	inc    ecx
c000203d:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002040:	3c 1f                	cmp    al,0x1f
c0002042:	76 04                	jbe    c0002048 <get_ldnumber+0x1c>
c0002044:	3c 3a                	cmp    al,0x3a
c0002046:	75 f4                	jne    c000203c <get_ldnumber+0x10>
c0002048:	31 db                	xor    ebx,ebx
c000204a:	3c 3a                	cmp    al,0x3a
c000204c:	75 1e                	jne    c000206c <get_ldnumber+0x40>
c000204e:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002051:	83 cb ff             	or     ebx,0xffffffff
c0002054:	8d 46 d0             	lea    eax,[esi-0x30]
c0002057:	3c 09                	cmp    al,0x9
c0002059:	77 11                	ja     c000206c <get_ldnumber+0x40>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	39 d1                	cmp    ecx,edx
c0002060:	75 0a                	jne    c000206c <get_ldnumber+0x40>
c0002062:	89 f0                	mov    eax,esi
c0002064:	89 0f                	mov    DWORD PTR [edi],ecx
c0002066:	0f be d8             	movsx  ebx,al
c0002069:	83 eb 30             	sub    ebx,0x30
c000206c:	89 d8                	mov    eax,ebx
c000206e:	5b                   	pop    ebx
c000206f:	5e                   	pop    esi
c0002070:	5f                   	pop    edi
c0002071:	c3                   	ret    

c0002072 <crc32>:
c0002072:	56                   	push   esi
c0002073:	89 d6                	mov    esi,edx
c0002075:	53                   	push   ebx
c0002076:	b2 01                	mov    dl,0x1
c0002078:	bb 08 00 00 00       	mov    ebx,0x8
c000207d:	89 f1                	mov    ecx,esi
c000207f:	84 d1                	test   cl,dl
c0002081:	0f 95 c1             	setne  cl
c0002084:	0f b6 c9             	movzx  ecx,cl
c0002087:	31 c1                	xor    ecx,eax
c0002089:	89 c8                	mov    eax,ecx
c000208b:	d1 e8                	shr    eax,1
c000208d:	80 e1 01             	and    cl,0x1
c0002090:	74 05                	je     c0002097 <crc32+0x25>
c0002092:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002097:	01 d2                	add    edx,edx
c0002099:	4b                   	dec    ebx
c000209a:	75 e1                	jne    c000207d <crc32+0xb>
c000209c:	5b                   	pop    ebx
c000209d:	5e                   	pop    esi
c000209e:	c3                   	ret    

c000209f <test_gpt_header>:
c000209f:	55                   	push   ebp
c00020a0:	b9 10 00 00 00       	mov    ecx,0x10
c00020a5:	57                   	push   edi
c00020a6:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020ab:	56                   	push   esi
c00020ac:	31 ff                	xor    edi,edi
c00020ae:	53                   	push   ebx
c00020af:	89 c3                	mov    ebx,eax
c00020b1:	e8 33 fa ff ff       	call   c0001ae9 <mem_cmp>
c00020b6:	85 c0                	test   eax,eax
c00020b8:	75 55                	jne    c000210f <test_gpt_header+0x70>
c00020ba:	89 c7                	mov    edi,eax
c00020bc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c1:	83 ce ff             	or     esi,0xffffffff
c00020c4:	31 d2                	xor    edx,edx
c00020c6:	83 fd 03             	cmp    ebp,0x3
c00020c9:	76 05                	jbe    c00020d0 <test_gpt_header+0x31>
c00020cb:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d0:	89 f0                	mov    eax,esi
c00020d2:	45                   	inc    ebp
c00020d3:	e8 9a ff ff ff       	call   c0002072 <crc32>
c00020d8:	83 fd 4c             	cmp    ebp,0x4c
c00020db:	89 c6                	mov    esi,eax
c00020dd:	75 e5                	jne    c00020c4 <test_gpt_header+0x25>
c00020df:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e2:	e8 70 f9 ff ff       	call   c0001a57 <ld_dword>
c00020e7:	f7 d6                	not    esi
c00020e9:	39 c6                	cmp    esi,eax
c00020eb:	75 22                	jne    c000210f <test_gpt_header+0x70>
c00020ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f0:	e8 62 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f5:	83 c0 80             	add    eax,0xffffff80
c00020f8:	75 15                	jne    c000210f <test_gpt_header+0x70>
c00020fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00020fd:	e8 55 f9 ff ff       	call   c0001a57 <ld_dword>
c0002102:	3d 80 00 00 00       	cmp    eax,0x80
c0002107:	0f 96 c0             	setbe  al
c000210a:	0f b6 c0             	movzx  eax,al
c000210d:	89 c7                	mov    edi,eax
c000210f:	5b                   	pop    ebx
c0002110:	89 f8                	mov    eax,edi
c0002112:	5e                   	pop    esi
c0002113:	5f                   	pop    edi
c0002114:	5d                   	pop    ebp
c0002115:	c3                   	ret    

c0002116 <make_rand>:
c0002116:	56                   	push   esi
c0002117:	85 c0                	test   eax,eax
c0002119:	53                   	push   ebx
c000211a:	75 05                	jne    c0002121 <make_rand+0xb>
c000211c:	b8 01 00 00 00       	mov    eax,0x1
c0002121:	01 d1                	add    ecx,edx
c0002123:	bb 08 00 00 00       	mov    ebx,0x8
c0002128:	89 c6                	mov    esi,eax
c000212a:	d1 e8                	shr    eax,1
c000212c:	83 e6 01             	and    esi,0x1
c000212f:	85 f6                	test   esi,esi
c0002131:	74 05                	je     c0002138 <make_rand+0x22>
c0002133:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002138:	4b                   	dec    ebx
c0002139:	75 ed                	jne    c0002128 <make_rand+0x12>
c000213b:	42                   	inc    edx
c000213c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213f:	39 ca                	cmp    edx,ecx
c0002141:	75 e0                	jne    c0002123 <make_rand+0xd>
c0002143:	5b                   	pop    ebx
c0002144:	5e                   	pop    esi
c0002145:	c3                   	ret    

c0002146 <validate>:
c0002146:	56                   	push   esi
c0002147:	89 d6                	mov    esi,edx
c0002149:	53                   	push   ebx
c000214a:	85 c0                	test   eax,eax
c000214c:	51                   	push   ecx
c000214d:	75 09                	jne    c0002158 <validate+0x12>
c000214f:	b8 09 00 00 00       	mov    eax,0x9
c0002154:	31 c9                	xor    ecx,ecx
c0002156:	eb 2f                	jmp    c0002187 <validate+0x41>
c0002158:	89 c3                	mov    ebx,eax
c000215a:	8b 00                	mov    eax,DWORD PTR [eax]
c000215c:	85 c0                	test   eax,eax
c000215e:	74 ef                	je     c000214f <validate+0x9>
c0002160:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002163:	74 ea                	je     c000214f <validate+0x9>
c0002165:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002169:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000216d:	75 e0                	jne    c000214f <validate+0x9>
c000216f:	83 ec 0c             	sub    esp,0xc
c0002172:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002176:	50                   	push   eax
c0002177:	e8 7d f8 ff ff       	call   c00019f9 <disk_status>
c000217c:	83 c4 10             	add    esp,0x10
c000217f:	a8 01                	test   al,0x1
c0002181:	75 cc                	jne    c000214f <validate+0x9>
c0002183:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002185:	31 c0                	xor    eax,eax
c0002187:	89 0e                	mov    DWORD PTR [esi],ecx
c0002189:	5a                   	pop    edx
c000218a:	5b                   	pop    ebx
c000218b:	5e                   	pop    esi
c000218c:	c3                   	ret    

c000218d <sync_window>:
c000218d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002191:	0f 84 85 00 00 00    	je     c000221c <sync_window+0x8f>
c0002197:	55                   	push   ebp
c0002198:	8d 68 54             	lea    ebp,[eax+0x54]
c000219b:	57                   	push   edi
c000219c:	56                   	push   esi
c000219d:	53                   	push   ebx
c000219e:	89 c3                	mov    ebx,eax
c00021a0:	83 ec 28             	sub    esp,0x28
c00021a3:	6a 01                	push   0x1
c00021a5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021ab:	55                   	push   ebp
c00021ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b0:	50                   	push   eax
c00021b1:	e8 5f f8 ff ff       	call   c0001a15 <disk_write>
c00021b6:	83 c4 20             	add    esp,0x20
c00021b9:	ba 01 00 00 00       	mov    edx,0x1
c00021be:	85 c0                	test   eax,eax
c00021c0:	75 50                	jne    c0002212 <sync_window+0x85>
c00021c2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021cc:	89 c6                	mov    esi,eax
c00021ce:	31 ff                	xor    edi,edi
c00021d0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d3:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021da:	89 d7                	mov    edi,edx
c00021dc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021eb:	73 23                	jae    c0002210 <sync_window+0x83>
c00021ed:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f1:	75 1d                	jne    c0002210 <sync_window+0x83>
c00021f3:	83 ec 0c             	sub    esp,0xc
c00021f6:	6a 01                	push   0x1
c00021f8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021fc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002200:	52                   	push   edx
c0002201:	50                   	push   eax
c0002202:	55                   	push   ebp
c0002203:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002207:	50                   	push   eax
c0002208:	e8 08 f8 ff ff       	call   c0001a15 <disk_write>
c000220d:	83 c4 20             	add    esp,0x20
c0002210:	31 d2                	xor    edx,edx
c0002212:	83 c4 1c             	add    esp,0x1c
c0002215:	89 d0                	mov    eax,edx
c0002217:	5b                   	pop    ebx
c0002218:	5e                   	pop    esi
c0002219:	5f                   	pop    edi
c000221a:	5d                   	pop    ebp
c000221b:	c3                   	ret    
c000221c:	31 d2                	xor    edx,edx
c000221e:	89 d0                	mov    eax,edx
c0002220:	c3                   	ret    

c0002221 <move_window>:
c0002221:	56                   	push   esi
c0002222:	53                   	push   ebx
c0002223:	89 c3                	mov    ebx,eax
c0002225:	83 ec 14             	sub    esp,0x14
c0002228:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000222b:	75 07                	jne    c0002234 <move_window+0x13>
c000222d:	31 f6                	xor    esi,esi
c000222f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002232:	74 59                	je     c000228d <move_window+0x6c>
c0002234:	89 d8                	mov    eax,ebx
c0002236:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000223e:	e8 4a ff ff ff       	call   c000218d <sync_window>
c0002243:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002247:	89 c6                	mov    esi,eax
c0002249:	85 c0                	test   eax,eax
c000224b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224f:	75 3c                	jne    c000228d <move_window+0x6c>
c0002251:	83 ec 0c             	sub    esp,0xc
c0002254:	8d 43 54             	lea    eax,[ebx+0x54]
c0002257:	6a 01                	push   0x1
c0002259:	51                   	push   ecx
c000225a:	52                   	push   edx
c000225b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002263:	50                   	push   eax
c0002264:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002268:	50                   	push   eax
c0002269:	e8 91 f7 ff ff       	call   c00019ff <disk_read>
c000226e:	83 c4 20             	add    esp,0x20
c0002271:	85 c0                	test   eax,eax
c0002273:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002277:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227b:	74 0a                	je     c0002287 <move_window+0x66>
c000227d:	83 ca ff             	or     edx,0xffffffff
c0002280:	be 01 00 00 00       	mov    esi,0x1
c0002285:	89 d1                	mov    ecx,edx
c0002287:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000228a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000228d:	83 c4 14             	add    esp,0x14
c0002290:	89 f0                	mov    eax,esi
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <check_fs>:
c0002295:	53                   	push   ebx
c0002296:	89 c3                	mov    ebx,eax
c0002298:	83 ec 08             	sub    esp,0x8
c000229b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022ad:	e8 6f ff ff ff       	call   c0002221 <move_window>
c00022b2:	ba 04 00 00 00       	mov    edx,0x4
c00022b7:	85 c0                	test   eax,eax
c00022b9:	0f 85 89 00 00 00    	jne    c0002348 <check_fs+0xb3>
c00022bf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c5:	e8 80 f7 ff ff       	call   c0001a4a <ld_word>
c00022ca:	ba 03 00 00 00       	mov    edx,0x3
c00022cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d3:	75 73                	jne    c0002348 <check_fs+0xb3>
c00022d5:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022da:	8d 43 54             	lea    eax,[ebx+0x54]
c00022dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e2:	e8 02 f8 ff ff       	call   c0001ae9 <mem_cmp>
c00022e7:	ba 01 00 00 00       	mov    edx,0x1
c00022ec:	85 c0                	test   eax,eax
c00022ee:	74 58                	je     c0002348 <check_fs+0xb3>
c00022f0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f3:	8d 50 18             	lea    edx,[eax+0x18]
c00022f6:	80 fa 01             	cmp    dl,0x1
c00022f9:	76 09                	jbe    c0002304 <check_fs+0x6f>
c00022fb:	ba 02 00 00 00       	mov    edx,0x2
c0002300:	3c eb                	cmp    al,0xeb
c0002302:	75 44                	jne    c0002348 <check_fs+0xb3>
c0002304:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c0002309:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230f:	b9 03 00 00 00       	mov    ecx,0x3
c0002314:	e8 d0 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002319:	31 d2                	xor    edx,edx
c000231b:	85 c0                	test   eax,eax
c000231d:	74 29                	je     c0002348 <check_fs+0xb3>
c000231f:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c0002324:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000232a:	b9 05 00 00 00       	mov    ecx,0x5
c000232f:	e8 b5 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002334:	31 d2                	xor    edx,edx
c0002336:	85 c0                	test   eax,eax
c0002338:	74 0e                	je     c0002348 <check_fs+0xb3>
c000233a:	31 d2                	xor    edx,edx
c000233c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002343:	0f 95 c2             	setne  dl
c0002346:	01 d2                	add    edx,edx
c0002348:	83 c4 08             	add    esp,0x8
c000234b:	89 d0                	mov    eax,edx
c000234d:	5b                   	pop    ebx
c000234e:	c3                   	ret    

c000234f <find_volume>:
c000234f:	55                   	push   ebp
c0002350:	31 c9                	xor    ecx,ecx
c0002352:	57                   	push   edi
c0002353:	56                   	push   esi
c0002354:	89 d6                	mov    esi,edx
c0002356:	53                   	push   ebx
c0002357:	31 d2                	xor    edx,edx
c0002359:	83 ec 3c             	sub    esp,0x3c
c000235c:	89 c3                	mov    ebx,eax
c000235e:	e8 32 ff ff ff       	call   c0002295 <check_fs>
c0002363:	83 f8 02             	cmp    eax,0x2
c0002366:	74 0e                	je     c0002376 <find_volume+0x27>
c0002368:	0f 87 56 01 00 00    	ja     c00024c4 <find_volume+0x175>
c000236e:	85 f6                	test   esi,esi
c0002370:	0f 84 4e 01 00 00    	je     c00024c4 <find_volume+0x175>
c0002376:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000237d:	0f 85 df 00 00 00    	jne    c0002462 <find_volume+0x113>
c0002383:	31 c9                	xor    ecx,ecx
c0002385:	ba 01 00 00 00       	mov    edx,0x1
c000238a:	89 d8                	mov    eax,ebx
c000238c:	e8 90 fe ff ff       	call   c0002221 <move_window>
c0002391:	85 c0                	test   eax,eax
c0002393:	74 0a                	je     c000239f <find_volume+0x50>
c0002395:	b8 04 00 00 00       	mov    eax,0x4
c000239a:	e9 25 01 00 00       	jmp    c00024c4 <find_volume+0x175>
c000239f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a2:	89 e8                	mov    eax,ebp
c00023a4:	e8 f6 fc ff ff       	call   c000209f <test_gpt_header>
c00023a9:	85 c0                	test   eax,eax
c00023ab:	75 0a                	jne    c00023b7 <find_volume+0x68>
c00023ad:	b8 03 00 00 00       	mov    eax,0x3
c00023b2:	e9 0d 01 00 00       	jmp    c00024c4 <find_volume+0x175>
c00023b7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023bd:	e8 95 f6 ff ff       	call   c0001a57 <ld_dword>
c00023c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023cc:	e8 9e f6 ff ff       	call   c0001a6f <ld_qword>
c00023d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ed:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f1:	74 ba                	je     c00023ad <find_volume+0x5e>
c00023f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f7:	31 c9                	xor    ecx,ecx
c00023f9:	c1 e7 07             	shl    edi,0x7
c00023fc:	89 d8                	mov    eax,ebx
c00023fe:	89 fa                	mov    edx,edi
c0002400:	c1 ea 09             	shr    edx,0x9
c0002403:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002407:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000240b:	e8 11 fe ff ff       	call   c0002221 <move_window>
c0002410:	85 c0                	test   eax,eax
c0002412:	75 81                	jne    c0002395 <find_volume+0x46>
c0002414:	81 e7 80 01 00 00    	and    edi,0x180
c000241a:	b9 10 00 00 00       	mov    ecx,0x10
c000241f:	ba 50 05 02 c0       	mov    edx,0xc0020550
c0002424:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002428:	e8 bc f6 ff ff       	call   c0001ae9 <mem_cmp>
c000242d:	85 c0                	test   eax,eax
c000242f:	75 2b                	jne    c000245c <find_volume+0x10d>
c0002431:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002435:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002439:	e8 31 f6 ff ff       	call   c0001a6f <ld_qword>
c000243e:	89 d1                	mov    ecx,edx
c0002440:	89 c2                	mov    edx,eax
c0002442:	89 d8                	mov    eax,ebx
c0002444:	e8 4c fe ff ff       	call   c0002295 <check_fs>
c0002449:	85 f6                	test   esi,esi
c000244b:	75 05                	jne    c0002452 <find_volume+0x103>
c000244d:	83 f8 01             	cmp    eax,0x1
c0002450:	76 72                	jbe    c00024c4 <find_volume+0x175>
c0002452:	85 f6                	test   esi,esi
c0002454:	74 06                	je     c000245c <find_volume+0x10d>
c0002456:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245a:	74 68                	je     c00024c4 <find_volume+0x175>
c000245c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002460:	eb 87                	jmp    c00023e9 <find_volume+0x9a>
c0002462:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002466:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000246c:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002472:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002476:	89 cd                	mov    ebp,ecx
c0002478:	89 f8                	mov    eax,edi
c000247a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000247e:	e8 d4 f5 ff ff       	call   c0001a57 <ld_dword>
c0002483:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002487:	83 c7 10             	add    edi,0x10
c000248a:	83 c1 04             	add    ecx,0x4
c000248d:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002490:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002494:	75 e2                	jne    c0002478 <find_volume+0x129>
c0002496:	31 ff                	xor    edi,edi
c0002498:	85 f6                	test   esi,esi
c000249a:	74 03                	je     c000249f <find_volume+0x150>
c000249c:	8d 7e ff             	lea    edi,[esi-0x1]
c000249f:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a3:	b8 03 00 00 00       	mov    eax,0x3
c00024a8:	85 d2                	test   edx,edx
c00024aa:	74 09                	je     c00024b5 <find_volume+0x166>
c00024ac:	31 c9                	xor    ecx,ecx
c00024ae:	89 d8                	mov    eax,ebx
c00024b0:	e8 e0 fd ff ff       	call   c0002295 <check_fs>
c00024b5:	85 f6                	test   esi,esi
c00024b7:	75 0b                	jne    c00024c4 <find_volume+0x175>
c00024b9:	83 f8 01             	cmp    eax,0x1
c00024bc:	76 06                	jbe    c00024c4 <find_volume+0x175>
c00024be:	47                   	inc    edi
c00024bf:	83 ff 03             	cmp    edi,0x3
c00024c2:	76 db                	jbe    c000249f <find_volume+0x150>
c00024c4:	83 c4 3c             	add    esp,0x3c
c00024c7:	5b                   	pop    ebx
c00024c8:	5e                   	pop    esi
c00024c9:	5f                   	pop    edi
c00024ca:	5d                   	pop    ebp
c00024cb:	c3                   	ret    

c00024cc <mount_volume>:
c00024cc:	55                   	push   ebp
c00024cd:	57                   	push   edi
c00024ce:	89 cf                	mov    edi,ecx
c00024d0:	56                   	push   esi
c00024d1:	53                   	push   ebx
c00024d2:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d7:	83 ec 3c             	sub    esp,0x3c
c00024da:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e4:	e8 43 fb ff ff       	call   c000202c <get_ldnumber>
c00024e9:	85 c0                	test   eax,eax
c00024eb:	0f 88 3b 05 00 00    	js     c0002a2c <mount_volume+0x560>
c00024f1:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c00024f8:	89 c6                	mov    esi,eax
c00024fa:	bb 0c 00 00 00       	mov    ebx,0xc
c00024ff:	85 ed                	test   ebp,ebp
c0002501:	0f 84 25 05 00 00    	je     c0002a2c <mount_volume+0x560>
c0002507:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250b:	83 e7 fe             	and    edi,0xfffffffe
c000250e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002510:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002514:	74 32                	je     c0002548 <mount_volume+0x7c>
c0002516:	83 ec 0c             	sub    esp,0xc
c0002519:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000251d:	50                   	push   eax
c000251e:	e8 d6 f4 ff ff       	call   c00019f9 <disk_status>
c0002523:	83 c4 10             	add    esp,0x10
c0002526:	a8 01                	test   al,0x1
c0002528:	75 1e                	jne    c0002548 <mount_volume+0x7c>
c000252a:	89 f9                	mov    ecx,edi
c000252c:	31 db                	xor    ebx,ebx
c000252e:	84 c9                	test   cl,cl
c0002530:	0f 84 f6 04 00 00    	je     c0002a2c <mount_volume+0x560>
c0002536:	a8 04                	test   al,0x4
c0002538:	0f 84 ee 04 00 00    	je     c0002a2c <mount_volume+0x560>
c000253e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002543:	e9 e4 04 00 00       	jmp    c0002a2c <mount_volume+0x560>
c0002548:	83 ec 0c             	sub    esp,0xc
c000254b:	89 f0                	mov    eax,esi
c000254d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002551:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002554:	0f b6 f0             	movzx  esi,al
c0002557:	56                   	push   esi
c0002558:	e8 9f f4 ff ff       	call   c00019fc <disk_initialize>
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	83 c4 10             	add    esp,0x10
c0002565:	a8 01                	test   al,0x1
c0002567:	0f 85 bf 04 00 00    	jne    c0002a2c <mount_volume+0x560>
c000256d:	89 f9                	mov    ecx,edi
c000256f:	84 c9                	test   cl,cl
c0002571:	74 04                	je     c0002577 <mount_volume+0xab>
c0002573:	a8 04                	test   al,0x4
c0002575:	75 c7                	jne    c000253e <mount_volume+0x72>
c0002577:	31 d2                	xor    edx,edx
c0002579:	89 e8                	mov    eax,ebp
c000257b:	e8 cf fd ff ff       	call   c000234f <find_volume>
c0002580:	83 f8 04             	cmp    eax,0x4
c0002583:	75 0a                	jne    c000258f <mount_volume+0xc3>
c0002585:	bb 01 00 00 00       	mov    ebx,0x1
c000258a:	e9 9d 04 00 00       	jmp    c0002a2c <mount_volume+0x560>
c000258f:	83 f8 01             	cmp    eax,0x1
c0002592:	76 0a                	jbe    c000259e <mount_volume+0xd2>
c0002594:	bb 0d 00 00 00       	mov    ebx,0xd
c0002599:	e9 8e 04 00 00       	jmp    c0002a2c <mount_volume+0x560>
c000259e:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ac:	75 17                	jne    c00025c5 <mount_volume+0xf9>
c00025ae:	b8 0b 00 00 00       	mov    eax,0xb
c00025b3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b8:	75 da                	jne    c0002594 <mount_volume+0xc8>
c00025ba:	40                   	inc    eax
c00025bb:	83 f8 40             	cmp    eax,0x40
c00025be:	75 f3                	jne    c00025b3 <mount_volume+0xe7>
c00025c0:	e9 5a 02 00 00       	jmp    c000281f <mount_volume+0x353>
c00025c5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c8:	e8 7d f4 ff ff       	call   c0001a4a <ld_word>
c00025cd:	66 3d 00 02          	cmp    ax,0x200
c00025d1:	75 c1                	jne    c0002594 <mount_volume+0xc8>
c00025d3:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	0f b7 c0             	movzx  eax,ax
c00025de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e2:	85 c0                	test   eax,eax
c00025e4:	75 0c                	jne    c00025f2 <mount_volume+0x126>
c00025e6:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e9:	e8 69 f4 ff ff       	call   c0001a57 <ld_dword>
c00025ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f6:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f9:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025fc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002600:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002603:	48                   	dec    eax
c0002604:	3c 01                	cmp    al,0x1
c0002606:	77 8c                	ja     c0002594 <mount_volume+0xc8>
c0002608:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000260c:	89 c3                	mov    ebx,eax
c000260e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002612:	66 85 c0             	test   ax,ax
c0002615:	0f 84 79 ff ff ff    	je     c0002594 <mount_volume+0xc8>
c000261b:	8d 40 ff             	lea    eax,[eax-0x1]
c000261e:	85 d8                	test   eax,ebx
c0002620:	0f 85 6e ff ff ff    	jne    c0002594 <mount_volume+0xc8>
c0002626:	8d 45 65             	lea    eax,[ebp+0x65]
c0002629:	e8 1c f4 ff ff       	call   c0001a4a <ld_word>
c000262e:	89 c7                	mov    edi,eax
c0002630:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002634:	a8 0f                	test   al,0xf
c0002636:	0f 85 58 ff ff ff    	jne    c0002594 <mount_volume+0xc8>
c000263c:	8d 45 67             	lea    eax,[ebp+0x67]
c000263f:	e8 06 f4 ff ff       	call   c0001a4a <ld_word>
c0002644:	0f b7 f0             	movzx  esi,ax
c0002647:	85 f6                	test   esi,esi
c0002649:	75 0a                	jne    c0002655 <mount_volume+0x189>
c000264b:	8d 45 74             	lea    eax,[ebp+0x74]
c000264e:	e8 04 f4 ff ff       	call   c0001a57 <ld_dword>
c0002653:	89 c6                	mov    esi,eax
c0002655:	8d 45 62             	lea    eax,[ebp+0x62]
c0002658:	e8 ed f3 ff ff       	call   c0001a4a <ld_word>
c000265d:	66 85 c0             	test   ax,ax
c0002660:	0f 84 2e ff ff ff    	je     c0002594 <mount_volume+0xc8>
c0002666:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002670:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002674:	89 fa                	mov    edx,edi
c0002676:	66 c1 ea 04          	shr    dx,0x4
c000267a:	0f b7 d2             	movzx  edx,dx
c000267d:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002681:	0f b7 c8             	movzx  ecx,ax
c0002684:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002687:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268b:	39 c6                	cmp    esi,eax
c000268d:	0f 82 01 ff ff ff    	jb     c0002594 <mount_volume+0xc8>
c0002693:	29 c6                	sub    esi,eax
c0002695:	31 d2                	xor    edx,edx
c0002697:	89 f0                	mov    eax,esi
c0002699:	f7 f3                	div    ebx
c000269b:	39 de                	cmp    esi,ebx
c000269d:	0f 82 f1 fe ff ff    	jb     c0002594 <mount_volume+0xc8>
c00026a3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a8:	0f 87 e6 fe ff ff    	ja     c0002594 <mount_volume+0xc8>
c00026ae:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b3:	0f 86 63 03 00 00    	jbe    c0002a1c <mount_volume+0x550>
c00026b9:	bb 03 00 00 00       	mov    ebx,0x3
c00026be:	8d 70 02             	lea    esi,[eax+0x2]
c00026c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026cc:	89 c8                	mov    eax,ecx
c00026ce:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d1:	31 d2                	xor    edx,edx
c00026d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026df:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ea:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026ed:	31 d2                	xor    edx,edx
c00026ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f7:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026fa:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026fd:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002700:	83 fb 03             	cmp    ebx,0x3
c0002703:	75 2b                	jne    c0002730 <mount_volume+0x264>
c0002705:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002708:	e8 3d f3 ff ff       	call   c0001a4a <ld_word>
c000270d:	66 09 c7             	or     di,ax
c0002710:	0f 85 7e fe ff ff    	jne    c0002594 <mount_volume+0xc8>
c0002716:	c1 e6 02             	shl    esi,0x2
c0002719:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271f:	e8 33 f3 ff ff       	call   c0001a57 <ld_dword>
c0002724:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000272e:	eb 30                	jmp    c0002760 <mount_volume+0x294>
c0002730:	66 85 ff             	test   di,di
c0002733:	0f 84 5b fe ff ff    	je     c0002594 <mount_volume+0xc8>
c0002739:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000273d:	31 d2                	xor    edx,edx
c000273f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002743:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002747:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000274d:	83 fb 02             	cmp    ebx,0x2
c0002750:	75 04                	jne    c0002756 <mount_volume+0x28a>
c0002752:	01 f6                	add    esi,esi
c0002754:	eb 0a                	jmp    c0002760 <mount_volume+0x294>
c0002756:	8d 04 76             	lea    eax,[esi+esi*2]
c0002759:	83 e6 01             	and    esi,0x1
c000275c:	d1 e8                	shr    eax,1
c000275e:	01 c6                	add    esi,eax
c0002760:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002766:	c1 ee 09             	shr    esi,0x9
c0002769:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000276d:	0f 87 21 fe ff ff    	ja     c0002594 <mount_volume+0xc8>
c0002773:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002781:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002785:	83 fb 03             	cmp    ebx,0x3
c0002788:	75 7a                	jne    c0002804 <mount_volume+0x338>
c000278a:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002790:	e8 b5 f2 ff ff       	call   c0001a4a <ld_word>
c0002795:	66 48                	dec    ax
c0002797:	75 6b                	jne    c0002804 <mount_volume+0x338>
c0002799:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000279d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a1:	83 c2 01             	add    edx,0x1
c00027a4:	89 e8                	mov    eax,ebp
c00027a6:	83 d1 00             	adc    ecx,0x0
c00027a9:	e8 73 fa ff ff       	call   c0002221 <move_window>
c00027ae:	85 c0                	test   eax,eax
c00027b0:	75 52                	jne    c0002804 <mount_volume+0x338>
c00027b2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027bc:	e8 89 f2 ff ff       	call   c0001a4a <ld_word>
c00027c1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c5:	75 3d                	jne    c0002804 <mount_volume+0x338>
c00027c7:	8d 45 54             	lea    eax,[ebp+0x54]
c00027ca:	e8 88 f2 ff ff       	call   c0001a57 <ld_dword>
c00027cf:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d4:	75 2e                	jne    c0002804 <mount_volume+0x338>
c00027d6:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027dc:	e8 76 f2 ff ff       	call   c0001a57 <ld_dword>
c00027e1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e6:	75 1c                	jne    c0002804 <mount_volume+0x338>
c00027e8:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027ee:	e8 64 f2 ff ff       	call   c0001a57 <ld_dword>
c00027f3:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f6:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002804:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c000280a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000280d:	40                   	inc    eax
c000280e:	31 db                	xor    ebx,ebx
c0002810:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c0002816:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281a:	e9 0d 02 00 00       	jmp    c0002a2c <mount_volume+0x560>
c000281f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002825:	e8 20 f2 ff ff       	call   c0001a4a <ld_word>
c000282a:	66 3d 00 01          	cmp    ax,0x100
c000282e:	0f 85 60 fd ff ff    	jne    c0002594 <mount_volume+0xc8>
c0002834:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283b:	0f 85 53 fd ff ff    	jne    c0002594 <mount_volume+0xc8>
c0002841:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002847:	e8 23 f2 ff ff       	call   c0001a6f <ld_qword>
c000284c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002850:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002856:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000285a:	e8 f8 f1 ff ff       	call   c0001a57 <ld_dword>
c000285f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002862:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002868:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286b:	fe c8                	dec    al
c000286d:	0f 85 21 fd ff ff    	jne    c0002594 <mount_volume+0xc8>
c0002873:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287a:	bb 01 00 00 00       	mov    ebx,0x1
c000287f:	d3 e3                	shl    ebx,cl
c0002881:	66 85 db             	test   bx,bx
c0002884:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002888:	0f 84 06 fd ff ff    	je     c0002594 <mount_volume+0xc8>
c000288e:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002894:	e8 be f1 ff ff       	call   c0001a57 <ld_dword>
c0002899:	89 c6                	mov    esi,eax
c000289b:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a0:	0f 87 ee fc ff ff    	ja     c0002594 <mount_volume+0xc8>
c00028a6:	8d 40 02             	lea    eax,[eax+0x2]
c00028a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ad:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028ba:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c0:	e8 92 f1 ff ff       	call   c0001a57 <ld_dword>
c00028c5:	31 d2                	xor    edx,edx
c00028c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d3:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d6:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d9:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e3:	e8 6f f1 ff ff       	call   c0001a57 <ld_dword>
c00028e8:	31 d2                	xor    edx,edx
c00028ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f6:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f9:	0f b7 c3             	movzx  eax,bx
c00028fc:	0f af f0             	imul   esi,eax
c00028ff:	89 f0                	mov    eax,esi
c0002901:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002904:	31 d2                	xor    edx,edx
c0002906:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000290a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000290e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291a:	39 c1                	cmp    ecx,eax
c000291c:	89 df                	mov    edi,ebx
c000291e:	19 d7                	sbb    edi,edx
c0002920:	0f 82 6e fc ff ff    	jb     c0002594 <mount_volume+0xc8>
c0002926:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000292c:	31 db                	xor    ebx,ebx
c000292e:	e8 24 f1 ff ff       	call   c0001a57 <ld_dword>
c0002933:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000293d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002945:	85 db                	test   ebx,ebx
c0002947:	75 39                	jne    c0002982 <mount_volume+0x4b6>
c0002949:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000294d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002951:	0f 86 3d fc ff ff    	jbe    c0002594 <mount_volume+0xc8>
c0002957:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295a:	89 e8                	mov    eax,ebp
c000295c:	e8 82 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002961:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002965:	31 ff                	xor    edi,edi
c0002967:	01 c6                	add    esi,eax
c0002969:	11 d7                	adc    edi,edx
c000296b:	89 e8                	mov    eax,ebp
c000296d:	89 f2                	mov    edx,esi
c000296f:	89 f9                	mov    ecx,edi
c0002971:	e8 ab f8 ff ff       	call   c0002221 <move_window>
c0002976:	85 c0                	test   eax,eax
c0002978:	0f 85 07 fc ff ff    	jne    c0002585 <mount_volume+0xb9>
c000297e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002982:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002987:	74 0b                	je     c0002994 <mount_volume+0x4c8>
c0002989:	83 c3 20             	add    ebx,0x20
c000298c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002992:	eb b1                	jmp    c0002945 <mount_volume+0x479>
c0002994:	8d 75 54             	lea    esi,[ebp+0x54]
c0002997:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299b:	e8 b7 f0 ff ff       	call   c0001a57 <ld_dword>
c00029a0:	89 c3                	mov    ebx,eax
c00029a2:	83 f8 01             	cmp    eax,0x1
c00029a5:	0f 86 e9 fb ff ff    	jbe    c0002594 <mount_volume+0xc8>
c00029ab:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029ae:	0f 86 e0 fb ff ff    	jbe    c0002594 <mount_volume+0xc8>
c00029b4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b8:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bb:	0f af c2             	imul   eax,edx
c00029be:	31 d2                	xor    edx,edx
c00029c0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029cc:	89 da                	mov    edx,ebx
c00029ce:	31 c9                	xor    ecx,ecx
c00029d0:	c1 ea 07             	shr    edx,0x7
c00029d3:	89 e8                	mov    eax,ebp
c00029d5:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d8:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029db:	e8 41 f8 ff ff       	call   c0002221 <move_window>
c00029e0:	85 c0                	test   eax,eax
c00029e2:	0f 85 9d fb ff ff    	jne    c0002585 <mount_volume+0xb9>
c00029e8:	89 d8                	mov    eax,ebx
c00029ea:	83 e0 7f             	and    eax,0x7f
c00029ed:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f0:	e8 62 f0 ff ff       	call   c0001a57 <ld_dword>
c00029f5:	83 f8 ff             	cmp    eax,0xffffffff
c00029f8:	74 0a                	je     c0002a04 <mount_volume+0x538>
c00029fa:	43                   	inc    ebx
c00029fb:	39 d8                	cmp    eax,ebx
c00029fd:	74 cd                	je     c00029cc <mount_volume+0x500>
c00029ff:	e9 90 fb ff ff       	jmp    c0002594 <mount_volume+0xc8>
c0002a04:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a12:	bb 04 00 00 00       	mov    ebx,0x4
c0002a17:	e9 e8 fd ff ff       	jmp    c0002804 <mount_volume+0x338>
c0002a1c:	31 db                	xor    ebx,ebx
c0002a1e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a23:	0f 97 c3             	seta   bl
c0002a26:	43                   	inc    ebx
c0002a27:	e9 92 fc ff ff       	jmp    c00026be <mount_volume+0x1f2>
c0002a2c:	83 c4 3c             	add    esp,0x3c
c0002a2f:	89 d8                	mov    eax,ebx
c0002a31:	5b                   	pop    ebx
c0002a32:	5e                   	pop    esi
c0002a33:	5f                   	pop    edi
c0002a34:	5d                   	pop    ebp
c0002a35:	c3                   	ret    

c0002a36 <find_bitmap>:
c0002a36:	55                   	push   ebp
c0002a37:	57                   	push   edi
c0002a38:	89 c7                	mov    edi,eax
c0002a3a:	56                   	push   esi
c0002a3b:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a3e:	53                   	push   ebx
c0002a3f:	83 ec 1c             	sub    esp,0x1c
c0002a42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a45:	83 e8 02             	sub    eax,0x2
c0002a48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4c:	39 f0                	cmp    eax,esi
c0002a4e:	77 02                	ja     c0002a52 <find_bitmap+0x1c>
c0002a50:	31 f6                	xor    esi,esi
c0002a52:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a56:	89 f3                	mov    ebx,esi
c0002a58:	31 ed                	xor    ebp,ebp
c0002a5a:	89 da                	mov    edx,ebx
c0002a5c:	31 c9                	xor    ecx,ecx
c0002a5e:	c1 ea 0c             	shr    edx,0xc
c0002a61:	89 f8                	mov    eax,edi
c0002a63:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a66:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a69:	e8 b3 f7 ff ff       	call   c0002221 <move_window>
c0002a6e:	85 c0                	test   eax,eax
c0002a70:	75 68                	jne    c0002ada <find_bitmap+0xa4>
c0002a72:	89 d9                	mov    ecx,ebx
c0002a74:	b8 01 00 00 00       	mov    eax,0x1
c0002a79:	83 e1 07             	and    ecx,0x7
c0002a7c:	89 da                	mov    edx,ebx
c0002a7e:	d3 e0                	shl    eax,cl
c0002a80:	c1 ea 03             	shr    edx,0x3
c0002a83:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a86:	83 e9 02             	sub    ecx,0x2
c0002a89:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a93:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a97:	43                   	inc    ebx
c0002a98:	21 c1                	and    ecx,eax
c0002a9a:	01 c0                	add    eax,eax
c0002a9c:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa0:	77 09                	ja     c0002aab <find_bitmap+0x75>
c0002aa2:	31 db                	xor    ebx,ebx
c0002aa4:	ba 00 02 00 00       	mov    edx,0x200
c0002aa9:	31 c0                	xor    eax,eax
c0002aab:	84 c9                	test   cl,cl
c0002aad:	75 10                	jne    c0002abf <find_bitmap+0x89>
c0002aaf:	45                   	inc    ebp
c0002ab0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab4:	75 0f                	jne    c0002ac5 <find_bitmap+0x8f>
c0002ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002aba:	83 c0 02             	add    eax,0x2
c0002abd:	eb 22                	jmp    c0002ae1 <find_bitmap+0xab>
c0002abf:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac3:	31 ed                	xor    ebp,ebp
c0002ac5:	39 de                	cmp    esi,ebx
c0002ac7:	74 16                	je     c0002adf <find_bitmap+0xa9>
c0002ac9:	84 c0                	test   al,al
c0002acb:	75 c6                	jne    c0002a93 <find_bitmap+0x5d>
c0002acd:	42                   	inc    edx
c0002ace:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad4:	77 84                	ja     c0002a5a <find_bitmap+0x24>
c0002ad6:	b0 01                	mov    al,0x1
c0002ad8:	eb b9                	jmp    c0002a93 <find_bitmap+0x5d>
c0002ada:	83 c8 ff             	or     eax,0xffffffff
c0002add:	eb 02                	jmp    c0002ae1 <find_bitmap+0xab>
c0002adf:	31 c0                	xor    eax,eax
c0002ae1:	83 c4 1c             	add    esp,0x1c
c0002ae4:	5b                   	pop    ebx
c0002ae5:	5e                   	pop    esi
c0002ae6:	5f                   	pop    edi
c0002ae7:	5d                   	pop    ebp
c0002ae8:	c3                   	ret    

c0002ae9 <change_bitmap>:
c0002ae9:	55                   	push   ebp
c0002aea:	89 cd                	mov    ebp,ecx
c0002aec:	57                   	push   edi
c0002aed:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af0:	56                   	push   esi
c0002af1:	89 c7                	mov    edi,eax
c0002af3:	53                   	push   ebx
c0002af4:	89 c8                	mov    eax,ecx
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	31 d2                	xor    edx,edx
c0002afb:	c1 e8 0c             	shr    eax,0xc
c0002afe:	89 ce                	mov    esi,ecx
c0002b00:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b03:	bb 01 00 00 00       	mov    ebx,0x1
c0002b08:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0b:	83 e1 07             	and    ecx,0x7
c0002b0e:	c1 ee 03             	shr    esi,0x3
c0002b11:	d3 e3                	shl    ebx,cl
c0002b13:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b19:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b1d:	89 c1                	mov    ecx,eax
c0002b1f:	89 d3                	mov    ebx,edx
c0002b21:	83 c1 01             	add    ecx,0x1
c0002b24:	83 d3 00             	adc    ebx,0x0
c0002b27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2b:	89 d1                	mov    ecx,edx
c0002b2d:	89 c2                	mov    edx,eax
c0002b2f:	89 f8                	mov    eax,edi
c0002b31:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b35:	e8 e7 f6 ff ff       	call   c0002221 <move_window>
c0002b3a:	89 c1                	mov    ecx,eax
c0002b3c:	85 c0                	test   eax,eax
c0002b3e:	75 48                	jne    c0002b88 <change_bitmap+0x9f>
c0002b40:	31 d2                	xor    edx,edx
c0002b42:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b46:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4a:	0f 95 c2             	setne  dl
c0002b4d:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b51:	74 3c                	je     c0002b8f <change_bitmap+0xa6>
c0002b53:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b57:	4d                   	dec    ebp
c0002b58:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b5c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b60:	74 32                	je     c0002b94 <change_bitmap+0xab>
c0002b62:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b66:	75 d8                	jne    c0002b40 <change_bitmap+0x57>
c0002b68:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6b:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b70:	89 c3                	mov    ebx,eax
c0002b72:	31 f6                	xor    esi,esi
c0002b74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b7c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b82:	74 99                	je     c0002b1d <change_bitmap+0x34>
c0002b84:	89 de                	mov    esi,ebx
c0002b86:	eb b8                	jmp    c0002b40 <change_bitmap+0x57>
c0002b88:	b9 01 00 00 00       	mov    ecx,0x1
c0002b8d:	eb 05                	jmp    c0002b94 <change_bitmap+0xab>
c0002b8f:	b9 02 00 00 00       	mov    ecx,0x2
c0002b94:	83 c4 1c             	add    esp,0x1c
c0002b97:	89 c8                	mov    eax,ecx
c0002b99:	5b                   	pop    ebx
c0002b9a:	5e                   	pop    esi
c0002b9b:	5f                   	pop    edi
c0002b9c:	5d                   	pop    ebp
c0002b9d:	c3                   	ret    

c0002b9e <put_fat>:
c0002b9e:	83 fa 01             	cmp    edx,0x1
c0002ba1:	0f 86 7b 01 00 00    	jbe    c0002d22 <put_fat+0x184>
c0002ba7:	55                   	push   ebp
c0002ba8:	57                   	push   edi
c0002ba9:	89 cf                	mov    edi,ecx
c0002bab:	56                   	push   esi
c0002bac:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb1:	53                   	push   ebx
c0002bb2:	89 c6                	mov    esi,eax
c0002bb4:	83 ec 1c             	sub    esp,0x1c
c0002bb7:	89 d3                	mov    ebx,edx
c0002bb9:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bbc:	0f 86 68 01 00 00    	jbe    c0002d2a <put_fat+0x18c>
c0002bc2:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc4:	3c 02                	cmp    al,0x2
c0002bc6:	0f 84 c7 00 00 00    	je     c0002c93 <put_fat+0xf5>
c0002bcc:	77 09                	ja     c0002bd7 <put_fat+0x39>
c0002bce:	fe c8                	dec    al
c0002bd0:	74 17                	je     c0002be9 <put_fat+0x4b>
c0002bd2:	e9 53 01 00 00       	jmp    c0002d2a <put_fat+0x18c>
c0002bd7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bdc:	3c 04                	cmp    al,0x4
c0002bde:	0f 86 e1 00 00 00    	jbe    c0002cc5 <put_fat+0x127>
c0002be4:	e9 41 01 00 00       	jmp    c0002d2a <put_fat+0x18c>
c0002be9:	89 d5                	mov    ebp,edx
c0002beb:	31 c9                	xor    ecx,ecx
c0002bed:	d1 ed                	shr    ebp,1
c0002bef:	89 f0                	mov    eax,esi
c0002bf1:	01 d5                	add    ebp,edx
c0002bf3:	89 ea                	mov    edx,ebp
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bfe:	e8 1e f6 ff ff       	call   c0002221 <move_window>
c0002c03:	89 c1                	mov    ecx,eax
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 1d 01 00 00    	jne    c0002d2a <put_fat+0x18c>
c0002c0d:	8d 46 54             	lea    eax,[esi+0x54]
c0002c10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c14:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c17:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c21:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c25:	83 e3 01             	and    ebx,0x1
c0002c28:	89 f8                	mov    eax,edi
c0002c2a:	74 0d                	je     c0002c39 <put_fat+0x9b>
c0002c2c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2f:	89 fa                	mov    edx,edi
c0002c31:	c1 e2 04             	shl    edx,0x4
c0002c34:	83 e0 0f             	and    eax,0xf
c0002c37:	09 d0                	or     eax,edx
c0002c39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c3d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c40:	c1 ea 09             	shr    edx,0x9
c0002c43:	31 c9                	xor    ecx,ecx
c0002c45:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c48:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4f:	89 f0                	mov    eax,esi
c0002c51:	e8 cb f5 ff ff       	call   c0002221 <move_window>
c0002c56:	89 c1                	mov    ecx,eax
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	0f 85 ca 00 00 00    	jne    c0002d2a <put_fat+0x18c>
c0002c60:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c64:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6a:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c6e:	85 db                	test   ebx,ebx
c0002c70:	74 07                	je     c0002c79 <put_fat+0xdb>
c0002c72:	c1 ef 04             	shr    edi,0x4
c0002c75:	89 fa                	mov    edx,edi
c0002c77:	eb 0e                	jmp    c0002c87 <put_fat+0xe9>
c0002c79:	c1 ef 08             	shr    edi,0x8
c0002c7c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7f:	83 e2 f0             	and    edx,0xfffffff0
c0002c82:	83 e7 0f             	and    edi,0xf
c0002c85:	09 fa                	or     edx,edi
c0002c87:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c8e:	e9 97 00 00 00       	jmp    c0002d2a <put_fat+0x18c>
c0002c93:	c1 ea 08             	shr    edx,0x8
c0002c96:	31 c9                	xor    ecx,ecx
c0002c98:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c9b:	89 f0                	mov    eax,esi
c0002c9d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca0:	e8 7c f5 ff ff       	call   c0002221 <move_window>
c0002ca5:	89 c1                	mov    ecx,eax
c0002ca7:	85 c0                	test   eax,eax
c0002ca9:	75 7f                	jne    c0002d2a <put_fat+0x18c>
c0002cab:	01 db                	add    ebx,ebx
c0002cad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb7:	0f b7 d7             	movzx  edx,di
c0002cba:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cbe:	e8 f9 ed ff ff       	call   c0001abc <st_word>
c0002cc3:	eb 53                	jmp    c0002d18 <put_fat+0x17a>
c0002cc5:	c1 ea 07             	shr    edx,0x7
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ccd:	89 f0                	mov    eax,esi
c0002ccf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd2:	e8 4a f5 ff ff       	call   c0002221 <move_window>
c0002cd7:	89 c1                	mov    ecx,eax
c0002cd9:	85 c0                	test   eax,eax
c0002cdb:	75 4d                	jne    c0002d2a <put_fat+0x18c>
c0002cdd:	c1 e3 02             	shl    ebx,0x2
c0002ce0:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce6:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce9:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ced:	74 1c                	je     c0002d0b <put_fat+0x16d>
c0002cef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf3:	89 d8                	mov    eax,ebx
c0002cf5:	e8 5d ed ff ff       	call   c0001a57 <ld_dword>
c0002cfa:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d00:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d09:	09 c7                	or     edi,eax
c0002d0b:	89 fa                	mov    edx,edi
c0002d0d:	89 d8                	mov    eax,ebx
c0002d0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d13:	e8 a8 ed ff ff       	call   c0001ac0 <st_dword>
c0002d18:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d20:	eb 08                	jmp    c0002d2a <put_fat+0x18c>
c0002d22:	b9 02 00 00 00       	mov    ecx,0x2
c0002d27:	89 c8                	mov    eax,ecx
c0002d29:	c3                   	ret    
c0002d2a:	83 c4 1c             	add    esp,0x1c
c0002d2d:	89 c8                	mov    eax,ecx
c0002d2f:	5b                   	pop    ebx
c0002d30:	5e                   	pop    esi
c0002d31:	5f                   	pop    edi
c0002d32:	5d                   	pop    ebp
c0002d33:	c3                   	ret    

c0002d34 <fill_last_frag>:
c0002d34:	57                   	push   edi
c0002d35:	89 cf                	mov    edi,ecx
c0002d37:	56                   	push   esi
c0002d38:	89 d6                	mov    esi,edx
c0002d3a:	53                   	push   ebx
c0002d3b:	89 c3                	mov    ebx,eax
c0002d3d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d40:	85 c0                	test   eax,eax
c0002d42:	74 21                	je     c0002d65 <fill_last_frag+0x31>
c0002d44:	89 f9                	mov    ecx,edi
c0002d46:	83 f8 01             	cmp    eax,0x1
c0002d49:	76 05                	jbe    c0002d50 <fill_last_frag+0x1c>
c0002d4b:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d4e:	29 c1                	sub    ecx,eax
c0002d50:	8d 56 01             	lea    edx,[esi+0x1]
c0002d53:	29 c2                	sub    edx,eax
c0002d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d57:	e8 42 fe ff ff       	call   c0002b9e <put_fat>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	75 05                	jne    c0002d65 <fill_last_frag+0x31>
c0002d60:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d63:	eb d8                	jmp    c0002d3d <fill_last_frag+0x9>
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <fill_first_frag>:
c0002d69:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d6d:	75 2d                	jne    c0002d9c <fill_first_frag+0x33>
c0002d6f:	57                   	push   edi
c0002d70:	56                   	push   esi
c0002d71:	53                   	push   ebx
c0002d72:	89 c3                	mov    ebx,eax
c0002d74:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d77:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7a:	01 d7                	add    edi,edx
c0002d7c:	39 fa                	cmp    edx,edi
c0002d7e:	74 14                	je     c0002d94 <fill_first_frag+0x2b>
c0002d80:	8d 72 01             	lea    esi,[edx+0x1]
c0002d83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d85:	89 f1                	mov    ecx,esi
c0002d87:	e8 12 fe ff ff       	call   c0002b9e <put_fat>
c0002d8c:	89 f2                	mov    edx,esi
c0002d8e:	85 c0                	test   eax,eax
c0002d90:	74 ea                	je     c0002d7c <fill_first_frag+0x13>
c0002d92:	eb 0b                	jmp    c0002d9f <fill_first_frag+0x36>
c0002d94:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d98:	31 c0                	xor    eax,eax
c0002d9a:	eb 03                	jmp    c0002d9f <fill_first_frag+0x36>
c0002d9c:	31 c0                	xor    eax,eax
c0002d9e:	c3                   	ret    
c0002d9f:	5b                   	pop    ebx
c0002da0:	5e                   	pop    esi
c0002da1:	5f                   	pop    edi
c0002da2:	c3                   	ret    

c0002da3 <get_fat>:
c0002da3:	83 fa 01             	cmp    edx,0x1
c0002da6:	0f 86 db 01 00 00    	jbe    c0002f87 <get_fat+0x1e4>
c0002dac:	55                   	push   ebp
c0002dad:	b9 01 00 00 00       	mov    ecx,0x1
c0002db2:	57                   	push   edi
c0002db3:	56                   	push   esi
c0002db4:	53                   	push   ebx
c0002db5:	83 ec 1c             	sub    esp,0x1c
c0002db8:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dba:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dbd:	0f 86 cc 01 00 00    	jbe    c0002f8f <get_fat+0x1ec>
c0002dc3:	89 c3                	mov    ebx,eax
c0002dc5:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc7:	89 d6                	mov    esi,edx
c0002dc9:	3c 02                	cmp    al,0x2
c0002dcb:	0f 84 99 00 00 00    	je     c0002e6a <get_fat+0xc7>
c0002dd1:	77 09                	ja     c0002ddc <get_fat+0x39>
c0002dd3:	fe c8                	dec    al
c0002dd5:	74 1a                	je     c0002df1 <get_fat+0x4e>
c0002dd7:	e9 b3 01 00 00       	jmp    c0002f8f <get_fat+0x1ec>
c0002ddc:	3c 03                	cmp    al,0x3
c0002dde:	0f 84 b5 00 00 00    	je     c0002e99 <get_fat+0xf6>
c0002de4:	3c 04                	cmp    al,0x4
c0002de6:	0f 84 e3 00 00 00    	je     c0002ecf <get_fat+0x12c>
c0002dec:	e9 9e 01 00 00       	jmp    c0002f8f <get_fat+0x1ec>
c0002df1:	89 d3                	mov    ebx,edx
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	d1 eb                	shr    ebx,1
c0002df7:	89 f8                	mov    eax,edi
c0002df9:	01 d3                	add    ebx,edx
c0002dfb:	89 da                	mov    edx,ebx
c0002dfd:	c1 ea 09             	shr    edx,0x9
c0002e00:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e03:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e06:	e8 16 f4 ff ff       	call   c0002221 <move_window>
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	74 08                	je     c0002e17 <get_fat+0x74>
c0002e0f:	83 c9 ff             	or     ecx,0xffffffff
c0002e12:	e9 78 01 00 00       	jmp    c0002f8f <get_fat+0x1ec>
c0002e17:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1a:	31 c9                	xor    ecx,ecx
c0002e1c:	89 ea                	mov    edx,ebp
c0002e1e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e24:	c1 ea 09             	shr    edx,0x9
c0002e27:	89 f8                	mov    eax,edi
c0002e29:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e2c:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e33:	e8 e9 f3 ff ff       	call   c0002221 <move_window>
c0002e38:	85 c0                	test   eax,eax
c0002e3a:	75 d3                	jne    c0002e0f <get_fat+0x6c>
c0002e3c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e42:	0f b6 c3             	movzx  eax,bl
c0002e45:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4a:	c1 e3 08             	shl    ebx,0x8
c0002e4d:	09 c3                	or     ebx,eax
c0002e4f:	89 d9                	mov    ecx,ebx
c0002e51:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e57:	83 e6 01             	and    esi,0x1
c0002e5a:	0f 84 2f 01 00 00    	je     c0002f8f <get_fat+0x1ec>
c0002e60:	89 d9                	mov    ecx,ebx
c0002e62:	c1 e9 04             	shr    ecx,0x4
c0002e65:	e9 25 01 00 00       	jmp    c0002f8f <get_fat+0x1ec>
c0002e6a:	c1 ea 08             	shr    edx,0x8
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e77:	e8 a5 f3 ff ff       	call   c0002221 <move_window>
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	75 8f                	jne    c0002e0f <get_fat+0x6c>
c0002e80:	01 f6                	add    esi,esi
c0002e82:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e88:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e8c:	e8 b9 eb ff ff       	call   c0001a4a <ld_word>
c0002e91:	0f b7 c8             	movzx  ecx,ax
c0002e94:	e9 f6 00 00 00       	jmp    c0002f8f <get_fat+0x1ec>
c0002e99:	c1 ea 07             	shr    edx,0x7
c0002e9c:	31 c9                	xor    ecx,ecx
c0002e9e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea1:	89 f8                	mov    eax,edi
c0002ea3:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea6:	e8 76 f3 ff ff       	call   c0002221 <move_window>
c0002eab:	85 c0                	test   eax,eax
c0002ead:	0f 85 5c ff ff ff    	jne    c0002e0f <get_fat+0x6c>
c0002eb3:	c1 e6 02             	shl    esi,0x2
c0002eb6:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebc:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec0:	e8 92 eb ff ff       	call   c0001a57 <ld_dword>
c0002ec5:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002eca:	e9 b4 00 00 00       	jmp    c0002f83 <get_fat+0x1e0>
c0002ecf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed5:	89 d1                	mov    ecx,edx
c0002ed7:	09 c1                	or     ecx,eax
c0002ed9:	74 06                	je     c0002ee1 <get_fat+0x13e>
c0002edb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002edf:	75 0f                	jne    c0002ef0 <get_fat+0x14d>
c0002ee1:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee6:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eea:	0f 85 9f 00 00 00    	jne    c0002f8f <get_fat+0x1ec>
c0002ef0:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef4:	89 f5                	mov    ebp,esi
c0002ef6:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002efb:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002efe:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f01:	80 f9 02             	cmp    cl,0x2
c0002f04:	75 35                	jne    c0002f3b <get_fat+0x198>
c0002f06:	83 c0 ff             	add    eax,0xffffffff
c0002f09:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f0e:	83 d2 ff             	adc    edx,0xffffffff
c0002f11:	31 db                	xor    ebx,ebx
c0002f13:	53                   	push   ebx
c0002f14:	51                   	push   ecx
c0002f15:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f19:	c1 ea 09             	shr    edx,0x9
c0002f1c:	52                   	push   edx
c0002f1d:	50                   	push   eax
c0002f1e:	e8 e9 c5 01 00       	call   c001f50c <__udivdi3>
c0002f23:	83 c4 10             	add    esp,0x10
c0002f26:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2b:	39 c5                	cmp    ebp,eax
c0002f2d:	77 60                	ja     c0002f8f <get_fat+0x1ec>
c0002f2f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f34:	74 59                	je     c0002f8f <get_fat+0x1ec>
c0002f36:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f39:	eb 54                	jmp    c0002f8f <get_fat+0x1ec>
c0002f3b:	80 f9 03             	cmp    cl,0x3
c0002f3e:	75 05                	jne    c0002f45 <get_fat+0x1a2>
c0002f40:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f43:	77 f1                	ja     c0002f36 <get_fat+0x193>
c0002f45:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4a:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f4e:	75 3f                	jne    c0002f8f <get_fat+0x1ec>
c0002f50:	89 f2                	mov    edx,esi
c0002f52:	31 c9                	xor    ecx,ecx
c0002f54:	c1 ea 07             	shr    edx,0x7
c0002f57:	89 f8                	mov    eax,edi
c0002f59:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5f:	e8 bd f2 ff ff       	call   c0002221 <move_window>
c0002f64:	85 c0                	test   eax,eax
c0002f66:	0f 85 a3 fe ff ff    	jne    c0002e0f <get_fat+0x6c>
c0002f6c:	c1 e6 02             	shl    esi,0x2
c0002f6f:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f75:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f79:	e8 d9 ea ff ff       	call   c0001a57 <ld_dword>
c0002f7e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f83:	89 c1                	mov    ecx,eax
c0002f85:	eb 08                	jmp    c0002f8f <get_fat+0x1ec>
c0002f87:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8c:	89 c8                	mov    eax,ecx
c0002f8e:	c3                   	ret    
c0002f8f:	83 c4 1c             	add    esp,0x1c
c0002f92:	89 c8                	mov    eax,ecx
c0002f94:	5b                   	pop    ebx
c0002f95:	5e                   	pop    esi
c0002f96:	5f                   	pop    edi
c0002f97:	5d                   	pop    ebp
c0002f98:	c3                   	ret    

c0002f99 <dir_sdi>:
c0002f99:	55                   	push   ebp
c0002f9a:	57                   	push   edi
c0002f9b:	56                   	push   esi
c0002f9c:	53                   	push   ebx
c0002f9d:	89 c3                	mov    ebx,eax
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	31 c0                	xor    eax,eax
c0002fa6:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa9:	0f 94 c0             	sete   al
c0002fac:	48                   	dec    eax
c0002fad:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb2:	05 00 00 00 10       	add    eax,0x10000000
c0002fb7:	39 d0                	cmp    eax,edx
c0002fb9:	77 0a                	ja     c0002fc5 <dir_sdi+0x2c>
c0002fbb:	b8 02 00 00 00       	mov    eax,0x2
c0002fc0:	e9 c4 00 00 00       	jmp    c0003089 <dir_sdi+0xf0>
c0002fc5:	89 d6                	mov    esi,edx
c0002fc7:	f6 c2 1f             	test   dl,0x1f
c0002fca:	75 ef                	jne    c0002fbb <dir_sdi+0x22>
c0002fcc:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fcf:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd2:	85 c9                	test   ecx,ecx
c0002fd4:	75 2d                	jne    c0003003 <dir_sdi+0x6a>
c0002fd6:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd9:	77 1b                	ja     c0002ff6 <dir_sdi+0x5d>
c0002fdb:	89 f2                	mov    edx,esi
c0002fdd:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe1:	c1 ea 05             	shr    edx,0x5
c0002fe4:	39 c2                	cmp    edx,eax
c0002fe6:	73 d3                	jae    c0002fbb <dir_sdi+0x22>
c0002fe8:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002feb:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff1:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff4:	eb 4b                	jmp    c0003041 <dir_sdi+0xa8>
c0002ff6:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff9:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ffd:	85 c0                	test   eax,eax
c0002fff:	74 da                	je     c0002fdb <dir_sdi+0x42>
c0003001:	89 c1                	mov    ecx,eax
c0003003:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003007:	c1 e5 09             	shl    ebp,0x9
c000300a:	89 ca                	mov    edx,ecx
c000300c:	39 ee                	cmp    esi,ebp
c000300e:	72 1c                	jb     c000302c <dir_sdi+0x93>
c0003010:	89 d8                	mov    eax,ebx
c0003012:	e8 8c fd ff ff       	call   c0002da3 <get_fat>
c0003017:	89 c1                	mov    ecx,eax
c0003019:	83 f8 ff             	cmp    eax,0xffffffff
c000301c:	74 66                	je     c0003084 <dir_sdi+0xeb>
c000301e:	83 f8 01             	cmp    eax,0x1
c0003021:	76 98                	jbe    c0002fbb <dir_sdi+0x22>
c0003023:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003026:	76 93                	jbe    c0002fbb <dir_sdi+0x22>
c0003028:	29 ee                	sub    esi,ebp
c000302a:	eb de                	jmp    c000300a <dir_sdi+0x71>
c000302c:	89 f8                	mov    eax,edi
c000302e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003032:	e8 ac ec ff ff       	call   c0001ce3 <clst2sect>
c0003037:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000303e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003041:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003044:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003047:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304a:	89 d1                	mov    ecx,edx
c000304c:	09 c1                	or     ecx,eax
c000304e:	0f 84 67 ff ff ff    	je     c0002fbb <dir_sdi+0x22>
c0003054:	89 f1                	mov    ecx,esi
c0003056:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000305e:	c1 e9 09             	shr    ecx,0x9
c0003061:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003065:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003069:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000306d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003073:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003076:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000307a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000307d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003080:	31 c0                	xor    eax,eax
c0003082:	eb 05                	jmp    c0003089 <dir_sdi+0xf0>
c0003084:	b8 01 00 00 00       	mov    eax,0x1
c0003089:	83 c4 1c             	add    esp,0x1c
c000308c:	5b                   	pop    ebx
c000308d:	5e                   	pop    esi
c000308e:	5f                   	pop    edi
c000308f:	5d                   	pop    ebp
c0003090:	c3                   	ret    

c0003091 <create_chain>:
c0003091:	55                   	push   ebp
c0003092:	89 c5                	mov    ebp,eax
c0003094:	57                   	push   edi
c0003095:	56                   	push   esi
c0003096:	53                   	push   ebx
c0003097:	83 ec 1c             	sub    esp,0x1c
c000309a:	85 d2                	test   edx,edx
c000309c:	8b 30                	mov    esi,DWORD PTR [eax]
c000309e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a2:	75 0e                	jne    c00030b2 <create_chain+0x21>
c00030a4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a7:	85 ff                	test   edi,edi
c00030a9:	74 39                	je     c00030e4 <create_chain+0x53>
c00030ab:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030ae:	77 39                	ja     c00030e9 <create_chain+0x58>
c00030b0:	eb 32                	jmp    c00030e4 <create_chain+0x53>
c00030b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b6:	e8 e8 fc ff ff       	call   c0002da3 <get_fat>
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 f8 01             	cmp    eax,0x1
c00030c0:	77 0a                	ja     c00030cc <create_chain+0x3b>
c00030c2:	bb 01 00 00 00       	mov    ebx,0x1
c00030c7:	e9 bc 01 00 00       	jmp    c0003288 <create_chain+0x1f7>
c00030cc:	83 f8 ff             	cmp    eax,0xffffffff
c00030cf:	0f 84 60 01 00 00    	je     c0003235 <create_chain+0x1a4>
c00030d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d8:	0f 87 aa 01 00 00    	ja     c0003288 <create_chain+0x1f7>
c00030de:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e2:	eb 05                	jmp    c00030e9 <create_chain+0x58>
c00030e4:	bf 01 00 00 00       	mov    edi,0x1
c00030e9:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030ed:	75 07                	jne    c00030f6 <create_chain+0x65>
c00030ef:	31 db                	xor    ebx,ebx
c00030f1:	e9 92 01 00 00       	jmp    c0003288 <create_chain+0x1f7>
c00030f6:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f9:	75 74                	jne    c000316f <create_chain+0xde>
c00030fb:	b9 01 00 00 00       	mov    ecx,0x1
c0003100:	89 fa                	mov    edx,edi
c0003102:	89 f0                	mov    eax,esi
c0003104:	e8 2d f9 ff ff       	call   c0002a36 <find_bitmap>
c0003109:	89 c3                	mov    ebx,eax
c000310b:	8d 40 ff             	lea    eax,[eax-0x1]
c000310e:	83 f8 fd             	cmp    eax,0xfffffffd
c0003111:	0f 87 71 01 00 00    	ja     c0003288 <create_chain+0x1f7>
c0003117:	83 ec 0c             	sub    esp,0xc
c000311a:	b9 01 00 00 00       	mov    ecx,0x1
c000311f:	89 da                	mov    edx,ebx
c0003121:	89 f0                	mov    eax,esi
c0003123:	6a 01                	push   0x1
c0003125:	e8 bf f9 ff ff       	call   c0002ae9 <change_bitmap>
c000312a:	83 c4 10             	add    esp,0x10
c000312d:	83 f8 02             	cmp    eax,0x2
c0003130:	74 90                	je     c00030c2 <create_chain+0x31>
c0003132:	83 f8 01             	cmp    eax,0x1
c0003135:	0f 84 fa 00 00 00    	je     c0003235 <create_chain+0x1a4>
c000313b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003140:	75 09                	jne    c000314b <create_chain+0xba>
c0003142:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003146:	e9 0e 01 00 00       	jmp    c0003259 <create_chain+0x1c8>
c000314b:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314f:	0f 85 e9 00 00 00    	jne    c000323e <create_chain+0x1ad>
c0003155:	8d 57 01             	lea    edx,[edi+0x1]
c0003158:	39 da                	cmp    edx,ebx
c000315a:	0f 84 f9 00 00 00    	je     c0003259 <create_chain+0x1c8>
c0003160:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003163:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003167:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316a:	e9 cf 00 00 00       	jmp    c000323e <create_chain+0x1ad>
c000316f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003173:	75 41                	jne    c00031b6 <create_chain+0x125>
c0003175:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003178:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317b:	77 05                	ja     c0003182 <create_chain+0xf1>
c000317d:	bb 02 00 00 00       	mov    ebx,0x2
c0003182:	89 da                	mov    edx,ebx
c0003184:	89 e8                	mov    eax,ebp
c0003186:	e8 18 fc ff ff       	call   c0002da3 <get_fat>
c000318b:	83 f8 01             	cmp    eax,0x1
c000318e:	0f 84 a6 00 00 00    	je     c000323a <create_chain+0x1a9>
c0003194:	83 f8 ff             	cmp    eax,0xffffffff
c0003197:	0f 84 9d 00 00 00    	je     c000323a <create_chain+0x1a9>
c000319d:	85 c0                	test   eax,eax
c000319f:	74 11                	je     c00031b2 <create_chain+0x121>
c00031a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a4:	83 f8 01             	cmp    eax,0x1
c00031a7:	76 0d                	jbe    c00031b6 <create_chain+0x125>
c00031a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ac:	76 08                	jbe    c00031b6 <create_chain+0x125>
c00031ae:	89 c7                	mov    edi,eax
c00031b0:	eb 04                	jmp    c00031b6 <create_chain+0x125>
c00031b2:	85 db                	test   ebx,ebx
c00031b4:	75 36                	jne    c00031ec <create_chain+0x15b>
c00031b6:	89 fb                	mov    ebx,edi
c00031b8:	43                   	inc    ebx
c00031b9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031bc:	77 0e                	ja     c00031cc <create_chain+0x13b>
c00031be:	83 ff 01             	cmp    edi,0x1
c00031c1:	0f 86 28 ff ff ff    	jbe    c00030ef <create_chain+0x5e>
c00031c7:	bb 02 00 00 00       	mov    ebx,0x2
c00031cc:	89 da                	mov    edx,ebx
c00031ce:	89 e8                	mov    eax,ebp
c00031d0:	e8 ce fb ff ff       	call   c0002da3 <get_fat>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	74 13                	je     c00031ec <create_chain+0x15b>
c00031d9:	83 f8 01             	cmp    eax,0x1
c00031dc:	74 5c                	je     c000323a <create_chain+0x1a9>
c00031de:	83 f8 ff             	cmp    eax,0xffffffff
c00031e1:	74 57                	je     c000323a <create_chain+0x1a9>
c00031e3:	39 fb                	cmp    ebx,edi
c00031e5:	75 d1                	jne    c00031b8 <create_chain+0x127>
c00031e7:	e9 03 ff ff ff       	jmp    c00030ef <create_chain+0x5e>
c00031ec:	83 c9 ff             	or     ecx,0xffffffff
c00031ef:	89 da                	mov    edx,ebx
c00031f1:	89 f0                	mov    eax,esi
c00031f3:	e8 a6 f9 ff ff       	call   c0002b9e <put_fat>
c00031f8:	85 c0                	test   eax,eax
c00031fa:	75 14                	jne    c0003210 <create_chain+0x17f>
c00031fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003201:	74 0d                	je     c0003210 <create_chain+0x17f>
c0003203:	89 d9                	mov    ecx,ebx
c0003205:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003209:	89 f0                	mov    eax,esi
c000320b:	e8 8e f9 ff ff       	call   c0002b9e <put_fat>
c0003210:	85 c0                	test   eax,eax
c0003212:	75 1a                	jne    c000322e <create_chain+0x19d>
c0003214:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003217:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000321d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003220:	39 d0                	cmp    eax,edx
c0003222:	77 04                	ja     c0003228 <create_chain+0x197>
c0003224:	48                   	dec    eax
c0003225:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 5a                	jmp    c0003288 <create_chain+0x1f7>
c000322e:	48                   	dec    eax
c000322f:	0f 85 8d fe ff ff    	jne    c00030c2 <create_chain+0x31>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	eb 4e                	jmp    c0003288 <create_chain+0x1f7>
c000323a:	89 c3                	mov    ebx,eax
c000323c:	eb 4a                	jmp    c0003288 <create_chain+0x1f7>
c000323e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003242:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003245:	41                   	inc    ecx
c0003246:	39 d9                	cmp    ecx,ebx
c0003248:	75 19                	jne    c0003263 <create_chain+0x1d2>
c000324a:	b9 02 00 00 00       	mov    ecx,0x2
c000324f:	85 d2                	test   edx,edx
c0003251:	74 03                	je     c0003256 <create_chain+0x1c5>
c0003253:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003256:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003259:	85 c0                	test   eax,eax
c000325b:	0f 85 61 fe ff ff    	jne    c00030c2 <create_chain+0x31>
c0003261:	eb b1                	jmp    c0003214 <create_chain+0x183>
c0003263:	85 d2                	test   edx,edx
c0003265:	75 07                	jne    c000326e <create_chain+0x1dd>
c0003267:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000326e:	89 d9                	mov    ecx,ebx
c0003270:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003274:	89 e8                	mov    eax,ebp
c0003276:	e8 b9 fa ff ff       	call   c0002d34 <fill_last_frag>
c000327b:	85 c0                	test   eax,eax
c000327d:	75 af                	jne    c000322e <create_chain+0x19d>
c000327f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003286:	eb 8c                	jmp    c0003214 <create_chain+0x183>
c0003288:	83 c4 1c             	add    esp,0x1c
c000328b:	89 d8                	mov    eax,ebx
c000328d:	5b                   	pop    ebx
c000328e:	5e                   	pop    esi
c000328f:	5f                   	pop    edi
c0003290:	5d                   	pop    ebp
c0003291:	c3                   	ret    

c0003292 <remove_chain>:
c0003292:	55                   	push   ebp
c0003293:	57                   	push   edi
c0003294:	56                   	push   esi
c0003295:	53                   	push   ebx
c0003296:	83 ec 1c             	sub    esp,0x1c
c0003299:	83 fa 01             	cmp    edx,0x1
c000329c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000329e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a2:	77 0a                	ja     c00032ae <remove_chain+0x1c>
c00032a4:	b8 02 00 00 00       	mov    eax,0x2
c00032a9:	e9 24 01 00 00       	jmp    c00033d2 <remove_chain+0x140>
c00032ae:	89 d6                	mov    esi,edx
c00032b0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b3:	76 ef                	jbe    c00032a4 <remove_chain+0x12>
c00032b5:	89 c7                	mov    edi,eax
c00032b7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032bc:	75 06                	jne    c00032c4 <remove_chain+0x32>
c00032be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c2:	eb 54                	jmp    c0003318 <remove_chain+0x86>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x3d>
c00032c9:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032cd:	74 ef                	je     c00032be <remove_chain+0x2c>
c00032cf:	83 c9 ff             	or     ecx,0xffffffff
c00032d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d6:	89 d8                	mov    eax,ebx
c00032d8:	e8 c1 f8 ff ff       	call   c0002b9e <put_fat>
c00032dd:	85 c0                	test   eax,eax
c00032df:	74 dd                	je     c00032be <remove_chain+0x2c>
c00032e1:	e9 ec 00 00 00       	jmp    c00033d2 <remove_chain+0x140>
c00032e6:	83 f8 01             	cmp    eax,0x1
c00032e9:	74 b9                	je     c00032a4 <remove_chain+0x12>
c00032eb:	83 f8 ff             	cmp    eax,0xffffffff
c00032ee:	74 6d                	je     c000335d <remove_chain+0xcb>
c00032f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f3:	75 6f                	jne    c0003364 <remove_chain+0xd2>
c00032f5:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032fb:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032fe:	39 d0                	cmp    eax,edx
c0003300:	73 08                	jae    c000330a <remove_chain+0x78>
c0003302:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003306:	40                   	inc    eax
c0003307:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000330d:	39 e9                	cmp    ecx,ebp
c000330f:	75 64                	jne    c0003375 <remove_chain+0xe3>
c0003311:	89 ee                	mov    esi,ebp
c0003313:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003316:	76 0f                	jbe    c0003327 <remove_chain+0x95>
c0003318:	89 f2                	mov    edx,esi
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 82 fa ff ff       	call   c0002da3 <get_fat>
c0003321:	89 c5                	mov    ebp,eax
c0003323:	85 c0                	test   eax,eax
c0003325:	75 bf                	jne    c00032e6 <remove_chain+0x54>
c0003327:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332a:	0f 85 a0 00 00 00    	jne    c00033d0 <remove_chain+0x13e>
c0003330:	eb 6c                	jmp    c000339e <remove_chain+0x10c>
c0003332:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003335:	84 c0                	test   al,al
c0003337:	75 7d                	jne    c00033b6 <remove_chain+0x124>
c0003339:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003340:	0f 84 86 00 00 00    	je     c00033cc <remove_chain+0x13a>
c0003346:	89 da                	mov    edx,ebx
c0003348:	89 f8                	mov    eax,edi
c000334a:	e8 54 fa ff ff       	call   c0002da3 <get_fat>
c000334f:	83 f8 01             	cmp    eax,0x1
c0003352:	0f 86 4c ff ff ff    	jbe    c00032a4 <remove_chain+0x12>
c0003358:	83 f8 ff             	cmp    eax,0xffffffff
c000335b:	75 4e                	jne    c00033ab <remove_chain+0x119>
c000335d:	b8 01 00 00 00       	mov    eax,0x1
c0003362:	eb 6e                	jmp    c00033d2 <remove_chain+0x140>
c0003364:	31 c9                	xor    ecx,ecx
c0003366:	89 f2                	mov    edx,esi
c0003368:	89 d8                	mov    eax,ebx
c000336a:	e8 2f f8 ff ff       	call   c0002b9e <put_fat>
c000336f:	85 c0                	test   eax,eax
c0003371:	74 82                	je     c00032f5 <remove_chain+0x63>
c0003373:	eb 5d                	jmp    c00033d2 <remove_chain+0x140>
c0003375:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003378:	75 1b                	jne    c0003395 <remove_chain+0x103>
c000337a:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000337e:	83 ec 0c             	sub    esp,0xc
c0003381:	6a 00                	push   0x0
c0003383:	89 d8                	mov    eax,ebx
c0003385:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003389:	e8 5b f7 ff ff       	call   c0002ae9 <change_bitmap>
c000338e:	83 c4 10             	add    esp,0x10
c0003391:	85 c0                	test   eax,eax
c0003393:	75 3d                	jne    c00033d2 <remove_chain+0x140>
c0003395:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003399:	e9 73 ff ff ff       	jmp    c0003311 <remove_chain+0x7f>
c000339e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a3:	75 8d                	jne    c0003332 <remove_chain+0xa0>
c00033a5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a9:	eb 25                	jmp    c00033d0 <remove_chain+0x13e>
c00033ab:	8d 53 01             	lea    edx,[ebx+0x1]
c00033ae:	89 c3                	mov    ebx,eax
c00033b0:	39 c2                	cmp    edx,eax
c00033b2:	74 88                	je     c000333c <remove_chain+0xaa>
c00033b4:	eb 1a                	jmp    c00033d0 <remove_chain+0x13e>
c00033b6:	3c 03                	cmp    al,0x3
c00033b8:	75 16                	jne    c00033d0 <remove_chain+0x13e>
c00033ba:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033bd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c1:	77 0d                	ja     c00033d0 <remove_chain+0x13e>
c00033c3:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c6:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ca:	72 04                	jb     c00033d0 <remove_chain+0x13e>
c00033cc:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d0:	31 c0                	xor    eax,eax
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    

c00033da <dir_clear>:
c00033da:	55                   	push   ebp
c00033db:	57                   	push   edi
c00033dc:	56                   	push   esi
c00033dd:	89 c6                	mov    esi,eax
c00033df:	53                   	push   ebx
c00033e0:	83 ec 1c             	sub    esp,0x1c
c00033e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e7:	e8 a1 ed ff ff       	call   c000218d <sync_window>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	0f 85 de 00 00 00    	jne    c00034d2 <dir_clear+0xf8>
c00033f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f8:	89 f0                	mov    eax,esi
c00033fa:	e8 e4 e8 ff ff       	call   c0001ce3 <clst2sect>
c00033ff:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000340a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000340d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003410:	b9 00 02 00 00       	mov    ecx,0x200
c0003415:	31 d2                	xor    edx,edx
c0003417:	89 e8                	mov    eax,ebp
c0003419:	e8 c0 e6 ff ff       	call   c0001ade <mem_set>
c000341e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003422:	c1 e3 09             	shl    ebx,0x9
c0003425:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342b:	76 1f                	jbe    c000344c <dir_clear+0x72>
c000342d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003432:	eb 18                	jmp    c000344c <dir_clear+0x72>
c0003434:	83 ec 0c             	sub    esp,0xc
c0003437:	53                   	push   ebx
c0003438:	e8 f3 4d 00 00       	call   c0008230 <ff_memalloc>
c000343d:	83 c4 10             	add    esp,0x10
c0003440:	89 c7                	mov    edi,eax
c0003442:	85 c0                	test   eax,eax
c0003444:	0f 85 8f 00 00 00    	jne    c00034d9 <dir_clear+0xff>
c000344a:	d1 eb                	shr    ebx,1
c000344c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003452:	77 e0                	ja     c0003434 <dir_clear+0x5a>
c0003454:	31 db                	xor    ebx,ebx
c0003456:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345a:	39 d8                	cmp    eax,ebx
c000345c:	76 66                	jbe    c00034c4 <dir_clear+0xea>
c000345e:	83 ec 0c             	sub    esp,0xc
c0003461:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003465:	6a 01                	push   0x1
c0003467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346f:	55                   	push   ebp
c0003470:	50                   	push   eax
c0003471:	e8 9f e5 ff ff       	call   c0001a15 <disk_write>
c0003476:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347b:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003480:	83 c4 20             	add    esp,0x20
c0003483:	85 c0                	test   eax,eax
c0003485:	75 3d                	jne    c00034c4 <dir_clear+0xea>
c0003487:	43                   	inc    ebx
c0003488:	eb cc                	jmp    c0003456 <dir_clear+0x7c>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	89 d8                	mov    eax,ebx
c000348f:	31 d2                	xor    edx,edx
c0003491:	55                   	push   ebp
c0003492:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003496:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349a:	52                   	push   edx
c000349b:	50                   	push   eax
c000349c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a0:	57                   	push   edi
c00034a1:	50                   	push   eax
c00034a2:	e8 6e e5 ff ff       	call   c0001a15 <disk_write>
c00034a7:	83 c4 20             	add    esp,0x20
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 0a                	jne    c00034b8 <dir_clear+0xde>
c00034ae:	01 eb                	add    ebx,ebp
c00034b0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b4:	39 d8                	cmp    eax,ebx
c00034b6:	77 d2                	ja     c000348a <dir_clear+0xb0>
c00034b8:	83 ec 0c             	sub    esp,0xc
c00034bb:	57                   	push   edi
c00034bc:	e8 85 4d 00 00       	call   c0008246 <ff_memfree>
c00034c1:	83 c4 10             	add    esp,0x10
c00034c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c8:	39 d8                	cmp    eax,ebx
c00034ca:	0f 95 c0             	setne  al
c00034cd:	0f b6 c0             	movzx  eax,al
c00034d0:	eb 19                	jmp    c00034eb <dir_clear+0x111>
c00034d2:	b8 01 00 00 00       	mov    eax,0x1
c00034d7:	eb 12                	jmp    c00034eb <dir_clear+0x111>
c00034d9:	89 d9                	mov    ecx,ebx
c00034db:	31 d2                	xor    edx,edx
c00034dd:	c1 eb 09             	shr    ebx,0x9
c00034e0:	e8 f9 e5 ff ff       	call   c0001ade <mem_set>
c00034e5:	89 dd                	mov    ebp,ebx
c00034e7:	31 db                	xor    ebx,ebx
c00034e9:	eb c5                	jmp    c00034b0 <dir_clear+0xd6>
c00034eb:	83 c4 1c             	add    esp,0x1c
c00034ee:	5b                   	pop    ebx
c00034ef:	5e                   	pop    esi
c00034f0:	5f                   	pop    edi
c00034f1:	5d                   	pop    ebp
c00034f2:	c3                   	ret    

c00034f3 <dir_next>:
c00034f3:	55                   	push   ebp
c00034f4:	57                   	push   edi
c00034f5:	56                   	push   esi
c00034f6:	53                   	push   ebx
c00034f7:	89 c3                	mov    ebx,eax
c00034f9:	83 ec 1c             	sub    esp,0x1c
c00034fc:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003505:	8d 78 20             	lea    edi,[eax+0x20]
c0003508:	31 c0                	xor    eax,eax
c000350a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000350e:	0f 94 c0             	sete   al
c0003511:	48                   	dec    eax
c0003512:	25 00 00 20 f0       	and    eax,0xf0200000
c0003517:	05 00 00 00 10       	add    eax,0x10000000
c000351c:	39 f8                	cmp    eax,edi
c000351e:	77 0e                	ja     c000352e <dir_next+0x3b>
c0003520:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003527:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000352e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003531:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003534:	89 ce                	mov    esi,ecx
c0003536:	b8 04 00 00 00       	mov    eax,0x4
c000353b:	09 d6                	or     esi,edx
c000353d:	0f 84 da 00 00 00    	je     c000361d <dir_next+0x12a>
c0003543:	89 f8                	mov    eax,edi
c0003545:	25 ff 01 00 00       	and    eax,0x1ff
c000354a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000354e:	0f 85 b9 00 00 00    	jne    c000360d <dir_next+0x11a>
c0003554:	83 c2 01             	add    edx,0x1
c0003557:	83 d1 00             	adc    ecx,0x0
c000355a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000355d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003560:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003563:	85 d2                	test   edx,edx
c0003565:	75 29                	jne    c0003590 <dir_next+0x9d>
c0003567:	89 fa                	mov    edx,edi
c0003569:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000356d:	c1 ea 05             	shr    edx,0x5
c0003570:	39 c2                	cmp    edx,eax
c0003572:	0f 82 95 00 00 00    	jb     c000360d <dir_next+0x11a>
c0003578:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003586:	b8 04 00 00 00       	mov    eax,0x4
c000358b:	e9 8d 00 00 00       	jmp    c000361d <dir_next+0x12a>
c0003590:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003594:	89 f9                	mov    ecx,edi
c0003596:	48                   	dec    eax
c0003597:	c1 e9 09             	shr    ecx,0x9
c000359a:	85 c8                	test   eax,ecx
c000359c:	75 6f                	jne    c000360d <dir_next+0x11a>
c000359e:	89 d8                	mov    eax,ebx
c00035a0:	e8 fe f7 ff ff       	call   c0002da3 <get_fat>
c00035a5:	89 c6                	mov    esi,eax
c00035a7:	83 f8 01             	cmp    eax,0x1
c00035aa:	77 07                	ja     c00035b3 <dir_next+0xc0>
c00035ac:	b8 02 00 00 00       	mov    eax,0x2
c00035b1:	eb 6a                	jmp    c000361d <dir_next+0x12a>
c00035b3:	83 f8 ff             	cmp    eax,0xffffffff
c00035b6:	75 07                	jne    c00035bf <dir_next+0xcc>
c00035b8:	b8 01 00 00 00       	mov    eax,0x1
c00035bd:	eb 5e                	jmp    c000361d <dir_next+0x12a>
c00035bf:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c2:	77 37                	ja     c00035fb <dir_next+0x108>
c00035c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c9:	74 ad                	je     c0003578 <dir_next+0x85>
c00035cb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035ce:	89 d8                	mov    eax,ebx
c00035d0:	e8 bc fa ff ff       	call   c0003091 <create_chain>
c00035d5:	89 c6                	mov    esi,eax
c00035d7:	b8 07 00 00 00       	mov    eax,0x7
c00035dc:	85 f6                	test   esi,esi
c00035de:	74 3d                	je     c000361d <dir_next+0x12a>
c00035e0:	83 fe 01             	cmp    esi,0x1
c00035e3:	74 c7                	je     c00035ac <dir_next+0xb9>
c00035e5:	83 fe ff             	cmp    esi,0xffffffff
c00035e8:	74 ce                	je     c00035b8 <dir_next+0xc5>
c00035ea:	89 f2                	mov    edx,esi
c00035ec:	89 e8                	mov    eax,ebp
c00035ee:	e8 e7 fd ff ff       	call   c00033da <dir_clear>
c00035f3:	85 c0                	test   eax,eax
c00035f5:	75 c1                	jne    c00035b8 <dir_next+0xc5>
c00035f7:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035fe:	89 f2                	mov    edx,esi
c0003600:	89 e8                	mov    eax,ebp
c0003602:	e8 dc e6 ff ff       	call   c0001ce3 <clst2sect>
c0003607:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000360d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003611:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003614:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003618:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361b:	31 c0                	xor    eax,eax
c000361d:	83 c4 1c             	add    esp,0x1c
c0003620:	5b                   	pop    ebx
c0003621:	5e                   	pop    esi
c0003622:	5f                   	pop    edi
c0003623:	5d                   	pop    ebp
c0003624:	c3                   	ret    

c0003625 <load_xdir>:
c0003625:	55                   	push   ebp
c0003626:	57                   	push   edi
c0003627:	56                   	push   esi
c0003628:	89 c6                	mov    esi,eax
c000362a:	53                   	push   ebx
c000362b:	83 ec 1c             	sub    esp,0x1c
c000362e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003630:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003633:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003636:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003639:	e8 e3 eb ff ff       	call   c0002221 <move_window>
c000363e:	89 c3                	mov    ebx,eax
c0003640:	85 c0                	test   eax,eax
c0003642:	0f 85 0c 01 00 00    	jne    c0003754 <load_xdir+0x12f>
c0003648:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000364e:	0f 85 fb 00 00 00    	jne    c000374f <load_xdir+0x12a>
c0003654:	89 f8                	mov    eax,edi
c0003656:	b9 20 00 00 00       	mov    ecx,0x20
c000365b:	e8 69 e4 ff ff       	call   c0001ac9 <mem_cpy>
c0003660:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003664:	40                   	inc    eax
c0003665:	c1 e0 05             	shl    eax,0x5
c0003668:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366c:	83 e8 60             	sub    eax,0x60
c000366f:	3d 00 02 00 00       	cmp    eax,0x200
c0003674:	0f 87 d5 00 00 00    	ja     c000374f <load_xdir+0x12a>
c000367a:	31 d2                	xor    edx,edx
c000367c:	89 f0                	mov    eax,esi
c000367e:	e8 70 fe ff ff       	call   c00034f3 <dir_next>
c0003683:	89 c3                	mov    ebx,eax
c0003685:	83 f8 04             	cmp    eax,0x4
c0003688:	0f 84 c1 00 00 00    	je     c000374f <load_xdir+0x12a>
c000368e:	85 c0                	test   eax,eax
c0003690:	0f 85 be 00 00 00    	jne    c0003754 <load_xdir+0x12f>
c0003696:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003699:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369c:	8b 06                	mov    eax,DWORD PTR [esi]
c000369e:	e8 7e eb ff ff       	call   c0002221 <move_window>
c00036a3:	89 c3                	mov    ebx,eax
c00036a5:	85 c0                	test   eax,eax
c00036a7:	0f 85 a7 00 00 00    	jne    c0003754 <load_xdir+0x12f>
c00036ad:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b3:	0f 85 96 00 00 00    	jne    c000374f <load_xdir+0x12a>
c00036b9:	8d 47 20             	lea    eax,[edi+0x20]
c00036bc:	b9 20 00 00 00       	mov    ecx,0x20
c00036c1:	e8 03 e4 ff ff       	call   c0001ac9 <mem_cpy>
c00036c6:	31 d2                	xor    edx,edx
c00036c8:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036cc:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d1:	83 c0 2c             	add    eax,0x2c
c00036d4:	f7 f1                	div    ecx
c00036d6:	c1 e0 05             	shl    eax,0x5
c00036d9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036dd:	77 70                	ja     c000374f <load_xdir+0x12a>
c00036df:	bd 40 00 00 00       	mov    ebp,0x40
c00036e4:	31 d2                	xor    edx,edx
c00036e6:	89 f0                	mov    eax,esi
c00036e8:	e8 06 fe ff ff       	call   c00034f3 <dir_next>
c00036ed:	89 c3                	mov    ebx,eax
c00036ef:	83 f8 04             	cmp    eax,0x4
c00036f2:	74 5b                	je     c000374f <load_xdir+0x12a>
c00036f4:	85 c0                	test   eax,eax
c00036f6:	75 5c                	jne    c0003754 <load_xdir+0x12f>
c00036f8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0003700:	e8 1c eb ff ff       	call   c0002221 <move_window>
c0003705:	89 c3                	mov    ebx,eax
c0003707:	85 c0                	test   eax,eax
c0003709:	75 49                	jne    c0003754 <load_xdir+0x12f>
c000370b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000370e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003711:	75 3c                	jne    c000374f <load_xdir+0x12a>
c0003713:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003719:	77 0d                	ja     c0003728 <load_xdir+0x103>
c000371b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000371e:	b9 20 00 00 00       	mov    ecx,0x20
c0003723:	e8 a1 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003728:	83 c5 20             	add    ebp,0x20
c000372b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372f:	77 b3                	ja     c00036e4 <load_xdir+0xbf>
c0003731:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003737:	77 1b                	ja     c0003754 <load_xdir+0x12f>
c0003739:	89 f8                	mov    eax,edi
c000373b:	e8 d8 e7 ff ff       	call   c0001f18 <xdir_sum>
c0003740:	89 c1                	mov    ecx,eax
c0003742:	8d 47 02             	lea    eax,[edi+0x2]
c0003745:	e8 00 e3 ff ff       	call   c0001a4a <ld_word>
c000374a:	66 39 c1             	cmp    cx,ax
c000374d:	74 05                	je     c0003754 <load_xdir+0x12f>
c000374f:	bb 02 00 00 00       	mov    ebx,0x2
c0003754:	83 c4 1c             	add    esp,0x1c
c0003757:	89 d8                	mov    eax,ebx
c0003759:	5b                   	pop    ebx
c000375a:	5e                   	pop    esi
c000375b:	5f                   	pop    edi
c000375c:	5d                   	pop    ebp
c000375d:	c3                   	ret    

c000375e <load_obj_xdir>:
c000375e:	53                   	push   ebx
c000375f:	89 c3                	mov    ebx,eax
c0003761:	83 ec 08             	sub    esp,0x8
c0003764:	8b 02                	mov    eax,DWORD PTR [edx]
c0003766:	89 03                	mov    DWORD PTR [ebx],eax
c0003768:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000376e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003771:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003774:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003777:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000377e:	30 c0                	xor    al,al
c0003780:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003787:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378a:	89 d8                	mov    eax,ebx
c000378c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378f:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003792:	e8 02 f8 ff ff       	call   c0002f99 <dir_sdi>
c0003797:	85 c0                	test   eax,eax
c0003799:	75 0b                	jne    c00037a6 <load_obj_xdir+0x48>
c000379b:	83 c4 08             	add    esp,0x8
c000379e:	89 d8                	mov    eax,ebx
c00037a0:	5b                   	pop    ebx
c00037a1:	e9 7f fe ff ff       	jmp    c0003625 <load_xdir>
c00037a6:	83 c4 08             	add    esp,0x8
c00037a9:	5b                   	pop    ebx
c00037aa:	c3                   	ret    

c00037ab <dir_read>:
c00037ab:	55                   	push   ebp
c00037ac:	bd 04 00 00 00       	mov    ebp,0x4
c00037b1:	57                   	push   edi
c00037b2:	56                   	push   esi
c00037b3:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b8:	53                   	push   ebx
c00037b9:	89 c3                	mov    ebx,eax
c00037bb:	83 ec 1c             	sub    esp,0x1c
c00037be:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c4:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037cc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037cf:	89 c8                	mov    eax,ecx
c00037d1:	09 d0                	or     eax,edx
c00037d3:	0f 84 25 01 00 00    	je     c00038fe <dir_read+0x153>
c00037d9:	89 f8                	mov    eax,edi
c00037db:	e8 41 ea ff ff       	call   c0002221 <move_window>
c00037e0:	89 c5                	mov    ebp,eax
c00037e2:	85 c0                	test   eax,eax
c00037e4:	0f 85 23 01 00 00    	jne    c000390d <dir_read+0x162>
c00037ea:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ef:	84 c9                	test   cl,cl
c00037f1:	0f 84 11 01 00 00    	je     c0003908 <dir_read+0x15d>
c00037f7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fa:	75 48                	jne    c0003844 <dir_read+0x99>
c00037fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003801:	74 10                	je     c0003813 <dir_read+0x68>
c0003803:	80 f9 83             	cmp    cl,0x83
c0003806:	0f 85 dd 00 00 00    	jne    c00038e9 <dir_read+0x13e>
c000380c:	31 ed                	xor    ebp,ebp
c000380e:	e9 08 01 00 00       	jmp    c000391b <dir_read+0x170>
c0003813:	80 f9 85             	cmp    cl,0x85
c0003816:	0f 85 cd 00 00 00    	jne    c00038e9 <dir_read+0x13e>
c000381c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003822:	89 d8                	mov    eax,ebx
c0003824:	e8 fc fd ff ff       	call   c0003625 <load_xdir>
c0003829:	89 c5                	mov    ebp,eax
c000382b:	85 c0                	test   eax,eax
c000382d:	0f 85 da 00 00 00    	jne    c000390d <dir_read+0x162>
c0003833:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003836:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003839:	83 e0 3f             	and    eax,0x3f
c000383c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383f:	e9 d7 00 00 00       	jmp    c000391b <dir_read+0x170>
c0003844:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003847:	83 e0 3f             	and    eax,0x3f
c000384a:	80 f9 e5             	cmp    cl,0xe5
c000384d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003851:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003854:	0f 84 8a 00 00 00    	je     c00038e4 <dir_read+0x139>
c000385a:	80 f9 2e             	cmp    cl,0x2e
c000385d:	0f 84 81 00 00 00    	je     c00038e4 <dir_read+0x139>
c0003863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003867:	83 e0 1f             	and    eax,0x1f
c000386a:	83 f8 08             	cmp    eax,0x8
c000386d:	0f 94 c0             	sete   al
c0003870:	0f b6 c0             	movzx  eax,al
c0003873:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003877:	75 6b                	jne    c00038e4 <dir_read+0x139>
c0003879:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000387e:	75 44                	jne    c00038c4 <dir_read+0x119>
c0003880:	f6 c1 40             	test   cl,0x40
c0003883:	74 12                	je     c0003897 <dir_read+0xec>
c0003885:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003888:	83 e1 bf             	and    ecx,0xffffffbf
c000388b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003892:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003895:	eb 06                	jmp    c000389d <dir_read+0xf2>
c0003897:	89 f0                	mov    eax,esi
c0003899:	38 c8                	cmp    al,cl
c000389b:	75 47                	jne    c00038e4 <dir_read+0x139>
c000389d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a1:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a9:	75 3e                	jne    c00038e9 <dir_read+0x13e>
c00038ab:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038ae:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b2:	e8 95 e4 ff ff       	call   c0001d4c <pick_lfn>
c00038b7:	85 c0                	test   eax,eax
c00038b9:	74 2e                	je     c00038e9 <dir_read+0x13e>
c00038bb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038bf:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c2:	eb 25                	jmp    c00038e9 <dir_read+0x13e>
c00038c4:	89 f0                	mov    eax,esi
c00038c6:	84 c0                	test   al,al
c00038c8:	75 11                	jne    c00038db <dir_read+0x130>
c00038ca:	89 d0                	mov    eax,edx
c00038cc:	e8 35 e6 ff ff       	call   c0001f06 <sum_sfn>
c00038d1:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d5:	0f 84 31 ff ff ff    	je     c000380c <dir_read+0x61>
c00038db:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e2:	eb 37                	jmp    c000391b <dir_read+0x170>
c00038e4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e9:	31 d2                	xor    edx,edx
c00038eb:	89 d8                	mov    eax,ebx
c00038ed:	e8 01 fc ff ff       	call   c00034f3 <dir_next>
c00038f2:	89 c5                	mov    ebp,eax
c00038f4:	85 c0                	test   eax,eax
c00038f6:	0f 84 cd fe ff ff    	je     c00037c9 <dir_read+0x1e>
c00038fc:	eb 0f                	jmp    c000390d <dir_read+0x162>
c00038fe:	85 ed                	test   ebp,ebp
c0003900:	0f 84 06 ff ff ff    	je     c000380c <dir_read+0x61>
c0003906:	eb 05                	jmp    c000390d <dir_read+0x162>
c0003908:	bd 04 00 00 00       	mov    ebp,0x4
c000390d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003914:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391b:	83 c4 1c             	add    esp,0x1c
c000391e:	89 e8                	mov    eax,ebp
c0003920:	5b                   	pop    ebx
c0003921:	5e                   	pop    esi
c0003922:	5f                   	pop    edi
c0003923:	5d                   	pop    ebp
c0003924:	c3                   	ret    

c0003925 <dir_alloc>:
c0003925:	55                   	push   ebp
c0003926:	89 d5                	mov    ebp,edx
c0003928:	57                   	push   edi
c0003929:	31 d2                	xor    edx,edx
c000392b:	56                   	push   esi
c000392c:	53                   	push   ebx
c000392d:	89 c3                	mov    ebx,eax
c000392f:	83 ec 0c             	sub    esp,0xc
c0003932:	8b 38                	mov    edi,DWORD PTR [eax]
c0003934:	e8 60 f6 ff ff       	call   c0002f99 <dir_sdi>
c0003939:	85 c0                	test   eax,eax
c000393b:	75 4e                	jne    c000398b <dir_alloc+0x66>
c000393d:	31 f6                	xor    esi,esi
c000393f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003942:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003945:	89 f8                	mov    eax,edi
c0003947:	e8 d5 e8 ff ff       	call   c0002221 <move_window>
c000394c:	85 c0                	test   eax,eax
c000394e:	75 3b                	jne    c000398b <dir_alloc+0x66>
c0003950:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003953:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003956:	8a 12                	mov    dl,BYTE PTR [edx]
c0003958:	75 07                	jne    c0003961 <dir_alloc+0x3c>
c000395a:	f7 d2                	not    edx
c000395c:	c0 ea 07             	shr    dl,0x7
c000395f:	eb 0d                	jmp    c000396e <dir_alloc+0x49>
c0003961:	80 fa e5             	cmp    dl,0xe5
c0003964:	0f 94 c1             	sete   cl
c0003967:	84 d2                	test   dl,dl
c0003969:	0f 94 c2             	sete   dl
c000396c:	09 ca                	or     edx,ecx
c000396e:	84 d2                	test   dl,dl
c0003970:	74 07                	je     c0003979 <dir_alloc+0x54>
c0003972:	46                   	inc    esi
c0003973:	39 ee                	cmp    esi,ebp
c0003975:	75 04                	jne    c000397b <dir_alloc+0x56>
c0003977:	eb 1c                	jmp    c0003995 <dir_alloc+0x70>
c0003979:	31 f6                	xor    esi,esi
c000397b:	ba 01 00 00 00       	mov    edx,0x1
c0003980:	89 d8                	mov    eax,ebx
c0003982:	e8 6c fb ff ff       	call   c00034f3 <dir_next>
c0003987:	85 c0                	test   eax,eax
c0003989:	74 b4                	je     c000393f <dir_alloc+0x1a>
c000398b:	83 f8 04             	cmp    eax,0x4
c000398e:	75 05                	jne    c0003995 <dir_alloc+0x70>
c0003990:	b8 07 00 00 00       	mov    eax,0x7
c0003995:	83 c4 0c             	add    esp,0xc
c0003998:	5b                   	pop    ebx
c0003999:	5e                   	pop    esi
c000399a:	5f                   	pop    edi
c000399b:	5d                   	pop    ebp
c000399c:	c3                   	ret    

c000399d <store_xdir>:
c000399d:	55                   	push   ebp
c000399e:	57                   	push   edi
c000399f:	89 c7                	mov    edi,eax
c00039a1:	56                   	push   esi
c00039a2:	53                   	push   ebx
c00039a3:	83 ec 0c             	sub    esp,0xc
c00039a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039ab:	89 e8                	mov    eax,ebp
c00039ad:	e8 66 e5 ff ff       	call   c0001f18 <xdir_sum>
c00039b2:	0f b7 d0             	movzx  edx,ax
c00039b5:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b8:	e8 ff e0 ff ff       	call   c0001abc <st_word>
c00039bd:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c0:	89 f8                	mov    eax,edi
c00039c2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c6:	e8 ce f5 ff ff       	call   c0002f99 <dir_sdi>
c00039cb:	89 c6                	mov    esi,eax
c00039cd:	85 f6                	test   esi,esi
c00039cf:	75 3d                	jne    c0003a0e <store_xdir+0x71>
c00039d1:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d4:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d9:	e8 43 e8 ff ff       	call   c0002221 <move_window>
c00039de:	89 c6                	mov    esi,eax
c00039e0:	85 c0                	test   eax,eax
c00039e2:	75 2a                	jne    c0003a0e <store_xdir+0x71>
c00039e4:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e7:	b9 20 00 00 00       	mov    ecx,0x20
c00039ec:	89 ea                	mov    edx,ebp
c00039ee:	e8 d6 e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039f3:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f5:	85 db                	test   ebx,ebx
c00039f7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fb:	74 11                	je     c0003a0e <store_xdir+0x71>
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 f8                	mov    eax,edi
c0003a01:	e8 ed fa ff ff       	call   c00034f3 <dir_next>
c0003a06:	83 c5 20             	add    ebp,0x20
c0003a09:	89 c6                	mov    esi,eax
c0003a0b:	4b                   	dec    ebx
c0003a0c:	eb bf                	jmp    c00039cd <store_xdir+0x30>
c0003a0e:	89 f0                	mov    eax,esi
c0003a10:	83 fe 02             	cmp    esi,0x2
c0003a13:	76 05                	jbe    c0003a1a <store_xdir+0x7d>
c0003a15:	b8 02 00 00 00       	mov    eax,0x2
c0003a1a:	83 c4 0c             	add    esp,0xc
c0003a1d:	5b                   	pop    ebx
c0003a1e:	5e                   	pop    esi
c0003a1f:	5f                   	pop    edi
c0003a20:	5d                   	pop    ebp
c0003a21:	c3                   	ret    

c0003a22 <dir_remove>:
c0003a22:	57                   	push   edi
c0003a23:	56                   	push   esi
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2f:	83 fa ff             	cmp    edx,0xffffffff
c0003a32:	74 09                	je     c0003a3d <dir_remove+0x1b>
c0003a34:	e8 60 f5 ff ff       	call   c0002f99 <dir_sdi>
c0003a39:	85 c0                	test   eax,eax
c0003a3b:	75 41                	jne    c0003a7e <dir_remove+0x5c>
c0003a3d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a40:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a43:	89 f0                	mov    eax,esi
c0003a45:	e8 d7 e7 ff ff       	call   c0002221 <move_window>
c0003a4a:	85 c0                	test   eax,eax
c0003a4c:	75 26                	jne    c0003a74 <dir_remove+0x52>
c0003a4e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a51:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a54:	75 05                	jne    c0003a5b <dir_remove+0x39>
c0003a56:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a59:	eb 03                	jmp    c0003a5e <dir_remove+0x3c>
c0003a5b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a62:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a65:	73 17                	jae    c0003a7e <dir_remove+0x5c>
c0003a67:	31 d2                	xor    edx,edx
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 83 fa ff ff       	call   c00034f3 <dir_next>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	74 c9                	je     c0003a3d <dir_remove+0x1b>
c0003a74:	83 f8 04             	cmp    eax,0x4
c0003a77:	75 05                	jne    c0003a7e <dir_remove+0x5c>
c0003a79:	b8 02 00 00 00       	mov    eax,0x2
c0003a7e:	5b                   	pop    ebx
c0003a7f:	5e                   	pop    esi
c0003a80:	5f                   	pop    edi
c0003a81:	c3                   	ret    

c0003a82 <create_name>:
c0003a82:	55                   	push   ebp
c0003a83:	89 d5                	mov    ebp,edx
c0003a85:	57                   	push   edi
c0003a86:	89 c7                	mov    edi,eax
c0003a88:	56                   	push   esi
c0003a89:	31 f6                	xor    esi,esi
c0003a8b:	53                   	push   ebx
c0003a8c:	83 ec 3c             	sub    esp,0x3c
c0003a8f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a95:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a9e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa2:	e8 7d e0 ff ff       	call   c0001b24 <tchar2uni>
c0003aa7:	89 c3                	mov    ebx,eax
c0003aa9:	83 f8 ff             	cmp    eax,0xffffffff
c0003aac:	75 0a                	jne    c0003ab8 <create_name+0x36>
c0003aae:	b8 06 00 00 00       	mov    eax,0x6
c0003ab3:	e9 83 02 00 00       	jmp    c0003d3b <create_name+0x2b9>
c0003ab8:	3d ff ff 00 00       	cmp    eax,0xffff
c0003abd:	76 0c                	jbe    c0003acb <create_name+0x49>
c0003abf:	c1 e8 10             	shr    eax,0x10
c0003ac2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003aca:	46                   	inc    esi
c0003acb:	66 83 fb 1f          	cmp    bx,0x1f
c0003acf:	89 d8                	mov    eax,ebx
c0003ad1:	76 36                	jbe    c0003b09 <create_name+0x87>
c0003ad3:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad7:	74 30                	je     c0003b09 <create_name+0x87>
c0003ad9:	66 83 fb 5c          	cmp    bx,0x5c
c0003add:	74 39                	je     c0003b18 <create_name+0x96>
c0003adf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae3:	77 11                	ja     c0003af6 <create_name+0x74>
c0003ae5:	0f b7 d3             	movzx  edx,bx
c0003ae8:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003aed:	e8 1a e0 ff ff       	call   c0001b0c <chk_chr>
c0003af2:	85 c0                	test   eax,eax
c0003af4:	75 b8                	jne    c0003aae <create_name+0x2c>
c0003af6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003afc:	77 b0                	ja     c0003aae <create_name+0x2c>
c0003afe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b02:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b06:	46                   	inc    esi
c0003b07:	eb 95                	jmp    c0003a9e <create_name+0x1c>
c0003b09:	66 83 f8 1f          	cmp    ax,0x1f
c0003b0d:	b3 04                	mov    bl,0x4
c0003b0f:	76 19                	jbe    c0003b2a <create_name+0xa8>
c0003b11:	eb 05                	jmp    c0003b18 <create_name+0x96>
c0003b13:	40                   	inc    eax
c0003b14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1e:	80 fa 2f             	cmp    dl,0x2f
c0003b21:	74 f0                	je     c0003b13 <create_name+0x91>
c0003b23:	80 fa 5c             	cmp    dl,0x5c
c0003b26:	74 eb                	je     c0003b13 <create_name+0x91>
c0003b28:	31 db                	xor    ebx,ebx
c0003b2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b31:	85 f6                	test   esi,esi
c0003b33:	74 18                	je     c0003b4d <create_name+0xcb>
c0003b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b39:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b3e:	66 83 f8 20          	cmp    ax,0x20
c0003b42:	74 06                	je     c0003b4a <create_name+0xc8>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 03                	jne    c0003b4d <create_name+0xcb>
c0003b4a:	4e                   	dec    esi
c0003b4b:	eb e4                	jmp    c0003b31 <create_name+0xaf>
c0003b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b51:	31 ed                	xor    ebp,ebp
c0003b53:	85 f6                	test   esi,esi
c0003b55:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5b:	0f 84 4d ff ff ff    	je     c0003aae <create_name+0x2c>
c0003b61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b65:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b68:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6c:	66 83 f8 20          	cmp    ax,0x20
c0003b70:	75 04                	jne    c0003b76 <create_name+0xf4>
c0003b72:	89 d5                	mov    ebp,edx
c0003b74:	eb eb                	jmp    c0003b61 <create_name+0xdf>
c0003b76:	85 ed                	test   ebp,ebp
c0003b78:	75 06                	jne    c0003b80 <create_name+0xfe>
c0003b7a:	66 83 f8 2e          	cmp    ax,0x2e
c0003b7e:	75 08                	jne    c0003b88 <create_name+0x106>
c0003b80:	83 cb 03             	or     ebx,0x3
c0003b83:	eb 03                	jmp    c0003b88 <create_name+0x106>
c0003b85:	4e                   	dec    esi
c0003b86:	74 0c                	je     c0003b94 <create_name+0x112>
c0003b88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b8c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b92:	75 f1                	jne    c0003b85 <create_name+0x103>
c0003b94:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b99:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9c:	ba 20 00 00 00       	mov    edx,0x20
c0003ba1:	e8 38 df ff ff       	call   c0001ade <mem_set>
c0003ba6:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bae:	31 c9                	xor    ecx,ecx
c0003bb0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb5:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bc0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc4:	66 85 ed             	test   bp,bp
c0003bc7:	0f 84 1f 01 00 00    	je     c0003cec <create_name+0x26a>
c0003bcd:	66 83 fd 20          	cmp    bp,0x20
c0003bd1:	74 0c                	je     c0003bdf <create_name+0x15d>
c0003bd3:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd7:	75 0f                	jne    c0003be8 <create_name+0x166>
c0003bd9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bdd:	74 09                	je     c0003be8 <create_name+0x166>
c0003bdf:	83 cb 03             	or     ebx,0x3
c0003be2:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be6:	eb cd                	jmp    c0003bb5 <create_name+0x133>
c0003be8:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bec:	73 06                	jae    c0003bf4 <create_name+0x172>
c0003bee:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf2:	75 3a                	jne    c0003c2e <create_name+0x1ac>
c0003bf4:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf9:	75 08                	jne    c0003c03 <create_name+0x181>
c0003bfb:	83 cb 03             	or     ebx,0x3
c0003bfe:	e9 e9 00 00 00       	jmp    c0003cec <create_name+0x26a>
c0003c03:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c07:	74 0d                	je     c0003c16 <create_name+0x194>
c0003c09:	83 cb 03             	or     ebx,0x3
c0003c0c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c10:	0f 87 d6 00 00 00    	ja     c0003cec <create_name+0x26a>
c0003c16:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c1b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1f:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c27:	b9 08 00 00 00       	mov    ecx,0x8
c0003c2c:	eb b4                	jmp    c0003be2 <create_name+0x160>
c0003c2e:	66 83 fd 7f          	cmp    bp,0x7f
c0003c32:	76 68                	jbe    c0003c9c <create_name+0x21a>
c0003c34:	88 da                	mov    dl,bl
c0003c36:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c3a:	83 ca 02             	or     edx,0x2
c0003c3d:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c41:	50                   	push   eax
c0003c42:	50                   	push   eax
c0003c43:	68 b5 01 00 00       	push   0x1b5
c0003c48:	55                   	push   ebp
c0003c49:	e8 0f 46 00 00       	call   c000825d <ff_uni2oem>
c0003c4e:	83 c4 10             	add    esp,0x10
c0003c51:	89 c5                	mov    ebp,eax
c0003c53:	a8 80                	test   al,0x80
c0003c55:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c59:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c5d:	74 0c                	je     c0003c6b <create_name+0x1e9>
c0003c5f:	83 e5 7f             	and    ebp,0x7f
c0003c62:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c69:	eb 2a                	jmp    c0003c95 <create_name+0x213>
c0003c6b:	66 3d ff 00          	cmp    ax,0xff
c0003c6f:	76 24                	jbe    c0003c95 <create_name+0x213>
c0003c71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c75:	48                   	dec    eax
c0003c76:	39 c8                	cmp    eax,ecx
c0003c78:	77 0c                	ja     c0003c86 <create_name+0x204>
c0003c7a:	83 cb 03             	or     ebx,0x3
c0003c7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c81:	e9 5c ff ff ff       	jmp    c0003be2 <create_name+0x160>
c0003c86:	89 e8                	mov    eax,ebp
c0003c88:	88 d3                	mov    bl,dl
c0003c8a:	66 c1 e8 08          	shr    ax,0x8
c0003c8e:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c92:	41                   	inc    ecx
c0003c93:	eb 4b                	jmp    c0003ce0 <create_name+0x25e>
c0003c95:	66 85 ed             	test   bp,bp
c0003c98:	88 d3                	mov    bl,dl
c0003c9a:	74 19                	je     c0003cb5 <create_name+0x233>
c0003c9c:	0f b7 d5             	movzx  edx,bp
c0003c9f:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003ca4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca8:	e8 5f de ff ff       	call   c0001b0c <chk_chr>
c0003cad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cb1:	85 c0                	test   eax,eax
c0003cb3:	74 0a                	je     c0003cbf <create_name+0x23d>
c0003cb5:	83 cb 03             	or     ebx,0x3
c0003cb8:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cbd:	eb 21                	jmp    c0003ce0 <create_name+0x25e>
c0003cbf:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cc2:	66 83 f8 19          	cmp    ax,0x19
c0003cc6:	77 07                	ja     c0003ccf <create_name+0x24d>
c0003cc8:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003ccd:	eb 11                	jmp    c0003ce0 <create_name+0x25e>
c0003ccf:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cd2:	66 83 f8 19          	cmp    ax,0x19
c0003cd6:	77 08                	ja     c0003ce0 <create_name+0x25e>
c0003cd8:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cdd:	83 ed 20             	sub    ebp,0x20
c0003ce0:	89 e8                	mov    eax,ebp
c0003ce2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce6:	41                   	inc    ecx
c0003ce7:	e9 f6 fe ff ff       	jmp    c0003be2 <create_name+0x160>
c0003cec:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cf0:	75 04                	jne    c0003cf6 <create_name+0x274>
c0003cf2:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf6:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cfb:	75 05                	jne    c0003d02 <create_name+0x280>
c0003cfd:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d02:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d06:	83 e0 0c             	and    eax,0xc
c0003d09:	3c 0c                	cmp    al,0xc
c0003d0b:	74 0b                	je     c0003d18 <create_name+0x296>
c0003d0d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d11:	83 e0 03             	and    eax,0x3
c0003d14:	3c 03                	cmp    al,0x3
c0003d16:	75 05                	jne    c0003d1d <create_name+0x29b>
c0003d18:	83 cb 02             	or     ebx,0x2
c0003d1b:	eb 19                	jmp    c0003d36 <create_name+0x2b4>
c0003d1d:	f6 c3 02             	test   bl,0x2
c0003d20:	75 14                	jne    c0003d36 <create_name+0x2b4>
c0003d22:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d27:	74 03                	je     c0003d2c <create_name+0x2aa>
c0003d29:	83 cb 10             	or     ebx,0x10
c0003d2c:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d31:	74 03                	je     c0003d36 <create_name+0x2b4>
c0003d33:	83 cb 08             	or     ebx,0x8
c0003d36:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d39:	31 c0                	xor    eax,eax
c0003d3b:	83 c4 3c             	add    esp,0x3c
c0003d3e:	5b                   	pop    ebx
c0003d3f:	5e                   	pop    esi
c0003d40:	5f                   	pop    edi
c0003d41:	5d                   	pop    ebp
c0003d42:	c3                   	ret    

c0003d43 <xname_sum>:
c0003d43:	56                   	push   esi
c0003d44:	89 c6                	mov    esi,eax
c0003d46:	53                   	push   ebx
c0003d47:	31 db                	xor    ebx,ebx
c0003d49:	51                   	push   ecx
c0003d4a:	83 c6 02             	add    esi,0x2
c0003d4d:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d51:	66 85 c0             	test   ax,ax
c0003d54:	74 1f                	je     c0003d75 <xname_sum+0x32>
c0003d56:	66 d1 cb             	ror    bx,1
c0003d59:	83 ec 0c             	sub    esp,0xc
c0003d5c:	50                   	push   eax
c0003d5d:	e8 00 46 00 00       	call   c0008362 <ff_wtoupper>
c0003d62:	0f b6 d0             	movzx  edx,al
c0003d65:	01 d3                	add    ebx,edx
c0003d67:	83 c4 10             	add    esp,0x10
c0003d6a:	66 c1 e8 08          	shr    ax,0x8
c0003d6e:	66 d1 cb             	ror    bx,1
c0003d71:	01 c3                	add    ebx,eax
c0003d73:	eb d5                	jmp    c0003d4a <xname_sum+0x7>
c0003d75:	5a                   	pop    edx
c0003d76:	89 d8                	mov    eax,ebx
c0003d78:	5b                   	pop    ebx
c0003d79:	5e                   	pop    esi
c0003d7a:	c3                   	ret    

c0003d7b <create_xdir>:
c0003d7b:	55                   	push   ebp
c0003d7c:	b9 40 00 00 00       	mov    ecx,0x40
c0003d81:	57                   	push   edi
c0003d82:	bd 01 00 00 00       	mov    ebp,0x1
c0003d87:	56                   	push   esi
c0003d88:	31 ff                	xor    edi,edi
c0003d8a:	53                   	push   ebx
c0003d8b:	89 c3                	mov    ebx,eax
c0003d8d:	83 ec 1c             	sub    esp,0x1c
c0003d90:	be 40 00 00 00       	mov    esi,0x40
c0003d95:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d99:	31 d2                	xor    edx,edx
c0003d9b:	e8 3e dd ff ff       	call   c0001ade <mem_set>
c0003da0:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003da3:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da7:	31 c9                	xor    ecx,ecx
c0003da9:	8d 46 01             	lea    eax,[esi+0x1]
c0003dac:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003db0:	83 c6 02             	add    esi,0x2
c0003db3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db7:	66 85 ed             	test   bp,bp
c0003dba:	74 12                	je     c0003dce <create_xdir+0x53>
c0003dbc:	0f b6 c1             	movzx  eax,cl
c0003dbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc3:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc7:	66 83 fd 01          	cmp    bp,0x1
c0003dcb:	80 d9 ff             	sbb    cl,0xff
c0003dce:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dd1:	83 c6 02             	add    esi,0x2
c0003dd4:	0f b7 d5             	movzx  edx,bp
c0003dd7:	e8 e0 dc ff ff       	call   c0001abc <st_word>
c0003ddc:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003de2:	75 d3                	jne    c0003db7 <create_xdir+0x3c>
c0003de4:	8d 47 01             	lea    eax,[edi+0x1]
c0003de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003deb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003def:	0f b6 c1             	movzx  eax,cl
c0003df2:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df7:	74 07                	je     c0003e00 <create_xdir+0x85>
c0003df9:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003dfe:	eb a9                	jmp    c0003da9 <create_xdir+0x2e>
c0003e00:	8d 47 02             	lea    eax,[edi+0x2]
c0003e03:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e06:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e09:	89 d0                	mov    eax,edx
c0003e0b:	e8 33 ff ff ff       	call   c0003d43 <xname_sum>
c0003e10:	83 c4 1c             	add    esp,0x1c
c0003e13:	0f b7 d0             	movzx  edx,ax
c0003e16:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e19:	5b                   	pop    ebx
c0003e1a:	5e                   	pop    esi
c0003e1b:	5f                   	pop    edi
c0003e1c:	5d                   	pop    ebp
c0003e1d:	e9 9a dc ff ff       	jmp    c0001abc <st_word>

c0003e22 <cmp_lfn>:
c0003e22:	55                   	push   ebp
c0003e23:	57                   	push   edi
c0003e24:	89 d7                	mov    edi,edx
c0003e26:	56                   	push   esi
c0003e27:	53                   	push   ebx
c0003e28:	83 ec 1c             	sub    esp,0x1c
c0003e2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e32:	e8 13 dc ff ff       	call   c0001a4a <ld_word>
c0003e37:	66 85 c0             	test   ax,ax
c0003e3a:	74 07                	je     c0003e43 <cmp_lfn+0x21>
c0003e3c:	31 c0                	xor    eax,eax
c0003e3e:	e9 9a 00 00 00       	jmp    c0003edd <cmp_lfn+0xbb>
c0003e43:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e45:	bd 01 00 00 00       	mov    ebp,0x1
c0003e4a:	83 e3 3f             	and    ebx,0x3f
c0003e4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e55:	4b                   	dec    ebx
c0003e56:	6b db 0d             	imul   ebx,ebx,0xd
c0003e59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e5d:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e64:	01 f8                	add    eax,edi
c0003e66:	e8 df db ff ff       	call   c0001a4a <ld_word>
c0003e6b:	66 85 ed             	test   bp,bp
c0003e6e:	89 c6                	mov    esi,eax
c0003e70:	74 3c                	je     c0003eae <cmp_lfn+0x8c>
c0003e72:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e78:	77 c2                	ja     c0003e3c <cmp_lfn+0x1a>
c0003e7a:	83 ec 0c             	sub    esp,0xc
c0003e7d:	0f b7 c0             	movzx  eax,ax
c0003e80:	50                   	push   eax
c0003e81:	e8 dc 44 00 00       	call   c0008362 <ff_wtoupper>
c0003e86:	89 c5                	mov    ebp,eax
c0003e88:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e93:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e9a:	e8 c3 44 00 00       	call   c0008362 <ff_wtoupper>
c0003e9f:	83 c4 10             	add    esp,0x10
c0003ea2:	39 c5                	cmp    ebp,eax
c0003ea4:	75 96                	jne    c0003e3c <cmp_lfn+0x1a>
c0003ea6:	89 f5                	mov    ebp,esi
c0003ea8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eac:	eb 04                	jmp    c0003eb2 <cmp_lfn+0x90>
c0003eae:	66 46                	inc    si
c0003eb0:	75 8a                	jne    c0003e3c <cmp_lfn+0x1a>
c0003eb2:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb6:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ebb:	75 9c                	jne    c0003e59 <cmp_lfn+0x37>
c0003ebd:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ec0:	74 16                	je     c0003ed8 <cmp_lfn+0xb6>
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 11                	je     c0003ed8 <cmp_lfn+0xb6>
c0003ec7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ecb:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ed0:	0f 94 c0             	sete   al
c0003ed3:	0f b6 c0             	movzx  eax,al
c0003ed6:	eb 05                	jmp    c0003edd <cmp_lfn+0xbb>
c0003ed8:	b8 01 00 00 00       	mov    eax,0x1
c0003edd:	83 c4 1c             	add    esp,0x1c
c0003ee0:	5b                   	pop    ebx
c0003ee1:	5e                   	pop    esi
c0003ee2:	5f                   	pop    edi
c0003ee3:	5d                   	pop    ebp
c0003ee4:	c3                   	ret    

c0003ee5 <dir_find>:
c0003ee5:	55                   	push   ebp
c0003ee6:	31 d2                	xor    edx,edx
c0003ee8:	57                   	push   edi
c0003ee9:	56                   	push   esi
c0003eea:	53                   	push   ebx
c0003eeb:	89 c3                	mov    ebx,eax
c0003eed:	83 ec 1c             	sub    esp,0x1c
c0003ef0:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ef2:	e8 a2 f0 ff ff       	call   c0002f99 <dir_sdi>
c0003ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003efa:	85 c0                	test   eax,eax
c0003efc:	0f 85 9f 01 00 00    	jne    c00040a1 <dir_find+0x1bc>
c0003f02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f05:	0f 85 8e 00 00 00    	jne    c0003f99 <dir_find+0xb4>
c0003f0b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f0e:	e8 30 fe ff ff       	call   c0003d43 <xname_sum>
c0003f13:	89 c5                	mov    ebp,eax
c0003f15:	31 d2                	xor    edx,edx
c0003f17:	89 d8                	mov    eax,ebx
c0003f19:	e8 8d f8 ff ff       	call   c00037ab <dir_read>
c0003f1e:	85 c0                	test   eax,eax
c0003f20:	0f 85 5f 01 00 00    	jne    c0004085 <dir_find+0x1a0>
c0003f26:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f29:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f2c:	e8 19 db ff ff       	call   c0001a4a <ld_word>
c0003f31:	66 39 e8             	cmp    ax,bp
c0003f34:	75 df                	jne    c0003f15 <dir_find+0x30>
c0003f36:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f3a:	31 ff                	xor    edi,edi
c0003f3c:	ba 40 00 00 00       	mov    edx,0x40
c0003f41:	39 f9                	cmp    ecx,edi
c0003f43:	0f 84 4a 01 00 00    	je     c0004093 <dir_find+0x1ae>
c0003f49:	f6 c2 1f             	test   dl,0x1f
c0003f4c:	75 03                	jne    c0003f51 <dir_find+0x6c>
c0003f4e:	83 c2 02             	add    edx,0x2
c0003f51:	89 d0                	mov    eax,edx
c0003f53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f57:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f5a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f5e:	e8 e7 da ff ff       	call   c0001a4a <ld_word>
c0003f63:	83 ec 0c             	sub    esp,0xc
c0003f66:	0f b7 c0             	movzx  eax,ax
c0003f69:	50                   	push   eax
c0003f6a:	e8 f3 43 00 00       	call   c0008362 <ff_wtoupper>
c0003f6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f73:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f76:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f7d:	e8 e0 43 00 00       	call   c0008362 <ff_wtoupper>
c0003f82:	83 c4 10             	add    esp,0x10
c0003f85:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f89:	75 8a                	jne    c0003f15 <dir_find+0x30>
c0003f8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8f:	47                   	inc    edi
c0003f90:	83 c2 02             	add    edx,0x2
c0003f93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f97:	eb a8                	jmp    c0003f41 <dir_find+0x5c>
c0003f99:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fa0:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003faa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fad:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fb0:	89 f0                	mov    eax,esi
c0003fb2:	e8 6a e2 ff ff       	call   c0002221 <move_window>
c0003fb7:	85 c0                	test   eax,eax
c0003fb9:	0f 85 c6 00 00 00    	jne    c0004085 <dir_find+0x1a0>
c0003fbf:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fc2:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc5:	84 c9                	test   cl,cl
c0003fc7:	0f 84 bd 00 00 00    	je     c000408a <dir_find+0x1a5>
c0003fcd:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fd0:	88 d0                	mov    al,dl
c0003fd2:	83 e0 3f             	and    eax,0x3f
c0003fd5:	80 f9 e5             	cmp    cl,0xe5
c0003fd8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fdb:	0f 84 87 00 00 00    	je     c0004068 <dir_find+0x183>
c0003fe1:	80 e2 08             	and    dl,0x8
c0003fe4:	74 06                	je     c0003fec <dir_find+0x107>
c0003fe6:	3c 0f                	cmp    al,0xf
c0003fe8:	75 7e                	jne    c0004068 <dir_find+0x183>
c0003fea:	eb 04                	jmp    c0003ff0 <dir_find+0x10b>
c0003fec:	3c 0f                	cmp    al,0xf
c0003fee:	75 4c                	jne    c000403c <dir_find+0x157>
c0003ff0:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003ff4:	75 7e                	jne    c0004074 <dir_find+0x18f>
c0003ff6:	f6 c1 40             	test   cl,0x40
c0003ff9:	74 12                	je     c000400d <dir_find+0x128>
c0003ffb:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ffe:	83 e1 bf             	and    ecx,0xffffffbf
c0004001:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004005:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004008:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000400b:	eb 06                	jmp    c0004013 <dir_find+0x12e>
c000400d:	89 f8                	mov    eax,edi
c000400f:	38 c8                	cmp    al,cl
c0004011:	75 5c                	jne    c000406f <dir_find+0x18a>
c0004013:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004017:	bf ff ff ff ff       	mov    edi,0xffffffff
c000401c:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401f:	75 53                	jne    c0004074 <dir_find+0x18f>
c0004021:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004024:	89 ea                	mov    edx,ebp
c0004026:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000402a:	e8 f3 fd ff ff       	call   c0003e22 <cmp_lfn>
c000402f:	85 c0                	test   eax,eax
c0004031:	74 41                	je     c0004074 <dir_find+0x18f>
c0004033:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004037:	8d 79 ff             	lea    edi,[ecx-0x1]
c000403a:	eb 38                	jmp    c0004074 <dir_find+0x18f>
c000403c:	89 f8                	mov    eax,edi
c000403e:	84 c0                	test   al,al
c0004040:	75 0d                	jne    c000404f <dir_find+0x16a>
c0004042:	89 e8                	mov    eax,ebp
c0004044:	e8 bd de ff ff       	call   c0001f06 <sum_sfn>
c0004049:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000404d:	74 52                	je     c00040a1 <dir_find+0x1bc>
c000404f:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004053:	75 13                	jne    c0004068 <dir_find+0x183>
c0004055:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004058:	b9 0b 00 00 00       	mov    ecx,0xb
c000405d:	89 e8                	mov    eax,ebp
c000405f:	e8 85 da ff ff       	call   c0001ae9 <mem_cmp>
c0004064:	85 c0                	test   eax,eax
c0004066:	74 39                	je     c00040a1 <dir_find+0x1bc>
c0004068:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004074:	31 d2                	xor    edx,edx
c0004076:	89 d8                	mov    eax,ebx
c0004078:	e8 76 f4 ff ff       	call   c00034f3 <dir_next>
c000407d:	85 c0                	test   eax,eax
c000407f:	0f 84 25 ff ff ff    	je     c0003faa <dir_find+0xc5>
c0004085:	89 04 24             	mov    DWORD PTR [esp],eax
c0004088:	eb 17                	jmp    c00040a1 <dir_find+0x1bc>
c000408a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004091:	eb 0e                	jmp    c00040a1 <dir_find+0x1bc>
c0004093:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004096:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c000409b:	0f 85 74 fe ff ff    	jne    c0003f15 <dir_find+0x30>
c00040a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040a4:	83 c4 1c             	add    esp,0x1c
c00040a7:	5b                   	pop    ebx
c00040a8:	5e                   	pop    esi
c00040a9:	5f                   	pop    edi
c00040aa:	5d                   	pop    ebp
c00040ab:	c3                   	ret    

c00040ac <dir_register>:
c00040ac:	55                   	push   ebp
c00040ad:	57                   	push   edi
c00040ae:	56                   	push   esi
c00040af:	be 06 00 00 00       	mov    esi,0x6
c00040b4:	53                   	push   ebx
c00040b5:	83 ec 6c             	sub    esp,0x6c
c00040b8:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040bc:	0f 85 63 02 00 00    	jne    c0004325 <dir_register+0x279>
c00040c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040c4:	31 ff                	xor    edi,edi
c00040c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c9:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ce:	74 03                	je     c00040d3 <dir_register+0x27>
c00040d0:	47                   	inc    edi
c00040d1:	eb f6                	jmp    c00040c9 <dir_register+0x1d>
c00040d3:	89 c3                	mov    ebx,eax
c00040d5:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d9:	0f 85 e1 00 00 00    	jne    c00041c0 <dir_register+0x114>
c00040df:	83 c7 0e             	add    edi,0xe
c00040e2:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e7:	89 f8                	mov    eax,edi
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	f7 f1                	div    ecx
c00040ed:	89 c7                	mov    edi,eax
c00040ef:	8d 50 02             	lea    edx,[eax+0x2]
c00040f2:	89 d8                	mov    eax,ebx
c00040f4:	e8 2c f8 ff ff       	call   c0003925 <dir_alloc>
c00040f9:	89 c6                	mov    esi,eax
c00040fb:	85 c0                	test   eax,eax
c00040fd:	0f 85 22 02 00 00    	jne    c0004325 <dir_register+0x279>
c0004103:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004109:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000410c:	c1 e7 05             	shl    edi,0x5
c000410f:	29 f8                	sub    eax,edi
c0004111:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004114:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004117:	a8 04                	test   al,0x4
c0004119:	0f 84 91 00 00 00    	je     c00041b0 <dir_register+0x104>
c000411f:	83 e0 fb             	and    eax,0xfffffffb
c0004122:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004125:	89 d8                	mov    eax,ebx
c0004127:	e8 3d ec ff ff       	call   c0002d69 <fill_first_frag>
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 ef 01 00 00    	jne    c0004323 <dir_register+0x277>
c0004134:	83 c9 ff             	or     ecx,0xffffffff
c0004137:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000413a:	89 d8                	mov    eax,ebx
c000413c:	e8 f3 eb ff ff       	call   c0002d34 <fill_last_frag>
c0004141:	85 c0                	test   eax,eax
c0004143:	0f 85 da 01 00 00    	jne    c0004323 <dir_register+0x277>
c0004149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000414d:	74 61                	je     c00041b0 <dir_register+0x104>
c000414f:	89 da                	mov    edx,ebx
c0004151:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004155:	e8 04 f6 ff ff       	call   c000375e <load_obj_xdir>
c000415a:	85 c0                	test   eax,eax
c000415c:	0f 85 c1 01 00 00    	jne    c0004323 <dir_register+0x277>
c0004162:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004166:	c1 e2 09             	shl    edx,0x9
c0004169:	31 c9                	xor    ecx,ecx
c000416b:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000416e:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004171:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004174:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004177:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000417a:	83 c0 38             	add    eax,0x38
c000417d:	e8 41 d9 ff ff       	call   c0001ac3 <st_qword>
c0004182:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004185:	83 c0 28             	add    eax,0x28
c0004188:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000418b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000418e:	e8 30 d9 ff ff       	call   c0001ac3 <st_qword>
c0004193:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004196:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004199:	83 c8 01             	or     eax,0x1
c000419c:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a3:	e8 f5 f7 ff ff       	call   c000399d <store_xdir>
c00041a8:	85 c0                	test   eax,eax
c00041aa:	0f 85 73 01 00 00    	jne    c0004323 <dir_register+0x277>
c00041b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b6:	e8 c0 fb ff ff       	call   c0003d7b <create_xdir>
c00041bb:	e9 65 01 00 00       	jmp    c0004325 <dir_register+0x279>
c00041c0:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041c3:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041cc:	89 c2                	mov    edx,eax
c00041ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d2:	e8 f2 d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041d7:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041dc:	74 58                	je     c0004236 <dir_register+0x18a>
c00041de:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041e2:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041ea:	83 ec 0c             	sub    esp,0xc
c00041ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041fc:	e8 49 dc ff ff       	call   c0001e4a <gen_numname>
c0004201:	89 d8                	mov    eax,ebx
c0004203:	e8 dd fc ff ff       	call   c0003ee5 <dir_find>
c0004208:	83 c4 10             	add    esp,0x10
c000420b:	89 c6                	mov    esi,eax
c000420d:	85 c0                	test   eax,eax
c000420f:	75 15                	jne    c0004226 <dir_register+0x17a>
c0004211:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004215:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000421a:	75 ce                	jne    c00041ea <dir_register+0x13e>
c000421c:	be 07 00 00 00       	mov    esi,0x7
c0004221:	e9 ff 00 00 00       	jmp    c0004325 <dir_register+0x279>
c0004226:	83 f8 04             	cmp    eax,0x4
c0004229:	0f 85 f6 00 00 00    	jne    c0004325 <dir_register+0x279>
c000422f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004233:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004236:	b9 01 00 00 00       	mov    ecx,0x1
c000423b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004240:	74 0f                	je     c0004251 <dir_register+0x1a5>
c0004242:	b9 0d 00 00 00       	mov    ecx,0xd
c0004247:	8d 47 0c             	lea    eax,[edi+0xc]
c000424a:	31 d2                	xor    edx,edx
c000424c:	f7 f1                	div    ecx
c000424e:	8d 48 01             	lea    ecx,[eax+0x1]
c0004251:	89 ca                	mov    edx,ecx
c0004253:	89 d8                	mov    eax,ebx
c0004255:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004259:	e8 c7 f6 ff ff       	call   c0003925 <dir_alloc>
c000425e:	89 c6                	mov    esi,eax
c0004260:	85 c0                	test   eax,eax
c0004262:	0f 85 bd 00 00 00    	jne    c0004325 <dir_register+0x279>
c0004268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000426c:	89 cf                	mov    edi,ecx
c000426e:	4f                   	dec    edi
c000426f:	74 6d                	je     c00042de <dir_register+0x232>
c0004271:	89 f8                	mov    eax,edi
c0004273:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004276:	c1 e0 05             	shl    eax,0x5
c0004279:	29 c2                	sub    edx,eax
c000427b:	89 d8                	mov    eax,ebx
c000427d:	e8 17 ed ff ff       	call   c0002f99 <dir_sdi>
c0004282:	89 c6                	mov    esi,eax
c0004284:	85 c0                	test   eax,eax
c0004286:	0f 85 99 00 00 00    	jne    c0004325 <dir_register+0x279>
c000428c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004290:	e8 71 dc ff ff       	call   c0001f06 <sum_sfn>
c0004295:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004299:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000429c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429f:	89 e8                	mov    eax,ebp
c00042a1:	e8 7b df ff ff       	call   c0002221 <move_window>
c00042a6:	89 c6                	mov    esi,eax
c00042a8:	85 c0                	test   eax,eax
c00042aa:	75 79                	jne    c0004325 <dir_register+0x279>
c00042ac:	83 ec 0c             	sub    esp,0xc
c00042af:	89 f8                	mov    eax,edi
c00042b1:	0f b6 c8             	movzx  ecx,al
c00042b4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042bc:	52                   	push   edx
c00042bd:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042c0:	e8 01 db ff ff       	call   c0001dc6 <put_lfn>
c00042c5:	31 d2                	xor    edx,edx
c00042c7:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042cb:	89 d8                	mov    eax,ebx
c00042cd:	e8 21 f2 ff ff       	call   c00034f3 <dir_next>
c00042d2:	83 c4 10             	add    esp,0x10
c00042d5:	89 c6                	mov    esi,eax
c00042d7:	85 c0                	test   eax,eax
c00042d9:	75 4a                	jne    c0004325 <dir_register+0x279>
c00042db:	4f                   	dec    edi
c00042dc:	75 bb                	jne    c0004299 <dir_register+0x1ed>
c00042de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e4:	89 e8                	mov    eax,ebp
c00042e6:	e8 36 df ff ff       	call   c0002221 <move_window>
c00042eb:	89 c6                	mov    esi,eax
c00042ed:	85 c0                	test   eax,eax
c00042ef:	75 34                	jne    c0004325 <dir_register+0x279>
c00042f1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042f4:	b9 20 00 00 00       	mov    ecx,0x20
c00042f9:	31 d2                	xor    edx,edx
c00042fb:	e8 de d7 ff ff       	call   c0001ade <mem_set>
c0004300:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004303:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004307:	b9 0b 00 00 00       	mov    ecx,0xb
c000430c:	e8 b8 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004311:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004314:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004317:	83 e0 18             	and    eax,0x18
c000431a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000431d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004321:	eb 02                	jmp    c0004325 <dir_register+0x279>
c0004323:	89 c6                	mov    esi,eax
c0004325:	83 c4 6c             	add    esp,0x6c
c0004328:	89 f0                	mov    eax,esi
c000432a:	5b                   	pop    ebx
c000432b:	5e                   	pop    esi
c000432c:	5f                   	pop    edi
c000432d:	5d                   	pop    ebp
c000432e:	c3                   	ret    

c000432f <sync_fs>:
c000432f:	56                   	push   esi
c0004330:	53                   	push   ebx
c0004331:	53                   	push   ebx
c0004332:	89 c3                	mov    ebx,eax
c0004334:	e8 54 de ff ff       	call   c000218d <sync_window>
c0004339:	85 c0                	test   eax,eax
c000433b:	0f 85 b1 00 00 00    	jne    c00043f2 <sync_fs+0xc3>
c0004341:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004344:	0f 85 8e 00 00 00    	jne    c00043d8 <sync_fs+0xa9>
c000434a:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000434e:	0f 85 84 00 00 00    	jne    c00043d8 <sync_fs+0xa9>
c0004354:	8d 73 54             	lea    esi,[ebx+0x54]
c0004357:	b9 00 02 00 00       	mov    ecx,0x200
c000435c:	31 d2                	xor    edx,edx
c000435e:	89 f0                	mov    eax,esi
c0004360:	e8 79 d7 ff ff       	call   c0001ade <mem_set>
c0004365:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000436b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004370:	e8 47 d7 ff ff       	call   c0001abc <st_word>
c0004375:	ba 52 52 61 41       	mov    edx,0x41615252
c000437a:	89 f0                	mov    eax,esi
c000437c:	e8 3f d7 ff ff       	call   c0001ac0 <st_dword>
c0004381:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004387:	ba 72 72 41 61       	mov    edx,0x61417272
c000438c:	e8 2f d7 ff ff       	call   c0001ac0 <st_dword>
c0004391:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004394:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000439a:	e8 21 d7 ff ff       	call   c0001ac0 <st_dword>
c000439f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043a2:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a8:	e8 13 d7 ff ff       	call   c0001ac0 <st_dword>
c00043ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043b0:	83 c0 01             	add    eax,0x1
c00043b3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b6:	83 d2 00             	adc    edx,0x0
c00043b9:	83 ec 0c             	sub    esp,0xc
c00043bc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043bf:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043c2:	6a 01                	push   0x1
c00043c4:	52                   	push   edx
c00043c5:	50                   	push   eax
c00043c6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ca:	56                   	push   esi
c00043cb:	50                   	push   eax
c00043cc:	e8 44 d6 ff ff       	call   c0001a15 <disk_write>
c00043d1:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d5:	83 c4 20             	add    esp,0x20
c00043d8:	51                   	push   ecx
c00043d9:	6a 00                	push   0x0
c00043db:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043df:	6a 00                	push   0x0
c00043e1:	50                   	push   eax
c00043e2:	e8 44 d6 ff ff       	call   c0001a2b <disk_ioctl>
c00043e7:	83 c4 10             	add    esp,0x10
c00043ea:	85 c0                	test   eax,eax
c00043ec:	0f 95 c0             	setne  al
c00043ef:	0f b6 c0             	movzx  eax,al
c00043f2:	5a                   	pop    edx
c00043f3:	5b                   	pop    ebx
c00043f4:	5e                   	pop    esi
c00043f5:	c3                   	ret    

c00043f6 <create_partition>:
c00043f6:	55                   	push   ebp
c00043f7:	57                   	push   edi
c00043f8:	56                   	push   esi
c00043f9:	53                   	push   ebx
c00043fa:	83 ec 60             	sub    esp,0x60
c00043fd:	0f b6 c0             	movzx  eax,al
c0004400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004404:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004408:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000440c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004410:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004414:	50                   	push   eax
c0004415:	6a 01                	push   0x1
c0004417:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000441b:	e8 0b d6 ff ff       	call   c0001a2b <disk_ioctl>
c0004420:	83 c4 10             	add    esp,0x10
c0004423:	85 c0                	test   eax,eax
c0004425:	74 0a                	je     c0004431 <create_partition+0x3b>
c0004427:	b8 01 00 00 00       	mov    eax,0x1
c000442c:	e9 73 05 00 00       	jmp    c00049a4 <create_partition+0x5ae>
c0004431:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004435:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004439:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000443d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004441:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004446:	0f 86 ed 03 00 00    	jbe    c0004839 <create_partition+0x443>
c000444c:	83 c0 df             	add    eax,0xffffffdf
c000444f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004457:	83 d2 ff             	adc    edx,0xffffffff
c000445a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000445e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004462:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004466:	83 c0 bd             	add    eax,0xffffffbd
c0004469:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000446d:	83 d2 ff             	adc    edx,0xffffffff
c0004470:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004474:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004478:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004487:	be 22 00 00 00       	mov    esi,0x22
c000448c:	31 ff                	xor    edi,edi
c000448e:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004496:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000449e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044aa:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044b0:	75 0e                	jne    c00044c0 <create_partition+0xca>
c00044b2:	b9 00 02 00 00       	mov    ecx,0x200
c00044b7:	31 d2                	xor    edx,edx
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 1e d6 ff ff       	call   c0001ade <mem_set>
c00044c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044cc:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044cf:	0f 84 23 01 00 00    	je     c00045f8 <create_partition+0x202>
c00044d5:	89 f0                	mov    eax,esi
c00044d7:	89 fa                	mov    edx,edi
c00044d9:	05 ff 07 00 00       	add    eax,0x7ff
c00044de:	83 d2 00             	adc    edx,0x0
c00044e1:	89 c1                	mov    ecx,eax
c00044e3:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044ed:	89 ce                	mov    esi,ecx
c00044ef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044f3:	89 d7                	mov    edi,edx
c00044f5:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f9:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044fd:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004500:	89 04 24             	mov    DWORD PTR [esp],eax
c0004503:	b8 64 00 00 00       	mov    eax,0x64
c0004508:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000450b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450f:	b8 00 00 00 00       	mov    eax,0x0
c0004514:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004518:	72 41                	jb     c000455b <create_partition+0x165>
c000451a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000451e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004522:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004527:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000452b:	01 c1                	add    ecx,eax
c000452d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004531:	f7 24 24             	mul    DWORD PTR [esp]
c0004534:	6a 00                	push   0x0
c0004536:	01 ca                	add    edx,ecx
c0004538:	6a 64                	push   0x64
c000453a:	52                   	push   edx
c000453b:	50                   	push   eax
c000453c:	e8 cb af 01 00       	call   c001f50c <__udivdi3>
c0004541:	83 c4 10             	add    esp,0x10
c0004544:	05 ff 07 00 00       	add    eax,0x7ff
c0004549:	83 d2 00             	adc    edx,0x0
c000454c:	89 c1                	mov    ecx,eax
c000454e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004554:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004558:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000455b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000455e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004562:	01 f0                	add    eax,esi
c0004564:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004568:	11 fa                	adc    edx,edi
c000456a:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000456e:	19 d1                	sbb    ecx,edx
c0004570:	73 2e                	jae    c00045a0 <create_partition+0x1aa>
c0004572:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004576:	89 f8                	mov    eax,edi
c0004578:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000457c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004583:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000458b:	73 6b                	jae    c00045f8 <create_partition+0x202>
c000458d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004591:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004595:	29 f0                	sub    eax,esi
c0004597:	19 fa                	sbb    edx,edi
c0004599:	89 04 24             	mov    DWORD PTR [esp],eax
c000459c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045a4:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a7:	74 4f                	je     c00045f8 <create_partition+0x202>
c00045a9:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045ac:	b9 10 00 00 00       	mov    ecx,0x10
c00045b1:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045b6:	e8 0e d5 ff ff       	call   c0001ac9 <mem_cpy>
c00045bb:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045bf:	b9 10 00 00 00       	mov    ecx,0x10
c00045c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c8:	e8 49 db ff ff       	call   c0002116 <make_rand>
c00045cd:	89 f2                	mov    edx,esi
c00045cf:	89 f9                	mov    ecx,edi
c00045d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d5:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d9:	e8 e5 d4 ff ff       	call   c0001ac3 <st_qword>
c00045de:	03 34 24             	add    esi,DWORD PTR [esp]
c00045e1:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e5:	89 f2                	mov    edx,esi
c00045e7:	89 f9                	mov    ecx,edi
c00045e9:	83 c2 ff             	add    edx,0xffffffff
c00045ec:	83 d1 ff             	adc    ecx,0xffffffff
c00045ef:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045f3:	e8 cb d4 ff ff       	call   c0001ac3 <st_qword>
c00045f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045fc:	83 e8 80             	sub    eax,0xffffff80
c00045ff:	89 c5                	mov    ebp,eax
c0004601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004605:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000460b:	75 6b                	jne    c0004678 <create_partition+0x282>
c000460d:	45                   	inc    ebp
c000460e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004612:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004617:	e8 56 da ff ff       	call   c0002072 <crc32>
c000461c:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004622:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004626:	75 e5                	jne    c000460d <create_partition+0x217>
c0004628:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000462c:	83 ec 0c             	sub    esp,0xc
c000462f:	c1 ed 09             	shr    ebp,0x9
c0004632:	31 d2                	xor    edx,edx
c0004634:	6a 01                	push   0x1
c0004636:	52                   	push   edx
c0004637:	8d 45 02             	lea    eax,[ebp+0x2]
c000463a:	50                   	push   eax
c000463b:	53                   	push   ebx
c000463c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004640:	e8 d0 d3 ff ff       	call   c0001a15 <disk_write>
c0004645:	83 c4 20             	add    esp,0x20
c0004648:	85 c0                	test   eax,eax
c000464a:	0f 85 d7 fd ff ff    	jne    c0004427 <create_partition+0x31>
c0004650:	83 ec 0c             	sub    esp,0xc
c0004653:	89 e8                	mov    eax,ebp
c0004655:	31 d2                	xor    edx,edx
c0004657:	6a 01                	push   0x1
c0004659:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000465d:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004661:	52                   	push   edx
c0004662:	50                   	push   eax
c0004663:	53                   	push   ebx
c0004664:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004668:	e8 a8 d3 ff ff       	call   c0001a15 <disk_write>
c000466d:	83 c4 20             	add    esp,0x20
c0004670:	85 c0                	test   eax,eax
c0004672:	0f 85 af fd ff ff    	jne    c0004427 <create_partition+0x31>
c0004678:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000467c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004680:	3d 00 40 00 00       	cmp    eax,0x4000
c0004685:	74 0d                	je     c0004694 <create_partition+0x29e>
c0004687:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000468b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468f:	e9 12 fe ff ff       	jmp    c00044a6 <create_partition+0xb0>
c0004694:	31 d2                	xor    edx,edx
c0004696:	b9 00 02 00 00       	mov    ecx,0x200
c000469b:	89 d8                	mov    eax,ebx
c000469d:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046a0:	e8 39 d4 ff ff       	call   c0001ade <mem_set>
c00046a5:	b9 10 00 00 00       	mov    ecx,0x10
c00046aa:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046af:	89 d8                	mov    eax,ebx
c00046b1:	e8 13 d4 ff ff       	call   c0001ac9 <mem_cpy>
c00046b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046ba:	f7 d2                	not    edx
c00046bc:	8d 43 58             	lea    eax,[ebx+0x58]
c00046bf:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c2:	e8 f9 d3 ff ff       	call   c0001ac0 <st_dword>
c00046c7:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ca:	31 c9                	xor    ecx,ecx
c00046cc:	ba 01 00 00 00       	mov    edx,0x1
c00046d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d4:	e8 ea d3 ff ff       	call   c0001ac3 <st_qword>
c00046d9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046dd:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046e1:	83 c2 ff             	add    edx,0xffffffff
c00046e4:	89 e8                	mov    eax,ebp
c00046e6:	83 d1 ff             	adc    ecx,0xffffffff
c00046e9:	e8 d5 d3 ff ff       	call   c0001ac3 <st_qword>
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	8d 43 28             	lea    eax,[ebx+0x28]
c00046f3:	ba 22 00 00 00       	mov    edx,0x22
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004701:	83 c2 de             	add    edx,0xffffffde
c0004704:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004708:	83 d1 ff             	adc    ecx,0xffffffff
c000470b:	8d 43 30             	lea    eax,[ebx+0x30]
c000470e:	e8 b0 d3 ff ff       	call   c0001ac3 <st_qword>
c0004713:	8d 43 54             	lea    eax,[ebx+0x54]
c0004716:	ba 80 00 00 00       	mov    edx,0x80
c000471b:	31 f6                	xor    esi,esi
c000471d:	e8 9e d3 ff ff       	call   c0001ac0 <st_dword>
c0004722:	8d 43 50             	lea    eax,[ebx+0x50]
c0004725:	ba 80 00 00 00       	mov    edx,0x80
c000472a:	e8 91 d3 ff ff       	call   c0001ac0 <st_dword>
c000472f:	ba 02 00 00 00       	mov    edx,0x2
c0004734:	89 f8                	mov    eax,edi
c0004736:	e8 85 d3 ff ff       	call   c0001ac0 <st_dword>
c000473b:	8d 53 38             	lea    edx,[ebx+0x38]
c000473e:	b9 10 00 00 00       	mov    ecx,0x10
c0004743:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004747:	e8 ca d9 ff ff       	call   c0002116 <make_rand>
c000474c:	83 c8 ff             	or     eax,0xffffffff
c000474f:	46                   	inc    esi
c0004750:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004755:	e8 18 d9 ff ff       	call   c0002072 <crc32>
c000475a:	83 fe 5c             	cmp    esi,0x5c
c000475d:	75 f0                	jne    c000474f <create_partition+0x359>
c000475f:	f7 d0                	not    eax
c0004761:	8d 73 10             	lea    esi,[ebx+0x10]
c0004764:	89 c2                	mov    edx,eax
c0004766:	89 f0                	mov    eax,esi
c0004768:	e8 53 d3 ff ff       	call   c0001ac0 <st_dword>
c000476d:	83 ec 0c             	sub    esp,0xc
c0004770:	6a 01                	push   0x1
c0004772:	6a 00                	push   0x0
c0004774:	6a 01                	push   0x1
c0004776:	53                   	push   ebx
c0004777:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000477b:	e8 95 d2 ff ff       	call   c0001a15 <disk_write>
c0004780:	83 c4 20             	add    esp,0x20
c0004783:	85 c0                	test   eax,eax
c0004785:	0f 85 9c fc ff ff    	jne    c0004427 <create_partition+0x31>
c000478b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004793:	83 c2 ff             	add    edx,0xffffffff
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	83 d1 ff             	adc    ecx,0xffffffff
c000479c:	e8 22 d3 ff ff       	call   c0001ac3 <st_qword>
c00047a1:	ba 01 00 00 00       	mov    edx,0x1
c00047a6:	31 c9                	xor    ecx,ecx
c00047a8:	89 e8                	mov    eax,ebp
c00047aa:	e8 14 d3 ff ff       	call   c0001ac3 <st_qword>
c00047af:	89 f8                	mov    eax,edi
c00047b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b9:	e8 05 d3 ff ff       	call   c0001ac3 <st_qword>
c00047be:	89 f0                	mov    eax,esi
c00047c0:	31 d2                	xor    edx,edx
c00047c2:	31 ff                	xor    edi,edi
c00047c4:	e8 f7 d2 ff ff       	call   c0001ac0 <st_dword>
c00047c9:	83 c8 ff             	or     eax,0xffffffff
c00047cc:	47                   	inc    edi
c00047cd:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047d2:	e8 9b d8 ff ff       	call   c0002072 <crc32>
c00047d7:	83 ff 5c             	cmp    edi,0x5c
c00047da:	75 f0                	jne    c00047cc <create_partition+0x3d6>
c00047dc:	f7 d0                	not    eax
c00047de:	89 c2                	mov    edx,eax
c00047e0:	89 f0                	mov    eax,esi
c00047e2:	e8 d9 d2 ff ff       	call   c0001ac0 <st_dword>
c00047e7:	83 ec 0c             	sub    esp,0xc
c00047ea:	6a 01                	push   0x1
c00047ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047f0:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047f4:	83 c0 ff             	add    eax,0xffffffff
c00047f7:	83 d2 ff             	adc    edx,0xffffffff
c00047fa:	52                   	push   edx
c00047fb:	50                   	push   eax
c00047fc:	53                   	push   ebx
c00047fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004801:	e8 0f d2 ff ff       	call   c0001a15 <disk_write>
c0004806:	83 c4 20             	add    esp,0x20
c0004809:	85 c0                	test   eax,eax
c000480b:	0f 85 16 fc ff ff    	jne    c0004427 <create_partition+0x31>
c0004811:	31 d2                	xor    edx,edx
c0004813:	89 d8                	mov    eax,ebx
c0004815:	b9 00 02 00 00       	mov    ecx,0x200
c000481a:	e8 bf d2 ff ff       	call   c0001ade <mem_set>
c000481f:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004825:	b9 10 00 00 00       	mov    ecx,0x10
c000482a:	ba 50 04 02 c0       	mov    edx,0xc0020450
c000482f:	e8 95 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004834:	e9 3d 01 00 00       	jmp    c0004976 <create_partition+0x580>
c0004839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000483d:	b9 05 00 00 00       	mov    ecx,0x5
c0004842:	89 04 24             	mov    DWORD PTR [esp],eax
c0004845:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c000484a:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484f:	31 d2                	xor    edx,edx
c0004851:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004854:	f7 f6                	div    esi
c0004856:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000485b:	76 0c                	jbe    c0004869 <create_partition+0x473>
c000485d:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004861:	49                   	dec    ecx
c0004862:	75 e6                	jne    c000484a <create_partition+0x454>
c0004864:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004869:	b9 00 02 00 00       	mov    ecx,0x200
c000486e:	31 d2                	xor    edx,edx
c0004870:	89 d8                	mov    eax,ebx
c0004872:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004877:	e8 62 d2 ff ff       	call   c0001ade <mem_set>
c000487c:	b9 64 00 00 00       	mov    ecx,0x64
c0004881:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004884:	31 d2                	xor    edx,edx
c0004886:	f7 f1                	div    ecx
c0004888:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000488c:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c0004892:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000489a:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489f:	0f 96 c2             	setbe  dl
c00048a2:	85 ed                	test   ebp,ebp
c00048a4:	0f 95 c0             	setne  al
c00048a7:	84 c2                	test   dl,al
c00048a9:	0f 84 c7 00 00 00    	je     c0004976 <create_partition+0x580>
c00048af:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048b2:	0f 83 be 00 00 00    	jae    c0004976 <create_partition+0x580>
c00048b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048c0:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048c3:	83 fe 64             	cmp    esi,0x64
c00048c6:	77 0c                	ja     c00048d4 <create_partition+0x4de>
c00048c8:	74 07                	je     c00048d1 <create_partition+0x4db>
c00048ca:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048cf:	eb 03                	jmp    c00048d4 <create_partition+0x4de>
c00048d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048d4:	89 e8                	mov    eax,ebp
c00048d6:	01 f0                	add    eax,esi
c00048d8:	72 05                	jb     c00048df <create_partition+0x4e9>
c00048da:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048dd:	76 07                	jbe    c00048e6 <create_partition+0x4f0>
c00048df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e2:	29 ee                	sub    esi,ebp
c00048e4:	eb 08                	jmp    c00048ee <create_partition+0x4f8>
c00048e6:	85 f6                	test   esi,esi
c00048e8:	0f 84 88 00 00 00    	je     c0004976 <create_partition+0x580>
c00048ee:	89 c8                	mov    eax,ecx
c00048f0:	89 ea                	mov    edx,ebp
c00048f2:	e8 c9 d1 ff ff       	call   c0001ac0 <st_dword>
c00048f7:	89 f2                	mov    edx,esi
c00048f9:	bf 3f 00 00 00       	mov    edi,0x3f
c00048fe:	8d 41 04             	lea    eax,[ecx+0x4]
c0004901:	e8 ba d1 ff ff       	call   c0001ac0 <st_dword>
c0004906:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000490a:	31 d2                	xor    edx,edx
c000490c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004910:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004913:	83 c1 10             	add    ecx,0x10
c0004916:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000491b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491f:	89 e8                	mov    eax,ebp
c0004921:	f7 f7                	div    edi
c0004923:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000492d:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004930:	89 c2                	mov    edx,eax
c0004932:	c1 ea 02             	shr    edx,0x2
c0004935:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004939:	47                   	inc    edi
c000493a:	01 f5                	add    ebp,esi
c000493c:	83 e2 c0             	and    edx,0xffffffc0
c000493f:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004942:	09 fa                	or     edx,edi
c0004944:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004947:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c000494a:	bf 3f 00 00 00       	mov    edi,0x3f
c000494f:	31 d2                	xor    edx,edx
c0004951:	f7 f7                	div    edi
c0004953:	89 d6                	mov    esi,edx
c0004955:	31 d2                	xor    edx,edx
c0004957:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000495b:	89 c7                	mov    edi,eax
c000495d:	46                   	inc    esi
c000495e:	c1 ef 02             	shr    edi,0x2
c0004961:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004964:	83 e7 c0             	and    edi,0xffffffc0
c0004967:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c000496a:	09 fe                	or     esi,edi
c000496c:	89 f2                	mov    edx,esi
c000496e:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004971:	e9 24 ff ff ff       	jmp    c000489a <create_partition+0x4a4>
c0004976:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000497c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004981:	e8 36 d1 ff ff       	call   c0001abc <st_word>
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	6a 01                	push   0x1
c000498b:	6a 00                	push   0x0
c000498d:	6a 00                	push   0x0
c000498f:	53                   	push   ebx
c0004990:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004994:	e8 7c d0 ff ff       	call   c0001a15 <disk_write>
c0004999:	83 c4 20             	add    esp,0x20
c000499c:	85 c0                	test   eax,eax
c000499e:	0f 95 c0             	setne  al
c00049a1:	0f b6 c0             	movzx  eax,al
c00049a4:	83 c4 5c             	add    esp,0x5c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <get_fileinfo>:
c00049ac:	55                   	push   ebp
c00049ad:	57                   	push   edi
c00049ae:	56                   	push   esi
c00049af:	53                   	push   ebx
c00049b0:	83 ec 1c             	sub    esp,0x1c
c00049b3:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b9:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049bc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049c0:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049c3:	0f 84 dc 01 00 00    	je     c0004ba5 <get_fileinfo+0x1f9>
c00049c9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049cc:	75 0f                	jne    c00049dd <get_fileinfo+0x31>
c00049ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049d1:	83 c4 1c             	add    esp,0x1c
c00049d4:	5b                   	pop    ebx
c00049d5:	5e                   	pop    esi
c00049d6:	5f                   	pop    edi
c00049d7:	5d                   	pop    ebp
c00049d8:	e9 70 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049dd:	89 d3                	mov    ebx,edx
c00049df:	89 c6                	mov    esi,eax
c00049e1:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e5:	74 6a                	je     c0004a51 <get_fileinfo+0xa5>
c00049e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ef:	31 ed                	xor    ebp,ebp
c00049f1:	31 ff                	xor    edi,edi
c00049f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049fe:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a02:	66 85 d2             	test   dx,dx
c0004a05:	74 3e                	je     c0004a45 <get_fileinfo+0x99>
c0004a07:	66 85 ed             	test   bp,bp
c0004a0a:	75 0c                	jne    c0004a18 <get_fileinfo+0x6c>
c0004a0c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a12:	66 3d ff 07          	cmp    ax,0x7ff
c0004a16:	76 22                	jbe    c0004a3a <get_fileinfo+0x8e>
c0004a18:	89 e8                	mov    eax,ebp
c0004a1a:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1f:	c1 e0 10             	shl    eax,0x10
c0004a22:	29 f9                	sub    ecx,edi
c0004a24:	09 d0                	or     eax,edx
c0004a26:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a2a:	e8 bb d1 ff ff       	call   c0001bea <put_utf>
c0004a2f:	84 c0                	test   al,al
c0004a31:	74 10                	je     c0004a43 <get_fileinfo+0x97>
c0004a33:	0f b6 c0             	movzx  eax,al
c0004a36:	01 c7                	add    edi,eax
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3f:	89 d5                	mov    ebp,edx
c0004a41:	eb b0                	jmp    c00049f3 <get_fileinfo+0x47>
c0004a43:	31 ff                	xor    edi,edi
c0004a45:	66 85 ed             	test   bp,bp
c0004a48:	74 02                	je     c0004a4c <get_fileinfo+0xa0>
c0004a4a:	31 ff                	xor    edi,edi
c0004a4c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a51:	31 ff                	xor    edi,edi
c0004a53:	31 c9                	xor    ecx,ecx
c0004a55:	83 f9 0a             	cmp    ecx,0xa
c0004a58:	0f 87 ad 00 00 00    	ja     c0004b0b <get_fileinfo+0x15f>
c0004a5e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a61:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a64:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a68:	66 83 fa 20          	cmp    dx,0x20
c0004a6c:	0f 84 92 00 00 00    	je     c0004b04 <get_fileinfo+0x158>
c0004a72:	66 83 fa 05          	cmp    dx,0x5
c0004a76:	75 05                	jne    c0004a7d <get_fileinfo+0xd1>
c0004a78:	ba e5 00 00 00       	mov    edx,0xe5
c0004a7d:	83 fd 09             	cmp    ebp,0x9
c0004a80:	75 0b                	jne    c0004a8d <get_fileinfo+0xe1>
c0004a82:	83 ff 0b             	cmp    edi,0xb
c0004a85:	77 06                	ja     c0004a8d <get_fileinfo+0xe1>
c0004a87:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a8c:	47                   	inc    edi
c0004a8d:	0f b7 c2             	movzx  eax,dx
c0004a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a94:	e8 85 d0 ff ff       	call   c0001b1e <dbc_1st>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	74 2f                	je     c0004acc <get_fileinfo+0x120>
c0004a9d:	83 fd 08             	cmp    ebp,0x8
c0004aa0:	74 2a                	je     c0004acc <get_fileinfo+0x120>
c0004aa2:	83 fd 0b             	cmp    ebp,0xb
c0004aa5:	74 25                	je     c0004acc <get_fileinfo+0x120>
c0004aa7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aaa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ab2:	e8 6a d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004ab7:	85 c0                	test   eax,eax
c0004ab9:	74 11                	je     c0004acc <get_fileinfo+0x120>
c0004abb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004abf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ac2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac7:	c1 e2 08             	shl    edx,0x8
c0004aca:	09 c2                	or     edx,eax
c0004acc:	50                   	push   eax
c0004acd:	50                   	push   eax
c0004ace:	68 b5 01 00 00       	push   0x1b5
c0004ad3:	0f b7 d2             	movzx  edx,dx
c0004ad6:	52                   	push   edx
c0004ad7:	e8 17 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004adc:	83 c4 10             	add    esp,0x10
c0004adf:	66 85 c0             	test   ax,ax
c0004ae2:	75 04                	jne    c0004ae8 <get_fileinfo+0x13c>
c0004ae4:	31 ff                	xor    edi,edi
c0004ae6:	eb 23                	jmp    c0004b0b <get_fileinfo+0x15f>
c0004ae8:	b9 0c 00 00 00       	mov    ecx,0xc
c0004aed:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004af1:	29 f9                	sub    ecx,edi
c0004af3:	0f b7 c0             	movzx  eax,ax
c0004af6:	e8 ef d0 ff ff       	call   c0001bea <put_utf>
c0004afb:	84 c0                	test   al,al
c0004afd:	74 e5                	je     c0004ae4 <get_fileinfo+0x138>
c0004aff:	0f b6 c0             	movzx  eax,al
c0004b02:	01 c7                	add    edi,eax
c0004b04:	89 e9                	mov    ecx,ebp
c0004b06:	e9 4a ff ff ff       	jmp    c0004a55 <get_fileinfo+0xa9>
c0004b0b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b10:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b14:	75 54                	jne    c0004b6a <get_fileinfo+0x1be>
c0004b16:	85 ff                	test   edi,edi
c0004b18:	75 0b                	jne    c0004b25 <get_fileinfo+0x179>
c0004b1a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b1e:	ba 01 00 00 00       	mov    edx,0x1
c0004b23:	eb 33                	jmp    c0004b58 <get_fileinfo+0x1ac>
c0004b25:	b1 08                	mov    cl,0x8
c0004b27:	31 d2                	xor    edx,edx
c0004b29:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2f:	84 c0                	test   al,al
c0004b31:	74 25                	je     c0004b58 <get_fileinfo+0x1ac>
c0004b33:	66 83 f8 2e          	cmp    ax,0x2e
c0004b37:	74 16                	je     c0004b4f <get_fileinfo+0x1a3>
c0004b39:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b3c:	66 83 ff 19          	cmp    di,0x19
c0004b40:	77 0f                	ja     c0004b51 <get_fileinfo+0x1a5>
c0004b42:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b45:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b48:	74 07                	je     c0004b51 <get_fileinfo+0x1a5>
c0004b4a:	83 c0 20             	add    eax,0x20
c0004b4d:	eb 02                	jmp    c0004b51 <get_fileinfo+0x1a5>
c0004b4f:	b1 10                	mov    cl,0x10
c0004b51:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b55:	42                   	inc    edx
c0004b56:	eb d1                	jmp    c0004b29 <get_fileinfo+0x17d>
c0004b58:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b5d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b60:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b64:	75 04                	jne    c0004b6a <get_fileinfo+0x1be>
c0004b66:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b6a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b70:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b73:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b76:	83 c0 1c             	add    eax,0x1c
c0004b79:	e8 d9 ce ff ff       	call   c0001a57 <ld_dword>
c0004b7e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b85:	89 03                	mov    DWORD PTR [ebx],eax
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	83 c0 16             	add    eax,0x16
c0004b8d:	e8 b8 ce ff ff       	call   c0001a4a <ld_word>
c0004b92:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b99:	83 c0 18             	add    eax,0x18
c0004b9c:	e8 a9 ce ff ff       	call   c0001a4a <ld_word>
c0004ba1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba5:	83 c4 1c             	add    esp,0x1c
c0004ba8:	5b                   	pop    ebx
c0004ba9:	5e                   	pop    esi
c0004baa:	5f                   	pop    edi
c0004bab:	5d                   	pop    ebp
c0004bac:	c3                   	ret    

c0004bad <ld_clust.isra.0>:
c0004bad:	56                   	push   esi
c0004bae:	89 c6                	mov    esi,eax
c0004bb0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bb3:	53                   	push   ebx
c0004bb4:	89 d3                	mov    ebx,edx
c0004bb6:	e8 8f ce ff ff       	call   c0001a4a <ld_word>
c0004bbb:	0f b7 c8             	movzx  ecx,ax
c0004bbe:	89 f0                	mov    eax,esi
c0004bc0:	3c 03                	cmp    al,0x3
c0004bc2:	75 0d                	jne    c0004bd1 <ld_clust.isra.0+0x24>
c0004bc4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc7:	e8 7e ce ff ff       	call   c0001a4a <ld_word>
c0004bcc:	c1 e0 10             	shl    eax,0x10
c0004bcf:	09 c1                	or     ecx,eax
c0004bd1:	5b                   	pop    ebx
c0004bd2:	89 c8                	mov    eax,ecx
c0004bd4:	5e                   	pop    esi
c0004bd5:	c3                   	ret    

c0004bd6 <st_clust.isra.1>:
c0004bd6:	56                   	push   esi
c0004bd7:	89 c6                	mov    esi,eax
c0004bd9:	53                   	push   ebx
c0004bda:	89 d3                	mov    ebx,edx
c0004bdc:	0f b7 d1             	movzx  edx,cx
c0004bdf:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004be2:	e8 d5 ce ff ff       	call   c0001abc <st_word>
c0004be7:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bea:	75 0f                	jne    c0004bfb <st_clust.isra.1+0x25>
c0004bec:	c1 e9 10             	shr    ecx,0x10
c0004bef:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bf2:	89 ca                	mov    edx,ecx
c0004bf4:	5b                   	pop    ebx
c0004bf5:	5e                   	pop    esi
c0004bf6:	e9 c1 ce ff ff       	jmp    c0001abc <st_word>
c0004bfb:	5b                   	pop    ebx
c0004bfc:	5e                   	pop    esi
c0004bfd:	c3                   	ret    

c0004bfe <init_alloc_info.isra.2>:
c0004bfe:	56                   	push   esi
c0004bff:	89 c6                	mov    esi,eax
c0004c01:	53                   	push   ebx
c0004c02:	89 d3                	mov    ebx,edx
c0004c04:	51                   	push   ecx
c0004c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c07:	83 c0 34             	add    eax,0x34
c0004c0a:	e8 48 ce ff ff       	call   c0001a57 <ld_dword>
c0004c0f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c12:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c14:	83 c0 38             	add    eax,0x38
c0004c17:	e8 53 ce ff ff       	call   c0001a6f <ld_qword>
c0004c1c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c22:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c24:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c27:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c2e:	83 e0 02             	and    eax,0x2
c0004c31:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c34:	5b                   	pop    ebx
c0004c35:	5b                   	pop    ebx
c0004c36:	5e                   	pop    esi
c0004c37:	c3                   	ret    

c0004c38 <follow_path>:
c0004c38:	56                   	push   esi
c0004c39:	53                   	push   ebx
c0004c3a:	89 c3                	mov    ebx,eax
c0004c3c:	83 ec 14             	sub    esp,0x14
c0004c3f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c49:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c4b:	80 fa 2f             	cmp    dl,0x2f
c0004c4e:	75 07                	jne    c0004c57 <follow_path+0x1f>
c0004c50:	40                   	inc    eax
c0004c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c55:	eb ee                	jmp    c0004c45 <follow_path+0xd>
c0004c57:	80 fa 5c             	cmp    dl,0x5c
c0004c5a:	74 f4                	je     c0004c50 <follow_path+0x18>
c0004c5c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c63:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c6d:	77 52                	ja     c0004cc1 <follow_path+0x89>
c0004c6f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c73:	31 d2                	xor    edx,edx
c0004c75:	89 d8                	mov    eax,ebx
c0004c77:	e8 1d e3 ff ff       	call   c0002f99 <dir_sdi>
c0004c7c:	eb 7c                	jmp    c0004cfa <follow_path+0xc2>
c0004c7e:	89 d8                	mov    eax,ebx
c0004c80:	e8 60 f2 ff ff       	call   c0003ee5 <dir_find>
c0004c85:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	75 46                	jne    c0004cd2 <follow_path+0x9a>
c0004c8c:	80 e2 04             	and    dl,0x4
c0004c8f:	75 69                	jne    c0004cfa <follow_path+0xc2>
c0004c91:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c95:	74 5e                	je     c0004cf5 <follow_path+0xbd>
c0004c97:	8a 06                	mov    al,BYTE PTR [esi]
c0004c99:	3c 04                	cmp    al,0x4
c0004c9b:	75 41                	jne    c0004cde <follow_path+0xa6>
c0004c9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ca0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ca4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004caa:	30 c0                	xor    al,al
c0004cac:	09 d0                	or     eax,edx
c0004cae:	89 da                	mov    edx,ebx
c0004cb0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cb3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb9:	8d 46 10             	lea    eax,[esi+0x10]
c0004cbc:	e8 3d ff ff ff       	call   c0004bfe <init_alloc_info.isra.2>
c0004cc1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc5:	89 d8                	mov    eax,ebx
c0004cc7:	e8 b6 ed ff ff       	call   c0003a82 <create_name>
c0004ccc:	85 c0                	test   eax,eax
c0004cce:	74 ae                	je     c0004c7e <follow_path+0x46>
c0004cd0:	eb 28                	jmp    c0004cfa <follow_path+0xc2>
c0004cd2:	83 f8 04             	cmp    eax,0x4
c0004cd5:	75 23                	jne    c0004cfa <follow_path+0xc2>
c0004cd7:	80 e2 04             	and    dl,0x4
c0004cda:	74 19                	je     c0004cf5 <follow_path+0xbd>
c0004cdc:	eb 1c                	jmp    c0004cfa <follow_path+0xc2>
c0004cde:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ce1:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce7:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ceb:	e8 bd fe ff ff       	call   c0004bad <ld_clust.isra.0>
c0004cf0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cf3:	eb cc                	jmp    c0004cc1 <follow_path+0x89>
c0004cf5:	b8 05 00 00 00       	mov    eax,0x5
c0004cfa:	83 c4 14             	add    esp,0x14
c0004cfd:	5b                   	pop    ebx
c0004cfe:	5e                   	pop    esi
c0004cff:	c3                   	ret    

c0004d00 <f_mount>:
c0004d00:	53                   	push   ebx
c0004d01:	83 ec 18             	sub    esp,0x18
c0004d04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d08:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d14:	e8 13 d3 ff ff       	call   c000202c <get_ldnumber>
c0004d19:	89 c2                	mov    edx,eax
c0004d1b:	b8 0b 00 00 00       	mov    eax,0xb
c0004d20:	85 d2                	test   edx,edx
c0004d22:	78 39                	js     c0004d5d <f_mount+0x5d>
c0004d24:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d2b:	85 c0                	test   eax,eax
c0004d2d:	74 03                	je     c0004d32 <f_mount+0x32>
c0004d2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d36:	85 c0                	test   eax,eax
c0004d38:	74 03                	je     c0004d3d <f_mount+0x3d>
c0004d3a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d41:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d48:	31 c0                	xor    eax,eax
c0004d4a:	84 db                	test   bl,bl
c0004d4c:	74 0f                	je     c0004d5d <f_mount+0x5d>
c0004d4e:	31 c9                	xor    ecx,ecx
c0004d50:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d54:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d58:	e8 6f d7 ff ff       	call   c00024cc <mount_volume>
c0004d5d:	83 c4 18             	add    esp,0x18
c0004d60:	5b                   	pop    ebx
c0004d61:	c3                   	ret    

c0004d62 <f_open>:
c0004d62:	55                   	push   ebp
c0004d63:	bd 09 00 00 00       	mov    ebp,0x9
c0004d68:	57                   	push   edi
c0004d69:	56                   	push   esi
c0004d6a:	53                   	push   ebx
c0004d6b:	83 ec 7c             	sub    esp,0x7c
c0004d6e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d75:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d7c:	85 db                	test   ebx,ebx
c0004d7e:	0f 84 10 04 00 00    	je     c0005194 <f_open+0x432>
c0004d84:	89 fe                	mov    esi,edi
c0004d86:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8a:	83 e6 3f             	and    esi,0x3f
c0004d8d:	89 f0                	mov    eax,esi
c0004d8f:	0f b6 c8             	movzx  ecx,al
c0004d92:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d99:	e8 2e d7 ff ff       	call   c00024cc <mount_volume>
c0004d9e:	89 c5                	mov    ebp,eax
c0004da0:	85 c0                	test   eax,eax
c0004da2:	0f 85 e6 03 00 00    	jne    c000518e <f_open+0x42c>
c0004da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dac:	83 ec 0c             	sub    esp,0xc
c0004daf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004db3:	bd 11 00 00 00       	mov    ebp,0x11
c0004db8:	68 60 04 00 00       	push   0x460
c0004dbd:	e8 6e 34 00 00       	call   c0008230 <ff_memalloc>
c0004dc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc6:	83 c4 10             	add    esp,0x10
c0004dc9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dce:	0f 84 c0 03 00 00    	je     c0005194 <f_open+0x432>
c0004dd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ddc:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004de2:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de8:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004def:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df3:	e8 40 fe ff ff       	call   c0004c38 <follow_path>
c0004df8:	89 c5                	mov    ebp,eax
c0004dfa:	85 c0                	test   eax,eax
c0004dfc:	75 0c                	jne    c0004e0a <f_open+0xa8>
c0004dfe:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e03:	79 05                	jns    c0004e0a <f_open+0xa8>
c0004e05:	bd 06 00 00 00       	mov    ebp,0x6
c0004e0a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e10:	0f 84 84 01 00 00    	je     c0004f9a <f_open+0x238>
c0004e16:	85 ed                	test   ebp,ebp
c0004e18:	74 20                	je     c0004e3a <f_open+0xd8>
c0004e1a:	83 fd 04             	cmp    ebp,0x4
c0004e1d:	0f 85 58 03 00 00    	jne    c000517b <f_open+0x419>
c0004e23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e27:	83 ce 08             	or     esi,0x8
c0004e2a:	e8 7d f2 ff ff       	call   c00040ac <dir_register>
c0004e2f:	89 c5                	mov    ebp,eax
c0004e31:	85 c0                	test   eax,eax
c0004e33:	74 2f                	je     c0004e64 <f_open+0x102>
c0004e35:	e9 41 03 00 00       	jmp    c000517b <f_open+0x419>
c0004e3a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e44:	0f 85 31 03 00 00    	jne    c000517b <f_open+0x419>
c0004e4a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e55:	0f 85 20 03 00 00    	jne    c000517b <f_open+0x419>
c0004e5b:	83 e7 08             	and    edi,0x8
c0004e5e:	0f 84 65 01 00 00    	je     c0004fc9 <f_open+0x267>
c0004e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e68:	8a 02                	mov    al,BYTE PTR [edx]
c0004e6a:	3c 04                	cmp    al,0x4
c0004e6c:	0f 85 97 00 00 00    	jne    c0004f09 <f_open+0x1a7>
c0004e72:	8d 42 10             	lea    eax,[edx+0x10]
c0004e75:	89 13                	mov    DWORD PTR [ebx],edx
c0004e77:	89 da                	mov    edx,ebx
c0004e79:	e8 80 fd ff ff       	call   c0004bfe <init_alloc_info.isra.2>
c0004e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e82:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e85:	31 d2                	xor    edx,edx
c0004e87:	83 c0 02             	add    eax,0x2
c0004e8a:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8f:	e8 4a cc ff ff       	call   c0001ade <mem_set>
c0004e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9b:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea0:	83 c0 26             	add    eax,0x26
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	e8 34 cc ff ff       	call   c0001ade <mem_set>
c0004eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eb1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ebd:	83 c0 08             	add    eax,0x8
c0004ec0:	e8 fb cb ff ff       	call   c0001ac0 <st_dword>
c0004ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecc:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ed0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed4:	e8 c4 ea ff ff       	call   c000399d <store_xdir>
c0004ed9:	89 c5                	mov    ebp,eax
c0004edb:	85 c0                	test   eax,eax
c0004edd:	0f 85 98 02 00 00    	jne    c000517b <f_open+0x419>
c0004ee3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee6:	85 d2                	test   edx,edx
c0004ee8:	0f 84 db 00 00 00    	je     c0004fc9 <f_open+0x267>
c0004eee:	31 c9                	xor    ecx,ecx
c0004ef0:	89 d8                	mov    eax,ebx
c0004ef2:	e8 9b e3 ff ff       	call   c0003292 <remove_chain>
c0004ef7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004efb:	89 c5                	mov    ebp,eax
c0004efd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f00:	48                   	dec    eax
c0004f01:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f04:	e9 b8 00 00 00       	jmp    c0004fc1 <f_open+0x25f>
c0004f09:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f0d:	89 ea                	mov    edx,ebp
c0004f0f:	e8 99 fc ff ff       	call   c0004bad <ld_clust.isra.0>
c0004f14:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f19:	89 c7                	mov    edi,eax
c0004f1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f1e:	e8 9d cb ff ff       	call   c0001ac0 <st_dword>
c0004f23:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f27:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f2b:	31 c9                	xor    ecx,ecx
c0004f2d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f35:	e8 9c fc ff ff       	call   c0004bd6 <st_clust.isra.1>
c0004f3a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3e:	83 c0 1c             	add    eax,0x1c
c0004f41:	31 d2                	xor    edx,edx
c0004f43:	e8 78 cb ff ff       	call   c0001ac0 <st_dword>
c0004f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4c:	85 ff                	test   edi,edi
c0004f4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f52:	74 75                	je     c0004fc9 <f_open+0x267>
c0004f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f58:	31 c9                	xor    ecx,ecx
c0004f5a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f5d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f68:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f6c:	89 fa                	mov    edx,edi
c0004f6e:	e8 1f e3 ff ff       	call   c0003292 <remove_chain>
c0004f73:	89 c5                	mov    ebp,eax
c0004f75:	85 c0                	test   eax,eax
c0004f77:	0f 85 fe 01 00 00    	jne    c000517b <f_open+0x419>
c0004f7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f89:	4f                   	dec    edi
c0004f8a:	e8 92 d2 ff ff       	call   c0002221 <move_window>
c0004f8f:	89 c5                	mov    ebp,eax
c0004f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f95:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f98:	eb 27                	jmp    c0004fc1 <f_open+0x25f>
c0004f9a:	85 ed                	test   ebp,ebp
c0004f9c:	0f 85 d9 01 00 00    	jne    c000517b <f_open+0x419>
c0004fa2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa6:	bd 04 00 00 00       	mov    ebp,0x4
c0004fab:	a8 10                	test   al,0x10
c0004fad:	0f 85 c8 01 00 00    	jne    c000517b <f_open+0x419>
c0004fb3:	83 e7 02             	and    edi,0x2
c0004fb6:	74 11                	je     c0004fc9 <f_open+0x267>
c0004fb8:	bd 07 00 00 00       	mov    ebp,0x7
c0004fbd:	a8 01                	test   al,0x1
c0004fbf:	eb 02                	jmp    c0004fc3 <f_open+0x261>
c0004fc1:	85 ed                	test   ebp,ebp
c0004fc3:	0f 85 b2 01 00 00    	jne    c000517b <f_open+0x419>
c0004fc9:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fcf:	74 03                	je     c0004fd4 <f_open+0x272>
c0004fd1:	83 ce 40             	or     esi,0x40
c0004fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fdb:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fde:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fe1:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe5:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe8:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004feb:	8a 02                	mov    al,BYTE PTR [edx]
c0004fed:	3c 04                	cmp    al,0x4
c0004fef:	75 2a                	jne    c000501b <f_open+0x2b9>
c0004ff1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ffc:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005001:	30 c0                	xor    al,al
c0005003:	09 c8                	or     eax,ecx
c0005005:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005008:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000500c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500f:	8d 42 10             	lea    eax,[edx+0x10]
c0005012:	89 da                	mov    edx,ebx
c0005014:	e8 e5 fb ff ff       	call   c0004bfe <init_alloc_info.isra.2>
c0005019:	eb 1c                	jmp    c0005037 <f_open+0x2d5>
c000501b:	89 fa                	mov    edx,edi
c000501d:	e8 8b fb ff ff       	call   c0004bad <ld_clust.isra.0>
c0005022:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005025:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005028:	e8 2a ca ff ff       	call   c0001a57 <ld_dword>
c000502d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005034:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000503b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005042:	89 03                	mov    DWORD PTR [ebx],eax
c0005044:	31 d2                	xor    edx,edx
c0005046:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000504a:	b9 00 02 00 00       	mov    ecx,0x200
c000504f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005053:	89 f0                	mov    eax,esi
c0005055:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005058:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000505c:	8d 43 50             	lea    eax,[ebx+0x50]
c000505f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005066:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000506d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005074:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000507b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507f:	e8 5a ca ff ff       	call   c0001ade <mem_set>
c0005084:	83 e6 20             	and    esi,0x20
c0005087:	75 07                	jne    c0005090 <f_open+0x32e>
c0005089:	31 ed                	xor    ebp,ebp
c000508b:	e9 eb 00 00 00       	jmp    c000517b <f_open+0x419>
c0005090:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005093:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005096:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000509e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050a2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a6:	74 e1                	je     c0005089 <f_open+0x327>
c00050a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050b0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b7:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ba:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050bd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050c1:	c1 e5 09             	shl    ebp,0x9
c00050c4:	31 ff                	xor    edi,edi
c00050c6:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ca:	89 f8                	mov    eax,edi
c00050cc:	89 ee                	mov    esi,ebp
c00050ce:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050d2:	73 22                	jae    c00050f6 <f_open+0x394>
c00050d4:	89 d8                	mov    eax,ebx
c00050d6:	e8 c8 dc ff ff       	call   c0002da3 <get_fat>
c00050db:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050df:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050e3:	89 c2                	mov    edx,eax
c00050e5:	83 f8 01             	cmp    eax,0x1
c00050e8:	76 10                	jbe    c00050fa <f_open+0x398>
c00050ea:	83 f8 ff             	cmp    eax,0xffffffff
c00050ed:	75 d5                	jne    c00050c4 <f_open+0x362>
c00050ef:	bd 01 00 00 00       	mov    ebp,0x1
c00050f4:	eb 09                	jmp    c00050ff <f_open+0x39d>
c00050f6:	31 ed                	xor    ebp,ebp
c00050f8:	eb 05                	jmp    c00050ff <f_open+0x39d>
c00050fa:	bd 02 00 00 00       	mov    ebp,0x2
c00050ff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005102:	85 ed                	test   ebp,ebp
c0005104:	75 75                	jne    c000517b <f_open+0x419>
c0005106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000510a:	25 ff 01 00 00       	and    eax,0x1ff
c000510f:	0f 84 74 ff ff ff    	je     c0005089 <f_open+0x327>
c0005115:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005119:	bd 02 00 00 00       	mov    ebp,0x2
c000511e:	89 c8                	mov    eax,ecx
c0005120:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005124:	e8 ba cb ff ff       	call   c0001ce3 <clst2sect>
c0005129:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000512d:	89 d7                	mov    edi,edx
c000512f:	09 c7                	or     edi,eax
c0005131:	74 48                	je     c000517b <f_open+0x419>
c0005133:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005137:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000513b:	0f ac fe 09          	shrd   esi,edi,0x9
c000513f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005143:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000514b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005153:	83 ec 0c             	sub    esp,0xc
c0005156:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005159:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000515c:	6a 01                	push   0x1
c000515e:	52                   	push   edx
c000515f:	50                   	push   eax
c0005160:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005164:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005168:	50                   	push   eax
c0005169:	e8 91 c8 ff ff       	call   c00019ff <disk_read>
c000516e:	83 c4 20             	add    esp,0x20
c0005171:	85 c0                	test   eax,eax
c0005173:	0f 95 c0             	setne  al
c0005176:	0f b6 c0             	movzx  eax,al
c0005179:	89 c5                	mov    ebp,eax
c000517b:	83 ec 0c             	sub    esp,0xc
c000517e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005182:	e8 bf 30 00 00       	call   c0008246 <ff_memfree>
c0005187:	83 c4 10             	add    esp,0x10
c000518a:	85 ed                	test   ebp,ebp
c000518c:	74 06                	je     c0005194 <f_open+0x432>
c000518e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005194:	83 c4 7c             	add    esp,0x7c
c0005197:	89 e8                	mov    eax,ebp
c0005199:	5b                   	pop    ebx
c000519a:	5e                   	pop    esi
c000519b:	5f                   	pop    edi
c000519c:	5d                   	pop    ebp
c000519d:	c3                   	ret    

c000519e <f_read>:
c000519e:	55                   	push   ebp
c000519f:	57                   	push   edi
c00051a0:	56                   	push   esi
c00051a1:	53                   	push   ebx
c00051a2:	83 ec 2c             	sub    esp,0x2c
c00051a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b7:	89 d8                	mov    eax,ebx
c00051b9:	e8 88 cf ff ff       	call   c0002146 <validate>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	85 c0                	test   eax,eax
c00051c2:	0f 85 4c 02 00 00    	jne    c0005414 <f_read+0x276>
c00051c8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051cc:	85 ed                	test   ebp,ebp
c00051ce:	0f 85 40 02 00 00    	jne    c0005414 <f_read+0x276>
c00051d4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d8:	0f 84 31 02 00 00    	je     c000540f <f_read+0x271>
c00051de:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051e1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051e4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e7:	bf 00 00 00 00       	mov    edi,0x0
c00051ec:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ef:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051f3:	89 d1                	mov    ecx,edx
c00051f5:	19 f9                	sbb    ecx,edi
c00051f7:	0f 83 cf 00 00 00    	jae    c00052cc <f_read+0x12e>
c00051fd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005201:	e9 c6 00 00 00       	jmp    c00052cc <f_read+0x12e>
c0005206:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005209:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000520c:	89 d0                	mov    eax,edx
c000520e:	25 ff 01 00 00       	and    eax,0x1ff
c0005213:	0f 85 c9 01 00 00    	jne    c00053e2 <f_read+0x244>
c0005219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000521d:	89 d6                	mov    esi,edx
c000521f:	89 cf                	mov    edi,ecx
c0005221:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005225:	0f ac fe 09          	shrd   esi,edi,0x9
c0005229:	48                   	dec    eax
c000522a:	21 f0                	and    eax,esi
c000522c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005230:	0f 84 a6 00 00 00    	je     c00052dc <f_read+0x13e>
c0005236:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000523a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000523d:	89 c8                	mov    eax,ecx
c000523f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005242:	e8 9c ca ff ff       	call   c0001ce3 <clst2sect>
c0005247:	89 d7                	mov    edi,edx
c0005249:	09 c7                	or     edi,eax
c000524b:	0f 84 b4 00 00 00    	je     c0005305 <f_read+0x167>
c0005251:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005255:	31 ff                	xor    edi,edi
c0005257:	01 c6                	add    esi,eax
c0005259:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000525c:	11 d7                	adc    edi,edx
c000525e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005266:	0f 86 fd 00 00 00    	jbe    c0005369 <f_read+0x1cb>
c000526c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005270:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005274:	c1 e8 09             	shr    eax,0x9
c0005277:	89 04 24             	mov    DWORD PTR [esp],eax
c000527a:	03 14 24             	add    edx,DWORD PTR [esp]
c000527d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005281:	39 c2                	cmp    edx,eax
c0005283:	76 07                	jbe    c000528c <f_read+0xee>
c0005285:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005289:	89 04 24             	mov    DWORD PTR [esp],eax
c000528c:	83 ec 0c             	sub    esp,0xc
c000528f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005293:	57                   	push   edi
c0005294:	56                   	push   esi
c0005295:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005299:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000529d:	50                   	push   eax
c000529e:	e8 5c c7 ff ff       	call   c00019ff <disk_read>
c00052a3:	83 c4 20             	add    esp,0x20
c00052a6:	85 c0                	test   eax,eax
c00052a8:	75 6e                	jne    c0005318 <f_read+0x17a>
c00052aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052ae:	78 7e                	js     c000532e <f_read+0x190>
c00052b0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052b3:	c1 e6 09             	shl    esi,0x9
c00052b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ba:	31 ff                	xor    edi,edi
c00052bc:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052c0:	01 30                	add    DWORD PTR [eax],esi
c00052c2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c6:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c9:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052cc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052d1:	0f 85 2f ff ff ff    	jne    c0005206 <f_read+0x68>
c00052d7:	e9 38 01 00 00       	jmp    c0005414 <f_read+0x276>
c00052dc:	89 c8                	mov    eax,ecx
c00052de:	09 d0                	or     eax,edx
c00052e0:	75 05                	jne    c00052e7 <f_read+0x149>
c00052e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e5:	eb 19                	jmp    c0005300 <f_read+0x162>
c00052e7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052eb:	74 09                	je     c00052f6 <f_read+0x158>
c00052ed:	89 d8                	mov    eax,ebx
c00052ef:	e8 10 ca ff ff       	call   c0001d04 <clmt_clust>
c00052f4:	eb 0a                	jmp    c0005300 <f_read+0x162>
c00052f6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f9:	89 d8                	mov    eax,ebx
c00052fb:	e8 a3 da ff ff       	call   c0002da3 <get_fat>
c0005300:	83 f8 01             	cmp    eax,0x1
c0005303:	77 0e                	ja     c0005313 <f_read+0x175>
c0005305:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005309:	bd 02 00 00 00       	mov    ebp,0x2
c000530e:	e9 01 01 00 00       	jmp    c0005414 <f_read+0x276>
c0005313:	83 f8 ff             	cmp    eax,0xffffffff
c0005316:	75 0e                	jne    c0005326 <f_read+0x188>
c0005318:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000531c:	bd 01 00 00 00       	mov    ebp,0x1
c0005321:	e9 ee 00 00 00       	jmp    c0005414 <f_read+0x276>
c0005326:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005329:	e9 08 ff ff ff       	jmp    c0005236 <f_read+0x98>
c000532e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005331:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005334:	29 f0                	sub    eax,esi
c0005336:	19 fa                	sbb    edx,edi
c0005338:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000533b:	89 d7                	mov    edi,edx
c000533d:	ba 00 00 00 00       	mov    edx,0x0
c0005342:	89 f9                	mov    ecx,edi
c0005344:	19 d1                	sbb    ecx,edx
c0005346:	0f 83 64 ff ff ff    	jae    c00052b0 <f_read+0x112>
c000534c:	89 c7                	mov    edi,eax
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	c1 e7 09             	shl    edi,0x9
c0005355:	8d 53 50             	lea    edx,[ebx+0x50]
c0005358:	01 f8                	add    eax,edi
c000535a:	b9 00 02 00 00       	mov    ecx,0x200
c000535f:	e8 65 c7 ff ff       	call   c0001ac9 <mem_cpy>
c0005364:	e9 47 ff ff ff       	jmp    c00052b0 <f_read+0x112>
c0005369:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000536c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005373:	89 04 24             	mov    DWORD PTR [esp],eax
c0005376:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000537a:	75 05                	jne    c0005381 <f_read+0x1e3>
c000537c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537f:	74 5b                	je     c00053dc <f_read+0x23e>
c0005381:	8d 43 50             	lea    eax,[ebx+0x50]
c0005384:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005388:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000538c:	79 2a                	jns    c00053b8 <f_read+0x21a>
c000538e:	83 ec 0c             	sub    esp,0xc
c0005391:	6a 01                	push   0x1
c0005393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000539b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a3:	50                   	push   eax
c00053a4:	e8 6c c6 ff ff       	call   c0001a15 <disk_write>
c00053a9:	83 c4 20             	add    esp,0x20
c00053ac:	85 c0                	test   eax,eax
c00053ae:	0f 85 64 ff ff ff    	jne    c0005318 <f_read+0x17a>
c00053b4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b8:	83 ec 0c             	sub    esp,0xc
c00053bb:	6a 01                	push   0x1
c00053bd:	57                   	push   edi
c00053be:	56                   	push   esi
c00053bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053cb:	50                   	push   eax
c00053cc:	e8 2e c6 ff ff       	call   c00019ff <disk_read>
c00053d1:	83 c4 20             	add    esp,0x20
c00053d4:	85 c0                	test   eax,eax
c00053d6:	0f 85 3c ff ff ff    	jne    c0005318 <f_read+0x17a>
c00053dc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053df:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e5:	ba 00 02 00 00       	mov    edx,0x200
c00053ea:	25 ff 01 00 00       	and    eax,0x1ff
c00053ef:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053f3:	29 c2                	sub    edx,eax
c00053f5:	39 d6                	cmp    esi,edx
c00053f7:	76 02                	jbe    c00053fb <f_read+0x25d>
c00053f9:	89 d6                	mov    esi,edx
c00053fb:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053ff:	89 f1                	mov    ecx,esi
c0005401:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005405:	e8 bf c6 ff ff       	call   c0001ac9 <mem_cpy>
c000540a:	e9 a7 fe ff ff       	jmp    c00052b6 <f_read+0x118>
c000540f:	bd 07 00 00 00       	mov    ebp,0x7
c0005414:	83 c4 2c             	add    esp,0x2c
c0005417:	89 e8                	mov    eax,ebp
c0005419:	5b                   	pop    ebx
c000541a:	5e                   	pop    esi
c000541b:	5f                   	pop    edi
c000541c:	5d                   	pop    ebp
c000541d:	c3                   	ret    

c000541e <f_write>:
c000541e:	55                   	push   ebp
c000541f:	57                   	push   edi
c0005420:	56                   	push   esi
c0005421:	53                   	push   ebx
c0005422:	83 ec 2c             	sub    esp,0x2c
c0005425:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005429:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000542d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005431:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005437:	89 d8                	mov    eax,ebx
c0005439:	e8 08 cd ff ff       	call   c0002146 <validate>
c000543e:	89 c5                	mov    ebp,eax
c0005440:	85 c0                	test   eax,eax
c0005442:	0f 85 86 02 00 00    	jne    c00056ce <f_write+0x2b0>
c0005448:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000544c:	85 ed                	test   ebp,ebp
c000544e:	0f 85 7a 02 00 00    	jne    c00056ce <f_write+0x2b0>
c0005454:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005458:	0f 84 6b 02 00 00    	je     c00056c9 <f_write+0x2ab>
c000545e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005462:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005465:	0f 84 43 01 00 00    	je     c00055ae <f_write+0x190>
c000546b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000546e:	89 c1                	mov    ecx,eax
c0005470:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005474:	0f 83 34 01 00 00    	jae    c00055ae <f_write+0x190>
c000547a:	f7 d0                	not    eax
c000547c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005480:	e9 29 01 00 00       	jmp    c00055ae <f_write+0x190>
c0005485:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005488:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000548b:	89 d0                	mov    eax,edx
c000548d:	25 ff 01 00 00       	and    eax,0x1ff
c0005492:	0f 85 00 02 00 00    	jne    c0005698 <f_write+0x27a>
c0005498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000549c:	89 d6                	mov    esi,edx
c000549e:	89 cf                	mov    edi,ecx
c00054a0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054a4:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a8:	48                   	dec    eax
c00054a9:	21 f0                	and    eax,esi
c00054ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054af:	0f 84 06 01 00 00    	je     c00055bb <f_write+0x19d>
c00054b5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b9:	0f 88 6e 01 00 00    	js     c000562d <f_write+0x20f>
c00054bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054c3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c6:	89 c8                	mov    eax,ecx
c00054c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054cc:	e8 12 c8 ff ff       	call   c0001ce3 <clst2sect>
c00054d1:	89 d1                	mov    ecx,edx
c00054d3:	09 c1                	or     ecx,eax
c00054d5:	0f 84 1c 01 00 00    	je     c00055f7 <f_write+0x1d9>
c00054db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054df:	31 ff                	xor    edi,edi
c00054e1:	01 c6                	add    esi,eax
c00054e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e7:	11 d7                	adc    edi,edx
c00054e9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054f1:	0f 86 63 01 00 00    	jbe    c000565a <f_write+0x23c>
c00054f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ff:	c1 e8 09             	shr    eax,0x9
c0005502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005506:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000550a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000550e:	39 c2                	cmp    edx,eax
c0005510:	76 08                	jbe    c000551a <f_write+0xfc>
c0005512:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005516:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551a:	83 ec 0c             	sub    esp,0xc
c000551d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005521:	57                   	push   edi
c0005522:	56                   	push   esi
c0005523:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005527:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000552b:	50                   	push   eax
c000552c:	e8 e4 c4 ff ff       	call   c0001a15 <disk_write>
c0005531:	83 c4 20             	add    esp,0x20
c0005534:	85 c0                	test   eax,eax
c0005536:	0f 85 ce 00 00 00    	jne    c000560a <f_write+0x1ec>
c000553c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005542:	29 f0                	sub    eax,esi
c0005544:	19 fa                	sbb    edx,edi
c0005546:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000554a:	89 d7                	mov    edi,edx
c000554c:	ba 00 00 00 00       	mov    edx,0x0
c0005551:	89 f9                	mov    ecx,edi
c0005553:	19 d1                	sbb    ecx,edx
c0005555:	73 1c                	jae    c0005573 <f_write+0x155>
c0005557:	89 c7                	mov    edi,eax
c0005559:	b9 00 02 00 00       	mov    ecx,0x200
c000555e:	c1 e7 09             	shl    edi,0x9
c0005561:	8d 43 50             	lea    eax,[ebx+0x50]
c0005564:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005568:	89 fa                	mov    edx,edi
c000556a:	e8 5a c5 ff ff       	call   c0001ac9 <mem_cpy>
c000556f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005573:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005577:	c1 e6 09             	shl    esi,0x9
c000557a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000557e:	31 ff                	xor    edi,edi
c0005580:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005584:	01 30                	add    DWORD PTR [eax],esi
c0005586:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000558a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000558d:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005590:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005593:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005596:	89 c1                	mov    ecx,eax
c0005598:	39 f2                	cmp    edx,esi
c000559a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000559d:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055a0:	19 f9                	sbb    ecx,edi
c00055a2:	73 04                	jae    c00055a8 <f_write+0x18a>
c00055a4:	89 f2                	mov    edx,esi
c00055a6:	89 f8                	mov    eax,edi
c00055a8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055ae:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055b3:	0f 85 cc fe ff ff    	jne    c0005485 <f_write+0x67>
c00055b9:	eb 2e                	jmp    c00055e9 <f_write+0x1cb>
c00055bb:	89 c8                	mov    eax,ecx
c00055bd:	09 d0                	or     eax,edx
c00055bf:	75 0b                	jne    c00055cc <f_write+0x1ae>
c00055c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055c4:	31 d2                	xor    edx,edx
c00055c6:	85 c0                	test   eax,eax
c00055c8:	75 28                	jne    c00055f2 <f_write+0x1d4>
c00055ca:	eb 12                	jmp    c00055de <f_write+0x1c0>
c00055cc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055d0:	74 09                	je     c00055db <f_write+0x1bd>
c00055d2:	89 d8                	mov    eax,ebx
c00055d4:	e8 2b c7 ff ff       	call   c0001d04 <clmt_clust>
c00055d9:	eb 0a                	jmp    c00055e5 <f_write+0x1c7>
c00055db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055de:	89 d8                	mov    eax,ebx
c00055e0:	e8 ac da ff ff       	call   c0003091 <create_chain>
c00055e5:	85 c0                	test   eax,eax
c00055e7:	75 09                	jne    c00055f2 <f_write+0x1d4>
c00055e9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055ed:	e9 dc 00 00 00       	jmp    c00056ce <f_write+0x2b0>
c00055f2:	83 f8 01             	cmp    eax,0x1
c00055f5:	75 0e                	jne    c0005605 <f_write+0x1e7>
c00055f7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055fb:	bd 02 00 00 00       	mov    ebp,0x2
c0005600:	e9 c9 00 00 00       	jmp    c00056ce <f_write+0x2b0>
c0005605:	83 f8 ff             	cmp    eax,0xffffffff
c0005608:	75 0e                	jne    c0005618 <f_write+0x1fa>
c000560a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000560e:	bd 01 00 00 00       	mov    ebp,0x1
c0005613:	e9 b6 00 00 00       	jmp    c00056ce <f_write+0x2b0>
c0005618:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000561b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561f:	0f 85 90 fe ff ff    	jne    c00054b5 <f_write+0x97>
c0005625:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005628:	e9 88 fe ff ff       	jmp    c00054b5 <f_write+0x97>
c000562d:	83 ec 0c             	sub    esp,0xc
c0005630:	8d 43 50             	lea    eax,[ebx+0x50]
c0005633:	6a 01                	push   0x1
c0005635:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005638:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000563b:	50                   	push   eax
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 cb c3 ff ff       	call   c0001a15 <disk_write>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	75 b9                	jne    c000560a <f_write+0x1ec>
c0005651:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005655:	e9 65 fe ff ff       	jmp    c00054bf <f_write+0xa1>
c000565a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000565d:	75 05                	jne    c0005664 <f_write+0x246>
c000565f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005662:	74 2e                	je     c0005692 <f_write+0x274>
c0005664:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005667:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000566a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000566d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005670:	73 20                	jae    c0005692 <f_write+0x274>
c0005672:	83 ec 0c             	sub    esp,0xc
c0005675:	8d 43 50             	lea    eax,[ebx+0x50]
c0005678:	6a 01                	push   0x1
c000567a:	57                   	push   edi
c000567b:	56                   	push   esi
c000567c:	50                   	push   eax
c000567d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005681:	50                   	push   eax
c0005682:	e8 78 c3 ff ff       	call   c00019ff <disk_read>
c0005687:	83 c4 20             	add    esp,0x20
c000568a:	85 c0                	test   eax,eax
c000568c:	0f 85 78 ff ff ff    	jne    c000560a <f_write+0x1ec>
c0005692:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005695:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005698:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569b:	ba 00 02 00 00       	mov    edx,0x200
c00056a0:	25 ff 01 00 00       	and    eax,0x1ff
c00056a5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a9:	29 c2                	sub    edx,eax
c00056ab:	39 d6                	cmp    esi,edx
c00056ad:	76 02                	jbe    c00056b1 <f_write+0x293>
c00056af:	89 d6                	mov    esi,edx
c00056b1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b5:	89 f1                	mov    ecx,esi
c00056b7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056bb:	e8 09 c4 ff ff       	call   c0001ac9 <mem_cpy>
c00056c0:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056c4:	e9 b1 fe ff ff       	jmp    c000557a <f_write+0x15c>
c00056c9:	bd 07 00 00 00       	mov    ebp,0x7
c00056ce:	83 c4 2c             	add    esp,0x2c
c00056d1:	89 e8                	mov    eax,ebp
c00056d3:	5b                   	pop    ebx
c00056d4:	5e                   	pop    esi
c00056d5:	5f                   	pop    edi
c00056d6:	5d                   	pop    ebp
c00056d7:	c3                   	ret    

c00056d8 <f_sync>:
c00056d8:	56                   	push   esi
c00056d9:	53                   	push   ebx
c00056da:	83 ec 64             	sub    esp,0x64
c00056dd:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056e1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e5:	89 d8                	mov    eax,ebx
c00056e7:	e8 5a ca ff ff       	call   c0002146 <validate>
c00056ec:	85 c0                	test   eax,eax
c00056ee:	0f 85 ba 01 00 00    	jne    c00058ae <f_sync+0x1d6>
c00056f4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f7:	f6 c2 40             	test   dl,0x40
c00056fa:	0f 84 ae 01 00 00    	je     c00058ae <f_sync+0x1d6>
c0005700:	84 d2                	test   dl,dl
c0005702:	79 33                	jns    c0005737 <f_sync+0x5f>
c0005704:	83 ec 0c             	sub    esp,0xc
c0005707:	8d 43 50             	lea    eax,[ebx+0x50]
c000570a:	6a 01                	push   0x1
c000570c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005712:	50                   	push   eax
c0005713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005717:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000571b:	50                   	push   eax
c000571c:	e8 f4 c2 ff ff       	call   c0001a15 <disk_write>
c0005721:	89 c2                	mov    edx,eax
c0005723:	83 c4 20             	add    esp,0x20
c0005726:	b8 01 00 00 00       	mov    eax,0x1
c000572b:	85 d2                	test   edx,edx
c000572d:	0f 85 7b 01 00 00    	jne    c00058ae <f_sync+0x1d6>
c0005733:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000573b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000573e:	0f 85 11 01 00 00    	jne    c0005855 <f_sync+0x17d>
c0005744:	89 d8                	mov    eax,ebx
c0005746:	e8 1e d6 ff ff       	call   c0002d69 <fill_first_frag>
c000574b:	85 c0                	test   eax,eax
c000574d:	0f 85 5b 01 00 00    	jne    c00058ae <f_sync+0x1d6>
c0005753:	83 c9 ff             	or     ecx,0xffffffff
c0005756:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005759:	89 d8                	mov    eax,ebx
c000575b:	e8 d4 d5 ff ff       	call   c0002d34 <fill_last_frag>
c0005760:	85 c0                	test   eax,eax
c0005762:	0f 85 46 01 00 00    	jne    c00058ae <f_sync+0x1d6>
c0005768:	83 ec 0c             	sub    esp,0xc
c000576b:	68 60 04 00 00       	push   0x460
c0005770:	e8 bb 2a 00 00       	call   c0008230 <ff_memalloc>
c0005775:	89 c6                	mov    esi,eax
c0005777:	83 c4 10             	add    esp,0x10
c000577a:	b8 11 00 00 00       	mov    eax,0x11
c000577f:	85 f6                	test   esi,esi
c0005781:	0f 84 27 01 00 00    	je     c00058ae <f_sync+0x1d6>
c0005787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005791:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005794:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005797:	89 da                	mov    edx,ebx
c0005799:	8d 44 24 14          	lea    eax,[esp+0x14]
c000579d:	e8 bc df ff ff       	call   c000375e <load_obj_xdir>
c00057a2:	85 c0                	test   eax,eax
c00057a4:	0f 85 95 00 00 00    	jne    c000583f <f_sync+0x167>
c00057aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057b1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057bb:	83 ca 01             	or     edx,0x1
c00057be:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c7:	83 c0 34             	add    eax,0x34
c00057ca:	e8 f1 c2 ff ff       	call   c0001ac0 <st_dword>
c00057cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d9:	83 c0 38             	add    eax,0x38
c00057dc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057df:	e8 df c2 ff ff       	call   c0001ac3 <st_qword>
c00057e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057eb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ee:	83 c0 28             	add    eax,0x28
c00057f1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f4:	e8 ca c2 ff ff       	call   c0001ac3 <st_qword>
c00057f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005800:	ba 00 00 21 50       	mov    edx,0x50210000
c0005805:	83 c0 0c             	add    eax,0xc
c0005808:	e8 b3 c2 ff ff       	call   c0001ac0 <st_dword>
c000580d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005811:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005814:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005818:	31 d2                	xor    edx,edx
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 10             	add    eax,0x10
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005829:	e8 6f e1 ff ff       	call   c000399d <store_xdir>
c000582e:	85 c0                	test   eax,eax
c0005830:	75 0d                	jne    c000583f <f_sync+0x167>
c0005832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005836:	e8 f4 ea ff ff       	call   c000432f <sync_fs>
c000583b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005843:	83 ec 0c             	sub    esp,0xc
c0005846:	56                   	push   esi
c0005847:	e8 fa 29 00 00       	call   c0008246 <ff_memfree>
c000584c:	83 c4 10             	add    esp,0x10
c000584f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005853:	eb 59                	jmp    c00058ae <f_sync+0x1d6>
c0005855:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005858:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000585b:	e8 c1 c9 ff ff       	call   c0002221 <move_window>
c0005860:	85 c0                	test   eax,eax
c0005862:	75 4a                	jne    c00058ae <f_sync+0x1d6>
c0005864:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005867:	89 f2                	mov    edx,esi
c0005869:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000586d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005870:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005872:	e8 5f f3 ff ff       	call   c0004bd6 <st_clust.isra.1>
c0005877:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587a:	8d 46 1c             	lea    eax,[esi+0x1c]
c000587d:	e8 3e c2 ff ff       	call   c0001ac0 <st_dword>
c0005882:	8d 46 16             	lea    eax,[esi+0x16]
c0005885:	ba 00 00 21 50       	mov    edx,0x50210000
c000588a:	e8 31 c2 ff ff       	call   c0001ac0 <st_dword>
c000588f:	8d 46 12             	lea    eax,[esi+0x12]
c0005892:	31 d2                	xor    edx,edx
c0005894:	e8 23 c2 ff ff       	call   c0001abc <st_word>
c0005899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000589d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a5:	e8 85 ea ff ff       	call   c000432f <sync_fs>
c00058aa:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058ae:	83 c4 64             	add    esp,0x64
c00058b1:	5b                   	pop    ebx
c00058b2:	5e                   	pop    esi
c00058b3:	c3                   	ret    

c00058b4 <f_close>:
c00058b4:	53                   	push   ebx
c00058b5:	83 ec 24             	sub    esp,0x24
c00058b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058bc:	53                   	push   ebx
c00058bd:	e8 16 fe ff ff       	call   c00056d8 <f_sync>
c00058c2:	83 c4 10             	add    esp,0x10
c00058c5:	85 c0                	test   eax,eax
c00058c7:	75 15                	jne    c00058de <f_close+0x2a>
c00058c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058cd:	89 d8                	mov    eax,ebx
c00058cf:	e8 72 c8 ff ff       	call   c0002146 <validate>
c00058d4:	85 c0                	test   eax,eax
c00058d6:	75 06                	jne    c00058de <f_close+0x2a>
c00058d8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058de:	83 c4 18             	add    esp,0x18
c00058e1:	5b                   	pop    ebx
c00058e2:	c3                   	ret    

c00058e3 <f_lseek>:
c00058e3:	55                   	push   ebp
c00058e4:	57                   	push   edi
c00058e5:	56                   	push   esi
c00058e6:	53                   	push   ebx
c00058e7:	83 ec 3c             	sub    esp,0x3c
c00058ea:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058ee:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058f2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058fd:	89 d8                	mov    eax,ebx
c00058ff:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005903:	e8 3e c8 ff ff       	call   c0002146 <validate>
c0005908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590c:	85 c0                	test   eax,eax
c000590e:	0f 85 28 04 00 00    	jne    c0005d3c <f_lseek+0x459>
c0005914:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000591c:	85 c0                	test   eax,eax
c000591e:	0f 85 18 04 00 00    	jne    c0005d3c <f_lseek+0x459>
c0005924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005928:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000592b:	74 0c                	je     c0005939 <f_lseek+0x56>
c000592d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005930:	85 c0                	test   eax,eax
c0005932:	75 1f                	jne    c0005953 <f_lseek+0x70>
c0005934:	e9 8b 01 00 00       	jmp    c0005ac4 <f_lseek+0x1e1>
c0005939:	83 c9 ff             	or     ecx,0xffffffff
c000593c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593f:	89 d8                	mov    eax,ebx
c0005941:	e8 ee d3 ff ff       	call   c0002d34 <fill_last_frag>
c0005946:	85 c0                	test   eax,eax
c0005948:	74 e3                	je     c000592d <f_lseek+0x4a>
c000594a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000594e:	e9 e9 03 00 00       	jmp    c0005d3c <f_lseek+0x459>
c0005953:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005958:	0f 85 ac 00 00 00    	jne    c0005a0a <f_lseek+0x127>
c000595e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005962:	0f 85 a2 00 00 00    	jne    c0005a0a <f_lseek+0x127>
c0005968:	8d 78 04             	lea    edi,[eax+0x4]
c000596b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000596e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005970:	be 02 00 00 00       	mov    esi,0x2
c0005975:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005979:	85 ed                	test   ebp,ebp
c000597b:	74 73                	je     c00059f0 <f_lseek+0x10d>
c000597d:	89 e9                	mov    ecx,ebp
c000597f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005986:	89 ca                	mov    edx,ecx
c0005988:	89 d8                	mov    eax,ebx
c000598a:	ff 04 24             	inc    DWORD PTR [esp]
c000598d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005991:	e8 0d d4 ff ff       	call   c0002da3 <get_fat>
c0005996:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000599a:	83 f8 01             	cmp    eax,0x1
c000599d:	77 11                	ja     c00059b0 <f_lseek+0xcd>
c000599f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059a3:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059ab:	e9 8c 03 00 00       	jmp    c0005d3c <f_lseek+0x459>
c00059b0:	83 f8 ff             	cmp    eax,0xffffffff
c00059b3:	75 11                	jne    c00059c6 <f_lseek+0xe3>
c00059b5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b9:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059c1:	e9 76 03 00 00       	jmp    c0005d3c <f_lseek+0x459>
c00059c6:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c9:	89 c1                	mov    ecx,eax
c00059cb:	39 c2                	cmp    edx,eax
c00059cd:	74 b7                	je     c0005986 <f_lseek+0xa3>
c00059cf:	83 c6 02             	add    esi,0x2
c00059d2:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d6:	72 0b                	jb     c00059e3 <f_lseek+0x100>
c00059d8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059db:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059de:	89 0f                	mov    DWORD PTR [edi],ecx
c00059e0:	83 c7 08             	add    edi,0x8
c00059e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059ea:	76 04                	jbe    c00059f0 <f_lseek+0x10d>
c00059ec:	89 c5                	mov    ebp,eax
c00059ee:	eb 8d                	jmp    c000597d <f_lseek+0x9a>
c00059f0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059f3:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f7:	89 30                	mov    DWORD PTR [eax],esi
c00059f9:	0f 87 35 03 00 00    	ja     c0005d34 <f_lseek+0x451>
c00059ff:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a05:	e9 32 03 00 00       	jmp    c0005d3c <f_lseek+0x459>
c0005a0a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a0d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a10:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a17:	19 f8                	sbb    eax,edi
c0005a19:	73 07                	jae    c0005a22 <f_lseek+0x13f>
c0005a1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a1e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a22:	89 f8                	mov    eax,edi
c0005a24:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a27:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a2a:	09 f0                	or     eax,esi
c0005a2c:	0f 84 0a 03 00 00    	je     c0005d3c <f_lseek+0x459>
c0005a32:	89 f0                	mov    eax,esi
c0005a34:	89 fa                	mov    edx,edi
c0005a36:	83 c0 ff             	add    eax,0xffffffff
c0005a39:	83 d2 ff             	adc    edx,0xffffffff
c0005a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3f:	89 d1                	mov    ecx,edx
c0005a41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a45:	89 c2                	mov    edx,eax
c0005a47:	89 d8                	mov    eax,ebx
c0005a49:	e8 b6 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a4e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a52:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a55:	89 c2                	mov    edx,eax
c0005a57:	89 c8                	mov    eax,ecx
c0005a59:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a5d:	e8 81 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005a62:	89 d1                	mov    ecx,edx
c0005a64:	09 c1                	or     ecx,eax
c0005a66:	0f 84 33 ff ff ff    	je     c000599f <f_lseek+0xbc>
c0005a6c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a72:	0f 84 c4 02 00 00    	je     c0005d3c <f_lseek+0x459>
c0005a78:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a7c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a80:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a83:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a87:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a8b:	4d                   	dec    ebp
c0005a8c:	31 ff                	xor    edi,edi
c0005a8e:	21 ee                	and    esi,ebp
c0005a90:	01 c6                	add    esi,eax
c0005a92:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a95:	11 d7                	adc    edi,edx
c0005a97:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a9a:	39 fa                	cmp    edx,edi
c0005a9c:	75 08                	jne    c0005aa6 <f_lseek+0x1c3>
c0005a9e:	39 f0                	cmp    eax,esi
c0005aa0:	0f 84 96 02 00 00    	je     c0005d3c <f_lseek+0x459>
c0005aa6:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aad:	0f 89 58 02 00 00    	jns    c0005d0b <f_lseek+0x428>
c0005ab3:	83 ec 0c             	sub    esp,0xc
c0005ab6:	6a 01                	push   0x1
c0005ab8:	52                   	push   edx
c0005ab9:	50                   	push   eax
c0005aba:	55                   	push   ebp
c0005abb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005abf:	e9 32 02 00 00       	jmp    c0005cf6 <f_lseek+0x413>
c0005ac4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac8:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005acb:	74 16                	je     c0005ae3 <f_lseek+0x200>
c0005acd:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ad2:	76 0f                	jbe    c0005ae3 <f_lseek+0x200>
c0005ad4:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005adb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ae3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae9:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005aec:	89 c7                	mov    edi,eax
c0005aee:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005af2:	73 0d                	jae    c0005b01 <f_lseek+0x21e>
c0005af4:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af8:	75 07                	jne    c0005b01 <f_lseek+0x21e>
c0005afa:	89 14 24             	mov    DWORD PTR [esp],edx
c0005afd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b01:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b08:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b0b:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b12:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b19:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b1c:	75 09                	jne    c0005b27 <f_lseek+0x244>
c0005b1e:	31 f6                	xor    esi,esi
c0005b20:	31 ff                	xor    edi,edi
c0005b22:	e9 87 01 00 00       	jmp    c0005cae <f_lseek+0x3cb>
c0005b27:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b2b:	c1 e1 09             	shl    ecx,0x9
c0005b2e:	89 d7                	mov    edi,edx
c0005b30:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b34:	09 c7                	or     edi,eax
c0005b36:	74 6b                	je     c0005ba3 <f_lseek+0x2c0>
c0005b38:	83 c0 ff             	add    eax,0xffffffff
c0005b3b:	89 cf                	mov    edi,ecx
c0005b3d:	83 d2 ff             	adc    edx,0xffffffff
c0005b40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b44:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b47:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b4b:	83 c0 ff             	add    eax,0xffffffff
c0005b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b52:	83 d2 ff             	adc    edx,0xffffffff
c0005b55:	31 ed                	xor    ebp,ebp
c0005b57:	55                   	push   ebp
c0005b58:	51                   	push   ecx
c0005b59:	52                   	push   edx
c0005b5a:	50                   	push   eax
c0005b5b:	e8 ac 99 01 00       	call   c001f50c <__udivdi3>
c0005b60:	83 c4 10             	add    esp,0x10
c0005b63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b67:	89 d6                	mov    esi,edx
c0005b69:	55                   	push   ebp
c0005b6a:	57                   	push   edi
c0005b6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b73:	e8 94 99 01 00       	call   c001f50c <__udivdi3>
c0005b78:	83 c4 10             	add    esp,0x10
c0005b7b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7f:	19 d6                	sbb    esi,edx
c0005b81:	72 20                	jb     c0005ba3 <f_lseek+0x2c0>
c0005b83:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b8b:	f7 d9                	neg    ecx
c0005b8d:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b91:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b94:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b97:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b9a:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ba1:	eb 28                	jmp    c0005bcb <f_lseek+0x2e8>
c0005ba3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	75 1e                	jne    c0005bc8 <f_lseek+0x2e5>
c0005baa:	31 d2                	xor    edx,edx
c0005bac:	89 d8                	mov    eax,ebx
c0005bae:	e8 de d4 ff ff       	call   c0003091 <create_chain>
c0005bb3:	83 f8 01             	cmp    eax,0x1
c0005bb6:	0f 84 e3 fd ff ff    	je     c000599f <f_lseek+0xbc>
c0005bbc:	83 f8 ff             	cmp    eax,0xffffffff
c0005bbf:	0f 84 f0 fd ff ff    	je     c00059b5 <f_lseek+0xd2>
c0005bc5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bcb:	85 c0                	test   eax,eax
c0005bcd:	0f 84 4b ff ff ff    	je     c0005b1e <f_lseek+0x23b>
c0005bd3:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdc:	89 fd                	mov    ebp,edi
c0005bde:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005be2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be8:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bec:	73 7d                	jae    c0005c6b <f_lseek+0x388>
c0005bee:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bf1:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf5:	01 d6                	add    esi,edx
c0005bf7:	11 cf                	adc    edi,ecx
c0005bf9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bfc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bff:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c02:	f6 c2 02             	test   dl,0x2
c0005c05:	74 25                	je     c0005c2c <f_lseek+0x349>
c0005c07:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c0a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c0d:	19 f9                	sbb    ecx,edi
c0005c0f:	73 0c                	jae    c0005c1d <f_lseek+0x33a>
c0005c11:	83 ca 40             	or     edx,0x40
c0005c14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c17:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c1a:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c1d:	89 c2                	mov    edx,eax
c0005c1f:	89 d8                	mov    eax,ebx
c0005c21:	e8 6b d4 ff ff       	call   c0003091 <create_chain>
c0005c26:	85 c0                	test   eax,eax
c0005c28:	75 0b                	jne    c0005c35 <f_lseek+0x352>
c0005c2a:	eb 30                	jmp    c0005c5c <f_lseek+0x379>
c0005c2c:	89 c2                	mov    edx,eax
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 6e d1 ff ff       	call   c0002da3 <get_fat>
c0005c35:	83 f8 ff             	cmp    eax,0xffffffff
c0005c38:	0f 84 77 fd ff ff    	je     c00059b5 <f_lseek+0xd2>
c0005c3e:	83 f8 01             	cmp    eax,0x1
c0005c41:	0f 86 58 fd ff ff    	jbe    c000599f <f_lseek+0xbc>
c0005c47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c4b:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c4e:	0f 86 4b fd ff ff    	jbe    c000599f <f_lseek+0xbc>
c0005c54:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c57:	e9 77 ff ff ff       	jmp    c0005bd3 <f_lseek+0x2f0>
c0005c5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c63:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c6b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c6e:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c72:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c75:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c78:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c7b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c81:	0f 84 97 fe ff ff    	je     c0005b1e <f_lseek+0x23b>
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c8d:	e8 51 c0 ff ff       	call   c0001ce3 <clst2sect>
c0005c92:	89 d7                	mov    edi,edx
c0005c94:	09 c7                	or     edi,eax
c0005c96:	0f 84 03 fd ff ff    	je     c000599f <f_lseek+0xbc>
c0005c9c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ca0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca3:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca7:	c1 ef 09             	shr    edi,0x9
c0005caa:	01 c6                	add    esi,eax
c0005cac:	11 d7                	adc    edi,edx
c0005cae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cb1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cb4:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cba:	19 d1                	sbb    ecx,edx
c0005cbc:	73 0a                	jae    c0005cc8 <f_lseek+0x3e5>
c0005cbe:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cc2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc5:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc8:	a9 ff 01 00 00       	test   eax,0x1ff
c0005ccd:	74 6d                	je     c0005d3c <f_lseek+0x459>
c0005ccf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd5:	39 fa                	cmp    edx,edi
c0005cd7:	75 04                	jne    c0005cdd <f_lseek+0x3fa>
c0005cd9:	39 f0                	cmp    eax,esi
c0005cdb:	74 5f                	je     c0005d3c <f_lseek+0x459>
c0005cdd:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce4:	79 25                	jns    c0005d0b <f_lseek+0x428>
c0005ce6:	83 ec 0c             	sub    esp,0xc
c0005ce9:	6a 01                	push   0x1
c0005ceb:	52                   	push   edx
c0005cec:	50                   	push   eax
c0005ced:	55                   	push   ebp
c0005cee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cf2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf6:	50                   	push   eax
c0005cf7:	e8 19 bd ff ff       	call   c0001a15 <disk_write>
c0005cfc:	83 c4 20             	add    esp,0x20
c0005cff:	85 c0                	test   eax,eax
c0005d01:	0f 85 ae fc ff ff    	jne    c00059b5 <f_lseek+0xd2>
c0005d07:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d0b:	83 ec 0c             	sub    esp,0xc
c0005d0e:	6a 01                	push   0x1
c0005d10:	57                   	push   edi
c0005d11:	56                   	push   esi
c0005d12:	55                   	push   ebp
c0005d13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d17:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d1b:	50                   	push   eax
c0005d1c:	e8 de bc ff ff       	call   c00019ff <disk_read>
c0005d21:	83 c4 20             	add    esp,0x20
c0005d24:	85 c0                	test   eax,eax
c0005d26:	0f 85 89 fc ff ff    	jne    c00059b5 <f_lseek+0xd2>
c0005d2c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d32:	eb 08                	jmp    c0005d3c <f_lseek+0x459>
c0005d34:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d40:	83 c4 3c             	add    esp,0x3c
c0005d43:	5b                   	pop    ebx
c0005d44:	5e                   	pop    esi
c0005d45:	5f                   	pop    edi
c0005d46:	5d                   	pop    ebp
c0005d47:	c3                   	ret    

c0005d48 <f_opendir>:
c0005d48:	56                   	push   esi
c0005d49:	b8 09 00 00 00       	mov    eax,0x9
c0005d4e:	53                   	push   ebx
c0005d4f:	83 ec 24             	sub    esp,0x24
c0005d52:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d56:	85 db                	test   ebx,ebx
c0005d58:	0f 84 e6 00 00 00    	je     c0005e44 <f_opendir+0xfc>
c0005d5e:	31 c9                	xor    ecx,ecx
c0005d60:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d64:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d68:	e8 5f c7 ff ff       	call   c00024cc <mount_volume>
c0005d6d:	85 c0                	test   eax,eax
c0005d6f:	0f 85 c9 00 00 00    	jne    c0005e3e <f_opendir+0xf6>
c0005d75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d79:	83 ec 0c             	sub    esp,0xc
c0005d7c:	89 03                	mov    DWORD PTR [ebx],eax
c0005d7e:	68 60 04 00 00       	push   0x460
c0005d83:	e8 a8 24 00 00       	call   c0008230 <ff_memalloc>
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	83 c4 10             	add    esp,0x10
c0005d8d:	b8 11 00 00 00       	mov    eax,0x11
c0005d92:	85 f6                	test   esi,esi
c0005d94:	0f 84 aa 00 00 00    	je     c0005e44 <f_opendir+0xfc>
c0005d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005da4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005daa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dae:	89 d8                	mov    eax,ebx
c0005db0:	e8 83 ee ff ff       	call   c0004c38 <follow_path>
c0005db5:	85 c0                	test   eax,eax
c0005db7:	75 61                	jne    c0005e1a <f_opendir+0xd2>
c0005db9:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dbd:	78 46                	js     c0005e05 <f_opendir+0xbd>
c0005dbf:	b8 05 00 00 00       	mov    eax,0x5
c0005dc4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc8:	74 50                	je     c0005e1a <f_opendir+0xd2>
c0005dca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dce:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dd0:	3c 04                	cmp    al,0x4
c0005dd2:	75 26                	jne    c0005dfa <f_opendir+0xb2>
c0005dd4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dda:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005ddd:	30 d2                	xor    dl,dl
c0005ddf:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005de3:	09 c2                	or     edx,eax
c0005de5:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005deb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005dee:	89 da                	mov    edx,ebx
c0005df0:	8d 41 10             	lea    eax,[ecx+0x10]
c0005df3:	e8 06 ee ff ff       	call   c0004bfe <init_alloc_info.isra.2>
c0005df8:	eb 0b                	jmp    c0005e05 <f_opendir+0xbd>
c0005dfa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dfd:	e8 ab ed ff ff       	call   c0004bad <ld_clust.isra.0>
c0005e02:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e09:	31 d2                	xor    edx,edx
c0005e0b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e13:	89 d8                	mov    eax,ebx
c0005e15:	e8 7f d1 ff ff       	call   c0002f99 <dir_sdi>
c0005e1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e1e:	83 ec 0c             	sub    esp,0xc
c0005e21:	56                   	push   esi
c0005e22:	e8 1f 24 00 00       	call   c0008246 <ff_memfree>
c0005e27:	83 c4 10             	add    esp,0x10
c0005e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e2e:	83 f8 04             	cmp    eax,0x4
c0005e31:	74 06                	je     c0005e39 <f_opendir+0xf1>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	74 0d                	je     c0005e44 <f_opendir+0xfc>
c0005e37:	eb 05                	jmp    c0005e3e <f_opendir+0xf6>
c0005e39:	b8 05 00 00 00       	mov    eax,0x5
c0005e3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e44:	83 c4 24             	add    esp,0x24
c0005e47:	5b                   	pop    ebx
c0005e48:	5e                   	pop    esi
c0005e49:	c3                   	ret    

c0005e4a <f_closedir>:
c0005e4a:	53                   	push   ebx
c0005e4b:	83 ec 18             	sub    esp,0x18
c0005e4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e52:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e56:	89 d8                	mov    eax,ebx
c0005e58:	e8 e9 c2 ff ff       	call   c0002146 <validate>
c0005e5d:	85 c0                	test   eax,eax
c0005e5f:	75 06                	jne    c0005e67 <f_closedir+0x1d>
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 18             	add    esp,0x18
c0005e6a:	5b                   	pop    ebx
c0005e6b:	c3                   	ret    

c0005e6c <f_readdir>:
c0005e6c:	57                   	push   edi
c0005e6d:	56                   	push   esi
c0005e6e:	53                   	push   ebx
c0005e6f:	83 ec 20             	sub    esp,0x20
c0005e72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e76:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e7a:	89 d8                	mov    eax,ebx
c0005e7c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e80:	e8 c1 c2 ff ff       	call   c0002146 <validate>
c0005e85:	85 c0                	test   eax,eax
c0005e87:	75 77                	jne    c0005f00 <f_readdir+0x94>
c0005e89:	85 ff                	test   edi,edi
c0005e8b:	75 0b                	jne    c0005e98 <f_readdir+0x2c>
c0005e8d:	31 d2                	xor    edx,edx
c0005e8f:	89 d8                	mov    eax,ebx
c0005e91:	e8 03 d1 ff ff       	call   c0002f99 <dir_sdi>
c0005e96:	eb 68                	jmp    c0005f00 <f_readdir+0x94>
c0005e98:	83 ec 0c             	sub    esp,0xc
c0005e9b:	68 60 04 00 00       	push   0x460
c0005ea0:	e8 8b 23 00 00       	call   c0008230 <ff_memalloc>
c0005ea5:	89 c6                	mov    esi,eax
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	b8 11 00 00 00       	mov    eax,0x11
c0005eaf:	85 f6                	test   esi,esi
c0005eb1:	74 4d                	je     c0005f00 <f_readdir+0x94>
c0005eb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ebd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ec0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ec3:	31 d2                	xor    edx,edx
c0005ec5:	89 d8                	mov    eax,ebx
c0005ec7:	e8 df d8 ff ff       	call   c00037ab <dir_read>
c0005ecc:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ed1:	75 19                	jne    c0005eec <f_readdir+0x80>
c0005ed3:	89 fa                	mov    edx,edi
c0005ed5:	89 d8                	mov    eax,ebx
c0005ed7:	e8 d0 ea ff ff       	call   c00049ac <get_fileinfo>
c0005edc:	31 d2                	xor    edx,edx
c0005ede:	89 d8                	mov    eax,ebx
c0005ee0:	e8 0e d6 ff ff       	call   c00034f3 <dir_next>
c0005ee5:	83 f8 04             	cmp    eax,0x4
c0005ee8:	75 02                	jne    c0005eec <f_readdir+0x80>
c0005eea:	31 c0                	xor    eax,eax
c0005eec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ef0:	83 ec 0c             	sub    esp,0xc
c0005ef3:	56                   	push   esi
c0005ef4:	e8 4d 23 00 00       	call   c0008246 <ff_memfree>
c0005ef9:	83 c4 10             	add    esp,0x10
c0005efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f00:	83 c4 20             	add    esp,0x20
c0005f03:	5b                   	pop    ebx
c0005f04:	5e                   	pop    esi
c0005f05:	5f                   	pop    edi
c0005f06:	c3                   	ret    

c0005f07 <f_stat>:
c0005f07:	57                   	push   edi
c0005f08:	31 c9                	xor    ecx,ecx
c0005f0a:	56                   	push   esi
c0005f0b:	53                   	push   ebx
c0005f0c:	83 ec 50             	sub    esp,0x50
c0005f0f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f13:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f17:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f1b:	e8 ac c5 ff ff       	call   c00024cc <mount_volume>
c0005f20:	89 c3                	mov    ebx,eax
c0005f22:	85 c0                	test   eax,eax
c0005f24:	75 67                	jne    c0005f8d <f_stat+0x86>
c0005f26:	83 ec 0c             	sub    esp,0xc
c0005f29:	bb 11 00 00 00       	mov    ebx,0x11
c0005f2e:	68 60 04 00 00       	push   0x460
c0005f33:	e8 f8 22 00 00       	call   c0008230 <ff_memalloc>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	89 c6                	mov    esi,eax
c0005f3d:	85 c0                	test   eax,eax
c0005f3f:	74 4c                	je     c0005f8d <f_stat+0x86>
c0005f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f45:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f4b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f4e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f51:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f55:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f59:	e8 da ec ff ff       	call   c0004c38 <follow_path>
c0005f5e:	89 c3                	mov    ebx,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	75 1d                	jne    c0005f81 <f_stat+0x7a>
c0005f64:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f69:	78 11                	js     c0005f7c <f_stat+0x75>
c0005f6b:	85 ff                	test   edi,edi
c0005f6d:	74 12                	je     c0005f81 <f_stat+0x7a>
c0005f6f:	89 fa                	mov    edx,edi
c0005f71:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f75:	e8 32 ea ff ff       	call   c00049ac <get_fileinfo>
c0005f7a:	eb 05                	jmp    c0005f81 <f_stat+0x7a>
c0005f7c:	bb 06 00 00 00       	mov    ebx,0x6
c0005f81:	83 ec 0c             	sub    esp,0xc
c0005f84:	56                   	push   esi
c0005f85:	e8 bc 22 00 00       	call   c0008246 <ff_memfree>
c0005f8a:	83 c4 10             	add    esp,0x10
c0005f8d:	83 c4 50             	add    esp,0x50
c0005f90:	89 d8                	mov    eax,ebx
c0005f92:	5b                   	pop    ebx
c0005f93:	5e                   	pop    esi
c0005f94:	5f                   	pop    edi
c0005f95:	c3                   	ret    

c0005f96 <f_getfree>:
c0005f96:	55                   	push   ebp
c0005f97:	31 c9                	xor    ecx,ecx
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	53                   	push   ebx
c0005f9c:	83 ec 5c             	sub    esp,0x5c
c0005f9f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fa3:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa7:	e8 20 c5 ff ff       	call   c00024cc <mount_volume>
c0005fac:	89 c5                	mov    ebp,eax
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	0f 85 be 01 00 00    	jne    c0006174 <f_getfree+0x1de>
c0005fb6:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fbe:	89 02                	mov    DWORD PTR [edx],eax
c0005fc0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fc3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fca:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fcd:	39 f2                	cmp    edx,esi
c0005fcf:	77 0b                	ja     c0005fdc <f_getfree+0x46>
c0005fd1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd5:	89 10                	mov    DWORD PTR [eax],edx
c0005fd7:	e9 98 01 00 00       	jmp    c0006174 <f_getfree+0x1de>
c0005fdc:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fde:	80 fa 01             	cmp    dl,0x1
c0005fe1:	75 3a                	jne    c000601d <f_getfree+0x87>
c0005fe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe7:	be 02 00 00 00       	mov    esi,0x2
c0005fec:	31 db                	xor    ebx,ebx
c0005fee:	89 f2                	mov    edx,esi
c0005ff0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005ff4:	e8 aa cd ff ff       	call   c0002da3 <get_fat>
c0005ff9:	83 f8 ff             	cmp    eax,0xffffffff
c0005ffc:	0f 84 51 01 00 00    	je     c0006153 <f_getfree+0x1bd>
c0006002:	83 f8 01             	cmp    eax,0x1
c0006005:	0f 84 4f 01 00 00    	je     c000615a <f_getfree+0x1c4>
c000600b:	83 d3 00             	adc    ebx,0x0
c000600e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006012:	46                   	inc    esi
c0006013:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006016:	77 d6                	ja     c0005fee <f_getfree+0x58>
c0006018:	e9 46 01 00 00       	jmp    c0006163 <f_getfree+0x1cd>
c000601d:	80 fa 04             	cmp    dl,0x4
c0006020:	0f 85 94 00 00 00    	jne    c00060ba <f_getfree+0x124>
c0006026:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006029:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000602c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006030:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006034:	31 ff                	xor    edi,edi
c0006036:	31 db                	xor    ebx,ebx
c0006038:	85 ff                	test   edi,edi
c000603a:	75 3f                	jne    c000607b <f_getfree+0xe5>
c000603c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006040:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006044:	83 c0 01             	add    eax,0x1
c0006047:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000604b:	83 d2 00             	adc    edx,0x0
c000604e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006052:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006056:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000605a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000605e:	e8 be c1 ff ff       	call   c0002221 <move_window>
c0006063:	85 c0                	test   eax,eax
c0006065:	0f 85 f6 00 00 00    	jne    c0006161 <f_getfree+0x1cb>
c000606b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006083:	88 c2                	mov    dl,al
c0006085:	b8 08 00 00 00       	mov    eax,0x8
c000608a:	29 f0                	sub    eax,esi
c000608c:	89 c1                	mov    ecx,eax
c000608e:	01 f1                	add    ecx,esi
c0006090:	74 18                	je     c00060aa <f_getfree+0x114>
c0006092:	85 f6                	test   esi,esi
c0006094:	74 14                	je     c00060aa <f_getfree+0x114>
c0006096:	88 d1                	mov    cl,dl
c0006098:	83 e1 01             	and    ecx,0x1
c000609b:	80 f9 01             	cmp    cl,0x1
c000609e:	88 d1                	mov    cl,dl
c00060a0:	83 d3 00             	adc    ebx,0x0
c00060a3:	4e                   	dec    esi
c00060a4:	d0 e9                	shr    cl,1
c00060a6:	88 ca                	mov    dl,cl
c00060a8:	eb e2                	jmp    c000608c <f_getfree+0xf6>
c00060aa:	47                   	inc    edi
c00060ab:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060b1:	85 f6                	test   esi,esi
c00060b3:	75 83                	jne    c0006038 <f_getfree+0xa2>
c00060b5:	e9 a9 00 00 00       	jmp    c0006163 <f_getfree+0x1cd>
c00060ba:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060bd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c8:	31 db                	xor    ebx,ebx
c00060ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060cf:	75 1b                	jne    c00060ec <f_getfree+0x156>
c00060d1:	89 d6                	mov    esi,edx
c00060d3:	89 cf                	mov    edi,ecx
c00060d5:	83 c6 01             	add    esi,0x1
c00060d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060dc:	83 d7 00             	adc    edi,0x0
c00060df:	e8 3d c1 ff ff       	call   c0002221 <move_window>
c00060e4:	85 c0                	test   eax,eax
c00060e6:	75 79                	jne    c0006161 <f_getfree+0x1cb>
c00060e8:	89 f2                	mov    edx,esi
c00060ea:	89 f9                	mov    ecx,edi
c00060ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060fc:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006107:	75 15                	jne    c000611e <f_getfree+0x188>
c0006109:	e8 3c b9 ff ff       	call   c0001a4a <ld_word>
c000610e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006112:	66 83 f8 01          	cmp    ax,0x1
c0006116:	83 d3 00             	adc    ebx,0x0
c0006119:	83 c6 02             	add    esi,0x2
c000611c:	eb 17                	jmp    c0006135 <f_getfree+0x19f>
c000611e:	e8 34 b9 ff ff       	call   c0001a57 <ld_dword>
c0006123:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006127:	25 ff ff ff 0f       	and    eax,0xfffffff
c000612c:	83 f8 01             	cmp    eax,0x1
c000612f:	83 d3 00             	adc    ebx,0x0
c0006132:	83 c6 04             	add    esi,0x4
c0006135:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000614b:	0f 85 79 ff ff ff    	jne    c00060ca <f_getfree+0x134>
c0006151:	eb 10                	jmp    c0006163 <f_getfree+0x1cd>
c0006153:	bd 01 00 00 00       	mov    ebp,0x1
c0006158:	eb 09                	jmp    c0006163 <f_getfree+0x1cd>
c000615a:	bd 02 00 00 00       	mov    ebp,0x2
c000615f:	eb 02                	jmp    c0006163 <f_getfree+0x1cd>
c0006161:	89 c5                	mov    ebp,eax
c0006163:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006167:	89 18                	mov    DWORD PTR [eax],ebx
c0006169:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616d:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	83 c4 5c             	add    esp,0x5c
c0006177:	89 e8                	mov    eax,ebp
c0006179:	5b                   	pop    ebx
c000617a:	5e                   	pop    esi
c000617b:	5f                   	pop    edi
c000617c:	5d                   	pop    ebp
c000617d:	c3                   	ret    

c000617e <f_truncate>:
c000617e:	56                   	push   esi
c000617f:	53                   	push   ebx
c0006180:	83 ec 14             	sub    esp,0x14
c0006183:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006187:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000618b:	89 d8                	mov    eax,ebx
c000618d:	e8 b4 bf ff ff       	call   c0002146 <validate>
c0006192:	89 c6                	mov    esi,eax
c0006194:	85 c0                	test   eax,eax
c0006196:	0f 85 d2 00 00 00    	jne    c000626e <f_truncate+0xf0>
c000619c:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a0:	85 f6                	test   esi,esi
c00061a2:	0f 85 c6 00 00 00    	jne    c000626e <f_truncate+0xf0>
c00061a8:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ac:	0f 84 b7 00 00 00    	je     c0006269 <f_truncate+0xeb>
c00061b2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b8:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061bb:	89 d1                	mov    ecx,edx
c00061bd:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c0:	0f 83 a8 00 00 00    	jae    c000626e <f_truncate+0xf0>
c00061c6:	09 c2                	or     edx,eax
c00061c8:	75 15                	jne    c00061df <f_truncate+0x61>
c00061ca:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061cd:	31 c9                	xor    ecx,ecx
c00061cf:	89 d8                	mov    eax,ebx
c00061d1:	e8 bc d0 ff ff       	call   c0003292 <remove_chain>
c00061d6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061dd:	eb 35                	jmp    c0006214 <f_truncate+0x96>
c00061df:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e2:	89 d8                	mov    eax,ebx
c00061e4:	e8 ba cb ff ff       	call   c0002da3 <get_fat>
c00061e9:	89 c2                	mov    edx,eax
c00061eb:	b8 01 00 00 00       	mov    eax,0x1
c00061f0:	83 fa ff             	cmp    edx,0xffffffff
c00061f3:	74 1f                	je     c0006214 <f_truncate+0x96>
c00061f5:	b8 02 00 00 00       	mov    eax,0x2
c00061fa:	83 fa 01             	cmp    edx,0x1
c00061fd:	74 15                	je     c0006214 <f_truncate+0x96>
c00061ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006203:	31 c0                	xor    eax,eax
c0006205:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006208:	76 0a                	jbe    c0006214 <f_truncate+0x96>
c000620a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000620d:	89 d8                	mov    eax,ebx
c000620f:	e8 7e d0 ff ff       	call   c0003292 <remove_chain>
c0006214:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006217:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000621d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006220:	83 ca 40             	or     edx,0x40
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006229:	85 c0                	test   eax,eax
c000622b:	75 35                	jne    c0006262 <f_truncate+0xe4>
c000622d:	84 d2                	test   dl,dl
c000622f:	79 3d                	jns    c000626e <f_truncate+0xf0>
c0006231:	83 ec 0c             	sub    esp,0xc
c0006234:	8d 43 50             	lea    eax,[ebx+0x50]
c0006237:	6a 01                	push   0x1
c0006239:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000623c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623f:	50                   	push   eax
c0006240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006248:	50                   	push   eax
c0006249:	e8 c7 b7 ff ff       	call   c0001a15 <disk_write>
c000624e:	83 c4 20             	add    esp,0x20
c0006251:	85 c0                	test   eax,eax
c0006253:	75 08                	jne    c000625d <f_truncate+0xdf>
c0006255:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006259:	31 f6                	xor    esi,esi
c000625b:	eb 11                	jmp    c000626e <f_truncate+0xf0>
c000625d:	b8 01 00 00 00       	mov    eax,0x1
c0006262:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006265:	89 c6                	mov    esi,eax
c0006267:	eb 05                	jmp    c000626e <f_truncate+0xf0>
c0006269:	be 07 00 00 00       	mov    esi,0x7
c000626e:	83 c4 14             	add    esp,0x14
c0006271:	89 f0                	mov    eax,esi
c0006273:	5b                   	pop    ebx
c0006274:	5e                   	pop    esi
c0006275:	c3                   	ret    

c0006276 <f_unlink>:
c0006276:	56                   	push   esi
c0006277:	b9 02 00 00 00       	mov    ecx,0x2
c000627c:	53                   	push   ebx
c000627d:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006283:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006287:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000628e:	e8 39 c2 ff ff       	call   c00024cc <mount_volume>
c0006293:	85 c0                	test   eax,eax
c0006295:	0f 85 53 01 00 00    	jne    c00063ee <f_unlink+0x178>
c000629b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629f:	83 ec 0c             	sub    esp,0xc
c00062a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a6:	68 60 04 00 00       	push   0x460
c00062ab:	e8 80 1f 00 00       	call   c0008230 <ff_memalloc>
c00062b0:	89 c3                	mov    ebx,eax
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	b8 11 00 00 00       	mov    eax,0x11
c00062ba:	85 db                	test   ebx,ebx
c00062bc:	0f 84 2c 01 00 00    	je     c00063ee <f_unlink+0x178>
c00062c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062cf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d2:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062dd:	e8 56 e9 ff ff       	call   c0004c38 <follow_path>
c00062e2:	85 c0                	test   eax,eax
c00062e4:	0f 85 f0 00 00 00    	jne    c00063da <f_unlink+0x164>
c00062ea:	b8 06 00 00 00       	mov    eax,0x6
c00062ef:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f7:	0f 88 dd 00 00 00    	js     c00063da <f_unlink+0x164>
c00062fd:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006302:	74 0a                	je     c000630e <f_unlink+0x98>
c0006304:	b8 07 00 00 00       	mov    eax,0x7
c0006309:	e9 cc 00 00 00       	jmp    c00063da <f_unlink+0x164>
c000630e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006312:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006316:	8a 02                	mov    al,BYTE PTR [edx]
c0006318:	3c 04                	cmp    al,0x4
c000631a:	75 12                	jne    c000632e <f_unlink+0xb8>
c000631c:	8d 42 10             	lea    eax,[edx+0x10]
c000631f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006323:	e8 d6 e8 ff ff       	call   c0004bfe <init_alloc_info.isra.2>
c0006328:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000632c:	eb 0e                	jmp    c000633c <f_unlink+0xc6>
c000632e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006335:	e8 73 e8 ff ff       	call   c0004bad <ld_clust.isra.0>
c000633a:	89 c6                	mov    esi,eax
c000633c:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006341:	75 20                	jne    c0006363 <f_unlink+0xed>
c0006343:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006347:	e8 d6 d6 ff ff       	call   c0003a22 <dir_remove>
c000634c:	85 c0                	test   eax,eax
c000634e:	75 7d                	jne    c00063cd <f_unlink+0x157>
c0006350:	85 f6                	test   esi,esi
c0006352:	74 79                	je     c00063cd <f_unlink+0x157>
c0006354:	31 c9                	xor    ecx,ecx
c0006356:	89 f2                	mov    edx,esi
c0006358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000635c:	e8 31 cf ff ff       	call   c0003292 <remove_chain>
c0006361:	eb 6a                	jmp    c00063cd <f_unlink+0x157>
c0006363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006367:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000636e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006375:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006378:	75 21                	jne    c000639b <f_unlink+0x125>
c000637a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000637e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006382:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006389:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638d:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006394:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000639b:	31 d2                	xor    edx,edx
c000639d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063a4:	e8 f0 cb ff ff       	call   c0002f99 <dir_sdi>
c00063a9:	85 c0                	test   eax,eax
c00063ab:	75 2d                	jne    c00063da <f_unlink+0x164>
c00063ad:	31 d2                	xor    edx,edx
c00063af:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b6:	e8 f0 d3 ff ff       	call   c00037ab <dir_read>
c00063bb:	85 c0                	test   eax,eax
c00063bd:	0f 84 41 ff ff ff    	je     c0006304 <f_unlink+0x8e>
c00063c3:	83 f8 04             	cmp    eax,0x4
c00063c6:	75 12                	jne    c00063da <f_unlink+0x164>
c00063c8:	e9 76 ff ff ff       	jmp    c0006343 <f_unlink+0xcd>
c00063cd:	85 c0                	test   eax,eax
c00063cf:	75 09                	jne    c00063da <f_unlink+0x164>
c00063d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d5:	e8 55 df ff ff       	call   c000432f <sync_fs>
c00063da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063de:	83 ec 0c             	sub    esp,0xc
c00063e1:	53                   	push   ebx
c00063e2:	e8 5f 1e 00 00       	call   c0008246 <ff_memfree>
c00063e7:	83 c4 10             	add    esp,0x10
c00063ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063ee:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063f4:	5b                   	pop    ebx
c00063f5:	5e                   	pop    esi
c00063f6:	c3                   	ret    

c00063f7 <f_mkdir>:
c00063f7:	57                   	push   edi
c00063f8:	b9 02 00 00 00       	mov    ecx,0x2
c00063fd:	56                   	push   esi
c00063fe:	53                   	push   ebx
c00063ff:	83 c4 80             	add    esp,0xffffff80
c0006402:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006406:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000640d:	e8 ba c0 ff ff       	call   c00024cc <mount_volume>
c0006412:	89 c3                	mov    ebx,eax
c0006414:	85 c0                	test   eax,eax
c0006416:	0f 85 fe 01 00 00    	jne    c000661a <f_mkdir+0x223>
c000641c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006420:	83 ec 0c             	sub    esp,0xc
c0006423:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006427:	bb 11 00 00 00       	mov    ebx,0x11
c000642c:	68 60 04 00 00       	push   0x460
c0006431:	e8 fa 1d 00 00       	call   c0008230 <ff_memalloc>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	89 c7                	mov    edi,eax
c000643b:	85 c0                	test   eax,eax
c000643d:	0f 84 d7 01 00 00    	je     c000661a <f_mkdir+0x223>
c0006443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006447:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000644d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006450:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006453:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000645a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000645e:	e8 d5 e7 ff ff       	call   c0004c38 <follow_path>
c0006463:	89 c3                	mov    ebx,eax
c0006465:	85 c0                	test   eax,eax
c0006467:	74 3e                	je     c00064a7 <f_mkdir+0xb0>
c0006469:	83 f8 04             	cmp    eax,0x4
c000646c:	75 3e                	jne    c00064ac <f_mkdir+0xb5>
c000646e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006472:	31 d2                	xor    edx,edx
c0006474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006478:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000647c:	e8 10 cc ff ff       	call   c0003091 <create_chain>
c0006481:	89 c6                	mov    esi,eax
c0006483:	85 c0                	test   eax,eax
c0006485:	74 0c                	je     c0006493 <f_mkdir+0x9c>
c0006487:	bb 02 00 00 00       	mov    ebx,0x2
c000648c:	83 f8 01             	cmp    eax,0x1
c000648f:	74 07                	je     c0006498 <f_mkdir+0xa1>
c0006491:	eb 2a                	jmp    c00064bd <f_mkdir+0xc6>
c0006493:	bb 07 00 00 00       	mov    ebx,0x7
c0006498:	31 c9                	xor    ecx,ecx
c000649a:	89 f2                	mov    edx,esi
c000649c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a0:	e8 ed cd ff ff       	call   c0003292 <remove_chain>
c00064a5:	eb 05                	jmp    c00064ac <f_mkdir+0xb5>
c00064a7:	bb 08 00 00 00       	mov    ebx,0x8
c00064ac:	83 ec 0c             	sub    esp,0xc
c00064af:	57                   	push   edi
c00064b0:	e8 91 1d 00 00       	call   c0008246 <ff_memfree>
c00064b5:	83 c4 10             	add    esp,0x10
c00064b8:	e9 5d 01 00 00       	jmp    c000661a <f_mkdir+0x223>
c00064bd:	bb 01 00 00 00       	mov    ebx,0x1
c00064c2:	83 f8 ff             	cmp    eax,0xffffffff
c00064c5:	74 d1                	je     c0006498 <f_mkdir+0xa1>
c00064c7:	89 f2                	mov    edx,esi
c00064c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064cd:	e8 08 cf ff ff       	call   c00033da <dir_clear>
c00064d2:	89 c3                	mov    ebx,eax
c00064d4:	85 c0                	test   eax,eax
c00064d6:	75 c0                	jne    c0006498 <f_mkdir+0xa1>
c00064d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064dc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064df:	74 69                	je     c000654a <f_mkdir+0x153>
c00064e1:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e6:	83 c0 54             	add    eax,0x54
c00064e9:	ba 20 00 00 00       	mov    edx,0x20
c00064ee:	e8 eb b5 ff ff       	call   c0001ade <mem_set>
c00064f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f7:	83 c0 6a             	add    eax,0x6a
c00064fa:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064fe:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006502:	ba 00 00 21 50       	mov    edx,0x50210000
c0006507:	e8 b4 b5 ff ff       	call   c0001ac0 <st_dword>
c000650c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006510:	89 f1                	mov    ecx,esi
c0006512:	8d 50 54             	lea    edx,[eax+0x54]
c0006515:	e8 bc e6 ff ff       	call   c0004bd6 <st_clust.isra.1>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	b9 20 00 00 00       	mov    ecx,0x20
c0006523:	8d 50 54             	lea    edx,[eax+0x54]
c0006526:	83 c0 74             	add    eax,0x74
c0006529:	e8 9b b5 ff ff       	call   c0001ac9 <mem_cpy>
c000652e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006532:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006536:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000653a:	8d 50 74             	lea    edx,[eax+0x74]
c000653d:	e8 94 e6 ff ff       	call   c0004bd6 <st_clust.isra.1>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000654a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654e:	e8 59 db ff ff       	call   c00040ac <dir_register>
c0006553:	89 c3                	mov    ebx,eax
c0006555:	85 c0                	test   eax,eax
c0006557:	0f 85 3b ff ff ff    	jne    c0006498 <f_mkdir+0xa1>
c000655d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006561:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006564:	75 74                	jne    c00065da <f_mkdir+0x1e3>
c0006566:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006569:	ba 00 00 21 50       	mov    edx,0x50210000
c000656e:	83 c0 0c             	add    eax,0xc
c0006571:	e8 4a b5 ff ff       	call   c0001ac0 <st_dword>
c0006576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657d:	89 f2                	mov    edx,esi
c000657f:	83 c0 34             	add    eax,0x34
c0006582:	e8 39 b5 ff ff       	call   c0001ac0 <st_dword>
c0006587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658f:	c1 e2 09             	shl    edx,0x9
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 38             	add    eax,0x38
c0006598:	e8 23 b5 ff ff       	call   c0001ac0 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	c1 e2 09             	shl    edx,0x9
c00065a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ab:	83 c0 28             	add    eax,0x28
c00065ae:	e8 0d b5 ff ff       	call   c0001ac0 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065ba:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c1:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c9:	e8 cf d3 ff ff       	call   c000399d <store_xdir>
c00065ce:	89 c3                	mov    ebx,eax
c00065d0:	85 c0                	test   eax,eax
c00065d2:	0f 85 d4 fe ff ff    	jne    c00064ac <f_mkdir+0xb5>
c00065d8:	eb 30                	jmp    c000660a <f_mkdir+0x213>
c00065da:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065de:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e3:	83 c0 16             	add    eax,0x16
c00065e6:	e8 d5 b4 ff ff       	call   c0001ac0 <st_dword>
c00065eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ef:	89 f1                	mov    ecx,esi
c00065f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f5:	e8 dc e5 ff ff       	call   c0004bd6 <st_clust.isra.1>
c00065fa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065fe:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	e8 1c dd ff ff       	call   c000432f <sync_fs>
c0006613:	89 c3                	mov    ebx,eax
c0006615:	e9 92 fe ff ff       	jmp    c00064ac <f_mkdir+0xb5>
c000661a:	83 ec 80             	sub    esp,0xffffff80
c000661d:	89 d8                	mov    eax,ebx
c000661f:	5b                   	pop    ebx
c0006620:	5e                   	pop    esi
c0006621:	5f                   	pop    edi
c0006622:	c3                   	ret    

c0006623 <f_rename>:
c0006623:	55                   	push   ebp
c0006624:	57                   	push   edi
c0006625:	56                   	push   esi
c0006626:	53                   	push   ebx
c0006627:	81 ec fc 00 00 00    	sub    esp,0xfc
c000662d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006634:	e8 f3 b9 ff ff       	call   c000202c <get_ldnumber>
c0006639:	b9 02 00 00 00       	mov    ecx,0x2
c000663e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006642:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006649:	e8 7e be ff ff       	call   c00024cc <mount_volume>
c000664e:	85 c0                	test   eax,eax
c0006650:	0f 85 b5 02 00 00    	jne    c000690b <f_rename+0x2e8>
c0006656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665a:	83 ec 0c             	sub    esp,0xc
c000665d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006661:	68 60 04 00 00       	push   0x460
c0006666:	e8 c5 1b 00 00       	call   c0008230 <ff_memalloc>
c000666b:	89 c3                	mov    ebx,eax
c000666d:	83 c4 10             	add    esp,0x10
c0006670:	b8 11 00 00 00       	mov    eax,0x11
c0006675:	85 db                	test   ebx,ebx
c0006677:	0f 84 8e 02 00 00    	je     c000690b <f_rename+0x2e8>
c000667d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006681:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006687:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000668a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000668d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006694:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006698:	e8 9b e5 ff ff       	call   c0004c38 <follow_path>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 52 02 00 00    	jne    c00068f7 <f_rename+0x2d4>
c00066a5:	b8 06 00 00 00       	mov    eax,0x6
c00066aa:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b2:	0f 85 3f 02 00 00    	jne    c00068f7 <f_rename+0x2d4>
c00066b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066bc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bf:	0f 85 05 01 00 00    	jne    c00067ca <f_rename+0x1a7>
c00066c5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c8:	b9 40 00 00 00       	mov    ecx,0x40
c00066cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d1:	e8 f3 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00066d6:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066db:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066df:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e6:	e8 de b3 ff ff       	call   c0001ac9 <mem_cpy>
c00066eb:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f9:	e8 3a e5 ff ff       	call   c0004c38 <follow_path>
c00066fe:	85 c0                	test   eax,eax
c0006700:	75 29                	jne    c000672b <f_rename+0x108>
c0006702:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006706:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000670d:	74 0a                	je     c0006719 <f_rename+0xf6>
c000670f:	b8 08 00 00 00       	mov    eax,0x8
c0006714:	e9 de 01 00 00       	jmp    c00068f7 <f_rename+0x2d4>
c0006719:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006720:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006727:	75 e6                	jne    c000670f <f_rename+0xec>
c0006729:	eb 09                	jmp    c0006734 <f_rename+0x111>
c000672b:	83 f8 04             	cmp    eax,0x4
c000672e:	0f 85 c3 01 00 00    	jne    c00068f7 <f_rename+0x2d4>
c0006734:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673b:	e8 6c d9 ff ff       	call   c00040ac <dir_register>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 af 01 00 00    	jne    c00068f7 <f_rename+0x2d4>
c0006748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000674c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006752:	89 c5                	mov    ebp,eax
c0006754:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006757:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000675b:	8d 46 24             	lea    eax,[esi+0x24]
c000675e:	e8 e7 b2 ff ff       	call   c0001a4a <ld_word>
c0006763:	b9 40 00 00 00       	mov    ecx,0x40
c0006768:	89 c7                	mov    edi,eax
c000676a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000676e:	89 f0                	mov    eax,esi
c0006770:	e8 54 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006775:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006779:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000677c:	89 e9                	mov    ecx,ebp
c000677e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006781:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006785:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006789:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000678c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006792:	83 c0 24             	add    eax,0x24
c0006795:	0f b7 d7             	movzx  edx,di
c0006798:	e8 1f b3 ff ff       	call   c0001abc <st_word>
c000679d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a4:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a7:	a8 10                	test   al,0x10
c00067a9:	75 06                	jne    c00067b1 <f_rename+0x18e>
c00067ab:	83 c8 20             	or     eax,0x20
c00067ae:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b8:	e8 e0 d1 ff ff       	call   c000399d <store_xdir>
c00067bd:	85 c0                	test   eax,eax
c00067bf:	0f 84 1c 01 00 00    	je     c00068e1 <f_rename+0x2be>
c00067c5:	e9 2d 01 00 00       	jmp    c00068f7 <f_rename+0x2d4>
c00067ca:	b9 20 00 00 00       	mov    ecx,0x20
c00067cf:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067da:	e8 ea b2 ff ff       	call   c0001ac9 <mem_cpy>
c00067df:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067e4:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ef:	e8 d5 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00067f4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067fb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006802:	e8 31 e4 ff ff       	call   c0004c38 <follow_path>
c0006807:	85 c0                	test   eax,eax
c0006809:	75 27                	jne    c0006832 <f_rename+0x20f>
c000680b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006816:	0f 85 f3 fe ff ff    	jne    c000670f <f_rename+0xec>
c000681c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006823:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000682a:	0f 85 df fe ff ff    	jne    c000670f <f_rename+0xec>
c0006830:	eb 09                	jmp    c000683b <f_rename+0x218>
c0006832:	83 f8 04             	cmp    eax,0x4
c0006835:	0f 85 bc 00 00 00    	jne    c00068f7 <f_rename+0x2d4>
c000683b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006842:	e8 65 d8 ff ff       	call   c00040ac <dir_register>
c0006847:	85 c0                	test   eax,eax
c0006849:	0f 85 a8 00 00 00    	jne    c00068f7 <f_rename+0x2d4>
c000684f:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006856:	b9 13 00 00 00       	mov    ecx,0x13
c000685b:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685f:	8d 46 0d             	lea    eax,[esi+0xd]
c0006862:	e8 62 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006867:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000686b:	a8 10                	test   al,0x10
c000686d:	75 03                	jne    c0006872 <f_rename+0x24f>
c000686f:	83 c8 20             	or     eax,0x20
c0006872:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006875:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006879:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000687d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006881:	74 5e                	je     c00068e1 <f_rename+0x2be>
c0006883:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000688a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c000688e:	74 51                	je     c00068e1 <f_rename+0x2be>
c0006890:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006894:	89 f2                	mov    edx,esi
c0006896:	8a 07                	mov    al,BYTE PTR [edi]
c0006898:	e8 10 e3 ff ff       	call   c0004bad <ld_clust.isra.0>
c000689d:	89 c2                	mov    edx,eax
c000689f:	89 f8                	mov    eax,edi
c00068a1:	e8 3d b4 ff ff       	call   c0001ce3 <clst2sect>
c00068a6:	89 c6                	mov    esi,eax
c00068a8:	89 d1                	mov    ecx,edx
c00068aa:	b8 02 00 00 00       	mov    eax,0x2
c00068af:	09 f2                	or     edx,esi
c00068b1:	74 44                	je     c00068f7 <f_rename+0x2d4>
c00068b3:	89 f2                	mov    edx,esi
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 65 b9 ff ff       	call   c0002221 <move_window>
c00068bc:	85 c0                	test   eax,eax
c00068be:	75 37                	jne    c00068f7 <f_rename+0x2d4>
c00068c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c4:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c8:	75 17                	jne    c00068e1 <f_rename+0x2be>
c00068ca:	8d 50 74             	lea    edx,[eax+0x74]
c00068cd:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068d4:	e8 fd e2 ff ff       	call   c0004bd6 <st_clust.isra.1>
c00068d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068dd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e5:	e8 38 d1 ff ff       	call   c0003a22 <dir_remove>
c00068ea:	85 c0                	test   eax,eax
c00068ec:	75 09                	jne    c00068f7 <f_rename+0x2d4>
c00068ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f2:	e8 38 da ff ff       	call   c000432f <sync_fs>
c00068f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068fb:	83 ec 0c             	sub    esp,0xc
c00068fe:	53                   	push   ebx
c00068ff:	e8 42 19 00 00       	call   c0008246 <ff_memfree>
c0006904:	83 c4 10             	add    esp,0x10
c0006907:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000690b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006911:	5b                   	pop    ebx
c0006912:	5e                   	pop    esi
c0006913:	5f                   	pop    edi
c0006914:	5d                   	pop    ebp
c0006915:	c3                   	ret    

c0006916 <f_chmod>:
c0006916:	57                   	push   edi
c0006917:	b9 02 00 00 00       	mov    ecx,0x2
c000691c:	56                   	push   esi
c000691d:	53                   	push   ebx
c000691e:	83 ec 60             	sub    esp,0x60
c0006921:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006925:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	e8 96 bb ff ff       	call   c00024cc <mount_volume>
c0006936:	85 c0                	test   eax,eax
c0006938:	0f 85 af 00 00 00    	jne    c00069ed <f_chmod+0xd7>
c000693e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006942:	83 ec 0c             	sub    esp,0xc
c0006945:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006949:	68 60 04 00 00       	push   0x460
c000694e:	e8 dd 18 00 00       	call   c0008230 <ff_memalloc>
c0006953:	89 c6                	mov    esi,eax
c0006955:	83 c4 10             	add    esp,0x10
c0006958:	b8 11 00 00 00       	mov    eax,0x11
c000695d:	85 f6                	test   esi,esi
c000695f:	0f 84 88 00 00 00    	je     c00069ed <f_chmod+0xd7>
c0006965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006969:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006972:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006975:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006979:	8d 44 24 14          	lea    eax,[esp+0x14]
c000697d:	e8 b6 e2 ff ff       	call   c0004c38 <follow_path>
c0006982:	85 c0                	test   eax,eax
c0006984:	75 53                	jne    c00069d9 <f_chmod+0xc3>
c0006986:	b8 06 00 00 00       	mov    eax,0x6
c000698b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006990:	75 47                	jne    c00069d9 <f_chmod+0xc3>
c0006992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006996:	89 f9                	mov    ecx,edi
c0006998:	83 e1 27             	and    ecx,0x27
c000699b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000699e:	75 1d                	jne    c00069bd <f_chmod+0xa7>
c00069a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	21 cb                	and    ebx,ecx
c00069a8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ab:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b2:	e8 e6 cf ff ff       	call   c000399d <store_xdir>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	75 1e                	jne    c00069d9 <f_chmod+0xc3>
c00069bb:	eb 13                	jmp    c00069d0 <f_chmod+0xba>
c00069bd:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	21 cb                	and    ebx,ecx
c00069c6:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c9:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069cc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d4:	e8 56 d9 ff ff       	call   c000432f <sync_fs>
c00069d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069dd:	83 ec 0c             	sub    esp,0xc
c00069e0:	56                   	push   esi
c00069e1:	e8 60 18 00 00       	call   c0008246 <ff_memfree>
c00069e6:	83 c4 10             	add    esp,0x10
c00069e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069ed:	83 c4 60             	add    esp,0x60
c00069f0:	5b                   	pop    ebx
c00069f1:	5e                   	pop    esi
c00069f2:	5f                   	pop    edi
c00069f3:	c3                   	ret    

c00069f4 <f_utime>:
c00069f4:	56                   	push   esi
c00069f5:	b9 02 00 00 00       	mov    ecx,0x2
c00069fa:	53                   	push   ebx
c00069fb:	83 ec 64             	sub    esp,0x64
c00069fe:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a02:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	e8 bd ba ff ff       	call   c00024cc <mount_volume>
c0006a0f:	85 c0                	test   eax,eax
c0006a11:	0f 85 b5 00 00 00    	jne    c0006acc <f_utime+0xd8>
c0006a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a1b:	83 ec 0c             	sub    esp,0xc
c0006a1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a22:	68 60 04 00 00       	push   0x460
c0006a27:	e8 04 18 00 00       	call   c0008230 <ff_memalloc>
c0006a2c:	89 c3                	mov    ebx,eax
c0006a2e:	83 c4 10             	add    esp,0x10
c0006a31:	b8 11 00 00 00       	mov    eax,0x11
c0006a36:	85 db                	test   ebx,ebx
c0006a38:	0f 84 8e 00 00 00    	je     c0006acc <f_utime+0xd8>
c0006a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a42:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a4b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a4e:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a52:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a56:	e8 dd e1 ff ff       	call   c0004c38 <follow_path>
c0006a5b:	85 c0                	test   eax,eax
c0006a5d:	75 59                	jne    c0006ab8 <f_utime+0xc4>
c0006a5f:	b8 06 00 00 00       	mov    eax,0x6
c0006a64:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a69:	75 4d                	jne    c0006ab8 <f_utime+0xc4>
c0006a6b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a73:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a77:	c1 e2 10             	shl    edx,0x10
c0006a7a:	09 ca                	or     edx,ecx
c0006a7c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7f:	75 1a                	jne    c0006a9b <f_utime+0xa7>
c0006a81:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a84:	83 c0 0c             	add    eax,0xc
c0006a87:	e8 34 b0 ff ff       	call   c0001ac0 <st_dword>
c0006a8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a90:	e8 08 cf ff ff       	call   c000399d <store_xdir>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	75 1f                	jne    c0006ab8 <f_utime+0xc4>
c0006a99:	eb 14                	jmp    c0006aaf <f_utime+0xbb>
c0006a9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9f:	83 c0 16             	add    eax,0x16
c0006aa2:	e8 19 b0 ff ff       	call   c0001ac0 <st_dword>
c0006aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	e8 77 d8 ff ff       	call   c000432f <sync_fs>
c0006ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006abc:	83 ec 0c             	sub    esp,0xc
c0006abf:	53                   	push   ebx
c0006ac0:	e8 81 17 00 00       	call   c0008246 <ff_memfree>
c0006ac5:	83 c4 10             	add    esp,0x10
c0006ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006acc:	83 c4 64             	add    esp,0x64
c0006acf:	5b                   	pop    ebx
c0006ad0:	5e                   	pop    esi
c0006ad1:	c3                   	ret    

c0006ad2 <f_getlabel>:
c0006ad2:	55                   	push   ebp
c0006ad3:	31 c9                	xor    ecx,ecx
c0006ad5:	57                   	push   edi
c0006ad6:	56                   	push   esi
c0006ad7:	53                   	push   ebx
c0006ad8:	83 ec 6c             	sub    esp,0x6c
c0006adb:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006adf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae6:	e8 e1 b9 ff ff       	call   c00024cc <mount_volume>
c0006aeb:	89 c3                	mov    ebx,eax
c0006aed:	85 c0                	test   eax,eax
c0006aef:	0f 85 73 01 00 00    	jne    c0006c68 <f_getlabel+0x196>
c0006af5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006afd:	0f 84 65 01 00 00    	je     c0006c68 <f_getlabel+0x196>
c0006b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b07:	31 d2                	xor    edx,edx
c0006b09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b11:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b19:	e8 7b c4 ff ff       	call   c0002f99 <dir_sdi>
c0006b1e:	89 c3                	mov    ebx,eax
c0006b20:	85 c0                	test   eax,eax
c0006b22:	0f 85 2f 01 00 00    	jne    c0006c57 <f_getlabel+0x185>
c0006b28:	ba 01 00 00 00       	mov    edx,0x1
c0006b2d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b31:	e8 75 cc ff ff       	call   c00037ab <dir_read>
c0006b36:	89 c3                	mov    ebx,eax
c0006b38:	85 c0                	test   eax,eax
c0006b3a:	0f 85 17 01 00 00    	jne    c0006c57 <f_getlabel+0x185>
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b47:	74 09                	je     c0006b52 <f_getlabel+0x80>
c0006b49:	31 f6                	xor    esi,esi
c0006b4b:	31 c9                	xor    ecx,ecx
c0006b4d:	e9 c8 00 00 00       	jmp    c0006c1a <f_getlabel+0x148>
c0006b52:	31 ed                	xor    ebp,ebp
c0006b54:	31 f6                	xor    esi,esi
c0006b56:	31 ff                	xor    edi,edi
c0006b58:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b5c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b60:	39 fa                	cmp    edx,edi
c0006b62:	76 4b                	jbe    c0006baf <f_getlabel+0xdd>
c0006b64:	47                   	inc    edi
c0006b65:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b68:	01 d0                	add    eax,edx
c0006b6a:	e8 db ae ff ff       	call   c0001a4a <ld_word>
c0006b6f:	66 85 ed             	test   bp,bp
c0006b72:	75 0d                	jne    c0006b81 <f_getlabel+0xaf>
c0006b74:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7a:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7f:	76 28                	jbe    c0006ba9 <f_getlabel+0xd7>
c0006b81:	89 e9                	mov    ecx,ebp
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	c1 e1 10             	shl    ecx,0x10
c0006b8d:	01 f2                	add    edx,esi
c0006b8f:	0f b7 c0             	movzx  eax,ax
c0006b92:	09 c8                	or     eax,ecx
c0006b94:	b9 04 00 00 00       	mov    ecx,0x4
c0006b99:	e8 4c b0 ff ff       	call   c0001bea <put_utf>
c0006b9e:	84 c0                	test   al,al
c0006ba0:	74 0b                	je     c0006bad <f_getlabel+0xdb>
c0006ba2:	0f b6 c0             	movzx  eax,al
c0006ba5:	01 c6                	add    esi,eax
c0006ba7:	31 c0                	xor    eax,eax
c0006ba9:	89 c5                	mov    ebp,eax
c0006bab:	eb ab                	jmp    c0006b58 <f_getlabel+0x86>
c0006bad:	31 f6                	xor    esi,esi
c0006baf:	66 85 ed             	test   bp,bp
c0006bb2:	74 02                	je     c0006bb6 <f_getlabel+0xe4>
c0006bb4:	31 f6                	xor    esi,esi
c0006bb6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bbd:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bc1:	e9 a2 00 00 00       	jmp    c0006c68 <f_getlabel+0x196>
c0006bc6:	83 ff 0b             	cmp    edi,0xb
c0006bc9:	74 11                	je     c0006bdc <f_getlabel+0x10a>
c0006bcb:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd4:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd7:	c1 e0 08             	shl    eax,0x8
c0006bda:	09 c2                	or     edx,eax
c0006bdc:	50                   	push   eax
c0006bdd:	50                   	push   eax
c0006bde:	68 b5 01 00 00       	push   0x1b5
c0006be3:	0f b7 d2             	movzx  edx,dx
c0006be6:	52                   	push   edx
c0006be7:	e8 07 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bec:	83 c4 10             	add    esp,0x10
c0006bef:	66 85 c0             	test   ax,ax
c0006bf2:	74 46                	je     c0006c3a <f_getlabel+0x168>
c0006bf4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfb:	b9 04 00 00 00       	mov    ecx,0x4
c0006c00:	01 f2                	add    edx,esi
c0006c02:	0f b7 c0             	movzx  eax,ax
c0006c05:	e8 e0 af ff ff       	call   c0001bea <put_utf>
c0006c0a:	84 c0                	test   al,al
c0006c0c:	74 2c                	je     c0006c3a <f_getlabel+0x168>
c0006c0e:	0f b6 c0             	movzx  eax,al
c0006c11:	01 c6                	add    esi,eax
c0006c13:	83 ff 0b             	cmp    edi,0xb
c0006c16:	74 24                	je     c0006c3c <f_getlabel+0x16a>
c0006c18:	89 f9                	mov    ecx,edi
c0006c1a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c1e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c21:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2f:	e8 ea ae ff ff       	call   c0001b1e <dbc_1st>
c0006c34:	85 c0                	test   eax,eax
c0006c36:	74 a4                	je     c0006bdc <f_getlabel+0x10a>
c0006c38:	eb 8c                	jmp    c0006bc6 <f_getlabel+0xf4>
c0006c3a:	31 f6                	xor    esi,esi
c0006c3c:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c43:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c46:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c4d:	74 19                	je     c0006c68 <f_getlabel+0x196>
c0006c4f:	4e                   	dec    esi
c0006c50:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c53:	74 ee                	je     c0006c43 <f_getlabel+0x171>
c0006c55:	eb 11                	jmp    c0006c68 <f_getlabel+0x196>
c0006c57:	83 fb 04             	cmp    ebx,0x4
c0006c5a:	75 0c                	jne    c0006c68 <f_getlabel+0x196>
c0006c5c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c63:	31 db                	xor    ebx,ebx
c0006c65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c68:	85 db                	test   ebx,ebx
c0006c6a:	75 50                	jne    c0006cbc <f_getlabel+0x1ea>
c0006c6c:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c74:	74 46                	je     c0006cbc <f_getlabel+0x1ea>
c0006c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c80:	e8 9c b5 ff ff       	call   c0002221 <move_window>
c0006c85:	89 c3                	mov    ebx,eax
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 31                	jne    c0006cbc <f_getlabel+0x1ea>
c0006c8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8f:	b8 43 00 00 00       	mov    eax,0x43
c0006c94:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c96:	80 f9 03             	cmp    cl,0x3
c0006c99:	74 0f                	je     c0006caa <f_getlabel+0x1d8>
c0006c9b:	31 c0                	xor    eax,eax
c0006c9d:	80 f9 04             	cmp    cl,0x4
c0006ca0:	0f 94 c0             	sete   al
c0006ca3:	48                   	dec    eax
c0006ca4:	83 e0 c3             	and    eax,0xffffffc3
c0006ca7:	83 c0 64             	add    eax,0x64
c0006caa:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cae:	e8 a4 ad ff ff       	call   c0001a57 <ld_dword>
c0006cb3:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cba:	89 07                	mov    DWORD PTR [edi],eax
c0006cbc:	83 c4 6c             	add    esp,0x6c
c0006cbf:	89 d8                	mov    eax,ebx
c0006cc1:	5b                   	pop    ebx
c0006cc2:	5e                   	pop    esi
c0006cc3:	5f                   	pop    edi
c0006cc4:	5d                   	pop    ebp
c0006cc5:	c3                   	ret    

c0006cc6 <f_setlabel>:
c0006cc6:	56                   	push   esi
c0006cc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006ccc:	53                   	push   ebx
c0006ccd:	83 ec 74             	sub    esp,0x74
c0006cd0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdb:	e8 ec b7 ff ff       	call   c00024cc <mount_volume>
c0006ce0:	89 c6                	mov    esi,eax
c0006ce2:	85 c0                	test   eax,eax
c0006ce4:	0f 85 41 02 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cee:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf1:	0f 85 8e 00 00 00    	jne    c0006d85 <f_setlabel+0xbf>
c0006cf7:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfc:	31 d2                	xor    edx,edx
c0006cfe:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d02:	31 db                	xor    ebx,ebx
c0006d04:	e8 d5 ad ff ff       	call   c0001ade <mem_set>
c0006d09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d10:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d13:	0f 86 0a 01 00 00    	jbe    c0006e23 <f_setlabel+0x15d>
c0006d19:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d20:	e8 ff ad ff ff       	call   c0001b24 <tchar2uni>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2c:	76 2a                	jbe    c0006d58 <f_setlabel+0x92>
c0006d2e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d31:	74 05                	je     c0006d38 <f_setlabel+0x72>
c0006d33:	83 fb 09             	cmp    ebx,0x9
c0006d36:	76 0a                	jbe    c0006d42 <f_setlabel+0x7c>
c0006d38:	be 06 00 00 00       	mov    esi,0x6
c0006d3d:	e9 e9 01 00 00       	jmp    c0006f2b <f_setlabel+0x265>
c0006d42:	89 c2                	mov    edx,eax
c0006d44:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d48:	c1 ea 10             	shr    edx,0x10
c0006d4b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4e:	01 c8                	add    eax,ecx
c0006d50:	43                   	inc    ebx
c0006d51:	e8 66 ad ff ff       	call   c0001abc <st_word>
c0006d56:	eb 04                	jmp    c0006d5c <f_setlabel+0x96>
c0006d58:	85 c0                	test   eax,eax
c0006d5a:	74 dc                	je     c0006d38 <f_setlabel+0x72>
c0006d5c:	89 f2                	mov    edx,esi
c0006d5e:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d63:	e8 a4 ad ff ff       	call   c0001b0c <chk_chr>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	75 cc                	jne    c0006d38 <f_setlabel+0x72>
c0006d6c:	83 fb 0a             	cmp    ebx,0xa
c0006d6f:	77 c7                	ja     c0006d38 <f_setlabel+0x72>
c0006d71:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d74:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d78:	0f b7 d6             	movzx  edx,si
c0006d7b:	01 c8                	add    eax,ecx
c0006d7d:	43                   	inc    ebx
c0006d7e:	e8 39 ad ff ff       	call   c0001abc <st_word>
c0006d83:	eb 84                	jmp    c0006d09 <f_setlabel+0x43>
c0006d85:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8a:	ba 20 00 00 00       	mov    edx,0x20
c0006d8f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d93:	31 db                	xor    ebx,ebx
c0006d95:	e8 44 ad ff ff       	call   c0001ade <mem_set>
c0006d9a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da4:	76 60                	jbe    c0006e06 <f_setlabel+0x140>
c0006da6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dad:	e8 72 ad ff ff       	call   c0001b24 <tchar2uni>
c0006db2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db7:	0f 87 7b ff ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	50                   	push   eax
c0006dc1:	e8 9c 15 00 00       	call   c0008362 <ff_wtoupper>
c0006dc6:	5a                   	pop    edx
c0006dc7:	59                   	pop    ecx
c0006dc8:	68 b5 01 00 00       	push   0x1b5
c0006dcd:	50                   	push   eax
c0006dce:	e8 8a 14 00 00       	call   c000825d <ff_uni2oem>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	89 c6                	mov    esi,eax
c0006dd8:	66 85 c0             	test   ax,ax
c0006ddb:	0f 84 57 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006de1:	0f b7 d0             	movzx  edx,ax
c0006de4:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006de9:	e8 1e ad ff ff       	call   c0001b0c <chk_chr>
c0006dee:	85 c0                	test   eax,eax
c0006df0:	0f 85 42 ff ff ff    	jne    c0006d38 <f_setlabel+0x72>
c0006df6:	66 81 fe ff 00       	cmp    si,0xff
c0006dfb:	0f 87 14 01 00 00    	ja     c0006f15 <f_setlabel+0x24f>
c0006e01:	e9 fa 00 00 00       	jmp    c0006f00 <f_setlabel+0x23a>
c0006e06:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0b:	0f 84 27 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006e11:	85 db                	test   ebx,ebx
c0006e13:	74 0e                	je     c0006e23 <f_setlabel+0x15d>
c0006e15:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e18:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1d:	75 04                	jne    c0006e23 <f_setlabel+0x15d>
c0006e1f:	89 c3                	mov    ebx,eax
c0006e21:	eb ee                	jmp    c0006e11 <f_setlabel+0x14b>
c0006e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e27:	31 d2                	xor    edx,edx
c0006e29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e31:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e39:	e8 5b c1 ff ff       	call   c0002f99 <dir_sdi>
c0006e3e:	89 c6                	mov    esi,eax
c0006e40:	85 c0                	test   eax,eax
c0006e42:	0f 85 e3 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006e48:	ba 01 00 00 00       	mov    edx,0x1
c0006e4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e51:	e8 55 c9 ff ff       	call   c00037ab <dir_read>
c0006e56:	85 c0                	test   eax,eax
c0006e58:	75 21                	jne    c0006e7b <f_setlabel+0x1b5>
c0006e5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e5e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e62:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e65:	74 5d                	je     c0006ec4 <f_setlabel+0x1fe>
c0006e67:	85 db                	test   ebx,ebx
c0006e69:	74 0b                	je     c0006e76 <f_setlabel+0x1b0>
c0006e6b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e70:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x220>
c0006e76:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e79:	eb 70                	jmp    c0006eeb <f_setlabel+0x225>
c0006e7b:	83 f8 04             	cmp    eax,0x4
c0006e7e:	75 7c                	jne    c0006efc <f_setlabel+0x236>
c0006e80:	85 db                	test   ebx,ebx
c0006e82:	0f 84 a3 00 00 00    	je     c0006f2b <f_setlabel+0x265>
c0006e88:	ba 01 00 00 00       	mov    edx,0x1
c0006e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e91:	e8 8f ca ff ff       	call   c0003925 <dir_alloc>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	85 c0                	test   eax,eax
c0006e9a:	0f 85 8b 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006ea0:	31 d2                	xor    edx,edx
c0006ea2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea6:	b9 20 00 00 00       	mov    ecx,0x20
c0006eab:	e8 2e ac ff ff       	call   c0001ade <mem_set>
c0006eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebb:	75 18                	jne    c0006ed5 <f_setlabel+0x20f>
c0006ebd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec7:	b9 16 00 00 00       	mov    ecx,0x16
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	83 c0 02             	add    eax,0x2
c0006ed3:	eb 9b                	jmp    c0006e70 <f_setlabel+0x1aa>
c0006ed5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ede:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee6:	e8 de ab ff ff       	call   c0001ac9 <mem_cpy>
c0006eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eef:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef7:	e8 33 d4 ff ff       	call   c000432f <sync_fs>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	eb 2b                	jmp    c0006f2b <f_setlabel+0x265>
c0006f00:	83 fb 0a             	cmp    ebx,0xa
c0006f03:	0f 87 2f fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f09:	89 f0                	mov    eax,esi
c0006f0b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0f:	43                   	inc    ebx
c0006f10:	e9 85 fe ff ff       	jmp    c0006d9a <f_setlabel+0xd4>
c0006f15:	83 fb 09             	cmp    ebx,0x9
c0006f18:	0f 87 1a fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f1e:	89 f0                	mov    eax,esi
c0006f20:	66 c1 e8 08          	shr    ax,0x8
c0006f24:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f28:	43                   	inc    ebx
c0006f29:	eb de                	jmp    c0006f09 <f_setlabel+0x243>
c0006f2b:	83 c4 74             	add    esp,0x74
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	5b                   	pop    ebx
c0006f31:	5e                   	pop    esi
c0006f32:	c3                   	ret    

c0006f33 <f_forward>:
c0006f33:	55                   	push   ebp
c0006f34:	57                   	push   edi
c0006f35:	56                   	push   esi
c0006f36:	53                   	push   ebx
c0006f37:	83 ec 2c             	sub    esp,0x2c
c0006f3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f3e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4c:	89 d8                	mov    eax,ebx
c0006f4e:	e8 f3 b1 ff ff       	call   c0002146 <validate>
c0006f53:	89 c5                	mov    ebp,eax
c0006f55:	85 c0                	test   eax,eax
c0006f57:	0f 85 aa 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f5d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f61:	85 ed                	test   ebp,ebp
c0006f63:	0f 85 9e 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f69:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6d:	0f 84 8f 01 00 00    	je     c0007102 <f_forward+0x1cf>
c0006f73:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f76:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f79:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7c:	bf 00 00 00 00       	mov    edi,0x0
c0006f81:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f84:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f88:	89 d1                	mov    ecx,edx
c0006f8a:	19 f9                	sbb    ecx,edi
c0006f8c:	0f 83 cf 00 00 00    	jae    c0007061 <f_forward+0x12e>
c0006f92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f96:	e9 c6 00 00 00       	jmp    c0007061 <f_forward+0x12e>
c0006f9b:	50                   	push   eax
c0006f9c:	50                   	push   eax
c0006f9d:	6a 00                	push   0x0
c0006f9f:	6a 00                	push   0x0
c0006fa1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 84 57 01 00 00    	je     c0007107 <f_forward+0x1d4>
c0006fb0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fba:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fbe:	89 d7                	mov    edi,edx
c0006fc0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc3:	89 c6                	mov    esi,eax
c0006fc5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc9:	21 ce                	and    esi,ecx
c0006fcb:	89 c1                	mov    ecx,eax
c0006fcd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd3:	0f 84 98 00 00 00    	je     c0007071 <f_forward+0x13e>
c0006fd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe0:	89 c8                	mov    eax,ecx
c0006fe2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe6:	e8 f8 ac ff ff       	call   c0001ce3 <clst2sect>
c0006feb:	89 d7                	mov    edi,edx
c0006fed:	09 c7                	or     edi,eax
c0006fef:	0f 84 9e 00 00 00    	je     c0007093 <f_forward+0x160>
c0006ff5:	31 ff                	xor    edi,edi
c0006ff7:	01 c6                	add    esi,eax
c0006ff9:	11 d7                	adc    edi,edx
c0006ffb:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffe:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007001:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007005:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007008:	39 fa                	cmp    edx,edi
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	0f 85 a2 00 00 00    	jne    c00070b6 <f_forward+0x183>
c0007014:	39 f0                	cmp    eax,esi
c0007016:	0f 85 9a 00 00 00    	jne    c00070b6 <f_forward+0x183>
c000701c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701f:	ba 00 02 00 00       	mov    edx,0x200
c0007024:	25 ff 01 00 00       	and    eax,0x1ff
c0007029:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702d:	29 c2                	sub    edx,eax
c000702f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007032:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007035:	39 d1                	cmp    ecx,edx
c0007037:	76 02                	jbe    c000703b <f_forward+0x108>
c0007039:	89 d1                	mov    ecx,edx
c000703b:	52                   	push   edx
c000703c:	8d 73 50             	lea    esi,[ebx+0x50]
c000703f:	52                   	push   edx
c0007040:	01 c6                	add    esi,eax
c0007042:	51                   	push   ecx
c0007043:	56                   	push   esi
c0007044:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007048:	83 c4 10             	add    esp,0x10
c000704b:	85 c0                	test   eax,eax
c000704d:	74 44                	je     c0007093 <f_forward+0x160>
c000704f:	31 ff                	xor    edi,edi
c0007051:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007054:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007057:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705f:	01 07                	add    DWORD PTR [edi],eax
c0007061:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007066:	0f 85 2f ff ff ff    	jne    c0006f9b <f_forward+0x68>
c000706c:	e9 96 00 00 00       	jmp    c0007107 <f_forward+0x1d4>
c0007071:	85 f6                	test   esi,esi
c0007073:	0f 85 60 ff ff ff    	jne    c0006fd9 <f_forward+0xa6>
c0007079:	89 d7                	mov    edi,edx
c000707b:	09 c7                	or     edi,eax
c000707d:	75 05                	jne    c0007084 <f_forward+0x151>
c000707f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007082:	eb 0a                	jmp    c000708e <f_forward+0x15b>
c0007084:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007087:	89 d8                	mov    eax,ebx
c0007089:	e8 15 bd ff ff       	call   c0002da3 <get_fat>
c000708e:	83 f8 01             	cmp    eax,0x1
c0007091:	77 0b                	ja     c000709e <f_forward+0x16b>
c0007093:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007097:	bd 02 00 00 00       	mov    ebp,0x2
c000709c:	eb 69                	jmp    c0007107 <f_forward+0x1d4>
c000709e:	83 f8 ff             	cmp    eax,0xffffffff
c00070a1:	75 0b                	jne    c00070ae <f_forward+0x17b>
c00070a3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a7:	bd 01 00 00 00       	mov    ebp,0x1
c00070ac:	eb 59                	jmp    c0007107 <f_forward+0x1d4>
c00070ae:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b1:	e9 23 ff ff ff       	jmp    c0006fd9 <f_forward+0xa6>
c00070b6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ba:	79 20                	jns    c00070dc <f_forward+0x1a9>
c00070bc:	83 ec 0c             	sub    esp,0xc
c00070bf:	6a 01                	push   0x1
c00070c1:	52                   	push   edx
c00070c2:	50                   	push   eax
c00070c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cb:	50                   	push   eax
c00070cc:	e8 44 a9 ff ff       	call   c0001a15 <disk_write>
c00070d1:	83 c4 20             	add    esp,0x20
c00070d4:	85 c0                	test   eax,eax
c00070d6:	75 cb                	jne    c00070a3 <f_forward+0x170>
c00070d8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070dc:	83 ec 0c             	sub    esp,0xc
c00070df:	6a 01                	push   0x1
c00070e1:	57                   	push   edi
c00070e2:	56                   	push   esi
c00070e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070eb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ef:	50                   	push   eax
c00070f0:	e8 0a a9 ff ff       	call   c00019ff <disk_read>
c00070f5:	83 c4 20             	add    esp,0x20
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 84 1c ff ff ff    	je     c000701c <f_forward+0xe9>
c0007100:	eb a1                	jmp    c00070a3 <f_forward+0x170>
c0007102:	bd 07 00 00 00       	mov    ebp,0x7
c0007107:	83 c4 2c             	add    esp,0x2c
c000710a:	89 e8                	mov    eax,ebp
c000710c:	5b                   	pop    ebx
c000710d:	5e                   	pop    esi
c000710e:	5f                   	pop    edi
c000710f:	5d                   	pop    ebp
c0007110:	c3                   	ret    

c0007111 <f_mkfs>:
c0007111:	55                   	push   ebp
c0007112:	57                   	push   edi
c0007113:	56                   	push   esi
c0007114:	53                   	push   ebx
c0007115:	bb 0b 00 00 00       	mov    ebx,0xb
c000711a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007120:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007127:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000712e:	e8 f9 ae ff ff       	call   c000202c <get_ldnumber>
c0007133:	85 c0                	test   eax,eax
c0007135:	0f 88 e8 10 00 00    	js     c0008223 <f_mkfs+0x1112>
c000713b:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c0007142:	85 d2                	test   edx,edx
c0007144:	74 03                	je     c0007149 <f_mkfs+0x38>
c0007146:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007149:	85 f6                	test   esi,esi
c000714b:	75 05                	jne    c0007152 <f_mkfs+0x41>
c000714d:	be 80 04 02 c0       	mov    esi,0xc0020480
c0007152:	0f b6 c0             	movzx  eax,al
c0007155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007159:	83 ec 0c             	sub    esp,0xc
c000715c:	bb 03 00 00 00       	mov    ebx,0x3
c0007161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007165:	e8 92 a8 ff ff       	call   c00019fc <disk_initialize>
c000716a:	83 c4 10             	add    esp,0x10
c000716d:	a8 01                	test   al,0x1
c000716f:	0f 85 ae 10 00 00    	jne    c0008223 <f_mkfs+0x1112>
c0007175:	bb 0a 00 00 00       	mov    ebx,0xa
c000717a:	a8 04                	test   al,0x4
c000717c:	0f 85 a1 10 00 00    	jne    c0008223 <f_mkfs+0x1112>
c0007182:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007185:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007189:	85 c0                	test   eax,eax
c000718b:	75 20                	jne    c00071ad <f_mkfs+0x9c>
c000718d:	51                   	push   ecx
c000718e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007192:	50                   	push   eax
c0007193:	6a 03                	push   0x3
c0007195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007199:	e8 8d a8 ff ff       	call   c0001a2b <disk_ioctl>
c000719e:	83 c4 10             	add    esp,0x10
c00071a1:	85 c0                	test   eax,eax
c00071a3:	74 08                	je     c00071ad <f_mkfs+0x9c>
c00071a5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ad:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b9:	77 04                	ja     c00071bf <f_mkfs+0xae>
c00071bb:	85 c2                	test   edx,eax
c00071bd:	74 08                	je     c00071c7 <f_mkfs+0xb6>
c00071bf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071ca:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071ce:	48                   	dec    eax
c00071cf:	3c 01                	cmp    al,0x1
c00071d1:	76 05                	jbe    c00071d8 <f_mkfs+0xc7>
c00071d3:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071df:	48                   	dec    eax
c00071e0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e5:	77 07                	ja     c00071ee <f_mkfs+0xdd>
c00071e7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0xe5>
c00071ee:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f9:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071ff:	77 07                	ja     c0007208 <f_mkfs+0xf7>
c0007201:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007204:	85 d8                	test   eax,ebx
c0007206:	74 02                	je     c000720a <f_mkfs+0xf9>
c0007208:	31 db                	xor    ebx,ebx
c000720a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007215:	77 0a                	ja     c0007221 <f_mkfs+0x110>
c0007217:	bb 11 00 00 00       	mov    ebx,0x11
c000721c:	e9 02 10 00 00       	jmp    c0008223 <f_mkfs+0x1112>
c0007221:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007228:	8b 36                	mov    esi,DWORD PTR [esi]
c000722a:	85 ed                	test   ebp,ebp
c000722c:	75 1e                	jne    c000724c <f_mkfs+0x13b>
c000722e:	83 ec 0c             	sub    esp,0xc
c0007231:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007238:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723d:	50                   	push   eax
c000723e:	e8 ed 0f 00 00       	call   c0008230 <ff_memalloc>
c0007243:	83 c4 10             	add    esp,0x10
c0007246:	89 c5                	mov    ebp,eax
c0007248:	85 c0                	test   eax,eax
c000724a:	74 cb                	je     c0007217 <f_mkfs+0x106>
c000724c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007254:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725c:	52                   	push   edx
c000725d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007261:	50                   	push   eax
c0007262:	6a 01                	push   0x1
c0007264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007268:	e8 be a7 ff ff       	call   c0001a2b <disk_ioctl>
c000726d:	83 c4 10             	add    esp,0x10
c0007270:	85 c0                	test   eax,eax
c0007272:	0f 85 46 0f 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007278:	89 f1                	mov    ecx,esi
c000727a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007282:	83 e1 0f             	and    ecx,0xf
c0007285:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007291:	83 e6 08             	and    esi,0x8
c0007294:	75 56                	jne    c00072ec <f_mkfs+0x1db>
c0007296:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000729e:	83 ff 00             	cmp    edi,0x0
c00072a1:	76 20                	jbe    c00072c3 <f_mkfs+0x1b2>
c00072a3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a8:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ae:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b6:	83 d7 ff             	adc    edi,0xffffffff
c00072b9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c1:	eb 21                	jmp    c00072e4 <f_mkfs+0x1d3>
c00072c3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c8:	39 f2                	cmp    edx,esi
c00072ca:	19 f8                	sbb    eax,edi
c00072cc:	73 1e                	jae    c00072ec <f_mkfs+0x1db>
c00072ce:	83 c6 c1             	add    esi,0xffffffc1
c00072d1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d9:	83 d7 ff             	adc    edi,0xffffffff
c00072dc:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fb:	ba 7f 00 00 00       	mov    edx,0x7f
c0007300:	31 c0                	xor    eax,eax
c0007302:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007305:	89 c7                	mov    edi,eax
c0007307:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730b:	0f 83 c1 0a 00 00    	jae    c0007dd2 <f_mkfs+0xcc1>
c0007311:	89 df                	mov    edi,ebx
c0007313:	c1 ef 09             	shr    edi,0x9
c0007316:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007321:	c1 ef 09             	shr    edi,0x9
c0007324:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007329:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732d:	74 29                	je     c0007358 <f_mkfs+0x247>
c000732f:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007334:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000733a:	0f 97 c2             	seta   dl
c000733d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007340:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007344:	0f 92 c0             	setb   al
c0007347:	08 c2                	or     dl,al
c0007349:	75 5b                	jne    c00073a6 <f_mkfs+0x295>
c000734b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734f:	83 e0 07             	and    eax,0x7
c0007352:	3c 04                	cmp    al,0x4
c0007354:	74 50                	je     c00073a6 <f_mkfs+0x295>
c0007356:	eb 1b                	jmp    c0007373 <f_mkfs+0x262>
c0007358:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735d:	0f 87 6f 0a 00 00    	ja     c0007dd2 <f_mkfs+0xcc1>
c0007363:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007369:	76 08                	jbe    c0007373 <f_mkfs+0x262>
c000736b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007373:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007377:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737b:	83 e0 01             	and    eax,0x1
c000737e:	80 e1 02             	and    cl,0x2
c0007381:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007385:	74 0d                	je     c0007394 <f_mkfs+0x283>
c0007387:	84 c0                	test   al,al
c0007389:	0f 84 4f 09 00 00    	je     c0007cde <f_mkfs+0xbcd>
c000738f:	e9 0e 08 00 00       	jmp    c0007ba2 <f_mkfs+0xa91>
c0007394:	bb 13 00 00 00       	mov    ebx,0x13
c0007399:	84 c0                	test   al,al
c000739b:	0f 85 01 08 00 00    	jne    c0007ba2 <f_mkfs+0xa91>
c00073a1:	e9 35 0e 00 00       	jmp    c00081db <f_mkfs+0x10ca>
c00073a6:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ab:	31 c0                	xor    eax,eax
c00073ad:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b0:	89 c7                	mov    edi,eax
c00073b2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b6:	0f 83 16 0a 00 00    	jae    c0007dd2 <f_mkfs+0xcc1>
c00073bc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c2:	77 39                	ja     c00073fd <f_mkfs+0x2ec>
c00073c4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d8:	73 08                	jae    c00073e2 <f_mkfs+0x2d1>
c00073da:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ea:	b8 00 00 00 00       	mov    eax,0x0
c00073ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f3:	73 08                	jae    c00073fd <f_mkfs+0x2ec>
c00073f5:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007405:	83 c0 20             	add    eax,0x20
c0007408:	83 d2 00             	adc    edx,0x0
c000740b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007413:	31 d2                	xor    edx,edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	52                   	push   edx
c000741a:	50                   	push   eax
c000741b:	31 ff                	xor    edi,edi
c000741d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	e8 e2 80 01 00       	call   c001f50c <__udivdi3>
c000742a:	83 c4 10             	add    esp,0x10
c000742d:	c1 e0 02             	shl    eax,0x2
c0007430:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007434:	05 07 02 00 00       	add    eax,0x207
c0007439:	89 f1                	mov    ecx,esi
c000743b:	c1 e8 09             	shr    eax,0x9
c000743e:	89 fb                	mov    ebx,edi
c0007440:	83 c1 ff             	add    ecx,0xffffffff
c0007443:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007447:	83 d3 ff             	adc    ebx,0xffffffff
c000744a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000744e:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007452:	31 d2                	xor    edx,edx
c0007454:	01 c8                	add    eax,ecx
c0007456:	11 da                	adc    edx,ebx
c0007458:	89 c1                	mov    ecx,eax
c000745a:	f7 de                	neg    esi
c000745c:	83 d7 00             	adc    edi,0x0
c000745f:	21 f1                	and    ecx,esi
c0007461:	f7 df                	neg    edi
c0007463:	89 d0                	mov    eax,edx
c0007465:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007469:	21 f8                	and    eax,edi
c000746b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007473:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007477:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007483:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007486:	0f ac d0 01          	shrd   eax,edx,0x1
c000748a:	d1 ea                	shr    edx,1
c000748c:	89 df                	mov    edi,ebx
c000748e:	39 c1                	cmp    ecx,eax
c0007490:	19 d7                	sbb    edi,edx
c0007492:	0f 83 3a 09 00 00    	jae    c0007dd2 <f_mkfs+0xcc1>
c0007498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749c:	31 d2                	xor    edx,edx
c000749e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ad:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bd:	83 f8 0f             	cmp    eax,0xf
c00074c0:	0f 86 0c 09 00 00    	jbe    c0007dd2 <f_mkfs+0xcc1>
c00074c6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074ce:	0f 87 fe 08 00 00    	ja     c0007dd2 <f_mkfs+0xcc1>
c00074d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d8:	31 d2                	xor    edx,edx
c00074da:	83 c0 07             	add    eax,0x7
c00074dd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e5:	c1 e8 03             	shr    eax,0x3
c00074e8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f8:	c1 e0 09             	shl    eax,0x9
c00074fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007506:	48                   	dec    eax
c0007507:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750b:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007513:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007517:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000751e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007522:	31 d2                	xor    edx,edx
c0007524:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007529:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000752d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007531:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007535:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007539:	31 ff                	xor    edi,edi
c000753b:	31 f6                	xor    esi,esi
c000753d:	31 db                	xor    ebx,ebx
c000753f:	85 ff                	test   edi,edi
c0007541:	74 05                	je     c0007548 <f_mkfs+0x437>
c0007543:	4f                   	dec    edi
c0007544:	74 44                	je     c000758a <f_mkfs+0x479>
c0007546:	eb 4f                	jmp    c0007597 <f_mkfs+0x486>
c0007548:	83 ec 0c             	sub    esp,0xc
c000754b:	0f b7 c3             	movzx  eax,bx
c000754e:	50                   	push   eax
c000754f:	e8 0e 0e 00 00       	call   c0008362 <ff_wtoupper>
c0007554:	83 c4 10             	add    esp,0x10
c0007557:	89 c1                	mov    ecx,eax
c0007559:	66 39 c3             	cmp    bx,ax
c000755c:	8d 53 01             	lea    edx,[ebx+0x1]
c000755f:	75 3e                	jne    c000759f <f_mkfs+0x48e>
c0007561:	be 01 00 00 00       	mov    esi,0x1
c0007566:	89 df                	mov    edi,ebx
c0007568:	66 01 f7             	add    di,si
c000756b:	75 07                	jne    c0007574 <f_mkfs+0x463>
c000756d:	83 fe 7f             	cmp    esi,0x7f
c0007570:	77 31                	ja     c00075a3 <f_mkfs+0x492>
c0007572:	eb 16                	jmp    c000758a <f_mkfs+0x479>
c0007574:	83 ec 0c             	sub    esp,0xc
c0007577:	0f b7 ff             	movzx  edi,di
c000757a:	57                   	push   edi
c000757b:	e8 e2 0d 00 00       	call   c0008362 <ff_wtoupper>
c0007580:	83 c4 10             	add    esp,0x10
c0007583:	39 c7                	cmp    edi,eax
c0007585:	75 e6                	jne    c000756d <f_mkfs+0x45c>
c0007587:	46                   	inc    esi
c0007588:	eb dc                	jmp    c0007566 <f_mkfs+0x455>
c000758a:	31 c0                	xor    eax,eax
c000758c:	4e                   	dec    esi
c000758d:	0f 95 c0             	setne  al
c0007590:	89 d9                	mov    ecx,ebx
c0007592:	89 c7                	mov    edi,eax
c0007594:	43                   	inc    ebx
c0007595:	eb 14                	jmp    c00075ab <f_mkfs+0x49a>
c0007597:	89 f1                	mov    ecx,esi
c0007599:	01 f3                	add    ebx,esi
c000759b:	31 ff                	xor    edi,edi
c000759d:	eb 0c                	jmp    c00075ab <f_mkfs+0x49a>
c000759f:	89 d3                	mov    ebx,edx
c00075a1:	eb 08                	jmp    c00075ab <f_mkfs+0x49a>
c00075a3:	bf 02 00 00 00       	mov    edi,0x2
c00075a8:	83 c9 ff             	or     ecx,0xffffffff
c00075ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ae:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b2:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b6:	0f b6 c1             	movzx  eax,cl
c00075b9:	e8 87 a9 ff ff       	call   c0001f45 <xsum32>
c00075be:	66 c1 e9 08          	shr    cx,0x8
c00075c2:	89 c2                	mov    edx,eax
c00075c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c7:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075cb:	0f b7 c1             	movzx  eax,cx
c00075ce:	e8 72 a9 ff ff       	call   c0001f45 <xsum32>
c00075d3:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d8:	66 85 db             	test   bx,bx
c00075db:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075df:	74 1f                	je     c0007600 <f_mkfs+0x4ef>
c00075e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e4:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075eb:	83 c0 02             	add    eax,0x2
c00075ee:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f4:	39 c2                	cmp    edx,eax
c00075f6:	74 08                	je     c0007600 <f_mkfs+0x4ef>
c00075f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00075fb:	e9 3f ff ff ff       	jmp    c000753f <f_mkfs+0x42e>
c0007600:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007603:	83 ec 0c             	sub    esp,0xc
c0007606:	05 01 02 00 00       	add    eax,0x201
c000760b:	c1 e8 09             	shr    eax,0x9
c000760e:	50                   	push   eax
c000760f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007613:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000761b:	55                   	push   ebp
c000761c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007620:	e8 f0 a3 ff ff       	call   c0001a15 <disk_write>
c0007625:	83 c4 20             	add    esp,0x20
c0007628:	85 c0                	test   eax,eax
c000762a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000762d:	0f 85 8b 0b 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007633:	89 d0                	mov    eax,edx
c0007635:	31 d2                	xor    edx,edx
c0007637:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c000763b:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763f:	66 85 db             	test   bx,bx
c0007642:	74 04                	je     c0007648 <f_mkfs+0x537>
c0007644:	31 c0                	xor    eax,eax
c0007646:	eb b0                	jmp    c00075f8 <f_mkfs+0x4e7>
c0007648:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000764c:	31 d2                	xor    edx,edx
c000764e:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000765a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007661:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007665:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	8d 70 01             	lea    esi,[eax+0x1]
c0007672:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007676:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000767a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007685:	c1 eb 09             	shr    ebx,0x9
c0007688:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000768c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007690:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007697:	31 d2                	xor    edx,edx
c0007699:	25 00 fe ff ff       	and    eax,0xfffffe00
c000769e:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a1:	89 c1                	mov    ecx,eax
c00076a3:	89 e8                	mov    eax,ebp
c00076a5:	e8 34 a4 ff ff       	call   c0001ade <mem_set>
c00076aa:	31 c0                	xor    eax,eax
c00076ac:	83 fe 07             	cmp    esi,0x7
c00076af:	76 10                	jbe    c00076c1 <f_mkfs+0x5b0>
c00076b1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b4:	76 0b                	jbe    c00076c1 <f_mkfs+0x5b0>
c00076b6:	40                   	inc    eax
c00076b7:	83 ee 08             	sub    esi,0x8
c00076ba:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076bf:	eb eb                	jmp    c00076ac <f_mkfs+0x59b>
c00076c1:	b2 01                	mov    dl,0x1
c00076c3:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c7:	85 f6                	test   esi,esi
c00076c9:	74 0c                	je     c00076d7 <f_mkfs+0x5c6>
c00076cb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076ce:	76 07                	jbe    c00076d7 <f_mkfs+0x5c6>
c00076d0:	08 11                	or     BYTE PTR [ecx],dl
c00076d2:	4e                   	dec    esi
c00076d3:	01 d2                	add    edx,edx
c00076d5:	eb f0                	jmp    c00076c7 <f_mkfs+0x5b6>
c00076d7:	89 df                	mov    edi,ebx
c00076d9:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076dd:	76 04                	jbe    c00076e3 <f_mkfs+0x5d2>
c00076df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e3:	83 ec 0c             	sub    esp,0xc
c00076e6:	57                   	push   edi
c00076e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ef:	55                   	push   ebp
c00076f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f4:	e8 1c a3 ff ff       	call   c0001a15 <disk_write>
c00076f9:	83 c4 20             	add    esp,0x20
c00076fc:	85 c0                	test   eax,eax
c00076fe:	0f 85 ba 0a 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007704:	31 d2                	xor    edx,edx
c0007706:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000770e:	29 fb                	sub    ebx,edi
c0007710:	0f 85 7a ff ff ff    	jne    c0007690 <f_mkfs+0x57f>
c0007716:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007722:	31 f6                	xor    esi,esi
c0007724:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007728:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772b:	31 d2                	xor    edx,edx
c000772d:	89 e8                	mov    eax,ebp
c000772f:	e8 aa a3 ff ff       	call   c0001ade <mem_set>
c0007734:	31 c9                	xor    ecx,ecx
c0007736:	85 db                	test   ebx,ebx
c0007738:	75 40                	jne    c000777a <f_mkfs+0x669>
c000773a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773f:	89 e8                	mov    eax,ebp
c0007741:	e8 7a a3 ff ff       	call   c0001ac0 <st_dword>
c0007746:	8d 45 04             	lea    eax,[ebp+0x4]
c0007749:	83 ca ff             	or     edx,0xffffffff
c000774c:	bb 02 00 00 00       	mov    ebx,0x2
c0007751:	e8 6a a3 ff ff       	call   c0001ac0 <st_dword>
c0007756:	b9 08 00 00 00       	mov    ecx,0x8
c000775b:	eb 1d                	jmp    c000777a <f_mkfs+0x669>
c000775d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007760:	76 3b                	jbe    c000779d <f_mkfs+0x68c>
c0007762:	43                   	inc    ebx
c0007763:	83 fe 01             	cmp    esi,0x1
c0007766:	89 da                	mov    edx,ebx
c0007768:	77 03                	ja     c000776d <f_mkfs+0x65c>
c000776a:	83 ca ff             	or     edx,0xffffffff
c000776d:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007771:	4e                   	dec    esi
c0007772:	e8 49 a3 ff ff       	call   c0001ac0 <st_dword>
c0007777:	83 c1 04             	add    ecx,0x4
c000777a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000777e:	85 f6                	test   esi,esi
c0007780:	75 db                	jne    c000775d <f_mkfs+0x64c>
c0007782:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007787:	77 14                	ja     c000779d <f_mkfs+0x68c>
c0007789:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007790:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007794:	85 f6                	test   esi,esi
c0007796:	74 05                	je     c000779d <f_mkfs+0x68c>
c0007798:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000779b:	77 dd                	ja     c000777a <f_mkfs+0x669>
c000779d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077a1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a5:	39 cf                	cmp    edi,ecx
c00077a7:	76 02                	jbe    c00077ab <f_mkfs+0x69a>
c00077a9:	89 cf                	mov    edi,ecx
c00077ab:	83 ec 0c             	sub    esp,0xc
c00077ae:	57                   	push   edi
c00077af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b7:	55                   	push   ebp
c00077b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077bc:	e8 54 a2 ff ff       	call   c0001a15 <disk_write>
c00077c1:	83 c4 20             	add    esp,0x20
c00077c4:	85 c0                	test   eax,eax
c00077c6:	0f 85 f2 09 00 00    	jne    c00081be <f_mkfs+0x10ad>
c00077cc:	31 d2                	xor    edx,edx
c00077ce:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077d2:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d6:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077da:	0f 85 48 ff ff ff    	jne    c0007728 <f_mkfs+0x617>
c00077e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e3:	31 d2                	xor    edx,edx
c00077e5:	89 e8                	mov    eax,ebp
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	e8 f0 a2 ff ff       	call   c0001ade <mem_set>
c00077ee:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f1:	ba 02 00 00 00       	mov    edx,0x2
c00077f6:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077fa:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077fe:	e8 bd a2 ff ff       	call   c0001ac0 <st_dword>
c0007803:	8d 45 38             	lea    eax,[ebp+0x38]
c0007806:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780a:	e8 b1 a2 ff ff       	call   c0001ac0 <st_dword>
c000780f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007812:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007816:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781a:	e8 a1 a2 ff ff       	call   c0001ac0 <st_dword>
c000781f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007823:	8d 45 54             	lea    eax,[ebp+0x54]
c0007826:	83 c2 02             	add    edx,0x2
c0007829:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000782d:	e8 8e a2 ff ff       	call   c0001ac0 <st_dword>
c0007832:	8d 45 58             	lea    eax,[ebp+0x58]
c0007835:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007839:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783d:	e8 7e a2 ff ff       	call   c0001ac0 <st_dword>
c0007842:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007846:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000784b:	89 c6                	mov    esi,eax
c000784d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007851:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007855:	89 04 24             	mov    DWORD PTR [esp],eax
c0007858:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000785c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007863:	39 cb                	cmp    ebx,ecx
c0007865:	76 02                	jbe    c0007869 <f_mkfs+0x758>
c0007867:	89 cb                	mov    ebx,ecx
c0007869:	83 ec 0c             	sub    esp,0xc
c000786c:	53                   	push   ebx
c000786d:	57                   	push   edi
c000786e:	56                   	push   esi
c000786f:	55                   	push   ebp
c0007870:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007874:	e8 9c a1 ff ff       	call   c0001a15 <disk_write>
c0007879:	83 c4 20             	add    esp,0x20
c000787c:	85 c0                	test   eax,eax
c000787e:	0f 85 3a 09 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007884:	31 d2                	xor    edx,edx
c0007886:	b9 00 02 00 00       	mov    ecx,0x200
c000788b:	89 e8                	mov    eax,ebp
c000788d:	e8 4c a2 ff ff       	call   c0001ade <mem_set>
c0007892:	31 d2                	xor    edx,edx
c0007894:	01 de                	add    esi,ebx
c0007896:	11 d7                	adc    edi,edx
c0007898:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000789b:	75 bf                	jne    c000785c <f_mkfs+0x74b>
c000789d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a5:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078ad:	b9 00 02 00 00       	mov    ecx,0x200
c00078b2:	31 d2                	xor    edx,edx
c00078b4:	89 e8                	mov    eax,ebp
c00078b6:	e8 23 a2 ff ff       	call   c0001ade <mem_set>
c00078bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c0:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078c5:	89 e8                	mov    eax,ebp
c00078c7:	e8 fd a1 ff ff       	call   c0001ac9 <mem_cpy>
c00078cc:	8d 45 40             	lea    eax,[ebp+0x40]
c00078cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d7:	e8 e7 a1 ff ff       	call   c0001ac3 <st_qword>
c00078dc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e0:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e3:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e7:	e8 d7 a1 ff ff       	call   c0001ac3 <st_qword>
c00078ec:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ef:	ba 20 00 00 00       	mov    edx,0x20
c00078f4:	e8 c7 a1 ff ff       	call   c0001ac0 <st_dword>
c00078f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007901:	e8 ba a1 ff ff       	call   c0001ac0 <st_dword>
c0007906:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000790e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007912:	e8 a9 a1 ff ff       	call   c0001ac0 <st_dword>
c0007917:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000791e:	e8 9d a1 ff ff       	call   c0001ac0 <st_dword>
c0007923:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007927:	8d 50 02             	lea    edx,[eax+0x2]
c000792a:	8d 45 60             	lea    eax,[ebp+0x60]
c000792d:	e8 8e a1 ff ff       	call   c0001ac0 <st_dword>
c0007932:	8d 45 64             	lea    eax,[ebp+0x64]
c0007935:	ba 00 00 21 50       	mov    edx,0x50210000
c000793a:	e8 81 a1 ff ff       	call   c0001ac0 <st_dword>
c000793f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007942:	ba 00 01 00 00       	mov    edx,0x100
c0007947:	e8 70 a1 ff ff       	call   c0001abc <st_word>
c000794c:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007950:	b8 0a 00 00 00       	mov    eax,0xa
c0007955:	48                   	dec    eax
c0007956:	74 05                	je     c000795d <f_mkfs+0x84c>
c0007958:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000795b:	eb f8                	jmp    c0007955 <f_mkfs+0x844>
c000795d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007961:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007965:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007969:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c000796d:	74 05                	je     c0007974 <f_mkfs+0x863>
c000796f:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007972:	eb f5                	jmp    c0007969 <f_mkfs+0x858>
c0007974:	8d 45 78             	lea    eax,[ebp+0x78]
c0007977:	ba eb fe 00 00       	mov    edx,0xfeeb
c000797c:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007982:	31 db                	xor    ebx,ebx
c0007984:	e8 33 a1 ff ff       	call   c0001abc <st_word>
c0007989:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	89 04 24             	mov    DWORD PTR [esp],eax
c0007997:	e8 20 a1 ff ff       	call   c0001abc <st_word>
c000799c:	31 c9                	xor    ecx,ecx
c000799e:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a1:	83 f8 01             	cmp    eax,0x1
c00079a4:	76 13                	jbe    c00079b9 <f_mkfs+0x8a8>
c00079a6:	83 f9 70             	cmp    ecx,0x70
c00079a9:	74 0e                	je     c00079b9 <f_mkfs+0x8a8>
c00079ab:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	e8 8e a5 ff ff       	call   c0001f45 <xsum32>
c00079b7:	89 c3                	mov    ebx,eax
c00079b9:	41                   	inc    ecx
c00079ba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c0:	75 dc                	jne    c000799e <f_mkfs+0x88d>
c00079c2:	89 f0                	mov    eax,esi
c00079c4:	89 fa                	mov    edx,edi
c00079c6:	83 c0 01             	add    eax,0x1
c00079c9:	83 d2 00             	adc    edx,0x0
c00079cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	6a 01                	push   0x1
c00079d9:	57                   	push   edi
c00079da:	56                   	push   esi
c00079db:	55                   	push   ebp
c00079dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e0:	e8 30 a0 ff ff       	call   c0001a15 <disk_write>
c00079e5:	83 c4 20             	add    esp,0x20
c00079e8:	85 c0                	test   eax,eax
c00079ea:	0f 85 ce 07 00 00    	jne    c00081be <f_mkfs+0x10ad>
c00079f0:	31 d2                	xor    edx,edx
c00079f2:	b9 00 02 00 00       	mov    ecx,0x200
c00079f7:	89 e8                	mov    eax,ebp
c00079f9:	e8 e0 a0 ff ff       	call   c0001ade <mem_set>
c00079fe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a06:	e8 b1 a0 ff ff       	call   c0001abc <st_word>
c0007a0b:	89 f0                	mov    eax,esi
c0007a0d:	83 c0 09             	add    eax,0x9
c0007a10:	89 fa                	mov    edx,edi
c0007a12:	83 d2 00             	adc    edx,0x0
c0007a15:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a1c:	31 c9                	xor    ecx,ecx
c0007a1e:	41                   	inc    ecx
c0007a1f:	89 da                	mov    edx,ebx
c0007a21:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a26:	e8 1a a5 ff ff       	call   c0001f45 <xsum32>
c0007a2b:	89 c3                	mov    ebx,eax
c0007a2d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a33:	75 e9                	jne    c0007a1e <f_mkfs+0x90d>
c0007a35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a3d:	83 c0 01             	add    eax,0x1
c0007a40:	83 d2 00             	adc    edx,0x0
c0007a43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a4b:	83 ec 0c             	sub    esp,0xc
c0007a4e:	6a 01                	push   0x1
c0007a50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a58:	55                   	push   ebp
c0007a59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a5d:	e8 b3 9f ff ff       	call   c0001a15 <disk_write>
c0007a62:	83 c4 20             	add    esp,0x20
c0007a65:	85 c0                	test   eax,eax
c0007a67:	0f 85 51 07 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007a6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a71:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a75:	75 09                	jne    c0007a80 <f_mkfs+0x96f>
c0007a77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a7e:	74 12                	je     c0007a92 <f_mkfs+0x981>
c0007a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a90:	eb 8a                	jmp    c0007a1c <f_mkfs+0x90b>
c0007a92:	31 d2                	xor    edx,edx
c0007a94:	b9 00 02 00 00       	mov    ecx,0x200
c0007a99:	89 e8                	mov    eax,ebp
c0007a9b:	e8 3e a0 ff ff       	call   c0001ade <mem_set>
c0007aa0:	83 c6 0b             	add    esi,0xb
c0007aa3:	83 d7 00             	adc    edi,0x0
c0007aa6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aaa:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aae:	31 c9                	xor    ecx,ecx
c0007ab0:	41                   	inc    ecx
c0007ab1:	89 da                	mov    edx,ebx
c0007ab3:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab8:	e8 88 a4 ff ff       	call   c0001f45 <xsum32>
c0007abd:	89 c3                	mov    ebx,eax
c0007abf:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac5:	75 e9                	jne    c0007ab0 <f_mkfs+0x99f>
c0007ac7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007aca:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ace:	83 c6 01             	add    esi,0x1
c0007ad1:	83 d7 00             	adc    edi,0x0
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	6a 01                	push   0x1
c0007ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007add:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae1:	55                   	push   ebp
c0007ae2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae6:	e8 2a 9f ff ff       	call   c0001a15 <disk_write>
c0007aeb:	83 c4 20             	add    esp,0x20
c0007aee:	85 c0                	test   eax,eax
c0007af0:	0f 85 c8 06 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007af6:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007afa:	75 06                	jne    c0007b02 <f_mkfs+0x9f1>
c0007afc:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b00:	74 09                	je     c0007b0b <f_mkfs+0x9fa>
c0007b02:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b05:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b09:	eb a3                	jmp    c0007aae <f_mkfs+0x99d>
c0007b0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0f:	89 da                	mov    edx,ebx
c0007b11:	01 e8                	add    eax,ebp
c0007b13:	e8 a8 9f ff ff       	call   c0001ac0 <st_dword>
c0007b18:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b1d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b25:	75 e4                	jne    c0007b0b <f_mkfs+0x9fa>
c0007b27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b2e:	83 c6 02             	add    esi,0x2
c0007b31:	83 d7 00             	adc    edi,0x0
c0007b34:	83 ec 0c             	sub    esp,0xc
c0007b37:	6a 01                	push   0x1
c0007b39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b41:	55                   	push   ebp
c0007b42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b46:	e8 ca 9e ff ff       	call   c0001a15 <disk_write>
c0007b4b:	83 c4 20             	add    esp,0x20
c0007b4e:	85 c0                	test   eax,eax
c0007b50:	0f 85 68 06 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007b56:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b5b:	74 0d                	je     c0007b6a <f_mkfs+0xa59>
c0007b5d:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b65:	e9 43 fd ff ff       	jmp    c00078ad <f_mkfs+0x79c>
c0007b6a:	b1 07                	mov    cl,0x7
c0007b6c:	e9 e3 05 00 00       	jmp    c0008154 <f_mkfs+0x1043>
c0007b71:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b76:	0f 85 4f 02 00 00    	jne    c0007dcb <f_mkfs+0xcba>
c0007b7c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b81:	0f 86 22 02 00 00    	jbe    c0007da9 <f_mkfs+0xc98>
c0007b87:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b8c:	0f 85 81 06 00 00    	jne    c0008213 <f_mkfs+0x1102>
c0007b92:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b99:	83 f8 40             	cmp    eax,0x40
c0007b9c:	0f 87 51 06 00 00    	ja     c00081f3 <f_mkfs+0x10e2>
c0007ba2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba6:	85 ff                	test   edi,edi
c0007ba8:	75 1c                	jne    c0007bc6 <f_mkfs+0xab5>
c0007baa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bad:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bb2:	c1 e9 0c             	shr    ecx,0xc
c0007bb5:	bf 01 00 00 00       	mov    edi,0x1
c0007bba:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bbd:	66 85 c0             	test   ax,ax
c0007bc0:	0f 85 95 01 00 00    	jne    c0007d5b <f_mkfs+0xc4a>
c0007bc6:	31 d2                	xor    edx,edx
c0007bc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bcb:	f7 f7                	div    edi
c0007bcd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd2:	0f 86 95 01 00 00    	jbe    c0007d6d <f_mkfs+0xc5c>
c0007bd8:	83 c0 02             	add    eax,0x2
c0007bdb:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be0:	01 c0                	add    eax,eax
c0007be2:	05 ff 01 00 00       	add    eax,0x1ff
c0007be7:	be 01 00 00 00       	mov    esi,0x1
c0007bec:	c1 e8 09             	shr    eax,0x9
c0007bef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf7:	c1 e0 05             	shl    eax,0x5
c0007bfa:	c1 e8 09             	shr    eax,0x9
c0007bfd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c01:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c06:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c0a:	89 f0                	mov    eax,esi
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c1a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c1e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c22:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c27:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c2b:	31 d2                	xor    edx,edx
c0007c2d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c31:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c35:	31 db                	xor    ebx,ebx
c0007c37:	01 c8                	add    eax,ecx
c0007c39:	11 da                	adc    edx,ebx
c0007c3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3f:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c43:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c47:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c4b:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4f:	f7 da                	neg    edx
c0007c51:	21 d1                	and    ecx,edx
c0007c53:	29 d9                	sub    ecx,ebx
c0007c55:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5a:	0f 85 20 01 00 00    	jne    c0007d80 <f_mkfs+0xc6f>
c0007c60:	31 db                	xor    ebx,ebx
c0007c62:	01 ce                	add    esi,ecx
c0007c64:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c68:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c6c:	89 f8                	mov    eax,edi
c0007c6e:	31 d2                	xor    edx,edx
c0007c70:	c1 e0 04             	shl    eax,0x4
c0007c73:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c77:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c7b:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7f:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c83:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c87:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8a:	19 d3                	sbb    ebx,edx
c0007c8c:	0f 82 40 01 00 00    	jb     c0007dd2 <f_mkfs+0xcc1>
c0007c92:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c96:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c99:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c9e:	89 c8                	mov    eax,ecx
c0007ca0:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007ca4:	29 f0                	sub    eax,esi
c0007ca6:	29 d0                	sub    eax,edx
c0007ca8:	31 d2                	xor    edx,edx
c0007caa:	f7 f7                	div    edi
c0007cac:	89 c3                	mov    ebx,eax
c0007cae:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb3:	0f 85 b8 fe ff ff    	jne    c0007b71 <f_mkfs+0xa60>
c0007cb9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cbe:	0f 87 1d 01 00 00    	ja     c0007de1 <f_mkfs+0xcd0>
c0007cc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc9:	0f 85 03 01 00 00    	jne    c0007dd2 <f_mkfs+0xcc1>
c0007ccf:	83 ff 01             	cmp    edi,0x1
c0007cd2:	0f 86 fa 00 00 00    	jbe    c0007dd2 <f_mkfs+0xcc1>
c0007cd8:	d1 ef                	shr    edi,1
c0007cda:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cde:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce5:	85 db                	test   ebx,ebx
c0007ce7:	75 2d                	jne    c0007d16 <f_mkfs+0xc05>
c0007ce9:	89 cb                	mov    ebx,ecx
c0007ceb:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007cf0:	c1 eb 11             	shr    ebx,0x11
c0007cf3:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cfb:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cfe:	66 85 c0             	test   ax,ax
c0007d01:	74 11                	je     c0007d14 <f_mkfs+0xc03>
c0007d03:	83 c2 02             	add    edx,0x2
c0007d06:	39 d8                	cmp    eax,ebx
c0007d08:	77 0a                	ja     c0007d14 <f_mkfs+0xc03>
c0007d0a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d0e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d12:	eb e7                	jmp    c0007cfb <f_mkfs+0xbea>
c0007d14:	31 db                	xor    ebx,ebx
c0007d16:	31 d2                	xor    edx,edx
c0007d18:	89 c8                	mov    eax,ecx
c0007d1a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d1e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d25:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2a:	c1 ea 09             	shr    edx,0x9
c0007d2d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d32:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d36:	0f 87 96 00 00 00    	ja     c0007dd2 <f_mkfs+0xcc1>
c0007d3c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d40:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d48:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d4c:	be 20 00 00 00       	mov    esi,0x20
c0007d51:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d56:	e9 a6 fe ff ff       	jmp    c0007c01 <f_mkfs+0xaf0>
c0007d5b:	83 c2 02             	add    edx,0x2
c0007d5e:	39 c8                	cmp    eax,ecx
c0007d60:	0f 87 60 fe ff ff    	ja     c0007bc6 <f_mkfs+0xab5>
c0007d66:	01 ff                	add    edi,edi
c0007d68:	e9 4d fe ff ff       	jmp    c0007bba <f_mkfs+0xaa9>
c0007d6d:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d70:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d75:	40                   	inc    eax
c0007d76:	d1 e8                	shr    eax,1
c0007d78:	83 c0 03             	add    eax,0x3
c0007d7b:	e9 62 fe ff ff       	jmp    c0007be2 <f_mkfs+0xad1>
c0007d80:	31 d2                	xor    edx,edx
c0007d82:	89 c8                	mov    eax,ecx
c0007d84:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d88:	85 d2                	test   edx,edx
c0007d8a:	74 0c                	je     c0007d98 <f_mkfs+0xc87>
c0007d8c:	49                   	dec    ecx
c0007d8d:	46                   	inc    esi
c0007d8e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d93:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d98:	89 c8                	mov    eax,ecx
c0007d9a:	31 d2                	xor    edx,edx
c0007d9c:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007da0:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da4:	e9 c3 fe ff ff       	jmp    c0007c6c <f_mkfs+0xb5b>
c0007da9:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dae:	77 31                	ja     c0007de1 <f_mkfs+0xcd0>
c0007db0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db5:	75 1b                	jne    c0007dd2 <f_mkfs+0xcc1>
c0007db7:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dbe:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc3:	0f 86 d9 fd ff ff    	jbe    c0007ba2 <f_mkfs+0xa91>
c0007dc9:	eb 07                	jmp    c0007dd2 <f_mkfs+0xcc1>
c0007dcb:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd0:	76 0a                	jbe    c0007ddc <f_mkfs+0xccb>
c0007dd2:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd7:	e9 ff 03 00 00       	jmp    c00081db <f_mkfs+0x10ca>
c0007ddc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de1:	31 d2                	xor    edx,edx
c0007de3:	b9 00 02 00 00       	mov    ecx,0x200
c0007de8:	89 e8                	mov    eax,ebp
c0007dea:	e8 ef 9c ff ff       	call   c0001ade <mem_set>
c0007def:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df4:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007df9:	89 e8                	mov    eax,ebp
c0007dfb:	e8 c9 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e00:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e03:	ba 00 02 00 00       	mov    edx,0x200
c0007e08:	e8 af 9c ff ff       	call   c0001abc <st_word>
c0007e0d:	89 f8                	mov    eax,edi
c0007e0f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e12:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	e8 9f 9c ff ff       	call   c0001abc <st_word>
c0007e1d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e21:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e24:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e29:	75 08                	jne    c0007e33 <f_mkfs+0xd22>
c0007e2b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e33:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3a:	e8 7d 9c ff ff       	call   c0001abc <st_word>
c0007e3f:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e44:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e48:	39 d0                	cmp    eax,edx
c0007e4a:	b8 00 00 00 00       	mov    eax,0x0
c0007e4f:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e53:	72 0a                	jb     c0007e5f <f_mkfs+0xd4e>
c0007e55:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e58:	e8 5f 9c ff ff       	call   c0001abc <st_word>
c0007e5d:	eb 08                	jmp    c0007e67 <f_mkfs+0xd56>
c0007e5f:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e62:	e8 59 9c ff ff       	call   c0001ac0 <st_dword>
c0007e67:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6a:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6f:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e73:	e8 44 9c ff ff       	call   c0001abc <st_word>
c0007e78:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e7b:	ba ff 00 00 00       	mov    edx,0xff
c0007e80:	e8 37 9c ff ff       	call   c0001abc <st_word>
c0007e85:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e8c:	e8 2f 9c ff ff       	call   c0001ac0 <st_dword>
c0007e91:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e96:	75 57                	jne    c0007eef <f_mkfs+0xdde>
c0007e98:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e9b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea0:	e8 1b 9c ff ff       	call   c0001ac0 <st_dword>
c0007ea5:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eac:	e8 0f 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb1:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb4:	ba 02 00 00 00       	mov    edx,0x2
c0007eb9:	e8 02 9c ff ff       	call   c0001ac0 <st_dword>
c0007ebe:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec1:	ba 01 00 00 00       	mov    edx,0x1
c0007ec6:	e8 f1 9b ff ff       	call   c0001abc <st_word>
c0007ecb:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ece:	ba 06 00 00 00       	mov    edx,0x6
c0007ed3:	e8 e4 9b ff ff       	call   c0001abc <st_word>
c0007ed8:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007edc:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee0:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee3:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee8:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007eed:	eb 2f                	jmp    c0007f1e <f_mkfs+0xe0d>
c0007eef:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef2:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef7:	e8 c4 9b ff ff       	call   c0001ac0 <st_dword>
c0007efc:	8d 45 16             	lea    eax,[ebp+0x16]
c0007eff:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f04:	e8 b3 9b ff ff       	call   c0001abc <st_word>
c0007f09:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f0d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f11:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f14:	b9 13 00 00 00       	mov    ecx,0x13
c0007f19:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f1e:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f24:	e8 a0 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f29:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f2e:	89 f0                	mov    eax,esi
c0007f30:	e8 87 9b ff ff       	call   c0001abc <st_word>
c0007f35:	83 ec 0c             	sub    esp,0xc
c0007f38:	6a 01                	push   0x1
c0007f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f42:	55                   	push   ebp
c0007f43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f47:	e8 c9 9a ff ff       	call   c0001a15 <disk_write>
c0007f4c:	83 c4 20             	add    esp,0x20
c0007f4f:	85 c0                	test   eax,eax
c0007f51:	0f 85 67 02 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0007f57:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5c:	0f 85 b7 00 00 00    	jne    c0008019 <f_mkfs+0xf08>
c0007f62:	83 ec 0c             	sub    esp,0xc
c0007f65:	6a 01                	push   0x1
c0007f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6f:	83 c0 06             	add    eax,0x6
c0007f72:	83 d2 00             	adc    edx,0x0
c0007f75:	52                   	push   edx
c0007f76:	50                   	push   eax
c0007f77:	55                   	push   ebp
c0007f78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f7c:	e8 94 9a ff ff       	call   c0001a15 <disk_write>
c0007f81:	83 c4 20             	add    esp,0x20
c0007f84:	b9 00 02 00 00       	mov    ecx,0x200
c0007f89:	31 d2                	xor    edx,edx
c0007f8b:	89 e8                	mov    eax,ebp
c0007f8d:	e8 4c 9b ff ff       	call   c0001ade <mem_set>
c0007f92:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f97:	89 e8                	mov    eax,ebp
c0007f99:	e8 22 9b ff ff       	call   c0001ac0 <st_dword>
c0007f9e:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa4:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa9:	e8 12 9b ff ff       	call   c0001ac0 <st_dword>
c0007fae:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb1:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb7:	e8 04 9b ff ff       	call   c0001ac0 <st_dword>
c0007fbc:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc2:	ba 02 00 00 00       	mov    edx,0x2
c0007fc7:	e8 f4 9a ff ff       	call   c0001ac0 <st_dword>
c0007fcc:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd1:	89 f0                	mov    eax,esi
c0007fd3:	e8 e4 9a ff ff       	call   c0001abc <st_word>
c0007fd8:	83 ec 0c             	sub    esp,0xc
c0007fdb:	6a 01                	push   0x1
c0007fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe5:	83 c0 07             	add    eax,0x7
c0007fe8:	83 d2 00             	adc    edx,0x0
c0007feb:	52                   	push   edx
c0007fec:	50                   	push   eax
c0007fed:	55                   	push   ebp
c0007fee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff2:	e8 1e 9a ff ff       	call   c0001a15 <disk_write>
c0007ff7:	83 c4 14             	add    esp,0x14
c0007ffa:	6a 01                	push   0x1
c0007ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008000:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008004:	83 c0 01             	add    eax,0x1
c0008007:	83 d2 00             	adc    edx,0x0
c000800a:	52                   	push   edx
c000800b:	50                   	push   eax
c000800c:	55                   	push   ebp
c000800d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008011:	e8 ff 99 ff ff       	call   c0001a15 <disk_write>
c0008016:	83 c4 20             	add    esp,0x20
c0008019:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008020:	31 d2                	xor    edx,edx
c0008022:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008028:	31 db                	xor    ebx,ebx
c000802a:	89 e8                	mov    eax,ebp
c000802c:	e8 ad 9a ff ff       	call   c0001ade <mem_set>
c0008031:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008038:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803d:	0f 94 c3             	sete   bl
c0008040:	4b                   	dec    ebx
c0008041:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008047:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000804d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008052:	75 21                	jne    c0008075 <f_mkfs+0xf64>
c0008054:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008059:	89 e8                	mov    eax,ebp
c000805b:	e8 60 9a ff ff       	call   c0001ac0 <st_dword>
c0008060:	8d 45 04             	lea    eax,[ebp+0x4]
c0008063:	83 ca ff             	or     edx,0xffffffff
c0008066:	e8 55 9a ff ff       	call   c0001ac0 <st_dword>
c000806b:	8d 45 08             	lea    eax,[ebp+0x8]
c000806e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008073:	eb 04                	jmp    c0008079 <f_mkfs+0xf68>
c0008075:	89 da                	mov    edx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 42 9a ff ff       	call   c0001ac0 <st_dword>
c000807e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008086:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000808e:	39 ce                	cmp    esi,ecx
c0008090:	76 02                	jbe    c0008094 <f_mkfs+0xf83>
c0008092:	89 ce                	mov    esi,ecx
c0008094:	83 ec 0c             	sub    esp,0xc
c0008097:	56                   	push   esi
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a0:	55                   	push   ebp
c00080a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a5:	e8 6b 99 ff ff       	call   c0001a15 <disk_write>
c00080aa:	83 c4 20             	add    esp,0x20
c00080ad:	85 c0                	test   eax,eax
c00080af:	0f 85 09 01 00 00    	jne    c00081be <f_mkfs+0x10ad>
c00080b5:	31 d2                	xor    edx,edx
c00080b7:	b9 00 02 00 00       	mov    ecx,0x200
c00080bc:	89 e8                	mov    eax,ebp
c00080be:	e8 1b 9a ff ff       	call   c0001ade <mem_set>
c00080c3:	31 d2                	xor    edx,edx
c00080c5:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c9:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080cd:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d1:	75 b3                	jne    c0008086 <f_mkfs+0xf75>
c00080d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080dd:	40                   	inc    eax
c00080de:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080e2:	0f 87 65 ff ff ff    	ja     c000804d <f_mkfs+0xf3c>
c00080e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ed:	74 04                	je     c00080f3 <f_mkfs+0xfe2>
c00080ef:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080f3:	89 fb                	mov    ebx,edi
c00080f5:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f9:	76 04                	jbe    c00080ff <f_mkfs+0xfee>
c00080fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080ff:	83 ec 0c             	sub    esp,0xc
c0008102:	53                   	push   ebx
c0008103:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	55                   	push   ebp
c000810c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008110:	e8 00 99 ff ff       	call   c0001a15 <disk_write>
c0008115:	83 c4 20             	add    esp,0x20
c0008118:	85 c0                	test   eax,eax
c000811a:	0f 85 9e 00 00 00    	jne    c00081be <f_mkfs+0x10ad>
c0008120:	31 d2                	xor    edx,edx
c0008122:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008126:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812a:	29 df                	sub    edi,ebx
c000812c:	75 c5                	jne    c00080f3 <f_mkfs+0xfe2>
c000812e:	b1 0c                	mov    cl,0xc
c0008130:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008135:	74 1d                	je     c0008154 <f_mkfs+0x1043>
c0008137:	b8 ff ff 00 00       	mov    eax,0xffff
c000813c:	b1 06                	mov    cl,0x6
c000813e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008142:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008146:	72 0c                	jb     c0008154 <f_mkfs+0x1043>
c0008148:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000814d:	0f 94 c1             	sete   cl
c0008150:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008154:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008159:	75 4c                	jne    c00081a7 <f_mkfs+0x1096>
c000815b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008163:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008171:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000817c:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008187:	83 ec 0c             	sub    esp,0xc
c000818a:	0f b6 c9             	movzx  ecx,cl
c000818d:	55                   	push   ebp
c000818e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008192:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008199:	e8 58 c2 ff ff       	call   c00043f6 <create_partition>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	89 c3                	mov    ebx,eax
c00081a3:	85 c0                	test   eax,eax
c00081a5:	75 34                	jne    c00081db <f_mkfs+0x10ca>
c00081a7:	50                   	push   eax
c00081a8:	31 db                	xor    ebx,ebx
c00081aa:	6a 00                	push   0x0
c00081ac:	6a 00                	push   0x0
c00081ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b2:	e8 74 98 ff ff       	call   c0001a2b <disk_ioctl>
c00081b7:	83 c4 10             	add    esp,0x10
c00081ba:	85 c0                	test   eax,eax
c00081bc:	74 1d                	je     c00081db <f_mkfs+0x10ca>
c00081be:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c6:	75 0c                	jne    c00081d4 <f_mkfs+0x10c3>
c00081c8:	83 ec 0c             	sub    esp,0xc
c00081cb:	55                   	push   ebp
c00081cc:	e8 75 00 00 00       	call   c0008246 <ff_memfree>
c00081d1:	83 c4 10             	add    esp,0x10
c00081d4:	bb 01 00 00 00       	mov    ebx,0x1
c00081d9:	eb 48                	jmp    c0008223 <f_mkfs+0x1112>
c00081db:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e3:	75 3e                	jne    c0008223 <f_mkfs+0x1112>
c00081e5:	83 ec 0c             	sub    esp,0xc
c00081e8:	55                   	push   ebp
c00081e9:	e8 58 00 00 00       	call   c0008246 <ff_memfree>
c00081ee:	83 c4 10             	add    esp,0x10
c00081f1:	eb 30                	jmp    c0008223 <f_mkfs+0x1112>
c00081f3:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f8:	0f 85 eb fa ff ff    	jne    c0007ce9 <f_mkfs+0xbd8>
c00081fe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008202:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008208:	0f 86 b8 f9 ff ff    	jbe    c0007bc6 <f_mkfs+0xab5>
c000820e:	e9 bf fb ff ff       	jmp    c0007dd2 <f_mkfs+0xcc1>
c0008213:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008218:	0f 85 c0 fa ff ff    	jne    c0007cde <f_mkfs+0xbcd>
c000821e:	e9 af fb ff ff       	jmp    c0007dd2 <f_mkfs+0xcc1>
c0008223:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008229:	89 d8                	mov    eax,ebx
c000822b:	5b                   	pop    ebx
c000822c:	5e                   	pop    esi
c000822d:	5f                   	pop    edi
c000822e:	5d                   	pop    ebp
c000822f:	c3                   	ret    

c0008230 <ff_memalloc>:
c0008230:	83 ec 0c             	sub    esp,0xc
c0008233:	83 ec 0c             	sub    esp,0xc
c0008236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823a:	e8 9e 3d 00 00       	call   c000bfdd <malloc>
c000823f:	83 c4 10             	add    esp,0x10
c0008242:	83 c4 0c             	add    esp,0xc
c0008245:	c3                   	ret    

c0008246 <ff_memfree>:
c0008246:	83 ec 0c             	sub    esp,0xc
c0008249:	83 ec 0c             	sub    esp,0xc
c000824c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008250:	e8 98 3d 00 00       	call   c000bfed <free>
c0008255:	83 c4 10             	add    esp,0x10
c0008258:	90                   	nop
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    

c000825d <ff_uni2oem>:
c000825d:	83 ec 14             	sub    esp,0x14
c0008260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008264:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008268:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826f:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c0008277:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000827c:	77 0b                	ja     c0008289 <ff_uni2oem+0x2c>
c000827e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008282:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008287:	eb 61                	jmp    c00082ea <ff_uni2oem+0x8d>
c0008289:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008291:	77 57                	ja     c00082ea <ff_uni2oem+0x8d>
c0008293:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008299:	75 4f                	jne    c00082ea <ff_uni2oem+0x8d>
c000829b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a2:	eb 0b                	jmp    c00082af <ff_uni2oem+0x52>
c00082a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a9:	40                   	inc    eax
c00082aa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082af:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b5:	77 21                	ja     c00082d8 <ff_uni2oem+0x7b>
c00082b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bc:	25 ff ff 00 00       	and    eax,0xffff
c00082c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00082c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c8:	01 d0                	add    eax,edx
c00082ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cd:	25 ff ff 00 00       	and    eax,0xffff
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 cc                	jne    c00082a4 <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 30                	jmp    c0008359 <ff_oem2uni+0x66>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 28                	jne    c0008359 <ff_oem2uni+0x66>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1f                	ja     c0008359 <ff_oem2uni+0x66>
c000833a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000833e:	25 ff ff 00 00       	and    eax,0xffff
c0008343:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008348:	8d 14 00             	lea    edx,[eax+eax*1]
c000834b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834f:	01 d0                	add    eax,edx
c0008351:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008354:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008359:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835e:	83 c4 18             	add    esp,0x18
c0008361:	c3                   	ret    

c0008362 <ff_wtoupper>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836d:	0f 87 62 01 00 00    	ja     c00084d5 <ff_wtoupper+0x173>
c0008373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008377:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000837c:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008383:	77 07                	ja     c000838c <ff_wtoupper+0x2a>
c0008385:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c000838a:	eb 05                	jmp    c0008391 <ff_wtoupper+0x2f>
c000838c:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0008391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008395:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008399:	8d 50 02             	lea    edx,[eax+0x2]
c000839c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a8:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ae:	0f 84 13 01 00 00    	je     c00084c7 <ff_wtoupper+0x165>
c00083b4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b9:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083be:	0f 82 03 01 00 00    	jb     c00084c7 <ff_wtoupper+0x165>
c00083c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c8:	8d 50 02             	lea    edx,[eax+0x2]
c00083cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083d2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d7:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083dc:	66 c1 e8 08          	shr    ax,0x8
c00083e0:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e5:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f1:	31 d2                	xor    edx,edx
c00083f3:	66 89 c2             	mov    dx,ax
c00083f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083fa:	31 c9                	xor    ecx,ecx
c00083fc:	66 89 c1             	mov    cx,ax
c00083ff:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008404:	25 ff ff 00 00       	and    eax,0xffff
c0008409:	01 c8                	add    eax,ecx
c000840b:	39 c2                	cmp    edx,eax
c000840d:	0f 8d 92 00 00 00    	jge    c00084a5 <ff_wtoupper+0x143>
c0008413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008417:	25 ff ff 00 00       	and    eax,0xffff
c000841c:	83 f8 08             	cmp    eax,0x8
c000841f:	0f 87 a1 00 00 00    	ja     c00084c6 <ff_wtoupper+0x164>
c0008425:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c000842c:	ff e0                	jmp    eax
c000842e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008433:	31 d2                	xor    edx,edx
c0008435:	66 89 c2             	mov    dx,ax
c0008438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000843c:	25 ff ff 00 00       	and    eax,0xffff
c0008441:	29 c2                	sub    edx,eax
c0008443:	89 d0                	mov    eax,edx
c0008445:	8d 14 00             	lea    edx,[eax+eax*1]
c0008448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844c:	01 d0                	add    eax,edx
c000844e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008451:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008456:	eb 4b                	jmp    c00084a3 <ff_wtoupper+0x141>
c0008458:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000845d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008461:	83 e0 01             	and    eax,0x1
c0008464:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008469:	eb 38                	jmp    c00084a3 <ff_wtoupper+0x141>
c000846b:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008471:	eb 30                	jmp    c00084a3 <ff_wtoupper+0x141>
c0008473:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008479:	eb 28                	jmp    c00084a3 <ff_wtoupper+0x141>
c000847b:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008481:	eb 20                	jmp    c00084a3 <ff_wtoupper+0x141>
c0008483:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008489:	eb 18                	jmp    c00084a3 <ff_wtoupper+0x141>
c000848b:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008491:	eb 10                	jmp    c00084a3 <ff_wtoupper+0x141>
c0008493:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008499:	eb 08                	jmp    c00084a3 <ff_wtoupper+0x141>
c000849b:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084a2:	90                   	nop
c00084a3:	eb 21                	jmp    c00084c6 <ff_wtoupper+0x164>
c00084a5:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084ab:	0f 85 e4 fe ff ff    	jne    c0008395 <ff_wtoupper+0x33>
c00084b1:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b6:	25 ff ff 00 00       	and    eax,0xffff
c00084bb:	01 c0                	add    eax,eax
c00084bd:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084c1:	e9 cf fe ff ff       	jmp    c0008395 <ff_wtoupper+0x33>
c00084c6:	90                   	nop
c00084c7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084cc:	25 ff ff 00 00       	and    eax,0xffff
c00084d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d9:	83 c4 10             	add    esp,0x10
c00084dc:	c3                   	ret    

c00084dd <is_bad_src_ratio>:
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ef:	dd 04 24             	fld    QWORD PTR [esp]
c00084f2:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c00084f8:	de d9                	fcompp 
c00084fa:	df e0                	fnstsw ax
c00084fc:	f6 c4 45             	test   ah,0x45
c00084ff:	74 10                	je     c0008511 <is_bad_src_ratio+0x34>
c0008501:	dd 04 24             	fld    QWORD PTR [esp]
c0008504:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000850a:	df e0                	fnstsw ax
c000850c:	f6 c4 45             	test   ah,0x45
c000850f:	75 07                	jne    c0008518 <is_bad_src_ratio+0x3b>
c0008511:	b8 01 00 00 00       	mov    eax,0x1
c0008516:	eb 05                	jmp    c000851d <is_bad_src_ratio+0x40>
c0008518:	b8 00 00 00 00       	mov    eax,0x0
c000851d:	83 c4 0c             	add    esp,0xc
c0008520:	c3                   	ret    

c0008521 <psrc_set_converter>:
c0008521:	56                   	push   esi
c0008522:	89 d6                	mov    esi,edx
c0008524:	53                   	push   ebx
c0008525:	89 c3                	mov    ebx,eax
c0008527:	83 ec 0c             	sub    esp,0xc
c000852a:	52                   	push   edx
c000852b:	50                   	push   eax
c000852c:	e8 21 24 00 00       	call   c000a952 <sinc_set_converter>
c0008531:	83 c4 10             	add    esp,0x10
c0008534:	85 c0                	test   eax,eax
c0008536:	74 25                	je     c000855d <psrc_set_converter+0x3c>
c0008538:	50                   	push   eax
c0008539:	50                   	push   eax
c000853a:	56                   	push   esi
c000853b:	53                   	push   ebx
c000853c:	e8 1c 28 00 00       	call   c000ad5d <zoh_set_converter>
c0008541:	83 c4 10             	add    esp,0x10
c0008544:	85 c0                	test   eax,eax
c0008546:	74 15                	je     c000855d <psrc_set_converter+0x3c>
c0008548:	51                   	push   ecx
c0008549:	51                   	push   ecx
c000854a:	56                   	push   esi
c000854b:	53                   	push   ebx
c000854c:	e8 0c 0a 00 00       	call   c0008f5d <linear_set_converter>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	ba 0a 00 00 00       	mov    edx,0xa
c0008559:	85 c0                	test   eax,eax
c000855b:	75 02                	jne    c000855f <psrc_set_converter+0x3e>
c000855d:	31 d2                	xor    edx,edx
c000855f:	89 d0                	mov    eax,edx
c0008561:	5a                   	pop    edx
c0008562:	5b                   	pop    ebx
c0008563:	5e                   	pop    esi
c0008564:	c3                   	ret    

c0008565 <src_delete>:
c0008565:	53                   	push   ebx
c0008566:	83 ec 08             	sub    esp,0x8
c0008569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856d:	85 db                	test   ebx,ebx
c000856f:	74 29                	je     c000859a <src_delete+0x35>
c0008571:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008574:	85 c0                	test   eax,eax
c0008576:	74 0c                	je     c0008584 <src_delete+0x1f>
c0008578:	83 ec 0c             	sub    esp,0xc
c000857b:	50                   	push   eax
c000857c:	e8 6c 3a 00 00       	call   c000bfed <free>
c0008581:	83 c4 10             	add    esp,0x10
c0008584:	50                   	push   eax
c0008585:	6a 3c                	push   0x3c
c0008587:	6a 00                	push   0x0
c0008589:	53                   	push   ebx
c000858a:	e8 30 81 ff ff       	call   c00006bf <memset>
c000858f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008592:	e8 56 3a 00 00       	call   c000bfed <free>
c0008597:	83 c4 10             	add    esp,0x10
c000859a:	83 c4 08             	add    esp,0x8
c000859d:	31 c0                	xor    eax,eax
c000859f:	5b                   	pop    ebx
c00085a0:	c3                   	ret    

c00085a1 <src_process>:
c00085a1:	56                   	push   esi
c00085a2:	53                   	push   ebx
c00085a3:	53                   	push   ebx
c00085a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085ac:	85 f6                	test   esi,esi
c00085ae:	0f 84 e2 00 00 00    	je     c0008696 <src_process+0xf5>
c00085b4:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b8:	0f 84 df 00 00 00    	je     c000869d <src_process+0xfc>
c00085be:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085c2:	0f 84 d5 00 00 00    	je     c000869d <src_process+0xfc>
c00085c8:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085cf:	0f 85 cf 00 00 00    	jne    c00086a4 <src_process+0x103>
c00085d5:	85 db                	test   ebx,ebx
c00085d7:	0f 84 ce 00 00 00    	je     c00086ab <src_process+0x10a>
c00085dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085e0:	0f 84 cc 00 00 00    	je     c00086b2 <src_process+0x111>
c00085e6:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085ea:	0f 84 c2 00 00 00    	je     c00086b2 <src_process+0x111>
c00085f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f6:	e8 e2 fe ff ff       	call   c00084dd <is_bad_src_ratio>
c00085fb:	5a                   	pop    edx
c00085fc:	85 c0                	test   eax,eax
c00085fe:	59                   	pop    ecx
c00085ff:	0f 85 b4 00 00 00    	jne    c00086b9 <src_process+0x118>
c0008605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008609:	79 07                	jns    c0008612 <src_process+0x71>
c000860b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008612:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008616:	79 07                	jns    c000861f <src_process+0x7e>
c0008618:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008621:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008624:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008627:	39 ca                	cmp    edx,ecx
c0008629:	73 0b                	jae    c0008636 <src_process+0x95>
c000862b:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862f:	8d 04 82             	lea    eax,[edx+eax*4]
c0008632:	39 c1                	cmp    ecx,eax
c0008634:	eb 09                	jmp    c000863f <src_process+0x9e>
c0008636:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000863a:	8d 04 81             	lea    eax,[ecx+eax*4]
c000863d:	39 c2                	cmp    edx,eax
c000863f:	72 7f                	jb     c00086c0 <src_process+0x11f>
c0008641:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008648:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864f:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c0008655:	dc 1e                	fcomp  QWORD PTR [esi]
c0008657:	df e0                	fnstsw ax
c0008659:	9e                   	sahf   
c000865a:	76 05                	jbe    c0008661 <src_process+0xc0>
c000865c:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865f:	dd 1e                	fstp   QWORD PTR [esi]
c0008661:	dd 06                	fld    QWORD PTR [esi]
c0008663:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008666:	83 ec 10             	sub    esp,0x10
c0008669:	dd 1c 24             	fstp   QWORD PTR [esp]
c000866c:	e8 bf 70 01 00       	call   c001f730 <fabs>
c0008671:	83 c4 10             	add    esp,0x10
c0008674:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c000867a:	de d9                	fcompp 
c000867c:	df e0                	fnstsw ax
c000867e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008682:	9e                   	sahf   
c0008683:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008687:	76 05                	jbe    c000868e <src_process+0xed>
c0008689:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000868c:	eb 03                	jmp    c0008691 <src_process+0xf0>
c000868e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008691:	59                   	pop    ecx
c0008692:	5b                   	pop    ebx
c0008693:	5e                   	pop    esi
c0008694:	ff e0                	jmp    eax
c0008696:	b8 02 00 00 00       	mov    eax,0x2
c000869b:	eb 28                	jmp    c00086c5 <src_process+0x124>
c000869d:	b8 07 00 00 00       	mov    eax,0x7
c00086a2:	eb 21                	jmp    c00086c5 <src_process+0x124>
c00086a4:	b8 12 00 00 00       	mov    eax,0x12
c00086a9:	eb 1a                	jmp    c00086c5 <src_process+0x124>
c00086ab:	b8 03 00 00 00       	mov    eax,0x3
c00086b0:	eb 13                	jmp    c00086c5 <src_process+0x124>
c00086b2:	b8 04 00 00 00       	mov    eax,0x4
c00086b7:	eb 0c                	jmp    c00086c5 <src_process+0x124>
c00086b9:	b8 06 00 00 00       	mov    eax,0x6
c00086be:	eb 05                	jmp    c00086c5 <src_process+0x124>
c00086c0:	b8 10 00 00 00       	mov    eax,0x10
c00086c5:	5a                   	pop    edx
c00086c6:	5b                   	pop    ebx
c00086c7:	5e                   	pop    esi
c00086c8:	c3                   	ret    

c00086c9 <src_callback_read>:
c00086c9:	55                   	push   ebp
c00086ca:	57                   	push   edi
c00086cb:	56                   	push   esi
c00086cc:	53                   	push   ebx
c00086cd:	83 ec 4c             	sub    esp,0x4c
c00086d0:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086d4:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086dc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086e0:	85 ff                	test   edi,edi
c00086e2:	0f 8e 36 01 00 00    	jle    c000881e <src_callback_read+0x155>
c00086e8:	85 db                	test   ebx,ebx
c00086ea:	0f 84 2e 01 00 00    	je     c000881e <src_callback_read+0x155>
c00086f0:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f7:	74 0c                	je     c0008705 <src_callback_read+0x3c>
c00086f9:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008700:	e9 19 01 00 00       	jmp    c000881e <src_callback_read+0x155>
c0008705:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008709:	75 0c                	jne    c0008717 <src_callback_read+0x4e>
c000870b:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008712:	e9 07 01 00 00       	jmp    c000881e <src_callback_read+0x155>
c0008717:	51                   	push   ecx
c0008718:	6a 24                	push   0x24
c000871a:	6a 00                	push   0x0
c000871c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008720:	50                   	push   eax
c0008721:	e8 99 7f ff ff       	call   c00006bf <memset>
c0008726:	5e                   	pop    esi
c0008727:	5d                   	pop    ebp
c0008728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008730:	e8 a8 fd ff ff       	call   c00084dd <is_bad_src_ratio>
c0008735:	83 c4 10             	add    esp,0x10
c0008738:	85 c0                	test   eax,eax
c000873a:	74 0c                	je     c0008748 <src_callback_read+0x7f>
c000873c:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008743:	e9 d6 00 00 00       	jmp    c000881e <src_callback_read+0x155>
c0008748:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000874c:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008750:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008754:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008758:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000875b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008762:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008766:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000876a:	31 f6                	xor    esi,esi
c000876c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008771:	75 30                	jne    c00087a3 <src_callback_read+0xda>
c0008773:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000877b:	52                   	push   edx
c000877c:	52                   	push   edx
c000877d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008781:	50                   	push   eax
c0008782:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008785:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008788:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000878c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008790:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008794:	83 c4 10             	add    esp,0x10
c0008797:	85 c0                	test   eax,eax
c0008799:	75 08                	jne    c00087a3 <src_callback_read+0xda>
c000879b:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087a3:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087aa:	50                   	push   eax
c00087ab:	50                   	push   eax
c00087ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087b0:	50                   	push   eax
c00087b1:	53                   	push   ebx
c00087b2:	e8 ea fd ff ff       	call   c00085a1 <src_process>
c00087b7:	83 c4 10             	add    esp,0x10
c00087ba:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087c1:	85 c0                	test   eax,eax
c00087c3:	75 42                	jne    c0008807 <src_callback_read+0x13e>
c00087c5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087cc:	89 e9                	mov    ecx,ebp
c00087ce:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087d2:	0f af ca             	imul   ecx,edx
c00087d5:	c1 e1 02             	shl    ecx,0x2
c00087d8:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087e0:	0f af d1             	imul   edx,ecx
c00087e3:	c1 e2 02             	shl    edx,0x2
c00087e6:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087ea:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087ee:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087f1:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f6:	75 04                	jne    c00087fc <src_callback_read+0x133>
c00087f8:	85 c9                	test   ecx,ecx
c00087fa:	74 0b                	je     c0008807 <src_callback_read+0x13e>
c00087fc:	39 d7                	cmp    edi,edx
c00087fe:	7e 09                	jle    c0008809 <src_callback_read+0x140>
c0008800:	89 d6                	mov    esi,edx
c0008802:	e9 65 ff ff ff       	jmp    c000876c <src_callback_read+0xa3>
c0008807:	89 f2                	mov    edx,esi
c0008809:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000880d:	85 c0                	test   eax,eax
c000880f:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008812:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008816:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008819:	74 05                	je     c0008820 <src_callback_read+0x157>
c000881b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000881e:	31 d2                	xor    edx,edx
c0008820:	83 c4 4c             	add    esp,0x4c
c0008823:	89 d0                	mov    eax,edx
c0008825:	5b                   	pop    ebx
c0008826:	5e                   	pop    esi
c0008827:	5f                   	pop    edi
c0008828:	5d                   	pop    ebp
c0008829:	c3                   	ret    

c000882a <src_set_ratio>:
c000882a:	53                   	push   ebx
c000882b:	b8 02 00 00 00       	mov    eax,0x2
c0008830:	83 ec 08             	sub    esp,0x8
c0008833:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008837:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000883b:	85 db                	test   ebx,ebx
c000883d:	74 33                	je     c0008872 <src_set_ratio+0x48>
c000883f:	b8 07 00 00 00       	mov    eax,0x7
c0008844:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008848:	74 2c                	je     c0008876 <src_set_ratio+0x4c>
c000884a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000884e:	74 2a                	je     c000887a <src_set_ratio+0x50>
c0008850:	50                   	push   eax
c0008851:	50                   	push   eax
c0008852:	dd 14 24             	fst    QWORD PTR [esp]
c0008855:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008859:	e8 7f fc ff ff       	call   c00084dd <is_bad_src_ratio>
c000885e:	5a                   	pop    edx
c000885f:	59                   	pop    ecx
c0008860:	85 c0                	test   eax,eax
c0008862:	75 07                	jne    c000886b <src_set_ratio+0x41>
c0008864:	dd 04 24             	fld    QWORD PTR [esp]
c0008867:	dd 1b                	fstp   QWORD PTR [ebx]
c0008869:	eb 11                	jmp    c000887c <src_set_ratio+0x52>
c000886b:	b8 06 00 00 00       	mov    eax,0x6
c0008870:	eb 0a                	jmp    c000887c <src_set_ratio+0x52>
c0008872:	dd d8                	fstp   st(0)
c0008874:	eb 06                	jmp    c000887c <src_set_ratio+0x52>
c0008876:	dd d8                	fstp   st(0)
c0008878:	eb 02                	jmp    c000887c <src_set_ratio+0x52>
c000887a:	dd d8                	fstp   st(0)
c000887c:	83 c4 08             	add    esp,0x8
c000887f:	5b                   	pop    ebx
c0008880:	c3                   	ret    

c0008881 <src_get_channels>:
c0008881:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008885:	b8 02 00 00 00       	mov    eax,0x2
c000888a:	85 d2                	test   edx,edx
c000888c:	74 14                	je     c00088a2 <src_get_channels+0x21>
c000888e:	b8 07 00 00 00       	mov    eax,0x7
c0008893:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008897:	74 09                	je     c00088a2 <src_get_channels+0x21>
c0008899:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000889d:	74 03                	je     c00088a2 <src_get_channels+0x21>
c000889f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a2:	c3                   	ret    

c00088a3 <src_reset>:
c00088a3:	53                   	push   ebx
c00088a4:	b8 02 00 00 00       	mov    eax,0x2
c00088a9:	83 ec 08             	sub    esp,0x8
c00088ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b0:	85 db                	test   ebx,ebx
c00088b2:	74 2e                	je     c00088e2 <src_reset+0x3f>
c00088b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b7:	85 c0                	test   eax,eax
c00088b9:	74 09                	je     c00088c4 <src_reset+0x21>
c00088bb:	83 ec 0c             	sub    esp,0xc
c00088be:	53                   	push   ebx
c00088bf:	ff d0                	call   eax
c00088c1:	83 c4 10             	add    esp,0x10
c00088c4:	d9 ee                	fldz   
c00088c6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088cd:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088d4:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088de:	31 c0                	xor    eax,eax
c00088e0:	dd 1b                	fstp   QWORD PTR [ebx]
c00088e2:	83 c4 08             	add    esp,0x8
c00088e5:	5b                   	pop    ebx
c00088e6:	c3                   	ret    

c00088e7 <src_new>:
c00088e7:	57                   	push   edi
c00088e8:	56                   	push   esi
c00088e9:	53                   	push   ebx
c00088ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088f2:	85 f6                	test   esi,esi
c00088f4:	74 73                	je     c0008969 <src_new+0x82>
c00088f6:	85 ff                	test   edi,edi
c00088f8:	7f 08                	jg     c0008902 <src_new+0x1b>
c00088fa:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008900:	eb 1e                	jmp    c0008920 <src_new+0x39>
c0008902:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008908:	50                   	push   eax
c0008909:	50                   	push   eax
c000890a:	6a 3c                	push   0x3c
c000890c:	6a 01                	push   0x1
c000890e:	e8 fa 36 00 00       	call   c000c00d <calloc>
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	89 c3                	mov    ebx,eax
c0008918:	85 c0                	test   eax,eax
c000891a:	75 10                	jne    c000892c <src_new+0x45>
c000891c:	85 f6                	test   esi,esi
c000891e:	75 04                	jne    c0008924 <src_new+0x3d>
c0008920:	31 db                	xor    ebx,ebx
c0008922:	eb 4b                	jmp    c000896f <src_new+0x88>
c0008924:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000892a:	eb 43                	jmp    c000896f <src_new+0x88>
c000892c:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892f:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008936:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000893a:	e8 e2 fb ff ff       	call   c0008521 <psrc_set_converter>
c000893f:	85 c0                	test   eax,eax
c0008941:	74 18                	je     c000895b <src_new+0x74>
c0008943:	85 f6                	test   esi,esi
c0008945:	74 06                	je     c000894d <src_new+0x66>
c0008947:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c000894d:	83 ec 0c             	sub    esp,0xc
c0008950:	53                   	push   ebx
c0008951:	31 db                	xor    ebx,ebx
c0008953:	e8 95 36 00 00       	call   c000bfed <free>
c0008958:	83 c4 10             	add    esp,0x10
c000895b:	83 ec 0c             	sub    esp,0xc
c000895e:	53                   	push   ebx
c000895f:	e8 3f ff ff ff       	call   c00088a3 <src_reset>
c0008964:	83 c4 10             	add    esp,0x10
c0008967:	eb 06                	jmp    c000896f <src_new+0x88>
c0008969:	85 ff                	test   edi,edi
c000896b:	7f 9b                	jg     c0008908 <src_new+0x21>
c000896d:	eb b1                	jmp    c0008920 <src_new+0x39>
c000896f:	89 d8                	mov    eax,ebx
c0008971:	5b                   	pop    ebx
c0008972:	5e                   	pop    esi
c0008973:	5f                   	pop    edi
c0008974:	c3                   	ret    

c0008975 <src_callback_new>:
c0008975:	56                   	push   esi
c0008976:	53                   	push   ebx
c0008977:	53                   	push   ebx
c0008978:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000897c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008980:	85 f6                	test   esi,esi
c0008982:	75 0e                	jne    c0008992 <src_callback_new+0x1d>
c0008984:	31 db                	xor    ebx,ebx
c0008986:	85 c0                	test   eax,eax
c0008988:	74 47                	je     c00089d1 <src_callback_new+0x5c>
c000898a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008990:	eb 3f                	jmp    c00089d1 <src_callback_new+0x5c>
c0008992:	85 c0                	test   eax,eax
c0008994:	74 06                	je     c000899c <src_callback_new+0x27>
c0008996:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000899c:	51                   	push   ecx
c000899d:	50                   	push   eax
c000899e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a6:	e8 3c ff ff ff       	call   c00088e7 <src_new>
c00089ab:	83 c4 10             	add    esp,0x10
c00089ae:	89 c3                	mov    ebx,eax
c00089b0:	85 c0                	test   eax,eax
c00089b2:	74 1d                	je     c00089d1 <src_callback_new+0x5c>
c00089b4:	83 ec 0c             	sub    esp,0xc
c00089b7:	50                   	push   eax
c00089b8:	e8 e6 fe ff ff       	call   c00088a3 <src_reset>
c00089bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c1:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089ce:	83 c4 10             	add    esp,0x10
c00089d1:	5a                   	pop    edx
c00089d2:	89 d8                	mov    eax,ebx
c00089d4:	5b                   	pop    ebx
c00089d5:	5e                   	pop    esi
c00089d6:	c3                   	ret    

c00089d7 <src_get_name>:
c00089d7:	53                   	push   ebx
c00089d8:	83 ec 14             	sub    esp,0x14
c00089db:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089df:	53                   	push   ebx
c00089e0:	e8 47 1f 00 00       	call   c000a92c <sinc_get_name>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	75 1d                	jne    c0008a09 <src_get_name+0x32>
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	53                   	push   ebx
c00089f0:	e8 4a 23 00 00       	call   c000ad3f <zoh_get_name>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	75 0d                	jne    c0008a09 <src_get_name+0x32>
c00089fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a00:	83 c4 08             	add    esp,0x8
c0008a03:	5b                   	pop    ebx
c0008a04:	e9 36 05 00 00       	jmp    c0008f3f <linear_get_name>
c0008a09:	83 c4 08             	add    esp,0x8
c0008a0c:	5b                   	pop    ebx
c0008a0d:	c3                   	ret    

c0008a0e <src_get_description>:
c0008a0e:	53                   	push   ebx
c0008a0f:	83 ec 14             	sub    esp,0x14
c0008a12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a16:	53                   	push   ebx
c0008a17:	e8 23 1f 00 00       	call   c000a93f <sinc_get_description>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	85 c0                	test   eax,eax
c0008a21:	75 1d                	jne    c0008a40 <src_get_description+0x32>
c0008a23:	83 ec 0c             	sub    esp,0xc
c0008a26:	53                   	push   ebx
c0008a27:	e8 22 23 00 00       	call   c000ad4e <zoh_get_description>
c0008a2c:	83 c4 10             	add    esp,0x10
c0008a2f:	85 c0                	test   eax,eax
c0008a31:	75 0d                	jne    c0008a40 <src_get_description+0x32>
c0008a33:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a37:	83 c4 08             	add    esp,0x8
c0008a3a:	5b                   	pop    ebx
c0008a3b:	e9 0e 05 00 00       	jmp    c0008f4e <linear_get_description>
c0008a40:	83 c4 08             	add    esp,0x8
c0008a43:	5b                   	pop    ebx
c0008a44:	c3                   	ret    

c0008a45 <src_get_version>:
c0008a45:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a4a:	c3                   	ret    

c0008a4b <src_is_valid_ratio>:
c0008a4b:	50                   	push   eax
c0008a4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a54:	e8 84 fa ff ff       	call   c00084dd <is_bad_src_ratio>
c0008a59:	85 c0                	test   eax,eax
c0008a5b:	0f 94 c0             	sete   al
c0008a5e:	0f b6 c0             	movzx  eax,al
c0008a61:	83 c4 0c             	add    esp,0xc
c0008a64:	c3                   	ret    

c0008a65 <src_error>:
c0008a65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a69:	31 c0                	xor    eax,eax
c0008a6b:	85 d2                	test   edx,edx
c0008a6d:	74 03                	je     c0008a72 <src_error+0xd>
c0008a6f:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a72:	c3                   	ret    

c0008a73 <src_strerror>:
c0008a73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a77:	31 c0                	xor    eax,eax
c0008a79:	83 fa 17             	cmp    edx,0x17
c0008a7c:	77 07                	ja     c0008a85 <src_strerror+0x12>
c0008a7e:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a85:	c3                   	ret    

c0008a86 <src_simple>:
c0008a86:	56                   	push   esi
c0008a87:	53                   	push   ebx
c0008a88:	83 ec 18             	sub    esp,0x18
c0008a8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a93:	50                   	push   eax
c0008a94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a9c:	e8 46 fe ff ff       	call   c00088e7 <src_new>
c0008aa1:	83 c4 10             	add    esp,0x10
c0008aa4:	85 c0                	test   eax,eax
c0008aa6:	75 06                	jne    c0008aae <src_simple+0x28>
c0008aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aac:	eb 25                	jmp    c0008ad3 <src_simple+0x4d>
c0008aae:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab5:	89 c3                	mov    ebx,eax
c0008ab7:	50                   	push   eax
c0008ab8:	50                   	push   eax
c0008ab9:	56                   	push   esi
c0008aba:	53                   	push   ebx
c0008abb:	e8 e1 fa ff ff       	call   c00085a1 <src_process>
c0008ac0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ac3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac7:	e8 99 fa ff ff       	call   c0008565 <src_delete>
c0008acc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	83 c4 14             	add    esp,0x14
c0008ad6:	5b                   	pop    ebx
c0008ad7:	5e                   	pop    esi
c0008ad8:	c3                   	ret    

c0008ad9 <src_short_to_float_array>:
c0008ad9:	83 ec 0c             	sub    esp,0xc
c0008adc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ae0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae8:	85 c0                	test   eax,eax
c0008aea:	74 0f                	je     c0008afb <src_short_to_float_array+0x22>
c0008aec:	48                   	dec    eax
c0008aed:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008af3:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af6:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af9:	eb ed                	jmp    c0008ae8 <src_short_to_float_array+0xf>
c0008afb:	83 c4 0c             	add    esp,0xc
c0008afe:	c3                   	ret    

c0008aff <src_float_to_short_array>:
c0008aff:	56                   	push   esi
c0008b00:	53                   	push   ebx
c0008b01:	52                   	push   edx
c0008b02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b0a:	85 db                	test   ebx,ebx
c0008b0c:	74 51                	je     c0008b5f <src_float_to_short_array+0x60>
c0008b0e:	4b                   	dec    ebx
c0008b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b13:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b19:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b1c:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b22:	df e0                	fnstsw ax
c0008b24:	9e                   	sahf   
c0008b25:	72 0a                	jb     c0008b31 <src_float_to_short_array+0x32>
c0008b27:	dd d8                	fstp   st(0)
c0008b29:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2f:	eb d9                	jmp    c0008b0a <src_float_to_short_array+0xb>
c0008b31:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b37:	d8 d9                	fcomp  st(1)
c0008b39:	df e0                	fnstsw ax
c0008b3b:	9e                   	sahf   
c0008b3c:	72 0a                	jb     c0008b48 <src_float_to_short_array+0x49>
c0008b3e:	dd d8                	fstp   st(0)
c0008b40:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b46:	eb c2                	jmp    c0008b0a <src_float_to_short_array+0xb>
c0008b48:	83 ec 10             	sub    esp,0x10
c0008b4b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b4e:	e8 fd 6b 01 00       	call   c001f750 <lrint>
c0008b53:	83 c4 10             	add    esp,0x10
c0008b56:	c1 f8 10             	sar    eax,0x10
c0008b59:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b5d:	eb ab                	jmp    c0008b0a <src_float_to_short_array+0xb>
c0008b5f:	58                   	pop    eax
c0008b60:	5b                   	pop    ebx
c0008b61:	5e                   	pop    esi
c0008b62:	c3                   	ret    

c0008b63 <src_int_to_float_array>:
c0008b63:	83 ec 0c             	sub    esp,0xc
c0008b66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b72:	85 c0                	test   eax,eax
c0008b74:	74 0f                	je     c0008b85 <src_int_to_float_array+0x22>
c0008b76:	48                   	dec    eax
c0008b77:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b7d:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b80:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b83:	eb ed                	jmp    c0008b72 <src_int_to_float_array+0xf>
c0008b85:	83 c4 0c             	add    esp,0xc
c0008b88:	c3                   	ret    

c0008b89 <src_float_to_int_array>:
c0008b89:	56                   	push   esi
c0008b8a:	53                   	push   ebx
c0008b8b:	52                   	push   edx
c0008b8c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b90:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b94:	85 db                	test   ebx,ebx
c0008b96:	74 4f                	je     c0008be7 <src_float_to_int_array+0x5e>
c0008b98:	4b                   	dec    ebx
c0008b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b9d:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008ba3:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba6:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bac:	df e0                	fnstsw ax
c0008bae:	9e                   	sahf   
c0008baf:	72 0b                	jb     c0008bbc <src_float_to_int_array+0x33>
c0008bb1:	dd d8                	fstp   st(0)
c0008bb3:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bba:	eb d8                	jmp    c0008b94 <src_float_to_int_array+0xb>
c0008bbc:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bc2:	d8 d9                	fcomp  st(1)
c0008bc4:	df e0                	fnstsw ax
c0008bc6:	9e                   	sahf   
c0008bc7:	72 0b                	jb     c0008bd4 <src_float_to_int_array+0x4b>
c0008bc9:	dd d8                	fstp   st(0)
c0008bcb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bd2:	eb c0                	jmp    c0008b94 <src_float_to_int_array+0xb>
c0008bd4:	83 ec 10             	sub    esp,0x10
c0008bd7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bda:	e8 71 6b 01 00       	call   c001f750 <lrint>
c0008bdf:	83 c4 10             	add    esp,0x10
c0008be2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be5:	eb ad                	jmp    c0008b94 <src_float_to_int_array+0xb>
c0008be7:	58                   	pop    eax
c0008be8:	5b                   	pop    ebx
c0008be9:	5e                   	pop    esi
c0008bea:	c3                   	ret    

c0008beb <is_bad_src_ratio>:
c0008beb:	83 ec 0c             	sub    esp,0xc
c0008bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bfd:	dd 04 24             	fld    QWORD PTR [esp]
c0008c00:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c06:	de d9                	fcompp 
c0008c08:	df e0                	fnstsw ax
c0008c0a:	f6 c4 45             	test   ah,0x45
c0008c0d:	74 10                	je     c0008c1f <is_bad_src_ratio+0x34>
c0008c0f:	dd 04 24             	fld    QWORD PTR [esp]
c0008c12:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c18:	df e0                	fnstsw ax
c0008c1a:	f6 c4 45             	test   ah,0x45
c0008c1d:	75 07                	jne    c0008c26 <is_bad_src_ratio+0x3b>
c0008c1f:	b8 01 00 00 00       	mov    eax,0x1
c0008c24:	eb 05                	jmp    c0008c2b <is_bad_src_ratio+0x40>
c0008c26:	b8 00 00 00 00       	mov    eax,0x0
c0008c2b:	83 c4 0c             	add    esp,0xc
c0008c2e:	c3                   	ret    

c0008c2f <fmod_one>:
c0008c2f:	83 ec 2c             	sub    esp,0x2c
c0008c32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c42:	83 ec 08             	sub    esp,0x8
c0008c45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4d:	e8 fe 6a 01 00       	call   c001f750 <lrint>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c59:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c5d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c61:	de e1                	fsubrp st(1),st
c0008c63:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c67:	d9 ee                	fldz   
c0008c69:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c6d:	df e0                	fnstsw ax
c0008c6f:	f6 c4 45             	test   ah,0x45
c0008c72:	75 0a                	jne    c0008c7e <fmod_one+0x4f>
c0008c74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c78:	d9 e8                	fld1   
c0008c7a:	de c1                	faddp  st(1),st
c0008c7c:	eb 04                	jmp    c0008c82 <fmod_one+0x53>
c0008c7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c82:	83 c4 2c             	add    esp,0x2c
c0008c85:	c3                   	ret    

c0008c86 <linear_vari_process>:
c0008c86:	55                   	push   ebp
c0008c87:	57                   	push   edi
c0008c88:	56                   	push   esi
c0008c89:	53                   	push   ebx
c0008c8a:	83 ec 2c             	sub    esp,0x2c
c0008c8d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c91:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c95:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c9d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ca1:	0f 8e 5a 02 00 00    	jle    c0008f01 <linear_vari_process+0x27b>
c0008ca7:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008caa:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cb2:	85 db                	test   ebx,ebx
c0008cb4:	0f 84 47 02 00 00    	je     c0008f01 <linear_vari_process+0x27b>
c0008cba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cbd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cc1:	74 19                	je     c0008cdc <linear_vari_process+0x56>
c0008cc3:	31 d2                	xor    edx,edx
c0008cc5:	39 c2                	cmp    edx,eax
c0008cc7:	7d 0c                	jge    c0008cd5 <linear_vari_process+0x4f>
c0008cc9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ccb:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cce:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008cd2:	42                   	inc    edx
c0008cd3:	eb f0                	jmp    c0008cc5 <linear_vari_process+0x3f>
c0008cd5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cdc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cdf:	0f af d0             	imul   edx,eax
c0008ce2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce5:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008cf0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cf3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cfa:	dd 07                	fld    QWORD PTR [edi]
c0008cfc:	dd 14 24             	fst    QWORD PTR [esp]
c0008cff:	50                   	push   eax
c0008d00:	50                   	push   eax
c0008d01:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d04:	e8 e2 fe ff ff       	call   c0008beb <is_bad_src_ratio>
c0008d09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d0d:	5a                   	pop    edx
c0008d0e:	59                   	pop    ecx
c0008d0f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d14:	0f 85 df 01 00 00    	jne    c0008ef9 <linear_vari_process+0x273>
c0008d1a:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d1d:	d9 e8                	fld1   
c0008d1f:	d8 d1                	fcom   st(1)
c0008d21:	df e0                	fnstsw ax
c0008d23:	9e                   	sahf   
c0008d24:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d28:	0f 86 97 00 00 00    	jbe    c0008dc5 <linear_vari_process+0x13f>
c0008d2e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d31:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d34:	0f 8d 8b 00 00 00    	jge    c0008dc5 <linear_vari_process+0x13f>
c0008d3a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d3e:	d8 c1                	fadd   st,st(1)
c0008d40:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d43:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d46:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d49:	df e0                	fnstsw ax
c0008d4b:	9e                   	sahf   
c0008d4c:	73 77                	jae    c0008dc5 <linear_vari_process+0x13f>
c0008d4e:	85 d2                	test   edx,edx
c0008d50:	7e 36                	jle    c0008d88 <linear_vari_process+0x102>
c0008d52:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d56:	dd 07                	fld    QWORD PTR [edi]
c0008d58:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d5b:	83 ec 10             	sub    esp,0x10
c0008d5e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d61:	e8 ca 69 01 00       	call   c001f730 <fabs>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d6f:	df e0                	fnstsw ax
c0008d71:	9e                   	sahf   
c0008d72:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d76:	76 10                	jbe    c0008d88 <linear_vari_process+0x102>
c0008d78:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d7b:	dc 27                	fsub   QWORD PTR [edi]
c0008d7d:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d80:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d83:	dc 07                	fadd   QWORD PTR [edi]
c0008d85:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d88:	31 c0                	xor    eax,eax
c0008d8a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d8d:	7e 1f                	jle    c0008dae <linear_vari_process+0x128>
c0008d8f:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d91:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d94:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d98:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d9c:	d8 e1                	fsub   st,st(1)
c0008d9e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008da1:	40                   	inc    eax
c0008da2:	d8 ca                	fmul   st,st(2)
c0008da4:	de c1                	faddp  st(1),st
c0008da6:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dac:	eb dc                	jmp    c0008d8a <linear_vari_process+0x104>
c0008dae:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008db2:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db5:	de c1                	faddp  st(1),st
c0008db7:	e9 61 ff ff ff       	jmp    c0008d1d <linear_vari_process+0x97>
c0008dbc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc0:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	83 ec 10             	sub    esp,0x10
c0008dc8:	dd 14 24             	fst    QWORD PTR [esp]
c0008dcb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dcf:	e8 5b fe ff ff       	call   c0008c2f <fmod_one>
c0008dd4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd7:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008ddb:	d8 e1                	fsub   st,st(1)
c0008ddd:	d9 c9                	fxch   st(1)
c0008ddf:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de6:	e8 65 69 01 00       	call   c001f750 <lrint>
c0008deb:	83 c4 10             	add    esp,0x10
c0008dee:	0f af e8             	imul   ebp,eax
c0008df1:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008df4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008dfb:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008dfe:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e01:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e04:	0f 8d 95 00 00 00    	jge    c0008e9f <linear_vari_process+0x219>
c0008e0a:	d9 c0                	fld    st(0)
c0008e0c:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e13:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e17:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e1b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1f:	de d9                	fcompp 
c0008e21:	df e0                	fnstsw ax
c0008e23:	9e                   	sahf   
c0008e24:	76 79                	jbe    c0008e9f <linear_vari_process+0x219>
c0008e26:	85 ed                	test   ebp,ebp
c0008e28:	7e 36                	jle    c0008e60 <linear_vari_process+0x1da>
c0008e2a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e2e:	dd 07                	fld    QWORD PTR [edi]
c0008e30:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e33:	83 ec 10             	sub    esp,0x10
c0008e36:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e39:	e8 f2 68 01 00       	call   c001f730 <fabs>
c0008e3e:	83 c4 10             	add    esp,0x10
c0008e41:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e47:	df e0                	fnstsw ax
c0008e49:	9e                   	sahf   
c0008e4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e4e:	76 10                	jbe    c0008e60 <linear_vari_process+0x1da>
c0008e50:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e53:	dc 27                	fsub   QWORD PTR [edi]
c0008e55:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e58:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e5b:	dc 07                	fadd   QWORD PTR [edi]
c0008e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e60:	31 c0                	xor    eax,eax
c0008e62:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e65:	39 c2                	cmp    edx,eax
c0008e67:	0f 8e 4f ff ff ff    	jle    c0008dbc <linear_vari_process+0x136>
c0008e6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e76:	89 e9                	mov    ecx,ebp
c0008e78:	29 d1                	sub    ecx,edx
c0008e7a:	01 c5                	add    ebp,eax
c0008e7c:	89 ca                	mov    edx,ecx
c0008e7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e82:	01 c2                	add    edx,eax
c0008e84:	40                   	inc    eax
c0008e85:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e88:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e8b:	d8 e1                	fsub   st,st(1)
c0008e8d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e90:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e93:	d8 ca                	fmul   st,st(2)
c0008e95:	de c1                	faddp  st(1),st
c0008e97:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e9a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e9d:	eb c3                	jmp    c0008e62 <linear_vari_process+0x1dc>
c0008e9f:	39 d1                	cmp    ecx,edx
c0008ea1:	7d 13                	jge    c0008eb6 <linear_vari_process+0x230>
c0008ea3:	89 d0                	mov    eax,edx
c0008ea5:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea8:	29 c8                	sub    eax,ecx
c0008eaa:	99                   	cdq    
c0008eab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eb2:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb6:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 1b                	jg     c0008edb <linear_vari_process+0x255>
c0008ec0:	dd 04 24             	fld    QWORD PTR [esp]
c0008ec3:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec8:	99                   	cdq    
c0008ec9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ecc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ecf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ed2:	99                   	cdq    
c0008ed3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed9:	eb 26                	jmp    c0008f01 <linear_vari_process+0x27b>
c0008edb:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ede:	31 d2                	xor    edx,edx
c0008ee0:	29 c8                	sub    eax,ecx
c0008ee2:	c1 e0 02             	shl    eax,0x2
c0008ee5:	39 d1                	cmp    ecx,edx
c0008ee7:	7e d7                	jle    c0008ec0 <linear_vari_process+0x23a>
c0008ee9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008eeb:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eef:	83 c0 04             	add    eax,0x4
c0008ef2:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef6:	42                   	inc    edx
c0008ef7:	eb ec                	jmp    c0008ee5 <linear_vari_process+0x25f>
c0008ef9:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f05:	83 c4 2c             	add    esp,0x2c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    

c0008f0d <linear_reset>:
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f14:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f17:	85 c0                	test   eax,eax
c0008f19:	74 20                	je     c0008f3b <linear_reset+0x2e>
c0008f1b:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f1e:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f28:	51                   	push   ecx
c0008f29:	c1 e2 02             	shl    edx,0x2
c0008f2c:	83 c0 1c             	add    eax,0x1c
c0008f2f:	52                   	push   edx
c0008f30:	6a 00                	push   0x0
c0008f32:	50                   	push   eax
c0008f33:	e8 87 77 ff ff       	call   c00006bf <memset>
c0008f38:	83 c4 10             	add    esp,0x10
c0008f3b:	83 c4 0c             	add    esp,0xc
c0008f3e:	c3                   	ret    

c0008f3f <linear_get_name>:
c0008f3f:	31 c0                	xor    eax,eax
c0008f41:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f46:	75 05                	jne    c0008f4d <linear_get_name+0xe>
c0008f48:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f4d:	c3                   	ret    

c0008f4e <linear_get_description>:
c0008f4e:	31 c0                	xor    eax,eax
c0008f50:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f55:	75 05                	jne    c0008f5c <linear_get_description+0xe>
c0008f57:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f5c:	c3                   	ret    

c0008f5d <linear_set_converter>:
c0008f5d:	53                   	push   ebx
c0008f5e:	b8 0a 00 00 00       	mov    eax,0xa
c0008f63:	83 ec 08             	sub    esp,0x8
c0008f66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f6a:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6f:	75 6e                	jne    c0008fdf <linear_set_converter+0x82>
c0008f71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f74:	85 c0                	test   eax,eax
c0008f76:	74 13                	je     c0008f8b <linear_set_converter+0x2e>
c0008f78:	83 ec 0c             	sub    esp,0xc
c0008f7b:	50                   	push   eax
c0008f7c:	e8 6c 30 00 00       	call   c000bfed <free>
c0008f81:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f88:	83 c4 10             	add    esp,0x10
c0008f8b:	50                   	push   eax
c0008f8c:	50                   	push   eax
c0008f8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f90:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f97:	50                   	push   eax
c0008f98:	6a 01                	push   0x1
c0008f9a:	e8 6e 30 00 00       	call   c000c00d <calloc>
c0008f9f:	89 c2                	mov    edx,eax
c0008fa1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	b8 01 00 00 00       	mov    eax,0x1
c0008fac:	85 d2                	test   edx,edx
c0008fae:	74 2f                	je     c0008fdf <linear_set_converter+0x82>
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb9:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fbf:	c7 43 24 86 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c86
c0008fc6:	c7 43 20 86 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c86
c0008fcd:	c7 43 28 0d 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f0d
c0008fd4:	53                   	push   ebx
c0008fd5:	e8 33 ff ff ff       	call   c0008f0d <linear_reset>
c0008fda:	83 c4 10             	add    esp,0x10
c0008fdd:	31 c0                	xor    eax,eax
c0008fdf:	83 c4 08             	add    esp,0x8
c0008fe2:	5b                   	pop    ebx
c0008fe3:	c3                   	ret    

c0008fe4 <is_bad_src_ratio>:
c0008fe4:	83 ec 0c             	sub    esp,0xc
c0008fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff6:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff9:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008fff:	de d9                	fcompp 
c0009001:	df e0                	fnstsw ax
c0009003:	f6 c4 45             	test   ah,0x45
c0009006:	74 10                	je     c0009018 <is_bad_src_ratio+0x34>
c0009008:	dd 04 24             	fld    QWORD PTR [esp]
c000900b:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0009011:	df e0                	fnstsw ax
c0009013:	f6 c4 45             	test   ah,0x45
c0009016:	75 07                	jne    c000901f <is_bad_src_ratio+0x3b>
c0009018:	b8 01 00 00 00       	mov    eax,0x1
c000901d:	eb 05                	jmp    c0009024 <is_bad_src_ratio+0x40>
c000901f:	b8 00 00 00 00       	mov    eax,0x0
c0009024:	83 c4 0c             	add    esp,0xc
c0009027:	c3                   	ret    

c0009028 <int_to_fp>:
c0009028:	c1 e0 0c             	shl    eax,0xc
c000902b:	c3                   	ret    

c000902c <fp_to_int>:
c000902c:	c1 f8 0c             	sar    eax,0xc
c000902f:	c3                   	ret    

c0009030 <fp_fraction_part>:
c0009030:	25 ff 0f 00 00       	and    eax,0xfff
c0009035:	c3                   	ret    

c0009036 <fp_to_double>:
c0009036:	83 ec 0c             	sub    esp,0xc
c0009039:	e8 f2 ff ff ff       	call   c0009030 <fp_fraction_part>
c000903e:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c0009044:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009048:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c000904c:	83 c4 0c             	add    esp,0xc
c000904f:	c3                   	ret    

c0009050 <calc_output_single>:
c0009050:	55                   	push   ebp
c0009051:	57                   	push   edi
c0009052:	89 c7                	mov    edi,eax
c0009054:	56                   	push   esi
c0009055:	53                   	push   ebx
c0009056:	89 d3                	mov    ebx,edx
c0009058:	83 ec 24             	sub    esp,0x24
c000905b:	89 de                	mov    esi,ebx
c000905d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009060:	e8 c3 ff ff ff       	call   c0009028 <int_to_fp>
c0009065:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906c:	29 c8                	sub    eax,ecx
c000906e:	99                   	cdq    
c000906f:	f7 fb                	idiv   ebx
c0009071:	0f af f0             	imul   esi,eax
c0009074:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009077:	01 ce                	add    esi,ecx
c0009079:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000907d:	29 c2                	sub    edx,eax
c000907f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009086:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000908e:	8d 14 97             	lea    edx,[edi+edx*4]
c0009091:	89 f0                	mov    eax,esi
c0009093:	e8 9e ff ff ff       	call   c0009036 <fp_to_double>
c0009098:	89 f0                	mov    eax,esi
c000909a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000909e:	e8 89 ff ff ff       	call   c000902c <fp_to_int>
c00090a3:	83 c2 04             	add    edx,0x4
c00090a6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090aa:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090ae:	d8 e1                	fsub   st,st(1)
c00090b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090b4:	de c9                	fmulp  st(1),st
c00090b6:	de c1                	faddp  st(1),st
c00090b8:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090be:	29 de                	sub    esi,ebx
c00090c0:	dc 04 24             	fadd   QWORD PTR [esp]
c00090c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c6:	79 c9                	jns    c0009091 <calc_output_single+0x41>
c00090c8:	89 d8                	mov    eax,ebx
c00090ca:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090ce:	29 c8                	sub    eax,ecx
c00090d0:	89 c1                	mov    ecx,eax
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	29 c8                	sub    eax,ecx
c00090d8:	99                   	cdq    
c00090d9:	f7 fb                	idiv   ebx
c00090db:	89 da                	mov    edx,ebx
c00090dd:	0f af d0             	imul   edx,eax
c00090e0:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090e4:	01 d1                	add    ecx,edx
c00090e6:	d9 ee                	fldz   
c00090e8:	8d 14 87             	lea    edx,[edi+eax*4]
c00090eb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ef:	89 c8                	mov    eax,ecx
c00090f1:	e8 40 ff ff ff       	call   c0009036 <fp_to_double>
c00090f6:	89 c8                	mov    eax,ecx
c00090f8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090fc:	e8 2b ff ff ff       	call   c000902c <fp_to_int>
c0009101:	29 d9                	sub    ecx,ebx
c0009103:	83 ea 04             	sub    edx,0x4
c0009106:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000910a:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910e:	d8 e1                	fsub   st,st(1)
c0009110:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009114:	de c9                	fmulp  st(1),st
c0009116:	de c1                	faddp  st(1),st
c0009118:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c000911e:	85 c9                	test   ecx,ecx
c0009120:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009124:	de c1                	faddp  st(1),st
c0009126:	7f c3                	jg     c00090eb <calc_output_single+0x9b>
c0009128:	dd 04 24             	fld    QWORD PTR [esp]
c000912b:	de c1                	faddp  st(1),st
c000912d:	83 c4 24             	add    esp,0x24
c0009130:	5b                   	pop    ebx
c0009131:	5e                   	pop    esi
c0009132:	5f                   	pop    edi
c0009133:	5d                   	pop    ebp
c0009134:	c3                   	ret    

c0009135 <calc_output_stereo>:
c0009135:	55                   	push   ebp
c0009136:	57                   	push   edi
c0009137:	89 c7                	mov    edi,eax
c0009139:	56                   	push   esi
c000913a:	53                   	push   ebx
c000913b:	89 d3                	mov    ebx,edx
c000913d:	83 ec 44             	sub    esp,0x44
c0009140:	89 de                	mov    esi,ebx
c0009142:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009145:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009149:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000914d:	e8 d6 fe ff ff       	call   c0009028 <int_to_fp>
c0009152:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009155:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009159:	29 c8                	sub    eax,ecx
c000915b:	99                   	cdq    
c000915c:	f7 fb                	idiv   ebx
c000915e:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009161:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009169:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000916d:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009170:	0f af f0             	imul   esi,eax
c0009173:	0f af c2             	imul   eax,edx
c0009176:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000917a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000917e:	d9 ee                	fldz   
c0009180:	29 c2                	sub    edx,eax
c0009182:	01 ce                	add    esi,ecx
c0009184:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009187:	8d 14 97             	lea    edx,[edi+edx*4]
c000918a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009192:	89 f0                	mov    eax,esi
c0009194:	e8 9d fe ff ff       	call   c0009036 <fp_to_double>
c0009199:	89 f0                	mov    eax,esi
c000919b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919f:	e8 88 fe ff ff       	call   c000902c <fp_to_int>
c00091a4:	83 c2 08             	add    edx,0x8
c00091a7:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091ab:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091af:	d8 e1                	fsub   st,st(1)
c00091b1:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b5:	de c9                	fmulp  st(1),st
c00091b7:	de c1                	faddp  st(1),st
c00091b9:	d9 c0                	fld    st(0)
c00091bb:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091c1:	dc 04 24             	fadd   QWORD PTR [esp]
c00091c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c7:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091cd:	29 de                	sub    esi,ebx
c00091cf:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091d3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d7:	79 b9                	jns    c0009192 <calc_output_stereo+0x5d>
c00091d9:	89 d8                	mov    eax,ebx
c00091db:	29 c8                	sub    eax,ecx
c00091dd:	89 c1                	mov    ecx,eax
c00091df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e3:	29 c8                	sub    eax,ecx
c00091e5:	99                   	cdq    
c00091e6:	f7 fb                	idiv   ebx
c00091e8:	89 da                	mov    edx,ebx
c00091ea:	0f af d0             	imul   edx,eax
c00091ed:	40                   	inc    eax
c00091ee:	01 d1                	add    ecx,edx
c00091f0:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f9:	d9 ee                	fldz   
c00091fb:	d9 ee                	fldz   
c00091fd:	8d 14 87             	lea    edx,[edi+eax*4]
c0009200:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009204:	89 c8                	mov    eax,ecx
c0009206:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000920a:	e8 27 fe ff ff       	call   c0009036 <fp_to_double>
c000920f:	89 c8                	mov    eax,ecx
c0009211:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009215:	e8 12 fe ff ff       	call   c000902c <fp_to_int>
c000921a:	29 d9                	sub    ecx,ebx
c000921c:	83 ea 08             	sub    edx,0x8
c000921f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009223:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009227:	d8 e1                	fsub   st,st(1)
c0009229:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000922d:	de c9                	fmulp  st(1),st
c000922f:	de c1                	faddp  st(1),st
c0009231:	d9 c0                	fld    st(0)
c0009233:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009239:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000923d:	de c1                	faddp  st(1),st
c000923f:	d9 c9                	fxch   st(1)
c0009241:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009247:	85 c9                	test   ecx,ecx
c0009249:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000924d:	de c1                	faddp  st(1),st
c000924f:	7f af                	jg     c0009200 <calc_output_stereo+0xcb>
c0009251:	dd 04 24             	fld    QWORD PTR [esp]
c0009254:	de c2                	faddp  st(2),st
c0009256:	d9 c9                	fxch   st(1)
c0009258:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000925c:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009260:	d9 18                	fstp   DWORD PTR [eax]
c0009262:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009266:	de c1                	faddp  st(1),st
c0009268:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000926c:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926f:	83 c4 44             	add    esp,0x44
c0009272:	5b                   	pop    ebx
c0009273:	5e                   	pop    esi
c0009274:	5f                   	pop    edi
c0009275:	5d                   	pop    ebp
c0009276:	c3                   	ret    

c0009277 <calc_output_quad>:
c0009277:	55                   	push   ebp
c0009278:	57                   	push   edi
c0009279:	56                   	push   esi
c000927a:	89 c6                	mov    esi,eax
c000927c:	53                   	push   ebx
c000927d:	89 d3                	mov    ebx,edx
c000927f:	83 ec 5c             	sub    esp,0x5c
c0009282:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009285:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009289:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000928d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009290:	e8 93 fd ff ff       	call   c0009028 <int_to_fp>
c0009295:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009298:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000929c:	29 c8                	sub    eax,ecx
c000929e:	99                   	cdq    
c000929f:	f7 fb                	idiv   ebx
c00092a1:	89 da                	mov    edx,ebx
c00092a3:	0f af d0             	imul   edx,eax
c00092a6:	01 ca                	add    edx,ecx
c00092a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092ac:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092b3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b6:	0f af c2             	imul   eax,edx
c00092b9:	d9 ee                	fldz   
c00092bb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092c3:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c7:	29 c2                	sub    edx,eax
c00092c9:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092cd:	8d 14 96             	lea    edx,[esi+edx*4]
c00092d0:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092d4:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092dc:	e8 55 fd ff ff       	call   c0009036 <fp_to_double>
c00092e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e9:	e8 3e fd ff ff       	call   c000902c <fp_to_int>
c00092ee:	83 c2 10             	add    edx,0x10
c00092f1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f9:	d8 e1                	fsub   st,st(1)
c00092fb:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092ff:	de c9                	fmulp  st(1),st
c0009301:	de c1                	faddp  st(1),st
c0009303:	d9 c0                	fld    st(0)
c0009305:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000930b:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009313:	d9 c0                	fld    st(0)
c0009315:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000931b:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	d9 c0                	fld    st(0)
c0009325:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000932b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009333:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009339:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c000933d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009341:	de c1                	faddp  st(1),st
c0009343:	79 8f                	jns    c00092d4 <calc_output_quad+0x5d>
c0009345:	89 d8                	mov    eax,ebx
c0009347:	29 c8                	sub    eax,ecx
c0009349:	89 c1                	mov    ecx,eax
c000934b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934f:	29 c8                	sub    eax,ecx
c0009351:	99                   	cdq    
c0009352:	f7 fb                	idiv   ebx
c0009354:	89 da                	mov    edx,ebx
c0009356:	0f af d0             	imul   edx,eax
c0009359:	40                   	inc    eax
c000935a:	01 d1                	add    ecx,edx
c000935c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009361:	d9 ee                	fldz   
c0009363:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009367:	d9 ee                	fldz   
c0009369:	d9 ee                	fldz   
c000936b:	d9 ee                	fldz   
c000936d:	8d 14 86             	lea    edx,[esi+eax*4]
c0009370:	eb 0a                	jmp    c000937c <calc_output_quad+0x105>
c0009372:	d9 cc                	fxch   st(4)
c0009374:	d9 ca                	fxch   st(2)
c0009376:	d9 c9                	fxch   st(1)
c0009378:	d9 cb                	fxch   st(3)
c000937a:	d9 c9                	fxch   st(1)
c000937c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009380:	d9 c9                	fxch   st(1)
c0009382:	89 c8                	mov    eax,ecx
c0009384:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009388:	d9 c9                	fxch   st(1)
c000938a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000938e:	d9 c9                	fxch   st(1)
c0009390:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009394:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009398:	e8 99 fc ff ff       	call   c0009036 <fp_to_double>
c000939d:	89 c8                	mov    eax,ecx
c000939f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093a3:	e8 84 fc ff ff       	call   c000902c <fp_to_int>
c00093a8:	29 d9                	sub    ecx,ebx
c00093aa:	83 ea 10             	sub    edx,0x10
c00093ad:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093b1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b5:	d8 e1                	fsub   st,st(1)
c00093b7:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093bb:	de c9                	fmulp  st(1),st
c00093bd:	de c1                	faddp  st(1),st
c00093bf:	d9 c0                	fld    st(0)
c00093c1:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093cb:	de c1                	faddp  st(1),st
c00093cd:	d9 c1                	fld    st(1)
c00093cf:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d9:	de c1                	faddp  st(1),st
c00093db:	d9 c2                	fld    st(2)
c00093dd:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093e3:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e7:	de c1                	faddp  st(1),st
c00093e9:	d9 cb                	fxch   st(3)
c00093eb:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093f1:	85 c9                	test   ecx,ecx
c00093f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f7:	de c1                	faddp  st(1),st
c00093f9:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093fd:	0f 8f 6f ff ff ff    	jg     c0009372 <calc_output_quad+0xfb>
c0009403:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009407:	de c4                	faddp  st(4),st
c0009409:	d9 cb                	fxch   st(3)
c000940b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000940e:	d9 1f                	fstp   DWORD PTR [edi]
c0009410:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009414:	de c2                	faddp  st(2),st
c0009416:	d9 c9                	fxch   st(1)
c0009418:	dc 0c 24             	fmul   QWORD PTR [esp]
c000941b:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c000941e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009422:	de c3                	faddp  st(3),st
c0009424:	d9 ca                	fxch   st(2)
c0009426:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009429:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000942c:	de c1                	faddp  st(1),st
c000942e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009431:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009434:	83 c4 5c             	add    esp,0x5c
c0009437:	5b                   	pop    ebx
c0009438:	5e                   	pop    esi
c0009439:	5f                   	pop    edi
c000943a:	5d                   	pop    ebp
c000943b:	c3                   	ret    

c000943c <calc_output_hex>:
c000943c:	55                   	push   ebp
c000943d:	57                   	push   edi
c000943e:	89 c7                	mov    edi,eax
c0009440:	56                   	push   esi
c0009441:	53                   	push   ebx
c0009442:	89 d3                	mov    ebx,edx
c0009444:	83 ec 7c             	sub    esp,0x7c
c0009447:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000944a:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009451:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009458:	dd 1c 24             	fstp   QWORD PTR [esp]
c000945b:	e8 c8 fb ff ff       	call   c0009028 <int_to_fp>
c0009460:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009463:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009467:	29 c8                	sub    eax,ecx
c0009469:	99                   	cdq    
c000946a:	f7 fb                	idiv   ebx
c000946c:	89 da                	mov    edx,ebx
c000946e:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009476:	0f af d0             	imul   edx,eax
c0009479:	01 ca                	add    edx,ecx
c000947b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009483:	d9 ee                	fldz   
c0009485:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009489:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000948c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009490:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009493:	0f af c2             	imul   eax,edx
c0009496:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c000949a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000949e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094a2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a6:	29 c2                	sub    edx,eax
c00094a8:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094ac:	8d 14 97             	lea    edx,[edi+edx*4]
c00094af:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094b3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bb:	e8 76 fb ff ff       	call   c0009036 <fp_to_double>
c00094c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c4:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c8:	e8 5f fb ff ff       	call   c000902c <fp_to_int>
c00094cd:	83 c2 18             	add    edx,0x18
c00094d0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094d4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d8:	d8 e1                	fsub   st,st(1)
c00094da:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094de:	de c9                	fmulp  st(1),st
c00094e0:	de c1                	faddp  st(1),st
c00094e2:	d9 c0                	fld    st(0)
c00094e4:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094ea:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094ee:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094f2:	d9 c0                	fld    st(0)
c00094f4:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094fa:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094fe:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009502:	d9 c0                	fld    st(0)
c0009504:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000950a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000950e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009512:	d9 c0                	fld    st(0)
c0009514:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000951a:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000951e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009522:	d9 c0                	fld    st(0)
c0009524:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000952a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000952e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009532:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009538:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c000953c:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009540:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009544:	0f 89 6d ff ff ff    	jns    c00094b7 <calc_output_hex+0x7b>
c000954a:	89 d8                	mov    eax,ebx
c000954c:	29 c8                	sub    eax,ecx
c000954e:	89 c1                	mov    ecx,eax
c0009550:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009554:	29 c8                	sub    eax,ecx
c0009556:	99                   	cdq    
c0009557:	f7 fb                	idiv   ebx
c0009559:	89 da                	mov    edx,ebx
c000955b:	0f af d0             	imul   edx,eax
c000955e:	40                   	inc    eax
c000955f:	01 d1                	add    ecx,edx
c0009561:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009566:	d9 ee                	fldz   
c0009568:	d9 ee                	fldz   
c000956a:	d9 ee                	fldz   
c000956c:	d9 ca                	fxch   st(2)
c000956e:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009572:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009576:	d9 ee                	fldz   
c0009578:	8d 14 87             	lea    edx,[edi+eax*4]
c000957b:	d9 ee                	fldz   
c000957d:	d9 ca                	fxch   st(2)
c000957f:	eb 0a                	jmp    c000958b <calc_output_hex+0x14f>
c0009581:	d9 c9                	fxch   st(1)
c0009583:	d9 cc                	fxch   st(4)
c0009585:	d9 cb                	fxch   st(3)
c0009587:	d9 ca                	fxch   st(2)
c0009589:	d9 c9                	fxch   st(1)
c000958b:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958f:	89 c8                	mov    eax,ecx
c0009591:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009595:	d9 ca                	fxch   st(2)
c0009597:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000959b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095a3:	e8 8e fa ff ff       	call   c0009036 <fp_to_double>
c00095a8:	89 c8                	mov    eax,ecx
c00095aa:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095ae:	e8 79 fa ff ff       	call   c000902c <fp_to_int>
c00095b3:	29 d9                	sub    ecx,ebx
c00095b5:	83 ea 18             	sub    edx,0x18
c00095b8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095bc:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c0:	d8 e1                	fsub   st,st(1)
c00095c2:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c6:	de c9                	fmulp  st(1),st
c00095c8:	de c1                	faddp  st(1),st
c00095ca:	d9 c0                	fld    st(0)
c00095cc:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095d2:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d6:	de c1                	faddp  st(1),st
c00095d8:	d9 c1                	fld    st(1)
c00095da:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e0:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095e4:	de c1                	faddp  st(1),st
c00095e6:	d9 c2                	fld    st(2)
c00095e8:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095ee:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095f2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f6:	d9 c2                	fld    st(2)
c00095f8:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095fe:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009602:	de c1                	faddp  st(1),st
c0009604:	d9 c3                	fld    st(3)
c0009606:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000960c:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009610:	de c1                	faddp  st(1),st
c0009612:	d9 cc                	fxch   st(4)
c0009614:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000961a:	85 c9                	test   ecx,ecx
c000961c:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009620:	de c1                	faddp  st(1),st
c0009622:	0f 8f 59 ff ff ff    	jg     c0009581 <calc_output_hex+0x145>
c0009628:	d9 cb                	fxch   st(3)
c000962a:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000962e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009631:	d9 1e                	fstp   DWORD PTR [esi]
c0009633:	d9 c9                	fxch   st(1)
c0009635:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009639:	dc 0c 24             	fmul   QWORD PTR [esp]
c000963c:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963f:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009643:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c000964d:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009651:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009654:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009657:	d9 c9                	fxch   st(1)
c0009659:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000965d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009660:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009663:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009667:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966a:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c000966d:	83 c4 7c             	add    esp,0x7c
c0009670:	5b                   	pop    ebx
c0009671:	5e                   	pop    esi
c0009672:	5f                   	pop    edi
c0009673:	5d                   	pop    ebp
c0009674:	c3                   	ret    

c0009675 <sinc_reset>:
c0009675:	56                   	push   esi
c0009676:	53                   	push   ebx
c0009677:	51                   	push   ecx
c0009678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000967c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967f:	85 db                	test   ebx,ebx
c0009681:	74 51                	je     c00096d4 <sinc_reset+0x5f>
c0009683:	d9 ee                	fldz   
c0009685:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000968c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009693:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009696:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000969d:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096a3:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a6:	52                   	push   edx
c00096a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096aa:	c1 e0 02             	shl    eax,0x2
c00096ad:	50                   	push   eax
c00096ae:	6a 00                	push   0x0
c00096b0:	56                   	push   esi
c00096b1:	e8 09 70 ff ff       	call   c00006bf <memset>
c00096b6:	83 c4 0c             	add    esp,0xc
c00096b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096bc:	c1 e0 02             	shl    eax,0x2
c00096bf:	50                   	push   eax
c00096c0:	68 aa 00 00 00       	push   0xaa
c00096c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c8:	8d 04 86             	lea    eax,[esi+eax*4]
c00096cb:	50                   	push   eax
c00096cc:	e8 ee 6f ff ff       	call   c00006bf <memset>
c00096d1:	83 c4 10             	add    esp,0x10
c00096d4:	58                   	pop    eax
c00096d5:	5b                   	pop    ebx
c00096d6:	5e                   	pop    esi
c00096d7:	c3                   	ret    

c00096d8 <calc_output_multi>:
c00096d8:	55                   	push   ebp
c00096d9:	57                   	push   edi
c00096da:	8d 78 44             	lea    edi,[eax+0x44]
c00096dd:	56                   	push   esi
c00096de:	89 c6                	mov    esi,eax
c00096e0:	53                   	push   ebx
c00096e1:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e7:	83 ec 4c             	sub    esp,0x4c
c00096ea:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096f2:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009701:	e8 22 f9 ff ff       	call   c0009028 <int_to_fp>
c0009706:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000970a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000970e:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009712:	99                   	cdq    
c0009713:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009717:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000971b:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000971e:	0f af d0             	imul   edx,eax
c0009721:	0f af c3             	imul   eax,ebx
c0009724:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009728:	29 c5                	sub    ebp,eax
c000972a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009731:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009735:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009739:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000973d:	52                   	push   edx
c000973e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009742:	6a 00                	push   0x0
c0009744:	57                   	push   edi
c0009745:	e8 75 6f ff ff       	call   c00006bf <memset>
c000974a:	83 c4 10             	add    esp,0x10
c000974d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009751:	e8 e0 f8 ff ff       	call   c0009036 <fp_to_double>
c0009756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000975a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000975e:	e8 c9 f8 ff ff       	call   c000902c <fp_to_int>
c0009763:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009766:	89 d9                	mov    ecx,ebx
c0009768:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000976b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976f:	d8 e1                	fsub   st,st(1)
c0009771:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009775:	de c9                	fmulp  st(1),st
c0009777:	de c1                	faddp  st(1),st
c0009779:	89 c8                	mov    eax,ecx
c000977b:	bd 08 00 00 00       	mov    ebp,0x8
c0009780:	99                   	cdq    
c0009781:	f7 fd                	idiv   ebp
c0009783:	4a                   	dec    edx
c0009784:	83 fa 06             	cmp    edx,0x6
c0009787:	77 07                	ja     c0009790 <calc_output_multi+0xb8>
c0009789:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009795:	d9 c0                	fld    st(0)
c0009797:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097ae:	d9 c0                	fld    st(0)
c00097b0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ba:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097be:	dc 00                	fadd   QWORD PTR [eax]
c00097c0:	dd 18                	fstp   QWORD PTR [eax]
c00097c2:	49                   	dec    ecx
c00097c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c7:	d9 c0                	fld    st(0)
c00097c9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d0:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097d3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d7:	dc 00                	fadd   QWORD PTR [eax]
c00097d9:	dd 18                	fstp   QWORD PTR [eax]
c00097db:	49                   	dec    ecx
c00097dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097e0:	d9 c0                	fld    st(0)
c00097e2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ec:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f0:	dc 00                	fadd   QWORD PTR [eax]
c00097f2:	dd 18                	fstp   QWORD PTR [eax]
c00097f4:	49                   	dec    ecx
c00097f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f9:	d9 c0                	fld    st(0)
c00097fb:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009802:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009805:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009809:	dc 00                	fadd   QWORD PTR [eax]
c000980b:	dd 18                	fstp   QWORD PTR [eax]
c000980d:	49                   	dec    ecx
c000980e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009812:	d9 c0                	fld    st(0)
c0009814:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000981e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009822:	dc 00                	fadd   QWORD PTR [eax]
c0009824:	dd 18                	fstp   QWORD PTR [eax]
c0009826:	49                   	dec    ecx
c0009827:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000982b:	d9 c0                	fld    st(0)
c000982d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009834:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009837:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983b:	dc 00                	fadd   QWORD PTR [eax]
c000983d:	dd 18                	fstp   QWORD PTR [eax]
c000983f:	49                   	dec    ecx
c0009840:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009844:	d9 c0                	fld    st(0)
c0009846:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009850:	85 c9                	test   ecx,ecx
c0009852:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009856:	dc 00                	fadd   QWORD PTR [eax]
c0009858:	dd 18                	fstp   QWORD PTR [eax]
c000985a:	0f 8f 19 ff ff ff    	jg     c0009779 <calc_output_multi+0xa1>
c0009860:	dd d8                	fstp   st(0)
c0009862:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009866:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000986a:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c000986e:	0f 89 d9 fe ff ff    	jns    c000974d <calc_output_multi+0x75>
c0009874:	89 d1                	mov    ecx,edx
c0009876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000987a:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000987e:	29 c8                	sub    eax,ecx
c0009880:	99                   	cdq    
c0009881:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009885:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009889:	0f af d0             	imul   edx,eax
c000988c:	40                   	inc    eax
c000988d:	01 d1                	add    ecx,edx
c000988f:	0f af c3             	imul   eax,ebx
c0009892:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009895:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009899:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000989d:	50                   	push   eax
c000989e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098a2:	6a 00                	push   0x0
c00098a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a8:	e8 12 6e ff ff       	call   c00006bf <memset>
c00098ad:	83 c4 10             	add    esp,0x10
c00098b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b4:	e8 7d f7 ff ff       	call   c0009036 <fp_to_double>
c00098b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098bd:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098c1:	e8 66 f7 ff ff       	call   c000902c <fp_to_int>
c00098c6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c9:	89 d9                	mov    ecx,ebx
c00098cb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098ce:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098d2:	d8 e1                	fsub   st,st(1)
c00098d4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d8:	de c9                	fmulp  st(1),st
c00098da:	de c1                	faddp  st(1),st
c00098dc:	89 c8                	mov    eax,ecx
c00098de:	bd 08 00 00 00       	mov    ebp,0x8
c00098e3:	99                   	cdq    
c00098e4:	f7 fd                	idiv   ebp
c00098e6:	4a                   	dec    edx
c00098e7:	83 fa 06             	cmp    edx,0x6
c00098ea:	77 07                	ja     c00098f3 <calc_output_multi+0x21b>
c00098ec:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c00098f3:	49                   	dec    ecx
c00098f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098fc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009903:	d9 c0                	fld    st(0)
c0009905:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009909:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990c:	dc 00                	fadd   QWORD PTR [eax]
c000990e:	dd 18                	fstp   QWORD PTR [eax]
c0009910:	49                   	dec    ecx
c0009911:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009919:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009920:	d9 c0                	fld    st(0)
c0009922:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009926:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009929:	dc 00                	fadd   QWORD PTR [eax]
c000992b:	dd 18                	fstp   QWORD PTR [eax]
c000992d:	49                   	dec    ecx
c000992e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009936:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000993d:	d9 c0                	fld    st(0)
c000993f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009943:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009946:	dc 00                	fadd   QWORD PTR [eax]
c0009948:	dd 18                	fstp   QWORD PTR [eax]
c000994a:	49                   	dec    ecx
c000994b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009953:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000995a:	d9 c0                	fld    st(0)
c000995c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009960:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009963:	dc 00                	fadd   QWORD PTR [eax]
c0009965:	dd 18                	fstp   QWORD PTR [eax]
c0009967:	49                   	dec    ecx
c0009968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000996c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009970:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009977:	d9 c0                	fld    st(0)
c0009979:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000997d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009980:	dc 00                	fadd   QWORD PTR [eax]
c0009982:	dd 18                	fstp   QWORD PTR [eax]
c0009984:	49                   	dec    ecx
c0009985:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000998d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009994:	d9 c0                	fld    st(0)
c0009996:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000999d:	dc 00                	fadd   QWORD PTR [eax]
c000999f:	dd 18                	fstp   QWORD PTR [eax]
c00099a1:	49                   	dec    ecx
c00099a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099aa:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099b1:	d9 c0                	fld    st(0)
c00099b3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b7:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099ba:	dc 00                	fadd   QWORD PTR [eax]
c00099bc:	dd 18                	fstp   QWORD PTR [eax]
c00099be:	49                   	dec    ecx
c00099bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c7:	85 c9                	test   ecx,ecx
c00099c9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099d0:	d9 c0                	fld    st(0)
c00099d2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d9:	dc 00                	fadd   QWORD PTR [eax]
c00099db:	dd 18                	fstp   QWORD PTR [eax]
c00099dd:	0f 8f f9 fe ff ff    	jg     c00098dc <calc_output_multi+0x204>
c00099e3:	dd d8                	fstp   st(0)
c00099e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e9:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099ed:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099f1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f6:	0f 8f b4 fe ff ff    	jg     c00098b0 <calc_output_multi+0x1d8>
c00099fc:	b9 08 00 00 00       	mov    ecx,0x8
c0009a01:	89 d8                	mov    eax,ebx
c0009a03:	99                   	cdq    
c0009a04:	f7 f9                	idiv   ecx
c0009a06:	4a                   	dec    edx
c0009a07:	83 fa 06             	cmp    edx,0x6
c0009a0a:	77 07                	ja     c0009a13 <calc_output_multi+0x33b>
c0009a0c:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a13:	4b                   	dec    ebx
c0009a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a18:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a1b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a1e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a22:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a26:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a29:	4b                   	dec    ebx
c0009a2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a2e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a31:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a34:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a38:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a3c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3f:	4b                   	dec    ebx
c0009a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a44:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a47:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a4e:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a52:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a55:	4b                   	dec    ebx
c0009a56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a5a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a5d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a60:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a64:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a68:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a6b:	4b                   	dec    ebx
c0009a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a70:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a73:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a76:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7a:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a7e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a81:	4b                   	dec    ebx
c0009a82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a86:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a89:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a8c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a90:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a97:	4b                   	dec    ebx
c0009a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aa2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa6:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aaa:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aad:	4b                   	dec    ebx
c0009aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab2:	85 db                	test   ebx,ebx
c0009ab4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aba:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009abe:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ac2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac5:	0f 8f 36 ff ff ff    	jg     c0009a01 <calc_output_multi+0x329>
c0009acb:	83 c4 4c             	add    esp,0x4c
c0009ace:	5b                   	pop    ebx
c0009acf:	5e                   	pop    esi
c0009ad0:	5f                   	pop    edi
c0009ad1:	5d                   	pop    ebp
c0009ad2:	c3                   	ret    

c0009ad3 <double_to_fp>:
c0009ad3:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009ad9:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009add:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009ae1:	e9 6a 5c 01 00       	jmp    c001f750 <lrint>

c0009ae6 <fmod_one>:
c0009ae6:	83 ec 2c             	sub    esp,0x2c
c0009ae9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af9:	83 ec 08             	sub    esp,0x8
c0009afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b04:	e8 47 5c 01 00       	call   c001f750 <lrint>
c0009b09:	83 c4 10             	add    esp,0x10
c0009b0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b10:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b18:	de e1                	fsubrp st(1),st
c0009b1a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b1e:	d9 ee                	fldz   
c0009b20:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b24:	df e0                	fnstsw ax
c0009b26:	f6 c4 45             	test   ah,0x45
c0009b29:	75 0a                	jne    c0009b35 <fmod_one+0x4f>
c0009b2b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2f:	d9 e8                	fld1   
c0009b31:	de c1                	faddp  st(1),st
c0009b33:	eb 04                	jmp    c0009b39 <fmod_one+0x53>
c0009b35:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b39:	83 c4 2c             	add    esp,0x2c
c0009b3c:	c3                   	ret    

c0009b3d <prepare_data>:
c0009b3d:	55                   	push   ebp
c0009b3e:	57                   	push   edi
c0009b3f:	56                   	push   esi
c0009b40:	53                   	push   ebx
c0009b41:	83 ec 1c             	sub    esp,0x1c
c0009b44:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b48:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b4c:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b50:	0f 89 57 01 00 00    	jns    c0009cad <prepare_data+0x170>
c0009b56:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b5c:	85 d2                	test   edx,edx
c0009b5e:	75 0d                	jne    c0009b6d <prepare_data+0x30>
c0009b60:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b63:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b66:	29 d0                	sub    eax,edx
c0009b68:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b6b:	eb 44                	jmp    c0009bb1 <prepare_data+0x74>
c0009b6d:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b70:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b73:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b76:	39 c1                	cmp    ecx,eax
c0009b78:	7d 04                	jge    c0009b7e <prepare_data+0x41>
c0009b7a:	29 d0                	sub    eax,edx
c0009b7c:	eb 2d                	jmp    c0009bab <prepare_data+0x6e>
c0009b7e:	29 d7                	sub    edi,edx
c0009b80:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b86:	01 f7                	add    edi,esi
c0009b88:	29 f2                	sub    edx,esi
c0009b8a:	51                   	push   ecx
c0009b8b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b92:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b95:	51                   	push   ecx
c0009b96:	52                   	push   edx
c0009b97:	50                   	push   eax
c0009b98:	e8 b4 6a ff ff       	call   c0000651 <memmove>
c0009b9d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ba0:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ba3:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	83 c4 10             	add    esp,0x10
c0009bab:	29 f0                	sub    eax,esi
c0009bad:	79 02                	jns    c0009bb1 <prepare_data+0x74>
c0009baf:	31 c0                	xor    eax,eax
c0009bb1:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bb4:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb7:	29 ef                	sub    edi,ebp
c0009bb9:	39 c7                	cmp    edi,eax
c0009bbb:	7e 02                	jle    c0009bbf <prepare_data+0x82>
c0009bbd:	89 c7                	mov    edi,eax
c0009bbf:	89 f8                	mov    eax,edi
c0009bc1:	99                   	cdq    
c0009bc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc5:	29 d7                	sub    edi,edx
c0009bc7:	b8 15 00 00 00       	mov    eax,0x15
c0009bcc:	0f 88 dd 00 00 00    	js     c0009caf <prepare_data+0x172>
c0009bd2:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd5:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd8:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bdb:	0f 8f ce 00 00 00    	jg     c0009caf <prepare_data+0x172>
c0009be1:	50                   	push   eax
c0009be2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be9:	50                   	push   eax
c0009bea:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009bf0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf9:	50                   	push   eax
c0009bfa:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bfd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c01:	50                   	push   eax
c0009c02:	e8 82 6a ff ff       	call   c0000689 <memcpy>
c0009c07:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c0a:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c0d:	83 c4 10             	add    esp,0x10
c0009c10:	01 fd                	add    ebp,edi
c0009c12:	01 f9                	add    ecx,edi
c0009c14:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c17:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c1a:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c21:	0f 85 86 00 00 00    	jne    c0009cad <prepare_data+0x170>
c0009c27:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c2a:	89 e8                	mov    eax,ebp
c0009c2c:	29 c8                	sub    eax,ecx
c0009c2e:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c31:	39 f8                	cmp    eax,edi
c0009c33:	7d 78                	jge    c0009cad <prepare_data+0x170>
c0009c35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c39:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c3d:	74 6e                	je     c0009cad <prepare_data+0x170>
c0009c3f:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c42:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c46:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c49:	29 ef                	sub    edi,ebp
c0009c4b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4f:	7c 29                	jl     c0009c7a <prepare_data+0x13d>
c0009c51:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c54:	29 f1                	sub    ecx,esi
c0009c56:	55                   	push   ebp
c0009c57:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c5e:	50                   	push   eax
c0009c5f:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c62:	50                   	push   eax
c0009c63:	52                   	push   edx
c0009c64:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c68:	e8 e4 69 ff ff       	call   c0000651 <memmove>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c73:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c7d:	83 c6 05             	add    esi,0x5
c0009c80:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c83:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c86:	78 07                	js     c0009c8f <prepare_data+0x152>
c0009c88:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c8b:	39 cf                	cmp    edi,ecx
c0009c8d:	7e 04                	jle    c0009c93 <prepare_data+0x156>
c0009c8f:	89 ce                	mov    esi,ecx
c0009c91:	29 c6                	sub    esi,eax
c0009c93:	51                   	push   ecx
c0009c94:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c9b:	51                   	push   ecx
c0009c9c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9f:	6a 00                	push   0x0
c0009ca1:	50                   	push   eax
c0009ca2:	e8 18 6a ff ff       	call   c00006bf <memset>
c0009ca7:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	31 c0                	xor    eax,eax
c0009caf:	83 c4 1c             	add    esp,0x1c
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    

c0009cb7 <sinc_multichan_vari_process>:
c0009cb7:	55                   	push   ebp
c0009cb8:	b8 05 00 00 00       	mov    eax,0x5
c0009cbd:	57                   	push   edi
c0009cbe:	56                   	push   esi
c0009cbf:	53                   	push   ebx
c0009cc0:	83 ec 3c             	sub    esp,0x3c
c0009cc3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ccb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cce:	85 db                	test   ebx,ebx
c0009cd0:	0f 84 5b 02 00 00    	je     c0009f31 <sinc_multichan_vari_process+0x27a>
c0009cd6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cdc:	0f af d0             	imul   edx,eax
c0009cdf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ce2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ced:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009cf0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf7:	dd 06                	fld    QWORD PTR [esi]
c0009cf9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cfd:	55                   	push   ebp
c0009cfe:	55                   	push   ebp
c0009cff:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d02:	e8 dd f2 ff ff       	call   c0008fe4 <is_bad_src_ratio>
c0009d07:	89 c2                	mov    edx,eax
c0009d09:	58                   	pop    eax
c0009d0a:	59                   	pop    ecx
c0009d0b:	b8 16 00 00 00       	mov    eax,0x16
c0009d10:	85 d2                	test   edx,edx
c0009d12:	0f 85 19 02 00 00    	jne    c0009f31 <sinc_multichan_vari_process+0x27a>
c0009d18:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d1e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d21:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d24:	dd 06                	fld    QWORD PTR [esi]
c0009d26:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d29:	d8 d1                	fcom   st(1)
c0009d2b:	df e0                	fnstsw ax
c0009d2d:	9e                   	sahf   
c0009d2e:	76 0f                	jbe    c0009d3f <sinc_multichan_vari_process+0x88>
c0009d30:	dd d8                	fstp   st(0)
c0009d32:	d9 e8                	fld1   
c0009d34:	d8 d9                	fcomp  st(1)
c0009d36:	df e0                	fnstsw ax
c0009d38:	9e                   	sahf   
c0009d39:	77 0f                	ja     c0009d4a <sinc_multichan_vari_process+0x93>
c0009d3b:	dd d8                	fstp   st(0)
c0009d3d:	eb 11                	jmp    c0009d50 <sinc_multichan_vari_process+0x99>
c0009d3f:	dd d9                	fstp   st(1)
c0009d41:	d9 e8                	fld1   
c0009d43:	d8 d9                	fcomp  st(1)
c0009d45:	df e0                	fnstsw ax
c0009d47:	9e                   	sahf   
c0009d48:	76 04                	jbe    c0009d4e <sinc_multichan_vari_process+0x97>
c0009d4a:	de f9                	fdivp  st(1),st
c0009d4c:	eb 02                	jmp    c0009d50 <sinc_multichan_vari_process+0x99>
c0009d4e:	dd d8                	fstp   st(0)
c0009d50:	83 ec 10             	sub    esp,0x10
c0009d53:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d59:	e8 f2 59 01 00       	call   c001f750 <lrint>
c0009d5e:	40                   	inc    eax
c0009d5f:	0f af c5             	imul   eax,ebp
c0009d62:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d65:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d69:	dd 14 24             	fst    QWORD PTR [esp]
c0009d6c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d70:	e8 71 fd ff ff       	call   c0009ae6 <fmod_one>
c0009d75:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d78:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d83:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d87:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d8b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d8e:	e8 bd 59 01 00       	call   c001f750 <lrint>
c0009d93:	d9 e8                	fld1   
c0009d95:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d99:	0f af e8             	imul   ebp,eax
c0009d9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009da0:	01 e8                	add    eax,ebp
c0009da2:	99                   	cdq    
c0009da3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da9:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009daf:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009db3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db6:	83 c4 10             	add    esp,0x10
c0009db9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dbc:	7d 4b                	jge    c0009e09 <sinc_multichan_vari_process+0x152>
c0009dbe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dc1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dc4:	01 c8                	add    eax,ecx
c0009dc6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc9:	99                   	cdq    
c0009dca:	f7 f9                	idiv   ecx
c0009dcc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dd0:	7d 09                	jge    c0009ddb <sinc_multichan_vari_process+0x124>
c0009dd2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd5:	85 c0                	test   eax,eax
c0009dd7:	79 57                	jns    c0009e30 <sinc_multichan_vari_process+0x179>
c0009dd9:	eb 70                	jmp    c0009e4b <sinc_multichan_vari_process+0x194>
c0009ddb:	51                   	push   ecx
c0009ddc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009de0:	57                   	push   edi
c0009de1:	53                   	push   ebx
c0009de2:	e8 56 fd ff ff       	call   c0009b3d <prepare_data>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009ded:	85 c0                	test   eax,eax
c0009def:	0f 85 3c 01 00 00    	jne    c0009f31 <sinc_multichan_vari_process+0x27a>
c0009df5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dfb:	01 c8                	add    eax,ecx
c0009dfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e00:	99                   	cdq    
c0009e01:	f7 f9                	idiv   ecx
c0009e03:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e07:	7c c9                	jl     c0009dd2 <sinc_multichan_vari_process+0x11b>
c0009e09:	dd 04 24             	fld    QWORD PTR [esp]
c0009e0c:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e13:	dd 1e                	fstp   QWORD PTR [esi]
c0009e15:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e18:	99                   	cdq    
c0009e19:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e1c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e22:	99                   	cdq    
c0009e23:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e26:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e29:	31 c0                	xor    eax,eax
c0009e2b:	e9 01 01 00 00       	jmp    c0009f31 <sinc_multichan_vari_process+0x27a>
c0009e30:	dd 04 24             	fld    QWORD PTR [esp]
c0009e33:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e3a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e3e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e42:	d9 c9                	fxch   st(1)
c0009e44:	de d9                	fcompp 
c0009e46:	df e0                	fnstsw ax
c0009e48:	9e                   	sahf   
c0009e49:	73 be                	jae    c0009e09 <sinc_multichan_vari_process+0x152>
c0009e4b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4f:	7e 2f                	jle    c0009e80 <sinc_multichan_vari_process+0x1c9>
c0009e51:	dd 06                	fld    QWORD PTR [esi]
c0009e53:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e56:	83 ec 10             	sub    esp,0x10
c0009e59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e5c:	e8 cf 58 01 00       	call   c001f730 <fabs>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e6a:	df e0                	fnstsw ax
c0009e6c:	9e                   	sahf   
c0009e6d:	76 11                	jbe    c0009e80 <sinc_multichan_vari_process+0x1c9>
c0009e6f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e72:	dc 26                	fsub   QWORD PTR [esi]
c0009e74:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e77:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e7a:	dc 06                	fadd   QWORD PTR [esi]
c0009e7c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e80:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e83:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e87:	d9 e8                	fld1   
c0009e89:	d8 d9                	fcomp  st(1)
c0009e8b:	df e0                	fnstsw ax
c0009e8d:	9e                   	sahf   
c0009e8e:	77 04                	ja     c0009e94 <sinc_multichan_vari_process+0x1dd>
c0009e90:	dd d8                	fstp   st(0)
c0009e92:	d9 e8                	fld1   
c0009e94:	de c9                	fmulp  st(1),st
c0009e96:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e9a:	50                   	push   eax
c0009e9b:	50                   	push   eax
c0009e9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea4:	e8 2a fc ff ff       	call   c0009ad3 <double_to_fp>
c0009ea9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ead:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eb1:	89 c5                	mov    ebp,eax
c0009eb3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb6:	e8 18 fc ff ff       	call   c0009ad3 <double_to_fp>
c0009ebb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ebe:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ec1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ec4:	89 c1                	mov    ecx,eax
c0009ec6:	52                   	push   edx
c0009ec7:	89 d8                	mov    eax,ebx
c0009ec9:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ecd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ed0:	52                   	push   edx
c0009ed1:	52                   	push   edx
c0009ed2:	89 ea                	mov    edx,ebp
c0009ed4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009eda:	e8 f9 f7 ff ff       	call   c00096d8 <calc_output_multi>
c0009edf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ee2:	d9 e8                	fld1   
c0009ee4:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009eeb:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef9:	e8 e8 fb ff ff       	call   c0009ae6 <fmod_one>
c0009efe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f01:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f08:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f0c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f10:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f14:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f17:	e8 34 58 01 00       	call   c001f750 <lrint>
c0009f1c:	0f af e8             	imul   ebp,eax
c0009f1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f23:	01 e8                	add    eax,ebp
c0009f25:	99                   	cdq    
c0009f26:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f29:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f2c:	e9 82 fe ff ff       	jmp    c0009db3 <sinc_multichan_vari_process+0xfc>
c0009f31:	83 c4 3c             	add    esp,0x3c
c0009f34:	5b                   	pop    ebx
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	5d                   	pop    ebp
c0009f38:	c3                   	ret    

c0009f39 <sinc_hex_vari_process>:
c0009f39:	55                   	push   ebp
c0009f3a:	b8 05 00 00 00       	mov    eax,0x5
c0009f3f:	57                   	push   edi
c0009f40:	56                   	push   esi
c0009f41:	53                   	push   ebx
c0009f42:	83 ec 3c             	sub    esp,0x3c
c0009f45:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f49:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f4d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f50:	85 db                	test   ebx,ebx
c0009f52:	0f 84 56 02 00 00    	je     c000a1ae <sinc_hex_vari_process+0x275>
c0009f58:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f5b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f5e:	0f af d0             	imul   edx,eax
c0009f61:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f64:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f68:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f72:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f79:	dd 06                	fld    QWORD PTR [esi]
c0009f7b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7f:	55                   	push   ebp
c0009f80:	55                   	push   ebp
c0009f81:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f84:	e8 5b f0 ff ff       	call   c0008fe4 <is_bad_src_ratio>
c0009f89:	89 c2                	mov    edx,eax
c0009f8b:	58                   	pop    eax
c0009f8c:	59                   	pop    ecx
c0009f8d:	b8 16 00 00 00       	mov    eax,0x16
c0009f92:	85 d2                	test   edx,edx
c0009f94:	0f 85 14 02 00 00    	jne    c000a1ae <sinc_hex_vari_process+0x275>
c0009f9a:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fa0:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fa3:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa6:	dd 06                	fld    QWORD PTR [esi]
c0009fa8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fab:	d8 d1                	fcom   st(1)
c0009fad:	df e0                	fnstsw ax
c0009faf:	9e                   	sahf   
c0009fb0:	76 0f                	jbe    c0009fc1 <sinc_hex_vari_process+0x88>
c0009fb2:	dd d8                	fstp   st(0)
c0009fb4:	d9 e8                	fld1   
c0009fb6:	d8 d9                	fcomp  st(1)
c0009fb8:	df e0                	fnstsw ax
c0009fba:	9e                   	sahf   
c0009fbb:	77 0f                	ja     c0009fcc <sinc_hex_vari_process+0x93>
c0009fbd:	dd d8                	fstp   st(0)
c0009fbf:	eb 11                	jmp    c0009fd2 <sinc_hex_vari_process+0x99>
c0009fc1:	dd d9                	fstp   st(1)
c0009fc3:	d9 e8                	fld1   
c0009fc5:	d8 d9                	fcomp  st(1)
c0009fc7:	df e0                	fnstsw ax
c0009fc9:	9e                   	sahf   
c0009fca:	76 04                	jbe    c0009fd0 <sinc_hex_vari_process+0x97>
c0009fcc:	de f9                	fdivp  st(1),st
c0009fce:	eb 02                	jmp    c0009fd2 <sinc_hex_vari_process+0x99>
c0009fd0:	dd d8                	fstp   st(0)
c0009fd2:	83 ec 10             	sub    esp,0x10
c0009fd5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fdb:	e8 70 57 01 00       	call   c001f750 <lrint>
c0009fe0:	40                   	inc    eax
c0009fe1:	0f af c5             	imul   eax,ebp
c0009fe4:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff2:	e8 ef fa ff ff       	call   c0009ae6 <fmod_one>
c0009ff7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ffa:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ffd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a009:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a00d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a010:	e8 3b 57 01 00       	call   c001f750 <lrint>
c000a015:	d9 e8                	fld1   
c000a017:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a01b:	0f af e8             	imul   ebp,eax
c000a01e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a022:	01 e8                	add    eax,ebp
c000a024:	99                   	cdq    
c000a025:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a028:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a02b:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a031:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a035:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a03e:	7d 4b                	jge    c000a08b <sinc_hex_vari_process+0x152>
c000a040:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a043:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a046:	01 c8                	add    eax,ecx
c000a048:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a04b:	99                   	cdq    
c000a04c:	f7 f9                	idiv   ecx
c000a04e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a052:	7d 09                	jge    c000a05d <sinc_hex_vari_process+0x124>
c000a054:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a057:	85 c0                	test   eax,eax
c000a059:	79 57                	jns    c000a0b2 <sinc_hex_vari_process+0x179>
c000a05b:	eb 70                	jmp    c000a0cd <sinc_hex_vari_process+0x194>
c000a05d:	51                   	push   ecx
c000a05e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a062:	57                   	push   edi
c000a063:	53                   	push   ebx
c000a064:	e8 d4 fa ff ff       	call   c0009b3d <prepare_data>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06f:	85 c0                	test   eax,eax
c000a071:	0f 85 37 01 00 00    	jne    c000a1ae <sinc_hex_vari_process+0x275>
c000a077:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a07a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a07d:	01 c8                	add    eax,ecx
c000a07f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a082:	99                   	cdq    
c000a083:	f7 f9                	idiv   ecx
c000a085:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a089:	7c c9                	jl     c000a054 <sinc_hex_vari_process+0x11b>
c000a08b:	dd 04 24             	fld    QWORD PTR [esp]
c000a08e:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a091:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a095:	dd 1e                	fstp   QWORD PTR [esi]
c000a097:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a09a:	99                   	cdq    
c000a09b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a09e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0a4:	99                   	cdq    
c000a0a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a8:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0ab:	31 c0                	xor    eax,eax
c000a0ad:	e9 fc 00 00 00       	jmp    c000a1ae <sinc_hex_vari_process+0x275>
c000a0b2:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b5:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bc:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0c4:	d9 c9                	fxch   st(1)
c000a0c6:	de d9                	fcompp 
c000a0c8:	df e0                	fnstsw ax
c000a0ca:	9e                   	sahf   
c000a0cb:	73 be                	jae    c000a08b <sinc_hex_vari_process+0x152>
c000a0cd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d1:	7e 2f                	jle    c000a102 <sinc_hex_vari_process+0x1c9>
c000a0d3:	dd 06                	fld    QWORD PTR [esi]
c000a0d5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d8:	83 ec 10             	sub    esp,0x10
c000a0db:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0de:	e8 4d 56 01 00       	call   c001f730 <fabs>
c000a0e3:	83 c4 10             	add    esp,0x10
c000a0e6:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a0ec:	df e0                	fnstsw ax
c000a0ee:	9e                   	sahf   
c000a0ef:	76 11                	jbe    c000a102 <sinc_hex_vari_process+0x1c9>
c000a0f1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0f4:	dc 26                	fsub   QWORD PTR [esi]
c000a0f6:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f9:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0fc:	dc 06                	fadd   QWORD PTR [esi]
c000a0fe:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a102:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a105:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a109:	d9 e8                	fld1   
c000a10b:	d8 d9                	fcomp  st(1)
c000a10d:	df e0                	fnstsw ax
c000a10f:	9e                   	sahf   
c000a110:	77 04                	ja     c000a116 <sinc_hex_vari_process+0x1dd>
c000a112:	dd d8                	fstp   st(0)
c000a114:	d9 e8                	fld1   
c000a116:	de c9                	fmulp  st(1),st
c000a118:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a11c:	50                   	push   eax
c000a11d:	50                   	push   eax
c000a11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a122:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a126:	e8 a8 f9 ff ff       	call   c0009ad3 <double_to_fp>
c000a12b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a133:	89 c5                	mov    ebp,eax
c000a135:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a138:	e8 96 f9 ff ff       	call   c0009ad3 <double_to_fp>
c000a13d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a140:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a143:	83 c4 0c             	add    esp,0xc
c000a146:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a149:	89 c1                	mov    ecx,eax
c000a14b:	52                   	push   edx
c000a14c:	89 d8                	mov    eax,ebx
c000a14e:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a152:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a155:	52                   	push   edx
c000a156:	52                   	push   edx
c000a157:	89 ea                	mov    edx,ebp
c000a159:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a15c:	e8 db f2 ff ff       	call   c000943c <calc_output_hex>
c000a161:	d9 e8                	fld1   
c000a163:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a167:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a16b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16f:	dd 14 24             	fst    QWORD PTR [esp]
c000a172:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a176:	e8 6b f9 ff ff       	call   c0009ae6 <fmod_one>
c000a17b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a17e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a181:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a185:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a189:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a18d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a191:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a194:	e8 b7 55 01 00       	call   c001f750 <lrint>
c000a199:	0f af e8             	imul   ebp,eax
c000a19c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1a0:	01 e8                	add    eax,ebp
c000a1a2:	99                   	cdq    
c000a1a3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a9:	e9 87 fe ff ff       	jmp    c000a035 <sinc_hex_vari_process+0xfc>
c000a1ae:	83 c4 3c             	add    esp,0x3c
c000a1b1:	5b                   	pop    ebx
c000a1b2:	5e                   	pop    esi
c000a1b3:	5f                   	pop    edi
c000a1b4:	5d                   	pop    ebp
c000a1b5:	c3                   	ret    

c000a1b6 <sinc_quad_vari_process>:
c000a1b6:	55                   	push   ebp
c000a1b7:	b8 05 00 00 00       	mov    eax,0x5
c000a1bc:	57                   	push   edi
c000a1bd:	56                   	push   esi
c000a1be:	53                   	push   ebx
c000a1bf:	83 ec 3c             	sub    esp,0x3c
c000a1c2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1ca:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1cd:	85 db                	test   ebx,ebx
c000a1cf:	0f 84 56 02 00 00    	je     c000a42b <sinc_quad_vari_process+0x275>
c000a1d5:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1db:	0f af d0             	imul   edx,eax
c000a1de:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1e1:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f6:	dd 06                	fld    QWORD PTR [esi]
c000a1f8:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1fc:	55                   	push   ebp
c000a1fd:	55                   	push   ebp
c000a1fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a201:	e8 de ed ff ff       	call   c0008fe4 <is_bad_src_ratio>
c000a206:	89 c2                	mov    edx,eax
c000a208:	58                   	pop    eax
c000a209:	59                   	pop    ecx
c000a20a:	b8 16 00 00 00       	mov    eax,0x16
c000a20f:	85 d2                	test   edx,edx
c000a211:	0f 85 14 02 00 00    	jne    c000a42b <sinc_quad_vari_process+0x275>
c000a217:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a21d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a220:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a223:	dd 06                	fld    QWORD PTR [esi]
c000a225:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a228:	d8 d1                	fcom   st(1)
c000a22a:	df e0                	fnstsw ax
c000a22c:	9e                   	sahf   
c000a22d:	76 0f                	jbe    c000a23e <sinc_quad_vari_process+0x88>
c000a22f:	dd d8                	fstp   st(0)
c000a231:	d9 e8                	fld1   
c000a233:	d8 d9                	fcomp  st(1)
c000a235:	df e0                	fnstsw ax
c000a237:	9e                   	sahf   
c000a238:	77 0f                	ja     c000a249 <sinc_quad_vari_process+0x93>
c000a23a:	dd d8                	fstp   st(0)
c000a23c:	eb 11                	jmp    c000a24f <sinc_quad_vari_process+0x99>
c000a23e:	dd d9                	fstp   st(1)
c000a240:	d9 e8                	fld1   
c000a242:	d8 d9                	fcomp  st(1)
c000a244:	df e0                	fnstsw ax
c000a246:	9e                   	sahf   
c000a247:	76 04                	jbe    c000a24d <sinc_quad_vari_process+0x97>
c000a249:	de f9                	fdivp  st(1),st
c000a24b:	eb 02                	jmp    c000a24f <sinc_quad_vari_process+0x99>
c000a24d:	dd d8                	fstp   st(0)
c000a24f:	83 ec 10             	sub    esp,0x10
c000a252:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a255:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a258:	e8 f3 54 01 00       	call   c001f750 <lrint>
c000a25d:	40                   	inc    eax
c000a25e:	0f af c5             	imul   eax,ebp
c000a261:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a264:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a268:	dd 14 24             	fst    QWORD PTR [esp]
c000a26b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26f:	e8 72 f8 ff ff       	call   c0009ae6 <fmod_one>
c000a274:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a277:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a27a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a27e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a282:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a286:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a28a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a28d:	e8 be 54 01 00       	call   c001f750 <lrint>
c000a292:	d9 e8                	fld1   
c000a294:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a298:	0f af e8             	imul   ebp,eax
c000a29b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29f:	01 e8                	add    eax,ebp
c000a2a1:	99                   	cdq    
c000a2a2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a8:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2ae:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b5:	83 c4 10             	add    esp,0x10
c000a2b8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2bb:	7d 4b                	jge    c000a308 <sinc_quad_vari_process+0x152>
c000a2bd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2c0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2c3:	01 c8                	add    eax,ecx
c000a2c5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c8:	99                   	cdq    
c000a2c9:	f7 f9                	idiv   ecx
c000a2cb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2cf:	7d 09                	jge    c000a2da <sinc_quad_vari_process+0x124>
c000a2d1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2d4:	85 c0                	test   eax,eax
c000a2d6:	79 57                	jns    c000a32f <sinc_quad_vari_process+0x179>
c000a2d8:	eb 70                	jmp    c000a34a <sinc_quad_vari_process+0x194>
c000a2da:	51                   	push   ecx
c000a2db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2df:	57                   	push   edi
c000a2e0:	53                   	push   ebx
c000a2e1:	e8 57 f8 ff ff       	call   c0009b3d <prepare_data>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2ec:	85 c0                	test   eax,eax
c000a2ee:	0f 85 37 01 00 00    	jne    c000a42b <sinc_quad_vari_process+0x275>
c000a2f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2fa:	01 c8                	add    eax,ecx
c000a2fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2ff:	99                   	cdq    
c000a300:	f7 f9                	idiv   ecx
c000a302:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a306:	7c c9                	jl     c000a2d1 <sinc_quad_vari_process+0x11b>
c000a308:	dd 04 24             	fld    QWORD PTR [esp]
c000a30b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a30e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a312:	dd 1e                	fstp   QWORD PTR [esi]
c000a314:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a317:	99                   	cdq    
c000a318:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a31b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a31e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a321:	99                   	cdq    
c000a322:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a325:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a328:	31 c0                	xor    eax,eax
c000a32a:	e9 fc 00 00 00       	jmp    c000a42b <sinc_quad_vari_process+0x275>
c000a32f:	dd 04 24             	fld    QWORD PTR [esp]
c000a332:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a339:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a33d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a341:	d9 c9                	fxch   st(1)
c000a343:	de d9                	fcompp 
c000a345:	df e0                	fnstsw ax
c000a347:	9e                   	sahf   
c000a348:	73 be                	jae    c000a308 <sinc_quad_vari_process+0x152>
c000a34a:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a34e:	7e 2f                	jle    c000a37f <sinc_quad_vari_process+0x1c9>
c000a350:	dd 06                	fld    QWORD PTR [esi]
c000a352:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a355:	83 ec 10             	sub    esp,0x10
c000a358:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35b:	e8 d0 53 01 00       	call   c001f730 <fabs>
c000a360:	83 c4 10             	add    esp,0x10
c000a363:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a369:	df e0                	fnstsw ax
c000a36b:	9e                   	sahf   
c000a36c:	76 11                	jbe    c000a37f <sinc_quad_vari_process+0x1c9>
c000a36e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a371:	dc 26                	fsub   QWORD PTR [esi]
c000a373:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a376:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a379:	dc 06                	fadd   QWORD PTR [esi]
c000a37b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a382:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a386:	d9 e8                	fld1   
c000a388:	d8 d9                	fcomp  st(1)
c000a38a:	df e0                	fnstsw ax
c000a38c:	9e                   	sahf   
c000a38d:	77 04                	ja     c000a393 <sinc_quad_vari_process+0x1dd>
c000a38f:	dd d8                	fstp   st(0)
c000a391:	d9 e8                	fld1   
c000a393:	de c9                	fmulp  st(1),st
c000a395:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a399:	50                   	push   eax
c000a39a:	50                   	push   eax
c000a39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a3:	e8 2b f7 ff ff       	call   c0009ad3 <double_to_fp>
c000a3a8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3ac:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3b0:	89 c5                	mov    ebp,eax
c000a3b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b5:	e8 19 f7 ff ff       	call   c0009ad3 <double_to_fp>
c000a3ba:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3bd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3c0:	83 c4 0c             	add    esp,0xc
c000a3c3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c6:	89 c1                	mov    ecx,eax
c000a3c8:	52                   	push   edx
c000a3c9:	89 d8                	mov    eax,ebx
c000a3cb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3cf:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3d2:	52                   	push   edx
c000a3d3:	52                   	push   edx
c000a3d4:	89 ea                	mov    edx,ebp
c000a3d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d9:	e8 99 ee ff ff       	call   c0009277 <calc_output_quad>
c000a3de:	d9 e8                	fld1   
c000a3e0:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3e4:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ef:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3f3:	e8 ee f6 ff ff       	call   c0009ae6 <fmod_one>
c000a3f8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3fb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a402:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a406:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a40a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a40e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a411:	e8 3a 53 01 00       	call   c001f750 <lrint>
c000a416:	0f af e8             	imul   ebp,eax
c000a419:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a41d:	01 e8                	add    eax,ebp
c000a41f:	99                   	cdq    
c000a420:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a423:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a426:	e9 87 fe ff ff       	jmp    c000a2b2 <sinc_quad_vari_process+0xfc>
c000a42b:	83 c4 3c             	add    esp,0x3c
c000a42e:	5b                   	pop    ebx
c000a42f:	5e                   	pop    esi
c000a430:	5f                   	pop    edi
c000a431:	5d                   	pop    ebp
c000a432:	c3                   	ret    

c000a433 <sinc_stereo_vari_process>:
c000a433:	55                   	push   ebp
c000a434:	b8 05 00 00 00       	mov    eax,0x5
c000a439:	57                   	push   edi
c000a43a:	56                   	push   esi
c000a43b:	53                   	push   ebx
c000a43c:	83 ec 3c             	sub    esp,0x3c
c000a43f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a443:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a447:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a44a:	85 db                	test   ebx,ebx
c000a44c:	0f 84 56 02 00 00    	je     c000a6a8 <sinc_stereo_vari_process+0x275>
c000a452:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a455:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a458:	0f af d0             	imul   edx,eax
c000a45b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a45e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a462:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a469:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a46c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a473:	dd 06                	fld    QWORD PTR [esi]
c000a475:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a479:	55                   	push   ebp
c000a47a:	55                   	push   ebp
c000a47b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47e:	e8 61 eb ff ff       	call   c0008fe4 <is_bad_src_ratio>
c000a483:	89 c2                	mov    edx,eax
c000a485:	58                   	pop    eax
c000a486:	59                   	pop    ecx
c000a487:	b8 16 00 00 00       	mov    eax,0x16
c000a48c:	85 d2                	test   edx,edx
c000a48e:	0f 85 14 02 00 00    	jne    c000a6a8 <sinc_stereo_vari_process+0x275>
c000a494:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a49a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a49d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4a0:	dd 06                	fld    QWORD PTR [esi]
c000a4a2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a5:	d8 d1                	fcom   st(1)
c000a4a7:	df e0                	fnstsw ax
c000a4a9:	9e                   	sahf   
c000a4aa:	76 0f                	jbe    c000a4bb <sinc_stereo_vari_process+0x88>
c000a4ac:	dd d8                	fstp   st(0)
c000a4ae:	d9 e8                	fld1   
c000a4b0:	d8 d9                	fcomp  st(1)
c000a4b2:	df e0                	fnstsw ax
c000a4b4:	9e                   	sahf   
c000a4b5:	77 0f                	ja     c000a4c6 <sinc_stereo_vari_process+0x93>
c000a4b7:	dd d8                	fstp   st(0)
c000a4b9:	eb 11                	jmp    c000a4cc <sinc_stereo_vari_process+0x99>
c000a4bb:	dd d9                	fstp   st(1)
c000a4bd:	d9 e8                	fld1   
c000a4bf:	d8 d9                	fcomp  st(1)
c000a4c1:	df e0                	fnstsw ax
c000a4c3:	9e                   	sahf   
c000a4c4:	76 04                	jbe    c000a4ca <sinc_stereo_vari_process+0x97>
c000a4c6:	de f9                	fdivp  st(1),st
c000a4c8:	eb 02                	jmp    c000a4cc <sinc_stereo_vari_process+0x99>
c000a4ca:	dd d8                	fstp   st(0)
c000a4cc:	83 ec 10             	sub    esp,0x10
c000a4cf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d5:	e8 76 52 01 00       	call   c001f750 <lrint>
c000a4da:	40                   	inc    eax
c000a4db:	0f af c5             	imul   eax,ebp
c000a4de:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e5:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4ec:	e8 f5 f5 ff ff       	call   c0009ae6 <fmod_one>
c000a4f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4f4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4fb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4ff:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a503:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a507:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a50a:	e8 41 52 01 00       	call   c001f750 <lrint>
c000a50f:	d9 e8                	fld1   
c000a511:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a515:	0f af e8             	imul   ebp,eax
c000a518:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a51c:	01 e8                	add    eax,ebp
c000a51e:	99                   	cdq    
c000a51f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a522:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a525:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a52b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a538:	7d 4b                	jge    c000a585 <sinc_stereo_vari_process+0x152>
c000a53a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a53d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a540:	01 c8                	add    eax,ecx
c000a542:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a545:	99                   	cdq    
c000a546:	f7 f9                	idiv   ecx
c000a548:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a54c:	7d 09                	jge    c000a557 <sinc_stereo_vari_process+0x124>
c000a54e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a551:	85 c0                	test   eax,eax
c000a553:	79 57                	jns    c000a5ac <sinc_stereo_vari_process+0x179>
c000a555:	eb 70                	jmp    c000a5c7 <sinc_stereo_vari_process+0x194>
c000a557:	51                   	push   ecx
c000a558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a55c:	57                   	push   edi
c000a55d:	53                   	push   ebx
c000a55e:	e8 da f5 ff ff       	call   c0009b3d <prepare_data>
c000a563:	83 c4 10             	add    esp,0x10
c000a566:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a569:	85 c0                	test   eax,eax
c000a56b:	0f 85 37 01 00 00    	jne    c000a6a8 <sinc_stereo_vari_process+0x275>
c000a571:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a574:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a577:	01 c8                	add    eax,ecx
c000a579:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a57c:	99                   	cdq    
c000a57d:	f7 f9                	idiv   ecx
c000a57f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a583:	7c c9                	jl     c000a54e <sinc_stereo_vari_process+0x11b>
c000a585:	dd 04 24             	fld    QWORD PTR [esp]
c000a588:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a58b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58f:	dd 1e                	fstp   QWORD PTR [esi]
c000a591:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a594:	99                   	cdq    
c000a595:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a598:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a59b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a59e:	99                   	cdq    
c000a59f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a5:	31 c0                	xor    eax,eax
c000a5a7:	e9 fc 00 00 00       	jmp    c000a6a8 <sinc_stereo_vari_process+0x275>
c000a5ac:	dd 04 24             	fld    QWORD PTR [esp]
c000a5af:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ba:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5be:	d9 c9                	fxch   st(1)
c000a5c0:	de d9                	fcompp 
c000a5c2:	df e0                	fnstsw ax
c000a5c4:	9e                   	sahf   
c000a5c5:	73 be                	jae    c000a585 <sinc_stereo_vari_process+0x152>
c000a5c7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5cb:	7e 2f                	jle    c000a5fc <sinc_stereo_vari_process+0x1c9>
c000a5cd:	dd 06                	fld    QWORD PTR [esi]
c000a5cf:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5d2:	83 ec 10             	sub    esp,0x10
c000a5d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d8:	e8 53 51 01 00       	call   c001f730 <fabs>
c000a5dd:	83 c4 10             	add    esp,0x10
c000a5e0:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5e6:	df e0                	fnstsw ax
c000a5e8:	9e                   	sahf   
c000a5e9:	76 11                	jbe    c000a5fc <sinc_stereo_vari_process+0x1c9>
c000a5eb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5ee:	dc 26                	fsub   QWORD PTR [esi]
c000a5f0:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5f3:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f6:	dc 06                	fadd   QWORD PTR [esi]
c000a5f8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5fc:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5ff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a603:	d9 e8                	fld1   
c000a605:	d8 d9                	fcomp  st(1)
c000a607:	df e0                	fnstsw ax
c000a609:	9e                   	sahf   
c000a60a:	77 04                	ja     c000a610 <sinc_stereo_vari_process+0x1dd>
c000a60c:	dd d8                	fstp   st(0)
c000a60e:	d9 e8                	fld1   
c000a610:	de c9                	fmulp  st(1),st
c000a612:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a616:	50                   	push   eax
c000a617:	50                   	push   eax
c000a618:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a620:	e8 ae f4 ff ff       	call   c0009ad3 <double_to_fp>
c000a625:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a629:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a62d:	89 c5                	mov    ebp,eax
c000a62f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a632:	e8 9c f4 ff ff       	call   c0009ad3 <double_to_fp>
c000a637:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a63a:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a63d:	83 c4 0c             	add    esp,0xc
c000a640:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a643:	89 c1                	mov    ecx,eax
c000a645:	52                   	push   edx
c000a646:	89 d8                	mov    eax,ebx
c000a648:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a64c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64f:	52                   	push   edx
c000a650:	52                   	push   edx
c000a651:	89 ea                	mov    edx,ebp
c000a653:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a656:	e8 da ea ff ff       	call   c0009135 <calc_output_stereo>
c000a65b:	d9 e8                	fld1   
c000a65d:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a661:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a665:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a669:	dd 14 24             	fst    QWORD PTR [esp]
c000a66c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a670:	e8 71 f4 ff ff       	call   c0009ae6 <fmod_one>
c000a675:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a678:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a67b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a683:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a687:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a68b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a68e:	e8 bd 50 01 00       	call   c001f750 <lrint>
c000a693:	0f af e8             	imul   ebp,eax
c000a696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a69a:	01 e8                	add    eax,ebp
c000a69c:	99                   	cdq    
c000a69d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6a3:	e9 87 fe ff ff       	jmp    c000a52f <sinc_stereo_vari_process+0xfc>
c000a6a8:	83 c4 3c             	add    esp,0x3c
c000a6ab:	5b                   	pop    ebx
c000a6ac:	5e                   	pop    esi
c000a6ad:	5f                   	pop    edi
c000a6ae:	5d                   	pop    ebp
c000a6af:	c3                   	ret    

c000a6b0 <sinc_mono_vari_process>:
c000a6b0:	55                   	push   ebp
c000a6b1:	b8 05 00 00 00       	mov    eax,0x5
c000a6b6:	57                   	push   edi
c000a6b7:	56                   	push   esi
c000a6b8:	53                   	push   ebx
c000a6b9:	83 ec 3c             	sub    esp,0x3c
c000a6bc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6c0:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6c4:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c7:	85 db                	test   ebx,ebx
c000a6c9:	0f 84 55 02 00 00    	je     c000a924 <sinc_mono_vari_process+0x274>
c000a6cf:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6d2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d5:	0f af d0             	imul   edx,eax
c000a6d8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6db:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6df:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6f0:	dd 06                	fld    QWORD PTR [esi]
c000a6f2:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f6:	51                   	push   ecx
c000a6f7:	51                   	push   ecx
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 e4 e8 ff ff       	call   c0008fe4 <is_bad_src_ratio>
c000a700:	5d                   	pop    ebp
c000a701:	89 c2                	mov    edx,eax
c000a703:	58                   	pop    eax
c000a704:	85 d2                	test   edx,edx
c000a706:	b8 16 00 00 00       	mov    eax,0x16
c000a70b:	0f 85 13 02 00 00    	jne    c000a924 <sinc_mono_vari_process+0x274>
c000a711:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a717:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a71a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a71d:	dd 06                	fld    QWORD PTR [esi]
c000a71f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a722:	d8 d1                	fcom   st(1)
c000a724:	df e0                	fnstsw ax
c000a726:	9e                   	sahf   
c000a727:	76 0f                	jbe    c000a738 <sinc_mono_vari_process+0x88>
c000a729:	dd d8                	fstp   st(0)
c000a72b:	d9 e8                	fld1   
c000a72d:	d8 d9                	fcomp  st(1)
c000a72f:	df e0                	fnstsw ax
c000a731:	9e                   	sahf   
c000a732:	77 0f                	ja     c000a743 <sinc_mono_vari_process+0x93>
c000a734:	dd d8                	fstp   st(0)
c000a736:	eb 11                	jmp    c000a749 <sinc_mono_vari_process+0x99>
c000a738:	dd d9                	fstp   st(1)
c000a73a:	d9 e8                	fld1   
c000a73c:	d8 d9                	fcomp  st(1)
c000a73e:	df e0                	fnstsw ax
c000a740:	9e                   	sahf   
c000a741:	76 04                	jbe    c000a747 <sinc_mono_vari_process+0x97>
c000a743:	de f9                	fdivp  st(1),st
c000a745:	eb 02                	jmp    c000a749 <sinc_mono_vari_process+0x99>
c000a747:	dd d8                	fstp   st(0)
c000a749:	83 ec 10             	sub    esp,0x10
c000a74c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a752:	e8 f9 4f 01 00       	call   c001f750 <lrint>
c000a757:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a75a:	40                   	inc    eax
c000a75b:	dd 14 24             	fst    QWORD PTR [esp]
c000a75e:	0f af e8             	imul   ebp,eax
c000a761:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a765:	e8 7c f3 ff ff       	call   c0009ae6 <fmod_one>
c000a76a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a76d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a771:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a774:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a778:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a77c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a780:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a784:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a787:	e8 c4 4f 01 00       	call   c001f750 <lrint>
c000a78c:	d9 e8                	fld1   
c000a78e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a792:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a797:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a79b:	99                   	cdq    
c000a79c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7a2:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7a8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b5:	7d 44                	jge    c000a7fb <sinc_mono_vari_process+0x14b>
c000a7b7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7ba:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7bd:	01 c8                	add    eax,ecx
c000a7bf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7c2:	99                   	cdq    
c000a7c3:	f7 f9                	idiv   ecx
c000a7c5:	39 d5                	cmp    ebp,edx
c000a7c7:	7d 09                	jge    c000a7d2 <sinc_mono_vari_process+0x122>
c000a7c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7cc:	85 c0                	test   eax,eax
c000a7ce:	79 52                	jns    c000a822 <sinc_mono_vari_process+0x172>
c000a7d0:	eb 6b                	jmp    c000a83d <sinc_mono_vari_process+0x18d>
c000a7d2:	52                   	push   edx
c000a7d3:	55                   	push   ebp
c000a7d4:	57                   	push   edi
c000a7d5:	53                   	push   ebx
c000a7d6:	e8 62 f3 ff ff       	call   c0009b3d <prepare_data>
c000a7db:	83 c4 10             	add    esp,0x10
c000a7de:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7e1:	85 c0                	test   eax,eax
c000a7e3:	0f 85 3b 01 00 00    	jne    c000a924 <sinc_mono_vari_process+0x274>
c000a7e9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ef:	01 c8                	add    eax,ecx
c000a7f1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7f4:	99                   	cdq    
c000a7f5:	f7 f9                	idiv   ecx
c000a7f7:	39 d5                	cmp    ebp,edx
c000a7f9:	7c ce                	jl     c000a7c9 <sinc_mono_vari_process+0x119>
c000a7fb:	dd 04 24             	fld    QWORD PTR [esp]
c000a7fe:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a801:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a805:	dd 1e                	fstp   QWORD PTR [esi]
c000a807:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a80a:	99                   	cdq    
c000a80b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a80e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a811:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a814:	99                   	cdq    
c000a815:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a818:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a81b:	31 c0                	xor    eax,eax
c000a81d:	e9 02 01 00 00       	jmp    c000a924 <sinc_mono_vari_process+0x274>
c000a822:	dd 04 24             	fld    QWORD PTR [esp]
c000a825:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a828:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a82c:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a830:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a834:	d9 c9                	fxch   st(1)
c000a836:	de d9                	fcompp 
c000a838:	df e0                	fnstsw ax
c000a83a:	9e                   	sahf   
c000a83b:	77 be                	ja     c000a7fb <sinc_mono_vari_process+0x14b>
c000a83d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a841:	7e 2f                	jle    c000a872 <sinc_mono_vari_process+0x1c2>
c000a843:	dd 06                	fld    QWORD PTR [esi]
c000a845:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a848:	83 ec 10             	sub    esp,0x10
c000a84b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a84e:	e8 dd 4e 01 00       	call   c001f730 <fabs>
c000a853:	83 c4 10             	add    esp,0x10
c000a856:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a85c:	df e0                	fnstsw ax
c000a85e:	9e                   	sahf   
c000a85f:	76 11                	jbe    c000a872 <sinc_mono_vari_process+0x1c2>
c000a861:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a864:	dc 26                	fsub   QWORD PTR [esi]
c000a866:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a869:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a86c:	dc 06                	fadd   QWORD PTR [esi]
c000a86e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a872:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a875:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a879:	d9 e8                	fld1   
c000a87b:	d8 d9                	fcomp  st(1)
c000a87d:	df e0                	fnstsw ax
c000a87f:	9e                   	sahf   
c000a880:	77 04                	ja     c000a886 <sinc_mono_vari_process+0x1d6>
c000a882:	dd d8                	fstp   st(0)
c000a884:	d9 e8                	fld1   
c000a886:	de c9                	fmulp  st(1),st
c000a888:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a88c:	50                   	push   eax
c000a88d:	50                   	push   eax
c000a88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a896:	e8 38 f2 ff ff       	call   c0009ad3 <double_to_fp>
c000a89b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89f:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8aa:	e8 24 f2 ff ff       	call   c0009ad3 <double_to_fp>
c000a8af:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8b3:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b7:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8ba:	89 c1                	mov    ecx,eax
c000a8bc:	89 d8                	mov    eax,ebx
c000a8be:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8c2:	e8 89 e7 ff ff       	call   c0009050 <calc_output_single>
c000a8c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8ca:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8ce:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8d1:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8d4:	d9 e8                	fld1   
c000a8d6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8da:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8dd:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8e1:	dd 14 24             	fst    QWORD PTR [esp]
c000a8e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e8:	e8 f9 f1 ff ff       	call   c0009ae6 <fmod_one>
c000a8ed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8fb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8ff:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a903:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a907:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a90a:	e8 41 4e 01 00       	call   c001f750 <lrint>
c000a90f:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a914:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a918:	99                   	cdq    
c000a919:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a91c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91f:	e9 88 fe ff ff       	jmp    c000a7ac <sinc_mono_vari_process+0xfc>
c000a924:	83 c4 3c             	add    esp,0x3c
c000a927:	5b                   	pop    ebx
c000a928:	5e                   	pop    esi
c000a929:	5f                   	pop    edi
c000a92a:	5d                   	pop    ebp
c000a92b:	c3                   	ret    

c000a92c <sinc_get_name>:
c000a92c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a930:	31 c0                	xor    eax,eax
c000a932:	83 fa 02             	cmp    edx,0x2
c000a935:	77 07                	ja     c000a93e <sinc_get_name+0x12>
c000a937:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a93e:	c3                   	ret    

c000a93f <sinc_get_description>:
c000a93f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a943:	31 c0                	xor    eax,eax
c000a945:	83 fa 02             	cmp    edx,0x2
c000a948:	77 07                	ja     c000a951 <sinc_get_description+0x12>
c000a94a:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a951:	c3                   	ret    

c000a952 <sinc_set_converter>:
c000a952:	53                   	push   ebx
c000a953:	81 ec 58 08 00 00    	sub    esp,0x858
c000a959:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a963:	85 c0                	test   eax,eax
c000a965:	74 13                	je     c000a97a <sinc_set_converter+0x28>
c000a967:	83 ec 0c             	sub    esp,0xc
c000a96a:	50                   	push   eax
c000a96b:	e8 7d 16 00 00       	call   c000bfed <free>
c000a970:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	50                   	push   eax
c000a97b:	68 44 08 00 00       	push   0x844
c000a980:	6a 00                	push   0x0
c000a982:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a986:	50                   	push   eax
c000a987:	e8 33 5d ff ff       	call   c00006bf <memset>
c000a98c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98f:	83 c4 10             	add    esp,0x10
c000a992:	b8 0b 00 00 00       	mov    eax,0xb
c000a997:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a99d:	7f 6e                	jg     c000aa0d <sinc_set_converter+0xbb>
c000a99f:	83 fa 01             	cmp    edx,0x1
c000a9a2:	75 10                	jne    c000a9b4 <sinc_set_converter+0x62>
c000a9a4:	c7 43 24 b0 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6b0
c000a9ab:	c7 43 20 b0 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6b0
c000a9b2:	eb 4d                	jmp    c000aa01 <sinc_set_converter+0xaf>
c000a9b4:	83 fa 02             	cmp    edx,0x2
c000a9b7:	75 10                	jne    c000a9c9 <sinc_set_converter+0x77>
c000a9b9:	c7 43 24 33 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a433
c000a9c0:	c7 43 20 33 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a433
c000a9c7:	eb 38                	jmp    c000aa01 <sinc_set_converter+0xaf>
c000a9c9:	83 fa 04             	cmp    edx,0x4
c000a9cc:	75 10                	jne    c000a9de <sinc_set_converter+0x8c>
c000a9ce:	c7 43 24 b6 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b6
c000a9d5:	c7 43 20 b6 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b6
c000a9dc:	eb 23                	jmp    c000aa01 <sinc_set_converter+0xaf>
c000a9de:	83 fa 06             	cmp    edx,0x6
c000a9e1:	75 10                	jne    c000a9f3 <sinc_set_converter+0xa1>
c000a9e3:	c7 43 24 39 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f39
c000a9ea:	c7 43 20 39 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f39
c000a9f1:	eb 0e                	jmp    c000aa01 <sinc_set_converter+0xaf>
c000a9f3:	c7 43 24 b7 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb7
c000a9fa:	c7 43 20 b7 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb7
c000aa01:	c7 43 28 75 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009675
c000aa08:	b8 0a 00 00 00       	mov    eax,0xa
c000aa0d:	81 c4 58 08 00 00    	add    esp,0x858
c000aa13:	5b                   	pop    ebx
c000aa14:	c3                   	ret    

c000aa15 <is_bad_src_ratio>:
c000aa15:	83 ec 0c             	sub    esp,0xc
c000aa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa27:	dd 04 24             	fld    QWORD PTR [esp]
c000aa2a:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa30:	de d9                	fcompp 
c000aa32:	df e0                	fnstsw ax
c000aa34:	f6 c4 45             	test   ah,0x45
c000aa37:	74 10                	je     c000aa49 <is_bad_src_ratio+0x34>
c000aa39:	dd 04 24             	fld    QWORD PTR [esp]
c000aa3c:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa42:	df e0                	fnstsw ax
c000aa44:	f6 c4 45             	test   ah,0x45
c000aa47:	75 07                	jne    c000aa50 <is_bad_src_ratio+0x3b>
c000aa49:	b8 01 00 00 00       	mov    eax,0x1
c000aa4e:	eb 05                	jmp    c000aa55 <is_bad_src_ratio+0x40>
c000aa50:	b8 00 00 00 00       	mov    eax,0x0
c000aa55:	83 c4 0c             	add    esp,0xc
c000aa58:	c3                   	ret    

c000aa59 <fmod_one>:
c000aa59:	83 ec 2c             	sub    esp,0x2c
c000aa5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa6c:	83 ec 08             	sub    esp,0x8
c000aa6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa77:	e8 d4 4c 01 00       	call   c001f750 <lrint>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa83:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa87:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa8b:	de e1                	fsubrp st(1),st
c000aa8d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa91:	d9 ee                	fldz   
c000aa93:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa97:	df e0                	fnstsw ax
c000aa99:	f6 c4 45             	test   ah,0x45
c000aa9c:	75 0a                	jne    c000aaa8 <fmod_one+0x4f>
c000aa9e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa2:	d9 e8                	fld1   
c000aaa4:	de c1                	faddp  st(1),st
c000aaa6:	eb 04                	jmp    c000aaac <fmod_one+0x53>
c000aaa8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaac:	83 c4 2c             	add    esp,0x2c
c000aaaf:	c3                   	ret    

c000aab0 <zoh_vari_process>:
c000aab0:	55                   	push   ebp
c000aab1:	57                   	push   edi
c000aab2:	56                   	push   esi
c000aab3:	53                   	push   ebx
c000aab4:	83 ec 2c             	sub    esp,0x2c
c000aab7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aabb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aabf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac7:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aacb:	0f 8e 30 02 00 00    	jle    c000ad01 <zoh_vari_process+0x251>
c000aad1:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aad4:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aadc:	85 db                	test   ebx,ebx
c000aade:	0f 84 1d 02 00 00    	je     c000ad01 <zoh_vari_process+0x251>
c000aae4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aaeb:	74 19                	je     c000ab06 <zoh_vari_process+0x56>
c000aaed:	31 d2                	xor    edx,edx
c000aaef:	39 c2                	cmp    edx,eax
c000aaf1:	7d 0c                	jge    c000aaff <zoh_vari_process+0x4f>
c000aaf3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf5:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf8:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aafc:	42                   	inc    edx
c000aafd:	eb f0                	jmp    c000aaef <zoh_vari_process+0x3f>
c000aaff:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab06:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab09:	0f af d0             	imul   edx,eax
c000ab0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0f:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab13:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab1a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab1d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab24:	dd 07                	fld    QWORD PTR [edi]
c000ab26:	dd 14 24             	fst    QWORD PTR [esp]
c000ab29:	50                   	push   eax
c000ab2a:	50                   	push   eax
c000ab2b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab2e:	e8 e2 fe ff ff       	call   c000aa15 <is_bad_src_ratio>
c000ab33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab37:	5a                   	pop    edx
c000ab38:	59                   	pop    ecx
c000ab39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab3e:	0f 85 b5 01 00 00    	jne    c000acf9 <zoh_vari_process+0x249>
c000ab44:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab47:	d9 e8                	fld1   
c000ab49:	d8 d1                	fcom   st(1)
c000ab4b:	df e0                	fnstsw ax
c000ab4d:	9e                   	sahf   
c000ab4e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab52:	0f 86 83 00 00 00    	jbe    c000abdb <zoh_vari_process+0x12b>
c000ab58:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab5e:	7d 7b                	jge    c000abdb <zoh_vari_process+0x12b>
c000ab60:	d9 c0                	fld    st(0)
c000ab62:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab65:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab68:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab6b:	df e0                	fnstsw ax
c000ab6d:	9e                   	sahf   
c000ab6e:	73 6b                	jae    c000abdb <zoh_vari_process+0x12b>
c000ab70:	85 d2                	test   edx,edx
c000ab72:	7e 36                	jle    c000abaa <zoh_vari_process+0xfa>
c000ab74:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab78:	dd 07                	fld    QWORD PTR [edi]
c000ab7a:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab7d:	83 ec 10             	sub    esp,0x10
c000ab80:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab83:	e8 a8 4b 01 00       	call   c001f730 <fabs>
c000ab88:	83 c4 10             	add    esp,0x10
c000ab8b:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ab91:	df e0                	fnstsw ax
c000ab93:	9e                   	sahf   
c000ab94:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab98:	76 10                	jbe    c000abaa <zoh_vari_process+0xfa>
c000ab9a:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab9d:	dc 27                	fsub   QWORD PTR [edi]
c000ab9f:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aba2:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba5:	dc 07                	fadd   QWORD PTR [edi]
c000aba7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abaa:	31 c0                	xor    eax,eax
c000abac:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaf:	7e 13                	jle    c000abc4 <zoh_vari_process+0x114>
c000abb1:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abbb:	40                   	inc    eax
c000abbc:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abbf:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abc2:	eb e8                	jmp    c000abac <zoh_vari_process+0xfc>
c000abc4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc8:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abcb:	de c1                	faddp  st(1),st
c000abcd:	e9 75 ff ff ff       	jmp    c000ab47 <zoh_vari_process+0x97>
c000abd2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd6:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd9:	de c1                	faddp  st(1),st
c000abdb:	83 ec 10             	sub    esp,0x10
c000abde:	dd 14 24             	fst    QWORD PTR [esp]
c000abe1:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe5:	e8 6f fe ff ff       	call   c000aa59 <fmod_one>
c000abea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abed:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abf1:	d8 e1                	fsub   st,st(1)
c000abf3:	d9 c9                	fxch   st(1)
c000abf5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abfc:	e8 4f 4b 01 00       	call   c001f750 <lrint>
c000ac01:	83 c4 10             	add    esp,0x10
c000ac04:	0f af e8             	imul   ebp,eax
c000ac07:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac0a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac0d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac11:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac14:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac17:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac1a:	0f 8d 80 00 00 00    	jge    c000aca0 <zoh_vari_process+0x1f0>
c000ac20:	d9 c0                	fld    st(0)
c000ac22:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac25:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac29:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac2d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac31:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac35:	de d9                	fcompp 
c000ac37:	df e0                	fnstsw ax
c000ac39:	9e                   	sahf   
c000ac3a:	72 64                	jb     c000aca0 <zoh_vari_process+0x1f0>
c000ac3c:	85 d2                	test   edx,edx
c000ac3e:	7e 36                	jle    c000ac76 <zoh_vari_process+0x1c6>
c000ac40:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac44:	dd 07                	fld    QWORD PTR [edi]
c000ac46:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac49:	83 ec 10             	sub    esp,0x10
c000ac4c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4f:	e8 dc 4a 01 00       	call   c001f730 <fabs>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac5d:	df e0                	fnstsw ax
c000ac5f:	9e                   	sahf   
c000ac60:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac64:	76 10                	jbe    c000ac76 <zoh_vari_process+0x1c6>
c000ac66:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac69:	dc 27                	fsub   QWORD PTR [edi]
c000ac6b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac6e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac71:	dc 07                	fadd   QWORD PTR [edi]
c000ac73:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac76:	31 d2                	xor    edx,edx
c000ac78:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac7b:	39 d0                	cmp    eax,edx
c000ac7d:	0f 8e 4f ff ff ff    	jle    c000abd2 <zoh_vari_process+0x122>
c000ac83:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac86:	29 c1                	sub    ecx,eax
c000ac88:	89 c8                	mov    eax,ecx
c000ac8a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac8c:	01 d0                	add    eax,edx
c000ac8e:	42                   	inc    edx
c000ac8f:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac92:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac95:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac98:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac9b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac9e:	eb d8                	jmp    c000ac78 <zoh_vari_process+0x1c8>
c000aca0:	39 e9                	cmp    ecx,ebp
c000aca2:	7d 13                	jge    c000acb7 <zoh_vari_process+0x207>
c000aca4:	89 e8                	mov    eax,ebp
c000aca6:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca9:	29 c8                	sub    eax,ecx
c000acab:	99                   	cdq    
c000acac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb3:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb7:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	7f 1b                	jg     c000acdc <zoh_vari_process+0x22c>
c000acc1:	dd 04 24             	fld    QWORD PTR [esp]
c000acc4:	dd 1f                	fstp   QWORD PTR [edi]
c000acc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc9:	99                   	cdq    
c000acca:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000accd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acd0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acd3:	99                   	cdq    
c000acd4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acda:	eb 25                	jmp    c000ad01 <zoh_vari_process+0x251>
c000acdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acdf:	31 d2                	xor    edx,edx
c000ace1:	29 e8                	sub    eax,ebp
c000ace3:	c1 e0 02             	shl    eax,0x2
c000ace6:	39 d5                	cmp    ebp,edx
c000ace8:	7e d7                	jle    c000acc1 <zoh_vari_process+0x211>
c000acea:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acec:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acef:	83 c0 04             	add    eax,0x4
c000acf2:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf6:	42                   	inc    edx
c000acf7:	eb ed                	jmp    c000ace6 <zoh_vari_process+0x236>
c000acf9:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad05:	83 c4 2c             	add    esp,0x2c
c000ad08:	5b                   	pop    ebx
c000ad09:	5e                   	pop    esi
c000ad0a:	5f                   	pop    edi
c000ad0b:	5d                   	pop    ebp
c000ad0c:	c3                   	ret    

c000ad0d <zoh_reset>:
c000ad0d:	83 ec 0c             	sub    esp,0xc
c000ad10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad14:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad17:	85 c0                	test   eax,eax
c000ad19:	74 20                	je     c000ad3b <zoh_reset+0x2e>
c000ad1b:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad1e:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad28:	51                   	push   ecx
c000ad29:	c1 e2 02             	shl    edx,0x2
c000ad2c:	83 c0 1c             	add    eax,0x1c
c000ad2f:	52                   	push   edx
c000ad30:	6a 00                	push   0x0
c000ad32:	50                   	push   eax
c000ad33:	e8 87 59 ff ff       	call   c00006bf <memset>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 c4 0c             	add    esp,0xc
c000ad3e:	c3                   	ret    

c000ad3f <zoh_get_name>:
c000ad3f:	31 c0                	xor    eax,eax
c000ad41:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad46:	75 05                	jne    c000ad4d <zoh_get_name+0xe>
c000ad48:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad4d:	c3                   	ret    

c000ad4e <zoh_get_description>:
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad55:	75 05                	jne    c000ad5c <zoh_get_description+0xe>
c000ad57:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad5c:	c3                   	ret    

c000ad5d <zoh_set_converter>:
c000ad5d:	53                   	push   ebx
c000ad5e:	b8 0a 00 00 00       	mov    eax,0xa
c000ad63:	83 ec 08             	sub    esp,0x8
c000ad66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad6a:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6f:	75 6e                	jne    c000addf <zoh_set_converter+0x82>
c000ad71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad74:	85 c0                	test   eax,eax
c000ad76:	74 13                	je     c000ad8b <zoh_set_converter+0x2e>
c000ad78:	83 ec 0c             	sub    esp,0xc
c000ad7b:	50                   	push   eax
c000ad7c:	e8 6c 12 00 00       	call   c000bfed <free>
c000ad81:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad88:	83 c4 10             	add    esp,0x10
c000ad8b:	50                   	push   eax
c000ad8c:	50                   	push   eax
c000ad8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad90:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad97:	50                   	push   eax
c000ad98:	6a 01                	push   0x1
c000ad9a:	e8 6e 12 00 00       	call   c000c00d <calloc>
c000ad9f:	89 c2                	mov    edx,eax
c000ada1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	b8 01 00 00 00       	mov    eax,0x1
c000adac:	85 d2                	test   edx,edx
c000adae:	74 2f                	je     c000addf <zoh_set_converter+0x82>
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb9:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adbf:	c7 43 24 b0 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aab0
c000adc6:	c7 43 20 b0 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aab0
c000adcd:	c7 43 28 0d ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad0d
c000add4:	53                   	push   ebx
c000add5:	e8 33 ff ff ff       	call   c000ad0d <zoh_reset>
c000adda:	83 c4 10             	add    esp,0x10
c000addd:	31 c0                	xor    eax,eax
c000addf:	83 c4 08             	add    esp,0x8
c000ade2:	5b                   	pop    ebx
c000ade3:	c3                   	ret    

c000ade4 <Computer::close(int, int, void*)>:
c000ade4:	57                   	push   edi
c000ade5:	56                   	push   esi
c000ade6:	53                   	push   ebx
c000ade7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adeb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adfc:	50                   	push   eax
c000adfd:	e8 98 59 00 00       	call   c001079a <Device::closeAll()>
c000ae02:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae0d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae11:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae19:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae21:	5b                   	pop    ebx
c000ae22:	5e                   	pop    esi
c000ae23:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae26:	5f                   	pop    edi
c000ae27:	ff e0                	jmp    eax
c000ae29:	90                   	nop

c000ae2a <Computer::Computer()>:
c000ae2a:	83 ec 0c             	sub    esp,0xc
c000ae2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae31:	83 ec 08             	sub    esp,0x8
c000ae34:	68 dc 10 02 c0       	push   0xc00210dc
c000ae39:	50                   	push   eax
c000ae3a:	e8 d5 59 00 00       	call   c0010814 <Device::Device(char const*)>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	89 10                	mov    DWORD PTR [eax],edx
c000ae4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae51:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae73:	83 ca 04             	or     edx,0x4
c000ae76:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae86:	31 d2                	xor    edx,edx
c000ae88:	88 c2                	mov    dl,al
c000ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8e:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9f:	31 d2                	xor    edx,edx
c000aea1:	88 c2                	mov    dl,al
c000aea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb6:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aebd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec3:	31 d2                	xor    edx,edx
c000aec5:	88 c2                	mov    dl,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecf:	83 e1 3f             	and    ecx,0x3f
c000aed2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee0:	31 d2                	xor    edx,edx
c000aee2:	88 c2                	mov    dl,al
c000aee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef9:	31 d2                	xor    edx,edx
c000aefb:	88 c2                	mov    dl,al
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af10:	8d 50 01             	lea    edx,[eax+0x1]
c000af13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af17:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af1d:	31 d2                	xor    edx,edx
c000af1f:	88 c2                	mov    dl,al
c000af21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af25:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af29:	83 e1 3f             	and    ecx,0x3f
c000af2c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af3a:	31 d2                	xor    edx,edx
c000af3c:	88 c2                	mov    dl,al
c000af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af42:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af53:	31 d2                	xor    edx,edx
c000af55:	88 c2                	mov    dl,al
c000af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af6a:	8d 50 01             	lea    edx,[eax+0x1]
c000af6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af71:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af77:	31 d2                	xor    edx,edx
c000af79:	88 c2                	mov    dl,al
c000af7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af83:	83 e1 3f             	and    ecx,0x3f
c000af86:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af8a:	90                   	nop
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	c3                   	ret    
c000af8f:	90                   	nop

c000af90 <Computer::setBootMessage(char const*)>:
c000af90:	c3                   	ret    
c000af91:	90                   	nop

c000af92 <Computer::start()>:
c000af92:	56                   	push   esi
c000af93:	53                   	push   ebx
c000af94:	83 ec 14             	sub    esp,0x14
c000af97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af9b:	e8 a7 da 00 00       	call   c0018a47 <lockScheduler()>
c000afa0:	e8 eb dd 00 00       	call   c0018d90 <schedule()>
c000afa5:	e8 9f da 00 00       	call   c0018a49 <unlockScheduler()>
c000afaa:	fb                   	sti    
c000afab:	83 ec 0c             	sub    esp,0xc
c000afae:	68 3b 07 00 00       	push   0x73b
c000afb3:	e8 22 41 00 00       	call   c000f0da <operator new(unsigned long)>
c000afb8:	89 c6                	mov    esi,eax
c000afba:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afc6:	50                   	push   eax
c000afc7:	68 e5 10 02 c0       	push   0xc00210e5
c000afcc:	6a 01                	push   0x1
c000afce:	56                   	push   esi
c000afcf:	e8 ca d8 00 00       	call   c001889e <Process::Process(bool, char const*, Process*, char**)>
c000afd4:	83 c4 20             	add    esp,0x20
c000afd7:	68 ff 00 00 00       	push   0xff
c000afdc:	6a 00                	push   0x0
c000afde:	68 6b b9 00 c0       	push   0xc000b96b
c000afe3:	56                   	push   esi
c000afe4:	e8 93 db 00 00       	call   c0018b7c <Process::createThread(void (*)(void*), void*, int)>
c000afe9:	6a 7a                	push   0x7a
c000afeb:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000aff1:	6a 00                	push   0x0
c000aff3:	68 c1 93 01 c0       	push   0xc00193c1
c000aff8:	52                   	push   edx
c000aff9:	e8 7e db 00 00       	call   c0018b7c <Process::createThread(void (*)(void*), void*, int)>
c000affe:	83 c4 20             	add    esp,0x20
c000b001:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b006:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b00d:	e8 60 45 00 00       	call   c000f572 <initVFS()>
c000b012:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b018:	8b 10                	mov    edx,DWORD PTR [eax]
c000b01a:	6a 00                	push   0x0
c000b01c:	6a 00                	push   0x0
c000b01e:	6a 00                	push   0x0
c000b020:	50                   	push   eax
c000b021:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b024:	e8 6c c2 00 00       	call   c0017295 <setupSystemCalls()>
c000b029:	e8 42 50 00 00       	call   c0010070 <loadClockSettings()>
c000b02e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b031:	e8 38 57 00 00       	call   c001076e <Device::loadDriversForAll()>
c000b036:	bb 02 00 00 00       	mov    ebx,0x2
c000b03b:	b8 01 00 00 00       	mov    eax,0x1
c000b040:	31 d2                	xor    edx,edx
c000b042:	31 c9                	xor    ecx,ecx
c000b044:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b04c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b054:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b05a:	59                   	pop    ecx
c000b05b:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b061:	5e                   	pop    esi
c000b062:	6a 01                	push   0x1
c000b064:	68 f2 10 02 c0       	push   0xc00210f2
c000b069:	e8 f3 d3 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c000b06e:	5a                   	pop    edx
c000b06f:	59                   	pop    ecx
c000b070:	53                   	push   ebx
c000b071:	50                   	push   eax
c000b072:	e8 b0 d5 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c000b077:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b07e:	e8 8c 41 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 ec 0c             	sub    esp,0xc
c000b089:	6a 02                	push   0x2
c000b08b:	e8 59 de 00 00       	call   c0018ee9 <blockTask(TaskState)>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	eb f1                	jmp    c000b086 <Computer::start()+0xf4>

c000b095 <firstTask()>:
c000b095:	83 ec 18             	sub    esp,0x18
c000b098:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b09d:	50                   	push   eax
c000b09e:	e8 ef fe ff ff       	call   c000af92 <Computer::start()>
c000b0a3:	90                   	nop

c000b0a4 <Computer::detectFeatures()>:
c000b0a4:	55                   	push   ebp
c000b0a5:	57                   	push   edi
c000b0a6:	56                   	push   esi
c000b0a7:	53                   	push   ebx
c000b0a8:	83 ec 1c             	sub    esp,0x1c
c000b0ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0af:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0b5:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0bb:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0c1:	e8 b0 52 ff ff       	call   c0000376 <detectCPUID>
c000b0c6:	85 c0                	test   eax,eax
c000b0c8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ce:	0f 95 c2             	setne  dl
c000b0d1:	01 d2                	add    edx,edx
c000b0d3:	83 e0 fd             	and    eax,0xfffffffd
c000b0d6:	09 d0                	or     eax,edx
c000b0d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0de:	a8 02                	test   al,0x2
c000b0e0:	75 4e                	jne    c000b130 <Computer::detectFeatures()+0x8c>
c000b0e2:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b0e9:	74 0f                	je     c000b0fa <Computer::detectFeatures()+0x56>
c000b0eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0f1:	83 e0 fb             	and    eax,0xfffffffb
c000b0f4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0fa:	e8 d7 40 01 00       	call   c001f1d6 <x87Detect>
c000b0ff:	83 e0 01             	and    eax,0x1
c000b102:	c1 e0 04             	shl    eax,0x4
c000b105:	88 c2                	mov    dl,al
c000b107:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b10d:	83 e0 ef             	and    eax,0xffffffef
c000b110:	09 d0                	or     eax,edx
c000b112:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b118:	a8 10                	test   al,0x10
c000b11a:	0f 85 20 01 00 00    	jne    c000b240 <Computer::detectFeatures()+0x19c>
c000b120:	84 c0                	test   al,al
c000b122:	0f 88 3b 01 00 00    	js     c000b263 <Computer::detectFeatures()+0x1bf>
c000b128:	83 c4 1c             	add    esp,0x1c
c000b12b:	5b                   	pop    ebx
c000b12c:	5e                   	pop    esi
c000b12d:	5f                   	pop    edi
c000b12e:	5d                   	pop    ebp
c000b12f:	c3                   	ret    
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	6a 20                	push   0x20
c000b135:	e8 e1 96 00 00       	call   c001481b <cpuidCheckEDX(unsigned int)>
c000b13a:	83 e0 01             	and    eax,0x1
c000b13d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b144:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b14a:	83 e0 f7             	and    eax,0xfffffff7
c000b14d:	09 d0                	or     eax,edx
c000b14f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b155:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b15c:	e8 ba 96 00 00       	call   c001481b <cpuidCheckEDX(unsigned int)>
c000b161:	83 e0 01             	and    eax,0x1
c000b164:	88 c2                	mov    dl,al
c000b166:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b16c:	83 e0 fe             	and    eax,0xfffffffe
c000b16f:	09 d0                	or     eax,edx
c000b171:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b177:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b17e:	e8 98 96 00 00       	call   c001481b <cpuidCheckEDX(unsigned int)>
c000b183:	c1 e0 07             	shl    eax,0x7
c000b186:	88 c2                	mov    dl,al
c000b188:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b18e:	83 e0 7f             	and    eax,0x7f
c000b191:	09 d0                	or     eax,edx
c000b193:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b199:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1a0:	e8 76 96 00 00       	call   c001481b <cpuidCheckEDX(unsigned int)>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	83 e0 01             	and    eax,0x1
c000b1ab:	c1 e0 05             	shl    eax,0x5
c000b1ae:	88 c2                	mov    dl,al
c000b1b0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1b6:	83 e0 df             	and    eax,0xffffffdf
c000b1b9:	09 d0                	or     eax,edx
c000b1bb:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1c5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1cb:	0f 84 b8 00 00 00    	je     c000b289 <Computer::detectFeatures()+0x1e5>
c000b1d1:	83 ec 0c             	sub    esp,0xc
c000b1d4:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1da:	83 e1 fe             	and    ecx,0xfffffffe
c000b1dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e1:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1e7:	50                   	push   eax
c000b1e8:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1ec:	55                   	push   ebp
c000b1ed:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1f1:	57                   	push   edi
c000b1f2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1f6:	56                   	push   esi
c000b1f7:	68 00 00 00 80       	push   0x80000000
c000b1fc:	e8 97 95 00 00       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b201:	83 c4 20             	add    esp,0x20
c000b204:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b20b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b20f:	0f 86 cd fe ff ff    	jbe    c000b0e2 <Computer::detectFeatures()+0x3e>
c000b215:	83 ec 0c             	sub    esp,0xc
c000b218:	50                   	push   eax
c000b219:	55                   	push   ebp
c000b21a:	57                   	push   edi
c000b21b:	56                   	push   esi
c000b21c:	68 01 00 00 80       	push   0x80000001
c000b221:	e8 72 95 00 00       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b226:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b22c:	83 c4 20             	add    esp,0x20
c000b22f:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b235:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b23b:	e9 a2 fe ff ff       	jmp    c000b0e2 <Computer::detectFeatures()+0x3e>
c000b240:	e8 4b 3f 01 00       	call   c001f190 <sseDetect>
c000b245:	88 c2                	mov    dl,al
c000b247:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b24d:	c1 e2 07             	shl    edx,0x7
c000b250:	83 e0 7f             	and    eax,0x7f
c000b253:	09 d0                	or     eax,edx
c000b255:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b25b:	84 c0                	test   al,al
c000b25d:	0f 89 c5 fe ff ff    	jns    c000b128 <Computer::detectFeatures()+0x84>
c000b263:	e8 18 3f 01 00       	call   c001f180 <avxDetect>
c000b268:	83 e0 01             	and    eax,0x1
c000b26b:	c1 e0 05             	shl    eax,0x5
c000b26e:	88 c2                	mov    dl,al
c000b270:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b276:	83 e0 df             	and    eax,0xffffffdf
c000b279:	09 d0                	or     eax,edx
c000b27b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b281:	83 c4 1c             	add    esp,0x1c
c000b284:	5b                   	pop    ebx
c000b285:	5e                   	pop    esi
c000b286:	5f                   	pop    edi
c000b287:	5d                   	pop    ebp
c000b288:	c3                   	ret    
c000b289:	83 ec 0c             	sub    esp,0xc
c000b28c:	68 00 02 00 00       	push   0x200
c000b291:	e8 85 95 00 00       	call   c001481b <cpuidCheckEDX(unsigned int)>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	e9 33 ff ff ff       	jmp    c000b1d1 <Computer::detectFeatures()+0x12d>

c000b29e <Computer::displayFeatures()>:
c000b29e:	53                   	push   ebx
c000b29f:	83 ec 14             	sub    esp,0x14
c000b2a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2a6:	68 15 11 02 c0       	push   0xc0021115
c000b2ab:	e8 5f 3f 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2b8:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2bf:	74 05                	je     c000b2c6 <Computer::displayFeatures()+0x28>
c000b2c1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2c6:	51                   	push   ecx
c000b2c7:	51                   	push   ecx
c000b2c8:	50                   	push   eax
c000b2c9:	68 28 11 02 c0       	push   0xc0021128
c000b2ce:	e8 3c 3f 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2db:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2e2:	75 05                	jne    c000b2e9 <Computer::displayFeatures()+0x4b>
c000b2e4:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2e9:	52                   	push   edx
c000b2ea:	52                   	push   edx
c000b2eb:	50                   	push   eax
c000b2ec:	68 39 11 02 c0       	push   0xc0021139
c000b2f1:	e8 19 3f 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b2f6:	83 c4 10             	add    esp,0x10
c000b2f9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2fe:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b305:	75 05                	jne    c000b30c <Computer::displayFeatures()+0x6e>
c000b307:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b30c:	51                   	push   ecx
c000b30d:	51                   	push   ecx
c000b30e:	50                   	push   eax
c000b30f:	68 4a 11 02 c0       	push   0xc002114a
c000b314:	e8 f6 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b319:	83 c4 10             	add    esp,0x10
c000b31c:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b321:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b328:	75 05                	jne    c000b32f <Computer::displayFeatures()+0x91>
c000b32a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b32f:	52                   	push   edx
c000b330:	52                   	push   edx
c000b331:	50                   	push   eax
c000b332:	68 5b 11 02 c0       	push   0xc002115b
c000b337:	e8 d3 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b33c:	83 c4 10             	add    esp,0x10
c000b33f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b344:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b34b:	75 05                	jne    c000b352 <Computer::displayFeatures()+0xb4>
c000b34d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b352:	51                   	push   ecx
c000b353:	51                   	push   ecx
c000b354:	50                   	push   eax
c000b355:	68 6c 11 02 c0       	push   0xc002116c
c000b35a:	e8 b0 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b35f:	83 c4 10             	add    esp,0x10
c000b362:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b367:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b36e:	75 05                	jne    c000b375 <Computer::displayFeatures()+0xd7>
c000b370:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b375:	52                   	push   edx
c000b376:	52                   	push   edx
c000b377:	50                   	push   eax
c000b378:	68 7d 11 02 c0       	push   0xc002117d
c000b37d:	e8 8d 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b38a:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b391:	75 05                	jne    c000b398 <Computer::displayFeatures()+0xfa>
c000b393:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b398:	51                   	push   ecx
c000b399:	51                   	push   ecx
c000b39a:	50                   	push   eax
c000b39b:	68 8e 11 02 c0       	push   0xc002118e
c000b3a0:	e8 6a 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b3a5:	83 c4 10             	add    esp,0x10
c000b3a8:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3ad:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b4:	78 05                	js     c000b3bb <Computer::displayFeatures()+0x11d>
c000b3b6:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3bb:	52                   	push   edx
c000b3bc:	52                   	push   edx
c000b3bd:	50                   	push   eax
c000b3be:	68 9f 11 02 c0       	push   0xc002119f
c000b3c3:	e8 47 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b3c8:	83 c4 10             	add    esp,0x10
c000b3cb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3d0:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3d7:	0f 84 93 01 00 00    	je     c000b570 <Computer::displayFeatures()+0x2d2>
c000b3dd:	51                   	push   ecx
c000b3de:	51                   	push   ecx
c000b3df:	50                   	push   eax
c000b3e0:	68 b0 11 02 c0       	push   0xc00211b0
c000b3e5:	e8 25 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3f2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3f9:	0f 84 67 01 00 00    	je     c000b566 <Computer::displayFeatures()+0x2c8>
c000b3ff:	52                   	push   edx
c000b400:	52                   	push   edx
c000b401:	50                   	push   eax
c000b402:	68 c1 11 02 c0       	push   0xc00211c1
c000b407:	e8 03 3e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b414:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b41b:	0f 84 3b 01 00 00    	je     c000b55c <Computer::displayFeatures()+0x2be>
c000b421:	51                   	push   ecx
c000b422:	51                   	push   ecx
c000b423:	50                   	push   eax
c000b424:	68 d2 11 02 c0       	push   0xc00211d2
c000b429:	e8 e1 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b42e:	83 c4 10             	add    esp,0x10
c000b431:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b436:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b43d:	0f 84 0f 01 00 00    	je     c000b552 <Computer::displayFeatures()+0x2b4>
c000b443:	52                   	push   edx
c000b444:	52                   	push   edx
c000b445:	50                   	push   eax
c000b446:	68 e3 11 02 c0       	push   0xc00211e3
c000b44b:	e8 bf 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b458:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b45f:	0f 84 e3 00 00 00    	je     c000b548 <Computer::displayFeatures()+0x2aa>
c000b465:	51                   	push   ecx
c000b466:	51                   	push   ecx
c000b467:	50                   	push   eax
c000b468:	68 f4 11 02 c0       	push   0xc00211f4
c000b46d:	e8 9d 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b472:	83 c4 10             	add    esp,0x10
c000b475:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b47a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b481:	0f 84 b7 00 00 00    	je     c000b53e <Computer::displayFeatures()+0x2a0>
c000b487:	52                   	push   edx
c000b488:	52                   	push   edx
c000b489:	50                   	push   eax
c000b48a:	68 05 12 02 c0       	push   0xc0021205
c000b48f:	e8 7b 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b49c:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4a3:	0f 84 8b 00 00 00    	je     c000b534 <Computer::displayFeatures()+0x296>
c000b4a9:	51                   	push   ecx
c000b4aa:	51                   	push   ecx
c000b4ab:	50                   	push   eax
c000b4ac:	68 16 12 02 c0       	push   0xc0021216
c000b4b1:	e8 59 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4be:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4c5:	78 05                	js     c000b4cc <Computer::displayFeatures()+0x22e>
c000b4c7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4cc:	52                   	push   edx
c000b4cd:	52                   	push   edx
c000b4ce:	50                   	push   eax
c000b4cf:	68 27 12 02 c0       	push   0xc0021227
c000b4d4:	e8 36 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b4d9:	83 c4 10             	add    esp,0x10
c000b4dc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4e1:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4e8:	74 43                	je     c000b52d <Computer::displayFeatures()+0x28f>
c000b4ea:	51                   	push   ecx
c000b4eb:	51                   	push   ecx
c000b4ec:	50                   	push   eax
c000b4ed:	68 38 12 02 c0       	push   0xc0021238
c000b4f2:	e8 18 3d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4ff:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b506:	74 1e                	je     c000b526 <Computer::displayFeatures()+0x288>
c000b508:	52                   	push   edx
c000b509:	52                   	push   edx
c000b50a:	50                   	push   eax
c000b50b:	68 49 12 02 c0       	push   0xc0021249
c000b510:	e8 fa 3c 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b515:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b51d:	83 c4 18             	add    esp,0x18
c000b520:	5b                   	pop    ebx
c000b521:	e9 e9 3c 00 00       	jmp    c000f20f <Dbg::kprintf(char const*, ...)>
c000b526:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b52b:	eb db                	jmp    c000b508 <Computer::displayFeatures()+0x26a>
c000b52d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b532:	eb b6                	jmp    c000b4ea <Computer::displayFeatures()+0x24c>
c000b534:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b539:	e9 6b ff ff ff       	jmp    c000b4a9 <Computer::displayFeatures()+0x20b>
c000b53e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b543:	e9 3f ff ff ff       	jmp    c000b487 <Computer::displayFeatures()+0x1e9>
c000b548:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b54d:	e9 13 ff ff ff       	jmp    c000b465 <Computer::displayFeatures()+0x1c7>
c000b552:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b557:	e9 e7 fe ff ff       	jmp    c000b443 <Computer::displayFeatures()+0x1a5>
c000b55c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b561:	e9 bb fe ff ff       	jmp    c000b421 <Computer::displayFeatures()+0x183>
c000b566:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b56b:	e9 8f fe ff ff       	jmp    c000b3ff <Computer::displayFeatures()+0x161>
c000b570:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b575:	e9 63 fe ff ff       	jmp    c000b3dd <Computer::displayFeatures()+0x13f>

c000b57a <Computer::rdmsr(unsigned int)>:
c000b57a:	83 ec 0c             	sub    esp,0xc
c000b57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b581:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b588:	74 0a                	je     c000b594 <Computer::rdmsr(unsigned int)+0x1a>
c000b58a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b58e:	0f 32                	rdmsr  
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	c3                   	ret    
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	68 5a 12 02 c0       	push   0xc002125a
c000b59c:	e8 9d a4 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000b5a1:	83 c4 10             	add    esp,0x10
c000b5a4:	eb e4                	jmp    c000b58a <Computer::rdmsr(unsigned int)+0x10>

c000b5a6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5a6:	57                   	push   edi
c000b5a7:	56                   	push   esi
c000b5a8:	52                   	push   edx
c000b5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5b5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5bc:	74 0e                	je     c000b5cc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c2:	89 f0                	mov    eax,esi
c000b5c4:	89 fa                	mov    edx,edi
c000b5c6:	0f 30                	wrmsr  
c000b5c8:	58                   	pop    eax
c000b5c9:	5e                   	pop    esi
c000b5ca:	5f                   	pop    edi
c000b5cb:	c3                   	ret    
c000b5cc:	83 ec 0c             	sub    esp,0xc
c000b5cf:	68 60 12 02 c0       	push   0xc0021260
c000b5d4:	e8 65 a4 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	eb e0                	jmp    c000b5be <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5de <Computer::nmiEnabled()>:
c000b5de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5e8:	c3                   	ret    
c000b5e9:	90                   	nop

c000b5ea <Computer::readCMOS(unsigned char)>:
c000b5ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5f9:	19 c0                	sbb    eax,eax
c000b5fb:	83 e0 80             	and    eax,0xffffff80
c000b5fe:	09 d0                	or     eax,edx
c000b600:	e6 70                	out    0x70,al
c000b602:	e4 71                	in     al,0x71
c000b604:	c3                   	ret    
c000b605:	90                   	nop

c000b606 <Computer::enableNMI(bool)>:
c000b606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b60a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b614:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b61c:	eb cc                	jmp    c000b5ea <Computer::readCMOS(unsigned char)>

c000b61e <Computer::open(int, int, void*)>:
c000b61e:	56                   	push   esi
c000b61f:	53                   	push   ebx
c000b620:	83 ec 10             	sub    esp,0x10
c000b623:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b62a:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b631:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b635:	68 68 22 00 00       	push   0x2268
c000b63a:	e8 9b 3a 00 00       	call   c000f0da <operator new(unsigned long)>
c000b63f:	89 c6                	mov    esi,eax
c000b641:	89 04 24             	mov    DWORD PTR [esp],eax
c000b644:	e8 bf 87 00 00       	call   c0013e08 <ACPI::ACPI()>
c000b649:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b64f:	59                   	pop    ecx
c000b650:	58                   	pop    eax
c000b651:	56                   	push   esi
c000b652:	53                   	push   ebx
c000b653:	e8 cc 4f 00 00       	call   c0010624 <Device::addChild(Device*)>
c000b658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65b:	e8 44 fa ff ff       	call   c000b0a4 <Computer::detectFeatures()>
c000b660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b663:	e8 36 fc ff ff       	call   c000b29e <Computer::displayFeatures()>
c000b668:	58                   	pop    eax
c000b669:	5a                   	pop    edx
c000b66a:	6a 01                	push   0x1
c000b66c:	53                   	push   ebx
c000b66d:	e8 94 ff ff ff       	call   c000b606 <Computer::enableNMI(bool)>
c000b672:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b679:	e8 5c 3a 00 00       	call   c000f0da <operator new(unsigned long)>
c000b67e:	89 c6                	mov    esi,eax
c000b680:	89 04 24             	mov    DWORD PTR [esp],eax
c000b683:	e8 5e 92 00 00       	call   c00148e6 <CPU::CPU()>
c000b688:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b68e:	59                   	pop    ecx
c000b68f:	58                   	pop    eax
c000b690:	56                   	push   esi
c000b691:	53                   	push   ebx
c000b692:	e8 8d 4f 00 00       	call   c0010624 <Device::addChild(Device*)>
c000b697:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b69d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6a3:	51                   	push   ecx
c000b6a4:	6a 00                	push   0x0
c000b6a6:	6a 00                	push   0x0
c000b6a8:	50                   	push   eax
c000b6a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6ac:	83 c4 20             	add    esp,0x20
c000b6af:	e8 d8 54 00 00       	call   c0010b8c <setupFPU()>
c000b6b4:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6ba:	85 c0                	test   eax,eax
c000b6bc:	74 1e                	je     c000b6dc <Computer::open(int, int, void*)+0xbe>
c000b6be:	52                   	push   edx
c000b6bf:	52                   	push   edx
c000b6c0:	50                   	push   eax
c000b6c1:	53                   	push   ebx
c000b6c2:	e8 5d 4f 00 00       	call   c0010624 <Device::addChild(Device*)>
c000b6c7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6cf:	6a 00                	push   0x0
c000b6d1:	6a 00                	push   0x0
c000b6d3:	6a 00                	push   0x0
c000b6d5:	50                   	push   eax
c000b6d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d9:	83 c4 20             	add    esp,0x20
c000b6dc:	83 ec 0c             	sub    esp,0xc
c000b6df:	68 95 b0 00 c0       	push   0xc000b095
c000b6e4:	e8 92 d5 00 00       	call   c0018c7b <setupMultitasking(void (*)())>
c000b6e9:	83 c4 14             	add    esp,0x14
c000b6ec:	83 c8 ff             	or     eax,0xffffffff
c000b6ef:	5b                   	pop    ebx
c000b6f0:	5e                   	pop    esi
c000b6f1:	c3                   	ret    

c000b6f2 <Computer::disableNMI()>:
c000b6f2:	6a 00                	push   0x0
c000b6f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6f8:	50                   	push   eax
c000b6f9:	e8 08 ff ff ff       	call   c000b606 <Computer::enableNMI(bool)>
c000b6fe:	5a                   	pop    edx
c000b6ff:	59                   	pop    ecx
c000b700:	c3                   	ret    
c000b701:	90                   	nop

c000b702 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b70a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b711:	19 c0                	sbb    eax,eax
c000b713:	83 e0 80             	and    eax,0xffffff80
c000b716:	09 d0                	or     eax,edx
c000b718:	e6 70                	out    0x70,al
c000b71a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b71e:	e6 71                	out    0x71,al
c000b720:	c3                   	ret    
c000b721:	90                   	nop

c000b722 <Computer::handleNMI()>:
c000b722:	56                   	push   esi
c000b723:	53                   	push   ebx
c000b724:	83 ec 10             	sub    esp,0x10
c000b727:	e4 92                	in     al,0x92
c000b729:	89 c6                	mov    esi,eax
c000b72b:	e4 61                	in     al,0x61
c000b72d:	68 66 12 02 c0       	push   0xc0021266
c000b732:	88 c3                	mov    bl,al
c000b734:	e8 d6 3a 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	83 e6 10             	and    esi,0x10
c000b73f:	75 0d                	jne    c000b74e <Computer::handleNMI()+0x2c>
c000b741:	f6 c3 40             	test   bl,0x40
c000b744:	75 1d                	jne    c000b763 <Computer::handleNMI()+0x41>
c000b746:	84 db                	test   bl,bl
c000b748:	78 2d                	js     c000b777 <Computer::handleNMI()+0x55>
c000b74a:	58                   	pop    eax
c000b74b:	5b                   	pop    ebx
c000b74c:	5e                   	pop    esi
c000b74d:	c3                   	ret    
c000b74e:	83 ec 0c             	sub    esp,0xc
c000b751:	68 77 12 02 c0       	push   0xc0021277
c000b756:	e8 e3 a2 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000b75b:	83 c4 10             	add    esp,0x10
c000b75e:	f6 c3 40             	test   bl,0x40
c000b761:	74 e3                	je     c000b746 <Computer::handleNMI()+0x24>
c000b763:	83 ec 0c             	sub    esp,0xc
c000b766:	68 84 12 02 c0       	push   0xc0021284
c000b76b:	e8 ce a2 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	84 db                	test   bl,bl
c000b775:	79 d3                	jns    c000b74a <Computer::handleNMI()+0x28>
c000b777:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b77f:	5a                   	pop    edx
c000b780:	5b                   	pop    ebx
c000b781:	5e                   	pop    esi
c000b782:	e9 b7 a2 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c000b787:	90                   	nop

c000b788 <Computer::setDiskActivityLight(int, bool)>:
c000b788:	56                   	push   esi
c000b789:	53                   	push   ebx
c000b78a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b78e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b793:	77 1c                	ja     c000b7b1 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b795:	e4 92                	in     al,0x92
c000b797:	bb 40 00 00 00       	mov    ebx,0x40
c000b79c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7a0:	89 da                	mov    edx,ebx
c000b7a2:	d3 e2                	shl    edx,cl
c000b7a4:	83 f2 ff             	xor    edx,0xffffffff
c000b7a7:	89 f1                	mov    ecx,esi
c000b7a9:	21 d0                	and    eax,edx
c000b7ab:	d3 e3                	shl    ebx,cl
c000b7ad:	09 d8                	or     eax,ebx
c000b7af:	e6 92                	out    0x92,al
c000b7b1:	5b                   	pop    ebx
c000b7b2:	5e                   	pop    esi
c000b7b3:	c3                   	ret    

c000b7b4 <GDTEntry::setBase(unsigned int)>:
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7bc:	89 c1                	mov    ecx,eax
c000b7be:	c1 e9 10             	shr    ecx,0x10
c000b7c1:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7c5:	c1 e8 18             	shr    eax,0x18
c000b7c8:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7cb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7ce:	c3                   	ret    
c000b7cf:	90                   	nop

c000b7d0 <GDTEntry::setLimit(unsigned int)>:
c000b7d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7d8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7db:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7de:	c1 e8 10             	shr    eax,0x10
c000b7e1:	83 e2 f0             	and    edx,0xfffffff0
c000b7e4:	83 e0 0f             	and    eax,0xf
c000b7e7:	09 d0                	or     eax,edx
c000b7e9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7ec:	c3                   	ret    
c000b7ed:	90                   	nop

c000b7ee <GDT::GDT()>:
c000b7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b802:	90                   	nop
c000b803:	c3                   	ret    

c000b804 <GDT::addEntry(GDTEntry)>:
c000b804:	53                   	push   ebx
c000b805:	83 ec 0c             	sub    esp,0xc
c000b808:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b80c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b80e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b815:	52                   	push   edx
c000b816:	50                   	push   eax
c000b817:	68 c8 12 02 c0       	push   0xc00212c8
c000b81c:	e8 ee 39 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000b821:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b823:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b827:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b82b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b82f:	8d 50 01             	lea    edx,[eax+0x1]
c000b832:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b836:	89 13                	mov    DWORD PTR [ebx],edx
c000b838:	c1 e0 03             	shl    eax,0x3
c000b83b:	83 c4 18             	add    esp,0x18
c000b83e:	5b                   	pop    ebx
c000b83f:	c3                   	ret    

c000b840 <GDT::getNumberOfEntries()>:
c000b840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b844:	8b 00                	mov    eax,DWORD PTR [eax]
c000b846:	c3                   	ret    
c000b847:	90                   	nop

c000b848 <GDT::flush()>:
c000b848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84c:	83 c0 04             	add    eax,0x4
c000b84f:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b852:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b857:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b85e:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b865:	e9 80 4b ff ff       	jmp    c00003ea <loadGDT>

c000b86a <GDT::setup()>:
c000b86a:	55                   	push   ebp
c000b86b:	57                   	push   edi
c000b86c:	56                   	push   esi
c000b86d:	53                   	push   ebx
c000b86e:	83 ec 3c             	sub    esp,0x3c
c000b871:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b875:	6a 00                	push   0x0
c000b877:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b87b:	53                   	push   ebx
c000b87c:	e8 33 ff ff ff       	call   c000b7b4 <GDTEntry::setBase(unsigned int)>
c000b881:	6a 00                	push   0x0
c000b883:	53                   	push   ebx
c000b884:	e8 47 ff ff ff       	call   c000b7d0 <GDTEntry::setLimit(unsigned int)>
c000b889:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b891:	6a 00                	push   0x0
c000b893:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b897:	53                   	push   ebx
c000b898:	e8 17 ff ff ff       	call   c000b7b4 <GDTEntry::setBase(unsigned int)>
c000b89d:	68 ff ff ff 00       	push   0xffffff
c000b8a2:	53                   	push   ebx
c000b8a3:	e8 28 ff ff ff       	call   c000b7d0 <GDTEntry::setLimit(unsigned int)>
c000b8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8b1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8ba:	83 c4 20             	add    esp,0x20
c000b8bd:	6a 00                	push   0x0
c000b8bf:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8c3:	53                   	push   ebx
c000b8c4:	e8 eb fe ff ff       	call   c000b7b4 <GDTEntry::setBase(unsigned int)>
c000b8c9:	68 ff ff ff 00       	push   0xffffff
c000b8ce:	53                   	push   ebx
c000b8cf:	e8 fc fe ff ff       	call   c000b7d0 <GDTEntry::setLimit(unsigned int)>
c000b8d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8dc:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8e1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8e5:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8ea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8ee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8f2:	89 d8                	mov    eax,ebx
c000b8f4:	80 cc 60             	or     ah,0x60
c000b8f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b8ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b903:	83 c4 0c             	add    esp,0xc
c000b906:	89 f8                	mov    eax,edi
c000b908:	80 cc 60             	or     ah,0x60
c000b90b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b913:	89 c7                	mov    edi,eax
c000b915:	55                   	push   ebp
c000b916:	e8 e9 fe ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000b91b:	83 c4 0c             	add    esp,0xc
c000b91e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b922:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b926:	55                   	push   ebp
c000b927:	e8 d8 fe ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000b92c:	83 c4 0c             	add    esp,0xc
c000b92f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b937:	55                   	push   ebp
c000b938:	e8 c7 fe ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000b93d:	83 c4 0c             	add    esp,0xc
c000b940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b948:	53                   	push   ebx
c000b949:	51                   	push   ecx
c000b94a:	55                   	push   ebp
c000b94b:	e8 b4 fe ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000b950:	83 c4 0c             	add    esp,0xc
c000b953:	57                   	push   edi
c000b954:	56                   	push   esi
c000b955:	55                   	push   ebp
c000b956:	e8 a9 fe ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000b95b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b95e:	e8 e5 fe ff ff       	call   c000b848 <GDT::flush()>
c000b963:	83 c4 4c             	add    esp,0x4c
c000b966:	5b                   	pop    ebx
c000b967:	5e                   	pop    esi
c000b968:	5f                   	pop    edi
c000b969:	5d                   	pop    ebp
c000b96a:	c3                   	ret    

c000b96b <idleFunction(void*)>:
c000b96b:	53                   	push   ebx
c000b96c:	83 ec 08             	sub    esp,0x8
c000b96f:	e8 d5 d0 00 00       	call   c0018a49 <unlockScheduler()>
c000b974:	e8 59 8f 00 00       	call   c00148d2 <thisCPU()>
c000b979:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b980:	74 41                	je     c000b9c3 <idleFunction(void*)+0x58>
c000b982:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b987:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b98e:	74 33                	je     c000b9c3 <idleFunction(void*)+0x58>
c000b990:	52                   	push   edx
c000b991:	31 db                	xor    ebx,ebx
c000b993:	52                   	push   edx
c000b994:	68 e1 00 00 00       	push   0xe1
c000b999:	50                   	push   eax
c000b99a:	e8 db fb ff ff       	call   c000b57a <Computer::rdmsr(unsigned int)>
c000b99f:	53                   	push   ebx
c000b9a0:	83 e0 02             	and    eax,0x2
c000b9a3:	50                   	push   eax
c000b9a4:	68 e1 00 00 00       	push   0xe1
c000b9a9:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9af:	e8 f2 fb ff ff       	call   c000b5a6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9b4:	83 c4 20             	add    esp,0x20
c000b9b7:	e8 46 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9bc:	e8 0f 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9c1:	eb f4                	jmp    c000b9b7 <idleFunction(void*)+0x4c>
c000b9c3:	fb                   	sti    
c000b9c4:	f4                   	hlt    
c000b9c5:	e8 06 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9ca:	eb f7                	jmp    c000b9c3 <idleFunction(void*)+0x58>

c000b9cc <IDTEntry::IDTEntry(bool)>:
c000b9cc:	83 ec 04             	sub    esp,0x4
c000b9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d3:	88 04 24             	mov    BYTE PTR [esp],al
c000b9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9da:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9ec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9ef:	83 e2 f0             	and    edx,0xfffffff0
c000b9f2:	83 ca 0e             	or     edx,0xe
c000b9f5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9ff:	83 e2 ef             	and    edx,0xffffffef
c000ba02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba09:	74 04                	je     c000ba0f <IDTEntry::IDTEntry(bool)+0x43>
c000ba0b:	b2 03                	mov    dl,0x3
c000ba0d:	eb 02                	jmp    c000ba11 <IDTEntry::IDTEntry(bool)+0x45>
c000ba0f:	b2 00                	mov    dl,0x0
c000ba11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba15:	83 e2 03             	and    edx,0x3
c000ba18:	88 d1                	mov    cl,dl
c000ba1a:	c1 e1 05             	shl    ecx,0x5
c000ba1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba20:	83 e2 9f             	and    edx,0xffffff9f
c000ba23:	09 ca                	or     edx,ecx
c000ba25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2f:	83 ca 80             	or     edx,0xffffff80
c000ba32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba35:	90                   	nop
c000ba36:	83 c4 04             	add    esp,0x4
c000ba39:	c3                   	ret    

c000ba3a <IDTEntry::setOffset(unsigned int)>:
c000ba3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba42:	66 89 02             	mov    WORD PTR [edx],ax
c000ba45:	c1 e8 10             	shr    eax,0x10
c000ba48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba4c:	c3                   	ret    
c000ba4d:	90                   	nop

c000ba4e <IDT::IDT()>:
c000ba4e:	90                   	nop
c000ba4f:	c3                   	ret    

c000ba50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba54:	83 c0 30             	add    eax,0x30
c000ba57:	c3                   	ret    

c000ba58 <IDT::addEntry(IDTEntry, int)>:
c000ba58:	53                   	push   ebx
c000ba59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba70:	5b                   	pop    ebx
c000ba71:	c3                   	ret    

c000ba72 <IDT::addEntry(int, void (*)(), bool)>:
c000ba72:	53                   	push   ebx
c000ba73:	83 ec 10             	sub    esp,0x10
c000ba76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba7b:	50                   	push   eax
c000ba7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba80:	53                   	push   ebx
c000ba81:	e8 46 ff ff ff       	call   c000b9cc <IDTEntry::IDTEntry(bool)>
c000ba86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba8a:	53                   	push   ebx
c000ba8b:	e8 aa ff ff ff       	call   c000ba3a <IDTEntry::setOffset(unsigned int)>
c000ba90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa0:	e8 b3 ff ff ff       	call   c000ba58 <IDT::addEntry(IDTEntry, int)>
c000baa5:	83 c4 30             	add    esp,0x30
c000baa8:	5b                   	pop    ebx
c000baa9:	c3                   	ret    

c000baaa <IDT::flush()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000bab7:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000babc:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000bac3:	c3                   	ret    

c000bac4 <IDT::setup()>:
c000bac4:	57                   	push   edi
c000bac5:	56                   	push   esi
c000bac6:	53                   	push   ebx
c000bac7:	83 ec 10             	sub    esp,0x10
c000baca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bace:	6a 00                	push   0x0
c000bad0:	68 0a 04 00 c0       	push   0xc000040a
c000bad5:	6a 00                	push   0x0
c000bad7:	53                   	push   ebx
c000bad8:	e8 95 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000badd:	6a 00                	push   0x0
c000badf:	68 1a 04 00 c0       	push   0xc000041a
c000bae4:	6a 01                	push   0x1
c000bae6:	53                   	push   ebx
c000bae7:	e8 86 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000baec:	83 c4 20             	add    esp,0x20
c000baef:	6a 00                	push   0x0
c000baf1:	68 24 04 00 c0       	push   0xc0000424
c000baf6:	6a 02                	push   0x2
c000baf8:	53                   	push   ebx
c000baf9:	e8 74 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bafe:	6a 00                	push   0x0
c000bb00:	68 2e 04 00 c0       	push   0xc000042e
c000bb05:	6a 03                	push   0x3
c000bb07:	53                   	push   ebx
c000bb08:	e8 65 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb0d:	83 c4 20             	add    esp,0x20
c000bb10:	6a 00                	push   0x0
c000bb12:	68 38 04 00 c0       	push   0xc0000438
c000bb17:	6a 04                	push   0x4
c000bb19:	53                   	push   ebx
c000bb1a:	e8 53 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb1f:	6a 00                	push   0x0
c000bb21:	68 42 04 00 c0       	push   0xc0000442
c000bb26:	6a 05                	push   0x5
c000bb28:	53                   	push   ebx
c000bb29:	e8 44 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb2e:	83 c4 20             	add    esp,0x20
c000bb31:	6a 00                	push   0x0
c000bb33:	68 4c 04 00 c0       	push   0xc000044c
c000bb38:	6a 06                	push   0x6
c000bb3a:	53                   	push   ebx
c000bb3b:	e8 32 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb40:	6a 00                	push   0x0
c000bb42:	68 56 04 00 c0       	push   0xc0000456
c000bb47:	6a 07                	push   0x7
c000bb49:	53                   	push   ebx
c000bb4a:	e8 23 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb4f:	83 c4 20             	add    esp,0x20
c000bb52:	6a 00                	push   0x0
c000bb54:	68 60 04 00 c0       	push   0xc0000460
c000bb59:	6a 08                	push   0x8
c000bb5b:	53                   	push   ebx
c000bb5c:	e8 11 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb61:	6a 00                	push   0x0
c000bb63:	68 68 04 00 c0       	push   0xc0000468
c000bb68:	6a 09                	push   0x9
c000bb6a:	53                   	push   ebx
c000bb6b:	e8 02 ff ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb70:	83 c4 20             	add    esp,0x20
c000bb73:	6a 00                	push   0x0
c000bb75:	68 72 04 00 c0       	push   0xc0000472
c000bb7a:	6a 0a                	push   0xa
c000bb7c:	53                   	push   ebx
c000bb7d:	e8 f0 fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb82:	6a 00                	push   0x0
c000bb84:	68 7a 04 00 c0       	push   0xc000047a
c000bb89:	6a 0b                	push   0xb
c000bb8b:	53                   	push   ebx
c000bb8c:	e8 e1 fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bb91:	83 c4 20             	add    esp,0x20
c000bb94:	6a 00                	push   0x0
c000bb96:	68 82 04 00 c0       	push   0xc0000482
c000bb9b:	6a 0c                	push   0xc
c000bb9d:	53                   	push   ebx
c000bb9e:	e8 cf fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bba3:	6a 00                	push   0x0
c000bba5:	68 8a 04 00 c0       	push   0xc000048a
c000bbaa:	6a 0d                	push   0xd
c000bbac:	53                   	push   ebx
c000bbad:	e8 c0 fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bbb2:	83 c4 20             	add    esp,0x20
c000bbb5:	6a 00                	push   0x0
c000bbb7:	68 92 04 00 c0       	push   0xc0000492
c000bbbc:	6a 0e                	push   0xe
c000bbbe:	53                   	push   ebx
c000bbbf:	e8 ae fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bbc4:	6a 00                	push   0x0
c000bbc6:	68 9a 04 00 c0       	push   0xc000049a
c000bbcb:	6a 0f                	push   0xf
c000bbcd:	53                   	push   ebx
c000bbce:	e8 9f fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bbd3:	83 c4 20             	add    esp,0x20
c000bbd6:	6a 00                	push   0x0
c000bbd8:	68 a4 04 00 c0       	push   0xc00004a4
c000bbdd:	6a 10                	push   0x10
c000bbdf:	53                   	push   ebx
c000bbe0:	e8 8d fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bbe5:	6a 00                	push   0x0
c000bbe7:	68 ae 04 00 c0       	push   0xc00004ae
c000bbec:	6a 11                	push   0x11
c000bbee:	53                   	push   ebx
c000bbef:	e8 7e fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bbf4:	83 c4 20             	add    esp,0x20
c000bbf7:	6a 00                	push   0x0
c000bbf9:	68 b8 04 00 c0       	push   0xc00004b8
c000bbfe:	6a 12                	push   0x12
c000bc00:	53                   	push   ebx
c000bc01:	e8 6c fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc06:	6a 01                	push   0x1
c000bc08:	68 c2 04 00 c0       	push   0xc00004c2
c000bc0d:	6a 60                	push   0x60
c000bc0f:	53                   	push   ebx
c000bc10:	e8 5d fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc15:	83 c4 20             	add    esp,0x20
c000bc18:	6a 00                	push   0x0
c000bc1a:	68 cc 04 00 c0       	push   0xc00004cc
c000bc1f:	6a 20                	push   0x20
c000bc21:	53                   	push   ebx
c000bc22:	e8 4b fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc27:	6a 00                	push   0x0
c000bc29:	68 d6 04 00 c0       	push   0xc00004d6
c000bc2e:	6a 21                	push   0x21
c000bc30:	53                   	push   ebx
c000bc31:	e8 3c fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc36:	83 c4 20             	add    esp,0x20
c000bc39:	6a 00                	push   0x0
c000bc3b:	68 e0 04 00 c0       	push   0xc00004e0
c000bc40:	6a 22                	push   0x22
c000bc42:	53                   	push   ebx
c000bc43:	e8 2a fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc48:	6a 00                	push   0x0
c000bc4a:	68 ea 04 00 c0       	push   0xc00004ea
c000bc4f:	6a 23                	push   0x23
c000bc51:	53                   	push   ebx
c000bc52:	e8 1b fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc57:	83 c4 20             	add    esp,0x20
c000bc5a:	6a 00                	push   0x0
c000bc5c:	68 f4 04 00 c0       	push   0xc00004f4
c000bc61:	6a 24                	push   0x24
c000bc63:	53                   	push   ebx
c000bc64:	e8 09 fe ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc69:	6a 00                	push   0x0
c000bc6b:	68 fe 04 00 c0       	push   0xc00004fe
c000bc70:	6a 25                	push   0x25
c000bc72:	53                   	push   ebx
c000bc73:	e8 fa fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc78:	83 c4 20             	add    esp,0x20
c000bc7b:	6a 00                	push   0x0
c000bc7d:	68 08 05 00 c0       	push   0xc0000508
c000bc82:	6a 26                	push   0x26
c000bc84:	53                   	push   ebx
c000bc85:	e8 e8 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc8a:	6a 00                	push   0x0
c000bc8c:	68 12 05 00 c0       	push   0xc0000512
c000bc91:	6a 27                	push   0x27
c000bc93:	53                   	push   ebx
c000bc94:	e8 d9 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bc99:	83 c4 20             	add    esp,0x20
c000bc9c:	6a 00                	push   0x0
c000bc9e:	68 1c 05 00 c0       	push   0xc000051c
c000bca3:	6a 28                	push   0x28
c000bca5:	53                   	push   ebx
c000bca6:	e8 c7 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bcab:	6a 00                	push   0x0
c000bcad:	68 26 05 00 c0       	push   0xc0000526
c000bcb2:	6a 29                	push   0x29
c000bcb4:	53                   	push   ebx
c000bcb5:	e8 b8 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bcba:	83 c4 20             	add    esp,0x20
c000bcbd:	6a 00                	push   0x0
c000bcbf:	68 30 05 00 c0       	push   0xc0000530
c000bcc4:	6a 2a                	push   0x2a
c000bcc6:	53                   	push   ebx
c000bcc7:	e8 a6 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bccc:	6a 00                	push   0x0
c000bcce:	68 3a 05 00 c0       	push   0xc000053a
c000bcd3:	6a 2b                	push   0x2b
c000bcd5:	53                   	push   ebx
c000bcd6:	e8 97 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bcdb:	83 c4 20             	add    esp,0x20
c000bcde:	6a 00                	push   0x0
c000bce0:	68 44 05 00 c0       	push   0xc0000544
c000bce5:	6a 2c                	push   0x2c
c000bce7:	53                   	push   ebx
c000bce8:	e8 85 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bced:	6a 00                	push   0x0
c000bcef:	68 4e 05 00 c0       	push   0xc000054e
c000bcf4:	6a 2d                	push   0x2d
c000bcf6:	53                   	push   ebx
c000bcf7:	e8 76 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bcfc:	83 c4 20             	add    esp,0x20
c000bcff:	6a 00                	push   0x0
c000bd01:	68 58 05 00 c0       	push   0xc0000558
c000bd06:	6a 2e                	push   0x2e
c000bd08:	53                   	push   ebx
c000bd09:	e8 64 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd0e:	6a 00                	push   0x0
c000bd10:	68 62 05 00 c0       	push   0xc0000562
c000bd15:	6a 2f                	push   0x2f
c000bd17:	53                   	push   ebx
c000bd18:	e8 55 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd1d:	83 c4 20             	add    esp,0x20
c000bd20:	6a 00                	push   0x0
c000bd22:	68 6c 05 00 c0       	push   0xc000056c
c000bd27:	6a 30                	push   0x30
c000bd29:	53                   	push   ebx
c000bd2a:	e8 43 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd2f:	6a 00                	push   0x0
c000bd31:	68 76 05 00 c0       	push   0xc0000576
c000bd36:	6a 31                	push   0x31
c000bd38:	53                   	push   ebx
c000bd39:	e8 34 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd3e:	83 c4 20             	add    esp,0x20
c000bd41:	6a 00                	push   0x0
c000bd43:	68 80 05 00 c0       	push   0xc0000580
c000bd48:	6a 32                	push   0x32
c000bd4a:	53                   	push   ebx
c000bd4b:	e8 22 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd50:	6a 00                	push   0x0
c000bd52:	68 8a 05 00 c0       	push   0xc000058a
c000bd57:	6a 33                	push   0x33
c000bd59:	53                   	push   ebx
c000bd5a:	e8 13 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd5f:	83 c4 20             	add    esp,0x20
c000bd62:	6a 00                	push   0x0
c000bd64:	68 94 05 00 c0       	push   0xc0000594
c000bd69:	6a 34                	push   0x34
c000bd6b:	53                   	push   ebx
c000bd6c:	e8 01 fd ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd71:	6a 00                	push   0x0
c000bd73:	68 9e 05 00 c0       	push   0xc000059e
c000bd78:	6a 35                	push   0x35
c000bd7a:	53                   	push   ebx
c000bd7b:	e8 f2 fc ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd80:	83 c4 20             	add    esp,0x20
c000bd83:	6a 00                	push   0x0
c000bd85:	68 a8 05 00 c0       	push   0xc00005a8
c000bd8a:	6a 36                	push   0x36
c000bd8c:	53                   	push   ebx
c000bd8d:	e8 e0 fc ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bd92:	6a 00                	push   0x0
c000bd94:	68 b2 05 00 c0       	push   0xc00005b2
c000bd99:	6a 37                	push   0x37
c000bd9b:	53                   	push   ebx
c000bd9c:	e8 d1 fc ff ff       	call   c000ba72 <IDT::addEntry(int, void (*)(), bool)>
c000bda1:	83 c4 20             	add    esp,0x20
c000bda4:	e8 d8 25 00 00       	call   c000e381 <Virt::getAKernelVAS()>
c000bda9:	52                   	push   edx
c000bdaa:	6a 03                	push   0x3
c000bdac:	6a 02                	push   0x2
c000bdae:	50                   	push   eax
c000bdaf:	e8 0e 2c 00 00       	call   c000e9c2 <VAS::allocatePages(int, int)>
c000bdb4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdbb:	89 c6                	mov    esi,eax
c000bdbd:	e8 18 33 00 00       	call   c000f0da <operator new(unsigned long)>
c000bdc2:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdc8:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdcb:	89 c7                	mov    edi,eax
c000bdcd:	e8 ee 1c 00 00       	call   c000dac0 <TSS::TSS()>
c000bdd2:	83 c4 0c             	add    esp,0xc
c000bdd5:	68 60 04 00 c0       	push   0xc0000460
c000bdda:	56                   	push   esi
c000bddb:	57                   	push   edi
c000bddc:	e8 1f 1d 00 00       	call   c000db00 <TSS::setup(unsigned long, unsigned long)>
c000bde1:	59                   	pop    ecx
c000bde2:	89 c6                	mov    esi,eax
c000bde4:	5f                   	pop    edi
c000bde5:	6a 00                	push   0x0
c000bde7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdeb:	50                   	push   eax
c000bdec:	e8 db fb ff ff       	call   c000b9cc <IDTEntry::IDTEntry(bool)>
c000bdf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdf5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdfa:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be00:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be07:	80 ce 05             	or     dh,0x5
c000be0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be12:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be19:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be1f:	e8 86 fc ff ff       	call   c000baaa <IDT::flush()>
c000be24:	83 c4 20             	add    esp,0x20
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	c3                   	ret    

c000be2b <sbrk>:
c000be2b:	55                   	push   ebp
c000be2c:	57                   	push   edi
c000be2d:	56                   	push   esi
c000be2e:	53                   	push   ebx
c000be2f:	83 ec 1c             	sub    esp,0x1c
c000be32:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be36:	85 db                	test   ebx,ebx
c000be38:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be3d:	0f 84 e4 00 00 00    	je     c000bf27 <sbrk+0xfc>
c000be43:	78 3d                	js     c000be82 <sbrk+0x57>
c000be45:	e8 88 8a 00 00       	call   c00148d2 <thisCPU()>
c000be4a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be50:	83 e0 01             	and    eax,0x1
c000be53:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be57:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be60:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be66:	89 d8                	mov    eax,ebx
c000be68:	c1 f8 1f             	sar    eax,0x1f
c000be6b:	25 ff 0f 00 00       	and    eax,0xfff
c000be70:	01 c3                	add    ebx,eax
c000be72:	c1 fb 0c             	sar    ebx,0xc
c000be75:	89 df                	mov    edi,ebx
c000be77:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be7b:	be 00 00 00 00       	mov    esi,0x0
c000be80:	eb 2a                	jmp    c000beac <sbrk+0x81>
c000be82:	83 ec 08             	sub    esp,0x8
c000be85:	53                   	push   ebx
c000be86:	68 e4 12 02 c0       	push   0xc00212e4
c000be8b:	e8 7f 33 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be98:	e9 8a 00 00 00       	jmp    c000bf27 <sbrk+0xfc>
c000be9d:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000bea7:	46                   	inc    esi
c000bea8:	39 f7                	cmp    edi,esi
c000beaa:	74 34                	je     c000bee0 <sbrk+0xb5>
c000beac:	e8 d0 24 00 00       	call   c000e381 <Virt::getAKernelVAS()>
c000beb1:	89 c3                	mov    ebx,eax
c000beb3:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000beb9:	e8 f5 06 00 00       	call   c000c5b3 <Phys::allocatePage()>
c000bebe:	68 01 04 00 00       	push   0x401
c000bec3:	55                   	push   ebp
c000bec4:	50                   	push   eax
c000bec5:	53                   	push   ebx
c000bec6:	e8 f5 29 00 00       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000becb:	83 c4 10             	add    esp,0x10
c000bece:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bed3:	74 c8                	je     c000be9d <sbrk+0x72>
c000bed5:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000bedb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bede:	eb bd                	jmp    c000be9d <sbrk+0x72>
c000bee0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee5:	74 48                	je     c000bf2f <sbrk+0x104>
c000bee7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000beeb:	89 d3                	mov    ebx,edx
c000beed:	c1 eb 0a             	shr    ebx,0xa
c000bef0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bef6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000befc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf00:	c1 e0 0c             	shl    eax,0xc
c000bf03:	01 d0                	add    eax,edx
c000bf05:	c1 e8 0a             	shr    eax,0xa
c000bf08:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf0d:	2d 00 00 40 00       	sub    eax,0x400000
c000bf12:	39 c3                	cmp    ebx,eax
c000bf14:	77 0d                	ja     c000bf23 <sbrk+0xf8>
c000bf16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf19:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf1f:	39 d8                	cmp    eax,ebx
c000bf21:	73 f3                	jae    c000bf16 <sbrk+0xeb>
c000bf23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf27:	83 c4 1c             	add    esp,0x1c
c000bf2a:	5b                   	pop    ebx
c000bf2b:	5e                   	pop    esi
c000bf2c:	5f                   	pop    edi
c000bf2d:	5d                   	pop    ebp
c000bf2e:	c3                   	ret    
c000bf2f:	e8 b1 38 01 00       	call   c001f7e5 <CPU::readCR3()>
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	50                   	push   eax
c000bf38:	e8 ba 38 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	eb e1                	jmp    c000bf23 <sbrk+0xf8>

c000bf42 <mmap>:
c000bf42:	83 ec 18             	sub    esp,0x18
c000bf45:	68 14 13 02 c0       	push   0xc0021314
c000bf4a:	e8 ef 9a 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000bf4f:	b8 00 00 00 00       	mov    eax,0x0
c000bf54:	83 c4 1c             	add    esp,0x1c
c000bf57:	c3                   	ret    

c000bf58 <munmap>:
c000bf58:	83 ec 18             	sub    esp,0x18
c000bf5b:	68 19 13 02 c0       	push   0xc0021319
c000bf60:	e8 d9 9a 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000bf65:	b8 00 00 00 00       	mov    eax,0x0
c000bf6a:	83 c4 1c             	add    esp,0x1c
c000bf6d:	c3                   	ret    

c000bf6e <liballoc_lock()>:
c000bf6e:	83 ec 0c             	sub    esp,0xc
c000bf71:	e8 d1 ca 00 00       	call   c0018a47 <lockScheduler()>
c000bf76:	b8 00 00 00 00       	mov    eax,0x0
c000bf7b:	83 c4 0c             	add    esp,0xc
c000bf7e:	c3                   	ret    

c000bf7f <liballoc_unlock()>:
c000bf7f:	83 ec 0c             	sub    esp,0xc
c000bf82:	e8 c2 ca 00 00       	call   c0018a49 <unlockScheduler()>
c000bf87:	b8 00 00 00 00       	mov    eax,0x0
c000bf8c:	83 c4 0c             	add    esp,0xc
c000bf8f:	c3                   	ret    

c000bf90 <liballoc_alloc(int)>:
c000bf90:	83 ec 0c             	sub    esp,0xc
c000bf93:	e8 e9 23 00 00       	call   c000e381 <Virt::getAKernelVAS()>
c000bf98:	83 ec 04             	sub    esp,0x4
c000bf9b:	6a 01                	push   0x1
c000bf9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa1:	50                   	push   eax
c000bfa2:	e8 1b 2a 00 00       	call   c000e9c2 <VAS::allocatePages(int, int)>
c000bfa7:	83 c4 1c             	add    esp,0x1c
c000bfaa:	c3                   	ret    

c000bfab <liballoc_free(void*, int)>:
c000bfab:	83 ec 0c             	sub    esp,0xc
c000bfae:	e8 ce 23 00 00       	call   c000e381 <Virt::getAKernelVAS()>
c000bfb3:	83 ec 08             	sub    esp,0x8
c000bfb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfba:	50                   	push   eax
c000bfbb:	e8 a2 26 00 00       	call   c000e662 <VAS::freeAllocatedPages(unsigned long)>
c000bfc0:	b8 00 00 00 00       	mov    eax,0x0
c000bfc5:	83 c4 1c             	add    esp,0x1c
c000bfc8:	c3                   	ret    

c000bfc9 <realloc>:
c000bfc9:	83 ec 14             	sub    esp,0x14
c000bfcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd4:	e8 64 54 ff ff       	call   c000143d <dlrealloc>
c000bfd9:	83 c4 1c             	add    esp,0x1c
c000bfdc:	c3                   	ret    

c000bfdd <malloc>:
c000bfdd:	83 ec 18             	sub    esp,0x18
c000bfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe4:	e8 17 4f ff ff       	call   c0000f00 <dlmalloc>
c000bfe9:	83 c4 1c             	add    esp,0x1c
c000bfec:	c3                   	ret    

c000bfed <free>:
c000bfed:	83 ec 18             	sub    esp,0x18
c000bff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff4:	e8 a9 4b ff ff       	call   c0000ba2 <dlfree>
c000bff9:	83 c4 1c             	add    esp,0x1c
c000bffc:	c3                   	ret    

c000bffd <rfree>:
c000bffd:	83 ec 18             	sub    esp,0x18
c000c000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c004:	e8 e4 ff ff ff       	call   c000bfed <free>
c000c009:	83 c4 1c             	add    esp,0x1c
c000c00c:	c3                   	ret    

c000c00d <calloc>:
c000c00d:	56                   	push   esi
c000c00e:	53                   	push   ebx
c000c00f:	83 ec 10             	sub    esp,0x10
c000c012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c016:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c01b:	53                   	push   ebx
c000c01c:	e8 bc ff ff ff       	call   c000bfdd <malloc>
c000c021:	89 c6                	mov    esi,eax
c000c023:	83 c4 0c             	add    esp,0xc
c000c026:	53                   	push   ebx
c000c027:	6a 00                	push   0x0
c000c029:	50                   	push   eax
c000c02a:	e8 90 46 ff ff       	call   c00006bf <memset>
c000c02f:	89 f0                	mov    eax,esi
c000c031:	83 c4 14             	add    esp,0x14
c000c034:	5b                   	pop    ebx
c000c035:	5e                   	pop    esi
c000c036:	c3                   	ret    

c000c037 <hwTextMode_loadInData(VgaText*)>:
c000c037:	57                   	push   edi
c000c038:	56                   	push   esi
c000c039:	53                   	push   ebx
c000c03a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c03e:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c044:	85 c0                	test   eax,eax
c000c046:	7e 30                	jle    c000c078 <hwTextMode_loadInData(VgaText*)+0x41>
c000c048:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c04b:	31 f6                	xor    esi,esi
c000c04d:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c050:	31 c0                	xor    eax,eax
c000c052:	c1 e1 05             	shl    ecx,0x5
c000c055:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c05b:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c05f:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c063:	40                   	inc    eax
c000c064:	83 f8 50             	cmp    eax,0x50
c000c067:	75 f2                	jne    c000c05b <hwTextMode_loadInData(VgaText*)+0x24>
c000c069:	46                   	inc    esi
c000c06a:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c070:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c076:	7f d5                	jg     c000c04d <hwTextMode_loadInData(VgaText*)+0x16>
c000c078:	5b                   	pop    ebx
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	c3                   	ret    

c000c07c <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c07c:	56                   	push   esi
c000c07d:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c082:	53                   	push   ebx
c000c083:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c087:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c08b:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c091:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c097:	c1 e0 04             	shl    eax,0x4
c000c09a:	83 e6 0f             	and    esi,0xf
c000c09d:	25 ff 00 00 00       	and    eax,0xff
c000c0a2:	83 c2 02             	add    edx,0x2
c000c0a5:	09 f0                	or     eax,esi
c000c0a7:	41                   	inc    ecx
c000c0a8:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0ac:	c1 e0 08             	shl    eax,0x8
c000c0af:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0b5:	09 f0                	or     eax,esi
c000c0b7:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0bb:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0c1:	75 c8                	jne    c000c08b <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0c3:	5b                   	pop    ebx
c000c0c4:	5e                   	pop    esi
c000c0c5:	c3                   	ret    

c000c0c6 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0c6:	56                   	push   esi
c000c0c7:	53                   	push   ebx
c000c0c8:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0cd:	74 38                	je     c000c107 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0cf:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0d4:	b0 0a                	mov    al,0xa
c000c0d6:	89 da                	mov    edx,ebx
c000c0d8:	ee                   	out    dx,al
c000c0d9:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0de:	89 ca                	mov    edx,ecx
c000c0e0:	ec                   	in     al,dx
c000c0e1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0e5:	b2 0f                	mov    dl,0xf
c000c0e7:	83 e0 c0             	and    eax,0xffffffc0
c000c0ea:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0f0:	09 d0                	or     eax,edx
c000c0f2:	89 ca                	mov    edx,ecx
c000c0f4:	ee                   	out    dx,al
c000c0f5:	b0 0b                	mov    al,0xb
c000c0f7:	89 da                	mov    edx,ebx
c000c0f9:	ee                   	out    dx,al
c000c0fa:	89 ca                	mov    edx,ecx
c000c0fc:	ec                   	in     al,dx
c000c0fd:	83 e0 e0             	and    eax,0xffffffe0
c000c100:	83 c8 0f             	or     eax,0xf
c000c103:	ee                   	out    dx,al
c000c104:	5b                   	pop    ebx
c000c105:	5e                   	pop    esi
c000c106:	c3                   	ret    
c000c107:	b0 0a                	mov    al,0xa
c000c109:	ba d4 03 00 00       	mov    edx,0x3d4
c000c10e:	ee                   	out    dx,al
c000c10f:	b0 20                	mov    al,0x20
c000c111:	ba d5 03 00 00       	mov    edx,0x3d5
c000c116:	ee                   	out    dx,al
c000c117:	5b                   	pop    ebx
c000c118:	5e                   	pop    esi
c000c119:	c3                   	ret    

c000c11a <hwTextMode_update(VgaText*)>:
c000c11a:	c3                   	ret    

c000c11b <hwTextMode_updateCursor(VgaText*)>:
c000c11b:	56                   	push   esi
c000c11c:	b9 19 00 00 00       	mov    ecx,0x19
c000c121:	53                   	push   ebx
c000c122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c126:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c12c:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c132:	29 d1                	sub    ecx,edx
c000c134:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c13a:	01 d9                	add    ecx,ebx
c000c13c:	b0 0f                	mov    al,0xf
c000c13e:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c141:	c1 e1 04             	shl    ecx,0x4
c000c144:	01 f1                	add    ecx,esi
c000c146:	be d4 03 00 00       	mov    esi,0x3d4
c000c14b:	89 f2                	mov    edx,esi
c000c14d:	ee                   	out    dx,al
c000c14e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c153:	88 c8                	mov    al,cl
c000c155:	89 da                	mov    edx,ebx
c000c157:	ee                   	out    dx,al
c000c158:	b0 0e                	mov    al,0xe
c000c15a:	89 f2                	mov    edx,esi
c000c15c:	ee                   	out    dx,al
c000c15d:	89 c8                	mov    eax,ecx
c000c15f:	89 da                	mov    edx,ebx
c000c161:	66 c1 e8 08          	shr    ax,0x8
c000c165:	ee                   	out    dx,al
c000c166:	5b                   	pop    ebx
c000c167:	5e                   	pop    esi
c000c168:	c3                   	ret    

c000c169 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c169:	ba da 03 00 00       	mov    edx,0x3da
c000c16e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c173:	75 18                	jne    c000c18d <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c175:	ec                   	in     al,dx
c000c176:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c17b:	b0 30                	mov    al,0x30
c000c17d:	89 ca                	mov    edx,ecx
c000c17f:	ee                   	out    dx,al
c000c180:	ba c1 03 00 00       	mov    edx,0x3c1
c000c185:	ec                   	in     al,dx
c000c186:	83 c8 08             	or     eax,0x8
c000c189:	89 ca                	mov    edx,ecx
c000c18b:	ee                   	out    dx,al
c000c18c:	c3                   	ret    
c000c18d:	ec                   	in     al,dx
c000c18e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c193:	b0 30                	mov    al,0x30
c000c195:	89 ca                	mov    edx,ecx
c000c197:	ee                   	out    dx,al
c000c198:	ba c1 03 00 00       	mov    edx,0x3c1
c000c19d:	ec                   	in     al,dx
c000c19e:	83 e0 f7             	and    eax,0xfffffff7
c000c1a1:	89 ca                	mov    edx,ecx
c000c1a3:	ee                   	out    dx,al
c000c1a4:	c3                   	ret    

c000c1a5 <hwTextMode_scrollScreen(VgaText*)>:
c000c1a5:	55                   	push   ebp
c000c1a6:	bd 02 00 00 00       	mov    ebp,0x2
c000c1ab:	57                   	push   edi
c000c1ac:	56                   	push   esi
c000c1ad:	53                   	push   ebx
c000c1ae:	83 ec 1c             	sub    esp,0x1c
c000c1b1:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1bd:	31 c0                	xor    eax,eax
c000c1bf:	eb 0b                	jmp    c000c1cc <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1c1:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1c7:	74 58                	je     c000c221 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1c9:	43                   	inc    ebx
c000c1ca:	89 f0                	mov    eax,esi
c000c1cc:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1d2:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1d8:	88 13                	mov    BYTE PTR [ebx],dl
c000c1da:	8d 70 01             	lea    esi,[eax+0x1]
c000c1dd:	83 fd 18             	cmp    ebp,0x18
c000c1e0:	75 df                	jne    c000c1c1 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1e2:	a8 01                	test   al,0x1
c000c1e4:	75 13                	jne    c000c1f9 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1e6:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1e9:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1ef:	75 d8                	jne    c000c1c9 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1f1:	83 c4 1c             	add    esp,0x1c
c000c1f4:	5b                   	pop    ebx
c000c1f5:	5e                   	pop    esi
c000c1f6:	5f                   	pop    edi
c000c1f7:	5d                   	pop    ebp
c000c1f8:	c3                   	ret    
c000c1f9:	52                   	push   edx
c000c1fa:	31 c0                	xor    eax,eax
c000c1fc:	52                   	push   edx
c000c1fd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c201:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c207:	50                   	push   eax
c000c208:	31 c0                	xor    eax,eax
c000c20a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c20e:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c214:	50                   	push   eax
c000c215:	e8 84 0b 00 00       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000c21a:	83 c4 10             	add    esp,0x10
c000c21d:	88 07                	mov    BYTE PTR [edi],al
c000c21f:	eb c8                	jmp    c000c1e9 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c225:	45                   	inc    ebp
c000c226:	05 a0 00 00 00       	add    eax,0xa0
c000c22b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c22f:	eb 88                	jmp    c000c1b9 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c231 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c231:	56                   	push   esi
c000c232:	31 c0                	xor    eax,eax
c000c234:	53                   	push   ebx
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c23c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c240:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c244:	50                   	push   eax
c000c245:	31 c0                	xor    eax,eax
c000c247:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24b:	50                   	push   eax
c000c24c:	e8 4d 0b 00 00       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000c251:	5a                   	pop    edx
c000c252:	25 ff 00 00 00       	and    eax,0xff
c000c257:	59                   	pop    ecx
c000c258:	50                   	push   eax
c000c259:	89 f0                	mov    eax,esi
c000c25b:	0f be f0             	movsx  esi,al
c000c25e:	56                   	push   esi
c000c25f:	e8 e0 0b 00 00       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000c264:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c268:	ba 19 00 00 00       	mov    edx,0x19
c000c26d:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c273:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c276:	29 f2                	sub    edx,esi
c000c278:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c27c:	c1 e1 04             	shl    ecx,0x4
c000c27f:	8d 14 92             	lea    edx,[edx+edx*4]
c000c282:	01 d9                	add    ecx,ebx
c000c284:	c1 e2 04             	shl    edx,0x4
c000c287:	01 ca                	add    edx,ecx
c000c289:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c291:	83 c4 14             	add    esp,0x14
c000c294:	5b                   	pop    ebx
c000c295:	5e                   	pop    esi
c000c296:	c3                   	ret    

c000c297 <setupTextMode()>:
c000c297:	c7 05 58 48 02 c0 69 c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c169
c000c2a1:	c7 05 44 48 02 c0 37 c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c037
c000c2ab:	c7 05 40 48 02 c0 7c c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c07c
c000c2b5:	c7 05 4c 48 02 c0 a5 c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1a5
c000c2bf:	c7 05 54 48 02 c0 c6 c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0c6
c000c2c9:	c7 05 48 48 02 c0 1a c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c11a
c000c2d3:	c7 05 50 48 02 c0 1b c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c11b
c000c2dd:	c7 05 5c 48 02 c0 31 c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c231
c000c2e7:	c3                   	ret    

c000c2e8 <kernel_main>:
c000c2e8:	57                   	push   edi
c000c2e9:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2ee:	56                   	push   esi
c000c2ef:	31 f6                	xor    esi,esi
c000c2f1:	53                   	push   ebx
c000c2f2:	83 ec 10             	sub    esp,0x10
c000c2f5:	e8 fe 08 00 00       	call   c000cbf8 <installVgaTextImplementation()>
c000c2fa:	e8 98 ff ff ff       	call   c000c297 <setupTextMode()>
c000c2ff:	89 f0                	mov    eax,esi
c000c301:	89 fa                	mov    edx,edi
c000c303:	ee                   	out    dx,al
c000c304:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c309:	b0 80                	mov    al,0x80
c000c30b:	89 da                	mov    edx,ebx
c000c30d:	ee                   	out    dx,al
c000c30e:	b1 03                	mov    cl,0x3
c000c310:	ba f8 03 00 00       	mov    edx,0x3f8
c000c315:	88 c8                	mov    al,cl
c000c317:	ee                   	out    dx,al
c000c318:	89 f0                	mov    eax,esi
c000c31a:	89 fa                	mov    edx,edi
c000c31c:	ee                   	out    dx,al
c000c31d:	88 c8                	mov    al,cl
c000c31f:	89 da                	mov    edx,ebx
c000c321:	ee                   	out    dx,al
c000c322:	b0 c7                	mov    al,0xc7
c000c324:	ba fa 03 00 00       	mov    edx,0x3fa
c000c329:	ee                   	out    dx,al
c000c32a:	b0 0b                	mov    al,0xb
c000c32c:	ba fc 03 00 00       	mov    edx,0x3fc
c000c331:	ee                   	out    dx,al
c000c332:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c337:	83 ec 0c             	sub    esp,0xc
c000c33a:	05 ff 0f 00 00       	add    eax,0xfff
c000c33f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c344:	50                   	push   eax
c000c345:	e8 6d 03 00 00       	call   c000c6b7 <Phys::physicalMemorySetup(unsigned int)>
c000c34a:	e8 b6 1f 00 00       	call   c000e305 <Virt::virtualMemorySetup()>
c000c34f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c35e:	75 0e                	jne    c000c36e <kernel_main+0x86>
c000c360:	89 d8                	mov    eax,ebx
c000c362:	25 48 03 00 00       	and    eax,0x348
c000c367:	3d 00 03 00 00       	cmp    eax,0x300
c000c36c:	74 10                	je     c000c37e <kernel_main+0x96>
c000c36e:	83 ec 0c             	sub    esp,0xc
c000c371:	68 c7 28 02 c0       	push   0xc00228c7
c000c376:	e8 c3 96 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000c37b:	83 c4 10             	add    esp,0x10
c000c37e:	83 ec 0c             	sub    esp,0xc
c000c381:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c387:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c38b:	53                   	push   ebx
c000c38c:	e8 11 21 00 00       	call   c000e4a2 <VAS::VAS()>
c000c391:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c397:	e8 84 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c39c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3a3:	e8 32 2d 00 00       	call   c000f0da <operator new(unsigned long)>
c000c3a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3ab:	89 c6                	mov    esi,eax
c000c3ad:	e8 78 ea ff ff       	call   c000ae2a <Computer::Computer()>
c000c3b2:	6a 00                	push   0x0
c000c3b4:	6a 00                	push   0x0
c000c3b6:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3bc:	6a 00                	push   0x0
c000c3be:	56                   	push   esi
c000c3bf:	e8 5a f2 ff ff       	call   c000b61e <Computer::open(int, int, void*)>
c000c3c4:	83 c4 14             	add    esp,0x14
c000c3c7:	53                   	push   ebx
c000c3c8:	e8 87 23 00 00       	call   c000e754 <VAS::~VAS()>
c000c3cd:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3d4:	e8 65 96 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	5b                   	pop    ebx
c000c3dd:	5e                   	pop    esi
c000c3de:	5f                   	pop    edi
c000c3df:	c3                   	ret    

c000c3e0 <Phys::allocateDMA(unsigned long)>:
c000c3e0:	57                   	push   edi
c000c3e1:	31 d2                	xor    edx,edx
c000c3e3:	56                   	push   esi
c000c3e4:	31 ff                	xor    edi,edi
c000c3e6:	53                   	push   ebx
c000c3e7:	31 c9                	xor    ecx,ecx
c000c3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ed:	31 f6                	xor    esi,esi
c000c3ef:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f4:	c1 e8 0c             	shr    eax,0xc
c000c3f7:	eb 17                	jmp    c000c410 <Phys::allocateDMA(unsigned long)+0x30>
c000c3f9:	85 c9                	test   ecx,ecx
c000c3fb:	75 04                	jne    c000c401 <Phys::allocateDMA(unsigned long)+0x21>
c000c3fd:	89 d7                	mov    edi,edx
c000c3ff:	89 d6                	mov    esi,edx
c000c401:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c404:	39 d8                	cmp    eax,ebx
c000c406:	74 1f                	je     c000c427 <Phys::allocateDMA(unsigned long)+0x47>
c000c408:	42                   	inc    edx
c000c409:	89 d9                	mov    ecx,ebx
c000c40b:	83 fa 2f             	cmp    edx,0x2f
c000c40e:	7f 11                	jg     c000c421 <Phys::allocateDMA(unsigned long)+0x41>
c000c410:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c417:	74 e0                	je     c000c3f9 <Phys::allocateDMA(unsigned long)+0x19>
c000c419:	31 c9                	xor    ecx,ecx
c000c41b:	42                   	inc    edx
c000c41c:	83 fa 2f             	cmp    edx,0x2f
c000c41f:	7e ef                	jle    c000c410 <Phys::allocateDMA(unsigned long)+0x30>
c000c421:	5b                   	pop    ebx
c000c422:	31 c0                	xor    eax,eax
c000c424:	5e                   	pop    esi
c000c425:	5f                   	pop    edi
c000c426:	c3                   	ret    
c000c427:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c42b:	89 d3                	mov    ebx,edx
c000c42d:	c1 fb 1f             	sar    ebx,0x1f
c000c430:	83 e3 0f             	and    ebx,0xf
c000c433:	01 d3                	add    ebx,edx
c000c435:	89 f2                	mov    edx,esi
c000c437:	c1 fb 04             	sar    ebx,0x4
c000c43a:	c1 fa 04             	sar    edx,0x4
c000c43d:	39 da                	cmp    edx,ebx
c000c43f:	75 30                	jne    c000c471 <Phys::allocateDMA(unsigned long)+0x91>
c000c441:	85 c0                	test   eax,eax
c000c443:	74 1b                	je     c000c460 <Phys::allocateDMA(unsigned long)+0x80>
c000c445:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c44a:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c450:	83 f7 ff             	xor    edi,0xffffffff
c000c453:	29 f7                	sub    edi,esi
c000c455:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c458:	42                   	inc    edx
c000c459:	8d 04 17             	lea    eax,[edi+edx*1]
c000c45c:	39 c1                	cmp    ecx,eax
c000c45e:	7f f5                	jg     c000c455 <Phys::allocateDMA(unsigned long)+0x75>
c000c460:	85 db                	test   ebx,ebx
c000c462:	74 13                	je     c000c477 <Phys::allocateDMA(unsigned long)+0x97>
c000c464:	5b                   	pop    ebx
c000c465:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c46b:	c1 e0 0c             	shl    eax,0xc
c000c46e:	5e                   	pop    esi
c000c46f:	5f                   	pop    edi
c000c470:	c3                   	ret    
c000c471:	89 fa                	mov    edx,edi
c000c473:	31 c9                	xor    ecx,ecx
c000c475:	eb a4                	jmp    c000c41b <Phys::allocateDMA(unsigned long)+0x3b>
c000c477:	c1 e6 0c             	shl    esi,0xc
c000c47a:	5b                   	pop    ebx
c000c47b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c481:	5e                   	pop    esi
c000c482:	5f                   	pop    edi
c000c483:	c3                   	ret    

c000c484 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c484:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c48c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c492:	c1 e9 0c             	shr    ecx,0xc
c000c495:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c49a:	76 25                	jbe    c000c4c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c49c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4a1:	c1 e8 0c             	shr    eax,0xc
c000c4a4:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a7:	85 c9                	test   ecx,ecx
c000c4a9:	74 15                	je     c000c4c0 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4ab:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4b1:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4bb:	40                   	inc    eax
c000c4bc:	39 d0                	cmp    eax,edx
c000c4be:	75 f8                	jne    c000c4b8 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4c0:	c3                   	ret    
c000c4c1:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4c7:	c1 ea 0c             	shr    edx,0xc
c000c4ca:	eb db                	jmp    c000c4a7 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4cc <Phys::setPageState(unsigned long, bool)>:
c000c4cc:	56                   	push   esi
c000c4cd:	ba 01 00 00 00       	mov    edx,0x1
c000c4d2:	53                   	push   ebx
c000c4d3:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e1:	89 c8                	mov    eax,ecx
c000c4e3:	83 e1 07             	and    ecx,0x7
c000c4e6:	c1 e8 03             	shr    eax,0x3
c000c4e9:	01 c6                	add    esi,eax
c000c4eb:	d3 e2                	shl    edx,cl
c000c4ed:	83 f2 ff             	xor    edx,0xffffffff
c000c4f0:	20 16                	and    BYTE PTR [esi],dl
c000c4f2:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c4f8:	01 d0                	add    eax,edx
c000c4fa:	d3 e3                	shl    ebx,cl
c000c4fc:	8a 08                	mov    cl,BYTE PTR [eax]
c000c4fe:	09 d9                	or     ecx,ebx
c000c500:	88 08                	mov    BYTE PTR [eax],cl
c000c502:	5b                   	pop    ebx
c000c503:	5e                   	pop    esi
c000c504:	c3                   	ret    

c000c505 <Phys::getPageState(unsigned long)>:
c000c505:	53                   	push   ebx
c000c506:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c50c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c510:	31 db                	xor    ebx,ebx
c000c512:	89 c8                	mov    eax,ecx
c000c514:	83 e1 07             	and    ecx,0x7
c000c517:	c1 e8 03             	shr    eax,0x3
c000c51a:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c51d:	89 d8                	mov    eax,ebx
c000c51f:	5b                   	pop    ebx
c000c520:	d3 f8                	sar    eax,cl
c000c522:	83 e0 01             	and    eax,0x1
c000c525:	c3                   	ret    

c000c526 <Phys::freePage(unsigned long)>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 08             	sub    esp,0x8
c000c52a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c52e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c534:	76 5a                	jbe    c000c590 <Phys::freePage(unsigned long)+0x6a>
c000c536:	c1 eb 0c             	shr    ebx,0xc
c000c539:	53                   	push   ebx
c000c53a:	e8 c6 ff ff ff       	call   c000c505 <Phys::getPageState(unsigned long)>
c000c53f:	5a                   	pop    edx
c000c540:	84 c0                	test   al,al
c000c542:	74 5e                	je     c000c5a2 <Phys::freePage(unsigned long)+0x7c>
c000c544:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c549:	48                   	dec    eax
c000c54a:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c54f:	8d 04 80             	lea    eax,[eax+eax*4]
c000c552:	8d 04 80             	lea    eax,[eax+eax*4]
c000c555:	c1 e0 02             	shl    eax,0x2
c000c558:	89 c2                	mov    edx,eax
c000c55a:	c1 fa 1f             	sar    edx,0x1f
c000c55d:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c563:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c569:	75 12                	jne    c000c57d <Phys::freePage(unsigned long)+0x57>
c000c56b:	51                   	push   ecx
c000c56c:	51                   	push   ecx
c000c56d:	6a 00                	push   0x0
c000c56f:	53                   	push   ebx
c000c570:	e8 57 ff ff ff       	call   c000c4cc <Phys::setPageState(unsigned long, bool)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	83 c4 08             	add    esp,0x8
c000c57b:	5b                   	pop    ebx
c000c57c:	c3                   	ret    
c000c57d:	83 ec 0c             	sub    esp,0xc
c000c580:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c585:	50                   	push   eax
c000c586:	e8 01 0a 00 00       	call   c000cf8c <VgaText::updateRAMUsageDisplay(int)>
c000c58b:	83 c4 10             	add    esp,0x10
c000c58e:	eb db                	jmp    c000c56b <Phys::freePage(unsigned long)+0x45>
c000c590:	68 00 10 00 00       	push   0x1000
c000c595:	53                   	push   ebx
c000c596:	e8 e9 fe ff ff       	call   c000c484 <Phys::freeDMA(unsigned long, unsigned long)>
c000c59b:	59                   	pop    ecx
c000c59c:	5b                   	pop    ebx
c000c59d:	83 c4 08             	add    esp,0x8
c000c5a0:	5b                   	pop    ebx
c000c5a1:	c3                   	ret    
c000c5a2:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5aa:	83 c4 08             	add    esp,0x8
c000c5ad:	5b                   	pop    ebx
c000c5ae:	e9 8b 94 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>

c000c5b3 <Phys::allocatePage()>:
c000c5b3:	56                   	push   esi
c000c5b4:	53                   	push   ebx
c000c5b5:	51                   	push   ecx
c000c5b6:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5bc:	89 f3                	mov    ebx,esi
c000c5be:	eb 0a                	jmp    c000c5ca <Phys::allocatePage()+0x17>
c000c5c0:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5c6:	39 de                	cmp    esi,ebx
c000c5c8:	74 24                	je     c000c5ee <Phys::allocatePage()+0x3b>
c000c5ca:	53                   	push   ebx
c000c5cb:	e8 35 ff ff ff       	call   c000c505 <Phys::getPageState(unsigned long)>
c000c5d0:	5a                   	pop    edx
c000c5d1:	84 c0                	test   al,al
c000c5d3:	74 5a                	je     c000c62f <Phys::allocatePage()+0x7c>
c000c5d5:	43                   	inc    ebx
c000c5d6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5dc:	75 e2                	jne    c000c5c0 <Phys::allocatePage()+0xd>
c000c5de:	31 db                	xor    ebx,ebx
c000c5e0:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c5ea:	39 de                	cmp    esi,ebx
c000c5ec:	75 dc                	jne    c000c5ca <Phys::allocatePage()+0x17>
c000c5ee:	83 ec 0c             	sub    esp,0xc
c000c5f1:	68 51 13 02 c0       	push   0xc0021351
c000c5f6:	e8 14 2c 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000c5fb:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c602:	e8 d9 fd ff ff       	call   c000c3e0 <Phys::allocateDMA(unsigned long)>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	85 c0                	test   eax,eax
c000c60c:	75 5a                	jne    c000c668 <Phys::allocatePage()+0xb5>
c000c60e:	83 ec 0c             	sub    esp,0xc
c000c611:	68 62 13 02 c0       	push   0xc0021362
c000c616:	e8 23 94 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000c61b:	83 c4 10             	add    esp,0x10
c000c61e:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c624:	53                   	push   ebx
c000c625:	e8 db fe ff ff       	call   c000c505 <Phys::getPageState(unsigned long)>
c000c62a:	5a                   	pop    edx
c000c62b:	84 c0                	test   al,al
c000c62d:	75 a6                	jne    c000c5d5 <Phys::allocatePage()+0x22>
c000c62f:	6a 01                	push   0x1
c000c631:	53                   	push   ebx
c000c632:	e8 95 fe ff ff       	call   c000c4cc <Phys::setPageState(unsigned long, bool)>
c000c637:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c63c:	59                   	pop    ecx
c000c63d:	40                   	inc    eax
c000c63e:	5b                   	pop    ebx
c000c63f:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c644:	8d 04 80             	lea    eax,[eax+eax*4]
c000c647:	8d 04 80             	lea    eax,[eax+eax*4]
c000c64a:	c1 e0 02             	shl    eax,0x2
c000c64d:	89 c2                	mov    edx,eax
c000c64f:	c1 fa 1f             	sar    edx,0x1f
c000c652:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c658:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c65e:	75 0c                	jne    c000c66c <Phys::allocatePage()+0xb9>
c000c660:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c665:	c1 e0 0c             	shl    eax,0xc
c000c668:	5a                   	pop    edx
c000c669:	5b                   	pop    ebx
c000c66a:	5e                   	pop    esi
c000c66b:	c3                   	ret    
c000c66c:	83 ec 0c             	sub    esp,0xc
c000c66f:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c674:	50                   	push   eax
c000c675:	e8 12 09 00 00       	call   c000cf8c <VgaText::updateRAMUsageDisplay(int)>
c000c67a:	83 c4 10             	add    esp,0x10
c000c67d:	eb e1                	jmp    c000c660 <Phys::allocatePage()+0xad>

c000c67f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c67f:	56                   	push   esi
c000c680:	53                   	push   ebx
c000c681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c685:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c68b:	73 06                	jae    c000c693 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c68d:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c693:	c1 eb 0c             	shr    ebx,0xc
c000c696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69a:	c1 e8 0c             	shr    eax,0xc
c000c69d:	39 d8                	cmp    eax,ebx
c000c69f:	73 13                	jae    c000c6b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6a1:	6a 00                	push   0x0
c000c6a3:	8d 70 01             	lea    esi,[eax+0x1]
c000c6a6:	50                   	push   eax
c000c6a7:	e8 20 fe ff ff       	call   c000c4cc <Phys::setPageState(unsigned long, bool)>
c000c6ac:	5a                   	pop    edx
c000c6ad:	89 f0                	mov    eax,esi
c000c6af:	59                   	pop    ecx
c000c6b0:	39 f3                	cmp    ebx,esi
c000c6b2:	75 ed                	jne    c000c6a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6b4:	5b                   	pop    ebx
c000c6b5:	5e                   	pop    esi
c000c6b6:	c3                   	ret    

c000c6b7 <Phys::physicalMemorySetup(unsigned int)>:
c000c6b7:	55                   	push   ebp
c000c6b8:	57                   	push   edi
c000c6b9:	56                   	push   esi
c000c6ba:	53                   	push   ebx
c000c6bb:	31 db                	xor    ebx,ebx
c000c6bd:	83 ec 40             	sub    esp,0x40
c000c6c0:	6a 30                	push   0x30
c000c6c2:	6a 00                	push   0x0
c000c6c4:	68 00 48 02 c0       	push   0xc0024800
c000c6c9:	e8 f1 3f ff ff       	call   c00006bf <memset>
c000c6ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6d7:	05 00 10 00 00       	add    eax,0x1000
c000c6dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6e0:	83 c4 10             	add    esp,0x10
c000c6e3:	56                   	push   esi
c000c6e4:	56                   	push   esi
c000c6e5:	6a 01                	push   0x1
c000c6e7:	53                   	push   ebx
c000c6e8:	43                   	inc    ebx
c000c6e9:	e8 de fd ff ff       	call   c000c4cc <Phys::setPageState(unsigned long, bool)>
c000c6ee:	83 c4 10             	add    esp,0x10
c000c6f1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6f7:	75 ea                	jne    c000c6e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6f9:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c6ff:	66 85 c0             	test   ax,ax
c000c702:	0f 84 3b 01 00 00    	je     c000c843 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c708:	89 c7                	mov    edi,eax
c000c70a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c712:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c718:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c71d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c721:	eb 6d                	jmp    c000c790 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c723:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c727:	89 c1                	mov    ecx,eax
c000c729:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c72d:	0f 83 bc 00 00 00    	jae    c000c7ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c733:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c737:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c73c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c740:	39 f2                	cmp    edx,esi
c000c742:	19 f8                	sbb    eax,edi
c000c744:	73 07                	jae    c000c74d <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c746:	be 00 00 0a 00       	mov    esi,0xa0000
c000c74b:	31 ff                	xor    edi,edi
c000c74d:	89 f2                	mov    edx,esi
c000c74f:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c754:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c75a:	89 f9                	mov    ecx,edi
c000c75c:	83 d1 ff             	adc    ecx,0xffffffff
c000c75f:	39 d0                	cmp    eax,edx
c000c761:	b8 00 00 00 00       	mov    eax,0x0
c000c766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c76a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c76e:	19 c8                	sbb    eax,ecx
c000c770:	0f 82 0d 01 00 00    	jb     c000c883 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c776:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c77a:	83 c3 18             	add    ebx,0x18
c000c77d:	41                   	inc    ecx
c000c77e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c782:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c786:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c78a:	0f 84 c3 00 00 00    	je     c000c853 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c790:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c792:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c795:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c798:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c79c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c79f:	01 f0                	add    eax,esi
c000c7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7ac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7b0:	11 fa                	adc    edx,edi
c000c7b2:	55                   	push   ebp
c000c7b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7bf:	51                   	push   ecx
c000c7c0:	56                   	push   esi
c000c7c1:	68 9c 13 02 c0       	push   0xc002139c
c000c7c6:	e8 44 2a 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000c7cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	09 f8                	or     eax,edi
c000c7d4:	75 7d                	jne    c000c853 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7d6:	83 fd 01             	cmp    ebp,0x1
c000c7d9:	75 11                	jne    c000c7ec <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7db:	ba 00 00 08 00       	mov    edx,0x80000
c000c7e0:	89 c1                	mov    ecx,eax
c000c7e2:	39 f2                	cmp    edx,esi
c000c7e4:	19 f9                	sbb    ecx,edi
c000c7e6:	0f 83 37 ff ff ff    	jae    c000c723 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7ec:	4d                   	dec    ebp
c000c7ed:	75 87                	jne    c000c776 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7ef:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7f3:	31 d2                	xor    edx,edx
c000c7f5:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7f9:	89 c8                	mov    eax,ecx
c000c7fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7ff:	19 d1                	sbb    ecx,edx
c000c801:	0f 82 6f ff ff ff    	jb     c000c776 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c807:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c80c:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c810:	b9 00 00 00 00       	mov    ecx,0x0
c000c815:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c819:	0f 83 57 ff ff ff    	jae    c000c776 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c81f:	39 c6                	cmp    esi,eax
c000c821:	19 d7                	sbb    edi,edx
c000c823:	73 6a                	jae    c000c88f <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c825:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c829:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c82d:	29 c7                	sub    edi,eax
c000c82f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c833:	19 d5                	sbb    ebp,edx
c000c835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c83d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c841:	eb 4c                	jmp    c000c88f <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c843:	83 ec 0c             	sub    esp,0xc
c000c846:	68 70 13 02 c0       	push   0xc0021370
c000c84b:	e8 ee 91 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000c850:	83 c4 10             	add    esp,0x10
c000c853:	bb 40 01 00 00       	mov    ebx,0x140
c000c858:	50                   	push   eax
c000c859:	50                   	push   eax
c000c85a:	6a 00                	push   0x0
c000c85c:	53                   	push   ebx
c000c85d:	e8 6a fc ff ff       	call   c000c4cc <Phys::setPageState(unsigned long, bool)>
c000c862:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c868:	43                   	inc    ebx
c000c869:	42                   	inc    edx
c000c86a:	83 c4 10             	add    esp,0x10
c000c86d:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c873:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c879:	75 dd                	jne    c000c858 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c87b:	83 c4 3c             	add    esp,0x3c
c000c87e:	5b                   	pop    ebx
c000c87f:	5e                   	pop    esi
c000c880:	5f                   	pop    edi
c000c881:	5d                   	pop    ebp
c000c882:	c3                   	ret    
c000c883:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c887:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c88f:	56                   	push   esi
c000c890:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c894:	56                   	push   esi
c000c895:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c899:	57                   	push   edi
c000c89a:	68 c0 13 02 c0       	push   0xc00213c0
c000c89f:	e8 6b 29 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000c8a4:	5d                   	pop    ebp
c000c8a5:	58                   	pop    eax
c000c8a6:	56                   	push   esi
c000c8a7:	57                   	push   edi
c000c8a8:	e8 d2 fd ff ff       	call   c000c67f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8ad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8b9:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8bf:	83 c4 0c             	add    esp,0xc
c000c8c2:	01 d0                	add    eax,edx
c000c8c4:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	68 7e 13 02 c0       	push   0xc002137e
c000c8d7:	e8 33 29 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000c8dc:	83 c4 10             	add    esp,0x10
c000c8df:	e9 92 fe ff ff       	jmp    c000c776 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8e4 <Pipe::isAtty()>:
c000c8e4:	31 c0                	xor    eax,eax
c000c8e6:	c3                   	ret    
c000c8e7:	90                   	nop

c000c8e8 <Pipe::~Pipe()>:
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f4:	89 10                	mov    DWORD PTR [eax],edx
c000c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fa:	83 ec 0c             	sub    esp,0xc
c000c8fd:	50                   	push   eax
c000c8fe:	e8 5d 16 00 00       	call   c000df60 <UnixFile::~UnixFile()>
c000c903:	83 c4 10             	add    esp,0x10
c000c906:	90                   	nop
c000c907:	83 c4 0c             	add    esp,0xc
c000c90a:	c3                   	ret    
c000c90b:	90                   	nop

c000c90c <Pipe::~Pipe()>:
c000c90c:	83 ec 0c             	sub    esp,0xc
c000c90f:	83 ec 0c             	sub    esp,0xc
c000c912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c916:	e8 cd ff ff ff       	call   c000c8e8 <Pipe::~Pipe()>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	83 ec 08             	sub    esp,0x8
c000c921:	6a 20                	push   0x20
c000c923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c927:	e8 bd 27 00 00       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	83 c4 0c             	add    esp,0xc
c000c932:	c3                   	ret    
c000c933:	90                   	nop

c000c934 <Pipe::read(unsigned long long, void*, int*)>:
c000c934:	55                   	push   ebp
c000c935:	57                   	push   edi
c000c936:	56                   	push   esi
c000c937:	53                   	push   ebx
c000c938:	83 ec 1c             	sub    esp,0x1c
c000c93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c93f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c943:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c947:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c94a:	89 c8                	mov    eax,ecx
c000c94c:	99                   	cdq    
c000c94d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c951:	74 19                	je     c000c96c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c953:	39 f9                	cmp    ecx,edi
c000c955:	89 d1                	mov    ecx,edx
c000c957:	19 f1                	sbb    ecx,esi
c000c959:	73 11                	jae    c000c96c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c95b:	e8 e7 c0 00 00       	call   c0018a47 <lockScheduler()>
c000c960:	e8 2b c4 00 00       	call   c0018d90 <schedule()>
c000c965:	e8 df c0 00 00       	call   c0018a49 <unlockScheduler()>
c000c96a:	eb db                	jmp    c000c947 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c96c:	39 f8                	cmp    eax,edi
c000c96e:	89 d1                	mov    ecx,edx
c000c970:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c974:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c978:	19 f1                	sbb    ecx,esi
c000c97a:	73 08                	jae    c000c984 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c97c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c980:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c984:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c987:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c98a:	29 c6                	sub    esi,eax
c000c98c:	89 f1                	mov    ecx,esi
c000c98e:	c1 f9 1f             	sar    ecx,0x1f
c000c991:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c995:	89 ca                	mov    edx,ecx
c000c997:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c99b:	19 d1                	sbb    ecx,edx
c000c99d:	73 04                	jae    c000c9a3 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c99f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9a3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9a7:	89 fd                	mov    ebp,edi
c000c9a9:	29 f5                	sub    ebp,esi
c000c9ab:	85 f6                	test   esi,esi
c000c9ad:	74 12                	je     c000c9c1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9af:	52                   	push   edx
c000c9b0:	56                   	push   esi
c000c9b1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9b4:	50                   	push   eax
c000c9b5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9b9:	e8 cb 3c ff ff       	call   c0000689 <memcpy>
c000c9be:	83 c4 10             	add    esp,0x10
c000c9c1:	85 ed                	test   ebp,ebp
c000c9c3:	74 12                	je     c000c9d7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9c5:	50                   	push   eax
c000c9c6:	55                   	push   ebp
c000c9c7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9ca:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9ce:	56                   	push   esi
c000c9cf:	e8 b5 3c ff ff       	call   c0000689 <memcpy>
c000c9d4:	83 c4 10             	add    esp,0x10
c000c9d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9da:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9dd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9e0:	99                   	cdq    
c000c9e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e5:	89 f7                	mov    edi,esi
c000c9e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9eb:	c1 ff 1f             	sar    edi,0x1f
c000c9ee:	57                   	push   edi
c000c9ef:	56                   	push   esi
c000c9f0:	52                   	push   edx
c000c9f1:	50                   	push   eax
c000c9f2:	e8 15 2c 01 00       	call   c001f60c <__umoddi3>
c000c9f7:	83 c4 10             	add    esp,0x10
c000c9fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca02:	75 10                	jne    c000ca14 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca04:	83 ec 0c             	sub    esp,0xc
c000ca07:	68 e9 13 02 c0       	push   0xc00213e9
c000ca0c:	e8 2d 90 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca1c:	89 10                	mov    DWORD PTR [eax],edx
c000ca1e:	83 c4 1c             	add    esp,0x1c
c000ca21:	31 c0                	xor    eax,eax
c000ca23:	5b                   	pop    ebx
c000ca24:	5e                   	pop    esi
c000ca25:	5f                   	pop    edi
c000ca26:	5d                   	pop    ebp
c000ca27:	c3                   	ret    

c000ca28 <Pipe::write(unsigned long long, void*, int*)>:
c000ca28:	55                   	push   ebp
c000ca29:	57                   	push   edi
c000ca2a:	56                   	push   esi
c000ca2b:	53                   	push   ebx
c000ca2c:	83 ec 1c             	sub    esp,0x1c
c000ca2f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca37:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca3e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca41:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca44:	89 de                	mov    esi,ebx
c000ca46:	89 df                	mov    edi,ebx
c000ca48:	c1 ff 1f             	sar    edi,0x1f
c000ca4b:	01 c6                	add    esi,eax
c000ca4d:	89 c8                	mov    eax,ecx
c000ca4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca53:	11 d7                	adc    edi,edx
c000ca55:	99                   	cdq    
c000ca56:	89 d0                	mov    eax,edx
c000ca58:	39 f1                	cmp    ecx,esi
c000ca5a:	19 f8                	sbb    eax,edi
c000ca5c:	b8 01 00 00 00       	mov    eax,0x1
c000ca61:	0f 82 80 00 00 00    	jb     c000cae7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca6a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca6d:	01 d8                	add    eax,ebx
c000ca6f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca73:	99                   	cdq    
c000ca74:	f7 f9                	idiv   ecx
c000ca76:	29 d1                	sub    ecx,edx
c000ca78:	89 d7                	mov    edi,edx
c000ca7a:	89 c8                	mov    eax,ecx
c000ca7c:	99                   	cdq    
c000ca7d:	39 ce                	cmp    esi,ecx
c000ca7f:	19 d3                	sbb    ebx,edx
c000ca81:	bb 00 00 00 00       	mov    ebx,0x0
c000ca86:	72 04                	jb     c000ca8c <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca88:	89 f3                	mov    ebx,esi
c000ca8a:	29 cb                	sub    ebx,ecx
c000ca8c:	89 f1                	mov    ecx,esi
c000ca8e:	29 d9                	sub    ecx,ebx
c000ca90:	74 1a                	je     c000caac <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca92:	52                   	push   edx
c000ca93:	51                   	push   ecx
c000ca94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca9c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca9f:	57                   	push   edi
c000caa0:	e8 e4 3b ff ff       	call   c0000689 <memcpy>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caac:	85 db                	test   ebx,ebx
c000caae:	74 12                	je     c000cac2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cab0:	50                   	push   eax
c000cab1:	53                   	push   ebx
c000cab2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cab6:	51                   	push   ecx
c000cab7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000caba:	e8 ca 3b ff ff       	call   c0000689 <memcpy>
c000cabf:	83 c4 10             	add    esp,0x10
c000cac2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cac5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000caca:	75 10                	jne    c000cadc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	68 05 14 02 c0       	push   0xc0021405
c000cad4:	e8 65 8f 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cae0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cae3:	89 38                	mov    DWORD PTR [eax],edi
c000cae5:	31 c0                	xor    eax,eax
c000cae7:	83 c4 1c             	add    esp,0x1c
c000caea:	5b                   	pop    ebx
c000caeb:	5e                   	pop    esi
c000caec:	5f                   	pop    edi
c000caed:	5d                   	pop    ebp
c000caee:	c3                   	ret    
c000caef:	90                   	nop

c000caf0 <Pipe::Pipe(int)>:
c000caf0:	83 ec 0c             	sub    esp,0xc
c000caf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf7:	83 ec 08             	sub    esp,0x8
c000cafa:	6a 00                	push   0x0
c000cafc:	50                   	push   eax
c000cafd:	e8 bc 12 00 00       	call   c000ddbe <UnixFile::UnixFile(int)>
c000cb02:	83 c4 10             	add    esp,0x10
c000cb05:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0e:	89 10                	mov    DWORD PTR [eax],edx
c000cb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb35:	83 ec 0c             	sub    esp,0xc
c000cb38:	50                   	push   eax
c000cb39:	e8 9f f4 ff ff       	call   c000bfdd <malloc>
c000cb3e:	83 c4 10             	add    esp,0x10
c000cb41:	89 c2                	mov    edx,eax
c000cb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb47:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb52:	90                   	nop
c000cb53:	83 c4 0c             	add    esp,0xc
c000cb56:	c3                   	ret    
c000cb57:	90                   	nop

c000cb58 <VgaText::isAtty()>:
c000cb58:	b0 01                	mov    al,0x1
c000cb5a:	c3                   	ret    
c000cb5b:	90                   	nop

c000cb5c <VgaText::~VgaText()>:
c000cb5c:	83 ec 0c             	sub    esp,0xc
c000cb5f:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb68:	89 10                	mov    DWORD PTR [eax],edx
c000cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6e:	83 ec 0c             	sub    esp,0xc
c000cb71:	50                   	push   eax
c000cb72:	e8 e9 13 00 00       	call   c000df60 <UnixFile::~UnixFile()>
c000cb77:	83 c4 10             	add    esp,0x10
c000cb7a:	90                   	nop
c000cb7b:	83 c4 0c             	add    esp,0xc
c000cb7e:	c3                   	ret    
c000cb7f:	90                   	nop

c000cb80 <VgaText::~VgaText()>:
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	83 ec 0c             	sub    esp,0xc
c000cb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8a:	e8 cd ff ff ff       	call   c000cb5c <VgaText::~VgaText()>
c000cb8f:	83 c4 10             	add    esp,0x10
c000cb92:	83 ec 08             	sub    esp,0x8
c000cb95:	68 60 12 00 00       	push   0x1260
c000cb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb9e:	e8 46 25 00 00       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	83 c4 0c             	add    esp,0xc
c000cba9:	c3                   	ret    

c000cbaa <VgaText::read(unsigned long long, void*, int*)>:
c000cbaa:	83 ec 10             	sub    esp,0x10
c000cbad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb9:	e8 69 58 00 00       	call   c0012427 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbc2:	89 02                	mov    DWORD PTR [edx],eax
c000cbc4:	31 c0                	xor    eax,eax
c000cbc6:	83 c4 1c             	add    esp,0x1c
c000cbc9:	c3                   	ret    

c000cbca <setTerminalScrollLock(bool)>:
c000cbca:	c3                   	ret    

c000cbcb <addToTerminalCycle(VgaText*)>:
c000cbcb:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd5:	85 d2                	test   edx,edx
c000cbd7:	75 0c                	jne    c000cbe5 <addToTerminalCycle(VgaText*)+0x1a>
c000cbd9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbdf:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbe4:	c3                   	ret    
c000cbe5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbeb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbf1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbf7:	c3                   	ret    

c000cbf8 <installVgaTextImplementation()>:
c000cbf8:	83 ec 10             	sub    esp,0x10
c000cbfb:	6a 20                	push   0x20
c000cbfd:	6a 00                	push   0x0
c000cbff:	68 40 48 02 c0       	push   0xc0024840
c000cc04:	e8 b6 3a ff ff       	call   c00006bf <memset>
c000cc09:	83 c4 1c             	add    esp,0x1c
c000cc0c:	c3                   	ret    

c000cc0d <scrollTerminalScrollLock(int)>:
c000cc0d:	c3                   	ret    

c000cc0e <VgaText::load()>:
c000cc0e:	53                   	push   ebx
c000cc0f:	31 c0                	xor    eax,eax
c000cc11:	83 ec 58             	sub    esp,0x58
c000cc14:	89 e2                	mov    edx,esp
c000cc16:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc1a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc1e:	40                   	inc    eax
c000cc1f:	83 f8 50             	cmp    eax,0x50
c000cc22:	75 f6                	jne    c000cc1a <VgaText::load()+0xc>
c000cc24:	31 c0                	xor    eax,eax
c000cc26:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc2d:	84 c9                	test   cl,cl
c000cc2f:	74 06                	je     c000cc37 <VgaText::load()+0x29>
c000cc31:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc34:	40                   	inc    eax
c000cc35:	eb ef                	jmp    c000cc26 <VgaText::load()+0x18>
c000cc37:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc3d:	85 c0                	test   eax,eax
c000cc3f:	74 09                	je     c000cc4a <VgaText::load()+0x3c>
c000cc41:	51                   	push   ecx
c000cc42:	51                   	push   ecx
c000cc43:	52                   	push   edx
c000cc44:	53                   	push   ebx
c000cc45:	ff d0                	call   eax
c000cc47:	83 c4 10             	add    esp,0x10
c000cc4a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc50:	85 c0                	test   eax,eax
c000cc52:	74 09                	je     c000cc5d <VgaText::load()+0x4f>
c000cc54:	83 ec 0c             	sub    esp,0xc
c000cc57:	53                   	push   ebx
c000cc58:	ff d0                	call   eax
c000cc5a:	83 c4 10             	add    esp,0x10
c000cc5d:	83 c4 58             	add    esp,0x58
c000cc60:	5b                   	pop    ebx
c000cc61:	c3                   	ret    

c000cc62 <VgaText::updateCursor()>:
c000cc62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc66:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc6c:	75 0c                	jne    c000cc7a <VgaText::updateCursor()+0x18>
c000cc6e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc74:	85 c0                	test   eax,eax
c000cc76:	74 02                	je     c000cc7a <VgaText::updateCursor()+0x18>
c000cc78:	ff e0                	jmp    eax
c000cc7a:	c3                   	ret    
c000cc7b:	90                   	nop

c000cc7c <VgaText::showCursor(bool)>:
c000cc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc84:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc8a:	c3                   	ret    
c000cc8b:	90                   	nop

c000cc8c <VgaText::disableBlink(bool)>:
c000cc8c:	56                   	push   esi
c000cc8d:	53                   	push   ebx
c000cc8e:	51                   	push   ecx
c000cc8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc97:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000cc9d:	75 18                	jne    c000ccb7 <VgaText::disableBlink(bool)+0x2b>
c000cc9f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cca5:	85 c0                	test   eax,eax
c000cca7:	74 0e                	je     c000ccb7 <VgaText::disableBlink(bool)+0x2b>
c000cca9:	89 f1                	mov    ecx,esi
c000ccab:	52                   	push   edx
c000ccac:	52                   	push   edx
c000ccad:	0f b6 d1             	movzx  edx,cl
c000ccb0:	52                   	push   edx
c000ccb1:	53                   	push   ebx
c000ccb2:	ff d0                	call   eax
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	89 f0                	mov    eax,esi
c000ccb9:	83 f0 01             	xor    eax,0x1
c000ccbc:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccc2:	58                   	pop    eax
c000ccc3:	5b                   	pop    ebx
c000ccc4:	5e                   	pop    esi
c000ccc5:	c3                   	ret    

c000ccc6 <VgaText::doANSI_SGR(int)>:
c000ccc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccce:	85 d2                	test   edx,edx
c000ccd0:	75 14                	jne    c000cce6 <VgaText::doANSI_SGR(int)+0x20>
c000ccd2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccd8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccde:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cce4:	eb 65                	jmp    c000cd4b <VgaText::doANSI_SGR(int)+0x85>
c000cce6:	83 fa 07             	cmp    edx,0x7
c000cce9:	75 14                	jne    c000ccff <VgaText::doANSI_SGR(int)+0x39>
c000cceb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccf1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccf7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccfd:	eb 4c                	jmp    c000cd4b <VgaText::doANSI_SGR(int)+0x85>
c000ccff:	83 fa 1b             	cmp    edx,0x1b
c000cd02:	74 ce                	je     c000ccd2 <VgaText::doANSI_SGR(int)+0xc>
c000cd04:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd07:	83 f9 07             	cmp    ecx,0x7
c000cd0a:	77 09                	ja     c000cd15 <VgaText::doANSI_SGR(int)+0x4f>
c000cd0c:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd13:	eb 20                	jmp    c000cd35 <VgaText::doANSI_SGR(int)+0x6f>
c000cd15:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd18:	83 f9 07             	cmp    ecx,0x7
c000cd1b:	77 09                	ja     c000cd26 <VgaText::doANSI_SGR(int)+0x60>
c000cd1d:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd24:	eb 25                	jmp    c000cd4b <VgaText::doANSI_SGR(int)+0x85>
c000cd26:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd29:	83 f9 07             	cmp    ecx,0x7
c000cd2c:	77 0e                	ja     c000cd3c <VgaText::doANSI_SGR(int)+0x76>
c000cd2e:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd35:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd3b:	c3                   	ret    
c000cd3c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd3f:	83 f9 07             	cmp    ecx,0x7
c000cd42:	77 0d                	ja     c000cd51 <VgaText::doANSI_SGR(int)+0x8b>
c000cd44:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd4b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd51:	c3                   	ret    

c000cd52 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd5a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd60:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd66:	c3                   	ret    
c000cd67:	90                   	nop

c000cd68 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd70:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd76:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd7c:	c3                   	ret    
c000cd7d:	90                   	nop

c000cd7e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd7e:	53                   	push   ebx
c000cd7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd8b:	51                   	push   ecx
c000cd8c:	e8 c1 ff ff ff       	call   c000cd52 <VgaText::setDefaultBgColour(VgaColour)>
c000cd91:	58                   	pop    eax
c000cd92:	5a                   	pop    edx
c000cd93:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd97:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd9b:	5b                   	pop    ebx
c000cd9c:	eb ca                	jmp    c000cd68 <VgaText::setDefaultFgColour(VgaColour)>

c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cda3:	c1 e2 04             	shl    edx,0x4
c000cda6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdaa:	83 e0 0f             	and    eax,0xf
c000cdad:	09 d0                	or     eax,edx
c000cdaf:	c3                   	ret    

c000cdb0 <VgaText::scrollScreen()>:
c000cdb0:	57                   	push   edi
c000cdb1:	56                   	push   esi
c000cdb2:	be 01 00 00 00       	mov    esi,0x1
c000cdb7:	53                   	push   ebx
c000cdb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdbc:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdc2:	31 ff                	xor    edi,edi
c000cdc4:	01 d9                	add    ecx,ebx
c000cdc6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdc9:	83 fe 17             	cmp    esi,0x17
c000cdcc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdd2:	75 28                	jne    c000cdfc <VgaText::scrollScreen()+0x4c>
c000cdd4:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdda:	74 1c                	je     c000cdf8 <VgaText::scrollScreen()+0x48>
c000cddc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cde3:	50                   	push   eax
c000cde4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdeb:	50                   	push   eax
c000cdec:	e8 ad ff ff ff       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000cdf1:	5a                   	pop    edx
c000cdf2:	5a                   	pop    edx
c000cdf3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdf6:	eb 04                	jmp    c000cdfc <VgaText::scrollScreen()+0x4c>
c000cdf8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdfc:	47                   	inc    edi
c000cdfd:	41                   	inc    ecx
c000cdfe:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce04:	75 c0                	jne    c000cdc6 <VgaText::scrollScreen()+0x16>
c000ce06:	46                   	inc    esi
c000ce07:	83 fe 18             	cmp    esi,0x18
c000ce0a:	75 b0                	jne    c000cdbc <VgaText::scrollScreen()+0xc>
c000ce0c:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce12:	75 24                	jne    c000ce38 <VgaText::scrollScreen()+0x88>
c000ce14:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce1b:	74 08                	je     c000ce25 <VgaText::scrollScreen()+0x75>
c000ce1d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce23:	eb 13                	jmp    c000ce38 <VgaText::scrollScreen()+0x88>
c000ce25:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce2b:	85 c0                	test   eax,eax
c000ce2d:	74 09                	je     c000ce38 <VgaText::scrollScreen()+0x88>
c000ce2f:	83 ec 0c             	sub    esp,0xc
c000ce32:	53                   	push   ebx
c000ce33:	ff d0                	call   eax
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce3c:	5b                   	pop    ebx
c000ce3d:	5e                   	pop    esi
c000ce3e:	5f                   	pop    edi
c000ce3f:	e9 1e fe ff ff       	jmp    c000cc62 <VgaText::updateCursor()>

c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce49:	c1 e0 08             	shl    eax,0x8
c000ce4c:	89 c2                	mov    edx,eax
c000ce4e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce53:	09 d0                	or     eax,edx
c000ce55:	c3                   	ret    

c000ce56 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce56:	53                   	push   ebx
c000ce57:	83 ec 08             	sub    esp,0x8
c000ce5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce63:	50                   	push   eax
c000ce64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce69:	50                   	push   eax
c000ce6a:	e8 2f ff ff ff       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000ce6f:	5a                   	pop    edx
c000ce70:	5b                   	pop    ebx
c000ce71:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce76:	0f b6 c0             	movzx  eax,al
c000ce79:	50                   	push   eax
c000ce7a:	53                   	push   ebx
c000ce7b:	e8 c4 ff ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce80:	5a                   	pop    edx
c000ce81:	5a                   	pop    edx
c000ce82:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce88:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce8c:	0f b7 d2             	movzx  edx,dx
c000ce8f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce94:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000ce9a:	75 14                	jne    c000ceb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce9c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cea2:	85 c0                	test   eax,eax
c000cea4:	74 0a                	je     c000ceb0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceaa:	83 c4 08             	add    esp,0x8
c000cead:	5b                   	pop    ebx
c000ceae:	ff e0                	jmp    eax
c000ceb0:	83 c4 08             	add    esp,0x8
c000ceb3:	5b                   	pop    ebx
c000ceb4:	c3                   	ret    
c000ceb5:	90                   	nop

c000ceb6 <VgaText::getCursorX()>:
c000ceb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceba:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cec0:	c3                   	ret    
c000cec1:	90                   	nop

c000cec2 <VgaText::getCursorY()>:
c000cec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cecc:	c3                   	ret    
c000cecd:	90                   	nop

c000cece <VgaText::setCursor(int, int)>:
c000cece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cedc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cee0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cee6:	e9 77 fd ff ff       	jmp    c000cc62 <VgaText::updateCursor()>
c000ceeb:	90                   	nop

c000ceec <VgaText::setCursorX(int)>:
c000ceec:	83 ec 10             	sub    esp,0x10
c000ceef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cef3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefd:	50                   	push   eax
c000cefe:	e8 cb ff ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000cf03:	83 c4 1c             	add    esp,0x1c
c000cf06:	c3                   	ret    
c000cf07:	90                   	nop

c000cf08 <VgaText::setCursorY(int)>:
c000cf08:	83 ec 10             	sub    esp,0x10
c000cf0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf13:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf19:	50                   	push   eax
c000cf1a:	e8 af ff ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000cf1f:	83 c4 1c             	add    esp,0x1c
c000cf22:	c3                   	ret    
c000cf23:	90                   	nop

c000cf24 <VgaText::incrementCursor(bool)>:
c000cf24:	56                   	push   esi
c000cf25:	53                   	push   ebx
c000cf26:	51                   	push   ecx
c000cf27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf2f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf35:	40                   	inc    eax
c000cf36:	83 f8 50             	cmp    eax,0x50
c000cf39:	74 08                	je     c000cf43 <VgaText::incrementCursor(bool)+0x1f>
c000cf3b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf41:	eb 33                	jmp    c000cf76 <VgaText::incrementCursor(bool)+0x52>
c000cf43:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf49:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf53:	8d 50 01             	lea    edx,[eax+0x1]
c000cf56:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf5c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf62:	75 12                	jne    c000cf76 <VgaText::incrementCursor(bool)+0x52>
c000cf64:	83 ec 0c             	sub    esp,0xc
c000cf67:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf6d:	53                   	push   ebx
c000cf6e:	e8 3d fe ff ff       	call   c000cdb0 <VgaText::scrollScreen()>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	89 f0                	mov    eax,esi
c000cf78:	84 c0                	test   al,al
c000cf7a:	74 0c                	je     c000cf88 <VgaText::incrementCursor(bool)+0x64>
c000cf7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf80:	5a                   	pop    edx
c000cf81:	5b                   	pop    ebx
c000cf82:	5e                   	pop    esi
c000cf83:	e9 da fc ff ff       	jmp    c000cc62 <VgaText::updateCursor()>
c000cf88:	58                   	pop    eax
c000cf89:	5b                   	pop    ebx
c000cf8a:	5e                   	pop    esi
c000cf8b:	c3                   	ret    

c000cf8c <VgaText::updateRAMUsageDisplay(int)>:
c000cf8c:	53                   	push   ebx
c000cf8d:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf92:	6a 0f                	push   0xf
c000cf94:	6a 00                	push   0x0
c000cf96:	e8 03 fe ff ff       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000cf9b:	5a                   	pop    edx
c000cf9c:	59                   	pop    ecx
c000cf9d:	0f b6 c8             	movzx  ecx,al
c000cfa0:	51                   	push   ecx
c000cfa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfa5:	99                   	cdq    
c000cfa6:	f7 fb                	idiv   ebx
c000cfa8:	83 c0 30             	add    eax,0x30
c000cfab:	89 d3                	mov    ebx,edx
c000cfad:	0f be c0             	movsx  eax,al
c000cfb0:	50                   	push   eax
c000cfb1:	e8 8e fe ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfb6:	5a                   	pop    edx
c000cfb7:	83 c3 30             	add    ebx,0x30
c000cfba:	5a                   	pop    edx
c000cfbb:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfc1:	0f b6 db             	movzx  ebx,bl
c000cfc4:	51                   	push   ecx
c000cfc5:	53                   	push   ebx
c000cfc6:	e8 79 fe ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfcb:	5b                   	pop    ebx
c000cfcc:	5a                   	pop    edx
c000cfcd:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfd3:	51                   	push   ecx
c000cfd4:	6a 25                	push   0x25
c000cfd6:	e8 69 fe ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfdb:	59                   	pop    ecx
c000cfdc:	5b                   	pop    ebx
c000cfdd:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfe3:	5b                   	pop    ebx
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <VgaText::updateDiskUsage()>:
c000cfe6:	55                   	push   ebp
c000cfe7:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfec:	57                   	push   edi
c000cfed:	56                   	push   esi
c000cfee:	53                   	push   ebx
c000cfef:	6a 0f                	push   0xf
c000cff1:	6a 00                	push   0x0
c000cff3:	e8 a6 fd ff ff       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000cff8:	0f b6 d8             	movzx  ebx,al
c000cffb:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d000:	5a                   	pop    edx
c000d001:	99                   	cdq    
c000d002:	f7 fd                	idiv   ebp
c000d004:	59                   	pop    ecx
c000d005:	b9 0a 00 00 00       	mov    ecx,0xa
c000d00a:	99                   	cdq    
c000d00b:	f7 f9                	idiv   ecx
c000d00d:	53                   	push   ebx
c000d00e:	8d 42 30             	lea    eax,[edx+0x30]
c000d011:	0f b6 c0             	movzx  eax,al
c000d014:	50                   	push   eax
c000d015:	e8 2a fe ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d01a:	5e                   	pop    esi
c000d01b:	5f                   	pop    edi
c000d01c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d022:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d027:	bf e8 03 00 00       	mov    edi,0x3e8
c000d02c:	99                   	cdq    
c000d02d:	f7 ff                	idiv   edi
c000d02f:	99                   	cdq    
c000d030:	f7 f9                	idiv   ecx
c000d032:	53                   	push   ebx
c000d033:	8d 42 30             	lea    eax,[edx+0x30]
c000d036:	0f b6 c0             	movzx  eax,al
c000d039:	50                   	push   eax
c000d03a:	e8 05 fe ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d03f:	5a                   	pop    edx
c000d040:	5e                   	pop    esi
c000d041:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d047:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d04c:	be 64 00 00 00       	mov    esi,0x64
c000d051:	99                   	cdq    
c000d052:	f7 fe                	idiv   esi
c000d054:	99                   	cdq    
c000d055:	f7 f9                	idiv   ecx
c000d057:	53                   	push   ebx
c000d058:	8d 42 30             	lea    eax,[edx+0x30]
c000d05b:	0f b6 c0             	movzx  eax,al
c000d05e:	50                   	push   eax
c000d05f:	e8 e0 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d064:	5a                   	pop    edx
c000d065:	5a                   	pop    edx
c000d066:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d06c:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d071:	53                   	push   ebx
c000d072:	99                   	cdq    
c000d073:	f7 f9                	idiv   ecx
c000d075:	99                   	cdq    
c000d076:	f7 f9                	idiv   ecx
c000d078:	8d 42 30             	lea    eax,[edx+0x30]
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	50                   	push   eax
c000d07f:	e8 c0 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d084:	5a                   	pop    edx
c000d085:	5a                   	pop    edx
c000d086:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d08c:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d091:	53                   	push   ebx
c000d092:	99                   	cdq    
c000d093:	f7 f9                	idiv   ecx
c000d095:	8d 42 30             	lea    eax,[edx+0x30]
c000d098:	0f b6 c0             	movzx  eax,al
c000d09b:	50                   	push   eax
c000d09c:	e8 a3 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0a1:	5a                   	pop    edx
c000d0a2:	5a                   	pop    edx
c000d0a3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0a9:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0ae:	53                   	push   ebx
c000d0af:	99                   	cdq    
c000d0b0:	f7 fd                	idiv   ebp
c000d0b2:	99                   	cdq    
c000d0b3:	f7 f9                	idiv   ecx
c000d0b5:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b8:	0f b6 c0             	movzx  eax,al
c000d0bb:	50                   	push   eax
c000d0bc:	e8 83 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c1:	5d                   	pop    ebp
c000d0c2:	5a                   	pop    edx
c000d0c3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0c9:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0ce:	53                   	push   ebx
c000d0cf:	99                   	cdq    
c000d0d0:	f7 ff                	idiv   edi
c000d0d2:	99                   	cdq    
c000d0d3:	f7 f9                	idiv   ecx
c000d0d5:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d8:	0f b6 c0             	movzx  eax,al
c000d0db:	50                   	push   eax
c000d0dc:	e8 63 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0e1:	5f                   	pop    edi
c000d0e2:	5d                   	pop    ebp
c000d0e3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0e9:	53                   	push   ebx
c000d0ea:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0ef:	99                   	cdq    
c000d0f0:	f7 fe                	idiv   esi
c000d0f2:	99                   	cdq    
c000d0f3:	f7 f9                	idiv   ecx
c000d0f5:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f8:	0f b6 c0             	movzx  eax,al
c000d0fb:	50                   	push   eax
c000d0fc:	e8 43 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d101:	5a                   	pop    edx
c000d102:	5e                   	pop    esi
c000d103:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d109:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d10e:	53                   	push   ebx
c000d10f:	99                   	cdq    
c000d110:	f7 f9                	idiv   ecx
c000d112:	99                   	cdq    
c000d113:	f7 f9                	idiv   ecx
c000d115:	8d 42 30             	lea    eax,[edx+0x30]
c000d118:	0f b6 c0             	movzx  eax,al
c000d11b:	50                   	push   eax
c000d11c:	e8 23 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d121:	5f                   	pop    edi
c000d122:	5d                   	pop    ebp
c000d123:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d129:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d12e:	53                   	push   ebx
c000d12f:	99                   	cdq    
c000d130:	f7 f9                	idiv   ecx
c000d132:	83 c2 30             	add    edx,0x30
c000d135:	0f b6 d2             	movzx  edx,dl
c000d138:	52                   	push   edx
c000d139:	e8 06 fd ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d13e:	5a                   	pop    edx
c000d13f:	59                   	pop    ecx
c000d140:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d146:	5b                   	pop    ebx
c000d147:	5e                   	pop    esi
c000d148:	5f                   	pop    edi
c000d149:	5d                   	pop    ebp
c000d14a:	c3                   	ret    
c000d14b:	90                   	nop

c000d14c <VgaText::updateTitle()>:
c000d14c:	53                   	push   ebx
c000d14d:	31 c0                	xor    eax,eax
c000d14f:	83 ec 58             	sub    esp,0x58
c000d152:	89 e1                	mov    ecx,esp
c000d154:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d158:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d15c:	40                   	inc    eax
c000d15d:	83 f8 50             	cmp    eax,0x50
c000d160:	75 f6                	jne    c000d158 <VgaText::updateTitle()+0xc>
c000d162:	31 c0                	xor    eax,eax
c000d164:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d16b:	84 db                	test   bl,bl
c000d16d:	74 06                	je     c000d175 <VgaText::updateTitle()+0x29>
c000d16f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d172:	40                   	inc    eax
c000d173:	eb ef                	jmp    c000d164 <VgaText::updateTitle()+0x18>
c000d175:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d17b:	85 c0                	test   eax,eax
c000d17d:	74 09                	je     c000d188 <VgaText::updateTitle()+0x3c>
c000d17f:	53                   	push   ebx
c000d180:	53                   	push   ebx
c000d181:	51                   	push   ecx
c000d182:	52                   	push   edx
c000d183:	ff d0                	call   eax
c000d185:	83 c4 10             	add    esp,0x10
c000d188:	e8 59 fe ff ff       	call   c000cfe6 <VgaText::updateDiskUsage()>
c000d18d:	83 c4 58             	add    esp,0x58
c000d190:	5b                   	pop    ebx
c000d191:	c3                   	ret    

c000d192 <VgaText::setTitleTextColour(VgaColour)>:
c000d192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d19a:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1a0:	eb aa                	jmp    c000d14c <VgaText::updateTitle()>

c000d1a2 <VgaText::setTitleColour(VgaColour)>:
c000d1a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1aa:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1b0:	eb 9a                	jmp    c000d14c <VgaText::updateTitle()>

c000d1b2 <VgaText::setTitle(char*)>:
c000d1b2:	53                   	push   ebx
c000d1b3:	83 ec 10             	sub    esp,0x10
c000d1b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1be:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 94 35 ff ff       	call   c000075e <strcpy>
c000d1ca:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1ce:	83 c4 18             	add    esp,0x18
c000d1d1:	5b                   	pop    ebx
c000d1d2:	e9 75 ff ff ff       	jmp    c000d14c <VgaText::updateTitle()>
c000d1d7:	90                   	nop

c000d1d8 <VgaText::decrementCursor(bool)>:
c000d1d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1e0:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1e6:	85 c0                	test   eax,eax
c000d1e8:	74 07                	je     c000d1f1 <VgaText::decrementCursor(bool)+0x19>
c000d1ea:	48                   	dec    eax
c000d1eb:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1f1:	84 c9                	test   cl,cl
c000d1f3:	74 09                	je     c000d1fe <VgaText::decrementCursor(bool)+0x26>
c000d1f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f9:	e9 64 fa ff ff       	jmp    c000cc62 <VgaText::updateCursor()>
c000d1fe:	c3                   	ret    
c000d1ff:	90                   	nop

c000d200 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d200:	53                   	push   ebx
c000d201:	83 ec 08             	sub    esp,0x8
c000d204:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d208:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d20c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d210:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d214:	3c 07                	cmp    al,0x7
c000d216:	75 2a                	jne    c000d242 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d218:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d21d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d225:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d22d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d239:	83 c4 08             	add    esp,0x8
c000d23c:	5b                   	pop    ebx
c000d23d:	e9 c0 2d 00 00       	jmp    c0010002 <Buzzer::beep(int, int, bool)>
c000d242:	3c 0d                	cmp    al,0xd
c000d244:	75 0c                	jne    c000d252 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d246:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d250:	eb 3b                	jmp    c000d28d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d252:	3c 0a                	cmp    al,0xa
c000d254:	75 40                	jne    c000d296 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d256:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d25c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d266:	8d 50 01             	lea    edx,[eax+0x1]
c000d269:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d26f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d275:	75 12                	jne    c000d289 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d280:	53                   	push   ebx
c000d281:	e8 2a fb ff ff       	call   c000cdb0 <VgaText::scrollScreen()>
c000d286:	83 c4 10             	add    esp,0x10
c000d289:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d28d:	83 c4 08             	add    esp,0x8
c000d290:	5b                   	pop    ebx
c000d291:	e9 cc f9 ff ff       	jmp    c000cc62 <VgaText::updateCursor()>
c000d296:	3c 08                	cmp    al,0x8
c000d298:	75 31                	jne    c000d2cb <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d29a:	50                   	push   eax
c000d29b:	50                   	push   eax
c000d29c:	6a 01                	push   0x1
c000d29e:	53                   	push   ebx
c000d29f:	e8 34 ff ff ff       	call   c000d1d8 <VgaText::decrementCursor(bool)>
c000d2a4:	5a                   	pop    edx
c000d2a5:	59                   	pop    ecx
c000d2a6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ac:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2b2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2b8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2be:	6a 20                	push   0x20
c000d2c0:	53                   	push   ebx
c000d2c1:	e8 90 fb ff ff       	call   c000ce56 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2c6:	83 c4 28             	add    esp,0x28
c000d2c9:	5b                   	pop    ebx
c000d2ca:	c3                   	ret    
c000d2cb:	83 ec 08             	sub    esp,0x8
c000d2ce:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2da:	0f be c0             	movsx  eax,al
c000d2dd:	51                   	push   ecx
c000d2de:	52                   	push   edx
c000d2df:	50                   	push   eax
c000d2e0:	53                   	push   ebx
c000d2e1:	e8 70 fb ff ff       	call   c000ce56 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2ea:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2f2:	83 c4 28             	add    esp,0x28
c000d2f5:	5b                   	pop    ebx
c000d2f6:	e9 29 fc ff ff       	jmp    c000cf24 <VgaText::incrementCursor(bool)>
c000d2fb:	90                   	nop

c000d2fc <VgaText::isShowingCursor()>:
c000d2fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d300:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d306:	c3                   	ret    
c000d307:	90                   	nop

c000d308 <VgaText::isBlinkDisabled()>:
c000d308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d312:	83 f0 01             	xor    eax,0x1
c000d315:	c3                   	ret    

c000d316 <VgaText::setCursorHeight(int)>:
c000d316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d31e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d324:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d32b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d32f:	e9 48 f9 ff ff       	jmp    c000cc7c <VgaText::showCursor(bool)>

c000d334 <VgaText::getCursorHeight()>:
c000d334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d338:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d33e:	c3                   	ret    

c000d33f <setActiveTerminal(VgaText*)>:
c000d33f:	53                   	push   ebx
c000d340:	83 ec 08             	sub    esp,0x8
c000d343:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d347:	85 db                	test   ebx,ebx
c000d349:	75 11                	jne    c000d35c <setActiveTerminal(VgaText*)+0x1d>
c000d34b:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d353:	83 c4 08             	add    esp,0x8
c000d356:	5b                   	pop    ebx
c000d357:	e9 e2 86 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c000d35c:	50                   	push   eax
c000d35d:	50                   	push   eax
c000d35e:	53                   	push   ebx
c000d35f:	68 4e 14 02 c0       	push   0xc002144e
c000d364:	e8 a6 1e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000d369:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d36e:	83 c4 10             	add    esp,0x10
c000d371:	85 c0                	test   eax,eax
c000d373:	74 0c                	je     c000d381 <setActiveTerminal(VgaText*)+0x42>
c000d375:	83 ec 0c             	sub    esp,0xc
c000d378:	50                   	push   eax
c000d379:	e8 e4 f8 ff ff       	call   c000cc62 <VgaText::updateCursor()>
c000d37e:	83 c4 10             	add    esp,0x10
c000d381:	51                   	push   ecx
c000d382:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d388:	51                   	push   ecx
c000d389:	53                   	push   ebx
c000d38a:	68 66 14 02 c0       	push   0xc0021466
c000d38f:	e8 7b 1e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000d394:	83 c4 0c             	add    esp,0xc
c000d397:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d39d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3a3:	53                   	push   ebx
c000d3a4:	e8 25 fb ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000d3a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ac:	e8 57 ff ff ff       	call   c000d308 <VgaText::isBlinkDisabled()>
c000d3b1:	5a                   	pop    edx
c000d3b2:	59                   	pop    ecx
c000d3b3:	0f b6 c0             	movzx  eax,al
c000d3b6:	50                   	push   eax
c000d3b7:	53                   	push   ebx
c000d3b8:	e8 cf f8 ff ff       	call   c000cc8c <VgaText::disableBlink(bool)>
c000d3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c0:	e8 6f ff ff ff       	call   c000d334 <VgaText::getCursorHeight()>
c000d3c5:	5a                   	pop    edx
c000d3c6:	59                   	pop    ecx
c000d3c7:	50                   	push   eax
c000d3c8:	53                   	push   ebx
c000d3c9:	e8 48 ff ff ff       	call   c000d316 <VgaText::setCursorHeight(int)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3d8:	75 0a                	jne    c000d3e4 <setActiveTerminal(VgaText*)+0xa5>
c000d3da:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3e8:	83 c4 08             	add    esp,0x8
c000d3eb:	5b                   	pop    ebx
c000d3ec:	e9 1d f8 ff ff       	jmp    c000cc0e <VgaText::load()>

c000d3f1 <doTerminalCycle()>:
c000d3f1:	83 ec 18             	sub    esp,0x18
c000d3f4:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d3f9:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3ff:	50                   	push   eax
c000d400:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d405:	e8 35 ff ff ff       	call   c000d33f <setActiveTerminal(VgaText*)>
c000d40a:	83 c4 1c             	add    esp,0x1c
c000d40d:	c3                   	ret    

c000d40e <VgaText::doUpdate()>:
c000d40e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d412:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d418:	85 c0                	test   eax,eax
c000d41a:	74 02                	je     c000d41e <VgaText::doUpdate()+0x10>
c000d41c:	ff e0                	jmp    eax
c000d41e:	c3                   	ret    
c000d41f:	90                   	nop

c000d420 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d420:	55                   	push   ebp
c000d421:	57                   	push   edi
c000d422:	56                   	push   esi
c000d423:	53                   	push   ebx
c000d424:	83 ec 1c             	sub    esp,0x1c
c000d427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d42b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d430:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d437:	50                   	push   eax
c000d438:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43d:	50                   	push   eax
c000d43e:	e8 5b f9 ff ff       	call   c000cd9e <VgaText::combineColours(unsigned char, unsigned char)>
c000d443:	59                   	pop    ecx
c000d444:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d447:	5b                   	pop    ebx
c000d448:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d450:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d456:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d45a:	0f b7 db             	movzx  ebx,bx
c000d45d:	01 db                	add    ebx,ebx
c000d45f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d463:	01 fb                	add    ebx,edi
c000d465:	31 c0                	xor    eax,eax
c000d467:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d46a:	84 c9                	test   cl,cl
c000d46c:	0f 84 3d 01 00 00    	je     c000d5af <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d472:	80 f9 0d             	cmp    cl,0xd
c000d475:	75 0f                	jne    c000d486 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d477:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d481:	e9 23 01 00 00       	jmp    c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d486:	80 f9 0a             	cmp    cl,0xa
c000d489:	75 5b                	jne    c000d4e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d48b:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d491:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d49b:	8d 48 01             	lea    ecx,[eax+0x1]
c000d49e:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4a4:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4aa:	75 12                	jne    c000d4be <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4ac:	83 ec 0c             	sub    esp,0xc
c000d4af:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b5:	55                   	push   ebp
c000d4b6:	e8 f5 f8 ff ff       	call   c000cdb0 <VgaText::scrollScreen()>
c000d4bb:	83 c4 10             	add    esp,0x10
c000d4be:	83 ec 0c             	sub    esp,0xc
c000d4c1:	55                   	push   ebp
c000d4c2:	e8 9b f7 ff ff       	call   c000cc62 <VgaText::updateCursor()>
c000d4c7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4cf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d5:	83 c4 10             	add    esp,0x10
c000d4d8:	0f b7 db             	movzx  ebx,bx
c000d4db:	01 db                	add    ebx,ebx
c000d4dd:	31 c0                	xor    eax,eax
c000d4df:	01 fb                	add    ebx,edi
c000d4e1:	e9 c3 00 00 00       	jmp    c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4e6:	80 f9 08             	cmp    cl,0x8
c000d4e9:	75 4e                	jne    c000d539 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4ef:	50                   	push   eax
c000d4f0:	50                   	push   eax
c000d4f1:	6a 01                	push   0x1
c000d4f3:	55                   	push   ebp
c000d4f4:	e8 df fc ff ff       	call   c000d1d8 <VgaText::decrementCursor(bool)>
c000d4f9:	58                   	pop    eax
c000d4fa:	5a                   	pop    edx
c000d4fb:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d501:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d507:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d50d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d513:	6a 20                	push   0x20
c000d515:	55                   	push   ebp
c000d516:	e8 3b f9 ff ff       	call   c000ce56 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d51b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d523:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d529:	83 c4 20             	add    esp,0x20
c000d52c:	0f b7 db             	movzx  ebx,bx
c000d52f:	01 db                	add    ebx,ebx
c000d531:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d535:	01 fb                	add    ebx,edi
c000d537:	eb 70                	jmp    c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d539:	50                   	push   eax
c000d53a:	50                   	push   eax
c000d53b:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d540:	50                   	push   eax
c000d541:	51                   	push   ecx
c000d542:	e8 fd f8 ff ff       	call   c000ce44 <VgaText::combineCharAndColour(char, unsigned char)>
c000d547:	66 89 03             	mov    WORD PTR [ebx],ax
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d553:	75 2a                	jne    c000d57f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d555:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d55b:	85 c0                	test   eax,eax
c000d55d:	74 20                	je     c000d57f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d55f:	52                   	push   edx
c000d560:	52                   	push   edx
c000d561:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d567:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d56d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d571:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d575:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d578:	51                   	push   ecx
c000d579:	55                   	push   ebp
c000d57a:	ff d0                	call   eax
c000d57c:	83 c4 20             	add    esp,0x20
c000d57f:	50                   	push   eax
c000d580:	83 c3 02             	add    ebx,0x2
c000d583:	50                   	push   eax
c000d584:	6a 00                	push   0x0
c000d586:	55                   	push   ebp
c000d587:	e8 98 f9 ff ff       	call   c000cf24 <VgaText::incrementCursor(bool)>
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d596:	75 0f                	jne    c000d5a7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d598:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5a0:	0f b7 db             	movzx  ebx,bx
c000d5a3:	01 db                	add    ebx,ebx
c000d5a5:	01 fb                	add    ebx,edi
c000d5a7:	b0 01                	mov    al,0x1
c000d5a9:	46                   	inc    esi
c000d5aa:	e9 b8 fe ff ff       	jmp    c000d467 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5af:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5b3:	83 ec 0c             	sub    esp,0xc
c000d5b6:	55                   	push   ebp
c000d5b7:	e8 a6 f6 ff ff       	call   c000cc62 <VgaText::updateCursor()>
c000d5bc:	83 c4 10             	add    esp,0x10
c000d5bf:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5c3:	84 c0                	test   al,al
c000d5c5:	74 0c                	je     c000d5d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5c7:	83 ec 0c             	sub    esp,0xc
c000d5ca:	55                   	push   ebp
c000d5cb:	e8 3e fe ff ff       	call   c000d40e <VgaText::doUpdate()>
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5da:	83 c4 1c             	add    esp,0x1c
c000d5dd:	5b                   	pop    ebx
c000d5de:	5e                   	pop    esi
c000d5df:	5f                   	pop    edi
c000d5e0:	5d                   	pop    ebp
c000d5e1:	c3                   	ret    

c000d5e2 <VgaText::clearScreen()>:
c000d5e2:	57                   	push   edi
c000d5e3:	56                   	push   esi
c000d5e4:	31 f6                	xor    esi,esi
c000d5e6:	53                   	push   ebx
c000d5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5eb:	52                   	push   edx
c000d5ec:	6a 00                	push   0x0
c000d5ee:	6a 00                	push   0x0
c000d5f0:	53                   	push   ebx
c000d5f1:	e8 d8 f8 ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000d5f6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5fd:	83 c4 10             	add    esp,0x10
c000d600:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d606:	7e 26                	jle    c000d62e <VgaText::clearScreen()+0x4c>
c000d608:	31 ff                	xor    edi,edi
c000d60a:	50                   	push   eax
c000d60b:	50                   	push   eax
c000d60c:	56                   	push   esi
c000d60d:	57                   	push   edi
c000d60e:	47                   	inc    edi
c000d60f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d615:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d61b:	6a 20                	push   0x20
c000d61d:	53                   	push   ebx
c000d61e:	e8 33 f8 ff ff       	call   c000ce56 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d623:	83 c4 20             	add    esp,0x20
c000d626:	83 ff 50             	cmp    edi,0x50
c000d629:	75 df                	jne    c000d60a <VgaText::clearScreen()+0x28>
c000d62b:	46                   	inc    esi
c000d62c:	eb d2                	jmp    c000d600 <VgaText::clearScreen()+0x1e>
c000d62e:	83 ec 0c             	sub    esp,0xc
c000d631:	53                   	push   ebx
c000d632:	e8 d7 fd ff ff       	call   c000d40e <VgaText::doUpdate()>
c000d637:	83 c4 10             	add    esp,0x10
c000d63a:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d641:	5b                   	pop    ebx
c000d642:	5e                   	pop    esi
c000d643:	5f                   	pop    edi
c000d644:	c3                   	ret    
c000d645:	90                   	nop

c000d646 <VgaText::putchar(char)>:
c000d646:	56                   	push   esi
c000d647:	53                   	push   ebx
c000d648:	83 ec 14             	sub    esp,0x14
c000d64b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d64f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d653:	3c 5b                	cmp    al,0x5b
c000d655:	75 21                	jne    c000d678 <VgaText::putchar(char)+0x32>
c000d657:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d65e:	74 28                	je     c000d688 <VgaText::putchar(char)+0x42>
c000d660:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d669:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d673:	e9 e2 00 00 00       	jmp    c000d75a <VgaText::putchar(char)+0x114>
c000d678:	3c 1b                	cmp    al,0x1b
c000d67a:	75 0c                	jne    c000d688 <VgaText::putchar(char)+0x42>
c000d67c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d683:	e9 d2 00 00 00       	jmp    c000d75a <VgaText::putchar(char)+0x114>
c000d688:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d68e:	84 c9                	test   cl,cl
c000d690:	0f 84 ab 00 00 00    	je     c000d741 <VgaText::putchar(char)+0xfb>
c000d696:	8d 50 c0             	lea    edx,[eax-0x40]
c000d699:	80 fa 3e             	cmp    dl,0x3e
c000d69c:	0f 87 82 00 00 00    	ja     c000d724 <VgaText::putchar(char)+0xde>
c000d6a2:	3c 6d                	cmp    al,0x6d
c000d6a4:	75 4d                	jne    c000d6f3 <VgaText::putchar(char)+0xad>
c000d6a6:	31 f6                	xor    esi,esi
c000d6a8:	31 d2                	xor    edx,edx
c000d6aa:	31 c0                	xor    eax,eax
c000d6ac:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6b2:	7e 30                	jle    c000d6e4 <VgaText::putchar(char)+0x9e>
c000d6b4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6bc:	80 fa 3b             	cmp    dl,0x3b
c000d6bf:	75 17                	jne    c000d6d8 <VgaText::putchar(char)+0x92>
c000d6c1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6c5:	50                   	push   eax
c000d6c6:	53                   	push   ebx
c000d6c7:	e8 fa f5 ff ff       	call   c000ccc6 <VgaText::doANSI_SGR(int)>
c000d6cc:	59                   	pop    ecx
c000d6cd:	31 d2                	xor    edx,edx
c000d6cf:	58                   	pop    eax
c000d6d0:	31 c0                	xor    eax,eax
c000d6d2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6d6:	eb 09                	jmp    c000d6e1 <VgaText::putchar(char)+0x9b>
c000d6d8:	6b c0 0a             	imul   eax,eax,0xa
c000d6db:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6df:	88 ca                	mov    dl,cl
c000d6e1:	46                   	inc    esi
c000d6e2:	eb c8                	jmp    c000d6ac <VgaText::putchar(char)+0x66>
c000d6e4:	84 d2                	test   dl,dl
c000d6e6:	74 31                	je     c000d719 <VgaText::putchar(char)+0xd3>
c000d6e8:	50                   	push   eax
c000d6e9:	53                   	push   ebx
c000d6ea:	e8 d7 f5 ff ff       	call   c000ccc6 <VgaText::doANSI_SGR(int)>
c000d6ef:	58                   	pop    eax
c000d6f0:	5a                   	pop    edx
c000d6f1:	eb 26                	jmp    c000d719 <VgaText::putchar(char)+0xd3>
c000d6f3:	3c 4a                	cmp    al,0x4a
c000d6f5:	75 22                	jne    c000d719 <VgaText::putchar(char)+0xd3>
c000d6f7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6fe:	75 19                	jne    c000d719 <VgaText::putchar(char)+0xd3>
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	53                   	push   ebx
c000d704:	e8 d9 fe ff ff       	call   c000d5e2 <VgaText::clearScreen()>
c000d709:	83 c4 0c             	add    esp,0xc
c000d70c:	6a 00                	push   0x0
c000d70e:	6a 00                	push   0x0
c000d710:	53                   	push   ebx
c000d711:	e8 b8 f7 ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d722:	eb 36                	jmp    c000d75a <VgaText::putchar(char)+0x114>
c000d724:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d72a:	83 fa 0e             	cmp    edx,0xe
c000d72d:	7f 2b                	jg     c000d75a <VgaText::putchar(char)+0x114>
c000d72f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d732:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d738:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d73f:	eb 19                	jmp    c000d75a <VgaText::putchar(char)+0x114>
c000d741:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d747:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d74d:	0f be c0             	movsx  eax,al
c000d750:	50                   	push   eax
c000d751:	53                   	push   ebx
c000d752:	e8 a9 fa ff ff       	call   c000d200 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d757:	83 c4 10             	add    esp,0x10
c000d75a:	83 c4 14             	add    esp,0x14
c000d75d:	5b                   	pop    ebx
c000d75e:	5e                   	pop    esi
c000d75f:	c3                   	ret    

c000d760 <VgaText::puts(char const*)>:
c000d760:	53                   	push   ebx
c000d761:	83 ec 08             	sub    esp,0x8
c000d764:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d768:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d76b:	84 c0                	test   al,al
c000d76d:	74 12                	je     c000d781 <VgaText::puts(char const*)+0x21>
c000d76f:	51                   	push   ecx
c000d770:	43                   	inc    ebx
c000d771:	51                   	push   ecx
c000d772:	50                   	push   eax
c000d773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d777:	e8 ca fe ff ff       	call   c000d646 <VgaText::putchar(char)>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	eb e7                	jmp    c000d768 <VgaText::puts(char const*)+0x8>
c000d781:	83 c4 08             	add    esp,0x8
c000d784:	5b                   	pop    ebx
c000d785:	c3                   	ret    

c000d786 <VgaText::putx(unsigned int)>:
c000d786:	57                   	push   edi
c000d787:	b9 11 00 00 00       	mov    ecx,0x11
c000d78c:	56                   	push   esi
c000d78d:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d792:	53                   	push   ebx
c000d793:	83 ec 20             	sub    esp,0x20
c000d796:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d79a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d79e:	fc                   	cld    
c000d79f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7a1:	be 08 00 00 00       	mov    esi,0x8
c000d7a6:	50                   	push   eax
c000d7a7:	50                   	push   eax
c000d7a8:	89 d8                	mov    eax,ebx
c000d7aa:	c1 e8 1c             	shr    eax,0x1c
c000d7ad:	c1 e3 04             	shl    ebx,0x4
c000d7b0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7b5:	50                   	push   eax
c000d7b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7ba:	e8 87 fe ff ff       	call   c000d646 <VgaText::putchar(char)>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	4e                   	dec    esi
c000d7c3:	75 e1                	jne    c000d7a6 <VgaText::putx(unsigned int)+0x20>
c000d7c5:	83 c4 20             	add    esp,0x20
c000d7c8:	5b                   	pop    ebx
c000d7c9:	5e                   	pop    esi
c000d7ca:	5f                   	pop    edi
c000d7cb:	c3                   	ret    

c000d7cc <VgaText::VgaText(char const*)>:
c000d7cc:	57                   	push   edi
c000d7cd:	56                   	push   esi
c000d7ce:	53                   	push   ebx
c000d7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d3:	83 ec 08             	sub    esp,0x8
c000d7d6:	6a 00                	push   0x0
c000d7d8:	50                   	push   eax
c000d7d9:	e8 e0 05 00 00       	call   c000ddbe <UnixFile::UnixFile(int)>
c000d7de:	83 c4 10             	add    esp,0x10
c000d7e1:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	89 10                	mov    DWORD PTR [eax],edx
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d817:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d822:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d830:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d849:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d854:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d85a:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d85f:	b8 08 00 00 00       	mov    eax,0x8
c000d864:	fc                   	cld    
c000d865:	89 d7                	mov    edi,edx
c000d867:	89 de                	mov    esi,ebx
c000d869:	89 c1                	mov    ecx,eax
c000d86b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d871:	05 1e 10 00 00       	add    eax,0x101e
c000d876:	83 ec 08             	sub    esp,0x8
c000d879:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87d:	50                   	push   eax
c000d87e:	e8 db 2e ff ff       	call   c000075e <strcpy>
c000d883:	83 c4 10             	add    esp,0x10
c000d886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d898:	83 c0 0c             	add    eax,0xc
c000d89b:	83 ec 04             	sub    esp,0x4
c000d89e:	68 00 0f 00 00       	push   0xf00
c000d8a3:	6a 00                	push   0x0
c000d8a5:	50                   	push   eax
c000d8a6:	e8 14 2e ff ff       	call   c00006bf <memset>
c000d8ab:	83 c4 10             	add    esp,0x10
c000d8ae:	83 ec 04             	sub    esp,0x4
c000d8b1:	6a 00                	push   0x0
c000d8b3:	6a 07                	push   0x7
c000d8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b9:	e8 c0 f4 ff ff       	call   c000cd7e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8be:	83 c4 10             	add    esp,0x10
c000d8c1:	83 ec 08             	sub    esp,0x8
c000d8c4:	6a 02                	push   0x2
c000d8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ca:	e8 47 fa ff ff       	call   c000d316 <VgaText::setCursorHeight(int)>
c000d8cf:	83 c4 10             	add    esp,0x10
c000d8d2:	83 ec 04             	sub    esp,0x4
c000d8d5:	6a 00                	push   0x0
c000d8d7:	6a 00                	push   0x0
c000d8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8dd:	e8 ec f5 ff ff       	call   c000cece <VgaText::setCursor(int, int)>
c000d8e2:	83 c4 10             	add    esp,0x10
c000d8e5:	83 ec 08             	sub    esp,0x8
c000d8e8:	6a 01                	push   0x1
c000d8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ee:	e8 89 f3 ff ff       	call   c000cc7c <VgaText::showCursor(bool)>
c000d8f3:	83 c4 10             	add    esp,0x10
c000d8f6:	83 ec 08             	sub    esp,0x8
c000d8f9:	6a 01                	push   0x1
c000d8fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ff:	e8 88 f3 ff ff       	call   c000cc8c <VgaText::disableBlink(bool)>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	83 ec 0c             	sub    esp,0xc
c000d90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90e:	e8 cf fc ff ff       	call   c000d5e2 <VgaText::clearScreen()>
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d925:	05 9e 10 00 00       	add    eax,0x109e
c000d92a:	83 ec 04             	sub    esp,0x4
c000d92d:	68 96 00 00 00       	push   0x96
c000d932:	6a 00                	push   0x0
c000d934:	50                   	push   eax
c000d935:	e8 85 2d ff ff       	call   c00006bf <memset>
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d941:	05 34 11 00 00       	add    eax,0x1134
c000d946:	83 ec 04             	sub    esp,0x4
c000d949:	68 2c 01 00 00       	push   0x12c
c000d94e:	6a 00                	push   0x0
c000d950:	50                   	push   eax
c000d951:	e8 69 2d ff ff       	call   c00006bf <memset>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	90                   	nop
c000d95a:	5b                   	pop    ebx
c000d95b:	5e                   	pop    esi
c000d95c:	5f                   	pop    edi
c000d95d:	c3                   	ret    

c000d95e <VgaText::receiveKey(unsigned char)>:
c000d95e:	55                   	push   ebp
c000d95f:	57                   	push   edi
c000d960:	56                   	push   esi
c000d961:	53                   	push   ebx
c000d962:	83 ec 1c             	sub    esp,0x1c
c000d965:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d969:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d96d:	84 db                	test   bl,bl
c000d96f:	0f 84 c9 00 00 00    	je     c000da3e <VgaText::receiveKey(unsigned char)+0xe0>
c000d975:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d97b:	80 fb 08             	cmp    bl,0x8
c000d97e:	75 2c                	jne    c000d9ac <VgaText::receiveKey(unsigned char)+0x4e>
c000d980:	83 ec 0c             	sub    esp,0xc
c000d983:	57                   	push   edi
c000d984:	e8 53 2d ff ff       	call   c00006dc <strlen>
c000d989:	83 c4 10             	add    esp,0x10
c000d98c:	85 c0                	test   eax,eax
c000d98e:	74 41                	je     c000d9d1 <VgaText::receiveKey(unsigned char)+0x73>
c000d990:	50                   	push   eax
c000d991:	50                   	push   eax
c000d992:	6a 08                	push   0x8
c000d994:	56                   	push   esi
c000d995:	e8 ac fc ff ff       	call   c000d646 <VgaText::putchar(char)>
c000d99a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d99d:	e8 3a 2d ff ff       	call   c00006dc <strlen>
c000d9a2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9aa:	eb 22                	jmp    c000d9ce <VgaText::receiveKey(unsigned char)+0x70>
c000d9ac:	52                   	push   edx
c000d9ad:	52                   	push   edx
c000d9ae:	0f be c3             	movsx  eax,bl
c000d9b1:	50                   	push   eax
c000d9b2:	56                   	push   esi
c000d9b3:	e8 8e fc ff ff       	call   c000d646 <VgaText::putchar(char)>
c000d9b8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9bc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9c1:	59                   	pop    ecx
c000d9c2:	5d                   	pop    ebp
c000d9c3:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9c7:	50                   	push   eax
c000d9c8:	57                   	push   edi
c000d9c9:	e8 47 2e ff ff       	call   c0000815 <strcat>
c000d9ce:	83 c4 10             	add    esp,0x10
c000d9d1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9d8:	75 05                	jne    c000d9df <VgaText::receiveKey(unsigned char)+0x81>
c000d9da:	80 fb 0a             	cmp    bl,0xa
c000d9dd:	75 53                	jne    c000da32 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9df:	83 ec 0c             	sub    esp,0xc
c000d9e2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9e8:	53                   	push   ebx
c000d9e9:	e8 ee 2c ff ff       	call   c00006dc <strlen>
c000d9ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9f1:	89 c5                	mov    ebp,eax
c000d9f3:	e8 e4 2c ff ff       	call   c00006dc <strlen>
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9ff:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da04:	76 10                	jbe    c000da16 <VgaText::receiveKey(unsigned char)+0xb8>
c000da06:	83 ec 0c             	sub    esp,0xc
c000da09:	68 93 14 02 c0       	push   0xc0021493
c000da0e:	e8 2b 80 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	50                   	push   eax
c000da17:	50                   	push   eax
c000da18:	57                   	push   edi
c000da19:	53                   	push   ebx
c000da1a:	e8 f6 2d ff ff       	call   c0000815 <strcat>
c000da1f:	83 c4 0c             	add    esp,0xc
c000da22:	68 96 00 00 00       	push   0x96
c000da27:	6a 00                	push   0x0
c000da29:	57                   	push   edi
c000da2a:	e8 90 2c ff ff       	call   c00006bf <memset>
c000da2f:	83 c4 10             	add    esp,0x10
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	56                   	push   esi
c000da36:	e8 d3 f9 ff ff       	call   c000d40e <VgaText::doUpdate()>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	83 c4 1c             	add    esp,0x1c
c000da41:	5b                   	pop    ebx
c000da42:	5e                   	pop    esi
c000da43:	5f                   	pop    edi
c000da44:	5d                   	pop    ebp
c000da45:	c3                   	ret    

c000da46 <VgaText::write(unsigned long long, void*, int*)>:
c000da46:	55                   	push   ebp
c000da47:	57                   	push   edi
c000da48:	56                   	push   esi
c000da49:	53                   	push   ebx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da51:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da59:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da60:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da63:	39 eb                	cmp    ebx,ebp
c000da65:	74 13                	je     c000da7a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da67:	50                   	push   eax
c000da68:	43                   	inc    ebx
c000da69:	50                   	push   eax
c000da6a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da6e:	50                   	push   eax
c000da6f:	56                   	push   esi
c000da70:	e8 d1 fb ff ff       	call   c000d646 <VgaText::putchar(char)>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	eb e9                	jmp    c000da63 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da7a:	83 ec 0c             	sub    esp,0xc
c000da7d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da84:	56                   	push   esi
c000da85:	e8 84 f9 ff ff       	call   c000d40e <VgaText::doUpdate()>
c000da8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da8e:	89 38                	mov    DWORD PTR [eax],edi
c000da90:	83 c4 1c             	add    esp,0x1c
c000da93:	31 c0                	xor    eax,eax
c000da95:	5b                   	pop    ebx
c000da96:	5e                   	pop    esi
c000da97:	5f                   	pop    edi
c000da98:	5d                   	pop    ebp
c000da99:	c3                   	ret    

c000da9a <newTerminal(char*)>:
c000da9a:	83 ec 28             	sub    esp,0x28
c000da9d:	68 60 12 00 00       	push   0x1260
c000daa2:	e8 33 16 00 00       	call   c000f0da <operator new(unsigned long)>
c000daa7:	5a                   	pop    edx
c000daa8:	59                   	pop    ecx
c000daa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daad:	50                   	push   eax
c000daae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dab2:	e8 15 fd ff ff       	call   c000d7cc <VgaText::VgaText(char const*)>
c000dab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dabb:	83 c4 2c             	add    esp,0x2c
c000dabe:	c3                   	ret    
c000dabf:	90                   	nop

c000dac0 <TSS::TSS()>:
c000dac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dacb:	90                   	nop
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <TSS::setESP(unsigned long)>:
c000dace:	55                   	push   ebp
c000dacf:	89 e5                	mov    ebp,esp
c000dad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dada:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dadd:	90                   	nop
c000dade:	5d                   	pop    ebp
c000dadf:	c3                   	ret    

c000dae0 <TSS::flush()>:
c000dae0:	55                   	push   ebp
c000dae1:	89 e5                	mov    ebp,esp
c000dae3:	83 ec 10             	sub    esp,0x10
c000dae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae9:	8b 00                	mov    eax,DWORD PTR [eax]
c000daeb:	83 c8 03             	or     eax,0x3
c000daee:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daf2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daf6:	66 89 d0             	mov    ax,dx
c000daf9:	0f 00 d8             	ltr    ax
c000dafc:	90                   	nop
c000dafd:	c9                   	leave  
c000dafe:	c3                   	ret    
c000daff:	90                   	nop

c000db00 <TSS::setup(unsigned long, unsigned long)>:
c000db00:	55                   	push   ebp
c000db01:	89 e5                	mov    ebp,esp
c000db03:	53                   	push   ebx
c000db04:	83 ec 14             	sub    esp,0x14
c000db07:	83 ec 0c             	sub    esp,0xc
c000db0a:	6a 68                	push   0x68
c000db0c:	e8 cc e4 ff ff       	call   c000bfdd <malloc>
c000db11:	83 c4 10             	add    esp,0x10
c000db14:	89 c2                	mov    edx,eax
c000db16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db22:	83 ec 04             	sub    esp,0x4
c000db25:	6a 68                	push   0x68
c000db27:	6a 00                	push   0x0
c000db29:	50                   	push   eax
c000db2a:	e8 90 2b ff ff       	call   c00006bf <memset>
c000db2f:	83 c4 10             	add    esp,0x10
c000db32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db38:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db44:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5c:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db68:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db74:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db80:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db8f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba4:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbae:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbb1:	e8 2f 1c 01 00       	call   c001f7e5 <CPU::readCR3()>
c000dbb6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbbf:	83 ec 08             	sub    esp,0x8
c000dbc2:	50                   	push   eax
c000dbc3:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbc6:	50                   	push   eax
c000dbc7:	e8 e8 db ff ff       	call   c000b7b4 <GDTEntry::setBase(unsigned int)>
c000dbcc:	83 c4 10             	add    esp,0x10
c000dbcf:	83 ec 08             	sub    esp,0x8
c000dbd2:	6a 68                	push   0x68
c000dbd4:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd7:	50                   	push   eax
c000dbd8:	e8 f3 db ff ff       	call   c000b7d0 <GDTEntry::setLimit(unsigned int)>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbe4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe7:	83 e0 0f             	and    eax,0xf
c000dbea:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf0:	83 c8 40             	or     eax,0x40
c000dbf3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf6:	e8 d7 6c 00 00       	call   c00148d2 <thisCPU()>
c000dbfb:	05 78 01 00 00       	add    eax,0x178
c000dc00:	83 ec 04             	sub    esp,0x4
c000dc03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc06:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc09:	50                   	push   eax
c000dc0a:	e8 f5 db ff ff       	call   c000b804 <GDT::addEntry(GDTEntry)>
c000dc0f:	83 c4 10             	add    esp,0x10
c000dc12:	89 c2                	mov    edx,eax
c000dc14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc17:	89 10                	mov    DWORD PTR [eax],edx
c000dc19:	e8 b4 6c 00 00       	call   c00148d2 <thisCPU()>
c000dc1e:	05 78 01 00 00       	add    eax,0x178
c000dc23:	83 ec 0c             	sub    esp,0xc
c000dc26:	50                   	push   eax
c000dc27:	e8 1c dc ff ff       	call   c000b848 <GDT::flush()>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc32:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc34:	83 ec 08             	sub    esp,0x8
c000dc37:	50                   	push   eax
c000dc38:	68 fc 14 02 c0       	push   0xc00214fc
c000dc3d:	e8 cd 15 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000dc42:	83 c4 10             	add    esp,0x10
c000dc45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc48:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc4d:	c9                   	leave  
c000dc4e:	c3                   	ret    
c000dc4f:	90                   	nop

c000dc50 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc50:	55                   	push   ebp
c000dc51:	57                   	push   edi
c000dc52:	56                   	push   esi
c000dc53:	53                   	push   ebx
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc5f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc63:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc6a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc6e:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc73:	75 08                	jne    c000dc7d <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc75:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc7b:	eb 5e                	jmp    c000dcdb <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc7d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc82:	75 3d                	jne    c000dcc1 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc84:	83 ec 0c             	sub    esp,0xc
c000dc87:	68 1a 15 02 c0       	push   0xc002151a
c000dc8c:	e8 7e 15 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000dc91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca1:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dca5:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dca9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcad:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcb8:	83 c4 1c             	add    esp,0x1c
c000dcbb:	5b                   	pop    ebx
c000dcbc:	5e                   	pop    esi
c000dcbd:	5f                   	pop    edi
c000dcbe:	5d                   	pop    ebp
c000dcbf:	ff e0                	jmp    eax
c000dcc1:	89 c2                	mov    edx,eax
c000dcc3:	83 e2 fd             	and    edx,0xfffffffd
c000dcc6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dccc:	74 a7                	je     c000dc75 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcce:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcd3:	83 e0 ef             	and    eax,0xffffffef
c000dcd6:	83 f8 08             	cmp    eax,0x8
c000dcd9:	76 9a                	jbe    c000dc75 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcdb:	83 c4 0c             	add    esp,0xc
c000dcde:	31 c0                	xor    eax,eax
c000dce0:	5b                   	pop    ebx
c000dce1:	5e                   	pop    esi
c000dce2:	5f                   	pop    edi
c000dce3:	5d                   	pop    ebp
c000dce4:	c3                   	ret    
c000dce5:	90                   	nop

c000dce6 <ReservedFilename::isAtty()>:
c000dce6:	83 ec 18             	sub    esp,0x18
c000dce9:	68 27 15 02 c0       	push   0xc0021527
c000dcee:	e8 1c 15 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000dcf3:	83 c4 10             	add    esp,0x10
c000dcf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcfa:	31 c0                	xor    eax,eax
c000dcfc:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd03:	75 12                	jne    c000dd17 <ReservedFilename::isAtty()+0x31>
c000dd05:	83 ec 0c             	sub    esp,0xc
c000dd08:	68 3d 15 02 c0       	push   0xc002153d
c000dd0d:	e8 fd 14 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	b0 01                	mov    al,0x1
c000dd17:	83 c4 0c             	add    esp,0xc
c000dd1a:	c3                   	ret    
c000dd1b:	90                   	nop

c000dd1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd1c:	55                   	push   ebp
c000dd1d:	57                   	push   edi
c000dd1e:	56                   	push   esi
c000dd1f:	53                   	push   ebx
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd2b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd2f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd36:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd3a:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd3f:	75 08                	jne    c000dd49 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd41:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd47:	eb 63                	jmp    c000ddac <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd49:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd4e:	75 3d                	jne    c000dd8d <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd50:	83 ec 0c             	sub    esp,0xc
c000dd53:	68 50 15 02 c0       	push   0xc0021550
c000dd58:	e8 b2 14 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000dd5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd65:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd6b:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd6d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd71:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd75:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd79:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd81:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd84:	83 c4 1c             	add    esp,0x1c
c000dd87:	5b                   	pop    ebx
c000dd88:	5e                   	pop    esi
c000dd89:	5f                   	pop    edi
c000dd8a:	5d                   	pop    ebp
c000dd8b:	ff e0                	jmp    eax
c000dd8d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd92:	75 04                	jne    c000dd98 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd94:	89 33                	mov    DWORD PTR [ebx],esi
c000dd96:	eb 14                	jmp    c000ddac <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd98:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd9d:	74 a2                	je     c000dd41 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dd9f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dda4:	83 e0 ef             	and    eax,0xffffffef
c000dda7:	83 f8 08             	cmp    eax,0x8
c000ddaa:	76 95                	jbe    c000dd41 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddac:	83 c4 0c             	add    esp,0xc
c000ddaf:	31 c0                	xor    eax,eax
c000ddb1:	5b                   	pop    ebx
c000ddb2:	5e                   	pop    esi
c000ddb3:	5f                   	pop    edi
c000ddb4:	5d                   	pop    ebp
c000ddb5:	c3                   	ret    

c000ddb6 <UnixFile::getFileDescriptor()>:
c000ddb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddbd:	c3                   	ret    

c000ddbe <UnixFile::UnixFile(int)>:
c000ddbe:	53                   	push   ebx
c000ddbf:	83 ec 18             	sub    esp,0x18
c000ddc2:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000ddc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddcb:	89 10                	mov    DWORD PTR [eax],edx
c000ddcd:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddd5:	0f 8f 4d 01 00 00    	jg     c000df28 <UnixFile::UnixFile(int)+0x16a>
c000dddb:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000dde0:	8d 50 01             	lea    edx,[eax+0x1]
c000dde3:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000dde9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dded:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddf0:	83 ec 08             	sub    esp,0x8
c000ddf3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddf7:	68 f8 48 02 c0       	push   0xc00248f8
c000ddfc:	e8 59 1a 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de01:	83 c4 10             	add    esp,0x10
c000de04:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de09:	83 f0 01             	xor    eax,0x1
c000de0c:	84 c0                	test   al,al
c000de0e:	0f 84 15 01 00 00    	je     c000df29 <UnixFile::UnixFile(int)+0x16b>
c000de14:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de1b:	83 ec 0c             	sub    esp,0xc
c000de1e:	6a 0c                	push   0xc
c000de20:	e8 b5 12 00 00       	call   c000f0da <operator new(unsigned long)>
c000de25:	83 c4 10             	add    esp,0x10
c000de28:	89 c3                	mov    ebx,eax
c000de2a:	83 ec 08             	sub    esp,0x8
c000de2d:	68 03 ff ff 0f       	push   0xfffff03
c000de32:	53                   	push   ebx
c000de33:	e8 f6 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de41:	83 ec 0c             	sub    esp,0xc
c000de44:	6a 0c                	push   0xc
c000de46:	e8 8f 12 00 00       	call   c000f0da <operator new(unsigned long)>
c000de4b:	83 c4 10             	add    esp,0x10
c000de4e:	89 c3                	mov    ebx,eax
c000de50:	83 ec 08             	sub    esp,0x8
c000de53:	68 01 ff ff 0f       	push   0xfffff01
c000de58:	53                   	push   ebx
c000de59:	e8 d0 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de67:	83 ec 0c             	sub    esp,0xc
c000de6a:	6a 0c                	push   0xc
c000de6c:	e8 69 12 00 00       	call   c000f0da <operator new(unsigned long)>
c000de71:	83 c4 10             	add    esp,0x10
c000de74:	89 c3                	mov    ebx,eax
c000de76:	83 ec 08             	sub    esp,0x8
c000de79:	68 00 ff ff 0f       	push   0xfffff00
c000de7e:	53                   	push   ebx
c000de7f:	e8 aa 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000de8d:	83 ec 0c             	sub    esp,0xc
c000de90:	6a 0c                	push   0xc
c000de92:	e8 43 12 00 00       	call   c000f0da <operator new(unsigned long)>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	89 c3                	mov    ebx,eax
c000de9c:	83 ec 08             	sub    esp,0x8
c000de9f:	68 02 ff ff 0f       	push   0xfffff02
c000dea4:	53                   	push   ebx
c000dea5:	e8 84 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000deb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000debb:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dec0:	7f 67                	jg     c000df29 <UnixFile::UnixFile(int)+0x16b>
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	6a 0c                	push   0xc
c000dec7:	e8 0e 12 00 00       	call   c000f0da <operator new(unsigned long)>
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	89 c3                	mov    ebx,eax
c000ded1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded5:	05 10 ff ff 0f       	add    eax,0xfffff10
c000deda:	83 ec 08             	sub    esp,0x8
c000dedd:	50                   	push   eax
c000dede:	53                   	push   ebx
c000dedf:	e8 4a 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000dee4:	83 c4 10             	add    esp,0x10
c000dee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deeb:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000def2:	83 ec 0c             	sub    esp,0xc
c000def5:	6a 0c                	push   0xc
c000def7:	e8 de 11 00 00       	call   c000f0da <operator new(unsigned long)>
c000defc:	83 c4 10             	add    esp,0x10
c000deff:	89 c3                	mov    ebx,eax
c000df01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df05:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df0a:	83 ec 08             	sub    esp,0x8
c000df0d:	50                   	push   eax
c000df0e:	53                   	push   ebx
c000df0f:	e8 1a 00 00 00       	call   c000df2e <ReservedFilename::ReservedFilename(int)>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df1b:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df26:	eb 93                	jmp    c000debb <UnixFile::UnixFile(int)+0xfd>
c000df28:	90                   	nop
c000df29:	83 c4 18             	add    esp,0x18
c000df2c:	5b                   	pop    ebx
c000df2d:	c3                   	ret    

c000df2e <ReservedFilename::ReservedFilename(int)>:
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3c:	50                   	push   eax
c000df3d:	e8 7c fe ff ff       	call   c000ddbe <UnixFile::UnixFile(int)>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4e:	89 10                	mov    DWORD PTR [eax],edx
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df5b:	90                   	nop
c000df5c:	83 c4 0c             	add    esp,0xc
c000df5f:	c3                   	ret    

c000df60 <UnixFile::~UnixFile()>:
c000df60:	83 ec 1c             	sub    esp,0x1c
c000df63:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df6c:	89 10                	mov    DWORD PTR [eax],edx
c000df6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df75:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df7a:	7f 73                	jg     c000dfef <UnixFile::~UnixFile()+0x8f>
c000df7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df84:	83 ec 0c             	sub    esp,0xc
c000df87:	68 f8 48 02 c0       	push   0xc00248f8
c000df8c:	e8 9d 19 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	68 f8 48 02 c0       	push   0xc00248f8
c000dfa0:	e8 91 19 01 00       	call   c001f936 <LinkedList<UnixFile>::removeFirst()>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfac:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfb0:	74 40                	je     c000dff2 <UnixFile::~UnixFile()+0x92>
c000dfb2:	83 ec 08             	sub    esp,0x8
c000dfb5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfb9:	68 f8 48 02 c0       	push   0xc00248f8
c000dfbe:	e8 97 18 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfca:	8d 50 01             	lea    edx,[eax+0x1]
c000dfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd1:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfd6:	0f 94 c0             	sete   al
c000dfd9:	84 c0                	test   al,al
c000dfdb:	74 a7                	je     c000df84 <UnixFile::~UnixFile()+0x24>
c000dfdd:	83 ec 0c             	sub    esp,0xc
c000dfe0:	68 44 16 02 c0       	push   0xc0021644
c000dfe5:	e8 54 7a 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	eb 95                	jmp    c000df84 <UnixFile::~UnixFile()+0x24>
c000dfef:	90                   	nop
c000dff0:	eb 01                	jmp    c000dff3 <UnixFile::~UnixFile()+0x93>
c000dff2:	90                   	nop
c000dff3:	90                   	nop
c000dff4:	83 c4 1c             	add    esp,0x1c
c000dff7:	c3                   	ret    

c000dff8 <UnixFile::~UnixFile()>:
c000dff8:	83 ec 0c             	sub    esp,0xc
c000dffb:	83 ec 0c             	sub    esp,0xc
c000dffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e002:	e8 59 ff ff ff       	call   c000df60 <UnixFile::~UnixFile()>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	83 ec 08             	sub    esp,0x8
c000e00d:	6a 0c                	push   0xc
c000e00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e013:	e8 d1 10 00 00       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000e018:	83 c4 10             	add    esp,0x10
c000e01b:	83 c4 0c             	add    esp,0xc
c000e01e:	c3                   	ret    
c000e01f:	90                   	nop

c000e020 <ReservedFilename::~ReservedFilename()>:
c000e020:	83 ec 0c             	sub    esp,0xc
c000e023:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02c:	89 10                	mov    DWORD PTR [eax],edx
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	83 ec 0c             	sub    esp,0xc
c000e035:	50                   	push   eax
c000e036:	e8 25 ff ff ff       	call   c000df60 <UnixFile::~UnixFile()>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	90                   	nop
c000e03f:	83 c4 0c             	add    esp,0xc
c000e042:	c3                   	ret    
c000e043:	90                   	nop

c000e044 <ReservedFilename::~ReservedFilename()>:
c000e044:	83 ec 0c             	sub    esp,0xc
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04e:	e8 cd ff ff ff       	call   c000e020 <ReservedFilename::~ReservedFilename()>
c000e053:	83 c4 10             	add    esp,0x10
c000e056:	83 ec 08             	sub    esp,0x8
c000e059:	6a 0c                	push   0xc
c000e05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05f:	e8 85 10 00 00       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000e064:	83 c4 10             	add    esp,0x10
c000e067:	83 c4 0c             	add    esp,0xc
c000e06a:	c3                   	ret    

c000e06b <getFromFileDescriptor(int)>:
c000e06b:	53                   	push   ebx
c000e06c:	83 ec 08             	sub    esp,0x8
c000e06f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e073:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e079:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e07f:	7f 33                	jg     c000e0b4 <getFromFileDescriptor(int)+0x49>
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	68 f8 48 02 c0       	push   0xc00248f8
c000e089:	e8 a0 18 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	85 c0                	test   eax,eax
c000e093:	75 07                	jne    c000e09c <getFromFileDescriptor(int)+0x31>
c000e095:	31 c0                	xor    eax,eax
c000e097:	e9 98 00 00 00       	jmp    c000e134 <getFromFileDescriptor(int)+0xc9>
c000e09c:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e09f:	0f 84 8f 00 00 00    	je     c000e134 <getFromFileDescriptor(int)+0xc9>
c000e0a5:	52                   	push   edx
c000e0a6:	52                   	push   edx
c000e0a7:	50                   	push   eax
c000e0a8:	68 f8 48 02 c0       	push   0xc00248f8
c000e0ad:	e8 26 19 01 00       	call   c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0b2:	eb da                	jmp    c000e08e <getFromFileDescriptor(int)+0x23>
c000e0b4:	83 ec 0c             	sub    esp,0xc
c000e0b7:	68 5d 15 02 c0       	push   0xc002155d
c000e0bc:	e8 4e 11 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0c9:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0cf:	74 63                	je     c000e134 <getFromFileDescriptor(int)+0xc9>
c000e0d1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0d7:	75 17                	jne    c000e0f0 <getFromFileDescriptor(int)+0x85>
c000e0d9:	83 ec 0c             	sub    esp,0xc
c000e0dc:	68 84 15 02 c0       	push   0xc0021584
c000e0e1:	e8 29 11 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e0e6:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	eb 44                	jmp    c000e134 <getFromFileDescriptor(int)+0xc9>
c000e0f0:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e0f5:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e0fb:	74 37                	je     c000e134 <getFromFileDescriptor(int)+0xc9>
c000e0fd:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e102:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e108:	74 2a                	je     c000e134 <getFromFileDescriptor(int)+0xc9>
c000e10a:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e110:	83 f8 08             	cmp    eax,0x8
c000e113:	77 09                	ja     c000e11e <getFromFileDescriptor(int)+0xb3>
c000e115:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e11c:	eb 16                	jmp    c000e134 <getFromFileDescriptor(int)+0xc9>
c000e11e:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e124:	83 fb 08             	cmp    ebx,0x8
c000e127:	0f 87 68 ff ff ff    	ja     c000e095 <getFromFileDescriptor(int)+0x2a>
c000e12d:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e134:	83 c4 08             	add    esp,0x8
c000e137:	5b                   	pop    ebx
c000e138:	c3                   	ret    

c000e139 <__static_initialization_and_destruction_0(int, int)>:
c000e139:	83 ec 0c             	sub    esp,0xc
c000e13c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e141:	75 34                	jne    c000e177 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e143:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e14b:	75 2a                	jne    c000e177 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	68 f8 48 02 c0       	push   0xc00248f8
c000e155:	e8 a8 16 01 00       	call   c001f802 <LinkedList<UnixFile>::LinkedList()>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	83 ec 04             	sub    esp,0x4
c000e160:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e165:	68 f8 48 02 c0       	push   0xc00248f8
c000e16a:	68 00 f8 01 c0       	push   0xc001f800
c000e16f:	e8 f1 0e 00 00       	call   c000f065 <__cxa_atexit>
c000e174:	83 c4 10             	add    esp,0x10
c000e177:	90                   	nop
c000e178:	83 c4 0c             	add    esp,0xc
c000e17b:	c3                   	ret    

c000e17c <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e17c:	83 ec 0c             	sub    esp,0xc
c000e17f:	83 ec 08             	sub    esp,0x8
c000e182:	68 ff ff 00 00       	push   0xffff
c000e187:	6a 01                	push   0x1
c000e189:	e8 ab ff ff ff       	call   c000e139 <__static_initialization_and_destruction_0(int, int)>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	83 c4 0c             	add    esp,0xc
c000e194:	c3                   	ret    
c000e195:	90                   	nop

c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e196:	53                   	push   ebx
c000e197:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e19d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1a5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1ab:	89 c8                	mov    eax,ecx
c000e1ad:	d1 e8                	shr    eax,1
c000e1af:	01 d0                	add    eax,edx
c000e1b1:	83 e1 01             	and    ecx,0x1
c000e1b4:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1b6:	75 09                	jne    c000e1c1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1b8:	83 e2 f0             	and    edx,0xfffffff0
c000e1bb:	09 da                	or     edx,ebx
c000e1bd:	88 10                	mov    BYTE PTR [eax],dl
c000e1bf:	5b                   	pop    ebx
c000e1c0:	c3                   	ret    
c000e1c1:	c1 e3 04             	shl    ebx,0x4
c000e1c4:	83 e2 0f             	and    edx,0xf
c000e1c7:	09 da                	or     edx,ebx
c000e1c9:	88 10                	mov    BYTE PTR [eax],dl
c000e1cb:	5b                   	pop    ebx
c000e1cc:	c3                   	ret    

c000e1cd <Virt::getPageState(unsigned long)>:
c000e1cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1d1:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1d7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	d1 e8                	shr    eax,1
c000e1e1:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1e4:	88 c8                	mov    al,cl
c000e1e6:	c0 e8 04             	shr    al,0x4
c000e1e9:	83 e2 01             	and    edx,0x1
c000e1ec:	75 05                	jne    c000e1f3 <Virt::getPageState(unsigned long)+0x26>
c000e1ee:	88 c8                	mov    al,cl
c000e1f0:	83 e0 0f             	and    eax,0xf
c000e1f3:	c3                   	ret    

c000e1f4 <Virt::allocateKernelVirtualPages(int)>:
c000e1f4:	55                   	push   ebp
c000e1f5:	31 ed                	xor    ebp,ebp
c000e1f7:	57                   	push   edi
c000e1f8:	56                   	push   esi
c000e1f9:	53                   	push   ebx
c000e1fa:	31 db                	xor    ebx,ebx
c000e1fc:	83 ec 1c             	sub    esp,0x1c
c000e1ff:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e205:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e209:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e20e:	57                   	push   edi
c000e20f:	e8 b9 ff ff ff       	call   c000e1cd <Virt::getPageState(unsigned long)>
c000e214:	5a                   	pop    edx
c000e215:	84 c0                	test   al,al
c000e217:	75 3a                	jne    c000e253 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e219:	85 db                	test   ebx,ebx
c000e21b:	75 02                	jne    c000e21f <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e21d:	89 fd                	mov    ebp,edi
c000e21f:	43                   	inc    ebx
c000e220:	39 f3                	cmp    ebx,esi
c000e222:	74 5a                	je     c000e27e <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e224:	47                   	inc    edi
c000e225:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e22b:	76 31                	jbe    c000e25e <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e22d:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e237:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e23c:	75 28                	jne    c000e266 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e23e:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e243:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e248:	57                   	push   edi
c000e249:	e8 7f ff ff ff       	call   c000e1cd <Virt::getPageState(unsigned long)>
c000e24e:	5a                   	pop    edx
c000e24f:	84 c0                	test   al,al
c000e251:	74 c6                	je     c000e219 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e253:	47                   	inc    edi
c000e254:	31 db                	xor    ebx,ebx
c000e256:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e25c:	77 cf                	ja     c000e22d <Virt::allocateKernelVirtualPages(int)+0x39>
c000e25e:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e264:	eb a8                	jmp    c000e20e <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e266:	83 ec 0c             	sub    esp,0xc
c000e269:	68 9c 16 02 c0       	push   0xc002169c
c000e26e:	e8 cb 77 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e273:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e279:	83 c4 10             	add    esp,0x10
c000e27c:	eb 90                	jmp    c000e20e <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e27e:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e284:	4b                   	dec    ebx
c000e285:	74 5f                	je     c000e2e6 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e287:	85 f6                	test   esi,esi
c000e289:	74 3d                	je     c000e2c8 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e28b:	89 e8                	mov    eax,ebp
c000e28d:	31 db                	xor    ebx,ebx
c000e28f:	8d 7e ff             	lea    edi,[esi-0x1]
c000e292:	eb 14                	jmp    c000e2a8 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e294:	6a 01                	push   0x1
c000e296:	43                   	inc    ebx
c000e297:	50                   	push   eax
c000e298:	e8 f9 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e29d:	58                   	pop    eax
c000e29e:	39 f3                	cmp    ebx,esi
c000e2a0:	5a                   	pop    edx
c000e2a1:	74 25                	je     c000e2c8 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2a3:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ab:	85 db                	test   ebx,ebx
c000e2ad:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2b3:	74 20                	je     c000e2d5 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2b5:	39 df                	cmp    edi,ebx
c000e2b7:	75 db                	jne    c000e294 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2b9:	6a 03                	push   0x3
c000e2bb:	43                   	inc    ebx
c000e2bc:	50                   	push   eax
c000e2bd:	e8 d4 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2c2:	59                   	pop    ecx
c000e2c3:	39 f3                	cmp    ebx,esi
c000e2c5:	58                   	pop    eax
c000e2c6:	75 db                	jne    c000e2a3 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2c8:	83 c4 1c             	add    esp,0x1c
c000e2cb:	89 e8                	mov    eax,ebp
c000e2cd:	c1 e0 0c             	shl    eax,0xc
c000e2d0:	5b                   	pop    ebx
c000e2d1:	5e                   	pop    esi
c000e2d2:	5f                   	pop    edi
c000e2d3:	5d                   	pop    ebp
c000e2d4:	c3                   	ret    
c000e2d5:	6a 02                	push   0x2
c000e2d7:	bb 01 00 00 00       	mov    ebx,0x1
c000e2dc:	50                   	push   eax
c000e2dd:	e8 b4 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2e2:	58                   	pop    eax
c000e2e3:	5a                   	pop    edx
c000e2e4:	eb bd                	jmp    c000e2a3 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2e6:	6a 04                	push   0x4
c000e2e8:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2eb:	55                   	push   ebp
c000e2ec:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e2f1:	e8 a0 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2f6:	59                   	pop    ecx
c000e2f7:	5b                   	pop    ebx
c000e2f8:	89 e8                	mov    eax,ebp
c000e2fa:	c1 e0 0c             	shl    eax,0xc
c000e2fd:	83 c4 1c             	add    esp,0x1c
c000e300:	5b                   	pop    ebx
c000e301:	5e                   	pop    esi
c000e302:	5f                   	pop    edi
c000e303:	5d                   	pop    ebp
c000e304:	c3                   	ret    

c000e305 <Virt::virtualMemorySetup()>:
c000e305:	53                   	push   ebx
c000e306:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e30b:	83 ec 08             	sub    esp,0x8
c000e30e:	6a 0f                	push   0xf
c000e310:	53                   	push   ebx
c000e311:	43                   	inc    ebx
c000e312:	e8 7f fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e317:	59                   	pop    ecx
c000e318:	58                   	pop    eax
c000e319:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e31f:	75 ed                	jne    c000e30e <Virt::virtualMemorySetup()+0x9>
c000e321:	50                   	push   eax
c000e322:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e327:	50                   	push   eax
c000e328:	68 00 00 00 c8       	push   0xc8000000
c000e32d:	68 23 18 02 c0       	push   0xc0021823
c000e332:	e8 d8 0e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e337:	58                   	pop    eax
c000e338:	5a                   	pop    edx
c000e339:	68 00 f0 ff ef       	push   0xeffff000
c000e33e:	68 37 18 02 c0       	push   0xc0021837
c000e343:	e8 c7 0e 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e348:	83 c4 10             	add    esp,0x10
c000e34b:	50                   	push   eax
c000e34c:	50                   	push   eax
c000e34d:	6a 00                	push   0x0
c000e34f:	53                   	push   ebx
c000e350:	43                   	inc    ebx
c000e351:	e8 40 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e356:	83 c4 10             	add    esp,0x10
c000e359:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e35f:	75 ea                	jne    c000e34b <Virt::virtualMemorySetup()+0x46>
c000e361:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e366:	51                   	push   ecx
c000e367:	51                   	push   ecx
c000e368:	6a 0f                	push   0xf
c000e36a:	53                   	push   ebx
c000e36b:	43                   	inc    ebx
c000e36c:	e8 25 fe ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e371:	83 c4 10             	add    esp,0x10
c000e374:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e37a:	75 ea                	jne    c000e366 <Virt::virtualMemorySetup()+0x61>
c000e37c:	83 c4 08             	add    esp,0x8
c000e37f:	5b                   	pop    ebx
c000e380:	c3                   	ret    

c000e381 <Virt::getAKernelVAS()>:
c000e381:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e386:	c3                   	ret    

c000e387 <Virt::setupPageSwapping(int)>:
c000e387:	57                   	push   edi
c000e388:	56                   	push   esi
c000e389:	53                   	push   ebx
c000e38a:	83 ec 1c             	sub    esp,0x1c
c000e38d:	68 14 01 00 00       	push   0x114
c000e392:	e8 43 0d 00 00       	call   c000f0da <operator new(unsigned long)>
c000e397:	83 c4 0c             	add    esp,0xc
c000e39a:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3a0:	89 c6                	mov    esi,eax
c000e3a2:	57                   	push   edi
c000e3a3:	68 4b 18 02 c0       	push   0xc002184b
c000e3a8:	50                   	push   eax
c000e3a9:	e8 98 13 00 00       	call   c000f746 <File::File(char const*, Process*)>
c000e3ae:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b1:	e8 6c 15 00 00       	call   c000f922 <File::unlink()>
c000e3b6:	58                   	pop    eax
c000e3b7:	5a                   	pop    edx
c000e3b8:	6a 12                	push   0x12
c000e3ba:	56                   	push   esi
c000e3bb:	e8 ea 13 00 00       	call   c000f7aa <File::open(FileOpenMode)>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	85 c0                	test   eax,eax
c000e3c5:	0f 85 b6 00 00 00    	jne    c000e481 <Virt::setupPageSwapping(int)+0xfa>
c000e3cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3d7:	c1 e3 08             	shl    ebx,0x8
c000e3da:	83 ec 0c             	sub    esp,0xc
c000e3dd:	c1 fb 04             	sar    ebx,0x4
c000e3e0:	68 00 00 01 00       	push   0x10000
c000e3e5:	e8 f3 db ff ff       	call   c000bfdd <malloc>
c000e3ea:	83 c4 0c             	add    esp,0xc
c000e3ed:	89 c7                	mov    edi,eax
c000e3ef:	68 00 00 01 00       	push   0x10000
c000e3f4:	6a 00                	push   0x0
c000e3f6:	50                   	push   eax
c000e3f7:	e8 c3 22 ff ff       	call   c00006bf <memset>
c000e3fc:	83 c4 10             	add    esp,0x10
c000e3ff:	4b                   	dec    ebx
c000e400:	83 fb ff             	cmp    ebx,0xffffffff
c000e403:	74 4a                	je     c000e44f <Virt::setupPageSwapping(int)+0xc8>
c000e405:	83 ec 0c             	sub    esp,0xc
c000e408:	8b 06                	mov    eax,DWORD PTR [esi]
c000e40a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e40e:	52                   	push   edx
c000e40f:	57                   	push   edi
c000e410:	6a 00                	push   0x0
c000e412:	68 00 00 01 00       	push   0x10000
c000e417:	56                   	push   esi
c000e418:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e41b:	83 c4 20             	add    esp,0x20
c000e41e:	85 c0                	test   eax,eax
c000e420:	75 4d                	jne    c000e46f <Virt::setupPageSwapping(int)+0xe8>
c000e422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e426:	3d 00 00 01 00       	cmp    eax,0x10000
c000e42b:	74 d2                	je     c000e3ff <Virt::setupPageSwapping(int)+0x78>
c000e42d:	52                   	push   edx
c000e42e:	4b                   	dec    ebx
c000e42f:	52                   	push   edx
c000e430:	50                   	push   eax
c000e431:	68 9e 18 02 c0       	push   0xc002189e
c000e436:	e8 d4 0d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e43b:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e442:	e8 f7 75 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e447:	83 c4 10             	add    esp,0x10
c000e44a:	83 fb ff             	cmp    ebx,0xffffffff
c000e44d:	75 b6                	jne    c000e405 <Virt::setupPageSwapping(int)+0x7e>
c000e44f:	83 ec 0c             	sub    esp,0xc
c000e452:	56                   	push   esi
c000e453:	e8 b0 13 00 00       	call   c000f808 <File::close()>
c000e458:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e45b:	e8 9d db ff ff       	call   c000bffd <rfree>
c000e460:	8b 06                	mov    eax,DWORD PTR [esi]
c000e462:	89 34 24             	mov    DWORD PTR [esp],esi
c000e465:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e468:	83 c4 20             	add    esp,0x20
c000e46b:	5b                   	pop    ebx
c000e46c:	5e                   	pop    esi
c000e46d:	5f                   	pop    edi
c000e46e:	c3                   	ret    
c000e46f:	51                   	push   ecx
c000e470:	51                   	push   ecx
c000e471:	50                   	push   eax
c000e472:	68 86 18 02 c0       	push   0xc0021886
c000e477:	e8 93 0d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e47c:	83 c4 10             	add    esp,0x10
c000e47f:	eb a1                	jmp    c000e422 <Virt::setupPageSwapping(int)+0x9b>
c000e481:	53                   	push   ebx
c000e482:	53                   	push   ebx
c000e483:	50                   	push   eax
c000e484:	68 62 18 02 c0       	push   0xc0021862
c000e489:	e8 81 0d 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e48e:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e495:	e8 a4 75 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	e9 29 ff ff ff       	jmp    c000e3cb <Virt::setupPageSwapping(int)+0x44>

c000e4a2 <VAS::VAS()>:
c000e4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b1:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ba:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c2:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c9:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4d0:	90                   	nop
c000e4d1:	c3                   	ret    

c000e4d2 <VAS::VAS(VAS*)>:
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	68 bc 16 02 c0       	push   0xc00216bc
c000e4e8:	e8 51 75 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e4ed:	83 c4 10             	add    esp,0x10
c000e4f0:	90                   	nop
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    
c000e4f5:	90                   	nop

c000e4f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fa:	89 c2                	mov    edx,eax
c000e4fc:	c1 ea 16             	shr    edx,0x16
c000e4ff:	c1 e8 0a             	shr    eax,0xa
c000e502:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e507:	19 c9                	sbb    ecx,ecx
c000e509:	25 fc 0f 00 00       	and    eax,0xffc
c000e50e:	c1 e2 0c             	shl    edx,0xc
c000e511:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e517:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e51e:	01 d0                	add    eax,edx
c000e520:	c3                   	ret    
c000e521:	90                   	nop

c000e522 <VAS::getPageTableEntry(unsigned long)>:
c000e522:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e526:	89 ca                	mov    edx,ecx
c000e528:	c1 ea 16             	shr    edx,0x16
c000e52b:	c1 e9 0a             	shr    ecx,0xa
c000e52e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e534:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e53a:	c1 e0 0c             	shl    eax,0xc
c000e53d:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e540:	c3                   	ret    

c000e541 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e541:	57                   	push   edi
c000e542:	56                   	push   esi
c000e543:	be 01 00 00 00       	mov    esi,0x1
c000e548:	53                   	push   ebx
c000e549:	83 ec 10             	sub    esp,0x10
c000e54c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e550:	c1 eb 0c             	shr    ebx,0xc
c000e553:	eb 3e                	jmp    c000e593 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e555:	e8 27 fe ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c000e55a:	51                   	push   ecx
c000e55b:	51                   	push   ecx
c000e55c:	57                   	push   edi
c000e55d:	50                   	push   eax
c000e55e:	e8 bf ff ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e56c:	f6 c4 04             	test   ah,0x4
c000e56f:	75 5f                	jne    c000e5d0 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e571:	80 fa 04             	cmp    dl,0x4
c000e574:	74 78                	je     c000e5ee <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e576:	80 fa 02             	cmp    dl,0x2
c000e579:	0f 84 88 00 00 00    	je     c000e607 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e57f:	80 fa 03             	cmp    dl,0x3
c000e582:	0f 84 ac 00 00 00    	je     c000e634 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e588:	fe ca                	dec    dl
c000e58a:	0f 84 92 00 00 00    	je     c000e622 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e590:	43                   	inc    ebx
c000e591:	31 f6                	xor    esi,esi
c000e593:	53                   	push   ebx
c000e594:	e8 34 fc ff ff       	call   c000e1cd <Virt::getPageState(unsigned long)>
c000e599:	5f                   	pop    edi
c000e59a:	89 df                	mov    edi,ebx
c000e59c:	c1 e7 0c             	shl    edi,0xc
c000e59f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a3:	84 c0                	test   al,al
c000e5a5:	75 ae                	jne    c000e555 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5a7:	83 ec 0c             	sub    esp,0xc
c000e5aa:	68 ad 18 02 c0       	push   0xc00218ad
c000e5af:	e8 8a 74 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e5b4:	e8 c8 fd ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c000e5b9:	5a                   	pop    edx
c000e5ba:	59                   	pop    ecx
c000e5bb:	57                   	push   edi
c000e5bc:	50                   	push   eax
c000e5bd:	e8 60 ff ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c000e5c2:	83 c4 10             	add    esp,0x10
c000e5c5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5cb:	f6 c4 04             	test   ah,0x4
c000e5ce:	74 c0                	je     c000e590 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5d0:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5d4:	83 ec 0c             	sub    esp,0xc
c000e5d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5dc:	50                   	push   eax
c000e5dd:	e8 44 df ff ff       	call   c000c526 <Phys::freePage(unsigned long)>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5e9:	80 fa 04             	cmp    dl,0x4
c000e5ec:	75 88                	jne    c000e576 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5ee:	89 f0                	mov    eax,esi
c000e5f0:	84 c0                	test   al,al
c000e5f2:	75 46                	jne    c000e63a <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5f4:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	5b                   	pop    ebx
c000e600:	5e                   	pop    esi
c000e601:	5f                   	pop    edi
c000e602:	e9 37 74 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c000e607:	89 f0                	mov    eax,esi
c000e609:	84 c0                	test   al,al
c000e60b:	75 15                	jne    c000e622 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e60d:	83 ec 0c             	sub    esp,0xc
c000e610:	68 c9 18 02 c0       	push   0xc00218c9
c000e615:	e8 24 74 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e61a:	83 c4 10             	add    esp,0x10
c000e61d:	e9 6e ff ff ff       	jmp    c000e590 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e622:	50                   	push   eax
c000e623:	50                   	push   eax
c000e624:	6a 00                	push   0x0
c000e626:	53                   	push   ebx
c000e627:	e8 6a fb ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	e9 5c ff ff ff       	jmp    c000e590 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e634:	89 f0                	mov    eax,esi
c000e636:	84 c0                	test   al,al
c000e638:	75 14                	jne    c000e64e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e63a:	52                   	push   edx
c000e63b:	52                   	push   edx
c000e63c:	6a 00                	push   0x0
c000e63e:	53                   	push   ebx
c000e63f:	e8 52 fb ff ff       	call   c000e196 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e644:	83 c4 10             	add    esp,0x10
c000e647:	83 c4 10             	add    esp,0x10
c000e64a:	5b                   	pop    ebx
c000e64b:	5e                   	pop    esi
c000e64c:	5f                   	pop    edi
c000e64d:	c3                   	ret    
c000e64e:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e656:	83 c4 10             	add    esp,0x10
c000e659:	5b                   	pop    ebx
c000e65a:	5e                   	pop    esi
c000e65b:	5f                   	pop    edi
c000e65c:	e9 dd 73 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c000e661:	90                   	nop

c000e662 <VAS::freeAllocatedPages(unsigned long)>:
c000e662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e66a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e66e:	74 09                	je     c000e679 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e670:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e674:	e9 c8 fe ff ff       	jmp    c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c000e679:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e681:	e9 89 0b 00 00       	jmp    c000f20f <Dbg::kprintf(char const*, ...)>

c000e686 <VAS::virtualToPhysical(unsigned long)>:
c000e686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e68a:	50                   	push   eax
c000e68b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e68f:	52                   	push   edx
c000e690:	e8 8d fe ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c000e695:	59                   	pop    ecx
c000e696:	8b 00                	mov    eax,DWORD PTR [eax]
c000e698:	5a                   	pop    edx
c000e699:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e69e:	c3                   	ret    
c000e69f:	90                   	nop

c000e6a0 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6a0:	55                   	push   ebp
c000e6a1:	57                   	push   edi
c000e6a2:	56                   	push   esi
c000e6a3:	53                   	push   ebx
c000e6a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6ac:	89 c3                	mov    ebx,eax
c000e6ae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6b2:	c1 e3 0c             	shl    ebx,0xc
c000e6b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6b9:	01 f3                	add    ebx,esi
c000e6bb:	85 c0                	test   eax,eax
c000e6bd:	7e 1f                	jle    c000e6de <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6bf:	56                   	push   esi
c000e6c0:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6c6:	55                   	push   ebp
c000e6c7:	e8 56 fe ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c000e6cc:	5a                   	pop    edx
c000e6cd:	59                   	pop    ecx
c000e6ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6d0:	21 f9                	and    ecx,edi
c000e6d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6d6:	09 d1                	or     ecx,edx
c000e6d8:	39 f3                	cmp    ebx,esi
c000e6da:	89 08                	mov    DWORD PTR [eax],ecx
c000e6dc:	75 e1                	jne    c000e6bf <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6de:	5b                   	pop    ebx
c000e6df:	5e                   	pop    esi
c000e6e0:	5f                   	pop    edi
c000e6e1:	5d                   	pop    ebp
c000e6e2:	c3                   	ret    
c000e6e3:	90                   	nop

c000e6e4 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6e4:	83 ec 0c             	sub    esp,0xc
c000e6e7:	e8 e6 61 00 00       	call   c00148d2 <thisCPU()>
c000e6ec:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6f3:	75 04                	jne    c000e6f9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6f5:	83 c4 0c             	add    esp,0xc
c000e6f8:	c3                   	ret    
c000e6f9:	83 ec 0c             	sub    esp,0xc
c000e6fc:	68 80 00 00 00       	push   0x80
c000e701:	6a ff                	push   0xffffffff
c000e703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e707:	50                   	push   eax
c000e708:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e70c:	52                   	push   edx
c000e70d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e711:	51                   	push   ecx
c000e712:	e8 89 ff ff ff       	call   c000e6a0 <VAS::reflagRange(unsigned long, int, int, int)>
c000e717:	83 c4 20             	add    esp,0x20
c000e71a:	83 c4 0c             	add    esp,0xc
c000e71d:	c3                   	ret    

c000e71e <VAS::mapOtherVASIn(bool, VAS*)>:
c000e71e:	83 ec 0c             	sub    esp,0xc
c000e721:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e725:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e72a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e731:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e734:	19 c0                	sbb    eax,eax
c000e736:	83 ca 03             	or     edx,0x3
c000e739:	83 e0 fc             	and    eax,0xfffffffc
c000e73c:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e743:	e8 9d 10 01 00       	call   c001f7e5 <CPU::readCR3()>
c000e748:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e74c:	83 c4 0c             	add    esp,0xc
c000e74f:	e9 a3 10 01 00       	jmp    c001f7f7 <CPU::writeCR3(unsigned long)>

c000e754 <VAS::~VAS()>:
c000e754:	83 ec 2c             	sub    esp,0x2c
c000e757:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e75f:	e8 e3 a2 00 00       	call   c0018a47 <lockScheduler()>
c000e764:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e769:	8b 00                	mov    eax,DWORD PTR [eax]
c000e76b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e76e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e774:	83 ec 04             	sub    esp,0x4
c000e777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e77b:	6a 01                	push   0x1
c000e77d:	50                   	push   eax
c000e77e:	e8 9b ff ff ff       	call   c000e71e <VAS::mapOtherVASIn(bool, VAS*)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e78e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e796:	0f 8f d7 00 00 00    	jg     c000e873 <VAS::~VAS()+0x11f>
c000e79c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7a7:	c1 e2 02             	shl    edx,0x2
c000e7aa:	01 d0                	add    eax,edx
c000e7ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b6:	83 e0 01             	and    eax,0x1
c000e7b9:	0f 84 ab 00 00 00    	je     c000e86a <VAS::~VAS()+0x116>
c000e7bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7c7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7cf:	7f 75                	jg     c000e846 <VAS::~VAS()+0xf2>
c000e7d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7d5:	c1 e0 0a             	shl    eax,0xa
c000e7d8:	89 c2                	mov    edx,eax
c000e7da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7de:	01 d0                	add    eax,edx
c000e7e0:	c1 e0 0c             	shl    eax,0xc
c000e7e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7f7:	83 ec 04             	sub    esp,0x4
c000e7fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e7fe:	6a 01                	push   0x1
c000e800:	50                   	push   eax
c000e801:	e8 f0 fc ff ff       	call   c000e4f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e80d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e811:	8b 00                	mov    eax,DWORD PTR [eax]
c000e813:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e81b:	25 01 04 00 00       	and    eax,0x401
c000e820:	3d 01 04 00 00       	cmp    eax,0x401
c000e825:	75 19                	jne    c000e840 <VAS::~VAS()+0xec>
c000e827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	50                   	push   eax
c000e834:	e8 ed dc ff ff       	call   c000c526 <Phys::freePage(unsigned long)>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e840:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e844:	eb 81                	jmp    c000e7c7 <VAS::~VAS()+0x73>
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	25 00 04 00 00       	and    eax,0x400
c000e84f:	74 19                	je     c000e86a <VAS::~VAS()+0x116>
c000e851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e855:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e85a:	83 ec 0c             	sub    esp,0xc
c000e85d:	50                   	push   eax
c000e85e:	e8 c3 dc ff ff       	call   c000c526 <Phys::freePage(unsigned long)>
c000e863:	83 c4 10             	add    esp,0x10
c000e866:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e86a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e86e:	e9 1b ff ff ff       	jmp    c000e78e <VAS::~VAS()+0x3a>
c000e873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e87a:	83 ec 0c             	sub    esp,0xc
c000e87d:	50                   	push   eax
c000e87e:	e8 be fc ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e88d:	83 ec 0c             	sub    esp,0xc
c000e890:	50                   	push   eax
c000e891:	e8 90 dc ff ff       	call   c000c526 <Phys::freePage(unsigned long)>
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e89d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8a1:	c1 e0 02             	shl    eax,0x2
c000e8a4:	83 ec 08             	sub    esp,0x8
c000e8a7:	50                   	push   eax
c000e8a8:	68 28 17 02 c0       	push   0xc0021728
c000e8ad:	e8 5d 09 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e8b2:	83 c4 10             	add    esp,0x10
c000e8b5:	e8 8f a1 00 00       	call   c0018a49 <unlockScheduler()>
c000e8ba:	90                   	nop
c000e8bb:	83 c4 2c             	add    esp,0x2c
c000e8be:	c3                   	ret    
c000e8bf:	90                   	nop

c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8c0:	55                   	push   ebp
c000e8c1:	57                   	push   edi
c000e8c2:	56                   	push   esi
c000e8c3:	53                   	push   ebx
c000e8c4:	83 ec 1c             	sub    esp,0x1c
c000e8c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8cf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8d5:	77 08                	ja     c000e8df <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8d7:	0f 20 d8             	mov    eax,cr3
c000e8da:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8dd:	75 49                	jne    c000e928 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e3:	09 d8                	or     eax,ebx
c000e8e5:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8ea:	75 59                	jne    c000e945 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8ec:	89 de                	mov    esi,ebx
c000e8ee:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f1:	c1 ee 16             	shr    esi,0x16
c000e8f4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e8fb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e8ff:	74 56                	je     c000e957 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e901:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e907:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e90b:	c1 eb 0a             	shr    ebx,0xa
c000e90e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e912:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e918:	09 d0                	or     eax,edx
c000e91a:	c1 e6 0c             	shl    esi,0xc
c000e91d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e920:	83 c4 1c             	add    esp,0x1c
c000e923:	5b                   	pop    ebx
c000e924:	5e                   	pop    esi
c000e925:	5f                   	pop    edi
c000e926:	5d                   	pop    ebp
c000e927:	c3                   	ret    
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	68 48 17 02 c0       	push   0xc0021748
c000e930:	e8 da 08 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93c:	09 d8                	or     eax,ebx
c000e93e:	a9 ff 0f 00 00       	test   eax,0xfff
c000e943:	74 a7                	je     c000e8ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e945:	83 ec 0c             	sub    esp,0xc
c000e948:	68 b0 17 02 c0       	push   0xc00217b0
c000e94d:	e8 ec 70 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000e952:	83 c4 10             	add    esp,0x10
c000e955:	eb 95                	jmp    c000e8ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e95b:	e8 53 dc ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000e960:	89 c5                	mov    ebp,eax
c000e962:	e8 1a fa ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c000e967:	83 ec 0c             	sub    esp,0xc
c000e96a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e96e:	6a 01                	push   0x1
c000e970:	e8 7f f8 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c000e975:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e97c:	6a 01                	push   0x1
c000e97e:	50                   	push   eax
c000e97f:	55                   	push   ebp
c000e980:	81 cd 07 04 00 00    	or     ebp,0x407
c000e986:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e98a:	51                   	push   ecx
c000e98b:	e8 22 02 00 00       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e990:	83 c4 1c             	add    esp,0x1c
c000e993:	68 00 10 00 00       	push   0x1000
c000e998:	6a 00                	push   0x0
c000e99a:	50                   	push   eax
c000e99b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e99f:	e8 1b 1d ff ff       	call   c00006bf <memset>
c000e9a4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9a8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9ab:	e8 91 fb ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b7:	83 c4 10             	add    esp,0x10
c000e9ba:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9bd:	e9 3f ff ff ff       	jmp    c000e901 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9c2 <VAS::allocatePages(int, int)>:
c000e9c2:	55                   	push   ebp
c000e9c3:	57                   	push   edi
c000e9c4:	56                   	push   esi
c000e9c5:	53                   	push   ebx
c000e9c6:	83 ec 1c             	sub    esp,0x1c
c000e9c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9cd:	e8 00 5f 00 00       	call   c00148d2 <thisCPU()>
c000e9d2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9d8:	83 e0 01             	and    eax,0x1
c000e9db:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9df:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9e3:	0f 85 d5 00 00 00    	jne    c000eabe <VAS::allocatePages(int, int)+0xfc>
c000e9e9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f0:	85 c0                	test   eax,eax
c000e9f2:	0f 84 aa 00 00 00    	je     c000eaa2 <VAS::allocatePages(int, int)+0xe0>
c000e9f8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e9fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea00:	c1 e6 0c             	shl    esi,0xc
c000ea03:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea07:	01 de                	add    esi,ebx
c000ea09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea0d:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea13:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea16:	85 c0                	test   eax,eax
c000ea18:	7e 25                	jle    c000ea3f <VAS::allocatePages(int, int)+0x7d>
c000ea1a:	e8 94 db ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000ea1f:	55                   	push   ebp
c000ea20:	53                   	push   ebx
c000ea21:	50                   	push   eax
c000ea22:	57                   	push   edi
c000ea23:	e8 98 fe ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea28:	83 c4 10             	add    esp,0x10
c000ea2b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea30:	74 03                	je     c000ea35 <VAS::allocatePages(int, int)+0x73>
c000ea32:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea35:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea3b:	39 de                	cmp    esi,ebx
c000ea3d:	75 db                	jne    c000ea1a <VAS::allocatePages(int, int)+0x58>
c000ea3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea44:	74 3f                	je     c000ea85 <VAS::allocatePages(int, int)+0xc3>
c000ea46:	c1 ee 0a             	shr    esi,0xa
c000ea49:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea4d:	c1 eb 0a             	shr    ebx,0xa
c000ea50:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea56:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea5c:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea62:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea68:	39 f3                	cmp    ebx,esi
c000ea6a:	77 0d                	ja     c000ea79 <VAS::allocatePages(int, int)+0xb7>
c000ea6c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea6f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea75:	39 de                	cmp    esi,ebx
c000ea77:	73 f3                	jae    c000ea6c <VAS::allocatePages(int, int)+0xaa>
c000ea79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7d:	83 c4 1c             	add    esp,0x1c
c000ea80:	5b                   	pop    ebx
c000ea81:	5e                   	pop    esi
c000ea82:	5f                   	pop    edi
c000ea83:	5d                   	pop    ebp
c000ea84:	c3                   	ret    
c000ea85:	e8 5b 0d 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ea8a:	83 ec 0c             	sub    esp,0xc
c000ea8d:	50                   	push   eax
c000ea8e:	e8 64 0d 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ea93:	83 c4 10             	add    esp,0x10
c000ea96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9a:	83 c4 1c             	add    esp,0x1c
c000ea9d:	5b                   	pop    ebx
c000ea9e:	5e                   	pop    esi
c000ea9f:	5f                   	pop    edi
c000eaa0:	5d                   	pop    ebp
c000eaa1:	c3                   	ret    
c000eaa2:	83 ec 0c             	sub    esp,0xc
c000eaa5:	68 d4 17 02 c0       	push   0xc00217d4
c000eaaa:	e8 8f 6f 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000eaaf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eab2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eab6:	83 c4 10             	add    esp,0x10
c000eab9:	e9 3a ff ff ff       	jmp    c000e9f8 <VAS::allocatePages(int, int)+0x36>
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eac5:	53                   	push   ebx
c000eac6:	e8 29 f7 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c000eacb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eacf:	83 c4 10             	add    esp,0x10
c000ead2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ead7:	0f 87 94 00 00 00    	ja     c000eb71 <VAS::allocatePages(int, int)+0x1af>
c000eadd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eae1:	85 d2                	test   edx,edx
c000eae3:	7e 3c                	jle    c000eb21 <VAS::allocatePages(int, int)+0x15f>
c000eae5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eae9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaed:	c1 e5 0c             	shl    ebp,0xc
c000eaf0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eaf4:	81 ce 00 04 00 00    	or     esi,0x400
c000eafa:	01 dd                	add    ebp,ebx
c000eafc:	e8 b2 da ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000eb01:	56                   	push   esi
c000eb02:	53                   	push   ebx
c000eb03:	50                   	push   eax
c000eb04:	57                   	push   edi
c000eb05:	e8 b6 fd ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb0a:	83 c4 10             	add    esp,0x10
c000eb0d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb12:	74 03                	je     c000eb17 <VAS::allocatePages(int, int)+0x155>
c000eb14:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb17:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb1d:	39 dd                	cmp    ebp,ebx
c000eb1f:	75 db                	jne    c000eafc <VAS::allocatePages(int, int)+0x13a>
c000eb21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb26:	0f 84 59 ff ff ff    	je     c000ea85 <VAS::allocatePages(int, int)+0xc3>
c000eb2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb34:	c1 e0 0c             	shl    eax,0xc
c000eb37:	89 d3                	mov    ebx,edx
c000eb39:	c1 eb 0a             	shr    ebx,0xa
c000eb3c:	01 d0                	add    eax,edx
c000eb3e:	c1 e8 0a             	shr    eax,0xa
c000eb41:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb47:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb4c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb52:	2d 00 00 40 00       	sub    eax,0x400000
c000eb57:	39 c3                	cmp    ebx,eax
c000eb59:	0f 87 1a ff ff ff    	ja     c000ea79 <VAS::allocatePages(int, int)+0xb7>
c000eb5f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb62:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb68:	39 d8                	cmp    eax,ebx
c000eb6a:	73 f3                	jae    c000eb5f <VAS::allocatePages(int, int)+0x19d>
c000eb6c:	e9 08 ff ff ff       	jmp    c000ea79 <VAS::allocatePages(int, int)+0xb7>
c000eb71:	e8 5c 5d 00 00       	call   c00148d2 <thisCPU()>
c000eb76:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb7d:	0f 84 5a ff ff ff    	je     c000eadd <VAS::allocatePages(int, int)+0x11b>
c000eb83:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb87:	80 cd 01             	or     ch,0x1
c000eb8a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb8e:	e9 4a ff ff ff       	jmp    c000eadd <VAS::allocatePages(int, int)+0x11b>
c000eb93:	90                   	nop

c000eb94 <VAS::setCPUSpecific(unsigned long)>:
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	6a 05                	push   0x5
c000eb99:	68 00 00 40 c2       	push   0xc2400000
c000eb9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eba2:	50                   	push   eax
c000eba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eba7:	52                   	push   edx
c000eba8:	e8 13 fd ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebad:	83 c4 1c             	add    esp,0x1c
c000ebb0:	c3                   	ret    
c000ebb1:	90                   	nop

c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebb2:	55                   	push   ebp
c000ebb3:	57                   	push   edi
c000ebb4:	56                   	push   esi
c000ebb5:	53                   	push   ebx
c000ebb6:	83 ec 1c             	sub    esp,0x1c
c000ebb9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebc1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebc5:	e8 08 5d 00 00       	call   c00148d2 <thisCPU()>
c000ebca:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebd0:	83 e0 01             	and    eax,0x1
c000ebd3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebdb:	85 c0                	test   eax,eax
c000ebdd:	7e 39                	jle    c000ec18 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebdf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe3:	89 f3                	mov    ebx,esi
c000ebe5:	c1 e0 0c             	shl    eax,0xc
c000ebe8:	01 f0                	add    eax,esi
c000ebea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebee:	55                   	push   ebp
c000ebef:	53                   	push   ebx
c000ebf0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf4:	29 f0                	sub    eax,esi
c000ebf6:	01 d8                	add    eax,ebx
c000ebf8:	50                   	push   eax
c000ebf9:	57                   	push   edi
c000ebfa:	e8 c1 fc ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec07:	74 03                	je     c000ec0c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec09:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec0c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec12:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec16:	75 d6                	jne    c000ebee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec18:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec1d:	74 42                	je     c000ec61 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec23:	89 f3                	mov    ebx,esi
c000ec25:	c1 e0 0c             	shl    eax,0xc
c000ec28:	c1 eb 0a             	shr    ebx,0xa
c000ec2b:	01 f0                	add    eax,esi
c000ec2d:	c1 e8 0a             	shr    eax,0xa
c000ec30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec36:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec3b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec41:	2d 00 00 40 00       	sub    eax,0x400000
c000ec46:	39 c3                	cmp    ebx,eax
c000ec48:	77 0d                	ja     c000ec57 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec4a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec53:	39 d8                	cmp    eax,ebx
c000ec55:	73 f3                	jae    c000ec4a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec57:	83 c4 1c             	add    esp,0x1c
c000ec5a:	89 f0                	mov    eax,esi
c000ec5c:	5b                   	pop    ebx
c000ec5d:	5e                   	pop    esi
c000ec5e:	5f                   	pop    edi
c000ec5f:	5d                   	pop    ebp
c000ec60:	c3                   	ret    
c000ec61:	e8 7f 0b 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ec66:	83 ec 0c             	sub    esp,0xc
c000ec69:	50                   	push   eax
c000ec6a:	e8 88 0b 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ec6f:	83 c4 10             	add    esp,0x10
c000ec72:	89 f0                	mov    eax,esi
c000ec74:	83 c4 1c             	add    esp,0x1c
c000ec77:	5b                   	pop    ebx
c000ec78:	5e                   	pop    esi
c000ec79:	5f                   	pop    edi
c000ec7a:	5d                   	pop    ebp
c000ec7b:	c3                   	ret    

c000ec7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec7c:	55                   	push   ebp
c000ec7d:	57                   	push   edi
c000ec7e:	56                   	push   esi
c000ec7f:	53                   	push   ebx
c000ec80:	83 ec 1c             	sub    esp,0x1c
c000ec83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec87:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec8b:	09 f0                	or     eax,esi
c000ec8d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec91:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec95:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec9a:	75 4c                	jne    c000ece8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ec9c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eca0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca3:	c1 eb 16             	shr    ebx,0x16
c000eca6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecad:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecb1:	74 4f                	je     c000ed02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecb7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecbb:	c1 e8 0a             	shr    eax,0xa
c000ecbe:	80 fa 01             	cmp    dl,0x1
c000ecc1:	19 d2                	sbb    edx,edx
c000ecc3:	25 fc 0f 00 00       	and    eax,0xffc
c000ecc8:	c1 e3 0c             	shl    ebx,0xc
c000eccb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecd1:	01 d8                	add    eax,ebx
c000ecd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecd7:	09 d9                	or     ecx,ebx
c000ecd9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ece0:	83 c4 1c             	add    esp,0x1c
c000ece3:	5b                   	pop    ebx
c000ece4:	5e                   	pop    esi
c000ece5:	5f                   	pop    edi
c000ece6:	5d                   	pop    ebp
c000ece7:	c3                   	ret    
c000ece8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ecec:	83 ec 0c             	sub    esp,0xc
c000ecef:	68 00 18 02 c0       	push   0xc0021800
c000ecf4:	e8 45 6d 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed00:	eb 9a                	jmp    c000ec9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed06:	e8 a8 d8 ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000ed0b:	89 c5                	mov    ebp,eax
c000ed0d:	e8 6f f6 ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c000ed12:	83 ec 0c             	sub    esp,0xc
c000ed15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed19:	6a 01                	push   0x1
c000ed1b:	e8 d4 f4 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c000ed20:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed27:	6a 01                	push   0x1
c000ed29:	50                   	push   eax
c000ed2a:	55                   	push   ebp
c000ed2b:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed31:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed35:	51                   	push   ecx
c000ed36:	e8 77 fe ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed3b:	83 c4 1c             	add    esp,0x1c
c000ed3e:	68 00 10 00 00       	push   0x1000
c000ed43:	6a 00                	push   0x0
c000ed45:	50                   	push   eax
c000ed46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed4a:	e8 70 19 ff ff       	call   c00006bf <memset>
c000ed4f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed56:	e8 e6 f7 ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed5b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed5e:	83 c4 10             	add    esp,0x10
c000ed61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed65:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed68:	e9 46 ff ff ff       	jmp    c000ecb3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed6d:	90                   	nop

c000ed6e <VAS::VAS(bool)>:
c000ed6e:	53                   	push   ebx
c000ed6f:	83 ec 28             	sub    esp,0x28
c000ed72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed89:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed8d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed90:	e8 1e d8 ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000ed95:	89 c2                	mov    edx,eax
c000ed97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ed9e:	e8 de f5 ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c000eda3:	89 c3                	mov    ebx,eax
c000eda5:	83 ec 0c             	sub    esp,0xc
c000eda8:	6a 01                	push   0x1
c000edaa:	e8 45 f4 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c000edaf:	83 c4 10             	add    esp,0x10
c000edb2:	89 c2                	mov    edx,eax
c000edb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edbb:	83 ec 0c             	sub    esp,0xc
c000edbe:	6a 03                	push   0x3
c000edc0:	6a 01                	push   0x1
c000edc2:	52                   	push   edx
c000edc3:	50                   	push   eax
c000edc4:	53                   	push   ebx
c000edc5:	e8 e8 fd ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edca:	83 c4 20             	add    esp,0x20
c000edcd:	89 c2                	mov    edx,eax
c000edcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edd6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edde:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ede6:	7f 1c                	jg     c000ee04 <VAS::VAS(bool)+0x96>
c000ede8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf3:	c1 e2 02             	shl    edx,0x2
c000edf6:	01 d0                	add    eax,edx
c000edf8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edfe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee02:	eb da                	jmp    c000edde <VAS::VAS(bool)+0x70>
c000ee04:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee0c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee14:	7f 71                	jg     c000ee87 <VAS::VAS(bool)+0x119>
c000ee16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee1a:	2d 00 02 00 00       	sub    eax,0x200
c000ee1f:	c1 e0 0c             	shl    eax,0xc
c000ee22:	83 c8 03             	or     eax,0x3
c000ee25:	89 c3                	mov    ebx,eax
c000ee27:	e8 a6 5a 00 00       	call   c00148d2 <thisCPU()>
c000ee2c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee32:	83 e0 10             	and    eax,0x10
c000ee35:	84 c0                	test   al,al
c000ee37:	74 07                	je     c000ee40 <VAS::VAS(bool)+0xd2>
c000ee39:	b8 00 01 00 00       	mov    eax,0x100
c000ee3e:	eb 05                	jmp    c000ee45 <VAS::VAS(bool)+0xd7>
c000ee40:	b8 00 00 00 00       	mov    eax,0x0
c000ee45:	09 d8                	or     eax,ebx
c000ee47:	89 c1                	mov    ecx,eax
c000ee49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee54:	c1 e2 02             	shl    edx,0x2
c000ee57:	01 d0                	add    eax,edx
c000ee59:	89 ca                	mov    edx,ecx
c000ee5b:	89 10                	mov    DWORD PTR [eax],edx
c000ee5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee61:	2d 40 03 00 00       	sub    eax,0x340
c000ee66:	83 f8 7f             	cmp    eax,0x7f
c000ee69:	77 16                	ja     c000ee81 <VAS::VAS(bool)+0x113>
c000ee6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee76:	c1 e2 02             	shl    edx,0x2
c000ee79:	01 d0                	add    eax,edx
c000ee7b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee81:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee85:	eb 85                	jmp    c000ee0c <VAS::VAS(bool)+0x9e>
c000ee87:	e8 46 5a 00 00       	call   c00148d2 <thisCPU()>
c000ee8c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee92:	83 e0 10             	and    eax,0x10
c000ee95:	84 c0                	test   al,al
c000ee97:	74 07                	je     c000eea0 <VAS::VAS(bool)+0x132>
c000ee99:	b8 03 41 00 00       	mov    eax,0x4103
c000ee9e:	eb 05                	jmp    c000eea5 <VAS::VAS(bool)+0x137>
c000eea0:	b8 03 40 00 00       	mov    eax,0x4003
c000eea5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eeac:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eeb2:	89 02                	mov    DWORD PTR [edx],eax
c000eeb4:	e8 19 5a 00 00       	call   c00148d2 <thisCPU()>
c000eeb9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eebf:	83 ec 08             	sub    esp,0x8
c000eec2:	50                   	push   eax
c000eec3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eec7:	e8 c8 fc ff ff       	call   c000eb94 <VAS::setCPUSpecific(unsigned long)>
c000eecc:	83 c4 10             	add    esp,0x10
c000eecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed3:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eed6:	e8 f7 59 00 00       	call   c00148d2 <thisCPU()>
c000eedb:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eee1:	83 e0 10             	and    eax,0x10
c000eee4:	84 c0                	test   al,al
c000eee6:	74 07                	je     c000eeef <VAS::VAS(bool)+0x181>
c000eee8:	b8 00 01 00 00       	mov    eax,0x100
c000eeed:	eb 05                	jmp    c000eef4 <VAS::VAS(bool)+0x186>
c000eeef:	b8 00 00 00 00       	mov    eax,0x0
c000eef4:	09 d8                	or     eax,ebx
c000eef6:	89 c2                	mov    edx,eax
c000eef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eefc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eeff:	05 fc 0f 00 00       	add    eax,0xffc
c000ef04:	83 ca 03             	or     edx,0x3
c000ef07:	89 10                	mov    DWORD PTR [eax],edx
c000ef09:	e8 c4 59 00 00       	call   c00148d2 <thisCPU()>
c000ef0e:	83 ec 0c             	sub    esp,0xc
c000ef11:	50                   	push   eax
c000ef12:	e8 ef 19 00 00       	call   c0010906 <Device::getName()>
c000ef17:	83 c4 10             	add    esp,0x10
c000ef1a:	83 ec 08             	sub    esp,0x8
c000ef1d:	68 ff 18 02 c0       	push   0xc00218ff
c000ef22:	50                   	push   eax
c000ef23:	e8 87 18 ff ff       	call   c00007af <strcmp>
c000ef28:	83 c4 10             	add    esp,0x10
c000ef2b:	85 c0                	test   eax,eax
c000ef2d:	0f 94 c0             	sete   al
c000ef30:	84 c0                	test   al,al
c000ef32:	74 64                	je     c000ef98 <VAS::VAS(bool)+0x22a>
c000ef34:	e8 ec 9a 00 00       	call   c0018a25 <disableIRQs()>
c000ef39:	e8 94 59 00 00       	call   c00148d2 <thisCPU()>
c000ef3e:	05 7c 09 00 00       	add    eax,0x97c
c000ef43:	83 ec 0c             	sub    esp,0xc
c000ef46:	50                   	push   eax
c000ef47:	e8 04 cb ff ff       	call   c000ba50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef4c:	83 c4 10             	add    esp,0x10
c000ef4f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef54:	89 c3                	mov    ebx,eax
c000ef56:	e8 77 59 00 00       	call   c00148d2 <thisCPU()>
c000ef5b:	05 7c 09 00 00       	add    eax,0x97c
c000ef60:	83 ec 0c             	sub    esp,0xc
c000ef63:	50                   	push   eax
c000ef64:	e8 e7 ca ff ff       	call   c000ba50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	83 ec 08             	sub    esp,0x8
c000ef6f:	50                   	push   eax
c000ef70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef74:	e8 a9 f5 ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c000ef79:	83 c4 10             	add    esp,0x10
c000ef7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef83:	6a 11                	push   0x11
c000ef85:	53                   	push   ebx
c000ef86:	50                   	push   eax
c000ef87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef8b:	e8 30 f9 ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef90:	83 c4 10             	add    esp,0x10
c000ef93:	e8 a0 9a 00 00       	call   c0018a38 <enableIRQs()>
c000ef98:	90                   	nop
c000ef99:	83 c4 28             	add    esp,0x28
c000ef9c:	5b                   	pop    ebx
c000ef9d:	c3                   	ret    

c000ef9e <mapVASFirstTime>:
c000ef9e:	55                   	push   ebp
c000ef9f:	57                   	push   edi
c000efa0:	56                   	push   esi
c000efa1:	53                   	push   ebx
c000efa2:	83 ec 0c             	sub    esp,0xc
c000efa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efaa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efad:	4a                   	dec    edx
c000efae:	0f 84 99 00 00 00    	je     c000f04d <mapVASFirstTime+0xaf>
c000efb4:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efb7:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efba:	c1 e5 15             	shl    ebp,0x15
c000efbd:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efc2:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efc7:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efcd:	29 eb                	sub    ebx,ebp
c000efcf:	29 ee                	sub    esi,ebp
c000efd1:	e8 dd d5 ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000efd6:	83 ec 0c             	sub    esp,0xc
c000efd9:	68 03 04 00 00       	push   0x403
c000efde:	6a 01                	push   0x1
c000efe0:	53                   	push   ebx
c000efe1:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efe7:	50                   	push   eax
c000efe8:	57                   	push   edi
c000efe9:	e8 c4 fb ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efee:	83 c4 20             	add    esp,0x20
c000eff1:	39 f3                	cmp    ebx,esi
c000eff3:	75 dc                	jne    c000efd1 <mapVASFirstTime+0x33>
c000eff5:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000effa:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000efff:	29 e8                	sub    eax,ebp
c000f001:	29 ee                	sub    esi,ebp
c000f003:	89 c5                	mov    ebp,eax
c000f005:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f009:	19 db                	sbb    ebx,ebx
c000f00b:	e8 a3 d5 ff ff       	call   c000c5b3 <Phys::allocatePage()>
c000f010:	83 e3 04             	and    ebx,0x4
c000f013:	83 ec 0c             	sub    esp,0xc
c000f016:	81 c3 03 04 00 00    	add    ebx,0x403
c000f01c:	53                   	push   ebx
c000f01d:	6a 01                	push   0x1
c000f01f:	56                   	push   esi
c000f020:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f026:	50                   	push   eax
c000f027:	57                   	push   edi
c000f028:	e8 85 fb ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f02d:	83 c4 20             	add    esp,0x20
c000f030:	39 f5                	cmp    ebp,esi
c000f032:	75 d1                	jne    c000f005 <mapVASFirstTime+0x67>
c000f034:	e8 ac 07 01 00       	call   c001f7e5 <CPU::readCR3()>
c000f039:	83 ec 0c             	sub    esp,0xc
c000f03c:	50                   	push   eax
c000f03d:	e8 b5 07 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000f042:	83 c4 10             	add    esp,0x10
c000f045:	83 c4 0c             	add    esp,0xc
c000f048:	5b                   	pop    ebx
c000f049:	5e                   	pop    esi
c000f04a:	5f                   	pop    edi
c000f04b:	5d                   	pop    ebp
c000f04c:	c3                   	ret    
c000f04d:	83 ec 0c             	sub    esp,0xc
c000f050:	68 0d 19 02 c0       	push   0xc002190d
c000f055:	e8 b5 01 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000f05a:	83 c4 10             	add    esp,0x10
c000f05d:	83 c4 0c             	add    esp,0xc
c000f060:	5b                   	pop    ebx
c000f061:	5e                   	pop    esi
c000f062:	5f                   	pop    edi
c000f063:	5d                   	pop    ebp
c000f064:	c3                   	ret    

c000f065 <__cxa_atexit>:
c000f065:	31 c0                	xor    eax,eax
c000f067:	c3                   	ret    

c000f068 <__cxa_finalize>:
c000f068:	c3                   	ret    

c000f069 <__stack_chk_fail>:
c000f069:	55                   	push   ebp
c000f06a:	89 e5                	mov    ebp,esp
c000f06c:	83 ec 10             	sub    esp,0x10
c000f06f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f072:	68 26 19 02 c0       	push   0xc0021926
c000f077:	e8 93 01 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000f07c:	58                   	pop    eax
c000f07d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f080:	5a                   	pop    edx
c000f081:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f084:	68 26 19 02 c0       	push   0xc0021926
c000f089:	e8 81 01 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000f08e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f091:	59                   	pop    ecx
c000f092:	5a                   	pop    edx
c000f093:	8b 00                	mov    eax,DWORD PTR [eax]
c000f095:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f098:	68 26 19 02 c0       	push   0xc0021926
c000f09d:	e8 6d 01 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000f0a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a5:	59                   	pop    ecx
c000f0a6:	5a                   	pop    edx
c000f0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0ae:	68 26 19 02 c0       	push   0xc0021926
c000f0b3:	e8 57 01 00 00       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c000f0b8:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0bf:	e8 7a 69 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000f0c4:	83 c4 10             	add    esp,0x10
c000f0c7:	c9                   	leave  
c000f0c8:	c3                   	ret    

c000f0c9 <__cxa_pure_virtual>:
c000f0c9:	83 ec 18             	sub    esp,0x18
c000f0cc:	68 46 19 02 c0       	push   0xc0021946
c000f0d1:	e8 68 69 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c000f0d6:	83 c4 1c             	add    esp,0x1c
c000f0d9:	c3                   	ret    

c000f0da <operator new(unsigned long)>:
c000f0da:	e9 fe ce ff ff       	jmp    c000bfdd <malloc>

c000f0df <operator new[](unsigned long)>:
c000f0df:	e9 f9 ce ff ff       	jmp    c000bfdd <malloc>

c000f0e4 <operator delete(void*)>:
c000f0e4:	e9 14 cf ff ff       	jmp    c000bffd <rfree>

c000f0e9 <operator delete(void*, unsigned long)>:
c000f0e9:	e9 0f cf ff ff       	jmp    c000bffd <rfree>

c000f0ee <operator delete[](void*)>:
c000f0ee:	e9 0a cf ff ff       	jmp    c000bffd <rfree>

c000f0f3 <operator delete[](void*, unsigned long)>:
c000f0f3:	e9 05 cf ff ff       	jmp    c000bffd <rfree>

c000f0f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0f8:	57                   	push   edi
c000f0f9:	56                   	push   esi
c000f0fa:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f0ff:	53                   	push   ebx
c000f100:	83 ec 40             	sub    esp,0x40
c000f103:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f108:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f10c:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f110:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f114:	b8 3e 00 00 00       	mov    eax,0x3e
c000f119:	f7 c7 02 00 00 00    	test   edi,0x2
c000f11f:	75 69                	jne    c000f18a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f121:	89 c1                	mov    ecx,eax
c000f123:	c1 e9 02             	shr    ecx,0x2
c000f126:	fc                   	cld    
c000f127:	31 d2                	xor    edx,edx
c000f129:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f12b:	a8 02                	test   al,0x2
c000f12d:	74 0b                	je     c000f13a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f12f:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f132:	66 89 17             	mov    WORD PTR [edi],dx
c000f135:	ba 02 00 00 00       	mov    edx,0x2
c000f13a:	a8 01                	test   al,0x1
c000f13c:	74 06                	je     c000f144 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f13e:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f141:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f144:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f148:	83 f9 3e             	cmp    ecx,0x3e
c000f14b:	7e 05                	jle    c000f152 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f14d:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f152:	89 df                	mov    edi,ebx
c000f154:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f158:	eb 02                	jmp    c000f15c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f15a:	89 c7                	mov    edi,eax
c000f15c:	31 d2                	xor    edx,edx
c000f15e:	89 f8                	mov    eax,edi
c000f160:	46                   	inc    esi
c000f161:	f7 f1                	div    ecx
c000f163:	39 cf                	cmp    edi,ecx
c000f165:	73 f3                	jae    c000f15a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f167:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f16a:	eb 02                	jmp    c000f16e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f16c:	89 c3                	mov    ebx,eax
c000f16e:	31 d2                	xor    edx,edx
c000f170:	89 d8                	mov    eax,ebx
c000f172:	f7 f1                	div    ecx
c000f174:	4e                   	dec    esi
c000f175:	39 cb                	cmp    ebx,ecx
c000f177:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f17b:	88 16                	mov    BYTE PTR [esi],dl
c000f17d:	73 ed                	jae    c000f16c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f17f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f183:	83 c4 40             	add    esp,0x40
c000f186:	5b                   	pop    ebx
c000f187:	5e                   	pop    esi
c000f188:	5f                   	pop    edi
c000f189:	c3                   	ret    
c000f18a:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f18d:	83 c7 02             	add    edi,0x2
c000f190:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f194:	83 c6 02             	add    esi,0x2
c000f197:	83 e8 02             	sub    eax,0x2
c000f19a:	eb 85                	jmp    c000f121 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f19c <Dbg::logc(char)>:
c000f19c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a0:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1a5:	ec                   	in     al,dx
c000f1a6:	a8 20                	test   al,0x20
c000f1a8:	74 fb                	je     c000f1a5 <Dbg::logc(char)+0x9>
c000f1aa:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1af:	88 c8                	mov    al,cl
c000f1b1:	ee                   	out    dx,al
c000f1b2:	c3                   	ret    

c000f1b3 <Dbg::logs(char*)>:
c000f1b3:	53                   	push   ebx
c000f1b4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1b8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1bb:	84 c0                	test   al,al
c000f1bd:	74 0f                	je     c000f1ce <Dbg::logs(char*)+0x1b>
c000f1bf:	43                   	inc    ebx
c000f1c0:	50                   	push   eax
c000f1c1:	e8 d6 ff ff ff       	call   c000f19c <Dbg::logc(char)>
c000f1c6:	5a                   	pop    edx
c000f1c7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1ca:	84 c0                	test   al,al
c000f1cc:	75 f1                	jne    c000f1bf <Dbg::logs(char*)+0xc>
c000f1ce:	5b                   	pop    ebx
c000f1cf:	c3                   	ret    

c000f1d0 <Dbg::logWriteInt(unsigned int)>:
c000f1d0:	83 ec 10             	sub    esp,0x10
c000f1d3:	6a 0a                	push   0xa
c000f1d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1d9:	50                   	push   eax
c000f1da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1de:	50                   	push   eax
c000f1df:	e8 14 ff ff ff       	call   c000f0f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1e4:	50                   	push   eax
c000f1e5:	e8 c9 ff ff ff       	call   c000f1b3 <Dbg::logs(char*)>
c000f1ea:	83 c4 20             	add    esp,0x20
c000f1ed:	c3                   	ret    

c000f1ee <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1ee:	83 ec 10             	sub    esp,0x10
c000f1f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1f5:	50                   	push   eax
c000f1f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1fa:	50                   	push   eax
c000f1fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1ff:	52                   	push   edx
c000f200:	e8 f3 fe ff ff       	call   c000f0f8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f205:	50                   	push   eax
c000f206:	e8 a8 ff ff ff       	call   c000f1b3 <Dbg::logs(char*)>
c000f20b:	83 c4 20             	add    esp,0x20
c000f20e:	c3                   	ret    

c000f20f <Dbg::kprintf(char const*, ...)>:
c000f20f:	55                   	push   ebp
c000f210:	57                   	push   edi
c000f211:	56                   	push   esi
c000f212:	53                   	push   ebx
c000f213:	83 ec 0c             	sub    esp,0xc
c000f216:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f21a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f21e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f222:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f225:	84 c0                	test   al,al
c000f227:	74 4d                	je     c000f276 <Dbg::kprintf(char const*, ...)+0x67>
c000f229:	31 ff                	xor    edi,edi
c000f22b:	8d 77 01             	lea    esi,[edi+0x1]
c000f22e:	3c 25                	cmp    al,0x25
c000f230:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f233:	0f 85 ec 00 00 00    	jne    c000f325 <Dbg::kprintf(char const*, ...)+0x116>
c000f239:	83 c7 02             	add    edi,0x2
c000f23c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f23f:	83 e8 25             	sub    eax,0x25
c000f242:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f245:	3c 53                	cmp    al,0x53
c000f247:	0f 87 c0 00 00 00    	ja     c000f30d <Dbg::kprintf(char const*, ...)+0xfe>
c000f24d:	25 ff 00 00 00       	and    eax,0xff
c000f252:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f259:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f25d:	89 c8                	mov    eax,ecx
c000f25f:	83 c1 04             	add    ecx,0x4
c000f262:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f266:	8b 00                	mov    eax,DWORD PTR [eax]
c000f268:	50                   	push   eax
c000f269:	e8 45 ff ff ff       	call   c000f1b3 <Dbg::logs(char*)>
c000f26e:	58                   	pop    eax
c000f26f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f272:	84 c0                	test   al,al
c000f274:	75 b5                	jne    c000f22b <Dbg::kprintf(char const*, ...)+0x1c>
c000f276:	83 c4 0c             	add    esp,0xc
c000f279:	5b                   	pop    ebx
c000f27a:	5e                   	pop    esi
c000f27b:	5f                   	pop    edi
c000f27c:	5d                   	pop    ebp
c000f27d:	c3                   	ret    
c000f27e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f282:	89 d0                	mov    eax,edx
c000f284:	83 c2 04             	add    edx,0x4
c000f287:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f28b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f28d:	50                   	push   eax
c000f28e:	e8 3d ff ff ff       	call   c000f1d0 <Dbg::logWriteInt(unsigned int)>
c000f293:	58                   	pop    eax
c000f294:	eb d9                	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f296:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29a:	89 d0                	mov    eax,edx
c000f29c:	83 c2 04             	add    edx,0x4
c000f29f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2a3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2a6:	50                   	push   eax
c000f2a7:	e8 f0 fe ff ff       	call   c000f19c <Dbg::logc(char)>
c000f2ac:	58                   	pop    eax
c000f2ad:	eb c0                	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f2af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2b3:	89 c8                	mov    eax,ecx
c000f2b5:	83 c1 04             	add    ecx,0x4
c000f2b8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2bc:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2be:	55                   	push   ebp
c000f2bf:	e8 0c ff ff ff       	call   c000f1d0 <Dbg::logWriteInt(unsigned int)>
c000f2c4:	58                   	pop    eax
c000f2c5:	eb a8                	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f2c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2cb:	89 c8                	mov    eax,ecx
c000f2cd:	83 c1 04             	add    ecx,0x4
c000f2d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d4:	6a 10                	push   0x10
c000f2d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2d8:	51                   	push   ecx
c000f2d9:	e8 10 ff ff ff       	call   c000f1ee <Dbg::logWriteIntBase(unsigned int, int)>
c000f2de:	5d                   	pop    ebp
c000f2df:	58                   	pop    eax
c000f2e0:	eb 8d                	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f2e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2e6:	89 d0                	mov    eax,edx
c000f2e8:	83 c2 08             	add    edx,0x8
c000f2eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2ef:	6a 10                	push   0x10
c000f2f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f3:	50                   	push   eax
c000f2f4:	e8 f5 fe ff ff       	call   c000f1ee <Dbg::logWriteIntBase(unsigned int, int)>
c000f2f9:	58                   	pop    eax
c000f2fa:	5a                   	pop    edx
c000f2fb:	e9 6f ff ff ff       	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f300:	6a 25                	push   0x25
c000f302:	e8 95 fe ff ff       	call   c000f19c <Dbg::logc(char)>
c000f307:	5a                   	pop    edx
c000f308:	e9 62 ff ff ff       	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f30d:	6a 25                	push   0x25
c000f30f:	e8 88 fe ff ff       	call   c000f19c <Dbg::logc(char)>
c000f314:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f318:	50                   	push   eax
c000f319:	e8 7e fe ff ff       	call   c000f19c <Dbg::logc(char)>
c000f31e:	5a                   	pop    edx
c000f31f:	59                   	pop    ecx
c000f320:	e9 4a ff ff ff       	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f325:	50                   	push   eax
c000f326:	89 f7                	mov    edi,esi
c000f328:	e8 6f fe ff ff       	call   c000f19c <Dbg::logc(char)>
c000f32d:	89 ee                	mov    esi,ebp
c000f32f:	58                   	pop    eax
c000f330:	e9 3a ff ff ff       	jmp    c000f26f <Dbg::kprintf(char const*, ...)+0x60>
c000f335:	90                   	nop

c000f336 <File::read(unsigned long long, void*, int*)>:
c000f336:	53                   	push   ebx
c000f337:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f33b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f33f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f346:	3c 19                	cmp    al,0x19
c000f348:	77 35                	ja     c000f37f <File::read(unsigned long long, void*, int*)+0x49>
c000f34a:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f351:	85 c0                	test   eax,eax
c000f353:	74 2a                	je     c000f37f <File::read(unsigned long long, void*, int*)+0x49>
c000f355:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f35b:	85 c0                	test   eax,eax
c000f35d:	74 20                	je     c000f37f <File::read(unsigned long long, void*, int*)+0x49>
c000f35f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f363:	74 21                	je     c000f386 <File::read(unsigned long long, void*, int*)+0x50>
c000f365:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f367:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f36b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f375:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f379:	5b                   	pop    ebx
c000f37a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f37d:	ff e0                	jmp    eax
c000f37f:	b8 0b 00 00 00       	mov    eax,0xb
c000f384:	eb 05                	jmp    c000f38b <File::read(unsigned long long, void*, int*)+0x55>
c000f386:	b8 05 00 00 00       	mov    eax,0x5
c000f38b:	5b                   	pop    ebx
c000f38c:	c3                   	ret    
c000f38d:	90                   	nop

c000f38e <File::write(unsigned long long, void*, int*)>:
c000f38e:	53                   	push   ebx
c000f38f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f393:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f397:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f39e:	3c 19                	cmp    al,0x19
c000f3a0:	77 35                	ja     c000f3d7 <File::write(unsigned long long, void*, int*)+0x49>
c000f3a2:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3a9:	85 c0                	test   eax,eax
c000f3ab:	74 2a                	je     c000f3d7 <File::write(unsigned long long, void*, int*)+0x49>
c000f3ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3b3:	85 c0                	test   eax,eax
c000f3b5:	74 20                	je     c000f3d7 <File::write(unsigned long long, void*, int*)+0x49>
c000f3b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3bb:	74 21                	je     c000f3de <File::write(unsigned long long, void*, int*)+0x50>
c000f3bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3c3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3d1:	5b                   	pop    ebx
c000f3d2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3d5:	ff e0                	jmp    eax
c000f3d7:	b8 0b 00 00 00       	mov    eax,0xb
c000f3dc:	eb 05                	jmp    c000f3e3 <File::write(unsigned long long, void*, int*)+0x55>
c000f3de:	b8 05 00 00 00       	mov    eax,0x5
c000f3e3:	5b                   	pop    ebx
c000f3e4:	c3                   	ret    
c000f3e5:	90                   	nop

c000f3e6 <Directory::read(unsigned long long, void*, int*)>:
c000f3e6:	53                   	push   ebx
c000f3e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3f6:	3c 19                	cmp    al,0x19
c000f3f8:	77 35                	ja     c000f42f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3fa:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f401:	85 c0                	test   eax,eax
c000f403:	74 2a                	je     c000f42f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f405:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f40b:	85 c0                	test   eax,eax
c000f40d:	74 20                	je     c000f42f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f40f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f413:	74 21                	je     c000f436 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f415:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f417:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f41b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f421:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f425:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f429:	5b                   	pop    ebx
c000f42a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f42d:	ff e0                	jmp    eax
c000f42f:	b8 0b 00 00 00       	mov    eax,0xb
c000f434:	eb 05                	jmp    c000f43b <Directory::read(unsigned long long, void*, int*)+0x55>
c000f436:	b8 05 00 00 00       	mov    eax,0x5
c000f43b:	5b                   	pop    ebx
c000f43c:	c3                   	ret    
c000f43d:	90                   	nop

c000f43e <Directory::write(unsigned long long, void*, int*)>:
c000f43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f442:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f449:	b8 0b 00 00 00       	mov    eax,0xb
c000f44e:	80 fa 19             	cmp    dl,0x19
c000f451:	77 18                	ja     c000f46b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f453:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f45a:	85 d2                	test   edx,edx
c000f45c:	74 0d                	je     c000f46b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f45e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f465:	19 c0                	sbb    eax,eax
c000f467:	83 e0 0a             	and    eax,0xa
c000f46a:	40                   	inc    eax
c000f46b:	c3                   	ret    

c000f46c <File::isAtty()>:
c000f46c:	31 c0                	xor    eax,eax
c000f46e:	c3                   	ret    
c000f46f:	90                   	nop

c000f470 <Directory::isAtty()>:
c000f470:	31 c0                	xor    eax,eax
c000f472:	c3                   	ret    
c000f473:	90                   	nop

c000f474 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f474:	b8 0a 00 00 00       	mov    eax,0xa
c000f479:	c3                   	ret    

c000f47a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f47a:	b8 0a 00 00 00       	mov    eax,0xa
c000f47f:	c3                   	ret    

c000f480 <File::~File()>:
c000f480:	83 ec 0c             	sub    esp,0xc
c000f483:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f48c:	89 10                	mov    DWORD PTR [eax],edx
c000f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f492:	83 ec 0c             	sub    esp,0xc
c000f495:	50                   	push   eax
c000f496:	e8 c5 ea ff ff       	call   c000df60 <UnixFile::~UnixFile()>
c000f49b:	83 c4 10             	add    esp,0x10
c000f49e:	90                   	nop
c000f49f:	83 c4 0c             	add    esp,0xc
c000f4a2:	c3                   	ret    
c000f4a3:	90                   	nop

c000f4a4 <File::~File()>:
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	83 ec 0c             	sub    esp,0xc
c000f4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4ae:	e8 cd ff ff ff       	call   c000f480 <File::~File()>
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	83 ec 08             	sub    esp,0x8
c000f4b9:	68 14 01 00 00       	push   0x114
c000f4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c2:	e8 22 fc ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000f4c7:	83 c4 10             	add    esp,0x10
c000f4ca:	83 c4 0c             	add    esp,0xc
c000f4cd:	c3                   	ret    

c000f4ce <Directory::~Directory()>:
c000f4ce:	83 ec 0c             	sub    esp,0xc
c000f4d1:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4da:	89 10                	mov    DWORD PTR [eax],edx
c000f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e0:	83 ec 0c             	sub    esp,0xc
c000f4e3:	50                   	push   eax
c000f4e4:	e8 77 ea ff ff       	call   c000df60 <UnixFile::~UnixFile()>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	90                   	nop
c000f4ed:	83 c4 0c             	add    esp,0xc
c000f4f0:	c3                   	ret    
c000f4f1:	90                   	nop

c000f4f2 <Directory::~Directory()>:
c000f4f2:	83 ec 0c             	sub    esp,0xc
c000f4f5:	83 ec 0c             	sub    esp,0xc
c000f4f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fc:	e8 cd ff ff ff       	call   c000f4ce <Directory::~Directory()>
c000f501:	83 c4 10             	add    esp,0x10
c000f504:	83 ec 08             	sub    esp,0x8
c000f507:	68 14 01 00 00       	push   0x114
c000f50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f510:	e8 d4 fb ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	83 c4 0c             	add    esp,0xc
c000f51b:	c3                   	ret    

c000f51c <Filesystem::Filesystem()>:
c000f51c:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f521:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f525:	89 10                	mov    DWORD PTR [eax],edx
c000f527:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f52d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f531:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f538:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f53d:	90                   	nop
c000f53e:	c3                   	ret    
c000f53f:	90                   	nop

c000f540 <Filesystem::~Filesystem()>:
c000f540:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f549:	89 10                	mov    DWORD PTR [eax],edx
c000f54b:	90                   	nop
c000f54c:	c3                   	ret    
c000f54d:	90                   	nop

c000f54e <Filesystem::~Filesystem()>:
c000f54e:	83 ec 0c             	sub    esp,0xc
c000f551:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f555:	e8 e6 ff ff ff       	call   c000f540 <Filesystem::~Filesystem()>
c000f55a:	83 c4 04             	add    esp,0x4
c000f55d:	83 ec 08             	sub    esp,0x8
c000f560:	6a 08                	push   0x8
c000f562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f566:	e8 7e fb ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	83 c4 0c             	add    esp,0xc
c000f571:	c3                   	ret    

c000f572 <initVFS()>:
c000f572:	83 ec 18             	sub    esp,0x18
c000f575:	6a 08                	push   0x8
c000f577:	e8 5e fb ff ff       	call   c000f0da <operator new(unsigned long)>
c000f57c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f57f:	e8 da b3 00 00       	call   c001a95e <FAT::FAT()>
c000f584:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f58b:	e8 4a fb ff ff       	call   c000f0da <operator new(unsigned long)>
c000f590:	89 04 24             	mov    DWORD PTR [esp],eax
c000f593:	e8 66 c6 00 00       	call   c001bbfe <ISO9660::ISO9660()>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <standardiseFiles(char*, char const*, char const*)>:
c000f59c:	55                   	push   ebp
c000f59d:	57                   	push   edi
c000f59e:	56                   	push   esi
c000f59f:	53                   	push   ebx
c000f5a0:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5a6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5ad:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5b4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5bb:	68 00 04 00 00       	push   0x400
c000f5c0:	6a 00                	push   0x0
c000f5c2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5c6:	56                   	push   esi
c000f5c7:	e8 f3 10 ff ff       	call   c00006bf <memset>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5d3:	75 0b                	jne    c000f5e0 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5d5:	50                   	push   eax
c000f5d6:	50                   	push   eax
c000f5d7:	57                   	push   edi
c000f5d8:	56                   	push   esi
c000f5d9:	e8 80 11 ff ff       	call   c000075e <strcpy>
c000f5de:	eb 41                	jmp    c000f621 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5e0:	8a 07                	mov    al,BYTE PTR [edi]
c000f5e2:	3c 5c                	cmp    al,0x5c
c000f5e4:	74 04                	je     c000f5ea <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5e6:	3c 2f                	cmp    al,0x2f
c000f5e8:	75 18                	jne    c000f602 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5ea:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5ed:	3c 60                	cmp    al,0x60
c000f5ef:	7e 03                	jle    c000f5f4 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5f1:	83 e8 20             	sub    eax,0x20
c000f5f4:	88 04 24             	mov    BYTE PTR [esp],al
c000f5f7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f5fe:	50                   	push   eax
c000f5ff:	50                   	push   eax
c000f600:	eb 18                	jmp    c000f61a <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f602:	50                   	push   eax
c000f603:	50                   	push   eax
c000f604:	55                   	push   ebp
c000f605:	56                   	push   esi
c000f606:	e8 53 11 ff ff       	call   c000075e <strcpy>
c000f60b:	5a                   	pop    edx
c000f60c:	59                   	pop    ecx
c000f60d:	68 54 2e 02 c0       	push   0xc0022e54
c000f612:	56                   	push   esi
c000f613:	e8 fd 11 ff ff       	call   c0000815 <strcat>
c000f618:	5d                   	pop    ebp
c000f619:	58                   	pop    eax
c000f61a:	57                   	push   edi
c000f61b:	56                   	push   esi
c000f61c:	e8 f4 11 ff ff       	call   c0000815 <strcat>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f627:	3c 60                	cmp    al,0x60
c000f629:	7e 03                	jle    c000f62e <standardiseFiles(char*, char const*, char const*)+0x92>
c000f62b:	83 e8 20             	sub    eax,0x20
c000f62e:	88 04 24             	mov    BYTE PTR [esp],al
c000f631:	88 03                	mov    BYTE PTR [ebx],al
c000f633:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f63a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f640:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f644:	bf 03 00 00 00       	mov    edi,0x3
c000f649:	b8 03 00 00 00       	mov    eax,0x3
c000f64e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f651:	84 d2                	test   dl,dl
c000f653:	0f 84 91 00 00 00    	je     c000f6ea <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f659:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f65c:	80 fa 2f             	cmp    dl,0x2f
c000f65f:	74 05                	je     c000f666 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f661:	80 fa 5c             	cmp    dl,0x5c
c000f664:	75 12                	jne    c000f678 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f666:	89 c5                	mov    ebp,eax
c000f668:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f66d:	74 09                	je     c000f678 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f66f:	40                   	inc    eax
c000f670:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f674:	89 cf                	mov    edi,ecx
c000f676:	eb d6                	jmp    c000f64e <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f678:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f67d:	75 5b                	jne    c000f6da <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f67f:	80 fa 2e             	cmp    dl,0x2e
c000f682:	75 56                	jne    c000f6da <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f684:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f688:	74 19                	je     c000f6a3 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f68a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f68f:	74 53                	je     c000f6e4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f691:	89 f9                	mov    ecx,edi
c000f693:	41                   	inc    ecx
c000f694:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f697:	80 fa 5c             	cmp    dl,0x5c
c000f69a:	74 f7                	je     c000f693 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f69c:	80 fa 2f             	cmp    dl,0x2f
c000f69f:	74 f2                	je     c000f693 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a1:	eb d1                	jmp    c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6a3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6a8:	74 3a                	je     c000f6e4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6aa:	83 f8 03             	cmp    eax,0x3
c000f6ad:	74 c5                	je     c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6af:	41                   	inc    ecx
c000f6b0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6b3:	80 fa 2f             	cmp    dl,0x2f
c000f6b6:	74 f7                	je     c000f6af <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6b8:	80 fa 5c             	cmp    dl,0x5c
c000f6bb:	74 f2                	je     c000f6af <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6bd:	48                   	dec    eax
c000f6be:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6c2:	75 06                	jne    c000f6ca <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6c4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6c8:	eb f3                	jmp    c000f6bd <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6ca:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6ce:	74 07                	je     c000f6d7 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6d4:	48                   	dec    eax
c000f6d5:	eb f3                	jmp    c000f6ca <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6d7:	40                   	inc    eax
c000f6d8:	eb 9a                	jmp    c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6da:	80 fa 2f             	cmp    dl,0x2f
c000f6dd:	74 95                	je     c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6df:	80 fa 5c             	cmp    dl,0x5c
c000f6e2:	74 90                	je     c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6e7:	40                   	inc    eax
c000f6e8:	eb 8a                	jmp    c000f674 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ee:	83 ec 0c             	sub    esp,0xc
c000f6f1:	53                   	push   ebx
c000f6f2:	e8 e5 0f ff ff       	call   c00006dc <strlen>
c000f6f7:	83 c4 10             	add    esp,0x10
c000f6fa:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f6ff:	75 26                	jne    c000f727 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f701:	83 ec 0c             	sub    esp,0xc
c000f704:	53                   	push   ebx
c000f705:	e8 d2 0f ff ff       	call   c00006dc <strlen>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f712:	74 26                	je     c000f73a <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f714:	83 ec 0c             	sub    esp,0xc
c000f717:	53                   	push   ebx
c000f718:	e8 bf 0f ff ff       	call   c00006dc <strlen>
c000f71d:	83 c4 10             	add    esp,0x10
c000f720:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f725:	eb c7                	jmp    c000f6ee <standardiseFiles(char*, char const*, char const*)+0x152>
c000f727:	83 ec 0c             	sub    esp,0xc
c000f72a:	53                   	push   ebx
c000f72b:	e8 ac 0f ff ff       	call   c00006dc <strlen>
c000f730:	83 c4 10             	add    esp,0x10
c000f733:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f738:	74 c7                	je     c000f701 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f73a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f740:	5b                   	pop    ebx
c000f741:	5e                   	pop    esi
c000f742:	5f                   	pop    edi
c000f743:	5d                   	pop    ebp
c000f744:	c3                   	ret    
c000f745:	90                   	nop

c000f746 <File::File(char const*, Process*)>:
c000f746:	83 ec 0c             	sub    esp,0xc
c000f749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74d:	83 ec 08             	sub    esp,0x8
c000f750:	6a 00                	push   0x0
c000f752:	50                   	push   eax
c000f753:	e8 66 e6 ff ff       	call   c000ddbe <UnixFile::UnixFile(int)>
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f764:	89 10                	mov    DWORD PTR [eax],edx
c000f766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f76a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f774:	83 c0 0d             	add    eax,0xd
c000f777:	83 ec 04             	sub    esp,0x4
c000f77a:	52                   	push   edx
c000f77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77f:	50                   	push   eax
c000f780:	e8 17 fe ff ff       	call   c000f59c <standardiseFiles(char*, char const*, char const*)>
c000f785:	83 c4 10             	add    esp,0x10
c000f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f78f:	8d 50 bf             	lea    edx,[eax-0x41]
c000f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f796:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7a4:	90                   	nop
c000f7a5:	83 c4 0c             	add    esp,0xc
c000f7a8:	c3                   	ret    
c000f7a9:	90                   	nop

c000f7aa <File::open(FileOpenMode)>:
c000f7aa:	53                   	push   ebx
c000f7ab:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b0:	83 ec 08             	sub    esp,0x8
c000f7b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7be:	80 fa 19             	cmp    dl,0x19
c000f7c1:	77 40                	ja     c000f803 <File::open(FileOpenMode)+0x59>
c000f7c3:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7ca:	85 d2                	test   edx,edx
c000f7cc:	74 35                	je     c000f803 <File::open(FileOpenMode)+0x59>
c000f7ce:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d4:	85 d2                	test   edx,edx
c000f7d6:	74 2b                	je     c000f803 <File::open(FileOpenMode)+0x59>
c000f7d8:	b8 06 00 00 00       	mov    eax,0x6
c000f7dd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7e1:	75 20                	jne    c000f803 <File::open(FileOpenMode)+0x59>
c000f7e3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7ef:	51                   	push   ecx
c000f7f0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7f3:	51                   	push   ecx
c000f7f4:	52                   	push   edx
c000f7f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7f8:	83 c4 10             	add    esp,0x10
c000f7fb:	85 c0                	test   eax,eax
c000f7fd:	75 04                	jne    c000f803 <File::open(FileOpenMode)+0x59>
c000f7ff:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f803:	83 c4 08             	add    esp,0x8
c000f806:	5b                   	pop    ebx
c000f807:	c3                   	ret    

c000f808 <File::close()>:
c000f808:	53                   	push   ebx
c000f809:	b8 0b 00 00 00       	mov    eax,0xb
c000f80e:	83 ec 08             	sub    esp,0x8
c000f811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f815:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81c:	80 fa 19             	cmp    dl,0x19
c000f81f:	77 41                	ja     c000f862 <File::close()+0x5a>
c000f821:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f828:	85 db                	test   ebx,ebx
c000f82a:	74 36                	je     c000f862 <File::close()+0x5a>
c000f82c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f833:	74 2d                	je     c000f862 <File::close()+0x5a>
c000f835:	b8 05 00 00 00       	mov    eax,0x5
c000f83a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83e:	74 22                	je     c000f862 <File::close()+0x5a>
c000f840:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f844:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f84b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f851:	53                   	push   ebx
c000f852:	53                   	push   ebx
c000f853:	8b 10                	mov    edx,DWORD PTR [eax]
c000f855:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f85b:	50                   	push   eax
c000f85c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f85f:	83 c4 10             	add    esp,0x10
c000f862:	83 c4 08             	add    esp,0x8
c000f865:	5b                   	pop    ebx
c000f866:	c3                   	ret    
c000f867:	90                   	nop

c000f868 <File::seek(unsigned long long)>:
c000f868:	56                   	push   esi
c000f869:	b8 0b 00 00 00       	mov    eax,0xb
c000f86e:	53                   	push   ebx
c000f86f:	51                   	push   ecx
c000f870:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f874:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f878:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f87c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f883:	80 fa 19             	cmp    dl,0x19
c000f886:	77 31                	ja     c000f8b9 <File::seek(unsigned long long)+0x51>
c000f888:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f88f:	85 d2                	test   edx,edx
c000f891:	74 26                	je     c000f8b9 <File::seek(unsigned long long)+0x51>
c000f893:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f899:	85 d2                	test   edx,edx
c000f89b:	74 1c                	je     c000f8b9 <File::seek(unsigned long long)+0x51>
c000f89d:	b8 05 00 00 00       	mov    eax,0x5
c000f8a2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8a6:	74 11                	je     c000f8b9 <File::seek(unsigned long long)+0x51>
c000f8a8:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8aa:	53                   	push   ebx
c000f8ab:	51                   	push   ecx
c000f8ac:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8b2:	52                   	push   edx
c000f8b3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8b6:	83 c4 10             	add    esp,0x10
c000f8b9:	5a                   	pop    edx
c000f8ba:	5b                   	pop    ebx
c000f8bb:	5e                   	pop    esi
c000f8bc:	c3                   	ret    
c000f8bd:	90                   	nop

c000f8be <File::tell(unsigned long long*)>:
c000f8be:	83 ec 0c             	sub    esp,0xc
c000f8c1:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8ca:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8d1:	80 fa 19             	cmp    dl,0x19
c000f8d4:	77 34                	ja     c000f90a <File::tell(unsigned long long*)+0x4c>
c000f8d6:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8dd:	85 d2                	test   edx,edx
c000f8df:	74 29                	je     c000f90a <File::tell(unsigned long long*)+0x4c>
c000f8e1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8e7:	85 d2                	test   edx,edx
c000f8e9:	74 1f                	je     c000f90a <File::tell(unsigned long long*)+0x4c>
c000f8eb:	b8 05 00 00 00       	mov    eax,0x5
c000f8f0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8f4:	74 14                	je     c000f90a <File::tell(unsigned long long*)+0x4c>
c000f8f6:	50                   	push   eax
c000f8f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f903:	52                   	push   edx
c000f904:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f907:	83 c4 10             	add    esp,0x10
c000f90a:	83 c4 0c             	add    esp,0xc
c000f90d:	c3                   	ret    

c000f90e <File::rewind()>:
c000f90e:	83 ec 10             	sub    esp,0x10
c000f911:	6a 00                	push   0x0
c000f913:	6a 00                	push   0x0
c000f915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f919:	e8 4a ff ff ff       	call   c000f868 <File::seek(unsigned long long)>
c000f91e:	83 c4 1c             	add    esp,0x1c
c000f921:	c3                   	ret    

c000f922 <File::unlink()>:
c000f922:	83 ec 0c             	sub    esp,0xc
c000f925:	b8 0b 00 00 00       	mov    eax,0xb
c000f92a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f92e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f935:	80 f9 19             	cmp    cl,0x19
c000f938:	77 2f                	ja     c000f969 <File::unlink()+0x47>
c000f93a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f941:	85 c9                	test   ecx,ecx
c000f943:	74 24                	je     c000f969 <File::unlink()+0x47>
c000f945:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f94b:	85 c9                	test   ecx,ecx
c000f94d:	74 1a                	je     c000f969 <File::unlink()+0x47>
c000f94f:	b8 06 00 00 00       	mov    eax,0x6
c000f954:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f958:	75 0f                	jne    c000f969 <File::unlink()+0x47>
c000f95a:	50                   	push   eax
c000f95b:	83 c2 0d             	add    edx,0xd
c000f95e:	50                   	push   eax
c000f95f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f961:	52                   	push   edx
c000f962:	51                   	push   ecx
c000f963:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 0c             	add    esp,0xc
c000f96c:	c3                   	ret    
c000f96d:	90                   	nop

c000f96e <File::rename(char const*)>:
c000f96e:	83 ec 0c             	sub    esp,0xc
c000f971:	b8 0b 00 00 00       	mov    eax,0xb
c000f976:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f97a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f981:	80 f9 19             	cmp    cl,0x19
c000f984:	77 32                	ja     c000f9b8 <File::rename(char const*)+0x4a>
c000f986:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f98d:	85 c9                	test   ecx,ecx
c000f98f:	74 27                	je     c000f9b8 <File::rename(char const*)+0x4a>
c000f991:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f997:	85 c9                	test   ecx,ecx
c000f999:	74 1d                	je     c000f9b8 <File::rename(char const*)+0x4a>
c000f99b:	b8 06 00 00 00       	mov    eax,0x6
c000f9a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9a4:	75 12                	jne    c000f9b8 <File::rename(char const*)+0x4a>
c000f9a6:	50                   	push   eax
c000f9a7:	83 c2 0d             	add    edx,0xd
c000f9aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9b0:	52                   	push   edx
c000f9b1:	51                   	push   ecx
c000f9b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	83 c4 0c             	add    esp,0xc
c000f9bb:	c3                   	ret    

c000f9bc <File::chfatattr(unsigned char, unsigned char)>:
c000f9bc:	57                   	push   edi
c000f9bd:	b8 0b 00 00 00       	mov    eax,0xb
c000f9c2:	56                   	push   esi
c000f9c3:	53                   	push   ebx
c000f9c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9d7:	80 f9 19             	cmp    cl,0x19
c000f9da:	77 37                	ja     c000fa13 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9dc:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9e3:	85 c9                	test   ecx,ecx
c000f9e5:	74 2c                	je     c000fa13 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ed:	85 c9                	test   ecx,ecx
c000f9ef:	74 22                	je     c000fa13 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f1:	b8 06 00 00 00       	mov    eax,0x6
c000f9f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9fa:	75 17                	jne    c000fa13 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9fc:	89 f0                	mov    eax,esi
c000f9fe:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa00:	0f b6 f0             	movzx  esi,al
c000fa03:	56                   	push   esi
c000fa04:	83 c2 0d             	add    edx,0xd
c000fa07:	0f b6 db             	movzx  ebx,bl
c000fa0a:	53                   	push   ebx
c000fa0b:	52                   	push   edx
c000fa0c:	51                   	push   ecx
c000fa0d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa10:	83 c4 10             	add    esp,0x10
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	5f                   	pop    edi
c000fa16:	c3                   	ret    
c000fa17:	90                   	nop

c000fa18 <File::exists()>:
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	31 c0                	xor    eax,eax
c000fa1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa21:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa28:	80 f9 19             	cmp    cl,0x19
c000fa2b:	77 24                	ja     c000fa51 <File::exists()+0x39>
c000fa2d:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa34:	85 c9                	test   ecx,ecx
c000fa36:	74 19                	je     c000fa51 <File::exists()+0x39>
c000fa38:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa3e:	85 c9                	test   ecx,ecx
c000fa40:	74 0f                	je     c000fa51 <File::exists()+0x39>
c000fa42:	50                   	push   eax
c000fa43:	83 c2 0d             	add    edx,0xd
c000fa46:	50                   	push   eax
c000fa47:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa49:	52                   	push   edx
c000fa4a:	51                   	push   ecx
c000fa4b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa4e:	83 c4 10             	add    esp,0x10
c000fa51:	83 c4 0c             	add    esp,0xc
c000fa54:	c3                   	ret    
c000fa55:	90                   	nop

c000fa56 <File::stat(unsigned long long*, bool*)>:
c000fa56:	56                   	push   esi
c000fa57:	53                   	push   ebx
c000fa58:	50                   	push   eax
c000fa59:	b8 0b 00 00 00       	mov    eax,0xb
c000fa5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa71:	80 f9 19             	cmp    cl,0x19
c000fa74:	77 3d                	ja     c000fab3 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa76:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa7d:	85 c9                	test   ecx,ecx
c000fa7f:	74 32                	je     c000fab3 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa87:	85 c9                	test   ecx,ecx
c000fa89:	74 28                	je     c000fab3 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa8d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa91:	74 13                	je     c000faa6 <File::stat(unsigned long long*, bool*)+0x50>
c000fa93:	83 ec 04             	sub    esp,0x4
c000fa96:	56                   	push   esi
c000fa97:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fa9d:	51                   	push   ecx
c000fa9e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000faa1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000faa4:	eb 0a                	jmp    c000fab0 <File::stat(unsigned long long*, bool*)+0x5a>
c000faa6:	53                   	push   ebx
c000faa7:	83 c2 0d             	add    edx,0xd
c000faaa:	56                   	push   esi
c000faab:	52                   	push   edx
c000faac:	51                   	push   ecx
c000faad:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	5a                   	pop    edx
c000fab4:	5b                   	pop    ebx
c000fab5:	5e                   	pop    esi
c000fab6:	c3                   	ret    

c000fab7 <getcwd(Process*, char*, int)>:
c000fab7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fabb:	31 c0                	xor    eax,eax
c000fabd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fac0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fac4:	7d 15                	jge    c000fadb <getcwd(Process*, char*, int)+0x24>
c000fac6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000faca:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fad1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fad4:	84 c9                	test   cl,cl
c000fad6:	74 06                	je     c000fade <getcwd(Process*, char*, int)+0x27>
c000fad8:	40                   	inc    eax
c000fad9:	eb e2                	jmp    c000fabd <getcwd(Process*, char*, int)+0x6>
c000fadb:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fade:	31 c0                	xor    eax,eax
c000fae0:	c3                   	ret    

c000fae1 <setcwd(Process*, char*)>:
c000fae1:	55                   	push   ebp
c000fae2:	57                   	push   edi
c000fae3:	56                   	push   esi
c000fae4:	53                   	push   ebx
c000fae5:	81 ec 20 02 00 00    	sub    esp,0x220
c000faeb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000faf2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000faf8:	57                   	push   edi
c000faf9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb00:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb04:	56                   	push   esi
c000fb05:	e8 92 fa ff ff       	call   c000f59c <standardiseFiles(char*, char const*, char const*)>
c000fb0a:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb0d:	e8 ca 0b ff ff       	call   c00006dc <strlen>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	83 f8 02             	cmp    eax,0x2
c000fb18:	77 17                	ja     c000fb31 <setcwd(Process*, char*)+0x50>
c000fb1a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb1f:	83 e8 41             	sub    eax,0x41
c000fb22:	83 f8 19             	cmp    eax,0x19
c000fb25:	76 24                	jbe    c000fb4b <setcwd(Process*, char*)+0x6a>
c000fb27:	b8 03 00 00 00       	mov    eax,0x3
c000fb2c:	e9 cb 00 00 00       	jmp    c000fbfc <setcwd(Process*, char*)+0x11b>
c000fb31:	83 ec 0c             	sub    esp,0xc
c000fb34:	56                   	push   esi
c000fb35:	e8 a2 0b ff ff       	call   c00006dc <strlen>
c000fb3a:	83 c4 10             	add    esp,0x10
c000fb3d:	83 f8 03             	cmp    eax,0x3
c000fb40:	75 33                	jne    c000fb75 <setcwd(Process*, char*)+0x94>
c000fb42:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb47:	75 2c                	jne    c000fb75 <setcwd(Process*, char*)+0x94>
c000fb49:	eb cf                	jmp    c000fb1a <setcwd(Process*, char*)+0x39>
c000fb4b:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb52:	b8 05 00 00 00       	mov    eax,0x5
c000fb57:	85 d2                	test   edx,edx
c000fb59:	0f 84 9d 00 00 00    	je     c000fbfc <setcwd(Process*, char*)+0x11b>
c000fb5f:	b8 06 00 00 00       	mov    eax,0x6
c000fb64:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb6b:	0f 84 8b 00 00 00    	je     c000fbfc <setcwd(Process*, char*)+0x11b>
c000fb71:	51                   	push   ecx
c000fb72:	51                   	push   ecx
c000fb73:	eb 7b                	jmp    c000fbf0 <setcwd(Process*, char*)+0x10f>
c000fb75:	83 ec 0c             	sub    esp,0xc
c000fb78:	68 14 01 00 00       	push   0x114
c000fb7d:	e8 58 f5 ff ff       	call   c000f0da <operator new(unsigned long)>
c000fb82:	83 c4 0c             	add    esp,0xc
c000fb85:	89 c3                	mov    ebx,eax
c000fb87:	55                   	push   ebp
c000fb88:	56                   	push   esi
c000fb89:	50                   	push   eax
c000fb8a:	e8 b7 fb ff ff       	call   c000f746 <File::File(char const*, Process*)>
c000fb8f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb94:	83 c4 0c             	add    esp,0xc
c000fb97:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb9b:	50                   	push   eax
c000fb9c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fba0:	50                   	push   eax
c000fba1:	53                   	push   ebx
c000fba2:	e8 af fe ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbac:	83 f8 02             	cmp    eax,0x2
c000fbaf:	75 09                	jne    c000fbba <setcwd(Process*, char*)+0xd9>
c000fbb1:	83 ec 0c             	sub    esp,0xc
c000fbb4:	53                   	push   ebx
c000fbb5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbb8:	eb 0d                	jmp    c000fbc7 <setcwd(Process*, char*)+0xe6>
c000fbba:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbbd:	85 c0                	test   eax,eax
c000fbbf:	74 10                	je     c000fbd1 <setcwd(Process*, char*)+0xf0>
c000fbc1:	83 ec 0c             	sub    esp,0xc
c000fbc4:	53                   	push   ebx
c000fbc5:	ff d2                	call   edx
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	b8 01 00 00 00       	mov    eax,0x1
c000fbcf:	eb 2b                	jmp    c000fbfc <setcwd(Process*, char*)+0x11b>
c000fbd1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbd6:	75 10                	jne    c000fbe8 <setcwd(Process*, char*)+0x107>
c000fbd8:	83 ec 0c             	sub    esp,0xc
c000fbdb:	53                   	push   ebx
c000fbdc:	ff d2                	call   edx
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	b8 02 00 00 00       	mov    eax,0x2
c000fbe6:	eb 14                	jmp    c000fbfc <setcwd(Process*, char*)+0x11b>
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	53                   	push   ebx
c000fbec:	ff d2                	call   edx
c000fbee:	58                   	pop    eax
c000fbef:	5a                   	pop    edx
c000fbf0:	56                   	push   esi
c000fbf1:	57                   	push   edi
c000fbf2:	e8 67 0b ff ff       	call   c000075e <strcpy>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	31 c0                	xor    eax,eax
c000fbfc:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc02:	5b                   	pop    ebx
c000fc03:	5e                   	pop    esi
c000fc04:	5f                   	pop    edi
c000fc05:	5d                   	pop    ebp
c000fc06:	c3                   	ret    
c000fc07:	90                   	nop

c000fc08 <Directory::Directory(char const*, Process*)>:
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0f:	83 ec 08             	sub    esp,0x8
c000fc12:	6a 00                	push   0x0
c000fc14:	50                   	push   eax
c000fc15:	e8 a4 e1 ff ff       	call   c000ddbe <UnixFile::UnixFile(int)>
c000fc1a:	83 c4 10             	add    esp,0x10
c000fc1d:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc26:	89 10                	mov    DWORD PTR [eax],edx
c000fc28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc2c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc36:	83 c0 0d             	add    eax,0xd
c000fc39:	83 ec 04             	sub    esp,0x4
c000fc3c:	52                   	push   edx
c000fc3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc41:	50                   	push   eax
c000fc42:	e8 55 f9 ff ff       	call   c000f59c <standardiseFiles(char*, char const*, char const*)>
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc51:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc58:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc62:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc66:	90                   	nop
c000fc67:	83 c4 0c             	add    esp,0xc
c000fc6a:	c3                   	ret    
c000fc6b:	90                   	nop

c000fc6c <Directory::open()>:
c000fc6c:	53                   	push   ebx
c000fc6d:	b8 0b 00 00 00       	mov    eax,0xb
c000fc72:	83 ec 08             	sub    esp,0x8
c000fc75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc79:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc80:	80 fa 19             	cmp    dl,0x19
c000fc83:	77 3d                	ja     c000fcc2 <Directory::open()+0x56>
c000fc85:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fc8c:	85 d2                	test   edx,edx
c000fc8e:	74 32                	je     c000fcc2 <Directory::open()+0x56>
c000fc90:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc96:	85 d2                	test   edx,edx
c000fc98:	74 28                	je     c000fcc2 <Directory::open()+0x56>
c000fc9a:	b8 06 00 00 00       	mov    eax,0x6
c000fc9f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fca3:	75 1d                	jne    c000fcc2 <Directory::open()+0x56>
c000fca5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcab:	50                   	push   eax
c000fcac:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcae:	51                   	push   ecx
c000fcaf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcb2:	51                   	push   ecx
c000fcb3:	52                   	push   edx
c000fcb4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	85 c0                	test   eax,eax
c000fcbc:	75 04                	jne    c000fcc2 <Directory::open()+0x56>
c000fcbe:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcc2:	83 c4 08             	add    esp,0x8
c000fcc5:	5b                   	pop    ebx
c000fcc6:	c3                   	ret    
c000fcc7:	90                   	nop

c000fcc8 <Directory::close()>:
c000fcc8:	53                   	push   ebx
c000fcc9:	b8 0b 00 00 00       	mov    eax,0xb
c000fcce:	83 ec 08             	sub    esp,0x8
c000fcd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcd5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcdc:	80 fa 19             	cmp    dl,0x19
c000fcdf:	77 41                	ja     c000fd22 <Directory::close()+0x5a>
c000fce1:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fce8:	85 db                	test   ebx,ebx
c000fcea:	74 36                	je     c000fd22 <Directory::close()+0x5a>
c000fcec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fcf3:	74 2d                	je     c000fd22 <Directory::close()+0x5a>
c000fcf5:	b8 05 00 00 00       	mov    eax,0x5
c000fcfa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fcfe:	74 22                	je     c000fd22 <Directory::close()+0x5a>
c000fd00:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd04:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd0b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd11:	53                   	push   ebx
c000fd12:	53                   	push   ebx
c000fd13:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd15:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd1b:	50                   	push   eax
c000fd1c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	83 c4 08             	add    esp,0x8
c000fd25:	5b                   	pop    ebx
c000fd26:	c3                   	ret    
c000fd27:	90                   	nop

c000fd28 <Directory::unlink()>:
c000fd28:	83 ec 0c             	sub    esp,0xc
c000fd2b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd3b:	80 f9 19             	cmp    cl,0x19
c000fd3e:	77 2f                	ja     c000fd6f <Directory::unlink()+0x47>
c000fd40:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd47:	85 c9                	test   ecx,ecx
c000fd49:	74 24                	je     c000fd6f <Directory::unlink()+0x47>
c000fd4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd51:	85 c9                	test   ecx,ecx
c000fd53:	74 1a                	je     c000fd6f <Directory::unlink()+0x47>
c000fd55:	b8 06 00 00 00       	mov    eax,0x6
c000fd5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd5e:	75 0f                	jne    c000fd6f <Directory::unlink()+0x47>
c000fd60:	50                   	push   eax
c000fd61:	83 c2 0d             	add    edx,0xd
c000fd64:	50                   	push   eax
c000fd65:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd67:	52                   	push   edx
c000fd68:	51                   	push   ecx
c000fd69:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	83 c4 0c             	add    esp,0xc
c000fd72:	c3                   	ret    
c000fd73:	90                   	nop

c000fd74 <Directory::rename(char const*)>:
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	b8 0b 00 00 00       	mov    eax,0xb
c000fd7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd87:	80 f9 19             	cmp    cl,0x19
c000fd8a:	77 32                	ja     c000fdbe <Directory::rename(char const*)+0x4a>
c000fd8c:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd93:	85 c9                	test   ecx,ecx
c000fd95:	74 27                	je     c000fdbe <Directory::rename(char const*)+0x4a>
c000fd97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd9d:	85 c9                	test   ecx,ecx
c000fd9f:	74 1d                	je     c000fdbe <Directory::rename(char const*)+0x4a>
c000fda1:	b8 06 00 00 00       	mov    eax,0x6
c000fda6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdaa:	75 12                	jne    c000fdbe <Directory::rename(char const*)+0x4a>
c000fdac:	50                   	push   eax
c000fdad:	83 c2 0d             	add    edx,0xd
c000fdb0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdb6:	52                   	push   edx
c000fdb7:	51                   	push   ecx
c000fdb8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	83 c4 0c             	add    esp,0xc
c000fdc1:	c3                   	ret    

c000fdc2 <Directory::exists()>:
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	31 c0                	xor    eax,eax
c000fdc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdcb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdd2:	80 f9 19             	cmp    cl,0x19
c000fdd5:	77 24                	ja     c000fdfb <Directory::exists()+0x39>
c000fdd7:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fdde:	85 c9                	test   ecx,ecx
c000fde0:	74 19                	je     c000fdfb <Directory::exists()+0x39>
c000fde2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 0f                	je     c000fdfb <Directory::exists()+0x39>
c000fdec:	50                   	push   eax
c000fded:	83 c2 0d             	add    edx,0xd
c000fdf0:	50                   	push   eax
c000fdf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdf3:	52                   	push   edx
c000fdf4:	51                   	push   ecx
c000fdf5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdf8:	83 c4 10             	add    esp,0x10
c000fdfb:	83 c4 0c             	add    esp,0xc
c000fdfe:	c3                   	ret    
c000fdff:	90                   	nop

c000fe00 <Directory::read(dirent*)>:
c000fe00:	83 ec 1c             	sub    esp,0x1c
c000fe03:	b8 0b 00 00 00       	mov    eax,0xb
c000fe08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe0c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe13:	80 fa 19             	cmp    dl,0x19
c000fe16:	77 30                	ja     c000fe48 <Directory::read(dirent*)+0x48>
c000fe18:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe1f:	85 d2                	test   edx,edx
c000fe21:	74 25                	je     c000fe48 <Directory::read(dirent*)+0x48>
c000fe23:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe2a:	74 1c                	je     c000fe48 <Directory::read(dirent*)+0x48>
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe31:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe35:	52                   	push   edx
c000fe36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe3a:	6a 00                	push   0x0
c000fe3c:	68 10 01 00 00       	push   0x110
c000fe41:	51                   	push   ecx
c000fe42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe45:	83 c4 20             	add    esp,0x20
c000fe48:	83 c4 1c             	add    esp,0x1c
c000fe4b:	c3                   	ret    

c000fe4c <Directory::create()>:
c000fe4c:	83 ec 0c             	sub    esp,0xc
c000fe4f:	b8 0b 00 00 00       	mov    eax,0xb
c000fe54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe5f:	80 f9 19             	cmp    cl,0x19
c000fe62:	77 2f                	ja     c000fe93 <Directory::create()+0x47>
c000fe64:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe6b:	85 c9                	test   ecx,ecx
c000fe6d:	74 24                	je     c000fe93 <Directory::create()+0x47>
c000fe6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe75:	85 c9                	test   ecx,ecx
c000fe77:	74 1a                	je     c000fe93 <Directory::create()+0x47>
c000fe79:	b8 06 00 00 00       	mov    eax,0x6
c000fe7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe82:	75 0f                	jne    c000fe93 <Directory::create()+0x47>
c000fe84:	50                   	push   eax
c000fe85:	83 c2 0d             	add    edx,0xd
c000fe88:	50                   	push   eax
c000fe89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe8b:	52                   	push   edx
c000fe8c:	51                   	push   ecx
c000fe8d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe90:	83 c4 10             	add    esp,0x10
c000fe93:	83 c4 0c             	add    esp,0xc
c000fe96:	c3                   	ret    
c000fe97:	90                   	nop

c000fe98 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe98:	b8 0a 00 00 00       	mov    eax,0xa
c000fe9d:	c3                   	ret    

c000fe9e <Bus::Bus(char const*)>:
c000fe9e:	83 ec 0c             	sub    esp,0xc
c000fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea5:	83 ec 08             	sub    esp,0x8
c000fea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feac:	50                   	push   eax
c000fead:	e8 62 09 00 00       	call   c0010814 <Device::Device(char const*)>
c000feb2:	83 c4 10             	add    esp,0x10
c000feb5:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000feba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febe:	89 10                	mov    DWORD PTR [eax],edx
c000fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fece:	90                   	nop
c000fecf:	83 c4 0c             	add    esp,0xc
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <Bus::~Bus()>:
c000fed4:	83 ec 0c             	sub    esp,0xc
c000fed7:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee0:	89 10                	mov    DWORD PTR [eax],edx
c000fee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee6:	83 ec 0c             	sub    esp,0xc
c000fee9:	50                   	push   eax
c000feea:	e8 db 05 00 00       	call   c00104ca <Device::~Device()>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	90                   	nop
c000fef3:	83 c4 0c             	add    esp,0xc
c000fef6:	c3                   	ret    
c000fef7:	90                   	nop

c000fef8 <Bus::~Bus()>:
c000fef8:	83 ec 0c             	sub    esp,0xc
c000fefb:	83 ec 0c             	sub    esp,0xc
c000fefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff02:	e8 cd ff ff ff       	call   c000fed4 <Bus::~Bus()>
c000ff07:	83 c4 10             	add    esp,0x10
c000ff0a:	83 ec 08             	sub    esp,0x8
c000ff0d:	68 58 01 00 00       	push   0x158
c000ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff16:	e8 ce f1 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	83 c4 0c             	add    esp,0xc
c000ff21:	c3                   	ret    

c000ff22 <Buzzer::Buzzer(char const*)>:
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff29:	83 ec 08             	sub    esp,0x8
c000ff2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff30:	50                   	push   eax
c000ff31:	e8 de 08 00 00       	call   c0010814 <Device::Device(char const*)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff42:	89 10                	mov    DWORD PTR [eax],edx
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff56:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff60:	90                   	nop
c000ff61:	83 c4 0c             	add    esp,0xc
c000ff64:	c3                   	ret    
c000ff65:	90                   	nop

c000ff66 <Buzzer::~Buzzer()>:
c000ff66:	83 ec 0c             	sub    esp,0xc
c000ff69:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff72:	89 10                	mov    DWORD PTR [eax],edx
c000ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff78:	83 ec 0c             	sub    esp,0xc
c000ff7b:	50                   	push   eax
c000ff7c:	e8 49 05 00 00       	call   c00104ca <Device::~Device()>
c000ff81:	83 c4 10             	add    esp,0x10
c000ff84:	90                   	nop
c000ff85:	83 c4 0c             	add    esp,0xc
c000ff88:	c3                   	ret    
c000ff89:	90                   	nop

c000ff8a <Buzzer::~Buzzer()>:
c000ff8a:	83 ec 0c             	sub    esp,0xc
c000ff8d:	83 ec 0c             	sub    esp,0xc
c000ff90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff94:	e8 cd ff ff ff       	call   c000ff66 <Buzzer::~Buzzer()>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	83 ec 08             	sub    esp,0x8
c000ff9f:	68 5c 01 00 00       	push   0x15c
c000ffa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa8:	e8 3c f1 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c000ffad:	83 c4 10             	add    esp,0x10
c000ffb0:	83 c4 0c             	add    esp,0xc
c000ffb3:	c3                   	ret    

c000ffb4 <Buzzer::stop()>:
c000ffb4:	83 ec 14             	sub    esp,0x14
c000ffb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffbb:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffbd:	6a 00                	push   0x0
c000ffbf:	50                   	push   eax
c000ffc0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffc3:	83 c4 1c             	add    esp,0x1c
c000ffc6:	c3                   	ret    

c000ffc7 <beepThread(void*)>:
c000ffc7:	53                   	push   ebx
c000ffc8:	83 ec 08             	sub    esp,0x8
c000ffcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffcf:	e8 75 8a 00 00       	call   c0018a49 <unlockScheduler()>
c000ffd4:	52                   	push   edx
c000ffd5:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffda:	52                   	push   edx
c000ffdb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffe1:	52                   	push   edx
c000ffe2:	50                   	push   eax
c000ffe3:	e8 bd 8f 00 00       	call   c0018fa5 <nanoSleep(unsigned long long)>
c000ffe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffeb:	e8 c4 ff ff ff       	call   c000ffb4 <Buzzer::stop()>
c000fff0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fff8:	83 c4 18             	add    esp,0x18
c000fffb:	5b                   	pop    ebx
c000fffc:	e9 e8 8e 00 00       	jmp    c0018ee9 <blockTask(TaskState)>
c0010001:	90                   	nop

c0010002 <Buzzer::beep(int, int, bool)>:
c0010002:	57                   	push   edi
c0010003:	56                   	push   esi
c0010004:	53                   	push   ebx
c0010005:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010009:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001000d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010011:	52                   	push   edx
c0010012:	52                   	push   edx
c0010013:	8b 06                	mov    eax,DWORD PTR [esi]
c0010015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010019:	56                   	push   esi
c001001a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001001d:	89 f8                	mov    eax,edi
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	84 c0                	test   al,al
c0010024:	74 1f                	je     c0010045 <Buzzer::beep(int, int, bool)+0x43>
c0010026:	50                   	push   eax
c0010027:	50                   	push   eax
c0010028:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001002e:	99                   	cdq    
c001002f:	52                   	push   edx
c0010030:	50                   	push   eax
c0010031:	e8 6f 8f 00 00       	call   c0018fa5 <nanoSleep(unsigned long long)>
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001003d:	5b                   	pop    ebx
c001003e:	5e                   	pop    esi
c001003f:	5f                   	pop    edi
c0010040:	e9 6f ff ff ff       	jmp    c000ffb4 <Buzzer::stop()>
c0010045:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001004b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0010050:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0010058:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001005c:	c7 44 24 14 c7 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffc7
c0010064:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010068:	5b                   	pop    ebx
c0010069:	5e                   	pop    esi
c001006a:	5f                   	pop    edi
c001006b:	e9 0c 8b 00 00       	jmp    c0018b7c <Process::createThread(void (*)(void*), void*, int)>

c0010070 <loadClockSettings()>:
c0010070:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c001007a:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c0010081:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c0010088:	c3                   	ret    
c0010089:	90                   	nop

c001008a <Clock::Clock(char const*)>:
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010091:	83 ec 08             	sub    esp,0x8
c0010094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010098:	50                   	push   eax
c0010099:	e8 76 07 00 00       	call   c0010814 <Device::Device(char const*)>
c001009e:	83 c4 10             	add    esp,0x10
c00100a1:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100aa:	89 10                	mov    DWORD PTR [eax],edx
c00100ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100ba:	90                   	nop
c00100bb:	83 c4 0c             	add    esp,0xc
c00100be:	c3                   	ret    
c00100bf:	90                   	nop

c00100c0 <Clock::~Clock()>:
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100cc:	89 10                	mov    DWORD PTR [eax],edx
c00100ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d2:	83 ec 0c             	sub    esp,0xc
c00100d5:	50                   	push   eax
c00100d6:	e8 ef 03 00 00       	call   c00104ca <Device::~Device()>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	90                   	nop
c00100df:	83 c4 0c             	add    esp,0xc
c00100e2:	c3                   	ret    
c00100e3:	90                   	nop

c00100e4 <Clock::~Clock()>:
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	83 ec 0c             	sub    esp,0xc
c00100ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ee:	e8 cd ff ff ff       	call   c00100c0 <Clock::~Clock()>
c00100f3:	83 c4 10             	add    esp,0x10
c00100f6:	83 ec 08             	sub    esp,0x8
c00100f9:	68 58 01 00 00       	push   0x158
c00100fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010102:	e8 e2 ef ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0010107:	83 c4 10             	add    esp,0x10
c001010a:	83 c4 0c             	add    esp,0xc
c001010d:	c3                   	ret    

c001010e <Clock::timeInSecondsLocal()>:
c001010e:	53                   	push   ebx
c001010f:	83 ec 14             	sub    esp,0x14
c0010112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010116:	8b 10                	mov    edx,DWORD PTR [eax]
c0010118:	50                   	push   eax
c0010119:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001011c:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010123:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010129:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001012f:	89 cb                	mov    ebx,ecx
c0010131:	c1 fb 1f             	sar    ebx,0x1f
c0010134:	01 c8                	add    eax,ecx
c0010136:	11 da                	adc    edx,ebx
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	31 c9                	xor    ecx,ecx
c001013d:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010144:	74 05                	je     c001014b <Clock::timeInSecondsLocal()+0x3d>
c0010146:	b9 08 07 00 00       	mov    ecx,0x708
c001014b:	31 db                	xor    ebx,ebx
c001014d:	01 c8                	add    eax,ecx
c001014f:	11 da                	adc    edx,ebx
c0010151:	83 c4 08             	add    esp,0x8
c0010154:	5b                   	pop    ebx
c0010155:	c3                   	ret    

c0010156 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010156:	57                   	push   edi
c0010157:	56                   	push   esi
c0010158:	53                   	push   ebx
c0010159:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001015d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010161:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010165:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010167:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001016a:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c0010171:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c0010177:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001017d:	99                   	cdq    
c001017e:	29 c6                	sub    esi,eax
c0010180:	19 d7                	sbb    edi,edx
c0010182:	89 f0                	mov    eax,esi
c0010184:	89 fa                	mov    edx,edi
c0010186:	31 f6                	xor    esi,esi
c0010188:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001018f:	74 05                	je     c0010196 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010191:	be 08 07 00 00       	mov    esi,0x708
c0010196:	31 ff                	xor    edi,edi
c0010198:	29 f0                	sub    eax,esi
c001019a:	19 fa                	sbb    edx,edi
c001019c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101a8:	89 d8                	mov    eax,ebx
c00101aa:	5b                   	pop    ebx
c00101ab:	5e                   	pop    esi
c00101ac:	5f                   	pop    edi
c00101ad:	ff e0                	jmp    eax

c00101af <datetimeToSeconds(datetime_t)>:
c00101af:	55                   	push   ebp
c00101b0:	57                   	push   edi
c00101b1:	56                   	push   esi
c00101b2:	53                   	push   ebx
c00101b3:	83 ec 14             	sub    esp,0x14
c00101b6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101be:	0f b6 f5             	movzx  esi,ch
c00101c1:	6b f6 3c             	imul   esi,esi,0x3c
c00101c4:	89 cf                	mov    edi,ecx
c00101c6:	89 d3                	mov    ebx,edx
c00101c8:	0f b6 c9             	movzx  ecx,cl
c00101cb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101d1:	0f b6 c6             	movzx  eax,dh
c00101d4:	c1 ef 10             	shr    edi,0x10
c00101d7:	48                   	dec    eax
c00101d8:	c1 eb 10             	shr    ebx,0x10
c00101db:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101df:	89 f8                	mov    eax,edi
c00101e1:	0f b6 f8             	movzx  edi,al
c00101e4:	01 fe                	add    esi,edi
c00101e6:	01 f1                	add    ecx,esi
c00101e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101ec:	c1 f9 1f             	sar    ecx,0x1f
c00101ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101f3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101f8:	0f b6 d2             	movzx  edx,dl
c00101fb:	66 81 eb 6c 07       	sub    bx,0x76c
c0010200:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c0010207:	0f b7 f3             	movzx  esi,bx
c001020a:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001020e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010213:	76 29                	jbe    c001023e <datetimeToSeconds(datetime_t)+0x8f>
c0010215:	f6 c3 03             	test   bl,0x3
c0010218:	75 24                	jne    c001023e <datetimeToSeconds(datetime_t)+0x8f>
c001021a:	31 d2                	xor    edx,edx
c001021c:	bf 64 00 00 00       	mov    edi,0x64
c0010221:	89 d8                	mov    eax,ebx
c0010223:	66 f7 f7             	div    di
c0010226:	66 85 d2             	test   dx,dx
c0010229:	75 12                	jne    c001023d <datetimeToSeconds(datetime_t)+0x8e>
c001022b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010231:	bf 90 01 00 00       	mov    edi,0x190
c0010236:	99                   	cdq    
c0010237:	f7 ff                	idiv   edi
c0010239:	85 d2                	test   edx,edx
c001023b:	75 01                	jne    c001023e <datetimeToSeconds(datetime_t)+0x8f>
c001023d:	41                   	inc    ecx
c001023e:	66 83 fb 46          	cmp    bx,0x46
c0010242:	76 45                	jbe    c0010289 <datetimeToSeconds(datetime_t)+0xda>
c0010244:	bb 46 00 00 00       	mov    ebx,0x46
c0010249:	bf 64 00 00 00       	mov    edi,0x64
c001024e:	bd 90 01 00 00       	mov    ebp,0x190
c0010253:	b8 6d 01 00 00       	mov    eax,0x16d
c0010258:	f6 c3 03             	test   bl,0x3
c001025b:	75 23                	jne    c0010280 <datetimeToSeconds(datetime_t)+0xd1>
c001025d:	89 d8                	mov    eax,ebx
c001025f:	99                   	cdq    
c0010260:	f7 ff                	idiv   edi
c0010262:	85 d2                	test   edx,edx
c0010264:	b8 6e 01 00 00       	mov    eax,0x16e
c0010269:	75 15                	jne    c0010280 <datetimeToSeconds(datetime_t)+0xd1>
c001026b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010271:	99                   	cdq    
c0010272:	f7 fd                	idiv   ebp
c0010274:	31 c0                	xor    eax,eax
c0010276:	85 d2                	test   edx,edx
c0010278:	0f 94 c0             	sete   al
c001027b:	05 6d 01 00 00       	add    eax,0x16d
c0010280:	43                   	inc    ebx
c0010281:	01 c1                	add    ecx,eax
c0010283:	39 f3                	cmp    ebx,esi
c0010285:	7c cc                	jl     c0010253 <datetimeToSeconds(datetime_t)+0xa4>
c0010287:	eb 3b                	jmp    c00102c4 <datetimeToSeconds(datetime_t)+0x115>
c0010289:	74 39                	je     c00102c4 <datetimeToSeconds(datetime_t)+0x115>
c001028b:	b8 45 00 00 00       	mov    eax,0x45
c0010290:	89 c2                	mov    edx,eax
c0010292:	83 e2 03             	and    edx,0x3
c0010295:	39 f0                	cmp    eax,esi
c0010297:	7e 13                	jle    c00102ac <datetimeToSeconds(datetime_t)+0xfd>
c0010299:	85 d2                	test   edx,edx
c001029b:	0f 94 c2             	sete   dl
c001029e:	0f b6 d2             	movzx  edx,dl
c00102a1:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102a7:	48                   	dec    eax
c00102a8:	29 d1                	sub    ecx,edx
c00102aa:	eb e4                	jmp    c0010290 <datetimeToSeconds(datetime_t)+0xe1>
c00102ac:	b8 6d 01 00 00       	mov    eax,0x16d
c00102b1:	85 d2                	test   edx,edx
c00102b3:	75 0d                	jne    c00102c2 <datetimeToSeconds(datetime_t)+0x113>
c00102b5:	31 c0                	xor    eax,eax
c00102b7:	66 85 db             	test   bx,bx
c00102ba:	0f 95 c0             	setne  al
c00102bd:	05 6d 01 00 00       	add    eax,0x16d
c00102c2:	29 c1                	sub    ecx,eax
c00102c4:	b8 80 51 01 00       	mov    eax,0x15180
c00102c9:	f7 e9                	imul   ecx
c00102cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102d3:	83 c4 14             	add    esp,0x14
c00102d6:	5b                   	pop    ebx
c00102d7:	5e                   	pop    esi
c00102d8:	5f                   	pop    edi
c00102d9:	5d                   	pop    ebp
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102dc:	57                   	push   edi
c00102dd:	56                   	push   esi
c00102de:	53                   	push   ebx
c00102df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00102e5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f0:	e8 ba fe ff ff       	call   c00101af <datetimeToSeconds(datetime_t)>
c00102f5:	59                   	pop    ecx
c00102f6:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c00102fd:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010303:	5b                   	pop    ebx
c0010304:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001030a:	89 cb                	mov    ebx,ecx
c001030c:	c1 fb 1f             	sar    ebx,0x1f
c001030f:	29 c8                	sub    eax,ecx
c0010311:	19 da                	sbb    edx,ebx
c0010313:	31 c9                	xor    ecx,ecx
c0010315:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001031c:	74 05                	je     c0010323 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001031e:	b9 08 07 00 00       	mov    ecx,0x708
c0010323:	31 db                	xor    ebx,ebx
c0010325:	29 c8                	sub    eax,ecx
c0010327:	19 da                	sbb    edx,ebx
c0010329:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010331:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010335:	5b                   	pop    ebx
c0010336:	89 f8                	mov    eax,edi
c0010338:	5e                   	pop    esi
c0010339:	5f                   	pop    edi
c001033a:	ff e0                	jmp    eax

c001033c <secondsToDatetime(unsigned long long)>:
c001033c:	55                   	push   ebp
c001033d:	57                   	push   edi
c001033e:	56                   	push   esi
c001033f:	53                   	push   ebx
c0010340:	83 ec 1c             	sub    esp,0x1c
c0010343:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010347:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001034f:	6a 00                	push   0x0
c0010351:	68 80 51 01 00       	push   0x15180
c0010356:	55                   	push   ebp
c0010357:	57                   	push   edi
c0010358:	e8 af f1 00 00       	call   c001f50c <__udivdi3>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010364:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001036a:	6a 00                	push   0x0
c001036c:	68 80 51 01 00       	push   0x15180
c0010371:	55                   	push   ebp
c0010372:	57                   	push   edi
c0010373:	e8 94 f2 00 00       	call   c001f60c <__umoddi3>
c0010378:	bf 10 0e 00 00       	mov    edi,0xe10
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	99                   	cdq    
c0010381:	f7 ff                	idiv   edi
c0010383:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010386:	89 d0                	mov    eax,edx
c0010388:	99                   	cdq    
c0010389:	bf 3c 00 00 00       	mov    edi,0x3c
c001038e:	f7 ff                	idiv   edi
c0010390:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010393:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010396:	85 db                	test   ebx,ebx
c0010398:	79 11                	jns    c00103ab <secondsToDatetime(unsigned long long)+0x6f>
c001039a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001039e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103a4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103a9:	eb 07                	jmp    c00103b2 <secondsToDatetime(unsigned long long)+0x76>
c00103ab:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103b0:	89 d8                	mov    eax,ebx
c00103b2:	99                   	cdq    
c00103b3:	f7 f9                	idiv   ecx
c00103b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103b9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103be:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103c6:	01 c3                	add    ebx,eax
c00103c8:	31 d2                	xor    edx,edx
c00103ca:	89 d8                	mov    eax,ebx
c00103cc:	bf b4 05 00 00       	mov    edi,0x5b4
c00103d1:	f7 f1                	div    ecx
c00103d3:	31 d2                	xor    edx,edx
c00103d5:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103da:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103dd:	89 d8                	mov    eax,ebx
c00103df:	f7 f7                	div    edi
c00103e1:	29 c1                	sub    ecx,eax
c00103e3:	31 d2                	xor    edx,edx
c00103e5:	89 d8                	mov    eax,ebx
c00103e7:	f7 f5                	div    ebp
c00103e9:	29 c1                	sub    ecx,eax
c00103eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103f0:	89 c8                	mov    eax,ecx
c00103f2:	31 d2                	xor    edx,edx
c00103f4:	f7 f5                	div    ebp
c00103f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103fa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00103ff:	89 c8                	mov    eax,ecx
c0010401:	31 d2                	xor    edx,edx
c0010403:	f7 f5                	div    ebp
c0010405:	01 c3                	add    ebx,eax
c0010407:	31 d2                	xor    edx,edx
c0010409:	89 c8                	mov    eax,ecx
c001040b:	f7 f7                	div    edi
c001040d:	29 c3                	sub    ebx,eax
c001040f:	bf 99 00 00 00       	mov    edi,0x99
c0010414:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001041c:	29 c3                	sub    ebx,eax
c001041e:	31 d2                	xor    edx,edx
c0010420:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010423:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010426:	83 c1 02             	add    ecx,0x2
c0010429:	bb 05 00 00 00       	mov    ebx,0x5
c001042e:	89 c8                	mov    eax,ecx
c0010430:	f7 f7                	div    edi
c0010432:	89 c7                	mov    edi,eax
c0010434:	31 d2                	xor    edx,edx
c0010436:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001043c:	83 c0 02             	add    eax,0x2
c001043f:	f7 f3                	div    ebx
c0010441:	89 eb                	mov    ebx,ebp
c0010443:	29 c3                	sub    ebx,eax
c0010445:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001044b:	19 c0                	sbb    eax,eax
c001044d:	31 d2                	xor    edx,edx
c001044f:	83 e0 0c             	and    eax,0xc
c0010452:	88 1e                	mov    BYTE PTR [esi],bl
c0010454:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010458:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010460:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010464:	83 f9 01             	cmp    ecx,0x1
c0010467:	0f 96 c2             	setbe  dl
c001046a:	01 d0                	add    eax,edx
c001046c:	41                   	inc    ecx
c001046d:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010471:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010474:	83 c4 1c             	add    esp,0x1c
c0010477:	89 f0                	mov    eax,esi
c0010479:	5b                   	pop    ebx
c001047a:	5e                   	pop    esi
c001047b:	5f                   	pop    edi
c001047c:	5d                   	pop    ebp
c001047d:	c2 04 00             	ret    0x4

c0010480 <Clock::timeInDatetimeLocal()>:
c0010480:	53                   	push   ebx
c0010481:	83 ec 14             	sub    esp,0x14
c0010484:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010488:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001048c:	e8 7d fc ff ff       	call   c001010e <Clock::timeInSecondsLocal()>
c0010491:	83 c4 0c             	add    esp,0xc
c0010494:	52                   	push   edx
c0010495:	50                   	push   eax
c0010496:	53                   	push   ebx
c0010497:	e8 a0 fe ff ff       	call   c001033c <secondsToDatetime(unsigned long long)>
c001049c:	83 c4 14             	add    esp,0x14
c001049f:	89 d8                	mov    eax,ebx
c00104a1:	5b                   	pop    ebx
c00104a2:	c2 04 00             	ret    0x4
c00104a5:	90                   	nop

c00104a6 <Device::hibernate()>:
c00104a6:	c3                   	ret    
c00104a7:	90                   	nop

c00104a8 <Device::wake()>:
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <Device::detect()>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <Device::disableLegacy()>:
c00104ac:	c3                   	ret    
c00104ad:	90                   	nop

c00104ae <Device::powerSaving(PowerSavingLevel)>:
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <DriverlessDevice::close(int, int, void*)>:
c00104b0:	31 c0                	xor    eax,eax
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <DriverlessDevice::detect()>:
c00104b4:	c3                   	ret    
c00104b5:	90                   	nop

c00104b6 <DriverlessDevice::open(int, int, void*)>:
c00104b6:	83 ec 18             	sub    esp,0x18
c00104b9:	68 50 1c 02 c0       	push   0xc0021c50
c00104be:	e8 7b 55 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c00104c3:	83 c8 ff             	or     eax,0xffffffff
c00104c6:	83 c4 1c             	add    esp,0x1c
c00104c9:	c3                   	ret    

c00104ca <Device::~Device()>:
c00104ca:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d3:	89 10                	mov    DWORD PTR [eax],edx
c00104d5:	90                   	nop
c00104d6:	c3                   	ret    
c00104d7:	90                   	nop

c00104d8 <Device::~Device()>:
c00104d8:	83 ec 0c             	sub    esp,0xc
c00104db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104df:	e8 e6 ff ff ff       	call   c00104ca <Device::~Device()>
c00104e4:	83 c4 04             	add    esp,0x4
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	68 58 01 00 00       	push   0x158
c00104ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f3:	e8 f1 eb ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00104f8:	83 c4 10             	add    esp,0x10
c00104fb:	83 c4 0c             	add    esp,0xc
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <Device::findAndLoadDriver()>:
c0010500:	c3                   	ret    
c0010501:	90                   	nop

c0010502 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010502:	57                   	push   edi
c0010503:	b9 09 00 00 00       	mov    ecx,0x9
c0010508:	56                   	push   esi
c0010509:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001050d:	81 c7 18 01 00 00    	add    edi,0x118
c0010513:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010517:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c001051e:	fc                   	cld    
c001051f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010521:	5e                   	pop    esi
c0010522:	5f                   	pop    edi
c0010523:	c3                   	ret    

c0010524 <Device::preOpenACPI(void*, char*, char*)>:
c0010524:	56                   	push   esi
c0010525:	53                   	push   ebx
c0010526:	83 ec 08             	sub    esp,0x8
c0010529:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001052d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010531:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010535:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001053b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010545:	6a 1e                	push   0x1e
c0010547:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001054d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010551:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010557:	50                   	push   eax
c0010558:	e8 2c 01 ff ff       	call   c0000689 <memcpy>
c001055d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010561:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010565:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001056d:	83 c4 14             	add    esp,0x14
c0010570:	5b                   	pop    ebx
c0010571:	5e                   	pop    esi
c0010572:	e9 12 01 ff ff       	jmp    c0000689 <memcpy>
c0010577:	90                   	nop

c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010578:	55                   	push   ebp
c0010579:	57                   	push   edi
c001057a:	56                   	push   esi
c001057b:	53                   	push   ebx
c001057c:	83 ec 0c             	sub    esp,0xc
c001057f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010583:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010587:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001058b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001058f:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010594:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001059b:	75 0b                	jne    c00105a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001059d:	8b 00                	mov    eax,DWORD PTR [eax]
c001059f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105a3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105a6:	eb 24                	jmp    c00105cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105a8:	e8 25 43 00 00       	call   c00148d2 <thisCPU()>
c00105ad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105b9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105bd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105c1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105c9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105cc:	83 c4 0c             	add    esp,0xc
c00105cf:	5b                   	pop    ebx
c00105d0:	5e                   	pop    esi
c00105d1:	5f                   	pop    edi
c00105d2:	5d                   	pop    ebp
c00105d3:	ff e0                	jmp    eax
c00105d5:	90                   	nop

c00105d6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105d6:	57                   	push   edi
c00105d7:	56                   	push   esi
c00105d8:	53                   	push   ebx
c00105d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105e5:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105ea:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105f1:	75 0b                	jne    c00105fe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00105f5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105f9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00105fc:	eb 20                	jmp    c001061e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00105fe:	e8 cf 42 00 00       	call   c00148d2 <thisCPU()>
c0010603:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010609:	8b 10                	mov    edx,DWORD PTR [eax]
c001060b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001060f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010613:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001061b:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001061e:	5b                   	pop    ebx
c001061f:	5e                   	pop    esi
c0010620:	5f                   	pop    edi
c0010621:	ff e0                	jmp    eax
c0010623:	90                   	nop

c0010624 <Device::addChild(Device*)>:
c0010624:	53                   	push   ebx
c0010625:	83 ec 08             	sub    esp,0x8
c0010628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001062c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010630:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010636:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001063c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001063e:	85 d2                	test   edx,edx
c0010640:	74 04                	je     c0010646 <Device::addChild(Device*)+0x22>
c0010642:	89 d3                	mov    ebx,edx
c0010644:	eb f6                	jmp    c001063c <Device::addChild(Device*)+0x18>
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001064c:	6a 08                	push   0x8
c001064e:	e8 87 ea ff ff       	call   c000f0da <operator new(unsigned long)>
c0010653:	89 03                	mov    DWORD PTR [ebx],eax
c0010655:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001065b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010662:	83 c4 18             	add    esp,0x18
c0010665:	5b                   	pop    ebx
c0010666:	c3                   	ret    
c0010667:	90                   	nop

c0010668 <Device::removeAllChildren()>:
c0010668:	56                   	push   esi
c0010669:	53                   	push   ebx
c001066a:	52                   	push   edx
c001066b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001066f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010675:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010678:	74 17                	je     c0010691 <Device::removeAllChildren()+0x29>
c001067a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001067d:	85 c0                	test   eax,eax
c001067f:	74 0c                	je     c001068d <Device::removeAllChildren()+0x25>
c0010681:	83 ec 0c             	sub    esp,0xc
c0010684:	8b 10                	mov    edx,DWORD PTR [eax]
c0010686:	50                   	push   eax
c0010687:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001068f:	eb e4                	jmp    c0010675 <Device::removeAllChildren()+0xd>
c0010691:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010697:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001069d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106aa:	58                   	pop    eax
c00106ab:	5b                   	pop    ebx
c00106ac:	5e                   	pop    esi
c00106ad:	c3                   	ret    

c00106ae <Device::hibernateAll()>:
c00106ae:	53                   	push   ebx
c00106af:	83 ec 14             	sub    esp,0x14
c00106b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106b8:	53                   	push   ebx
c00106b9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106c8:	74 0f                	je     c00106d9 <Device::hibernateAll()+0x2b>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d0:	e8 d9 ff ff ff       	call   c00106ae <Device::hibernateAll()>
c00106d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106d7:	eb e9                	jmp    c00106c2 <Device::hibernateAll()+0x14>
c00106d9:	83 c4 08             	add    esp,0x8
c00106dc:	5b                   	pop    ebx
c00106dd:	c3                   	ret    

c00106de <Device::wakeAll()>:
c00106de:	53                   	push   ebx
c00106df:	83 ec 14             	sub    esp,0x14
c00106e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106e8:	53                   	push   ebx
c00106e9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f2:	83 c4 10             	add    esp,0x10
c00106f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106f8:	74 0f                	je     c0010709 <Device::wakeAll()+0x2b>
c00106fa:	83 ec 0c             	sub    esp,0xc
c00106fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010700:	e8 d9 ff ff ff       	call   c00106de <Device::wakeAll()>
c0010705:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010707:	eb e9                	jmp    c00106f2 <Device::wakeAll()+0x14>
c0010709:	83 c4 08             	add    esp,0x8
c001070c:	5b                   	pop    ebx
c001070d:	c3                   	ret    

c001070e <Device::detectAll()>:
c001070e:	53                   	push   ebx
c001070f:	83 ec 14             	sub    esp,0x14
c0010712:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010716:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010718:	53                   	push   ebx
c0010719:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001071c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010728:	74 0f                	je     c0010739 <Device::detectAll()+0x2b>
c001072a:	83 ec 0c             	sub    esp,0xc
c001072d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010730:	e8 d9 ff ff ff       	call   c001070e <Device::detectAll()>
c0010735:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010737:	eb e9                	jmp    c0010722 <Device::detectAll()+0x14>
c0010739:	83 c4 08             	add    esp,0x8
c001073c:	5b                   	pop    ebx
c001073d:	c3                   	ret    

c001073e <Device::disableLegacyAll()>:
c001073e:	53                   	push   ebx
c001073f:	83 ec 14             	sub    esp,0x14
c0010742:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010746:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010748:	53                   	push   ebx
c0010749:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001074c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010752:	83 c4 10             	add    esp,0x10
c0010755:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010758:	74 0f                	je     c0010769 <Device::disableLegacyAll()+0x2b>
c001075a:	83 ec 0c             	sub    esp,0xc
c001075d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010760:	e8 d9 ff ff ff       	call   c001073e <Device::disableLegacyAll()>
c0010765:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010767:	eb e9                	jmp    c0010752 <Device::disableLegacyAll()+0x14>
c0010769:	83 c4 08             	add    esp,0x8
c001076c:	5b                   	pop    ebx
c001076d:	c3                   	ret    

c001076e <Device::loadDriversForAll()>:
c001076e:	53                   	push   ebx
c001076f:	83 ec 08             	sub    esp,0x8
c0010772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010776:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001077c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001077e:	85 db                	test   ebx,ebx
c0010780:	74 12                	je     c0010794 <Device::loadDriversForAll()+0x26>
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010788:	e8 e1 ff ff ff       	call   c001076e <Device::loadDriversForAll()>
c001078d:	83 c4 10             	add    esp,0x10
c0010790:	89 d8                	mov    eax,ebx
c0010792:	eb e8                	jmp    c001077c <Device::loadDriversForAll()+0xe>
c0010794:	83 c4 08             	add    esp,0x8
c0010797:	5b                   	pop    ebx
c0010798:	c3                   	ret    
c0010799:	90                   	nop

c001079a <Device::closeAll()>:
c001079a:	53                   	push   ebx
c001079b:	83 ec 08             	sub    esp,0x8
c001079e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a4:	6a 00                	push   0x0
c00107a6:	6a 00                	push   0x0
c00107a8:	6a 00                	push   0x0
c00107aa:	53                   	push   ebx
c00107ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107ba:	74 0f                	je     c00107cb <Device::closeAll()+0x31>
c00107bc:	83 ec 0c             	sub    esp,0xc
c00107bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107c2:	e8 d3 ff ff ff       	call   c001079a <Device::closeAll()>
c00107c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107c9:	eb e9                	jmp    c00107b4 <Device::closeAll()+0x1a>
c00107cb:	83 c4 08             	add    esp,0x8
c00107ce:	5b                   	pop    ebx
c00107cf:	c3                   	ret    

c00107d0 <Device::powerSavingAll(PowerSavingLevel)>:
c00107d0:	56                   	push   esi
c00107d1:	53                   	push   ebx
c00107d2:	83 ec 0c             	sub    esp,0xc
c00107d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107d9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107df:	56                   	push   esi
c00107e0:	53                   	push   ebx
c00107e1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107ea:	83 c4 10             	add    esp,0x10
c00107ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107f0:	74 0f                	je     c0010801 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107f2:	52                   	push   edx
c00107f3:	52                   	push   edx
c00107f4:	56                   	push   esi
c00107f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107f8:	e8 d3 ff ff ff       	call   c00107d0 <Device::powerSavingAll(PowerSavingLevel)>
c00107fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107ff:	eb e9                	jmp    c00107ea <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010801:	58                   	pop    eax
c0010802:	5b                   	pop    ebx
c0010803:	5e                   	pop    esi
c0010804:	c3                   	ret    
c0010805:	90                   	nop

c0010806 <Device::setName(char const*)>:
c0010806:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001080e:	e9 4b ff fe ff       	jmp    c000075e <strcpy>
c0010813:	90                   	nop

c0010814 <Device::Device(char const*)>:
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c001081c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010820:	89 10                	mov    DWORD PTR [eax],edx
c0010822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010826:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010834:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010842:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001085a:	83 ec 08             	sub    esp,0x8
c001085d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010865:	e8 9c ff ff ff       	call   c0010806 <Device::setName(char const*)>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	6a 08                	push   0x8
c0010872:	e8 63 e8 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010880:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001088b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010895:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001089b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010900:	90                   	nop
c0010901:	83 c4 0c             	add    esp,0xc
c0010904:	c3                   	ret    
c0010905:	90                   	nop

c0010906 <Device::getName()>:
c0010906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090a:	05 d0 00 00 00       	add    eax,0xd0
c001090f:	c3                   	ret    

c0010910 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010910:	83 ec 0c             	sub    esp,0xc
c0010913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010917:	83 ec 08             	sub    esp,0x8
c001091a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091e:	50                   	push   eax
c001091f:	e8 f0 fe ff ff       	call   c0010814 <Device::Device(char const*)>
c0010924:	83 c4 10             	add    esp,0x10
c0010927:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	89 10                	mov    DWORD PTR [eax],edx
c0010932:	90                   	nop
c0010933:	83 c4 0c             	add    esp,0xc
c0010936:	c3                   	ret    
c0010937:	90                   	nop

c0010938 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010938:	57                   	push   edi
c0010939:	56                   	push   esi
c001093a:	53                   	push   ebx
c001093b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001093f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010943:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010947:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001094d:	75 0c                	jne    c001095b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001094f:	52                   	push   edx
c0010950:	52                   	push   edx
c0010951:	53                   	push   ebx
c0010952:	56                   	push   esi
c0010953:	e8 cc f0 00 00       	call   c001fa24 <LinkedList<Device>::addElement(Device*)>
c0010958:	83 c4 10             	add    esp,0x10
c001095b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010961:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010964:	74 12                	je     c0010978 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010966:	50                   	push   eax
c0010967:	57                   	push   edi
c0010968:	56                   	push   esi
c0010969:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001096c:	e8 c7 ff ff ff       	call   c0010938 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010971:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010973:	83 c4 10             	add    esp,0x10
c0010976:	eb e9                	jmp    c0010961 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010978:	5b                   	pop    ebx
c0010979:	5e                   	pop    esi
c001097a:	5f                   	pop    edi
c001097b:	c3                   	ret    

c001097c <getDevicesOfType(DeviceType)>:
c001097c:	53                   	push   ebx
c001097d:	83 ec 14             	sub    esp,0x14
c0010980:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010984:	53                   	push   ebx
c0010985:	e8 76 f1 00 00       	call   c001fb00 <LinkedList<Device>::LinkedList()>
c001098a:	83 c4 0c             	add    esp,0xc
c001098d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010991:	53                   	push   ebx
c0010992:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0010998:	e8 9b ff ff ff       	call   c0010938 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001099d:	83 c4 18             	add    esp,0x18
c00109a0:	89 d8                	mov    eax,ebx
c00109a2:	5b                   	pop    ebx
c00109a3:	c2 04 00             	ret    0x4

c00109a6 <HardDiskController::HardDiskController(char const*)>:
c00109a6:	83 ec 0c             	sub    esp,0xc
c00109a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ad:	83 ec 08             	sub    esp,0x8
c00109b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b4:	50                   	push   eax
c00109b5:	e8 5a fe ff ff       	call   c0010814 <Device::Device(char const*)>
c00109ba:	83 c4 10             	add    esp,0x10
c00109bd:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	89 10                	mov    DWORD PTR [eax],edx
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <HardDiskController::~HardDiskController()>:
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e8:	89 10                	mov    DWORD PTR [eax],edx
c00109ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ee:	83 ec 0c             	sub    esp,0xc
c00109f1:	50                   	push   eax
c00109f2:	e8 d3 fa ff ff       	call   c00104ca <Device::~Device()>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	90                   	nop
c00109fb:	83 c4 0c             	add    esp,0xc
c00109fe:	c3                   	ret    
c00109ff:	90                   	nop

c0010a00 <HardDiskController::~HardDiskController()>:
c0010a00:	83 ec 0c             	sub    esp,0xc
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0a:	e8 cd ff ff ff       	call   c00109dc <HardDiskController::~HardDiskController()>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	83 ec 08             	sub    esp,0x8
c0010a15:	68 58 01 00 00       	push   0x158
c0010a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1e:	e8 c6 e6 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	83 c4 0c             	add    esp,0xc
c0010a29:	c3                   	ret    

c0010a2a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a31:	83 ec 08             	sub    esp,0x8
c0010a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a38:	50                   	push   eax
c0010a39:	e8 d6 fd ff ff       	call   c0010814 <Device::Device(char const*)>
c0010a3e:	83 c4 10             	add    esp,0x10
c0010a41:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4a:	89 10                	mov    DWORD PTR [eax],edx
c0010a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a50:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a66:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a78:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a8c:	90                   	nop
c0010a8d:	83 c4 0c             	add    esp,0xc
c0010a90:	c3                   	ret    
c0010a91:	90                   	nop

c0010a92 <PhysicalDisk::startCache()>:
c0010a92:	56                   	push   esi
c0010a93:	53                   	push   ebx
c0010a94:	83 ec 10             	sub    esp,0x10
c0010a97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a9b:	6a 30                	push   0x30
c0010a9d:	e8 38 e6 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010aa2:	89 c6                	mov    esi,eax
c0010aa4:	58                   	pop    eax
c0010aa5:	5a                   	pop    edx
c0010aa6:	53                   	push   ebx
c0010aa7:	56                   	push   esi
c0010aa8:	e8 3b 25 00 00       	call   c0012fe8 <VCache::VCache(PhysicalDisk*)>
c0010aad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ab3:	83 c4 14             	add    esp,0x14
c0010ab6:	5b                   	pop    ebx
c0010ab7:	5e                   	pop    esi
c0010ab8:	c3                   	ret    
c0010ab9:	90                   	nop

c0010aba <PhysicalDisk::~PhysicalDisk()>:
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac6:	89 10                	mov    DWORD PTR [eax],edx
c0010ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	50                   	push   eax
c0010ad0:	e8 f5 f9 ff ff       	call   c00104ca <Device::~Device()>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	90                   	nop
c0010ad9:	83 c4 0c             	add    esp,0xc
c0010adc:	c3                   	ret    
c0010add:	90                   	nop

c0010ade <PhysicalDisk::~PhysicalDisk()>:
c0010ade:	83 ec 0c             	sub    esp,0xc
c0010ae1:	83 ec 0c             	sub    esp,0xc
c0010ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae8:	e8 cd ff ff ff       	call   c0010aba <PhysicalDisk::~PhysicalDisk()>
c0010aed:	83 c4 10             	add    esp,0x10
c0010af0:	83 ec 08             	sub    esp,0x8
c0010af3:	68 6c 01 00 00       	push   0x16c
c0010af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010afc:	e8 e8 e5 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0010b01:	83 c4 10             	add    esp,0x10
c0010b04:	83 c4 0c             	add    esp,0xc
c0010b07:	c3                   	ret    

c0010b08 <FPU::FPU(char const*)>:
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0f:	83 ec 08             	sub    esp,0x8
c0010b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b16:	50                   	push   eax
c0010b17:	e8 f8 fc ff ff       	call   c0010814 <Device::Device(char const*)>
c0010b1c:	83 c4 10             	add    esp,0x10
c0010b1f:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b28:	89 10                	mov    DWORD PTR [eax],edx
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b38:	90                   	nop
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	c3                   	ret    
c0010b3d:	90                   	nop

c0010b3e <FPU::~FPU()>:
c0010b3e:	83 ec 0c             	sub    esp,0xc
c0010b41:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	89 10                	mov    DWORD PTR [eax],edx
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	50                   	push   eax
c0010b54:	e8 71 f9 ff ff       	call   c00104ca <Device::~Device()>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	90                   	nop
c0010b5d:	83 c4 0c             	add    esp,0xc
c0010b60:	c3                   	ret    
c0010b61:	90                   	nop

c0010b62 <FPU::~FPU()>:
c0010b62:	83 ec 0c             	sub    esp,0xc
c0010b65:	83 ec 0c             	sub    esp,0xc
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	e8 cd ff ff ff       	call   c0010b3e <FPU::~FPU()>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	83 ec 08             	sub    esp,0x8
c0010b77:	68 58 01 00 00       	push   0x158
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	e8 64 e5 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <setupFPU()>:
c0010b8c:	53                   	push   ebx
c0010b8d:	83 ec 08             	sub    esp,0x8
c0010b90:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010b95:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010b9c:	74 19                	je     c0010bb7 <setupFPU()+0x2b>
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	68 58 01 00 00       	push   0x158
c0010ba6:	e8 2f e5 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010bab:	89 c3                	mov    ebx,eax
c0010bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb0:	e8 97 d5 00 00       	call   c001e14c <AVX::AVX()>
c0010bb5:	eb 5b                	jmp    c0010c12 <setupFPU()+0x86>
c0010bb7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bbd:	84 c0                	test   al,al
c0010bbf:	79 19                	jns    c0010bda <setupFPU()+0x4e>
c0010bc1:	83 ec 0c             	sub    esp,0xc
c0010bc4:	68 58 01 00 00       	push   0x158
c0010bc9:	e8 0c e5 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010bce:	89 c3                	mov    ebx,eax
c0010bd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bd3:	e8 9a d6 00 00       	call   c001e272 <SSE::SSE()>
c0010bd8:	eb 38                	jmp    c0010c12 <setupFPU()+0x86>
c0010bda:	a8 20                	test   al,0x20
c0010bdc:	74 19                	je     c0010bf7 <setupFPU()+0x6b>
c0010bde:	83 ec 0c             	sub    esp,0xc
c0010be1:	68 58 01 00 00       	push   0x158
c0010be6:	e8 ef e4 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010beb:	89 c3                	mov    ebx,eax
c0010bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf0:	e8 e7 d5 00 00       	call   c001e1dc <MMX::MMX()>
c0010bf5:	eb 1b                	jmp    c0010c12 <setupFPU()+0x86>
c0010bf7:	a8 10                	test   al,0x10
c0010bf9:	74 1c                	je     c0010c17 <setupFPU()+0x8b>
c0010bfb:	83 ec 0c             	sub    esp,0xc
c0010bfe:	68 58 01 00 00       	push   0x158
c0010c03:	e8 d2 e4 ff ff       	call   c000f0da <operator new(unsigned long)>
c0010c08:	89 c3                	mov    ebx,eax
c0010c0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c0d:	e8 ee d6 00 00       	call   c001e300 <x87::x87()>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	eb 2c                	jmp    c0010c43 <setupFPU()+0xb7>
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	31 db                	xor    ebx,ebx
c0010c1c:	68 28 1d 02 c0       	push   0xc0021d28
c0010c21:	e8 e9 e5 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0010c26:	e8 a7 3c 00 00       	call   c00148d2 <thisCPU()>
c0010c2b:	e8 a2 3c 00 00       	call   c00148d2 <thisCPU()>
c0010c30:	e8 23 ef 00 00       	call   c001fb58 <CPU::readCR0()>
c0010c35:	83 c8 04             	or     eax,0x4
c0010c38:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c3b:	e8 2a ef 00 00       	call   c001fb6a <CPU::writeCR0(unsigned long)>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	89 d8                	mov    eax,ebx
c0010c48:	5b                   	pop    ebx
c0010c49:	c3                   	ret    

c0010c4a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c52:	c1 e0 04             	shl    eax,0x4
c0010c55:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c59:	8d 50 10             	lea    edx,[eax+0x10]
c0010c5c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c62:	74 08                	je     c0010c6c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c64:	83 c0 04             	add    eax,0x4
c0010c67:	39 d0                	cmp    eax,edx
c0010c69:	75 f1                	jne    c0010c5c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c6b:	c3                   	ret    
c0010c6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c80:	eb e2                	jmp    c0010c64 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c82 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c82:	57                   	push   edi
c0010c83:	31 c0                	xor    eax,eax
c0010c85:	56                   	push   esi
c0010c86:	53                   	push   ebx
c0010c87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c93:	89 da                	mov    edx,ebx
c0010c95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c99:	c1 e2 04             	shl    edx,0x4
c0010c9c:	01 ca                	add    edx,ecx
c0010c9e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010ca6:	74 16                	je     c0010cbe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010ca8:	40                   	inc    eax
c0010ca9:	83 f8 04             	cmp    eax,0x4
c0010cac:	75 f0                	jne    c0010c9e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cae:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cb6:	5b                   	pop    ebx
c0010cb7:	5e                   	pop    esi
c0010cb8:	5f                   	pop    edi
c0010cb9:	e9 80 4d 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c0010cbe:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cc1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cc4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cca:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cd0:	5b                   	pop    ebx
c0010cd1:	5e                   	pop    esi
c0010cd2:	5f                   	pop    edi
c0010cd3:	c3                   	ret    

c0010cd4 <doubleFault(regs*, void*)>:
c0010cd4:	55                   	push   ebp
c0010cd5:	89 e5                	mov    ebp,esp
c0010cd7:	83 ec 08             	sub    esp,0x8
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	68 a7 1d 02 c0       	push   0xc0021da7
c0010ce2:	e8 57 4d 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0010ce7:	83 c4 10             	add    esp,0x10
c0010cea:	90                   	nop
c0010ceb:	c9                   	leave  
c0010cec:	c3                   	ret    
c0010ced:	90                   	nop

c0010cee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cee:	56                   	push   esi
c0010cef:	53                   	push   ebx
c0010cf0:	50                   	push   eax
c0010cf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cf5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cf9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010cfe:	75 35                	jne    c0010d35 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d00:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d03:	31 d2                	xor    edx,edx
c0010d05:	89 c1                	mov    ecx,eax
c0010d07:	c1 e1 04             	shl    ecx,0x4
c0010d0a:	01 f1                	add    ecx,esi
c0010d0c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d14:	74 3e                	je     c0010d54 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d16:	42                   	inc    edx
c0010d17:	83 fa 04             	cmp    edx,0x4
c0010d1a:	75 f0                	jne    c0010d0c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d24:	e8 15 4d 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d31:	5a                   	pop    edx
c0010d32:	5b                   	pop    ebx
c0010d33:	5e                   	pop    esi
c0010d34:	c3                   	ret    
c0010d35:	83 ec 0c             	sub    esp,0xc
c0010d38:	56                   	push   esi
c0010d39:	e8 c8 fb ff ff       	call   c0010906 <Device::getName()>
c0010d3e:	83 c4 10             	add    esp,0x10
c0010d41:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d44:	75 ba                	jne    c0010d00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d46:	83 fb 0f             	cmp    ebx,0xf
c0010d49:	7f 29                	jg     c0010d74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d4b:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d52:	eb ac                	jmp    c0010d00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d54:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d5b:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d5e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d68:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d6e:	89 d8                	mov    eax,ebx
c0010d70:	5a                   	pop    edx
c0010d71:	5b                   	pop    ebx
c0010d72:	5e                   	pop    esi
c0010d73:	c3                   	ret    
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d7c:	e8 bd 4c 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0010d81:	83 c4 10             	add    esp,0x10
c0010d84:	e9 77 ff ff ff       	jmp    c0010d00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d89:	90                   	nop

c0010d8a <InterruptController::clearAllHandlers(int, bool)>:
c0010d8a:	56                   	push   esi
c0010d8b:	53                   	push   ebx
c0010d8c:	52                   	push   edx
c0010d8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d95:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d9a:	75 61                	jne    c0010dfd <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010d9c:	8d 46 20             	lea    eax,[esi+0x20]
c0010d9f:	c1 e6 04             	shl    esi,0x4
c0010da2:	c1 e0 04             	shl    eax,0x4
c0010da5:	01 de                	add    esi,ebx
c0010da7:	01 d8                	add    eax,ebx
c0010da9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010db3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dbd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dc7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dd1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ddb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010de5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010def:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010df9:	58                   	pop    eax
c0010dfa:	5b                   	pop    ebx
c0010dfb:	5e                   	pop    esi
c0010dfc:	c3                   	ret    
c0010dfd:	83 ec 0c             	sub    esp,0xc
c0010e00:	53                   	push   ebx
c0010e01:	e8 00 fb ff ff       	call   c0010906 <Device::getName()>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e0c:	75 8e                	jne    c0010d9c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e0e:	83 fe 0f             	cmp    esi,0xf
c0010e11:	7f 09                	jg     c0010e1c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e13:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e1a:	eb 80                	jmp    c0010d9c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e1c:	83 ec 0c             	sub    esp,0xc
c0010e1f:	68 28 1e 02 c0       	push   0xc0021e28
c0010e24:	e8 15 4c 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	e9 6b ff ff ff       	jmp    c0010d9c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e31:	90                   	nop

c0010e32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e32:	56                   	push   esi
c0010e33:	53                   	push   ebx
c0010e34:	52                   	push   edx
c0010e35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e3d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e42:	75 3a                	jne    c0010e7e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e48:	8d 50 20             	lea    edx,[eax+0x20]
c0010e4b:	c1 e2 04             	shl    edx,0x4
c0010e4e:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e51:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e55:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e5b:	74 0b                	je     c0010e68 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e5d:	83 c0 04             	add    eax,0x4
c0010e60:	39 d0                	cmp    eax,edx
c0010e62:	75 f1                	jne    c0010e55 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e64:	58                   	pop    eax
c0010e65:	5b                   	pop    ebx
c0010e66:	5e                   	pop    esi
c0010e67:	c3                   	ret    
c0010e68:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e72:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e7c:	eb df                	jmp    c0010e5d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e7e:	83 ec 0c             	sub    esp,0xc
c0010e81:	56                   	push   esi
c0010e82:	e8 7f fa ff ff       	call   c0010906 <Device::getName()>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e8d:	75 b5                	jne    c0010e44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e8f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e94:	7f 11                	jg     c0010ea7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e9a:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010ea1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ea5:	eb 9d                	jmp    c0010e44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ea7:	83 ec 0c             	sub    esp,0xc
c0010eaa:	68 28 1e 02 c0       	push   0xc0021e28
c0010eaf:	e8 8a 4b 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0010eb4:	83 c4 10             	add    esp,0x10
c0010eb7:	eb 8b                	jmp    c0010e44 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010eb9 <nmiHandler(regs*, void*)>:
c0010eb9:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ec2:	e9 5b a8 ff ff       	jmp    c000b722 <Computer::handleNMI()>

c0010ec7 <int_handler>:
c0010ec7:	55                   	push   ebp
c0010ec8:	57                   	push   edi
c0010ec9:	56                   	push   esi
c0010eca:	53                   	push   ebx
c0010ecb:	83 ec 0c             	sub    esp,0xc
c0010ece:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ed2:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ed9:	74 0b                	je     c0010ee6 <int_handler+0x1f>
c0010edb:	fa                   	cli    
c0010edc:	f4                   	hlt    
c0010edd:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ee4:	75 f5                	jne    c0010edb <int_handler+0x14>
c0010ee6:	e8 e7 39 00 00       	call   c00148d2 <thisCPU()>
c0010eeb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010eee:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010ef4:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ef7:	83 f8 17             	cmp    eax,0x17
c0010efa:	77 13                	ja     c0010f0f <int_handler+0x48>
c0010efc:	83 ec 08             	sub    esp,0x8
c0010eff:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f01:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f04:	0f b6 c0             	movzx  eax,al
c0010f07:	50                   	push   eax
c0010f08:	57                   	push   edi
c0010f09:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	83 c3 15             	add    ebx,0x15
c0010f12:	c1 e3 04             	shl    ebx,0x4
c0010f15:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f19:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f20:	31 db                	xor    ebx,ebx
c0010f22:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f26:	85 c0                	test   eax,eax
c0010f28:	74 13                	je     c0010f3d <int_handler+0x76>
c0010f2a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f2d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f31:	74 1c                	je     c0010f4f <int_handler+0x88>
c0010f33:	83 ec 08             	sub    esp,0x8
c0010f36:	52                   	push   edx
c0010f37:	56                   	push   esi
c0010f38:	ff d0                	call   eax
c0010f3a:	83 c4 10             	add    esp,0x10
c0010f3d:	43                   	inc    ebx
c0010f3e:	83 fb 04             	cmp    ebx,0x4
c0010f41:	75 df                	jne    c0010f22 <int_handler+0x5b>
c0010f43:	83 c4 0c             	add    esp,0xc
c0010f46:	31 c0                	xor    eax,eax
c0010f48:	5b                   	pop    ebx
c0010f49:	31 d2                	xor    edx,edx
c0010f4b:	5e                   	pop    esi
c0010f4c:	5f                   	pop    edi
c0010f4d:	5d                   	pop    ebp
c0010f4e:	c3                   	ret    
c0010f4f:	83 ec 08             	sub    esp,0x8
c0010f52:	52                   	push   edx
c0010f53:	56                   	push   esi
c0010f54:	ff d0                	call   eax
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	83 c4 0c             	add    esp,0xc
c0010f5c:	5b                   	pop    ebx
c0010f5d:	5e                   	pop    esi
c0010f5e:	5f                   	pop    edi
c0010f5f:	5d                   	pop    ebp
c0010f60:	c3                   	ret    
c0010f61:	90                   	nop

c0010f62 <InterruptController::InterruptController(char const*)>:
c0010f62:	83 ec 1c             	sub    esp,0x1c
c0010f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f69:	83 ec 08             	sub    esp,0x8
c0010f6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f70:	50                   	push   eax
c0010f71:	e8 9e f8 ff ff       	call   c0010814 <Device::Device(char const*)>
c0010f76:	83 c4 10             	add    esp,0x10
c0010f79:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f82:	89 10                	mov    DWORD PTR [eax],edx
c0010f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f88:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f9a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fa2:	7f 5e                	jg     c0011002 <InterruptController::InterruptController(char const*)+0xa0>
c0010fa4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fac:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fb1:	7f 49                	jg     c0010ffc <InterruptController::InterruptController(char const*)+0x9a>
c0010fb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fbb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fc6:	01 ca                	add    edx,ecx
c0010fc8:	83 c2 54             	add    edx,0x54
c0010fcb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fdb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe6:	01 ca                	add    edx,ecx
c0010fe8:	81 c2 54 04 00 00    	add    edx,0x454
c0010fee:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ff6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ffa:	eb b0                	jmp    c0010fac <InterruptController::InterruptController(char const*)+0x4a>
c0010ffc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011000:	eb 98                	jmp    c0010f9a <InterruptController::InterruptController(char const*)+0x38>
c0011002:	90                   	nop
c0011003:	83 c4 1c             	add    esp,0x1c
c0011006:	c3                   	ret    
c0011007:	90                   	nop

c0011008 <InterruptController::~InterruptController()>:
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0011010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011014:	89 10                	mov    DWORD PTR [eax],edx
c0011016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	50                   	push   eax
c001101e:	e8 a7 f4 ff ff       	call   c00104ca <Device::~Device()>
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	90                   	nop
c0011027:	83 c4 0c             	add    esp,0xc
c001102a:	c3                   	ret    
c001102b:	90                   	nop

c001102c <InterruptController::~InterruptController()>:
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011036:	e8 cd ff ff ff       	call   c0011008 <InterruptController::~InterruptController()>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 ec 08             	sub    esp,0x8
c0011041:	68 58 21 00 00       	push   0x2158
c0011046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104a:	e8 9a e0 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	83 c4 0c             	add    esp,0xc
c0011055:	c3                   	ret    

c0011056 <displayDebugInfo(regs*)>:
c0011056:	55                   	push   ebp
c0011057:	57                   	push   edi
c0011058:	56                   	push   esi
c0011059:	53                   	push   ebx
c001105a:	83 ec 24             	sub    esp,0x24
c001105d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011061:	0f 20 c2             	mov    edx,cr0
c0011064:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0011068:	0f 20 d7             	mov    edi,cr2
c001106b:	0f 20 de             	mov    esi,cr3
c001106e:	0f 20 e5             	mov    ebp,cr4
c0011071:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011074:	68 62 1e 02 c0       	push   0xc0021e62
c0011079:	e8 91 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001107e:	58                   	pop    eax
c001107f:	5a                   	pop    edx
c0011080:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011083:	68 6d 1e 02 c0       	push   0xc0021e6d
c0011088:	e8 82 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001108d:	59                   	pop    ecx
c001108e:	58                   	pop    eax
c001108f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011092:	68 78 1e 02 c0       	push   0xc0021e78
c0011097:	e8 73 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001109c:	58                   	pop    eax
c001109d:	5a                   	pop    edx
c001109e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a1:	68 83 1e 02 c0       	push   0xc0021e83
c00110a6:	e8 64 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110ab:	59                   	pop    ecx
c00110ac:	58                   	pop    eax
c00110ad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110b0:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110b5:	e8 55 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110ba:	58                   	pop    eax
c00110bb:	5a                   	pop    edx
c00110bc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110bf:	68 99 1e 02 c0       	push   0xc0021e99
c00110c4:	e8 46 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110c9:	59                   	pop    ecx
c00110ca:	58                   	pop    eax
c00110cb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110ce:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110d3:	e8 37 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110d8:	58                   	pop    eax
c00110d9:	5a                   	pop    edx
c00110da:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110dd:	68 af 1e 02 c0       	push   0xc0021eaf
c00110e2:	e8 28 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110e7:	59                   	pop    ecx
c00110e8:	58                   	pop    eax
c00110e9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110ec:	68 ba 1e 02 c0       	push   0xc0021eba
c00110f1:	e8 19 e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00110f6:	58                   	pop    eax
c00110f7:	5a                   	pop    edx
c00110f8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110fb:	68 c9 1e 02 c0       	push   0xc0021ec9
c0011100:	e8 0a e1 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011105:	59                   	pop    ecx
c0011106:	58                   	pop    eax
c0011107:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001110a:	68 d4 1e 02 c0       	push   0xc0021ed4
c001110f:	e8 fb e0 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011114:	58                   	pop    eax
c0011115:	5a                   	pop    edx
c0011116:	57                   	push   edi
c0011117:	68 df 1e 02 c0       	push   0xc0021edf
c001111c:	e8 ee e0 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011121:	59                   	pop    ecx
c0011122:	58                   	pop    eax
c0011123:	56                   	push   esi
c0011124:	68 ea 1e 02 c0       	push   0xc0021eea
c0011129:	e8 e1 e0 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001112e:	58                   	pop    eax
c001112f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011134:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001113a:	e8 00 c2 ff ff       	call   c000d33f <setActiveTerminal(VgaText*)>
c001113f:	58                   	pop    eax
c0011140:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011143:	5a                   	pop    edx
c0011144:	c1 e0 05             	shl    eax,0x5
c0011147:	05 60 3c 02 c0       	add    eax,0xc0023c60
c001114c:	50                   	push   eax
c001114d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011152:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011158:	e8 03 c6 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001115d:	59                   	pop    ecx
c001115e:	58                   	pop    eax
c001115f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011164:	68 f5 1e 02 c0       	push   0xc0021ef5
c0011169:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001116f:	e8 ec c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011174:	58                   	pop    eax
c0011175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117a:	5a                   	pop    edx
c001117b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001117e:	83 c0 0c             	add    eax,0xc
c0011181:	50                   	push   eax
c0011182:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011187:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118d:	e8 ce c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011192:	59                   	pop    ecx
c0011193:	58                   	pop    eax
c0011194:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011199:	68 fe 1e 02 c0       	push   0xc0021efe
c001119e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a4:	e8 b7 c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00111a9:	58                   	pop    eax
c00111aa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111af:	5a                   	pop    edx
c00111b0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b9:	e8 c8 c5 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00111be:	59                   	pop    ecx
c00111bf:	58                   	pop    eax
c00111c0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111c5:	68 06 1f 02 c0       	push   0xc0021f06
c00111ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d0:	e8 8b c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00111d5:	58                   	pop    eax
c00111d6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111db:	5a                   	pop    edx
c00111dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e5:	e8 9c c5 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00111ea:	59                   	pop    ecx
c00111eb:	58                   	pop    eax
c00111ec:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111f1:	68 0e 1f 02 c0       	push   0xc0021f0e
c00111f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fc:	e8 5f c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011201:	58                   	pop    eax
c0011202:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011207:	5a                   	pop    edx
c0011208:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001120b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011211:	e8 70 c5 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011216:	59                   	pop    ecx
c0011217:	58                   	pop    eax
c0011218:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001121d:	68 16 1f 02 c0       	push   0xc0021f16
c0011222:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011228:	e8 33 c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001122d:	58                   	pop    eax
c001122e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011233:	5a                   	pop    edx
c0011234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123d:	e8 44 c5 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011242:	59                   	pop    ecx
c0011243:	58                   	pop    eax
c0011244:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011249:	68 1e 1f 02 c0       	push   0xc0021f1e
c001124e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011254:	e8 07 c5 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011259:	58                   	pop    eax
c001125a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001125f:	5a                   	pop    edx
c0011260:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011263:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011269:	e8 18 c5 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c001126e:	59                   	pop    ecx
c001126f:	58                   	pop    eax
c0011270:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011275:	68 26 1f 02 c0       	push   0xc0021f26
c001127a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011280:	e8 db c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011285:	58                   	pop    eax
c0011286:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001128b:	5a                   	pop    edx
c001128c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001128f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011295:	e8 ec c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c001129a:	59                   	pop    ecx
c001129b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112a0:	5b                   	pop    ebx
c00112a1:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ac:	e8 af c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00112b1:	58                   	pop    eax
c00112b2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112b7:	5a                   	pop    edx
c00112b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112bc:	52                   	push   edx
c00112bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c3:	e8 be c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00112c8:	59                   	pop    ecx
c00112c9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112ce:	5b                   	pop    ebx
c00112cf:	68 37 1f 02 c0       	push   0xc0021f37
c00112d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112da:	e8 81 c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00112df:	58                   	pop    eax
c00112e0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112e5:	5a                   	pop    edx
c00112e6:	57                   	push   edi
c00112e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ed:	e8 94 c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00112f2:	59                   	pop    ecx
c00112f3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112f8:	5b                   	pop    ebx
c00112f9:	68 3f 1f 02 c0       	push   0xc0021f3f
c00112fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011304:	e8 57 c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011309:	5f                   	pop    edi
c001130a:	58                   	pop    eax
c001130b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011310:	56                   	push   esi
c0011311:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011317:	e8 6a c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c001131c:	58                   	pop    eax
c001131d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011322:	5a                   	pop    edx
c0011323:	68 47 1f 02 c0       	push   0xc0021f47
c0011328:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001132e:	e8 2d c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0011333:	59                   	pop    ecx
c0011334:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011339:	5b                   	pop    ebx
c001133a:	55                   	push   ebp
c001133b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011341:	e8 40 c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011346:	5e                   	pop    esi
c0011347:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001134c:	5f                   	pop    edi
c001134d:	68 4f 1f 02 c0       	push   0xc0021f4f
c0011352:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011358:	e8 03 c4 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001135d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011362:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011368:	e8 06 e8 00 00       	call   c001fb73 <CPU::readDR0()>
c001136d:	5d                   	pop    ebp
c001136e:	5a                   	pop    edx
c001136f:	50                   	push   eax
c0011370:	53                   	push   ebx
c0011371:	e8 10 c4 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011376:	59                   	pop    ecx
c0011377:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001137c:	5b                   	pop    ebx
c001137d:	68 58 1f 02 c0       	push   0xc0021f58
c0011382:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011388:	e8 d3 c3 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001138d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011392:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011398:	e8 e8 e7 00 00       	call   c001fb85 <CPU::readDR1()>
c001139d:	5e                   	pop    esi
c001139e:	5f                   	pop    edi
c001139f:	50                   	push   eax
c00113a0:	53                   	push   ebx
c00113a1:	e8 e0 c3 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00113a6:	5d                   	pop    ebp
c00113a7:	58                   	pop    eax
c00113a8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113ad:	68 60 1f 02 c0       	push   0xc0021f60
c00113b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113b8:	e8 a3 c3 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00113bd:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113c2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113c8:	e8 ca e7 00 00       	call   c001fb97 <CPU::readDR2()>
c00113cd:	5a                   	pop    edx
c00113ce:	59                   	pop    ecx
c00113cf:	50                   	push   eax
c00113d0:	53                   	push   ebx
c00113d1:	e8 b0 c3 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c00113d6:	5b                   	pop    ebx
c00113d7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113dc:	5e                   	pop    esi
c00113dd:	68 68 1f 02 c0       	push   0xc0021f68
c00113e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113e8:	e8 73 c3 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c00113ed:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113f2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113f8:	e8 ac e7 00 00       	call   c001fba9 <CPU::readDR3()>
c00113fd:	5f                   	pop    edi
c00113fe:	5d                   	pop    ebp
c00113ff:	50                   	push   eax
c0011400:	53                   	push   ebx
c0011401:	e8 80 c3 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011406:	58                   	pop    eax
c0011407:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001140c:	5a                   	pop    edx
c001140d:	68 70 1f 02 c0       	push   0xc0021f70
c0011412:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011418:	e8 43 c3 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001141d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011422:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011428:	e8 8e e7 00 00       	call   c001fbbb <CPU::readDR6()>
c001142d:	59                   	pop    ecx
c001142e:	5e                   	pop    esi
c001142f:	50                   	push   eax
c0011430:	53                   	push   ebx
c0011431:	e8 50 c3 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011436:	5f                   	pop    edi
c0011437:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001143c:	5d                   	pop    ebp
c001143d:	68 78 1f 02 c0       	push   0xc0021f78
c0011442:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011448:	e8 13 c3 ff ff       	call   c000d760 <VgaText::puts(char const*)>
c001144d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011452:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011458:	e8 70 e7 00 00       	call   c001fbcd <CPU::readDR7()>
c001145d:	5a                   	pop    edx
c001145e:	59                   	pop    ecx
c001145f:	50                   	push   eax
c0011460:	53                   	push   ebx
c0011461:	e8 20 c3 ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0011466:	fa                   	cli    
c0011467:	f4                   	hlt    
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	eb fe                	jmp    c001146b <displayDebugInfo(regs*)+0x415>

c001146d <x87EmulHandler(regs*, void*)>:
c001146d:	53                   	push   ebx
c001146e:	83 ec 08             	sub    esp,0x8
c0011471:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0011476:	85 c0                	test   eax,eax
c0011478:	74 15                	je     c001148f <x87EmulHandler(regs*, void*)+0x22>
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011481:	ff d0                	call   eax
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	84 c0                	test   al,al
c0011488:	74 2f                	je     c00114b9 <x87EmulHandler(regs*, void*)+0x4c>
c001148a:	83 c4 08             	add    esp,0x8
c001148d:	5b                   	pop    ebx
c001148e:	c3                   	ret    
c001148f:	83 ec 08             	sub    esp,0x8
c0011492:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011498:	6a 01                	push   0x1
c001149a:	68 80 1f 02 c0       	push   0xc0021f80
c001149f:	e8 bd 6f 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c00114a4:	5a                   	pop    edx
c00114a5:	59                   	pop    ecx
c00114a6:	53                   	push   ebx
c00114a7:	50                   	push   eax
c00114a8:	e8 7a 71 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c00114ad:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114b2:	83 c4 10             	add    esp,0x10
c00114b5:	85 c0                	test   eax,eax
c00114b7:	75 c1                	jne    c001147a <x87EmulHandler(regs*, void*)+0xd>
c00114b9:	83 ec 0c             	sub    esp,0xc
c00114bc:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114c1:	e8 49 dd ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00114c6:	58                   	pop    eax
c00114c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cb:	e8 86 fb ff ff       	call   c0011056 <displayDebugInfo(regs*)>

c00114d0 <gpFault(regs*, void*)>:
c00114d0:	53                   	push   ebx
c00114d1:	83 ec 14             	sub    esp,0x14
c00114d4:	c7 05 30 49 02 c0 d9 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198d9
c00114de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114e2:	53                   	push   ebx
c00114e3:	e8 f1 83 00 00       	call   c00198d9 <Vm::faultHandler(regs*)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	84 c0                	test   al,al
c00114ed:	74 05                	je     c00114f4 <gpFault(regs*, void*)+0x24>
c00114ef:	83 c4 08             	add    esp,0x8
c00114f2:	5b                   	pop    ebx
c00114f3:	c3                   	ret    
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114fc:	e8 0e dd ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011501:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011504:	e8 4d fb ff ff       	call   c0011056 <displayDebugInfo(regs*)>

c0011509 <pgFault(regs*, void*)>:
c0011509:	83 ec 18             	sub    esp,0x18
c001150c:	68 b8 1f 02 c0       	push   0xc0021fb8
c0011511:	e8 f9 dc ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011516:	58                   	pop    eax
c0011517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151b:	e8 36 fb ff ff       	call   c0011056 <displayDebugInfo(regs*)>

c0011520 <otherISRHandler(regs*, void*)>:
c0011520:	53                   	push   ebx
c0011521:	83 ec 0c             	sub    esp,0xc
c0011524:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011528:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001152b:	50                   	push   eax
c001152c:	50                   	push   eax
c001152d:	68 c5 1f 02 c0       	push   0xc0021fc5
c0011532:	e8 d8 dc ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011537:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001153a:	e8 17 fb ff ff       	call   c0011056 <displayDebugInfo(regs*)>

c001153f <opcodeFault(regs*, void*)>:
c001153f:	55                   	push   ebp
c0011540:	89 e5                	mov    ebp,esp
c0011542:	56                   	push   esi
c0011543:	53                   	push   ebx
c0011544:	83 ec 40             	sub    esp,0x40
c0011547:	e8 86 33 00 00       	call   c00148d2 <thisCPU()>
c001154c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011552:	84 c0                	test   al,al
c0011554:	74 24                	je     c001157a <opcodeFault(regs*, void*)+0x3b>
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 e4 1f 02 c0       	push   0xc0021fe4
c001155e:	e8 ac dc ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001156c:	8d 50 19             	lea    edx,[eax+0x19]
c001156f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011572:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011575:	e9 77 05 00 00       	jmp    c0011af1 <opcodeFault(regs*, void*)+0x5b2>
c001157a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011580:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011583:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011587:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011591:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011594:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011597:	8a 00                	mov    al,BYTE PTR [eax]
c0011599:	3c f0                	cmp    al,0xf0
c001159b:	75 17                	jne    c00115b4 <opcodeFault(regs*, void*)+0x75>
c001159d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a6:	8d 50 01             	lea    edx,[eax+0x1]
c00115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115af:	e9 da 00 00 00       	jmp    c001168e <opcodeFault(regs*, void*)+0x14f>
c00115b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b7:	8a 00                	mov    al,BYTE PTR [eax]
c00115b9:	3c f2                	cmp    al,0xf2
c00115bb:	74 09                	je     c00115c6 <opcodeFault(regs*, void*)+0x87>
c00115bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c0:	8a 00                	mov    al,BYTE PTR [eax]
c00115c2:	3c f3                	cmp    al,0xf3
c00115c4:	75 1b                	jne    c00115e1 <opcodeFault(regs*, void*)+0xa2>
c00115c6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115ca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115d3:	8d 50 01             	lea    edx,[eax+0x1]
c00115d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115dc:	e9 ad 00 00 00       	jmp    c001168e <opcodeFault(regs*, void*)+0x14f>
c00115e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e4:	8a 00                	mov    al,BYTE PTR [eax]
c00115e6:	3c 66                	cmp    al,0x66
c00115e8:	75 1f                	jne    c0011609 <opcodeFault(regs*, void*)+0xca>
c00115ea:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115ee:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115fb:	8d 50 01             	lea    edx,[eax+0x1]
c00115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011601:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011604:	e9 85 00 00 00       	jmp    c001168e <opcodeFault(regs*, void*)+0x14f>
c0011609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001160c:	8a 00                	mov    al,BYTE PTR [eax]
c001160e:	3c 67                	cmp    al,0x67
c0011610:	75 18                	jne    c001162a <opcodeFault(regs*, void*)+0xeb>
c0011612:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011616:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001161f:	8d 50 01             	lea    edx,[eax+0x1]
c0011622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011625:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011628:	eb 64                	jmp    c001168e <opcodeFault(regs*, void*)+0x14f>
c001162a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001162d:	8a 00                	mov    al,BYTE PTR [eax]
c001162f:	3c 2e                	cmp    al,0x2e
c0011631:	74 09                	je     c001163c <opcodeFault(regs*, void*)+0xfd>
c0011633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011636:	8a 00                	mov    al,BYTE PTR [eax]
c0011638:	3c 3e                	cmp    al,0x3e
c001163a:	75 18                	jne    c0011654 <opcodeFault(regs*, void*)+0x115>
c001163c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011640:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011646:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011649:	8d 50 01             	lea    edx,[eax+0x1]
c001164c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011652:	eb 3a                	jmp    c001168e <opcodeFault(regs*, void*)+0x14f>
c0011654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011657:	8a 00                	mov    al,BYTE PTR [eax]
c0011659:	3c 36                	cmp    al,0x36
c001165b:	74 1b                	je     c0011678 <opcodeFault(regs*, void*)+0x139>
c001165d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011660:	8a 00                	mov    al,BYTE PTR [eax]
c0011662:	3c 26                	cmp    al,0x26
c0011664:	74 12                	je     c0011678 <opcodeFault(regs*, void*)+0x139>
c0011666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011669:	8a 00                	mov    al,BYTE PTR [eax]
c001166b:	3c 64                	cmp    al,0x64
c001166d:	74 09                	je     c0011678 <opcodeFault(regs*, void*)+0x139>
c001166f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011672:	8a 00                	mov    al,BYTE PTR [eax]
c0011674:	3c 65                	cmp    al,0x65
c0011676:	75 16                	jne    c001168e <opcodeFault(regs*, void*)+0x14f>
c0011678:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001167c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001167f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011685:	8d 50 01             	lea    edx,[eax+0x1]
c0011688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001168e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011691:	8a 00                	mov    al,BYTE PTR [eax]
c0011693:	3c 0f                	cmp    al,0xf
c0011695:	0f 85 ad 00 00 00    	jne    c0011748 <opcodeFault(regs*, void*)+0x209>
c001169b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001169e:	40                   	inc    eax
c001169f:	8a 00                	mov    al,BYTE PTR [eax]
c00116a1:	3c c2                	cmp    al,0xc2
c00116a3:	74 0e                	je     c00116b3 <opcodeFault(regs*, void*)+0x174>
c00116a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a8:	40                   	inc    eax
c00116a9:	8a 00                	mov    al,BYTE PTR [eax]
c00116ab:	3c c3                	cmp    al,0xc3
c00116ad:	0f 85 95 00 00 00    	jne    c0011748 <opcodeFault(regs*, void*)+0x209>
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	68 07 20 02 c0       	push   0xc0022007
c00116bb:	e8 4f db ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116c9:	8d 50 01             	lea    edx,[eax+0x1]
c00116cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116d8:	8a 00                	mov    al,BYTE PTR [eax]
c00116da:	8d 50 fe             	lea    edx,[eax-0x2]
c00116dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116e0:	88 10                	mov    BYTE PTR [eax],dl
c00116e2:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116e5:	50                   	push   eax
c00116e6:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116e9:	50                   	push   eax
c00116ea:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116ed:	50                   	push   eax
c00116ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116f1:	e8 48 41 00 00       	call   c001583e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116ff:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011702:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011705:	01 d0                	add    eax,edx
c0011707:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001170a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011710:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011713:	48                   	dec    eax
c0011714:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001171d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011723:	83 ec 04             	sub    esp,0x4
c0011726:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011729:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001172c:	50                   	push   eax
c001172d:	e8 1e ea fe ff       	call   c0000150 <voodooXADD>
c0011732:	83 c4 10             	add    esp,0x10
c0011735:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011738:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001173b:	01 c2                	add    edx,eax
c001173d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011740:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011743:	e9 a9 03 00 00       	jmp    c0011af1 <opcodeFault(regs*, void*)+0x5b2>
c0011748:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001174b:	8a 00                	mov    al,BYTE PTR [eax]
c001174d:	3c 0f                	cmp    al,0xf
c001174f:	0f 85 8b 01 00 00    	jne    c00118e0 <opcodeFault(regs*, void*)+0x3a1>
c0011755:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011758:	40                   	inc    eax
c0011759:	8a 00                	mov    al,BYTE PTR [eax]
c001175b:	3c c7                	cmp    al,0xc7
c001175d:	0f 86 7d 01 00 00    	jbe    c00118e0 <opcodeFault(regs*, void*)+0x3a1>
c0011763:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011766:	40                   	inc    eax
c0011767:	8a 00                	mov    al,BYTE PTR [eax]
c0011769:	3c cf                	cmp    al,0xcf
c001176b:	0f 87 6f 01 00 00    	ja     c00118e0 <opcodeFault(regs*, void*)+0x3a1>
c0011771:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011774:	40                   	inc    eax
c0011775:	8a 00                	mov    al,BYTE PTR [eax]
c0011777:	83 c0 38             	add    eax,0x38
c001177a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001177d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011781:	75 0b                	jne    c001178e <opcodeFault(regs*, void*)+0x24f>
c0011783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011786:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011789:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001178c:	eb 75                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c001178e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011792:	75 0b                	jne    c001179f <opcodeFault(regs*, void*)+0x260>
c0011794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011797:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001179a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001179d:	eb 64                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c001179f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117a3:	75 0b                	jne    c00117b0 <opcodeFault(regs*, void*)+0x271>
c00117a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ae:	eb 53                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117b0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117b4:	75 0b                	jne    c00117c1 <opcodeFault(regs*, void*)+0x282>
c00117b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117bc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117bf:	eb 42                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117c1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117c5:	75 0b                	jne    c00117d2 <opcodeFault(regs*, void*)+0x293>
c00117c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ca:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d0:	eb 31                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117d2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117d6:	75 0b                	jne    c00117e3 <opcodeFault(regs*, void*)+0x2a4>
c00117d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e1:	eb 20                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117e3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117e7:	75 0b                	jne    c00117f4 <opcodeFault(regs*, void*)+0x2b5>
c00117e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f2:	eb 0f                	jmp    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117f4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117f8:	75 09                	jne    c0011803 <opcodeFault(regs*, void*)+0x2c4>
c00117fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011800:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011803:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011807:	74 10                	je     c0011819 <opcodeFault(regs*, void*)+0x2da>
c0011809:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011810:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011817:	eb 2d                	jmp    c0011846 <opcodeFault(regs*, void*)+0x307>
c0011819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001181c:	c1 e0 18             	shl    eax,0x18
c001181f:	89 c2                	mov    edx,eax
c0011821:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011824:	c1 e0 08             	shl    eax,0x8
c0011827:	25 00 00 ff 00       	and    eax,0xff0000
c001182c:	09 c2                	or     edx,eax
c001182e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011831:	c1 e8 08             	shr    eax,0x8
c0011834:	25 00 ff 00 00       	and    eax,0xff00
c0011839:	09 c2                	or     edx,eax
c001183b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001183e:	c1 e8 18             	shr    eax,0x18
c0011841:	09 d0                	or     eax,edx
c0011843:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011846:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001184a:	75 0b                	jne    c0011857 <opcodeFault(regs*, void*)+0x318>
c001184c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011852:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011855:	eb 75                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c0011857:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001185b:	75 0b                	jne    c0011868 <opcodeFault(regs*, void*)+0x329>
c001185d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011860:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011863:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011866:	eb 64                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c0011868:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001186c:	75 0b                	jne    c0011879 <opcodeFault(regs*, void*)+0x33a>
c001186e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011871:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011874:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011877:	eb 53                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c0011879:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001187d:	75 0b                	jne    c001188a <opcodeFault(regs*, void*)+0x34b>
c001187f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011882:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011885:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011888:	eb 42                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c001188a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001188e:	75 0b                	jne    c001189b <opcodeFault(regs*, void*)+0x35c>
c0011890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011893:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011896:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0011899:	eb 31                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c001189b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001189f:	75 0b                	jne    c00118ac <opcodeFault(regs*, void*)+0x36d>
c00118a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118aa:	eb 20                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c00118ac:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118b0:	75 0b                	jne    c00118bd <opcodeFault(regs*, void*)+0x37e>
c00118b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118b8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118bb:	eb 0f                	jmp    c00118cc <opcodeFault(regs*, void*)+0x38d>
c00118bd:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118c1:	75 09                	jne    c00118cc <opcodeFault(regs*, void*)+0x38d>
c00118c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118d2:	8d 50 02             	lea    edx,[eax+0x2]
c00118d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118db:	e9 11 02 00 00       	jmp    c0011af1 <opcodeFault(regs*, void*)+0x5b2>
c00118e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118e3:	8a 00                	mov    al,BYTE PTR [eax]
c00118e5:	3c 0f                	cmp    al,0xf
c00118e7:	0f 85 76 01 00 00    	jne    c0011a63 <opcodeFault(regs*, void*)+0x524>
c00118ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f0:	40                   	inc    eax
c00118f1:	8a 00                	mov    al,BYTE PTR [eax]
c00118f3:	3c c7                	cmp    al,0xc7
c00118f5:	0f 85 68 01 00 00    	jne    c0011a63 <opcodeFault(regs*, void*)+0x524>
c00118fb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00118fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011901:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011904:	8d 50 01             	lea    edx,[eax+0x1]
c0011907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001190d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011910:	50                   	push   eax
c0011911:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011914:	50                   	push   eax
c0011915:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011918:	50                   	push   eax
c0011919:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001191c:	e8 1d 3f 00 00       	call   c001583e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011927:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001192a:	83 f0 01             	xor    eax,0x1
c001192d:	84 c0                	test   al,al
c001192f:	0f 84 2e 01 00 00    	je     c0011a63 <opcodeFault(regs*, void*)+0x524>
c0011935:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011938:	3c 01                	cmp    al,0x1
c001193a:	0f 85 23 01 00 00    	jne    c0011a63 <opcodeFault(regs*, void*)+0x524>
c0011940:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011943:	83 f0 01             	xor    eax,0x1
c0011946:	84 c0                	test   al,al
c0011948:	0f 84 15 01 00 00    	je     c0011a63 <opcodeFault(regs*, void*)+0x524>
c001194e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011951:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011954:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011957:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001195e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011961:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011964:	89 c2                	mov    edx,eax
c0011966:	b8 00 00 00 00       	mov    eax,0x0
c001196b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001196e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011974:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011977:	ba 00 00 00 00       	mov    edx,0x0
c001197c:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001197f:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011985:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011988:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001198b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0011992:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011995:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011998:	89 c2                	mov    edx,eax
c001199a:	b8 00 00 00 00       	mov    eax,0x0
c001199f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119a2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119ab:	ba 00 00 00 00       	mov    edx,0x0
c00119b0:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119b3:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119b6:	e8 8c 70 00 00       	call   c0018a47 <lockScheduler()>
c00119bb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c3:	89 c1                	mov    ecx,eax
c00119c5:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119c8:	89 cb                	mov    ebx,ecx
c00119ca:	89 d0                	mov    eax,edx
c00119cc:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119cf:	89 c6                	mov    esi,eax
c00119d1:	89 f0                	mov    eax,esi
c00119d3:	09 d8                	or     eax,ebx
c00119d5:	85 c0                	test   eax,eax
c00119d7:	75 21                	jne    c00119fa <opcodeFault(regs*, void*)+0x4bb>
c00119d9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119dc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119df:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119e2:	89 01                	mov    DWORD PTR [ecx],eax
c00119e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119ed:	83 c8 40             	or     eax,0x40
c00119f0:	89 c2                	mov    edx,eax
c00119f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119f8:	eb 3e                	jmp    c0011a38 <opcodeFault(regs*, void*)+0x4f9>
c00119fa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a02:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a05:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a08:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a11:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a14:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a17:	89 d0                	mov    eax,edx
c0011a19:	31 d2                	xor    edx,edx
c0011a1b:	89 c3                	mov    ebx,eax
c0011a1d:	89 d6                	mov    esi,edx
c0011a1f:	89 da                	mov    edx,ebx
c0011a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a24:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a2d:	83 e0 bf             	and    eax,0xffffffbf
c0011a30:	89 c2                	mov    edx,eax
c0011a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a35:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a38:	e8 0c 70 00 00       	call   c0018a49 <unlockScheduler()>
c0011a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a40:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a43:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a46:	01 c2                	add    edx,eax
c0011a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	68 16 20 02 c0       	push   0xc0022016
c0011a56:	e8 b4 d7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	e9 8e 00 00 00       	jmp    c0011af1 <opcodeFault(regs*, void*)+0x5b2>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 29 20 02 c0       	push   0xc0022029
c0011a6b:	e8 9f d7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a76:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a7f:	c1 e0 04             	shl    eax,0x4
c0011a82:	01 d0                	add    eax,edx
c0011a84:	83 c0 03             	add    eax,0x3
c0011a87:	8a 00                	mov    al,BYTE PTR [eax]
c0011a89:	0f b6 d8             	movzx  ebx,al
c0011a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a98:	c1 e0 04             	shl    eax,0x4
c0011a9b:	01 d0                	add    eax,edx
c0011a9d:	83 c0 02             	add    eax,0x2
c0011aa0:	8a 00                	mov    al,BYTE PTR [eax]
c0011aa2:	0f b6 c8             	movzx  ecx,al
c0011aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab1:	c1 e0 04             	shl    eax,0x4
c0011ab4:	01 d0                	add    eax,edx
c0011ab6:	40                   	inc    eax
c0011ab7:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab9:	0f b6 d0             	movzx  edx,al
c0011abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abf:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac8:	c1 e0 04             	shl    eax,0x4
c0011acb:	01 f0                	add    eax,esi
c0011acd:	8a 00                	mov    al,BYTE PTR [eax]
c0011acf:	0f b6 c0             	movzx  eax,al
c0011ad2:	83 ec 0c             	sub    esp,0xc
c0011ad5:	53                   	push   ebx
c0011ad6:	51                   	push   ecx
c0011ad7:	52                   	push   edx
c0011ad8:	50                   	push   eax
c0011ad9:	68 3c 20 02 c0       	push   0xc002203c
c0011ade:	e8 2c d7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011ae3:	83 c4 20             	add    esp,0x20
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011aec:	e8 65 f5 ff ff       	call   c0011056 <displayDebugInfo(regs*)>
c0011af1:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011af4:	5b                   	pop    ebx
c0011af5:	5e                   	pop    esi
c0011af6:	5d                   	pop    ebp
c0011af7:	c3                   	ret    

c0011af8 <displayProgramFault(char const*)>:
c0011af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011afd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b06:	85 c0                	test   eax,eax
c0011b08:	74 15                	je     c0011b1f <displayProgramFault(char const*)+0x27>
c0011b0a:	83 ec 0c             	sub    esp,0xc
c0011b0d:	6a 04                	push   0x4
c0011b0f:	6a 0f                	push   0xf
c0011b11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b15:	50                   	push   eax
c0011b16:	e8 05 b9 ff ff       	call   c000d420 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b1b:	83 c4 1c             	add    esp,0x1c
c0011b1e:	c3                   	ret    
c0011b1f:	c3                   	ret    

c0011b20 <setupInterruptController()>:
c0011b20:	55                   	push   ebp
c0011b21:	89 e5                	mov    ebp,esp
c0011b23:	53                   	push   ebx
c0011b24:	83 ec 14             	sub    esp,0x14
c0011b27:	e8 a3 2d 00 00       	call   c00148cf <getCPUNumber()>
c0011b2c:	85 c0                	test   eax,eax
c0011b2e:	0f 95 c0             	setne  al
c0011b31:	84 c0                	test   al,al
c0011b33:	74 56                	je     c0011b8b <setupInterruptController()+0x6b>
c0011b35:	83 ec 0c             	sub    esp,0xc
c0011b38:	68 58 21 00 00       	push   0x2158
c0011b3d:	e8 98 d5 ff ff       	call   c000f0da <operator new(unsigned long)>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	89 c3                	mov    ebx,eax
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	53                   	push   ebx
c0011b4b:	e8 6a c9 00 00       	call   c001e4ba <APIC::APIC()>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b56:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5e:	83 c0 08             	add    eax,0x8
c0011b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b63:	6a 00                	push   0x0
c0011b65:	6a 00                	push   0x0
c0011b67:	6a 00                	push   0x0
c0011b69:	52                   	push   edx
c0011b6a:	ff d0                	call   eax
c0011b6c:	83 c4 10             	add    esp,0x10
c0011b6f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b74:	83 ec 08             	sub    esp,0x8
c0011b77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b7a:	50                   	push   eax
c0011b7b:	e8 a4 ea ff ff       	call   c0010624 <Device::addChild(Device*)>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b86:	e9 48 03 00 00       	jmp    c0011ed3 <setupInterruptController()+0x3b3>
c0011b8b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b90:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b96:	83 e0 01             	and    eax,0x1
c0011b99:	84 c0                	test   al,al
c0011b9b:	0f 95 c0             	setne  al
c0011b9e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ba1:	83 ec 0c             	sub    esp,0xc
c0011ba4:	68 58 21 00 00       	push   0x2158
c0011ba9:	e8 2c d5 ff ff       	call   c000f0da <operator new(unsigned long)>
c0011bae:	83 c4 10             	add    esp,0x10
c0011bb1:	89 c3                	mov    ebx,eax
c0011bb3:	83 ec 0c             	sub    esp,0xc
c0011bb6:	53                   	push   ebx
c0011bb7:	e8 f8 cd 00 00       	call   c001e9b4 <PIC::PIC()>
c0011bbc:	83 c4 10             	add    esp,0x10
c0011bbf:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bc2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bca:	83 c0 08             	add    eax,0x8
c0011bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcf:	6a 00                	push   0x0
c0011bd1:	6a 00                	push   0x0
c0011bd3:	6a 00                	push   0x0
c0011bd5:	52                   	push   edx
c0011bd6:	ff d0                	call   eax
c0011bd8:	83 c4 10             	add    esp,0x10
c0011bdb:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bdf:	74 6e                	je     c0011c4f <setupInterruptController()+0x12f>
c0011be1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be9:	83 c0 0c             	add    eax,0xc
c0011bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bee:	6a 00                	push   0x0
c0011bf0:	6a 00                	push   0x0
c0011bf2:	6a 00                	push   0x0
c0011bf4:	52                   	push   edx
c0011bf5:	ff d0                	call   eax
c0011bf7:	83 c4 10             	add    esp,0x10
c0011bfa:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011bfe:	74 15                	je     c0011c15 <setupInterruptController()+0xf5>
c0011c00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c05:	83 c0 04             	add    eax,0x4
c0011c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0a:	83 ec 0c             	sub    esp,0xc
c0011c0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c10:	ff d0                	call   eax
c0011c12:	83 c4 10             	add    esp,0x10
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	68 58 21 00 00       	push   0x2158
c0011c1d:	e8 b8 d4 ff ff       	call   c000f0da <operator new(unsigned long)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	89 c3                	mov    ebx,eax
c0011c27:	83 ec 0c             	sub    esp,0xc
c0011c2a:	53                   	push   ebx
c0011c2b:	e8 8a c8 00 00       	call   c001e4ba <APIC::APIC()>
c0011c30:	83 c4 10             	add    esp,0x10
c0011c33:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c36:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	83 c0 08             	add    eax,0x8
c0011c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c43:	6a 00                	push   0x0
c0011c45:	6a 00                	push   0x0
c0011c47:	6a 00                	push   0x0
c0011c49:	52                   	push   edx
c0011c4a:	ff d0                	call   eax
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c54:	83 ec 08             	sub    esp,0x8
c0011c57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c5a:	50                   	push   eax
c0011c5b:	e8 c4 e9 ff ff       	call   c0010624 <Device::addChild(Device*)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c68:	83 c0 24             	add    eax,0x24
c0011c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6d:	6a 00                	push   0x0
c0011c6f:	68 20 15 01 c0       	push   0xc0011520
c0011c74:	6a 00                	push   0x0
c0011c76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c79:	ff d0                	call   eax
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c83:	83 c0 24             	add    eax,0x24
c0011c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c88:	6a 00                	push   0x0
c0011c8a:	68 20 15 01 c0       	push   0xc0011520
c0011c8f:	6a 01                	push   0x1
c0011c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c94:	ff d0                	call   eax
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9e:	83 c0 24             	add    eax,0x24
c0011ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca3:	6a 00                	push   0x0
c0011ca5:	68 b9 0e 01 c0       	push   0xc0010eb9
c0011caa:	6a 02                	push   0x2
c0011cac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011caf:	ff d0                	call   eax
c0011cb1:	83 c4 10             	add    esp,0x10
c0011cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb9:	83 c0 24             	add    eax,0x24
c0011cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbe:	6a 00                	push   0x0
c0011cc0:	68 20 15 01 c0       	push   0xc0011520
c0011cc5:	6a 03                	push   0x3
c0011cc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cca:	ff d0                	call   eax
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd4:	83 c0 24             	add    eax,0x24
c0011cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd9:	6a 00                	push   0x0
c0011cdb:	68 20 15 01 c0       	push   0xc0011520
c0011ce0:	6a 04                	push   0x4
c0011ce2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ce5:	ff d0                	call   eax
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cef:	83 c0 24             	add    eax,0x24
c0011cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf4:	6a 00                	push   0x0
c0011cf6:	68 20 15 01 c0       	push   0xc0011520
c0011cfb:	6a 05                	push   0x5
c0011cfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d00:	ff d0                	call   eax
c0011d02:	83 c4 10             	add    esp,0x10
c0011d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0a:	83 c0 24             	add    eax,0x24
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	6a 00                	push   0x0
c0011d11:	68 3f 15 01 c0       	push   0xc001153f
c0011d16:	6a 06                	push   0x6
c0011d18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d1b:	ff d0                	call   eax
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d25:	83 c0 24             	add    eax,0x24
c0011d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2a:	6a 00                	push   0x0
c0011d2c:	68 6d 14 01 c0       	push   0xc001146d
c0011d31:	6a 07                	push   0x7
c0011d33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d36:	ff d0                	call   eax
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d40:	83 c0 24             	add    eax,0x24
c0011d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d45:	6a 00                	push   0x0
c0011d47:	68 d4 0c 01 c0       	push   0xc0010cd4
c0011d4c:	6a 08                	push   0x8
c0011d4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d51:	ff d0                	call   eax
c0011d53:	83 c4 10             	add    esp,0x10
c0011d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5b:	83 c0 24             	add    eax,0x24
c0011d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d60:	6a 00                	push   0x0
c0011d62:	68 20 15 01 c0       	push   0xc0011520
c0011d67:	6a 09                	push   0x9
c0011d69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d6c:	ff d0                	call   eax
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d76:	83 c0 24             	add    eax,0x24
c0011d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7b:	6a 00                	push   0x0
c0011d7d:	68 20 15 01 c0       	push   0xc0011520
c0011d82:	6a 0a                	push   0xa
c0011d84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d87:	ff d0                	call   eax
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d91:	83 c0 24             	add    eax,0x24
c0011d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d96:	6a 00                	push   0x0
c0011d98:	68 20 15 01 c0       	push   0xc0011520
c0011d9d:	6a 0b                	push   0xb
c0011d9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da2:	ff d0                	call   eax
c0011da4:	83 c4 10             	add    esp,0x10
c0011da7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dac:	83 c0 24             	add    eax,0x24
c0011daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db1:	6a 00                	push   0x0
c0011db3:	68 20 15 01 c0       	push   0xc0011520
c0011db8:	6a 0c                	push   0xc
c0011dba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dbd:	ff d0                	call   eax
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc7:	83 c0 24             	add    eax,0x24
c0011dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dcc:	6a 00                	push   0x0
c0011dce:	68 d0 14 01 c0       	push   0xc00114d0
c0011dd3:	6a 0d                	push   0xd
c0011dd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd8:	ff d0                	call   eax
c0011dda:	83 c4 10             	add    esp,0x10
c0011ddd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de2:	83 c0 24             	add    eax,0x24
c0011de5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de7:	6a 00                	push   0x0
c0011de9:	68 09 15 01 c0       	push   0xc0011509
c0011dee:	6a 0e                	push   0xe
c0011df0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011df3:	ff d0                	call   eax
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dfd:	83 c0 24             	add    eax,0x24
c0011e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e02:	6a 00                	push   0x0
c0011e04:	68 20 15 01 c0       	push   0xc0011520
c0011e09:	6a 0f                	push   0xf
c0011e0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e0e:	ff d0                	call   eax
c0011e10:	83 c4 10             	add    esp,0x10
c0011e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e18:	83 c0 24             	add    eax,0x24
c0011e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1d:	6a 00                	push   0x0
c0011e1f:	68 20 15 01 c0       	push   0xc0011520
c0011e24:	6a 10                	push   0x10
c0011e26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e29:	ff d0                	call   eax
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e33:	83 c0 24             	add    eax,0x24
c0011e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e38:	6a 00                	push   0x0
c0011e3a:	68 20 15 01 c0       	push   0xc0011520
c0011e3f:	6a 11                	push   0x11
c0011e41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e44:	ff d0                	call   eax
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e4e:	83 c0 24             	add    eax,0x24
c0011e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e53:	6a 00                	push   0x0
c0011e55:	68 20 15 01 c0       	push   0xc0011520
c0011e5a:	6a 12                	push   0x12
c0011e5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e5f:	ff d0                	call   eax
c0011e61:	83 c4 10             	add    esp,0x10
c0011e64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e69:	83 c0 24             	add    eax,0x24
c0011e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6e:	6a 00                	push   0x0
c0011e70:	68 20 15 01 c0       	push   0xc0011520
c0011e75:	6a 13                	push   0x13
c0011e77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e7a:	ff d0                	call   eax
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e84:	83 c0 24             	add    eax,0x24
c0011e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e89:	6a 00                	push   0x0
c0011e8b:	68 20 15 01 c0       	push   0xc0011520
c0011e90:	6a 14                	push   0x14
c0011e92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e95:	ff d0                	call   eax
c0011e97:	83 c4 10             	add    esp,0x10
c0011e9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9f:	83 c0 24             	add    eax,0x24
c0011ea2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea4:	6a 00                	push   0x0
c0011ea6:	68 20 15 01 c0       	push   0xc0011520
c0011eab:	6a 1e                	push   0x1e
c0011ead:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011eb0:	ff d0                	call   eax
c0011eb2:	83 c4 10             	add    esp,0x10
c0011eb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eba:	83 c0 24             	add    eax,0x24
c0011ebd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebf:	6a 00                	push   0x0
c0011ec1:	68 4e 74 01 c0       	push   0xc001744e
c0011ec6:	6a 60                	push   0x60
c0011ec8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ecb:	ff d0                	call   eax
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ed3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ed6:	c9                   	leave  
c0011ed7:	c3                   	ret    

c0011ed8 <InterruptController::convertLegacyIRQNumber(int)>:
c0011ed8:	55                   	push   ebp
c0011ed9:	89 e5                	mov    ebp,esp
c0011edb:	83 ec 08             	sub    esp,0x8
c0011ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	50                   	push   eax
c0011ee5:	e8 1c ea ff ff       	call   c0010906 <Device::getName()>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8a 00                	mov    al,BYTE PTR [eax]
c0011eef:	3c 41                	cmp    al,0x41
c0011ef1:	0f 94 c0             	sete   al
c0011ef4:	84 c0                	test   al,al
c0011ef6:	74 28                	je     c0011f20 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011ef8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011efc:	7f 12                	jg     c0011f10 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011efe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f01:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f06:	8a 00                	mov    al,BYTE PTR [eax]
c0011f08:	0f b6 c0             	movzx  eax,al
c0011f0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f0e:	eb 10                	jmp    c0011f20 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f10:	83 ec 0c             	sub    esp,0xc
c0011f13:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f18:	e8 21 3b 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0011f1d:	83 c4 10             	add    esp,0x10
c0011f20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f23:	c9                   	leave  
c0011f24:	c3                   	ret    
c0011f25:	90                   	nop

c0011f26 <startGUI(void*)>:
c0011f26:	55                   	push   ebp
c0011f27:	89 e5                	mov    ebp,esp
c0011f29:	53                   	push   ebx
c0011f2a:	83 ec 04             	sub    esp,0x4
c0011f2d:	e8 17 6b 00 00       	call   c0018a49 <unlockScheduler()>
c0011f32:	e8 fb 6a 00 00       	call   c0018a32 <getIRQNestingLevel()>
c0011f37:	83 ec 08             	sub    esp,0x8
c0011f3a:	50                   	push   eax
c0011f3b:	68 a4 20 02 c0       	push   0xc00220a4
c0011f40:	e8 ca d2 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f4e:	83 ec 08             	sub    esp,0x8
c0011f51:	6a 01                	push   0x1
c0011f53:	68 be 20 02 c0       	push   0xc00220be
c0011f58:	e8 04 65 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	83 ec 08             	sub    esp,0x8
c0011f63:	53                   	push   ebx
c0011f64:	50                   	push   eax
c0011f65:	e8 bd 66 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0011f6a:	83 c4 10             	add    esp,0x10
c0011f6d:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f73:	83 ec 08             	sub    esp,0x8
c0011f76:	6a 01                	push   0x1
c0011f78:	68 d8 20 02 c0       	push   0xc00220d8
c0011f7d:	e8 df 64 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0011f82:	83 c4 10             	add    esp,0x10
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	53                   	push   ebx
c0011f89:	50                   	push   eax
c0011f8a:	e8 98 66 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	90                   	nop
c0011f93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f96:	c9                   	leave  
c0011f97:	c3                   	ret    

c0011f98 <sendKeyToTerminal(unsigned char)>:
c0011f98:	55                   	push   ebp
c0011f99:	89 e5                	mov    ebp,esp
c0011f9b:	83 ec 28             	sub    esp,0x28
c0011f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fa4:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011faa:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fad:	25 ff 00 00 00       	and    eax,0xff
c0011fb2:	83 ec 08             	sub    esp,0x8
c0011fb5:	50                   	push   eax
c0011fb6:	52                   	push   edx
c0011fb7:	e8 a2 b9 ff ff       	call   c000d95e <VgaText::receiveKey(unsigned char)>
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fc3:	75 41                	jne    c0012006 <sendKeyToTerminal(unsigned char)+0x6e>
c0011fc5:	e8 a4 6a 00 00       	call   c0018a6e <lockStuff()>
c0011fca:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fcf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fd2:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011fdc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fe0:	74 1f                	je     c0012001 <sendKeyToTerminal(unsigned char)+0x69>
c0011fe2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fe5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fe8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011feb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ff7:	e8 6f 70 00 00       	call   c001906b <unblockTask(ThreadControlBlock*)>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	eb db                	jmp    c0011fdc <sendKeyToTerminal(unsigned char)+0x44>
c0012001:	e8 0f 6e 00 00       	call   c0018e15 <unlockStuff()>
c0012006:	90                   	nop
c0012007:	c9                   	leave  
c0012008:	c3                   	ret    

c0012009 <sendKeyboardToken(KeyboardToken)>:
c0012009:	55                   	push   ebp
c001200a:	89 e5                	mov    ebp,esp
c001200c:	83 ec 18             	sub    esp,0x18
c001200f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012015:	25 ff ff 00 00       	and    eax,0xffff
c001201a:	83 f2 01             	xor    edx,0x1
c001201d:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012026:	66 3d 03 02          	cmp    ax,0x203
c001202a:	75 07                	jne    c0012033 <sendKeyboardToken(KeyboardToken)+0x2a>
c001202c:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012031:	84 c0                	test   al,al
c0012033:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0012037:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001203a:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c001203f:	38 c2                	cmp    dl,al
c0012041:	74 1e                	je     c0012061 <sendKeyboardToken(KeyboardToken)+0x58>
c0012043:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0012046:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c001204b:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012050:	25 ff 00 00 00       	and    eax,0xff
c0012055:	83 ec 0c             	sub    esp,0xc
c0012058:	50                   	push   eax
c0012059:	e8 6c ab ff ff       	call   c000cbca <setTerminalScrollLock(bool)>
c001205e:	83 c4 10             	add    esp,0x10
c0012061:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012064:	84 c0                	test   al,al
c0012066:	0f 84 ae 00 00 00    	je     c001211a <sendKeyboardToken(KeyboardToken)+0x111>
c001206c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001206f:	66 3d 10 03          	cmp    ax,0x310
c0012073:	75 06                	jne    c001207b <sendKeyboardToken(KeyboardToken)+0x72>
c0012075:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001207b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207e:	66 3d 11 03          	cmp    ax,0x311
c0012082:	75 06                	jne    c001208a <sendKeyboardToken(KeyboardToken)+0x81>
c0012084:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208d:	66 3d 12 03          	cmp    ax,0x312
c0012091:	75 06                	jne    c0012099 <sendKeyboardToken(KeyboardToken)+0x90>
c0012093:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0012099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001209c:	66 3d 13 03          	cmp    ax,0x313
c00120a0:	75 06                	jne    c00120a8 <sendKeyboardToken(KeyboardToken)+0x9f>
c00120a2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ab:	66 3d 14 03          	cmp    ax,0x314
c00120af:	75 06                	jne    c00120b7 <sendKeyboardToken(KeyboardToken)+0xae>
c00120b1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ba:	66 3d 15 03          	cmp    ax,0x315
c00120be:	75 06                	jne    c00120c6 <sendKeyboardToken(KeyboardToken)+0xbd>
c00120c0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c9:	66 3d 16 03          	cmp    ax,0x316
c00120cd:	75 06                	jne    c00120d5 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d8:	66 3d 17 03          	cmp    ax,0x317
c00120dc:	75 06                	jne    c00120e4 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120de:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e7:	66 3d 18 03          	cmp    ax,0x318
c00120eb:	75 06                	jne    c00120f3 <sendKeyboardToken(KeyboardToken)+0xea>
c00120ed:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f6:	66 3d 19 03          	cmp    ax,0x319
c00120fa:	75 06                	jne    c0012102 <sendKeyboardToken(KeyboardToken)+0xf9>
c00120fc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012105:	66 3d 1a 03          	cmp    ax,0x31a
c0012109:	0f 85 c9 00 00 00    	jne    c00121d8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c001210f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012115:	e9 be 00 00 00       	jmp    c00121d8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c001211a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001211d:	66 3d 10 03          	cmp    ax,0x310
c0012121:	75 0a                	jne    c001212d <sendKeyboardToken(KeyboardToken)+0x124>
c0012123:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012129:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012130:	66 3d 11 03          	cmp    ax,0x311
c0012134:	75 0a                	jne    c0012140 <sendKeyboardToken(KeyboardToken)+0x137>
c0012136:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001213c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012143:	66 3d 12 03          	cmp    ax,0x312
c0012147:	75 0a                	jne    c0012153 <sendKeyboardToken(KeyboardToken)+0x14a>
c0012149:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001214f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012156:	66 3d 13 03          	cmp    ax,0x313
c001215a:	75 0a                	jne    c0012166 <sendKeyboardToken(KeyboardToken)+0x15d>
c001215c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012162:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012169:	66 3d 14 03          	cmp    ax,0x314
c001216d:	75 0a                	jne    c0012179 <sendKeyboardToken(KeyboardToken)+0x170>
c001216f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012175:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001217c:	66 3d 15 03          	cmp    ax,0x315
c0012180:	75 0a                	jne    c001218c <sendKeyboardToken(KeyboardToken)+0x183>
c0012182:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012188:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001218c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001218f:	66 3d 16 03          	cmp    ax,0x316
c0012193:	75 0a                	jne    c001219f <sendKeyboardToken(KeyboardToken)+0x196>
c0012195:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001219b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001219f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a2:	66 3d 17 03          	cmp    ax,0x317
c00121a6:	75 0a                	jne    c00121b2 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121a8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b5:	66 3d 18 03          	cmp    ax,0x318
c00121b9:	75 0a                	jne    c00121c5 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121bb:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c8:	66 3d 19 03          	cmp    ax,0x319
c00121cc:	75 0a                	jne    c00121d8 <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121ce:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121db:	66 3d 00 02          	cmp    ax,0x200
c00121df:	75 2a                	jne    c001220b <sendKeyboardToken(KeyboardToken)+0x202>
c00121e1:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121e6:	83 f0 01             	xor    eax,0x1
c00121e9:	84 c0                	test   al,al
c00121eb:	74 1e                	je     c001220b <sendKeyboardToken(KeyboardToken)+0x202>
c00121ed:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00121f2:	6a 01                	push   0x1
c00121f4:	6a 00                	push   0x0
c00121f6:	68 26 1f 01 c0       	push   0xc0011f26
c00121fb:	50                   	push   eax
c00121fc:	e8 7b 69 00 00       	call   c0018b7c <Process::createThread(void (*)(void*), void*, int)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c001220b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001220e:	66 3d 1d 03          	cmp    ax,0x31d
c0012212:	75 06                	jne    c001221a <sendKeyboardToken(KeyboardToken)+0x211>
c0012214:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001221a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001221d:	66 3d 1c 03          	cmp    ax,0x31c
c0012221:	75 06                	jne    c0012229 <sendKeyboardToken(KeyboardToken)+0x220>
c0012223:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222c:	66 3d 1b 03          	cmp    ax,0x31b
c0012230:	75 06                	jne    c0012238 <sendKeyboardToken(KeyboardToken)+0x22f>
c0012232:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223b:	66 3d 1e 03          	cmp    ax,0x31e
c001223f:	75 06                	jne    c0012247 <sendKeyboardToken(KeyboardToken)+0x23e>
c0012241:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224a:	66 3d 1f 03          	cmp    ax,0x31f
c001224e:	75 06                	jne    c0012256 <sendKeyboardToken(KeyboardToken)+0x24d>
c0012250:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012259:	66 3d 1a 03          	cmp    ax,0x31a
c001225d:	75 06                	jne    c0012265 <sendKeyboardToken(KeyboardToken)+0x25c>
c001225f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012265:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012269:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001226c:	83 f0 01             	xor    eax,0x1
c001226f:	84 c0                	test   al,al
c0012271:	74 7b                	je     c00122ee <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012273:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c0012278:	84 c0                	test   al,al
c001227a:	74 43                	je     c00122bf <sendKeyboardToken(KeyboardToken)+0x2b6>
c001227c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012280:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012284:	74 2d                	je     c00122b3 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0012286:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c001228c:	89 d0                	mov    eax,edx
c001228e:	c1 e0 02             	shl    eax,0x2
c0012291:	01 d0                	add    eax,edx
c0012293:	01 c0                	add    eax,eax
c0012295:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c001229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229d:	25 ff ff 00 00       	and    eax,0xffff
c00122a2:	8d 50 d0             	lea    edx,[eax-0x30]
c00122a5:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122aa:	01 d0                	add    eax,edx
c00122ac:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122b1:	eb 71                	jmp    c0012324 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122b3:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122bd:	eb 65                	jmp    c0012324 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122bf:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122c4:	85 c0                	test   eax,eax
c00122c6:	74 1a                	je     c00122e2 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122c8:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122cd:	25 ff 00 00 00       	and    eax,0xff
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 bd fc ff ff       	call   c0011f98 <sendKeyToTerminal(unsigned char)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122e2:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122ec:	eb 36                	jmp    c0012324 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f1:	66 3d 01 01          	cmp    ax,0x101
c00122f5:	75 2d                	jne    c0012324 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122f7:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122fc:	85 c0                	test   eax,eax
c00122fe:	74 1a                	je     c001231a <sendKeyboardToken(KeyboardToken)+0x311>
c0012300:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012305:	25 ff 00 00 00       	and    eax,0xff
c001230a:	83 ec 0c             	sub    esp,0xc
c001230d:	50                   	push   eax
c001230e:	e8 85 fc ff ff       	call   c0011f98 <sendKeyToTerminal(unsigned char)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001231a:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012324:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012327:	83 f0 01             	xor    eax,0x1
c001232a:	84 c0                	test   al,al
c001232c:	74 4e                	je     c001237c <sendKeyboardToken(KeyboardToken)+0x373>
c001232e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012331:	83 f0 01             	xor    eax,0x1
c0012334:	84 c0                	test   al,al
c0012336:	74 44                	je     c001237c <sendKeyboardToken(KeyboardToken)+0x373>
c0012338:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c001233d:	83 f0 01             	xor    eax,0x1
c0012340:	84 c0                	test   al,al
c0012342:	74 38                	je     c001237c <sendKeyboardToken(KeyboardToken)+0x373>
c0012344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012347:	66 83 f8 1f          	cmp    ax,0x1f
c001234b:	76 09                	jbe    c0012356 <sendKeyboardToken(KeyboardToken)+0x34d>
c001234d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012350:	66 83 f8 7e          	cmp    ax,0x7e
c0012354:	76 12                	jbe    c0012368 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012359:	66 83 f8 0a          	cmp    ax,0xa
c001235d:	74 09                	je     c0012368 <sendKeyboardToken(KeyboardToken)+0x35f>
c001235f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012362:	66 83 f8 08          	cmp    ax,0x8
c0012366:	75 14                	jne    c001237c <sendKeyboardToken(KeyboardToken)+0x373>
c0012368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001236b:	25 ff 00 00 00       	and    eax,0xff
c0012370:	83 ec 0c             	sub    esp,0xc
c0012373:	50                   	push   eax
c0012374:	e8 1f fc ff ff       	call   c0011f98 <sendKeyToTerminal(unsigned char)>
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001237f:	83 f0 01             	xor    eax,0x1
c0012382:	84 c0                	test   al,al
c0012384:	74 51                	je     c00123d7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012386:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012389:	83 f0 01             	xor    eax,0x1
c001238c:	84 c0                	test   al,al
c001238e:	74 47                	je     c00123d7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012390:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012395:	84 c0                	test   al,al
c0012397:	74 3e                	je     c00123d7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239c:	66 83 f8 3f          	cmp    ax,0x3f
c00123a0:	76 35                	jbe    c00123d7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a5:	66 83 f8 7f          	cmp    ax,0x7f
c00123a9:	77 2c                	ja     c00123d7 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ae:	88 c2                	mov    dl,al
c00123b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b3:	66 83 f8 5f          	cmp    ax,0x5f
c00123b7:	76 04                	jbe    c00123bd <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123b9:	b0 20                	mov    al,0x20
c00123bb:	eb 02                	jmp    c00123bf <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123bd:	b0 00                	mov    al,0x0
c00123bf:	29 c2                	sub    edx,eax
c00123c1:	88 d0                	mov    al,dl
c00123c3:	83 e8 40             	sub    eax,0x40
c00123c6:	25 ff 00 00 00       	and    eax,0xff
c00123cb:	83 ec 0c             	sub    esp,0xc
c00123ce:	50                   	push   eax
c00123cf:	e8 c4 fb ff ff       	call   c0011f98 <sendKeyToTerminal(unsigned char)>
c00123d4:	83 c4 10             	add    esp,0x10
c00123d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123da:	66 3d 00 03          	cmp    ax,0x300
c00123de:	75 0f                	jne    c00123ef <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123e0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123e3:	83 f0 01             	xor    eax,0x1
c00123e6:	84 c0                	test   al,al
c00123e8:	74 05                	je     c00123ef <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123ea:	e8 02 b0 ff ff       	call   c000d3f1 <doTerminalCycle()>
c00123ef:	90                   	nop
c00123f0:	c9                   	leave  
c00123f1:	c3                   	ret    

c00123f2 <clearInternalKeybuffer(VgaText*)>:
c00123f2:	55                   	push   ebp
c00123f3:	89 e5                	mov    ebp,esp
c00123f5:	83 ec 08             	sub    esp,0x8
c00123f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123fb:	05 34 11 00 00       	add    eax,0x1134
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	50                   	push   eax
c0012404:	e8 d3 e2 fe ff       	call   c00006dc <strlen>
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001240f:	81 c2 34 11 00 00    	add    edx,0x1134
c0012415:	83 ec 04             	sub    esp,0x4
c0012418:	50                   	push   eax
c0012419:	6a 00                	push   0x0
c001241b:	52                   	push   edx
c001241c:	e8 9e e2 fe ff       	call   c00006bf <memset>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	90                   	nop
c0012425:	c9                   	leave  
c0012426:	c3                   	ret    

c0012427 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012427:	55                   	push   ebp
c0012428:	89 e5                	mov    ebp,esp
c001242a:	83 ec 18             	sub    esp,0x18
c001242d:	fb                   	sti    
c001242e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012435:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012439:	74 77                	je     c00124b2 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001243b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001243e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012444:	84 c0                	test   al,al
c0012446:	75 02                	jne    c001244a <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012448:	eb f1                	jmp    c001243b <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001244a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001244d:	8d 50 01             	lea    edx,[eax+0x1]
c0012450:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012453:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012456:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001245c:	88 10                	mov    BYTE PTR [eax],dl
c001245e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012461:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012467:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001246a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001246d:	05 34 11 00 00       	add    eax,0x1134
c0012472:	83 ec 0c             	sub    esp,0xc
c0012475:	50                   	push   eax
c0012476:	e8 61 e2 fe ff       	call   c00006dc <strlen>
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012481:	81 c2 34 11 00 00    	add    edx,0x1134
c0012487:	8d 4a 01             	lea    ecx,[edx+0x1]
c001248a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001248d:	81 c2 34 11 00 00    	add    edx,0x1134
c0012493:	83 ec 04             	sub    esp,0x4
c0012496:	50                   	push   eax
c0012497:	51                   	push   ecx
c0012498:	52                   	push   edx
c0012499:	e8 b3 e1 fe ff       	call   c0000651 <memmove>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124a7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124ab:	75 88                	jne    c0012435 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b0:	eb 03                	jmp    c00124b5 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b5:	c9                   	leave  
c00124b6:	c3                   	ret    
c00124b7:	90                   	nop

c00124b8 <Keyboard::Keyboard(char const*)>:
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124bf:	83 ec 08             	sub    esp,0x8
c00124c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c6:	50                   	push   eax
c00124c7:	e8 48 e3 ff ff       	call   c0010814 <Device::Device(char const*)>
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d8:	89 10                	mov    DWORD PTR [eax],edx
c00124da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124de:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124e8:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c00124ef:	90                   	nop
c00124f0:	83 c4 0c             	add    esp,0xc
c00124f3:	c3                   	ret    

c00124f4 <Keyboard::~Keyboard()>:
c00124f4:	83 ec 0c             	sub    esp,0xc
c00124f7:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012500:	89 10                	mov    DWORD PTR [eax],edx
c0012502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	50                   	push   eax
c001250a:	e8 bb df ff ff       	call   c00104ca <Device::~Device()>
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	90                   	nop
c0012513:	83 c4 0c             	add    esp,0xc
c0012516:	c3                   	ret    
c0012517:	90                   	nop

c0012518 <Keyboard::~Keyboard()>:
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	83 ec 0c             	sub    esp,0xc
c001251e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012522:	e8 cd ff ff ff       	call   c00124f4 <Keyboard::~Keyboard()>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	83 ec 08             	sub    esp,0x8
c001252d:	68 5c 01 00 00       	push   0x15c
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 ae cb ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 c4 0c             	add    esp,0xc
c0012541:	c3                   	ret    

c0012542 <LogicalDisk::close(int, int, void*)>:
c0012542:	83 c8 ff             	or     eax,0xffffffff
c0012545:	c3                   	ret    

c0012546 <LogicalDisk::~LogicalDisk()>:
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c001254e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012552:	89 10                	mov    DWORD PTR [eax],edx
c0012554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012558:	83 ec 0c             	sub    esp,0xc
c001255b:	50                   	push   eax
c001255c:	e8 69 df ff ff       	call   c00104ca <Device::~Device()>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	90                   	nop
c0012565:	83 c4 0c             	add    esp,0xc
c0012568:	c3                   	ret    
c0012569:	90                   	nop

c001256a <LogicalDisk::~LogicalDisk()>:
c001256a:	83 ec 0c             	sub    esp,0xc
c001256d:	83 ec 0c             	sub    esp,0xc
c0012570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012574:	e8 cd ff ff ff       	call   c0012546 <LogicalDisk::~LogicalDisk()>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	83 ec 08             	sub    esp,0x8
c001257f:	68 74 01 00 00       	push   0x174
c0012584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012588:	e8 5c cb ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 c4 0c             	add    esp,0xc
c0012593:	c3                   	ret    

c0012594 <LogicalDisk::open(int, int, void*)>:
c0012594:	83 ec 18             	sub    esp,0x18
c0012597:	68 28 21 02 c0       	push   0xc0022128
c001259c:	e8 9d 34 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c00125a1:	83 c8 ff             	or     eax,0xffffffff
c00125a4:	83 c4 1c             	add    esp,0x1c
c00125a7:	c3                   	ret    

c00125a8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125a8:	53                   	push   ebx
c00125a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125b5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125bb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125c1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125c7:	77 10                	ja     c00125d9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125c9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125cf:	89 d3                	mov    ebx,edx
c00125d1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125d7:	72 05                	jb     c00125de <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125d9:	83 c8 ff             	or     eax,0xffffffff
c00125dc:	89 c2                	mov    edx,eax
c00125de:	5b                   	pop    ebx
c00125df:	c3                   	ret    

c00125e0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125e0:	56                   	push   esi
c00125e1:	83 c8 ff             	or     eax,0xffffffff
c00125e4:	53                   	push   ebx
c00125e5:	89 c2                	mov    edx,eax
c00125e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125f9:	77 27                	ja     c0012622 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125fb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012601:	89 d8                	mov    eax,ebx
c0012603:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012609:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001260e:	89 c2                	mov    edx,eax
c0012610:	73 10                	jae    c0012622 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012612:	89 c8                	mov    eax,ecx
c0012614:	89 da                	mov    edx,ebx
c0012616:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001261c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012622:	5b                   	pop    ebx
c0012623:	5e                   	pop    esi
c0012624:	c3                   	ret    
c0012625:	90                   	nop

c0012626 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012626:	83 ec 1c             	sub    esp,0x1c
c0012629:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012635:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012639:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001263d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012640:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012644:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001264c:	83 ec 08             	sub    esp,0x8
c001264f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012653:	50                   	push   eax
c0012654:	e8 bb e1 ff ff       	call   c0010814 <Device::Device(char const*)>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012665:	89 10                	mov    DWORD PTR [eax],edx
c0012667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012676:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001267d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012681:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001268b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001268f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012693:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012697:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001269d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126ae:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126b4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126c2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126cc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126d6:	90                   	nop
c00126d7:	83 c4 1c             	add    esp,0x1c
c00126da:	c3                   	ret    
c00126db:	90                   	nop

c00126dc <LogicalDisk::assignDriveLetter()>:
c00126dc:	55                   	push   ebp
c00126dd:	57                   	push   edi
c00126de:	56                   	push   esi
c00126df:	53                   	push   ebx
c00126e0:	83 ec 14             	sub    esp,0x14
c00126e3:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126ed:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126f1:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c00126f7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00126fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012701:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012707:	3c 01                	cmp    al,0x1
c0012709:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001270d:	19 c0                	sbb    eax,eax
c001270f:	83 e0 02             	and    eax,0x2
c0012712:	83 c0 41             	add    eax,0x41
c0012715:	0f be e8             	movsx  ebp,al
c0012718:	3c 43                	cmp    al,0x43
c001271a:	75 10                	jne    c001272c <LogicalDisk::assignDriveLetter()+0x50>
c001271c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012723:	75 5d                	jne    c0012782 <LogicalDisk::assignDriveLetter()+0xa6>
c0012725:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001272a:	75 56                	jne    c0012782 <LogicalDisk::assignDriveLetter()+0xa6>
c001272c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001272f:	ba 01 00 00 00       	mov    edx,0x1
c0012734:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012738:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001273c:	d3 e2                	shl    edx,cl
c001273e:	89 d7                	mov    edi,edx
c0012740:	89 d6                	mov    esi,edx
c0012742:	c1 ff 1f             	sar    edi,0x1f
c0012745:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012749:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001274d:	21 f9                	and    ecx,edi
c001274f:	09 d1                	or     ecx,edx
c0012751:	75 2f                	jne    c0012782 <LogicalDisk::assignDriveLetter()+0xa6>
c0012753:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012757:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001275b:	09 f2                	or     edx,esi
c001275d:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012767:	09 fa                	or     edx,edi
c0012769:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001276d:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012773:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012779:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c0012780:	eb 08                	jmp    c001278a <LogicalDisk::assignDriveLetter()+0xae>
c0012782:	40                   	inc    eax
c0012783:	45                   	inc    ebp
c0012784:	3c 5b                	cmp    al,0x5b
c0012786:	75 90                	jne    c0012718 <LogicalDisk::assignDriveLetter()+0x3c>
c0012788:	31 c0                	xor    eax,eax
c001278a:	83 c4 14             	add    esp,0x14
c001278d:	5b                   	pop    ebx
c001278e:	5e                   	pop    esi
c001278f:	5f                   	pop    edi
c0012790:	5d                   	pop    ebp
c0012791:	c3                   	ret    

c0012792 <LogicalDisk::mount()>:
c0012792:	56                   	push   esi
c0012793:	53                   	push   ebx
c0012794:	51                   	push   ecx
c0012795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012799:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c001279f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127a9:	85 db                	test   ebx,ebx
c00127ab:	74 50                	je     c00127fd <LogicalDisk::mount()+0x6b>
c00127ad:	e8 80 62 00 00       	call   c0018a32 <getIRQNestingLevel()>
c00127b2:	52                   	push   edx
c00127b3:	52                   	push   edx
c00127b4:	50                   	push   eax
c00127b5:	68 4c 21 02 c0       	push   0xc002214c
c00127ba:	e8 50 ca ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00127bf:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127c6:	83 c4 0c             	add    esp,0xc
c00127c9:	83 e8 41             	sub    eax,0x41
c00127cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127ce:	50                   	push   eax
c00127cf:	56                   	push   esi
c00127d0:	53                   	push   ebx
c00127d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d4:	83 c4 10             	add    esp,0x10
c00127d7:	84 c0                	test   al,al
c00127d9:	74 08                	je     c00127e3 <LogicalDisk::mount()+0x51>
c00127db:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127e1:	eb 1c                	jmp    c00127ff <LogicalDisk::mount()+0x6d>
c00127e3:	e8 4a 62 00 00       	call   c0018a32 <getIRQNestingLevel()>
c00127e8:	51                   	push   ecx
c00127e9:	51                   	push   ecx
c00127ea:	50                   	push   eax
c00127eb:	68 67 21 02 c0       	push   0xc0022167
c00127f0:	e8 1a ca ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00127f5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127f8:	83 c4 10             	add    esp,0x10
c00127fb:	eb ac                	jmp    c00127a9 <LogicalDisk::mount()+0x17>
c00127fd:	31 c0                	xor    eax,eax
c00127ff:	5a                   	pop    edx
c0012800:	5b                   	pop    ebx
c0012801:	5e                   	pop    esi
c0012802:	c3                   	ret    
c0012803:	90                   	nop

c0012804 <LogicalDisk::unmount()>:
c0012804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012808:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012812:	c3                   	ret    
c0012813:	90                   	nop

c0012814 <LogicalDisk::unassignDriveLetter()>:
c0012814:	57                   	push   edi
c0012815:	56                   	push   esi
c0012816:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012821:	84 c9                	test   cl,cl
c0012823:	75 0f                	jne    c0012834 <LogicalDisk::unassignDriveLetter()+0x20>
c0012825:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c001282d:	5e                   	pop    esi
c001282e:	5f                   	pop    edi
c001282f:	e9 0a 32 00 00       	jmp    c0015a3e <Krnl::panic(char const*)>
c0012834:	83 e9 41             	sub    ecx,0x41
c0012837:	b8 01 00 00 00       	mov    eax,0x1
c001283c:	d3 e0                	shl    eax,cl
c001283e:	89 c7                	mov    edi,eax
c0012840:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012847:	c1 ff 1f             	sar    edi,0x1f
c001284a:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c0012855:	89 fe                	mov    esi,edi
c0012857:	f7 d6                	not    esi
c0012859:	f7 d0                	not    eax
c001285b:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c0012861:	5e                   	pop    esi
c0012862:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c0012868:	5f                   	pop    edi
c0012869:	c3                   	ret    

c001286a <LogicalDisk::read(unsigned long long, int, void*)>:
c001286a:	57                   	push   edi
c001286b:	56                   	push   esi
c001286c:	53                   	push   ebx
c001286d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012875:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001287d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012883:	77 41                	ja     c00128c6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012885:	99                   	cdq    
c0012886:	01 c8                	add    eax,ecx
c0012888:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001288e:	11 da                	adc    edx,ebx
c0012890:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012896:	19 d7                	sbb    edi,edx
c0012898:	72 33                	jb     c00128cd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001289a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128a0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128aa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128ae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128be:	5b                   	pop    ebx
c00128bf:	5e                   	pop    esi
c00128c0:	5f                   	pop    edi
c00128c1:	e9 9a 09 00 00       	jmp    c0013260 <VCache::read(unsigned long long, int, void*)>
c00128c6:	b8 05 00 00 00       	mov    eax,0x5
c00128cb:	eb 05                	jmp    c00128d2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128cd:	b8 07 00 00 00       	mov    eax,0x7
c00128d2:	5b                   	pop    ebx
c00128d3:	5e                   	pop    esi
c00128d4:	5f                   	pop    edi
c00128d5:	c3                   	ret    

c00128d6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00128d6:	57                   	push   edi
c00128d7:	56                   	push   esi
c00128d8:	53                   	push   ebx
c00128d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128ef:	77 41                	ja     c0012932 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128f1:	99                   	cdq    
c00128f2:	01 c8                	add    eax,ecx
c00128f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128fa:	11 da                	adc    edx,ebx
c00128fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012902:	19 d7                	sbb    edi,edx
c0012904:	72 33                	jb     c0012939 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012906:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001290c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012912:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012916:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001291a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012920:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012926:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001292a:	5b                   	pop    ebx
c001292b:	5e                   	pop    esi
c001292c:	5f                   	pop    edi
c001292d:	e9 4a 08 00 00       	jmp    c001317c <VCache::write(unsigned long long, int, void*)>
c0012932:	b8 05 00 00 00       	mov    eax,0x5
c0012937:	eb 05                	jmp    c001293e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012939:	b8 07 00 00 00       	mov    eax,0x7
c001293e:	5b                   	pop    ebx
c001293f:	5e                   	pop    esi
c0012940:	5f                   	pop    edi
c0012941:	c3                   	ret    

c0012942 <Mouse::Mouse(char const*)>:
c0012942:	83 ec 0c             	sub    esp,0xc
c0012945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012950:	50                   	push   eax
c0012951:	e8 be de ff ff       	call   c0010814 <Device::Device(char const*)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c001295e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012962:	89 10                	mov    DWORD PTR [eax],edx
c0012964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012968:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012972:	90                   	nop
c0012973:	83 c4 0c             	add    esp,0xc
c0012976:	c3                   	ret    
c0012977:	90                   	nop

c0012978 <Mouse::~Mouse()>:
c0012978:	83 ec 0c             	sub    esp,0xc
c001297b:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012984:	89 10                	mov    DWORD PTR [eax],edx
c0012986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001298a:	83 ec 0c             	sub    esp,0xc
c001298d:	50                   	push   eax
c001298e:	e8 37 db ff ff       	call   c00104ca <Device::~Device()>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	90                   	nop
c0012997:	83 c4 0c             	add    esp,0xc
c001299a:	c3                   	ret    
c001299b:	90                   	nop

c001299c <Mouse::~Mouse()>:
c001299c:	83 ec 0c             	sub    esp,0xc
c001299f:	83 ec 0c             	sub    esp,0xc
c00129a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a6:	e8 cd ff ff ff       	call   c0012978 <Mouse::~Mouse()>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 58 01 00 00       	push   0x158
c00129b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ba:	e8 2a c7 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	83 c4 0c             	add    esp,0xc
c00129c5:	c3                   	ret    

c00129c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129c6:	55                   	push   ebp
c00129c7:	57                   	push   edi
c00129c8:	56                   	push   esi
c00129c9:	53                   	push   ebx
c00129ca:	81 ec 28 01 00 00    	sub    esp,0x128
c00129d0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129d7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129de:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129e5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129f4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129fb:	e8 06 df ff ff       	call   c0010906 <Device::getName()>
c0012a00:	5a                   	pop    edx
c0012a01:	59                   	pop    ecx
c0012a02:	50                   	push   eax
c0012a03:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a07:	55                   	push   ebp
c0012a08:	e8 51 dd fe ff       	call   c000075e <strcpy>
c0012a0d:	5b                   	pop    ebx
c0012a0e:	58                   	pop    eax
c0012a0f:	68 fc 21 02 c0       	push   0xc00221fc
c0012a14:	55                   	push   ebp
c0012a15:	e8 fb dd fe ff       	call   c0000815 <strcat>
c0012a1a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a21:	e8 b4 c6 ff ff       	call   c000f0da <operator new(unsigned long)>
c0012a26:	83 c4 0c             	add    esp,0xc
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	57                   	push   edi
c0012a2c:	56                   	push   esi
c0012a2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a35:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a3c:	55                   	push   ebp
c0012a3d:	50                   	push   eax
c0012a3e:	e8 e3 fb ff ff       	call   c0012626 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a43:	83 c4 14             	add    esp,0x14
c0012a46:	53                   	push   ebx
c0012a47:	e8 90 fc ff ff       	call   c00126dc <LogicalDisk::assignDriveLetter()>
c0012a4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a4f:	e8 3e fd ff ff       	call   c0012792 <LogicalDisk::mount()>
c0012a54:	58                   	pop    eax
c0012a55:	5a                   	pop    edx
c0012a56:	53                   	push   ebx
c0012a57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a5e:	e8 c1 db ff ff       	call   c0010624 <Device::addChild(Device*)>
c0012a63:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a69:	5b                   	pop    ebx
c0012a6a:	5e                   	pop    esi
c0012a6b:	5f                   	pop    edi
c0012a6c:	5d                   	pop    ebp
c0012a6d:	c3                   	ret    

c0012a6e <createPartitionsForDisk(PhysicalDisk*)>:
c0012a6e:	55                   	push   ebp
c0012a6f:	57                   	push   edi
c0012a70:	56                   	push   esi
c0012a71:	53                   	push   ebx
c0012a72:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a78:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a85:	3d 00 02 00 00       	cmp    eax,0x200
c0012a8a:	74 27                	je     c0012ab3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a8c:	83 ec 10             	sub    esp,0x10
c0012a8f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a95:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a9b:	99                   	cdq    
c0012a9c:	52                   	push   edx
c0012a9d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012aa1:	50                   	push   eax
c0012aa2:	89 fd                	mov    ebp,edi
c0012aa4:	c1 e6 0a             	shl    esi,0xa
c0012aa7:	55                   	push   ebp
c0012aa8:	56                   	push   esi
c0012aa9:	e8 5e ca 00 00       	call   c001f50c <__udivdi3>
c0012aae:	e9 b1 00 00 00       	jmp    c0012b64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ab3:	83 ec 0c             	sub    esp,0xc
c0012ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ab8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012abc:	56                   	push   esi
c0012abd:	6a 01                	push   0x1
c0012abf:	6a 00                	push   0x0
c0012ac1:	6a 00                	push   0x0
c0012ac3:	53                   	push   ebx
c0012ac4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ac7:	83 c4 20             	add    esp,0x20
c0012aca:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ad2:	75 0a                	jne    c0012ade <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ad4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012adc:	74 2c                	je     c0012b0a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ade:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012ae4:	83 ec 10             	sub    esp,0x10
c0012ae7:	89 f7                	mov    edi,esi
c0012ae9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012aef:	c1 ff 1f             	sar    edi,0x1f
c0012af2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012af8:	57                   	push   edi
c0012af9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012afd:	c1 e0 0a             	shl    eax,0xa
c0012b00:	56                   	push   esi
c0012b01:	52                   	push   edx
c0012b02:	50                   	push   eax
c0012b03:	e8 04 ca 00 00       	call   c001f50c <__udivdi3>
c0012b08:	eb 5a                	jmp    c0012b64 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b0a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b11:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b18:	83 e0 7f             	and    eax,0x7f
c0012b1b:	83 e1 7f             	and    ecx,0x7f
c0012b1e:	01 c1                	add    ecx,eax
c0012b20:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b27:	83 e0 7f             	and    eax,0x7f
c0012b2a:	01 c1                	add    ecx,eax
c0012b2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b33:	83 e0 7f             	and    eax,0x7f
c0012b36:	00 c1                	add    cl,al
c0012b38:	74 41                	je     c0012b7b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b3a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b40:	83 ec 10             	sub    esp,0x10
c0012b43:	89 f7                	mov    edi,esi
c0012b45:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b4b:	c1 ff 1f             	sar    edi,0x1f
c0012b4e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b54:	57                   	push   edi
c0012b55:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b59:	c1 e0 0a             	shl    eax,0xa
c0012b5c:	56                   	push   esi
c0012b5d:	52                   	push   edx
c0012b5e:	50                   	push   eax
c0012b5f:	e8 a8 c9 00 00       	call   c001f50c <__udivdi3>
c0012b64:	83 c4 14             	add    esp,0x14
c0012b67:	52                   	push   edx
c0012b68:	50                   	push   eax
c0012b69:	6a 00                	push   0x0
c0012b6b:	6a 00                	push   0x0
c0012b6d:	53                   	push   ebx
c0012b6e:	e8 53 fe ff ff       	call   c00129c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b73:	83 c4 20             	add    esp,0x20
c0012b76:	e9 79 01 00 00       	jmp    c0012cf4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b7b:	89 f0                	mov    eax,esi
c0012b7d:	31 f6                	xor    esi,esi
c0012b7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b86:	75 02                	jne    c0012b8a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b88:	89 f1                	mov    ecx,esi
c0012b8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b91:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b98:	c1 e2 08             	shl    edx,0x8
c0012b9b:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012ba3:	c1 e7 10             	shl    edi,0x10
c0012ba6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bae:	09 fa                	or     edx,edi
c0012bb0:	83 c0 10             	add    eax,0x10
c0012bb3:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bba:	09 fa                	or     edx,edi
c0012bbc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bc3:	c1 e7 18             	shl    edi,0x18
c0012bc6:	09 fa                	or     edx,edi
c0012bc8:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bcc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bd3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bda:	c1 e7 10             	shl    edi,0x10
c0012bdd:	c1 e2 08             	shl    edx,0x8
c0012be0:	09 fa                	or     edx,edi
c0012be2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012be9:	09 fa                	or     edx,edi
c0012beb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012bf2:	c1 e7 18             	shl    edi,0x18
c0012bf5:	09 fa                	or     edx,edi
c0012bf7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012bfb:	46                   	inc    esi
c0012bfc:	83 fe 04             	cmp    esi,0x4
c0012bff:	0f 85 7a ff ff ff    	jne    c0012b7f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c09:	83 f0 01             	xor    eax,0x1
c0012c0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c10:	75 57                	jne    c0012c69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c16:	83 f0 01             	xor    eax,0x1
c0012c19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c1d:	75 4a                	jne    c0012c69 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c25:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c29:	89 f7                	mov    edi,esi
c0012c2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c33:	c1 ff 1f             	sar    edi,0x1f
c0012c36:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c3e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c44:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c4a:	57                   	push   edi
c0012c4b:	56                   	push   esi
c0012c4c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c50:	c1 e0 0a             	shl    eax,0xa
c0012c53:	52                   	push   edx
c0012c54:	50                   	push   eax
c0012c55:	e8 b2 c8 00 00       	call   c001f50c <__udivdi3>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c65:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c69:	84 c9                	test   cl,cl
c0012c6b:	74 53                	je     c0012cc0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c6d:	0f b6 c9             	movzx  ecx,cl
c0012c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c80:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c84:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c88:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c9c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012ca0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012ca4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012ca8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cac:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cb4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cb8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cbc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cc0:	31 ed                	xor    ebp,ebp
c0012cc2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cc6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cca:	89 f8                	mov    eax,edi
c0012ccc:	09 f0                	or     eax,esi
c0012cce:	74 1e                	je     c0012cee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cd0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cd4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cd8:	89 d1                	mov    ecx,edx
c0012cda:	09 c1                	or     ecx,eax
c0012cdc:	74 10                	je     c0012cee <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cde:	83 ec 0c             	sub    esp,0xc
c0012ce1:	57                   	push   edi
c0012ce2:	56                   	push   esi
c0012ce3:	52                   	push   edx
c0012ce4:	50                   	push   eax
c0012ce5:	53                   	push   ebx
c0012ce6:	e8 db fc ff ff       	call   c00129c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012ceb:	83 c4 20             	add    esp,0x20
c0012cee:	45                   	inc    ebp
c0012cef:	83 fd 04             	cmp    ebp,0x4
c0012cf2:	75 ce                	jne    c0012cc2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cf4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012cfa:	5b                   	pop    ebx
c0012cfb:	5e                   	pop    esi
c0012cfc:	5f                   	pop    edi
c0012cfd:	5d                   	pop    ebp
c0012cfe:	c3                   	ret    
c0012cff:	90                   	nop

c0012d00 <Timer::Timer(char const*)>:
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d07:	83 ec 08             	sub    esp,0x8
c0012d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0e:	50                   	push   eax
c0012d0f:	e8 00 db ff ff       	call   c0010814 <Device::Device(char const*)>
c0012d14:	83 c4 10             	add    esp,0x10
c0012d17:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d20:	89 10                	mov    DWORD PTR [eax],edx
c0012d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d26:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d30:	90                   	nop
c0012d31:	83 c4 0c             	add    esp,0xc
c0012d34:	c3                   	ret    
c0012d35:	90                   	nop

c0012d36 <Timer::~Timer()>:
c0012d36:	83 ec 0c             	sub    esp,0xc
c0012d39:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d42:	89 10                	mov    DWORD PTR [eax],edx
c0012d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	50                   	push   eax
c0012d4c:	e8 79 d7 ff ff       	call   c00104ca <Device::~Device()>
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	90                   	nop
c0012d55:	83 c4 0c             	add    esp,0xc
c0012d58:	c3                   	ret    
c0012d59:	90                   	nop

c0012d5a <Timer::~Timer()>:
c0012d5a:	83 ec 0c             	sub    esp,0xc
c0012d5d:	83 ec 0c             	sub    esp,0xc
c0012d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d64:	e8 cd ff ff ff       	call   c0012d36 <Timer::~Timer()>
c0012d69:	83 c4 10             	add    esp,0x10
c0012d6c:	83 ec 08             	sub    esp,0x8
c0012d6f:	68 5c 01 00 00       	push   0x15c
c0012d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d78:	e8 6c c3 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 c4 0c             	add    esp,0xc
c0012d83:	c3                   	ret    

c0012d84 <Timer::read()>:
c0012d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d8e:	c3                   	ret    

c0012d8f <timerHandler(unsigned long long)>:
c0012d8f:	55                   	push   ebp
c0012d90:	57                   	push   edi
c0012d91:	56                   	push   esi
c0012d92:	53                   	push   ebx
c0012d93:	83 ec 0c             	sub    esp,0xc
c0012d96:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d9a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d9e:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012da4:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012daa:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012db1:	0f 84 07 01 00 00    	je     c0012ebe <timerHandler(unsigned long long)+0x12f>
c0012db7:	e8 b2 5c 00 00       	call   c0018a6e <lockStuff()>
c0012dbc:	83 ec 0c             	sub    esp,0xc
c0012dbf:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dc4:	e8 17 ce 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dc9:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012dd0:	89 c3                	mov    ebx,eax
c0012dd2:	e8 11 ce 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012dd7:	83 c4 10             	add    esp,0x10
c0012dda:	84 c0                	test   al,al
c0012ddc:	74 60                	je     c0012e3e <timerHandler(unsigned long long)+0xaf>
c0012dde:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012de4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012de7:	85 c0                	test   eax,eax
c0012de9:	0f 85 91 00 00 00    	jne    c0012e80 <timerHandler(unsigned long long)+0xf1>
c0012def:	e9 be 00 00 00       	jmp    c0012eb2 <timerHandler(unsigned long long)+0x123>
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	55                   	push   ebp
c0012df8:	e8 6e 62 00 00       	call   c001906b <unblockTask(ThreadControlBlock*)>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	39 eb                	cmp    ebx,ebp
c0012e02:	75 12                	jne    c0012e16 <timerHandler(unsigned long long)+0x87>
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e0c:	e8 cf cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e11:	89 c3                	mov    ebx,eax
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	83 ec 0c             	sub    esp,0xc
c0012e19:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e1e:	e8 c5 cd 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e23:	83 c4 10             	add    esp,0x10
c0012e26:	84 c0                	test   al,al
c0012e28:	75 b4                	jne    c0012dde <timerHandler(unsigned long long)+0x4f>
c0012e2a:	83 ec 0c             	sub    esp,0xc
c0012e2d:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e32:	e8 a9 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	39 d8                	cmp    eax,ebx
c0012e3c:	74 a0                	je     c0012dde <timerHandler(unsigned long long)+0x4f>
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e46:	e8 95 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e4b:	89 c5                	mov    ebp,eax
c0012e4d:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e54:	e8 ab cd 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e5f:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e64:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e6a:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e6d:	19 c8                	sbb    eax,ecx
c0012e6f:	73 83                	jae    c0012df4 <timerHandler(unsigned long long)+0x65>
c0012e71:	50                   	push   eax
c0012e72:	50                   	push   eax
c0012e73:	55                   	push   ebp
c0012e74:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e79:	e8 34 ce 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e7e:	eb 93                	jmp    c0012e13 <timerHandler(unsigned long long)+0x84>
c0012e80:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e87:	74 29                	je     c0012eb2 <timerHandler(unsigned long long)+0x123>
c0012e89:	39 c6                	cmp    esi,eax
c0012e8b:	bb 00 00 00 00       	mov    ebx,0x0
c0012e90:	19 df                	sbb    edi,ebx
c0012e92:	72 19                	jb     c0012ead <timerHandler(unsigned long long)+0x11e>
c0012e94:	e8 ae 5b 00 00       	call   c0018a47 <lockScheduler()>
c0012e99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e9e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012ea1:	e8 ea 5e 00 00       	call   c0018d90 <schedule()>
c0012ea6:	e8 9e 5b 00 00       	call   c0018a49 <unlockScheduler()>
c0012eab:	eb 05                	jmp    c0012eb2 <timerHandler(unsigned long long)+0x123>
c0012ead:	29 f0                	sub    eax,esi
c0012eaf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012eb2:	83 c4 0c             	add    esp,0xc
c0012eb5:	5b                   	pop    ebx
c0012eb6:	5e                   	pop    esi
c0012eb7:	5f                   	pop    edi
c0012eb8:	5d                   	pop    ebp
c0012eb9:	e9 57 5f 00 00       	jmp    c0018e15 <unlockStuff()>
c0012ebe:	83 c4 0c             	add    esp,0xc
c0012ec1:	5b                   	pop    ebx
c0012ec2:	5e                   	pop    esi
c0012ec3:	5f                   	pop    edi
c0012ec4:	5d                   	pop    ebp
c0012ec5:	c3                   	ret    

c0012ec6 <setupTimer(int)>:
c0012ec6:	57                   	push   edi
c0012ec7:	56                   	push   esi
c0012ec8:	53                   	push   ebx
c0012ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ecd:	e8 fd 19 00 00       	call   c00148cf <getCPUNumber()>
c0012ed2:	85 c0                	test   eax,eax
c0012ed4:	74 32                	je     c0012f08 <setupTimer(int)+0x42>
c0012ed6:	83 ec 0c             	sub    esp,0xc
c0012ed9:	68 60 01 00 00       	push   0x160
c0012ede:	e8 f7 c1 ff ff       	call   c000f0da <operator new(unsigned long)>
c0012ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee6:	89 c3                	mov    ebx,eax
c0012ee8:	e8 a7 c0 00 00       	call   c001ef94 <APICTimer::APICTimer()>
c0012eed:	6a 00                	push   0x0
c0012eef:	6a 00                	push   0x0
c0012ef1:	56                   	push   esi
c0012ef2:	53                   	push   ebx
c0012ef3:	e8 96 bf 00 00       	call   c001ee8e <APICTimer::open(int, int, void*)>
c0012ef8:	83 c4 20             	add    esp,0x20
c0012efb:	e8 d2 19 00 00       	call   c00148d2 <thisCPU()>
c0012f00:	56                   	push   esi
c0012f01:	56                   	push   esi
c0012f02:	53                   	push   ebx
c0012f03:	e9 96 00 00 00       	jmp    c0012f9e <setupTimer(int)+0xd8>
c0012f08:	e8 c5 19 00 00       	call   c00148d2 <thisCPU()>
c0012f0d:	83 ec 0c             	sub    esp,0xc
c0012f10:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f16:	e8 eb d9 ff ff       	call   c0010906 <Device::getName()>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f21:	0f 85 87 00 00 00    	jne    c0012fae <setupTimer(int)+0xe8>
c0012f27:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f2c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f33:	74 79                	je     c0012fae <setupTimer(int)+0xe8>
c0012f35:	83 ec 0c             	sub    esp,0xc
c0012f38:	68 5c 01 00 00       	push   0x15c
c0012f3d:	e8 98 c1 ff ff       	call   c000f0da <operator new(unsigned long)>
c0012f42:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f45:	89 c3                	mov    ebx,eax
c0012f47:	e8 a4 c1 00 00       	call   c001f0f0 <PIT::PIT()>
c0012f4c:	59                   	pop    ecx
c0012f4d:	5f                   	pop    edi
c0012f4e:	53                   	push   ebx
c0012f4f:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f55:	e8 ca d6 ff ff       	call   c0010624 <Device::addChild(Device*)>
c0012f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f5c:	6a 00                	push   0x0
c0012f5e:	6a 00                	push   0x0
c0012f60:	56                   	push   esi
c0012f61:	53                   	push   ebx
c0012f62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f65:	83 c4 14             	add    esp,0x14
c0012f68:	68 60 01 00 00       	push   0x160
c0012f6d:	e8 68 c1 ff ff       	call   c000f0da <operator new(unsigned long)>
c0012f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f75:	89 c7                	mov    edi,eax
c0012f77:	e8 18 c0 00 00       	call   c001ef94 <APICTimer::APICTimer()>
c0012f7c:	6a 00                	push   0x0
c0012f7e:	6a 00                	push   0x0
c0012f80:	56                   	push   esi
c0012f81:	57                   	push   edi
c0012f82:	e8 07 bf 00 00       	call   c001ee8e <APICTimer::open(int, int, void*)>
c0012f87:	83 c4 20             	add    esp,0x20
c0012f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f8c:	6a 00                	push   0x0
c0012f8e:	6a 00                	push   0x0
c0012f90:	6a 00                	push   0x0
c0012f92:	53                   	push   ebx
c0012f93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f96:	e8 37 19 00 00       	call   c00148d2 <thisCPU()>
c0012f9b:	5a                   	pop    edx
c0012f9c:	59                   	pop    ecx
c0012f9d:	57                   	push   edi
c0012f9e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fa4:	e8 7b d6 ff ff       	call   c0010624 <Device::addChild(Device*)>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	eb 33                	jmp    c0012fe1 <setupTimer(int)+0x11b>
c0012fae:	83 ec 0c             	sub    esp,0xc
c0012fb1:	68 5c 01 00 00       	push   0x15c
c0012fb6:	e8 1f c1 ff ff       	call   c000f0da <operator new(unsigned long)>
c0012fbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fbe:	89 c3                	mov    ebx,eax
c0012fc0:	e8 2b c1 00 00       	call   c001f0f0 <PIT::PIT()>
c0012fc5:	58                   	pop    eax
c0012fc6:	5a                   	pop    edx
c0012fc7:	53                   	push   ebx
c0012fc8:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fce:	e8 51 d6 ff ff       	call   c0010624 <Device::addChild(Device*)>
c0012fd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fd5:	6a 00                	push   0x0
c0012fd7:	6a 00                	push   0x0
c0012fd9:	56                   	push   esi
c0012fda:	53                   	push   ebx
c0012fdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fde:	83 c4 20             	add    esp,0x20
c0012fe1:	89 d8                	mov    eax,ebx
c0012fe3:	5b                   	pop    ebx
c0012fe4:	5e                   	pop    esi
c0012fe5:	5f                   	pop    edi
c0012fe6:	c3                   	ret    
c0012fe7:	90                   	nop

c0012fe8 <VCache::VCache(PhysicalDisk*)>:
c0012fe8:	53                   	push   ebx
c0012fe9:	83 ec 08             	sub    esp,0x8
c0012fec:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0012ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff5:	89 10                	mov    DWORD PTR [eax],edx
c0012ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013006:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001300d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013011:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0013018:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001301f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013023:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001302a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013035:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013040:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	6a 10                	push   0x10
c0013049:	e8 8c c0 ff ff       	call   c000f0da <operator new(unsigned long)>
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	89 c3                	mov    ebx,eax
c0013053:	83 ec 0c             	sub    esp,0xc
c0013056:	53                   	push   ebx
c0013057:	e8 0e 5b 00 00       	call   c0018b6a <Mutex::Mutex()>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013063:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001306e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013075:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001307c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013080:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0013086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001308d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013091:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0013097:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001309d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130a1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130a4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ab:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130b9:	c1 e0 06             	shl    eax,0x6
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	50                   	push   eax
c00130c0:	e8 18 8f ff ff       	call   c000bfdd <malloc>
c00130c5:	83 c4 10             	add    esp,0x10
c00130c8:	89 c2                	mov    edx,eax
c00130ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130d1:	90                   	nop
c00130d2:	83 c4 08             	add    esp,0x8
c00130d5:	5b                   	pop    ebx
c00130d6:	c3                   	ret    
c00130d7:	90                   	nop

c00130d8 <VCache::writeWriteBuffer()>:
c00130d8:	53                   	push   ebx
c00130d9:	83 ec 14             	sub    esp,0x14
c00130dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00130e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130f1:	50                   	push   eax
c00130f2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130f5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00130fc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013103:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013107:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001310e:	83 c4 28             	add    esp,0x28
c0013111:	5b                   	pop    ebx
c0013112:	c3                   	ret    
c0013113:	90                   	nop

c0013114 <VCache::~VCache()>:
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	ba 40 22 02 c0       	mov    edx,0xc0022240
c001311c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013120:	89 10                	mov    DWORD PTR [eax],edx
c0013122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013126:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013129:	84 c0                	test   al,al
c001312b:	74 0f                	je     c001313c <VCache::~VCache()+0x28>
c001312d:	83 ec 0c             	sub    esp,0xc
c0013130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013134:	e8 9f ff ff ff       	call   c00130d8 <VCache::writeWriteBuffer()>
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013140:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013143:	83 ec 0c             	sub    esp,0xc
c0013146:	50                   	push   eax
c0013147:	e8 a1 8e ff ff       	call   c000bfed <free>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	90                   	nop
c0013150:	83 c4 0c             	add    esp,0xc
c0013153:	c3                   	ret    

c0013154 <VCache::~VCache()>:
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	83 ec 0c             	sub    esp,0xc
c001315a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001315e:	e8 b1 ff ff ff       	call   c0013114 <VCache::~VCache()>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	83 ec 08             	sub    esp,0x8
c0013169:	6a 30                	push   0x30
c001316b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316f:	e8 75 bf ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	83 c4 0c             	add    esp,0xc
c001317a:	c3                   	ret    
c001317b:	90                   	nop

c001317c <VCache::write(unsigned long long, int, void*)>:
c001317c:	55                   	push   ebp
c001317d:	57                   	push   edi
c001317e:	56                   	push   esi
c001317f:	53                   	push   ebx
c0013180:	83 ec 28             	sub    esp,0x28
c0013183:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013187:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001318b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001318f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0013193:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013196:	e8 3d 5e 00 00       	call   c0018fd8 <Semaphore::acquire()>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131a2:	74 66                	je     c001320a <VCache::write(unsigned long long, int, void*)+0x8e>
c00131a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131a7:	99                   	cdq    
c00131a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131ac:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131af:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131b2:	89 c1                	mov    ecx,eax
c00131b4:	31 f1                	xor    ecx,esi
c00131b6:	89 d0                	mov    eax,edx
c00131b8:	31 f8                	xor    eax,edi
c00131ba:	89 ca                	mov    edx,ecx
c00131bc:	09 c2                	or     edx,eax
c00131be:	75 3e                	jne    c00131fe <VCache::write(unsigned long long, int, void*)+0x82>
c00131c0:	83 fd 01             	cmp    ebp,0x1
c00131c3:	75 39                	jne    c00131fe <VCache::write(unsigned long long, int, void*)+0x82>
c00131c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131ce:	51                   	push   ecx
c00131cf:	50                   	push   eax
c00131d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131d8:	0f af c8             	imul   ecx,eax
c00131db:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131de:	51                   	push   ecx
c00131df:	e8 a5 d4 fe ff       	call   c0000689 <memcpy>
c00131e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131e7:	83 c4 10             	add    esp,0x10
c00131ea:	40                   	inc    eax
c00131eb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131ee:	83 f8 40             	cmp    eax,0x40
c00131f1:	75 57                	jne    c001324a <VCache::write(unsigned long long, int, void*)+0xce>
c00131f3:	83 ec 0c             	sub    esp,0xc
c00131f6:	53                   	push   ebx
c00131f7:	e8 dc fe ff ff       	call   c00130d8 <VCache::writeWriteBuffer()>
c00131fc:	eb 34                	jmp    c0013232 <VCache::write(unsigned long long, int, void*)+0xb6>
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	53                   	push   ebx
c0013202:	e8 d1 fe ff ff       	call   c00130d8 <VCache::writeWriteBuffer()>
c0013207:	83 c4 10             	add    esp,0x10
c001320a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001320d:	83 fd 3f             	cmp    ebp,0x3f
c0013210:	7f 25                	jg     c0013237 <VCache::write(unsigned long long, int, void*)+0xbb>
c0013212:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013215:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013218:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001321b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001321f:	52                   	push   edx
c0013220:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013226:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001322a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001322d:	e8 57 d4 fe ff       	call   c0000689 <memcpy>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	eb 13                	jmp    c001324a <VCache::write(unsigned long long, int, void*)+0xce>
c0013237:	83 ec 0c             	sub    esp,0xc
c001323a:	8b 10                	mov    edx,DWORD PTR [eax]
c001323c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013240:	55                   	push   ebp
c0013241:	57                   	push   edi
c0013242:	56                   	push   esi
c0013243:	50                   	push   eax
c0013244:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013247:	83 c4 20             	add    esp,0x20
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013250:	e8 0f 63 00 00       	call   c0019564 <Semaphore::release()>
c0013255:	83 c4 2c             	add    esp,0x2c
c0013258:	5b                   	pop    ebx
c0013259:	31 c0                	xor    eax,eax
c001325b:	5e                   	pop    esi
c001325c:	5f                   	pop    edi
c001325d:	5d                   	pop    ebp
c001325e:	c3                   	ret    
c001325f:	90                   	nop

c0013260 <VCache::read(unsigned long long, int, void*)>:
c0013260:	57                   	push   edi
c0013261:	56                   	push   esi
c0013262:	53                   	push   ebx
c0013263:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013267:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001326b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001326f:	83 ec 0c             	sub    esp,0xc
c0013272:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013275:	e8 5e 5d 00 00       	call   c0018fd8 <Semaphore::acquire()>
c001327a:	83 c4 10             	add    esp,0x10
c001327d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013281:	74 0c                	je     c001328f <VCache::read(unsigned long long, int, void*)+0x2f>
c0013283:	83 ec 0c             	sub    esp,0xc
c0013286:	53                   	push   ebx
c0013287:	e8 4c fe ff ff       	call   c00130d8 <VCache::writeWriteBuffer()>
c001328c:	83 c4 10             	add    esp,0x10
c001328f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	8b 10                	mov    edx,DWORD PTR [eax]
c0013297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001329b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001329f:	57                   	push   edi
c00132a0:	56                   	push   esi
c00132a1:	50                   	push   eax
c00132a2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132a5:	83 c4 14             	add    esp,0x14
c00132a8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132ab:	e8 b4 62 00 00       	call   c0019564 <Semaphore::release()>
c00132b0:	83 c4 10             	add    esp,0x10
c00132b3:	5b                   	pop    ebx
c00132b4:	31 c0                	xor    eax,eax
c00132b6:	5e                   	pop    esi
c00132b7:	5f                   	pop    edi
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop

c00132ba <Video::putrect(int, int, int, int, unsigned int)>:
c00132ba:	55                   	push   ebp
c00132bb:	57                   	push   edi
c00132bc:	56                   	push   esi
c00132bd:	53                   	push   ebx
c00132be:	83 ec 1c             	sub    esp,0x1c
c00132c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132cd:	01 e8                	add    eax,ebp
c00132cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132db:	01 df                	add    edi,ebx
c00132dd:	39 fb                	cmp    ebx,edi
c00132df:	7d 1b                	jge    c00132fc <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132e1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132e5:	7d 12                	jge    c00132f9 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132e7:	8b 16                	mov    edx,DWORD PTR [esi]
c00132e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132ed:	53                   	push   ebx
c00132ee:	55                   	push   ebp
c00132ef:	45                   	inc    ebp
c00132f0:	56                   	push   esi
c00132f1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	eb e8                	jmp    c00132e1 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132f9:	43                   	inc    ebx
c00132fa:	eb e1                	jmp    c00132dd <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00132fc:	83 c4 1c             	add    esp,0x1c
c00132ff:	5b                   	pop    ebx
c0013300:	5e                   	pop    esi
c0013301:	5f                   	pop    edi
c0013302:	5d                   	pop    ebp
c0013303:	c3                   	ret    

c0013304 <Video::blit(unsigned int*, int, int, int, int)>:
c0013304:	55                   	push   ebp
c0013305:	57                   	push   edi
c0013306:	56                   	push   esi
c0013307:	53                   	push   ebx
c0013308:	83 ec 1c             	sub    esp,0x1c
c001330b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001330f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013313:	85 c0                	test   eax,eax
c0013315:	79 02                	jns    c0013319 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013317:	31 c0                	xor    eax,eax
c0013319:	c1 e0 02             	shl    eax,0x2
c001331c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013320:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013324:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013328:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001332c:	39 d8                	cmp    eax,ebx
c001332e:	7e 49                	jle    c0013379 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013330:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013336:	7c 41                	jl     c0013379 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013338:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001333c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013340:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013344:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013348:	39 f9                	cmp    ecx,edi
c001334a:	7e 22                	jle    c001336e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001334c:	83 c5 04             	add    ebp,0x4
c001334f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013355:	7c 14                	jl     c001336b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013357:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013359:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001335c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013360:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013364:	56                   	push   esi
c0013365:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	47                   	inc    edi
c001336c:	eb d2                	jmp    c0013340 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001336e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013372:	43                   	inc    ebx
c0013373:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013377:	eb ab                	jmp    c0013324 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013379:	83 c4 1c             	add    esp,0x1c
c001337c:	5b                   	pop    ebx
c001337d:	5e                   	pop    esi
c001337e:	5f                   	pop    edi
c001337f:	5d                   	pop    ebp
c0013380:	c3                   	ret    
c0013381:	90                   	nop

c0013382 <Video::clearScreen(unsigned int)>:
c0013382:	57                   	push   edi
c0013383:	56                   	push   esi
c0013384:	53                   	push   ebx
c0013385:	31 db                	xor    ebx,ebx
c0013387:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001338b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013391:	7e 1f                	jle    c00133b2 <Video::clearScreen(unsigned int)+0x30>
c0013393:	31 ff                	xor    edi,edi
c0013395:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001339b:	7e 12                	jle    c00133af <Video::clearScreen(unsigned int)+0x2d>
c001339d:	8b 06                	mov    eax,DWORD PTR [esi]
c001339f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133a3:	53                   	push   ebx
c00133a4:	57                   	push   edi
c00133a5:	47                   	inc    edi
c00133a6:	56                   	push   esi
c00133a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	eb e6                	jmp    c0013395 <Video::clearScreen(unsigned int)+0x13>
c00133af:	43                   	inc    ebx
c00133b0:	eb d9                	jmp    c001338b <Video::clearScreen(unsigned int)+0x9>
c00133b2:	5b                   	pop    ebx
c00133b3:	5e                   	pop    esi
c00133b4:	5f                   	pop    edi
c00133b5:	c3                   	ret    

c00133b6 <Video::putpixel(int, int, unsigned int)>:
c00133b6:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133be:	e9 4c be ff ff       	jmp    c000f20f <Dbg::kprintf(char const*, ...)>
c00133c3:	90                   	nop

c00133c4 <Video::Video(char const*)>:
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cb:	83 ec 08             	sub    esp,0x8
c00133ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d2:	50                   	push   eax
c00133d3:	e8 3c d4 ff ff       	call   c0010814 <Device::Device(char const*)>
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e4:	89 10                	mov    DWORD PTR [eax],edx
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133f4:	90                   	nop
c00133f5:	83 c4 0c             	add    esp,0xc
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Video::~Video()>:
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	89 10                	mov    DWORD PTR [eax],edx
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	50                   	push   eax
c0013410:	e8 b5 d0 ff ff       	call   c00104ca <Device::~Device()>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	90                   	nop
c0013419:	83 c4 0c             	add    esp,0xc
c001341c:	c3                   	ret    
c001341d:	90                   	nop

c001341e <Video::~Video()>:
c001341e:	83 ec 0c             	sub    esp,0xc
c0013421:	83 ec 0c             	sub    esp,0xc
c0013424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013428:	e8 cd ff ff ff       	call   c00133fa <Video::~Video()>
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	83 ec 08             	sub    esp,0x8
c0013433:	68 64 01 00 00       	push   0x164
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 a8 bc ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 c4 0c             	add    esp,0xc
c0013447:	c3                   	ret    

c0013448 <Video::isMonochrome()>:
c0013448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013452:	c3                   	ret    
c0013453:	90                   	nop

c0013454 <Video::getWidth()>:
c0013454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013458:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001345e:	c3                   	ret    
c001345f:	90                   	nop

c0013460 <Video::getHeight()>:
c0013460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013464:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001346a:	c3                   	ret    
c001346b:	90                   	nop

c001346c <Video::drawCursor(int, int, unsigned char*, int)>:
c001346c:	55                   	push   ebp
c001346d:	57                   	push   edi
c001346e:	56                   	push   esi
c001346f:	53                   	push   ebx
c0013470:	83 ec 2c             	sub    esp,0x2c
c0013473:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013477:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001347b:	83 f8 01             	cmp    eax,0x1
c001347e:	19 c9                	sbb    ecx,ecx
c0013480:	31 db                	xor    ebx,ebx
c0013482:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013486:	89 cd                	mov    ebp,ecx
c0013488:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013490:	f7 d5                	not    ebp
c0013492:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013498:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001349c:	01 d8                	add    eax,ebx
c001349e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134a2:	56                   	push   esi
c00134a3:	e8 b8 ff ff ff       	call   c0013460 <Video::getHeight()>
c00134a8:	59                   	pop    ecx
c00134a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134ad:	7e 70                	jle    c001351f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134cd:	89 f8                	mov    eax,edi
c00134cf:	83 c0 20             	add    eax,0x20
c00134d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d6:	56                   	push   esi
c00134d7:	e8 78 ff ff ff       	call   c0013454 <Video::getWidth()>
c00134dc:	5a                   	pop    edx
c00134dd:	39 c7                	cmp    edi,eax
c00134df:	7d 34                	jge    c0013515 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134e6:	74 05                	je     c00134ed <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00134ea:	55                   	push   ebp
c00134eb:	eb 0d                	jmp    c00134fa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134f2:	74 12                	je     c0013506 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00134f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134fe:	57                   	push   edi
c00134ff:	56                   	push   esi
c0013500:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	47                   	inc    edi
c0013507:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001350b:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001350f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013513:	75 c1                	jne    c00134d6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013515:	43                   	inc    ebx
c0013516:	83 fb 20             	cmp    ebx,0x20
c0013519:	0f 85 79 ff ff ff    	jne    c0013498 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001351f:	83 c4 2c             	add    esp,0x2c
c0013522:	5b                   	pop    ebx
c0013523:	5e                   	pop    esi
c0013524:	5f                   	pop    edi
c0013525:	5d                   	pop    ebp
c0013526:	c3                   	ret    
c0013527:	90                   	nop

c0013528 <ACPI::close(int, int, void*)>:
c0013528:	83 ec 1c             	sub    esp,0x1c
c001352b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013533:	74 0a                	je     c001353f <ACPI::close(int, int, void*)+0x17>
c0013535:	b8 00 00 00 00       	mov    eax,0x0
c001353a:	e9 9e 00 00 00       	jmp    c00135dd <ACPI::close(int, int, void*)+0xb5>
c001353f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013544:	75 37                	jne    c001357d <ACPI::close(int, int, void*)+0x55>
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	68 98 22 02 c0       	push   0xc0022298
c001354e:	e8 bc bc ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c001355b:	85 c0                	test   eax,eax
c001355d:	74 07                	je     c0013566 <ACPI::close(int, int, void*)+0x3e>
c001355f:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013564:	ff d0                	call   eax
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	68 6c 23 02 c0       	push   0xc002236c
c001356e:	e8 cb 24 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0013573:	83 c4 10             	add    esp,0x10
c0013576:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001357b:	eb 60                	jmp    c00135dd <ACPI::close(int, int, void*)+0xb5>
c001357d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013582:	75 54                	jne    c00135d8 <ACPI::close(int, int, void*)+0xb0>
c0013584:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c0013589:	85 c0                	test   eax,eax
c001358b:	74 07                	je     c0013594 <ACPI::close(int, int, void*)+0x6c>
c001358d:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c0013592:	ff d0                	call   eax
c0013594:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013599:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001359d:	25 ff 00 00 00       	and    eax,0xff
c00135a2:	83 e0 02             	and    eax,0x2
c00135a5:	74 1c                	je     c00135c3 <ACPI::close(int, int, void*)+0x9b>
c00135a7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b2:	89 c2                	mov    edx,eax
c00135b4:	ec                   	in     al,dx
c00135b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135b9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135c1:	eb d6                	jmp    c0013599 <ACPI::close(int, int, void*)+0x71>
c00135c3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135ca:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135cf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135d7:	ee                   	out    dx,al
c00135d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135dd:	83 c4 1c             	add    esp,0x1c
c00135e0:	c3                   	ret    

c00135e1 <findRSDP()>:
c00135e1:	83 ec 1c             	sub    esp,0x1c
c00135e4:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135ef:	83 e0 04             	and    eax,0x4
c00135f2:	84 c0                	test   al,al
c00135f4:	75 07                	jne    c00135fd <findRSDP()+0x1c>
c00135f6:	b8 00 00 00 00       	mov    eax,0x0
c00135fb:	eb 6a                	jmp    c0013667 <findRSDP()+0x86>
c00135fd:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013602:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013607:	7f 1b                	jg     c0013624 <findRSDP()+0x43>
c0013609:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001360e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013614:	83 e2 fb             	and    edx,0xfffffffb
c0013617:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001361d:	b8 00 00 00 00       	mov    eax,0x0
c0013622:	eb 43                	jmp    c0013667 <findRSDP()+0x86>
c0013624:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001362c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013634:	77 2c                	ja     c0013662 <findRSDP()+0x81>
c0013636:	83 ec 04             	sub    esp,0x4
c0013639:	6a 08                	push   0x8
c001363b:	68 a5 22 02 c0       	push   0xc00222a5
c0013640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013644:	e8 dd cf fe ff       	call   c0000626 <memcmp>
c0013649:	83 c4 10             	add    esp,0x10
c001364c:	85 c0                	test   eax,eax
c001364e:	0f 94 c0             	sete   al
c0013651:	84 c0                	test   al,al
c0013653:	74 06                	je     c001365b <findRSDP()+0x7a>
c0013655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013659:	eb 0c                	jmp    c0013667 <findRSDP()+0x86>
c001365b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013660:	eb ca                	jmp    c001362c <findRSDP()+0x4b>
c0013662:	b8 00 00 00 00       	mov    eax,0x0
c0013667:	83 c4 1c             	add    esp,0x1c
c001366a:	c3                   	ret    

c001366b <loadACPITables(unsigned char*)>:
c001366b:	56                   	push   esi
c001366c:	53                   	push   ebx
c001366d:	83 ec 44             	sub    esp,0x44
c0013670:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013675:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001367b:	83 e0 04             	and    eax,0x4
c001367e:	84 c0                	test   al,al
c0013680:	0f 84 05 02 00 00    	je     c001388b <loadACPITables(unsigned char*)+0x220>
c0013686:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c001368b:	84 c0                	test   al,al
c001368d:	74 75                	je     c0013704 <loadACPITables(unsigned char*)+0x99>
c001368f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013693:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001369b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001369e:	83 e8 24             	sub    eax,0x24
c00136a1:	c1 e8 03             	shr    eax,0x3
c00136a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136a8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136b4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136b8:	0f 8d b2 00 00 00    	jge    c0013770 <loadACPITables(unsigned char*)+0x105>
c00136be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136c2:	83 c0 24             	add    eax,0x24
c00136c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136d5:	c1 e0 03             	shl    eax,0x3
c00136d8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00136e5:	89 c1                	mov    ecx,eax
c00136e7:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00136ec:	8d 50 01             	lea    edx,[eax+0x1]
c00136ef:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c00136f5:	89 ca                	mov    edx,ecx
c00136f7:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c00136fe:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013702:	eb ac                	jmp    c00136b0 <loadACPITables(unsigned char*)+0x45>
c0013704:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001370c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013710:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013713:	83 e8 24             	sub    eax,0x24
c0013716:	c1 e8 02             	shr    eax,0x2
c0013719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001371d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013725:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013729:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001372d:	7d 41                	jge    c0013770 <loadACPITables(unsigned char*)+0x105>
c001372f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013733:	83 c0 24             	add    eax,0x24
c0013736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001373a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001373e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013742:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013746:	c1 e0 02             	shl    eax,0x2
c0013749:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001374d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013751:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013753:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013758:	8d 50 01             	lea    edx,[eax+0x1]
c001375b:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013761:	89 ca                	mov    edx,ecx
c0013763:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c001376a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001376e:	eb b5                	jmp    c0013725 <loadACPITables(unsigned char*)+0xba>
c0013770:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013778:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001377d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013781:	0f 8d 05 01 00 00    	jge    c001388c <loadACPITables(unsigned char*)+0x221>
c0013787:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001378b:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013792:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001379e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a2:	25 ff 0f 00 00       	and    eax,0xfff
c00137a7:	89 c6                	mov    esi,eax
c00137a9:	e8 d3 ab ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c00137ae:	89 c3                	mov    ebx,eax
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	6a 01                	push   0x1
c00137b5:	e8 3a aa ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137c7:	83 ec 0c             	sub    esp,0xc
c00137ca:	6a 01                	push   0x1
c00137cc:	6a 01                	push   0x1
c00137ce:	50                   	push   eax
c00137cf:	52                   	push   edx
c00137d0:	53                   	push   ebx
c00137d1:	e8 dc b3 ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137d6:	83 c4 20             	add    esp,0x20
c00137d9:	09 f0                	or     eax,esi
c00137db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137e3:	c1 e0 03             	shl    eax,0x3
c00137e6:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137eb:	83 ec 04             	sub    esp,0x4
c00137ee:	6a 04                	push   0x4
c00137f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f4:	50                   	push   eax
c00137f5:	e8 8f ce fe ff       	call   c0000689 <memcpy>
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013801:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001380c:	05 00 10 00 00       	add    eax,0x1000
c0013811:	c1 e8 0c             	shr    eax,0xc
c0013814:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381c:	89 04 24             	mov    DWORD PTR [esp],eax
c001381f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013823:	25 ff 0f 00 00       	and    eax,0xfff
c0013828:	89 c6                	mov    esi,eax
c001382a:	e8 52 ab ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c001382f:	89 c3                	mov    ebx,eax
c0013831:	83 ec 0c             	sub    esp,0xc
c0013834:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013838:	e8 b7 a9 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013844:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001384a:	83 ec 0c             	sub    esp,0xc
c001384d:	6a 01                	push   0x1
c001384f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013853:	50                   	push   eax
c0013854:	52                   	push   edx
c0013855:	53                   	push   ebx
c0013856:	e8 57 b3 ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001385b:	83 c4 20             	add    esp,0x20
c001385e:	09 f0                	or     eax,esi
c0013860:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013867:	83 ec 0c             	sub    esp,0xc
c001386a:	50                   	push   eax
c001386b:	e8 d1 ac ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013877:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001387b:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013882:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013886:	e9 ed fe ff ff       	jmp    c0013778 <loadACPITables(unsigned char*)+0x10d>
c001388b:	90                   	nop
c001388c:	83 c4 44             	add    esp,0x44
c001388f:	5b                   	pop    ebx
c0013890:	5e                   	pop    esi
c0013891:	c3                   	ret    

c0013892 <findRSDT(unsigned char*)>:
c0013892:	56                   	push   esi
c0013893:	53                   	push   ebx
c0013894:	83 ec 44             	sub    esp,0x44
c0013897:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001389c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138a2:	83 e0 04             	and    eax,0x4
c00138a5:	84 c0                	test   al,al
c00138a7:	75 0a                	jne    c00138b3 <findRSDT(unsigned char*)+0x21>
c00138a9:	b8 00 00 00 00       	mov    eax,0x0
c00138ae:	e9 f7 00 00 00       	jmp    c00139aa <findRSDT(unsigned char*)+0x118>
c00138b3:	83 ec 04             	sub    esp,0x4
c00138b6:	6a 24                	push   0x24
c00138b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138c0:	50                   	push   eax
c00138c1:	e8 c3 cd fe ff       	call   c0000689 <memcpy>
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138cd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138d1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138f1:	25 ff 0f 00 00       	and    eax,0xfff
c00138f6:	89 c6                	mov    esi,eax
c00138f8:	e8 84 aa ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c00138fd:	89 c3                	mov    ebx,eax
c00138ff:	83 ec 0c             	sub    esp,0xc
c0013902:	6a 02                	push   0x2
c0013904:	e8 eb a8 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013910:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	6a 01                	push   0x1
c001391b:	6a 02                	push   0x2
c001391d:	50                   	push   eax
c001391e:	52                   	push   edx
c001391f:	53                   	push   ebx
c0013920:	e8 8d b2 ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013925:	83 c4 20             	add    esp,0x20
c0013928:	09 f0                	or     eax,esi
c001392a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001392e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013932:	25 ff 0f 00 00       	and    eax,0xfff
c0013937:	89 c6                	mov    esi,eax
c0013939:	e8 43 aa ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c001393e:	89 c3                	mov    ebx,eax
c0013940:	83 ec 0c             	sub    esp,0xc
c0013943:	6a 02                	push   0x2
c0013945:	e8 aa a8 ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013951:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013957:	83 ec 0c             	sub    esp,0xc
c001395a:	6a 01                	push   0x1
c001395c:	6a 02                	push   0x2
c001395e:	50                   	push   eax
c001395f:	52                   	push   edx
c0013960:	53                   	push   ebx
c0013961:	e8 4c b2 ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013966:	83 c4 20             	add    esp,0x20
c0013969:	09 f0                	or     eax,esi
c001396b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001396f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013974:	75 11                	jne    c0013987 <findRSDT(unsigned char*)+0xf5>
c0013976:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c001397d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013981:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013985:	eb 1f                	jmp    c00139a6 <findRSDT(unsigned char*)+0x114>
c0013987:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001398c:	75 11                	jne    c001399f <findRSDT(unsigned char*)+0x10d>
c001398e:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c0013995:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001399d:	eb 07                	jmp    c00139a6 <findRSDT(unsigned char*)+0x114>
c001399f:	b8 00 00 00 00       	mov    eax,0x0
c00139a4:	eb 04                	jmp    c00139aa <findRSDT(unsigned char*)+0x118>
c00139a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139aa:	83 c4 44             	add    esp,0x44
c00139ad:	5b                   	pop    ebx
c00139ae:	5e                   	pop    esi
c00139af:	c3                   	ret    

c00139b0 <findDataTable(unsigned char*, char*)>:
c00139b0:	83 ec 1c             	sub    esp,0x1c
c00139b3:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139be:	83 e0 04             	and    eax,0x4
c00139c1:	84 c0                	test   al,al
c00139c3:	75 07                	jne    c00139cc <findDataTable(unsigned char*, char*)+0x1c>
c00139c5:	b8 00 00 00 00       	mov    eax,0x0
c00139ca:	eb 7c                	jmp    c0013a48 <findDataTable(unsigned char*, char*)+0x98>
c00139cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139d4:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139dd:	7d 3a                	jge    c0013a19 <findDataTable(unsigned char*, char*)+0x69>
c00139df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e3:	c1 e0 03             	shl    eax,0x3
c00139e6:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139eb:	83 ec 04             	sub    esp,0x4
c00139ee:	6a 04                	push   0x4
c00139f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f4:	50                   	push   eax
c00139f5:	e8 2c cc fe ff       	call   c0000626 <memcmp>
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	85 c0                	test   eax,eax
c00139ff:	0f 94 c0             	sete   al
c0013a02:	84 c0                	test   al,al
c0013a04:	74 0d                	je     c0013a13 <findDataTable(unsigned char*, char*)+0x63>
c0013a06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a0a:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a11:	eb 35                	jmp    c0013a48 <findDataTable(unsigned char*, char*)+0x98>
c0013a13:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a17:	eb bb                	jmp    c00139d4 <findDataTable(unsigned char*, char*)+0x24>
c0013a19:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a1e:	84 c0                	test   al,al
c0013a20:	74 07                	je     c0013a29 <findDataTable(unsigned char*, char*)+0x79>
c0013a22:	b8 58 00 00 00       	mov    eax,0x58
c0013a27:	eb 05                	jmp    c0013a2e <findDataTable(unsigned char*, char*)+0x7e>
c0013a29:	b8 52 00 00 00       	mov    eax,0x52
c0013a2e:	83 ec 04             	sub    esp,0x4
c0013a31:	50                   	push   eax
c0013a32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a36:	68 90 23 02 c0       	push   0xc0022390
c0013a3b:	e8 cf b7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0013a40:	83 c4 10             	add    esp,0x10
c0013a43:	b8 00 00 00 00       	mov    eax,0x0
c0013a48:	83 c4 1c             	add    esp,0x1c
c0013a4b:	c3                   	ret    

c0013a4c <scanMADT()>:
c0013a4c:	83 ec 2c             	sub    esp,0x2c
c0013a4f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a5a:	83 e0 04             	and    eax,0x4
c0013a5d:	84 c0                	test   al,al
c0013a5f:	0f 84 9a 03 00 00    	je     c0013dff <scanMADT()+0x3b3>
c0013a65:	e8 77 fb ff ff       	call   c00135e1 <findRSDP()>
c0013a6a:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a6f:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a74:	85 c0                	test   eax,eax
c0013a76:	75 19                	jne    c0013a91 <scanMADT()+0x45>
c0013a78:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a7d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a83:	83 e2 fb             	and    edx,0xfffffffb
c0013a86:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a8c:	e9 72 03 00 00       	jmp    c0013e03 <scanMADT()+0x3b7>
c0013a91:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	50                   	push   eax
c0013a9a:	e8 f3 fd ff ff       	call   c0013892 <findRSDT(unsigned char*)>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013aa7:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013aac:	85 c0                	test   eax,eax
c0013aae:	75 19                	jne    c0013ac9 <scanMADT()+0x7d>
c0013ab0:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013ab5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013abb:	83 e2 fb             	and    edx,0xfffffffb
c0013abe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ac4:	e9 3a 03 00 00       	jmp    c0013e03 <scanMADT()+0x3b7>
c0013ac9:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	50                   	push   eax
c0013ad2:	e8 94 fb ff ff       	call   c001366b <loadACPITables(unsigned char*)>
c0013ad7:	83 c4 10             	add    esp,0x10
c0013ada:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013adf:	83 ec 08             	sub    esp,0x8
c0013ae2:	68 ae 22 02 c0       	push   0xc00222ae
c0013ae7:	50                   	push   eax
c0013ae8:	e8 c3 fe ff ff       	call   c00139b0 <findDataTable(unsigned char*, char*)>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013af4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013af9:	75 19                	jne    c0013b14 <scanMADT()+0xc8>
c0013afb:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b00:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b06:	83 e2 fe             	and    edx,0xfffffffe
c0013b09:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b0f:	e9 ef 02 00 00       	jmp    c0013e03 <scanMADT()+0x3b7>
c0013b14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b23:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b27:	0f 87 d6 02 00 00    	ja     c0013e03 <scanMADT()+0x3b7>
c0013b2d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b35:	0f 87 c8 02 00 00    	ja     c0013e03 <scanMADT()+0x3b7>
c0013b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b47:	8d 50 01             	lea    edx,[eax+0x1]
c0013b4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b56:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b5e:	8d 50 01             	lea    edx,[eax+0x1]
c0013b61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b6d:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b71:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b76:	0f 86 86 02 00 00    	jbe    c0013e02 <scanMADT()+0x3b6>
c0013b7c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b81:	75 5b                	jne    c0013bde <scanMADT()+0x192>
c0013b83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b87:	8d 50 01             	lea    edx,[eax+0x1]
c0013b8a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b8e:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013b94:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b9e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ba2:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013ba8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bac:	8d 42 01             	lea    eax,[edx+0x1]
c0013baf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bb3:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bb8:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bbb:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bc1:	25 ff 00 00 00       	and    eax,0xff
c0013bc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bca:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bce:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013bd4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bd9:	e9 0a 02 00 00       	jmp    c0013de8 <scanMADT()+0x39c>
c0013bde:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013be3:	0f 85 29 01 00 00    	jne    c0013d12 <scanMADT()+0x2c6>
c0013be9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bed:	8d 50 01             	lea    edx,[eax+0x1]
c0013bf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bf4:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013bfa:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c04:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c08:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c0e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c1a:	01 d0                	add    eax,edx
c0013c1c:	83 c0 2c             	add    eax,0x2c
c0013c1f:	8a 00                	mov    al,BYTE PTR [eax]
c0013c21:	31 d2                	xor    edx,edx
c0013c23:	88 c2                	mov    dl,al
c0013c25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c29:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c30:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c34:	25 ff 00 00 00       	and    eax,0xff
c0013c39:	c1 e0 08             	shl    eax,0x8
c0013c3c:	89 d1                	mov    ecx,edx
c0013c3e:	09 c1                	or     ecx,eax
c0013c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c44:	8d 50 02             	lea    edx,[eax+0x2]
c0013c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c4f:	25 ff 00 00 00       	and    eax,0xff
c0013c54:	c1 e0 10             	shl    eax,0x10
c0013c57:	09 c1                	or     ecx,eax
c0013c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c5d:	8d 50 03             	lea    edx,[eax+0x3]
c0013c60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c64:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c68:	25 ff 00 00 00       	and    eax,0xff
c0013c6d:	c1 e0 18             	shl    eax,0x18
c0013c70:	09 c1                	or     ecx,eax
c0013c72:	89 ca                	mov    edx,ecx
c0013c74:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c79:	25 ff 00 00 00       	and    eax,0xff
c0013c7e:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c85:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c92:	01 d0                	add    eax,edx
c0013c94:	83 c0 2c             	add    eax,0x2c
c0013c97:	8a 00                	mov    al,BYTE PTR [eax]
c0013c99:	31 d2                	xor    edx,edx
c0013c9b:	88 c2                	mov    dl,al
c0013c9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca1:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cac:	25 ff 00 00 00       	and    eax,0xff
c0013cb1:	c1 e0 08             	shl    eax,0x8
c0013cb4:	89 d1                	mov    ecx,edx
c0013cb6:	09 c1                	or     ecx,eax
c0013cb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cbc:	8d 50 02             	lea    edx,[eax+0x2]
c0013cbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cc7:	25 ff 00 00 00       	and    eax,0xff
c0013ccc:	c1 e0 10             	shl    eax,0x10
c0013ccf:	09 c1                	or     ecx,eax
c0013cd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd5:	8d 50 03             	lea    edx,[eax+0x3]
c0013cd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cdc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ce0:	25 ff 00 00 00       	and    eax,0xff
c0013ce5:	c1 e0 18             	shl    eax,0x18
c0013ce8:	09 c1                	or     ecx,eax
c0013cea:	89 ca                	mov    edx,ecx
c0013cec:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013cf1:	25 ff 00 00 00       	and    eax,0xff
c0013cf6:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013cfd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d02:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d07:	40                   	inc    eax
c0013d08:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d0d:	e9 d6 00 00 00       	jmp    c0013de8 <scanMADT()+0x39c>
c0013d12:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d17:	0f 85 b1 00 00 00    	jne    c0013dce <scanMADT()+0x382>
c0013d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d21:	8d 50 01             	lea    edx,[eax+0x1]
c0013d24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d2c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d30:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d38:	8d 50 01             	lea    edx,[eax+0x1]
c0013d3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d43:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d47:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d53:	01 d0                	add    eax,edx
c0013d55:	83 c0 2c             	add    eax,0x2c
c0013d58:	8a 00                	mov    al,BYTE PTR [eax]
c0013d5a:	31 d2                	xor    edx,edx
c0013d5c:	88 c2                	mov    dl,al
c0013d5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d62:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d69:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d6d:	25 ff 00 00 00       	and    eax,0xff
c0013d72:	c1 e0 08             	shl    eax,0x8
c0013d75:	89 d1                	mov    ecx,edx
c0013d77:	09 c1                	or     ecx,eax
c0013d79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d7d:	8d 50 02             	lea    edx,[eax+0x2]
c0013d80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d84:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d88:	25 ff 00 00 00       	and    eax,0xff
c0013d8d:	c1 e0 10             	shl    eax,0x10
c0013d90:	09 c1                	or     ecx,eax
c0013d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d96:	8d 50 03             	lea    edx,[eax+0x3]
c0013d99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013da1:	25 ff 00 00 00       	and    eax,0xff
c0013da6:	c1 e0 18             	shl    eax,0x18
c0013da9:	09 c8                	or     eax,ecx
c0013dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013daf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013db4:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013db9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dbd:	25 ff 00 00 00       	and    eax,0xff
c0013dc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dc6:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013dcc:	eb 1a                	jmp    c0013de8 <scanMADT()+0x39c>
c0013dce:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dd3:	75 07                	jne    c0013ddc <scanMADT()+0x390>
c0013dd5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dda:	eb 0c                	jmp    c0013de8 <scanMADT()+0x39c>
c0013ddc:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013de1:	75 05                	jne    c0013de8 <scanMADT()+0x39c>
c0013de3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013de8:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013dec:	31 d2                	xor    edx,edx
c0013dee:	88 c2                	mov    dl,al
c0013df0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df4:	01 d0                	add    eax,edx
c0013df6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dfa:	e9 1d fd ff ff       	jmp    c0013b1c <scanMADT()+0xd0>
c0013dff:	90                   	nop
c0013e00:	eb 01                	jmp    c0013e03 <scanMADT()+0x3b7>
c0013e02:	90                   	nop
c0013e03:	83 c4 2c             	add    esp,0x2c
c0013e06:	c3                   	ret    
c0013e07:	90                   	nop

c0013e08 <ACPI::ACPI()>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0f:	83 ec 08             	sub    esp,0x8
c0013e12:	68 b3 22 02 c0       	push   0xc00222b3
c0013e17:	50                   	push   eax
c0013e18:	e8 f7 c9 ff ff       	call   c0010814 <Device::Device(char const*)>
c0013e1d:	83 c4 10             	add    esp,0x10
c0013e20:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e29:	89 10                	mov    DWORD PTR [eax],edx
c0013e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e48:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e56:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e5d:	e8 ea fb ff ff       	call   c0013a4c <scanMADT()>
c0013e62:	90                   	nop
c0013e63:	83 c4 0c             	add    esp,0xc
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e68:	83 ec 2c             	sub    esp,0x2c
c0013e6b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e77:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e7b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e80:	88 d0                	mov    al,dl
c0013e82:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e97:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e9d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013ea1:	0f 8d 97 00 00 00    	jge    c0013f3e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eaf:	83 c2 2a             	add    edx,0x2a
c0013eb2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eb6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ebb:	75 78                	jne    c0013f35 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ebd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ec1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ec5:	83 c2 2a             	add    edx,0x2a
c0013ec8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ecc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ed0:	75 63                	jne    c0013f35 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ed2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ed7:	74 3a                	je     c0013f13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ed9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013edd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ee1:	83 c2 2a             	add    edx,0x2a
c0013ee4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013ee8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013eef:	39 c2                	cmp    edx,eax
c0013ef1:	74 10                	je     c0013f03 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013ef3:	83 ec 0c             	sub    esp,0xc
c0013ef6:	68 c0 23 02 c0       	push   0xc00223c0
c0013efb:	e8 3e 1b 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	83 ec 0c             	sub    esp,0xc
c0013f06:	68 b8 22 02 c0       	push   0xc00222b8
c0013f0b:	e8 2e 1b 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c0013f10:	83 c4 10             	add    esp,0x10
c0013f13:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f1f:	83 c2 2a             	add    edx,0x2a
c0013f22:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f26:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f28:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f2b:	89 01                	mov    DWORD PTR [ecx],eax
c0013f2d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f30:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f35:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f39:	e9 55 ff ff ff       	jmp    c0013e93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f3e:	90                   	nop
c0013f3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f43:	83 c4 2c             	add    esp,0x2c
c0013f46:	c2 04 00             	ret    0x4
c0013f49:	90                   	nop

c0013f4a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f4a:	56                   	push   esi
c0013f4b:	53                   	push   ebx
c0013f4c:	83 ec 14             	sub    esp,0x14
c0013f4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f60:	88 c8                	mov    al,cl
c0013f62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f66:	88 d0                	mov    al,dl
c0013f68:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f80:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f84:	31 c9                	xor    ecx,ecx
c0013f86:	88 c1                	mov    cl,al
c0013f88:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f8c:	31 d2                	xor    edx,edx
c0013f8e:	88 c2                	mov    dl,al
c0013f90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f94:	25 ff ff 00 00       	and    eax,0xffff
c0013f99:	83 ec 04             	sub    esp,0x4
c0013f9c:	56                   	push   esi
c0013f9d:	53                   	push   ebx
c0013f9e:	51                   	push   ecx
c0013f9f:	52                   	push   edx
c0013fa0:	50                   	push   eax
c0013fa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fa5:	68 f0 23 02 c0       	push   0xc00223f0
c0013faa:	e8 60 b2 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0013faf:	83 c4 20             	add    esp,0x20
c0013fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb6:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fc3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fc7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcf:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fd9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fe0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fef:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ff3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffa:	83 c2 2a             	add    edx,0x2a
c0013ffd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0014001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014005:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001400b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014012:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014016:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001401a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401e:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014024:	8d 50 01             	lea    edx,[eax+0x1]
c0014027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402b:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014035:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001403b:	3d 00 08 00 00       	cmp    eax,0x800
c0014040:	75 10                	jne    c0014052 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	68 c7 22 02 c0       	push   0xc00222c7
c001404a:	e8 ef 19 00 00       	call   c0015a3e <Krnl::panic(char const*)>
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	90                   	nop
c0014053:	83 c4 14             	add    esp,0x14
c0014056:	5b                   	pop    ebx
c0014057:	5e                   	pop    esi
c0014058:	c3                   	ret    
c0014059:	90                   	nop

c001405a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001405a:	b8 00 00 00 00       	mov    eax,0x0
c001405f:	c3                   	ret    

c0014060 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014060:	83 ec 1c             	sub    esp,0x1c
c0014063:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014067:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001406a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001406e:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014074:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014078:	25 ff 00 00 00       	and    eax,0xff
c001407d:	83 ec 08             	sub    esp,0x8
c0014080:	50                   	push   eax
c0014081:	52                   	push   edx
c0014082:	e8 63 75 ff ff       	call   c000b5ea <Computer::readCMOS(unsigned char)>
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001408e:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014094:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014098:	25 ff 00 00 00       	and    eax,0xff
c001409d:	83 ec 04             	sub    esp,0x4
c00140a0:	6a 01                	push   0x1
c00140a2:	50                   	push   eax
c00140a3:	52                   	push   edx
c00140a4:	e8 59 76 ff ff       	call   c000b702 <Computer::writeCMOS(unsigned char, unsigned char)>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	90                   	nop
c00140ad:	83 c4 1c             	add    esp,0x1c
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <ACPI::open(int, int, void*)>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 18             	sub    esp,0x18
c00140b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ba:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c5:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140cb:	84 c0                	test   al,al
c00140cd:	74 60                	je     c001412f <ACPI::open(int, int, void*)+0x7d>
c00140cf:	83 ec 0c             	sub    esp,0xc
c00140d2:	68 58 01 00 00       	push   0x158
c00140d7:	e8 fe af ff ff       	call   c000f0da <operator new(unsigned long)>
c00140dc:	83 c4 10             	add    esp,0x10
c00140df:	89 c3                	mov    ebx,eax
c00140e1:	83 ec 0c             	sub    esp,0xc
c00140e4:	53                   	push   ebx
c00140e5:	e8 a8 80 00 00       	call   c001c192 <PCI::PCI()>
c00140ea:	83 c4 10             	add    esp,0x10
c00140ed:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f5:	83 ec 08             	sub    esp,0x8
c00140f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140fc:	50                   	push   eax
c00140fd:	e8 22 c5 ff ff       	call   c0010624 <Device::addChild(Device*)>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014109:	8b 00                	mov    eax,DWORD PTR [eax]
c001410b:	83 c0 08             	add    eax,0x8
c001410e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014110:	6a 00                	push   0x0
c0014112:	6a 00                	push   0x0
c0014114:	6a 00                	push   0x0
c0014116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001411a:	ff d0                	call   eax
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	83 ec 0c             	sub    esp,0xc
c0014122:	68 e4 22 02 c0       	push   0xc00222e4
c0014127:	e8 e3 b0 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001412c:	83 c4 10             	add    esp,0x10
c001412f:	83 ec 0c             	sub    esp,0xc
c0014132:	68 ef 22 02 c0       	push   0xc00222ef
c0014137:	e8 43 38 00 00       	call   c001797f <Thr::loadKernelSymbolTable(char const*)>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014145:	83 ec 08             	sub    esp,0x8
c0014148:	6a 01                	push   0x1
c001414a:	68 0d 23 02 c0       	push   0xc002230d
c001414f:	e8 0d 43 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0014154:	83 c4 10             	add    esp,0x10
c0014157:	83 ec 08             	sub    esp,0x8
c001415a:	53                   	push   ebx
c001415b:	50                   	push   eax
c001415c:	e8 c6 44 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001416a:	83 ec 08             	sub    esp,0x8
c001416d:	6a 01                	push   0x1
c001416f:	68 2a 23 02 c0       	push   0xc002232a
c0014174:	e8 e8 42 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0014179:	83 c4 10             	add    esp,0x10
c001417c:	83 ec 08             	sub    esp,0x8
c001417f:	53                   	push   ebx
c0014180:	50                   	push   eax
c0014181:	e8 a1 44 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0014186:	83 c4 10             	add    esp,0x10
c0014189:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001418e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014194:	83 e0 04             	and    eax,0x4
c0014197:	84 c0                	test   al,al
c0014199:	0f 84 cf 00 00 00    	je     c001426e <ACPI::open(int, int, void*)+0x1bc>
c001419f:	83 ec 0c             	sub    esp,0xc
c00141a2:	68 14 01 00 00       	push   0x114
c00141a7:	e8 2e af ff ff       	call   c000f0da <operator new(unsigned long)>
c00141ac:	83 c4 10             	add    esp,0x10
c00141af:	89 c3                	mov    ebx,eax
c00141b1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141b6:	83 ec 04             	sub    esp,0x4
c00141b9:	50                   	push   eax
c00141ba:	68 47 23 02 c0       	push   0xc0022347
c00141bf:	53                   	push   ebx
c00141c0:	e8 81 b5 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c00141c5:	83 c4 10             	add    esp,0x10
c00141c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141d1:	74 17                	je     c00141ea <ACPI::open(int, int, void*)+0x138>
c00141d3:	83 ec 0c             	sub    esp,0xc
c00141d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141da:	e8 39 b8 ff ff       	call   c000fa18 <File::exists()>
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	84 c0                	test   al,al
c00141e4:	74 04                	je     c00141ea <ACPI::open(int, int, void*)+0x138>
c00141e6:	b0 01                	mov    al,0x1
c00141e8:	eb 02                	jmp    c00141ec <ACPI::open(int, int, void*)+0x13a>
c00141ea:	b0 00                	mov    al,0x0
c00141ec:	84 c0                	test   al,al
c00141ee:	74 25                	je     c0014215 <ACPI::open(int, int, void*)+0x163>
c00141f0:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00141f6:	83 ec 08             	sub    esp,0x8
c00141f9:	6a 01                	push   0x1
c00141fb:	68 47 23 02 c0       	push   0xc0022347
c0014200:	e8 5c 42 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0014205:	83 c4 10             	add    esp,0x10
c0014208:	83 ec 08             	sub    esp,0x8
c001420b:	53                   	push   ebx
c001420c:	50                   	push   eax
c001420d:	e8 15 44 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0014212:	83 c4 10             	add    esp,0x10
c0014215:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001421a:	74 1e                	je     c001423a <ACPI::open(int, int, void*)+0x188>
c001421c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014221:	74 17                	je     c001423a <ACPI::open(int, int, void*)+0x188>
c0014223:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014227:	8b 00                	mov    eax,DWORD PTR [eax]
c0014229:	83 c0 08             	add    eax,0x8
c001422c:	8b 00                	mov    eax,DWORD PTR [eax]
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014235:	ff d0                	call   eax
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c001423f:	83 ec 08             	sub    esp,0x8
c0014242:	68 64 23 02 c0       	push   0xc0022364
c0014247:	50                   	push   eax
c0014248:	e8 63 f7 ff ff       	call   c00139b0 <findDataTable(unsigned char*, char*)>
c001424d:	83 c4 10             	add    esp,0x10
c0014250:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014254:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014259:	74 13                	je     c001426e <ACPI::open(int, int, void*)+0x1bc>
c001425b:	83 ec 08             	sub    esp,0x8
c001425e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014266:	e8 f5 fd ff ff       	call   c0014060 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	b8 00 00 00 00       	mov    eax,0x0
c0014273:	83 c4 18             	add    esp,0x18
c0014276:	5b                   	pop    ebx
c0014277:	c3                   	ret    

c0014278 <ACPI::sleep()>:
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014280:	85 c0                	test   eax,eax
c0014282:	74 07                	je     c001428b <ACPI::sleep()+0x13>
c0014284:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014289:	ff d0                	call   eax
c001428b:	90                   	nop
c001428c:	83 c4 0c             	add    esp,0xc
c001428f:	c3                   	ret    

c0014290 <CPU::close(int, int, void*)>:
c0014290:	31 c0                	xor    eax,eax
c0014292:	c3                   	ret    

c0014293 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014293:	55                   	push   ebp
c0014294:	57                   	push   edi
c0014295:	56                   	push   esi
c0014296:	53                   	push   ebx
c0014297:	51                   	push   ecx
c0014298:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001429c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142a0:	89 d6                	mov    esi,edx
c00142a2:	89 cd                	mov    ebp,ecx
c00142a4:	80 fa 04             	cmp    dl,0x4
c00142a7:	75 28                	jne    c00142d1 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142a9:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142ac:	3c 03                	cmp    al,0x3
c00142ae:	0f 86 64 01 00 00    	jbe    c0014418 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142b4:	80 f9 03             	cmp    cl,0x3
c00142b7:	0f 84 5b 01 00 00    	je     c0014418 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142bd:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142c0:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142c5:	89 fb                	mov    ebx,edi
c00142c7:	80 fb 01             	cmp    bl,0x1
c00142ca:	77 4e                	ja     c001431a <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142cc:	e9 61 01 00 00       	jmp    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d1:	80 fa 05             	cmp    dl,0x5
c00142d4:	75 4d                	jne    c0014323 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142d6:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142db:	80 f9 03             	cmp    cl,0x3
c00142de:	0f 86 4e 01 00 00    	jbe    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e4:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142e7:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c00142ec:	89 fb                	mov    ebx,edi
c00142ee:	80 fb 01             	cmp    bl,0x1
c00142f1:	0f 86 3b 01 00 00    	jbe    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00142fc:	80 f9 08             	cmp    cl,0x8
c00142ff:	0f 84 2d 01 00 00    	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014305:	89 cf                	mov    edi,ecx
c0014307:	b8 10 41 02 c0       	mov    eax,0xc0024110
c001430c:	83 e7 fb             	and    edi,0xfffffffb
c001430f:	89 fb                	mov    ebx,edi
c0014311:	80 fb 09             	cmp    bl,0x9
c0014314:	0f 84 18 01 00 00    	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001431a:	31 c0                	xor    eax,eax
c001431c:	89 eb                	mov    ebx,ebp
c001431e:	0f b6 fb             	movzx  edi,bl
c0014321:	eb 30                	jmp    c0014353 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014323:	31 c0                	xor    eax,eax
c0014325:	80 fa 06             	cmp    dl,0x6
c0014328:	75 f2                	jne    c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001432a:	80 f9 0a             	cmp    cl,0xa
c001432d:	77 ed                	ja     c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001432f:	bf de 05 00 00       	mov    edi,0x5de
c0014334:	0f a3 cf             	bt     edi,ecx
c0014337:	73 e3                	jae    c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014339:	b8 20 41 02 c0       	mov    eax,0xc0024120
c001433e:	e9 ef 00 00 00       	jmp    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014343:	39 c7                	cmp    edi,eax
c0014345:	0f 84 d4 00 00 00    	je     c001441f <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c001434b:	40                   	inc    eax
c001434c:	3d d0 00 00 00       	cmp    eax,0xd0
c0014351:	74 09                	je     c001435c <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014353:	89 f3                	mov    ebx,esi
c0014355:	80 fb 0f             	cmp    bl,0xf
c0014358:	75 f1                	jne    c001434b <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c001435a:	eb e7                	jmp    c0014343 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c001435c:	80 fa 10             	cmp    dl,0x10
c001435f:	75 19                	jne    c001437a <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014361:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014364:	83 e0 fb             	and    eax,0xfffffffb
c0014367:	3c 02                	cmp    al,0x2
c0014369:	0f 86 b7 00 00 00    	jbe    c0014426 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001436f:	80 f9 02             	cmp    cl,0x2
c0014372:	0f 84 ae 00 00 00    	je     c0014426 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014378:	eb 13                	jmp    c001438d <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001437a:	80 fa 11             	cmp    dl,0x11
c001437d:	75 0e                	jne    c001438d <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001437f:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014384:	80 f9 03             	cmp    cl,0x3
c0014387:	0f 84 a5 00 00 00    	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001438d:	80 fa 12             	cmp    dl,0x12
c0014390:	75 0e                	jne    c00143a0 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014392:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0014397:	80 f9 01             	cmp    cl,0x1
c001439a:	0f 84 92 00 00 00    	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143a0:	80 fa 14             	cmp    dl,0x14
c00143a3:	be 01 00 00 00       	mov    esi,0x1
c00143a8:	0f 94 c3             	sete   bl
c00143ab:	80 f9 13             	cmp    cl,0x13
c00143ae:	77 0c                	ja     c00143bc <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143b0:	be 04 00 09 00       	mov    esi,0x90004
c00143b5:	d3 ee                	shr    esi,cl
c00143b7:	f7 d6                	not    esi
c00143b9:	83 e6 01             	and    esi,0x1
c00143bc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143bf:	3c 01                	cmp    al,0x1
c00143c1:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143c6:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143cb:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143cf:	75 61                	jne    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143d1:	80 fa 15             	cmp    dl,0x15
c00143d4:	75 1f                	jne    c00143f5 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143d6:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143db:	80 f9 01             	cmp    cl,0x1
c00143de:	74 52                	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e0:	89 f3                	mov    ebx,esi
c00143e2:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143e7:	84 db                	test   bl,bl
c00143e9:	74 47                	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143eb:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00143f0:	80 f9 30             	cmp    cl,0x30
c00143f3:	74 3d                	je     c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f5:	80 fa 16             	cmp    dl,0x16
c00143f8:	0f 94 c2             	sete   dl
c00143fb:	84 c9                	test   cl,cl
c00143fd:	75 09                	jne    c0014408 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c00143ff:	b8 90 41 02 c0       	mov    eax,0xc0024190
c0014404:	84 d2                	test   dl,dl
c0014406:	75 2a                	jne    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014408:	80 f9 30             	cmp    cl,0x30
c001440b:	75 20                	jne    c001442d <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001440d:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014412:	84 d2                	test   dl,dl
c0014414:	75 1c                	jne    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014416:	eb 15                	jmp    c001442d <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014418:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c001441d:	eb 13                	jmp    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441f:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014424:	eb 0c                	jmp    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014426:	b8 40 41 02 c0       	mov    eax,0xc0024140
c001442b:	eb 05                	jmp    c0014432 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442d:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014432:	5a                   	pop    edx
c0014433:	5b                   	pop    ebx
c0014434:	5e                   	pop    esi
c0014435:	5f                   	pop    edi
c0014436:	5d                   	pop    ebp
c0014437:	c3                   	ret    

c0014438 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014438:	53                   	push   ebx
c0014439:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001443d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014441:	80 f9 04             	cmp    cl,0x4
c0014444:	75 6a                	jne    c00144b0 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014446:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001444b:	80 fa 01             	cmp    dl,0x1
c001444e:	0f 86 9b 02 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014454:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c0014459:	80 fa 02             	cmp    dl,0x2
c001445c:	0f 84 8d 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014462:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014467:	80 fa 03             	cmp    dl,0x3
c001446a:	0f 84 7f 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014470:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014475:	80 fa 04             	cmp    dl,0x4
c0014478:	0f 84 71 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001447e:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014483:	80 fa 05             	cmp    dl,0x5
c0014486:	0f 84 63 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001448c:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014491:	80 fa 07             	cmp    dl,0x7
c0014494:	0f 84 55 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001449a:	8d 5a f8             	lea    ebx,[edx-0x8]
c001449d:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144a2:	80 fb 01             	cmp    bl,0x1
c00144a5:	0f 87 e0 01 00 00    	ja     c001468b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144ab:	e9 3f 02 00 00       	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b0:	80 f9 05             	cmp    cl,0x5
c00144b3:	75 3e                	jne    c00144f3 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144b5:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144b8:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144bd:	80 fb 02             	cmp    bl,0x2
c00144c0:	0f 86 29 02 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c6:	80 fa 04             	cmp    dl,0x4
c00144c9:	0f 84 f1 01 00 00    	je     c00146c0 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144cf:	80 fa 07             	cmp    dl,0x7
c00144d2:	0f 84 17 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d8:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144dd:	80 fa 08             	cmp    dl,0x8
c00144e0:	0f 84 09 02 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e6:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144eb:	80 fa 09             	cmp    dl,0x9
c00144ee:	e9 96 01 00 00       	jmp    c0014689 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144f3:	80 f9 06             	cmp    cl,0x6
c00144f6:	0f 85 80 01 00 00    	jne    c001467c <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00144fc:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014501:	80 fa 01             	cmp    dl,0x1
c0014504:	0f 84 e5 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001450a:	8d 42 fb             	lea    eax,[edx-0x5]
c001450d:	3c 01                	cmp    al,0x1
c001450f:	0f 86 b2 01 00 00    	jbe    c00146c7 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014515:	80 fa 03             	cmp    dl,0x3
c0014518:	0f 84 a9 01 00 00    	je     c00146c7 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001451e:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014521:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0014526:	80 fb 01             	cmp    bl,0x1
c0014529:	0f 86 c0 01 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001452f:	80 fa 09             	cmp    dl,0x9
c0014532:	0f 84 96 01 00 00    	je     c00146ce <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014538:	8d 5a f6             	lea    ebx,[edx-0xa]
c001453b:	80 fb 01             	cmp    bl,0x1
c001453e:	0f 86 ab 01 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014544:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014549:	80 fa 0d             	cmp    dl,0xd
c001454c:	0f 84 9d 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014552:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c0014557:	80 fa 0e             	cmp    dl,0xe
c001455a:	0f 84 8f 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014560:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014565:	80 fa 0f             	cmp    dl,0xf
c0014568:	0f 84 81 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001456e:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014573:	80 fa 15             	cmp    dl,0x15
c0014576:	0f 84 73 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001457c:	8d 5a ea             	lea    ebx,[edx-0x16]
c001457f:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014584:	80 fb 01             	cmp    bl,0x1
c0014587:	0f 86 62 01 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458d:	80 fa 1a             	cmp    dl,0x1a
c0014590:	0f 84 3f 01 00 00    	je     c00146d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0014596:	80 fa 1c             	cmp    dl,0x1c
c0014599:	0f 84 3d 01 00 00    	je     c00146dc <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c001459f:	80 fa 1d             	cmp    dl,0x1d
c00145a2:	0f 84 47 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a8:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145ad:	80 fa 25             	cmp    dl,0x25
c00145b0:	0f 84 39 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b6:	8d 5a da             	lea    ebx,[edx-0x26]
c00145b9:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145be:	80 fb 01             	cmp    bl,0x1
c00145c1:	0f 86 28 01 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c7:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145cc:	80 fa 2a             	cmp    dl,0x2a
c00145cf:	0f 84 1a 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d5:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145da:	80 fa 2c             	cmp    dl,0x2c
c00145dd:	0f 84 0c 01 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e3:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145e8:	80 fa 2d             	cmp    dl,0x2d
c00145eb:	0f 84 fe 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f1:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145f6:	80 fa 2e             	cmp    dl,0x2e
c00145f9:	0f 84 f0 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ff:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014604:	80 fa 2f             	cmp    dl,0x2f
c0014607:	0f 84 e2 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001460d:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014610:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014615:	80 fb 01             	cmp    bl,0x1
c0014618:	0f 86 d1 00 00 00    	jbe    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001461e:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014623:	80 fa 37             	cmp    dl,0x37
c0014626:	0f 84 c3 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001462c:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014631:	80 fa 3a             	cmp    dl,0x3a
c0014634:	0f 84 b5 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001463a:	b8 70 40 02 c0       	mov    eax,0xc0024070
c001463f:	80 fa 3c             	cmp    dl,0x3c
c0014642:	0f 84 a7 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014648:	b8 80 40 02 c0       	mov    eax,0xc0024080
c001464d:	80 fa 3d             	cmp    dl,0x3d
c0014650:	0f 84 99 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014656:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001465b:	80 fa 3e             	cmp    dl,0x3e
c001465e:	0f 84 8b 00 00 00    	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014664:	8d 42 bb             	lea    eax,[edx-0x45]
c0014667:	3c 01                	cmp    al,0x1
c0014669:	76 78                	jbe    c00146e3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001466b:	80 fa 3f             	cmp    dl,0x3f
c001466e:	74 73                	je     c00146e3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014670:	80 fa 4a             	cmp    dl,0x4a
c0014673:	74 75                	je     c00146ea <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014675:	80 fa 4d             	cmp    dl,0x4d
c0014678:	75 11                	jne    c001468b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001467a:	eb 6e                	jmp    c00146ea <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001467c:	80 f9 0b             	cmp    cl,0xb
c001467f:	75 0a                	jne    c001468b <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014681:	b8 90 40 02 c0       	mov    eax,0xc0024090
c0014686:	80 fa 01             	cmp    dl,0x1
c0014689:	74 64                	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001468b:	80 f9 0f             	cmp    cl,0xf
c001468e:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c0014693:	0f 94 c1             	sete   cl
c0014696:	80 fa 02             	cmp    dl,0x2
c0014699:	0f 96 c3             	setbe  bl
c001469c:	84 cb                	test   bl,cl
c001469e:	75 4f                	jne    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146a0:	8d 42 fd             	lea    eax,[edx-0x3]
c00146a3:	3c 01                	cmp    al,0x1
c00146a5:	0f 96 c0             	setbe  al
c00146a8:	80 fa 06             	cmp    dl,0x6
c00146ab:	0f 94 c2             	sete   dl
c00146ae:	09 c2                	or     edx,eax
c00146b0:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146b5:	84 ca                	test   dl,cl
c00146b7:	74 36                	je     c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b9:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146be:	eb 2f                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c0:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146c5:	eb 28                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c7:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146cc:	eb 21                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ce:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146d3:	eb 1a                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d5:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146da:	eb 13                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146dc:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146e1:	eb 0c                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e3:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146e8:	eb 05                	jmp    c00146ef <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ea:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146ef:	5b                   	pop    ebx
c00146f0:	c3                   	ret    

c00146f1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146f1:	60                   	pusha  
c00146f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146fe:	9c                   	pushf  
c00146ff:	fa                   	cli    
c0014700:	0f 09                	wbinvd 
c0014702:	0f 30                	wrmsr  
c0014704:	9d                   	popf   
c0014705:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014709:	89 02                	mov    DWORD PTR [edx],eax
c001470b:	61                   	popa   
c001470c:	c3                   	ret    

c001470d <AMD_K6_read_msr(unsigned int, REGS*)>:
c001470d:	60                   	pusha  
c001470e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014712:	9c                   	pushf  
c0014713:	fa                   	cli    
c0014714:	0f 09                	wbinvd 
c0014716:	31 c0                	xor    eax,eax
c0014718:	31 d2                	xor    edx,edx
c001471a:	0f 32                	rdmsr  
c001471c:	9d                   	popf   
c001471d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014721:	89 02                	mov    DWORD PTR [edx],eax
c0014723:	61                   	popa   
c0014724:	c3                   	ret    

c0014725 <AMD_K6_writeback(int, int, int)>:
c0014725:	56                   	push   esi
c0014726:	53                   	push   ebx
c0014727:	83 ec 10             	sub    esp,0x10
c001472a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001472e:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014733:	75 5d                	jne    c0014792 <AMD_K6_writeback(int, int, int)+0x6d>
c0014735:	83 f8 08             	cmp    eax,0x8
c0014738:	75 09                	jne    c0014743 <AMD_K6_writeback(int, int, int)+0x1e>
c001473a:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001473f:	7e 13                	jle    c0014754 <AMD_K6_writeback(int, int, int)+0x2f>
c0014741:	eb 30                	jmp    c0014773 <AMD_K6_writeback(int, int, int)+0x4e>
c0014743:	83 f8 06             	cmp    eax,0x6
c0014746:	7c 4a                	jl     c0014792 <AMD_K6_writeback(int, int, int)+0x6d>
c0014748:	83 f8 07             	cmp    eax,0x7
c001474b:	7e 07                	jle    c0014754 <AMD_K6_writeback(int, int, int)+0x2f>
c001474d:	83 f8 09             	cmp    eax,0x9
c0014750:	74 21                	je     c0014773 <AMD_K6_writeback(int, int, int)+0x4e>
c0014752:	eb 3e                	jmp    c0014792 <AMD_K6_writeback(int, int, int)+0x6d>
c0014754:	89 e6                	mov    esi,esp
c0014756:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c001475c:	c1 eb 15             	shr    ebx,0x15
c001475f:	56                   	push   esi
c0014760:	68 82 00 00 c0       	push   0xc0000082
c0014765:	e8 a3 ff ff ff       	call   c001470d <AMD_K6_read_msr(unsigned int, REGS*)>
c001476a:	56                   	push   esi
c001476b:	83 e3 7e             	and    ebx,0x7e
c001476e:	6a 00                	push   0x0
c0014770:	53                   	push   ebx
c0014771:	eb 12                	jmp    c0014785 <AMD_K6_writeback(int, int, int)+0x60>
c0014773:	89 e3                	mov    ebx,esp
c0014775:	53                   	push   ebx
c0014776:	68 82 00 00 c0       	push   0xc0000082
c001477b:	e8 8d ff ff ff       	call   c001470d <AMD_K6_read_msr(unsigned int, REGS*)>
c0014780:	53                   	push   ebx
c0014781:	6a 00                	push   0x0
c0014783:	6a 00                	push   0x0
c0014785:	68 82 00 00 c0       	push   0xc0000082
c001478a:	e8 62 ff ff ff       	call   c00146f1 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001478f:	83 c4 18             	add    esp,0x18
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	5b                   	pop    ebx
c0014796:	5e                   	pop    esi
c0014797:	c3                   	ret    

c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014798:	55                   	push   ebp
c0014799:	57                   	push   edi
c001479a:	56                   	push   esi
c001479b:	53                   	push   ebx
c001479c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147a4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147a8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147ac:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147b2:	75 23                	jne    c00147d7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147b4:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147bd:	89 06                	mov    DWORD PTR [esi],eax
c00147bf:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147c4:	89 07                	mov    DWORD PTR [edi],eax
c00147c6:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147ce:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147d3:	89 02                	mov    DWORD PTR [edx],eax
c00147d5:	eb 3f                	jmp    c0014816 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147d7:	31 c9                	xor    ecx,ecx
c00147d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147dd:	0f a2                	cpuid  
c00147df:	89 06                	mov    DWORD PTR [esi],eax
c00147e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147e5:	89 1f                	mov    DWORD PTR [edi],ebx
c00147e7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147ea:	89 10                	mov    DWORD PTR [eax],edx
c00147ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f0:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c00147f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00147f7:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c00147fc:	8b 07                	mov    eax,DWORD PTR [edi]
c00147fe:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014803:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014806:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c001480b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001480f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014811:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c0014816:	5b                   	pop    ebx
c0014817:	5e                   	pop    esi
c0014818:	5f                   	pop    edi
c0014819:	5d                   	pop    ebp
c001481a:	c3                   	ret    

c001481b <cpuidCheckEDX(unsigned int)>:
c001481b:	83 ec 10             	sub    esp,0x10
c001481e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014822:	50                   	push   eax
c0014823:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014827:	50                   	push   eax
c0014828:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001482c:	50                   	push   eax
c001482d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014831:	50                   	push   eax
c0014832:	6a 01                	push   0x1
c0014834:	e8 5f ff ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014839:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001483d:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014841:	0f 95 c0             	setne  al
c0014844:	83 c4 24             	add    esp,0x24
c0014847:	c3                   	ret    

c0014848 <cpuidCheckECX(unsigned int)>:
c0014848:	83 ec 10             	sub    esp,0x10
c001484b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001484f:	50                   	push   eax
c0014850:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014854:	50                   	push   eax
c0014855:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014859:	50                   	push   eax
c001485a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485e:	50                   	push   eax
c001485f:	6a 01                	push   0x1
c0014861:	e8 32 ff ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014866:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001486a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001486e:	0f 95 c0             	setne  al
c0014871:	83 c4 24             	add    esp,0x24
c0014874:	c3                   	ret    

c0014875 <cpuidCheckExtendedEBX(unsigned int)>:
c0014875:	83 ec 10             	sub    esp,0x10
c0014878:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001487c:	50                   	push   eax
c001487d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014881:	50                   	push   eax
c0014882:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014886:	50                   	push   eax
c0014887:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001488b:	50                   	push   eax
c001488c:	6a 07                	push   0x7
c001488e:	e8 05 ff ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014897:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001489b:	0f 95 c0             	setne  al
c001489e:	83 c4 24             	add    esp,0x24
c00148a1:	c3                   	ret    

c00148a2 <cpuidCheckExtendedECX(unsigned int)>:
c00148a2:	83 ec 10             	sub    esp,0x10
c00148a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148a9:	50                   	push   eax
c00148aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148ae:	50                   	push   eax
c00148af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b3:	50                   	push   eax
c00148b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b8:	50                   	push   eax
c00148b9:	6a 07                	push   0x7
c00148bb:	e8 d8 fe ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148c4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148c8:	0f 95 c0             	setne  al
c00148cb:	83 c4 24             	add    esp,0x24
c00148ce:	c3                   	ret    

c00148cf <getCPUNumber()>:
c00148cf:	31 c0                	xor    eax,eax
c00148d1:	c3                   	ret    

c00148d2 <thisCPU()>:
c00148d2:	e8 f8 ff ff ff       	call   c00148cf <getCPUNumber()>
c00148d7:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148dd:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148e4:	c3                   	ret    
c00148e5:	90                   	nop

c00148e6 <CPU::CPU()>:
c00148e6:	83 ec 0c             	sub    esp,0xc
c00148e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ed:	83 ec 08             	sub    esp,0x8
c00148f0:	68 72 27 02 c0       	push   0xc0022772
c00148f5:	50                   	push   eax
c00148f6:	e8 19 bf ff ff       	call   c0010814 <Device::Device(char const*)>
c00148fb:	83 c4 10             	add    esp,0x10
c00148fe:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014907:	89 10                	mov    DWORD PTR [eax],edx
c0014909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491b:	05 78 01 00 00       	add    eax,0x178
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	50                   	push   eax
c0014924:	e8 c5 6e ff ff       	call   c000b7ee <GDT::GDT()>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014930:	05 7c 09 00 00       	add    eax,0x97c
c0014935:	83 ec 0c             	sub    esp,0xc
c0014938:	50                   	push   eax
c0014939:	e8 10 71 ff ff       	call   c000ba4e <IDT::IDT()>
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014945:	05 7c 11 00 00       	add    eax,0x117c
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	50                   	push   eax
c001494e:	e8 6d 91 ff ff       	call   c000dac0 <TSS::TSS()>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014965:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001496f:	90                   	nop
c0014970:	83 c4 0c             	add    esp,0xc
c0014973:	c3                   	ret    

c0014974 <CPU::displayFeatures()>:
c0014974:	53                   	push   ebx
c0014975:	83 ec 10             	sub    esp,0x10
c0014978:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001497c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014982:	68 80 24 02 c0       	push   0xc0022480
c0014987:	e8 83 a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001498c:	59                   	pop    ecx
c001498d:	58                   	pop    eax
c001498e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014994:	50                   	push   eax
c0014995:	68 91 24 02 c0       	push   0xc0022491
c001499a:	e8 70 a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001499f:	58                   	pop    eax
c00149a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149a6:	c1 e8 0e             	shr    eax,0xe
c00149a9:	5a                   	pop    edx
c00149aa:	0f b6 c0             	movzx  eax,al
c00149ad:	50                   	push   eax
c00149ae:	68 a2 24 02 c0       	push   0xc00224a2
c00149b3:	e8 57 a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00149b8:	59                   	pop    ecx
c00149b9:	58                   	pop    eax
c00149ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149c0:	66 c1 e8 06          	shr    ax,0x6
c00149c4:	0f b6 c0             	movzx  eax,al
c00149c7:	50                   	push   eax
c00149c8:	68 b3 24 02 c0       	push   0xc00224b3
c00149cd:	e8 3d a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00149d2:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149d9:	e8 31 a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00149de:	83 c4 10             	add    esp,0x10
c00149e1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149e6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149ed:	74 05                	je     c00149f4 <CPU::displayFeatures()+0x80>
c00149ef:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c00149f4:	52                   	push   edx
c00149f5:	52                   	push   edx
c00149f6:	50                   	push   eax
c00149f7:	68 c4 24 02 c0       	push   0xc00224c4
c00149fc:	e8 0e a8 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014a01:	83 c4 10             	add    esp,0x10
c0014a04:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a09:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a10:	78 05                	js     c0014a17 <CPU::displayFeatures()+0xa3>
c0014a12:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a17:	51                   	push   ecx
c0014a18:	51                   	push   ecx
c0014a19:	50                   	push   eax
c0014a1a:	68 db 24 02 c0       	push   0xc00224db
c0014a1f:	e8 eb a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014a24:	83 c4 10             	add    esp,0x10
c0014a27:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a2c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a33:	75 05                	jne    c0014a3a <CPU::displayFeatures()+0xc6>
c0014a35:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a3a:	52                   	push   edx
c0014a3b:	52                   	push   edx
c0014a3c:	50                   	push   eax
c0014a3d:	68 f2 24 02 c0       	push   0xc00224f2
c0014a42:	e8 c8 a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014a47:	83 c4 10             	add    esp,0x10
c0014a4a:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a4f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a56:	75 05                	jne    c0014a5d <CPU::displayFeatures()+0xe9>
c0014a58:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a5d:	51                   	push   ecx
c0014a5e:	51                   	push   ecx
c0014a5f:	50                   	push   eax
c0014a60:	68 09 25 02 c0       	push   0xc0022509
c0014a65:	e8 a5 a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a72:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a79:	75 05                	jne    c0014a80 <CPU::displayFeatures()+0x10c>
c0014a7b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a80:	52                   	push   edx
c0014a81:	52                   	push   edx
c0014a82:	50                   	push   eax
c0014a83:	68 20 25 02 c0       	push   0xc0022520
c0014a88:	e8 82 a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a95:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a9c:	75 05                	jne    c0014aa3 <CPU::displayFeatures()+0x12f>
c0014a9e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014aa3:	51                   	push   ecx
c0014aa4:	51                   	push   ecx
c0014aa5:	50                   	push   eax
c0014aa6:	68 37 25 02 c0       	push   0xc0022537
c0014aab:	e8 5f a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014ab0:	83 c4 10             	add    esp,0x10
c0014ab3:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014ab8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014abf:	75 05                	jne    c0014ac6 <CPU::displayFeatures()+0x152>
c0014ac1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ac6:	52                   	push   edx
c0014ac7:	52                   	push   edx
c0014ac8:	50                   	push   eax
c0014ac9:	68 4e 25 02 c0       	push   0xc002254e
c0014ace:	e8 3c a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014ad3:	83 c4 10             	add    esp,0x10
c0014ad6:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014adb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ae2:	75 05                	jne    c0014ae9 <CPU::displayFeatures()+0x175>
c0014ae4:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ae9:	51                   	push   ecx
c0014aea:	51                   	push   ecx
c0014aeb:	50                   	push   eax
c0014aec:	68 65 25 02 c0       	push   0xc0022565
c0014af1:	e8 19 a7 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014afe:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b05:	75 05                	jne    c0014b0c <CPU::displayFeatures()+0x198>
c0014b07:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b0c:	52                   	push   edx
c0014b0d:	52                   	push   edx
c0014b0e:	50                   	push   eax
c0014b0f:	68 7c 25 02 c0       	push   0xc002257c
c0014b14:	e8 f6 a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014b19:	83 c4 10             	add    esp,0x10
c0014b1c:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b21:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b28:	75 05                	jne    c0014b2f <CPU::displayFeatures()+0x1bb>
c0014b2a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b2f:	51                   	push   ecx
c0014b30:	51                   	push   ecx
c0014b31:	50                   	push   eax
c0014b32:	68 93 25 02 c0       	push   0xc0022593
c0014b37:	e8 d3 a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b44:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b4b:	75 05                	jne    c0014b52 <CPU::displayFeatures()+0x1de>
c0014b4d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b52:	52                   	push   edx
c0014b53:	52                   	push   edx
c0014b54:	50                   	push   eax
c0014b55:	68 aa 25 02 c0       	push   0xc00225aa
c0014b5a:	e8 b0 a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b67:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b6e:	75 05                	jne    c0014b75 <CPU::displayFeatures()+0x201>
c0014b70:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b75:	51                   	push   ecx
c0014b76:	51                   	push   ecx
c0014b77:	50                   	push   eax
c0014b78:	68 c1 25 02 c0       	push   0xc00225c1
c0014b7d:	e8 8d a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b8a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b91:	75 05                	jne    c0014b98 <CPU::displayFeatures()+0x224>
c0014b93:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b98:	52                   	push   edx
c0014b99:	52                   	push   edx
c0014b9a:	50                   	push   eax
c0014b9b:	68 d8 25 02 c0       	push   0xc00225d8
c0014ba0:	e8 6a a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014ba5:	83 c4 10             	add    esp,0x10
c0014ba8:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bad:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bb4:	78 05                	js     c0014bbb <CPU::displayFeatures()+0x247>
c0014bb6:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bbb:	51                   	push   ecx
c0014bbc:	51                   	push   ecx
c0014bbd:	50                   	push   eax
c0014bbe:	68 ef 25 02 c0       	push   0xc00225ef
c0014bc3:	e8 47 a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bd0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bd7:	75 05                	jne    c0014bde <CPU::displayFeatures()+0x26a>
c0014bd9:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bde:	52                   	push   edx
c0014bdf:	52                   	push   edx
c0014be0:	50                   	push   eax
c0014be1:	68 06 26 02 c0       	push   0xc0022606
c0014be6:	e8 24 a6 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0014beb:	83 c4 18             	add    esp,0x18
c0014bee:	5b                   	pop    ebx
c0014bef:	c3                   	ret    

c0014bf0 <CPU::detectFeatures()>:
c0014bf0:	55                   	push   ebp
c0014bf1:	57                   	push   edi
c0014bf2:	56                   	push   esi
c0014bf3:	53                   	push   ebx
c0014bf4:	83 ec 50             	sub    esp,0x50
c0014bf7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014bfb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c05:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c0c:	6a 0d                	push   0xd
c0014c0e:	6a 00                	push   0x0
c0014c10:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c16:	57                   	push   edi
c0014c17:	e8 a3 ba fe ff       	call   c00006bf <memset>
c0014c1c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c2b:	0f 84 04 09 00 00    	je     c0015535 <CPU::detectFeatures()+0x945>
c0014c31:	83 ec 0c             	sub    esp,0xc
c0014c34:	6a 10                	push   0x10
c0014c36:	e8 e0 fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014c3b:	83 e0 01             	and    eax,0x1
c0014c3e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c47:	83 e0 fd             	and    eax,0xfffffffd
c0014c4a:	09 d0                	or     eax,edx
c0014c4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c52:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c59:	e8 bd fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014c5e:	83 e0 01             	and    eax,0x1
c0014c61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c68:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c6e:	83 e0 fb             	and    eax,0xfffffffb
c0014c71:	09 d0                	or     eax,edx
c0014c73:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c79:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c80:	e8 96 fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014c85:	83 e0 01             	and    eax,0x1
c0014c88:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c95:	83 e0 f7             	and    eax,0xfffffff7
c0014c98:	09 d0                	or     eax,edx
c0014c9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ca0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014ca7:	e8 6f fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014cac:	83 e0 01             	and    eax,0x1
c0014caf:	c1 e0 04             	shl    eax,0x4
c0014cb2:	88 c2                	mov    dl,al
c0014cb4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cba:	83 e0 ef             	and    eax,0xffffffef
c0014cbd:	09 d0                	or     eax,edx
c0014cbf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cc5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014ccc:	e8 4a fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014cd1:	83 e0 01             	and    eax,0x1
c0014cd4:	c1 e0 05             	shl    eax,0x5
c0014cd7:	88 c2                	mov    dl,al
c0014cd9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cdf:	83 e0 df             	and    eax,0xffffffdf
c0014ce2:	09 d0                	or     eax,edx
c0014ce4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014cf1:	e8 25 fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014cf6:	83 e0 01             	and    eax,0x1
c0014cf9:	8d 14 00             	lea    edx,[eax+eax*1]
c0014cfc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d02:	83 e0 fd             	and    eax,0xfffffffd
c0014d05:	09 d0                	or     eax,edx
c0014d07:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d0d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d14:	e8 02 fb ff ff       	call   c001481b <cpuidCheckEDX(unsigned int)>
c0014d19:	83 e0 01             	and    eax,0x1
c0014d1c:	c1 e0 06             	shl    eax,0x6
c0014d1f:	88 c2                	mov    dl,al
c0014d21:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d27:	83 e0 bf             	and    eax,0xffffffbf
c0014d2a:	09 d0                	or     eax,edx
c0014d2c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d32:	58                   	pop    eax
c0014d33:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d37:	56                   	push   esi
c0014d38:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d3c:	55                   	push   ebp
c0014d3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d41:	50                   	push   eax
c0014d42:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d46:	52                   	push   edx
c0014d47:	6a 00                	push   0x0
c0014d49:	e8 4a fa ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d4e:	83 c4 1c             	add    esp,0x1c
c0014d51:	6a 04                	push   0x4
c0014d53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d57:	50                   	push   eax
c0014d58:	57                   	push   edi
c0014d59:	e8 2b b9 fe ff       	call   c0000689 <memcpy>
c0014d5e:	83 c4 0c             	add    esp,0xc
c0014d61:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d67:	6a 04                	push   0x4
c0014d69:	56                   	push   esi
c0014d6a:	50                   	push   eax
c0014d6b:	e8 19 b9 fe ff       	call   c0000689 <memcpy>
c0014d70:	83 c4 0c             	add    esp,0xc
c0014d73:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d79:	6a 04                	push   0x4
c0014d7b:	55                   	push   ebp
c0014d7c:	50                   	push   eax
c0014d7d:	e8 07 b9 fe ff       	call   c0000689 <memcpy>
c0014d82:	58                   	pop    eax
c0014d83:	5a                   	pop    edx
c0014d84:	68 1d 26 02 c0       	push   0xc002261d
c0014d89:	57                   	push   edi
c0014d8a:	e8 20 ba fe ff       	call   c00007af <strcmp>
c0014d8f:	83 c4 10             	add    esp,0x10
c0014d92:	85 c0                	test   eax,eax
c0014d94:	75 0f                	jne    c0014da5 <CPU::detectFeatures()+0x1b5>
c0014d96:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014da0:	e9 22 02 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014da5:	50                   	push   eax
c0014da6:	50                   	push   eax
c0014da7:	68 2a 26 02 c0       	push   0xc002262a
c0014dac:	57                   	push   edi
c0014dad:	e8 fd b9 fe ff       	call   c00007af <strcmp>
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	85 c0                	test   eax,eax
c0014db7:	74 dd                	je     c0014d96 <CPU::detectFeatures()+0x1a6>
c0014db9:	51                   	push   ecx
c0014dba:	51                   	push   ecx
c0014dbb:	68 37 26 02 c0       	push   0xc0022637
c0014dc0:	57                   	push   edi
c0014dc1:	e8 e9 b9 fe ff       	call   c00007af <strcmp>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	85 c0                	test   eax,eax
c0014dcb:	74 2a                	je     c0014df7 <CPU::detectFeatures()+0x207>
c0014dcd:	52                   	push   edx
c0014dce:	52                   	push   edx
c0014dcf:	68 44 26 02 c0       	push   0xc0022644
c0014dd4:	57                   	push   edi
c0014dd5:	e8 d5 b9 fe ff       	call   c00007af <strcmp>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	85 c0                	test   eax,eax
c0014ddf:	74 16                	je     c0014df7 <CPU::detectFeatures()+0x207>
c0014de1:	50                   	push   eax
c0014de2:	50                   	push   eax
c0014de3:	68 51 26 02 c0       	push   0xc0022651
c0014de8:	57                   	push   edi
c0014de9:	e8 c1 b9 fe ff       	call   c00007af <strcmp>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	85 c0                	test   eax,eax
c0014df3:	74 48                	je     c0014e3d <CPU::detectFeatures()+0x24d>
c0014df5:	eb 0f                	jmp    c0014e06 <CPU::detectFeatures()+0x216>
c0014df7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e01:	e9 c1 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014e06:	50                   	push   eax
c0014e07:	50                   	push   eax
c0014e08:	68 5e 26 02 c0       	push   0xc002265e
c0014e0d:	57                   	push   edi
c0014e0e:	e8 9c b9 fe ff       	call   c00007af <strcmp>
c0014e13:	83 c4 10             	add    esp,0x10
c0014e16:	85 c0                	test   eax,eax
c0014e18:	74 23                	je     c0014e3d <CPU::detectFeatures()+0x24d>
c0014e1a:	50                   	push   eax
c0014e1b:	50                   	push   eax
c0014e1c:	68 6b 26 02 c0       	push   0xc002266b
c0014e21:	57                   	push   edi
c0014e22:	e8 88 b9 fe ff       	call   c00007af <strcmp>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	85 c0                	test   eax,eax
c0014e2c:	75 1e                	jne    c0014e4c <CPU::detectFeatures()+0x25c>
c0014e2e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e38:	e9 8a 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014e3d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e47:	e9 7b 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014e4c:	50                   	push   eax
c0014e4d:	50                   	push   eax
c0014e4e:	68 78 26 02 c0       	push   0xc0022678
c0014e53:	57                   	push   edi
c0014e54:	e8 56 b9 fe ff       	call   c00007af <strcmp>
c0014e59:	83 c4 10             	add    esp,0x10
c0014e5c:	85 c0                	test   eax,eax
c0014e5e:	75 0f                	jne    c0014e6f <CPU::detectFeatures()+0x27f>
c0014e60:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e6a:	e9 58 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014e6f:	50                   	push   eax
c0014e70:	50                   	push   eax
c0014e71:	68 37 26 02 c0       	push   0xc0022637
c0014e76:	57                   	push   edi
c0014e77:	e8 33 b9 fe ff       	call   c00007af <strcmp>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	85 c0                	test   eax,eax
c0014e81:	75 0f                	jne    c0014e92 <CPU::detectFeatures()+0x2a2>
c0014e83:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e8d:	e9 35 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014e92:	50                   	push   eax
c0014e93:	50                   	push   eax
c0014e94:	68 85 26 02 c0       	push   0xc0022685
c0014e99:	57                   	push   edi
c0014e9a:	e8 10 b9 fe ff       	call   c00007af <strcmp>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	85 c0                	test   eax,eax
c0014ea4:	75 0f                	jne    c0014eb5 <CPU::detectFeatures()+0x2c5>
c0014ea6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014eb0:	e9 12 01 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014eb5:	51                   	push   ecx
c0014eb6:	51                   	push   ecx
c0014eb7:	68 92 26 02 c0       	push   0xc0022692
c0014ebc:	57                   	push   edi
c0014ebd:	e8 ed b8 fe ff       	call   c00007af <strcmp>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	85 c0                	test   eax,eax
c0014ec7:	75 0f                	jne    c0014ed8 <CPU::detectFeatures()+0x2e8>
c0014ec9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ed3:	e9 ef 00 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014ed8:	52                   	push   edx
c0014ed9:	52                   	push   edx
c0014eda:	68 9f 26 02 c0       	push   0xc002269f
c0014edf:	57                   	push   edi
c0014ee0:	e8 ca b8 fe ff       	call   c00007af <strcmp>
c0014ee5:	83 c4 10             	add    esp,0x10
c0014ee8:	85 c0                	test   eax,eax
c0014eea:	75 0f                	jne    c0014efb <CPU::detectFeatures()+0x30b>
c0014eec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014ef6:	e9 cc 00 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014efb:	50                   	push   eax
c0014efc:	50                   	push   eax
c0014efd:	68 ac 26 02 c0       	push   0xc00226ac
c0014f02:	57                   	push   edi
c0014f03:	e8 a7 b8 fe ff       	call   c00007af <strcmp>
c0014f08:	83 c4 10             	add    esp,0x10
c0014f0b:	85 c0                	test   eax,eax
c0014f0d:	75 0f                	jne    c0014f1e <CPU::detectFeatures()+0x32e>
c0014f0f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f19:	e9 a9 00 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014f1e:	50                   	push   eax
c0014f1f:	50                   	push   eax
c0014f20:	68 b9 26 02 c0       	push   0xc00226b9
c0014f25:	57                   	push   edi
c0014f26:	e8 84 b8 fe ff       	call   c00007af <strcmp>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	85 c0                	test   eax,eax
c0014f30:	75 0f                	jne    c0014f41 <CPU::detectFeatures()+0x351>
c0014f32:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f3c:	e9 86 00 00 00       	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014f41:	50                   	push   eax
c0014f42:	50                   	push   eax
c0014f43:	68 c6 26 02 c0       	push   0xc00226c6
c0014f48:	57                   	push   edi
c0014f49:	e8 61 b8 fe ff       	call   c00007af <strcmp>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	85 c0                	test   eax,eax
c0014f53:	75 0c                	jne    c0014f61 <CPU::detectFeatures()+0x371>
c0014f55:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f5f:	eb 66                	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014f61:	50                   	push   eax
c0014f62:	50                   	push   eax
c0014f63:	68 d3 26 02 c0       	push   0xc00226d3
c0014f68:	57                   	push   edi
c0014f69:	e8 41 b8 fe ff       	call   c00007af <strcmp>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	85 c0                	test   eax,eax
c0014f73:	75 0c                	jne    c0014f81 <CPU::detectFeatures()+0x391>
c0014f75:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f7f:	eb 46                	jmp    c0014fc7 <CPU::detectFeatures()+0x3d7>
c0014f81:	50                   	push   eax
c0014f82:	50                   	push   eax
c0014f83:	68 e0 26 02 c0       	push   0xc00226e0
c0014f88:	57                   	push   edi
c0014f89:	e8 21 b8 fe ff       	call   c00007af <strcmp>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	85 c0                	test   eax,eax
c0014f93:	74 e0                	je     c0014f75 <CPU::detectFeatures()+0x385>
c0014f95:	50                   	push   eax
c0014f96:	50                   	push   eax
c0014f97:	68 ed 26 02 c0       	push   0xc00226ed
c0014f9c:	57                   	push   edi
c0014f9d:	e8 0d b8 fe ff       	call   c00007af <strcmp>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	85 c0                	test   eax,eax
c0014fa7:	74 cc                	je     c0014f75 <CPU::detectFeatures()+0x385>
c0014fa9:	51                   	push   ecx
c0014faa:	51                   	push   ecx
c0014fab:	68 fa 26 02 c0       	push   0xc00226fa
c0014fb0:	57                   	push   edi
c0014fb1:	e8 f9 b7 fe ff       	call   c00007af <strcmp>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	85 c0                	test   eax,eax
c0014fbb:	74 b8                	je     c0014f75 <CPU::detectFeatures()+0x385>
c0014fbd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fc7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fcc:	0f 86 be 00 00 00    	jbe    c0015090 <CPU::detectFeatures()+0x4a0>
c0014fd2:	83 ec 0c             	sub    esp,0xc
c0014fd5:	68 80 00 00 00       	push   0x80
c0014fda:	e8 96 f8 ff ff       	call   c0014875 <cpuidCheckExtendedEBX(unsigned int)>
c0014fdf:	83 e0 01             	and    eax,0x1
c0014fe2:	c1 e0 06             	shl    eax,0x6
c0014fe5:	88 c2                	mov    dl,al
c0014fe7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014fed:	83 e0 bf             	and    eax,0xffffffbf
c0014ff0:	09 d0                	or     eax,edx
c0014ff2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ff8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014fff:	e8 71 f8 ff ff       	call   c0014875 <cpuidCheckExtendedEBX(unsigned int)>
c0015004:	83 e0 01             	and    eax,0x1
c0015007:	c1 e0 04             	shl    eax,0x4
c001500a:	88 c2                	mov    dl,al
c001500c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015012:	83 e0 ef             	and    eax,0xffffffef
c0015015:	09 d0                	or     eax,edx
c0015017:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001501d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015024:	e8 4c f8 ff ff       	call   c0014875 <cpuidCheckExtendedEBX(unsigned int)>
c0015029:	c1 e0 07             	shl    eax,0x7
c001502c:	88 c2                	mov    dl,al
c001502e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015034:	83 e0 7f             	and    eax,0x7f
c0015037:	09 d0                	or     eax,edx
c0015039:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001503f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015046:	e8 57 f8 ff ff       	call   c00148a2 <cpuidCheckExtendedECX(unsigned int)>
c001504b:	83 e0 01             	and    eax,0x1
c001504e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015055:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001505b:	83 e0 f7             	and    eax,0xfffffff7
c001505e:	09 d0                	or     eax,edx
c0015060:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015066:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001506d:	e8 30 f8 ff ff       	call   c00148a2 <cpuidCheckExtendedECX(unsigned int)>
c0015072:	83 c4 10             	add    esp,0x10
c0015075:	83 e0 01             	and    eax,0x1
c0015078:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001507f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015085:	83 e0 fb             	and    eax,0xfffffffb
c0015088:	09 d0                	or     eax,edx
c001508a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	56                   	push   esi
c0015094:	55                   	push   ebp
c0015095:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0015099:	57                   	push   edi
c001509a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001509e:	50                   	push   eax
c001509f:	6a 01                	push   0x1
c00150a1:	e8 f2 f6 ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150aa:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150b0:	88 c1                	mov    cl,al
c00150b2:	83 e2 f0             	and    edx,0xfffffff0
c00150b5:	83 e1 0f             	and    ecx,0xf
c00150b8:	09 ca                	or     edx,ecx
c00150ba:	88 c1                	mov    cl,al
c00150bc:	c0 e9 04             	shr    cl,0x4
c00150bf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150c5:	0f b6 d1             	movzx  edx,cl
c00150c8:	c1 e2 06             	shl    edx,0x6
c00150cb:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150cf:	89 d5                	mov    ebp,edx
c00150d1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150d7:	66 81 e2 3f c0       	and    dx,0xc03f
c00150dc:	83 c4 20             	add    esp,0x20
c00150df:	09 ea                	or     edx,ebp
c00150e1:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150e8:	89 c2                	mov    edx,eax
c00150ea:	c1 ea 08             	shr    edx,0x8
c00150ed:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150f3:	83 e2 0f             	and    edx,0xf
c00150f6:	83 e1 3f             	and    ecx,0x3f
c00150f9:	89 d5                	mov    ebp,edx
c00150fb:	c1 e5 06             	shl    ebp,0x6
c00150fe:	09 cd                	or     ebp,ecx
c0015100:	89 e9                	mov    ecx,ebp
c0015102:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015108:	88 d1                	mov    cl,dl
c001510a:	c0 e9 02             	shr    cl,0x2
c001510d:	89 cd                	mov    ebp,ecx
c001510f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015115:	83 e1 c0             	and    ecx,0xffffffc0
c0015118:	09 cd                	or     ebp,ecx
c001511a:	89 e9                	mov    ecx,ebp
c001511c:	89 c5                	mov    ebp,eax
c001511e:	c1 ed 0c             	shr    ebp,0xc
c0015121:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015127:	83 e5 03             	and    ebp,0x3
c001512a:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015130:	c1 e5 04             	shl    ebp,0x4
c0015133:	83 e1 cf             	and    ecx,0xffffffcf
c0015136:	09 cd                	or     ebp,ecx
c0015138:	80 fa 06             	cmp    dl,0x6
c001513b:	89 e9                	mov    ecx,ebp
c001513d:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015143:	74 05                	je     c001514a <CPU::detectFeatures()+0x55a>
c0015145:	80 fa 0f             	cmp    dl,0xf
c0015148:	75 5d                	jne    c00151a7 <CPU::detectFeatures()+0x5b7>
c001514a:	89 c5                	mov    ebp,eax
c001514c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015150:	c1 ed 10             	shr    ebp,0x10
c0015153:	c1 e5 04             	shl    ebp,0x4
c0015156:	09 e9                	or     ecx,ebp
c0015158:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001515e:	0f b6 c9             	movzx  ecx,cl
c0015161:	c1 e1 06             	shl    ecx,0x6
c0015164:	66 81 e5 3f c0       	and    bp,0xc03f
c0015169:	09 e9                	or     ecx,ebp
c001516b:	80 fa 0f             	cmp    dl,0xf
c001516e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015175:	75 30                	jne    c00151a7 <CPU::detectFeatures()+0x5b7>
c0015177:	c1 e8 14             	shr    eax,0x14
c001517a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015180:	83 c0 0f             	add    eax,0xf
c0015183:	83 e2 3f             	and    edx,0x3f
c0015186:	88 c1                	mov    cl,al
c0015188:	c1 e1 06             	shl    ecx,0x6
c001518b:	c0 e8 02             	shr    al,0x2
c001518e:	09 ca                	or     edx,ecx
c0015190:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0015196:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001519c:	83 e2 c0             	and    edx,0xffffffc0
c001519f:	09 d0                	or     eax,edx
c00151a1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151a7:	83 ec 0c             	sub    esp,0xc
c00151aa:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151b1:	56                   	push   esi
c00151b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151b6:	50                   	push   eax
c00151b7:	57                   	push   edi
c00151b8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151bc:	55                   	push   ebp
c00151bd:	68 00 00 00 80       	push   0x80000000
c00151c2:	e8 d1 f5 ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151c7:	83 c4 20             	add    esp,0x20
c00151ca:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151d6:	76 1e                	jbe    c00151f6 <CPU::detectFeatures()+0x606>
c00151d8:	83 ec 0c             	sub    esp,0xc
c00151db:	56                   	push   esi
c00151dc:	50                   	push   eax
c00151dd:	57                   	push   edi
c00151de:	55                   	push   ebp
c00151df:	68 01 00 00 80       	push   0x80000001
c00151e4:	e8 af f5 ff ff       	call   c0014798 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151e9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151f3:	83 c4 20             	add    esp,0x20
c00151f6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00151fc:	83 f8 01             	cmp    eax,0x1
c00151ff:	75 6f                	jne    c0015270 <CPU::detectFeatures()+0x680>
c0015201:	51                   	push   ecx
c0015202:	51                   	push   ecx
c0015203:	68 06 27 02 c0       	push   0xc0022706
c0015208:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001520c:	56                   	push   esi
c001520d:	e8 4c b5 fe ff       	call   c000075e <strcpy>
c0015212:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015218:	5f                   	pop    edi
c0015219:	66 c1 e8 06          	shr    ax,0x6
c001521d:	5d                   	pop    ebp
c001521e:	0f b6 c0             	movzx  eax,al
c0015221:	50                   	push   eax
c0015222:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015228:	c1 e8 0e             	shr    eax,0xe
c001522b:	0f b6 c0             	movzx  eax,al
c001522e:	50                   	push   eax
c001522f:	e8 04 f2 ff ff       	call   c0014438 <lookupIntelCPUName(unsigned char, unsigned char)>
c0015234:	5a                   	pop    edx
c0015235:	59                   	pop    ecx
c0015236:	50                   	push   eax
c0015237:	56                   	push   esi
c0015238:	e8 d8 b5 fe ff       	call   c0000815 <strcat>
c001523d:	5f                   	pop    edi
c001523e:	5d                   	pop    ebp
c001523f:	56                   	push   esi
c0015240:	53                   	push   ebx
c0015241:	e8 c0 b5 ff ff       	call   c0010806 <Device::setName(char const*)>
c0015246:	58                   	pop    eax
c0015247:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001524d:	5a                   	pop    edx
c001524e:	68 0d 27 02 c0       	push   0xc002270d
c0015253:	50                   	push   eax
c0015254:	e8 56 b5 fe ff       	call   c00007af <strcmp>
c0015259:	83 c4 10             	add    esp,0x10
c001525c:	85 c0                	test   eax,eax
c001525e:	0f 85 53 03 00 00    	jne    c00155b7 <CPU::detectFeatures()+0x9c7>
c0015264:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001526b:	e9 47 03 00 00       	jmp    c00155b7 <CPU::detectFeatures()+0x9c7>
c0015270:	83 f8 02             	cmp    eax,0x2
c0015273:	0f 85 b5 00 00 00    	jne    c001532e <CPU::detectFeatures()+0x73e>
c0015279:	57                   	push   edi
c001527a:	57                   	push   edi
c001527b:	68 1f 27 02 c0       	push   0xc002271f
c0015280:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015284:	56                   	push   esi
c0015285:	e8 d4 b4 fe ff       	call   c000075e <strcpy>
c001528a:	5d                   	pop    ebp
c001528b:	58                   	pop    eax
c001528c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015292:	66 c1 e8 06          	shr    ax,0x6
c0015296:	0f b6 c0             	movzx  eax,al
c0015299:	50                   	push   eax
c001529a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a0:	c1 e8 0e             	shr    eax,0xe
c00152a3:	0f b6 c0             	movzx  eax,al
c00152a6:	50                   	push   eax
c00152a7:	e8 e7 ef ff ff       	call   c0014293 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152ac:	5a                   	pop    edx
c00152ad:	59                   	pop    ecx
c00152ae:	50                   	push   eax
c00152af:	56                   	push   esi
c00152b0:	e8 60 b5 fe ff       	call   c0000815 <strcat>
c00152b5:	5f                   	pop    edi
c00152b6:	5d                   	pop    ebp
c00152b7:	56                   	push   esi
c00152b8:	53                   	push   ebx
c00152b9:	e8 48 b5 ff ff       	call   c0010806 <Device::setName(char const*)>
c00152be:	58                   	pop    eax
c00152bf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152c5:	5a                   	pop    edx
c00152c6:	68 24 27 02 c0       	push   0xc0022724
c00152cb:	50                   	push   eax
c00152cc:	e8 de b4 fe ff       	call   c00007af <strcmp>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	85 c0                	test   eax,eax
c00152d6:	75 20                	jne    c00152f8 <CPU::detectFeatures()+0x708>
c00152d8:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152de:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152e4:	a8 01                	test   al,0x1
c00152e6:	74 10                	je     c00152f8 <CPU::detectFeatures()+0x708>
c00152e8:	83 e0 fe             	and    eax,0xfffffffe
c00152eb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152f1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152f8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152fe:	c1 e8 0e             	shr    eax,0xe
c0015301:	3c 05                	cmp    al,0x5
c0015303:	0f 85 ae 02 00 00    	jne    c00155b7 <CPU::detectFeatures()+0x9c7>
c0015309:	56                   	push   esi
c001530a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015310:	83 e0 0f             	and    eax,0xf
c0015313:	50                   	push   eax
c0015314:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001531a:	66 c1 e8 06          	shr    ax,0x6
c001531e:	0f b6 c0             	movzx  eax,al
c0015321:	50                   	push   eax
c0015322:	6a 05                	push   0x5
c0015324:	e8 fc f3 ff ff       	call   c0014725 <AMD_K6_writeback(int, int, int)>
c0015329:	e9 ff 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x93d>
c001532e:	89 c1                	mov    ecx,eax
c0015330:	83 e1 fd             	and    ecx,0xfffffffd
c0015333:	83 f9 04             	cmp    ecx,0x4
c0015336:	74 09                	je     c0015341 <CPU::detectFeatures()+0x751>
c0015338:	83 f8 03             	cmp    eax,0x3
c001533b:	0f 85 6f 01 00 00    	jne    c00154b0 <CPU::detectFeatures()+0x8c0>
c0015341:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015347:	c1 ea 0e             	shr    edx,0xe
c001534a:	80 fa 05             	cmp    dl,0x5
c001534d:	75 62                	jne    c00153b1 <CPU::detectFeatures()+0x7c1>
c001534f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015355:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001535a:	66 81 fa 00 01       	cmp    dx,0x100
c001535f:	75 0c                	jne    c001536d <CPU::detectFeatures()+0x77d>
c0015361:	51                   	push   ecx
c0015362:	51                   	push   ecx
c0015363:	68 2b 27 02 c0       	push   0xc002272b
c0015368:	e9 ba 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c001536d:	66 81 fa 00 02       	cmp    dx,0x200
c0015372:	75 0c                	jne    c0015380 <CPU::detectFeatures()+0x790>
c0015374:	52                   	push   edx
c0015375:	52                   	push   edx
c0015376:	68 3e 27 02 c0       	push   0xc002273e
c001537b:	e9 a7 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015380:	66 81 fa 40 02       	cmp    dx,0x240
c0015385:	75 0c                	jne    c0015393 <CPU::detectFeatures()+0x7a3>
c0015387:	50                   	push   eax
c0015388:	50                   	push   eax
c0015389:	68 50 27 02 c0       	push   0xc0022750
c001538e:	e9 94 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015393:	83 f8 06             	cmp    eax,0x6
c0015396:	0f 84 ee 00 00 00    	je     c001548a <CPU::detectFeatures()+0x89a>
c001539c:	83 f9 04             	cmp    ecx,0x4
c001539f:	0f 84 f6 00 00 00    	je     c001549b <CPU::detectFeatures()+0x8ab>
c00153a5:	50                   	push   eax
c00153a6:	50                   	push   eax
c00153a7:	68 76 27 02 c0       	push   0xc0022776
c00153ac:	e9 76 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00153b1:	80 fa 06             	cmp    dl,0x6
c00153b4:	0f 85 cb 00 00 00    	jne    c0015485 <CPU::detectFeatures()+0x895>
c00153ba:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153c0:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153c5:	66 81 fa 80 01       	cmp    dx,0x180
c00153ca:	75 0c                	jne    c00153d8 <CPU::detectFeatures()+0x7e8>
c00153cc:	50                   	push   eax
c00153cd:	50                   	push   eax
c00153ce:	68 81 27 02 c0       	push   0xc0022781
c00153d3:	e9 4f 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00153d8:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153dd:	74 07                	je     c00153e6 <CPU::detectFeatures()+0x7f6>
c00153df:	66 81 fa 00 02       	cmp    dx,0x200
c00153e4:	75 0c                	jne    c00153f2 <CPU::detectFeatures()+0x802>
c00153e6:	50                   	push   eax
c00153e7:	50                   	push   eax
c00153e8:	68 91 27 02 c0       	push   0xc0022791
c00153ed:	e9 35 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00153f2:	66 81 fa 40 02       	cmp    dx,0x240
c00153f7:	75 0c                	jne    c0015405 <CPU::detectFeatures()+0x815>
c00153f9:	50                   	push   eax
c00153fa:	50                   	push   eax
c00153fb:	68 98 27 02 c0       	push   0xc0022798
c0015400:	e9 22 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015405:	66 81 fa 80 02       	cmp    dx,0x280
c001540a:	74 07                	je     c0015413 <CPU::detectFeatures()+0x823>
c001540c:	66 81 fa 40 03       	cmp    dx,0x340
c0015411:	75 0c                	jne    c001541f <CPU::detectFeatures()+0x82f>
c0015413:	50                   	push   eax
c0015414:	50                   	push   eax
c0015415:	68 a1 27 02 c0       	push   0xc00227a1
c001541a:	e9 08 01 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c001541f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015424:	75 0c                	jne    c0015432 <CPU::detectFeatures()+0x842>
c0015426:	55                   	push   ebp
c0015427:	55                   	push   ebp
c0015428:	68 a8 27 02 c0       	push   0xc00227a8
c001542d:	e9 f5 00 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015432:	83 f8 06             	cmp    eax,0x6
c0015435:	74 53                	je     c001548a <CPU::detectFeatures()+0x89a>
c0015437:	83 f9 04             	cmp    ecx,0x4
c001543a:	74 5f                	je     c001549b <CPU::detectFeatures()+0x8ab>
c001543c:	57                   	push   edi
c001543d:	57                   	push   edi
c001543e:	68 b1 27 02 c0       	push   0xc00227b1
c0015443:	53                   	push   ebx
c0015444:	e8 bd b3 ff ff       	call   c0010806 <Device::setName(char const*)>
c0015449:	b1 c1                	mov    cl,0xc1
c001544b:	88 c8                	mov    al,cl
c001544d:	e6 22                	out    0x22,al
c001544f:	e4 23                	in     al,0x23
c0015451:	88 c2                	mov    dl,al
c0015453:	88 c8                	mov    al,cl
c0015455:	e6 22                	out    0x22,al
c0015457:	88 d0                	mov    al,dl
c0015459:	83 c8 10             	or     eax,0x10
c001545c:	e6 23                	out    0x23,al
c001545e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015465:	89 d0                	mov    eax,edx
c0015467:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001546a:	40                   	inc    eax
c001546b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015471:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015475:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001547b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015480:	e9 a8 00 00 00       	jmp    c001552d <CPU::detectFeatures()+0x93d>
c0015485:	83 f8 06             	cmp    eax,0x6
c0015488:	75 0c                	jne    c0015496 <CPU::detectFeatures()+0x8a6>
c001548a:	56                   	push   esi
c001548b:	56                   	push   esi
c001548c:	68 62 27 02 c0       	push   0xc0022762
c0015491:	e9 91 00 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015496:	83 f9 04             	cmp    ecx,0x4
c0015499:	75 0c                	jne    c00154a7 <CPU::detectFeatures()+0x8b7>
c001549b:	51                   	push   ecx
c001549c:	51                   	push   ecx
c001549d:	68 6e 27 02 c0       	push   0xc002276e
c00154a2:	e9 80 00 00 00       	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154a7:	52                   	push   edx
c00154a8:	52                   	push   edx
c00154a9:	68 bc 27 02 c0       	push   0xc00227bc
c00154ae:	eb 77                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154b0:	83 f8 07             	cmp    eax,0x7
c00154b3:	75 09                	jne    c00154be <CPU::detectFeatures()+0x8ce>
c00154b5:	50                   	push   eax
c00154b6:	50                   	push   eax
c00154b7:	68 c6 27 02 c0       	push   0xc00227c6
c00154bc:	eb 69                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154be:	83 f8 0a             	cmp    eax,0xa
c00154c1:	75 09                	jne    c00154cc <CPU::detectFeatures()+0x8dc>
c00154c3:	50                   	push   eax
c00154c4:	50                   	push   eax
c00154c5:	68 d1 27 02 c0       	push   0xc00227d1
c00154ca:	eb 5b                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154cc:	83 f8 0b             	cmp    eax,0xb
c00154cf:	75 09                	jne    c00154da <CPU::detectFeatures()+0x8ea>
c00154d1:	50                   	push   eax
c00154d2:	50                   	push   eax
c00154d3:	68 d9 27 02 c0       	push   0xc00227d9
c00154d8:	eb 4d                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154da:	83 f8 08             	cmp    eax,0x8
c00154dd:	75 09                	jne    c00154e8 <CPU::detectFeatures()+0x8f8>
c00154df:	50                   	push   eax
c00154e0:	50                   	push   eax
c00154e1:	68 e2 27 02 c0       	push   0xc00227e2
c00154e6:	eb 3f                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154e8:	83 f8 09             	cmp    eax,0x9
c00154eb:	75 09                	jne    c00154f6 <CPU::detectFeatures()+0x906>
c00154ed:	50                   	push   eax
c00154ee:	50                   	push   eax
c00154ef:	68 ea 27 02 c0       	push   0xc00227ea
c00154f4:	eb 31                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c00154f6:	83 f8 05             	cmp    eax,0x5
c00154f9:	75 09                	jne    c0015504 <CPU::detectFeatures()+0x914>
c00154fb:	50                   	push   eax
c00154fc:	50                   	push   eax
c00154fd:	68 f2 27 02 c0       	push   0xc00227f2
c0015502:	eb 23                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015504:	83 f8 0c             	cmp    eax,0xc
c0015507:	75 09                	jne    c0015512 <CPU::detectFeatures()+0x922>
c0015509:	55                   	push   ebp
c001550a:	55                   	push   ebp
c001550b:	68 00 28 02 c0       	push   0xc0022800
c0015510:	eb 15                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015512:	83 f8 0d             	cmp    eax,0xd
c0015515:	75 09                	jne    c0015520 <CPU::detectFeatures()+0x930>
c0015517:	57                   	push   edi
c0015518:	57                   	push   edi
c0015519:	68 0b 28 02 c0       	push   0xc002280b
c001551e:	eb 07                	jmp    c0015527 <CPU::detectFeatures()+0x937>
c0015520:	56                   	push   esi
c0015521:	56                   	push   esi
c0015522:	68 1f 28 02 c0       	push   0xc002281f
c0015527:	53                   	push   ebx
c0015528:	e8 d9 b2 ff ff       	call   c0010806 <Device::setName(char const*)>
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	e9 82 00 00 00       	jmp    c00155b7 <CPU::detectFeatures()+0x9c7>
c0015535:	51                   	push   ecx
c0015536:	51                   	push   ecx
c0015537:	68 6b 26 02 c0       	push   0xc002266b
c001553c:	57                   	push   edi
c001553d:	e8 1c b2 fe ff       	call   c000075e <strcpy>
c0015542:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001554c:	e8 e0 ac fe ff       	call   c0000231 <is486>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	85 c0                	test   eax,eax
c0015556:	74 2d                	je     c0015585 <CPU::detectFeatures()+0x995>
c0015558:	52                   	push   edx
c0015559:	52                   	push   edx
c001555a:	68 2b 28 02 c0       	push   0xc002282b
c001555f:	53                   	push   ebx
c0015560:	e8 a1 b2 ff ff       	call   c0010806 <Device::setName(char const*)>
c0015565:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001556c:	e8 e7 a5 00 00       	call   c001fb58 <CPU::readCR0()>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	83 e0 14             	and    eax,0x14
c0015577:	83 f8 04             	cmp    eax,0x4
c001557a:	75 1f                	jne    c001559b <CPU::detectFeatures()+0x9ab>
c001557c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015583:	eb 32                	jmp    c00155b7 <CPU::detectFeatures()+0x9c7>
c0015585:	50                   	push   eax
c0015586:	50                   	push   eax
c0015587:	68 36 28 02 c0       	push   0xc0022836
c001558c:	53                   	push   ebx
c001558d:	e8 74 b2 ff ff       	call   c0010806 <Device::setName(char const*)>
c0015592:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015599:	eb d1                	jmp    c001556c <CPU::detectFeatures()+0x97c>
c001559b:	e8 6c ac fe ff       	call   c000020c <hasLegacyFPU>
c00155a0:	83 e0 01             	and    eax,0x1
c00155a3:	8d 14 00             	lea    edx,[eax+eax*1]
c00155a6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155ac:	83 e0 fd             	and    eax,0xfffffffd
c00155af:	09 d0                	or     eax,edx
c00155b1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155b7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155be:	83 c4 4c             	add    esp,0x4c
c00155c1:	5b                   	pop    ebx
c00155c2:	5e                   	pop    esi
c00155c3:	5f                   	pop    edi
c00155c4:	5d                   	pop    ebp
c00155c5:	c3                   	ret    

c00155c6 <CPU::setupSMEP()>:
c00155c6:	83 ec 0c             	sub    esp,0xc
c00155c9:	e8 54 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155ce:	0d 00 00 10 00       	or     eax,0x100000
c00155d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155d7:	83 c4 0c             	add    esp,0xc
c00155da:	e9 5e a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155df:	90                   	nop

c00155e0 <CPU::setupUMIP()>:
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	e8 3a a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155e8:	80 cc 08             	or     ah,0x8
c00155eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155ef:	83 c4 0c             	add    esp,0xc
c00155f2:	e9 46 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155f7:	90                   	nop

c00155f8 <CPU::setupTSC()>:
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	e8 22 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c0015600:	83 c8 04             	or     eax,0x4
c0015603:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015607:	83 c4 0c             	add    esp,0xc
c001560a:	e9 2e a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c001560f:	90                   	nop

c0015610 <CPU::setupLargePages()>:
c0015610:	83 ec 0c             	sub    esp,0xc
c0015613:	e8 0a a8 00 00       	call   c001fe22 <CPU::readCR4()>
c0015618:	83 c8 10             	or     eax,0x10
c001561b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001561f:	83 c4 0c             	add    esp,0xc
c0015622:	e9 16 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015627:	90                   	nop

c0015628 <CPU::setupPAT()>:
c0015628:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001562d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015634:	74 2c                	je     c0015662 <CPU::setupPAT()+0x3a>
c0015636:	53                   	push   ebx
c0015637:	83 ec 10             	sub    esp,0x10
c001563a:	68 77 02 00 00       	push   0x277
c001563f:	50                   	push   eax
c0015640:	e8 35 5f ff ff       	call   c000b57a <Computer::rdmsr(unsigned int)>
c0015645:	83 e2 f8             	and    edx,0xfffffff8
c0015648:	83 ca 01             	or     edx,0x1
c001564b:	52                   	push   edx
c001564c:	50                   	push   eax
c001564d:	68 77 02 00 00       	push   0x277
c0015652:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0015658:	e8 49 5f ff ff       	call   c000b5a6 <Computer::wrmsr(unsigned int, unsigned long long)>
c001565d:	83 c4 28             	add    esp,0x28
c0015660:	5b                   	pop    ebx
c0015661:	c3                   	ret    
c0015662:	c3                   	ret    
c0015663:	90                   	nop

c0015664 <CPU::setupMTRR()>:
c0015664:	c3                   	ret    
c0015665:	90                   	nop

c0015666 <CPU::setupGlobalPages()>:
c0015666:	83 ec 0c             	sub    esp,0xc
c0015669:	e8 b4 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c001566e:	0c 80                	or     al,0x80
c0015670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015674:	83 c4 0c             	add    esp,0xc
c0015677:	e9 c1 a7 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>

c001567c <CPU::allowUsermodeDataAccess()>:
c001567c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015680:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015687:	74 03                	je     c001568c <CPU::allowUsermodeDataAccess()+0x10>
c0015689:	0f 01 cb             	stac   
c001568c:	c3                   	ret    
c001568d:	90                   	nop

c001568e <CPU::prohibitUsermodeDataAccess()>:
c001568e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015692:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015699:	74 03                	je     c001569e <CPU::prohibitUsermodeDataAccess()+0x10>
c001569b:	0f 01 ca             	clac   
c001569e:	c3                   	ret    
c001569f:	90                   	nop

c00156a0 <CPU::setupSMAP()>:
c00156a0:	53                   	push   ebx
c00156a1:	83 ec 08             	sub    esp,0x8
c00156a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156a8:	e8 75 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c00156ad:	83 ec 0c             	sub    esp,0xc
c00156b0:	0d 00 00 20 00       	or     eax,0x200000
c00156b5:	50                   	push   eax
c00156b6:	e8 82 a7 00 00       	call   c001fe3d <CPU::writeCR4(unsigned long)>
c00156bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156bf:	83 c4 18             	add    esp,0x18
c00156c2:	5b                   	pop    ebx
c00156c3:	eb c9                	jmp    c001568e <CPU::prohibitUsermodeDataAccess()>
c00156c5:	90                   	nop

c00156c6 <CPU::setupFeatures()>:
c00156c6:	53                   	push   ebx
c00156c7:	83 ec 08             	sub    esp,0x8
c00156ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156ce:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156d5:	74 0c                	je     c00156e3 <CPU::setupFeatures()+0x1d>
c00156d7:	83 ec 0c             	sub    esp,0xc
c00156da:	53                   	push   ebx
c00156db:	e8 e6 fe ff ff       	call   c00155c6 <CPU::setupSMEP()>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156ea:	74 0c                	je     c00156f8 <CPU::setupFeatures()+0x32>
c00156ec:	83 ec 0c             	sub    esp,0xc
c00156ef:	53                   	push   ebx
c00156f0:	e8 ab ff ff ff       	call   c00156a0 <CPU::setupSMAP()>
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00156ff:	74 0c                	je     c001570d <CPU::setupFeatures()+0x47>
c0015701:	83 ec 0c             	sub    esp,0xc
c0015704:	53                   	push   ebx
c0015705:	e8 d6 fe ff ff       	call   c00155e0 <CPU::setupUMIP()>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015714:	74 0c                	je     c0015722 <CPU::setupFeatures()+0x5c>
c0015716:	83 ec 0c             	sub    esp,0xc
c0015719:	53                   	push   ebx
c001571a:	e8 d9 fe ff ff       	call   c00155f8 <CPU::setupTSC()>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015729:	74 0c                	je     c0015737 <CPU::setupFeatures()+0x71>
c001572b:	83 ec 0c             	sub    esp,0xc
c001572e:	53                   	push   ebx
c001572f:	e8 dc fe ff ff       	call   c0015610 <CPU::setupLargePages()>
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001573e:	74 0c                	je     c001574c <CPU::setupFeatures()+0x86>
c0015740:	83 ec 0c             	sub    esp,0xc
c0015743:	53                   	push   ebx
c0015744:	e8 1d ff ff ff       	call   c0015666 <CPU::setupGlobalPages()>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015753:	74 0d                	je     c0015762 <CPU::setupFeatures()+0x9c>
c0015755:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015759:	83 c4 08             	add    esp,0x8
c001575c:	5b                   	pop    ebx
c001575d:	e9 c6 fe ff ff       	jmp    c0015628 <CPU::setupPAT()>
c0015762:	83 c4 08             	add    esp,0x8
c0015765:	5b                   	pop    ebx
c0015766:	c3                   	ret    
c0015767:	90                   	nop

c0015768 <CPU::open(int, int, void*)>:
c0015768:	57                   	push   edi
c0015769:	56                   	push   esi
c001576a:	53                   	push   ebx
c001576b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001576f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015773:	83 ec 0c             	sub    esp,0xc
c0015776:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001577c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015782:	50                   	push   eax
c0015783:	e8 e2 60 ff ff       	call   c000b86a <GDT::setup()>
c0015788:	83 c4 0c             	add    esp,0xc
c001578b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015791:	6a 00                	push   0x0
c0015793:	68 ef be ad de       	push   0xdeadbeef
c0015798:	57                   	push   edi
c0015799:	e8 62 83 ff ff       	call   c000db00 <TSS::setup(unsigned long, unsigned long)>
c001579e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157a1:	e8 3a 83 ff ff       	call   c000dae0 <TSS::flush()>
c00157a6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00157af:	e8 10 63 ff ff       	call   c000bac4 <IDT::setup()>
c00157b4:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157bb:	e8 74 a6 00 00       	call   c001fe34 <CPU::writeDR7(unsigned long)>
c00157c0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157ca:	e8 e4 6d ff ff       	call   c000c5b3 <Phys::allocatePage()>
c00157cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157d5:	89 30                	mov    DWORD PTR [eax],esi
c00157d7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157dd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157e0:	58                   	pop    eax
c00157e1:	5a                   	pop    edx
c00157e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157ec:	e8 a3 93 ff ff       	call   c000eb94 <VAS::setCPUSpecific(unsigned long)>
c00157f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f4:	e8 f7 f3 ff ff       	call   c0014bf0 <CPU::detectFeatures()>
c00157f9:	e8 22 c3 ff ff       	call   c0011b20 <setupInterruptController()>
c00157fe:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015804:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c0015809:	83 e0 10             	and    eax,0x10
c001580c:	83 f8 01             	cmp    eax,0x1
c001580f:	19 c0                	sbb    eax,eax
c0015811:	83 e0 46             	and    eax,0x46
c0015814:	83 c0 1e             	add    eax,0x1e
c0015817:	89 04 24             	mov    DWORD PTR [esp],eax
c001581a:	e8 a7 d6 ff ff       	call   c0012ec6 <setupTimer(int)>
c001581f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015825:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015828:	e8 99 fe ff ff       	call   c00156c6 <CPU::setupFeatures()>
c001582d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015830:	e8 3f f1 ff ff       	call   c0014974 <CPU::displayFeatures()>
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	5b                   	pop    ebx
c0015839:	31 c0                	xor    eax,eax
c001583b:	5e                   	pop    esi
c001583c:	5f                   	pop    edi
c001583d:	c3                   	ret    

c001583e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001583e:	56                   	push   esi
c001583f:	53                   	push   ebx
c0015840:	51                   	push   ecx
c0015841:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015845:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015849:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c001584c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001584f:	88 c1                	mov    cl,al
c0015851:	c0 e9 06             	shr    cl,0x6
c0015854:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015857:	88 c1                	mov    cl,al
c0015859:	66 c1 e8 03          	shr    ax,0x3
c001585d:	83 e1 07             	and    ecx,0x7
c0015860:	83 e0 07             	and    eax,0x7
c0015863:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015867:	88 06                	mov    BYTE PTR [esi],al
c0015869:	74 7f                	je     c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001586b:	80 f9 04             	cmp    cl,0x4
c001586e:	74 7a                	je     c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015870:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015874:	75 05                	jne    c001587b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015876:	80 f9 05             	cmp    cl,0x5
c0015879:	74 6f                	je     c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001587b:	84 c9                	test   cl,cl
c001587d:	75 05                	jne    c0015884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001587f:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015882:	eb 3c                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015884:	80 f9 01             	cmp    cl,0x1
c0015887:	75 05                	jne    c001588e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015889:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001588c:	eb 32                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001588e:	80 f9 02             	cmp    cl,0x2
c0015891:	75 05                	jne    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015893:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015896:	eb 28                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015898:	31 c0                	xor    eax,eax
c001589a:	80 f9 03             	cmp    cl,0x3
c001589d:	75 05                	jne    c00158a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c001589f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158a2:	eb 1c                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a4:	80 f9 05             	cmp    cl,0x5
c00158a7:	75 05                	jne    c00158ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158a9:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158ac:	eb 12                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158ae:	80 f9 06             	cmp    cl,0x6
c00158b1:	75 05                	jne    c00158b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158b3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158b6:	eb 08                	jmp    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b8:	80 f9 07             	cmp    cl,0x7
c00158bb:	75 03                	jne    c00158c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158bd:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158c0:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158c4:	75 10                	jne    c00158d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158c6:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158ca:	b9 03 00 00 00       	mov    ecx,0x3
c00158cf:	01 d0                	add    eax,edx
c00158d1:	e9 42 01 00 00       	jmp    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158d6:	b9 02 00 00 00       	mov    ecx,0x2
c00158db:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158df:	0f 85 33 01 00 00    	jne    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158e5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158e8:	eb 18                	jmp    c0015902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158ea:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158ee:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158f3:	80 f9 05             	cmp    cl,0x5
c00158f6:	0f 94 c0             	sete   al
c00158f9:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00158fd:	74 0d                	je     c001590c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00158ff:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015902:	b9 06 00 00 00       	mov    ecx,0x6
c0015907:	e9 0c 01 00 00       	jmp    c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001590c:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015910:	0f 84 06 01 00 00    	je     c0015a1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015916:	80 f9 04             	cmp    cl,0x4
c0015919:	0f 85 06 01 00 00    	jne    c0015a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001591f:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015922:	89 c6                	mov    esi,eax
c0015924:	88 c1                	mov    cl,al
c0015926:	66 c1 ee 03          	shr    si,0x3
c001592a:	c0 e9 06             	shr    cl,0x6
c001592d:	83 e6 07             	and    esi,0x7
c0015930:	24 07                	and    al,0x7
c0015932:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015936:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001593a:	89 f1                	mov    ecx,esi
c001593c:	75 05                	jne    c0015943 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c001593e:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015941:	eb 4b                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015943:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015948:	75 05                	jne    c001594f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001594a:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c001594d:	eb 3f                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001594f:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015954:	75 05                	jne    c001595b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015956:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015959:	eb 33                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001595b:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015960:	75 05                	jne    c0015967 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015962:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015965:	eb 27                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015967:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001596c:	75 05                	jne    c0015973 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001596e:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015971:	eb 1b                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015973:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015978:	75 05                	jne    c001597f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001597a:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001597d:	eb 0f                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001597f:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015984:	75 05                	jne    c001598b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015986:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015989:	eb 03                	jmp    c001598e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001598b:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001598e:	84 c9                	test   cl,cl
c0015990:	75 05                	jne    c0015997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015992:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015995:	eb 3c                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015997:	80 f9 01             	cmp    cl,0x1
c001599a:	75 05                	jne    c00159a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001599c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001599f:	eb 32                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a1:	80 f9 02             	cmp    cl,0x2
c00159a4:	75 05                	jne    c00159ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159a6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159a9:	eb 28                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ab:	80 f9 03             	cmp    cl,0x3
c00159ae:	75 05                	jne    c00159b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159b0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159b3:	eb 1e                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b5:	31 c0                	xor    eax,eax
c00159b7:	80 f9 04             	cmp    cl,0x4
c00159ba:	74 17                	je     c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159bc:	80 f9 05             	cmp    cl,0x5
c00159bf:	75 05                	jne    c00159c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159c1:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159c4:	eb 0d                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c6:	80 f9 06             	cmp    cl,0x6
c00159c9:	75 05                	jne    c00159d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159cb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159ce:	eb 03                	jmp    c00159d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159d3:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159d8:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159dc:	0f 94 c2             	sete   dl
c00159df:	d3 e0                	shl    eax,cl
c00159e1:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159e5:	74 07                	je     c00159ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159e7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159ea:	31 d2                	xor    edx,edx
c00159ec:	eb 23                	jmp    c0015a11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159ee:	01 f0                	add    eax,esi
c00159f0:	b9 03 00 00 00       	mov    ecx,0x3
c00159f5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159f9:	74 33                	je     c0015a2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159fb:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00159ff:	75 0d                	jne    c0015a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a01:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a05:	01 c8                	add    eax,ecx
c0015a07:	b9 04 00 00 00       	mov    ecx,0x4
c0015a0c:	eb 20                	jmp    c0015a2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a0e:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a11:	b9 07 00 00 00       	mov    ecx,0x7
c0015a16:	eb 16                	jmp    c0015a2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a18:	31 d2                	xor    edx,edx
c0015a1a:	eb 12                	jmp    c0015a2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a1c:	b9 02 00 00 00       	mov    ecx,0x2
c0015a21:	b2 01                	mov    dl,0x1
c0015a23:	eb 07                	jmp    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a25:	31 d2                	xor    edx,edx
c0015a27:	b9 02 00 00 00       	mov    ecx,0x2
c0015a2c:	31 c0                	xor    eax,eax
c0015a2e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a32:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a34:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a38:	88 11                	mov    BYTE PTR [ecx],dl
c0015a3a:	5a                   	pop    edx
c0015a3b:	5b                   	pop    ebx
c0015a3c:	5e                   	pop    esi
c0015a3d:	c3                   	ret    

c0015a3e <Krnl::panic(char const*)>:
c0015a3e:	55                   	push   ebp
c0015a3f:	89 e5                	mov    ebp,esp
c0015a41:	53                   	push   ebx
c0015a42:	51                   	push   ecx
c0015a43:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a48:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a4b:	85 c0                	test   eax,eax
c0015a4d:	74 02                	je     c0015a51 <Krnl::panic(char const*)+0x13>
c0015a4f:	ff d0                	call   eax
c0015a51:	fa                   	cli    
c0015a52:	50                   	push   eax
c0015a53:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a5a:	50                   	push   eax
c0015a5b:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a62:	53                   	push   ebx
c0015a63:	68 70 28 02 c0       	push   0xc0022870
c0015a68:	e8 a2 97 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0015a6d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a72:	5a                   	pop    edx
c0015a73:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a79:	51                   	push   ecx
c0015a7a:	e8 c0 78 ff ff       	call   c000d33f <setActiveTerminal(VgaText*)>
c0015a7f:	83 c4 0c             	add    esp,0xc
c0015a82:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a87:	6a 01                	push   0x1
c0015a89:	6a 0f                	push   0xf
c0015a8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a91:	50                   	push   eax
c0015a92:	e8 e7 72 ff ff       	call   c000cd7e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a97:	58                   	pop    eax
c0015a98:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015aa3:	50                   	push   eax
c0015aa4:	e8 39 7b ff ff       	call   c000d5e2 <VgaText::clearScreen()>
c0015aa9:	58                   	pop    eax
c0015aaa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015aaf:	5a                   	pop    edx
c0015ab0:	68 89 28 02 c0       	push   0xc0022889
c0015ab5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015abb:	51                   	push   ecx
c0015abc:	e8 9f 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015ac1:	58                   	pop    eax
c0015ac2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ac7:	5a                   	pop    edx
c0015ac8:	68 30 29 02 c0       	push   0xc0022930
c0015acd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ad3:	51                   	push   ecx
c0015ad4:	e8 87 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015ad9:	58                   	pop    eax
c0015ada:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015adf:	5a                   	pop    edx
c0015ae0:	68 a5 28 02 c0       	push   0xc00228a5
c0015ae5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aeb:	51                   	push   ecx
c0015aec:	e8 6f 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015af1:	58                   	pop    eax
c0015af2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015af7:	5a                   	pop    edx
c0015af8:	53                   	push   ebx
c0015af9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aff:	51                   	push   ecx
c0015b00:	e8 5b 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b05:	5b                   	pop    ebx
c0015b06:	58                   	pop    eax
c0015b07:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b0c:	68 c5 28 02 c0       	push   0xc00228c5
c0015b11:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b17:	50                   	push   eax
c0015b18:	e8 43 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b1d:	58                   	pop    eax
c0015b1e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b23:	5a                   	pop    edx
c0015b24:	68 6c 29 02 c0       	push   0xc002296c
c0015b29:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b2f:	51                   	push   ecx
c0015b30:	e8 2b 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b35:	5b                   	pop    ebx
c0015b36:	58                   	pop    eax
c0015b37:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b3c:	68 a5 28 02 c0       	push   0xc00228a5
c0015b41:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b47:	50                   	push   eax
c0015b48:	e8 13 7c ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b4d:	58                   	pop    eax
c0015b4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b53:	5a                   	pop    edx
c0015b54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b57:	83 c0 0c             	add    eax,0xc
c0015b5a:	50                   	push   eax
c0015b5b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b60:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b66:	51                   	push   ecx
c0015b67:	e8 f4 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b6c:	5b                   	pop    ebx
c0015b6d:	58                   	pop    eax
c0015b6e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b73:	68 c4 28 02 c0       	push   0xc00228c4
c0015b78:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b7e:	50                   	push   eax
c0015b7f:	e8 dc 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b84:	58                   	pop    eax
c0015b85:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b8a:	5a                   	pop    edx
c0015b8b:	68 98 29 02 c0       	push   0xc0022998
c0015b90:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b96:	51                   	push   ecx
c0015b97:	e8 c4 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015b9c:	5b                   	pop    ebx
c0015b9d:	58                   	pop    eax
c0015b9e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ba3:	68 d8 29 02 c0       	push   0xc00229d8
c0015ba8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bae:	50                   	push   eax
c0015baf:	e8 ac 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015bb4:	58                   	pop    eax
c0015bb5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bba:	5a                   	pop    edx
c0015bbb:	68 b0 28 02 c0       	push   0xc00228b0
c0015bc0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bc6:	51                   	push   ecx
c0015bc7:	e8 94 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015bcc:	5b                   	pop    ebx
c0015bcd:	58                   	pop    eax
c0015bce:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bd1:	50                   	push   eax
c0015bd2:	68 c8 28 02 c0       	push   0xc00228c8
c0015bd7:	e8 33 96 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0015bdc:	58                   	pop    eax
c0015bdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015be0:	5a                   	pop    edx
c0015be1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015be4:	51                   	push   ecx
c0015be5:	68 d1 28 02 c0       	push   0xc00228d1
c0015bea:	e8 20 96 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0015bef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bf2:	5b                   	pop    ebx
c0015bf3:	5a                   	pop    edx
c0015bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bf9:	51                   	push   ecx
c0015bfa:	68 da 28 02 c0       	push   0xc00228da
c0015bff:	e8 0b 96 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0015c04:	5b                   	pop    ebx
c0015c05:	58                   	pop    eax
c0015c06:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c0b:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c16:	50                   	push   eax
c0015c17:	e8 44 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015c1c:	58                   	pop    eax
c0015c1d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c22:	5a                   	pop    edx
c0015c23:	68 e3 28 02 c0       	push   0xc00228e3
c0015c28:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c2e:	51                   	push   ecx
c0015c2f:	e8 2c 7b ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015c34:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c39:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c3f:	e8 14 9f 00 00       	call   c001fb58 <CPU::readCR0()>
c0015c44:	5a                   	pop    edx
c0015c45:	59                   	pop    ecx
c0015c46:	50                   	push   eax
c0015c47:	53                   	push   ebx
c0015c48:	e8 39 7b ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015c4d:	5b                   	pop    ebx
c0015c4e:	58                   	pop    eax
c0015c4f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c54:	68 ed 28 02 c0       	push   0xc00228ed
c0015c59:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c5f:	50                   	push   eax
c0015c60:	e8 fb 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015c65:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c6a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c70:	e8 d1 a1 00 00       	call   c001fe46 <CPU::readCR2()>
c0015c75:	5a                   	pop    edx
c0015c76:	59                   	pop    ecx
c0015c77:	50                   	push   eax
c0015c78:	53                   	push   ebx
c0015c79:	e8 08 7b ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015c7e:	5b                   	pop    ebx
c0015c7f:	58                   	pop    eax
c0015c80:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c85:	68 f7 28 02 c0       	push   0xc00228f7
c0015c8a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c90:	50                   	push   eax
c0015c91:	e8 ca 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015c96:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c9b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ca1:	e8 3f 9b 00 00       	call   c001f7e5 <CPU::readCR3()>
c0015ca6:	5a                   	pop    edx
c0015ca7:	59                   	pop    ecx
c0015ca8:	50                   	push   eax
c0015ca9:	53                   	push   ebx
c0015caa:	e8 d7 7a ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015caf:	5b                   	pop    ebx
c0015cb0:	58                   	pop    eax
c0015cb1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cb6:	68 0a 29 02 c0       	push   0xc002290a
c0015cbb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cc1:	50                   	push   eax
c0015cc2:	e8 99 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015cc7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ccc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cd2:	e8 4b a1 00 00       	call   c001fe22 <CPU::readCR4()>
c0015cd7:	5a                   	pop    edx
c0015cd8:	59                   	pop    ecx
c0015cd9:	50                   	push   eax
c0015cda:	53                   	push   ebx
c0015cdb:	e8 a6 7a ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015ce0:	5b                   	pop    ebx
c0015ce1:	58                   	pop    eax
c0015ce2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ce7:	68 14 29 02 c0       	push   0xc0022914
c0015cec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cf2:	50                   	push   eax
c0015cf3:	e8 68 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015cf8:	5a                   	pop    edx
c0015cf9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cfe:	59                   	pop    ecx
c0015cff:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d02:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d08:	53                   	push   ebx
c0015d09:	50                   	push   eax
c0015d0a:	e8 77 7a ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015d0f:	58                   	pop    eax
c0015d10:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d15:	5a                   	pop    edx
c0015d16:	68 2b 29 02 c0       	push   0xc002292b
c0015d1b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d21:	51                   	push   ecx
c0015d22:	e8 39 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015d27:	5b                   	pop    ebx
c0015d28:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d2d:	5a                   	pop    edx
c0015d2e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d31:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d37:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d3a:	51                   	push   ecx
c0015d3b:	50                   	push   eax
c0015d3c:	e8 45 7a ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015d41:	5b                   	pop    ebx
c0015d42:	58                   	pop    eax
c0015d43:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d48:	68 2b 29 02 c0       	push   0xc002292b
c0015d4d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d53:	50                   	push   eax
c0015d54:	e8 07 7a ff ff       	call   c000d760 <VgaText::puts(char const*)>
c0015d59:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d5c:	59                   	pop    ecx
c0015d5d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d62:	5b                   	pop    ebx
c0015d63:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d65:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d6b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d6e:	52                   	push   edx
c0015d6f:	50                   	push   eax
c0015d70:	e8 11 7a ff ff       	call   c000d786 <VgaText::putx(unsigned int)>
c0015d75:	83 c4 10             	add    esp,0x10
c0015d78:	b2 fe                	mov    dl,0xfe
c0015d7a:	e4 60                	in     al,0x60
c0015d7c:	3c 1c                	cmp    al,0x1c
c0015d7e:	74 04                	je     c0015d84 <Krnl::panic(char const*)+0x346>
c0015d80:	3c 5a                	cmp    al,0x5a
c0015d82:	75 f6                	jne    c0015d7a <Krnl::panic(char const*)+0x33c>
c0015d84:	e4 64                	in     al,0x64
c0015d86:	a8 02                	test   al,0x2
c0015d88:	75 fa                	jne    c0015d84 <Krnl::panic(char const*)+0x346>
c0015d8a:	88 d0                	mov    al,dl
c0015d8c:	e6 64                	out    0x64,al
c0015d8e:	fa                   	cli    
c0015d8f:	f4                   	hlt    
c0015d90:	eb e8                	jmp    c0015d7a <Krnl::panic(char const*)+0x33c>

c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d92:	55                   	push   ebp
c0015d93:	57                   	push   edi
c0015d94:	56                   	push   esi
c0015d95:	53                   	push   ebx
c0015d96:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d9c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015da3:	8d 46 01             	lea    eax,[esi+0x1]
c0015da6:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dac:	80 fb 40             	cmp    bl,0x40
c0015daf:	75 19                	jne    c0015dca <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015db1:	8a 06                	mov    al,BYTE PTR [esi]
c0015db3:	84 c0                	test   al,al
c0015db5:	74 07                	je     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015db7:	3c 3a                	cmp    al,0x3a
c0015db9:	74 03                	je     c0015dbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dbb:	46                   	inc    esi
c0015dbc:	eb f3                	jmp    c0015db1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dbe:	84 c0                	test   al,al
c0015dc0:	0f 84 1f 01 00 00    	je     c0015ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dc6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dc9:	46                   	inc    esi
c0015dca:	50                   	push   eax
c0015dcb:	6a 40                	push   0x40
c0015dcd:	6a 00                	push   0x0
c0015dcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dd3:	50                   	push   eax
c0015dd4:	e8 e6 a8 fe ff       	call   c00006bf <memset>
c0015dd9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015de0:	31 d2                	xor    edx,edx
c0015de2:	83 c4 10             	add    esp,0x10
c0015de5:	8a 07                	mov    al,BYTE PTR [edi]
c0015de7:	84 c0                	test   al,al
c0015de9:	0f 84 f6 00 00 00    	je     c0015ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015def:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015df5:	0f 8f ea 00 00 00    	jg     c0015ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dfb:	3c 0a                	cmp    al,0xa
c0015dfd:	0f 85 d3 00 00 00    	jne    c0015ed6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e03:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e08:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e0c:	f6 c1 df             	test   cl,0xdf
c0015e0f:	0f 94 c2             	sete   dl
c0015e12:	80 f9 23             	cmp    cl,0x23
c0015e15:	0f 94 c0             	sete   al
c0015e18:	08 c2                	or     dl,al
c0015e1a:	75 47                	jne    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e1c:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e1f:	3c 01                	cmp    al,0x1
c0015e21:	76 40                	jbe    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e23:	80 f9 5b             	cmp    cl,0x5b
c0015e26:	75 3f                	jne    c0015e67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e28:	80 fb 40             	cmp    bl,0x40
c0015e2b:	75 36                	jne    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e2d:	83 ec 0c             	sub    esp,0xc
c0015e30:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e34:	55                   	push   ebp
c0015e35:	e8 a2 a8 fe ff       	call   c00006dc <strlen>
c0015e3a:	83 c4 10             	add    esp,0x10
c0015e3d:	83 f8 3f             	cmp    eax,0x3f
c0015e40:	0f 87 9f 00 00 00    	ja     c0015ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e46:	50                   	push   eax
c0015e47:	50                   	push   eax
c0015e48:	55                   	push   ebp
c0015e49:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e4d:	55                   	push   ebp
c0015e4e:	e8 0b a9 fe ff       	call   c000075e <strcpy>
c0015e53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e56:	e8 81 a8 fe ff       	call   c00006dc <strlen>
c0015e5b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e60:	83 c4 10             	add    esp,0x10
c0015e63:	31 c9                	xor    ecx,ecx
c0015e65:	eb 76                	jmp    c0015edd <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e67:	80 fb 40             	cmp    bl,0x40
c0015e6a:	74 06                	je     c0015e72 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e6c:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e70:	eb 19                	jmp    c0015e8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e72:	51                   	push   ecx
c0015e73:	51                   	push   ecx
c0015e74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e7c:	50                   	push   eax
c0015e7d:	e8 2d a9 fe ff       	call   c00007af <strcmp>
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	85 c0                	test   eax,eax
c0015e87:	75 da                	jne    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e89:	eb e1                	jmp    c0015e6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e8b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e8e:	84 c0                	test   al,al
c0015e90:	0f 94 c1             	sete   cl
c0015e93:	3c 3d                	cmp    al,0x3d
c0015e95:	0f 94 c2             	sete   dl
c0015e98:	08 d1                	or     cl,dl
c0015e9a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015e9e:	75 03                	jne    c0015ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015ea0:	45                   	inc    ebp
c0015ea1:	eb e8                	jmp    c0015e8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015ea3:	84 c0                	test   al,al
c0015ea5:	74 3e                	je     c0015ee5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ea7:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015eab:	52                   	push   edx
c0015eac:	52                   	push   edx
c0015ead:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015eb1:	50                   	push   eax
c0015eb2:	56                   	push   esi
c0015eb3:	e8 f7 a8 fe ff       	call   c00007af <strcmp>
c0015eb8:	83 c4 10             	add    esp,0x10
c0015ebb:	85 c0                	test   eax,eax
c0015ebd:	75 a4                	jne    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ebf:	50                   	push   eax
c0015ec0:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ec3:	50                   	push   eax
c0015ec4:	52                   	push   edx
c0015ec5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ecc:	e8 8d a8 fe ff       	call   c000075e <strcpy>
c0015ed1:	83 c4 10             	add    esp,0x10
c0015ed4:	eb 14                	jmp    c0015eea <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ed6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ed9:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015edd:	47                   	inc    edi
c0015ede:	89 ca                	mov    edx,ecx
c0015ee0:	e9 00 ff ff ff       	jmp    c0015de5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ee5:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015eea:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015eee:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	5d                   	pop    ebp
c0015ef8:	c3                   	ret    

c0015ef9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ef9:	57                   	push   edi
c0015efa:	56                   	push   esi
c0015efb:	53                   	push   ebx
c0015efc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f02:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f09:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f10:	53                   	push   ebx
c0015f11:	e8 c6 a7 fe ff       	call   c00006dc <strlen>
c0015f16:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f19:	89 c7                	mov    edi,eax
c0015f1b:	e8 bc a7 fe ff       	call   c00006dc <strlen>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f27:	31 ff                	xor    edi,edi
c0015f29:	3d ff 00 00 00       	cmp    eax,0xff
c0015f2e:	0f 87 18 01 00 00    	ja     c001604c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f34:	51                   	push   ecx
c0015f35:	51                   	push   ecx
c0015f36:	56                   	push   esi
c0015f37:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f3b:	56                   	push   esi
c0015f3c:	e8 1d a8 fe ff       	call   c000075e <strcpy>
c0015f41:	58                   	pop    eax
c0015f42:	5a                   	pop    edx
c0015f43:	68 54 2e 02 c0       	push   0xc0022e54
c0015f48:	56                   	push   esi
c0015f49:	e8 c7 a8 fe ff       	call   c0000815 <strcat>
c0015f4e:	59                   	pop    ecx
c0015f4f:	58                   	pop    eax
c0015f50:	53                   	push   ebx
c0015f51:	56                   	push   esi
c0015f52:	e8 be a8 fe ff       	call   c0000815 <strcat>
c0015f57:	58                   	pop    eax
c0015f58:	5a                   	pop    edx
c0015f59:	68 42 2a 02 c0       	push   0xc0022a42
c0015f5e:	56                   	push   esi
c0015f5f:	e8 b1 a8 fe ff       	call   c0000815 <strcat>
c0015f64:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f6b:	e8 6a 91 ff ff       	call   c000f0da <operator new(unsigned long)>
c0015f70:	83 c4 0c             	add    esp,0xc
c0015f73:	89 c3                	mov    ebx,eax
c0015f75:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f7b:	56                   	push   esi
c0015f7c:	50                   	push   eax
c0015f7d:	e8 c4 97 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0015f82:	59                   	pop    ecx
c0015f83:	5e                   	pop    esi
c0015f84:	6a 01                	push   0x1
c0015f86:	53                   	push   ebx
c0015f87:	e8 1e 98 ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c0015f8c:	83 c4 10             	add    esp,0x10
c0015f8f:	85 c0                	test   eax,eax
c0015f91:	74 08                	je     c0015f9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f93:	83 ec 0c             	sub    esp,0xc
c0015f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f98:	53                   	push   ebx
c0015f99:	eb 2e                	jmp    c0015fc9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015f9b:	52                   	push   edx
c0015f9c:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fa0:	50                   	push   eax
c0015fa1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fa5:	50                   	push   eax
c0015fa6:	53                   	push   ebx
c0015fa7:	e8 aa 9a ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c0015fac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fb0:	83 c4 10             	add    esp,0x10
c0015fb3:	89 c1                	mov    ecx,eax
c0015fb5:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fb9:	75 13                	jne    c0015fce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	53                   	push   ebx
c0015fbf:	e8 44 98 ff ff       	call   c000f808 <File::close()>
c0015fc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fcc:	eb 7b                	jmp    c0016049 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fce:	83 ec 0c             	sub    esp,0xc
c0015fd1:	50                   	push   eax
c0015fd2:	e8 06 60 ff ff       	call   c000bfdd <malloc>
c0015fd7:	89 c6                	mov    esi,eax
c0015fd9:	58                   	pop    eax
c0015fda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fdc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fe0:	52                   	push   edx
c0015fe1:	56                   	push   esi
c0015fe2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fea:	53                   	push   ebx
c0015feb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fee:	83 c4 20             	add    esp,0x20
c0015ff1:	85 c0                	test   eax,eax
c0015ff3:	75 0a                	jne    c0015fff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ff9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015ffd:	74 18                	je     c0016017 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	31 ff                	xor    edi,edi
c0016004:	53                   	push   ebx
c0016005:	e8 fe 97 ff ff       	call   c000f808 <File::close()>
c001600a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001600c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001600f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016012:	83 c4 10             	add    esp,0x10
c0016015:	eb 35                	jmp    c001604c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0016017:	83 ec 0c             	sub    esp,0xc
c001601a:	53                   	push   ebx
c001601b:	e8 e8 97 ff ff       	call   c000f808 <File::close()>
c0016020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016025:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016028:	83 c4 0c             	add    esp,0xc
c001602b:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016032:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016039:	56                   	push   esi
c001603a:	e8 53 fd ff ff       	call   c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001603f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016042:	89 c7                	mov    edi,eax
c0016044:	e8 a4 5f ff ff       	call   c000bfed <free>
c0016049:	83 c4 10             	add    esp,0x10
c001604c:	81 c4 10 01 00 00    	add    esp,0x110
c0016052:	89 f8                	mov    eax,edi
c0016054:	5b                   	pop    ebx
c0016055:	5e                   	pop    esi
c0016056:	5f                   	pop    edi
c0016057:	c3                   	ret    

c0016058 <Reg::getLine(char*, char*, char*)>:
c0016058:	57                   	push   edi
c0016059:	56                   	push   esi
c001605a:	53                   	push   ebx
c001605b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001605f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016063:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016067:	57                   	push   edi
c0016068:	56                   	push   esi
c0016069:	53                   	push   ebx
c001606a:	68 47 2a 02 c0       	push   0xc0022a47
c001606f:	e8 85 fe ff ff       	call   c0015ef9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016074:	83 c4 10             	add    esp,0x10
c0016077:	84 c0                	test   al,al
c0016079:	75 10                	jne    c001608b <Reg::getLine(char*, char*, char*)+0x33>
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	53                   	push   ebx
c001607e:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016083:	e8 71 fe ff ff       	call   c0015ef9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	5b                   	pop    ebx
c001608c:	5e                   	pop    esi
c001608d:	5f                   	pop    edi
c001608e:	c3                   	ret    

c001608f <Reg::readInt(char*, char*, int*)>:
c001608f:	55                   	push   ebp
c0016090:	57                   	push   edi
c0016091:	56                   	push   esi
c0016092:	53                   	push   ebx
c0016093:	81 ec f0 00 00 00    	sub    esp,0xf0
c0016099:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001609d:	57                   	push   edi
c001609e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160a5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160ac:	e8 a7 ff ff ff       	call   c0016058 <Reg::getLine(char*, char*, char*)>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	84 c0                	test   al,al
c00160b6:	0f 84 b2 00 00 00    	je     c001616e <Reg::readInt(char*, char*, int*)+0xdf>
c00160bc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160c0:	80 fa 2b             	cmp    dl,0x2b
c00160c3:	74 0c                	je     c00160d1 <Reg::readInt(char*, char*, int*)+0x42>
c00160c5:	80 fa 2d             	cmp    dl,0x2d
c00160c8:	75 0e                	jne    c00160d8 <Reg::readInt(char*, char*, int*)+0x49>
c00160ca:	ba 01 00 00 00       	mov    edx,0x1
c00160cf:	eb 0b                	jmp    c00160dc <Reg::readInt(char*, char*, int*)+0x4d>
c00160d1:	ba 01 00 00 00       	mov    edx,0x1
c00160d6:	eb 02                	jmp    c00160da <Reg::readInt(char*, char*, int*)+0x4b>
c00160d8:	31 d2                	xor    edx,edx
c00160da:	31 c0                	xor    eax,eax
c00160dc:	be 0a 00 00 00       	mov    esi,0xa
c00160e1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160e6:	75 20                	jne    c0016108 <Reg::readInt(char*, char*, int*)+0x79>
c00160e8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160ec:	80 f9 78             	cmp    cl,0x78
c00160ef:	75 0a                	jne    c00160fb <Reg::readInt(char*, char*, int*)+0x6c>
c00160f1:	83 c2 02             	add    edx,0x2
c00160f4:	be 10 00 00 00       	mov    esi,0x10
c00160f9:	eb 0d                	jmp    c0016108 <Reg::readInt(char*, char*, int*)+0x79>
c00160fb:	80 f9 62             	cmp    cl,0x62
c00160fe:	75 08                	jne    c0016108 <Reg::readInt(char*, char*, int*)+0x79>
c0016100:	83 c2 02             	add    edx,0x2
c0016103:	be 02 00 00 00       	mov    esi,0x2
c0016108:	01 d7                	add    edi,edx
c001610a:	31 d2                	xor    edx,edx
c001610c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001610e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016112:	84 db                	test   bl,bl
c0016114:	0f 94 c3             	sete   bl
c0016117:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c001611c:	0f 94 c1             	sete   cl
c001611f:	08 cb                	or     bl,cl
c0016121:	75 3a                	jne    c001615d <Reg::readInt(char*, char*, int*)+0xce>
c0016123:	0f af d6             	imul   edx,esi
c0016126:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001612b:	83 fe 10             	cmp    esi,0x10
c001612e:	75 26                	jne    c0016156 <Reg::readInt(char*, char*, int*)+0xc7>
c0016130:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016134:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016137:	89 e9                	mov    ecx,ebp
c0016139:	80 f9 05             	cmp    cl,0x5
c001613c:	77 06                	ja     c0016144 <Reg::readInt(char*, char*, int*)+0xb5>
c001613e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016142:	eb 16                	jmp    c001615a <Reg::readInt(char*, char*, int*)+0xcb>
c0016144:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016148:	83 e9 61             	sub    ecx,0x61
c001614b:	80 f9 05             	cmp    cl,0x5
c001614e:	77 06                	ja     c0016156 <Reg::readInt(char*, char*, int*)+0xc7>
c0016150:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016154:	eb 04                	jmp    c001615a <Reg::readInt(char*, char*, int*)+0xcb>
c0016156:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001615a:	47                   	inc    edi
c001615b:	eb af                	jmp    c001610c <Reg::readInt(char*, char*, int*)+0x7d>
c001615d:	84 c0                	test   al,al
c001615f:	74 02                	je     c0016163 <Reg::readInt(char*, char*, int*)+0xd4>
c0016161:	f7 da                	neg    edx
c0016163:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001616a:	89 10                	mov    DWORD PTR [eax],edx
c001616c:	88 d8                	mov    al,bl
c001616e:	81 c4 ec 00 00 00    	add    esp,0xec
c0016174:	5b                   	pop    ebx
c0016175:	5e                   	pop    esi
c0016176:	5f                   	pop    edi
c0016177:	5d                   	pop    ebp
c0016178:	c3                   	ret    

c0016179 <Reg::readString(char*, char*, char*, int)>:
c0016179:	57                   	push   edi
c001617a:	56                   	push   esi
c001617b:	53                   	push   ebx
c001617c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016182:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016186:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001618d:	57                   	push   edi
c001618e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016195:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001619c:	e8 b7 fe ff ff       	call   c0016058 <Reg::getLine(char*, char*, char*)>
c00161a1:	83 c4 10             	add    esp,0x10
c00161a4:	89 c6                	mov    esi,eax
c00161a6:	84 c0                	test   al,al
c00161a8:	74 44                	je     c00161ee <Reg::readString(char*, char*, char*, int)+0x75>
c00161aa:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161b1:	31 c0                	xor    eax,eax
c00161b3:	4a                   	dec    edx
c00161b4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161b7:	84 c9                	test   cl,cl
c00161b9:	74 0f                	je     c00161ca <Reg::readString(char*, char*, char*, int)+0x51>
c00161bb:	39 c2                	cmp    edx,eax
c00161bd:	7e 0b                	jle    c00161ca <Reg::readString(char*, char*, char*, int)+0x51>
c00161bf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161c2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161c7:	40                   	inc    eax
c00161c8:	eb ea                	jmp    c00161b4 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161ca:	83 ec 0c             	sub    esp,0xc
c00161cd:	53                   	push   ebx
c00161ce:	e8 09 a5 fe ff       	call   c00006dc <strlen>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161db:	75 11                	jne    c00161ee <Reg::readString(char*, char*, char*, int)+0x75>
c00161dd:	83 ec 0c             	sub    esp,0xc
c00161e0:	53                   	push   ebx
c00161e1:	e8 f6 a4 fe ff       	call   c00006dc <strlen>
c00161e6:	83 c4 10             	add    esp,0x10
c00161e9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161ee:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161f4:	89 f0                	mov    eax,esi
c00161f6:	5b                   	pop    ebx
c00161f7:	5e                   	pop    esi
c00161f8:	5f                   	pop    edi
c00161f9:	c3                   	ret    

c00161fa <Reg::readBool(char*, char*, bool*)>:
c00161fa:	83 ec 20             	sub    esp,0x20
c00161fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016201:	50                   	push   eax
c0016202:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016206:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001620a:	e8 80 fe ff ff       	call   c001608f <Reg::readInt(char*, char*, int*)>
c001620f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016213:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016218:	0f 95 02             	setne  BYTE PTR [edx]
c001621b:	83 c4 2c             	add    esp,0x2c
c001621e:	c3                   	ret    

c001621f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001621f:	53                   	push   ebx
c0016220:	83 ec 1c             	sub    esp,0x1c
c0016223:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016227:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001622b:	50                   	push   eax
c001622c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016230:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016234:	e8 c1 ff ff ff       	call   c00161fa <Reg::readBool(char*, char*, bool*)>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	84 c0                	test   al,al
c001623e:	74 04                	je     c0016244 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016240:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016244:	83 c4 18             	add    esp,0x18
c0016247:	88 d8                	mov    al,bl
c0016249:	5b                   	pop    ebx
c001624a:	c3                   	ret    

c001624b <Reg::readIntWithDefault(char*, char*, int)>:
c001624b:	53                   	push   ebx
c001624c:	83 ec 1c             	sub    esp,0x1c
c001624f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016253:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016257:	50                   	push   eax
c0016258:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001625c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016260:	e8 2a fe ff ff       	call   c001608f <Reg::readInt(char*, char*, int*)>
c0016265:	83 c4 10             	add    esp,0x10
c0016268:	84 c0                	test   al,al
c001626a:	74 04                	je     c0016270 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001626c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016270:	83 c4 18             	add    esp,0x18
c0016273:	89 d8                	mov    eax,ebx
c0016275:	5b                   	pop    ebx
c0016276:	c3                   	ret    

c0016277 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016277:	56                   	push   esi
c0016278:	53                   	push   ebx
c0016279:	51                   	push   ecx
c001627a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001627e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016286:	56                   	push   esi
c0016287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628f:	e8 e5 fe ff ff       	call   c0016179 <Reg::readString(char*, char*, char*, int)>
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	84 c0                	test   al,al
c0016299:	74 02                	je     c001629d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001629b:	89 f3                	mov    ebx,esi
c001629d:	5a                   	pop    edx
c001629e:	89 d8                	mov    eax,ebx
c00162a0:	5b                   	pop    ebx
c00162a1:	5e                   	pop    esi
c00162a2:	c3                   	ret    

c00162a3 <Sys::exit(regs*)>:
c00162a3:	83 ec 18             	sub    esp,0x18
c00162a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162ad:	e8 c2 31 00 00       	call   c0019474 <terminateTask(int)>
c00162b2:	83 c8 ff             	or     eax,0xffffffff
c00162b5:	89 c2                	mov    edx,eax
c00162b7:	83 c4 1c             	add    esp,0x1c
c00162ba:	c3                   	ret    

c00162bb <Sys::loadDLL(regs*)>:
c00162bb:	56                   	push   esi
c00162bc:	31 d2                	xor    edx,edx
c00162be:	53                   	push   ebx
c00162bf:	b8 01 00 00 00       	mov    eax,0x1
c00162c4:	51                   	push   ecx
c00162c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162cd:	74 7d                	je     c001634c <Sys::loadDLL(regs*)+0x91>
c00162cf:	83 ec 0c             	sub    esp,0xc
c00162d2:	68 14 01 00 00       	push   0x114
c00162d7:	e8 fe 8d ff ff       	call   c000f0da <operator new(unsigned long)>
c00162dc:	89 c3                	mov    ebx,eax
c00162de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e3:	83 c4 0c             	add    esp,0xc
c00162e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162ec:	53                   	push   ebx
c00162ed:	e8 54 94 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c00162f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162f5:	e8 1e 97 ff ff       	call   c000fa18 <File::exists()>
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	84 c0                	test   al,al
c00162ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016301:	75 11                	jne    c0016314 <Sys::loadDLL(regs*)+0x59>
c0016303:	83 ec 0c             	sub    esp,0xc
c0016306:	53                   	push   ebx
c0016307:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	b8 03 00 00 00       	mov    eax,0x3
c0016312:	eb 36                	jmp    c001634a <Sys::loadDLL(regs*)+0x8f>
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	53                   	push   ebx
c0016318:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001631b:	58                   	pop    eax
c001631c:	5a                   	pop    edx
c001631d:	6a 00                	push   0x0
c001631f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016322:	e8 3a 21 00 00       	call   c0018461 <Thr::loadDLL(char const*, bool)>
c0016327:	83 c4 10             	add    esp,0x10
c001632a:	89 c1                	mov    ecx,eax
c001632c:	31 d2                	xor    edx,edx
c001632e:	b8 04 00 00 00       	mov    eax,0x4
c0016333:	85 c9                	test   ecx,ecx
c0016335:	74 15                	je     c001634c <Sys::loadDLL(regs*)+0x91>
c0016337:	53                   	push   ebx
c0016338:	53                   	push   ebx
c0016339:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001633f:	51                   	push   ecx
c0016340:	e8 e2 22 00 00       	call   c0018627 <Thr::executeDLL(unsigned long, void*)>
c0016345:	83 c4 10             	add    esp,0x10
c0016348:	31 c0                	xor    eax,eax
c001634a:	31 d2                	xor    edx,edx
c001634c:	59                   	pop    ecx
c001634d:	5b                   	pop    ebx
c001634e:	5e                   	pop    esi
c001634f:	c3                   	ret    

c0016350 <Sys::read(regs*)>:
c0016350:	57                   	push   edi
c0016351:	56                   	push   esi
c0016352:	53                   	push   ebx
c0016353:	83 ec 10             	sub    esp,0x10
c0016356:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001635a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001635d:	83 f8 02             	cmp    eax,0x2
c0016360:	77 10                	ja     c0016372 <Sys::read(regs*)+0x22>
c0016362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016367:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001636a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016370:	eb 0e                	jmp    c0016380 <Sys::read(regs*)+0x30>
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	50                   	push   eax
c0016376:	e8 f0 7c ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	89 c1                	mov    ecx,eax
c0016380:	83 c8 ff             	or     eax,0xffffffff
c0016383:	85 c9                	test   ecx,ecx
c0016385:	89 c2                	mov    edx,eax
c0016387:	74 28                	je     c00163b1 <Sys::read(regs*)+0x61>
c0016389:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016391:	83 ec 0c             	sub    esp,0xc
c0016394:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016396:	31 ff                	xor    edi,edi
c0016398:	8d 54 24 18          	lea    edx,[esp+0x18]
c001639c:	52                   	push   edx
c001639d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163a0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163a3:	57                   	push   edi
c00163a4:	56                   	push   esi
c00163a5:	51                   	push   ecx
c00163a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163ad:	83 c4 20             	add    esp,0x20
c00163b0:	99                   	cdq    
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	5b                   	pop    ebx
c00163b5:	5e                   	pop    esi
c00163b6:	5f                   	pop    edi
c00163b7:	c3                   	ret    

c00163b8 <Sys::sbrk(regs*)>:
c00163b8:	56                   	push   esi
c00163b9:	53                   	push   ebx
c00163ba:	50                   	push   eax
c00163bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163c7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163ca:	85 db                	test   ebx,ebx
c00163cc:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163d2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163d5:	74 02                	je     c00163d9 <Sys::sbrk(regs*)+0x21>
c00163d7:	79 06                	jns    c00163df <Sys::sbrk(regs*)+0x27>
c00163d9:	89 f0                	mov    eax,esi
c00163db:	31 d2                	xor    edx,edx
c00163dd:	eb 2a                	jmp    c0016409 <Sys::sbrk(regs*)+0x51>
c00163df:	83 c8 ff             	or     eax,0xffffffff
c00163e2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163e8:	89 c2                	mov    edx,eax
c00163ea:	77 1d                	ja     c0016409 <Sys::sbrk(regs*)+0x51>
c00163ec:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163f2:	50                   	push   eax
c00163f3:	c1 ea 0c             	shr    edx,0xc
c00163f6:	68 07 04 00 00       	push   0x407
c00163fb:	52                   	push   edx
c00163fc:	51                   	push   ecx
c00163fd:	e8 c0 85 ff ff       	call   c000e9c2 <VAS::allocatePages(int, int)>
c0016402:	89 f0                	mov    eax,esi
c0016404:	31 d2                	xor    edx,edx
c0016406:	83 c4 10             	add    esp,0x10
c0016409:	59                   	pop    ecx
c001640a:	5b                   	pop    ebx
c001640b:	5e                   	pop    esi
c001640c:	c3                   	ret    

c001640d <Sys::write(regs*)>:
c001640d:	57                   	push   edi
c001640e:	56                   	push   esi
c001640f:	53                   	push   ebx
c0016410:	83 ec 18             	sub    esp,0x18
c0016413:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016417:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001641a:	68 87 2a 02 c0       	push   0xc0022a87
c001641f:	e8 eb 8d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001642b:	77 10                	ja     c001643d <Sys::write(regs*)+0x30>
c001642d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016432:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016435:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001643b:	eb 1b                	jmp    c0016458 <Sys::write(regs*)+0x4b>
c001643d:	83 ec 0c             	sub    esp,0xc
c0016440:	68 a6 2a 02 c0       	push   0xc0022aa6
c0016445:	e8 c5 8d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001644a:	58                   	pop    eax
c001644b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001644e:	e8 18 7c ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	89 c1                	mov    ecx,eax
c0016458:	83 c8 ff             	or     eax,0xffffffff
c001645b:	85 c9                	test   ecx,ecx
c001645d:	89 c2                	mov    edx,eax
c001645f:	74 28                	je     c0016489 <Sys::write(regs*)+0x7c>
c0016461:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016469:	83 ec 0c             	sub    esp,0xc
c001646c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001646e:	31 ff                	xor    edi,edi
c0016470:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016474:	52                   	push   edx
c0016475:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016478:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001647b:	57                   	push   edi
c001647c:	56                   	push   esi
c001647d:	51                   	push   ecx
c001647e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016481:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016485:	83 c4 20             	add    esp,0x20
c0016488:	99                   	cdq    
c0016489:	83 c4 10             	add    esp,0x10
c001648c:	5b                   	pop    ebx
c001648d:	5e                   	pop    esi
c001648e:	5f                   	pop    edi
c001648f:	c3                   	ret    

c0016490 <Sys::yield(regs*)>:
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	e8 af 25 00 00       	call   c0018a47 <lockScheduler()>
c0016498:	e8 f3 28 00 00       	call   c0018d90 <schedule()>
c001649d:	e8 a7 25 00 00       	call   c0018a49 <unlockScheduler()>
c00164a2:	31 c0                	xor    eax,eax
c00164a4:	31 d2                	xor    edx,edx
c00164a6:	83 c4 0c             	add    esp,0xc
c00164a9:	c3                   	ret    

c00164aa <sysCallGetPID(regs*)>:
c00164aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00164b4:	89 c2                	mov    edx,eax
c00164b6:	c1 fa 1f             	sar    edx,0x1f
c00164b9:	c3                   	ret    

c00164ba <sysCallSeekDir(regs*)>:
c00164ba:	31 c0                	xor    eax,eax
c00164bc:	31 d2                	xor    edx,edx
c00164be:	c3                   	ret    

c00164bf <sysCallTellDir(regs*)>:
c00164bf:	31 c0                	xor    eax,eax
c00164c1:	31 d2                	xor    edx,edx
c00164c3:	c3                   	ret    

c00164c4 <sysCallVerify(regs*)>:
c00164c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164c8:	31 d2                	xor    edx,edx
c00164ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164cd:	c3                   	ret    

c00164ce <sysCallFork(regs*)>:
c00164ce:	83 c8 ff             	or     eax,0xffffffff
c00164d1:	83 ca ff             	or     edx,0xffffffff
c00164d4:	c3                   	ret    

c00164d5 <sysCallExecve(regs*)>:
c00164d5:	83 c8 ff             	or     eax,0xffffffff
c00164d8:	83 ca ff             	or     edx,0xffffffff
c00164db:	c3                   	ret    

c00164dc <sysCallGetArgc(regs*)>:
c00164dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164e4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164ea:	89 c2                	mov    edx,eax
c00164ec:	c1 fa 1f             	sar    edx,0x1f
c00164ef:	c3                   	ret    

c00164f0 <sysFormatDisk(regs*)>:
c00164f0:	56                   	push   esi
c00164f1:	53                   	push   ebx
c00164f2:	50                   	push   eax
c00164f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f7:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00164fd:	eb 2a                	jmp    c0016529 <sysFormatDisk(regs*)+0x39>
c00164ff:	83 ec 0c             	sub    esp,0xc
c0016502:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016505:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016508:	8b 13                	mov    edx,DWORD PTR [ebx]
c001650a:	51                   	push   ecx
c001650b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001650e:	51                   	push   ecx
c001650f:	50                   	push   eax
c0016510:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c0016517:	50                   	push   eax
c0016518:	53                   	push   ebx
c0016519:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001651c:	83 c4 20             	add    esp,0x20
c001651f:	89 c1                	mov    ecx,eax
c0016521:	83 f8 08             	cmp    eax,0x8
c0016524:	75 12                	jne    c0016538 <sysFormatDisk(regs*)+0x48>
c0016526:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016529:	85 db                	test   ebx,ebx
c001652b:	75 d2                	jne    c00164ff <sysFormatDisk(regs*)+0xf>
c001652d:	b8 03 00 00 00       	mov    eax,0x3
c0016532:	31 d2                	xor    edx,edx
c0016534:	59                   	pop    ecx
c0016535:	5b                   	pop    ebx
c0016536:	5e                   	pop    esi
c0016537:	c3                   	ret    
c0016538:	85 c0                	test   eax,eax
c001653a:	74 13                	je     c001654f <sysFormatDisk(regs*)+0x5f>
c001653c:	31 d2                	xor    edx,edx
c001653e:	b8 01 00 00 00       	mov    eax,0x1
c0016543:	83 f9 09             	cmp    ecx,0x9
c0016546:	74 ec                	je     c0016534 <sysFormatDisk(regs*)+0x44>
c0016548:	b8 02 00 00 00       	mov    eax,0x2
c001654d:	eb e3                	jmp    c0016532 <sysFormatDisk(regs*)+0x42>
c001654f:	31 c0                	xor    eax,eax
c0016551:	eb df                	jmp    c0016532 <sysFormatDisk(regs*)+0x42>

c0016553 <sysSetDiskVolumeLabel(regs*)>:
c0016553:	56                   	push   esi
c0016554:	53                   	push   ebx
c0016555:	53                   	push   ebx
c0016556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001655d:	83 f8 19             	cmp    eax,0x19
c0016560:	77 2d                	ja     c001658f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016562:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c0016569:	85 c9                	test   ecx,ecx
c001656b:	74 22                	je     c001658f <sysSetDiskVolumeLabel(regs*)+0x3c>
c001656d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016570:	85 d2                	test   edx,edx
c0016572:	74 1b                	je     c001658f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016574:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001657a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001657c:	52                   	push   edx
c001657d:	50                   	push   eax
c001657e:	51                   	push   ecx
c001657f:	53                   	push   ebx
c0016580:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	89 c2                	mov    edx,eax
c0016588:	c1 fa 1f             	sar    edx,0x1f
c001658b:	59                   	pop    ecx
c001658c:	5b                   	pop    ebx
c001658d:	5e                   	pop    esi
c001658e:	c3                   	ret    
c001658f:	59                   	pop    ecx
c0016590:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016595:	5b                   	pop    ebx
c0016596:	83 ca ff             	or     edx,0xffffffff
c0016599:	5e                   	pop    esi
c001659a:	c3                   	ret    

c001659b <sysGetDiskVolumeLabel(regs*)>:
c001659b:	57                   	push   edi
c001659c:	56                   	push   esi
c001659d:	53                   	push   ebx
c001659e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165a5:	83 fa 19             	cmp    edx,0x19
c00165a8:	77 38                	ja     c00165e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165aa:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165b1:	85 c9                	test   ecx,ecx
c00165b3:	74 2d                	je     c00165e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165b8:	85 db                	test   ebx,ebx
c00165ba:	74 26                	je     c00165e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165bf:	85 c0                	test   eax,eax
c00165c1:	74 1f                	je     c00165e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c3:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165c9:	83 ec 0c             	sub    esp,0xc
c00165cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165ce:	50                   	push   eax
c00165cf:	53                   	push   ebx
c00165d0:	52                   	push   edx
c00165d1:	51                   	push   ecx
c00165d2:	56                   	push   esi
c00165d3:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165d6:	83 c4 20             	add    esp,0x20
c00165d9:	89 c2                	mov    edx,eax
c00165db:	c1 fa 1f             	sar    edx,0x1f
c00165de:	5b                   	pop    ebx
c00165df:	5e                   	pop    esi
c00165e0:	5f                   	pop    edi
c00165e1:	c3                   	ret    
c00165e2:	5b                   	pop    ebx
c00165e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165e8:	5e                   	pop    esi
c00165e9:	83 ca ff             	or     edx,0xffffffff
c00165ec:	5f                   	pop    edi
c00165ed:	c3                   	ret    

c00165ee <sysShutdown(regs*)>:
c00165ee:	57                   	push   edi
c00165ef:	56                   	push   esi
c00165f0:	56                   	push   esi
c00165f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165f8:	85 c0                	test   eax,eax
c00165fa:	74 18                	je     c0016614 <sysShutdown(regs*)+0x26>
c00165fc:	83 f8 01             	cmp    eax,0x1
c00165ff:	74 51                	je     c0016652 <sysShutdown(regs*)+0x64>
c0016601:	83 ce ff             	or     esi,0xffffffff
c0016604:	83 cf ff             	or     edi,0xffffffff
c0016607:	83 f8 02             	cmp    eax,0x2
c001660a:	74 2a                	je     c0016636 <sysShutdown(regs*)+0x48>
c001660c:	59                   	pop    ecx
c001660d:	89 f0                	mov    eax,esi
c001660f:	5e                   	pop    esi
c0016610:	89 fa                	mov    edx,edi
c0016612:	5f                   	pop    edi
c0016613:	c3                   	ret    
c0016614:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0016619:	83 ce ff             	or     esi,0xffffffff
c001661c:	83 cf ff             	or     edi,0xffffffff
c001661f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016621:	6a 00                	push   0x0
c0016623:	6a 00                	push   0x0
c0016625:	6a 00                	push   0x0
c0016627:	50                   	push   eax
c0016628:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001662b:	83 c4 10             	add    esp,0x10
c001662e:	89 f0                	mov    eax,esi
c0016630:	89 fa                	mov    edx,edi
c0016632:	59                   	pop    ecx
c0016633:	5e                   	pop    esi
c0016634:	5f                   	pop    edi
c0016635:	c3                   	ret    
c0016636:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001663b:	8b 10                	mov    edx,DWORD PTR [eax]
c001663d:	6a 00                	push   0x0
c001663f:	6a 00                	push   0x0
c0016641:	6a 01                	push   0x1
c0016643:	50                   	push   eax
c0016644:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	89 f0                	mov    eax,esi
c001664c:	89 fa                	mov    edx,edi
c001664e:	59                   	pop    ecx
c001664f:	5e                   	pop    esi
c0016650:	5f                   	pop    edi
c0016651:	c3                   	ret    
c0016652:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0016657:	85 c0                	test   eax,eax
c0016659:	74 02                	je     c001665d <sysShutdown(regs*)+0x6f>
c001665b:	ff d0                	call   eax
c001665d:	31 f6                	xor    esi,esi
c001665f:	59                   	pop    ecx
c0016660:	31 ff                	xor    edi,edi
c0016662:	89 f0                	mov    eax,esi
c0016664:	5e                   	pop    esi
c0016665:	89 fa                	mov    edx,edi
c0016667:	5f                   	pop    edi
c0016668:	c3                   	ret    

c0016669 <sysCallGetCwd(regs*)>:
c0016669:	83 ec 10             	sub    esp,0x10
c001666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016670:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016673:	52                   	push   edx
c0016674:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016677:	51                   	push   ecx
c0016678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001667d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016680:	50                   	push   eax
c0016681:	e8 31 94 ff ff       	call   c000fab7 <getcwd(Process*, char*, int)>
c0016686:	89 c2                	mov    edx,eax
c0016688:	83 c4 1c             	add    esp,0x1c
c001668b:	c1 fa 1f             	sar    edx,0x1f
c001668e:	c3                   	ret    

c001668f <sysCallSetCwd(regs*)>:
c001668f:	83 ec 14             	sub    esp,0x14
c0016692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016696:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016699:	50                   	push   eax
c001669a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166a2:	52                   	push   edx
c00166a3:	e8 39 94 ff ff       	call   c000fae1 <setcwd(Process*, char*)>
c00166a8:	89 c2                	mov    edx,eax
c00166aa:	83 c4 1c             	add    esp,0x1c
c00166ad:	c1 fa 1f             	sar    edx,0x1f
c00166b0:	c3                   	ret    

c00166b1 <sysCallRealpath(regs*)>:
c00166b1:	53                   	push   ebx
c00166b2:	83 ec 08             	sub    esp,0x8
c00166b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166bc:	85 c9                	test   ecx,ecx
c00166be:	74 35                	je     c00166f5 <sysCallRealpath(regs*)+0x44>
c00166c0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166c3:	31 d2                	xor    edx,edx
c00166c5:	b8 01 00 00 00       	mov    eax,0x1
c00166ca:	85 db                	test   ebx,ebx
c00166cc:	75 05                	jne    c00166d3 <sysCallRealpath(regs*)+0x22>
c00166ce:	83 c4 08             	add    esp,0x8
c00166d1:	5b                   	pop    ebx
c00166d2:	c3                   	ret    
c00166d3:	50                   	push   eax
c00166d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166dc:	05 0c 01 00 00       	add    eax,0x10c
c00166e1:	50                   	push   eax
c00166e2:	51                   	push   ecx
c00166e3:	53                   	push   ebx
c00166e4:	e8 b3 8e ff ff       	call   c000f59c <standardiseFiles(char*, char const*, char const*)>
c00166e9:	83 c4 10             	add    esp,0x10
c00166ec:	31 c0                	xor    eax,eax
c00166ee:	31 d2                	xor    edx,edx
c00166f0:	83 c4 08             	add    esp,0x8
c00166f3:	5b                   	pop    ebx
c00166f4:	c3                   	ret    
c00166f5:	b8 01 00 00 00       	mov    eax,0x1
c00166fa:	31 d2                	xor    edx,edx
c00166fc:	eb f2                	jmp    c00166f0 <sysCallRealpath(regs*)+0x3f>

c00166fe <sysCallReadDir(regs*)>:
c00166fe:	53                   	push   ebx
c00166ff:	83 ec 18             	sub    esp,0x18
c0016702:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016706:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016709:	83 f8 02             	cmp    eax,0x2
c001670c:	76 56                	jbe    c0016764 <sysCallReadDir(regs*)+0x66>
c001670e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016711:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016717:	77 57                	ja     c0016770 <sysCallReadDir(regs*)+0x72>
c0016719:	83 ec 0c             	sub    esp,0xc
c001671c:	50                   	push   eax
c001671d:	e8 49 79 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016722:	83 c4 10             	add    esp,0x10
c0016725:	85 c0                	test   eax,eax
c0016727:	74 57                	je     c0016780 <sysCallReadDir(regs*)+0x82>
c0016729:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016731:	83 ec 0c             	sub    esp,0xc
c0016734:	8b 10                	mov    edx,DWORD PTR [eax]
c0016736:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001673a:	51                   	push   ecx
c001673b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001673e:	51                   	push   ecx
c001673f:	6a 00                	push   0x0
c0016741:	68 10 01 00 00       	push   0x110
c0016746:	50                   	push   eax
c0016747:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001674a:	83 c4 20             	add    esp,0x20
c001674d:	89 c1                	mov    ecx,eax
c001674f:	85 c0                	test   eax,eax
c0016751:	74 38                	je     c001678b <sysCallReadDir(regs*)+0x8d>
c0016753:	31 d2                	xor    edx,edx
c0016755:	b8 02 00 00 00       	mov    eax,0x2
c001675a:	83 f9 07             	cmp    ecx,0x7
c001675d:	74 05                	je     c0016764 <sysCallReadDir(regs*)+0x66>
c001675f:	83 c4 18             	add    esp,0x18
c0016762:	5b                   	pop    ebx
c0016763:	c3                   	ret    
c0016764:	b8 01 00 00 00       	mov    eax,0x1
c0016769:	31 d2                	xor    edx,edx
c001676b:	83 c4 18             	add    esp,0x18
c001676e:	5b                   	pop    ebx
c001676f:	c3                   	ret    
c0016770:	53                   	push   ebx
c0016771:	53                   	push   ebx
c0016772:	52                   	push   edx
c0016773:	68 c8 2a 02 c0       	push   0xc0022ac8
c0016778:	e8 92 8a ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001677d:	83 c4 10             	add    esp,0x10
c0016780:	83 c4 18             	add    esp,0x18
c0016783:	83 c8 ff             	or     eax,0xffffffff
c0016786:	83 ca ff             	or     edx,0xffffffff
c0016789:	5b                   	pop    ebx
c001678a:	c3                   	ret    
c001678b:	31 c0                	xor    eax,eax
c001678d:	31 d2                	xor    edx,edx
c001678f:	eb da                	jmp    c001676b <sysCallReadDir(regs*)+0x6d>

c0016791 <sysCallIsATTY(regs*)>:
c0016791:	83 ec 0c             	sub    esp,0xc
c0016794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016798:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001679b:	83 f8 02             	cmp    eax,0x2
c001679e:	76 07                	jbe    c00167a7 <sysCallIsATTY(regs*)+0x16>
c00167a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167a5:	75 28                	jne    c00167cf <sysCallIsATTY(regs*)+0x3e>
c00167a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167af:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167b5:	85 c0                	test   eax,eax
c00167b7:	74 26                	je     c00167df <sysCallIsATTY(regs*)+0x4e>
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00167be:	50                   	push   eax
c00167bf:	ff 12                	call   DWORD PTR [edx]
c00167c1:	83 c4 10             	add    esp,0x10
c00167c4:	25 ff 00 00 00       	and    eax,0xff
c00167c9:	31 d2                	xor    edx,edx
c00167cb:	83 c4 0c             	add    esp,0xc
c00167ce:	c3                   	ret    
c00167cf:	83 ec 0c             	sub    esp,0xc
c00167d2:	50                   	push   eax
c00167d3:	e8 93 78 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	85 c0                	test   eax,eax
c00167dd:	75 da                	jne    c00167b9 <sysCallIsATTY(regs*)+0x28>
c00167df:	83 c8 ff             	or     eax,0xffffffff
c00167e2:	83 ca ff             	or     edx,0xffffffff
c00167e5:	83 c4 0c             	add    esp,0xc
c00167e8:	c3                   	ret    

c00167e9 <sysCallSeek(regs*)>:
c00167e9:	53                   	push   ebx
c00167ea:	83 ec 08             	sub    esp,0x8
c00167ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167f4:	83 f8 02             	cmp    eax,0x2
c00167f7:	76 4b                	jbe    c0016844 <sysCallSeek(regs*)+0x5b>
c00167f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167fe:	77 34                	ja     c0016834 <sysCallSeek(regs*)+0x4b>
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	50                   	push   eax
c0016804:	e8 62 78 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016809:	83 c4 0c             	add    esp,0xc
c001680c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001680f:	31 db                	xor    ebx,ebx
c0016811:	53                   	push   ebx
c0016812:	51                   	push   ecx
c0016813:	50                   	push   eax
c0016814:	e8 4f 90 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	85 c0                	test   eax,eax
c001681e:	0f 95 c0             	setne  al
c0016821:	25 ff 00 00 00       	and    eax,0xff
c0016826:	31 d2                	xor    edx,edx
c0016828:	f7 d8                	neg    eax
c001682a:	83 d2 00             	adc    edx,0x0
c001682d:	83 c4 08             	add    esp,0x8
c0016830:	f7 da                	neg    edx
c0016832:	5b                   	pop    ebx
c0016833:	c3                   	ret    
c0016834:	52                   	push   edx
c0016835:	52                   	push   edx
c0016836:	50                   	push   eax
c0016837:	68 84 2b 02 c0       	push   0xc0022b84
c001683c:	e8 ce 89 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	83 c4 08             	add    esp,0x8
c0016847:	83 c8 ff             	or     eax,0xffffffff
c001684a:	83 ca ff             	or     edx,0xffffffff
c001684d:	5b                   	pop    ebx
c001684e:	c3                   	ret    

c001684f <sysCallTell(regs*)>:
c001684f:	53                   	push   ebx
c0016850:	83 ec 08             	sub    esp,0x8
c0016853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016857:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001685a:	83 f8 02             	cmp    eax,0x2
c001685d:	76 60                	jbe    c00168bf <sysCallTell(regs*)+0x70>
c001685f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016864:	77 30                	ja     c0016896 <sysCallTell(regs*)+0x47>
c0016866:	83 ec 0c             	sub    esp,0xc
c0016869:	50                   	push   eax
c001686a:	e8 fc 77 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c001686f:	5a                   	pop    edx
c0016870:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016873:	59                   	pop    ecx
c0016874:	53                   	push   ebx
c0016875:	50                   	push   eax
c0016876:	e8 43 90 ff ff       	call   c000f8be <File::tell(unsigned long long*)>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	85 c0                	test   eax,eax
c0016880:	0f 95 c0             	setne  al
c0016883:	25 ff 00 00 00       	and    eax,0xff
c0016888:	31 d2                	xor    edx,edx
c001688a:	f7 d8                	neg    eax
c001688c:	83 d2 00             	adc    edx,0x0
c001688f:	83 c4 08             	add    esp,0x8
c0016892:	f7 da                	neg    edx
c0016894:	5b                   	pop    ebx
c0016895:	c3                   	ret    
c0016896:	52                   	push   edx
c0016897:	52                   	push   edx
c0016898:	50                   	push   eax
c0016899:	68 9e 2b 02 c0       	push   0xc0022b9e
c001689e:	e8 6c 89 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00168a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	31 d2                	xor    edx,edx
c00168ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168b8:	83 c4 08             	add    esp,0x8
c00168bb:	31 c0                	xor    eax,eax
c00168bd:	5b                   	pop    ebx
c00168be:	c3                   	ret    
c00168bf:	83 c4 08             	add    esp,0x8
c00168c2:	83 c8 ff             	or     eax,0xffffffff
c00168c5:	83 ca ff             	or     edx,0xffffffff
c00168c8:	5b                   	pop    ebx
c00168c9:	c3                   	ret    

c00168ca <sysCallSizeFromFilename(regs*)>:
c00168ca:	57                   	push   edi
c00168cb:	56                   	push   esi
c00168cc:	53                   	push   ebx
c00168cd:	83 ec 10             	sub    esp,0x10
c00168d0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168d4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168d7:	83 fb 02             	cmp    ebx,0x2
c00168da:	0f 86 8b 00 00 00    	jbe    c001696b <sysCallSizeFromFilename(regs*)+0xa1>
c00168e0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168e6:	77 58                	ja     c0016940 <sysCallSizeFromFilename(regs*)+0x76>
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	68 14 01 00 00       	push   0x114
c00168f0:	e8 e5 87 ff ff       	call   c000f0da <operator new(unsigned long)>
c00168f5:	89 c7                	mov    edi,eax
c00168f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168fc:	83 c4 0c             	add    esp,0xc
c00168ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016902:	50                   	push   eax
c0016903:	53                   	push   ebx
c0016904:	57                   	push   edi
c0016905:	e8 3c 8e ff ff       	call   c000f746 <File::File(char const*, Process*)>
c001690a:	83 c4 0c             	add    esp,0xc
c001690d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016911:	50                   	push   eax
c0016912:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016915:	52                   	push   edx
c0016916:	57                   	push   edi
c0016917:	e8 3a 91 ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c001691c:	89 c3                	mov    ebx,eax
c001691e:	8b 07                	mov    eax,DWORD PTR [edi]
c0016920:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016923:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016926:	31 c0                	xor    eax,eax
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	85 db                	test   ebx,ebx
c001692d:	0f 95 c0             	setne  al
c0016930:	31 d2                	xor    edx,edx
c0016932:	f7 d8                	neg    eax
c0016934:	83 d2 00             	adc    edx,0x0
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	f7 da                	neg    edx
c001693c:	5b                   	pop    ebx
c001693d:	5e                   	pop    esi
c001693e:	5f                   	pop    edi
c001693f:	c3                   	ret    
c0016940:	51                   	push   ecx
c0016941:	51                   	push   ecx
c0016942:	53                   	push   ebx
c0016943:	68 b8 2b 02 c0       	push   0xc0022bb8
c0016948:	e8 c2 88 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001694d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016950:	83 c4 10             	add    esp,0x10
c0016953:	31 d2                	xor    edx,edx
c0016955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001695b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016962:	83 c4 10             	add    esp,0x10
c0016965:	31 c0                	xor    eax,eax
c0016967:	5b                   	pop    ebx
c0016968:	5e                   	pop    esi
c0016969:	5f                   	pop    edi
c001696a:	c3                   	ret    
c001696b:	83 c4 10             	add    esp,0x10
c001696e:	83 c8 ff             	or     eax,0xffffffff
c0016971:	83 ca ff             	or     edx,0xffffffff
c0016974:	5b                   	pop    ebx
c0016975:	5e                   	pop    esi
c0016976:	5f                   	pop    edi
c0016977:	c3                   	ret    

c0016978 <sysCallSize(regs*)>:
c0016978:	53                   	push   ebx
c0016979:	83 ec 18             	sub    esp,0x18
c001697c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016980:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016983:	83 f8 02             	cmp    eax,0x2
c0016986:	76 66                	jbe    c00169ee <sysCallSize(regs*)+0x76>
c0016988:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001698d:	77 36                	ja     c00169c5 <sysCallSize(regs*)+0x4d>
c001698f:	83 ec 0c             	sub    esp,0xc
c0016992:	50                   	push   eax
c0016993:	e8 d3 76 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016998:	83 c4 0c             	add    esp,0xc
c001699b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001699f:	52                   	push   edx
c00169a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169a3:	52                   	push   edx
c00169a4:	50                   	push   eax
c00169a5:	e8 ac 90 ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c00169aa:	83 c4 10             	add    esp,0x10
c00169ad:	85 c0                	test   eax,eax
c00169af:	0f 95 c0             	setne  al
c00169b2:	25 ff 00 00 00       	and    eax,0xff
c00169b7:	31 d2                	xor    edx,edx
c00169b9:	f7 d8                	neg    eax
c00169bb:	83 d2 00             	adc    edx,0x0
c00169be:	83 c4 18             	add    esp,0x18
c00169c1:	f7 da                	neg    edx
c00169c3:	5b                   	pop    ebx
c00169c4:	c3                   	ret    
c00169c5:	51                   	push   ecx
c00169c6:	51                   	push   ecx
c00169c7:	50                   	push   eax
c00169c8:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169cd:	e8 3d 88 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00169d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169d5:	83 c4 10             	add    esp,0x10
c00169d8:	31 d2                	xor    edx,edx
c00169da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169e7:	83 c4 18             	add    esp,0x18
c00169ea:	31 c0                	xor    eax,eax
c00169ec:	5b                   	pop    ebx
c00169ed:	c3                   	ret    
c00169ee:	83 c4 18             	add    esp,0x18
c00169f1:	83 c8 ff             	or     eax,0xffffffff
c00169f4:	83 ca ff             	or     edx,0xffffffff
c00169f7:	5b                   	pop    ebx
c00169f8:	c3                   	ret    

c00169f9 <sysCallClose(regs*)>:
c00169f9:	53                   	push   ebx
c00169fa:	83 ec 08             	sub    esp,0x8
c00169fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a01:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a04:	83 f8 02             	cmp    eax,0x2
c0016a07:	76 4f                	jbe    c0016a58 <sysCallClose(regs*)+0x5f>
c0016a09:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a0e:	74 53                	je     c0016a63 <sysCallClose(regs*)+0x6a>
c0016a10:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a15:	74 5b                	je     c0016a72 <sysCallClose(regs*)+0x79>
c0016a17:	77 2f                	ja     c0016a48 <sysCallClose(regs*)+0x4f>
c0016a19:	83 ec 0c             	sub    esp,0xc
c0016a1c:	50                   	push   eax
c0016a1d:	e8 49 76 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016a22:	89 c3                	mov    ebx,eax
c0016a24:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a27:	e8 dc 8d ff ff       	call   c000f808 <File::close()>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	85 db                	test   ebx,ebx
c0016a31:	74 0c                	je     c0016a3f <sysCallClose(regs*)+0x46>
c0016a33:	83 ec 0c             	sub    esp,0xc
c0016a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a38:	53                   	push   ebx
c0016a39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a3c:	83 c4 10             	add    esp,0x10
c0016a3f:	83 c4 08             	add    esp,0x8
c0016a42:	31 c0                	xor    eax,eax
c0016a44:	31 d2                	xor    edx,edx
c0016a46:	5b                   	pop    ebx
c0016a47:	c3                   	ret    
c0016a48:	52                   	push   edx
c0016a49:	52                   	push   edx
c0016a4a:	50                   	push   eax
c0016a4b:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a50:	e8 ba 87 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	83 c4 08             	add    esp,0x8
c0016a5b:	83 c8 ff             	or     eax,0xffffffff
c0016a5e:	83 ca ff             	or     edx,0xffffffff
c0016a61:	5b                   	pop    ebx
c0016a62:	c3                   	ret    
c0016a63:	83 ec 0c             	sub    esp,0xc
c0016a66:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a6b:	e8 9f 87 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0016a70:	eb ca                	jmp    c0016a3c <sysCallClose(regs*)+0x43>
c0016a72:	83 ec 0c             	sub    esp,0xc
c0016a75:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a7a:	eb ef                	jmp    c0016a6b <sysCallClose(regs*)+0x72>

c0016a7c <sysCallOpenDir(regs*)>:
c0016a7c:	56                   	push   esi
c0016a7d:	53                   	push   ebx
c0016a7e:	50                   	push   eax
c0016a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a86:	85 c0                	test   eax,eax
c0016a88:	74 53                	je     c0016add <sysCallOpenDir(regs*)+0x61>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	68 14 01 00 00       	push   0x114
c0016a92:	e8 43 86 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016a97:	89 c6                	mov    esi,eax
c0016a99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a9e:	83 c4 0c             	add    esp,0xc
c0016aa1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aa4:	50                   	push   eax
c0016aa5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aa8:	50                   	push   eax
c0016aa9:	56                   	push   esi
c0016aaa:	e8 59 91 ff ff       	call   c000fc08 <Directory::Directory(char const*, Process*)>
c0016aaf:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ab2:	e8 b5 91 ff ff       	call   c000fc6c <Directory::open()>
c0016ab7:	83 c4 10             	add    esp,0x10
c0016aba:	85 c0                	test   eax,eax
c0016abc:	75 1f                	jne    c0016add <sysCallOpenDir(regs*)+0x61>
c0016abe:	83 ec 0c             	sub    esp,0xc
c0016ac1:	56                   	push   esi
c0016ac2:	e8 ef 72 ff ff       	call   c000ddb6 <UnixFile::getFileDescriptor()>
c0016ac7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	89 02                	mov    DWORD PTR [edx],eax
c0016acf:	c1 f8 1f             	sar    eax,0x1f
c0016ad2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ad5:	31 c0                	xor    eax,eax
c0016ad7:	59                   	pop    ecx
c0016ad8:	31 d2                	xor    edx,edx
c0016ada:	5b                   	pop    ebx
c0016adb:	5e                   	pop    esi
c0016adc:	c3                   	ret    
c0016add:	59                   	pop    ecx
c0016ade:	83 c8 ff             	or     eax,0xffffffff
c0016ae1:	5b                   	pop    ebx
c0016ae2:	83 ca ff             	or     edx,0xffffffff
c0016ae5:	5e                   	pop    esi
c0016ae6:	c3                   	ret    

c0016ae7 <sysCallMakeDir(regs*)>:
c0016ae7:	56                   	push   esi
c0016ae8:	53                   	push   ebx
c0016ae9:	83 ec 10             	sub    esp,0x10
c0016aec:	68 14 01 00 00       	push   0x114
c0016af1:	e8 e4 85 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016af6:	89 c3                	mov    ebx,eax
c0016af8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016afd:	83 c4 0c             	add    esp,0xc
c0016b00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b03:	50                   	push   eax
c0016b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b08:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b0b:	52                   	push   edx
c0016b0c:	53                   	push   ebx
c0016b0d:	e8 f6 90 ff ff       	call   c000fc08 <Directory::Directory(char const*, Process*)>
c0016b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b15:	e8 32 93 ff ff       	call   c000fe4c <Directory::create()>
c0016b1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b1d:	89 c6                	mov    esi,eax
c0016b1f:	e8 a4 91 ff ff       	call   c000fcc8 <Directory::close()>
c0016b24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b2c:	31 c0                	xor    eax,eax
c0016b2e:	85 f6                	test   esi,esi
c0016b30:	0f 95 c0             	setne  al
c0016b33:	31 d2                	xor    edx,edx
c0016b35:	f7 d8                	neg    eax
c0016b37:	83 d2 00             	adc    edx,0x0
c0016b3a:	83 c4 14             	add    esp,0x14
c0016b3d:	f7 da                	neg    edx
c0016b3f:	5b                   	pop    ebx
c0016b40:	5e                   	pop    esi
c0016b41:	c3                   	ret    

c0016b42 <sysCallCloseDir(regs*)>:
c0016b42:	53                   	push   ebx
c0016b43:	83 ec 08             	sub    esp,0x8
c0016b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b4d:	83 f8 02             	cmp    eax,0x2
c0016b50:	76 46                	jbe    c0016b98 <sysCallCloseDir(regs*)+0x56>
c0016b52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b57:	77 2f                	ja     c0016b88 <sysCallCloseDir(regs*)+0x46>
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	50                   	push   eax
c0016b5d:	e8 09 75 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016b62:	89 c3                	mov    ebx,eax
c0016b64:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b67:	e8 5c 91 ff ff       	call   c000fcc8 <Directory::close()>
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	85 db                	test   ebx,ebx
c0016b71:	74 0c                	je     c0016b7f <sysCallCloseDir(regs*)+0x3d>
c0016b73:	83 ec 0c             	sub    esp,0xc
c0016b76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b78:	53                   	push   ebx
c0016b79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	83 c4 08             	add    esp,0x8
c0016b82:	31 c0                	xor    eax,eax
c0016b84:	31 d2                	xor    edx,edx
c0016b86:	5b                   	pop    ebx
c0016b87:	c3                   	ret    
c0016b88:	52                   	push   edx
c0016b89:	52                   	push   edx
c0016b8a:	50                   	push   eax
c0016b8b:	68 14 2b 02 c0       	push   0xc0022b14
c0016b90:	e8 7a 86 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	83 c4 08             	add    esp,0x8
c0016b9b:	83 c8 ff             	or     eax,0xffffffff
c0016b9e:	83 ca ff             	or     edx,0xffffffff
c0016ba1:	5b                   	pop    ebx
c0016ba2:	c3                   	ret    

c0016ba3 <sysCallWait(regs*)>:
c0016ba3:	83 ec 10             	sub    esp,0x10
c0016ba6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016baa:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bad:	52                   	push   edx
c0016bae:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bb1:	51                   	push   ecx
c0016bb2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bb5:	50                   	push   eax
c0016bb6:	e8 4f 23 00 00       	call   c0018f0a <waitTask(int, int*, int)>
c0016bbb:	89 c2                	mov    edx,eax
c0016bbd:	83 c4 1c             	add    esp,0x1c
c0016bc0:	c1 fa 1f             	sar    edx,0x1f
c0016bc3:	c3                   	ret    

c0016bc4 <sysCallRmdir(regs*)>:
c0016bc4:	56                   	push   esi
c0016bc5:	53                   	push   ebx
c0016bc6:	83 ec 10             	sub    esp,0x10
c0016bc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bcd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bd0:	68 14 01 00 00       	push   0x114
c0016bd5:	e8 00 85 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016bda:	83 c4 0c             	add    esp,0xc
c0016bdd:	89 c3                	mov    ebx,eax
c0016bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016be7:	50                   	push   eax
c0016be8:	56                   	push   esi
c0016be9:	53                   	push   ebx
c0016bea:	e8 57 8b ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0016bef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bf2:	e8 2b 8d ff ff       	call   c000f922 <File::unlink()>
c0016bf7:	89 c6                	mov    esi,eax
c0016bf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bfb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c01:	31 c0                	xor    eax,eax
c0016c03:	85 f6                	test   esi,esi
c0016c05:	0f 95 c0             	setne  al
c0016c08:	31 d2                	xor    edx,edx
c0016c0a:	f7 d8                	neg    eax
c0016c0c:	83 d2 00             	adc    edx,0x0
c0016c0f:	83 c4 14             	add    esp,0x14
c0016c12:	f7 da                	neg    edx
c0016c14:	5b                   	pop    ebx
c0016c15:	5e                   	pop    esi
c0016c16:	c3                   	ret    

c0016c17 <sysCallUnlink(regs*)>:
c0016c17:	56                   	push   esi
c0016c18:	53                   	push   ebx
c0016c19:	83 ec 10             	sub    esp,0x10
c0016c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c20:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c23:	68 14 01 00 00       	push   0x114
c0016c28:	e8 ad 84 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016c2d:	83 c4 0c             	add    esp,0xc
c0016c30:	89 c3                	mov    ebx,eax
c0016c32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c3a:	50                   	push   eax
c0016c3b:	56                   	push   esi
c0016c3c:	53                   	push   ebx
c0016c3d:	e8 04 8b ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0016c42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c45:	e8 d8 8c ff ff       	call   c000f922 <File::unlink()>
c0016c4a:	89 c6                	mov    esi,eax
c0016c4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c54:	31 c0                	xor    eax,eax
c0016c56:	85 f6                	test   esi,esi
c0016c58:	0f 95 c0             	setne  al
c0016c5b:	31 d2                	xor    edx,edx
c0016c5d:	f7 d8                	neg    eax
c0016c5f:	83 d2 00             	adc    edx,0x0
c0016c62:	83 c4 14             	add    esp,0x14
c0016c65:	f7 da                	neg    edx
c0016c67:	5b                   	pop    ebx
c0016c68:	5e                   	pop    esi
c0016c69:	c3                   	ret    

c0016c6a <sysCallGetArgv(regs*)>:
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c71:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c74:	85 c0                	test   eax,eax
c0016c76:	78 2b                	js     c0016ca3 <sysCallGetArgv(regs*)+0x39>
c0016c78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c7e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c81:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c87:	7d 1a                	jge    c0016ca3 <sysCallGetArgv(regs*)+0x39>
c0016c89:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c90:	85 c0                	test   eax,eax
c0016c92:	74 17                	je     c0016cab <sysCallGetArgv(regs*)+0x41>
c0016c94:	51                   	push   ecx
c0016c95:	51                   	push   ecx
c0016c96:	50                   	push   eax
c0016c97:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016c9a:	50                   	push   eax
c0016c9b:	e8 be 9a fe ff       	call   c000075e <strcpy>
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	31 c0                	xor    eax,eax
c0016ca5:	31 d2                	xor    edx,edx
c0016ca7:	83 c4 0c             	add    esp,0xc
c0016caa:	c3                   	ret    
c0016cab:	b8 01 00 00 00       	mov    eax,0x1
c0016cb0:	31 d2                	xor    edx,edx
c0016cb2:	83 c4 0c             	add    esp,0xc
c0016cb5:	c3                   	ret    

c0016cb6 <sysCallTTYName(regs*)>:
c0016cb6:	56                   	push   esi
c0016cb7:	53                   	push   ebx
c0016cb8:	50                   	push   eax
c0016cb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cbd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cc0:	85 c0                	test   eax,eax
c0016cc2:	74 4d                	je     c0016d11 <sysCallTTYName(regs*)+0x5b>
c0016cc4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cc7:	83 f8 02             	cmp    eax,0x2
c0016cca:	76 07                	jbe    c0016cd3 <sysCallTTYName(regs*)+0x1d>
c0016ccc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cd1:	75 54                	jne    c0016d27 <sysCallTTYName(regs*)+0x71>
c0016cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cdb:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ce1:	85 db                	test   ebx,ebx
c0016ce3:	74 2c                	je     c0016d11 <sysCallTTYName(regs*)+0x5b>
c0016ce5:	83 ec 0c             	sub    esp,0xc
c0016ce8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cea:	53                   	push   ebx
c0016ceb:	ff 10                	call   DWORD PTR [eax]
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	84 c0                	test   al,al
c0016cf2:	74 28                	je     c0016d1c <sysCallTTYName(regs*)+0x66>
c0016cf4:	50                   	push   eax
c0016cf5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016cfb:	50                   	push   eax
c0016cfc:	53                   	push   ebx
c0016cfd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d00:	50                   	push   eax
c0016d01:	e8 58 9a fe ff       	call   c000075e <strcpy>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	31 c0                	xor    eax,eax
c0016d0b:	31 d2                	xor    edx,edx
c0016d0d:	59                   	pop    ecx
c0016d0e:	5b                   	pop    ebx
c0016d0f:	5e                   	pop    esi
c0016d10:	c3                   	ret    
c0016d11:	59                   	pop    ecx
c0016d12:	b8 01 00 00 00       	mov    eax,0x1
c0016d17:	5b                   	pop    ebx
c0016d18:	31 d2                	xor    edx,edx
c0016d1a:	5e                   	pop    esi
c0016d1b:	c3                   	ret    
c0016d1c:	59                   	pop    ecx
c0016d1d:	b8 02 00 00 00       	mov    eax,0x2
c0016d22:	5b                   	pop    ebx
c0016d23:	31 d2                	xor    edx,edx
c0016d25:	5e                   	pop    esi
c0016d26:	c3                   	ret    
c0016d27:	83 ec 0c             	sub    esp,0xc
c0016d2a:	50                   	push   eax
c0016d2b:	e8 3b 73 ff ff       	call   c000e06b <getFromFileDescriptor(int)>
c0016d30:	83 c4 10             	add    esp,0x10
c0016d33:	89 c3                	mov    ebx,eax
c0016d35:	eb aa                	jmp    c0016ce1 <sysCallTTYName(regs*)+0x2b>

c0016d37 <sysCallGetEnv(regs*)>:
c0016d37:	83 ec 0c             	sub    esp,0xc
c0016d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d41:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d44:	85 d2                	test   edx,edx
c0016d46:	75 22                	jne    c0016d6a <sysCallGetEnv(regs*)+0x33>
c0016d48:	31 c0                	xor    eax,eax
c0016d4a:	31 d2                	xor    edx,edx
c0016d4c:	85 c9                	test   ecx,ecx
c0016d4e:	74 04                	je     c0016d54 <sysCallGetEnv(regs*)+0x1d>
c0016d50:	83 c4 0c             	add    esp,0xc
c0016d53:	c3                   	ret    
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 38 2b 02 c0       	push   0xc0022b38
c0016d5c:	e8 7b 99 fe ff       	call   c00006dc <strlen>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	31 d2                	xor    edx,edx
c0016d66:	83 c4 0c             	add    esp,0xc
c0016d69:	c3                   	ret    
c0016d6a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d6d:	85 c9                	test   ecx,ecx
c0016d6f:	74 0b                	je     c0016d7c <sysCallGetEnv(regs*)+0x45>
c0016d71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d74:	31 c0                	xor    eax,eax
c0016d76:	31 d2                	xor    edx,edx
c0016d78:	83 c4 0c             	add    esp,0xc
c0016d7b:	c3                   	ret    
c0016d7c:	52                   	push   edx
c0016d7d:	52                   	push   edx
c0016d7e:	68 38 2b 02 c0       	push   0xc0022b38
c0016d83:	50                   	push   eax
c0016d84:	e8 d5 99 fe ff       	call   c000075e <strcpy>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	eb e6                	jmp    c0016d74 <sysCallGetEnv(regs*)+0x3d>

c0016d8e <sysCallUSleep(regs*)>:
c0016d8e:	57                   	push   edi
c0016d8f:	56                   	push   esi
c0016d90:	53                   	push   ebx
c0016d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d95:	52                   	push   edx
c0016d96:	52                   	push   edx
c0016d97:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016d9a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d9d:	89 c8                	mov    eax,ecx
c0016d9f:	89 da                	mov    edx,ebx
c0016da1:	0f a4 c2 05          	shld   edx,eax,0x5
c0016da5:	c1 e0 05             	shl    eax,0x5
c0016da8:	29 c8                	sub    eax,ecx
c0016daa:	19 da                	sbb    edx,ebx
c0016dac:	0f a4 c2 02          	shld   edx,eax,0x2
c0016db0:	c1 e0 02             	shl    eax,0x2
c0016db3:	01 c8                	add    eax,ecx
c0016db5:	11 da                	adc    edx,ebx
c0016db7:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dbb:	c1 e0 03             	shl    eax,0x3
c0016dbe:	52                   	push   edx
c0016dbf:	50                   	push   eax
c0016dc0:	e8 e0 21 00 00       	call   c0018fa5 <nanoSleep(unsigned long long)>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	31 c0                	xor    eax,eax
c0016dca:	31 d2                	xor    edx,edx
c0016dcc:	5b                   	pop    ebx
c0016dcd:	5e                   	pop    esi
c0016dce:	5f                   	pop    edi
c0016dcf:	c3                   	ret    

c0016dd0 <sysCallSpawn(regs*)>:
c0016dd0:	56                   	push   esi
c0016dd1:	53                   	push   ebx
c0016dd2:	50                   	push   eax
c0016dd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dd7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dda:	85 c0                	test   eax,eax
c0016ddc:	75 08                	jne    c0016de6 <sysCallSpawn(regs*)+0x16>
c0016dde:	59                   	pop    ecx
c0016ddf:	31 c0                	xor    eax,eax
c0016de1:	5b                   	pop    ebx
c0016de2:	31 d2                	xor    edx,edx
c0016de4:	5e                   	pop    esi
c0016de5:	c3                   	ret    
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	68 3b 07 00 00       	push   0x73b
c0016dee:	e8 e7 82 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016df3:	89 c6                	mov    esi,eax
c0016df5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016df8:	50                   	push   eax
c0016df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e01:	50                   	push   eax
c0016e02:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e05:	50                   	push   eax
c0016e06:	56                   	push   esi
c0016e07:	e8 d6 18 00 00       	call   c00186e2 <Process::Process(char const*, Process*, char**)>
c0016e0c:	83 c4 20             	add    esp,0x20
c0016e0f:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e16:	75 c6                	jne    c0016dde <sysCallSpawn(regs*)+0xe>
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	56                   	push   esi
c0016e1c:	e8 3d 1e 00 00       	call   c0018c5e <Process::createUserThread()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e26:	89 c2                	mov    edx,eax
c0016e28:	c1 fa 1f             	sar    edx,0x1f
c0016e2b:	59                   	pop    ecx
c0016e2c:	5b                   	pop    ebx
c0016e2d:	5e                   	pop    esi
c0016e2e:	c3                   	ret    

c0016e2f <sysAppSettings(regs*)>:
c0016e2f:	53                   	push   ebx
c0016e30:	31 d2                	xor    edx,edx
c0016e32:	83 ec 08             	sub    esp,0x8
c0016e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e39:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e3c:	b8 01 00 00 00       	mov    eax,0x1
c0016e41:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e47:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e4d:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e52:	75 30                	jne    c0016e84 <sysAppSettings(regs*)+0x55>
c0016e54:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e5a:	83 e0 1f             	and    eax,0x1f
c0016e5d:	3c 01                	cmp    al,0x1
c0016e5f:	74 28                	je     c0016e89 <sysAppSettings(regs*)+0x5a>
c0016e61:	3c 07                	cmp    al,0x7
c0016e63:	0f 84 be 00 00 00    	je     c0016f27 <sysAppSettings(regs*)+0xf8>
c0016e69:	84 c0                	test   al,al
c0016e6b:	0f 84 da 00 00 00    	je     c0016f4b <sysAppSettings(regs*)+0x11c>
c0016e71:	3c 08                	cmp    al,0x8
c0016e73:	74 6d                	je     c0016ee2 <sysAppSettings(regs*)+0xb3>
c0016e75:	25 ff 00 00 00       	and    eax,0xff
c0016e7a:	05 e8 03 00 00       	add    eax,0x3e8
c0016e7f:	89 c2                	mov    edx,eax
c0016e81:	c1 fa 1f             	sar    edx,0x1f
c0016e84:	83 c4 08             	add    esp,0x8
c0016e87:	5b                   	pop    ebx
c0016e88:	c3                   	ret    
c0016e89:	50                   	push   eax
c0016e8a:	68 00 01 00 00       	push   0x100
c0016e8f:	6a 00                	push   0x0
c0016e91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e99:	83 c0 0c             	add    eax,0xc
c0016e9c:	50                   	push   eax
c0016e9d:	e8 1d 98 fe ff       	call   c00006bf <memset>
c0016ea2:	83 c4 0c             	add    esp,0xc
c0016ea5:	68 ff 00 00 00       	push   0xff
c0016eaa:	53                   	push   ebx
c0016eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eb3:	83 c0 0c             	add    eax,0xc
c0016eb6:	50                   	push   eax
c0016eb7:	e8 cd 97 fe ff       	call   c0000689 <memcpy>
c0016ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec1:	5a                   	pop    edx
c0016ec2:	59                   	pop    ecx
c0016ec3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec6:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ec9:	52                   	push   edx
c0016eca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ed0:	53                   	push   ebx
c0016ed1:	e8 dc 62 ff ff       	call   c000d1b2 <VgaText::setTitle(char*)>
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	31 c0                	xor    eax,eax
c0016edb:	31 d2                	xor    edx,edx
c0016edd:	83 c4 08             	add    esp,0x8
c0016ee0:	5b                   	pop    ebx
c0016ee1:	c3                   	ret    
c0016ee2:	50                   	push   eax
c0016ee3:	50                   	push   eax
c0016ee4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016eea:	83 e0 0f             	and    eax,0xf
c0016eed:	50                   	push   eax
c0016eee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ef6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016efc:	50                   	push   eax
c0016efd:	e8 a0 62 ff ff       	call   c000d1a2 <VgaText::setTitleColour(VgaColour)>
c0016f02:	58                   	pop    eax
c0016f03:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f09:	c1 e8 04             	shr    eax,0x4
c0016f0c:	5a                   	pop    edx
c0016f0d:	83 e0 0f             	and    eax,0xf
c0016f10:	50                   	push   eax
c0016f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f19:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f1f:	51                   	push   ecx
c0016f20:	e8 6d 62 ff ff       	call   c000d192 <VgaText::setTitleTextColour(VgaColour)>
c0016f25:	eb af                	jmp    c0016ed6 <sysAppSettings(regs*)+0xa7>
c0016f27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f2f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f35:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f3b:	c0 e8 06             	shr    al,0x6
c0016f3e:	83 e0 01             	and    eax,0x1
c0016f41:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f47:	31 c0                	xor    eax,eax
c0016f49:	eb 90                	jmp    c0016edb <sysAppSettings(regs*)+0xac>
c0016f4b:	b8 02 00 00 00       	mov    eax,0x2
c0016f50:	31 d2                	xor    edx,edx
c0016f52:	eb 89                	jmp    c0016edd <sysAppSettings(regs*)+0xae>

c0016f54 <sysSetFatAttrib(regs*)>:
c0016f54:	57                   	push   edi
c0016f55:	56                   	push   esi
c0016f56:	53                   	push   ebx
c0016f57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f5b:	83 ec 0c             	sub    esp,0xc
c0016f5e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f61:	68 14 01 00 00       	push   0x114
c0016f66:	e8 6f 81 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016f6b:	83 c4 0c             	add    esp,0xc
c0016f6e:	89 c3                	mov    ebx,eax
c0016f70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f78:	50                   	push   eax
c0016f79:	57                   	push   edi
c0016f7a:	53                   	push   ebx
c0016f7b:	e8 c6 87 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0016f80:	83 c4 0c             	add    esp,0xc
c0016f83:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f86:	0f b6 d4             	movzx  edx,ah
c0016f89:	52                   	push   edx
c0016f8a:	25 ff 00 00 00       	and    eax,0xff
c0016f8f:	50                   	push   eax
c0016f90:	53                   	push   ebx
c0016f91:	e8 26 8a ff ff       	call   c000f9bc <File::chfatattr(unsigned char, unsigned char)>
c0016f96:	89 c6                	mov    esi,eax
c0016f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f9d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fa0:	83 c4 10             	add    esp,0x10
c0016fa3:	31 c0                	xor    eax,eax
c0016fa5:	85 f6                	test   esi,esi
c0016fa7:	0f 95 c0             	setne  al
c0016faa:	5b                   	pop    ebx
c0016fab:	31 d2                	xor    edx,edx
c0016fad:	f7 d8                	neg    eax
c0016faf:	83 d2 00             	adc    edx,0x0
c0016fb2:	5e                   	pop    esi
c0016fb3:	f7 da                	neg    edx
c0016fb5:	5f                   	pop    edi
c0016fb6:	c3                   	ret    

c0016fb7 <sysPanic(regs*)>:
c0016fb7:	83 ec 18             	sub    esp,0x18
c0016fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fbe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fc1:	50                   	push   eax
c0016fc2:	e8 77 ea ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0016fc7:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fce:	e8 6b ea ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0016fd3:	b8 01 00 00 00       	mov    eax,0x1
c0016fd8:	31 d2                	xor    edx,edx
c0016fda:	83 c4 1c             	add    esp,0x1c
c0016fdd:	c3                   	ret    

c0016fde <sysPipe(regs*)>:
c0016fde:	57                   	push   edi
c0016fdf:	56                   	push   esi
c0016fe0:	53                   	push   ebx
c0016fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe5:	83 ec 0c             	sub    esp,0xc
c0016fe8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016feb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016fee:	6a 20                	push   0x20
c0016ff0:	e8 e5 80 ff ff       	call   c000f0da <operator new(unsigned long)>
c0016ff5:	89 c3                	mov    ebx,eax
c0016ff7:	58                   	pop    eax
c0016ff8:	5a                   	pop    edx
c0016ff9:	68 00 50 00 00       	push   0x5000
c0016ffe:	53                   	push   ebx
c0016fff:	e8 ec 5a ff ff       	call   c000caf0 <Pipe::Pipe(int)>
c0017004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017007:	e8 aa 6d ff ff       	call   c000ddb6 <UnixFile::getFileDescriptor()>
c001700c:	89 07                	mov    DWORD PTR [edi],eax
c001700e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017011:	e8 a0 6d ff ff       	call   c000ddb6 <UnixFile::getFileDescriptor()>
c0017016:	83 c4 10             	add    esp,0x10
c0017019:	89 06                	mov    DWORD PTR [esi],eax
c001701b:	31 d2                	xor    edx,edx
c001701d:	5b                   	pop    ebx
c001701e:	31 c0                	xor    eax,eax
c0017020:	5e                   	pop    esi
c0017021:	5f                   	pop    edi
c0017022:	c3                   	ret    

c0017023 <sysGetUnixTime(regs*)>:
c0017023:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0017028:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001702e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017032:	e9 d7 90 ff ff       	jmp    c001010e <Clock::timeInSecondsLocal()>

c0017037 <string_ends_with(char const*, char const*)>:
c0017037:	57                   	push   edi
c0017038:	56                   	push   esi
c0017039:	53                   	push   ebx
c001703a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001703e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017042:	83 ec 0c             	sub    esp,0xc
c0017045:	53                   	push   ebx
c0017046:	e8 91 96 fe ff       	call   c00006dc <strlen>
c001704b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001704e:	89 c6                	mov    esi,eax
c0017050:	e8 87 96 fe ff       	call   c00006dc <strlen>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	31 d2                	xor    edx,edx
c001705a:	39 c6                	cmp    esi,eax
c001705c:	7d 06                	jge    c0017064 <string_ends_with(char const*, char const*)+0x2d>
c001705e:	5b                   	pop    ebx
c001705f:	89 d0                	mov    eax,edx
c0017061:	5e                   	pop    esi
c0017062:	5f                   	pop    edi
c0017063:	c3                   	ret    
c0017064:	52                   	push   edx
c0017065:	29 c6                	sub    esi,eax
c0017067:	52                   	push   edx
c0017068:	01 f3                	add    ebx,esi
c001706a:	57                   	push   edi
c001706b:	53                   	push   ebx
c001706c:	e8 3e 97 fe ff       	call   c00007af <strcmp>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	31 d2                	xor    edx,edx
c0017076:	85 c0                	test   eax,eax
c0017078:	5b                   	pop    ebx
c0017079:	0f 94 c2             	sete   dl
c001707c:	5e                   	pop    esi
c001707d:	89 d0                	mov    eax,edx
c001707f:	5f                   	pop    edi
c0017080:	c3                   	ret    

c0017081 <sysCallOpen(regs*)>:
c0017081:	56                   	push   esi
c0017082:	53                   	push   ebx
c0017083:	81 ec 04 01 00 00    	sub    esp,0x104
c0017089:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017090:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017093:	85 c9                	test   ecx,ecx
c0017095:	0f 84 bb 00 00 00    	je     c0017156 <sysCallOpen(regs*)+0xd5>
c001709b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001709e:	85 c0                	test   eax,eax
c00170a0:	0f 84 b0 00 00 00    	je     c0017156 <sysCallOpen(regs*)+0xd5>
c00170a6:	52                   	push   edx
c00170a7:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170ac:	50                   	push   eax
c00170ad:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170b1:	56                   	push   esi
c00170b2:	e8 e5 84 ff ff       	call   c000f59c <standardiseFiles(char*, char const*, char const*)>
c00170b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00170ba:	e8 1d 96 fe ff       	call   c00006dc <strlen>
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	48                   	dec    eax
c00170c3:	74 25                	je     c00170ea <sysCallOpen(regs*)+0x69>
c00170c5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170c8:	80 fa 2e             	cmp    dl,0x2e
c00170cb:	74 19                	je     c00170e6 <sysCallOpen(regs*)+0x65>
c00170cd:	80 fa 3a             	cmp    dl,0x3a
c00170d0:	74 14                	je     c00170e6 <sysCallOpen(regs*)+0x65>
c00170d2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170d6:	48                   	dec    eax
c00170d7:	74 11                	je     c00170ea <sysCallOpen(regs*)+0x69>
c00170d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170dc:	80 fa 3a             	cmp    dl,0x3a
c00170df:	74 05                	je     c00170e6 <sysCallOpen(regs*)+0x65>
c00170e1:	80 fa 2e             	cmp    dl,0x2e
c00170e4:	75 ec                	jne    c00170d2 <sysCallOpen(regs*)+0x51>
c00170e6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170ea:	51                   	push   ecx
c00170eb:	51                   	push   ecx
c00170ec:	68 02 2c 02 c0       	push   0xc0022c02
c00170f1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170f4:	50                   	push   eax
c00170f5:	e8 3d ff ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c00170fa:	83 c4 10             	add    esp,0x10
c00170fd:	85 c0                	test   eax,eax
c00170ff:	75 17                	jne    c0017118 <sysCallOpen(regs*)+0x97>
c0017101:	50                   	push   eax
c0017102:	50                   	push   eax
c0017103:	68 23 2c 02 c0       	push   0xc0022c23
c0017108:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001710b:	50                   	push   eax
c001710c:	e8 26 ff ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	85 c0                	test   eax,eax
c0017116:	74 4d                	je     c0017165 <sysCallOpen(regs*)+0xe4>
c0017118:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001711b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017121:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017128:	50                   	push   eax
c0017129:	50                   	push   eax
c001712a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001712d:	8b 10                	mov    edx,DWORD PTR [eax]
c001712f:	52                   	push   edx
c0017130:	68 07 2c 02 c0       	push   0xc0022c07
c0017135:	e8 d5 80 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001713a:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c0017141:	e8 c9 80 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	81 c4 04 01 00 00    	add    esp,0x104
c001714f:	31 c0                	xor    eax,eax
c0017151:	31 d2                	xor    edx,edx
c0017153:	5b                   	pop    ebx
c0017154:	5e                   	pop    esi
c0017155:	c3                   	ret    
c0017156:	81 c4 04 01 00 00    	add    esp,0x104
c001715c:	83 c8 ff             	or     eax,0xffffffff
c001715f:	83 ca ff             	or     edx,0xffffffff
c0017162:	5b                   	pop    ebx
c0017163:	5e                   	pop    esi
c0017164:	c3                   	ret    
c0017165:	50                   	push   eax
c0017166:	50                   	push   eax
c0017167:	68 03 2c 02 c0       	push   0xc0022c03
c001716c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001716f:	50                   	push   eax
c0017170:	e8 3a 96 fe ff       	call   c00007af <strcmp>
c0017175:	83 c4 10             	add    esp,0x10
c0017178:	85 c0                	test   eax,eax
c001717a:	74 9c                	je     c0017118 <sysCallOpen(regs*)+0x97>
c001717c:	50                   	push   eax
c001717d:	50                   	push   eax
c001717e:	68 02 2c 02 c0       	push   0xc0022c02
c0017183:	56                   	push   esi
c0017184:	e8 ae fe ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	85 c0                	test   eax,eax
c001718e:	75 88                	jne    c0017118 <sysCallOpen(regs*)+0x97>
c0017190:	52                   	push   edx
c0017191:	52                   	push   edx
c0017192:	68 28 2c 02 c0       	push   0xc0022c28
c0017197:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001719a:	51                   	push   ecx
c001719b:	e8 97 fe ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c00171a0:	83 c4 10             	add    esp,0x10
c00171a3:	85 c0                	test   eax,eax
c00171a5:	0f 85 d5 00 00 00    	jne    c0017280 <sysCallOpen(regs*)+0x1ff>
c00171ab:	50                   	push   eax
c00171ac:	50                   	push   eax
c00171ad:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171b5:	50                   	push   eax
c00171b6:	e8 7c fe ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	85 c0                	test   eax,eax
c00171c0:	0f 85 ba 00 00 00    	jne    c0017280 <sysCallOpen(regs*)+0x1ff>
c00171c6:	50                   	push   eax
c00171c7:	50                   	push   eax
c00171c8:	68 29 2c 02 c0       	push   0xc0022c29
c00171cd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d0:	50                   	push   eax
c00171d1:	e8 d9 95 fe ff       	call   c00007af <strcmp>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	85 c0                	test   eax,eax
c00171db:	0f 84 9f 00 00 00    	je     c0017280 <sysCallOpen(regs*)+0x1ff>
c00171e1:	50                   	push   eax
c00171e2:	50                   	push   eax
c00171e3:	68 28 2c 02 c0       	push   0xc0022c28
c00171e8:	56                   	push   esi
c00171e9:	e8 49 fe ff ff       	call   c0017037 <string_ends_with(char const*, char const*)>
c00171ee:	83 c4 10             	add    esp,0x10
c00171f1:	85 c0                	test   eax,eax
c00171f3:	0f 85 87 00 00 00    	jne    c0017280 <sysCallOpen(regs*)+0x1ff>
c00171f9:	83 ec 0c             	sub    esp,0xc
c00171fc:	68 14 01 00 00       	push   0x114
c0017201:	e8 d4 7e ff ff       	call   c000f0da <operator new(unsigned long)>
c0017206:	89 c6                	mov    esi,eax
c0017208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001720d:	83 c4 0c             	add    esp,0xc
c0017210:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017213:	51                   	push   ecx
c0017214:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017217:	50                   	push   eax
c0017218:	56                   	push   esi
c0017219:	e8 28 85 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c001721e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	89 d0                	mov    eax,edx
c0017226:	25 ff 00 00 00       	and    eax,0xff
c001722b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001722e:	89 d0                	mov    eax,edx
c0017230:	83 e0 01             	and    eax,0x1
c0017233:	f6 c2 02             	test   dl,0x2
c0017236:	74 03                	je     c001723b <sysCallOpen(regs*)+0x1ba>
c0017238:	83 c8 02             	or     eax,0x2
c001723b:	f6 c2 04             	test   dl,0x4
c001723e:	74 03                	je     c0017243 <sysCallOpen(regs*)+0x1c2>
c0017240:	83 c8 04             	or     eax,0x4
c0017243:	f6 c2 08             	test   dl,0x8
c0017246:	74 03                	je     c001724b <sysCallOpen(regs*)+0x1ca>
c0017248:	83 c8 0a             	or     eax,0xa
c001724b:	83 e2 10             	and    edx,0x10
c001724e:	74 03                	je     c0017253 <sysCallOpen(regs*)+0x1d2>
c0017250:	83 c8 12             	or     eax,0x12
c0017253:	52                   	push   edx
c0017254:	52                   	push   edx
c0017255:	50                   	push   eax
c0017256:	56                   	push   esi
c0017257:	e8 4e 85 ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	85 c0                	test   eax,eax
c0017261:	0f 85 ef fe ff ff    	jne    c0017156 <sysCallOpen(regs*)+0xd5>
c0017267:	83 ec 0c             	sub    esp,0xc
c001726a:	56                   	push   esi
c001726b:	e8 46 6b ff ff       	call   c000ddb6 <UnixFile::getFileDescriptor()>
c0017270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017273:	89 02                	mov    DWORD PTR [edx],eax
c0017275:	c1 f8 1f             	sar    eax,0x1f
c0017278:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001727b:	e9 c6 fe ff ff       	jmp    c0017146 <sysCallOpen(regs*)+0xc5>
c0017280:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017283:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017289:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017290:	e9 b4 fe ff ff       	jmp    c0017149 <sysCallOpen(regs*)+0xc8>

c0017295 <setupSystemCalls()>:
c0017295:	c7 05 00 52 02 c0 90 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc0016490
c001729f:	c7 05 04 52 02 c0 a3 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162a3
c00172a9:	c7 05 08 52 02 c0 b8 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163b8
c00172b3:	c7 05 0c 52 02 c0 0d 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001640d
c00172bd:	c7 05 10 52 02 c0 50 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016350
c00172c7:	c7 05 14 52 02 c0 aa 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164aa
c00172d1:	c7 05 18 52 02 c0 69 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc0016669
c00172db:	c7 05 1c 52 02 c0 8f 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc001668f
c00172e5:	c7 05 24 52 02 c0 f9 69 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc00169f9
c00172ef:	c7 05 20 52 02 c0 81 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0017081
c00172f9:	c7 05 28 52 02 c0 7c 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a7c
c0017303:	c7 05 2c 52 02 c0 fe 66 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc00166fe
c001730d:	c7 05 30 52 02 c0 ba 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164ba
c0017317:	c7 05 34 52 02 c0 bf 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164bf
c0017321:	c7 05 38 52 02 c0 e7 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016ae7
c001732b:	c7 05 3c 52 02 c0 42 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b42
c0017335:	c7 05 40 52 02 c0 e9 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167e9
c001733f:	c7 05 44 52 02 c0 4f 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc001684f
c0017349:	c7 05 48 52 02 c0 78 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0016978
c0017353:	c7 05 4c 52 02 c0 c4 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164c4
c001735d:	c7 05 50 52 02 c0 a3 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016ba3
c0017367:	c7 05 54 52 02 c0 ce 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164ce
c0017371:	c7 05 58 52 02 c0 d5 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164d5
c001737b:	c7 05 5c 52 02 c0 c4 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bc4
c0017385:	c7 05 60 52 02 c0 17 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c17
c001738f:	c7 05 64 52 02 c0 dc 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164dc
c0017399:	c7 05 68 52 02 c0 6a 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c6a
c00173a3:	c7 05 6c 52 02 c0 b1 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166b1
c00173ad:	c7 05 70 52 02 c0 b6 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cb6
c00173b7:	c7 05 74 52 02 c0 91 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc0016791
c00173c1:	c7 05 78 52 02 c0 8e 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016d8e
c00173cb:	c7 05 7c 52 02 c0 ca 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168ca
c00173d5:	c7 05 80 52 02 c0 d0 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016dd0
c00173df:	c7 05 84 52 02 c0 37 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d37
c00173e9:	c7 05 88 52 02 c0 2f 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e2f
c00173f3:	c7 05 8c 52 02 c0 f0 64 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00164f0
c00173fd:	c7 05 90 52 02 c0 53 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016553
c0017407:	c7 05 94 52 02 c0 9b 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc001659b
c0017411:	c7 05 98 52 02 c0 54 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f54
c001741b:	c7 05 9c 52 02 c0 b7 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fb7
c0017425:	c7 05 a0 52 02 c0 ee 65 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc00165ee
c001742f:	c7 05 a4 52 02 c0 de 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016fde
c0017439:	c7 05 a8 52 02 c0 23 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017023
c0017443:	c7 05 ac 52 02 c0 bb 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162bb
c001744d:	c3                   	ret    

c001744e <systemCall(regs*, void*)>:
c001744e:	53                   	push   ebx
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017456:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017459:	83 f8 7f             	cmp    eax,0x7f
c001745c:	77 16                	ja     c0017474 <systemCall(regs*, void*)+0x26>
c001745e:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c0017465:	85 d2                	test   edx,edx
c0017467:	74 0b                	je     c0017474 <systemCall(regs*, void*)+0x26>
c0017469:	83 ec 0c             	sub    esp,0xc
c001746c:	53                   	push   ebx
c001746d:	ff d2                	call   edx
c001746f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017472:	eb 0d                	jmp    c0017481 <systemCall(regs*, void*)+0x33>
c0017474:	52                   	push   edx
c0017475:	52                   	push   edx
c0017476:	50                   	push   eax
c0017477:	68 32 2c 02 c0       	push   0xc0022c32
c001747c:	e8 8e 7d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017489:	83 c4 08             	add    esp,0x8
c001748c:	31 d2                	xor    edx,edx
c001748e:	5b                   	pop    ebx
c001748f:	c3                   	ret    

c0017490 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017490:	55                   	push   ebp
c0017491:	89 e5                	mov    ebp,esp
c0017493:	57                   	push   edi
c0017494:	56                   	push   esi
c0017495:	53                   	push   ebx
c0017496:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001749c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001749f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174a2:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174a9:	74 27                	je     c00174d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174ab:	85 c0                	test   eax,eax
c00174ad:	74 23                	je     c00174d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174af:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174b3:	75 1d                	jne    c00174d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b5:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174b8:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174be:	89 d1                	mov    ecx,edx
c00174c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174c6:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174cc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174cf:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174d2:	83 ec 0c             	sub    esp,0xc
c00174d5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174d8:	05 ff 0f 00 00       	add    eax,0xfff
c00174dd:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174e3:	6a 01                	push   0x1
c00174e5:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174eb:	e8 04 6d ff ff       	call   c000e1f4 <Virt::allocateKernelVirtualPages(int)>
c00174f0:	83 c4 10             	add    esp,0x10
c00174f3:	89 c6                	mov    esi,eax
c00174f5:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00174fb:	0f 86 21 01 00 00    	jbe    c0017622 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017501:	c1 eb 0c             	shr    ebx,0xc
c0017504:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001750e:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017514:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017517:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001751a:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017520:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017523:	29 d8                	sub    eax,ebx
c0017525:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001752b:	0f 83 f4 00 00 00    	jae    c0017625 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017531:	83 ec 0c             	sub    esp,0xc
c0017534:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017537:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001753d:	3d 00 10 00 00       	cmp    eax,0x1000
c0017542:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017544:	52                   	push   edx
c0017545:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001754b:	52                   	push   edx
c001754c:	76 05                	jbe    c0017553 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001754e:	b8 00 10 00 00       	mov    eax,0x1000
c0017553:	31 d2                	xor    edx,edx
c0017555:	52                   	push   edx
c0017556:	50                   	push   eax
c0017557:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001755a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001755d:	83 c4 20             	add    esp,0x20
c0017560:	85 c0                	test   eax,eax
c0017562:	74 1f                	je     c0017583 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017564:	51                   	push   ecx
c0017565:	51                   	push   ecx
c0017566:	50                   	push   eax
c0017567:	68 46 2c 02 c0       	push   0xc0022c46
c001756c:	e8 9e 7c ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017571:	89 34 24             	mov    DWORD PTR [esp],esi
c0017574:	e8 c8 6f ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c0017579:	83 c4 10             	add    esp,0x10
c001757c:	31 c0                	xor    eax,eax
c001757e:	e9 7c 01 00 00       	jmp    c00176ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017583:	e8 bf 14 00 00       	call   c0018a47 <lockScheduler()>
c0017588:	e8 26 50 ff ff       	call   c000c5b3 <Phys::allocatePage()>
c001758d:	6a 07                	push   0x7
c001758f:	56                   	push   esi
c0017590:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017596:	50                   	push   eax
c0017597:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001759d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175a0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175a6:	e8 15 73 ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175ab:	83 c4 0c             	add    esp,0xc
c00175ae:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175b4:	6a 00                	push   0x0
c00175b6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175bc:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175bf:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175c5:	e8 54 71 ff ff       	call   c000e71e <VAS::mapOtherVASIn(bool, VAS*)>
c00175ca:	58                   	pop    eax
c00175cb:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175d1:	5a                   	pop    edx
c00175d2:	68 07 04 00 00       	push   0x407
c00175d7:	53                   	push   ebx
c00175d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175de:	50                   	push   eax
c00175df:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175e5:	6a 00                	push   0x0
c00175e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175ef:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175f5:	e8 82 76 ff ff       	call   c000ec7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175fa:	83 c4 1c             	add    esp,0x1c
c00175fd:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017603:	68 00 10 00 00       	push   0x1000
c0017608:	50                   	push   eax
c0017609:	56                   	push   esi
c001760a:	e8 7a 90 fe ff       	call   c0000689 <memcpy>
c001760f:	e8 35 14 00 00       	call   c0018a49 <unlockScheduler()>
c0017614:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001761a:	83 c4 10             	add    esp,0x10
c001761d:	e9 f5 fe ff ff       	jmp    c0017517 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017622:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017625:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001762f:	0f 86 bc 00 00 00    	jbe    c00176f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017635:	e8 0d 14 00 00       	call   c0018a47 <lockScheduler()>
c001763a:	51                   	push   ecx
c001763b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017641:	6a 00                	push   0x0
c0017643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001764b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017651:	e8 c8 70 ff ff       	call   c000e71e <VAS::mapOtherVASIn(bool, VAS*)>
c0017656:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001765c:	c1 e8 0c             	shr    eax,0xc
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017668:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017672:	e8 3c 4f ff ff       	call   c000c5b3 <Phys::allocatePage()>
c0017677:	6a 07                	push   0x7
c0017679:	56                   	push   esi
c001767a:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017680:	50                   	push   eax
c0017681:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017687:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001768a:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017690:	e8 2b 72 ff ff       	call   c000e8c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017695:	58                   	pop    eax
c0017696:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001769c:	5a                   	pop    edx
c001769d:	68 07 04 00 00       	push   0x407
c00176a2:	53                   	push   ebx
c00176a3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176a9:	50                   	push   eax
c00176aa:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176b0:	6a 00                	push   0x0
c00176b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176ba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176c0:	e8 b7 75 ff ff       	call   c000ec7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176c5:	83 c4 1c             	add    esp,0x1c
c00176c8:	68 00 10 00 00       	push   0x1000
c00176cd:	6a 00                	push   0x0
c00176cf:	56                   	push   esi
c00176d0:	e8 ea 8f fe ff       	call   c00006bf <memset>
c00176d5:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176db:	83 c4 10             	add    esp,0x10
c00176de:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176e4:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176ea:	77 86                	ja     c0017672 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176ec:	e8 58 13 00 00       	call   c0018a49 <unlockScheduler()>
c00176f1:	83 ec 0c             	sub    esp,0xc
c00176f4:	56                   	push   esi
c00176f5:	e8 47 6e ff ff       	call   c000e541 <Virt::freeKernelVirtualPages(unsigned long)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	b0 01                	mov    al,0x1
c00176ff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017702:	5b                   	pop    ebx
c0017703:	5e                   	pop    esi
c0017704:	5f                   	pop    edi
c0017705:	5d                   	pop    ebp
c0017706:	c3                   	ret    

c0017707 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017707:	55                   	push   ebp
c0017708:	57                   	push   edi
c0017709:	56                   	push   esi
c001770a:	53                   	push   ebx
c001770b:	83 ec 48             	sub    esp,0x48
c001770e:	68 14 01 00 00       	push   0x114
c0017713:	e8 c2 79 ff ff       	call   c000f0da <operator new(unsigned long)>
c0017718:	83 c4 0c             	add    esp,0xc
c001771b:	89 c6                	mov    esi,eax
c001771d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017721:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017725:	50                   	push   eax
c0017726:	e8 1b 80 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c001772b:	58                   	pop    eax
c001772c:	5a                   	pop    edx
c001772d:	6a 01                	push   0x1
c001772f:	56                   	push   esi
c0017730:	e8 75 80 ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	85 c0                	test   eax,eax
c001773a:	0f 85 47 01 00 00    	jne    c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017740:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	6a 34                	push   0x34
c001774d:	e8 8b 48 ff ff       	call   c000bfdd <malloc>
c0017752:	89 c3                	mov    ebx,eax
c0017754:	58                   	pop    eax
c0017755:	8b 06                	mov    eax,DWORD PTR [esi]
c0017757:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001775b:	57                   	push   edi
c001775c:	53                   	push   ebx
c001775d:	6a 00                	push   0x0
c001775f:	6a 34                	push   0x34
c0017761:	56                   	push   esi
c0017762:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017765:	83 c4 20             	add    esp,0x20
c0017768:	85 c0                	test   eax,eax
c001776a:	0f 85 17 01 00 00    	jne    c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017770:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017776:	0f 85 0b 01 00 00    	jne    c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001777c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001777f:	85 c0                	test   eax,eax
c0017781:	0f 84 00 01 00 00    	je     c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017787:	31 d2                	xor    edx,edx
c0017789:	55                   	push   ebp
c001778a:	52                   	push   edx
c001778b:	50                   	push   eax
c001778c:	56                   	push   esi
c001778d:	e8 d6 80 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	85 c0                	test   eax,eax
c0017797:	0f 85 ea 00 00 00    	jne    c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001779d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177a0:	83 ec 0c             	sub    esp,0xc
c00177a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177a7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177ab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177af:	0f af c2             	imul   eax,edx
c00177b2:	50                   	push   eax
c00177b3:	e8 25 48 ff ff       	call   c000bfdd <malloc>
c00177b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177c7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177cb:	0f af c2             	imul   eax,edx
c00177ce:	99                   	cdq    
c00177cf:	52                   	push   edx
c00177d0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177d2:	50                   	push   eax
c00177d3:	56                   	push   esi
c00177d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177da:	83 c4 20             	add    esp,0x20
c00177dd:	85 c0                	test   eax,eax
c00177df:	0f 84 a2 00 00 00    	je     c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177e5:	31 d2                	xor    edx,edx
c00177e7:	51                   	push   ecx
c00177e8:	52                   	push   edx
c00177e9:	50                   	push   eax
c00177ea:	56                   	push   esi
c00177eb:	e8 78 80 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c00177f0:	83 c4 10             	add    esp,0x10
c00177f3:	85 c0                	test   eax,eax
c00177f5:	0f 85 8c 00 00 00    	jne    c0017887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177fb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00177ff:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017803:	0f af c2             	imul   eax,edx
c0017806:	83 ec 0c             	sub    esp,0xc
c0017809:	31 ed                	xor    ebp,ebp
c001780b:	50                   	push   eax
c001780c:	e8 cc 47 ff ff       	call   c000bfdd <malloc>
c0017811:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017815:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001781c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017820:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017824:	0f af c2             	imul   eax,edx
c0017827:	99                   	cdq    
c0017828:	52                   	push   edx
c0017829:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001782b:	50                   	push   eax
c001782c:	56                   	push   esi
c001782d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017830:	83 c4 20             	add    esp,0x20
c0017833:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001783b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001783f:	0f 86 80 00 00 00    	jbe    c00178c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017845:	0f b7 fd             	movzx  edi,bp
c0017848:	c1 e7 05             	shl    edi,0x5
c001784b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001784f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017852:	75 6b                	jne    c00178bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017854:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017857:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001785b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001785e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017862:	52                   	push   edx
c0017863:	31 d2                	xor    edx,edx
c0017865:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017868:	52                   	push   edx
c0017869:	50                   	push   eax
c001786a:	56                   	push   esi
c001786b:	e8 f8 7f ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017870:	83 c4 10             	add    esp,0x10
c0017873:	85 c0                	test   eax,eax
c0017875:	74 17                	je     c001788e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017877:	83 ec 0c             	sub    esp,0xc
c001787a:	68 71 2c 02 c0       	push   0xc0022c71
c001787f:	e8 8b 79 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	31 c0                	xor    eax,eax
c0017889:	e9 87 00 00 00       	jmp    c0017915 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001788e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017891:	83 ec 0c             	sub    esp,0xc
c0017894:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017897:	50                   	push   eax
c0017898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001789c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a0:	56                   	push   esi
c00178a1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178a5:	e8 e6 fb ff ff       	call   c0017490 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ae:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178b2:	83 c4 20             	add    esp,0x20
c00178b5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178b9:	73 04                	jae    c00178bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178bf:	45                   	inc    ebp
c00178c0:	e9 76 ff ff ff       	jmp    c001783b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178c5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178d1:	83 ec 0c             	sub    esp,0xc
c00178d4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178df:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178e5:	05 00 10 00 00       	add    eax,0x1000
c00178ea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f1:	e8 f7 46 ff ff       	call   c000bfed <free>
c00178f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178f9:	e8 ef 46 ff ff       	call   c000bfed <free>
c00178fe:	58                   	pop    eax
c00178ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017903:	e8 e5 46 ff ff       	call   c000bfed <free>
c0017908:	89 34 24             	mov    DWORD PTR [esp],esi
c001790b:	e8 f8 7e ff ff       	call   c000f808 <File::close()>
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	b0 01                	mov    al,0x1
c0017915:	83 c4 3c             	add    esp,0x3c
c0017918:	5b                   	pop    ebx
c0017919:	5e                   	pop    esi
c001791a:	5f                   	pop    edi
c001791b:	5d                   	pop    ebp
c001791c:	c3                   	ret    

c001791d <Thr::runtimeReferenceHelper()>:
c001791d:	83 ec 18             	sub    esp,0x18
c0017920:	68 79 2c 02 c0       	push   0xc0022c79
c0017925:	e8 e5 78 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001792a:	fa                   	cli    
c001792b:	83 c4 10             	add    esp,0x10
c001792e:	eb fe                	jmp    c001792e <Thr::runtimeReferenceHelper()+0x11>

c0017930 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017930:	57                   	push   edi
c0017931:	56                   	push   esi
c0017932:	53                   	push   ebx
c0017933:	31 db                	xor    ebx,ebx
c0017935:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c001793b:	7e 3c                	jle    c0017979 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001793d:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c0017944:	31 ff                	xor    edi,edi
c0017946:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c001794d:	7e 27                	jle    c0017976 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001794f:	50                   	push   eax
c0017950:	50                   	push   eax
c0017951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017955:	8b 06                	mov    eax,DWORD PTR [esi]
c0017957:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c001795e:	50                   	push   eax
c001795f:	e8 4b 8e fe ff       	call   c00007af <strcmp>
c0017964:	83 c4 10             	add    esp,0x10
c0017967:	85 c0                	test   eax,eax
c0017969:	75 05                	jne    c0017970 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001796b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001796e:	eb 0b                	jmp    c001797b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017970:	83 c6 10             	add    esi,0x10
c0017973:	47                   	inc    edi
c0017974:	eb d0                	jmp    c0017946 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017976:	43                   	inc    ebx
c0017977:	eb bc                	jmp    c0017935 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017979:	31 c0                	xor    eax,eax
c001797b:	5b                   	pop    ebx
c001797c:	5e                   	pop    esi
c001797d:	5f                   	pop    edi
c001797e:	c3                   	ret    

c001797f <Thr::loadKernelSymbolTable(char const*)>:
c001797f:	55                   	push   ebp
c0017980:	57                   	push   edi
c0017981:	56                   	push   esi
c0017982:	53                   	push   ebx
c0017983:	83 ec 68             	sub    esp,0x68
c0017986:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c001798c:	68 14 01 00 00       	push   0x114
c0017991:	e8 44 77 ff ff       	call   c000f0da <operator new(unsigned long)>
c0017996:	83 c4 0c             	add    esp,0xc
c0017999:	89 c3                	mov    ebx,eax
c001799b:	56                   	push   esi
c001799c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179a0:	50                   	push   eax
c00179a1:	e8 a0 7d ff ff       	call   c000f746 <File::File(char const*, Process*)>
c00179a6:	5e                   	pop    esi
c00179a7:	5f                   	pop    edi
c00179a8:	6a 01                	push   0x1
c00179aa:	53                   	push   ebx
c00179ab:	e8 fa 7d ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	31 d2                	xor    edx,edx
c00179b5:	85 c0                	test   eax,eax
c00179b7:	0f 85 79 02 00 00    	jne    c0017c36 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179bd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179c5:	83 ec 0c             	sub    esp,0xc
c00179c8:	6a 34                	push   0x34
c00179ca:	e8 0e 46 ff ff       	call   c000bfdd <malloc>
c00179cf:	59                   	pop    ecx
c00179d0:	89 c7                	mov    edi,eax
c00179d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179d4:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179d8:	56                   	push   esi
c00179d9:	57                   	push   edi
c00179da:	6a 00                	push   0x0
c00179dc:	6a 34                	push   0x34
c00179de:	53                   	push   ebx
c00179df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179e2:	83 c4 20             	add    esp,0x20
c00179e5:	85 c0                	test   eax,eax
c00179e7:	74 17                	je     c0017a00 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	68 9b 2c 02 c0       	push   0xc0022c9b
c00179f1:	e8 48 e0 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	31 d2                	xor    edx,edx
c00179fb:	e9 36 02 00 00       	jmp    c0017c36 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a00:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a06:	75 e1                	jne    c00179e9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a08:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a0b:	85 c0                	test   eax,eax
c0017a0d:	74 da                	je     c00179e9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a0f:	52                   	push   edx
c0017a10:	31 d2                	xor    edx,edx
c0017a12:	52                   	push   edx
c0017a13:	50                   	push   eax
c0017a14:	53                   	push   ebx
c0017a15:	e8 4e 7e ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	85 c0                	test   eax,eax
c0017a1f:	75 c8                	jne    c00179e9 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a21:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a25:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a29:	0f af c2             	imul   eax,edx
c0017a2c:	83 ec 0c             	sub    esp,0xc
c0017a2f:	31 ed                	xor    ebp,ebp
c0017a31:	50                   	push   eax
c0017a32:	e8 a6 45 ff ff       	call   c000bfdd <malloc>
c0017a37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a42:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a4a:	0f af c2             	imul   eax,edx
c0017a4d:	99                   	cdq    
c0017a4e:	52                   	push   edx
c0017a4f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a51:	50                   	push   eax
c0017a52:	53                   	push   ebx
c0017a53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a56:	83 c4 20             	add    esp,0x20
c0017a59:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a79:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a7d:	0f 86 aa 00 00 00    	jbe    c0017b2d <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a83:	0f b7 f5             	movzx  esi,bp
c0017a86:	6b f6 28             	imul   esi,esi,0x28
c0017a89:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a8d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a94:	50                   	push   eax
c0017a95:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a99:	6b c0 28             	imul   eax,eax,0x28
c0017a9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017aa0:	8b 16                	mov    edx,DWORD PTR [esi]
c0017aa2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aa6:	89 d0                	mov    eax,edx
c0017aa8:	31 d2                	xor    edx,edx
c0017aaa:	52                   	push   edx
c0017aab:	50                   	push   eax
c0017aac:	53                   	push   ebx
c0017aad:	e8 b6 7d ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017ab2:	83 c4 0c             	add    esp,0xc
c0017ab5:	6a 20                	push   0x20
c0017ab7:	6a 00                	push   0x0
c0017ab9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017abd:	52                   	push   edx
c0017abe:	e8 fc 8b fe ff       	call   c00006bf <memset>
c0017ac3:	58                   	pop    eax
c0017ac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ac6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017aca:	51                   	push   ecx
c0017acb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017acf:	52                   	push   edx
c0017ad0:	6a 00                	push   0x0
c0017ad2:	6a 1f                	push   0x1f
c0017ad4:	53                   	push   ebx
c0017ad5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ad8:	83 c4 18             	add    esp,0x18
c0017adb:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017ae0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ae4:	52                   	push   edx
c0017ae5:	e8 c5 8c fe ff       	call   c00007af <strcmp>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	85 c0                	test   eax,eax
c0017aef:	75 0f                	jne    c0017b00 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017af1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017af4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017af8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017afc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b00:	50                   	push   eax
c0017b01:	50                   	push   eax
c0017b02:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b07:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b0b:	50                   	push   eax
c0017b0c:	e8 9e 8c fe ff       	call   c00007af <strcmp>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	85 c0                	test   eax,eax
c0017b16:	75 0f                	jne    c0017b27 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b18:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b27:	45                   	inc    ebp
c0017b28:	e9 4c ff ff ff       	jmp    c0017a79 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b2d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b32:	75 10                	jne    c0017b44 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b34:	83 ec 0c             	sub    esp,0xc
c0017b37:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b3c:	e8 fd de ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b49:	75 10                	jne    c0017b5b <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b4b:	83 ec 0c             	sub    esp,0xc
c0017b4e:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b53:	e8 e6 de ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	31 d2                	xor    edx,edx
c0017b5d:	50                   	push   eax
c0017b5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b62:	52                   	push   edx
c0017b63:	50                   	push   eax
c0017b64:	53                   	push   ebx
c0017b65:	e8 fe 7c ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017b6a:	5a                   	pop    edx
c0017b6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b6f:	e8 69 44 ff ff       	call   c000bfdd <malloc>
c0017b74:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b7c:	89 c1                	mov    ecx,eax
c0017b7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b86:	5e                   	pop    esi
c0017b87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b89:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b8d:	55                   	push   ebp
c0017b8e:	51                   	push   ecx
c0017b8f:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b9b:	53                   	push   ebx
c0017b9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b9f:	83 c4 14             	add    esp,0x14
c0017ba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ba6:	e8 32 44 ff ff       	call   c000bfdd <malloc>
c0017bab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bae:	89 c6                	mov    esi,eax
c0017bb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bb2:	56                   	push   esi
c0017bb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bbb:	53                   	push   ebx
c0017bbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc3:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bc9:	c1 e8 04             	shr    eax,0x4
c0017bcc:	83 c4 1c             	add    esp,0x1c
c0017bcf:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017bd6:	31 d2                	xor    edx,edx
c0017bd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bdc:	52                   	push   edx
c0017bdd:	50                   	push   eax
c0017bde:	53                   	push   ebx
c0017bdf:	e8 84 7c ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017be4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017be7:	31 d2                	xor    edx,edx
c0017be9:	56                   	push   esi
c0017bea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bee:	52                   	push   edx
c0017bef:	50                   	push   eax
c0017bf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bf2:	53                   	push   ebx
c0017bf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bf6:	83 c4 14             	add    esp,0x14
c0017bf9:	53                   	push   ebx
c0017bfa:	e8 09 7c ff ff       	call   c000f808 <File::close()>
c0017bff:	5d                   	pop    ebp
c0017c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c04:	e8 e4 43 ff ff       	call   c000bfed <free>
c0017c09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c0c:	e8 dc 43 ff ff       	call   c000bfed <free>
c0017c11:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c1a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c1d:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c23:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c2a:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	b2 01                	mov    dl,0x1
c0017c36:	83 c4 5c             	add    esp,0x5c
c0017c39:	88 d0                	mov    al,dl
c0017c3b:	5b                   	pop    ebx
c0017c3c:	5e                   	pop    esi
c0017c3d:	5f                   	pop    edi
c0017c3e:	5d                   	pop    ebp
c0017c3f:	c3                   	ret    

c0017c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c40:	55                   	push   ebp
c0017c41:	57                   	push   edi
c0017c42:	56                   	push   esi
c0017c43:	53                   	push   ebx
c0017c44:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c4a:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c50:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c57:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c5b:	68 14 01 00 00       	push   0x114
c0017c60:	e8 75 74 ff ff       	call   c000f0da <operator new(unsigned long)>
c0017c65:	83 c4 0c             	add    esp,0xc
c0017c68:	53                   	push   ebx
c0017c69:	89 c7                	mov    edi,eax
c0017c6b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c72:	50                   	push   eax
c0017c73:	e8 ce 7a ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0017c78:	5e                   	pop    esi
c0017c79:	5d                   	pop    ebp
c0017c7a:	6a 01                	push   0x1
c0017c7c:	57                   	push   edi
c0017c7d:	e8 28 7b ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	85 c0                	test   eax,eax
c0017c87:	0f 85 10 07 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c8d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c95:	83 ec 0c             	sub    esp,0xc
c0017c98:	6a 34                	push   0x34
c0017c9a:	e8 3e 43 ff ff       	call   c000bfdd <malloc>
c0017c9f:	5b                   	pop    ebx
c0017ca0:	89 c5                	mov    ebp,eax
c0017ca2:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ca4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ca8:	53                   	push   ebx
c0017ca9:	55                   	push   ebp
c0017caa:	6a 00                	push   0x0
c0017cac:	6a 34                	push   0x34
c0017cae:	57                   	push   edi
c0017caf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cb2:	83 c4 20             	add    esp,0x20
c0017cb5:	85 c0                	test   eax,eax
c0017cb7:	0f 85 e0 06 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cbd:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cc4:	0f 85 d3 06 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cca:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017ccd:	85 c0                	test   eax,eax
c0017ccf:	0f 84 c8 06 00 00    	je     c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd5:	31 d2                	xor    edx,edx
c0017cd7:	51                   	push   ecx
c0017cd8:	52                   	push   edx
c0017cd9:	50                   	push   eax
c0017cda:	57                   	push   edi
c0017cdb:	e8 88 7b ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	85 c0                	test   eax,eax
c0017ce5:	0f 85 b2 06 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ceb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cee:	83 ec 0c             	sub    esp,0xc
c0017cf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cf5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cf9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017cfd:	0f af c2             	imul   eax,edx
c0017d00:	50                   	push   eax
c0017d01:	e8 d7 42 ff ff       	call   c000bfdd <malloc>
c0017d06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d11:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d15:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d19:	0f af c2             	imul   eax,edx
c0017d1c:	99                   	cdq    
c0017d1d:	52                   	push   edx
c0017d1e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d20:	50                   	push   eax
c0017d21:	57                   	push   edi
c0017d22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d25:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d28:	83 c4 20             	add    esp,0x20
c0017d2b:	85 c0                	test   eax,eax
c0017d2d:	0f 84 6a 06 00 00    	je     c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d33:	52                   	push   edx
c0017d34:	31 d2                	xor    edx,edx
c0017d36:	52                   	push   edx
c0017d37:	50                   	push   eax
c0017d38:	57                   	push   edi
c0017d39:	e8 2a 7b ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017d3e:	83 c4 10             	add    esp,0x10
c0017d41:	85 c0                	test   eax,eax
c0017d43:	0f 85 54 06 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d49:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d4d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d51:	0f af c2             	imul   eax,edx
c0017d54:	83 ec 0c             	sub    esp,0xc
c0017d57:	31 f6                	xor    esi,esi
c0017d59:	50                   	push   eax
c0017d5a:	e8 7e 42 ff ff       	call   c000bfdd <malloc>
c0017d5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d6a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d6e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d72:	0f af c2             	imul   eax,edx
c0017d75:	99                   	cdq    
c0017d76:	52                   	push   edx
c0017d77:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d79:	50                   	push   eax
c0017d7a:	57                   	push   edi
c0017d7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d7e:	83 c4 20             	add    esp,0x20
c0017d81:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d85:	0f 86 af 00 00 00    	jbe    c0017e3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d8b:	0f b7 de             	movzx  ebx,si
c0017d8e:	c1 e3 05             	shl    ebx,0x5
c0017d91:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d95:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d98:	0f 85 96 00 00 00    	jne    c0017e34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017d9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017da1:	31 d2                	xor    edx,edx
c0017da3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017da7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017daa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dae:	50                   	push   eax
c0017daf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017db2:	52                   	push   edx
c0017db3:	50                   	push   eax
c0017db4:	57                   	push   edi
c0017db5:	e8 ae 7a ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	85 c0                	test   eax,eax
c0017dbf:	0f 85 d8 05 00 00    	jne    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dc5:	52                   	push   edx
c0017dc6:	52                   	push   edx
c0017dc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dcb:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017dd0:	e8 3a 74 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017dd5:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017ddc:	31 d2                	xor    edx,edx
c0017dde:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017de2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017de6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dea:	59                   	pop    ecx
c0017deb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ded:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017df4:	50                   	push   eax
c0017df5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dfd:	52                   	push   edx
c0017dfe:	50                   	push   eax
c0017dff:	57                   	push   edi
c0017e00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e03:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e06:	83 c4 18             	add    esp,0x18
c0017e09:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e0c:	50                   	push   eax
c0017e0d:	68 00 2d 02 c0       	push   0xc0022d00
c0017e12:	e8 f8 73 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0017e17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e1a:	83 c4 0c             	add    esp,0xc
c0017e1d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e20:	50                   	push   eax
c0017e21:	6a 00                	push   0x0
c0017e23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e27:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e2b:	50                   	push   eax
c0017e2c:	e8 8e 88 fe ff       	call   c00006bf <memset>
c0017e31:	83 c4 10             	add    esp,0x10
c0017e34:	46                   	inc    esi
c0017e35:	e9 47 ff ff ff       	jmp    c0017d81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e3a:	50                   	push   eax
c0017e3b:	31 db                	xor    ebx,ebx
c0017e3d:	68 00 01 00 00       	push   0x100
c0017e42:	6a 00                	push   0x0
c0017e44:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e48:	50                   	push   eax
c0017e49:	e8 71 88 fe ff       	call   c00006bf <memset>
c0017e4e:	83 c4 0c             	add    esp,0xc
c0017e51:	68 00 01 00 00       	push   0x100
c0017e56:	6a 00                	push   0x0
c0017e58:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e5f:	50                   	push   eax
c0017e60:	e8 5a 88 fe ff       	call   c00006bf <memset>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e70:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e78:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e80:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e88:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e90:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e94:	0f 86 2f 01 00 00    	jbe    c0017fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017e9a:	0f b7 f3             	movzx  esi,bx
c0017e9d:	6b f6 28             	imul   esi,esi,0x28
c0017ea0:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017ea4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eab:	50                   	push   eax
c0017eac:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017eb0:	6b d2 28             	imul   edx,edx,0x28
c0017eb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017eb7:	8b 06                	mov    eax,DWORD PTR [esi]
c0017eb9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ebd:	31 d2                	xor    edx,edx
c0017ebf:	52                   	push   edx
c0017ec0:	50                   	push   eax
c0017ec1:	57                   	push   edi
c0017ec2:	e8 a1 79 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017ec7:	83 c4 0c             	add    esp,0xc
c0017eca:	6a 20                	push   0x20
c0017ecc:	6a 00                	push   0x0
c0017ece:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ed5:	51                   	push   ecx
c0017ed6:	e8 e4 87 fe ff       	call   c00006bf <memset>
c0017edb:	58                   	pop    eax
c0017edc:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ede:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ee2:	52                   	push   edx
c0017ee3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017eea:	51                   	push   ecx
c0017eeb:	6a 00                	push   0x0
c0017eed:	6a 1f                	push   0x1f
c0017eef:	57                   	push   edi
c0017ef0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ef3:	83 c4 1c             	add    esp,0x1c
c0017ef6:	6a 09                	push   0x9
c0017ef8:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017efd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f04:	51                   	push   ecx
c0017f05:	e8 1c 87 fe ff       	call   c0000626 <memcmp>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	75 21                	jne    c0017f32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f1d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f24:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f2b:	89 c8                	mov    eax,ecx
c0017f2d:	40                   	inc    eax
c0017f2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f32:	50                   	push   eax
c0017f33:	6a 09                	push   0x9
c0017f35:	68 27 2d 02 c0       	push   0xc0022d27
c0017f3a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f41:	50                   	push   eax
c0017f42:	e8 df 86 fe ff       	call   c0000626 <memcmp>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	85 c0                	test   eax,eax
c0017f4c:	75 21                	jne    c0017f6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f5a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f5e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f61:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f68:	89 c8                	mov    eax,ecx
c0017f6a:	40                   	inc    eax
c0017f6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f6f:	50                   	push   eax
c0017f70:	50                   	push   eax
c0017f71:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f76:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f7d:	50                   	push   eax
c0017f7e:	e8 2c 88 fe ff       	call   c00007af <strcmp>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	85 c0                	test   eax,eax
c0017f88:	75 0f                	jne    c0017f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f8a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f99:	50                   	push   eax
c0017f9a:	50                   	push   eax
c0017f9b:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fa0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fa7:	50                   	push   eax
c0017fa8:	e8 02 88 fe ff       	call   c00007af <strcmp>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	85 c0                	test   eax,eax
c0017fb2:	75 0f                	jne    c0017fc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fb4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fc3:	43                   	inc    ebx
c0017fc4:	e9 c7 fe ff ff       	jmp    c0017e90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fc9:	31 d2                	xor    edx,edx
c0017fcb:	50                   	push   eax
c0017fcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd0:	52                   	push   edx
c0017fd1:	50                   	push   eax
c0017fd2:	57                   	push   edi
c0017fd3:	e8 90 78 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0017fd8:	5a                   	pop    edx
c0017fd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fdd:	e8 fb 3f ff ff       	call   c000bfdd <malloc>
c0017fe2:	31 d2                	xor    edx,edx
c0017fe4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fe8:	59                   	pop    ecx
c0017fe9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017feb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017fef:	53                   	push   ebx
c0017ff0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff8:	52                   	push   edx
c0017ff9:	50                   	push   eax
c0017ffa:	57                   	push   edi
c0017ffb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ffe:	83 c4 14             	add    esp,0x14
c0018001:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018005:	e8 d3 3f ff ff       	call   c000bfdd <malloc>
c001800a:	31 d2                	xor    edx,edx
c001800c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018010:	83 c4 0c             	add    esp,0xc
c0018013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018017:	52                   	push   edx
c0018018:	50                   	push   eax
c0018019:	57                   	push   edi
c001801a:	e8 49 78 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c001801f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018022:	31 d2                	xor    edx,edx
c0018024:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001802e:	52                   	push   edx
c001802f:	50                   	push   eax
c0018030:	57                   	push   edi
c0018031:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018034:	83 c4 20             	add    esp,0x20
c0018037:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001803f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018043:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0018047:	0f 84 54 03 00 00    	je     c00183a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001804d:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018054:	31 d2                	xor    edx,edx
c0018056:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001805a:	c1 e8 03             	shr    eax,0x3
c001805d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018061:	50                   	push   eax
c0018062:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018066:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001806a:	52                   	push   edx
c001806b:	50                   	push   eax
c001806c:	57                   	push   edi
c001806d:	e8 f6 77 ff ff       	call   c000f868 <File::seek(unsigned long long)>
c0018072:	58                   	pop    eax
c0018073:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018077:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001807e:	e8 5a 3f ff ff       	call   c000bfdd <malloc>
c0018083:	31 d2                	xor    edx,edx
c0018085:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018089:	58                   	pop    eax
c001808a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001808c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018090:	50                   	push   eax
c0018091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018095:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018099:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180a0:	52                   	push   edx
c00180a1:	50                   	push   eax
c00180a2:	57                   	push   edi
c00180a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180a6:	83 c4 20             	add    esp,0x20
c00180a9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180b1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180b5:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180b9:	0f 8d c6 02 00 00    	jge    c0018385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180c7:	31 db                	xor    ebx,ebx
c00180c9:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d4:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180dc:	c1 e8 08             	shr    eax,0x8
c00180df:	89 c6                	mov    esi,eax
c00180e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180e5:	c1 e6 04             	shl    esi,0x4
c00180e8:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180f3:	85 c0                	test   eax,eax
c00180f5:	0f 85 17 01 00 00    	jne    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180fb:	83 ec 0c             	sub    esp,0xc
c00180fe:	b3 01                	mov    bl,0x1
c0018100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018104:	03 06                	add    eax,DWORD PTR [esi]
c0018106:	50                   	push   eax
c0018107:	e8 24 f8 ff ff       	call   c0017930 <Thr::getAddressOfKernelSymbol(char const*)>
c001810c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018118:	0f 85 f4 00 00 00    	jne    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001811e:	50                   	push   eax
c001811f:	50                   	push   eax
c0018120:	68 31 2d 02 c0       	push   0xc0022d31
c0018125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018129:	03 06                	add    eax,DWORD PTR [esi]
c001812b:	50                   	push   eax
c001812c:	e8 7e 86 fe ff       	call   c00007af <strcmp>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	85 c0                	test   eax,eax
c0018136:	75 0a                	jne    c0018142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018138:	b8 0c f5 01 c0       	mov    eax,0xc001f50c
c001813d:	e9 ca 00 00 00       	jmp    c001820c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018142:	50                   	push   eax
c0018143:	50                   	push   eax
c0018144:	68 3b 2d 02 c0       	push   0xc0022d3b
c0018149:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001814d:	03 06                	add    eax,DWORD PTR [esi]
c001814f:	50                   	push   eax
c0018150:	e8 5a 86 fe ff       	call   c00007af <strcmp>
c0018155:	83 c4 10             	add    esp,0x10
c0018158:	85 c0                	test   eax,eax
c001815a:	75 0a                	jne    c0018166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001815c:	b8 40 f2 01 c0       	mov    eax,0xc001f240
c0018161:	e9 a6 00 00 00       	jmp    c001820c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018166:	53                   	push   ebx
c0018167:	53                   	push   ebx
c0018168:	68 44 2d 02 c0       	push   0xc0022d44
c001816d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018171:	03 06                	add    eax,DWORD PTR [esi]
c0018173:	50                   	push   eax
c0018174:	e8 36 86 fe ff       	call   c00007af <strcmp>
c0018179:	83 c4 10             	add    esp,0x10
c001817c:	85 c0                	test   eax,eax
c001817e:	75 0a                	jne    c001818a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018180:	b8 0c f6 01 c0       	mov    eax,0xc001f60c
c0018185:	e9 82 00 00 00       	jmp    c001820c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001818a:	51                   	push   ecx
c001818b:	51                   	push   ecx
c001818c:	68 4e 2d 02 c0       	push   0xc0022d4e
c0018191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018195:	03 06                	add    eax,DWORD PTR [esi]
c0018197:	50                   	push   eax
c0018198:	e8 12 86 fe ff       	call   c00007af <strcmp>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	85 c0                	test   eax,eax
c00181a2:	74 63                	je     c0018207 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181a4:	50                   	push   eax
c00181a5:	50                   	push   eax
c00181a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181aa:	03 06                	add    eax,DWORD PTR [esi]
c00181ac:	50                   	push   eax
c00181ad:	68 57 2d 02 c0       	push   0xc0022d57
c00181b2:	e8 58 70 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00181b7:	58                   	pop    eax
c00181b8:	5a                   	pop    edx
c00181b9:	68 71 2d 02 c0       	push   0xc0022d71
c00181be:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181c5:	53                   	push   ebx
c00181c6:	e8 93 85 fe ff       	call   c000075e <strcpy>
c00181cb:	59                   	pop    ecx
c00181cc:	58                   	pop    eax
c00181cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181d1:	03 06                	add    eax,DWORD PTR [esi]
c00181d3:	50                   	push   eax
c00181d4:	53                   	push   ebx
c00181d5:	e8 3b 86 fe ff       	call   c0000815 <strcat>
c00181da:	58                   	pop    eax
c00181db:	5a                   	pop    edx
c00181dc:	68 07 2e 02 c0       	push   0xc0022e07
c00181e1:	53                   	push   ebx
c00181e2:	e8 2e 86 fe ff       	call   c0000815 <strcat>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181ef:	0f 84 4b 01 00 00    	je     c0018340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181f5:	83 ec 0c             	sub    esp,0xc
c00181f8:	53                   	push   ebx
c00181f9:	e8 40 d8 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018205:	eb 0b                	jmp    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018207:	b8 8c f3 01 c0       	mov    eax,0xc001f38c
c001820c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018210:	b3 01                	mov    bl,0x1
c0018212:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018217:	0f 85 80 00 00 00    	jne    c001829d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001821d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018224:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018228:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001822c:	01 ce                	add    esi,ecx
c001822e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018236:	0f 94 c2             	sete   dl
c0018239:	8b 06                	mov    eax,DWORD PTR [esi]
c001823b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018243:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018248:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001824c:	84 db                	test   bl,bl
c001824e:	74 31                	je     c0018281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018250:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018254:	01 c3                	add    ebx,eax
c0018256:	84 d2                	test   dl,dl
c0018258:	75 0a                	jne    c0018264 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001825a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001825e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018262:	76 32                	jbe    c0018296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018264:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018269:	0f 84 d1 00 00 00    	je     c0018340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	68 88 2d 02 c0       	push   0xc0022d88
c0018277:	e8 c2 d7 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	eb 15                	jmp    c0018296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018281:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018284:	84 d2                	test   dl,dl
c0018286:	75 0e                	jne    c0018296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018288:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001828c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018290:	77 04                	ja     c0018296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018292:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018296:	89 1e                	mov    DWORD PTR [esi],ebx
c0018298:	e9 df 00 00 00       	jmp    c001837c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001829d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182a2:	75 6e                	jne    c0018312 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182a4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182ab:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182af:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182b3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182bb:	74 17                	je     c00182d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182bd:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182c5:	74 0d                	je     c00182d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182c7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182cb:	83 e8 04             	sub    eax,0x4
c00182ce:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182d2:	76 17                	jbe    c00182eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182d4:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182d9:	74 65                	je     c0018340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	68 a4 2d 02 c0       	push   0xc0022da4
c00182e3:	e8 56 d7 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	8b 16                	mov    edx,DWORD PTR [esi]
c00182ed:	84 db                	test   bl,bl
c00182ef:	74 13                	je     c0018304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182f5:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00182fc:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018300:	01 d0                	add    eax,edx
c0018302:	eb 06                	jmp    c001830a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018304:	89 d0                	mov    eax,edx
c0018306:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001830a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001830e:	89 06                	mov    DWORD PTR [esi],eax
c0018310:	eb 6a                	jmp    c001837c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018312:	50                   	push   eax
c0018313:	50                   	push   eax
c0018314:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018319:	50                   	push   eax
c001831a:	68 c0 2d 02 c0       	push   0xc0022dc0
c001831f:	e8 eb 6e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001832c:	74 12                	je     c0018340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001832e:	83 ec 0c             	sub    esp,0xc
c0018331:	68 cb 2d 02 c0       	push   0xc0022dcb
c0018336:	e8 03 d7 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001833b:	83 c4 10             	add    esp,0x10
c001833e:	eb 3c                	jmp    c001837c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018340:	83 ec 0c             	sub    esp,0xc
c0018343:	57                   	push   edi
c0018344:	e8 bf 74 ff ff       	call   c000f808 <File::close()>
c0018349:	8b 07                	mov    eax,DWORD PTR [edi]
c001834b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001834e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018351:	59                   	pop    ecx
c0018352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018356:	e8 92 3c ff ff       	call   c000bfed <free>
c001835b:	5b                   	pop    ebx
c001835c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018360:	e8 88 3c ff ff       	call   c000bfed <free>
c0018365:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018368:	e8 80 3c ff ff       	call   c000bfed <free>
c001836d:	5e                   	pop    esi
c001836e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018372:	e8 76 3c ff ff       	call   c000bfed <free>
c0018377:	83 c4 10             	add    esp,0x10
c001837a:	eb 21                	jmp    c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001837c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018380:	e9 2c fd ff ff       	jmp    c00180b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018385:	83 ec 0c             	sub    esp,0xc
c0018388:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001838c:	e8 5c 3c ff ff       	call   c000bfed <free>
c0018391:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018395:	83 c4 10             	add    esp,0x10
c0018398:	e9 a2 fc ff ff       	jmp    c001803f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001839d:	31 c0                	xor    eax,eax
c001839f:	eb 32                	jmp    c00183d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	57                   	push   edi
c00183a5:	e8 5e 74 ff ff       	call   c000f808 <File::close()>
c00183aa:	8b 07                	mov    eax,DWORD PTR [edi]
c00183ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183b2:	58                   	pop    eax
c00183b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183b7:	e8 31 3c ff ff       	call   c000bfed <free>
c00183bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183bf:	e8 29 3c ff ff       	call   c000bfed <free>
c00183c4:	5a                   	pop    edx
c00183c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183c9:	e8 1f 3c ff ff       	call   c000bfed <free>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	b0 01                	mov    al,0x1
c00183d3:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183d9:	5b                   	pop    ebx
c00183da:	5e                   	pop    esi
c00183db:	5f                   	pop    edi
c00183dc:	5d                   	pop    ebp
c00183dd:	c3                   	ret    

c00183de <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183de:	56                   	push   esi
c00183df:	31 d2                	xor    edx,edx
c00183e1:	53                   	push   ebx
c00183e2:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183ec:	39 d3                	cmp    ebx,edx
c00183ee:	7e 1b                	jle    c001840b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183f0:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c00183f7:	39 c8                	cmp    eax,ecx
c00183f9:	77 0d                	ja     c0018408 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00183fb:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018402:	01 c6                	add    esi,eax
c0018404:	39 ce                	cmp    esi,ecx
c0018406:	77 05                	ja     c001840d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018408:	42                   	inc    edx
c0018409:	eb e1                	jmp    c00183ec <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001840b:	31 c0                	xor    eax,eax
c001840d:	5b                   	pop    ebx
c001840e:	5e                   	pop    esi
c001840f:	c3                   	ret    

c0018410 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018410:	53                   	push   ebx
c0018411:	31 c0                	xor    eax,eax
c0018413:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018417:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c001841d:	39 c3                	cmp    ebx,eax
c001841f:	7e 22                	jle    c0018443 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018421:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c0018428:	39 ca                	cmp    edx,ecx
c001842a:	77 14                	ja     c0018440 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001842c:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018433:	39 ca                	cmp    edx,ecx
c0018435:	76 09                	jbe    c0018440 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018437:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c001843e:	eb 05                	jmp    c0018445 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018440:	40                   	inc    eax
c0018441:	eb da                	jmp    c001841d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018443:	31 c0                	xor    eax,eax
c0018445:	5b                   	pop    ebx
c0018446:	c3                   	ret    

c0018447 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018447:	53                   	push   ebx
c0018448:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001844c:	53                   	push   ebx
c001844d:	e8 8c ff ff ff       	call   c00183de <Thr::getDriverBaseFromAddress(unsigned long)>
c0018452:	5a                   	pop    edx
c0018453:	31 d2                	xor    edx,edx
c0018455:	85 c0                	test   eax,eax
c0018457:	74 04                	je     c001845d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018459:	89 da                	mov    edx,ebx
c001845b:	29 c2                	sub    edx,eax
c001845d:	89 d0                	mov    eax,edx
c001845f:	5b                   	pop    ebx
c0018460:	c3                   	ret    

c0018461 <Thr::loadDLL(char const*, bool)>:
c0018461:	55                   	push   ebp
c0018462:	57                   	push   edi
c0018463:	56                   	push   esi
c0018464:	53                   	push   ebx
c0018465:	81 ec 34 01 00 00    	sub    esp,0x134
c001846b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018472:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018479:	56                   	push   esi
c001847a:	68 e3 2d 02 c0       	push   0xc0022de3
c001847f:	e8 8b 6d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018484:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001848b:	e8 4a 6c ff ff       	call   c000f0da <operator new(unsigned long)>
c0018490:	83 c4 0c             	add    esp,0xc
c0018493:	89 c3                	mov    ebx,eax
c0018495:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c001849b:	56                   	push   esi
c001849c:	50                   	push   eax
c001849d:	e8 a4 72 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c00184a2:	83 c4 0c             	add    esp,0xc
c00184a5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184a9:	50                   	push   eax
c00184aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184ae:	50                   	push   eax
c00184af:	53                   	push   ebx
c00184b0:	e8 a1 75 ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c00184b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184bd:	83 c4 10             	add    esp,0x10
c00184c0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184c5:	75 0a                	jne    c00184d1 <Thr::loadDLL(char const*, bool)+0x70>
c00184c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184cb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184cf:	75 3c                	jne    c001850d <Thr::loadDLL(char const*, bool)+0xac>
c00184d1:	89 e8                	mov    eax,ebp
c00184d3:	84 c0                	test   al,al
c00184d5:	0f 84 3d 01 00 00    	je     c0018618 <Thr::loadDLL(char const*, bool)+0x1b7>
c00184db:	50                   	push   eax
c00184dc:	50                   	push   eax
c00184dd:	68 f4 2d 02 c0       	push   0xc0022df4
c00184e2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184e6:	53                   	push   ebx
c00184e7:	e8 72 82 fe ff       	call   c000075e <strcpy>
c00184ec:	58                   	pop    eax
c00184ed:	5a                   	pop    edx
c00184ee:	56                   	push   esi
c00184ef:	53                   	push   ebx
c00184f0:	e8 20 83 fe ff       	call   c0000815 <strcat>
c00184f5:	59                   	pop    ecx
c00184f6:	5f                   	pop    edi
c00184f7:	68 07 2e 02 c0       	push   0xc0022e07
c00184fc:	53                   	push   ebx
c00184fd:	e8 13 83 fe ff       	call   c0000815 <strcat>
c0018502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018505:	e8 34 d5 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	e8 6f 5e ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c0018512:	51                   	push   ecx
c0018513:	6a 03                	push   0x3
c0018515:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018519:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001851d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018523:	83 d3 00             	adc    ebx,0x0
c0018526:	89 ca                	mov    edx,ecx
c0018528:	89 d1                	mov    ecx,edx
c001852a:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001852e:	51                   	push   ecx
c001852f:	50                   	push   eax
c0018530:	e8 8d 64 ff ff       	call   c000e9c2 <VAS::allocatePages(int, int)>
c0018535:	89 34 24             	mov    DWORD PTR [esp],esi
c0018538:	89 c3                	mov    ebx,eax
c001853a:	e8 9d 81 fe ff       	call   c00006dc <strlen>
c001853f:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c0018545:	40                   	inc    eax
c0018546:	89 04 24             	mov    DWORD PTR [esp],eax
c0018549:	e8 8f 3a ff ff       	call   c000bfdd <malloc>
c001854e:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c0018555:	5f                   	pop    edi
c0018556:	58                   	pop    eax
c0018557:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001855c:	56                   	push   esi
c001855d:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c0018564:	e8 f5 81 fe ff       	call   c000075e <strcpy>
c0018569:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001856e:	8d 50 01             	lea    edx,[eax+0x1]
c0018571:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c0018578:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c001857e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018582:	83 c4 0c             	add    esp,0xc
c0018585:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c001858c:	6a 01                	push   0x1
c001858e:	53                   	push   ebx
c001858f:	56                   	push   esi
c0018590:	e8 ab f6 ff ff       	call   c0017c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018595:	83 c4 10             	add    esp,0x10
c0018598:	89 c7                	mov    edi,eax
c001859a:	fe c8                	dec    al
c001859c:	74 16                	je     c00185b4 <Thr::loadDLL(char const*, bool)+0x153>
c001859e:	89 e8                	mov    eax,ebp
c00185a0:	84 c0                	test   al,al
c00185a2:	74 10                	je     c00185b4 <Thr::loadDLL(char const*, bool)+0x153>
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	68 09 2e 02 c0       	push   0xc0022e09
c00185ac:	e8 8d d4 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c00185b1:	83 c4 10             	add    esp,0x10
c00185b4:	31 f6                	xor    esi,esi
c00185b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185be:	05 ff 0f 00 00       	add    eax,0xfff
c00185c3:	83 d2 00             	adc    edx,0x0
c00185c6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185ca:	c1 ea 0c             	shr    edx,0xc
c00185cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185d5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185d9:	ba 00 00 00 00       	mov    edx,0x0
c00185de:	89 d0                	mov    eax,edx
c00185e0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185e4:	73 2c                	jae    c0018612 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185e6:	e8 96 5d ff ff       	call   c000e381 <Virt::getAKernelVAS()>
c00185eb:	89 f5                	mov    ebp,esi
c00185ed:	c1 e5 0c             	shl    ebp,0xc
c00185f0:	52                   	push   edx
c00185f1:	52                   	push   edx
c00185f2:	01 dd                	add    ebp,ebx
c00185f4:	55                   	push   ebp
c00185f5:	50                   	push   eax
c00185f6:	e8 27 5f ff ff       	call   c000e522 <VAS::getPageTableEntry(unsigned long)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018601:	75 0c                	jne    c001860f <Thr::loadDLL(char const*, bool)+0x1ae>
c0018603:	83 ec 0c             	sub    esp,0xc
c0018606:	55                   	push   ebp
c0018607:	e8 1a 3f ff ff       	call   c000c526 <Phys::freePage(unsigned long)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	46                   	inc    esi
c0018610:	eb a4                	jmp    c00185b6 <Thr::loadDLL(char const*, bool)+0x155>
c0018612:	89 f8                	mov    eax,edi
c0018614:	84 c0                	test   al,al
c0018616:	75 02                	jne    c001861a <Thr::loadDLL(char const*, bool)+0x1b9>
c0018618:	31 db                	xor    ebx,ebx
c001861a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018620:	89 d8                	mov    eax,ebx
c0018622:	5b                   	pop    ebx
c0018623:	5e                   	pop    esi
c0018624:	5f                   	pop    edi
c0018625:	5d                   	pop    ebp
c0018626:	c3                   	ret    

c0018627 <Thr::executeDLL(unsigned long, void*)>:
c0018627:	56                   	push   esi
c0018628:	53                   	push   ebx
c0018629:	51                   	push   ecx
c001862a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001862e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018632:	85 db                	test   ebx,ebx
c0018634:	75 10                	jne    c0018646 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018636:	83 ec 0c             	sub    esp,0xc
c0018639:	68 28 2e 02 c0       	push   0xc0022e28
c001863e:	e8 fb d3 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001864a:	5a                   	pop    edx
c001864b:	89 d8                	mov    eax,ebx
c001864d:	5b                   	pop    ebx
c001864e:	5e                   	pop    esi
c001864f:	ff e0                	jmp    eax
c0018651:	90                   	nop

c0018652 <changeTSS>:
c0018652:	83 ec 0c             	sub    esp,0xc
c0018655:	e8 78 c2 ff ff       	call   c00148d2 <thisCPU()>
c001865a:	52                   	push   edx
c001865b:	05 7c 11 00 00       	add    eax,0x117c
c0018660:	52                   	push   edx
c0018661:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018667:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001866a:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001866f:	c1 e1 15             	shl    ecx,0x15
c0018672:	29 ca                	sub    edx,ecx
c0018674:	52                   	push   edx
c0018675:	50                   	push   eax
c0018676:	e8 53 54 ff ff       	call   c000dace <TSS::setESP(unsigned long)>
c001867b:	83 c4 1c             	add    esp,0x1c
c001867e:	c3                   	ret    
c001867f:	90                   	nop

c0018680 <Process::addArgs(char**)>:
c0018680:	57                   	push   edi
c0018681:	56                   	push   esi
c0018682:	53                   	push   ebx
c0018683:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001868b:	85 ff                	test   edi,edi
c001868d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018697:	74 45                	je     c00186de <Process::addArgs(char**)+0x5e>
c0018699:	8b 07                	mov    eax,DWORD PTR [edi]
c001869b:	85 c0                	test   eax,eax
c001869d:	74 3f                	je     c00186de <Process::addArgs(char**)+0x5e>
c001869f:	31 db                	xor    ebx,ebx
c00186a1:	83 ec 0c             	sub    esp,0xc
c00186a4:	50                   	push   eax
c00186a5:	e8 32 80 fe ff       	call   c00006dc <strlen>
c00186aa:	40                   	inc    eax
c00186ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00186ae:	e8 2a 39 ff ff       	call   c000bfdd <malloc>
c00186b3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186ba:	5a                   	pop    edx
c00186bb:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186be:	59                   	pop    ecx
c00186bf:	43                   	inc    ebx
c00186c0:	52                   	push   edx
c00186c1:	50                   	push   eax
c00186c2:	e8 97 80 fe ff       	call   c000075e <strcpy>
c00186c7:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186cd:	83 c4 10             	add    esp,0x10
c00186d0:	41                   	inc    ecx
c00186d1:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186d7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186da:	85 c0                	test   eax,eax
c00186dc:	75 c3                	jne    c00186a1 <Process::addArgs(char**)+0x21>
c00186de:	5b                   	pop    ebx
c00186df:	5e                   	pop    esi
c00186e0:	5f                   	pop    edi
c00186e1:	c3                   	ret    

c00186e2 <Process::Process(char const*, Process*, char**)>:
c00186e2:	56                   	push   esi
c00186e3:	53                   	push   ebx
c00186e4:	83 ec 14             	sub    esp,0x14
c00186e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186eb:	05 0c 02 00 00       	add    eax,0x20c
c00186f0:	bb 07 00 00 00       	mov    ebx,0x7
c00186f5:	89 c6                	mov    esi,eax
c00186f7:	85 db                	test   ebx,ebx
c00186f9:	78 12                	js     c001870d <Process::Process(char const*, Process*, char**)+0x2b>
c00186fb:	83 ec 0c             	sub    esp,0xc
c00186fe:	56                   	push   esi
c00186ff:	e8 56 77 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	83 c6 63             	add    esi,0x63
c001870a:	4b                   	dec    ebx
c001870b:	eb ea                	jmp    c00186f7 <Process::Process(char const*, Process*, char**)+0x15>
c001870d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018711:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018725:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c001872a:	8d 50 01             	lea    edx,[eax+0x1]
c001872d:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018733:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018737:	89 02                	mov    DWORD PTR [edx],eax
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	6a 10                	push   0x10
c001873e:	e8 97 69 ff ff       	call   c000f0da <operator new(unsigned long)>
c0018743:	83 c4 10             	add    esp,0x10
c0018746:	89 c3                	mov    ebx,eax
c0018748:	83 ec 08             	sub    esp,0x8
c001874b:	6a 00                	push   0x0
c001874d:	53                   	push   ebx
c001874e:	e8 1b 66 ff ff       	call   c000ed6e <VAS::VAS(bool)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018764:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001876e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018772:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018776:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001877c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018780:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018786:	85 c0                	test   eax,eax
c0018788:	74 42                	je     c00187cc <Process::Process(char const*, Process*, char**)+0xea>
c001878a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001878e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018794:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001879a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187ae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b8:	05 0c 01 00 00       	add    eax,0x10c
c00187bd:	83 ec 08             	sub    esp,0x8
c00187c0:	52                   	push   edx
c00187c1:	50                   	push   eax
c00187c2:	e8 97 7f fe ff       	call   c000075e <strcpy>
c00187c7:	83 c4 10             	add    esp,0x10
c00187ca:	eb 5c                	jmp    c0018828 <Process::Process(char const*, Process*, char**)+0x146>
c00187cc:	83 ec 0c             	sub    esp,0xc
c00187cf:	68 60 12 00 00       	push   0x1260
c00187d4:	e8 01 69 ff ff       	call   c000f0da <operator new(unsigned long)>
c00187d9:	83 c4 10             	add    esp,0x10
c00187dc:	89 c3                	mov    ebx,eax
c00187de:	83 ec 08             	sub    esp,0x8
c00187e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e5:	53                   	push   ebx
c00187e6:	e8 e1 4f ff ff       	call   c000d7cc <VgaText::VgaText(char const*)>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018802:	83 ec 0c             	sub    esp,0xc
c0018805:	50                   	push   eax
c0018806:	e8 c0 43 ff ff       	call   c000cbcb <addToTerminalCycle(VgaText*)>
c001880b:	83 c4 10             	add    esp,0x10
c001880e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018812:	05 0c 01 00 00       	add    eax,0x10c
c0018817:	83 ec 08             	sub    esp,0x8
c001881a:	68 52 2e 02 c0       	push   0xc0022e52
c001881f:	50                   	push   eax
c0018820:	e8 39 7f fe ff       	call   c000075e <strcpy>
c0018825:	83 c4 10             	add    esp,0x10
c0018828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001882c:	83 c0 0c             	add    eax,0xc
c001882f:	83 ec 08             	sub    esp,0x8
c0018832:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018836:	50                   	push   eax
c0018837:	e8 22 7f fe ff       	call   c000075e <strcpy>
c001883c:	83 c4 10             	add    esp,0x10
c001883f:	83 ec 08             	sub    esp,0x8
c0018842:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884a:	e8 31 fe ff ff       	call   c0018680 <Process::addArgs(char**)>
c001884f:	83 c4 10             	add    esp,0x10
c0018852:	83 ec 08             	sub    esp,0x8
c0018855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018859:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885d:	e8 a5 ee ff ff       	call   c0017707 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018862:	83 c4 10             	add    esp,0x10
c0018865:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018869:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001886d:	83 f0 01             	xor    eax,0x1
c0018870:	88 c2                	mov    dl,al
c0018872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018876:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001887c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018880:	25 ff 00 00 00       	and    eax,0xff
c0018885:	83 ec 08             	sub    esp,0x8
c0018888:	50                   	push   eax
c0018889:	68 50 2f 02 c0       	push   0xc0022f50
c001888e:	e8 7c 69 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	90                   	nop
c0018897:	83 c4 14             	add    esp,0x14
c001889a:	5b                   	pop    ebx
c001889b:	5e                   	pop    esi
c001889c:	c3                   	ret    
c001889d:	90                   	nop

c001889e <Process::Process(bool, char const*, Process*, char**)>:
c001889e:	56                   	push   esi
c001889f:	53                   	push   ebx
c00188a0:	83 ec 14             	sub    esp,0x14
c00188a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188af:	05 0c 02 00 00       	add    eax,0x20c
c00188b4:	bb 07 00 00 00       	mov    ebx,0x7
c00188b9:	89 c6                	mov    esi,eax
c00188bb:	85 db                	test   ebx,ebx
c00188bd:	78 12                	js     c00188d1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188bf:	83 ec 0c             	sub    esp,0xc
c00188c2:	56                   	push   esi
c00188c3:	e8 92 75 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c00188c8:	83 c4 10             	add    esp,0x10
c00188cb:	83 c6 63             	add    esi,0x63
c00188ce:	4b                   	dec    ebx
c00188cf:	eb ea                	jmp    c00188bb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d5:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188e9:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c00188ee:	8d 50 01             	lea    edx,[eax+0x1]
c00188f1:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c00188f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188fb:	89 02                	mov    DWORD PTR [edx],eax
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	6a 10                	push   0x10
c0018902:	e8 d3 67 ff ff       	call   c000f0da <operator new(unsigned long)>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	89 c3                	mov    ebx,eax
c001890c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018910:	25 ff 00 00 00       	and    eax,0xff
c0018915:	83 ec 08             	sub    esp,0x8
c0018918:	50                   	push   eax
c0018919:	53                   	push   ebx
c001891a:	e8 4f 64 ff ff       	call   c000ed6e <VAS::VAS(bool)>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018926:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001892c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018930:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001893a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018942:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001894c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018952:	85 c0                	test   eax,eax
c0018954:	74 42                	je     c0018998 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018960:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018974:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001897a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018984:	05 0c 01 00 00       	add    eax,0x10c
c0018989:	83 ec 08             	sub    esp,0x8
c001898c:	52                   	push   edx
c001898d:	50                   	push   eax
c001898e:	e8 cb 7d fe ff       	call   c000075e <strcpy>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	eb 5c                	jmp    c00189f4 <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018998:	83 ec 0c             	sub    esp,0xc
c001899b:	68 60 12 00 00       	push   0x1260
c00189a0:	e8 35 67 ff ff       	call   c000f0da <operator new(unsigned long)>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	89 c3                	mov    ebx,eax
c00189aa:	83 ec 08             	sub    esp,0x8
c00189ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189b1:	53                   	push   ebx
c00189b2:	e8 15 4e ff ff       	call   c000d7cc <VgaText::VgaText(char const*)>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189be:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189ce:	83 ec 0c             	sub    esp,0xc
c00189d1:	50                   	push   eax
c00189d2:	e8 f4 41 ff ff       	call   c000cbcb <addToTerminalCycle(VgaText*)>
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189de:	05 0c 01 00 00       	add    eax,0x10c
c00189e3:	83 ec 08             	sub    esp,0x8
c00189e6:	68 52 2e 02 c0       	push   0xc0022e52
c00189eb:	50                   	push   eax
c00189ec:	e8 6d 7d fe ff       	call   c000075e <strcpy>
c00189f1:	83 c4 10             	add    esp,0x10
c00189f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f8:	83 c0 0c             	add    eax,0xc
c00189fb:	83 ec 08             	sub    esp,0x8
c00189fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a02:	50                   	push   eax
c0018a03:	e8 56 7d fe ff       	call   c000075e <strcpy>
c0018a08:	83 c4 10             	add    esp,0x10
c0018a0b:	83 ec 08             	sub    esp,0x8
c0018a0e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a16:	e8 65 fc ff ff       	call   c0018680 <Process::addArgs(char**)>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	90                   	nop
c0018a1f:	83 c4 14             	add    esp,0x14
c0018a22:	5b                   	pop    ebx
c0018a23:	5e                   	pop    esi
c0018a24:	c3                   	ret    

c0018a25 <disableIRQs()>:
c0018a25:	fa                   	cli    
c0018a26:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a2b:	40                   	inc    eax
c0018a2c:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a31:	c3                   	ret    

c0018a32 <getIRQNestingLevel()>:
c0018a32:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a37:	c3                   	ret    

c0018a38 <enableIRQs()>:
c0018a38:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a3d:	48                   	dec    eax
c0018a3e:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a43:	75 01                	jne    c0018a46 <enableIRQs()+0xe>
c0018a45:	fb                   	sti    
c0018a46:	c3                   	ret    

c0018a47 <lockScheduler()>:
c0018a47:	eb dc                	jmp    c0018a25 <disableIRQs()>

c0018a49 <unlockScheduler()>:
c0018a49:	eb ed                	jmp    c0018a38 <enableIRQs()>

c0018a4b <userModeEntryPoint(void*)>:
c0018a4b:	83 ec 0c             	sub    esp,0xc
c0018a4e:	e8 f6 ff ff ff       	call   c0018a49 <unlockScheduler()>
c0018a53:	fb                   	sti    
c0018a54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a5c:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a66:	83 c4 0c             	add    esp,0xc
c0018a69:	e9 2a 78 fe ff       	jmp    c0000298 <goToUsermode>

c0018a6e <lockStuff()>:
c0018a6e:	e8 b2 ff ff ff       	call   c0018a25 <disableIRQs()>
c0018a73:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a78:	40                   	inc    eax
c0018a79:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a7e:	c3                   	ret    

c0018a7f <taskStartupFunction>:
c0018a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a84:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a87:	c3                   	ret    

c0018a88 <updateTimeUsed()>:
c0018a88:	57                   	push   edi
c0018a89:	56                   	push   esi
c0018a8a:	53                   	push   ebx
c0018a8b:	e8 42 be ff ff       	call   c00148d2 <thisCPU()>
c0018a90:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a97:	74 49                	je     c0018ae2 <updateTimeUsed()+0x5a>
c0018a99:	0f 31                	rdtsc  
c0018a9b:	89 c1                	mov    ecx,eax
c0018a9d:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018aa2:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018aa8:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018aad:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ab3:	89 d3                	mov    ebx,edx
c0018ab5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aba:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ac0:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018ac6:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018acc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018acf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ad2:	01 f1                	add    ecx,esi
c0018ad4:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018ada:	11 fb                	adc    ebx,edi
c0018adc:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018adf:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018ae2:	5b                   	pop    ebx
c0018ae3:	5e                   	pop    esi
c0018ae4:	5f                   	pop    edi
c0018ae5:	c3                   	ret    

c0018ae6 <switchToThread(ThreadControlBlock*)>:
c0018ae6:	53                   	push   ebx
c0018ae7:	83 ec 08             	sub    esp,0x8
c0018aea:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018af3:	85 c0                	test   eax,eax
c0018af5:	75 36                	jne    c0018b2d <switchToThread(ThreadControlBlock*)+0x47>
c0018af7:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018afa:	80 fa ff             	cmp    dl,0xff
c0018afd:	74 2a                	je     c0018b29 <switchToThread(ThreadControlBlock*)+0x43>
c0018aff:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b05:	b8 84 03 00 00       	mov    eax,0x384
c0018b0a:	29 d0                	sub    eax,edx
c0018b0c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b0f:	c1 e0 10             	shl    eax,0x10
c0018b12:	01 c8                	add    eax,ecx
c0018b14:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b17:	e8 6c ff ff ff       	call   c0018a88 <updateTimeUsed()>
c0018b1c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b20:	83 c4 08             	add    esp,0x8
c0018b23:	5b                   	pop    ebx
c0018b24:	e9 ad 77 fe ff       	jmp    c00002d6 <switchToThreadASM>
c0018b29:	31 c0                	xor    eax,eax
c0018b2b:	eb e7                	jmp    c0018b14 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b2d:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b37:	83 c4 08             	add    esp,0x8
c0018b3a:	5b                   	pop    ebx
c0018b3b:	c3                   	ret    

c0018b3c <Semaphore::Semaphore(int)>:
c0018b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b44:	89 10                	mov    DWORD PTR [eax],edx
c0018b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b4a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b67:	90                   	nop
c0018b68:	c3                   	ret    
c0018b69:	90                   	nop

c0018b6a <Mutex::Mutex()>:
c0018b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6e:	6a 01                	push   0x1
c0018b70:	50                   	push   eax
c0018b71:	e8 c6 ff ff ff       	call   c0018b3c <Semaphore::Semaphore(int)>
c0018b76:	83 c4 08             	add    esp,0x8
c0018b79:	90                   	nop
c0018b7a:	c3                   	ret    
c0018b7b:	90                   	nop

c0018b7c <Process::createThread(void (*)(void*), void*, int)>:
c0018b7c:	55                   	push   ebp
c0018b7d:	31 c9                	xor    ecx,ecx
c0018b7f:	57                   	push   edi
c0018b80:	56                   	push   esi
c0018b81:	53                   	push   ebx
c0018b82:	83 ec 1c             	sub    esp,0x1c
c0018b85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b89:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b90:	89 f2                	mov    edx,esi
c0018b92:	31 c0                	xor    eax,eax
c0018b94:	66 89 d0             	mov    ax,dx
c0018b97:	83 e2 01             	and    edx,0x1
c0018b9a:	74 14                	je     c0018bb0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018b9c:	d1 f8                	sar    eax,1
c0018b9e:	41                   	inc    ecx
c0018b9f:	89 c2                	mov    edx,eax
c0018ba1:	83 f9 10             	cmp    ecx,0x10
c0018ba4:	75 ec                	jne    c0018b92 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018ba6:	83 c4 1c             	add    esp,0x1c
c0018ba9:	31 c0                	xor    eax,eax
c0018bab:	5b                   	pop    ebx
c0018bac:	5e                   	pop    esi
c0018bad:	5f                   	pop    edi
c0018bae:	5d                   	pop    ebp
c0018baf:	c3                   	ret    
c0018bb0:	b8 01 00 00 00       	mov    eax,0x1
c0018bb5:	d3 e0                	shl    eax,cl
c0018bb7:	09 c6                	or     esi,eax
c0018bb9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bbf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bc6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bc9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bcc:	89 f0                	mov    eax,esi
c0018bce:	c1 e0 05             	shl    eax,0x5
c0018bd1:	01 c6                	add    esi,eax
c0018bd3:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bd6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bdc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018be0:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018be6:	89 ca                	mov    edx,ecx
c0018be8:	f7 da                	neg    edx
c0018bea:	c1 e2 15             	shl    edx,0x15
c0018bed:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018bf3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bf9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018bff:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c05:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c09:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c13:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c1d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c23:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c2d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c37:	52                   	push   edx
c0018c38:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c3f:	52                   	push   edx
c0018c40:	50                   	push   eax
c0018c41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c45:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c4a:	e8 63 70 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c56:	83 c4 1c             	add    esp,0x1c
c0018c59:	5b                   	pop    ebx
c0018c5a:	5e                   	pop    esi
c0018c5b:	5f                   	pop    edi
c0018c5c:	5d                   	pop    ebp
c0018c5d:	c3                   	ret    

c0018c5e <Process::createUserThread()>:
c0018c5e:	83 ec 0c             	sub    esp,0xc
c0018c61:	68 80 00 00 00       	push   0x80
c0018c66:	6a 00                	push   0x0
c0018c68:	68 4b 8a 01 c0       	push   0xc0018a4b
c0018c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c71:	50                   	push   eax
c0018c72:	e8 05 ff ff ff       	call   c0018b7c <Process::createThread(void (*)(void*), void*, int)>
c0018c77:	83 c4 1c             	add    esp,0x1c
c0018c7a:	c3                   	ret    

c0018c7b <setupMultitasking(void (*)())>:
c0018c7b:	56                   	push   esi
c0018c7c:	53                   	push   ebx
c0018c7d:	51                   	push   ecx
c0018c7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c82:	eb 10                	jmp    c0018c94 <setupMultitasking(void (*)())+0x19>
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c8c:	e8 73 6f 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	83 ec 0c             	sub    esp,0xc
c0018c97:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c9c:	e8 47 6f 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca1:	83 c4 10             	add    esp,0x10
c0018ca4:	84 c0                	test   al,al
c0018ca6:	74 dc                	je     c0018c84 <setupMultitasking(void (*)())+0x9>
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	68 3b 07 00 00       	push   0x73b
c0018cb0:	e8 25 64 ff ff       	call   c000f0da <operator new(unsigned long)>
c0018cb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cbc:	6a 00                	push   0x0
c0018cbe:	68 56 2e 02 c0       	push   0xc0022e56
c0018cc3:	89 c3                	mov    ebx,eax
c0018cc5:	6a 01                	push   0x1
c0018cc7:	50                   	push   eax
c0018cc8:	e8 d1 fb ff ff       	call   c001889e <Process::Process(bool, char const*, Process*, char**)>
c0018ccd:	83 c4 18             	add    esp,0x18
c0018cd0:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cd6:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018cdc:	50                   	push   eax
c0018cdd:	68 78 2f 02 c0       	push   0xc0022f78
c0018ce2:	e8 28 65 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018ce7:	5a                   	pop    edx
c0018ce8:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cee:	51                   	push   ecx
c0018cef:	e8 4b 46 ff ff       	call   c000d33f <setActiveTerminal(VgaText*)>
c0018cf4:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018cfb:	83 c8 01             	or     eax,0x1
c0018cfe:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d05:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d0e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d18:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d1e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d28:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d32:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d38:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d3e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d48:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d4e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d58:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d62:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d68:	58                   	pop    eax
c0018d69:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d6f:	5a                   	pop    edx
c0018d70:	68 52 2e 02 c0       	push   0xc0022e52
c0018d75:	50                   	push   eax
c0018d76:	e8 e3 79 fe ff       	call   c000075e <strcpy>
c0018d7b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d82:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d86:	83 c4 14             	add    esp,0x14
c0018d89:	5b                   	pop    ebx
c0018d8a:	5e                   	pop    esi
c0018d8b:	e9 38 75 fe ff       	jmp    c00002c8 <switchToThreadASMFirstTime>

c0018d90 <schedule()>:
c0018d90:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018d95:	85 c0                	test   eax,eax
c0018d97:	74 0b                	je     c0018da4 <schedule()+0x14>
c0018d99:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018da3:	c3                   	ret    
c0018da4:	53                   	push   ebx
c0018da5:	83 ec 14             	sub    esp,0x14
c0018da8:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dad:	e8 36 6e 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018db2:	83 c4 10             	add    esp,0x10
c0018db5:	84 c0                	test   al,al
c0018db7:	75 38                	jne    c0018df1 <schedule()+0x61>
c0018db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dc1:	4a                   	dec    edx
c0018dc2:	74 32                	je     c0018df6 <schedule()+0x66>
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dcc:	e8 0f 6e 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dd1:	89 c3                	mov    ebx,eax
c0018dd3:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018dda:	e8 25 6e 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ddf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018de6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018de9:	e8 f8 fc ff ff       	call   c0018ae6 <switchToThread(ThreadControlBlock*)>
c0018dee:	83 c4 10             	add    esp,0x10
c0018df1:	83 c4 08             	add    esp,0x8
c0018df4:	5b                   	pop    ebx
c0018df5:	c3                   	ret    
c0018df6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018dfd:	51                   	push   ecx
c0018dfe:	51                   	push   ecx
c0018dff:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e05:	53                   	push   ebx
c0018e06:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e0b:	e8 a2 6e 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	eb af                	jmp    c0018dc4 <schedule()+0x34>

c0018e15 <unlockStuff()>:
c0018e15:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e1a:	48                   	dec    eax
c0018e1b:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e20:	75 09                	jne    c0018e2b <unlockStuff()+0x16>
c0018e22:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e27:	85 c0                	test   eax,eax
c0018e29:	75 05                	jne    c0018e30 <unlockStuff()+0x1b>
c0018e2b:	e9 08 fc ff ff       	jmp    c0018a38 <enableIRQs()>
c0018e30:	83 ec 0c             	sub    esp,0xc
c0018e33:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e3d:	e8 4e ff ff ff       	call   c0018d90 <schedule()>
c0018e42:	83 c4 0c             	add    esp,0xc
c0018e45:	e9 ee fb ff ff       	jmp    c0018a38 <enableIRQs()>

c0018e4a <Semaphore::tryAcquire()>:
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e51:	e8 18 fc ff ff       	call   c0018a6e <lockStuff()>
c0018e56:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e59:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e5b:	7c 0b                	jl     c0018e68 <Semaphore::tryAcquire()+0x1e>
c0018e5d:	e8 b3 ff ff ff       	call   c0018e15 <unlockStuff()>
c0018e62:	31 c0                	xor    eax,eax
c0018e64:	83 c4 0c             	add    esp,0xc
c0018e67:	c3                   	ret    
c0018e68:	40                   	inc    eax
c0018e69:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e6c:	e8 a4 ff ff ff       	call   c0018e15 <unlockStuff()>
c0018e71:	b0 01                	mov    al,0x1
c0018e73:	83 c4 0c             	add    esp,0xc
c0018e76:	c3                   	ret    
c0018e77:	90                   	nop

c0018e78 <Semaphore::assertLocked(char const*)>:
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e83:	e8 e6 fb ff ff       	call   c0018a6e <lockStuff()>
c0018e88:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e8a:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e8d:	7c 05                	jl     c0018e94 <Semaphore::assertLocked(char const*)+0x1c>
c0018e8f:	83 c4 0c             	add    esp,0xc
c0018e92:	eb 81                	jmp    c0018e15 <unlockStuff()>
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	51                   	push   ecx
c0018e98:	e8 a1 cb ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	83 c4 0c             	add    esp,0xc
c0018ea3:	e9 6d ff ff ff       	jmp    c0018e15 <unlockStuff()>

c0018ea8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ea8:	83 ec 0c             	sub    esp,0xc
c0018eab:	e8 82 fb ff ff       	call   c0018a32 <getIRQNestingLevel()>
c0018eb0:	52                   	push   edx
c0018eb1:	52                   	push   edx
c0018eb2:	50                   	push   eax
c0018eb3:	68 ac 2f 02 c0       	push   0xc0022fac
c0018eb8:	e8 52 63 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ec2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ec6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ec9:	e8 c2 fe ff ff       	call   c0018d90 <schedule()>
c0018ece:	e8 76 fb ff ff       	call   c0018a49 <unlockScheduler()>
c0018ed3:	e8 5a fb ff ff       	call   c0018a32 <getIRQNestingLevel()>
c0018ed8:	59                   	pop    ecx
c0018ed9:	5a                   	pop    edx
c0018eda:	50                   	push   eax
c0018edb:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018ee0:	e8 2a 63 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0018ee5:	83 c4 1c             	add    esp,0x1c
c0018ee8:	c3                   	ret    

c0018ee9 <blockTask(TaskState)>:
c0018ee9:	83 ec 0c             	sub    esp,0xc
c0018eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ef0:	e8 52 fb ff ff       	call   c0018a47 <lockScheduler()>
c0018ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018efa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018efd:	e8 8e fe ff ff       	call   c0018d90 <schedule()>
c0018f02:	83 c4 0c             	add    esp,0xc
c0018f05:	e9 3f fb ff ff       	jmp    c0018a49 <unlockScheduler()>

c0018f0a <waitTask(int, int*, int)>:
c0018f0a:	83 ec 18             	sub    esp,0x18
c0018f0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f16:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f22:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f25:	6a 07                	push   0x7
c0018f27:	e8 bd ff ff ff       	call   c0018ee9 <blockTask(TaskState)>
c0018f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f31:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	85 d2                	test   edx,edx
c0018f39:	74 0a                	je     c0018f45 <waitTask(int, int*, int)+0x3b>
c0018f3b:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f3e:	89 02                	mov    DWORD PTR [edx],eax
c0018f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f45:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f48:	83 c4 0c             	add    esp,0xc
c0018f4b:	c3                   	ret    

c0018f4c <nanoSleepUntil(unsigned long long)>:
c0018f4c:	53                   	push   ebx
c0018f4d:	83 ec 08             	sub    esp,0x8
c0018f50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f58:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f5e:	89 d8                	mov    eax,ebx
c0018f60:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f66:	73 05                	jae    c0018f6d <nanoSleepUntil(unsigned long long)+0x21>
c0018f68:	83 c4 08             	add    esp,0x8
c0018f6b:	5b                   	pop    ebx
c0018f6c:	c3                   	ret    
c0018f6d:	e8 fc fa ff ff       	call   c0018a6e <lockStuff()>
c0018f72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f77:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f7a:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f7d:	51                   	push   ecx
c0018f7e:	51                   	push   ecx
c0018f7f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f85:	53                   	push   ebx
c0018f86:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f8b:	e8 22 6d 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f90:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f97:	e8 4d ff ff ff       	call   c0018ee9 <blockTask(TaskState)>
c0018f9c:	83 c4 18             	add    esp,0x18
c0018f9f:	5b                   	pop    ebx
c0018fa0:	e9 70 fe ff ff       	jmp    c0018e15 <unlockStuff()>

c0018fa5 <nanoSleep(unsigned long long)>:
c0018fa5:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018faa:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fb0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fb4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fb8:	eb 92                	jmp    c0018f4c <nanoSleepUntil(unsigned long long)>

c0018fba <sleep(unsigned long long)>:
c0018fba:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fbf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fc7:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fcb:	01 ca                	add    edx,ecx
c0018fcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fd1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fd5:	eb ce                	jmp    c0018fa5 <nanoSleep(unsigned long long)>
c0018fd7:	90                   	nop

c0018fd8 <Semaphore::acquire()>:
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fdf:	e8 8a fa ff ff       	call   c0018a6e <lockStuff()>
c0018fe4:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fe7:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018fe9:	7d 0c                	jge    c0018ff7 <Semaphore::acquire()+0x1f>
c0018feb:	40                   	inc    eax
c0018fec:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018fef:	83 c4 0c             	add    esp,0xc
c0018ff2:	e9 1e fe ff ff       	jmp    c0018e15 <unlockStuff()>
c0018ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ffc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019003:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019006:	85 c0                	test   eax,eax
c0019008:	74 29                	je     c0019033 <Semaphore::acquire()+0x5b>
c001900a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001900d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019013:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001901b:	83 ec 0c             	sub    esp,0xc
c001901e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019021:	6a 05                	push   0x5
c0019023:	e8 c1 fe ff ff       	call   c0018ee9 <blockTask(TaskState)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	83 c4 0c             	add    esp,0xc
c001902e:	e9 e2 fd ff ff       	jmp    c0018e15 <unlockStuff()>
c0019033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019038:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001903b:	eb d9                	jmp    c0019016 <Semaphore::acquire()+0x3e>

c001903d <taskReturned>:
c001903d:	83 ec 18             	sub    esp,0x18
c0019040:	68 14 30 02 c0       	push   0xc0023014
c0019045:	e8 f4 c9 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001904a:	83 c4 10             	add    esp,0x10
c001904d:	83 ec 0c             	sub    esp,0xc
c0019050:	6a 02                	push   0x2
c0019052:	e8 92 fe ff ff       	call   c0018ee9 <blockTask(TaskState)>
c0019057:	e8 eb f9 ff ff       	call   c0018a47 <lockScheduler()>
c001905c:	e8 2f fd ff ff       	call   c0018d90 <schedule()>
c0019061:	e8 e3 f9 ff ff       	call   c0018a49 <unlockScheduler()>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	eb e2                	jmp    c001904d <taskReturned+0x10>

c001906b <unblockTask(ThreadControlBlock*)>:
c001906b:	53                   	push   ebx
c001906c:	83 ec 08             	sub    esp,0x8
c001906f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019073:	e8 cf f9 ff ff       	call   c0018a47 <lockScheduler()>
c0019078:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001907b:	85 c0                	test   eax,eax
c001907d:	74 5b                	je     c00190da <unblockTask(ThreadControlBlock*)+0x6f>
c001907f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019082:	48                   	dec    eax
c0019083:	74 30                	je     c00190b5 <unblockTask(ThreadControlBlock*)+0x4a>
c0019085:	83 ec 0c             	sub    esp,0xc
c0019088:	68 e8 5b 02 c0       	push   0xc0025be8
c001908d:	e8 4e 6b 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	85 c0                	test   eax,eax
c0019097:	75 16                	jne    c00190af <unblockTask(ThreadControlBlock*)+0x44>
c0019099:	eb 64                	jmp    c00190ff <unblockTask(ThreadControlBlock*)+0x94>
c001909b:	52                   	push   edx
c001909c:	52                   	push   edx
c001909d:	50                   	push   eax
c001909e:	68 e8 5b 02 c0       	push   0xc0025be8
c00190a3:	e8 48 6e 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190a8:	83 c4 10             	add    esp,0x10
c00190ab:	85 c0                	test   eax,eax
c00190ad:	74 50                	je     c00190ff <unblockTask(ThreadControlBlock*)+0x94>
c00190af:	39 c3                	cmp    ebx,eax
c00190b1:	75 e8                	jne    c001909b <unblockTask(ThreadControlBlock*)+0x30>
c00190b3:	eb 1c                	jmp    c00190d1 <unblockTask(ThreadControlBlock*)+0x66>
c00190b5:	83 ec 0c             	sub    esp,0xc
c00190b8:	68 04 31 02 c0       	push   0xc0023104
c00190bd:	e8 4d 61 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00190c2:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190c9:	e8 41 61 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00190ce:	83 c4 10             	add    esp,0x10
c00190d1:	83 c4 08             	add    esp,0x8
c00190d4:	5b                   	pop    ebx
c00190d5:	e9 6f f9 ff ff       	jmp    c0018a49 <unlockScheduler()>
c00190da:	83 ec 0c             	sub    esp,0xc
c00190dd:	68 48 30 02 c0       	push   0xc0023048
c00190e2:	e8 28 61 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00190e7:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190ee:	e8 1c 61 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	83 c4 08             	add    esp,0x8
c00190f9:	5b                   	pop    ebx
c00190fa:	e9 4a f9 ff ff       	jmp    c0018a49 <unlockScheduler()>
c00190ff:	50                   	push   eax
c0019100:	50                   	push   eax
c0019101:	53                   	push   ebx
c0019102:	68 e8 5b 02 c0       	push   0xc0025be8
c0019107:	e8 a6 6b 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	83 c4 08             	add    esp,0x8
c0019112:	5b                   	pop    ebx
c0019113:	e9 31 f9 ff ff       	jmp    c0018a49 <unlockScheduler()>

c0019118 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019118:	55                   	push   ebp
c0019119:	57                   	push   edi
c001911a:	56                   	push   esi
c001911b:	53                   	push   ebx
c001911c:	83 ec 1c             	sub    esp,0x1c
c001911f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019123:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019126:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c001912c:	85 ed                	test   ebp,ebp
c001912e:	7e 21                	jle    c0019151 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019130:	31 f6                	xor    esi,esi
c0019132:	83 ec 0c             	sub    esp,0xc
c0019135:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c001913c:	46                   	inc    esi
c001913d:	57                   	push   edi
c001913e:	e8 aa 2e ff ff       	call   c000bfed <free>
c0019143:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019146:	83 c4 10             	add    esp,0x10
c0019149:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001914f:	7f e1                	jg     c0019132 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019151:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001915b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019160:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019163:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019166:	d3 c0                	rol    eax,cl
c0019168:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001916f:	21 c1                	and    ecx,eax
c0019171:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019178:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001917b:	89 f7                	mov    edi,esi
c001917d:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019185:	0f 85 4f 01 00 00    	jne    c00192da <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c001918b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019191:	85 c0                	test   eax,eax
c0019193:	0f 84 aa 00 00 00    	je     c0019243 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019199:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001919c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191a0:	31 c9                	xor    ecx,ecx
c00191a2:	eb 10                	jmp    c00191b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191a4:	41                   	inc    ecx
c00191a5:	83 f9 10             	cmp    ecx,0x10
c00191a8:	0f 84 95 00 00 00    	je     c0019243 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191ae:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191b4:	31 d2                	xor    edx,edx
c00191b6:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191bd:	d3 fa                	sar    edx,cl
c00191bf:	83 e2 01             	and    edx,0x1
c00191c2:	74 e0                	je     c00191a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191c4:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191c7:	89 d5                	mov    ebp,edx
c00191c9:	c1 e5 05             	shl    ebp,0x5
c00191cc:	01 ea                	add    edx,ebp
c00191ce:	01 d0                	add    eax,edx
c00191d0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191d6:	83 fd 07             	cmp    ebp,0x7
c00191d9:	75 c9                	jne    c00191a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191db:	05 40 02 00 00       	add    eax,0x240
c00191e0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191e3:	83 fd ff             	cmp    ebp,0xffffffff
c00191e6:	0f 8c 07 01 00 00    	jl     c00192f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191ec:	0f 84 b4 01 00 00    	je     c00193a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191f2:	85 ed                	test   ebp,ebp
c00191f4:	0f 84 9b 01 00 00    	je     c0019395 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00191fa:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00191fc:	75 a6                	jne    c00191a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191fe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019204:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019208:	01 d0                	add    eax,edx
c001920a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001920e:	83 ec 0c             	sub    esp,0xc
c0019211:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019217:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001921a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019220:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019227:	50                   	push   eax
c0019228:	e8 3e fe ff ff       	call   c001906b <unblockTask(ThreadControlBlock*)>
c001922d:	83 c4 10             	add    esp,0x10
c0019230:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019234:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019237:	41                   	inc    ecx
c0019238:	89 f7                	mov    edi,esi
c001923a:	83 f9 10             	cmp    ecx,0x10
c001923d:	0f 85 6b ff ff ff    	jne    c00191ae <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019243:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019249:	85 c0                	test   eax,eax
c001924b:	74 5d                	je     c00192aa <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001924d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019253:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019259:	74 4f                	je     c00192aa <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001925b:	83 ec 0c             	sub    esp,0xc
c001925e:	68 e8 5b 02 c0       	push   0xc0025be8
c0019263:	e8 78 69 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019268:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001926f:	89 c7                	mov    edi,eax
c0019271:	e8 72 69 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	84 c0                	test   al,al
c001927b:	0f 84 e2 00 00 00    	je     c0019363 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019281:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019284:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001928a:	85 d2                	test   edx,edx
c001928c:	74 0f                	je     c001929d <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	8b 02                	mov    eax,DWORD PTR [edx]
c0019293:	52                   	push   edx
c0019294:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019297:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001929a:	83 c4 10             	add    esp,0x10
c001929d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192a7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192aa:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192b0:	85 db                	test   ebx,ebx
c00192b2:	74 16                	je     c00192ca <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192b4:	83 ec 0c             	sub    esp,0xc
c00192b7:	53                   	push   ebx
c00192b8:	e8 97 54 ff ff       	call   c000e754 <VAS::~VAS()>
c00192bd:	5a                   	pop    edx
c00192be:	59                   	pop    ecx
c00192bf:	6a 10                	push   0x10
c00192c1:	53                   	push   ebx
c00192c2:	e8 22 5e ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	83 ec 0c             	sub    esp,0xc
c00192cd:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192d2:	e8 38 5f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	50                   	push   eax
c00192db:	50                   	push   eax
c00192dc:	68 3b 07 00 00       	push   0x73b
c00192e1:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192e6:	e8 24 5f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00192eb:	83 c4 2c             	add    esp,0x2c
c00192ee:	5b                   	pop    ebx
c00192ef:	5e                   	pop    esi
c00192f0:	5f                   	pop    edi
c00192f1:	5d                   	pop    ebp
c00192f2:	c3                   	ret    
c00192f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192f7:	83 ec 0c             	sub    esp,0xc
c00192fa:	68 48 31 02 c0       	push   0xc0023148
c00192ff:	e8 3a c7 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001930a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001930e:	89 f7                	mov    edi,esi
c0019310:	e9 8f fe ff ff       	jmp    c00191a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019315:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001931b:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019321:	75 1c                	jne    c001933f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	68 b0 31 02 c0       	push   0xc00231b0
c001932b:	e8 df 5e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019330:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019337:	e8 ad fb ff ff       	call   c0018ee9 <blockTask(TaskState)>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	55                   	push   ebp
c0019340:	55                   	push   ebp
c0019341:	56                   	push   esi
c0019342:	68 e8 5b 02 c0       	push   0xc0025be8
c0019347:	e8 66 69 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001934c:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019353:	e8 88 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019358:	83 c4 10             	add    esp,0x10
c001935b:	39 f8                	cmp    eax,edi
c001935d:	0f 84 1e ff ff ff    	je     c0019281 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019363:	83 ec 0c             	sub    esp,0xc
c0019366:	68 e8 5b 02 c0       	push   0xc0025be8
c001936b:	e8 70 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019370:	89 c6                	mov    esi,eax
c0019372:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019379:	e8 86 68 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	39 f3                	cmp    ebx,esi
c0019383:	74 ba                	je     c001933f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019385:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019388:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001938b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019391:	75 ac                	jne    c001933f <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019393:	eb 80                	jmp    c0019315 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0019395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019399:	83 ec 0c             	sub    esp,0xc
c001939c:	68 7c 31 02 c0       	push   0xc002317c
c00193a1:	e9 59 ff ff ff       	jmp    c00192ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193a6:	8b 36                	mov    esi,DWORD PTR [esi]
c00193a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ac:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193b2:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193b8:	01 d7                	add    edi,edx
c00193ba:	89 f8                	mov    eax,edi
c00193bc:	e9 49 fe ff ff       	jmp    c001920a <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193c1 <cleanerTaskFunction(void*)>:
c00193c1:	53                   	push   ebx
c00193c2:	83 ec 08             	sub    esp,0x8
c00193c5:	e8 7f f6 ff ff       	call   c0018a49 <unlockScheduler()>
c00193ca:	e8 78 f6 ff ff       	call   c0018a47 <lockScheduler()>
c00193cf:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193d6:	0f 85 8e 00 00 00    	jne    c001946a <cleanerTaskFunction(void*)+0xa9>
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	6a 02                	push   0x2
c00193e1:	e8 c2 fa ff ff       	call   c0018ea8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193e6:	83 c4 10             	add    esp,0x10
c00193e9:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c00193f0:	e8 79 f6 ff ff       	call   c0018a6e <lockStuff()>
c00193f5:	e8 4d f6 ff ff       	call   c0018a47 <lockScheduler()>
c00193fa:	83 ec 0c             	sub    esp,0xc
c00193fd:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019402:	e8 e1 67 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019407:	83 c4 10             	add    esp,0x10
c001940a:	84 c0                	test   al,al
c001940c:	75 40                	jne    c001944e <cleanerTaskFunction(void*)+0x8d>
c001940e:	83 ec 0c             	sub    esp,0xc
c0019411:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019416:	e8 c5 67 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001941b:	89 c3                	mov    ebx,eax
c001941d:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c0019424:	e8 db 67 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019429:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c0019430:	e8 da 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019435:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019438:	e8 db fc ff ff       	call   c0019118 <cleanupTerminatedTask(ThreadControlBlock*)>
c001943d:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c0019444:	e8 c6 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019449:	83 c4 10             	add    esp,0x10
c001944c:	eb ac                	jmp    c00193fa <cleanerTaskFunction(void*)+0x39>
c001944e:	e8 f6 f5 ff ff       	call   c0018a49 <unlockScheduler()>
c0019453:	e8 bd f9 ff ff       	call   c0018e15 <unlockStuff()>
c0019458:	e8 ea f5 ff ff       	call   c0018a47 <lockScheduler()>
c001945d:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c0019464:	0f 84 72 ff ff ff    	je     c00193dc <cleanerTaskFunction(void*)+0x1b>
c001946a:	e8 da f5 ff ff       	call   c0018a49 <unlockScheduler()>
c001946f:	e9 75 ff ff ff       	jmp    c00193e9 <cleanerTaskFunction(void*)+0x28>

c0019474 <terminateTask(int)>:
c0019474:	83 ec 14             	sub    esp,0x14
c0019477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001947c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001947f:	83 c0 0c             	add    eax,0xc
c0019482:	50                   	push   eax
c0019483:	68 d8 31 02 c0       	push   0xc00231d8
c0019488:	e8 82 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001948d:	e8 dc f5 ff ff       	call   c0018a6e <lockStuff()>
c0019492:	e8 b0 f5 ff ff       	call   c0018a47 <lockScheduler()>
c0019497:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c001949e:	e8 6c 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00194a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194ac:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b4:	59                   	pop    ecx
c00194b5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194b8:	5a                   	pop    edx
c00194b9:	50                   	push   eax
c00194ba:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194bf:	e8 ee 67 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c9:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194d0:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194d7:	e8 33 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00194dc:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194e2:	83 c4 10             	add    esp,0x10
c00194e5:	85 c9                	test   ecx,ecx
c00194e7:	74 5b                	je     c0019544 <terminateTask(int)+0xd0>
c00194e9:	83 ec 0c             	sub    esp,0xc
c00194ec:	68 e1 2e 02 c0       	push   0xc0022ee1
c00194f1:	e8 19 5d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c00194f6:	58                   	pop    eax
c00194f7:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c00194fd:	52                   	push   edx
c00194fe:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c0019505:	e8 61 fb ff ff       	call   c001906b <unblockTask(ThreadControlBlock*)>
c001950a:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c0019511:	e8 f9 5c ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019516:	83 c4 10             	add    esp,0x10
c0019519:	e8 2b f5 ff ff       	call   c0018a49 <unlockScheduler()>
c001951e:	e8 f2 f8 ff ff       	call   c0018e15 <unlockStuff()>
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	68 33 2f 02 c0       	push   0xc0022f33
c001952b:	e8 df 5c ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	e8 0f f5 ff ff       	call   c0018a47 <lockScheduler()>
c0019538:	e8 53 f8 ff ff       	call   c0018d90 <schedule()>
c001953d:	e8 07 f5 ff ff       	call   c0018a49 <unlockScheduler()>
c0019542:	eb ef                	jmp    c0019533 <terminateTask(int)+0xbf>
c0019544:	83 ec 0c             	sub    esp,0xc
c0019547:	68 15 2f 02 c0       	push   0xc0022f15
c001954c:	e8 be 5c ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019551:	83 c4 10             	add    esp,0x10
c0019554:	eb c3                	jmp    c0019519 <terminateTask(int)+0xa5>

c0019556 <Thr::terminateFromIRQ(int)>:
c0019556:	83 ec 18             	sub    esp,0x18
c0019559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001955d:	50                   	push   eax
c001955e:	e8 11 ff ff ff       	call   c0019474 <terminateTask(int)>
c0019563:	90                   	nop

c0019564 <Semaphore::release()>:
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001956b:	e8 fe f4 ff ff       	call   c0018a6e <lockStuff()>
c0019570:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019573:	85 c0                	test   eax,eax
c0019575:	74 1a                	je     c0019591 <Semaphore::release()+0x2d>
c0019577:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001957a:	83 ec 0c             	sub    esp,0xc
c001957d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019580:	50                   	push   eax
c0019581:	e8 e5 fa ff ff       	call   c001906b <unblockTask(ThreadControlBlock*)>
c0019586:	83 c4 10             	add    esp,0x10
c0019589:	83 c4 0c             	add    esp,0xc
c001958c:	e9 84 f8 ff ff       	jmp    c0018e15 <unlockStuff()>
c0019591:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019594:	48                   	dec    eax
c0019595:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019598:	83 c4 0c             	add    esp,0xc
c001959b:	e9 75 f8 ff ff       	jmp    c0018e15 <unlockStuff()>

c00195a0 <__static_initialization_and_destruction_0(int, int)>:
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195a8:	0f 85 88 00 00 00    	jne    c0019636 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195b6:	75 7e                	jne    c0019636 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	68 e8 5b 02 c0       	push   0xc0025be8
c00195c0:	e8 d3 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	83 ec 04             	sub    esp,0x4
c00195cb:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195d0:	68 e8 5b 02 c0       	push   0xc0025be8
c00195d5:	68 58 fe 01 c0       	push   0xc001fe58
c00195da:	e8 86 5a ff ff       	call   c000f065 <__cxa_atexit>
c00195df:	83 c4 10             	add    esp,0x10
c00195e2:	83 ec 0c             	sub    esp,0xc
c00195e5:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195ea:	e8 a9 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195ef:	83 c4 10             	add    esp,0x10
c00195f2:	83 ec 04             	sub    esp,0x4
c00195f5:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195fa:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195ff:	68 58 fe 01 c0       	push   0xc001fe58
c0019604:	e8 5c 5a ff ff       	call   c000f065 <__cxa_atexit>
c0019609:	83 c4 10             	add    esp,0x10
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019614:	e8 7f 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019619:	83 c4 10             	add    esp,0x10
c001961c:	83 ec 04             	sub    esp,0x4
c001961f:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019624:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019629:	68 58 fe 01 c0       	push   0xc001fe58
c001962e:	e8 32 5a ff ff       	call   c000f065 <__cxa_atexit>
c0019633:	83 c4 10             	add    esp,0x10
c0019636:	90                   	nop
c0019637:	83 c4 0c             	add    esp,0xc
c001963a:	c3                   	ret    

c001963b <_GLOBAL__sub_I_kernelProcess>:
c001963b:	83 ec 0c             	sub    esp,0xc
c001963e:	83 ec 08             	sub    esp,0x8
c0019641:	68 ff ff 00 00       	push   0xffff
c0019646:	6a 01                	push   0x1
c0019648:	e8 53 ff ff ff       	call   c00195a0 <__static_initialization_and_destruction_0(int, int)>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	83 c4 0c             	add    esp,0xc
c0019653:	c3                   	ret    

c0019654 <Vm::vm8086EntryPoint(void*)>:
c0019654:	83 ec 0c             	sub    esp,0xc
c0019657:	e8 ed f3 ff ff       	call   c0018a49 <unlockScheduler()>
c001965c:	fb                   	sti    
c001965d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019662:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019666:	52                   	push   edx
c0019667:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001966b:	52                   	push   edx
c001966c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019670:	52                   	push   edx
c0019671:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019675:	50                   	push   eax
c0019676:	e8 ec 6b fe ff       	call   c0000267 <goToVM86>
c001967b:	83 c4 1c             	add    esp,0x1c
c001967e:	c3                   	ret    

c001967f <Vm::inbv(unsigned short)>:
c001967f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019683:	ec                   	in     al,dx
c0019684:	c3                   	ret    

c0019685 <Vm::outbv(unsigned short, unsigned char)>:
c0019685:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001968d:	ee                   	out    dx,al
c001968e:	c3                   	ret    

c001968f <Vm::realToLinear(unsigned short, unsigned short)>:
c001968f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019694:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019699:	c1 e0 04             	shl    eax,0x4
c001969c:	01 d0                	add    eax,edx
c001969e:	c3                   	ret    

c001969f <Vm::getSegment(unsigned int)>:
c001969f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a3:	c1 e8 10             	shr    eax,0x10
c00196a6:	c3                   	ret    

c00196a7 <Vm::getOffset(unsigned int)>:
c00196a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196ab:	c3                   	ret    

c00196ac <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196ac:	55                   	push   ebp
c00196ad:	57                   	push   edi
c00196ae:	56                   	push   esi
c00196af:	53                   	push   ebx
c00196b0:	83 ec 2c             	sub    esp,0x2c
c00196b3:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196b7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196bf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196c3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196c7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196cb:	e8 77 f3 ff ff       	call   c0018a47 <lockScheduler()>
c00196d0:	68 80 00 00 00       	push   0x80
c00196d5:	6a 00                	push   0x0
c00196d7:	68 54 96 01 c0       	push   0xc0019654
c00196dc:	55                   	push   ebp
c00196dd:	e8 9a f4 ff ff       	call   c0018b7c <Process::createThread(void (*)(void*), void*, int)>
c00196e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196ea:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196ee:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196f2:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196f6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00196fa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019701:	e8 d4 59 ff ff       	call   c000f0da <operator new(unsigned long)>
c0019706:	83 c4 0c             	add    esp,0xc
c0019709:	55                   	push   ebp
c001970a:	89 c3                	mov    ebx,eax
c001970c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019710:	50                   	push   eax
c0019711:	e8 30 60 ff ff       	call   c000f746 <File::File(char const*, Process*)>
c0019716:	83 c4 0c             	add    esp,0xc
c0019719:	8d 44 24 17          	lea    eax,[esp+0x17]
c001971d:	50                   	push   eax
c001971e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019722:	50                   	push   eax
c0019723:	53                   	push   ebx
c0019724:	e8 2d 63 ff ff       	call   c000fa56 <File::stat(unsigned long long*, bool*)>
c0019729:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001972d:	83 c4 10             	add    esp,0x10
c0019730:	84 d2                	test   dl,dl
c0019732:	74 1c                	je     c0019750 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019734:	83 ec 0c             	sub    esp,0xc
c0019737:	68 f7 31 02 c0       	push   0xc00231f7
c001973c:	e8 fd c2 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0019741:	e8 03 f3 ff ff       	call   c0018a49 <unlockScheduler()>
c0019746:	83 c4 10             	add    esp,0x10
c0019749:	31 d2                	xor    edx,edx
c001974b:	e9 81 00 00 00       	jmp    c00197d1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019750:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019754:	51                   	push   ecx
c0019755:	51                   	push   ecx
c0019756:	6a 01                	push   0x1
c0019758:	53                   	push   ebx
c0019759:	e8 4c 60 ff ff       	call   c000f7aa <File::open(FileOpenMode)>
c001975e:	83 c4 10             	add    esp,0x10
c0019761:	85 c0                	test   eax,eax
c0019763:	74 1b                	je     c0019780 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019765:	83 ec 0c             	sub    esp,0xc
c0019768:	68 10 32 02 c0       	push   0xc0023210
c001976d:	e8 cc c2 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c0019772:	e8 d2 f2 ff ff       	call   c0018a49 <unlockScheduler()>
c0019777:	83 c4 10             	add    esp,0x10
c001977a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001977e:	eb 51                	jmp    c00197d1 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019780:	83 ec 0c             	sub    esp,0xc
c0019783:	0f b7 ff             	movzx  edi,di
c0019786:	6a 07                	push   0x7
c0019788:	68 00 01 00 00       	push   0x100
c001978d:	6a 00                	push   0x0
c001978f:	6a 00                	push   0x0
c0019791:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019797:	e8 16 54 ff ff       	call   c000ebb2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001979c:	83 c4 18             	add    esp,0x18
c001979f:	0f b7 f6             	movzx  esi,si
c00197a2:	57                   	push   edi
c00197a3:	56                   	push   esi
c00197a4:	e8 e6 fe ff ff       	call   c001968f <Vm::realToLinear(unsigned short, unsigned short)>
c00197a9:	5a                   	pop    edx
c00197aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197ac:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197b0:	51                   	push   ecx
c00197b1:	50                   	push   eax
c00197b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ba:	53                   	push   ebx
c00197bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197be:	83 c4 14             	add    esp,0x14
c00197c1:	53                   	push   ebx
c00197c2:	e8 41 60 ff ff       	call   c000f808 <File::close()>
c00197c7:	e8 7d f2 ff ff       	call   c0018a49 <unlockScheduler()>
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	b2 01                	mov    dl,0x1
c00197d1:	83 c4 2c             	add    esp,0x2c
c00197d4:	88 d0                	mov    al,dl
c00197d6:	5b                   	pop    ebx
c00197d7:	5e                   	pop    esi
c00197d8:	5f                   	pop    edi
c00197d9:	5d                   	pop    ebp
c00197da:	c3                   	ret    

c00197db <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197db:	57                   	push   edi
c00197dc:	56                   	push   esi
c00197dd:	53                   	push   ebx
c00197de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197e6:	83 e8 06             	sub    eax,0x6
c00197e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197ed:	0f b7 c0             	movzx  eax,ax
c00197f0:	50                   	push   eax
c00197f1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197f6:	50                   	push   eax
c00197f7:	e8 93 fe ff ff       	call   c001968f <Vm::realToLinear(unsigned short, unsigned short)>
c00197fc:	5a                   	pop    edx
c00197fd:	5e                   	pop    esi
c00197fe:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019801:	8d 56 fa             	lea    edx,[esi-0x6]
c0019804:	81 e2 ff ff 00 00    	and    edx,0xffff
c001980a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001980d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019810:	83 c2 02             	add    edx,0x2
c0019813:	66 89 10             	mov    WORD PTR [eax],dx
c0019816:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019819:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001981d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019820:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019824:	89 d6                	mov    esi,edx
c0019826:	66 81 e6 ff fd       	and    si,0xfdff
c001982b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019831:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019835:	74 07                	je     c001983e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019837:	89 d6                	mov    esi,edx
c0019839:	66 81 ce 00 02       	or     si,0x200
c001983e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019847:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001984b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019853:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019856:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001985e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019861:	5b                   	pop    ebx
c0019862:	5e                   	pop    esi
c0019863:	5f                   	pop    edi
c0019864:	c3                   	ret    

c0019865 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019865:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001986a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001986f:	c1 e0 04             	shl    eax,0x4
c0019872:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019875:	c3                   	ret    

c0019876 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019876:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001987b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019880:	c1 e0 04             	shl    eax,0x4
c0019883:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019887:	c3                   	ret    

c0019888 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019888:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001988d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019892:	c1 e0 04             	shl    eax,0x4
c0019895:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019898:	c3                   	ret    

c0019899 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019899:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001989e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a3:	c1 e0 04             	shl    eax,0x4
c00198a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198aa:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198ad:	c3                   	ret    

c00198ae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b8:	c1 e0 04             	shl    eax,0x4
c00198bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198bf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198c3:	c3                   	ret    

c00198c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198ce:	c1 e0 04             	shl    eax,0x4
c00198d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198d5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198d8:	c3                   	ret    

c00198d9 <Vm::faultHandler(regs*)>:
c00198d9:	55                   	push   ebp
c00198da:	57                   	push   edi
c00198db:	56                   	push   esi
c00198dc:	53                   	push   ebx
c00198dd:	83 ec 1c             	sub    esp,0x1c
c00198e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198e4:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198eb:	52                   	push   edx
c00198ec:	0f b7 f0             	movzx  esi,ax
c00198ef:	0f b7 c0             	movzx  eax,ax
c00198f2:	50                   	push   eax
c00198f3:	e8 97 fd ff ff       	call   c001968f <Vm::realToLinear(unsigned short, unsigned short)>
c00198f8:	5a                   	pop    edx
c00198f9:	89 c7                	mov    edi,eax
c00198fb:	59                   	pop    ecx
c00198fc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019903:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019906:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001990b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001990f:	0f b7 c5             	movzx  eax,bp
c0019912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019916:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001991a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001991e:	e8 6c fd ff ff       	call   c001968f <Vm::realToLinear(unsigned short, unsigned short)>
c0019923:	5a                   	pop    edx
c0019924:	59                   	pop    ecx
c0019925:	b1 06                	mov    cl,0x6
c0019927:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001992c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019931:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019934:	80 fa 9d             	cmp    dl,0x9d
c0019937:	0f 84 1d 02 00 00    	je     c0019b5a <Vm::faultHandler(regs*)+0x281>
c001993d:	0f 87 8e 00 00 00    	ja     c00199d1 <Vm::faultHandler(regs*)+0xf8>
c0019943:	80 fa 66             	cmp    dl,0x66
c0019946:	0f 84 89 01 00 00    	je     c0019ad5 <Vm::faultHandler(regs*)+0x1fc>
c001994c:	77 44                	ja     c0019992 <Vm::faultHandler(regs*)+0xb9>
c001994e:	80 fa 36             	cmp    dl,0x36
c0019951:	0f 84 74 01 00 00    	je     c0019acb <Vm::faultHandler(regs*)+0x1f2>
c0019957:	77 1a                	ja     c0019973 <Vm::faultHandler(regs*)+0x9a>
c0019959:	80 fa 26             	cmp    dl,0x26
c001995c:	0f 84 4b 01 00 00    	je     c0019aad <Vm::faultHandler(regs*)+0x1d4>
c0019962:	80 fa 2e             	cmp    dl,0x2e
c0019965:	0f 85 4a 05 00 00    	jne    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c001996b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001996e:	31 c9                	xor    ecx,ecx
c0019970:	47                   	inc    edi
c0019971:	eb be                	jmp    c0019931 <Vm::faultHandler(regs*)+0x58>
c0019973:	80 fa 64             	cmp    dl,0x64
c0019976:	0f 84 3b 01 00 00    	je     c0019ab7 <Vm::faultHandler(regs*)+0x1de>
c001997c:	0f 87 3f 01 00 00    	ja     c0019ac1 <Vm::faultHandler(regs*)+0x1e8>
c0019982:	80 fa 3e             	cmp    dl,0x3e
c0019985:	0f 85 2a 05 00 00    	jne    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c001998b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001998e:	b1 01                	mov    cl,0x1
c0019990:	eb de                	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019992:	80 fa 6d             	cmp    dl,0x6d
c0019995:	0f 84 bf 02 00 00    	je     c0019c5a <Vm::faultHandler(regs*)+0x381>
c001999b:	77 17                	ja     c00199b4 <Vm::faultHandler(regs*)+0xdb>
c001999d:	80 fa 67             	cmp    dl,0x67
c00199a0:	0f 84 3c 01 00 00    	je     c0019ae2 <Vm::faultHandler(regs*)+0x209>
c00199a6:	80 fa 6c             	cmp    dl,0x6c
c00199a9:	0f 84 5d 02 00 00    	je     c0019c0c <Vm::faultHandler(regs*)+0x333>
c00199af:	e9 01 05 00 00       	jmp    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c00199b4:	80 fa 6f             	cmp    dl,0x6f
c00199b7:	0f 84 8b 03 00 00    	je     c0019d48 <Vm::faultHandler(regs*)+0x46f>
c00199bd:	0f 82 0f 03 00 00    	jb     c0019cd2 <Vm::faultHandler(regs*)+0x3f9>
c00199c3:	80 fa 9c             	cmp    dl,0x9c
c00199c6:	0f 84 23 01 00 00    	je     c0019aef <Vm::faultHandler(regs*)+0x216>
c00199cc:	e9 e4 04 00 00       	jmp    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c00199d1:	80 fa ec             	cmp    dl,0xec
c00199d4:	0f 84 7f 04 00 00    	je     c0019e59 <Vm::faultHandler(regs*)+0x580>
c00199da:	77 7b                	ja     c0019a57 <Vm::faultHandler(regs*)+0x17e>
c00199dc:	80 fa e4             	cmp    dl,0xe4
c00199df:	0f 84 fe 03 00 00    	je     c0019de3 <Vm::faultHandler(regs*)+0x50a>
c00199e5:	77 53                	ja     c0019a3a <Vm::faultHandler(regs*)+0x161>
c00199e7:	80 fa cd             	cmp    dl,0xcd
c00199ea:	0f 84 cd 01 00 00    	je     c0019bbd <Vm::faultHandler(regs*)+0x2e4>
c00199f0:	80 fa cf             	cmp    dl,0xcf
c00199f3:	0f 85 bc 04 00 00    	jne    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c00199f9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00199fc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00199ff:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a03:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a06:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a0a:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a10:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a13:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a1d:	66 c1 e8 09          	shr    ax,0x9
c0019a21:	83 e0 01             	and    eax,0x1
c0019a24:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a27:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a2a:	83 c0 06             	add    eax,0x6
c0019a2d:	25 ff ff 00 00       	and    eax,0xffff
c0019a32:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a35:	e9 77 04 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5d8>
c0019a3a:	80 fa e6             	cmp    dl,0xe6
c0019a3d:	0f 84 ea 03 00 00    	je     c0019e2d <Vm::faultHandler(regs*)+0x554>
c0019a43:	0f 82 b6 03 00 00    	jb     c0019dff <Vm::faultHandler(regs*)+0x526>
c0019a49:	80 fa e7             	cmp    dl,0xe7
c0019a4c:	0f 84 f2 03 00 00    	je     c0019e44 <Vm::faultHandler(regs*)+0x56b>
c0019a52:	e9 5e 04 00 00       	jmp    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c0019a57:	80 fa ef             	cmp    dl,0xef
c0019a5a:	0f 84 3c 04 00 00    	je     c0019e9c <Vm::faultHandler(regs*)+0x5c3>
c0019a60:	77 28                	ja     c0019a8a <Vm::faultHandler(regs*)+0x1b1>
c0019a62:	80 fa ed             	cmp    dl,0xed
c0019a65:	0f 84 0a 04 00 00    	je     c0019e75 <Vm::faultHandler(regs*)+0x59c>
c0019a6b:	80 fa ee             	cmp    dl,0xee
c0019a6e:	0f 85 41 04 00 00    	jne    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c0019a74:	50                   	push   eax
c0019a75:	50                   	push   eax
c0019a76:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a7a:	50                   	push   eax
c0019a7b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a7f:	50                   	push   eax
c0019a80:	e8 00 fc ff ff       	call   c0019685 <Vm::outbv(unsigned short, unsigned char)>
c0019a85:	e9 0a 04 00 00       	jmp    c0019e94 <Vm::faultHandler(regs*)+0x5bb>
c0019a8a:	80 fa fa             	cmp    dl,0xfa
c0019a8d:	0f 84 5d 01 00 00    	je     c0019bf0 <Vm::faultHandler(regs*)+0x317>
c0019a93:	80 fa fb             	cmp    dl,0xfb
c0019a96:	0f 84 62 01 00 00    	je     c0019bfe <Vm::faultHandler(regs*)+0x325>
c0019a9c:	80 fa f3             	cmp    dl,0xf3
c0019a9f:	0f 85 10 04 00 00    	jne    c0019eb5 <Vm::faultHandler(regs*)+0x5dc>
c0019aa5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aa8:	e9 c3 fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019aad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab0:	b1 02                	mov    cl,0x2
c0019ab2:	e9 b9 fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019ab7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aba:	b1 03                	mov    cl,0x3
c0019abc:	e9 af fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019ac1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac4:	b1 04                	mov    cl,0x4
c0019ac6:	e9 a5 fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019acb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ace:	b1 05                	mov    cl,0x5
c0019ad0:	e9 9b fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019ad5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019add:	e9 8e fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019ae2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019aea:	e9 81 fe ff ff       	jmp    c0019970 <Vm::faultHandler(regs*)+0x97>
c0019aef:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019af2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019af6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019afb:	74 30                	je     c0019b2d <Vm::faultHandler(regs*)+0x254>
c0019afd:	83 e9 04             	sub    ecx,0x4
c0019b00:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b06:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b0c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b0f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b18:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b1c:	0f 84 8c 03 00 00    	je     c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019b22:	80 ce 02             	or     dh,0x2
c0019b25:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b28:	e9 81 03 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019b2d:	83 e9 02             	sub    ecx,0x2
c0019b30:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b36:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b39:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b3d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b43:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b47:	74 05                	je     c0019b4e <Vm::faultHandler(regs*)+0x275>
c0019b49:	80 ce 02             	or     dh,0x2
c0019b4c:	eb 03                	jmp    c0019b51 <Vm::faultHandler(regs*)+0x278>
c0019b4e:	80 e6 fd             	and    dh,0xfd
c0019b51:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b55:	e9 54 03 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019b5a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b5f:	74 2a                	je     c0019b8b <Vm::faultHandler(regs*)+0x2b2>
c0019b61:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b63:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b69:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b6f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b7a:	c1 e8 09             	shr    eax,0x9
c0019b7d:	83 e0 01             	and    eax,0x1
c0019b80:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b83:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b86:	83 c0 04             	add    eax,0x4
c0019b89:	eb 25                	jmp    c0019bb0 <Vm::faultHandler(regs*)+0x2d7>
c0019b8b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b8e:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b94:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019b9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ba0:	66 c1 e8 09          	shr    ax,0x9
c0019ba4:	83 e0 01             	and    eax,0x1
c0019ba7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019baa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019bad:	83 c0 02             	add    eax,0x2
c0019bb0:	25 ff ff 00 00       	and    eax,0xffff
c0019bb5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bb8:	e9 f1 02 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019bbd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bc1:	3c ff                	cmp    al,0xff
c0019bc3:	75 10                	jne    c0019bd5 <Vm::faultHandler(regs*)+0x2fc>
c0019bc5:	83 ec 0c             	sub    esp,0xc
c0019bc8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bcb:	e8 86 f9 ff ff       	call   c0019556 <Thr::terminateFromIRQ(int)>
c0019bd0:	e9 c2 02 00 00       	jmp    c0019e97 <Vm::faultHandler(regs*)+0x5be>
c0019bd5:	83 ec 0c             	sub    esp,0xc
c0019bd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019be0:	57                   	push   edi
c0019be1:	50                   	push   eax
c0019be2:	53                   	push   ebx
c0019be3:	e8 f3 fb ff ff       	call   c00197db <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019be8:	83 c4 20             	add    esp,0x20
c0019beb:	e9 c1 02 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5d8>
c0019bf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bf5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019bf9:	e9 b0 02 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019bfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c03:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c07:	e9 a2 02 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019c0c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c11:	74 0d                	je     c0019c20 <Vm::faultHandler(regs*)+0x347>
c0019c13:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c1a:	0f 87 e9 02 00 00    	ja     c0019f09 <Vm::faultHandler(regs*)+0x630>
c0019c20:	83 ec 0c             	sub    esp,0xc
c0019c23:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c26:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c2a:	50                   	push   eax
c0019c2b:	e8 4f fa ff ff       	call   c001967f <Vm::inbv(unsigned short)>
c0019c30:	83 c4 0c             	add    esp,0xc
c0019c33:	0f b6 c0             	movzx  eax,al
c0019c36:	50                   	push   eax
c0019c37:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c3b:	0f b7 c9             	movzx  ecx,cx
c0019c3e:	50                   	push   eax
c0019c3f:	51                   	push   ecx
c0019c40:	e8 54 fc ff ff       	call   c0019899 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c4b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c4f:	74 03                	je     c0019c54 <Vm::faultHandler(regs*)+0x37b>
c0019c51:	48                   	dec    eax
c0019c52:	eb 01                	jmp    c0019c55 <Vm::faultHandler(regs*)+0x37c>
c0019c54:	40                   	inc    eax
c0019c55:	0f b7 c0             	movzx  eax,ax
c0019c58:	eb 70                	jmp    c0019cca <Vm::faultHandler(regs*)+0x3f1>
c0019c5a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c60:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c65:	74 0c                	je     c0019c73 <Vm::faultHandler(regs*)+0x39a>
c0019c67:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c6d:	0f 87 96 02 00 00    	ja     c0019f09 <Vm::faultHandler(regs*)+0x630>
c0019c73:	0f b7 c9             	movzx  ecx,cx
c0019c76:	0f b7 f6             	movzx  esi,si
c0019c79:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c7c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c81:	74 20                	je     c0019ca3 <Vm::faultHandler(regs*)+0x3ca>
c0019c83:	ed                   	in     eax,dx
c0019c84:	55                   	push   ebp
c0019c85:	50                   	push   eax
c0019c86:	51                   	push   ecx
c0019c87:	56                   	push   esi
c0019c88:	e8 37 fc ff ff       	call   c00198c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c8d:	83 c4 10             	add    esp,0x10
c0019c90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c93:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c97:	74 05                	je     c0019c9e <Vm::faultHandler(regs*)+0x3c5>
c0019c99:	83 e8 04             	sub    eax,0x4
c0019c9c:	eb 27                	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x3ec>
c0019c9e:	83 c0 04             	add    eax,0x4
c0019ca1:	eb 22                	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x3ec>
c0019ca3:	66 ed                	in     ax,dx
c0019ca5:	0f b7 c0             	movzx  eax,ax
c0019ca8:	57                   	push   edi
c0019ca9:	50                   	push   eax
c0019caa:	51                   	push   ecx
c0019cab:	56                   	push   esi
c0019cac:	e8 fd fb ff ff       	call   c00198ae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cb1:	83 c4 10             	add    esp,0x10
c0019cb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cb7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cbb:	74 05                	je     c0019cc2 <Vm::faultHandler(regs*)+0x3e9>
c0019cbd:	83 e8 02             	sub    eax,0x2
c0019cc0:	eb 03                	jmp    c0019cc5 <Vm::faultHandler(regs*)+0x3ec>
c0019cc2:	83 c0 02             	add    eax,0x2
c0019cc5:	25 ff ff 00 00       	and    eax,0xffff
c0019cca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019ccd:	e9 dc 01 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019cd2:	49                   	dec    ecx
c0019cd3:	80 f9 05             	cmp    cl,0x5
c0019cd6:	77 24                	ja     c0019cfc <Vm::faultHandler(regs*)+0x423>
c0019cd8:	0f b6 c9             	movzx  ecx,cl
c0019cdb:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019ce2:	0f b7 f5             	movzx  esi,bp
c0019ce5:	eb 15                	jmp    c0019cfc <Vm::faultHandler(regs*)+0x423>
c0019ce7:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ceb:	eb 0f                	jmp    c0019cfc <Vm::faultHandler(regs*)+0x423>
c0019ced:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019cf1:	eb 09                	jmp    c0019cfc <Vm::faultHandler(regs*)+0x423>
c0019cf3:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019cf7:	eb 03                	jmp    c0019cfc <Vm::faultHandler(regs*)+0x423>
c0019cf9:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019cfc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019cff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d04:	74 0b                	je     c0019d11 <Vm::faultHandler(regs*)+0x438>
c0019d06:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d0b:	0f 87 f8 01 00 00    	ja     c0019f09 <Vm::faultHandler(regs*)+0x630>
c0019d11:	52                   	push   edx
c0019d12:	52                   	push   edx
c0019d13:	0f b7 c0             	movzx  eax,ax
c0019d16:	50                   	push   eax
c0019d17:	56                   	push   esi
c0019d18:	e8 48 fb ff ff       	call   c0019865 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d1d:	59                   	pop    ecx
c0019d1e:	5e                   	pop    esi
c0019d1f:	0f b6 c0             	movzx  eax,al
c0019d22:	50                   	push   eax
c0019d23:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d27:	50                   	push   eax
c0019d28:	e8 58 f9 ff ff       	call   c0019685 <Vm::outbv(unsigned short, unsigned char)>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d33:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d37:	74 03                	je     c0019d3c <Vm::faultHandler(regs*)+0x463>
c0019d39:	48                   	dec    eax
c0019d3a:	eb 01                	jmp    c0019d3d <Vm::faultHandler(regs*)+0x464>
c0019d3c:	40                   	inc    eax
c0019d3d:	0f b7 c0             	movzx  eax,ax
c0019d40:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d43:	e9 66 01 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019d48:	49                   	dec    ecx
c0019d49:	80 f9 05             	cmp    cl,0x5
c0019d4c:	77 1f                	ja     c0019d6d <Vm::faultHandler(regs*)+0x494>
c0019d4e:	0f b6 c9             	movzx  ecx,cl
c0019d51:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d58:	89 ee                	mov    esi,ebp
c0019d5a:	eb 11                	jmp    c0019d6d <Vm::faultHandler(regs*)+0x494>
c0019d5c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d5f:	eb 0c                	jmp    c0019d6d <Vm::faultHandler(regs*)+0x494>
c0019d61:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d64:	eb 07                	jmp    c0019d6d <Vm::faultHandler(regs*)+0x494>
c0019d66:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d69:	eb 02                	jmp    c0019d6d <Vm::faultHandler(regs*)+0x494>
c0019d6b:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d6d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d70:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d75:	74 0c                	je     c0019d83 <Vm::faultHandler(regs*)+0x4aa>
c0019d77:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d7d:	0f 87 86 01 00 00    	ja     c0019f09 <Vm::faultHandler(regs*)+0x630>
c0019d83:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d86:	0f b7 d6             	movzx  edx,si
c0019d89:	81 e7 00 04 00 00    	and    edi,0x400
c0019d8f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d92:	0f b7 c1             	movzx  eax,cx
c0019d95:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d9a:	74 1d                	je     c0019db9 <Vm::faultHandler(regs*)+0x4e0>
c0019d9c:	55                   	push   ebp
c0019d9d:	55                   	push   ebp
c0019d9e:	50                   	push   eax
c0019d9f:	52                   	push   edx
c0019da0:	e8 e3 fa ff ff       	call   c0019888 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	89 f2                	mov    edx,esi
c0019daa:	ef                   	out    dx,eax
c0019dab:	85 ff                	test   edi,edi
c0019dad:	74 05                	je     c0019db4 <Vm::faultHandler(regs*)+0x4db>
c0019daf:	83 e9 04             	sub    ecx,0x4
c0019db2:	eb 21                	jmp    c0019dd5 <Vm::faultHandler(regs*)+0x4fc>
c0019db4:	83 c1 04             	add    ecx,0x4
c0019db7:	eb 1c                	jmp    c0019dd5 <Vm::faultHandler(regs*)+0x4fc>
c0019db9:	55                   	push   ebp
c0019dba:	55                   	push   ebp
c0019dbb:	50                   	push   eax
c0019dbc:	52                   	push   edx
c0019dbd:	e8 b4 fa ff ff       	call   c0019876 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dc2:	83 c4 10             	add    esp,0x10
c0019dc5:	89 f2                	mov    edx,esi
c0019dc7:	66 ef                	out    dx,ax
c0019dc9:	85 ff                	test   edi,edi
c0019dcb:	74 05                	je     c0019dd2 <Vm::faultHandler(regs*)+0x4f9>
c0019dcd:	83 e9 02             	sub    ecx,0x2
c0019dd0:	eb 03                	jmp    c0019dd5 <Vm::faultHandler(regs*)+0x4fc>
c0019dd2:	83 c1 02             	add    ecx,0x2
c0019dd5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019ddb:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019dde:	e9 cb 00 00 00       	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019de3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019dea:	83 ec 0c             	sub    esp,0xc
c0019ded:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019df1:	50                   	push   eax
c0019df2:	e8 88 f8 ff ff       	call   c001967f <Vm::inbv(unsigned short)>
c0019df7:	0f b6 c0             	movzx  eax,al
c0019dfa:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019dfd:	eb 3f                	jmp    c0019e3e <Vm::faultHandler(regs*)+0x565>
c0019dff:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e04:	74 07                	je     c0019e0d <Vm::faultHandler(regs*)+0x534>
c0019e06:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e0a:	ed                   	in     eax,dx
c0019e0b:	eb 14                	jmp    c0019e21 <Vm::faultHandler(regs*)+0x548>
c0019e0d:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e10:	66 31 c9             	xor    cx,cx
c0019e13:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e16:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e1a:	66 ed                	in     ax,dx
c0019e1c:	0f b7 c0             	movzx  eax,ax
c0019e1f:	09 c8                	or     eax,ecx
c0019e21:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e28:	e9 84 00 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5d8>
c0019e2d:	52                   	push   edx
c0019e2e:	52                   	push   edx
c0019e2f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e33:	50                   	push   eax
c0019e34:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e38:	50                   	push   eax
c0019e39:	e8 47 f8 ff ff       	call   c0019685 <Vm::outbv(unsigned short, unsigned char)>
c0019e3e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e42:	eb 53                	jmp    c0019e97 <Vm::faultHandler(regs*)+0x5be>
c0019e44:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e47:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e4b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e50:	74 03                	je     c0019e55 <Vm::faultHandler(regs*)+0x57c>
c0019e52:	ef                   	out    dx,eax
c0019e53:	eb cf                	jmp    c0019e24 <Vm::faultHandler(regs*)+0x54b>
c0019e55:	66 ef                	out    dx,ax
c0019e57:	eb cb                	jmp    c0019e24 <Vm::faultHandler(regs*)+0x54b>
c0019e59:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e60:	83 ec 0c             	sub    esp,0xc
c0019e63:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e67:	50                   	push   eax
c0019e68:	e8 12 f8 ff ff       	call   c001967f <Vm::inbv(unsigned short)>
c0019e6d:	0f b6 c0             	movzx  eax,al
c0019e70:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e73:	eb 1f                	jmp    c0019e94 <Vm::faultHandler(regs*)+0x5bb>
c0019e75:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e78:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e7d:	74 03                	je     c0019e82 <Vm::faultHandler(regs*)+0x5a9>
c0019e7f:	ed                   	in     eax,dx
c0019e80:	eb 0d                	jmp    c0019e8f <Vm::faultHandler(regs*)+0x5b6>
c0019e82:	66 ed                	in     ax,dx
c0019e84:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e87:	66 31 d2             	xor    dx,dx
c0019e8a:	0f b7 c0             	movzx  eax,ax
c0019e8d:	09 d0                	or     eax,edx
c0019e8f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e92:	eb 1a                	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019e94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e97:	83 c4 10             	add    esp,0x10
c0019e9a:	eb 15                	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5d8>
c0019e9c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e9f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019ea2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ea7:	74 03                	je     c0019eac <Vm::faultHandler(regs*)+0x5d3>
c0019ea9:	ef                   	out    dx,eax
c0019eaa:	eb 02                	jmp    c0019eae <Vm::faultHandler(regs*)+0x5d5>
c0019eac:	66 ef                	out    dx,ax
c0019eae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eb1:	b0 01                	mov    al,0x1
c0019eb3:	eb 56                	jmp    c0019f0b <Vm::faultHandler(regs*)+0x632>
c0019eb5:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019eb9:	50                   	push   eax
c0019eba:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ebe:	50                   	push   eax
c0019ebf:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ec3:	50                   	push   eax
c0019ec4:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ec8:	50                   	push   eax
c0019ec9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ecd:	50                   	push   eax
c0019ece:	52                   	push   edx
c0019ecf:	52                   	push   edx
c0019ed0:	68 29 32 02 c0       	push   0xc0023229
c0019ed5:	e8 35 53 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c0019eda:	83 c4 20             	add    esp,0x20
c0019edd:	83 ec 0c             	sub    esp,0xc
c0019ee0:	6a 60                	push   0x60
c0019ee2:	e8 98 f7 ff ff       	call   c001967f <Vm::inbv(unsigned short)>
c0019ee7:	83 c4 10             	add    esp,0x10
c0019eea:	3c 1c                	cmp    al,0x1c
c0019eec:	74 04                	je     c0019ef2 <Vm::faultHandler(regs*)+0x619>
c0019eee:	3c 5a                	cmp    al,0x5a
c0019ef0:	75 eb                	jne    c0019edd <Vm::faultHandler(regs*)+0x604>
c0019ef2:	3c 1c                	cmp    al,0x1c
c0019ef4:	74 04                	je     c0019efa <Vm::faultHandler(regs*)+0x621>
c0019ef6:	3c 5a                	cmp    al,0x5a
c0019ef8:	75 0f                	jne    c0019f09 <Vm::faultHandler(regs*)+0x630>
c0019efa:	83 ec 0c             	sub    esp,0xc
c0019efd:	6a 60                	push   0x60
c0019eff:	e8 7b f7 ff ff       	call   c001967f <Vm::inbv(unsigned short)>
c0019f04:	83 c4 10             	add    esp,0x10
c0019f07:	eb e9                	jmp    c0019ef2 <Vm::faultHandler(regs*)+0x619>
c0019f09:	31 c0                	xor    eax,eax
c0019f0b:	83 c4 1c             	add    esp,0x1c
c0019f0e:	5b                   	pop    ebx
c0019f0f:	5e                   	pop    esi
c0019f10:	5f                   	pop    edi
c0019f11:	5d                   	pop    ebp
c0019f12:	c3                   	ret    
c0019f13:	90                   	nop

c0019f14 <FAT::getName()>:
c0019f14:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f19:	c3                   	ret    

c0019f1a <FAT::tell(void*, unsigned long long*)>:
c0019f1a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f1f:	75 06                	jne    c0019f27 <FAT::tell(void*, unsigned long long*)+0xd>
c0019f21:	b8 04 00 00 00       	mov    eax,0x4
c0019f26:	c3                   	ret    
c0019f27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f2c:	75 06                	jne    c0019f34 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f2e:	b8 04 00 00 00       	mov    eax,0x4
c0019f33:	c3                   	ret    
c0019f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f38:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f42:	89 01                	mov    DWORD PTR [ecx],eax
c0019f44:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f47:	b8 00 00 00 00       	mov    eax,0x0
c0019f4c:	c3                   	ret    
c0019f4d:	90                   	nop

c0019f4e <FAT::stat(void*, unsigned long long*)>:
c0019f4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f53:	75 06                	jne    c0019f5b <FAT::stat(void*, unsigned long long*)+0xd>
c0019f55:	b8 04 00 00 00       	mov    eax,0x4
c0019f5a:	c3                   	ret    
c0019f5b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f60:	75 06                	jne    c0019f68 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f62:	b8 04 00 00 00       	mov    eax,0x4
c0019f67:	c3                   	ret    
c0019f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f76:	89 01                	mov    DWORD PTR [ecx],eax
c0019f78:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f7b:	b8 00 00 00 00       	mov    eax,0x0
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <FAT::~FAT()>:
c0019f82:	83 ec 0c             	sub    esp,0xc
c0019f85:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8e:	89 10                	mov    DWORD PTR [eax],edx
c0019f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f94:	83 ec 0c             	sub    esp,0xc
c0019f97:	50                   	push   eax
c0019f98:	e8 a3 55 ff ff       	call   c000f540 <Filesystem::~Filesystem()>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	90                   	nop
c0019fa1:	83 c4 0c             	add    esp,0xc
c0019fa4:	c3                   	ret    
c0019fa5:	90                   	nop

c0019fa6 <FAT::~FAT()>:
c0019fa6:	83 ec 0c             	sub    esp,0xc
c0019fa9:	83 ec 0c             	sub    esp,0xc
c0019fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fb0:	e8 cd ff ff ff       	call   c0019f82 <FAT::~FAT()>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	83 ec 08             	sub    esp,0x8
c0019fbb:	6a 08                	push   0x8
c0019fbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc1:	e8 23 51 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0019fc6:	83 c4 10             	add    esp,0x10
c0019fc9:	83 c4 0c             	add    esp,0xc
c0019fcc:	c3                   	ret    
c0019fcd:	90                   	nop

c0019fce <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fce:	83 ec 1c             	sub    esp,0x1c
c0019fd1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fd8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fe1:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019fe8:	83 f8 ff             	cmp    eax,0xffffffff
c0019feb:	75 34                	jne    c001a021 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019fed:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ff1:	88 c2                	mov    dl,al
c0019ff3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c0019ff8:	01 d0                	add    eax,edx
c0019ffa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ffe:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a004:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a008:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a00f:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a014:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a018:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a01f:	eb 17                	jmp    c001a038 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a021:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a025:	88 c2                	mov    dl,al
c001a027:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a02b:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a032:	01 d0                	add    eax,edx
c001a034:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a038:	83 ec 04             	sub    esp,0x4
c001a03b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a03f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a043:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a047:	50                   	push   eax
c001a048:	e8 85 ca fe ff       	call   c0006ad2 <f_getlabel>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a054:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a059:	75 07                	jne    c001a062 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a05b:	b8 00 00 00 00       	mov    eax,0x0
c001a060:	eb 05                	jmp    c001a067 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a062:	b8 01 00 00 00       	mov    eax,0x1
c001a067:	83 c4 1c             	add    esp,0x1c
c001a06a:	c3                   	ret    
c001a06b:	90                   	nop

c001a06c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a06c:	57                   	push   edi
c001a06d:	83 ec 58             	sub    esp,0x58
c001a070:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a078:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a07c:	b8 00 00 00 00       	mov    eax,0x0
c001a081:	b9 0f 00 00 00       	mov    ecx,0xf
c001a086:	fc                   	cld    
c001a087:	89 d7                	mov    edi,edx
c001a089:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a08b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a08f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a096:	83 f8 ff             	cmp    eax,0xffffffff
c001a099:	75 34                	jne    c001a0cf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a09b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a09f:	88 c2                	mov    dl,al
c001a0a1:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0a6:	01 d0                	add    eax,edx
c001a0a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0ac:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0b6:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0bd:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0c2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0c6:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0cd:	eb 17                	jmp    c001a0e6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0d3:	88 c2                	mov    dl,al
c001a0d5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0d9:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0e0:	01 d0                	add    eax,edx
c001a0e2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0e6:	83 ec 08             	sub    esp,0x8
c001a0e9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f1:	50                   	push   eax
c001a0f2:	e8 1e 67 fe ff       	call   c0000815 <strcat>
c001a0f7:	83 c4 10             	add    esp,0x10
c001a0fa:	83 ec 0c             	sub    esp,0xc
c001a0fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a101:	50                   	push   eax
c001a102:	e8 bf cb fe ff       	call   c0006cc6 <f_setlabel>
c001a107:	83 c4 10             	add    esp,0x10
c001a10a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a10e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a113:	75 07                	jne    c001a11c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a115:	b8 00 00 00 00       	mov    eax,0x0
c001a11a:	eb 05                	jmp    c001a121 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a11c:	b8 01 00 00 00       	mov    eax,0x1
c001a121:	83 c4 58             	add    esp,0x58
c001a124:	5f                   	pop    edi
c001a125:	c3                   	ret    

c001a126 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a126:	83 ec 2c             	sub    esp,0x2c
c001a129:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a131:	83 ec 08             	sub    esp,0x8
c001a134:	68 ac 32 02 c0       	push   0xc00232ac
c001a139:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a13d:	e8 6d 66 fe ff       	call   c00007af <strcmp>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	85 c0                	test   eax,eax
c001a147:	0f 94 c0             	sete   al
c001a14a:	84 c0                	test   al,al
c001a14c:	74 0d                	je     c001a15b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a14e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a156:	e9 a6 00 00 00       	jmp    c001a201 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a15b:	83 ec 08             	sub    esp,0x8
c001a15e:	68 9e 32 02 c0       	push   0xc002329e
c001a163:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a167:	e8 43 66 fe ff       	call   c00007af <strcmp>
c001a16c:	83 c4 10             	add    esp,0x10
c001a16f:	85 c0                	test   eax,eax
c001a171:	0f 94 c0             	sete   al
c001a174:	84 c0                	test   al,al
c001a176:	74 0a                	je     c001a182 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a178:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a180:	eb 7f                	jmp    c001a201 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a182:	83 ec 08             	sub    esp,0x8
c001a185:	68 a4 32 02 c0       	push   0xc00232a4
c001a18a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a18e:	e8 1c 66 fe ff       	call   c00007af <strcmp>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	85 c0                	test   eax,eax
c001a198:	0f 94 c0             	sete   al
c001a19b:	84 c0                	test   al,al
c001a19d:	74 0a                	je     c001a1a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a19f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1a7:	eb 58                	jmp    c001a201 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1a9:	83 ec 08             	sub    esp,0x8
c001a1ac:	68 6c 05 02 c0       	push   0xc002056c
c001a1b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1b5:	e8 f5 65 fe ff       	call   c00007af <strcmp>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	85 c0                	test   eax,eax
c001a1bf:	0f 94 c0             	sete   al
c001a1c2:	84 c0                	test   al,al
c001a1c4:	74 0a                	je     c001a1d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1c6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1ce:	eb 31                	jmp    c001a201 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1d0:	83 ec 08             	sub    esp,0x8
c001a1d3:	68 aa 32 02 c0       	push   0xc00232aa
c001a1d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1dc:	e8 ce 65 fe ff       	call   c00007af <strcmp>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	85 c0                	test   eax,eax
c001a1e6:	0f 94 c0             	sete   al
c001a1e9:	84 c0                	test   al,al
c001a1eb:	74 0a                	je     c001a1f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1ed:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1f5:	eb 0a                	jmp    c001a201 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1f7:	b8 08 00 00 00       	mov    eax,0x8
c001a1fc:	e9 04 01 00 00       	jmp    c001a305 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a201:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a208:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a20d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a211:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a218:	83 f8 ff             	cmp    eax,0xffffffff
c001a21b:	75 34                	jne    c001a251 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a21d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a221:	88 c2                	mov    dl,al
c001a223:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a228:	01 d0                	add    eax,edx
c001a22a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a22e:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a234:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a238:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a23f:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a244:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a248:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a24f:	eb 17                	jmp    c001a268 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a251:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a255:	88 c2                	mov    dl,al
c001a257:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a25b:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a262:	01 d0                	add    eax,edx
c001a264:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a26c:	88 04 24             	mov    BYTE PTR [esp],al
c001a26f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a277:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a27f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a284:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	68 00 20 00 00       	push   0x2000
c001a294:	e8 44 1d ff ff       	call   c000bfdd <malloc>
c001a299:	83 c4 10             	add    esp,0x10
c001a29c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2a0:	68 00 20 00 00       	push   0x2000
c001a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2ad:	50                   	push   eax
c001a2ae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2b2:	50                   	push   eax
c001a2b3:	e8 59 ce fe ff       	call   c0007111 <f_mkfs>
c001a2b8:	83 c4 10             	add    esp,0x10
c001a2bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2c4:	75 07                	jne    c001a2cd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2c6:	b8 00 00 00 00       	mov    eax,0x0
c001a2cb:	eb 38                	jmp    c001a305 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2cd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2d2:	75 17                	jne    c001a2eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2d4:	83 ec 0c             	sub    esp,0xc
c001a2d7:	68 dc 32 02 c0       	push   0xc00232dc
c001a2dc:	e8 2e 4f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	b8 09 00 00 00       	mov    eax,0x9
c001a2e9:	eb 1a                	jmp    c001a305 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2ef:	83 ec 08             	sub    esp,0x8
c001a2f2:	50                   	push   eax
c001a2f3:	68 b0 32 02 c0       	push   0xc00232b0
c001a2f8:	e8 12 4f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	b8 01 00 00 00       	mov    eax,0x1
c001a305:	83 c4 2c             	add    esp,0x2c
c001a308:	c3                   	ret    
c001a309:	90                   	nop

c001a30a <FAT::tryMount(LogicalDisk*, int)>:
c001a30a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a310:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a315:	83 f8 14             	cmp    eax,0x14
c001a318:	75 17                	jne    c001a331 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a31a:	83 ec 0c             	sub    esp,0xc
c001a31d:	68 c2 32 02 c0       	push   0xc00232c2
c001a322:	e8 17 b7 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	b0 00                	mov    al,0x0
c001a32c:	e9 d7 01 00 00       	jmp    c001a508 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a331:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a338:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a33e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a344:	3d 00 02 00 00       	cmp    eax,0x200
c001a349:	74 07                	je     c001a352 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a34b:	b0 00                	mov    al,0x0
c001a34d:	e9 b6 01 00 00       	jmp    c001a508 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a352:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a35a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a361:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a368:	83 f8 ff             	cmp    eax,0xffffffff
c001a36b:	74 07                	je     c001a374 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a36d:	b0 01                	mov    al,0x1
c001a36f:	e9 94 01 00 00       	jmp    c001a508 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a374:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a37e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a386:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a38d:	88 c2                	mov    dl,al
c001a38f:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a394:	01 d0                	add    eax,edx
c001a396:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a39d:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3a3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3aa:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3b1:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3b6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3bd:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3c4:	83 ec 0c             	sub    esp,0xc
c001a3c7:	68 54 02 00 00       	push   0x254
c001a3cc:	e8 0c 1c ff ff       	call   c000bfdd <malloc>
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3db:	83 ec 04             	sub    esp,0x4
c001a3de:	6a 00                	push   0x0
c001a3e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3e7:	50                   	push   eax
c001a3e8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3ef:	e8 0c a9 fe ff       	call   c0004d00 <f_mount>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3fe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a406:	74 19                	je     c001a421 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a412:	e8 e6 1b ff ff       	call   c000bffd <rfree>
c001a417:	83 c4 10             	add    esp,0x10
c001a41a:	b0 00                	mov    al,0x0
c001a41c:	e9 e7 00 00 00       	jmp    c001a508 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a421:	83 ec 04             	sub    esp,0x4
c001a424:	68 00 01 00 00       	push   0x100
c001a429:	6a 00                	push   0x0
c001a42b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a432:	50                   	push   eax
c001a433:	e8 87 62 fe ff       	call   c00006bf <memset>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	83 ec 08             	sub    esp,0x8
c001a43e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a445:	50                   	push   eax
c001a446:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a44d:	50                   	push   eax
c001a44e:	e8 c2 63 fe ff       	call   c0000815 <strcat>
c001a453:	83 c4 10             	add    esp,0x10
c001a456:	83 ec 08             	sub    esp,0x8
c001a459:	68 d0 32 02 c0       	push   0xc00232d0
c001a45e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a465:	50                   	push   eax
c001a466:	e8 aa 63 fe ff       	call   c0000815 <strcat>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	83 ec 04             	sub    esp,0x4
c001a471:	6a 01                	push   0x1
c001a473:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a47a:	50                   	push   eax
c001a47b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a47f:	50                   	push   eax
c001a480:	e8 dd a8 fe ff       	call   c0004d62 <f_open>
c001a485:	83 c4 10             	add    esp,0x10
c001a488:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a48f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a496:	85 c0                	test   eax,eax
c001a498:	74 0a                	je     c001a4a4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a49a:	78 2d                	js     c001a4c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a49c:	83 e8 04             	sub    eax,0x4
c001a49f:	83 f8 01             	cmp    eax,0x1
c001a4a2:	77 25                	ja     c001a4c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4a4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4b3:	50                   	push   eax
c001a4b4:	e8 fb b3 fe ff       	call   c00058b4 <f_close>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	90                   	nop
c001a4bd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4c5:	74 3a                	je     c001a501 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4c7:	eb 2d                	jmp    c001a4f6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4c9:	83 ec 0c             	sub    esp,0xc
c001a4cc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4d3:	e8 25 1b ff ff       	call   c000bffd <rfree>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	83 ec 04             	sub    esp,0x4
c001a4de:	6a 00                	push   0x0
c001a4e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4e7:	50                   	push   eax
c001a4e8:	6a 00                	push   0x0
c001a4ea:	e8 11 a8 fe ff       	call   c0004d00 <f_mount>
c001a4ef:	83 c4 10             	add    esp,0x10
c001a4f2:	b0 00                	mov    al,0x0
c001a4f4:	eb 12                	jmp    c001a508 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4f6:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a4fb:	40                   	inc    eax
c001a4fc:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a501:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a508:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a50e:	c3                   	ret    
c001a50f:	90                   	nop

c001a510 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a510:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a516:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a51e:	74 0a                	je     c001a52a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a520:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a528:	75 0a                	jne    c001a534 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a52a:	b8 04 00 00 00       	mov    eax,0x4
c001a52f:	e9 dd 00 00 00       	jmp    c001a611 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a534:	83 ec 08             	sub    esp,0x8
c001a537:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a53e:	50                   	push   eax
c001a53f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a546:	e8 21 b9 fe ff       	call   c0005e6c <f_readdir>
c001a54b:	83 c4 10             	add    esp,0x10
c001a54e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a555:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a55b:	83 ec 0c             	sub    esp,0xc
c001a55e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a565:	83 c0 1a             	add    eax,0x1a
c001a568:	50                   	push   eax
c001a569:	e8 6e 61 fe ff       	call   c00006dc <strlen>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	ba 00 00 00 00       	mov    edx,0x0
c001a576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a57a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a57e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a585:	25 ff 00 00 00       	and    eax,0xff
c001a58a:	83 e0 10             	and    eax,0x10
c001a58d:	74 07                	je     c001a596 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a58f:	b8 02 00 00 00       	mov    eax,0x2
c001a594:	eb 05                	jmp    c001a59b <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a596:	b8 01 00 00 00       	mov    eax,0x1
c001a59b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a59f:	83 ec 08             	sub    esp,0x8
c001a5a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5a9:	83 c0 1a             	add    eax,0x1a
c001a5ac:	50                   	push   eax
c001a5ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5b1:	83 c0 10             	add    eax,0x10
c001a5b4:	50                   	push   eax
c001a5b5:	e8 a4 61 fe ff       	call   c000075e <strcpy>
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	83 ec 04             	sub    esp,0x4
c001a5c0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5cb:	50                   	push   eax
c001a5cc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5d3:	e8 b1 60 fe ff       	call   c0000689 <memcpy>
c001a5d8:	83 c4 10             	add    esp,0x10
c001a5db:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5e2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5e8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5ef:	84 c0                	test   al,al
c001a5f1:	75 07                	jne    c001a5fa <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5f3:	b8 07 00 00 00       	mov    eax,0x7
c001a5f8:	eb 17                	jmp    c001a611 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5fa:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a601:	85 c0                	test   eax,eax
c001a603:	75 07                	jne    c001a60c <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a605:	b8 00 00 00 00       	mov    eax,0x0
c001a60a:	eb 05                	jmp    c001a611 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a60c:	b8 01 00 00 00       	mov    eax,0x1
c001a611:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a617:	c3                   	ret    

c001a618 <FAT::read(void*, unsigned long, void*, int*)>:
c001a618:	83 ec 1c             	sub    esp,0x1c
c001a61b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a620:	74 07                	je     c001a629 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a622:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a627:	75 07                	jne    c001a630 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a629:	b8 04 00 00 00       	mov    eax,0x4
c001a62e:	eb 3d                	jmp    c001a66d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a630:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a634:	50                   	push   eax
c001a635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a639:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a63d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a641:	e8 58 ab fe ff       	call   c000519e <f_read>
c001a646:	83 c4 10             	add    esp,0x10
c001a649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a64d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a651:	89 c2                	mov    edx,eax
c001a653:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a657:	89 10                	mov    DWORD PTR [eax],edx
c001a659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a65d:	85 c0                	test   eax,eax
c001a65f:	75 07                	jne    c001a668 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a661:	b8 00 00 00 00       	mov    eax,0x0
c001a666:	eb 05                	jmp    c001a66d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a668:	b8 01 00 00 00       	mov    eax,0x1
c001a66d:	83 c4 1c             	add    esp,0x1c
c001a670:	c3                   	ret    
c001a671:	90                   	nop

c001a672 <FAT::write(void*, unsigned long, void*, int*)>:
c001a672:	83 ec 1c             	sub    esp,0x1c
c001a675:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a67a:	74 07                	je     c001a683 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a67c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a681:	75 07                	jne    c001a68a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a683:	b8 04 00 00 00       	mov    eax,0x4
c001a688:	eb 3d                	jmp    c001a6c7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a68a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a68e:	50                   	push   eax
c001a68f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a697:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a69b:	e8 7e ad fe ff       	call   c000541e <f_write>
c001a6a0:	83 c4 10             	add    esp,0x10
c001a6a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ab:	89 c2                	mov    edx,eax
c001a6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b1:	89 10                	mov    DWORD PTR [eax],edx
c001a6b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	75 07                	jne    c001a6c2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6bb:	b8 00 00 00 00       	mov    eax,0x0
c001a6c0:	eb 05                	jmp    c001a6c7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6c2:	b8 01 00 00 00       	mov    eax,0x1
c001a6c7:	83 c4 1c             	add    esp,0x1c
c001a6ca:	c3                   	ret    
c001a6cb:	90                   	nop

c001a6cc <FAT::close(void*)>:
c001a6cc:	83 ec 1c             	sub    esp,0x1c
c001a6cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6d4:	75 07                	jne    c001a6dd <FAT::close(void*)+0x11>
c001a6d6:	b8 04 00 00 00       	mov    eax,0x4
c001a6db:	eb 36                	jmp    c001a713 <FAT::close(void*)+0x47>
c001a6dd:	83 ec 0c             	sub    esp,0xc
c001a6e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6e4:	e8 cb b1 fe ff       	call   c00058b4 <f_close>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6f0:	83 ec 0c             	sub    esp,0xc
c001a6f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f7:	e8 f1 18 ff ff       	call   c000bfed <free>
c001a6fc:	83 c4 10             	add    esp,0x10
c001a6ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a703:	85 c0                	test   eax,eax
c001a705:	75 07                	jne    c001a70e <FAT::close(void*)+0x42>
c001a707:	b8 00 00 00 00       	mov    eax,0x0
c001a70c:	eb 05                	jmp    c001a713 <FAT::close(void*)+0x47>
c001a70e:	b8 01 00 00 00       	mov    eax,0x1
c001a713:	83 c4 1c             	add    esp,0x1c
c001a716:	c3                   	ret    
c001a717:	90                   	nop

c001a718 <FAT::closeDir(void*)>:
c001a718:	83 ec 1c             	sub    esp,0x1c
c001a71b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a720:	75 07                	jne    c001a729 <FAT::closeDir(void*)+0x11>
c001a722:	b8 04 00 00 00       	mov    eax,0x4
c001a727:	eb 36                	jmp    c001a75f <FAT::closeDir(void*)+0x47>
c001a729:	83 ec 0c             	sub    esp,0xc
c001a72c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a730:	e8 15 b7 fe ff       	call   c0005e4a <f_closedir>
c001a735:	83 c4 10             	add    esp,0x10
c001a738:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a743:	e8 a5 18 ff ff       	call   c000bfed <free>
c001a748:	83 c4 10             	add    esp,0x10
c001a74b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a74f:	85 c0                	test   eax,eax
c001a751:	75 07                	jne    c001a75a <FAT::closeDir(void*)+0x42>
c001a753:	b8 00 00 00 00       	mov    eax,0x0
c001a758:	eb 05                	jmp    c001a75f <FAT::closeDir(void*)+0x47>
c001a75a:	b8 01 00 00 00       	mov    eax,0x1
c001a75f:	83 c4 1c             	add    esp,0x1c
c001a762:	c3                   	ret    
c001a763:	90                   	nop

c001a764 <FAT::seek(void*, unsigned long long)>:
c001a764:	83 ec 2c             	sub    esp,0x2c
c001a767:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a76f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a777:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a77c:	75 07                	jne    c001a785 <FAT::seek(void*, unsigned long long)+0x21>
c001a77e:	b8 04 00 00 00       	mov    eax,0x4
c001a783:	eb 2f                	jmp    c001a7b4 <FAT::seek(void*, unsigned long long)+0x50>
c001a785:	83 ec 04             	sub    esp,0x4
c001a788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a78c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a790:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a794:	e8 4a b1 fe ff       	call   c00058e3 <f_lseek>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7a4:	85 c0                	test   eax,eax
c001a7a6:	75 07                	jne    c001a7af <FAT::seek(void*, unsigned long long)+0x4b>
c001a7a8:	b8 00 00 00 00       	mov    eax,0x0
c001a7ad:	eb 05                	jmp    c001a7b4 <FAT::seek(void*, unsigned long long)+0x50>
c001a7af:	b8 01 00 00 00       	mov    eax,0x1
c001a7b4:	83 c4 2c             	add    esp,0x2c
c001a7b7:	c3                   	ret    

c001a7b8 <fatWrapperReadDisk>:
c001a7b8:	83 ec 1c             	sub    esp,0x1c
c001a7bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7d2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7d6:	25 ff 00 00 00       	and    eax,0xff
c001a7db:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7ed:	52                   	push   edx
c001a7ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f6:	50                   	push   eax
c001a7f7:	e8 6e 80 ff ff       	call   c001286a <LogicalDisk::read(unsigned long long, int, void*)>
c001a7fc:	83 c4 20             	add    esp,0x20
c001a7ff:	83 c4 1c             	add    esp,0x1c
c001a802:	c3                   	ret    

c001a803 <fatWrapperWriteDisk>:
c001a803:	83 ec 1c             	sub    esp,0x1c
c001a806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a80e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a812:	89 04 24             	mov    DWORD PTR [esp],eax
c001a815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a81d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a821:	25 ff 00 00 00       	and    eax,0xff
c001a826:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a82d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a831:	83 ec 0c             	sub    esp,0xc
c001a834:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a838:	52                   	push   edx
c001a839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a83d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a841:	50                   	push   eax
c001a842:	e8 8f 80 ff ff       	call   c00128d6 <LogicalDisk::write(unsigned long long, int, void*)>
c001a847:	83 c4 20             	add    esp,0x20
c001a84a:	83 c4 1c             	add    esp,0x1c
c001a84d:	c3                   	ret    

c001a84e <fatWrapperIoctl>:
c001a84e:	53                   	push   ebx
c001a84f:	83 ec 28             	sub    esp,0x28
c001a852:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a856:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a85a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a85e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a862:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a867:	75 35                	jne    c001a89e <fatWrapperIoctl+0x50>
c001a869:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a86d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a871:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a875:	25 ff 00 00 00       	and    eax,0xff
c001a87a:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a881:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a887:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a88d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a891:	66 89 02             	mov    WORD PTR [edx],ax
c001a894:	b8 00 00 00 00       	mov    eax,0x0
c001a899:	e9 bb 00 00 00       	jmp    c001a959 <fatWrapperIoctl+0x10b>
c001a89e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8a3:	75 73                	jne    c001a918 <fatWrapperIoctl+0xca>
c001a8a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8ad:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8b1:	25 ff 00 00 00       	and    eax,0xff
c001a8b6:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8c3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8c9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8cf:	89 c8                	mov    eax,ecx
c001a8d1:	89 da                	mov    edx,ebx
c001a8d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8d7:	c1 e0 0a             	shl    eax,0xa
c001a8da:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8de:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8e4:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8eb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8f1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8f7:	89 cb                	mov    ebx,ecx
c001a8f9:	c1 fb 1f             	sar    ebx,0x1f
c001a8fc:	53                   	push   ebx
c001a8fd:	51                   	push   ecx
c001a8fe:	52                   	push   edx
c001a8ff:	50                   	push   eax
c001a900:	e8 07 4c 00 00       	call   c001f50c <__udivdi3>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a90c:	89 01                	mov    DWORD PTR [ecx],eax
c001a90e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a911:	b8 00 00 00 00       	mov    eax,0x0
c001a916:	eb 41                	jmp    c001a959 <fatWrapperIoctl+0x10b>
c001a918:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a91d:	75 07                	jne    c001a926 <fatWrapperIoctl+0xd8>
c001a91f:	b8 00 00 00 00       	mov    eax,0x0
c001a924:	eb 33                	jmp    c001a959 <fatWrapperIoctl+0x10b>
c001a926:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a92b:	75 19                	jne    c001a946 <fatWrapperIoctl+0xf8>
c001a92d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a931:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a939:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a93f:	b8 00 00 00 00       	mov    eax,0x0
c001a944:	eb 13                	jmp    c001a959 <fatWrapperIoctl+0x10b>
c001a946:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a94b:	75 07                	jne    c001a954 <fatWrapperIoctl+0x106>
c001a94d:	b8 00 00 00 00       	mov    eax,0x0
c001a952:	eb 05                	jmp    c001a959 <fatWrapperIoctl+0x10b>
c001a954:	b8 04 00 00 00       	mov    eax,0x4
c001a959:	83 c4 28             	add    esp,0x28
c001a95c:	5b                   	pop    ebx
c001a95d:	c3                   	ret    

c001a95e <FAT::FAT()>:
c001a95e:	83 ec 1c             	sub    esp,0x1c
c001a961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a965:	83 ec 0c             	sub    esp,0xc
c001a968:	50                   	push   eax
c001a969:	e8 ae 4b ff ff       	call   c000f51c <Filesystem::Filesystem()>
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a97a:	89 10                	mov    DWORD PTR [eax],edx
c001a97c:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a986:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a98e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a993:	7f 15                	jg     c001a9aa <FAT::FAT()+0x4c>
c001a995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a999:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9a8:	eb e4                	jmp    c001a98e <FAT::FAT()+0x30>
c001a9aa:	90                   	nop
c001a9ab:	83 c4 1c             	add    esp,0x1c
c001a9ae:	c3                   	ret    
c001a9af:	90                   	nop

c001a9b0 <FAT::fixFilepath(char*)>:
c001a9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a9b6:	3c 40                	cmp    al,0x40
c001a9b8:	7e 2c                	jle    c001a9e6 <FAT::fixFilepath(char*)+0x36>
c001a9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9be:	8a 00                	mov    al,BYTE PTR [eax]
c001a9c0:	83 e8 41             	sub    eax,0x41
c001a9c3:	88 c2                	mov    dl,al
c001a9c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c9:	88 10                	mov    BYTE PTR [eax],dl
c001a9cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cf:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d1:	0f be c0             	movsx  eax,al
c001a9d4:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9db:	83 c0 30             	add    eax,0x30
c001a9de:	88 c2                	mov    dl,al
c001a9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e4:	88 10                	mov    BYTE PTR [eax],dl
c001a9e6:	90                   	nop
c001a9e7:	c3                   	ret    

c001a9e8 <FAT::open(char const*, void**, FileOpenMode)>:
c001a9e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9f6:	74 0a                	je     c001aa02 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa00:	75 0a                	jne    c001aa0c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa02:	b8 04 00 00 00       	mov    eax,0x4
c001aa07:	e9 00 01 00 00       	jmp    c001ab0c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa0c:	83 ec 08             	sub    esp,0x8
c001aa0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa16:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa1a:	50                   	push   eax
c001aa1b:	e8 3e 5d fe ff       	call   c000075e <strcpy>
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	83 ec 08             	sub    esp,0x8
c001aa26:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa2a:	50                   	push   eax
c001aa2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa32:	e8 79 ff ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001aa37:	83 c4 10             	add    esp,0x10
c001aa3a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa42:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa49:	83 e0 01             	and    eax,0x1
c001aa4c:	74 08                	je     c001aa56 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa4e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa56:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa5d:	83 e0 04             	and    eax,0x4
c001aa60:	74 10                	je     c001aa72 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa62:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa6a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa72:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa79:	83 e0 02             	and    eax,0x2
c001aa7c:	74 08                	je     c001aa86 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa7e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa8d:	83 e0 08             	and    eax,0x8
c001aa90:	74 08                	je     c001aa9a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa92:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aa9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaa1:	83 e0 10             	and    eax,0x10
c001aaa4:	74 08                	je     c001aaae <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaa6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aaae:	83 ec 0c             	sub    esp,0xc
c001aab1:	68 50 02 00 00       	push   0x250
c001aab6:	e8 22 15 ff ff       	call   c000bfdd <malloc>
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	89 c2                	mov    edx,eax
c001aac0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aac7:	89 10                	mov    DWORD PTR [eax],edx
c001aac9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aad0:	31 d2                	xor    edx,edx
c001aad2:	88 c2                	mov    dl,al
c001aad4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aadb:	8b 00                	mov    eax,DWORD PTR [eax]
c001aadd:	83 ec 04             	sub    esp,0x4
c001aae0:	52                   	push   edx
c001aae1:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aae5:	52                   	push   edx
c001aae6:	50                   	push   eax
c001aae7:	e8 76 a2 fe ff       	call   c0004d62 <f_open>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aaf6:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aafe:	74 07                	je     c001ab07 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab00:	b8 01 00 00 00       	mov    eax,0x1
c001ab05:	eb 05                	jmp    c001ab0c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab07:	b8 00 00 00 00       	mov    eax,0x0
c001ab0c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab12:	c3                   	ret    
c001ab13:	90                   	nop

c001ab14 <FAT::openDir(char const*, void**)>:
c001ab14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab22:	74 0a                	je     c001ab2e <FAT::openDir(char const*, void**)+0x1a>
c001ab24:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab2c:	75 07                	jne    c001ab35 <FAT::openDir(char const*, void**)+0x21>
c001ab2e:	b8 04 00 00 00       	mov    eax,0x4
c001ab33:	eb 7d                	jmp    c001abb2 <FAT::openDir(char const*, void**)+0x9e>
c001ab35:	83 ec 08             	sub    esp,0x8
c001ab38:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab43:	50                   	push   eax
c001ab44:	e8 15 5c fe ff       	call   c000075e <strcpy>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	83 ec 08             	sub    esp,0x8
c001ab4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab53:	50                   	push   eax
c001ab54:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab5b:	e8 50 fe ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	83 ec 0c             	sub    esp,0xc
c001ab66:	6a 4c                	push   0x4c
c001ab68:	e8 70 14 ff ff       	call   c000bfdd <malloc>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	89 c2                	mov    edx,eax
c001ab72:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab79:	89 10                	mov    DWORD PTR [eax],edx
c001ab7b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab82:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab84:	83 ec 08             	sub    esp,0x8
c001ab87:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab8b:	52                   	push   edx
c001ab8c:	50                   	push   eax
c001ab8d:	e8 b6 b1 fe ff       	call   c0005d48 <f_opendir>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab9c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aba4:	74 07                	je     c001abad <FAT::openDir(char const*, void**)+0x99>
c001aba6:	b8 01 00 00 00       	mov    eax,0x1
c001abab:	eb 05                	jmp    c001abb2 <FAT::openDir(char const*, void**)+0x9e>
c001abad:	b8 00 00 00 00       	mov    eax,0x0
c001abb2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abb8:	c3                   	ret    
c001abb9:	90                   	nop

c001abba <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abba:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abc0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abc8:	75 0a                	jne    c001abd4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abca:	b8 04 00 00 00       	mov    eax,0x4
c001abcf:	e9 cb 00 00 00       	jmp    c001ac9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abd4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abdc:	75 0a                	jne    c001abe8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abde:	b8 04 00 00 00       	mov    eax,0x4
c001abe3:	e9 b7 00 00 00       	jmp    c001ac9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abf0:	75 0a                	jne    c001abfc <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abf2:	b8 04 00 00 00       	mov    eax,0x4
c001abf7:	e9 a3 00 00 00       	jmp    c001ac9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abfc:	83 ec 08             	sub    esp,0x8
c001abff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac06:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac0d:	50                   	push   eax
c001ac0e:	e8 4b 5b fe ff       	call   c000075e <strcpy>
c001ac13:	83 c4 10             	add    esp,0x10
c001ac16:	83 ec 08             	sub    esp,0x8
c001ac19:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac20:	50                   	push   eax
c001ac21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac28:	e8 83 fd ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	83 ec 08             	sub    esp,0x8
c001ac33:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac37:	50                   	push   eax
c001ac38:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac3f:	50                   	push   eax
c001ac40:	e8 c2 b2 fe ff       	call   c0005f07 <f_stat>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac4f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac56:	85 c0                	test   eax,eax
c001ac58:	74 07                	je     c001ac61 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac5a:	83 f8 04             	cmp    eax,0x4
c001ac5d:	74 34                	je     c001ac93 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac5f:	eb 39                	jmp    c001ac9a <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac61:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac65:	25 ff 00 00 00       	and    eax,0xff
c001ac6a:	83 e0 10             	and    eax,0x10
c001ac6d:	0f 95 c2             	setne  dl
c001ac70:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac77:	88 10                	mov    BYTE PTR [eax],dl
c001ac79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac80:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac87:	89 01                	mov    DWORD PTR [ecx],eax
c001ac89:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac8c:	b8 00 00 00 00       	mov    eax,0x0
c001ac91:	eb 0c                	jmp    c001ac9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac93:	b8 02 00 00 00       	mov    eax,0x2
c001ac98:	eb 05                	jmp    c001ac9f <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac9a:	b8 01 00 00 00       	mov    eax,0x1
c001ac9f:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aca5:	c3                   	ret    

c001aca6 <FAT::unlink(char const*)>:
c001aca6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acac:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acb4:	75 07                	jne    c001acbd <FAT::unlink(char const*)+0x17>
c001acb6:	b8 04 00 00 00       	mov    eax,0x4
c001acbb:	eb 5c                	jmp    c001ad19 <FAT::unlink(char const*)+0x73>
c001acbd:	83 ec 08             	sub    esp,0x8
c001acc0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001accb:	50                   	push   eax
c001accc:	e8 8d 5a fe ff       	call   c000075e <strcpy>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	83 ec 08             	sub    esp,0x8
c001acd7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acdb:	50                   	push   eax
c001acdc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ace3:	e8 c8 fc ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	83 ec 0c             	sub    esp,0xc
c001acee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acf2:	50                   	push   eax
c001acf3:	e8 7e b5 fe ff       	call   c0006276 <f_unlink>
c001acf8:	83 c4 10             	add    esp,0x10
c001acfb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad02:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad09:	85 c0                	test   eax,eax
c001ad0b:	75 07                	jne    c001ad14 <FAT::unlink(char const*)+0x6e>
c001ad0d:	b8 00 00 00 00       	mov    eax,0x0
c001ad12:	eb 05                	jmp    c001ad19 <FAT::unlink(char const*)+0x73>
c001ad14:	b8 01 00 00 00       	mov    eax,0x1
c001ad19:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad1f:	c3                   	ret    

c001ad20 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad26:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad2d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad34:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad3c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad44:	75 0a                	jne    c001ad50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad46:	b8 04 00 00 00       	mov    eax,0x4
c001ad4b:	e9 43 01 00 00       	jmp    c001ae93 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad50:	83 ec 08             	sub    esp,0x8
c001ad53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad5e:	50                   	push   eax
c001ad5f:	e8 fa 59 fe ff       	call   c000075e <strcpy>
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	83 ec 08             	sub    esp,0x8
c001ad6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad6e:	50                   	push   eax
c001ad6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad76:	e8 35 fc ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad86:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad8e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad92:	25 ff 00 00 00       	and    eax,0xff
c001ad97:	83 e0 01             	and    eax,0x1
c001ad9a:	74 08                	je     c001ada4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ad9c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ada4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada8:	25 ff 00 00 00       	and    eax,0xff
c001adad:	83 e0 02             	and    eax,0x2
c001adb0:	74 08                	je     c001adba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adb2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adba:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adbe:	25 ff 00 00 00       	and    eax,0xff
c001adc3:	83 e0 04             	and    eax,0x4
c001adc6:	74 08                	je     c001add0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adc8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001add0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001add4:	25 ff 00 00 00       	and    eax,0xff
c001add9:	83 e0 08             	and    eax,0x8
c001addc:	74 08                	je     c001ade6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adde:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ade6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adea:	25 ff 00 00 00       	and    eax,0xff
c001adef:	83 e0 01             	and    eax,0x1
c001adf2:	74 08                	je     c001adfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adf4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001adfc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae00:	25 ff 00 00 00       	and    eax,0xff
c001ae05:	83 e0 02             	and    eax,0x2
c001ae08:	74 08                	je     c001ae12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae0a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae16:	25 ff 00 00 00       	and    eax,0xff
c001ae1b:	83 e0 04             	and    eax,0x4
c001ae1e:	74 08                	je     c001ae28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae20:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae28:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae2c:	25 ff 00 00 00       	and    eax,0xff
c001ae31:	83 e0 08             	and    eax,0x8
c001ae34:	74 08                	je     c001ae3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae36:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae3e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae45:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae4c:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae53:	31 d2                	xor    edx,edx
c001ae55:	88 c2                	mov    dl,al
c001ae57:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae5e:	25 ff 00 00 00       	and    eax,0xff
c001ae63:	83 ec 04             	sub    esp,0x4
c001ae66:	52                   	push   edx
c001ae67:	50                   	push   eax
c001ae68:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae6c:	50                   	push   eax
c001ae6d:	e8 a4 ba fe ff       	call   c0006916 <f_chmod>
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae7c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae83:	85 c0                	test   eax,eax
c001ae85:	75 07                	jne    c001ae8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae87:	b8 00 00 00 00       	mov    eax,0x0
c001ae8c:	eb 05                	jmp    c001ae93 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae8e:	b8 01 00 00 00       	mov    eax,0x1
c001ae93:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae99:	c3                   	ret    

c001ae9a <FAT::rename(char const*, char const*)>:
c001ae9a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aea0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aea8:	74 0a                	je     c001aeb4 <FAT::rename(char const*, char const*)+0x1a>
c001aeaa:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aeb2:	75 0a                	jne    c001aebe <FAT::rename(char const*, char const*)+0x24>
c001aeb4:	b8 04 00 00 00       	mov    eax,0x4
c001aeb9:	e9 98 00 00 00       	jmp    c001af56 <FAT::rename(char const*, char const*)+0xbc>
c001aebe:	83 ec 08             	sub    esp,0x8
c001aec1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aec8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aecf:	50                   	push   eax
c001aed0:	e8 89 58 fe ff       	call   c000075e <strcpy>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	83 ec 08             	sub    esp,0x8
c001aedb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aee2:	50                   	push   eax
c001aee3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aeea:	e8 c1 fa ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	83 ec 08             	sub    esp,0x8
c001aef5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aefc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af00:	50                   	push   eax
c001af01:	e8 58 58 fe ff       	call   c000075e <strcpy>
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	83 ec 08             	sub    esp,0x8
c001af0c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af10:	50                   	push   eax
c001af11:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af18:	e8 93 fa ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	83 ec 08             	sub    esp,0x8
c001af23:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af27:	50                   	push   eax
c001af28:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af2f:	50                   	push   eax
c001af30:	e8 ee b6 fe ff       	call   c0006623 <f_rename>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af3f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af46:	85 c0                	test   eax,eax
c001af48:	75 07                	jne    c001af51 <FAT::rename(char const*, char const*)+0xb7>
c001af4a:	b8 00 00 00 00       	mov    eax,0x0
c001af4f:	eb 05                	jmp    c001af56 <FAT::rename(char const*, char const*)+0xbc>
c001af51:	b8 01 00 00 00       	mov    eax,0x1
c001af56:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af5c:	c3                   	ret    
c001af5d:	90                   	nop

c001af5e <FAT::mkdir(char const*)>:
c001af5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af64:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af6c:	75 07                	jne    c001af75 <FAT::mkdir(char const*)+0x17>
c001af6e:	b8 04 00 00 00       	mov    eax,0x4
c001af73:	eb 5c                	jmp    c001afd1 <FAT::mkdir(char const*)+0x73>
c001af75:	83 ec 08             	sub    esp,0x8
c001af78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af83:	50                   	push   eax
c001af84:	e8 d5 57 fe ff       	call   c000075e <strcpy>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	83 ec 08             	sub    esp,0x8
c001af8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af93:	50                   	push   eax
c001af94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af9b:	e8 10 fa ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001afa0:	83 c4 10             	add    esp,0x10
c001afa3:	83 ec 0c             	sub    esp,0xc
c001afa6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afaa:	50                   	push   eax
c001afab:	e8 47 b4 fe ff       	call   c00063f7 <f_mkdir>
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afba:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afc1:	85 c0                	test   eax,eax
c001afc3:	75 07                	jne    c001afcc <FAT::mkdir(char const*)+0x6e>
c001afc5:	b8 00 00 00 00       	mov    eax,0x0
c001afca:	eb 05                	jmp    c001afd1 <FAT::mkdir(char const*)+0x73>
c001afcc:	b8 01 00 00 00       	mov    eax,0x1
c001afd1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afd7:	c3                   	ret    

c001afd8 <FAT::exists(char const*)>:
c001afd8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afde:	83 ec 08             	sub    esp,0x8
c001afe1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afe8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afec:	50                   	push   eax
c001afed:	e8 6c 57 fe ff       	call   c000075e <strcpy>
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	83 ec 08             	sub    esp,0x8
c001aff8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001affc:	50                   	push   eax
c001affd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b004:	e8 a7 f9 ff ff       	call   c001a9b0 <FAT::fixFilepath(char*)>
c001b009:	83 c4 10             	add    esp,0x10
c001b00c:	83 ec 08             	sub    esp,0x8
c001b00f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b016:	50                   	push   eax
c001b017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b01b:	50                   	push   eax
c001b01c:	e8 e6 ae fe ff       	call   c0005f07 <f_stat>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b02b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b032:	85 c0                	test   eax,eax
c001b034:	75 04                	jne    c001b03a <FAT::exists(char const*)+0x62>
c001b036:	b0 01                	mov    al,0x1
c001b038:	eb 02                	jmp    c001b03c <FAT::exists(char const*)+0x64>
c001b03a:	b0 00                	mov    al,0x0
c001b03c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b042:	c3                   	ret    
c001b043:	90                   	nop

c001b044 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b044:	b8 08 00 00 00       	mov    eax,0x8
c001b049:	c3                   	ret    

c001b04a <ISO9660::seek(void*, unsigned long long)>:
c001b04a:	53                   	push   ebx
c001b04b:	b8 04 00 00 00       	mov    eax,0x4
c001b050:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b058:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b05c:	85 d2                	test   edx,edx
c001b05e:	74 17                	je     c001b077 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b060:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b063:	89 c8                	mov    eax,ecx
c001b065:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b068:	b8 01 00 00 00       	mov    eax,0x1
c001b06d:	73 08                	jae    c001b077 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b06f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b072:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b075:	31 c0                	xor    eax,eax
c001b077:	5b                   	pop    ebx
c001b078:	c3                   	ret    
c001b079:	90                   	nop

c001b07a <ISO9660::tell(void*, unsigned long long*)>:
c001b07a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b07e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b082:	85 d2                	test   edx,edx
c001b084:	74 12                	je     c001b098 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b086:	85 c0                	test   eax,eax
c001b088:	74 0e                	je     c001b098 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b08a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b08d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b090:	89 10                	mov    DWORD PTR [eax],edx
c001b092:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b095:	31 c0                	xor    eax,eax
c001b097:	c3                   	ret    
c001b098:	b8 04 00 00 00       	mov    eax,0x4
c001b09d:	c3                   	ret    

c001b09e <ISO9660::getName()>:
c001b09e:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0a3:	c3                   	ret    

c001b0a4 <ISO9660::stat(void*, unsigned long long*)>:
c001b0a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0ac:	85 d2                	test   edx,edx
c001b0ae:	74 12                	je     c001b0c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b0:	85 c0                	test   eax,eax
c001b0b2:	74 0e                	je     c001b0c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0ba:	89 10                	mov    DWORD PTR [eax],edx
c001b0bc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0bf:	31 c0                	xor    eax,eax
c001b0c1:	c3                   	ret    
c001b0c2:	b8 04 00 00 00       	mov    eax,0x4
c001b0c7:	c3                   	ret    

c001b0c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0c8:	b8 01 00 00 00       	mov    eax,0x1
c001b0cd:	c3                   	ret    

c001b0ce <ISO9660::unlink(char const*)>:
c001b0ce:	b8 01 00 00 00       	mov    eax,0x1
c001b0d3:	c3                   	ret    

c001b0d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0d4:	b8 01 00 00 00       	mov    eax,0x1
c001b0d9:	c3                   	ret    

c001b0da <ISO9660::rename(char const*, char const*)>:
c001b0da:	b8 01 00 00 00       	mov    eax,0x1
c001b0df:	c3                   	ret    

c001b0e0 <ISO9660::mkdir(char const*)>:
c001b0e0:	b8 01 00 00 00       	mov    eax,0x1
c001b0e5:	c3                   	ret    

c001b0e6 <ISO9660::close(void*)>:
c001b0e6:	83 ec 0c             	sub    esp,0xc
c001b0e9:	b8 04 00 00 00       	mov    eax,0x4
c001b0ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0f2:	85 d2                	test   edx,edx
c001b0f4:	74 0e                	je     c001b104 <ISO9660::close(void*)+0x1e>
c001b0f6:	83 ec 0c             	sub    esp,0xc
c001b0f9:	52                   	push   edx
c001b0fa:	e8 ee 0e ff ff       	call   c000bfed <free>
c001b0ff:	83 c4 10             	add    esp,0x10
c001b102:	31 c0                	xor    eax,eax
c001b104:	83 c4 0c             	add    esp,0xc
c001b107:	c3                   	ret    

c001b108 <ISO9660::closeDir(void*)>:
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	b8 04 00 00 00       	mov    eax,0x4
c001b110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b114:	85 d2                	test   edx,edx
c001b116:	74 0e                	je     c001b126 <ISO9660::closeDir(void*)+0x1e>
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	52                   	push   edx
c001b11c:	e8 cc 0e ff ff       	call   c000bfed <free>
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	31 c0                	xor    eax,eax
c001b126:	83 c4 0c             	add    esp,0xc
c001b129:	c3                   	ret    

c001b12a <ISO9660::~ISO9660()>:
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b136:	89 10                	mov    DWORD PTR [eax],edx
c001b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13c:	83 ec 0c             	sub    esp,0xc
c001b13f:	50                   	push   eax
c001b140:	e8 fb 43 ff ff       	call   c000f540 <Filesystem::~Filesystem()>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	90                   	nop
c001b149:	83 c4 0c             	add    esp,0xc
c001b14c:	c3                   	ret    
c001b14d:	90                   	nop

c001b14e <ISO9660::~ISO9660()>:
c001b14e:	83 ec 0c             	sub    esp,0xc
c001b151:	83 ec 0c             	sub    esp,0xc
c001b154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b158:	e8 cd ff ff ff       	call   c001b12a <ISO9660::~ISO9660()>
c001b15d:	83 c4 10             	add    esp,0x10
c001b160:	83 ec 08             	sub    esp,0x8
c001b163:	6a 08                	push   0x8
c001b165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b169:	e8 7b 3f ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001b16e:	83 c4 10             	add    esp,0x10
c001b171:	83 c4 0c             	add    esp,0xc
c001b174:	c3                   	ret    

c001b175 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b175:	55                   	push   ebp
c001b176:	31 c9                	xor    ecx,ecx
c001b178:	57                   	push   edi
c001b179:	56                   	push   esi
c001b17a:	53                   	push   ebx
c001b17b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b17f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b183:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b187:	89 eb                	mov    ebx,ebp
c001b189:	39 ce                	cmp    esi,ecx
c001b18b:	7e 17                	jle    c001b1a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b18d:	31 d2                	xor    edx,edx
c001b18f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b193:	7d 13                	jge    c001b1a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b195:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b199:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b19c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b19f:	75 0d                	jne    c001b1ae <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1a1:	42                   	inc    edx
c001b1a2:	eb eb                	jmp    c001b18f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1a4:	31 c0                	xor    eax,eax
c001b1a6:	eb 0a                	jmp    c001b1b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1a8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1ac:	eb 04                	jmp    c001b1b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1ae:	41                   	inc    ecx
c001b1af:	43                   	inc    ebx
c001b1b0:	eb d7                	jmp    c001b189 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1b2:	5b                   	pop    ebx
c001b1b3:	5e                   	pop    esi
c001b1b4:	5f                   	pop    edi
c001b1b5:	5d                   	pop    ebp
c001b1b6:	c3                   	ret    

c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1b7:	56                   	push   esi
c001b1b8:	53                   	push   ebx
c001b1b9:	52                   	push   edx
c001b1ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1c6:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1cc:	75 08                	jne    c001b1d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1ce:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1d4:	74 2b                	je     c001b201 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1d6:	83 ec 0c             	sub    esp,0xc
c001b1d9:	31 db                	xor    ebx,ebx
c001b1db:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1e0:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1e6:	68 40 5d 02 c0       	push   0xc0025d40
c001b1eb:	6a 01                	push   0x1
c001b1ed:	53                   	push   ebx
c001b1ee:	0f be c0             	movsx  eax,al
c001b1f1:	51                   	push   ecx
c001b1f2:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b1f9:	e8 6c 76 ff ff       	call   c001286a <LogicalDisk::read(unsigned long long, int, void*)>
c001b1fe:	83 c4 20             	add    esp,0x20
c001b201:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b209:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b211:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b215:	58                   	pop    eax
c001b216:	5b                   	pop    ebx
c001b217:	5e                   	pop    esi
c001b218:	e9 6c 54 fe ff       	jmp    c0000689 <memcpy>
c001b21d:	90                   	nop

c001b21e <ISO9660::tryMount(LogicalDisk*, int)>:
c001b21e:	81 ec 10 08 00 00    	sub    esp,0x810
c001b224:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b22b:	83 c0 41             	add    eax,0x41
c001b22e:	0f be c0             	movsx  eax,al
c001b231:	50                   	push   eax
c001b232:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b236:	50                   	push   eax
c001b237:	6a 10                	push   0x10
c001b239:	e8 79 ff ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b23e:	83 c4 10             	add    esp,0x10
c001b241:	31 c0                	xor    eax,eax
c001b243:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b248:	75 1d                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b24a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b24f:	75 16                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b251:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b256:	75 0f                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b258:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b25d:	75 08                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b264:	0f 94 c0             	sete   al
c001b267:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b26d:	c3                   	ret    

c001b26e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b26e:	55                   	push   ebp
c001b26f:	57                   	push   edi
c001b270:	56                   	push   esi
c001b271:	53                   	push   ebx
c001b272:	81 ec 34 08 00 00    	sub    esp,0x834
c001b278:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b27f:	55                   	push   ebp
c001b280:	68 83 33 02 c0       	push   0xc0023383
c001b285:	e8 85 3f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001b28a:	83 c4 10             	add    esp,0x10
c001b28d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b295:	0f 84 06 02 00 00    	je     c001b4a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b29b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2a3:	0f 84 f8 01 00 00    	je     c001b4a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2a9:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2b0:	b8 01 00 00 00       	mov    eax,0x1
c001b2b5:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2b9:	0f 85 e7 01 00 00    	jne    c001b4a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2bf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2c2:	31 d2                	xor    edx,edx
c001b2c4:	89 e9                	mov    ecx,ebp
c001b2c6:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2c9:	01 f1                	add    ecx,esi
c001b2cb:	89 d3                	mov    ebx,edx
c001b2cd:	11 fb                	adc    ebx,edi
c001b2cf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2d3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2d7:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2de:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2e1:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2e4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2e8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2f4:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2f8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b2fc:	72 19                	jb     c001b317 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b2fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b30a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b30d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b311:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b315:	eb 13                	jmp    c001b32a <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b31b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b31f:	29 f0                	sub    eax,esi
c001b321:	19 fa                	sbb    edx,edi
c001b323:	89 04 24             	mov    DWORD PTR [esp],eax
c001b326:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b32a:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b331:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b334:	8b 00                	mov    eax,DWORD PTR [eax]
c001b336:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b33a:	c1 e0 0b             	shl    eax,0xb
c001b33d:	53                   	push   ebx
c001b33e:	01 c6                	add    esi,eax
c001b340:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b347:	11 d7                	adc    edi,edx
c001b349:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b34d:	50                   	push   eax
c001b34e:	89 fa                	mov    edx,edi
c001b350:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b354:	50                   	push   eax
c001b355:	89 f0                	mov    eax,esi
c001b357:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b35b:	50                   	push   eax
c001b35c:	e8 56 fe ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b361:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b36c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b376:	b8 00 08 00 00       	mov    eax,0x800
c001b37b:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b381:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b385:	29 d0                	sub    eax,edx
c001b387:	39 c1                	cmp    ecx,eax
c001b389:	83 db 00             	sbb    ebx,0x0
c001b38c:	7d 19                	jge    c001b3a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b38e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b393:	75 16                	jne    c001b3ab <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b395:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b39c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3a2:	e9 f6 00 00 00       	jmp    c001b49d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3a7:	89 c5                	mov    ebp,eax
c001b3a9:	eb 03                	jmp    c001b3ae <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3ab:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3ae:	51                   	push   ecx
c001b3af:	55                   	push   ebp
c001b3b0:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3b4:	50                   	push   eax
c001b3b5:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3bc:	e8 c8 52 fe ff       	call   c0000689 <memcpy>
c001b3c1:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3c8:	01 e8                	add    eax,ebp
c001b3ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3d2:	89 e8                	mov    eax,ebp
c001b3d4:	99                   	cdq    
c001b3d5:	01 ee                	add    esi,ebp
c001b3d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3db:	11 d7                	adc    edi,edx
c001b3dd:	29 e9                	sub    ecx,ebp
c001b3df:	19 d3                	sbb    ebx,edx
c001b3e1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3e5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3e9:	83 c4 10             	add    esp,0x10
c001b3ec:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3f1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3f4:	b8 00 00 00 00       	mov    eax,0x0
c001b3f9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b3fd:	7d 3f                	jge    c001b43e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b3ff:	52                   	push   edx
c001b400:	89 fa                	mov    edx,edi
c001b402:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b409:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b40d:	50                   	push   eax
c001b40e:	89 f0                	mov    eax,esi
c001b410:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b414:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b418:	50                   	push   eax
c001b419:	e8 99 fd ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b41e:	81 c6 00 08 00 00    	add    esi,0x800
c001b424:	83 d7 00             	adc    edi,0x0
c001b427:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b42f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b437:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b43c:	eb ab                	jmp    c001b3e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b442:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b445:	74 34                	je     c001b47b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b447:	50                   	push   eax
c001b448:	89 fa                	mov    edx,edi
c001b44a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b451:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b455:	50                   	push   eax
c001b456:	89 f0                	mov    eax,esi
c001b458:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b45c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b460:	55                   	push   ebp
c001b461:	50                   	push   eax
c001b462:	e8 50 fd ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b467:	83 c4 0c             	add    esp,0xc
c001b46a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b46e:	55                   	push   ebp
c001b46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b473:	e8 11 52 fe ff       	call   c0000689 <memcpy>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b482:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b486:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b48a:	89 38                	mov    DWORD PTR [eax],edi
c001b48c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b497:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b49a:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b49d:	31 c0                	xor    eax,eax
c001b49f:	eb 05                	jmp    c001b4a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4a1:	b8 04 00 00 00       	mov    eax,0x4
c001b4a6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4ac:	5b                   	pop    ebx
c001b4ad:	5e                   	pop    esi
c001b4ae:	5f                   	pop    edi
c001b4af:	5d                   	pop    ebp
c001b4b0:	c3                   	ret    
c001b4b1:	90                   	nop

c001b4b2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4b2:	55                   	push   ebp
c001b4b3:	57                   	push   edi
c001b4b4:	56                   	push   esi
c001b4b5:	53                   	push   ebx
c001b4b6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4bc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4c3:	85 f6                	test   esi,esi
c001b4c5:	0f 84 62 02 00 00    	je     c001b72d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4cb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4d3:	0f 84 54 02 00 00    	je     c001b72d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4dc:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4df:	75 0a                	jne    c001b4eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4e1:	b8 07 00 00 00       	mov    eax,0x7
c001b4e6:	e9 47 02 00 00       	jmp    c001b732 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4eb:	50                   	push   eax
c001b4ec:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4f0:	50                   	push   eax
c001b4f1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4f8:	53                   	push   ebx
c001b4f9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4fb:	c1 e0 0b             	shl    eax,0xb
c001b4fe:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b501:	c1 e8 0b             	shr    eax,0xb
c001b504:	50                   	push   eax
c001b505:	e8 ad fc ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b50a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	89 c1                	mov    ecx,eax
c001b512:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b515:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b51b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b51e:	84 db                	test   bl,bl
c001b520:	0f 85 90 00 00 00    	jne    c001b5b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b526:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b52c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b532:	29 c7                	sub    edi,eax
c001b534:	89 fb                	mov    ebx,edi
c001b536:	c1 fb 1f             	sar    ebx,0x1f
c001b539:	01 f8                	add    eax,edi
c001b53b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b53f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b542:	11 da                	adc    edx,ebx
c001b544:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b547:	89 04 24             	mov    DWORD PTR [esp],eax
c001b54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b54e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b551:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b554:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b557:	89 d8                	mov    eax,ebx
c001b559:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b55d:	ba 00 00 00 00       	mov    edx,0x0
c001b562:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b566:	b8 00 00 00 00       	mov    eax,0x0
c001b56b:	73 0b                	jae    c001b578 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b56d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b574:	29 f8                	sub    eax,edi
c001b576:	19 da                	sbb    edx,ebx
c001b578:	89 d3                	mov    ebx,edx
c001b57a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b57d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b580:	09 c3                	or     ebx,eax
c001b582:	0f 84 59 ff ff ff    	je     c001b4e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b588:	55                   	push   ebp
c001b589:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b58d:	50                   	push   eax
c001b58e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b595:	53                   	push   ebx
c001b596:	8b 06                	mov    eax,DWORD PTR [esi]
c001b598:	c1 e0 0b             	shl    eax,0xb
c001b59b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b59f:	c1 e8 0b             	shr    eax,0xb
c001b5a2:	50                   	push   eax
c001b5a3:	e8 0f fc ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5ab:	83 c4 10             	add    esp,0x10
c001b5ae:	25 ff 07 00 00       	and    eax,0x7ff
c001b5b3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5b6:	57                   	push   edi
c001b5b7:	6a 28                	push   0x28
c001b5b9:	6a 00                	push   0x0
c001b5bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5bf:	50                   	push   eax
c001b5c0:	e8 fa 50 fe ff       	call   c00006bf <memset>
c001b5c5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5c8:	31 d2                	xor    edx,edx
c001b5ca:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5d0:	89 f8                	mov    eax,edi
c001b5d2:	83 c0 21             	add    eax,0x21
c001b5d5:	83 d2 00             	adc    edx,0x0
c001b5d8:	89 c7                	mov    edi,eax
c001b5da:	89 d5                	mov    ebp,edx
c001b5dc:	83 c4 10             	add    esp,0x10
c001b5df:	31 c9                	xor    ecx,ecx
c001b5e1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5e8:	83 f9 28             	cmp    ecx,0x28
c001b5eb:	0f 94 c2             	sete   dl
c001b5ee:	88 04 24             	mov    BYTE PTR [esp],al
c001b5f1:	88 d0                	mov    al,dl
c001b5f3:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5f8:	39 fa                	cmp    edx,edi
c001b5fa:	ba 00 00 00 00       	mov    edx,0x0
c001b5ff:	19 ea                	sbb    edx,ebp
c001b601:	0f 92 c2             	setb   dl
c001b604:	09 c2                	or     edx,eax
c001b606:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b60a:	0f 94 c0             	sete   al
c001b60d:	08 d0                	or     al,dl
c001b60f:	75 16                	jne    c001b627 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b611:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b615:	74 10                	je     c001b627 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b617:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b61a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b61e:	41                   	inc    ecx
c001b61f:	83 c7 01             	add    edi,0x1
c001b622:	83 d5 00             	adc    ebp,0x0
c001b625:	eb ba                	jmp    c001b5e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b627:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b62e:	83 ec 0c             	sub    esp,0xc
c001b631:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b635:	57                   	push   edi
c001b636:	e8 a1 50 fe ff       	call   c00006dc <strlen>
c001b63b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b63f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b642:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b649:	25 ff 07 00 00       	and    eax,0x7ff
c001b64e:	01 c8                	add    eax,ecx
c001b650:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b658:	5a                   	pop    edx
c001b659:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b660:	59                   	pop    ecx
c001b661:	0f 95 c0             	setne  al
c001b664:	0f b6 c0             	movzx  eax,al
c001b667:	40                   	inc    eax
c001b668:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b66c:	57                   	push   edi
c001b66d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b671:	50                   	push   eax
c001b672:	e8 e7 50 fe ff       	call   c000075e <strcpy>
c001b677:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	84 c0                	test   al,al
c001b680:	75 21                	jne    c001b6a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b682:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b68a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b692:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b69a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6a1:	eb 28                	jmp    c001b6cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a3:	fe c8                	dec    al
c001b6a5:	75 24                	jne    c001b6cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6af:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6b7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6bf:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6c6:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6cb:	50                   	push   eax
c001b6cc:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6d3:	0f b6 fb             	movzx  edi,bl
c001b6d6:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6da:	31 db                	xor    ebx,ebx
c001b6dc:	50                   	push   eax
c001b6dd:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6e4:	e8 a0 4f fe ff       	call   c0000689 <memcpy>
c001b6e9:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6f6:	89 f9                	mov    ecx,edi
c001b6f8:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b6fb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b6fe:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b701:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b704:	83 c4 10             	add    esp,0x10
c001b707:	39 c7                	cmp    edi,eax
c001b709:	89 df                	mov    edi,ebx
c001b70b:	19 d7                	sbb    edi,edx
c001b70d:	72 10                	jb     c001b71f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b70f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b716:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b71d:	eb 0a                	jmp    c001b729 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b71f:	29 c8                	sub    eax,ecx
c001b721:	19 da                	sbb    edx,ebx
c001b723:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b726:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b729:	31 c0                	xor    eax,eax
c001b72b:	eb 05                	jmp    c001b732 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b72d:	b8 04 00 00 00       	mov    eax,0x4
c001b732:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b738:	5b                   	pop    ebx
c001b739:	5e                   	pop    esi
c001b73a:	5f                   	pop    edi
c001b73b:	5d                   	pop    ebp
c001b73c:	c3                   	ret    

c001b73d <readRoot(unsigned int*, unsigned int*, char)>:
c001b73d:	81 ec 40 08 00 00    	sub    esp,0x840
c001b743:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b74b:	50                   	push   eax
c001b74c:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b750:	50                   	push   eax
c001b751:	6a 10                	push   0x10
c001b753:	e8 5f fa ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b758:	83 c4 0c             	add    esp,0xc
c001b75b:	6a 22                	push   0x22
c001b75d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b764:	50                   	push   eax
c001b765:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b769:	50                   	push   eax
c001b76a:	e8 1a 4f fe ff       	call   c0000689 <memcpy>
c001b76f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b776:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b77a:	89 10                	mov    DWORD PTR [eax],edx
c001b77c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b787:	89 10                	mov    DWORD PTR [eax],edx
c001b789:	b0 01                	mov    al,0x1
c001b78b:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b791:	c3                   	ret    

c001b792 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b792:	55                   	push   ebp
c001b793:	57                   	push   edi
c001b794:	56                   	push   esi
c001b795:	53                   	push   ebx
c001b796:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b79c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7a3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7ae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7b2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7b6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7ba:	75 03                	jne    c001b7bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7bc:	83 c3 02             	add    ebx,0x2
c001b7bf:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7c2:	75 03                	jne    c001b7c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7c4:	43                   	inc    ebx
c001b7c5:	eb f8                	jmp    c001b7bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7c7:	51                   	push   ecx
c001b7c8:	68 00 01 00 00       	push   0x100
c001b7cd:	6a 00                	push   0x0
c001b7cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7d3:	50                   	push   eax
c001b7d4:	e8 e6 4e fe ff       	call   c00006bf <memset>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7e1:	84 c0                	test   al,al
c001b7e3:	74 21                	je     c001b806 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7e5:	3c 2f                	cmp    al,0x2f
c001b7e7:	75 0b                	jne    c001b7f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7e9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7ed:	bd 01 00 00 00       	mov    ebp,0x1
c001b7f2:	eb 14                	jmp    c001b808 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7f4:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7f7:	80 f9 19             	cmp    cl,0x19
c001b7fa:	77 03                	ja     c001b7ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b7fc:	83 e8 20             	sub    eax,0x20
c001b7ff:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b803:	42                   	inc    edx
c001b804:	eb d8                	jmp    c001b7de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b806:	31 ed                	xor    ebp,ebp
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b812:	e8 c6 07 ff ff       	call   c000bfdd <malloc>
c001b817:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b81e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b824:	89 c6                	mov    esi,eax
c001b826:	c1 ef 0b             	shr    edi,0xb
c001b829:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b830:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b834:	83 c4 10             	add    esp,0x10
c001b837:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b83c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b840:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b847:	74 28                	je     c001b871 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b849:	52                   	push   edx
c001b84a:	57                   	push   edi
c001b84b:	50                   	push   eax
c001b84c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b850:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b857:	e8 5b f9 ff ff       	call   c001b1b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b85c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b860:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b867:	05 00 08 00 00       	add    eax,0x800
c001b86c:	83 c4 10             	add    esp,0x10
c001b86f:	eb cb                	jmp    c001b83c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b871:	83 ec 0c             	sub    esp,0xc
c001b874:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b878:	57                   	push   edi
c001b879:	e8 5e 4e fe ff       	call   c00006dc <strlen>
c001b87e:	50                   	push   eax
c001b87f:	57                   	push   edi
c001b880:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b887:	56                   	push   esi
c001b888:	e8 e8 f8 ff ff       	call   c001b175 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b88d:	83 c4 20             	add    esp,0x20
c001b890:	85 c0                	test   eax,eax
c001b892:	75 13                	jne    c001b8a7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	56                   	push   esi
c001b898:	e8 50 07 ff ff       	call   c000bfed <free>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	31 c0                	xor    eax,eax
c001b8a2:	e9 b3 00 00 00       	jmp    c001b95a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8a7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8ab:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8af:	c1 e7 08             	shl    edi,0x8
c001b8b2:	c1 e2 10             	shl    edx,0x10
c001b8b5:	09 d7                	or     edi,edx
c001b8b7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8bb:	09 d7                	or     edi,edx
c001b8bd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8c1:	c1 e2 18             	shl    edx,0x18
c001b8c4:	09 d7                	or     edi,edx
c001b8c6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8ca:	89 d1                	mov    ecx,edx
c001b8cc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8d0:	c1 e1 08             	shl    ecx,0x8
c001b8d3:	c1 e2 10             	shl    edx,0x10
c001b8d6:	09 ca                	or     edx,ecx
c001b8d8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8dc:	09 ca                	or     edx,ecx
c001b8de:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8e2:	c1 e1 18             	shl    ecx,0x18
c001b8e5:	09 ca                	or     edx,ecx
c001b8e7:	89 e9                	mov    ecx,ebp
c001b8e9:	84 c9                	test   cl,cl
c001b8eb:	74 3c                	je     c001b929 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8ed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8f1:	83 ec 0c             	sub    esp,0xc
c001b8f4:	56                   	push   esi
c001b8f5:	e8 f3 06 ff ff       	call   c000bfed <free>
c001b8fa:	83 c4 0c             	add    esp,0xc
c001b8fd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b904:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b909:	50                   	push   eax
c001b90a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b911:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b91c:	52                   	push   edx
c001b91d:	57                   	push   edi
c001b91e:	53                   	push   ebx
c001b91f:	e8 6e fe ff ff       	call   c001b792 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b924:	83 c4 20             	add    esp,0x20
c001b927:	eb 31                	jmp    c001b95a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b929:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b930:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b933:	d0 e8                	shr    al,1
c001b935:	83 ec 0c             	sub    esp,0xc
c001b938:	89 3b                	mov    DWORD PTR [ebx],edi
c001b93a:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b941:	83 e0 01             	and    eax,0x1
c001b944:	89 13                	mov    DWORD PTR [ebx],edx
c001b946:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b94d:	89 03                	mov    DWORD PTR [ebx],eax
c001b94f:	56                   	push   esi
c001b950:	e8 98 06 ff ff       	call   c000bfed <free>
c001b955:	83 c4 10             	add    esp,0x10
c001b958:	b0 01                	mov    al,0x1
c001b95a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b960:	5b                   	pop    ebx
c001b961:	5e                   	pop    esi
c001b962:	5f                   	pop    edi
c001b963:	5d                   	pop    ebp
c001b964:	c3                   	ret    

c001b965 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b965:	55                   	push   ebp
c001b966:	57                   	push   edi
c001b967:	56                   	push   esi
c001b968:	53                   	push   ebx
c001b969:	83 ec 20             	sub    esp,0x20
c001b96c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b970:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b974:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b979:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b97d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b985:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b98d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b993:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b999:	57                   	push   edi
c001b99a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b99e:	50                   	push   eax
c001b99f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9a3:	50                   	push   eax
c001b9a4:	e8 94 fd ff ff       	call   c001b73d <readRoot(unsigned int*, unsigned int*, char)>
c001b9a9:	5a                   	pop    edx
c001b9aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9ae:	e8 29 4d fe ff       	call   c00006dc <strlen>
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	83 f8 03             	cmp    eax,0x3
c001b9b9:	77 17                	ja     c001b9d2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9bf:	89 03                	mov    DWORD PTR [ebx],eax
c001b9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c5:	89 06                	mov    DWORD PTR [esi],eax
c001b9c7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9ce:	b0 01                	mov    al,0x1
c001b9d0:	eb 19                	jmp    c001b9eb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9d2:	50                   	push   eax
c001b9d3:	55                   	push   ebp
c001b9d4:	57                   	push   edi
c001b9d5:	56                   	push   esi
c001b9d6:	53                   	push   ebx
c001b9d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9e3:	e8 aa fd ff ff       	call   c001b792 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9e8:	83 c4 20             	add    esp,0x20
c001b9eb:	83 c4 1c             	add    esp,0x1c
c001b9ee:	5b                   	pop    ebx
c001b9ef:	5e                   	pop    esi
c001b9f0:	5f                   	pop    edi
c001b9f1:	5d                   	pop    ebp
c001b9f2:	c3                   	ret    
c001b9f3:	90                   	nop

c001b9f4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9f4:	57                   	push   edi
c001b9f5:	56                   	push   esi
c001b9f6:	53                   	push   ebx
c001b9f7:	83 ec 10             	sub    esp,0x10
c001b9fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b9fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba02:	85 f6                	test   esi,esi
c001ba04:	74 7b                	je     c001ba81 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba06:	85 ff                	test   edi,edi
c001ba08:	74 77                	je     c001ba81 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba0a:	83 ec 0c             	sub    esp,0xc
c001ba0d:	6a 1c                	push   0x1c
c001ba0f:	e8 c9 05 ff ff       	call   c000bfdd <malloc>
c001ba14:	89 07                	mov    DWORD PTR [edi],eax
c001ba16:	89 c3                	mov    ebx,eax
c001ba18:	58                   	pop    eax
c001ba19:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba1d:	50                   	push   eax
c001ba1e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba21:	50                   	push   eax
c001ba22:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba26:	50                   	push   eax
c001ba27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba2b:	50                   	push   eax
c001ba2c:	56                   	push   esi
c001ba2d:	e8 33 ff ff ff       	call   c001b965 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba32:	83 c4 20             	add    esp,0x20
c001ba35:	84 c0                	test   al,al
c001ba37:	74 07                	je     c001ba40 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba3e:	74 0b                	je     c001ba4b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba40:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba44:	b8 01 00 00 00       	mov    eax,0x1
c001ba49:	eb 3b                	jmp    c001ba86 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba53:	89 03                	mov    DWORD PTR [ebx],eax
c001ba55:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba60:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba67:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba6e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba71:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba78:	8a 06                	mov    al,BYTE PTR [esi]
c001ba7a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba7d:	31 c0                	xor    eax,eax
c001ba7f:	eb 05                	jmp    c001ba86 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba81:	b8 04 00 00 00       	mov    eax,0x4
c001ba86:	83 c4 10             	add    esp,0x10
c001ba89:	5b                   	pop    ebx
c001ba8a:	5e                   	pop    esi
c001ba8b:	5f                   	pop    edi
c001ba8c:	c3                   	ret    
c001ba8d:	90                   	nop

c001ba8e <ISO9660::exists(char const*)>:
c001ba8e:	83 ec 28             	sub    esp,0x28
c001ba91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba95:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba99:	52                   	push   edx
c001ba9a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ba9d:	52                   	push   edx
c001ba9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa2:	52                   	push   edx
c001baa3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa7:	52                   	push   edx
c001baa8:	50                   	push   eax
c001baa9:	e8 b7 fe ff ff       	call   c001b965 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baae:	83 c4 3c             	add    esp,0x3c
c001bab1:	c3                   	ret    

c001bab2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bab2:	56                   	push   esi
c001bab3:	53                   	push   ebx
c001bab4:	83 ec 14             	sub    esp,0x14
c001bab7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001babb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001babf:	85 db                	test   ebx,ebx
c001bac1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bac5:	0f 94 c2             	sete   dl
c001bac8:	85 f6                	test   esi,esi
c001baca:	0f 94 c0             	sete   al
c001bacd:	08 c2                	or     dl,al
c001bacf:	75 68                	jne    c001bb39 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad1:	85 c9                	test   ecx,ecx
c001bad3:	74 64                	je     c001bb39 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001badb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bae1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bae8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baec:	50                   	push   eax
c001baed:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001baf0:	50                   	push   eax
c001baf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf5:	50                   	push   eax
c001baf6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bafa:	50                   	push   eax
c001bafb:	51                   	push   ecx
c001bafc:	e8 64 fe ff ff       	call   c001b965 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb01:	83 c4 20             	add    esp,0x20
c001bb04:	ba 01 00 00 00       	mov    edx,0x1
c001bb09:	84 c0                	test   al,al
c001bb0b:	74 31                	je     c001bb3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb11:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb18:	89 03                	mov    DWORD PTR [ebx],eax
c001bb1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb1e:	85 c0                	test   eax,eax
c001bb20:	ba 00 00 00 00       	mov    edx,0x0
c001bb25:	0f 95 06             	setne  BYTE PTR [esi]
c001bb28:	74 14                	je     c001bb3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb2a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb30:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb37:	eb 05                	jmp    c001bb3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb39:	ba 04 00 00 00       	mov    edx,0x4
c001bb3e:	83 c4 14             	add    esp,0x14
c001bb41:	89 d0                	mov    eax,edx
c001bb43:	5b                   	pop    ebx
c001bb44:	5e                   	pop    esi
c001bb45:	c3                   	ret    

c001bb46 <ISO9660::openDir(char const*, void**)>:
c001bb46:	57                   	push   edi
c001bb47:	56                   	push   esi
c001bb48:	53                   	push   ebx
c001bb49:	83 ec 10             	sub    esp,0x10
c001bb4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb50:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb54:	85 f6                	test   esi,esi
c001bb56:	0f 84 95 00 00 00    	je     c001bbf1 <ISO9660::openDir(char const*, void**)+0xab>
c001bb5c:	85 ff                	test   edi,edi
c001bb5e:	0f 84 8d 00 00 00    	je     c001bbf1 <ISO9660::openDir(char const*, void**)+0xab>
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	6a 1c                	push   0x1c
c001bb69:	e8 6f 04 ff ff       	call   c000bfdd <malloc>
c001bb6e:	89 07                	mov    DWORD PTR [edi],eax
c001bb70:	89 c3                	mov    ebx,eax
c001bb72:	59                   	pop    ecx
c001bb73:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb77:	50                   	push   eax
c001bb78:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb7b:	50                   	push   eax
c001bb7c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb80:	50                   	push   eax
c001bb81:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb85:	50                   	push   eax
c001bb86:	56                   	push   esi
c001bb87:	e8 d9 fd ff ff       	call   c001b965 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb8c:	83 c4 20             	add    esp,0x20
c001bb8f:	84 c0                	test   al,al
c001bb91:	74 07                	je     c001bb9a <ISO9660::openDir(char const*, void**)+0x54>
c001bb93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb98:	75 21                	jne    c001bbbb <ISO9660::openDir(char const*, void**)+0x75>
c001bb9a:	52                   	push   edx
c001bb9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb9f:	0f b6 c0             	movzx  eax,al
c001bba2:	50                   	push   eax
c001bba3:	68 96 33 02 c0       	push   0xc0023396
c001bba8:	e8 62 36 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001bbad:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbb1:	83 c4 10             	add    esp,0x10
c001bbb4:	b8 01 00 00 00       	mov    eax,0x1
c001bbb9:	eb 3b                	jmp    c001bbf6 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbbf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbc3:	89 03                	mov    DWORD PTR [ebx],eax
c001bbc5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbd0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbd7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbde:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbe1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbe8:	8a 06                	mov    al,BYTE PTR [esi]
c001bbea:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	eb 05                	jmp    c001bbf6 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbf1:	b8 04 00 00 00       	mov    eax,0x4
c001bbf6:	83 c4 10             	add    esp,0x10
c001bbf9:	5b                   	pop    ebx
c001bbfa:	5e                   	pop    esi
c001bbfb:	5f                   	pop    edi
c001bbfc:	c3                   	ret    
c001bbfd:	90                   	nop

c001bbfe <ISO9660::ISO9660()>:
c001bbfe:	83 ec 0c             	sub    esp,0xc
c001bc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc05:	83 ec 0c             	sub    esp,0xc
c001bc08:	50                   	push   eax
c001bc09:	e8 0e 39 ff ff       	call   c000f51c <Filesystem::Filesystem()>
c001bc0e:	83 c4 10             	add    esp,0x10
c001bc11:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc1a:	89 10                	mov    DWORD PTR [eax],edx
c001bc1c:	90                   	nop
c001bc1d:	83 c4 0c             	add    esp,0xc
c001bc20:	c3                   	ret    
c001bc21:	90                   	nop

c001bc22 <SoundChannel::~SoundChannel()>:
c001bc22:	83 ec 0c             	sub    esp,0xc
c001bc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc2c:	83 ec 0c             	sub    esp,0xc
c001bc2f:	50                   	push   eax
c001bc30:	e8 b8 03 ff ff       	call   c000bfed <free>
c001bc35:	83 c4 10             	add    esp,0x10
c001bc38:	90                   	nop
c001bc39:	83 c4 0c             	add    esp,0xc
c001bc3c:	c3                   	ret    
c001bc3d:	90                   	nop

c001bc3e <SoundChannel::setSpeed(float)>:
c001bc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc42:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc46:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc49:	c3                   	ret    

c001bc4a <SoundChannel::getSpeed()>:
c001bc4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc4e:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc51:	c3                   	ret    

c001bc52 <SoundChannel::setVolume(int)>:
c001bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc56:	83 f8 64             	cmp    eax,0x64
c001bc59:	7e 05                	jle    c001bc60 <SoundChannel::setVolume(int)+0xe>
c001bc5b:	b8 64 00 00 00       	mov    eax,0x64
c001bc60:	85 c0                	test   eax,eax
c001bc62:	79 02                	jns    c001bc66 <SoundChannel::setVolume(int)+0x14>
c001bc64:	31 c0                	xor    eax,eax
c001bc66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc6a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc6d:	c3                   	ret    

c001bc6e <SoundChannel::getVolume()>:
c001bc6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc72:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc75:	c3                   	ret    

c001bc76 <SoundChannel::pause()>:
c001bc76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc7a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc7e:	c3                   	ret    
c001bc7f:	90                   	nop

c001bc80 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc80:	83 ec 1c             	sub    esp,0x1c
c001bc83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc87:	e8 ea ff ff ff       	call   c001bc76 <SoundChannel::pause()>
c001bc8c:	83 c4 04             	add    esp,0x4
c001bc8f:	6a 50                	push   0x50
c001bc91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc95:	e8 b8 ff ff ff       	call   c001bc52 <SoundChannel::setVolume(int)>
c001bc9a:	83 c4 08             	add    esp,0x8
c001bc9d:	d9 e8                	fld1   
c001bc9f:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bca3:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bca6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcaa:	e8 8f ff ff ff       	call   c001bc3e <SoundChannel::setSpeed(float)>
c001bcaf:	83 c4 08             	add    esp,0x8
c001bcb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcba:	89 10                	mov    DWORD PTR [eax],edx
c001bcbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bccb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bccf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcd2:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bcd7:	75 26                	jne    c001bcff <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bcd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdd:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bce6:	0f af c2             	imul   eax,edx
c001bce9:	89 c2                	mov    edx,eax
c001bceb:	c1 fa 1f             	sar    edx,0x1f
c001bcee:	83 e2 03             	and    edx,0x3
c001bcf1:	01 d0                	add    eax,edx
c001bcf3:	c1 f8 02             	sar    eax,0x2
c001bcf6:	05 a0 0f 00 00       	add    eax,0xfa0
c001bcfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd07:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd0e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd19:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd27:	c1 e0 02             	shl    eax,0x2
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	50                   	push   eax
c001bd2e:	e8 aa 02 ff ff       	call   c000bfdd <malloc>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	89 c2                	mov    edx,eax
c001bd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd3f:	83 ec 04             	sub    esp,0x4
c001bd42:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd46:	50                   	push   eax
c001bd47:	6a 01                	push   0x1
c001bd49:	6a 04                	push   0x4
c001bd4b:	e8 97 cb fe ff       	call   c00088e7 <src_new>
c001bd50:	83 c4 10             	add    esp,0x10
c001bd53:	89 c2                	mov    edx,eax
c001bd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd60:	85 c0                	test   eax,eax
c001bd62:	74 10                	je     c001bd74 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd64:	83 ec 0c             	sub    esp,0xc
c001bd67:	68 18 34 02 c0       	push   0xc0023418
c001bd6c:	e8 cd 9c ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	90                   	nop
c001bd75:	83 c4 1c             	add    esp,0x1c
c001bd78:	c3                   	ret    
c001bd79:	90                   	nop

c001bd7a <SoundChannel::play()>:
c001bd7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd82:	c3                   	ret    
c001bd83:	90                   	nop

c001bd84 <SoundChannel::paused()>:
c001bd84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd88:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd8b:	c3                   	ret    

c001bd8c <SoundChannel::getSampleRate()>:
c001bd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd90:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd92:	c3                   	ret    
c001bd93:	90                   	nop

c001bd94 <SoundChannel::getBits()>:
c001bd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd9b:	c3                   	ret    

c001bd9c <SoundChannel::getBufferUsed()>:
c001bd9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bda3:	c3                   	ret    

c001bda4 <SoundChannel::getBufferSize()>:
c001bda4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdab:	c3                   	ret    

c001bdac <SoundChannel::unbuffer(float*, int, int)>:
c001bdac:	53                   	push   ebx
c001bdad:	83 ec 40             	sub    esp,0x40
c001bdb0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdb4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdbc:	db 03                	fild   DWORD PTR [ebx]
c001bdbe:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdc9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdd0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdd8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bddc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bde0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bde4:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bde7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdeb:	50                   	push   eax
c001bdec:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdef:	e8 ad c7 fe ff       	call   c00085a1 <src_process>
c001bdf4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdf8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bdfb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bdfe:	83 c4 0c             	add    esp,0xc
c001be01:	29 d0                	sub    eax,edx
c001be03:	c1 e0 02             	shl    eax,0x2
c001be06:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be09:	50                   	push   eax
c001be0a:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be0d:	50                   	push   eax
c001be0e:	51                   	push   ecx
c001be0f:	e8 3d 48 fe ff       	call   c0000651 <memmove>
c001be14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be18:	83 c4 48             	add    esp,0x48
c001be1b:	5b                   	pop    ebx
c001be1c:	c3                   	ret    
c001be1d:	90                   	nop

c001be1e <SoundChannel::buffer8(unsigned char*, int)>:
c001be1e:	53                   	push   ebx
c001be1f:	31 c0                	xor    eax,eax
c001be21:	83 ec 08             	sub    esp,0x8
c001be24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be28:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be2b:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be2e:	74 35                	je     c001be65 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be30:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be34:	7d 2f                	jge    c001be65 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be3a:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be40:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be44:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be49:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be4c:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be50:	40                   	inc    eax
c001be51:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be54:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be57:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be5a:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be5d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be60:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be63:	eb c9                	jmp    c001be2e <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be65:	83 c4 08             	add    esp,0x8
c001be68:	5b                   	pop    ebx
c001be69:	c3                   	ret    

c001be6a <SoundDevice::SoundDevice(char const*)>:
c001be6a:	83 ec 1c             	sub    esp,0x1c
c001be6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be71:	83 ec 08             	sub    esp,0x8
c001be74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be78:	50                   	push   eax
c001be79:	e8 96 49 ff ff       	call   c0010814 <Device::Device(char const*)>
c001be7e:	83 c4 10             	add    esp,0x10
c001be81:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be8a:	89 10                	mov    DWORD PTR [eax],edx
c001be8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be90:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001be9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be9e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bea8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beb0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001beb5:	7f 19                	jg     c001bed0 <SoundDevice::SoundDevice(char const*)+0x66>
c001beb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bebf:	83 c2 54             	add    edx,0x54
c001bec2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001beca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bece:	eb e0                	jmp    c001beb0 <SoundDevice::SoundDevice(char const*)+0x46>
c001bed0:	90                   	nop
c001bed1:	83 c4 1c             	add    esp,0x1c
c001bed4:	c3                   	ret    
c001bed5:	90                   	nop

c001bed6 <SoundDevice::~SoundDevice()>:
c001bed6:	53                   	push   ebx
c001bed7:	83 ec 18             	sub    esp,0x18
c001beda:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001bedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bee3:	89 10                	mov    DWORD PTR [eax],edx
c001bee5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beed:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bef2:	7f 46                	jg     c001bf3a <SoundDevice::~SoundDevice()+0x64>
c001bef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001befc:	83 c2 54             	add    edx,0x54
c001beff:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf03:	85 c0                	test   eax,eax
c001bf05:	74 2d                	je     c001bf34 <SoundDevice::~SoundDevice()+0x5e>
c001bf07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf0f:	83 c2 54             	add    edx,0x54
c001bf12:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf16:	85 db                	test   ebx,ebx
c001bf18:	74 1a                	je     c001bf34 <SoundDevice::~SoundDevice()+0x5e>
c001bf1a:	83 ec 0c             	sub    esp,0xc
c001bf1d:	53                   	push   ebx
c001bf1e:	e8 ff fc ff ff       	call   c001bc22 <SoundChannel::~SoundChannel()>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	83 ec 08             	sub    esp,0x8
c001bf29:	6a 2c                	push   0x2c
c001bf2b:	53                   	push   ebx
c001bf2c:	e8 b8 31 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf38:	eb b3                	jmp    c001beed <SoundDevice::~SoundDevice()+0x17>
c001bf3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	50                   	push   eax
c001bf42:	e8 83 45 ff ff       	call   c00104ca <Device::~Device()>
c001bf47:	83 c4 10             	add    esp,0x10
c001bf4a:	90                   	nop
c001bf4b:	83 c4 18             	add    esp,0x18
c001bf4e:	5b                   	pop    ebx
c001bf4f:	c3                   	ret    

c001bf50 <SoundDevice::~SoundDevice()>:
c001bf50:	83 ec 0c             	sub    esp,0xc
c001bf53:	83 ec 0c             	sub    esp,0xc
c001bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf5a:	e8 77 ff ff ff       	call   c001bed6 <SoundDevice::~SoundDevice()>
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	83 ec 08             	sub    esp,0x8
c001bf65:	68 e4 01 00 00       	push   0x1e4
c001bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf6e:	e8 76 31 ff ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	83 c4 0c             	add    esp,0xc
c001bf79:	c3                   	ret    

c001bf7a <SoundDevice::getFreeChannelNum()>:
c001bf7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf7e:	31 c0                	xor    eax,eax
c001bf80:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf88:	74 09                	je     c001bf93 <SoundDevice::getFreeChannelNum()+0x19>
c001bf8a:	40                   	inc    eax
c001bf8b:	83 f8 20             	cmp    eax,0x20
c001bf8e:	75 f0                	jne    c001bf80 <SoundDevice::getFreeChannelNum()+0x6>
c001bf90:	83 c8 ff             	or     eax,0xffffffff
c001bf93:	c3                   	ret    

c001bf94 <SoundDevice::addChannel(SoundChannel*)>:
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	51                   	push   ecx
c001bf97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bf9f:	53                   	push   ebx
c001bfa0:	e8 d5 ff ff ff       	call   c001bf7a <SoundDevice::getFreeChannelNum()>
c001bfa5:	5a                   	pop    edx
c001bfa6:	83 f8 ff             	cmp    eax,0xffffffff
c001bfa9:	74 51                	je     c001bffc <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfab:	85 f6                	test   esi,esi
c001bfad:	74 4d                	je     c001bffc <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfaf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfb6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfbd:	75 30                	jne    c001bfef <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfbf:	83 ec 0c             	sub    esp,0xc
c001bfc2:	56                   	push   esi
c001bfc3:	e8 c4 fd ff ff       	call   c001bd8c <SoundChannel::getSampleRate()>
c001bfc8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfce:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfd1:	e8 be fd ff ff       	call   c001bd94 <SoundChannel::getBits()>
c001bfd6:	83 c4 0c             	add    esp,0xc
c001bfd9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfdf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfe1:	50                   	push   eax
c001bfe2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfe8:	53                   	push   ebx
c001bfe9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bff5:	b8 01 00 00 00       	mov    eax,0x1
c001bffa:	eb 03                	jmp    c001bfff <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bffc:	83 c8 ff             	or     eax,0xffffffff
c001bfff:	5a                   	pop    edx
c001c000:	5b                   	pop    ebx
c001c001:	5e                   	pop    esi
c001c002:	c3                   	ret    
c001c003:	90                   	nop

c001c004 <SoundDevice::removeChannel(int)>:
c001c004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c00c:	83 fa 1f             	cmp    edx,0x1f
c001c00f:	77 23                	ja     c001c034 <SoundDevice::removeChannel(int)+0x30>
c001c011:	8d 14 90             	lea    edx,[eax+edx*4]
c001c014:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c01b:	74 17                	je     c001c034 <SoundDevice::removeChannel(int)+0x30>
c001c01d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c027:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c02d:	75 05                	jne    c001c034 <SoundDevice::removeChannel(int)+0x30>
c001c02f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c031:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c034:	c3                   	ret    
c001c035:	90                   	nop

c001c036 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c036:	56                   	push   esi
c001c037:	53                   	push   ebx
c001c038:	31 db                	xor    ebx,ebx
c001c03a:	83 ec 14             	sub    esp,0x14
c001c03d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c041:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c045:	7d 55                	jge    c001c09c <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c04b:	d9 e8                	fld1   
c001c04d:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c050:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c056:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c05c:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c060:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c064:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c06a:	df e0                	fnstsw ax
c001c06c:	9e                   	sahf   
c001c06d:	72 08                	jb     c001c077 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c06f:	dd d8                	fstp   st(0)
c001c071:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c075:	eb 22                	jmp    c001c099 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c077:	d9 ee                	fldz   
c001c079:	d8 d9                	fcomp  st(1)
c001c07b:	df e0                	fnstsw ax
c001c07d:	9e                   	sahf   
c001c07e:	72 08                	jb     c001c088 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c080:	dd d8                	fstp   st(0)
c001c082:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c086:	eb 11                	jmp    c001c099 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c088:	83 ec 10             	sub    esp,0x10
c001c08b:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c08e:	e8 c9 36 00 00       	call   c001f75c <lrintf>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c099:	43                   	inc    ebx
c001c09a:	eb a5                	jmp    c001c041 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c09c:	83 c4 14             	add    esp,0x14
c001c09f:	5b                   	pop    ebx
c001c0a0:	5e                   	pop    esi
c001c0a1:	c3                   	ret    

c001c0a2 <SoundDevice::getAudio(int, float*, float*)>:
c001c0a2:	55                   	push   ebp
c001c0a3:	57                   	push   edi
c001c0a4:	56                   	push   esi
c001c0a5:	53                   	push   ebx
c001c0a6:	31 db                	xor    ebx,ebx
c001c0a8:	83 ec 20             	sub    esp,0x20
c001c0ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0b3:	c1 e0 02             	shl    eax,0x2
c001c0b6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0ba:	50                   	push   eax
c001c0bb:	6a 00                	push   0x0
c001c0bd:	55                   	push   ebp
c001c0be:	e8 fc 45 fe ff       	call   c00006bf <memset>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0ca:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0d1:	85 c0                	test   eax,eax
c001c0d3:	0f 84 8c 00 00 00    	je     c001c165 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0d9:	83 ec 0c             	sub    esp,0xc
c001c0dc:	50                   	push   eax
c001c0dd:	e8 a2 fc ff ff       	call   c001bd84 <SoundChannel::paused()>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	84 c0                	test   al,al
c001c0e7:	75 7c                	jne    c001c165 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0e9:	83 ec 0c             	sub    esp,0xc
c001c0ec:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0f3:	e8 76 fb ff ff       	call   c001bc6e <SoundChannel::getVolume()>
c001c0f8:	83 c4 10             	add    esp,0x10
c001c0fb:	85 c0                	test   eax,eax
c001c0fd:	74 66                	je     c001c165 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0ff:	83 ec 0c             	sub    esp,0xc
c001c102:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c109:	e8 60 fb ff ff       	call   c001bc6e <SoundChannel::getVolume()>
c001c10e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c112:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c118:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c11c:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c120:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c124:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c12a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c12e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c135:	e8 72 fc ff ff       	call   c001bdac <SoundChannel::unbuffer(float*, int, int)>
c001c13a:	83 c4 20             	add    esp,0x20
c001c13d:	31 d2                	xor    edx,edx
c001c13f:	39 c2                	cmp    edx,eax
c001c141:	7d 1c                	jge    c001c15f <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c143:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c147:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c14b:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c14e:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c154:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c158:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c15c:	42                   	inc    edx
c001c15d:	eb e0                	jmp    c001c13f <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c15f:	39 c7                	cmp    edi,eax
c001c161:	7e 02                	jle    c001c165 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c163:	89 c7                	mov    edi,eax
c001c165:	43                   	inc    ebx
c001c166:	83 fb 20             	cmp    ebx,0x20
c001c169:	0f 85 5b ff ff ff    	jne    c001c0ca <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c16f:	83 c4 1c             	add    esp,0x1c
c001c172:	89 f8                	mov    eax,edi
c001c174:	5b                   	pop    ebx
c001c175:	5e                   	pop    esi
c001c176:	5f                   	pop    edi
c001c177:	5d                   	pop    ebp
c001c178:	c3                   	ret    
c001c179:	90                   	nop

c001c17a <PCI::open(int, int, void*)>:
c001c17a:	83 ec 18             	sub    esp,0x18
c001c17d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c181:	8b 10                	mov    edx,DWORD PTR [eax]
c001c183:	50                   	push   eax
c001c184:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c187:	31 c0                	xor    eax,eax
c001c189:	83 c4 1c             	add    esp,0x1c
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <PCI::close(int, int, void*)>:
c001c18e:	31 c0                	xor    eax,eax
c001c190:	c3                   	ret    
c001c191:	90                   	nop

c001c192 <PCI::PCI()>:
c001c192:	83 ec 0c             	sub    esp,0xc
c001c195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c199:	83 ec 08             	sub    esp,0x8
c001c19c:	68 80 34 02 c0       	push   0xc0023480
c001c1a1:	50                   	push   eax
c001c1a2:	e8 f7 3c ff ff       	call   c000fe9e <Bus::Bus(char const*)>
c001c1a7:	83 c4 10             	add    esp,0x10
c001c1aa:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b3:	89 10                	mov    DWORD PTR [eax],edx
c001c1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1bf:	31 d2                	xor    edx,edx
c001c1c1:	88 c2                	mov    dl,al
c001c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1d8:	31 d2                	xor    edx,edx
c001c1da:	88 c2                	mov    dl,al
c001c1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1ef:	8d 50 01             	lea    edx,[eax+0x1]
c001c1f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1f6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c1fc:	31 d2                	xor    edx,edx
c001c1fe:	88 c2                	mov    dl,al
c001c200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c204:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c208:	83 c9 c0             	or     ecx,0xffffffc0
c001c20b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c20f:	90                   	nop
c001c210:	83 c4 0c             	add    esp,0xc
c001c213:	c3                   	ret    

c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c214:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c218:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c21d:	c1 e0 10             	shl    eax,0x10
c001c220:	89 ca                	mov    edx,ecx
c001c222:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c228:	09 d0                	or     eax,edx
c001c22a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c22f:	c1 e2 08             	shl    edx,0x8
c001c232:	09 d0                	or     eax,edx
c001c234:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c239:	c1 e2 0b             	shl    edx,0xb
c001c23c:	09 d0                	or     eax,edx
c001c23e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c243:	0d 00 00 00 80       	or     eax,0x80000000
c001c248:	ef                   	out    dx,eax
c001c249:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c24e:	ed                   	in     eax,dx
c001c24f:	83 e1 02             	and    ecx,0x2
c001c252:	0f b6 c9             	movzx  ecx,cl
c001c255:	c1 e1 03             	shl    ecx,0x3
c001c258:	d3 e8                	shr    eax,cl
c001c25a:	c3                   	ret    
c001c25b:	90                   	nop

c001c25c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c25c:	6a 00                	push   0x0
c001c25e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c263:	50                   	push   eax
c001c264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c269:	50                   	push   eax
c001c26a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26f:	50                   	push   eax
c001c270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c274:	e8 9b ff ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c279:	83 c4 14             	add    esp,0x14
c001c27c:	c3                   	ret    
c001c27d:	90                   	nop

c001c27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c27e:	6a 0e                	push   0xe
c001c280:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c285:	50                   	push   eax
c001c286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c28b:	50                   	push   eax
c001c28c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c291:	50                   	push   eax
c001c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c296:	e8 79 ff ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c29b:	83 c4 14             	add    esp,0x14
c001c29e:	0f b6 c0             	movzx  eax,al
c001c2a1:	c3                   	ret    

c001c2a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2a2:	55                   	push   ebp
c001c2a3:	57                   	push   edi
c001c2a4:	56                   	push   esi
c001c2a5:	53                   	push   ebx
c001c2a6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2ab:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2b0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2b5:	6a 0a                	push   0xa
c001c2b7:	56                   	push   esi
c001c2b8:	55                   	push   ebp
c001c2b9:	57                   	push   edi
c001c2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2be:	e8 51 ff ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c3:	6a 0a                	push   0xa
c001c2c5:	89 c3                	mov    ebx,eax
c001c2c7:	56                   	push   esi
c001c2c8:	55                   	push   ebp
c001c2c9:	57                   	push   edi
c001c2ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2ce:	e8 41 ff ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d3:	83 c4 28             	add    esp,0x28
c001c2d6:	0f b6 db             	movzx  ebx,bl
c001c2d9:	25 00 ff 00 00       	and    eax,0xff00
c001c2de:	09 d8                	or     eax,ebx
c001c2e0:	5b                   	pop    ebx
c001c2e1:	5e                   	pop    esi
c001c2e2:	5f                   	pop    edi
c001c2e3:	5d                   	pop    ebp
c001c2e4:	c3                   	ret    
c001c2e5:	90                   	nop

c001c2e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2e6:	6a 08                	push   0x8
c001c2e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2ed:	50                   	push   eax
c001c2ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f3:	50                   	push   eax
c001c2f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f9:	50                   	push   eax
c001c2fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2fe:	e8 11 ff ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c303:	83 c4 14             	add    esp,0x14
c001c306:	0f b6 c4             	movzx  eax,ah
c001c309:	c3                   	ret    

c001c30a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c30a:	6a 08                	push   0x8
c001c30c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c311:	50                   	push   eax
c001c312:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c317:	50                   	push   eax
c001c318:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31d:	50                   	push   eax
c001c31e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c322:	e8 ed fe ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c327:	83 c4 14             	add    esp,0x14
c001c32a:	c3                   	ret    
c001c32b:	90                   	nop

c001c32c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c32c:	6a 3c                	push   0x3c
c001c32e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c333:	50                   	push   eax
c001c334:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c339:	50                   	push   eax
c001c33a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c33f:	50                   	push   eax
c001c340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c344:	e8 cb fe ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c349:	83 c4 14             	add    esp,0x14
c001c34c:	c3                   	ret    
c001c34d:	90                   	nop

c001c34e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c34e:	6a 18                	push   0x18
c001c350:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c355:	50                   	push   eax
c001c356:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c35b:	50                   	push   eax
c001c35c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c361:	50                   	push   eax
c001c362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c366:	e8 a9 fe ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c36b:	83 c4 14             	add    esp,0x14
c001c36e:	0f b6 c4             	movzx  eax,ah
c001c371:	c3                   	ret    

c001c372 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c372:	55                   	push   ebp
c001c373:	57                   	push   edi
c001c374:	56                   	push   esi
c001c375:	53                   	push   ebx
c001c376:	50                   	push   eax
c001c377:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c37b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c380:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c387:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c38c:	8d 43 12             	lea    eax,[ebx+0x12]
c001c38f:	83 c3 10             	add    ebx,0x10
c001c392:	0f b6 c0             	movzx  eax,al
c001c395:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c39a:	50                   	push   eax
c001c39b:	51                   	push   ecx
c001c39c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3a0:	57                   	push   edi
c001c3a1:	55                   	push   ebp
c001c3a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3a6:	e8 69 fe ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3ab:	0f b6 db             	movzx  ebx,bl
c001c3ae:	53                   	push   ebx
c001c3af:	89 c6                	mov    esi,eax
c001c3b1:	c1 e6 10             	shl    esi,0x10
c001c3b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3b8:	51                   	push   ecx
c001c3b9:	57                   	push   edi
c001c3ba:	55                   	push   ebp
c001c3bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3bf:	e8 50 fe ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3c4:	83 c4 2c             	add    esp,0x2c
c001c3c7:	0f b7 c0             	movzx  eax,ax
c001c3ca:	5b                   	pop    ebx
c001c3cb:	09 f0                	or     eax,esi
c001c3cd:	5e                   	pop    esi
c001c3ce:	5f                   	pop    edi
c001c3cf:	5d                   	pop    ebp
c001c3d0:	c3                   	ret    
c001c3d1:	90                   	nop

c001c3d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3d2:	53                   	push   ebx
c001c3d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3d8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3dd:	c1 e1 10             	shl    ecx,0x10
c001c3e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3e4:	25 fc 00 00 00       	and    eax,0xfc
c001c3e9:	09 c1                	or     ecx,eax
c001c3eb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3f0:	c1 e0 08             	shl    eax,0x8
c001c3f3:	09 c1                	or     ecx,eax
c001c3f5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c3fa:	c1 e0 0b             	shl    eax,0xb
c001c3fd:	09 c1                	or     ecx,eax
c001c3ff:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c405:	89 c8                	mov    eax,ecx
c001c407:	ef                   	out    dx,eax
c001c408:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c40d:	ed                   	in     eax,dx
c001c40e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c413:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c418:	74 0a                	je     c001c424 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c41a:	0f b7 d8             	movzx  ebx,ax
c001c41d:	89 d0                	mov    eax,edx
c001c41f:	c1 e0 10             	shl    eax,0x10
c001c422:	eb 05                	jmp    c001c429 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c424:	66 31 c0             	xor    ax,ax
c001c427:	89 d3                	mov    ebx,edx
c001c429:	09 c3                	or     ebx,eax
c001c42b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c430:	89 c8                	mov    eax,ecx
c001c432:	ef                   	out    dx,eax
c001c433:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c438:	89 d8                	mov    eax,ebx
c001c43a:	ef                   	out    dx,eax
c001c43b:	5b                   	pop    ebx
c001c43c:	c3                   	ret    
c001c43d:	90                   	nop

c001c43e <PCI::checkBus(unsigned char)>:
c001c43e:	56                   	push   esi
c001c43f:	31 f6                	xor    esi,esi
c001c441:	53                   	push   ebx
c001c442:	51                   	push   ecx
c001c443:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c447:	52                   	push   edx
c001c448:	56                   	push   esi
c001c449:	46                   	inc    esi
c001c44a:	0f b6 c3             	movzx  eax,bl
c001c44d:	50                   	push   eax
c001c44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c452:	e8 4d 03 00 00       	call   c001c7a4 <PCI::checkDevice(unsigned char, unsigned char)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	83 fe 20             	cmp    esi,0x20
c001c45d:	75 e8                	jne    c001c447 <PCI::checkBus(unsigned char)+0x9>
c001c45f:	58                   	pop    eax
c001c460:	5b                   	pop    ebx
c001c461:	5e                   	pop    esi
c001c462:	c3                   	ret    
c001c463:	90                   	nop

c001c464 <PCI::foundDevice(PCIDeviceInfo)>:
c001c464:	55                   	push   ebp
c001c465:	57                   	push   edi
c001c466:	56                   	push   esi
c001c467:	53                   	push   ebx
c001c468:	83 ec 1c             	sub    esp,0x1c
c001c46b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c46f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c475:	0f 84 51 01 00 00    	je     c001c5cc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c47b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c47f:	66 81 f9 06 04       	cmp    cx,0x406
c001c484:	75 2c                	jne    c001c4b2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c486:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c48b:	50                   	push   eax
c001c48c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c491:	50                   	push   eax
c001c492:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c497:	50                   	push   eax
c001c498:	56                   	push   esi
c001c499:	e8 b0 fe ff ff       	call   c001c34e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c49e:	0f b6 c0             	movzx  eax,al
c001c4a1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4a5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4a9:	83 c4 2c             	add    esp,0x2c
c001c4ac:	5b                   	pop    ebx
c001c4ad:	5e                   	pop    esi
c001c4ae:	5f                   	pop    edi
c001c4af:	5d                   	pop    ebp
c001c4b0:	eb 8c                	jmp    c001c43e <PCI::checkBus(unsigned char)>
c001c4b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4b6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4c0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4c8:	88 d3                	mov    bl,dl
c001c4ca:	85 c0                	test   eax,eax
c001c4cc:	74 33                	je     c001c501 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4d1:	85 d2                	test   edx,edx
c001c4d3:	74 28                	je     c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4d5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4db:	31 ef                	xor    edi,ebp
c001c4dd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4e3:	75 18                	jne    c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4e9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4ef:	75 0c                	jne    c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4f7:	0f 84 cf 00 00 00    	je     c001c5cc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c4fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ff:	eb c9                	jmp    c001c4ca <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c501:	66 81 f9 01 06       	cmp    cx,0x601
c001c506:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c50a:	75 18                	jne    c001c524 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c50c:	83 ec 0c             	sub    esp,0xc
c001c50f:	68 58 01 00 00       	push   0x158
c001c514:	e8 c1 2b ff ff       	call   c000f0da <operator new(unsigned long)>
c001c519:	59                   	pop    ecx
c001c51a:	89 c5                	mov    ebp,eax
c001c51c:	5f                   	pop    edi
c001c51d:	68 88 34 02 c0       	push   0xc0023488
c001c522:	eb 7d                	jmp    c001c5a1 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c524:	66 81 f9 01 01       	cmp    cx,0x101
c001c529:	75 60                	jne    c001c58b <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c52b:	83 ec 0c             	sub    esp,0xc
c001c52e:	68 70 02 00 00       	push   0x270
c001c533:	e8 a2 2b ff ff       	call   c000f0da <operator new(unsigned long)>
c001c538:	89 04 24             	mov    DWORD PTR [esp],eax
c001c53b:	89 c5                	mov    ebp,eax
c001c53d:	e8 26 03 00 00       	call   c001c868 <IDE::IDE()>
c001c542:	58                   	pop    eax
c001c543:	5a                   	pop    edx
c001c544:	55                   	push   ebp
c001c545:	56                   	push   esi
c001c546:	e8 d9 40 ff ff       	call   c0010624 <Device::addChild(Device*)>
c001c54b:	83 ec 1c             	sub    esp,0x1c
c001c54e:	b9 09 00 00 00       	mov    ecx,0x9
c001c553:	fc                   	cld    
c001c554:	89 e7                	mov    edi,esp
c001c556:	89 de                	mov    esi,ebx
c001c558:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c55a:	55                   	push   ebp
c001c55b:	e8 a2 3f ff ff       	call   c0010502 <Device::preOpenPCI(PCIDeviceInfo)>
c001c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c563:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c567:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c56f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c577:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c57f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c582:	83 c4 4c             	add    esp,0x4c
c001c585:	5b                   	pop    ebx
c001c586:	5e                   	pop    esi
c001c587:	5f                   	pop    edi
c001c588:	5d                   	pop    ebp
c001c589:	ff e0                	jmp    eax
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	68 58 01 00 00       	push   0x158
c001c593:	e8 42 2b ff ff       	call   c000f0da <operator new(unsigned long)>
c001c598:	59                   	pop    ecx
c001c599:	89 c5                	mov    ebp,eax
c001c59b:	5f                   	pop    edi
c001c59c:	68 a7 34 02 c0       	push   0xc00234a7
c001c5a1:	55                   	push   ebp
c001c5a2:	e8 69 43 ff ff       	call   c0010910 <DriverlessDevice::DriverlessDevice(char const*)>
c001c5a7:	58                   	pop    eax
c001c5a8:	5a                   	pop    edx
c001c5a9:	55                   	push   ebp
c001c5aa:	56                   	push   esi
c001c5ab:	e8 74 40 ff ff       	call   c0010624 <Device::addChild(Device*)>
c001c5b0:	b9 09 00 00 00       	mov    ecx,0x9
c001c5b5:	fc                   	cld    
c001c5b6:	89 df                	mov    edi,ebx
c001c5b8:	89 de                	mov    esi,ebx
c001c5ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5bc:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5c0:	83 c4 2c             	add    esp,0x2c
c001c5c3:	5b                   	pop    ebx
c001c5c4:	5e                   	pop    esi
c001c5c5:	5f                   	pop    edi
c001c5c6:	5d                   	pop    ebp
c001c5c7:	e9 36 3f ff ff       	jmp    c0010502 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5cc:	83 c4 1c             	add    esp,0x1c
c001c5cf:	5b                   	pop    ebx
c001c5d0:	5e                   	pop    esi
c001c5d1:	5f                   	pop    edi
c001c5d2:	5d                   	pop    ebp
c001c5d3:	c3                   	ret    

c001c5d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5d4:	55                   	push   ebp
c001c5d5:	57                   	push   edi
c001c5d6:	56                   	push   esi
c001c5d7:	53                   	push   ebx
c001c5d8:	83 ec 5c             	sub    esp,0x5c
c001c5db:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5e3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5eb:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5f3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5f8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c5fd:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c602:	6a 0c                	push   0xc
c001c604:	55                   	push   ebp
c001c605:	53                   	push   ebx
c001c606:	57                   	push   edi
c001c607:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c60e:	e8 01 fc ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c613:	83 c4 0c             	add    esp,0xc
c001c616:	6a 00                	push   0x0
c001c618:	68 c1 34 02 c0       	push   0xc00234c1
c001c61d:	e8 ed 2b ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001c622:	55                   	push   ebp
c001c623:	53                   	push   ebx
c001c624:	57                   	push   edi
c001c625:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c62c:	e8 71 fc ff ff       	call   c001c2a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c631:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c636:	83 c4 20             	add    esp,0x20
c001c639:	55                   	push   ebp
c001c63a:	53                   	push   ebx
c001c63b:	57                   	push   edi
c001c63c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c640:	e8 e7 fc ff ff       	call   c001c32c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c645:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c64c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c650:	55                   	push   ebp
c001c651:	53                   	push   ebx
c001c652:	57                   	push   edi
c001c653:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c65a:	e8 b5 fb ff ff       	call   c001c214 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c65f:	0f b6 c4             	movzx  eax,ah
c001c662:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c666:	83 c4 18             	add    esp,0x18
c001c669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c66d:	68 d5 34 02 c0       	push   0xc00234d5
c001c672:	e8 98 2b ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001c677:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c67b:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c67f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c684:	83 c4 10             	add    esp,0x10
c001c687:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c68d:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c694:	74 6c                	je     c001c702 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c696:	31 f6                	xor    esi,esi
c001c698:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c69e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6a4:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6aa:	7e 56                	jle    c001c702 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6ac:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6af:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6b6:	39 cb                	cmp    ebx,ecx
c001c6b8:	75 45                	jne    c001c6ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6ba:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6c1:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6c5:	75 38                	jne    c001c6ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6c7:	83 ec 0c             	sub    esp,0xc
c001c6ca:	68 e4 34 02 c0       	push   0xc00234e4
c001c6cf:	e8 3b 2b ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001c6d4:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6da:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6e0:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6e8:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6ec:	52                   	push   edx
c001c6ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6f1:	53                   	push   ebx
c001c6f2:	68 09 35 02 c0       	push   0xc0023509
c001c6f7:	e8 13 2b ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001c6fc:	83 c4 20             	add    esp,0x20
c001c6ff:	46                   	inc    esi
c001c700:	eb 96                	jmp    c001c698 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c702:	31 d2                	xor    edx,edx
c001c704:	83 ec 0c             	sub    esp,0xc
c001c707:	55                   	push   ebp
c001c708:	53                   	push   ebx
c001c709:	57                   	push   edi
c001c70a:	52                   	push   edx
c001c70b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c70f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c716:	e8 57 fc ff ff       	call   c001c372 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c71b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c71f:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c723:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c727:	42                   	inc    edx
c001c728:	83 c4 20             	add    esp,0x20
c001c72b:	83 fa 06             	cmp    edx,0x6
c001c72e:	75 d4                	jne    c001c704 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c730:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c734:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c738:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c73c:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c740:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c744:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c748:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c74d:	86 e0                	xchg   al,ah
c001c74f:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c754:	55                   	push   ebp
c001c755:	53                   	push   ebx
c001c756:	57                   	push   edi
c001c757:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c75b:	e8 86 fb ff ff       	call   c001c2e6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c760:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c764:	55                   	push   ebp
c001c765:	53                   	push   ebx
c001c766:	57                   	push   edi
c001c767:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c76e:	e8 e9 fa ff ff       	call   c001c25c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c773:	83 ec 0c             	sub    esp,0xc
c001c776:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c77b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c77f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c783:	b9 09 00 00 00       	mov    ecx,0x9
c001c788:	fc                   	cld    
c001c789:	89 e7                	mov    edi,esp
c001c78b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c78d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c794:	e8 cb fc ff ff       	call   c001c464 <PCI::foundDevice(PCIDeviceInfo)>
c001c799:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c79f:	5b                   	pop    ebx
c001c7a0:	5e                   	pop    esi
c001c7a1:	5f                   	pop    edi
c001c7a2:	5d                   	pop    ebp
c001c7a3:	c3                   	ret    

c001c7a4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7a4:	55                   	push   ebp
c001c7a5:	57                   	push   edi
c001c7a6:	56                   	push   esi
c001c7a7:	53                   	push   ebx
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7b0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7b4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7b9:	6a 00                	push   0x0
c001c7bb:	56                   	push   esi
c001c7bc:	57                   	push   edi
c001c7bd:	55                   	push   ebp
c001c7be:	e8 99 fa ff ff       	call   c001c25c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7c3:	6a 00                	push   0x0
c001c7c5:	56                   	push   esi
c001c7c6:	57                   	push   edi
c001c7c7:	55                   	push   ebp
c001c7c8:	e8 07 fe ff ff       	call   c001c5d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7cd:	83 c4 20             	add    esp,0x20
c001c7d0:	6a 00                	push   0x0
c001c7d2:	56                   	push   esi
c001c7d3:	57                   	push   edi
c001c7d4:	55                   	push   ebp
c001c7d5:	e8 a4 fa ff ff       	call   c001c27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	84 c0                	test   al,al
c001c7df:	79 27                	jns    c001c808 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7e1:	bb 01 00 00 00       	mov    ebx,0x1
c001c7e6:	53                   	push   ebx
c001c7e7:	56                   	push   esi
c001c7e8:	57                   	push   edi
c001c7e9:	55                   	push   ebp
c001c7ea:	e8 6d fa ff ff       	call   c001c25c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	66 40                	inc    ax
c001c7f4:	74 0c                	je     c001c802 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7f6:	53                   	push   ebx
c001c7f7:	56                   	push   esi
c001c7f8:	57                   	push   edi
c001c7f9:	55                   	push   ebp
c001c7fa:	e8 d5 fd ff ff       	call   c001c5d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	43                   	inc    ebx
c001c803:	83 fb 08             	cmp    ebx,0x8
c001c806:	75 de                	jne    c001c7e6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c808:	83 c4 0c             	add    esp,0xc
c001c80b:	5b                   	pop    ebx
c001c80c:	5e                   	pop    esi
c001c80d:	5f                   	pop    edi
c001c80e:	5d                   	pop    ebp
c001c80f:	c3                   	ret    

c001c810 <PCI::detect()>:
c001c810:	56                   	push   esi
c001c811:	53                   	push   ebx
c001c812:	53                   	push   ebx
c001c813:	31 db                	xor    ebx,ebx
c001c815:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c819:	6a 00                	push   0x0
c001c81b:	6a 00                	push   0x0
c001c81d:	6a 00                	push   0x0
c001c81f:	56                   	push   esi
c001c820:	e8 59 fa ff ff       	call   c001c27e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c825:	83 c4 10             	add    esp,0x10
c001c828:	a8 80                	test   al,0x80
c001c82a:	75 21                	jne    c001c84d <PCI::detect()+0x3d>
c001c82c:	51                   	push   ecx
c001c82d:	51                   	push   ecx
c001c82e:	6a 00                	push   0x0
c001c830:	56                   	push   esi
c001c831:	e8 08 fc ff ff       	call   c001c43e <PCI::checkBus(unsigned char)>
c001c836:	83 c4 10             	add    esp,0x10
c001c839:	eb 24                	jmp    c001c85f <PCI::detect()+0x4f>
c001c83b:	52                   	push   edx
c001c83c:	52                   	push   edx
c001c83d:	53                   	push   ebx
c001c83e:	43                   	inc    ebx
c001c83f:	56                   	push   esi
c001c840:	e8 f9 fb ff ff       	call   c001c43e <PCI::checkBus(unsigned char)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	83 fb 08             	cmp    ebx,0x8
c001c84b:	74 12                	je     c001c85f <PCI::detect()+0x4f>
c001c84d:	53                   	push   ebx
c001c84e:	6a 00                	push   0x0
c001c850:	6a 00                	push   0x0
c001c852:	56                   	push   esi
c001c853:	e8 04 fa ff ff       	call   c001c25c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	66 40                	inc    ax
c001c85d:	74 dc                	je     c001c83b <PCI::detect()+0x2b>
c001c85f:	58                   	pop    eax
c001c860:	5b                   	pop    ebx
c001c861:	5e                   	pop    esi
c001c862:	c3                   	ret    
c001c863:	90                   	nop

c001c864 <IDE::close(int, int, void*)>:
c001c864:	83 c8 ff             	or     eax,0xffffffff
c001c867:	c3                   	ret    

c001c868 <IDE::IDE()>:
c001c868:	83 ec 0c             	sub    esp,0xc
c001c86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86f:	83 ec 08             	sub    esp,0x8
c001c872:	68 50 35 02 c0       	push   0xc0023550
c001c877:	50                   	push   eax
c001c878:	e8 29 41 ff ff       	call   c00109a6 <HardDiskController::HardDiskController(char const*)>
c001c87d:	83 c4 10             	add    esp,0x10
c001c880:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c889:	89 10                	mov    DWORD PTR [eax],edx
c001c88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c896:	90                   	nop
c001c897:	83 c4 0c             	add    esp,0xc
c001c89a:	c3                   	ret    
c001c89b:	90                   	nop

c001c89c <IDE::prepareInterrupt(unsigned char)>:
c001c89c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8a5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8ad:	c3                   	ret    

c001c8ae <selectDrive(unsigned char, unsigned char)>:
c001c8ae:	c3                   	ret    
c001c8af:	90                   	nop

c001c8b0 <IDE::getBase(unsigned char)>:
c001c8b0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8b9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8c1:	c3                   	ret    

c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8c2:	55                   	push   ebp
c001c8c3:	57                   	push   edi
c001c8c4:	56                   	push   esi
c001c8c5:	53                   	push   ebx
c001c8c6:	83 ec 1c             	sub    esp,0x1c
c001c8c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8d9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8dc:	80 f9 03             	cmp    cl,0x3
c001c8df:	77 51                	ja     c001c932 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8e1:	0f b6 f2             	movzx  esi,dl
c001c8e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8e8:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8eb:	0f b6 db             	movzx  ebx,bl
c001c8ee:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8f2:	83 ca 80             	or     edx,0xffffff80
c001c8f5:	0f b6 d2             	movzx  edx,dl
c001c8f8:	52                   	push   edx
c001c8f9:	6a 0c                	push   0xc
c001c8fb:	56                   	push   esi
c001c8fc:	57                   	push   edi
c001c8fd:	e8 c0 ff ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c902:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c90b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c90f:	ee                   	out    dx,al
c001c910:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c915:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c919:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c91d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c921:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c929:	83 c4 2c             	add    esp,0x2c
c001c92c:	5b                   	pop    ebx
c001c92d:	5e                   	pop    esi
c001c92e:	5f                   	pop    edi
c001c92f:	5d                   	pop    ebp
c001c930:	eb 90                	jmp    c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c932:	80 fb 07             	cmp    bl,0x7
c001c935:	77 12                	ja     c001c949 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c937:	0f b6 d2             	movzx  edx,dl
c001c93a:	0f b6 db             	movzx  ebx,bl
c001c93d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c945:	89 da                	mov    edx,ebx
c001c947:	eb 2f                	jmp    c001c978 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c949:	80 fb 0d             	cmp    bl,0xd
c001c94c:	77 13                	ja     c001c961 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c94e:	0f b6 d2             	movzx  edx,dl
c001c951:	0f b6 db             	movzx  ebx,bl
c001c954:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c95b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c95f:	eb 17                	jmp    c001c978 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c961:	80 fb 15             	cmp    bl,0x15
c001c964:	77 13                	ja     c001c979 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c966:	0f b6 d2             	movzx  edx,dl
c001c969:	0f b6 db             	movzx  ebx,bl
c001c96c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c974:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c978:	ee                   	out    dx,al
c001c979:	83 c4 1c             	add    esp,0x1c
c001c97c:	5b                   	pop    ebx
c001c97d:	5e                   	pop    esi
c001c97e:	5f                   	pop    edi
c001c97f:	5d                   	pop    ebp
c001c980:	c3                   	ret    
c001c981:	90                   	nop

c001c982 <IDE::read(unsigned char, unsigned char)>:
c001c982:	55                   	push   ebp
c001c983:	57                   	push   edi
c001c984:	56                   	push   esi
c001c985:	53                   	push   ebx
c001c986:	83 ec 1c             	sub    esp,0x1c
c001c989:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c98d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c991:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c995:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c998:	3c 03                	cmp    al,0x3
c001c99a:	77 43                	ja     c001c9df <IDE::read(unsigned char, unsigned char)+0x5d>
c001c99c:	0f b6 f2             	movzx  esi,dl
c001c99f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9a2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9a6:	83 c8 80             	or     eax,0xffffff80
c001c9a9:	0f b6 c0             	movzx  eax,al
c001c9ac:	50                   	push   eax
c001c9ad:	6a 0c                	push   0xc
c001c9af:	56                   	push   esi
c001c9b0:	57                   	push   edi
c001c9b1:	e8 0c ff ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9bb:	0f b6 c3             	movzx  eax,bl
c001c9be:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9c2:	ec                   	in     al,dx
c001c9c3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9c8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9cc:	52                   	push   edx
c001c9cd:	6a 0c                	push   0xc
c001c9cf:	56                   	push   esi
c001c9d0:	57                   	push   edi
c001c9d1:	e8 ec fe ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d6:	83 c4 20             	add    esp,0x20
c001c9d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9dd:	eb 49                	jmp    c001ca28 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9df:	80 fb 07             	cmp    bl,0x7
c001c9e2:	77 12                	ja     c001c9f6 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9e4:	0f b6 d2             	movzx  edx,dl
c001c9e7:	0f b6 c3             	movzx  eax,bl
c001c9ea:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9f2:	89 c2                	mov    edx,eax
c001c9f4:	eb 31                	jmp    c001ca27 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9f6:	80 fb 0d             	cmp    bl,0xd
c001c9f9:	77 13                	ja     c001ca0e <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9fb:	0f b6 d2             	movzx  edx,dl
c001c9fe:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca05:	0f b6 d3             	movzx  edx,bl
c001ca08:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca0c:	eb 19                	jmp    c001ca27 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca0e:	31 c0                	xor    eax,eax
c001ca10:	80 fb 15             	cmp    bl,0x15
c001ca13:	77 13                	ja     c001ca28 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca15:	0f b6 d2             	movzx  edx,dl
c001ca18:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca20:	0f b6 d3             	movzx  edx,bl
c001ca23:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca27:	ec                   	in     al,dx
c001ca28:	83 c4 1c             	add    esp,0x1c
c001ca2b:	5b                   	pop    ebx
c001ca2c:	5e                   	pop    esi
c001ca2d:	5f                   	pop    edi
c001ca2e:	5d                   	pop    ebp
c001ca2f:	c3                   	ret    

c001ca30 <IDE::waitInterrupt(unsigned char)>:
c001ca30:	57                   	push   edi
c001ca31:	56                   	push   esi
c001ca32:	31 f6                	xor    esi,esi
c001ca34:	53                   	push   ebx
c001ca35:	83 ec 10             	sub    esp,0x10
c001ca38:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca3c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca49:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca50:	84 db                	test   bl,bl
c001ca52:	75 37                	jne    c001ca8b <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca54:	52                   	push   edx
c001ca55:	6a 0c                	push   0xc
c001ca57:	50                   	push   eax
c001ca58:	57                   	push   edi
c001ca59:	e8 24 ff ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001ca5e:	83 c4 10             	add    esp,0x10
c001ca61:	a8 01                	test   al,0x1
c001ca63:	75 2e                	jne    c001ca93 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca65:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca6b:	75 16                	jne    c001ca83 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca6d:	83 fe 32             	cmp    esi,0x32
c001ca70:	7e 11                	jle    c001ca83 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca72:	50                   	push   eax
c001ca73:	50                   	push   eax
c001ca74:	6a 00                	push   0x0
c001ca76:	68 80 96 98 00       	push   0x989680
c001ca7b:	e8 25 c5 ff ff       	call   c0018fa5 <nanoSleep(unsigned long long)>
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	83 fe 3c             	cmp    esi,0x3c
c001ca86:	74 0b                	je     c001ca93 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca88:	46                   	inc    esi
c001ca89:	eb b9                	jmp    c001ca44 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca8b:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	88 d8                	mov    al,bl
c001ca98:	5b                   	pop    ebx
c001ca99:	5e                   	pop    esi
c001ca9a:	5f                   	pop    edi
c001ca9b:	c3                   	ret    

c001ca9c <ideChannel0IRQHandler(regs*, void*)>:
c001ca9c:	83 ec 10             	sub    esp,0x10
c001ca9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caa3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001caaa:	6a 07                	push   0x7
c001caac:	6a 00                	push   0x0
c001caae:	50                   	push   eax
c001caaf:	e8 ce fe ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001cab4:	83 c4 1c             	add    esp,0x1c
c001cab7:	c3                   	ret    

c001cab8 <ideChannel1IRQHandler(regs*, void*)>:
c001cab8:	83 ec 10             	sub    esp,0x10
c001cabb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cabf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cac6:	6a 07                	push   0x7
c001cac8:	6a 01                	push   0x1
c001caca:	50                   	push   eax
c001cacb:	e8 b2 fe ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001cad0:	83 c4 1c             	add    esp,0x1c
c001cad3:	c3                   	ret    

c001cad4 <IDE::enableIRQs(unsigned char, bool)>:
c001cad4:	57                   	push   edi
c001cad5:	56                   	push   esi
c001cad6:	be 04 00 00 00       	mov    esi,0x4
c001cadb:	53                   	push   ebx
c001cadc:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cae1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cae6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caea:	0f 94 c0             	sete   al
c001caed:	01 c0                	add    eax,eax
c001caef:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001caf6:	0f b6 c0             	movzx  eax,al
c001caf9:	50                   	push   eax
c001cafa:	6a 0c                	push   0xc
c001cafc:	57                   	push   edi
c001cafd:	53                   	push   ebx
c001cafe:	e8 bf fd ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb03:	83 c4 10             	add    esp,0x10
c001cb06:	50                   	push   eax
c001cb07:	6a 0c                	push   0xc
c001cb09:	57                   	push   edi
c001cb0a:	53                   	push   ebx
c001cb0b:	e8 72 fe ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	4e                   	dec    esi
c001cb14:	75 f0                	jne    c001cb06 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb16:	5b                   	pop    ebx
c001cb17:	5e                   	pop    esi
c001cb18:	5f                   	pop    edi
c001cb19:	c3                   	ret    

c001cb1a <IDE::open(int, int, void*)>:
c001cb1a:	55                   	push   ebp
c001cb1b:	57                   	push   edi
c001cb1c:	56                   	push   esi
c001cb1d:	53                   	push   ebx
c001cb1e:	83 ec 1c             	sub    esp,0x1c
c001cb21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb25:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb2e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb37:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb3e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb45:	0f 85 b2 02 00 00    	jne    c001cdfd <IDE::open(int, int, void*)+0x2e3>
c001cb4b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb51:	88 04 24             	mov    BYTE PTR [esp],al
c001cb54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb57:	83 e0 7f             	and    eax,0x7f
c001cb5a:	83 f8 05             	cmp    eax,0x5
c001cb5d:	74 05                	je     c001cb64 <IDE::open(int, int, void*)+0x4a>
c001cb5f:	83 f8 0f             	cmp    eax,0xf
c001cb62:	75 32                	jne    c001cb96 <IDE::open(int, int, void*)+0x7c>
c001cb64:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb6a:	83 e0 fc             	and    eax,0xfffffffc
c001cb6d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb74:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb7a:	83 e0 fc             	and    eax,0xfffffffc
c001cb7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb84:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb8a:	83 e0 fc             	and    eax,0xfffffffc
c001cb8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb94:	eb 14                	jmp    c001cbaa <IDE::open(int, int, void*)+0x90>
c001cb96:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cba0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbaa:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbb1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbbc:	89 c6                	mov    esi,eax
c001cbbe:	89 e8                	mov    eax,ebp
c001cbc0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbc5:	c1 e6 10             	shl    esi,0x10
c001cbc8:	89 fa                	mov    edx,edi
c001cbca:	c1 e0 0b             	shl    eax,0xb
c001cbcd:	09 f0                	or     eax,esi
c001cbcf:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbd6:	c1 e6 08             	shl    esi,0x8
c001cbd9:	09 c6                	or     esi,eax
c001cbdb:	89 f0                	mov    eax,esi
c001cbdd:	0d 08 00 00 80       	or     eax,0x80000008
c001cbe2:	ef                   	out    dx,eax
c001cbe3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbe8:	89 ca                	mov    edx,ecx
c001cbea:	ed                   	in     eax,dx
c001cbeb:	c1 e8 10             	shr    eax,0x10
c001cbee:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbf3:	0f 84 f3 00 00 00    	je     c001ccec <IDE::open(int, int, void*)+0x1d2>
c001cbf9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cbff:	89 fa                	mov    edx,edi
c001cc01:	89 f0                	mov    eax,esi
c001cc03:	ef                   	out    dx,eax
c001cc04:	b0 fe                	mov    al,0xfe
c001cc06:	89 ca                	mov    edx,ecx
c001cc08:	ee                   	out    dx,al
c001cc09:	89 f0                	mov    eax,esi
c001cc0b:	89 fa                	mov    edx,edi
c001cc0d:	ef                   	out    dx,eax
c001cc0e:	89 ca                	mov    edx,ecx
c001cc10:	ed                   	in     eax,dx
c001cc11:	3c fe                	cmp    al,0xfe
c001cc13:	0f 85 a9 00 00 00    	jne    c001ccc2 <IDE::open(int, int, void*)+0x1a8>
c001cc19:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc1f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc26:	74 33                	je     c001cc5b <IDE::open(int, int, void*)+0x141>
c001cc28:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc2e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc32:	40                   	inc    eax
c001cc33:	83 ec 0c             	sub    esp,0xc
c001cc36:	0f b6 c0             	movzx  eax,al
c001cc39:	50                   	push   eax
c001cc3a:	55                   	push   ebp
c001cc3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc3f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc45:	51                   	push   ecx
c001cc46:	e8 1d 72 ff ff       	call   c0013e68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc4b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc50:	83 c4 1c             	add    esp,0x1c
c001cc53:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc59:	eb 0a                	jmp    c001cc65 <IDE::open(int, int, void*)+0x14b>
c001cc5b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc65:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc6c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc73:	c1 e1 10             	shl    ecx,0x10
c001cc76:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc7b:	c1 e0 08             	shl    eax,0x8
c001cc7e:	89 fa                	mov    edx,edi
c001cc80:	09 c1                	or     ecx,eax
c001cc82:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc89:	c1 e0 0b             	shl    eax,0xb
c001cc8c:	09 c1                	or     ecx,eax
c001cc8e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc94:	89 c8                	mov    eax,ecx
c001cc96:	ef                   	out    dx,eax
c001cc97:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc9c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cca2:	89 f2                	mov    edx,esi
c001cca4:	ee                   	out    dx,al
c001cca5:	89 c8                	mov    eax,ecx
c001cca7:	89 fa                	mov    edx,edi
c001cca9:	ef                   	out    dx,eax
c001ccaa:	89 f2                	mov    edx,esi
c001ccac:	ed                   	in     eax,dx
c001ccad:	0f b6 c0             	movzx  eax,al
c001ccb0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccb6:	74 44                	je     c001ccfc <IDE::open(int, int, void*)+0x1e2>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	68 68 35 02 c0       	push   0xc0023568
c001ccc0:	eb 32                	jmp    c001ccf4 <IDE::open(int, int, void*)+0x1da>
c001ccc2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cccb:	75 15                	jne    c001cce2 <IDE::open(int, int, void*)+0x1c8>
c001cccd:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccd1:	74 06                	je     c001ccd9 <IDE::open(int, int, void*)+0x1bf>
c001ccd3:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001ccd7:	75 09                	jne    c001cce2 <IDE::open(int, int, void*)+0x1c8>
c001ccd9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cce0:	eb 1a                	jmp    c001ccfc <IDE::open(int, int, void*)+0x1e2>
c001cce2:	83 ec 0c             	sub    esp,0xc
c001cce5:	68 70 35 02 c0       	push   0xc0023570
c001ccea:	eb 08                	jmp    c001ccf4 <IDE::open(int, int, void*)+0x1da>
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	68 a1 35 02 c0       	push   0xc00235a1
c001ccf4:	e8 45 8d ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd03:	79 1a                	jns    c001cd1f <IDE::open(int, int, void*)+0x205>
c001cd05:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd0b:	83 e0 fc             	and    eax,0xfffffffc
c001cd0e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd15:	83 c0 08             	add    eax,0x8
c001cd18:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd25:	89 c2                	mov    edx,eax
c001cd27:	83 e2 0f             	and    edx,0xf
c001cd2a:	66 83 fa 08          	cmp    dx,0x8
c001cd2e:	75 0a                	jne    c001cd3a <IDE::open(int, int, void*)+0x220>
c001cd30:	83 e8 02             	sub    eax,0x2
c001cd33:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd3a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd40:	89 c2                	mov    edx,eax
c001cd42:	83 e2 0f             	and    edx,0xf
c001cd45:	66 83 fa 08          	cmp    dx,0x8
c001cd49:	75 0a                	jne    c001cd55 <IDE::open(int, int, void*)+0x23b>
c001cd4b:	83 e8 02             	sub    eax,0x2
c001cd4e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd55:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd5c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd63:	89 d0                	mov    eax,edx
c001cd65:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd68:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd6c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd70:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd73:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd78:	0f b6 c9             	movzx  ecx,cl
c001cd7b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd82:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd85:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd89:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd8d:	8d 50 02             	lea    edx,[eax+0x2]
c001cd90:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd95:	0f b6 d2             	movzx  edx,dl
c001cd98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd9e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cda1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cda5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cda9:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdac:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdb1:	0f b6 c9             	movzx  ecx,cl
c001cdb4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdbd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdc1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdc5:	8d 50 04             	lea    edx,[eax+0x4]
c001cdc8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdce:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdd3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdda:	66 85 f6             	test   si,si
c001cddd:	74 3e                	je     c001ce1d <IDE::open(int, int, void*)+0x303>
c001cddf:	0f b6 d2             	movzx  edx,dl
c001cde2:	83 c0 05             	add    eax,0x5
c001cde5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cde8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdf0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdf6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdfb:	eb 20                	jmp    c001ce1d <IDE::open(int, int, void*)+0x303>
c001cdfd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce07:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce11:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce18:	e9 02 ff ff ff       	jmp    c001cd1f <IDE::open(int, int, void*)+0x205>
c001ce1d:	52                   	push   edx
c001ce1e:	52                   	push   edx
c001ce1f:	6a 00                	push   0x0
c001ce21:	53                   	push   ebx
c001ce22:	e8 75 fa ff ff       	call   c001c89c <IDE::prepareInterrupt(unsigned char)>
c001ce27:	59                   	pop    ecx
c001ce28:	5e                   	pop    esi
c001ce29:	6a 01                	push   0x1
c001ce2b:	53                   	push   ebx
c001ce2c:	e8 6b fa ff ff       	call   c001c89c <IDE::prepareInterrupt(unsigned char)>
c001ce31:	83 c4 0c             	add    esp,0xc
c001ce34:	6a 00                	push   0x0
c001ce36:	6a 00                	push   0x0
c001ce38:	53                   	push   ebx
c001ce39:	e8 96 fc ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001ce3e:	83 c4 0c             	add    esp,0xc
c001ce41:	6a 00                	push   0x0
c001ce43:	6a 01                	push   0x1
c001ce45:	53                   	push   ebx
c001ce46:	e8 89 fc ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce55:	74 40                	je     c001ce97 <IDE::open(int, int, void*)+0x37d>
c001ce57:	83 ec 0c             	sub    esp,0xc
c001ce5a:	68 cb 35 02 c0       	push   0xc00235cb
c001ce5f:	e8 ab 23 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001ce64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce67:	6a 01                	push   0x1
c001ce69:	68 9c ca 01 c0       	push   0xc001ca9c
c001ce6e:	6a 0e                	push   0xe
c001ce70:	53                   	push   ebx
c001ce71:	e8 02 37 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce76:	83 c4 14             	add    esp,0x14
c001ce79:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce7f:	53                   	push   ebx
c001ce80:	6a 01                	push   0x1
c001ce82:	68 b8 ca 01 c0       	push   0xc001cab8
c001ce87:	6a 0f                	push   0xf
c001ce89:	53                   	push   ebx
c001ce8a:	e8 e9 36 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce8f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce95:	eb 4a                	jmp    c001cee1 <IDE::open(int, int, void*)+0x3c7>
c001ce97:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cea1:	50                   	push   eax
c001cea2:	6a 0f                	push   0xf
c001cea4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceaa:	68 e7 35 02 c0       	push   0xc00235e7
c001ceaf:	e8 5b 23 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001ceb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb7:	6a 00                	push   0x0
c001ceb9:	68 9c ca 01 c0       	push   0xc001ca9c
c001cebe:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cec4:	53                   	push   ebx
c001cec5:	e8 ae 36 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ceca:	83 c4 14             	add    esp,0x14
c001cecd:	53                   	push   ebx
c001cece:	6a 00                	push   0x0
c001ced0:	68 b8 ca 01 c0       	push   0xc001cab8
c001ced5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cedb:	53                   	push   ebx
c001cedc:	e8 97 36 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cee1:	83 c4 20             	add    esp,0x20
c001cee4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee6:	83 ec 0c             	sub    esp,0xc
c001cee9:	53                   	push   ebx
c001ceea:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ceed:	83 c4 0c             	add    esp,0xc
c001cef0:	6a 07                	push   0x7
c001cef2:	6a 00                	push   0x0
c001cef4:	53                   	push   ebx
c001cef5:	e8 88 fa ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001cefa:	83 c4 0c             	add    esp,0xc
c001cefd:	6a 07                	push   0x7
c001ceff:	6a 01                	push   0x1
c001cf01:	53                   	push   ebx
c001cf02:	e8 7b fa ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001cf07:	83 c4 0c             	add    esp,0xc
c001cf0a:	6a 01                	push   0x1
c001cf0c:	6a 00                	push   0x0
c001cf0e:	53                   	push   ebx
c001cf0f:	e8 c0 fb ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001cf14:	83 c4 0c             	add    esp,0xc
c001cf17:	6a 01                	push   0x1
c001cf19:	6a 01                	push   0x1
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 b3 fb ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001cf21:	83 c4 2c             	add    esp,0x2c
c001cf24:	31 c0                	xor    eax,eax
c001cf26:	5b                   	pop    ebx
c001cf27:	5e                   	pop    esi
c001cf28:	5f                   	pop    edi
c001cf29:	5d                   	pop    ebp
c001cf2a:	c3                   	ret    
c001cf2b:	90                   	nop

c001cf2c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf2c:	55                   	push   ebp
c001cf2d:	57                   	push   edi
c001cf2e:	56                   	push   esi
c001cf2f:	53                   	push   ebx
c001cf30:	83 ec 1c             	sub    esp,0x1c
c001cf33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf3f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf43:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf46:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf4a:	80 fa 03             	cmp    dl,0x3
c001cf4d:	77 5d                	ja     c001cfac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf4f:	0f b6 db             	movzx  ebx,bl
c001cf52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf5a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf5d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf61:	83 ca 80             	or     edx,0xffffff80
c001cf64:	0f b6 d2             	movzx  edx,dl
c001cf67:	52                   	push   edx
c001cf68:	6a 0c                	push   0xc
c001cf6a:	53                   	push   ebx
c001cf6b:	56                   	push   esi
c001cf6c:	e8 51 f9 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf75:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf7a:	0f b6 c0             	movzx  eax,al
c001cf7d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf81:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf85:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf87:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf8c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf90:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf94:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf98:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfa0:	83 c4 2c             	add    esp,0x2c
c001cfa3:	5b                   	pop    ebx
c001cfa4:	5e                   	pop    esi
c001cfa5:	5f                   	pop    edi
c001cfa6:	5d                   	pop    ebp
c001cfa7:	e9 16 f9 ff ff       	jmp    c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfac:	3c 07                	cmp    al,0x7
c001cfae:	77 10                	ja     c001cfc0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfb0:	0f b6 db             	movzx  ebx,bl
c001cfb3:	0f b6 d0             	movzx  edx,al
c001cfb6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfbe:	eb 2d                	jmp    c001cfed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfc0:	3c 0d                	cmp    al,0xd
c001cfc2:	77 13                	ja     c001cfd7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfc4:	0f b6 db             	movzx  ebx,bl
c001cfc7:	0f b6 c0             	movzx  eax,al
c001cfca:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfd1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfd5:	eb 16                	jmp    c001cfed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfd7:	3c 15                	cmp    al,0x15
c001cfd9:	77 14                	ja     c001cfef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfdb:	0f b6 db             	movzx  ebx,bl
c001cfde:	0f b6 c0             	movzx  eax,al
c001cfe1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfe9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cfef:	83 c4 1c             	add    esp,0x1c
c001cff2:	5b                   	pop    ebx
c001cff3:	5e                   	pop    esi
c001cff4:	5f                   	pop    edi
c001cff5:	5d                   	pop    ebp
c001cff6:	c3                   	ret    
c001cff7:	90                   	nop

c001cff8 <IDE::detect()>:
c001cff8:	55                   	push   ebp
c001cff9:	57                   	push   edi
c001cffa:	56                   	push   esi
c001cffb:	53                   	push   ebx
c001cffc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d002:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d009:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d010:	0f 85 c0 02 00 00    	jne    c001d2d6 <IDE::detect()+0x2de>
c001d016:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d01d:	31 f6                	xor    esi,esi
c001d01f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d027:	31 ed                	xor    ebp,ebp
c001d029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d02d:	c1 e0 06             	shl    eax,0x6
c001d030:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d038:	89 e8                	mov    eax,ebp
c001d03a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d03e:	c1 e0 04             	shl    eax,0x4
c001d041:	83 c8 a0             	or     eax,0xffffffa0
c001d044:	0f b6 c0             	movzx  eax,al
c001d047:	50                   	push   eax
c001d048:	6a 06                	push   0x6
c001d04a:	56                   	push   esi
c001d04b:	53                   	push   ebx
c001d04c:	e8 71 f8 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d051:	83 c4 0c             	add    esp,0xc
c001d054:	6a 0c                	push   0xc
c001d056:	56                   	push   esi
c001d057:	53                   	push   ebx
c001d058:	e8 25 f9 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d05d:	83 c4 0c             	add    esp,0xc
c001d060:	6a 0c                	push   0xc
c001d062:	56                   	push   esi
c001d063:	53                   	push   ebx
c001d064:	e8 19 f9 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d069:	83 c4 0c             	add    esp,0xc
c001d06c:	6a 0c                	push   0xc
c001d06e:	56                   	push   esi
c001d06f:	53                   	push   ebx
c001d070:	e8 0d f9 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d075:	83 c4 0c             	add    esp,0xc
c001d078:	6a 0c                	push   0xc
c001d07a:	56                   	push   esi
c001d07b:	53                   	push   ebx
c001d07c:	e8 01 f9 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d081:	68 ec 00 00 00       	push   0xec
c001d086:	6a 07                	push   0x7
c001d088:	56                   	push   esi
c001d089:	53                   	push   ebx
c001d08a:	e8 33 f8 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d08f:	83 c4 1c             	add    esp,0x1c
c001d092:	6a 0c                	push   0xc
c001d094:	56                   	push   esi
c001d095:	53                   	push   ebx
c001d096:	e8 e7 f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d09b:	83 c4 0c             	add    esp,0xc
c001d09e:	6a 0c                	push   0xc
c001d0a0:	56                   	push   esi
c001d0a1:	53                   	push   ebx
c001d0a2:	e8 db f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d0a7:	83 c4 0c             	add    esp,0xc
c001d0aa:	6a 0c                	push   0xc
c001d0ac:	56                   	push   esi
c001d0ad:	53                   	push   ebx
c001d0ae:	e8 cf f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d0b3:	83 c4 0c             	add    esp,0xc
c001d0b6:	6a 0c                	push   0xc
c001d0b8:	56                   	push   esi
c001d0b9:	53                   	push   ebx
c001d0ba:	e8 c3 f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d0bf:	83 c4 0c             	add    esp,0xc
c001d0c2:	6a 0c                	push   0xc
c001d0c4:	56                   	push   esi
c001d0c5:	53                   	push   ebx
c001d0c6:	e8 b7 f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	84 c0                	test   al,al
c001d0d0:	0f 84 8b 01 00 00    	je     c001d261 <IDE::detect()+0x269>
c001d0d6:	31 ff                	xor    edi,edi
c001d0d8:	50                   	push   eax
c001d0d9:	6a 0c                	push   0xc
c001d0db:	56                   	push   esi
c001d0dc:	53                   	push   ebx
c001d0dd:	e8 a0 f8 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d0e2:	83 c4 10             	add    esp,0x10
c001d0e5:	a8 01                	test   al,0x1
c001d0e7:	0f 85 8e 01 00 00    	jne    c001d27b <IDE::detect()+0x283>
c001d0ed:	84 c0                	test   al,al
c001d0ef:	78 04                	js     c001d0f5 <IDE::detect()+0xfd>
c001d0f1:	a8 08                	test   al,0x8
c001d0f3:	75 27                	jne    c001d11c <IDE::detect()+0x124>
c001d0f5:	47                   	inc    edi
c001d0f6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0fc:	7e da                	jle    c001d0d8 <IDE::detect()+0xe0>
c001d0fe:	50                   	push   eax
c001d0ff:	50                   	push   eax
c001d100:	6a 00                	push   0x0
c001d102:	68 40 4b 4c 00       	push   0x4c4b40
c001d107:	e8 99 be ff ff       	call   c0018fa5 <nanoSleep(unsigned long long)>
c001d10c:	83 c4 10             	add    esp,0x10
c001d10f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d115:	75 c1                	jne    c001d0d8 <IDE::detect()+0xe0>
c001d117:	e9 5f 01 00 00       	jmp    c001d27b <IDE::detect()+0x283>
c001d11c:	31 c9                	xor    ecx,ecx
c001d11e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d122:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d126:	83 ec 0c             	sub    esp,0xc
c001d129:	68 80 00 00 00       	push   0x80
c001d12e:	57                   	push   edi
c001d12f:	6a 00                	push   0x0
c001d131:	56                   	push   esi
c001d132:	53                   	push   ebx
c001d133:	e8 f4 fd ff ff       	call   c001cf2c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d138:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d13c:	c1 e0 06             	shl    eax,0x6
c001d13f:	01 d8                	add    eax,ebx
c001d141:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d146:	89 d1                	mov    ecx,edx
c001d148:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d14f:	89 f2                	mov    edx,esi
c001d151:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d158:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d15e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d162:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d168:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d16c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d173:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d17b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d182:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d18a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d190:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d197:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d19d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1a5:	83 c4 20             	add    esp,0x20
c001d1a8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1ab:	83 c7 02             	add    edi,0x2
c001d1ae:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1b4:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1b7:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1bd:	83 c0 02             	add    eax,0x2
c001d1c0:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1c4:	75 e2                	jne    c001d1a8 <IDE::detect()+0x1b0>
c001d1c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1ca:	c1 e0 06             	shl    eax,0x6
c001d1cd:	01 d8                	add    eax,ebx
c001d1cf:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1d5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1dc:	66 c1 ea 09          	shr    dx,0x9
c001d1e0:	83 e2 01             	and    edx,0x1
c001d1e3:	84 c9                	test   cl,cl
c001d1e5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1eb:	75 2f                	jne    c001d21c <IDE::detect()+0x224>
c001d1ed:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1f3:	85 c0                	test   eax,eax
c001d1f5:	74 66                	je     c001d25d <IDE::detect()+0x265>
c001d1f7:	50                   	push   eax
c001d1f8:	55                   	push   ebp
c001d1f9:	56                   	push   esi
c001d1fa:	68 03 36 02 c0       	push   0xc0023603
c001d1ff:	e8 0b 20 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d204:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d20b:	e8 ca 1e ff ff       	call   c000f0da <operator new(unsigned long)>
c001d210:	89 c7                	mov    edi,eax
c001d212:	89 04 24             	mov    DWORD PTR [esp],eax
c001d215:	e8 f4 02 00 00       	call   c001d50e <ATA::ATA()>
c001d21a:	eb 28                	jmp    c001d244 <IDE::detect()+0x24c>
c001d21c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d222:	55                   	push   ebp
c001d223:	56                   	push   esi
c001d224:	68 32 36 02 c0       	push   0xc0023632
c001d229:	e8 e1 1f ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d22e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d235:	e8 a0 1e ff ff       	call   c000f0da <operator new(unsigned long)>
c001d23a:	89 c7                	mov    edi,eax
c001d23c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d23f:	e8 1e 09 00 00       	call   c001db62 <ATAPI::ATAPI()>
c001d244:	5a                   	pop    edx
c001d245:	59                   	pop    ecx
c001d246:	57                   	push   edi
c001d247:	53                   	push   ebx
c001d248:	e8 d7 33 ff ff       	call   c0010624 <Device::addChild(Device*)>
c001d24d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d24f:	53                   	push   ebx
c001d250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d254:	6a 00                	push   0x0
c001d256:	57                   	push   edi
c001d257:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d25a:	83 c4 20             	add    esp,0x20
c001d25d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d261:	4d                   	dec    ebp
c001d262:	74 0a                	je     c001d26e <IDE::detect()+0x276>
c001d264:	bd 01 00 00 00       	mov    ebp,0x1
c001d269:	e9 bb fd ff ff       	jmp    c001d029 <IDE::detect()+0x31>
c001d26e:	4e                   	dec    esi
c001d26f:	74 65                	je     c001d2d6 <IDE::detect()+0x2de>
c001d271:	be 01 00 00 00       	mov    esi,0x1
c001d276:	e9 ac fd ff ff       	jmp    c001d027 <IDE::detect()+0x2f>
c001d27b:	50                   	push   eax
c001d27c:	6a 04                	push   0x4
c001d27e:	56                   	push   esi
c001d27f:	53                   	push   ebx
c001d280:	e8 fd f6 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d285:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d289:	83 c4 0c             	add    esp,0xc
c001d28c:	6a 05                	push   0x5
c001d28e:	56                   	push   esi
c001d28f:	53                   	push   ebx
c001d290:	e8 ed f6 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d29c:	80 fa 14             	cmp    dl,0x14
c001d29f:	74 2f                	je     c001d2d0 <IDE::detect()+0x2d8>
c001d2a1:	80 fa 69             	cmp    dl,0x69
c001d2a4:	75 bb                	jne    c001d261 <IDE::detect()+0x269>
c001d2a6:	3c 96                	cmp    al,0x96
c001d2a8:	75 b7                	jne    c001d261 <IDE::detect()+0x269>
c001d2aa:	68 a1 00 00 00       	push   0xa1
c001d2af:	6a 07                	push   0x7
c001d2b1:	56                   	push   esi
c001d2b2:	53                   	push   ebx
c001d2b3:	e8 0a f6 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2b8:	5f                   	pop    edi
c001d2b9:	58                   	pop    eax
c001d2ba:	6a 00                	push   0x0
c001d2bc:	68 40 42 0f 00       	push   0xf4240
c001d2c1:	e8 df bc ff ff       	call   c0018fa5 <nanoSleep(unsigned long long)>
c001d2c6:	83 c4 10             	add    esp,0x10
c001d2c9:	b1 01                	mov    cl,0x1
c001d2cb:	e9 4e fe ff ff       	jmp    c001d11e <IDE::detect()+0x126>
c001d2d0:	3c eb                	cmp    al,0xeb
c001d2d2:	75 cd                	jne    c001d2a1 <IDE::detect()+0x2a9>
c001d2d4:	eb d4                	jmp    c001d2aa <IDE::detect()+0x2b2>
c001d2d6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2dc:	5b                   	pop    ebx
c001d2dd:	5e                   	pop    esi
c001d2de:	5f                   	pop    edi
c001d2df:	5d                   	pop    ebp
c001d2e0:	c3                   	ret    
c001d2e1:	90                   	nop

c001d2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2e2:	55                   	push   ebp
c001d2e3:	57                   	push   edi
c001d2e4:	56                   	push   esi
c001d2e5:	53                   	push   ebx
c001d2e6:	83 ec 1c             	sub    esp,0x1c
c001d2e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2f9:	88 c3                	mov    bl,al
c001d2fb:	84 c0                	test   al,al
c001d2fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d301:	0f 84 67 01 00 00    	je     c001d46e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d307:	83 ec 0c             	sub    esp,0xc
c001d30a:	68 63 36 02 c0       	push   0xc0023663
c001d30f:	e8 fb 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d314:	83 c4 10             	add    esp,0x10
c001d317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d31b:	3c 01                	cmp    al,0x1
c001d31d:	75 17                	jne    c001d336 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d31f:	83 ec 0c             	sub    esp,0xc
c001d322:	b3 13                	mov    bl,0x13
c001d324:	68 6f 36 02 c0       	push   0xc002366f
c001d329:	e8 e1 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d32e:	83 c4 10             	add    esp,0x10
c001d331:	e9 25 01 00 00       	jmp    c001d45b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d336:	3c 02                	cmp    al,0x2
c001d338:	0f 85 ef 00 00 00    	jne    c001d42d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d33e:	01 f6                	add    esi,esi
c001d340:	52                   	push   edx
c001d341:	09 ee                	or     esi,ebp
c001d343:	6a 01                	push   0x1
c001d345:	89 f0                	mov    eax,esi
c001d347:	0f b6 f0             	movzx  esi,al
c001d34a:	c1 e6 06             	shl    esi,0x6
c001d34d:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d355:	50                   	push   eax
c001d356:	57                   	push   edi
c001d357:	e8 26 f6 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d35c:	83 c4 10             	add    esp,0x10
c001d35f:	89 c6                	mov    esi,eax
c001d361:	a8 01                	test   al,0x1
c001d363:	74 12                	je     c001d377 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d365:	83 ec 0c             	sub    esp,0xc
c001d368:	b3 07                	mov    bl,0x7
c001d36a:	68 84 36 02 c0       	push   0xc0023684
c001d36f:	e8 9b 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d374:	83 c4 10             	add    esp,0x10
c001d377:	f7 c6 02 00 00 00    	test   esi,0x2
c001d37d:	74 12                	je     c001d391 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d37f:	83 ec 0c             	sub    esp,0xc
c001d382:	b3 03                	mov    bl,0x3
c001d384:	68 a2 36 02 c0       	push   0xc00236a2
c001d389:	e8 81 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d38e:	83 c4 10             	add    esp,0x10
c001d391:	f7 c6 04 00 00 00    	test   esi,0x4
c001d397:	74 12                	je     c001d3ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	b3 14                	mov    bl,0x14
c001d39e:	68 c2 36 02 c0       	push   0xc00236c2
c001d3a3:	e8 67 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d3a8:	83 c4 10             	add    esp,0x10
c001d3ab:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3b1:	74 12                	je     c001d3c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3b3:	83 ec 0c             	sub    esp,0xc
c001d3b6:	b3 03                	mov    bl,0x3
c001d3b8:	68 a2 36 02 c0       	push   0xc00236a2
c001d3bd:	e8 4d 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d3c2:	83 c4 10             	add    esp,0x10
c001d3c5:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3cb:	74 12                	je     c001d3df <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3cd:	83 ec 0c             	sub    esp,0xc
c001d3d0:	b3 15                	mov    bl,0x15
c001d3d2:	68 da 36 02 c0       	push   0xc00236da
c001d3d7:	e8 33 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d3dc:	83 c4 10             	add    esp,0x10
c001d3df:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3e5:	74 12                	je     c001d3f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	b3 03                	mov    bl,0x3
c001d3ec:	68 a2 36 02 c0       	push   0xc00236a2
c001d3f1:	e8 19 1e ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	f7 c6 40 00 00 00    	test   esi,0x40
c001d3ff:	74 12                	je     c001d413 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d401:	83 ec 0c             	sub    esp,0xc
c001d404:	b3 16                	mov    bl,0x16
c001d406:	68 f4 36 02 c0       	push   0xc00236f4
c001d40b:	e8 ff 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	89 f0                	mov    eax,esi
c001d415:	84 c0                	test   al,al
c001d417:	79 42                	jns    c001d45b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d419:	83 ec 0c             	sub    esp,0xc
c001d41c:	b3 0d                	mov    bl,0xd
c001d41e:	68 15 37 02 c0       	push   0xc0023715
c001d423:	e8 e7 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d428:	83 c4 10             	add    esp,0x10
c001d42b:	eb 2e                	jmp    c001d45b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d42d:	3c 03                	cmp    al,0x3
c001d42f:	75 14                	jne    c001d445 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d431:	83 ec 0c             	sub    esp,0xc
c001d434:	b3 17                	mov    bl,0x17
c001d436:	68 29 37 02 c0       	push   0xc0023729
c001d43b:	e8 cf 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	eb 16                	jmp    c001d45b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d445:	3c 04                	cmp    al,0x4
c001d447:	75 12                	jne    c001d45b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d449:	83 ec 0c             	sub    esp,0xc
c001d44c:	b3 08                	mov    bl,0x8
c001d44e:	68 3f 37 02 c0       	push   0xc002373f
c001d453:	e8 b7 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d458:	83 c4 10             	add    esp,0x10
c001d45b:	50                   	push   eax
c001d45c:	50                   	push   eax
c001d45d:	0f b6 c3             	movzx  eax,bl
c001d460:	50                   	push   eax
c001d461:	68 57 37 02 c0       	push   0xc0023757
c001d466:	e8 a4 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d46b:	83 c4 10             	add    esp,0x10
c001d46e:	83 c4 1c             	add    esp,0x1c
c001d471:	88 d8                	mov    al,bl
c001d473:	5b                   	pop    ebx
c001d474:	5e                   	pop    esi
c001d475:	5f                   	pop    edi
c001d476:	5d                   	pop    ebp
c001d477:	c3                   	ret    

c001d478 <IDE::polling(unsigned char, unsigned int)>:
c001d478:	55                   	push   ebp
c001d479:	bd 04 00 00 00       	mov    ebp,0x4
c001d47e:	57                   	push   edi
c001d47f:	56                   	push   esi
c001d480:	53                   	push   ebx
c001d481:	83 ec 0c             	sub    esp,0xc
c001d484:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d488:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d48c:	52                   	push   edx
c001d48d:	6a 0c                	push   0xc
c001d48f:	0f b6 f3             	movzx  esi,bl
c001d492:	56                   	push   esi
c001d493:	57                   	push   edi
c001d494:	e8 e9 f4 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	4d                   	dec    ebp
c001d49d:	75 ed                	jne    c001d48c <IDE::polling(unsigned char, unsigned int)+0x14>
c001d49f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4a4:	50                   	push   eax
c001d4a5:	6a 0c                	push   0xc
c001d4a7:	56                   	push   esi
c001d4a8:	57                   	push   edi
c001d4a9:	e8 d4 f4 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d4ae:	83 c4 10             	add    esp,0x10
c001d4b1:	a8 01                	test   al,0x1
c001d4b3:	74 12                	je     c001d4c7 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	68 71 37 02 c0       	push   0xc0023771
c001d4bd:	e8 4d 1d ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	eb 17                	jmp    c001d4de <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4c7:	a8 20                	test   al,0x20
c001d4c9:	75 0f                	jne    c001d4da <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4cb:	4b                   	dec    ebx
c001d4cc:	74 10                	je     c001d4de <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4ce:	84 c0                	test   al,al
c001d4d0:	78 d2                	js     c001d4a4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d2:	a8 08                	test   al,0x8
c001d4d4:	74 ce                	je     c001d4a4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d6:	31 c0                	xor    eax,eax
c001d4d8:	eb 06                	jmp    c001d4e0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4da:	b0 01                	mov    al,0x1
c001d4dc:	eb 02                	jmp    c001d4e0 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4de:	b0 02                	mov    al,0x2
c001d4e0:	83 c4 0c             	add    esp,0xc
c001d4e3:	5b                   	pop    ebx
c001d4e4:	5e                   	pop    esi
c001d4e5:	5f                   	pop    edi
c001d4e6:	5d                   	pop    ebp
c001d4e7:	c3                   	ret    

c001d4e8 <ATA::close(int, int, void*)>:
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4f5:	85 c0                	test   eax,eax
c001d4f7:	74 0c                	je     c001d505 <ATA::close(int, int, void*)+0x1d>
c001d4f9:	83 ec 0c             	sub    esp,0xc
c001d4fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4fe:	50                   	push   eax
c001d4ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	31 c0                	xor    eax,eax
c001d507:	83 c4 0c             	add    esp,0xc
c001d50a:	c3                   	ret    
c001d50b:	90                   	nop

c001d50c <ATA::powerSaving(PowerSavingLevel)>:
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <ATA::ATA()>:
c001d50e:	83 ec 0c             	sub    esp,0xc
c001d511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d515:	83 ec 04             	sub    esp,0x4
c001d518:	68 00 02 00 00       	push   0x200
c001d51d:	68 b4 37 02 c0       	push   0xc00237b4
c001d522:	50                   	push   eax
c001d523:	e8 02 35 ff ff       	call   c0010a2a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d528:	83 c4 10             	add    esp,0x10
c001d52b:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d534:	89 10                	mov    DWORD PTR [eax],edx
c001d536:	90                   	nop
c001d537:	83 c4 0c             	add    esp,0xc
c001d53a:	c3                   	ret    
c001d53b:	90                   	nop

c001d53c <ATA::flush(bool)>:
c001d53c:	53                   	push   ebx
c001d53d:	83 ec 08             	sub    esp,0x8
c001d540:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d545:	19 c0                	sbb    eax,eax
c001d547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d54b:	83 e0 fd             	and    eax,0xfffffffd
c001d54e:	05 ea 00 00 00       	add    eax,0xea
c001d553:	50                   	push   eax
c001d554:	6a 07                	push   0x7
c001d556:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d55d:	50                   	push   eax
c001d55e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d564:	e8 59 f3 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d569:	83 c4 0c             	add    esp,0xc
c001d56c:	6a 00                	push   0x0
c001d56e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d575:	50                   	push   eax
c001d576:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d57c:	e8 f7 fe ff ff       	call   c001d478 <IDE::polling(unsigned char, unsigned int)>
c001d581:	83 c4 18             	add    esp,0x18
c001d584:	5b                   	pop    ebx
c001d585:	c3                   	ret    

c001d586 <ATA::readyForCommand()>:
c001d586:	56                   	push   esi
c001d587:	53                   	push   ebx
c001d588:	31 db                	xor    ebx,ebx
c001d58a:	50                   	push   eax
c001d58b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d58f:	50                   	push   eax
c001d590:	6a 0c                	push   0xc
c001d592:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d599:	50                   	push   eax
c001d59a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5a0:	e8 dd f3 ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	a8 88                	test   al,0x88
c001d5aa:	74 23                	je     c001d5cf <ATA::readyForCommand()+0x49>
c001d5ac:	43                   	inc    ebx
c001d5ad:	83 fb 63             	cmp    ebx,0x63
c001d5b0:	7e dd                	jle    c001d58f <ATA::readyForCommand()+0x9>
c001d5b2:	51                   	push   ecx
c001d5b3:	51                   	push   ecx
c001d5b4:	6a 00                	push   0x0
c001d5b6:	68 40 42 0f 00       	push   0xf4240
c001d5bb:	e8 e5 b9 ff ff       	call   c0018fa5 <nanoSleep(unsigned long long)>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5c9:	75 c4                	jne    c001d58f <ATA::readyForCommand()+0x9>
c001d5cb:	31 c0                	xor    eax,eax
c001d5cd:	eb 02                	jmp    c001d5d1 <ATA::readyForCommand()+0x4b>
c001d5cf:	b0 01                	mov    al,0x1
c001d5d1:	5a                   	pop    edx
c001d5d2:	5b                   	pop    ebx
c001d5d3:	5e                   	pop    esi
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <ATA::access(unsigned long long, int, void*, bool)>:
c001d5d6:	55                   	push   ebp
c001d5d7:	57                   	push   edi
c001d5d8:	56                   	push   esi
c001d5d9:	53                   	push   ebx
c001d5da:	83 ec 2c             	sub    esp,0x2c
c001d5dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5e8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5ec:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5ef:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d5fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d601:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d607:	c1 e0 06             	shl    eax,0x6
c001d60a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d60e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d616:	74 5d                	je     c001d675 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d618:	89 fa                	mov    edx,edi
c001d61a:	89 f0                	mov    eax,esi
c001d61c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d620:	c1 ea 1c             	shr    edx,0x1c
c001d623:	89 d1                	mov    ecx,edx
c001d625:	09 c1                	or     ecx,eax
c001d627:	74 25                	je     c001d64e <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d629:	31 ed                	xor    ebp,ebp
c001d62b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d632:	89 fa                	mov    edx,edi
c001d634:	89 f0                	mov    eax,esi
c001d636:	0f ad d0             	shrd   eax,edx,cl
c001d639:	d3 ea                	shr    edx,cl
c001d63b:	f6 c1 20             	test   cl,0x20
c001d63e:	74 02                	je     c001d642 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d640:	89 d0                	mov    eax,edx
c001d642:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d646:	45                   	inc    ebp
c001d647:	83 fd 06             	cmp    ebp,0x6
c001d64a:	75 df                	jne    c001d62b <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d64c:	eb 73                	jmp    c001d6c1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d64e:	89 f0                	mov    eax,esi
c001d650:	89 fa                	mov    edx,edi
c001d652:	0f ac d0 10          	shrd   eax,edx,0x10
c001d656:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d65b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d65f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d666:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d66b:	c1 ee 18             	shr    esi,0x18
c001d66e:	bf 01 00 00 00       	mov    edi,0x1
c001d673:	eb 53                	jmp    c001d6c8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d675:	6a 00                	push   0x0
c001d677:	6a 3f                	push   0x3f
c001d679:	57                   	push   edi
c001d67a:	56                   	push   esi
c001d67b:	e8 8c 1f 00 00       	call   c001f60c <__umoddi3>
c001d680:	83 c4 10             	add    esp,0x10
c001d683:	40                   	inc    eax
c001d684:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d688:	6a 00                	push   0x0
c001d68a:	68 f0 03 00 00       	push   0x3f0
c001d68f:	57                   	push   edi
c001d690:	56                   	push   esi
c001d691:	e8 76 1e 00 00       	call   c001f50c <__udivdi3>
c001d696:	83 c4 10             	add    esp,0x10
c001d699:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d69e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6a5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6aa:	6a 00                	push   0x0
c001d6ac:	6a 3f                	push   0x3f
c001d6ae:	57                   	push   edi
c001d6af:	31 ff                	xor    edi,edi
c001d6b1:	56                   	push   esi
c001d6b2:	e8 55 1e 00 00       	call   c001f50c <__udivdi3>
c001d6b7:	89 c6                	mov    esi,eax
c001d6b9:	83 c4 10             	add    esp,0x10
c001d6bc:	83 e6 0f             	and    esi,0xf
c001d6bf:	eb 07                	jmp    c001d6c8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6c1:	31 f6                	xor    esi,esi
c001d6c3:	bf 02 00 00 00       	mov    edi,0x2
c001d6c8:	50                   	push   eax
c001d6c9:	6a 00                	push   0x0
c001d6cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6d2:	50                   	push   eax
c001d6d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6d7:	e8 f8 f3 ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001d6dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6df:	e8 a2 fe ff ff       	call   c001d586 <ATA::readyForCommand()>
c001d6e4:	83 c4 10             	add    esp,0x10
c001d6e7:	84 c0                	test   al,al
c001d6e9:	75 0a                	jne    c001d6f5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6eb:	be 01 00 00 00       	mov    esi,0x1
c001d6f0:	e9 79 02 00 00       	jmp    c001d96e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6f5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d6fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d701:	c1 e0 04             	shl    eax,0x4
c001d704:	09 c6                	or     esi,eax
c001d706:	89 f8                	mov    eax,edi
c001d708:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d70f:	84 c0                	test   al,al
c001d711:	75 05                	jne    c001d718 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d713:	83 ce a0             	or     esi,0xffffffa0
c001d716:	eb 03                	jmp    c001d71b <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d718:	83 ce e0             	or     esi,0xffffffe0
c001d71b:	89 f0                	mov    eax,esi
c001d71d:	0f b6 f0             	movzx  esi,al
c001d720:	56                   	push   esi
c001d721:	6a 06                	push   0x6
c001d723:	51                   	push   ecx
c001d724:	52                   	push   edx
c001d725:	e8 98 f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72a:	83 c4 10             	add    esp,0x10
c001d72d:	6a 00                	push   0x0
c001d72f:	6a 01                	push   0x1
c001d731:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d738:	50                   	push   eax
c001d739:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d73f:	e8 7e f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d744:	89 f8                	mov    eax,edi
c001d746:	83 c4 10             	add    esp,0x10
c001d749:	3c 02                	cmp    al,0x2
c001d74b:	75 6e                	jne    c001d7bb <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d74d:	6a 00                	push   0x0
c001d74f:	6a 08                	push   0x8
c001d751:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d758:	50                   	push   eax
c001d759:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d75f:	e8 5e f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d764:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d769:	50                   	push   eax
c001d76a:	6a 09                	push   0x9
c001d76c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d773:	50                   	push   eax
c001d774:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d77a:	e8 43 f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77f:	83 c4 20             	add    esp,0x20
c001d782:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d787:	50                   	push   eax
c001d788:	6a 0a                	push   0xa
c001d78a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d791:	50                   	push   eax
c001d792:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d798:	e8 25 f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7a2:	50                   	push   eax
c001d7a3:	6a 0b                	push   0xb
c001d7a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ac:	50                   	push   eax
c001d7ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7b3:	e8 0a f1 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b8:	83 c4 20             	add    esp,0x20
c001d7bb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7c0:	50                   	push   eax
c001d7c1:	6a 02                	push   0x2
c001d7c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ca:	50                   	push   eax
c001d7cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d1:	e8 ec f0 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7db:	50                   	push   eax
c001d7dc:	6a 03                	push   0x3
c001d7de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7e5:	50                   	push   eax
c001d7e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ec:	e8 d1 f0 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7f1:	83 c4 20             	add    esp,0x20
c001d7f4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7f9:	50                   	push   eax
c001d7fa:	6a 04                	push   0x4
c001d7fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d803:	50                   	push   eax
c001d804:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d80a:	e8 b3 f0 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d80f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d814:	50                   	push   eax
c001d815:	6a 05                	push   0x5
c001d817:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d81e:	50                   	push   eax
c001d81f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d825:	e8 98 f0 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d82a:	83 c4 20             	add    esp,0x20
c001d82d:	89 f8                	mov    eax,edi
c001d82f:	3c 02                	cmp    al,0x2
c001d831:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d836:	75 06                	jne    c001d83e <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d838:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d83c:	75 40                	jne    c001d87e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d83e:	89 f8                	mov    eax,edi
c001d840:	3c 02                	cmp    al,0x2
c001d842:	0f 95 c1             	setne  cl
c001d845:	74 0b                	je     c001d852 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d847:	b8 30 00 00 00       	mov    eax,0x30
c001d84c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d850:	75 31                	jne    c001d883 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d852:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d855:	83 f2 01             	xor    edx,0x1
c001d858:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d85d:	74 09                	je     c001d868 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d85f:	b8 24 00 00 00       	mov    eax,0x24
c001d864:	84 d2                	test   dl,dl
c001d866:	75 1b                	jne    c001d883 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d868:	84 c9                	test   cl,cl
c001d86a:	0f 84 7b fe ff ff    	je     c001d6eb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d870:	b8 20 00 00 00       	mov    eax,0x20
c001d875:	84 d2                	test   dl,dl
c001d877:	75 0a                	jne    c001d883 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d879:	e9 6d fe ff ff       	jmp    c001d6eb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d87e:	b8 34 00 00 00       	mov    eax,0x34
c001d883:	50                   	push   eax
c001d884:	6a 07                	push   0x7
c001d886:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d88d:	50                   	push   eax
c001d88e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d894:	e8 29 f0 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d899:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d89d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8a1:	83 c4 10             	add    esp,0x10
c001d8a4:	85 f6                	test   esi,esi
c001d8a6:	0f 84 a9 00 00 00    	je     c001d955 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8ac:	50                   	push   eax
c001d8ad:	6a 01                	push   0x1
c001d8af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8b6:	50                   	push   eax
c001d8b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8bd:	e8 b6 fb ff ff       	call   c001d478 <IDE::polling(unsigned char, unsigned int)>
c001d8c2:	83 c4 10             	add    esp,0x10
c001d8c5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8cb:	84 c0                	test   al,al
c001d8cd:	74 1d                	je     c001d8ec <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8cf:	0f b6 f0             	movzx  esi,al
c001d8d2:	56                   	push   esi
c001d8d3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8da:	0f b6 d2             	movzx  edx,dl
c001d8dd:	50                   	push   eax
c001d8de:	52                   	push   edx
c001d8df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e5:	e8 f8 f9 ff ff       	call   c001d2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8ea:	eb 7f                	jmp    c001d96b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8f1:	74 41                	je     c001d934 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8f3:	31 c9                	xor    ecx,ecx
c001d8f5:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8fd:	50                   	push   eax
c001d8fe:	50                   	push   eax
c001d8ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d906:	50                   	push   eax
c001d907:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d90d:	e8 9e ef ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001d912:	89 c2                	mov    edx,eax
c001d914:	89 e8                	mov    eax,ebp
c001d916:	66 ef                	out    dx,ax
c001d918:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d91c:	83 c4 10             	add    esp,0x10
c001d91f:	41                   	inc    ecx
c001d920:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d926:	75 cd                	jne    c001d8f5 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d928:	4e                   	dec    esi
c001d929:	81 c7 00 02 00 00    	add    edi,0x200
c001d92f:	e9 70 ff ff ff       	jmp    c001d8a4 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d934:	51                   	push   ecx
c001d935:	51                   	push   ecx
c001d936:	0f b6 d2             	movzx  edx,dl
c001d939:	52                   	push   edx
c001d93a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d940:	e8 6b ef ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001d945:	b9 00 01 00 00       	mov    ecx,0x100
c001d94a:	89 c2                	mov    edx,eax
c001d94c:	fc                   	cld    
c001d94d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	eb d3                	jmp    c001d928 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d955:	31 f6                	xor    esi,esi
c001d957:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d95b:	74 11                	je     c001d96e <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d95d:	50                   	push   eax
c001d95e:	50                   	push   eax
c001d95f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d964:	50                   	push   eax
c001d965:	53                   	push   ebx
c001d966:	e8 d1 fb ff ff       	call   c001d53c <ATA::flush(bool)>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	83 c4 2c             	add    esp,0x2c
c001d971:	89 f0                	mov    eax,esi
c001d973:	5b                   	pop    ebx
c001d974:	5e                   	pop    esi
c001d975:	5f                   	pop    edi
c001d976:	5d                   	pop    ebp
c001d977:	c3                   	ret    

c001d978 <ATA::read(unsigned long long, int, void*)>:
c001d978:	57                   	push   edi
c001d979:	b8 04 00 00 00       	mov    eax,0x4
c001d97e:	56                   	push   esi
c001d97f:	53                   	push   ebx
c001d980:	83 ec 10             	sub    esp,0x10
c001d983:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d987:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d98b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d98f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d993:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d996:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d99c:	77 3b                	ja     c001d9d9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d99e:	b8 06 00 00 00       	mov    eax,0x6
c001d9a3:	85 d2                	test   edx,edx
c001d9a5:	74 32                	je     c001d9d9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9a7:	50                   	push   eax
c001d9a8:	50                   	push   eax
c001d9a9:	6a 00                	push   0x0
c001d9ab:	52                   	push   edx
c001d9ac:	53                   	push   ebx
c001d9ad:	57                   	push   edi
c001d9ae:	56                   	push   esi
c001d9af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9b3:	e8 1e fc ff ff       	call   c001d5d6 <ATA::access(unsigned long long, int, void*, bool)>
c001d9b8:	83 c4 20             	add    esp,0x20
c001d9bb:	85 c0                	test   eax,eax
c001d9bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9c1:	75 11                	jne    c001d9d4 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9c3:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9c9:	e8 18 f6 fe ff       	call   c000cfe6 <VgaText::updateDiskUsage()>
c001d9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9d2:	eb 05                	jmp    c001d9d9 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9d4:	b8 01 00 00 00       	mov    eax,0x1
c001d9d9:	83 c4 10             	add    esp,0x10
c001d9dc:	5b                   	pop    ebx
c001d9dd:	5e                   	pop    esi
c001d9de:	5f                   	pop    edi
c001d9df:	c3                   	ret    

c001d9e0 <ATA::write(unsigned long long, int, void*)>:
c001d9e0:	57                   	push   edi
c001d9e1:	b8 04 00 00 00       	mov    eax,0x4
c001d9e6:	56                   	push   esi
c001d9e7:	53                   	push   ebx
c001d9e8:	83 ec 10             	sub    esp,0x10
c001d9eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9f3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9fb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9fe:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da04:	77 3b                	ja     c001da41 <ATA::write(unsigned long long, int, void*)+0x61>
c001da06:	b8 06 00 00 00       	mov    eax,0x6
c001da0b:	85 d2                	test   edx,edx
c001da0d:	74 32                	je     c001da41 <ATA::write(unsigned long long, int, void*)+0x61>
c001da0f:	50                   	push   eax
c001da10:	50                   	push   eax
c001da11:	6a 01                	push   0x1
c001da13:	52                   	push   edx
c001da14:	53                   	push   ebx
c001da15:	57                   	push   edi
c001da16:	56                   	push   esi
c001da17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da1b:	e8 b6 fb ff ff       	call   c001d5d6 <ATA::access(unsigned long long, int, void*, bool)>
c001da20:	83 c4 20             	add    esp,0x20
c001da23:	85 c0                	test   eax,eax
c001da25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da29:	75 11                	jne    c001da3c <ATA::write(unsigned long long, int, void*)+0x5c>
c001da2b:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da31:	e8 b0 f5 fe ff       	call   c000cfe6 <VgaText::updateDiskUsage()>
c001da36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da3a:	eb 05                	jmp    c001da41 <ATA::write(unsigned long long, int, void*)+0x61>
c001da3c:	b8 01 00 00 00       	mov    eax,0x1
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	5b                   	pop    ebx
c001da45:	5e                   	pop    esi
c001da46:	5f                   	pop    edi
c001da47:	c3                   	ret    

c001da48 <ATA::detectCHS()>:
c001da48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da4c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da52:	c1 e0 06             	shl    eax,0x6
c001da55:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da5b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da65:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da6d:	e9 cc 7f ff ff       	jmp    c0015a3e <Krnl::panic(char const*)>

c001da72 <ATA::open(int, int, void*)>:
c001da72:	53                   	push   ebx
c001da73:	83 ec 08             	sub    esp,0x8
c001da76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da82:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da88:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da8e:	c1 e0 06             	shl    eax,0x6
c001da91:	01 d0                	add    eax,edx
c001da93:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001da9a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001daa0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001daa7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dab1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dab7:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dabe:	75 0c                	jne    c001dacc <ATA::open(int, int, void*)+0x5a>
c001dac0:	83 ec 0c             	sub    esp,0xc
c001dac3:	53                   	push   ebx
c001dac4:	e8 7f ff ff ff       	call   c001da48 <ATA::detectCHS()>
c001dac9:	83 c4 10             	add    esp,0x10
c001dacc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dad2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dad8:	c1 e0 06             	shl    eax,0x6
c001dadb:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dae2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001daec:	d1 e8                	shr    eax,1
c001daee:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001daf4:	6a 04                	push   0x4
c001daf6:	6a 0c                	push   0xc
c001daf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daff:	50                   	push   eax
c001db00:	52                   	push   edx
c001db01:	e8 bc ed ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db06:	90                   	nop
c001db07:	90                   	nop
c001db08:	6a 00                	push   0x0
c001db0a:	6a 0c                	push   0xc
c001db0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db13:	50                   	push   eax
c001db14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db1a:	e8 a3 ed ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1f:	83 c4 14             	add    esp,0x14
c001db22:	53                   	push   ebx
c001db23:	e8 6a 2f ff ff       	call   c0010a92 <PhysicalDisk::startCache()>
c001db28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db2b:	e8 3e 4f ff ff       	call   c0012a6e <createPartitionsForDisk(PhysicalDisk*)>
c001db30:	83 c4 18             	add    esp,0x18
c001db33:	31 c0                	xor    eax,eax
c001db35:	5b                   	pop    ebx
c001db36:	c3                   	ret    
c001db37:	90                   	nop

c001db38 <ATAPI::write(unsigned long long, int, void*)>:
c001db38:	b8 03 00 00 00       	mov    eax,0x3
c001db3d:	c3                   	ret    

c001db3e <ATAPI::close(int, int, void*)>:
c001db3e:	83 ec 0c             	sub    esp,0xc
c001db41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db4b:	85 c0                	test   eax,eax
c001db4d:	74 0c                	je     c001db5b <ATAPI::close(int, int, void*)+0x1d>
c001db4f:	83 ec 0c             	sub    esp,0xc
c001db52:	8b 10                	mov    edx,DWORD PTR [eax]
c001db54:	50                   	push   eax
c001db55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db58:	83 c4 10             	add    esp,0x10
c001db5b:	31 c0                	xor    eax,eax
c001db5d:	83 c4 0c             	add    esp,0xc
c001db60:	c3                   	ret    
c001db61:	90                   	nop

c001db62 <ATAPI::ATAPI()>:
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db69:	83 ec 04             	sub    esp,0x4
c001db6c:	68 00 08 00 00       	push   0x800
c001db71:	68 0c 38 02 c0       	push   0xc002380c
c001db76:	50                   	push   eax
c001db77:	e8 ae 2e ff ff       	call   c0010a2a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db7c:	83 c4 10             	add    esp,0x10
c001db7f:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db88:	89 10                	mov    DWORD PTR [eax],edx
c001db8a:	90                   	nop
c001db8b:	83 c4 0c             	add    esp,0xc
c001db8e:	c3                   	ret    
c001db8f:	90                   	nop

c001db90 <ATAPI::readyForCommand()>:
c001db90:	56                   	push   esi
c001db91:	53                   	push   ebx
c001db92:	31 db                	xor    ebx,ebx
c001db94:	50                   	push   eax
c001db95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db99:	50                   	push   eax
c001db9a:	6a 0c                	push   0xc
c001db9c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dba3:	50                   	push   eax
c001dba4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbaa:	e8 d3 ed ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	a8 88                	test   al,0x88
c001dbb4:	74 23                	je     c001dbd9 <ATAPI::readyForCommand()+0x49>
c001dbb6:	43                   	inc    ebx
c001dbb7:	83 fb 63             	cmp    ebx,0x63
c001dbba:	7e dd                	jle    c001db99 <ATAPI::readyForCommand()+0x9>
c001dbbc:	51                   	push   ecx
c001dbbd:	51                   	push   ecx
c001dbbe:	6a 00                	push   0x0
c001dbc0:	68 40 42 0f 00       	push   0xf4240
c001dbc5:	e8 db b3 ff ff       	call   c0018fa5 <nanoSleep(unsigned long long)>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbd3:	75 c4                	jne    c001db99 <ATAPI::readyForCommand()+0x9>
c001dbd5:	31 c0                	xor    eax,eax
c001dbd7:	eb 02                	jmp    c001dbdb <ATAPI::readyForCommand()+0x4b>
c001dbd9:	b0 01                	mov    al,0x1
c001dbdb:	5a                   	pop    edx
c001dbdc:	5b                   	pop    ebx
c001dbdd:	5e                   	pop    esi
c001dbde:	c3                   	ret    
c001dbdf:	90                   	nop

c001dbe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbe0:	55                   	push   ebp
c001dbe1:	57                   	push   edi
c001dbe2:	56                   	push   esi
c001dbe3:	53                   	push   ebx
c001dbe4:	83 ec 20             	sub    esp,0x20
c001dbe7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbeb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbf3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbf7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbfb:	6a 01                	push   0x1
c001dbfd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc04:	50                   	push   eax
c001dc05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc0b:	e8 c4 ee ff ff       	call   c001cad4 <IDE::enableIRQs(unsigned char, bool)>
c001dc10:	5e                   	pop    esi
c001dc11:	58                   	pop    eax
c001dc12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc19:	50                   	push   eax
c001dc1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc20:	e8 77 ec ff ff       	call   c001c89c <IDE::prepareInterrupt(unsigned char)>
c001dc25:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc28:	e8 63 ff ff ff       	call   c001db90 <ATAPI::readyForCommand()>
c001dc2d:	83 c4 10             	add    esp,0x10
c001dc30:	84 c0                	test   al,al
c001dc32:	75 0a                	jne    c001dc3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc34:	bb 01 00 00 00       	mov    ebx,0x1
c001dc39:	e9 57 02 00 00       	jmp    c001de95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc3e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc44:	c1 e0 04             	shl    eax,0x4
c001dc47:	0f b6 c0             	movzx  eax,al
c001dc4a:	50                   	push   eax
c001dc4b:	6a 06                	push   0x6
c001dc4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc54:	50                   	push   eax
c001dc55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc5b:	e8 62 ec ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc60:	6a 00                	push   0x0
c001dc62:	6a 01                	push   0x1
c001dc64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc6b:	50                   	push   eax
c001dc6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc72:	e8 4b ec ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc77:	83 c4 20             	add    esp,0x20
c001dc7a:	0f b6 c3             	movzx  eax,bl
c001dc7d:	50                   	push   eax
c001dc7e:	6a 04                	push   0x4
c001dc80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc87:	50                   	push   eax
c001dc88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc8e:	0f b6 df             	movzx  ebx,bh
c001dc91:	e8 2c ec ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc96:	53                   	push   ebx
c001dc97:	6a 05                	push   0x5
c001dc99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dca0:	50                   	push   eax
c001dca1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca7:	e8 16 ec ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcac:	83 c4 20             	add    esp,0x20
c001dcaf:	68 a0 00 00 00       	push   0xa0
c001dcb4:	6a 07                	push   0x7
c001dcb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcbd:	50                   	push   eax
c001dcbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcc4:	e8 f9 eb ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc9:	83 c4 0c             	add    esp,0xc
c001dccc:	6a 01                	push   0x1
c001dcce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcd5:	50                   	push   eax
c001dcd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcdc:	e8 97 f7 ff ff       	call   c001d478 <IDE::polling(unsigned char, unsigned int)>
c001dce1:	83 c4 10             	add    esp,0x10
c001dce4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcea:	84 c0                	test   al,al
c001dcec:	74 23                	je     c001dd11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcee:	0f b6 d8             	movzx  ebx,al
c001dcf1:	53                   	push   ebx
c001dcf2:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dcf9:	0f b6 d2             	movzx  edx,dl
c001dcfc:	50                   	push   eax
c001dcfd:	52                   	push   edx
c001dcfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd04:	e8 d9 f5 ff ff       	call   c001d2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd09:	83 c4 10             	add    esp,0x10
c001dd0c:	e9 84 01 00 00       	jmp    c001de95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd11:	53                   	push   ebx
c001dd12:	53                   	push   ebx
c001dd13:	0f b6 d2             	movzx  edx,dl
c001dd16:	52                   	push   edx
c001dd17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd1d:	e8 8e eb ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001dd22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd26:	b9 06 00 00 00       	mov    ecx,0x6
c001dd2b:	89 c2                	mov    edx,eax
c001dd2d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd30:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd34:	83 c4 10             	add    esp,0x10
c001dd37:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd3d:	85 db                	test   ebx,ebx
c001dd3f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd46:	0f 84 ec 00 00 00    	je     c001de38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd4c:	51                   	push   ecx
c001dd4d:	51                   	push   ecx
c001dd4e:	52                   	push   edx
c001dd4f:	50                   	push   eax
c001dd50:	e8 db ec ff ff       	call   c001ca30 <IDE::waitInterrupt(unsigned char)>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	84 c0                	test   al,al
c001dd5a:	0f 84 d4 fe ff ff    	je     c001dc34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd60:	56                   	push   esi
c001dd61:	56                   	push   esi
c001dd62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd69:	50                   	push   eax
c001dd6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd70:	e8 27 eb ff ff       	call   c001c89c <IDE::prepareInterrupt(unsigned char)>
c001dd75:	83 c4 0c             	add    esp,0xc
c001dd78:	6a 04                	push   0x4
c001dd7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd81:	50                   	push   eax
c001dd82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd88:	e8 f5 eb ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001dd8d:	83 c4 0c             	add    esp,0xc
c001dd90:	6a 05                	push   0x5
c001dd92:	89 c6                	mov    esi,eax
c001dd94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd9b:	50                   	push   eax
c001dd9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dda2:	e8 db eb ff ff       	call   c001c982 <IDE::read(unsigned char, unsigned char)>
c001dda7:	89 f1                	mov    ecx,esi
c001dda9:	0f b6 c0             	movzx  eax,al
c001ddac:	c1 e0 08             	shl    eax,0x8
c001ddaf:	0f b6 f1             	movzx  esi,cl
c001ddb2:	09 c6                	or     esi,eax
c001ddb4:	d1 fe                	sar    esi,1
c001ddb6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddc2:	74 41                	je     c001de05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddc4:	31 c9                	xor    ecx,ecx
c001ddc6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddcc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddd0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddd7:	75 0a                	jne    c001dde3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ddd9:	01 c9                	add    ecx,ecx
c001dddb:	01 cd                	add    ebp,ecx
c001dddd:	4b                   	dec    ebx
c001ddde:	e9 54 ff ff ff       	jmp    c001dd37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dde3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dde8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddec:	51                   	push   ecx
c001dded:	51                   	push   ecx
c001ddee:	52                   	push   edx
c001ddef:	50                   	push   eax
c001ddf0:	e8 bb ea ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001ddf5:	89 c2                	mov    edx,eax
c001ddf7:	89 f0                	mov    eax,esi
c001ddf9:	66 ef                	out    dx,ax
c001ddfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	41                   	inc    ecx
c001de03:	eb c1                	jmp    c001ddc6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de05:	31 f6                	xor    esi,esi
c001de07:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de0d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de11:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de18:	75 06                	jne    c001de20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de1a:	01 f6                	add    esi,esi
c001de1c:	01 f5                	add    ebp,esi
c001de1e:	eb bd                	jmp    c001dddd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de20:	51                   	push   ecx
c001de21:	51                   	push   ecx
c001de22:	52                   	push   edx
c001de23:	50                   	push   eax
c001de24:	e8 87 ea ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001de29:	89 c2                	mov    edx,eax
c001de2b:	66 ed                	in     ax,dx
c001de2d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de32:	83 c4 10             	add    esp,0x10
c001de35:	46                   	inc    esi
c001de36:	eb cf                	jmp    c001de07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de38:	51                   	push   ecx
c001de39:	51                   	push   ecx
c001de3a:	52                   	push   edx
c001de3b:	50                   	push   eax
c001de3c:	e8 ef eb ff ff       	call   c001ca30 <IDE::waitInterrupt(unsigned char)>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	84 c0                	test   al,al
c001de46:	0f 84 e8 fd ff ff    	je     c001dc34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de4c:	52                   	push   edx
c001de4d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de52:	52                   	push   edx
c001de53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de5a:	50                   	push   eax
c001de5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de61:	e8 36 ea ff ff       	call   c001c89c <IDE::prepareInterrupt(unsigned char)>
c001de66:	83 c4 10             	add    esp,0x10
c001de69:	50                   	push   eax
c001de6a:	50                   	push   eax
c001de6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de72:	50                   	push   eax
c001de73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de79:	e8 32 ea ff ff       	call   c001c8b0 <IDE::getBase(unsigned char)>
c001de7e:	8d 50 07             	lea    edx,[eax+0x7]
c001de81:	ec                   	in     al,dx
c001de82:	83 c4 10             	add    esp,0x10
c001de85:	a8 88                	test   al,0x88
c001de87:	74 0a                	je     c001de93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de89:	4b                   	dec    ebx
c001de8a:	75 dd                	jne    c001de69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de8c:	bb 02 00 00 00       	mov    ebx,0x2
c001de91:	eb 02                	jmp    c001de95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de93:	31 db                	xor    ebx,ebx
c001de95:	83 c4 1c             	add    esp,0x1c
c001de98:	89 d8                	mov    eax,ebx
c001de9a:	5b                   	pop    ebx
c001de9b:	5e                   	pop    esi
c001de9c:	5f                   	pop    edi
c001de9d:	5d                   	pop    ebp
c001de9e:	c3                   	ret    
c001de9f:	90                   	nop

c001dea0 <ATAPI::diskRemoved()>:
c001dea0:	83 ec 18             	sub    esp,0x18
c001dea3:	68 17 38 02 c0       	push   0xc0023817
c001dea8:	e8 62 13 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001dead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001deb8:	83 c4 1c             	add    esp,0x1c
c001debb:	c3                   	ret    

c001debc <ATAPI::eject()>:
c001debc:	57                   	push   edi
c001debd:	b9 03 00 00 00       	mov    ecx,0x3
c001dec2:	53                   	push   ebx
c001dec3:	83 ec 14             	sub    esp,0x14
c001dec6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001deca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dece:	fc                   	cld    
c001decf:	31 c0                	xor    eax,eax
c001ded1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ded3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ded8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dedd:	50                   	push   eax
c001dede:	50                   	push   eax
c001dedf:	6a 00                	push   0x0
c001dee1:	6a 00                	push   0x0
c001dee3:	6a 00                	push   0x0
c001dee5:	6a 02                	push   0x2
c001dee7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001deeb:	50                   	push   eax
c001deec:	53                   	push   ebx
c001deed:	e8 ee fc ff ff       	call   c001dbe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001def2:	83 c4 14             	add    esp,0x14
c001def5:	53                   	push   ebx
c001def6:	e8 a5 ff ff ff       	call   c001dea0 <ATAPI::diskRemoved()>
c001defb:	83 c4 24             	add    esp,0x24
c001defe:	5b                   	pop    ebx
c001deff:	5f                   	pop    edi
c001df00:	c3                   	ret    
c001df01:	90                   	nop

c001df02 <ATAPI::diskInserted()>:
c001df02:	53                   	push   ebx
c001df03:	83 ec 14             	sub    esp,0x14
c001df06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df0a:	68 2d 38 02 c0       	push   0xc002382d
c001df0f:	e8 fb 12 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001df14:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df1e:	e8 6f 2b ff ff       	call   c0010a92 <PhysicalDisk::startCache()>
c001df23:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df27:	83 c4 18             	add    esp,0x18
c001df2a:	5b                   	pop    ebx
c001df2b:	e9 3e 4b ff ff       	jmp    c0012a6e <createPartitionsForDisk(PhysicalDisk*)>

c001df30 <ATAPI::detectMedia()>:
c001df30:	56                   	push   esi
c001df31:	53                   	push   ebx
c001df32:	83 ec 28             	sub    esp,0x28
c001df35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df39:	6a 0c                	push   0xc
c001df3b:	6a 00                	push   0x0
c001df3d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df41:	56                   	push   esi
c001df42:	e8 78 27 fe ff       	call   c00006bf <memset>
c001df47:	58                   	pop    eax
c001df48:	5a                   	pop    edx
c001df49:	6a 00                	push   0x0
c001df4b:	6a 00                	push   0x0
c001df4d:	6a 00                	push   0x0
c001df4f:	6a 00                	push   0x0
c001df51:	56                   	push   esi
c001df52:	53                   	push   ebx
c001df53:	e8 88 fc ff ff       	call   c001dbe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df58:	83 c4 1c             	add    esp,0x1c
c001df5b:	6a 0c                	push   0xc
c001df5d:	6a 00                	push   0x0
c001df5f:	56                   	push   esi
c001df60:	e8 5a 27 fe ff       	call   c00006bf <memset>
c001df65:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df6a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df6f:	59                   	pop    ecx
c001df70:	58                   	pop    eax
c001df71:	6a 01                	push   0x1
c001df73:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df77:	50                   	push   eax
c001df78:	6a 00                	push   0x0
c001df7a:	6a 12                	push   0x12
c001df7c:	56                   	push   esi
c001df7d:	53                   	push   ebx
c001df7e:	e8 5d fc ff ff       	call   c001dbe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df83:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df87:	83 c4 20             	add    esp,0x20
c001df8a:	83 e0 7f             	and    eax,0x7f
c001df8d:	3c 70                	cmp    al,0x70
c001df8f:	74 15                	je     c001dfa6 <ATAPI::detectMedia()+0x76>
c001df91:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df98:	75 0c                	jne    c001dfa6 <ATAPI::detectMedia()+0x76>
c001df9a:	83 ec 0c             	sub    esp,0xc
c001df9d:	53                   	push   ebx
c001df9e:	e8 5f ff ff ff       	call   c001df02 <ATAPI::diskInserted()>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfaa:	83 e0 0f             	and    eax,0xf
c001dfad:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfb2:	75 18                	jne    c001dfcc <ATAPI::detectMedia()+0x9c>
c001dfb4:	3c 02                	cmp    al,0x2
c001dfb6:	75 14                	jne    c001dfcc <ATAPI::detectMedia()+0x9c>
c001dfb8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfbf:	74 24                	je     c001dfe5 <ATAPI::detectMedia()+0xb5>
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	53                   	push   ebx
c001dfc5:	e8 d6 fe ff ff       	call   c001dea0 <ATAPI::diskRemoved()>
c001dfca:	eb 16                	jmp    c001dfe2 <ATAPI::detectMedia()+0xb2>
c001dfcc:	84 c0                	test   al,al
c001dfce:	75 15                	jne    c001dfe5 <ATAPI::detectMedia()+0xb5>
c001dfd0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfd7:	75 0c                	jne    c001dfe5 <ATAPI::detectMedia()+0xb5>
c001dfd9:	83 ec 0c             	sub    esp,0xc
c001dfdc:	53                   	push   ebx
c001dfdd:	e8 20 ff ff ff       	call   c001df02 <ATAPI::diskInserted()>
c001dfe2:	83 c4 10             	add    esp,0x10
c001dfe5:	83 c4 24             	add    esp,0x24
c001dfe8:	5b                   	pop    ebx
c001dfe9:	5e                   	pop    esi
c001dfea:	c3                   	ret    
c001dfeb:	90                   	nop

c001dfec <ATAPI::open(int, int, void*)>:
c001dfec:	53                   	push   ebx
c001dfed:	83 ec 08             	sub    esp,0x8
c001dff0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dff4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dff8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dffc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e002:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e008:	c1 e0 06             	shl    eax,0x6
c001e00b:	01 d0                	add    eax,edx
c001e00d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e014:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e01a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e021:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e02b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e031:	6a 04                	push   0x4
c001e033:	6a 0c                	push   0xc
c001e035:	51                   	push   ecx
c001e036:	52                   	push   edx
c001e037:	e8 86 e8 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e03c:	90                   	nop
c001e03d:	90                   	nop
c001e03e:	6a 00                	push   0x0
c001e040:	6a 0c                	push   0xc
c001e042:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e049:	50                   	push   eax
c001e04a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e050:	e8 6d e8 ff ff       	call   c001c8c2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e055:	83 c4 14             	add    esp,0x14
c001e058:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e05f:	53                   	push   ebx
c001e060:	e8 cb fe ff ff       	call   c001df30 <ATAPI::detectMedia()>
c001e065:	83 c4 18             	add    esp,0x18
c001e068:	31 c0                	xor    eax,eax
c001e06a:	5b                   	pop    ebx
c001e06b:	c3                   	ret    

c001e06c <ATAPI::read(unsigned long long, int, void*)>:
c001e06c:	55                   	push   ebp
c001e06d:	57                   	push   edi
c001e06e:	56                   	push   esi
c001e06f:	53                   	push   ebx
c001e070:	83 ec 1c             	sub    esp,0x1c
c001e073:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e077:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e07b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e07f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e086:	74 3c                	je     c001e0c4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e088:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e08c:	b9 03 00 00 00       	mov    ecx,0x3
c001e091:	fc                   	cld    
c001e092:	31 c0                	xor    eax,eax
c001e094:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e096:	0f ce                	bswap  esi
c001e098:	89 e8                	mov    eax,ebp
c001e09a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e09f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0a3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0a7:	50                   	push   eax
c001e0a8:	50                   	push   eax
c001e0a9:	55                   	push   ebp
c001e0aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0ae:	c1 e5 0b             	shl    ebp,0xb
c001e0b1:	6a 00                	push   0x0
c001e0b3:	55                   	push   ebp
c001e0b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0b8:	50                   	push   eax
c001e0b9:	53                   	push   ebx
c001e0ba:	e8 21 fb ff ff       	call   c001dbe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0bf:	83 c4 20             	add    esp,0x20
c001e0c2:	eb 1a                	jmp    c001e0de <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0c4:	83 ec 0c             	sub    esp,0xc
c001e0c7:	53                   	push   ebx
c001e0c8:	e8 63 fe ff ff       	call   c001df30 <ATAPI::detectMedia()>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0d7:	75 af                	jne    c001e088 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0d9:	b8 02 00 00 00       	mov    eax,0x2
c001e0de:	83 c4 1c             	add    esp,0x1c
c001e0e1:	5b                   	pop    ebx
c001e0e2:	5e                   	pop    esi
c001e0e3:	5f                   	pop    edi
c001e0e4:	5d                   	pop    ebp
c001e0e5:	c3                   	ret    

c001e0e6 <AVX::open(int, int, void*)>:
c001e0e6:	83 ec 0c             	sub    esp,0xc
c001e0e9:	e8 9a 10 00 00       	call   c001f188 <avxInit>
c001e0ee:	b8 00 00 00 00       	mov    eax,0x0
c001e0f3:	83 c4 0c             	add    esp,0xc
c001e0f6:	c3                   	ret    
c001e0f7:	90                   	nop

c001e0f8 <AVX::close(int, int, void*)>:
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	e8 89 10 00 00       	call   c001f189 <avxClose>
c001e100:	b8 00 00 00 00       	mov    eax,0x0
c001e105:	83 c4 0c             	add    esp,0xc
c001e108:	c3                   	ret    
c001e109:	90                   	nop

c001e10a <AVX::available()>:
c001e10a:	83 ec 0c             	sub    esp,0xc
c001e10d:	e8 6e 10 00 00       	call   c001f180 <avxDetect>
c001e112:	85 c0                	test   eax,eax
c001e114:	0f 95 c0             	setne  al
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	c3                   	ret    
c001e11b:	90                   	nop

c001e11c <AVX::save(void*)>:
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e123:	83 ec 0c             	sub    esp,0xc
c001e126:	50                   	push   eax
c001e127:	e8 5a 10 00 00       	call   c001f186 <avxSave>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	90                   	nop
c001e130:	83 c4 0c             	add    esp,0xc
c001e133:	c3                   	ret    

c001e134 <AVX::load(void*)>:
c001e134:	83 ec 0c             	sub    esp,0xc
c001e137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e13b:	83 ec 0c             	sub    esp,0xc
c001e13e:	50                   	push   eax
c001e13f:	e8 43 10 00 00       	call   c001f187 <avxLoad>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	90                   	nop
c001e148:	83 c4 0c             	add    esp,0xc
c001e14b:	c3                   	ret    

c001e14c <AVX::AVX()>:
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e153:	83 ec 08             	sub    esp,0x8
c001e156:	68 78 38 02 c0       	push   0xc0023878
c001e15b:	50                   	push   eax
c001e15c:	e8 a7 29 ff ff       	call   c0010b08 <FPU::FPU(char const*)>
c001e161:	83 c4 10             	add    esp,0x10
c001e164:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16d:	89 10                	mov    DWORD PTR [eax],edx
c001e16f:	90                   	nop
c001e170:	83 c4 0c             	add    esp,0xc
c001e173:	c3                   	ret    

c001e174 <MMX::available()>:
c001e174:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e179:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e17f:	83 e0 20             	and    eax,0x20
c001e182:	84 c0                	test   al,al
c001e184:	0f 95 c0             	setne  al
c001e187:	c3                   	ret    

c001e188 <MMX::open(int, int, void*)>:
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	e8 6c 10 00 00       	call   c001f1fc <x87Init>
c001e190:	b8 00 00 00 00       	mov    eax,0x0
c001e195:	83 c4 0c             	add    esp,0xc
c001e198:	c3                   	ret    
c001e199:	90                   	nop

c001e19a <MMX::close(int, int, void*)>:
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	e8 74 10 00 00       	call   c001f216 <x87Close>
c001e1a2:	b8 00 00 00 00       	mov    eax,0x0
c001e1a7:	83 c4 0c             	add    esp,0xc
c001e1aa:	c3                   	ret    
c001e1ab:	90                   	nop

c001e1ac <MMX::save(void*)>:
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b3:	83 ec 0c             	sub    esp,0xc
c001e1b6:	50                   	push   eax
c001e1b7:	e8 35 10 00 00       	call   c001f1f1 <x87Save>
c001e1bc:	83 c4 10             	add    esp,0x10
c001e1bf:	90                   	nop
c001e1c0:	83 c4 0c             	add    esp,0xc
c001e1c3:	c3                   	ret    

c001e1c4 <MMX::load(void*)>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1cb:	83 ec 0c             	sub    esp,0xc
c001e1ce:	50                   	push   eax
c001e1cf:	e8 23 10 00 00       	call   c001f1f7 <x87Load>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	90                   	nop
c001e1d8:	83 c4 0c             	add    esp,0xc
c001e1db:	c3                   	ret    

c001e1dc <MMX::MMX()>:
c001e1dc:	83 ec 0c             	sub    esp,0xc
c001e1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e3:	83 ec 08             	sub    esp,0x8
c001e1e6:	68 b8 38 02 c0       	push   0xc00238b8
c001e1eb:	50                   	push   eax
c001e1ec:	e8 17 29 ff ff       	call   c0010b08 <FPU::FPU(char const*)>
c001e1f1:	83 c4 10             	add    esp,0x10
c001e1f4:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fd:	89 10                	mov    DWORD PTR [eax],edx
c001e1ff:	90                   	nop
c001e200:	83 c4 0c             	add    esp,0xc
c001e203:	c3                   	ret    

c001e204 <SSE::open(int, int, void*)>:
c001e204:	83 ec 0c             	sub    esp,0xc
c001e207:	e8 ab 0f 00 00       	call   c001f1b7 <sseInit>
c001e20c:	b8 00 00 00 00       	mov    eax,0x0
c001e211:	83 c4 0c             	add    esp,0xc
c001e214:	c3                   	ret    
c001e215:	90                   	nop

c001e216 <SSE::close(int, int, void*)>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	e8 a9 0f 00 00       	call   c001f1c7 <sseClose>
c001e21e:	b8 00 00 00 00       	mov    eax,0x0
c001e223:	83 c4 0c             	add    esp,0xc
c001e226:	c3                   	ret    
c001e227:	90                   	nop

c001e228 <SSE::available()>:
c001e228:	83 ec 1c             	sub    esp,0x1c
c001e22b:	e8 60 0f 00 00       	call   c001f190 <sseDetect>
c001e230:	85 c0                	test   eax,eax
c001e232:	0f 95 c0             	setne  al
c001e235:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e239:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e23d:	83 c4 1c             	add    esp,0x1c
c001e240:	c3                   	ret    
c001e241:	90                   	nop

c001e242 <SSE::save(void*)>:
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e249:	83 ec 0c             	sub    esp,0xc
c001e24c:	50                   	push   eax
c001e24d:	e8 59 0f 00 00       	call   c001f1ab <sseSave>
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	90                   	nop
c001e256:	83 c4 0c             	add    esp,0xc
c001e259:	c3                   	ret    

c001e25a <SSE::load(void*)>:
c001e25a:	83 ec 0c             	sub    esp,0xc
c001e25d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e261:	83 ec 0c             	sub    esp,0xc
c001e264:	50                   	push   eax
c001e265:	e8 47 0f 00 00       	call   c001f1b1 <sseLoad>
c001e26a:	83 c4 10             	add    esp,0x10
c001e26d:	90                   	nop
c001e26e:	83 c4 0c             	add    esp,0xc
c001e271:	c3                   	ret    

c001e272 <SSE::SSE()>:
c001e272:	83 ec 0c             	sub    esp,0xc
c001e275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e279:	83 ec 08             	sub    esp,0x8
c001e27c:	68 f8 38 02 c0       	push   0xc00238f8
c001e281:	50                   	push   eax
c001e282:	e8 81 28 ff ff       	call   c0010b08 <FPU::FPU(char const*)>
c001e287:	83 c4 10             	add    esp,0x10
c001e28a:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e293:	89 10                	mov    DWORD PTR [eax],edx
c001e295:	90                   	nop
c001e296:	83 c4 0c             	add    esp,0xc
c001e299:	c3                   	ret    

c001e29a <x87::open(int, int, void*)>:
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	e8 5a 0f 00 00       	call   c001f1fc <x87Init>
c001e2a2:	b8 00 00 00 00       	mov    eax,0x0
c001e2a7:	83 c4 0c             	add    esp,0xc
c001e2aa:	c3                   	ret    
c001e2ab:	90                   	nop

c001e2ac <x87::close(int, int, void*)>:
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	e8 62 0f 00 00       	call   c001f216 <x87Close>
c001e2b4:	b8 00 00 00 00       	mov    eax,0x0
c001e2b9:	83 c4 0c             	add    esp,0xc
c001e2bc:	c3                   	ret    
c001e2bd:	90                   	nop

c001e2be <x87::available()>:
c001e2be:	83 ec 0c             	sub    esp,0xc
c001e2c1:	e8 10 0f 00 00       	call   c001f1d6 <x87Detect>
c001e2c6:	85 c0                	test   eax,eax
c001e2c8:	0f 95 c0             	setne  al
c001e2cb:	83 c4 0c             	add    esp,0xc
c001e2ce:	c3                   	ret    
c001e2cf:	90                   	nop

c001e2d0 <x87::save(void*)>:
c001e2d0:	83 ec 0c             	sub    esp,0xc
c001e2d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2d7:	83 ec 0c             	sub    esp,0xc
c001e2da:	50                   	push   eax
c001e2db:	e8 11 0f 00 00       	call   c001f1f1 <x87Save>
c001e2e0:	83 c4 10             	add    esp,0x10
c001e2e3:	90                   	nop
c001e2e4:	83 c4 0c             	add    esp,0xc
c001e2e7:	c3                   	ret    

c001e2e8 <x87::load(void*)>:
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2ef:	83 ec 0c             	sub    esp,0xc
c001e2f2:	50                   	push   eax
c001e2f3:	e8 ff 0e 00 00       	call   c001f1f7 <x87Load>
c001e2f8:	83 c4 10             	add    esp,0x10
c001e2fb:	90                   	nop
c001e2fc:	83 c4 0c             	add    esp,0xc
c001e2ff:	c3                   	ret    

c001e300 <x87::x87()>:
c001e300:	83 ec 0c             	sub    esp,0xc
c001e303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e307:	83 ec 08             	sub    esp,0x8
c001e30a:	68 38 39 02 c0       	push   0xc0023938
c001e30f:	50                   	push   eax
c001e310:	e8 f3 27 ff ff       	call   c0010b08 <FPU::FPU(char const*)>
c001e315:	83 c4 10             	add    esp,0x10
c001e318:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e31d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e321:	89 10                	mov    DWORD PTR [eax],edx
c001e323:	90                   	nop
c001e324:	83 c4 0c             	add    esp,0xc
c001e327:	c3                   	ret    

c001e328 <APIC::disable()>:
c001e328:	90                   	nop
c001e329:	c3                   	ret    

c001e32a <APIC::close(int, int, void*)>:
c001e32a:	55                   	push   ebp
c001e32b:	89 e5                	mov    ebp,esp
c001e32d:	83 ec 08             	sub    esp,0x8
c001e330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e333:	8b 00                	mov    eax,DWORD PTR [eax]
c001e335:	83 c0 3c             	add    eax,0x3c
c001e338:	8b 00                	mov    eax,DWORD PTR [eax]
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e340:	ff d0                	call   eax
c001e342:	83 c4 10             	add    esp,0x10
c001e345:	b8 00 00 00 00       	mov    eax,0x0
c001e34a:	c9                   	leave  
c001e34b:	c3                   	ret    

c001e34c <IOAPIC::close(int, int, void*)>:
c001e34c:	b8 00 00 00 00       	mov    eax,0x0
c001e351:	c3                   	ret    

c001e352 <APIC::io_wait()>:
c001e352:	eb 00                	jmp    c001e354 <APIC::io_wait()+0x2>
c001e354:	eb 00                	jmp    c001e356 <APIC::io_wait()+0x4>
c001e356:	90                   	nop
c001e357:	c3                   	ret    

c001e358 <APIC::getBase()>:
c001e358:	55                   	push   ebp
c001e359:	89 e5                	mov    ebp,esp
c001e35b:	83 ec 18             	sub    esp,0x18
c001e35e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e363:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e369:	83 e0 08             	and    eax,0x8
c001e36c:	84 c0                	test   al,al
c001e36e:	75 07                	jne    c001e377 <APIC::getBase()+0x1f>
c001e370:	b8 00 00 00 00       	mov    eax,0x0
c001e375:	eb 21                	jmp    c001e398 <APIC::getBase()+0x40>
c001e377:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e37c:	83 ec 08             	sub    esp,0x8
c001e37f:	6a 1b                	push   0x1b
c001e381:	50                   	push   eax
c001e382:	e8 f3 d1 fe ff       	call   c000b57a <Computer::rdmsr(unsigned int)>
c001e387:	83 c4 10             	add    esp,0x10
c001e38a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e38d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e390:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e393:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e398:	c9                   	leave  
c001e399:	c3                   	ret    

c001e39a <APIC::eoi(unsigned char)>:
c001e39a:	55                   	push   ebp
c001e39b:	89 e5                	mov    ebp,esp
c001e39d:	83 ec 28             	sub    esp,0x28
c001e3a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3a3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3a6:	83 ec 0c             	sub    esp,0xc
c001e3a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3ac:	e8 a7 ff ff ff       	call   c001e358 <APIC::getBase()>
c001e3b1:	83 c4 10             	add    esp,0x10
c001e3b4:	05 b0 00 00 00       	add    eax,0xb0
c001e3b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3bf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3c5:	90                   	nop
c001e3c6:	c9                   	leave  
c001e3c7:	c3                   	ret    

c001e3c8 <APIC::open(int, int, void*)>:
c001e3c8:	55                   	push   ebp
c001e3c9:	89 e5                	mov    ebp,esp
c001e3cb:	57                   	push   edi
c001e3cc:	56                   	push   esi
c001e3cd:	53                   	push   ebx
c001e3ce:	83 ec 1c             	sub    esp,0x1c
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d7:	e8 7c ff ff ff       	call   c001e358 <APIC::getBase()>
c001e3dc:	83 c4 10             	add    esp,0x10
c001e3df:	05 f0 00 00 00       	add    eax,0xf0
c001e3e4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3ed:	e8 66 ff ff ff       	call   c001e358 <APIC::getBase()>
c001e3f2:	83 c4 10             	add    esp,0x10
c001e3f5:	89 c2                	mov    edx,eax
c001e3f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e400:	89 c7                	mov    edi,eax
c001e402:	81 e7 ff 00 00 00    	and    edi,0xff
c001e408:	89 d0                	mov    eax,edx
c001e40a:	ba 00 00 00 00       	mov    edx,0x0
c001e40f:	89 c1                	mov    ecx,eax
c001e411:	80 e5 ff             	and    ch,0xff
c001e414:	89 cb                	mov    ebx,ecx
c001e416:	89 d0                	mov    eax,edx
c001e418:	25 ff 00 00 00       	and    eax,0xff
c001e41d:	89 c6                	mov    esi,eax
c001e41f:	89 d8                	mov    eax,ebx
c001e421:	89 f2                	mov    edx,esi
c001e423:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e426:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e429:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e42d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e431:	83 e0 00             	and    eax,0x0
c001e434:	09 d0                	or     eax,edx
c001e436:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e43a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e43d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e443:	8d 50 01             	lea    edx,[eax+0x1]
c001e446:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e449:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e44f:	31 d2                	xor    edx,edx
c001e451:	88 c2                	mov    dl,al
c001e453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e456:	83 c2 08             	add    edx,0x8
c001e459:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e45d:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e463:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e469:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e46d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e470:	8b 00                	mov    eax,DWORD PTR [eax]
c001e472:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e475:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e47c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e47f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e482:	89 10                	mov    DWORD PTR [eax],edx
c001e484:	b8 00 00 00 00       	mov    eax,0x0
c001e489:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e48c:	5b                   	pop    ebx
c001e48d:	5e                   	pop    esi
c001e48e:	5f                   	pop    edi
c001e48f:	5d                   	pop    ebp
c001e490:	c3                   	ret    
c001e491:	90                   	nop

c001e492 <IOAPIC::IOAPIC()>:
c001e492:	83 ec 0c             	sub    esp,0xc
c001e495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e499:	83 ec 08             	sub    esp,0x8
c001e49c:	68 78 39 02 c0       	push   0xc0023978
c001e4a1:	50                   	push   eax
c001e4a2:	e8 6d 23 ff ff       	call   c0010814 <Device::Device(char const*)>
c001e4a7:	83 c4 10             	add    esp,0x10
c001e4aa:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b3:	89 10                	mov    DWORD PTR [eax],edx
c001e4b5:	90                   	nop
c001e4b6:	83 c4 0c             	add    esp,0xc
c001e4b9:	c3                   	ret    

c001e4ba <APIC::APIC()>:
c001e4ba:	53                   	push   ebx
c001e4bb:	83 ec 18             	sub    esp,0x18
c001e4be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4c2:	83 ec 08             	sub    esp,0x8
c001e4c5:	68 80 39 02 c0       	push   0xc0023980
c001e4ca:	50                   	push   eax
c001e4cb:	e8 92 2a ff ff       	call   c0010f62 <InterruptController::InterruptController(char const*)>
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4dc:	89 10                	mov    DWORD PTR [eax],edx
c001e4de:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4e3:	83 f0 01             	xor    eax,0x1
c001e4e6:	84 c0                	test   al,al
c001e4e8:	0f 84 a2 00 00 00    	je     c001e590 <APIC::APIC()+0xd6>
c001e4ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4f3:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e4f8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e4fc:	0f 83 87 00 00 00    	jae    c001e589 <APIC::APIC()+0xcf>
c001e502:	83 ec 0c             	sub    esp,0xc
c001e505:	68 68 01 00 00       	push   0x168
c001e50a:	e8 cb 0b ff ff       	call   c000f0da <operator new(unsigned long)>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	89 c3                	mov    ebx,eax
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	53                   	push   ebx
c001e518:	e8 75 ff ff ff       	call   c001e492 <IOAPIC::IOAPIC()>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e524:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e528:	25 ff 00 00 00       	and    eax,0xff
c001e52d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e531:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e538:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e53d:	40                   	inc    eax
c001e53e:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e543:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e548:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e54e:	83 ec 08             	sub    esp,0x8
c001e551:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e555:	50                   	push   eax
c001e556:	e8 c9 20 ff ff       	call   c0010624 <Device::addChild(Device*)>
c001e55b:	83 c4 10             	add    esp,0x10
c001e55e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e562:	8b 00                	mov    eax,DWORD PTR [eax]
c001e564:	83 c0 08             	add    eax,0x8
c001e567:	8b 10                	mov    edx,DWORD PTR [eax]
c001e569:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e56d:	25 ff 00 00 00       	and    eax,0xff
c001e572:	6a 00                	push   0x0
c001e574:	6a 00                	push   0x0
c001e576:	50                   	push   eax
c001e577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e57b:	ff d2                	call   edx
c001e57d:	83 c4 10             	add    esp,0x10
c001e580:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e584:	e9 6a ff ff ff       	jmp    c001e4f3 <APIC::APIC()+0x39>
c001e589:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e590:	90                   	nop
c001e591:	83 c4 18             	add    esp,0x18
c001e594:	5b                   	pop    ebx
c001e595:	c3                   	ret    

c001e596 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e596:	55                   	push   ebp
c001e597:	89 e5                	mov    ebp,esp
c001e599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5a2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a5:	72 1d                	jb     c001e5c4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5aa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5b9:	01 d0                	add    eax,edx
c001e5bb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5be:	73 04                	jae    c001e5c4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5c0:	b0 01                	mov    al,0x1
c001e5c2:	eb 02                	jmp    c001e5c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5c4:	b0 00                	mov    al,0x0
c001e5c6:	5d                   	pop    ebp
c001e5c7:	c3                   	ret    

c001e5c8 <IOAPIC::read(int)>:
c001e5c8:	55                   	push   ebp
c001e5c9:	89 e5                	mov    ebp,esp
c001e5cb:	83 ec 10             	sub    esp,0x10
c001e5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5dd:	31 d2                	xor    edx,edx
c001e5df:	88 c2                	mov    dl,al
c001e5e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5e4:	89 10                	mov    DWORD PTR [eax],edx
c001e5e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5e9:	83 c0 10             	add    eax,0x10
c001e5ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ee:	c9                   	leave  
c001e5ef:	c3                   	ret    

c001e5f0 <IOAPIC::open(int, int, void*)>:
c001e5f0:	55                   	push   ebp
c001e5f1:	89 e5                	mov    ebp,esp
c001e5f3:	57                   	push   edi
c001e5f4:	56                   	push   esi
c001e5f5:	53                   	push   ebx
c001e5f6:	83 ec 0c             	sub    esp,0xc
c001e5f9:	83 ec 0c             	sub    esp,0xc
c001e5fc:	68 ab 39 02 c0       	push   0xc00239ab
c001e601:	e8 09 0c ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e60f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e618:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e61e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e628:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e62e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e631:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e637:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e63e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e641:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e653:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e659:	89 c7                	mov    edi,eax
c001e65b:	81 e7 ff 00 00 00    	and    edi,0xff
c001e661:	89 d0                	mov    eax,edx
c001e663:	ba 00 00 00 00       	mov    edx,0x0
c001e668:	89 c1                	mov    ecx,eax
c001e66a:	80 e5 ff             	and    ch,0xff
c001e66d:	89 cb                	mov    ebx,ecx
c001e66f:	89 d0                	mov    eax,edx
c001e671:	25 ff 00 00 00       	and    eax,0xff
c001e676:	89 c6                	mov    esi,eax
c001e678:	89 d8                	mov    eax,ebx
c001e67a:	89 f2                	mov    edx,esi
c001e67c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e67f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e682:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e686:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e68a:	83 e0 00             	and    eax,0x0
c001e68d:	09 d0                	or     eax,edx
c001e68f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e696:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e69c:	8d 50 01             	lea    edx,[eax+0x1]
c001e69f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6a2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6a8:	31 d2                	xor    edx,edx
c001e6aa:	88 c2                	mov    dl,al
c001e6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6af:	83 c2 08             	add    edx,0x8
c001e6b2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6b6:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6bc:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6c2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6c6:	83 ec 08             	sub    esp,0x8
c001e6c9:	6a 01                	push   0x1
c001e6cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6ce:	e8 f5 fe ff ff       	call   c001e5c8 <IOAPIC::read(int)>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	c1 f8 10             	sar    eax,0x10
c001e6d9:	25 ff 00 00 00       	and    eax,0xff
c001e6de:	8d 50 01             	lea    edx,[eax+0x1]
c001e6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6ea:	b8 00 00 00 00       	mov    eax,0x0
c001e6ef:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6f2:	5b                   	pop    ebx
c001e6f3:	5e                   	pop    esi
c001e6f4:	5f                   	pop    edi
c001e6f5:	5d                   	pop    ebp
c001e6f6:	c3                   	ret    
c001e6f7:	90                   	nop

c001e6f8 <IOAPIC::write(int, int)>:
c001e6f8:	55                   	push   ebp
c001e6f9:	89 e5                	mov    ebp,esp
c001e6fb:	83 ec 10             	sub    esp,0x10
c001e6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e701:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e707:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e70a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e70d:	31 d2                	xor    edx,edx
c001e70f:	88 c2                	mov    dl,al
c001e711:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e714:	89 10                	mov    DWORD PTR [eax],edx
c001e716:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e719:	8d 50 10             	lea    edx,[eax+0x10]
c001e71c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e71f:	89 02                	mov    DWORD PTR [edx],eax
c001e721:	90                   	nop
c001e722:	c9                   	leave  
c001e723:	c3                   	ret    

c001e724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e724:	55                   	push   ebp
c001e725:	89 e5                	mov    ebp,esp
c001e727:	83 ec 20             	sub    esp,0x20
c001e72a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e72d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e730:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e733:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e736:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e739:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e73c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e73f:	88 d0                	mov    al,dl
c001e741:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e744:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e747:	25 ff 00 00 00       	and    eax,0xff
c001e74c:	83 c0 08             	add    eax,0x8
c001e74f:	01 c0                	add    eax,eax
c001e751:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e754:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e757:	25 ff 00 00 00       	and    eax,0xff
c001e75c:	83 c0 08             	add    eax,0x8
c001e75f:	01 c0                	add    eax,eax
c001e761:	40                   	inc    eax
c001e762:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e765:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e768:	50                   	push   eax
c001e769:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76c:	e8 57 fe ff ff       	call   c001e5c8 <IOAPIC::read(int)>
c001e771:	83 c4 08             	add    esp,0x8
c001e774:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e777:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e77e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e781:	c1 e0 18             	shl    eax,0x18
c001e784:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e787:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e78a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e78d:	52                   	push   edx
c001e78e:	50                   	push   eax
c001e78f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e792:	e8 61 ff ff ff       	call   c001e6f8 <IOAPIC::write(int, int)>
c001e797:	83 c4 0c             	add    esp,0xc
c001e79a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e79d:	50                   	push   eax
c001e79e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a1:	e8 22 fe ff ff       	call   c001e5c8 <IOAPIC::read(int)>
c001e7a6:	83 c4 08             	add    esp,0x8
c001e7a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7ac:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7b3:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7ba:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7c1:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7c8:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7cb:	25 ff 00 00 00       	and    eax,0xff
c001e7d0:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7d3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7d9:	52                   	push   edx
c001e7da:	50                   	push   eax
c001e7db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7de:	e8 15 ff ff ff       	call   c001e6f8 <IOAPIC::write(int, int)>
c001e7e3:	83 c4 0c             	add    esp,0xc
c001e7e6:	90                   	nop
c001e7e7:	c9                   	leave  
c001e7e8:	c3                   	ret    
c001e7e9:	90                   	nop

c001e7ea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7ea:	55                   	push   ebp
c001e7eb:	89 e5                	mov    ebp,esp
c001e7ed:	56                   	push   esi
c001e7ee:	53                   	push   ebx
c001e7ef:	83 ec 20             	sub    esp,0x20
c001e7f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7f8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e7fc:	74 2a                	je     c001e828 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e7fe:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e802:	7f 14                	jg     c001e818 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e804:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e807:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e80c:	8a 00                	mov    al,BYTE PTR [eax]
c001e80e:	25 ff 00 00 00       	and    eax,0xff
c001e813:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e816:	eb 10                	jmp    c001e828 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e818:	83 ec 0c             	sub    esp,0xc
c001e81b:	68 bc 39 02 c0       	push   0xc00239bc
c001e820:	e8 19 72 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001e825:	83 c4 10             	add    esp,0x10
c001e828:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e82c:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e831:	83 ec 08             	sub    esp,0x8
c001e834:	50                   	push   eax
c001e835:	68 f4 39 02 c0       	push   0xc00239f4
c001e83a:	e8 d0 09 ff ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e849:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e84e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e851:	7d 64                	jge    c001e8b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e853:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e856:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e85d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e860:	83 ec 08             	sub    esp,0x8
c001e863:	52                   	push   edx
c001e864:	50                   	push   eax
c001e865:	e8 2c fd ff ff       	call   c001e596 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e86a:	83 c4 10             	add    esp,0x10
c001e86d:	84 c0                	test   al,al
c001e86f:	74 41                	je     c001e8b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e871:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e874:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e87b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e87e:	83 c0 20             	add    eax,0x20
c001e881:	89 c6                	mov    esi,eax
c001e883:	81 e6 ff 00 00 00    	and    esi,0xff
c001e889:	e8 41 60 ff ff       	call   c00148cf <getCPUNumber()>
c001e88e:	89 c2                	mov    edx,eax
c001e890:	c1 fa 1f             	sar    edx,0x1f
c001e893:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e896:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	56                   	push   esi
c001e8a0:	52                   	push   edx
c001e8a1:	50                   	push   eax
c001e8a2:	51                   	push   ecx
c001e8a3:	53                   	push   ebx
c001e8a4:	e8 7b fe ff ff       	call   c001e724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8a9:	83 c4 20             	add    esp,0x20
c001e8ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8b0:	eb 05                	jmp    c001e8b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8b2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8b5:	eb 92                	jmp    c001e849 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8b7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8ba:	83 f0 01             	xor    eax,0x1
c001e8bd:	84 c0                	test   al,al
c001e8bf:	74 10                	je     c001e8d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8c1:	83 ec 0c             	sub    esp,0xc
c001e8c4:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8c9:	e8 70 71 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8d5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8dc:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8e0:	7f 65                	jg     c001e947 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8e8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8ef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8f2:	01 ca                	add    edx,ecx
c001e8f4:	83 c2 54             	add    edx,0x54
c001e8f7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e8fb:	85 c0                	test   eax,eax
c001e8fd:	75 43                	jne    c001e942 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e8ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e902:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e905:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e90c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e90f:	01 ca                	add    edx,ecx
c001e911:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e914:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e917:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e91e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e921:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e928:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e92b:	01 ca                	add    edx,ecx
c001e92d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e933:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e936:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e93a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e93d:	83 e8 20             	sub    eax,0x20
c001e940:	eb 1a                	jmp    c001e95c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e942:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e945:	eb 95                	jmp    c001e8dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e947:	83 ec 0c             	sub    esp,0xc
c001e94a:	68 18 3a 02 c0       	push   0xc0023a18
c001e94f:	e8 ea 70 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001e954:	83 c4 10             	add    esp,0x10
c001e957:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e95c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e95f:	5b                   	pop    ebx
c001e960:	5e                   	pop    esi
c001e961:	5d                   	pop    ebp
c001e962:	c3                   	ret    
c001e963:	90                   	nop

c001e964 <PIC::disable()>:
c001e964:	55                   	push   ebp
c001e965:	89 e5                	mov    ebp,esp
c001e967:	83 ec 10             	sub    esp,0x10
c001e96a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e970:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e974:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e977:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e97b:	ee                   	out    dx,al
c001e97c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e982:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e986:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e989:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e98d:	ee                   	out    dx,al
c001e98e:	90                   	nop
c001e98f:	c9                   	leave  
c001e990:	c3                   	ret    
c001e991:	90                   	nop

c001e992 <PIC::close(int, int, void*)>:
c001e992:	55                   	push   ebp
c001e993:	89 e5                	mov    ebp,esp
c001e995:	83 ec 08             	sub    esp,0x8
c001e998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99d:	83 c0 3c             	add    eax,0x3c
c001e9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a2:	83 ec 0c             	sub    esp,0xc
c001e9a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9a8:	ff d0                	call   eax
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	b8 00 00 00 00       	mov    eax,0x0
c001e9b2:	c9                   	leave  
c001e9b3:	c3                   	ret    

c001e9b4 <PIC::PIC()>:
c001e9b4:	83 ec 0c             	sub    esp,0xc
c001e9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bb:	83 ec 08             	sub    esp,0x8
c001e9be:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9c3:	50                   	push   eax
c001e9c4:	e8 99 25 ff ff       	call   c0010f62 <InterruptController::InterruptController(char const*)>
c001e9c9:	83 c4 10             	add    esp,0x10
c001e9cc:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d5:	89 10                	mov    DWORD PTR [eax],edx
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9e1:	31 d2                	xor    edx,edx
c001e9e3:	88 c2                	mov    dl,al
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9fa:	31 d2                	xor    edx,edx
c001e9fc:	88 c2                	mov    dl,al
c001e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea02:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea11:	8d 50 01             	lea    edx,[eax+0x1]
c001ea14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea18:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea1e:	31 d2                	xor    edx,edx
c001ea20:	88 c2                	mov    dl,al
c001ea22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea26:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea2a:	83 e1 3f             	and    ecx,0x3f
c001ea2d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea3b:	31 d2                	xor    edx,edx
c001ea3d:	88 c2                	mov    dl,al
c001ea3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea43:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea54:	31 d2                	xor    edx,edx
c001ea56:	88 c2                	mov    dl,al
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ea6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea72:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea78:	31 d2                	xor    edx,edx
c001ea7a:	88 c2                	mov    dl,al
c001ea7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea80:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea84:	83 e1 3f             	and    ecx,0x3f
c001ea87:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea8b:	90                   	nop
c001ea8c:	83 c4 0c             	add    esp,0xc
c001ea8f:	c3                   	ret    

c001ea90 <PIC::ioWait()>:
c001ea90:	eb 00                	jmp    c001ea92 <PIC::ioWait()+0x2>
c001ea92:	eb 00                	jmp    c001ea94 <PIC::ioWait()+0x4>
c001ea94:	90                   	nop
c001ea95:	c3                   	ret    

c001ea96 <PIC::getIRQReg(int)>:
c001ea96:	55                   	push   ebp
c001ea97:	89 e5                	mov    ebp,esp
c001ea99:	83 ec 10             	sub    esp,0x10
c001ea9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea9f:	25 ff 00 00 00       	and    eax,0xff
c001eaa4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eaaa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eaad:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eab0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eab4:	ee                   	out    dx,al
c001eab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eab8:	25 ff 00 00 00       	and    eax,0xff
c001eabd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eac3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eac6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eac9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eacd:	ee                   	out    dx,al
c001eace:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001ead4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001ead8:	89 c2                	mov    edx,eax
c001eada:	ec                   	in     al,dx
c001eadb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eade:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eae1:	25 ff 00 00 00       	and    eax,0xff
c001eae6:	c1 e0 08             	shl    eax,0x8
c001eae9:	89 c1                	mov    ecx,eax
c001eaeb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eaf1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eaf5:	89 c2                	mov    edx,eax
c001eaf7:	ec                   	in     al,dx
c001eaf8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eafb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eafe:	25 ff 00 00 00       	and    eax,0xff
c001eb03:	09 c8                	or     eax,ecx
c001eb05:	c9                   	leave  
c001eb06:	c3                   	ret    
c001eb07:	90                   	nop

c001eb08 <PIC::eoi(unsigned char)>:
c001eb08:	55                   	push   ebp
c001eb09:	89 e5                	mov    ebp,esp
c001eb0b:	83 ec 14             	sub    esp,0x14
c001eb0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb11:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb14:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb18:	75 23                	jne    c001eb3d <PIC::eoi(unsigned char)+0x35>
c001eb1a:	6a 0b                	push   0xb
c001eb1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb1f:	e8 72 ff ff ff       	call   c001ea96 <PIC::getIRQReg(int)>
c001eb24:	83 c4 08             	add    esp,0x8
c001eb27:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb2b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb2f:	25 ff ff 00 00       	and    eax,0xffff
c001eb34:	25 80 00 00 00       	and    eax,0x80
c001eb39:	85 c0                	test   eax,eax
c001eb3b:	74 5f                	je     c001eb9c <PIC::eoi(unsigned char)+0x94>
c001eb3d:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb41:	75 2d                	jne    c001eb70 <PIC::eoi(unsigned char)+0x68>
c001eb43:	6a 0b                	push   0xb
c001eb45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb48:	e8 49 ff ff ff       	call   c001ea96 <PIC::getIRQReg(int)>
c001eb4d:	83 c4 08             	add    esp,0x8
c001eb50:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb54:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb57:	66 85 c0             	test   ax,ax
c001eb5a:	78 14                	js     c001eb70 <PIC::eoi(unsigned char)+0x68>
c001eb5c:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb62:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb66:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb69:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb6d:	ee                   	out    dx,al
c001eb6e:	eb 2d                	jmp    c001eb9d <PIC::eoi(unsigned char)+0x95>
c001eb70:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb74:	76 12                	jbe    c001eb88 <PIC::eoi(unsigned char)+0x80>
c001eb76:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb7c:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb80:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb83:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb87:	ee                   	out    dx,al
c001eb88:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb8e:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb92:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb95:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb99:	ee                   	out    dx,al
c001eb9a:	eb 01                	jmp    c001eb9d <PIC::eoi(unsigned char)+0x95>
c001eb9c:	90                   	nop
c001eb9d:	c9                   	leave  
c001eb9e:	c3                   	ret    
c001eb9f:	90                   	nop

c001eba0 <PIC::remap()>:
c001eba0:	55                   	push   ebp
c001eba1:	89 e5                	mov    ebp,esp
c001eba3:	83 ec 48             	sub    esp,0x48
c001eba6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebad:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebb4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebba:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebbd:	89 c2                	mov    edx,eax
c001ebbf:	ec                   	in     al,dx
c001ebc0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebc3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebc6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebc9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebcf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebd2:	89 c2                	mov    edx,eax
c001ebd4:	ec                   	in     al,dx
c001ebd5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebd8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebdb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebde:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebe4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebe8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebeb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebee:	ee                   	out    dx,al
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebf5:	e8 96 fe ff ff       	call   c001ea90 <PIC::ioWait()>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec03:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec07:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec0a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec0d:	ee                   	out    dx,al
c001ec0e:	83 ec 0c             	sub    esp,0xc
c001ec11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec14:	e8 77 fe ff ff       	call   c001ea90 <PIC::ioWait()>
c001ec19:	83 c4 10             	add    esp,0x10
c001ec1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec1f:	25 ff 00 00 00       	and    eax,0xff
c001ec24:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec2a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec2d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec30:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec33:	ee                   	out    dx,al
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec3a:	e8 51 fe ff ff       	call   c001ea90 <PIC::ioWait()>
c001ec3f:	83 c4 10             	add    esp,0x10
c001ec42:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec45:	25 ff 00 00 00       	and    eax,0xff
c001ec4a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec50:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec53:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec56:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec59:	ee                   	out    dx,al
c001ec5a:	83 ec 0c             	sub    esp,0xc
c001ec5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec60:	e8 2b fe ff ff       	call   c001ea90 <PIC::ioWait()>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec6e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec72:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec75:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec78:	ee                   	out    dx,al
c001ec79:	83 ec 0c             	sub    esp,0xc
c001ec7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec7f:	e8 0c fe ff ff       	call   c001ea90 <PIC::ioWait()>
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec8d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec91:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec94:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec97:	ee                   	out    dx,al
c001ec98:	83 ec 0c             	sub    esp,0xc
c001ec9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec9e:	e8 ed fd ff ff       	call   c001ea90 <PIC::ioWait()>
c001eca3:	83 c4 10             	add    esp,0x10
c001eca6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecac:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecb0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecb3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecb6:	ee                   	out    dx,al
c001ecb7:	83 ec 0c             	sub    esp,0xc
c001ecba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecbd:	e8 ce fd ff ff       	call   c001ea90 <PIC::ioWait()>
c001ecc2:	83 c4 10             	add    esp,0x10
c001ecc5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001eccb:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001eccf:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecd2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ecd5:	ee                   	out    dx,al
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecdc:	e8 af fd ff ff       	call   c001ea90 <PIC::ioWait()>
c001ece1:	83 c4 10             	add    esp,0x10
c001ece4:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ece7:	25 ff 00 00 00       	and    eax,0xff
c001ecec:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ecf2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ecf5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ecf8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecfb:	ee                   	out    dx,al
c001ecfc:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ecff:	25 ff 00 00 00       	and    eax,0xff
c001ed04:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed0a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed0d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed10:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed13:	ee                   	out    dx,al
c001ed14:	90                   	nop
c001ed15:	c9                   	leave  
c001ed16:	c3                   	ret    
c001ed17:	90                   	nop

c001ed18 <PIC::open(int, int, void*)>:
c001ed18:	55                   	push   ebp
c001ed19:	89 e5                	mov    ebp,esp
c001ed1b:	83 ec 18             	sub    esp,0x18
c001ed1e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed24:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed28:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed2b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed2f:	ee                   	out    dx,al
c001ed30:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed36:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed3a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed3d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed41:	ee                   	out    dx,al
c001ed42:	83 ec 0c             	sub    esp,0xc
c001ed45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed48:	e8 53 fe ff ff       	call   c001eba0 <PIC::remap()>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	b8 00 00 00 00       	mov    eax,0x0
c001ed55:	c9                   	leave  
c001ed56:	c3                   	ret    
c001ed57:	90                   	nop

c001ed58 <APICTimer::close(int, int, void*)>:
c001ed58:	b8 00 00 00 00       	mov    eax,0x0
c001ed5d:	c3                   	ret    

c001ed5e <apicTimerHandler(regs*, void*)>:
c001ed5e:	83 ec 0c             	sub    esp,0xc
c001ed61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed67:	89 c2                	mov    edx,eax
c001ed69:	c1 fa 1f             	sar    edx,0x1f
c001ed6c:	52                   	push   edx
c001ed6d:	50                   	push   eax
c001ed6e:	6a 00                	push   0x0
c001ed70:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed75:	e8 92 07 00 00       	call   c001f50c <__udivdi3>
c001ed7a:	83 c4 10             	add    esp,0x10
c001ed7d:	83 ec 08             	sub    esp,0x8
c001ed80:	52                   	push   edx
c001ed81:	50                   	push   eax
c001ed82:	e8 08 40 ff ff       	call   c0012d8f <timerHandler(unsigned long long)>
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	90                   	nop
c001ed8b:	83 c4 0c             	add    esp,0xc
c001ed8e:	c3                   	ret    
c001ed8f:	90                   	nop

c001ed90 <APICTimer::write(int)>:
c001ed90:	53                   	push   ebx
c001ed91:	83 ec 28             	sub    esp,0x28
c001ed94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed9c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eda2:	e8 2b 5b ff ff       	call   c00148d2 <thisCPU()>
c001eda7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edad:	83 ec 0c             	sub    esp,0xc
c001edb0:	50                   	push   eax
c001edb1:	e8 a2 f5 ff ff       	call   c001e358 <APIC::getBase()>
c001edb6:	83 c4 10             	add    esp,0x10
c001edb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edbd:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edc2:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001edc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edd4:	05 e0 03 00 00       	add    eax,0x3e0
c001edd9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede3:	05 80 03 00 00       	add    eax,0x380
c001ede8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edee:	fb                   	sti    
c001edef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edf7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001edfc:	83 d2 00             	adc    edx,0x0
c001edff:	89 c1                	mov    ecx,eax
c001ee01:	89 d3                	mov    ebx,edx
c001ee03:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee08:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee0e:	39 c8                	cmp    eax,ecx
c001ee10:	89 d0                	mov    eax,edx
c001ee12:	19 d8                	sbb    eax,ebx
c001ee14:	73 02                	jae    c001ee18 <APICTimer::write(int)+0x88>
c001ee16:	eb d7                	jmp    c001edef <APICTimer::write(int)+0x5f>
c001ee18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee1c:	05 20 03 00 00       	add    eax,0x320
c001ee21:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee2b:	05 90 03 00 00       	add    eax,0x390
c001ee30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee32:	f7 d0                	not    eax
c001ee34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee38:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee40:	ba 00 00 00 00       	mov    edx,0x0
c001ee45:	f7 f3                	div    ebx
c001ee47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee4f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee55:	0d 00 00 02 00       	or     eax,0x20000
c001ee5a:	89 c2                	mov    edx,eax
c001ee5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee60:	05 20 03 00 00       	add    eax,0x320
c001ee65:	89 10                	mov    DWORD PTR [eax],edx
c001ee67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee6b:	05 e0 03 00 00       	add    eax,0x3e0
c001ee70:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee7a:	05 80 03 00 00       	add    eax,0x380
c001ee7f:	89 c2                	mov    edx,eax
c001ee81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee85:	89 02                	mov    DWORD PTR [edx],eax
c001ee87:	90                   	nop
c001ee88:	83 c4 28             	add    esp,0x28
c001ee8b:	5b                   	pop    ebx
c001ee8c:	c3                   	ret    
c001ee8d:	90                   	nop

c001ee8e <APICTimer::open(int, int, void*)>:
c001ee8e:	57                   	push   edi
c001ee8f:	56                   	push   esi
c001ee90:	53                   	push   ebx
c001ee91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee97:	83 c0 24             	add    eax,0x24
c001ee9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9c:	83 ec 08             	sub    esp,0x8
c001ee9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea7:	ff d0                	call   eax
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	e8 21 5a ff ff       	call   c00148d2 <thisCPU()>
c001eeb1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	50                   	push   eax
c001eebb:	e8 98 f4 ff ff       	call   c001e358 <APIC::getBase()>
c001eec0:	83 c4 10             	add    esp,0x10
c001eec3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eed3:	89 c7                	mov    edi,eax
c001eed5:	81 e7 ff 00 00 00    	and    edi,0xff
c001eedb:	89 d0                	mov    eax,edx
c001eedd:	ba 00 00 00 00       	mov    edx,0x0
c001eee2:	89 c1                	mov    ecx,eax
c001eee4:	80 e5 ff             	and    ch,0xff
c001eee7:	89 cb                	mov    ebx,ecx
c001eee9:	89 d0                	mov    eax,edx
c001eeeb:	25 ff 00 00 00       	and    eax,0xff
c001eef0:	89 c6                	mov    esi,eax
c001eef2:	89 d8                	mov    eax,ebx
c001eef4:	89 f2                	mov    edx,esi
c001eef6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eefa:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eefd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef01:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef05:	83 e0 00             	and    eax,0x0
c001ef08:	09 d0                	or     eax,edx
c001ef0a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef12:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef18:	8d 50 01             	lea    edx,[eax+0x1]
c001ef1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef1f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef25:	31 d2                	xor    edx,edx
c001ef27:	88 c2                	mov    dl,al
c001ef29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2d:	83 c2 08             	add    edx,0x8
c001ef30:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef34:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef3a:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef40:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef5a:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef64:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef6a:	83 ec 0c             	sub    esp,0xc
c001ef6d:	51                   	push   ecx
c001ef6e:	6a 01                	push   0x1
c001ef70:	68 5e ed 01 c0       	push   0xc001ed5e
c001ef75:	52                   	push   edx
c001ef76:	50                   	push   eax
c001ef77:	e8 fc 15 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef7c:	83 c4 20             	add    esp,0x20
c001ef7f:	89 c2                	mov    edx,eax
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef8b:	b8 00 00 00 00       	mov    eax,0x0
c001ef90:	5b                   	pop    ebx
c001ef91:	5e                   	pop    esi
c001ef92:	5f                   	pop    edi
c001ef93:	c3                   	ret    

c001ef94 <APICTimer::APICTimer()>:
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	83 ec 08             	sub    esp,0x8
c001ef9e:	68 30 3b 02 c0       	push   0xc0023b30
c001efa3:	50                   	push   eax
c001efa4:	e8 57 3d ff ff       	call   c0012d00 <Timer::Timer(char const*)>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb5:	89 10                	mov    DWORD PTR [eax],edx
c001efb7:	90                   	nop
c001efb8:	83 c4 0c             	add    esp,0xc
c001efbb:	c3                   	ret    

c001efbc <PIT::write(int)>:
c001efbc:	83 ec 10             	sub    esp,0x10
c001efbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efc7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efd1:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efd6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efdb:	89 c2                	mov    edx,eax
c001efdd:	c1 fa 1f             	sar    edx,0x1f
c001efe0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efe8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efef:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eff4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eff8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001effd:	ee                   	out    dx,al
c001effe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f002:	25 ff 00 00 00       	and    eax,0xff
c001f007:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f00e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f012:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f016:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f01b:	ee                   	out    dx,al
c001f01c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f020:	c1 f8 08             	sar    eax,0x8
c001f023:	25 ff 00 00 00       	and    eax,0xff
c001f028:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f02f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f033:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f037:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f03c:	ee                   	out    dx,al
c001f03d:	90                   	nop
c001f03e:	83 c4 10             	add    esp,0x10
c001f041:	c3                   	ret    

c001f042 <pitHandler(regs*, void*)>:
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f04a:	89 c2                	mov    edx,eax
c001f04c:	c1 fa 1f             	sar    edx,0x1f
c001f04f:	52                   	push   edx
c001f050:	50                   	push   eax
c001f051:	6a 00                	push   0x0
c001f053:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f058:	e8 af 04 00 00       	call   c001f50c <__udivdi3>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	83 ec 08             	sub    esp,0x8
c001f063:	52                   	push   edx
c001f064:	50                   	push   eax
c001f065:	e8 25 3d ff ff       	call   c0012d8f <timerHandler(unsigned long long)>
c001f06a:	83 c4 10             	add    esp,0x10
c001f06d:	90                   	nop
c001f06e:	83 c4 0c             	add    esp,0xc
c001f071:	c3                   	ret    

c001f072 <PIT::open(int, int, void*)>:
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f079:	8b 00                	mov    eax,DWORD PTR [eax]
c001f07b:	83 c0 24             	add    eax,0x24
c001f07e:	8b 00                	mov    eax,DWORD PTR [eax]
c001f080:	83 ec 08             	sub    esp,0x8
c001f083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08b:	ff d0                	call   eax
c001f08d:	83 c4 10             	add    esp,0x10
c001f090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	6a 00                	push   0x0
c001f099:	6a 01                	push   0x1
c001f09b:	68 42 f0 01 c0       	push   0xc001f042
c001f0a0:	6a 00                	push   0x0
c001f0a2:	50                   	push   eax
c001f0a3:	e8 d0 14 ff ff       	call   c0010578 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0a8:	83 c4 20             	add    esp,0x20
c001f0ab:	89 c2                	mov    edx,eax
c001f0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0b7:	b8 00 00 00 00       	mov    eax,0x0
c001f0bc:	83 c4 0c             	add    esp,0xc
c001f0bf:	c3                   	ret    

c001f0c0 <PIT::close(int, int, void*)>:
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d5:	6a 01                	push   0x1
c001f0d7:	68 42 f0 01 c0       	push   0xc001f042
c001f0dc:	6a 00                	push   0x0
c001f0de:	50                   	push   eax
c001f0df:	e8 f2 14 ff ff       	call   c00105d6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0e4:	83 c4 10             	add    esp,0x10
c001f0e7:	b8 00 00 00 00       	mov    eax,0x0
c001f0ec:	83 c4 0c             	add    esp,0xc
c001f0ef:	c3                   	ret    

c001f0f0 <PIT::PIT()>:
c001f0f0:	83 ec 0c             	sub    esp,0xc
c001f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f7:	83 ec 08             	sub    esp,0x8
c001f0fa:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f0ff:	50                   	push   eax
c001f100:	e8 fb 3b ff ff       	call   c0012d00 <Timer::Timer(char const*)>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f111:	89 10                	mov    DWORD PTR [eax],edx
c001f113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f117:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f11d:	31 d2                	xor    edx,edx
c001f11f:	88 c2                	mov    dl,al
c001f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f125:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f130:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f136:	31 d2                	xor    edx,edx
c001f138:	88 c2                	mov    dl,al
c001f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f147:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f14d:	8d 50 01             	lea    edx,[eax+0x1]
c001f150:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f154:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f15a:	31 d2                	xor    edx,edx
c001f15c:	88 c2                	mov    dl,al
c001f15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f162:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f166:	83 e1 3f             	and    ecx,0x3f
c001f169:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f16d:	90                   	nop
c001f16e:	83 c4 0c             	add    esp,0xc
c001f171:	c3                   	ret    
c001f172:	66 90                	xchg   ax,ax
c001f174:	66 90                	xchg   ax,ax
c001f176:	66 90                	xchg   ax,ax
c001f178:	66 90                	xchg   ax,ax
c001f17a:	66 90                	xchg   ax,ax
c001f17c:	66 90                	xchg   ax,ax
c001f17e:	66 90                	xchg   ax,ax

c001f180 <avxDetect>:
c001f180:	b8 00 00 00 00       	mov    eax,0x0
c001f185:	c3                   	ret    

c001f186 <avxSave>:
c001f186:	c3                   	ret    

c001f187 <avxLoad>:
c001f187:	c3                   	ret    

c001f188 <avxInit>:
c001f188:	c3                   	ret    

c001f189 <avxClose>:
c001f189:	c3                   	ret    
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <sseDetect>:
c001f190:	b8 01 00 00 00       	mov    eax,0x1
c001f195:	0f a2                	cpuid  
c001f197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f19d:	74 06                	je     c001f1a5 <sseDetect.noSSE>
c001f19f:	b8 01 00 00 00       	mov    eax,0x1
c001f1a4:	c3                   	ret    

c001f1a5 <sseDetect.noSSE>:
c001f1a5:	b8 00 00 00 00       	mov    eax,0x0
c001f1aa:	c3                   	ret    

c001f1ab <sseSave>:
c001f1ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1b0:	c3                   	ret    

c001f1b1 <sseLoad>:
c001f1b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1b6:	c3                   	ret    

c001f1b7 <sseInit>:
c001f1b7:	e8 40 00 00 00       	call   c001f1fc <x87Init>
c001f1bc:	0f 20 e0             	mov    eax,cr4
c001f1bf:	66 0d 00 06          	or     ax,0x600
c001f1c3:	0f 22 e0             	mov    cr4,eax
c001f1c6:	c3                   	ret    

c001f1c7 <sseClose>:
c001f1c7:	c3                   	ret    
c001f1c8:	66 90                	xchg   ax,ax
c001f1ca:	66 90                	xchg   ax,ax
c001f1cc:	66 90                	xchg   ax,ax
c001f1ce:	66 90                	xchg   ax,ax

c001f1d0 <value_37F>:
c001f1d0:	7f 03                	jg     c001f1d5 <value_37A+0x1>

c001f1d2 <value_37E>:
c001f1d2:	7e 03                	jle    c001f1d7 <x87Detect+0x1>

c001f1d4 <value_37A>:
c001f1d4:	7a 03                	jp     c001f1d9 <x87Detect+0x3>

c001f1d6 <x87Detect>:
c001f1d6:	b8 01 00 00 00       	mov    eax,0x1
c001f1db:	0f a2                	cpuid  
c001f1dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1e3:	74 06                	je     c001f1eb <x87Detect.nox87>
c001f1e5:	b8 01 00 00 00       	mov    eax,0x1
c001f1ea:	c3                   	ret    

c001f1eb <x87Detect.nox87>:
c001f1eb:	b8 00 00 00 00       	mov    eax,0x0
c001f1f0:	c3                   	ret    

c001f1f1 <x87Save>:
c001f1f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1f6:	c3                   	ret    

c001f1f7 <x87Load>:
c001f1f7:	dd 64 24 08          	frstor [esp+0x8]
c001f1fb:	c3                   	ret    

c001f1fc <x87Init>:
c001f1fc:	9b db e3             	finit  
c001f1ff:	0f 20 c0             	mov    eax,cr0
c001f202:	66 25 fb ff          	and    ax,0xfffb
c001f206:	66 0d 22 00          	or     ax,0x22
c001f20a:	0f 22 c0             	mov    cr0,eax
c001f20d:	0f 06                	clts   
c001f20f:	d9 2d d4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1d4
c001f215:	c3                   	ret    

c001f216 <x87Close>:
c001f216:	c3                   	ret    
c001f217:	90                   	nop

c001f218 <__do_global_ctors_aux>:
c001f218:	a1 f8 02 02 c0       	mov    eax,ds:0xc00202f8
c001f21d:	83 f8 ff             	cmp    eax,0xffffffff
c001f220:	74 1a                	je     c001f23c <__do_global_ctors_aux+0x24>
c001f222:	55                   	push   ebp
c001f223:	89 e5                	mov    ebp,esp
c001f225:	53                   	push   ebx
c001f226:	52                   	push   edx
c001f227:	bb f8 02 02 c0       	mov    ebx,0xc00202f8
c001f22c:	ff d0                	call   eax
c001f22e:	83 eb 04             	sub    ebx,0x4
c001f231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f233:	83 f8 ff             	cmp    eax,0xffffffff
c001f236:	75 f4                	jne    c001f22c <__do_global_ctors_aux+0x14>
c001f238:	58                   	pop    eax
c001f239:	5b                   	pop    ebx
c001f23a:	5d                   	pop    ebp
c001f23b:	c3                   	ret    
c001f23c:	c3                   	ret    
c001f23d:	66 90                	xchg   ax,ax
c001f23f:	90                   	nop

c001f240 <__divdi3>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f252:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f256:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f25a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f25e:	85 db                	test   ebx,ebx
c001f260:	0f 88 8e 00 00 00    	js     c001f2f4 <__divdi3+0xb4>
c001f266:	89 dd                	mov    ebp,ebx
c001f268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f270:	89 d3                	mov    ebx,edx
c001f272:	85 d2                	test   edx,edx
c001f274:	79 0d                	jns    c001f283 <__divdi3+0x43>
c001f276:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f27a:	f7 d8                	neg    eax
c001f27c:	83 d2 00             	adc    edx,0x0
c001f27f:	f7 da                	neg    edx
c001f281:	89 d3                	mov    ebx,edx
c001f283:	89 c7                	mov    edi,eax
c001f285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f288:	85 db                	test   ebx,ebx
c001f28a:	75 48                	jne    c001f2d4 <__divdi3+0x94>
c001f28c:	39 ef                	cmp    edi,ebp
c001f28e:	76 24                	jbe    c001f2b4 <__divdi3+0x74>
c001f290:	89 ea                	mov    edx,ebp
c001f292:	f7 f7                	div    edi
c001f294:	89 c1                	mov    ecx,eax
c001f296:	31 f6                	xor    esi,esi
c001f298:	89 c8                	mov    eax,ecx
c001f29a:	89 f2                	mov    edx,esi
c001f29c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a0:	85 c9                	test   ecx,ecx
c001f2a2:	74 07                	je     c001f2ab <__divdi3+0x6b>
c001f2a4:	f7 d8                	neg    eax
c001f2a6:	83 d2 00             	adc    edx,0x0
c001f2a9:	f7 da                	neg    edx
c001f2ab:	83 c4 1c             	add    esp,0x1c
c001f2ae:	5b                   	pop    ebx
c001f2af:	5e                   	pop    esi
c001f2b0:	5f                   	pop    edi
c001f2b1:	5d                   	pop    ebp
c001f2b2:	c3                   	ret    
c001f2b3:	90                   	nop
c001f2b4:	85 ff                	test   edi,edi
c001f2b6:	75 0b                	jne    c001f2c3 <__divdi3+0x83>
c001f2b8:	b8 01 00 00 00       	mov    eax,0x1
c001f2bd:	31 d2                	xor    edx,edx
c001f2bf:	f7 f3                	div    ebx
c001f2c1:	89 c7                	mov    edi,eax
c001f2c3:	31 d2                	xor    edx,edx
c001f2c5:	89 e8                	mov    eax,ebp
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 c6                	mov    esi,eax
c001f2cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2ce:	f7 f7                	div    edi
c001f2d0:	89 c1                	mov    ecx,eax
c001f2d2:	eb c4                	jmp    c001f298 <__divdi3+0x58>
c001f2d4:	39 eb                	cmp    ebx,ebp
c001f2d6:	77 3c                	ja     c001f314 <__divdi3+0xd4>
c001f2d8:	0f bd f3             	bsr    esi,ebx
c001f2db:	83 f6 1f             	xor    esi,0x1f
c001f2de:	75 40                	jne    c001f320 <__divdi3+0xe0>
c001f2e0:	39 eb                	cmp    ebx,ebp
c001f2e2:	72 09                	jb     c001f2ed <__divdi3+0xad>
c001f2e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2e7:	0f 87 97 00 00 00    	ja     c001f384 <__divdi3+0x144>
c001f2ed:	b9 01 00 00 00       	mov    ecx,0x1
c001f2f2:	eb a4                	jmp    c001f298 <__divdi3+0x58>
c001f2f4:	f7 d9                	neg    ecx
c001f2f6:	83 d3 00             	adc    ebx,0x0
c001f2f9:	f7 db                	neg    ebx
c001f2fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f302:	89 dd                	mov    ebp,ebx
c001f304:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f30c:	e9 5f ff ff ff       	jmp    c001f270 <__divdi3+0x30>
c001f311:	8d 76 00             	lea    esi,[esi+0x0]
c001f314:	31 f6                	xor    esi,esi
c001f316:	31 c9                	xor    ecx,ecx
c001f318:	e9 7b ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f31d:	8d 76 00             	lea    esi,[esi+0x0]
c001f320:	b8 20 00 00 00       	mov    eax,0x20
c001f325:	29 f0                	sub    eax,esi
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e3                	shl    ebx,cl
c001f32b:	89 fa                	mov    edx,edi
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 ea                	shr    edx,cl
c001f331:	09 da                	or     edx,ebx
c001f333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e7                	shl    edi,cl
c001f33b:	89 eb                	mov    ebx,ebp
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 eb                	shr    ebx,cl
c001f341:	89 f1                	mov    ecx,esi
c001f343:	d3 e5                	shl    ebp,cl
c001f345:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f348:	88 c1                	mov    cl,al
c001f34a:	d3 ea                	shr    edx,cl
c001f34c:	09 d5                	or     ebp,edx
c001f34e:	89 e8                	mov    eax,ebp
c001f350:	89 da                	mov    edx,ebx
c001f352:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f356:	89 d3                	mov    ebx,edx
c001f358:	89 c5                	mov    ebp,eax
c001f35a:	f7 e7                	mul    edi
c001f35c:	39 d3                	cmp    ebx,edx
c001f35e:	72 18                	jb     c001f378 <__divdi3+0x138>
c001f360:	74 0a                	je     c001f36c <__divdi3+0x12c>
c001f362:	89 e9                	mov    ecx,ebp
c001f364:	31 f6                	xor    esi,esi
c001f366:	e9 2d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f36b:	90                   	nop
c001f36c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f36f:	89 f1                	mov    ecx,esi
c001f371:	d3 e7                	shl    edi,cl
c001f373:	39 c7                	cmp    edi,eax
c001f375:	73 eb                	jae    c001f362 <__divdi3+0x122>
c001f377:	90                   	nop
c001f378:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f37b:	31 f6                	xor    esi,esi
c001f37d:	e9 16 ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f382:	66 90                	xchg   ax,ax
c001f384:	31 c9                	xor    ecx,ecx
c001f386:	e9 0d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f38b:	90                   	nop

c001f38c <__moddi3>:
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	83 ec 2c             	sub    esp,0x2c
c001f393:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f397:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f39b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f39f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3a3:	85 db                	test   ebx,ebx
c001f3a5:	0f 88 85 00 00 00    	js     c001f430 <__moddi3+0xa4>
c001f3ab:	89 de                	mov    esi,ebx
c001f3ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3b5:	89 d7                	mov    edi,edx
c001f3b7:	85 d2                	test   edx,edx
c001f3b9:	79 09                	jns    c001f3c4 <__moddi3+0x38>
c001f3bb:	f7 d8                	neg    eax
c001f3bd:	83 d2 00             	adc    edx,0x0
c001f3c0:	f7 da                	neg    edx
c001f3c2:	89 d7                	mov    edi,edx
c001f3c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3c8:	89 cd                	mov    ebp,ecx
c001f3ca:	85 ff                	test   edi,edi
c001f3cc:	75 52                	jne    c001f420 <__moddi3+0x94>
c001f3ce:	89 c3                	mov    ebx,eax
c001f3d0:	39 f0                	cmp    eax,esi
c001f3d2:	76 24                	jbe    c001f3f8 <__moddi3+0x6c>
c001f3d4:	89 c8                	mov    eax,ecx
c001f3d6:	89 f2                	mov    edx,esi
c001f3d8:	f7 f3                	div    ebx
c001f3da:	89 d6                	mov    esi,edx
c001f3dc:	89 f0                	mov    eax,esi
c001f3de:	31 d2                	xor    edx,edx
c001f3e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3e4:	85 c9                	test   ecx,ecx
c001f3e6:	74 07                	je     c001f3ef <__moddi3+0x63>
c001f3e8:	f7 d8                	neg    eax
c001f3ea:	83 d2 00             	adc    edx,0x0
c001f3ed:	f7 da                	neg    edx
c001f3ef:	83 c4 2c             	add    esp,0x2c
c001f3f2:	5b                   	pop    ebx
c001f3f3:	5e                   	pop    esi
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	c3                   	ret    
c001f3f7:	90                   	nop
c001f3f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3fc:	85 db                	test   ebx,ebx
c001f3fe:	75 0d                	jne    c001f40d <__moddi3+0x81>
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	31 d2                	xor    edx,edx
c001f407:	f7 f7                	div    edi
c001f409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	31 d2                	xor    edx,edx
c001f411:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f415:	f7 f7                	div    edi
c001f417:	89 e8                	mov    eax,ebp
c001f419:	f7 f7                	div    edi
c001f41b:	89 d6                	mov    esi,edx
c001f41d:	eb bd                	jmp    c001f3dc <__moddi3+0x50>
c001f41f:	90                   	nop
c001f420:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f424:	39 f7                	cmp    edi,esi
c001f426:	76 20                	jbe    c001f448 <__moddi3+0xbc>
c001f428:	89 c8                	mov    eax,ecx
c001f42a:	89 f2                	mov    edx,esi
c001f42c:	eb b2                	jmp    c001f3e0 <__moddi3+0x54>
c001f42e:	66 90                	xchg   ax,ax
c001f430:	f7 d9                	neg    ecx
c001f432:	83 d3 00             	adc    ebx,0x0
c001f435:	f7 db                	neg    ebx
c001f437:	89 de                	mov    esi,ebx
c001f439:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f441:	e9 6f ff ff ff       	jmp    c001f3b5 <__moddi3+0x29>
c001f446:	66 90                	xchg   ax,ax
c001f448:	0f bd c7             	bsr    eax,edi
c001f44b:	83 f0 1f             	xor    eax,0x1f
c001f44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f452:	75 24                	jne    c001f478 <__moddi3+0xec>
c001f454:	39 f7                	cmp    edi,esi
c001f456:	72 06                	jb     c001f45e <__moddi3+0xd2>
c001f458:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f45c:	77 0c                	ja     c001f46a <__moddi3+0xde>
c001f45e:	89 e9                	mov    ecx,ebp
c001f460:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f464:	19 fe                	sbb    esi,edi
c001f466:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f46a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f46e:	89 f2                	mov    edx,esi
c001f470:	e9 6b ff ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f475:	8d 76 00             	lea    esi,[esi+0x0]
c001f478:	b8 20 00 00 00       	mov    eax,0x20
c001f47d:	89 c2                	mov    edx,eax
c001f47f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f483:	29 da                	sub    edx,ebx
c001f485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f489:	88 d9                	mov    cl,bl
c001f48b:	d3 e7                	shl    edi,cl
c001f48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f491:	88 d1                	mov    cl,dl
c001f493:	d3 e8                	shr    eax,cl
c001f495:	09 c7                	or     edi,eax
c001f497:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f49b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f49f:	89 d8                	mov    eax,ebx
c001f4a1:	88 d9                	mov    cl,bl
c001f4a3:	d3 e7                	shl    edi,cl
c001f4a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a9:	89 f3                	mov    ebx,esi
c001f4ab:	88 d1                	mov    cl,dl
c001f4ad:	d3 eb                	shr    ebx,cl
c001f4af:	89 c7                	mov    edi,eax
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 e6                	shl    esi,cl
c001f4b5:	89 e8                	mov    eax,ebp
c001f4b7:	88 d1                	mov    cl,dl
c001f4b9:	d3 e8                	shr    eax,cl
c001f4bb:	09 f0                	or     eax,esi
c001f4bd:	89 f9                	mov    ecx,edi
c001f4bf:	d3 e5                	shl    ebp,cl
c001f4c1:	89 da                	mov    edx,ebx
c001f4c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4c7:	89 d3                	mov    ebx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d1                	mov    ecx,edx
c001f4d1:	39 d3                	cmp    ebx,edx
c001f4d3:	72 27                	jb     c001f4fc <__moddi3+0x170>
c001f4d5:	74 21                	je     c001f4f8 <__moddi3+0x16c>
c001f4d7:	29 f5                	sub    ebp,esi
c001f4d9:	19 cb                	sbb    ebx,ecx
c001f4db:	89 de                	mov    esi,ebx
c001f4dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4e1:	d3 e6                	shl    esi,cl
c001f4e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4e7:	89 f9                	mov    ecx,edi
c001f4e9:	d3 ed                	shr    ebp,cl
c001f4eb:	09 ee                	or     esi,ebp
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	d3 eb                	shr    ebx,cl
c001f4f1:	89 da                	mov    edx,ebx
c001f4f3:	e9 e8 fe ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f4f8:	39 c5                	cmp    ebp,eax
c001f4fa:	73 db                	jae    c001f4d7 <__moddi3+0x14b>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f504:	89 d1                	mov    ecx,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__moddi3+0x14b>
c001f50a:	66 90                	xchg   ax,ax

c001f50c <__udivdi3>:
c001f50c:	55                   	push   ebp
c001f50d:	57                   	push   edi
c001f50e:	56                   	push   esi
c001f50f:	53                   	push   ebx
c001f510:	83 ec 1c             	sub    esp,0x1c
c001f513:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f517:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f51b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f51f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f523:	85 d2                	test   edx,edx
c001f525:	75 41                	jne    c001f568 <__udivdi3+0x5c>
c001f527:	39 f7                	cmp    edi,esi
c001f529:	76 15                	jbe    c001f540 <__udivdi3+0x34>
c001f52b:	89 e8                	mov    eax,ebp
c001f52d:	89 f2                	mov    edx,esi
c001f52f:	f7 f7                	div    edi
c001f531:	31 db                	xor    ebx,ebx
c001f533:	89 da                	mov    edx,ebx
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	5b                   	pop    ebx
c001f539:	5e                   	pop    esi
c001f53a:	5f                   	pop    edi
c001f53b:	5d                   	pop    ebp
c001f53c:	c3                   	ret    
c001f53d:	8d 76 00             	lea    esi,[esi+0x0]
c001f540:	89 f9                	mov    ecx,edi
c001f542:	85 ff                	test   edi,edi
c001f544:	75 0b                	jne    c001f551 <__udivdi3+0x45>
c001f546:	b8 01 00 00 00       	mov    eax,0x1
c001f54b:	31 d2                	xor    edx,edx
c001f54d:	f7 f7                	div    edi
c001f54f:	89 c1                	mov    ecx,eax
c001f551:	31 d2                	xor    edx,edx
c001f553:	89 f0                	mov    eax,esi
c001f555:	f7 f1                	div    ecx
c001f557:	89 c3                	mov    ebx,eax
c001f559:	89 e8                	mov    eax,ebp
c001f55b:	f7 f1                	div    ecx
c001f55d:	89 da                	mov    edx,ebx
c001f55f:	83 c4 1c             	add    esp,0x1c
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	5f                   	pop    edi
c001f565:	5d                   	pop    ebp
c001f566:	c3                   	ret    
c001f567:	90                   	nop
c001f568:	39 f2                	cmp    edx,esi
c001f56a:	77 1c                	ja     c001f588 <__udivdi3+0x7c>
c001f56c:	0f bd da             	bsr    ebx,edx
c001f56f:	83 f3 1f             	xor    ebx,0x1f
c001f572:	75 24                	jne    c001f598 <__udivdi3+0x8c>
c001f574:	39 f2                	cmp    edx,esi
c001f576:	72 08                	jb     c001f580 <__udivdi3+0x74>
c001f578:	39 ef                	cmp    edi,ebp
c001f57a:	0f 87 84 00 00 00    	ja     c001f604 <__udivdi3+0xf8>
c001f580:	b8 01 00 00 00       	mov    eax,0x1
c001f585:	eb ac                	jmp    c001f533 <__udivdi3+0x27>
c001f587:	90                   	nop
c001f588:	31 db                	xor    ebx,ebx
c001f58a:	31 c0                	xor    eax,eax
c001f58c:	89 da                	mov    edx,ebx
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	5b                   	pop    ebx
c001f592:	5e                   	pop    esi
c001f593:	5f                   	pop    edi
c001f594:	5d                   	pop    ebp
c001f595:	c3                   	ret    
c001f596:	66 90                	xchg   ax,ax
c001f598:	b8 20 00 00 00       	mov    eax,0x20
c001f59d:	29 d8                	sub    eax,ebx
c001f59f:	88 d9                	mov    cl,bl
c001f5a1:	d3 e2                	shl    edx,cl
c001f5a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5a7:	89 fa                	mov    edx,edi
c001f5a9:	88 c1                	mov    cl,al
c001f5ab:	d3 ea                	shr    edx,cl
c001f5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b1:	09 d1                	or     ecx,edx
c001f5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5b7:	88 d9                	mov    cl,bl
c001f5b9:	d3 e7                	shl    edi,cl
c001f5bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5bf:	89 f7                	mov    edi,esi
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 ef                	shr    edi,cl
c001f5c5:	88 d9                	mov    cl,bl
c001f5c7:	d3 e6                	shl    esi,cl
c001f5c9:	89 ea                	mov    edx,ebp
c001f5cb:	88 c1                	mov    cl,al
c001f5cd:	d3 ea                	shr    edx,cl
c001f5cf:	09 d6                	or     esi,edx
c001f5d1:	89 f0                	mov    eax,esi
c001f5d3:	89 fa                	mov    edx,edi
c001f5d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	89 c6                	mov    esi,eax
c001f5dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5e1:	39 d7                	cmp    edi,edx
c001f5e3:	72 13                	jb     c001f5f8 <__udivdi3+0xec>
c001f5e5:	74 09                	je     c001f5f0 <__udivdi3+0xe4>
c001f5e7:	89 f0                	mov    eax,esi
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	e9 43 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f5f0:	88 d9                	mov    cl,bl
c001f5f2:	d3 e5                	shl    ebp,cl
c001f5f4:	39 c5                	cmp    ebp,eax
c001f5f6:	73 ef                	jae    c001f5e7 <__udivdi3+0xdb>
c001f5f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5fb:	31 db                	xor    ebx,ebx
c001f5fd:	e9 31 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f602:	66 90                	xchg   ax,ax
c001f604:	31 c0                	xor    eax,eax
c001f606:	e9 28 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f60b:	90                   	nop

c001f60c <__umoddi3>:
c001f60c:	55                   	push   ebp
c001f60d:	57                   	push   edi
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	83 ec 1c             	sub    esp,0x1c
c001f613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f61b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f61f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f623:	89 da                	mov    edx,ebx
c001f625:	85 c0                	test   eax,eax
c001f627:	75 37                	jne    c001f660 <__umoddi3+0x54>
c001f629:	39 df                	cmp    edi,ebx
c001f62b:	76 13                	jbe    c001f640 <__umoddi3+0x34>
c001f62d:	89 f0                	mov    eax,esi
c001f62f:	f7 f7                	div    edi
c001f631:	89 d0                	mov    eax,edx
c001f633:	31 d2                	xor    edx,edx
c001f635:	83 c4 1c             	add    esp,0x1c
c001f638:	5b                   	pop    ebx
c001f639:	5e                   	pop    esi
c001f63a:	5f                   	pop    edi
c001f63b:	5d                   	pop    ebp
c001f63c:	c3                   	ret    
c001f63d:	8d 76 00             	lea    esi,[esi+0x0]
c001f640:	89 fd                	mov    ebp,edi
c001f642:	85 ff                	test   edi,edi
c001f644:	75 0b                	jne    c001f651 <__umoddi3+0x45>
c001f646:	b8 01 00 00 00       	mov    eax,0x1
c001f64b:	31 d2                	xor    edx,edx
c001f64d:	f7 f7                	div    edi
c001f64f:	89 c5                	mov    ebp,eax
c001f651:	89 d8                	mov    eax,ebx
c001f653:	31 d2                	xor    edx,edx
c001f655:	f7 f5                	div    ebp
c001f657:	89 f0                	mov    eax,esi
c001f659:	f7 f5                	div    ebp
c001f65b:	89 d0                	mov    eax,edx
c001f65d:	eb d4                	jmp    c001f633 <__umoddi3+0x27>
c001f65f:	90                   	nop
c001f660:	89 f1                	mov    ecx,esi
c001f662:	39 d8                	cmp    eax,ebx
c001f664:	76 0a                	jbe    c001f670 <__umoddi3+0x64>
c001f666:	89 f0                	mov    eax,esi
c001f668:	83 c4 1c             	add    esp,0x1c
c001f66b:	5b                   	pop    ebx
c001f66c:	5e                   	pop    esi
c001f66d:	5f                   	pop    edi
c001f66e:	5d                   	pop    ebp
c001f66f:	c3                   	ret    
c001f670:	0f bd e8             	bsr    ebp,eax
c001f673:	83 f5 1f             	xor    ebp,0x1f
c001f676:	75 1c                	jne    c001f694 <__umoddi3+0x88>
c001f678:	39 d8                	cmp    eax,ebx
c001f67a:	72 04                	jb     c001f680 <__umoddi3+0x74>
c001f67c:	39 f7                	cmp    edi,esi
c001f67e:	77 08                	ja     c001f688 <__umoddi3+0x7c>
c001f680:	89 da                	mov    edx,ebx
c001f682:	29 fe                	sub    esi,edi
c001f684:	19 c2                	sbb    edx,eax
c001f686:	89 f1                	mov    ecx,esi
c001f688:	89 c8                	mov    eax,ecx
c001f68a:	83 c4 1c             	add    esp,0x1c
c001f68d:	5b                   	pop    ebx
c001f68e:	5e                   	pop    esi
c001f68f:	5f                   	pop    edi
c001f690:	5d                   	pop    ebp
c001f691:	c3                   	ret    
c001f692:	66 90                	xchg   ax,ax
c001f694:	ba 20 00 00 00       	mov    edx,0x20
c001f699:	29 ea                	sub    edx,ebp
c001f69b:	89 e9                	mov    ecx,ebp
c001f69d:	d3 e0                	shl    eax,cl
c001f69f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6a3:	89 f8                	mov    eax,edi
c001f6a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6a9:	88 d1                	mov    cl,dl
c001f6ab:	d3 e8                	shr    eax,cl
c001f6ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6b1:	09 c1                	or     ecx,eax
c001f6b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6b7:	89 e9                	mov    ecx,ebp
c001f6b9:	d3 e7                	shl    edi,cl
c001f6bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6bf:	89 d8                	mov    eax,ebx
c001f6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6c5:	88 d1                	mov    cl,dl
c001f6c7:	d3 e8                	shr    eax,cl
c001f6c9:	89 c7                	mov    edi,eax
c001f6cb:	89 e9                	mov    ecx,ebp
c001f6cd:	d3 e3                	shl    ebx,cl
c001f6cf:	89 f0                	mov    eax,esi
c001f6d1:	88 d1                	mov    cl,dl
c001f6d3:	d3 e8                	shr    eax,cl
c001f6d5:	09 d8                	or     eax,ebx
c001f6d7:	89 e9                	mov    ecx,ebp
c001f6d9:	d3 e6                	shl    esi,cl
c001f6db:	89 f3                	mov    ebx,esi
c001f6dd:	89 fa                	mov    edx,edi
c001f6df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6e3:	89 d1                	mov    ecx,edx
c001f6e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	39 d1                	cmp    ecx,edx
c001f6ef:	72 27                	jb     c001f718 <__umoddi3+0x10c>
c001f6f1:	74 21                	je     c001f714 <__umoddi3+0x108>
c001f6f3:	89 ca                	mov    edx,ecx
c001f6f5:	29 f3                	sub    ebx,esi
c001f6f7:	19 fa                	sbb    edx,edi
c001f6f9:	89 d0                	mov    eax,edx
c001f6fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ff:	d3 e0                	shl    eax,cl
c001f701:	89 e9                	mov    ecx,ebp
c001f703:	d3 eb                	shr    ebx,cl
c001f705:	09 d8                	or     eax,ebx
c001f707:	d3 ea                	shr    edx,cl
c001f709:	83 c4 1c             	add    esp,0x1c
c001f70c:	5b                   	pop    ebx
c001f70d:	5e                   	pop    esi
c001f70e:	5f                   	pop    edi
c001f70f:	5d                   	pop    ebp
c001f710:	c3                   	ret    
c001f711:	8d 76 00             	lea    esi,[esi+0x0]
c001f714:	39 c3                	cmp    ebx,eax
c001f716:	73 db                	jae    c001f6f3 <__umoddi3+0xe7>
c001f718:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f71c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f720:	89 d7                	mov    edi,edx
c001f722:	89 c6                	mov    esi,eax
c001f724:	eb cd                	jmp    c001f6f3 <__umoddi3+0xe7>
c001f726:	66 90                	xchg   ax,ax
c001f728:	66 90                	xchg   ax,ax
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	66 90                	xchg   ax,ax
c001f72e:	66 90                	xchg   ax,ax

c001f730 <fabs>:
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f73e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f747:	dd 04 24             	fld    QWORD PTR [esp]
c001f74a:	83 c4 0c             	add    esp,0xc
c001f74d:	c3                   	ret    
c001f74e:	66 90                	xchg   ax,ax

c001f750 <lrint>:
c001f750:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f754:	83 ec 04             	sub    esp,0x4
c001f757:	db 1c 24             	fistp  DWORD PTR [esp]
c001f75a:	58                   	pop    eax
c001f75b:	c3                   	ret    

c001f75c <lrintf>:
c001f75c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f760:	83 ec 04             	sub    esp,0x4
c001f763:	db 1c 24             	fistp  DWORD PTR [esp]
c001f766:	58                   	pop    eax
c001f767:	c3                   	ret    

Disassembly of section .init:

c001f768 <_init>:
c001f768:	55                   	push   ebp
c001f769:	89 e5                	mov    ebp,esp
c001f76b:	e8 a8 09 fe ff       	call   c0000118 <frame_dummy>
c001f770:	e8 a3 fa ff ff       	call   c001f218 <__do_global_ctors_aux>
c001f775:	5d                   	pop    ebp
c001f776:	c3                   	ret    

Disassembly of section .fini:

c001f777 <_fini>:
c001f777:	55                   	push   ebp
c001f778:	89 e5                	mov    ebp,esp
c001f77a:	e8 29 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f77f:	5d                   	pop    ebp
c001f780:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f782 <Computer::~Computer()>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	89 10                	mov    DWORD PTR [eax],edx
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	50                   	push   eax
c001f798:	e8 2d 0d ff ff       	call   c00104ca <Device::~Device()>
c001f79d:	83 c4 10             	add    esp,0x10
c001f7a0:	90                   	nop
c001f7a1:	83 c4 0c             	add    esp,0xc
c001f7a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7a6 <Computer::~Computer()>:
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	83 ec 0c             	sub    esp,0xc
c001f7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b0:	e8 cd ff ff ff       	call   c001f782 <Computer::~Computer()>
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	83 ec 08             	sub    esp,0x8
c001f7bb:	68 ec 01 00 00       	push   0x1ec
c001f7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c4:	e8 20 f9 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7d0 <idleCommon()>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	e8 6f 92 ff ff       	call   c0018a47 <lockScheduler()>
c001f7d8:	e8 b3 95 ff ff       	call   c0018d90 <schedule()>
c001f7dd:	83 c4 0c             	add    esp,0xc
c001f7e0:	e9 64 92 ff ff       	jmp    c0018a49 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7e5 <CPU::readCR3()>:
c001f7e5:	83 ec 10             	sub    esp,0x10
c001f7e8:	0f 20 d8             	mov    eax,cr3
c001f7eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7f7 <CPU::writeCR3(unsigned long)>:
c001f7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fb:	0f 22 d8             	mov    cr3,eax
c001f7fe:	90                   	nop
c001f7ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f800 <LinkedList<UnixFile>::~LinkedList()>:
c001f800:	90                   	nop
c001f801:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f802 <LinkedList<UnixFile>::LinkedList()>:
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	68 9d 15 02 c0       	push   0xc002159d
c001f84d:	e8 bd f9 fe ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001f852:	83 c4 10             	add    esp,0x10
c001f855:	90                   	nop
c001f856:	83 c4 0c             	add    esp,0xc
c001f859:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f862:	75 10                	jne    c001f874 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	68 b8 15 02 c0       	push   0xc00215b8
c001f86c:	e8 cd 61 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 00                	mov    eax,DWORD PTR [eax]
c001f87a:	85 c0                	test   eax,eax
c001f87c:	74 34                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f885:	85 c0                	test   eax,eax
c001f887:	74 29                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f890:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f894:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8b0:	eb 65                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b8:	85 c0                	test   eax,eax
c001f8ba:	75 4b                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c3:	85 c0                	test   eax,eax
c001f8c5:	75 40                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8cf:	89 10                	mov    DWORD PTR [eax],edx
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 22                	je     c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 da 15 02 c0       	push   0xc00215da
c001f8fd:	e8 3c 61 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	eb 10                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	68 e4 15 02 c0       	push   0xc00215e4
c001f90f:	e8 2a 61 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f914:	83 c4 10             	add    esp,0x10
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91e:	8d 50 01             	lea    edx,[eax+0x1]
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f928:	90                   	nop
c001f929:	83 c4 0c             	add    esp,0xc
c001f92c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f92e <LinkedList<UnixFile>::getFirstElement()>:
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f936 <LinkedList<UnixFile>::removeFirst()>:
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93f:	85 c0                	test   eax,eax
c001f941:	75 12                	jne    c001f955 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 f0 15 02 c0       	push   0xc00215f0
c001f94b:	e8 ee 60 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	eb 7e                	jmp    c001f9d3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95f:	85 c0                	test   eax,eax
c001f961:	74 10                	je     c001f973 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	68 3b 16 02 c0       	push   0xc002163b
c001f96b:	e8 ce 60 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f977:	8b 00                	mov    eax,DWORD PTR [eax]
c001f979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f97c:	85 c0                	test   eax,eax
c001f97e:	75 33                	jne    c001f9b3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99c:	83 f8 01             	cmp    eax,0x1
c001f99f:	74 21                	je     c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	68 14 16 02 c0       	push   0xc0021614
c001f9a9:	e8 90 60 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001f9ae:	83 c4 10             	add    esp,0x10
c001f9b1:	eb 0f                	jmp    c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9e0 <DriverlessDevice::~DriverlessDevice()>:
c001f9e0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	89 10                	mov    DWORD PTR [eax],edx
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	50                   	push   eax
c001f9f0:	e8 d5 0a ff ff       	call   c00104ca <Device::~Device()>
c001f9f5:	83 c4 04             	add    esp,0x4
c001f9f8:	90                   	nop
c001f9f9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9fa <DriverlessDevice::~DriverlessDevice()>:
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa04:	e8 d7 ff ff ff       	call   c001f9e0 <DriverlessDevice::~DriverlessDevice()>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	83 ec 08             	sub    esp,0x8
c001fa0f:	68 58 01 00 00       	push   0x158
c001fa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa18:	e8 cc f6 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	83 c4 0c             	add    esp,0xc
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa24 <LinkedList<Device>::addElement(Device*)>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa2c:	75 10                	jne    c001fa3e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	68 b8 15 02 c0       	push   0xc00215b8
c001fa36:	e8 03 60 ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa42:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa44:	85 c0                	test   eax,eax
c001fa46:	74 3a                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	85 c0                	test   eax,eax
c001fa51:	74 2f                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa76:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa80:	eb 68                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa88:	85 c0                	test   eax,eax
c001fa8a:	75 4e                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	85 c0                	test   eax,eax
c001fa95:	75 43                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa9f:	89 10                	mov    DWORD PTR [eax],edx
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac4:	85 c0                	test   eax,eax
c001fac6:	74 22                	je     c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 da 15 02 c0       	push   0xc00215da
c001fad0:	e8 69 5f ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	eb 10                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	68 e4 15 02 c0       	push   0xc00215e4
c001fae2:	e8 57 5f ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf1:	8d 50 01             	lea    edx,[eax+0x1]
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb00 <LinkedList<Device>::LinkedList()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	68 9d 15 02 c0       	push   0xc002159d
c001fb4b:	e8 bf f6 fe ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	90                   	nop
c001fb54:	83 c4 0c             	add    esp,0xc
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb58 <CPU::readCR0()>:
c001fb58:	83 ec 10             	sub    esp,0x10
c001fb5b:	0f 20 c0             	mov    eax,cr0
c001fb5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb6a <CPU::writeCR0(unsigned long)>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	0f 22 c0             	mov    cr0,eax
c001fb71:	90                   	nop
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb73 <CPU::readDR0()>:
c001fb73:	83 ec 10             	sub    esp,0x10
c001fb76:	0f 21 c0             	mov    eax,db0
c001fb79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb85 <CPU::readDR1()>:
c001fb85:	83 ec 10             	sub    esp,0x10
c001fb88:	0f 21 c8             	mov    eax,db1
c001fb8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb97 <CPU::readDR2()>:
c001fb97:	83 ec 10             	sub    esp,0x10
c001fb9a:	0f 21 d0             	mov    eax,db2
c001fb9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fba9 <CPU::readDR3()>:
c001fba9:	83 ec 10             	sub    esp,0x10
c001fbac:	0f 21 d8             	mov    eax,db3
c001fbaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbbb <CPU::readDR6()>:
c001fbbb:	83 ec 10             	sub    esp,0x10
c001fbbe:	0f 21 f0             	mov    eax,db6
c001fbc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbcd <CPU::readDR7()>:
c001fbcd:	83 ec 10             	sub    esp,0x10
c001fbd0:	0f 21 f8             	mov    eax,db7
c001fbd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbee:	85 c0                	test   eax,eax
c001fbf0:	75 0e                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf9:	85 c0                	test   eax,eax
c001fbfb:	75 03                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbfd:	b0 01                	mov    al,0x1
c001fbff:	c3                   	ret    
c001fc00:	b0 00                	mov    al,0x0
c001fc02:	90                   	nop
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	75 15                	jne    c001fc26 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 f0 15 02 c0       	push   0xc00215f0
c001fc19:	e8 20 5e ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	e9 88 00 00 00       	jmp    c001fcae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc30:	85 c0                	test   eax,eax
c001fc32:	0f 95 c0             	setne  al
c001fc35:	84 c0                	test   al,al
c001fc37:	74 10                	je     c001fc49 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc39:	83 ec 0c             	sub    esp,0xc
c001fc3c:	68 3b 16 02 c0       	push   0xc002163b
c001fc41:	e8 f8 5d ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fc46:	83 c4 10             	add    esp,0x10
c001fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	0f 94 c0             	sete   al
c001fc57:	84 c0                	test   al,al
c001fc59:	74 33                	je     c001fc8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	83 f8 01             	cmp    eax,0x1
c001fc7a:	74 21                	je     c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	68 14 16 02 c0       	push   0xc0021614
c001fc84:	e8 b5 5d ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	eb 0f                	jmp    c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 10                	mov    DWORD PTR [eax],edx
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcae:	83 c4 0c             	add    esp,0xc
c001fcb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcba:	75 10                	jne    c001fccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcc4:	e8 75 5d ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 34                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	74 29                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd08:	eb 65                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd10:	85 c0                	test   eax,eax
c001fd12:	75 4b                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1b:	85 c0                	test   eax,eax
c001fd1d:	75 40                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 10                	mov    DWORD PTR [eax],edx
c001fd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	74 22                	je     c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	68 da 15 02 c0       	push   0xc00215da
c001fd55:	e8 e4 5c ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	eb 10                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	68 e4 15 02 c0       	push   0xc00215e4
c001fd67:	e8 d2 5c ff ff       	call   c0015a3e <Krnl::panic(char const*)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd76:	8d 50 01             	lea    edx,[eax+0x1]
c001fd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd86 <ACPI::~ACPI()>:
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd92:	89 10                	mov    DWORD PTR [eax],edx
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	50                   	push   eax
c001fd9c:	e8 29 07 ff ff       	call   c00104ca <Device::~Device()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	90                   	nop
c001fda5:	83 c4 0c             	add    esp,0xc
c001fda8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdaa <ACPI::~ACPI()>:
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb4:	e8 cd ff ff ff       	call   c001fd86 <ACPI::~ACPI()>
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	83 ec 08             	sub    esp,0x8
c001fdbf:	68 68 22 00 00       	push   0x2268
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 1c f3 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 c4 0c             	add    esp,0xc
c001fdd3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdd4 <CPU::~CPU()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	50                   	push   eax
c001fdea:	e8 db 06 ff ff       	call   c00104ca <Device::~Device()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	90                   	nop
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fdf8 <CPU::~CPU()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe02:	e8 cd ff ff ff       	call   c001fdd4 <CPU::~CPU()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	83 ec 08             	sub    esp,0x8
c001fe0d:	68 98 11 00 00       	push   0x1198
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 ce f2 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe22 <CPU::readCR4()>:
c001fe22:	83 ec 10             	sub    esp,0x10
c001fe25:	0f 20 e0             	mov    eax,cr4
c001fe28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe34 <CPU::writeDR7(unsigned long)>:
c001fe34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe38:	0f 23 f8             	mov    db7,eax
c001fe3b:	90                   	nop
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe3d <CPU::writeCR4(unsigned long)>:
c001fe3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe41:	0f 22 e0             	mov    cr4,eax
c001fe44:	90                   	nop
c001fe45:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe46 <CPU::readCR2()>:
c001fe46:	83 ec 10             	sub    esp,0x10
c001fe49:	0f 20 d0             	mov    eax,cr2
c001fe4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe54:	83 c4 10             	add    esp,0x10
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe58:	90                   	nop
c001fe59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe5a <ThreadControlBlock::ThreadControlBlock()>:
c001fe5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe74:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe92:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe96:	90                   	nop
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	68 9d 15 02 c0       	push   0xc002159d
c001fee3:	e8 27 f3 fe ff       	call   c000f20f <Dbg::kprintf(char const*, ...)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	90                   	nop
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fef7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fef8 <PCI::~PCI()>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	89 10                	mov    DWORD PTR [eax],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	50                   	push   eax
c001ff0e:	e8 c1 ff fe ff       	call   c000fed4 <Bus::~Bus()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff1c <PCI::~PCI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff26:	e8 cd ff ff ff       	call   c001fef8 <PCI::~PCI()>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	83 ec 08             	sub    esp,0x8
c001ff31:	68 58 01 00 00       	push   0x158
c001ff36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3a:	e8 aa f1 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	83 c4 0c             	add    esp,0xc
c001ff45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff46 <IDE::~IDE()>:
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 10                	mov    DWORD PTR [eax],edx
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	50                   	push   eax
c001ff5c:	e8 7b 0a ff ff       	call   c00109dc <HardDiskController::~HardDiskController()>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	90                   	nop
c001ff65:	83 c4 0c             	add    esp,0xc
c001ff68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff6a <IDE::~IDE()>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff74:	e8 cd ff ff ff       	call   c001ff46 <IDE::~IDE()>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	83 ec 08             	sub    esp,0x8
c001ff7f:	68 70 02 00 00       	push   0x270
c001ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff88:	e8 5c f1 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	83 c4 0c             	add    esp,0xc
c001ff93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff94 <ATA::~ATA()>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	50                   	push   eax
c001ffaa:	e8 0b 0b ff ff       	call   c0010aba <PhysicalDisk::~PhysicalDisk()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	90                   	nop
c001ffb3:	83 c4 0c             	add    esp,0xc
c001ffb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffb8 <ATA::~ATA()>:
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	83 ec 0c             	sub    esp,0xc
c001ffbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc2:	e8 cd ff ff ff       	call   c001ff94 <ATA::~ATA()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	83 ec 08             	sub    esp,0x8
c001ffcd:	68 7c 01 00 00       	push   0x17c
c001ffd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd6:	e8 0e f1 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	83 c4 0c             	add    esp,0xc
c001ffe1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffe2 <ATAPI::~ATAPI()>:
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	89 10                	mov    DWORD PTR [eax],edx
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	50                   	push   eax
c001fff8:	e8 bd 0a ff ff       	call   c0010aba <PhysicalDisk::~PhysicalDisk()>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	90                   	nop
c0020001:	83 c4 0c             	add    esp,0xc
c0020004:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020006 <ATAPI::~ATAPI()>:
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020010:	e8 cd ff ff ff       	call   c001ffe2 <ATAPI::~ATAPI()>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	83 ec 08             	sub    esp,0x8
c002001b:	68 80 01 00 00       	push   0x180
c0020020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020024:	e8 c0 f0 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	83 c4 0c             	add    esp,0xc
c002002f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020030 <AVX::~AVX()>:
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003c:	89 10                	mov    DWORD PTR [eax],edx
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	50                   	push   eax
c0020046:	e8 f3 0a ff ff       	call   c0010b3e <FPU::~FPU()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	90                   	nop
c002004f:	83 c4 0c             	add    esp,0xc
c0020052:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020054 <AVX::~AVX()>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005e:	e8 cd ff ff ff       	call   c0020030 <AVX::~AVX()>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	83 ec 08             	sub    esp,0x8
c0020069:	68 58 01 00 00       	push   0x158
c002006e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020072:	e8 72 f0 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	83 c4 0c             	add    esp,0xc
c002007d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002007e <MMX::~MMX()>:
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	89 10                	mov    DWORD PTR [eax],edx
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	50                   	push   eax
c0020094:	e8 a5 0a ff ff       	call   c0010b3e <FPU::~FPU()>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	90                   	nop
c002009d:	83 c4 0c             	add    esp,0xc
c00200a0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200a2 <MMX::~MMX()>:
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ac:	e8 cd ff ff ff       	call   c002007e <MMX::~MMX()>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	83 ec 08             	sub    esp,0x8
c00200b7:	68 58 01 00 00       	push   0x158
c00200bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c0:	e8 24 f0 fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00200c5:	83 c4 10             	add    esp,0x10
c00200c8:	83 c4 0c             	add    esp,0xc
c00200cb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200cc <SSE::~SSE()>:
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d8:	89 10                	mov    DWORD PTR [eax],edx
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	50                   	push   eax
c00200e2:	e8 57 0a ff ff       	call   c0010b3e <FPU::~FPU()>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	90                   	nop
c00200eb:	83 c4 0c             	add    esp,0xc
c00200ee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200f0 <SSE::~SSE()>:
c00200f0:	83 ec 0c             	sub    esp,0xc
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fa:	e8 cd ff ff ff       	call   c00200cc <SSE::~SSE()>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	83 ec 08             	sub    esp,0x8
c0020105:	68 58 01 00 00       	push   0x158
c002010a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010e:	e8 d6 ef fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	83 c4 0c             	add    esp,0xc
c0020119:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002011a <x87::~x87()>:
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020126:	89 10                	mov    DWORD PTR [eax],edx
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	50                   	push   eax
c0020130:	e8 09 0a ff ff       	call   c0010b3e <FPU::~FPU()>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	90                   	nop
c0020139:	83 c4 0c             	add    esp,0xc
c002013c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002013e <x87::~x87()>:
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020148:	e8 cd ff ff ff       	call   c002011a <x87::~x87()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 ec 08             	sub    esp,0x8
c0020153:	68 58 01 00 00       	push   0x158
c0020158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015c:	e8 88 ef fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	83 c4 0c             	add    esp,0xc
c0020167:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020168 <IOAPIC::~IOAPIC()>:
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020174:	89 10                	mov    DWORD PTR [eax],edx
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	50                   	push   eax
c002017e:	e8 47 03 ff ff       	call   c00104ca <Device::~Device()>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	90                   	nop
c0020187:	83 c4 0c             	add    esp,0xc
c002018a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002018c <IOAPIC::~IOAPIC()>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020196:	e8 cd ff ff ff       	call   c0020168 <IOAPIC::~IOAPIC()>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	83 ec 08             	sub    esp,0x8
c00201a1:	68 68 01 00 00       	push   0x168
c00201a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201aa:	e8 3a ef fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	83 c4 0c             	add    esp,0xc
c00201b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201b6 <APIC::~APIC()>:
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c2:	89 10                	mov    DWORD PTR [eax],edx
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	50                   	push   eax
c00201cc:	e8 37 0e ff ff       	call   c0011008 <InterruptController::~InterruptController()>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	90                   	nop
c00201d5:	83 c4 0c             	add    esp,0xc
c00201d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201da <APIC::~APIC()>:
c00201da:	83 ec 0c             	sub    esp,0xc
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e4:	e8 cd ff ff ff       	call   c00201b6 <APIC::~APIC()>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	83 ec 08             	sub    esp,0x8
c00201ef:	68 58 21 00 00       	push   0x2158
c00201f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f8:	e8 ec ee fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	83 c4 0c             	add    esp,0xc
c0020203:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020204 <PIC::~PIC()>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020210:	89 10                	mov    DWORD PTR [eax],edx
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	50                   	push   eax
c002021a:	e8 e9 0d ff ff       	call   c0011008 <InterruptController::~InterruptController()>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	90                   	nop
c0020223:	83 c4 0c             	add    esp,0xc
c0020226:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020228 <PIC::~PIC()>:
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020232:	e8 cd ff ff ff       	call   c0020204 <PIC::~PIC()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 ec 08             	sub    esp,0x8
c002023d:	68 58 21 00 00       	push   0x2158
c0020242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020246:	e8 9e ee fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	83 c4 0c             	add    esp,0xc
c0020251:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020252 <APICTimer::~APICTimer()>:
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025e:	89 10                	mov    DWORD PTR [eax],edx
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	50                   	push   eax
c0020268:	e8 c9 2a ff ff       	call   c0012d36 <Timer::~Timer()>
c002026d:	83 c4 10             	add    esp,0x10
c0020270:	90                   	nop
c0020271:	83 c4 0c             	add    esp,0xc
c0020274:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020276 <APICTimer::~APICTimer()>:
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020280:	e8 cd ff ff ff       	call   c0020252 <APICTimer::~APICTimer()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	83 ec 08             	sub    esp,0x8
c002028b:	68 60 01 00 00       	push   0x160
c0020290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020294:	e8 50 ee fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	83 c4 0c             	add    esp,0xc
c002029f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202a0 <PIT::~PIT()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	89 10                	mov    DWORD PTR [eax],edx
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	50                   	push   eax
c00202b6:	e8 7b 2a ff ff       	call   c0012d36 <Timer::~Timer()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	90                   	nop
c00202bf:	83 c4 0c             	add    esp,0xc
c00202c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202c4 <PIT::~PIT()>:
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 cd ff ff ff       	call   c00202a0 <PIT::~PIT()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	68 5c 01 00 00       	push   0x15c
c00202de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e2:	e8 02 ee fe ff       	call   c000f0e9 <operator delete(void*, unsigned long)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	83 c4 0c             	add    esp,0xc
c00202ed:	c3                   	ret    
