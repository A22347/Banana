
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c4 c2 00 00       	call   c000c2e4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 f7 01 00       	call   c001f758 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 02 02 c0       	mov    ebx,0xc00202e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 02 02 c0    	cmp    ebx,0xc00202ec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 41 02 c0       	mov    eax,0xc00241ac
c0000049:	3d ac 41 02 c0       	cmp    eax,0xc00241ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 41 02 c0       	push   0xc00241ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 41 02 c0       	mov    eax,0xc00241ac
c0000075:	2d ac 41 02 c0       	sub    eax,0xc00241ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 41 02 c0       	push   0xc00241ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002434c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 02 02 c0       	mov    ebx,0xc00202f4
c00000bb:	81 eb f0 02 02 c0    	sub    ebx,0xc00202f0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 02 02 c0       	mov    esi,0xc00202f0
c00000ca:	a1 50 43 02 c0       	mov    eax,ds:0xc0024350
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 43 02 c0       	mov    ds:0xc0024350,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 43 02 c0       	mov    eax,ds:0xc0024350
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 41 02 c0       	push   0xc00241ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 43 02 c0 01 	mov    BYTE PTR ds:0xc002434c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 43 02 c0       	push   0xc0024354
c000012c:	68 ac 41 02 c0       	push   0xc00241ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 f9 01 00 c0    	mov    DWORD PTR ds:0xc00001f9,esi
c0000169:	89 25 f5 01 00 c0    	mov    DWORD PTR ds:0xc00001f5,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf cc 01 00 c0       	mov    edi,0xc00001cc
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf cc 01 00 c0       	mov    edi,0xc00001cc
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf dc 01 00 c0       	mov    edi,0xc00001dc
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	c6 83 cc 01 00 c0 2e 	mov    BYTE PTR [ebx-0x3ffffe34],0x2e
c000019c:	80 ab cd 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe33],0x3a
c00001a3:	c6 83 dc 01 00 c0 2e 	mov    BYTE PTR [ebx-0x3ffffe24],0x2e
c00001aa:	80 ab dd 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe23],0xbe
c00001b1:	89 c4                	mov    esp,eax
c00001b3:	81 c4 10 00 00 00    	add    esp,0x10
c00001b9:	5f                   	pop    edi
c00001ba:	5e                   	pop    esi
c00001bb:	5d                   	pop    ebp
c00001bc:	5b                   	pop    ebx
c00001bd:	5b                   	pop    ebx
c00001be:	5a                   	pop    edx
c00001bf:	59                   	pop    ecx
c00001c0:	58                   	pop    eax
c00001c1:	8b 25 f9 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001f9
c00001c7:	e9 fb ff ff ff       	jmp    c00001c7 <voodooXADD+0x77>

c00001cc <voodooXADD.helper>:
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	8b 25 f5 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001f5
c00001f2:	61                   	popa   
c00001f3:	c9                   	leave  
c00001f4:	c3                   	ret    

c00001f5 <voodooXADD.oldStack>:
c00001f5:	00 00                	add    BYTE PTR [eax],al
	...

c00001f9 <voodooXADD.newStack>:
c00001f9:	00 00                	add    BYTE PTR [eax],al
	...

c00001fd <doTPAUSE>:
c00001fd:	fb                   	sti    
c00001fe:	31 c0                	xor    eax,eax
c0000200:	31 d2                	xor    edx,edx
c0000202:	66 0f ae f0          	tpause eax
c0000206:	c3                   	ret    

c0000207 <hasLegacyFPU>:
c0000207:	0f 20 c2             	mov    edx,cr0
c000020a:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000210:	0f 22 c2             	mov    cr0,edx
c0000213:	db e3                	fninit 
c0000215:	dd 3d 2a 02 00 c0    	fnstsw WORD PTR ds:0xc000022a
c000021b:	31 c0                	xor    eax,eax
c000021d:	66 81 3d 2a 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022a,0x0
c0000226:	75 01                	jne    c0000229 <hasLegacyFPU.nofpu>

c0000228 <hasLegacyFPU.hasfpu>:
c0000228:	40                   	inc    eax

c0000229 <hasLegacyFPU.nofpu>:
c0000229:	c3                   	ret    

c000022a <testword>:
c000022a:	aa                   	stos   BYTE PTR es:[edi],al
c000022b:	55                   	push   ebp

c000022c <is486>:
c000022c:	0f 09                	wbinvd 
c000022e:	31 c0                	xor    eax,eax
c0000230:	40                   	inc    eax
c0000231:	c3                   	ret    
c0000232:	90                   	nop
c0000233:	90                   	nop
c0000234:	90                   	nop
c0000235:	90                   	nop
c0000236:	90                   	nop
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	31 c0                	xor    eax,eax
c0000261:	c3                   	ret    

c0000262 <goToVM86>:
c0000262:	fa                   	cli    
c0000263:	55                   	push   ebp
c0000264:	89 e5                	mov    ebp,esp
c0000266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000269:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000026c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000026f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000272:	25 ff ff 00 00       	and    eax,0xffff
c0000277:	81 e3 ff ff 00 00    	and    ebx,0xffff
c000027d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000283:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000289:	52                   	push   edx
c000028a:	51                   	push   ecx
c000028b:	68 02 02 02 00       	push   0x20202
c0000290:	53                   	push   ebx
c0000291:	50                   	push   eax
c0000292:	cf                   	iret   

c0000293 <goToUsermode>:
c0000293:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 89 ec 00 00       	call   c000ef9a <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 33 83 01 00       	call   c001864e <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 39 87 01 00       	call   c0018a7b <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 ee 8c 01 00       	call   c0019039 <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 f4 82 01 00       	call   c001864e <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 90 47 02 c0 	lgdtd  ds:0xc0024790
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 c3 0e 01 c0       	mov    ecx,0xc0010ec3
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 c3 0e 01 c0       	mov    ecx,0xc0010ec3
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d 6c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002436c
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 6c 43 02 c0       	mov    ds:0xc002436c,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 6c 43 02 c0       	mov    eax,ds:0xc002436c
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 6c 43 02 c0    	mov    DWORD PTR ds:0xc002436c,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 00 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfd00],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 00 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfd00],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 00 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfd00],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 00 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfd00],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d 80 43 02 c0    	mov    ecx,DWORD PTR ds:0xc0024380
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,ecx
c0000bd0:	8b 0c 85 84 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc7c]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 84 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc7c],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d 80 43 02 c0    	mov    DWORD PTR ds:0xc0024380,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 ac 43 02 c0    	cmp    DWORD PTR ds:0xc00243ac,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d bc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243bc
c0000c41:	c7 42 0c b4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243b4
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 80 43 02 c0 02 	test   BYTE PTR ds:0xc0024380,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 0b b1 00 00       	call   c000be27 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 66 b0 00 00       	call   c000be27 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 50 b0 00 00       	call   c000be27 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 4e af 00 00       	call   c000be27 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d 80 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024380
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 84 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc7c]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 84 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc7c],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 b4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc4c]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d c0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c0
c0000fc6:	81 fb b4 43 02 c0    	cmp    ebx,0xc00243b4
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d b4 43 02 c0       	cmp    eax,0xc00243b4
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d b0 43 02 c0    	cmp    DWORD PTR ds:0xc00243b0,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 bc 43 02 c0       	mov    ds:0xc00243bc,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 c0 43 02 c0       	mov    ds:0xc00243c0,eax
c0001011:	a3 b0 43 02 c0       	mov    ds:0xc00243b0,eax
c0001016:	c7 40 08 b4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243b4
c000101d:	c7 40 0c b4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243b4
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 c0 43 02 c0       	mov    ds:0xc00243c0,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 b4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243b4
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 78 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc88]
c0001066:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 80 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc80]
c0001081:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd b4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb94c],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 b4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc4c]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,ecx
c000113b:	89 0d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,ecx
c0001141:	c7 41 08 b4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243b4
c0001148:	c7 41 0c b4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243b4
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd ac 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc54]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d b4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb94c]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d b4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb94c]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 ac 43 02 c0 	lea    edx,[eax*4-0x3ffdbc54]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d b4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb94c],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d bc 43 02 c0    	mov    DWORD PTR ds:0xc00243bc,edi
c000120e:	89 3d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,edi
c0001214:	c7 47 08 b4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243b4
c000121b:	c7 47 0c b4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243b4
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d b0 43 02 c0    	mov    DWORD PTR ds:0xc00243b0,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba 80 43 02 c0       	mov    edx,0xc0024380
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 80 43 02 c0       	mov    eax,0xc0024380
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d d4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246d4
c0001369:	c7 05 d4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246d4,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d d4 46 02 c0    	mov    DWORD PTR ds:0xc00246d4,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 ac 43 02 c0    	cmp    DWORD PTR ds:0xc00243ac,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d ac 43 02 c0    	mov    DWORD PTR ds:0xc00243ac,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 80 43 02 c0       	mov    eax,0xc0024380
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 dc 46 02 c0    	push   DWORD PTR ds:0xc00246dc
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d 80 43 02 c0 00 	cmp    DWORD PTR ds:0xc0024380,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 dc 46 02 c0       	mov    eax,ds:0xc00246dc
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d ac 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243ac,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 80 43 02 c0       	mov    eax,0xc0024380
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 ac 43 02 c0       	mov    eax,ds:0xc00243ac
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 84 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc7c]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 b4 43 02 c0       	mov    eax,0xc00243b4
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d ac 46 02 c0       	cmp    eax,0xc00246ac
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 e8 46 02 c0       	mov    eax,ds:0xc00246e8
c0001915:	8b 35 d0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246d0
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 e4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246e4
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 f4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f4
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 80 43 02 c0       	mov    eax,0xc0024380
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 04 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbfc]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 80 43 02 c0       	mov    eax,ds:0xc0024380
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 80 43 02 c0       	mov    ds:0xc0024380,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d c4 46 02 c0    	mov    DWORD PTR ds:0xc00246c4,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d c8 46 02 c0    	mov    DWORD PTR ds:0xc00246c8,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d cc 46 02 c0    	mov    DWORD PTR ds:0xc00246cc,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 d4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246d4,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 a4 8d 01 00       	jmp    c001a7b4 <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 d9 8d 01 00       	jmp    c001a7ff <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 a0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda360]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 05 8e 01 00       	jmp    c001a84a <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 d4 d7 01 00       	call   c001f4fc <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 20 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfae0]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 20 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfae0]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba 8c 32 02 c0       	mov    edx,0xc002328c
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 4c 05 02 c0       	mov    edx,0xc002054c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba 30 05 02 c0       	mov    edx,0xc0020530
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 20 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8e0]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 00 47 02 c0    	mov    ax,ds:0xc0024700
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 00 47 02 c0    	mov    ds:0xc0024700,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 de c5 01 00       	call   c001f4fc <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 52 05 02 c0       	mov    eax,0xc0020552
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad a0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb60]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 5b 05 02 c0       	mov    eax,0xc002055b
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 20 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfae0]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 c0 af 01 00       	call   c001f4fc <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba 30 05 02 c0       	mov    edx,0xc0020530
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba 20 04 02 c0       	mov    edx,0xc0020420
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba 30 04 02 c0       	mov    edx,0xc0020430
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 20 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8e0]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 20 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8e0],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 a1 99 01 00       	call   c001f4fc <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 89 99 01 00       	call   c001f4fc <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 77 04 02 c0       	mov    eax,0xc0020477
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 70 04 02 c0       	mov    eax,0xc0020470
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 20 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8e0]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 60 04 02 c0       	mov    esi,0xc0020460
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 d7 80 01 00       	call   c001f4fc <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba 40 05 02 c0       	mov    edx,0xc0020540
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba 40 04 02 c0       	mov    edx,0xc0020440
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 62 05 02 c0       	mov    edx,0xc0020562
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 6e 05 02 c0       	mov    edx,0xc002056e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 9f 3d 00 00       	call   c000bfd9 <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 99 3d 00 00       	call   c000bfe9 <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c a0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208a0
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 a0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208a0
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 e0 05 02 c0       	mov    eax,0xc00205e0
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 a0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa60]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 6d 3a 00 00       	call   c000bfe9 <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 57 3a 00 00       	call   c000bfe9 <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 80 0e 02 c0    	fld    DWORD PTR ds:0xc0020e80
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 b4 70 01 00       	call   c001f720 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 70 0e 02 c0    	fld    QWORD PTR ds:0xc0020e70
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 fb 36 00 00       	call   c000c009 <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 96 36 00 00       	call   c000bfe9 <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 a0 09 02 c0       	mov    eax,0xc00209a0
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 00 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf200]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 84 0e 02 c0    	fld    DWORD PTR ds:0xc0020e84
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 f2 6b 01 00       	call   c001f740 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 90 0e 02 c0    	fld    DWORD PTR ds:0xc0020e90
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 88 0e 02 c0    	fld    DWORD PTR ds:0xc0020e88
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 78 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e78
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 8c 0e 02 c0    	fld    DWORD PTR ds:0xc0020e8c
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 66 6b 01 00       	call   c001f740 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 f3 6a 01 00       	call   c001f740 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 bf 69 01 00       	call   c001f720 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 5a 69 01 00       	call   c001f740 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 e7 68 01 00       	call   c001f720 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 94 0e 02 c0       	mov    eax,0xc0020e94
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 a8 0e 02 c0       	mov    eax,0xc0020ea8
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 6d 30 00 00       	call   c000bfe9 <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 6f 30 00 00       	call   c000c009 <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 68 10 02 c0    	fld    DWORD PTR ds:0xc0021068
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 e0 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf120]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 fc 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf104]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 18 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e8]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 6c 10 02 c0    	fld    DWORD PTR ds:0xc002106c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 5f 5c 01 00       	jmp    c001f740 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 3c 5c 01 00       	call   c001f740 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 e7 59 01 00       	call   c001f740 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 b2 59 01 00       	call   c001f740 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 c4 58 01 00       	call   c001f720 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 29 58 01 00       	call   c001f740 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 65 57 01 00       	call   c001f740 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 30 57 01 00       	call   c001f740 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 42 56 01 00       	call   c001f720 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 ac 55 01 00       	call   c001f740 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 e8 54 01 00       	call   c001f740 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 b3 54 01 00       	call   c001f740 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 c5 53 01 00       	call   c001f720 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 2f 53 01 00       	call   c001f740 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 6b 52 01 00       	call   c001f740 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 36 52 01 00       	call   c001f740 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 48 51 01 00       	call   c001f720 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 b2 50 01 00       	call   c001f740 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 70 10 02 c0    	fld    DWORD PTR ds:0xc0021070
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 ee 4f 01 00       	call   c001f740 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 b9 4f 01 00       	call   c001f740 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 d8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ed8
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 d2 4e 01 00       	call   c001f720 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 60 10 02 c0    	fcomp  QWORD PTR ds:0xc0021060
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 36 4e 01 00       	call   c001f740 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 40 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0c0]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 34 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0cc]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 7e 16 00 00       	call   c000bfe9 <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 60 0e 02 c0    	fld    QWORD PTR ds:0xc0020e60
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 68 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e68
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 c9 4c 01 00       	call   c001f740 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 9d 4b 01 00       	call   c001f720 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 44 4b 01 00       	call   c001f740 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 d1 4a 01 00       	call   c001f720 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d d8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ed8
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 74 10 02 c0       	mov    eax,0xc0021074
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 85 10 02 c0       	mov    eax,0xc0021085
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 6d 12 00 00       	call   c000bfe9 <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 6f 12 00 00       	call   c000c009 <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adf8:	50                   	push   eax
c000adf9:	e8 98 59 00 00       	call   c0010796 <Device::closeAll()>
c000adfe:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae09:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae15:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1d:	5b                   	pop    ebx
c000ae1e:	5e                   	pop    esi
c000ae1f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae22:	5f                   	pop    edi
c000ae23:	ff e0                	jmp    eax
c000ae25:	90                   	nop

c000ae26 <Computer::Computer()>:
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2d:	83 ec 08             	sub    esp,0x8
c000ae30:	68 bc 10 02 c0       	push   0xc00210bc
c000ae35:	50                   	push   eax
c000ae36:	e8 d5 59 00 00       	call   c0010810 <Device::Device(char const*)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae47:	89 10                	mov    DWORD PTR [eax],edx
c000ae49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae69:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6f:	83 ca 04             	or     edx,0x4
c000ae72:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae82:	31 d2                	xor    edx,edx
c000ae84:	88 c2                	mov    dl,al
c000ae86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9b:	31 d2                	xor    edx,edx
c000ae9d:	88 c2                	mov    dl,al
c000ae9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb2:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebf:	31 d2                	xor    edx,edx
c000aec1:	88 c2                	mov    dl,al
c000aec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecb:	83 e1 3f             	and    ecx,0x3f
c000aece:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aedc:	31 d2                	xor    edx,edx
c000aede:	88 c2                	mov    dl,al
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef5:	31 d2                	xor    edx,edx
c000aef7:	88 c2                	mov    dl,al
c000aef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefd:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af0c:	8d 50 01             	lea    edx,[eax+0x1]
c000af0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af13:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af19:	31 d2                	xor    edx,edx
c000af1b:	88 c2                	mov    dl,al
c000af1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af21:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af25:	83 e1 3f             	and    ecx,0x3f
c000af28:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af36:	31 d2                	xor    edx,edx
c000af38:	88 c2                	mov    dl,al
c000af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3e:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af4f:	31 d2                	xor    edx,edx
c000af51:	88 c2                	mov    dl,al
c000af53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af57:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af66:	8d 50 01             	lea    edx,[eax+0x1]
c000af69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af6d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af73:	31 d2                	xor    edx,edx
c000af75:	88 c2                	mov    dl,al
c000af77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af7f:	83 e1 3f             	and    ecx,0x3f
c000af82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af86:	90                   	nop
c000af87:	83 c4 0c             	add    esp,0xc
c000af8a:	c3                   	ret    
c000af8b:	90                   	nop

c000af8c <Computer::setBootMessage(char const*)>:
c000af8c:	c3                   	ret    
c000af8d:	90                   	nop

c000af8e <Computer::start()>:
c000af8e:	56                   	push   esi
c000af8f:	53                   	push   ebx
c000af90:	83 ec 14             	sub    esp,0x14
c000af93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af97:	e8 a7 da 00 00       	call   c0018a43 <lockScheduler()>
c000af9c:	e8 eb dd 00 00       	call   c0018d8c <schedule()>
c000afa1:	e8 9f da 00 00       	call   c0018a45 <unlockScheduler()>
c000afa6:	fb                   	sti    
c000afa7:	83 ec 0c             	sub    esp,0xc
c000afaa:	68 3b 07 00 00       	push   0x73b
c000afaf:	e8 22 41 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000afb4:	89 c6                	mov    esi,eax
c000afb6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c000afbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afc2:	50                   	push   eax
c000afc3:	68 c5 10 02 c0       	push   0xc00210c5
c000afc8:	6a 01                	push   0x1
c000afca:	56                   	push   esi
c000afcb:	e8 ca d8 00 00       	call   c001889a <Process::Process(bool, char const*, Process*, char**)>
c000afd0:	83 c4 20             	add    esp,0x20
c000afd3:	68 ff 00 00 00       	push   0xff
c000afd8:	6a 00                	push   0x0
c000afda:	68 67 b9 00 c0       	push   0xc000b967
c000afdf:	56                   	push   esi
c000afe0:	e8 93 db 00 00       	call   c0018b78 <Process::createThread(void (*)(void*), void*, int)>
c000afe5:	6a 7a                	push   0x7a
c000afe7:	8b 15 d4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bd4
c000afed:	6a 00                	push   0x0
c000afef:	68 bd 93 01 c0       	push   0xc00193bd
c000aff4:	52                   	push   edx
c000aff5:	e8 7e db 00 00       	call   c0018b78 <Process::createThread(void (*)(void*), void*, int)>
c000affa:	83 c4 20             	add    esp,0x20
c000affd:	a3 88 5b 02 c0       	mov    ds:0xc0025b88,eax
c000b002:	c6 05 8d 47 02 c0 01 	mov    BYTE PTR ds:0xc002478d,0x1
c000b009:	e8 60 45 00 00       	call   c000f56e <initVFS()>
c000b00e:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b014:	8b 10                	mov    edx,DWORD PTR [eax]
c000b016:	6a 00                	push   0x0
c000b018:	6a 00                	push   0x0
c000b01a:	6a 00                	push   0x0
c000b01c:	50                   	push   eax
c000b01d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b020:	e8 6c c2 00 00       	call   c0017291 <setupSystemCalls()>
c000b025:	e8 42 50 00 00       	call   c001006c <loadClockSettings()>
c000b02a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b02d:	e8 38 57 00 00       	call   c001076a <Device::loadDriversForAll()>
c000b032:	bb 02 00 00 00       	mov    ebx,0x2
c000b037:	b8 01 00 00 00       	mov    eax,0x1
c000b03c:	31 d2                	xor    edx,edx
c000b03e:	31 c9                	xor    ecx,ecx
c000b040:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b048:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b050:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b056:	59                   	pop    ecx
c000b057:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c000b05d:	5e                   	pop    esi
c000b05e:	6a 01                	push   0x1
c000b060:	68 d2 10 02 c0       	push   0xc00210d2
c000b065:	e8 f3 d3 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c000b06a:	5a                   	pop    edx
c000b06b:	59                   	pop    ecx
c000b06c:	53                   	push   ebx
c000b06d:	50                   	push   eax
c000b06e:	e8 b0 d5 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c000b073:	c7 04 24 c8 22 02 c0 	mov    DWORD PTR [esp],0xc00222c8
c000b07a:	e8 8c 41 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	6a 02                	push   0x2
c000b087:	e8 59 de 00 00       	call   c0018ee5 <blockTask(TaskState)>
c000b08c:	83 c4 10             	add    esp,0x10
c000b08f:	eb f1                	jmp    c000b082 <Computer::start()+0xf4>

c000b091 <firstTask()>:
c000b091:	83 ec 18             	sub    esp,0x18
c000b094:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c000b099:	50                   	push   eax
c000b09a:	e8 ef fe ff ff       	call   c000af8e <Computer::start()>
c000b09f:	90                   	nop

c000b0a0 <Computer::detectFeatures()>:
c000b0a0:	55                   	push   ebp
c000b0a1:	57                   	push   edi
c000b0a2:	56                   	push   esi
c000b0a3:	53                   	push   ebx
c000b0a4:	83 ec 1c             	sub    esp,0x1c
c000b0a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0ab:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0b1:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0b7:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0bd:	e8 af 52 ff ff       	call   c0000371 <detectCPUID>
c000b0c2:	85 c0                	test   eax,eax
c000b0c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ca:	0f 95 c2             	setne  dl
c000b0cd:	01 d2                	add    edx,edx
c000b0cf:	83 e0 fd             	and    eax,0xfffffffd
c000b0d2:	09 d0                	or     eax,edx
c000b0d4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0da:	a8 02                	test   al,0x2
c000b0dc:	75 4e                	jne    c000b12c <Computer::detectFeatures()+0x8c>
c000b0de:	f6 05 a1 47 02 c0 04 	test   BYTE PTR ds:0xc00247a1,0x4
c000b0e5:	74 0f                	je     c000b0f6 <Computer::detectFeatures()+0x56>
c000b0e7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ed:	83 e0 fb             	and    eax,0xfffffffb
c000b0f0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f6:	e8 cb 40 01 00       	call   c001f1c6 <x87Detect>
c000b0fb:	83 e0 01             	and    eax,0x1
c000b0fe:	c1 e0 04             	shl    eax,0x4
c000b101:	88 c2                	mov    dl,al
c000b103:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b109:	83 e0 ef             	and    eax,0xffffffef
c000b10c:	09 d0                	or     eax,edx
c000b10e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b114:	a8 10                	test   al,0x10
c000b116:	0f 85 20 01 00 00    	jne    c000b23c <Computer::detectFeatures()+0x19c>
c000b11c:	84 c0                	test   al,al
c000b11e:	0f 88 3b 01 00 00    	js     c000b25f <Computer::detectFeatures()+0x1bf>
c000b124:	83 c4 1c             	add    esp,0x1c
c000b127:	5b                   	pop    ebx
c000b128:	5e                   	pop    esi
c000b129:	5f                   	pop    edi
c000b12a:	5d                   	pop    ebp
c000b12b:	c3                   	ret    
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	6a 20                	push   0x20
c000b131:	e8 e1 96 00 00       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c000b136:	83 e0 01             	and    eax,0x1
c000b139:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b140:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b146:	83 e0 f7             	and    eax,0xfffffff7
c000b149:	09 d0                	or     eax,edx
c000b14b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b151:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b158:	e8 ba 96 00 00       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c000b15d:	83 e0 01             	and    eax,0x1
c000b160:	88 c2                	mov    dl,al
c000b162:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b168:	83 e0 fe             	and    eax,0xfffffffe
c000b16b:	09 d0                	or     eax,edx
c000b16d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b173:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b17a:	e8 98 96 00 00       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c000b17f:	c1 e0 07             	shl    eax,0x7
c000b182:	88 c2                	mov    dl,al
c000b184:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b18a:	83 e0 7f             	and    eax,0x7f
c000b18d:	09 d0                	or     eax,edx
c000b18f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b195:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b19c:	e8 76 96 00 00       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	83 e0 01             	and    eax,0x1
c000b1a7:	c1 e0 05             	shl    eax,0x5
c000b1aa:	88 c2                	mov    dl,al
c000b1ac:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1b2:	83 e0 df             	and    eax,0xffffffdf
c000b1b5:	09 d0                	or     eax,edx
c000b1b7:	f7 05 a0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247a0,0x401
c000b1c1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1c7:	0f 84 b8 00 00 00    	je     c000b285 <Computer::detectFeatures()+0x1e5>
c000b1cd:	83 ec 0c             	sub    esp,0xc
c000b1d0:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1d6:	83 e1 fe             	and    ecx,0xfffffffe
c000b1d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1dd:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1e3:	50                   	push   eax
c000b1e4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1e8:	55                   	push   ebp
c000b1e9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1ed:	57                   	push   edi
c000b1ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1f2:	56                   	push   esi
c000b1f3:	68 00 00 00 80       	push   0x80000000
c000b1f8:	e8 97 95 00 00       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1fd:	83 c4 20             	add    esp,0x20
c000b200:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b207:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b20b:	0f 86 cd fe ff ff    	jbe    c000b0de <Computer::detectFeatures()+0x3e>
c000b211:	83 ec 0c             	sub    esp,0xc
c000b214:	50                   	push   eax
c000b215:	55                   	push   ebp
c000b216:	57                   	push   edi
c000b217:	56                   	push   esi
c000b218:	68 01 00 00 80       	push   0x80000001
c000b21d:	e8 72 95 00 00       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b222:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b228:	83 c4 20             	add    esp,0x20
c000b22b:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b231:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b237:	e9 a2 fe ff ff       	jmp    c000b0de <Computer::detectFeatures()+0x3e>
c000b23c:	e8 3f 3f 01 00       	call   c001f180 <sseDetect>
c000b241:	88 c2                	mov    dl,al
c000b243:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b249:	c1 e2 07             	shl    edx,0x7
c000b24c:	83 e0 7f             	and    eax,0x7f
c000b24f:	09 d0                	or     eax,edx
c000b251:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b257:	84 c0                	test   al,al
c000b259:	0f 89 c5 fe ff ff    	jns    c000b124 <Computer::detectFeatures()+0x84>
c000b25f:	e8 0c 3f 01 00       	call   c001f170 <avxDetect>
c000b264:	83 e0 01             	and    eax,0x1
c000b267:	c1 e0 05             	shl    eax,0x5
c000b26a:	88 c2                	mov    dl,al
c000b26c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b272:	83 e0 df             	and    eax,0xffffffdf
c000b275:	09 d0                	or     eax,edx
c000b277:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b27d:	83 c4 1c             	add    esp,0x1c
c000b280:	5b                   	pop    ebx
c000b281:	5e                   	pop    esi
c000b282:	5f                   	pop    edi
c000b283:	5d                   	pop    ebp
c000b284:	c3                   	ret    
c000b285:	83 ec 0c             	sub    esp,0xc
c000b288:	68 00 02 00 00       	push   0x200
c000b28d:	e8 85 95 00 00       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	e9 33 ff ff ff       	jmp    c000b1cd <Computer::detectFeatures()+0x12d>

c000b29a <Computer::displayFeatures()>:
c000b29a:	53                   	push   ebx
c000b29b:	83 ec 14             	sub    esp,0x14
c000b29e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2a2:	68 f5 10 02 c0       	push   0xc00210f5
c000b2a7:	e8 5f 3f 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b2ac:	83 c4 10             	add    esp,0x10
c000b2af:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2b4:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2bb:	74 05                	je     c000b2c2 <Computer::displayFeatures()+0x28>
c000b2bd:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2c2:	51                   	push   ecx
c000b2c3:	51                   	push   ecx
c000b2c4:	50                   	push   eax
c000b2c5:	68 08 11 02 c0       	push   0xc0021108
c000b2ca:	e8 3c 3f 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b2cf:	83 c4 10             	add    esp,0x10
c000b2d2:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2d7:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2de:	75 05                	jne    c000b2e5 <Computer::displayFeatures()+0x4b>
c000b2e0:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b2e5:	52                   	push   edx
c000b2e6:	52                   	push   edx
c000b2e7:	50                   	push   eax
c000b2e8:	68 19 11 02 c0       	push   0xc0021119
c000b2ed:	e8 19 3f 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b2fa:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b301:	75 05                	jne    c000b308 <Computer::displayFeatures()+0x6e>
c000b303:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b308:	51                   	push   ecx
c000b309:	51                   	push   ecx
c000b30a:	50                   	push   eax
c000b30b:	68 2a 11 02 c0       	push   0xc002112a
c000b310:	e8 f6 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b315:	83 c4 10             	add    esp,0x10
c000b318:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b31d:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b324:	75 05                	jne    c000b32b <Computer::displayFeatures()+0x91>
c000b326:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b32b:	52                   	push   edx
c000b32c:	52                   	push   edx
c000b32d:	50                   	push   eax
c000b32e:	68 3b 11 02 c0       	push   0xc002113b
c000b333:	e8 d3 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b340:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b347:	75 05                	jne    c000b34e <Computer::displayFeatures()+0xb4>
c000b349:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b34e:	51                   	push   ecx
c000b34f:	51                   	push   ecx
c000b350:	50                   	push   eax
c000b351:	68 4c 11 02 c0       	push   0xc002114c
c000b356:	e8 b0 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b363:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b36a:	75 05                	jne    c000b371 <Computer::displayFeatures()+0xd7>
c000b36c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b371:	52                   	push   edx
c000b372:	52                   	push   edx
c000b373:	50                   	push   eax
c000b374:	68 5d 11 02 c0       	push   0xc002115d
c000b379:	e8 8d 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b386:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b38d:	75 05                	jne    c000b394 <Computer::displayFeatures()+0xfa>
c000b38f:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b394:	51                   	push   ecx
c000b395:	51                   	push   ecx
c000b396:	50                   	push   eax
c000b397:	68 6e 11 02 c0       	push   0xc002116e
c000b39c:	e8 6a 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b3a1:	83 c4 10             	add    esp,0x10
c000b3a4:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3a9:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b0:	78 05                	js     c000b3b7 <Computer::displayFeatures()+0x11d>
c000b3b2:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b3b7:	52                   	push   edx
c000b3b8:	52                   	push   edx
c000b3b9:	50                   	push   eax
c000b3ba:	68 7f 11 02 c0       	push   0xc002117f
c000b3bf:	e8 47 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b3c4:	83 c4 10             	add    esp,0x10
c000b3c7:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3cc:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3d3:	0f 84 93 01 00 00    	je     c000b56c <Computer::displayFeatures()+0x2d2>
c000b3d9:	51                   	push   ecx
c000b3da:	51                   	push   ecx
c000b3db:	50                   	push   eax
c000b3dc:	68 90 11 02 c0       	push   0xc0021190
c000b3e1:	e8 25 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b3e6:	83 c4 10             	add    esp,0x10
c000b3e9:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b3ee:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3f5:	0f 84 67 01 00 00    	je     c000b562 <Computer::displayFeatures()+0x2c8>
c000b3fb:	52                   	push   edx
c000b3fc:	52                   	push   edx
c000b3fd:	50                   	push   eax
c000b3fe:	68 a1 11 02 c0       	push   0xc00211a1
c000b403:	e8 03 3e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b410:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b417:	0f 84 3b 01 00 00    	je     c000b558 <Computer::displayFeatures()+0x2be>
c000b41d:	51                   	push   ecx
c000b41e:	51                   	push   ecx
c000b41f:	50                   	push   eax
c000b420:	68 b2 11 02 c0       	push   0xc00211b2
c000b425:	e8 e1 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b42a:	83 c4 10             	add    esp,0x10
c000b42d:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b432:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b439:	0f 84 0f 01 00 00    	je     c000b54e <Computer::displayFeatures()+0x2b4>
c000b43f:	52                   	push   edx
c000b440:	52                   	push   edx
c000b441:	50                   	push   eax
c000b442:	68 c3 11 02 c0       	push   0xc00211c3
c000b447:	e8 bf 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b44c:	83 c4 10             	add    esp,0x10
c000b44f:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b454:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b45b:	0f 84 e3 00 00 00    	je     c000b544 <Computer::displayFeatures()+0x2aa>
c000b461:	51                   	push   ecx
c000b462:	51                   	push   ecx
c000b463:	50                   	push   eax
c000b464:	68 d4 11 02 c0       	push   0xc00211d4
c000b469:	e8 9d 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b46e:	83 c4 10             	add    esp,0x10
c000b471:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b476:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b47d:	0f 84 b7 00 00 00    	je     c000b53a <Computer::displayFeatures()+0x2a0>
c000b483:	52                   	push   edx
c000b484:	52                   	push   edx
c000b485:	50                   	push   eax
c000b486:	68 e5 11 02 c0       	push   0xc00211e5
c000b48b:	e8 7b 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b498:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b49f:	0f 84 8b 00 00 00    	je     c000b530 <Computer::displayFeatures()+0x296>
c000b4a5:	51                   	push   ecx
c000b4a6:	51                   	push   ecx
c000b4a7:	50                   	push   eax
c000b4a8:	68 f6 11 02 c0       	push   0xc00211f6
c000b4ad:	e8 59 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b4b2:	83 c4 10             	add    esp,0x10
c000b4b5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4ba:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4c1:	78 05                	js     c000b4c8 <Computer::displayFeatures()+0x22e>
c000b4c3:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b4c8:	52                   	push   edx
c000b4c9:	52                   	push   edx
c000b4ca:	50                   	push   eax
c000b4cb:	68 07 12 02 c0       	push   0xc0021207
c000b4d0:	e8 36 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b4d5:	83 c4 10             	add    esp,0x10
c000b4d8:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4dd:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4e4:	74 43                	je     c000b529 <Computer::displayFeatures()+0x28f>
c000b4e6:	51                   	push   ecx
c000b4e7:	51                   	push   ecx
c000b4e8:	50                   	push   eax
c000b4e9:	68 18 12 02 c0       	push   0xc0021218
c000b4ee:	e8 18 3d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c000b4fb:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b502:	74 1e                	je     c000b522 <Computer::displayFeatures()+0x288>
c000b504:	52                   	push   edx
c000b505:	52                   	push   edx
c000b506:	50                   	push   eax
c000b507:	68 29 12 02 c0       	push   0xc0021229
c000b50c:	e8 fa 3c 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b511:	c7 44 24 20 a6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228a6
c000b519:	83 c4 18             	add    esp,0x18
c000b51c:	5b                   	pop    ebx
c000b51d:	e9 e9 3c 00 00       	jmp    c000f20b <Dbg::kprintf(char const*, ...)>
c000b522:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b527:	eb db                	jmp    c000b504 <Computer::displayFeatures()+0x26a>
c000b529:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b52e:	eb b6                	jmp    c000b4e6 <Computer::displayFeatures()+0x24c>
c000b530:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b535:	e9 6b ff ff ff       	jmp    c000b4a5 <Computer::displayFeatures()+0x20b>
c000b53a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b53f:	e9 3f ff ff ff       	jmp    c000b483 <Computer::displayFeatures()+0x1e9>
c000b544:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b549:	e9 13 ff ff ff       	jmp    c000b461 <Computer::displayFeatures()+0x1c7>
c000b54e:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b553:	e9 e7 fe ff ff       	jmp    c000b43f <Computer::displayFeatures()+0x1a5>
c000b558:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b55d:	e9 bb fe ff ff       	jmp    c000b41d <Computer::displayFeatures()+0x183>
c000b562:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b567:	e9 8f fe ff ff       	jmp    c000b3fb <Computer::displayFeatures()+0x161>
c000b56c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c000b571:	e9 63 fe ff ff       	jmp    c000b3d9 <Computer::displayFeatures()+0x13f>

c000b576 <Computer::rdmsr(unsigned int)>:
c000b576:	83 ec 0c             	sub    esp,0xc
c000b579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b584:	74 0a                	je     c000b590 <Computer::rdmsr(unsigned int)+0x1a>
c000b586:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b58a:	0f 32                	rdmsr  
c000b58c:	83 c4 0c             	add    esp,0xc
c000b58f:	c3                   	ret    
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	68 3a 12 02 c0       	push   0xc002123a
c000b598:	e8 9d a4 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	eb e4                	jmp    c000b586 <Computer::rdmsr(unsigned int)+0x10>

c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5a2:	57                   	push   edi
c000b5a3:	56                   	push   esi
c000b5a4:	52                   	push   edx
c000b5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5b1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b8:	74 0e                	je     c000b5c8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5be:	89 f0                	mov    eax,esi
c000b5c0:	89 fa                	mov    edx,edi
c000b5c2:	0f 30                	wrmsr  
c000b5c4:	58                   	pop    eax
c000b5c5:	5e                   	pop    esi
c000b5c6:	5f                   	pop    edi
c000b5c7:	c3                   	ret    
c000b5c8:	83 ec 0c             	sub    esp,0xc
c000b5cb:	68 40 12 02 c0       	push   0xc0021240
c000b5d0:	e8 65 a4 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	eb e0                	jmp    c000b5ba <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5da <Computer::nmiEnabled()>:
c000b5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5de:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5e4:	c3                   	ret    
c000b5e5:	90                   	nop

c000b5e6 <Computer::readCMOS(unsigned char)>:
c000b5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5ee:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5f5:	19 c0                	sbb    eax,eax
c000b5f7:	83 e0 80             	and    eax,0xffffff80
c000b5fa:	09 d0                	or     eax,edx
c000b5fc:	e6 70                	out    0x70,al
c000b5fe:	e4 71                	in     al,0x71
c000b600:	c3                   	ret    
c000b601:	90                   	nop

c000b602 <Computer::enableNMI(bool)>:
c000b602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b606:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b610:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b618:	eb cc                	jmp    c000b5e6 <Computer::readCMOS(unsigned char)>

c000b61a <Computer::open(int, int, void*)>:
c000b61a:	56                   	push   esi
c000b61b:	53                   	push   ebx
c000b61c:	83 ec 10             	sub    esp,0x10
c000b61f:	f6 05 a0 47 02 c0 04 	test   BYTE PTR ds:0xc00247a0,0x4
c000b626:	0f 94 05 c0 3b 02 c0 	sete   BYTE PTR ds:0xc0023bc0
c000b62d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b631:	68 68 22 00 00       	push   0x2268
c000b636:	e8 9b 3a 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000b63b:	89 c6                	mov    esi,eax
c000b63d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b640:	e8 bf 87 00 00       	call   c0013e04 <ACPI::ACPI()>
c000b645:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b64b:	59                   	pop    ecx
c000b64c:	58                   	pop    eax
c000b64d:	56                   	push   esi
c000b64e:	53                   	push   ebx
c000b64f:	e8 cc 4f 00 00       	call   c0010620 <Device::addChild(Device*)>
c000b654:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b657:	e8 44 fa ff ff       	call   c000b0a0 <Computer::detectFeatures()>
c000b65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65f:	e8 36 fc ff ff       	call   c000b29a <Computer::displayFeatures()>
c000b664:	58                   	pop    eax
c000b665:	5a                   	pop    edx
c000b666:	6a 01                	push   0x1
c000b668:	53                   	push   ebx
c000b669:	e8 94 ff ff ff       	call   c000b602 <Computer::enableNMI(bool)>
c000b66e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b675:	e8 5c 3a 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000b67a:	89 c6                	mov    esi,eax
c000b67c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b67f:	e8 5e 92 00 00       	call   c00148e2 <CPU::CPU()>
c000b684:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b68a:	59                   	pop    ecx
c000b68b:	58                   	pop    eax
c000b68c:	56                   	push   esi
c000b68d:	53                   	push   ebx
c000b68e:	e8 8d 4f 00 00       	call   c0010620 <Device::addChild(Device*)>
c000b693:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b699:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b69d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b69f:	51                   	push   ecx
c000b6a0:	6a 00                	push   0x0
c000b6a2:	6a 00                	push   0x0
c000b6a4:	50                   	push   eax
c000b6a5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6a8:	83 c4 20             	add    esp,0x20
c000b6ab:	e8 d8 54 00 00       	call   c0010b88 <setupFPU()>
c000b6b0:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6b6:	85 c0                	test   eax,eax
c000b6b8:	74 1e                	je     c000b6d8 <Computer::open(int, int, void*)+0xbe>
c000b6ba:	52                   	push   edx
c000b6bb:	52                   	push   edx
c000b6bc:	50                   	push   eax
c000b6bd:	53                   	push   ebx
c000b6be:	e8 5d 4f 00 00       	call   c0010620 <Device::addChild(Device*)>
c000b6c3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6cb:	6a 00                	push   0x0
c000b6cd:	6a 00                	push   0x0
c000b6cf:	6a 00                	push   0x0
c000b6d1:	50                   	push   eax
c000b6d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6d5:	83 c4 20             	add    esp,0x20
c000b6d8:	83 ec 0c             	sub    esp,0xc
c000b6db:	68 91 b0 00 c0       	push   0xc000b091
c000b6e0:	e8 92 d5 00 00       	call   c0018c77 <setupMultitasking(void (*)())>
c000b6e5:	83 c4 14             	add    esp,0x14
c000b6e8:	83 c8 ff             	or     eax,0xffffffff
c000b6eb:	5b                   	pop    ebx
c000b6ec:	5e                   	pop    esi
c000b6ed:	c3                   	ret    

c000b6ee <Computer::disableNMI()>:
c000b6ee:	6a 00                	push   0x0
c000b6f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6f4:	50                   	push   eax
c000b6f5:	e8 08 ff ff ff       	call   c000b602 <Computer::enableNMI(bool)>
c000b6fa:	5a                   	pop    edx
c000b6fb:	59                   	pop    ecx
c000b6fc:	c3                   	ret    
c000b6fd:	90                   	nop

c000b6fe <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b702:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b706:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b70d:	19 c0                	sbb    eax,eax
c000b70f:	83 e0 80             	and    eax,0xffffff80
c000b712:	09 d0                	or     eax,edx
c000b714:	e6 70                	out    0x70,al
c000b716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b71a:	e6 71                	out    0x71,al
c000b71c:	c3                   	ret    
c000b71d:	90                   	nop

c000b71e <Computer::handleNMI()>:
c000b71e:	56                   	push   esi
c000b71f:	53                   	push   ebx
c000b720:	83 ec 10             	sub    esp,0x10
c000b723:	e4 92                	in     al,0x92
c000b725:	89 c6                	mov    esi,eax
c000b727:	e4 61                	in     al,0x61
c000b729:	68 46 12 02 c0       	push   0xc0021246
c000b72e:	88 c3                	mov    bl,al
c000b730:	e8 d6 3a 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b735:	83 c4 10             	add    esp,0x10
c000b738:	83 e6 10             	and    esi,0x10
c000b73b:	75 0d                	jne    c000b74a <Computer::handleNMI()+0x2c>
c000b73d:	f6 c3 40             	test   bl,0x40
c000b740:	75 1d                	jne    c000b75f <Computer::handleNMI()+0x41>
c000b742:	84 db                	test   bl,bl
c000b744:	78 2d                	js     c000b773 <Computer::handleNMI()+0x55>
c000b746:	58                   	pop    eax
c000b747:	5b                   	pop    ebx
c000b748:	5e                   	pop    esi
c000b749:	c3                   	ret    
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	68 57 12 02 c0       	push   0xc0021257
c000b752:	e8 e3 a2 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	f6 c3 40             	test   bl,0x40
c000b75d:	74 e3                	je     c000b742 <Computer::handleNMI()+0x24>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	68 64 12 02 c0       	push   0xc0021264
c000b767:	e8 ce a2 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	84 db                	test   bl,bl
c000b771:	79 d3                	jns    c000b746 <Computer::handleNMI()+0x28>
c000b773:	c7 44 24 10 6e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002126e
c000b77b:	5a                   	pop    edx
c000b77c:	5b                   	pop    ebx
c000b77d:	5e                   	pop    esi
c000b77e:	e9 b7 a2 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c000b783:	90                   	nop

c000b784 <Computer::setDiskActivityLight(int, bool)>:
c000b784:	56                   	push   esi
c000b785:	53                   	push   ebx
c000b786:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b78a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b78f:	77 1c                	ja     c000b7ad <Computer::setDiskActivityLight(int, bool)+0x29>
c000b791:	e4 92                	in     al,0x92
c000b793:	bb 40 00 00 00       	mov    ebx,0x40
c000b798:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b79c:	89 da                	mov    edx,ebx
c000b79e:	d3 e2                	shl    edx,cl
c000b7a0:	83 f2 ff             	xor    edx,0xffffffff
c000b7a3:	89 f1                	mov    ecx,esi
c000b7a5:	21 d0                	and    eax,edx
c000b7a7:	d3 e3                	shl    ebx,cl
c000b7a9:	09 d8                	or     eax,ebx
c000b7ab:	e6 92                	out    0x92,al
c000b7ad:	5b                   	pop    ebx
c000b7ae:	5e                   	pop    esi
c000b7af:	c3                   	ret    

c000b7b0 <GDTEntry::setBase(unsigned int)>:
c000b7b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7b8:	89 c1                	mov    ecx,eax
c000b7ba:	c1 e9 10             	shr    ecx,0x10
c000b7bd:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7c1:	c1 e8 18             	shr    eax,0x18
c000b7c4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7c7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <GDTEntry::setLimit(unsigned int)>:
c000b7cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7d4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7d7:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7da:	c1 e8 10             	shr    eax,0x10
c000b7dd:	83 e2 f0             	and    edx,0xfffffff0
c000b7e0:	83 e0 0f             	and    eax,0xf
c000b7e3:	09 d0                	or     eax,edx
c000b7e5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7e8:	c3                   	ret    
c000b7e9:	90                   	nop

c000b7ea <GDT::GDT()>:
c000b7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7fe:	90                   	nop
c000b7ff:	c3                   	ret    

c000b800 <GDT::addEntry(GDTEntry)>:
c000b800:	53                   	push   ebx
c000b801:	83 ec 0c             	sub    esp,0xc
c000b804:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b808:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b80a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b811:	52                   	push   edx
c000b812:	50                   	push   eax
c000b813:	68 a8 12 02 c0       	push   0xc00212a8
c000b818:	e8 ee 39 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000b81d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b823:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b827:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b82b:	8d 50 01             	lea    edx,[eax+0x1]
c000b82e:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b832:	89 13                	mov    DWORD PTR [ebx],edx
c000b834:	c1 e0 03             	shl    eax,0x3
c000b837:	83 c4 18             	add    esp,0x18
c000b83a:	5b                   	pop    ebx
c000b83b:	c3                   	ret    

c000b83c <GDT::getNumberOfEntries()>:
c000b83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b840:	8b 00                	mov    eax,DWORD PTR [eax]
c000b842:	c3                   	ret    
c000b843:	90                   	nop

c000b844 <GDT::flush()>:
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	83 c0 04             	add    eax,0x4
c000b84b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b84e:	a3 92 47 02 c0       	mov    ds:0xc0024792,eax
c000b853:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b85a:	66 89 15 90 47 02 c0 	mov    WORD PTR ds:0xc0024790,dx
c000b861:	e9 7f 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b866 <GDT::setup()>:
c000b866:	55                   	push   ebp
c000b867:	57                   	push   edi
c000b868:	56                   	push   esi
c000b869:	53                   	push   ebx
c000b86a:	83 ec 3c             	sub    esp,0x3c
c000b86d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b871:	6a 00                	push   0x0
c000b873:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b877:	53                   	push   ebx
c000b878:	e8 33 ff ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b87d:	6a 00                	push   0x0
c000b87f:	53                   	push   ebx
c000b880:	e8 47 ff ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b885:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b88d:	6a 00                	push   0x0
c000b88f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b893:	53                   	push   ebx
c000b894:	e8 17 ff ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b899:	68 ff ff ff 00       	push   0xffffff
c000b89e:	53                   	push   ebx
c000b89f:	e8 28 ff ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b8a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8a8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ad:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8b6:	83 c4 20             	add    esp,0x20
c000b8b9:	6a 00                	push   0x0
c000b8bb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8bf:	53                   	push   ebx
c000b8c0:	e8 eb fe ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000b8c5:	68 ff ff ff 00       	push   0xffffff
c000b8ca:	53                   	push   ebx
c000b8cb:	e8 fc fe ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000b8d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8d4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8d8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8dd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8e1:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8e6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8ee:	89 d8                	mov    eax,ebx
c000b8f0:	80 cc 60             	or     ah,0x60
c000b8f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b8fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b8ff:	83 c4 0c             	add    esp,0xc
c000b902:	89 f8                	mov    eax,edi
c000b904:	80 cc 60             	or     ah,0x60
c000b907:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90f:	89 c7                	mov    edi,eax
c000b911:	55                   	push   ebp
c000b912:	e8 e9 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b917:	83 c4 0c             	add    esp,0xc
c000b91a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b91e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b922:	55                   	push   ebp
c000b923:	e8 d8 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b928:	83 c4 0c             	add    esp,0xc
c000b92b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b92f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b933:	55                   	push   ebp
c000b934:	e8 c7 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b939:	83 c4 0c             	add    esp,0xc
c000b93c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b944:	53                   	push   ebx
c000b945:	51                   	push   ecx
c000b946:	55                   	push   ebp
c000b947:	e8 b4 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b94c:	83 c4 0c             	add    esp,0xc
c000b94f:	57                   	push   edi
c000b950:	56                   	push   esi
c000b951:	55                   	push   ebp
c000b952:	e8 a9 fe ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000b957:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b95a:	e8 e5 fe ff ff       	call   c000b844 <GDT::flush()>
c000b95f:	83 c4 4c             	add    esp,0x4c
c000b962:	5b                   	pop    ebx
c000b963:	5e                   	pop    esi
c000b964:	5f                   	pop    edi
c000b965:	5d                   	pop    ebp
c000b966:	c3                   	ret    

c000b967 <idleFunction(void*)>:
c000b967:	53                   	push   ebx
c000b968:	83 ec 08             	sub    esp,0x8
c000b96b:	e8 d5 d0 00 00       	call   c0018a45 <unlockScheduler()>
c000b970:	e8 59 8f 00 00       	call   c00148ce <thisCPU()>
c000b975:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b97c:	74 41                	je     c000b9bf <idleFunction(void*)+0x58>
c000b97e:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c000b983:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b98a:	74 33                	je     c000b9bf <idleFunction(void*)+0x58>
c000b98c:	52                   	push   edx
c000b98d:	31 db                	xor    ebx,ebx
c000b98f:	52                   	push   edx
c000b990:	68 e1 00 00 00       	push   0xe1
c000b995:	50                   	push   eax
c000b996:	e8 db fb ff ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c000b99b:	53                   	push   ebx
c000b99c:	83 e0 02             	and    eax,0x2
c000b99f:	50                   	push   eax
c000b9a0:	68 e1 00 00 00       	push   0xe1
c000b9a5:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c000b9ab:	e8 f2 fb ff ff       	call   c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9b0:	83 c4 20             	add    esp,0x20
c000b9b3:	e8 45 48 ff ff       	call   c00001fd <doTPAUSE>
c000b9b8:	e8 03 3e 01 00       	call   c001f7c0 <idleCommon()>
c000b9bd:	eb f4                	jmp    c000b9b3 <idleFunction(void*)+0x4c>
c000b9bf:	fb                   	sti    
c000b9c0:	f4                   	hlt    
c000b9c1:	e8 fa 3d 01 00       	call   c001f7c0 <idleCommon()>
c000b9c6:	eb f7                	jmp    c000b9bf <idleFunction(void*)+0x58>

c000b9c8 <IDTEntry::IDTEntry(bool)>:
c000b9c8:	83 ec 04             	sub    esp,0x4
c000b9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9cf:	88 04 24             	mov    BYTE PTR [esp],al
c000b9d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9d6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9eb:	83 e2 f0             	and    edx,0xfffffff0
c000b9ee:	83 ca 0e             	or     edx,0xe
c000b9f1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9fb:	83 e2 ef             	and    edx,0xffffffef
c000b9fe:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba01:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba05:	74 04                	je     c000ba0b <IDTEntry::IDTEntry(bool)+0x43>
c000ba07:	b2 03                	mov    dl,0x3
c000ba09:	eb 02                	jmp    c000ba0d <IDTEntry::IDTEntry(bool)+0x45>
c000ba0b:	b2 00                	mov    dl,0x0
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	83 e2 03             	and    edx,0x3
c000ba14:	88 d1                	mov    cl,dl
c000ba16:	c1 e1 05             	shl    ecx,0x5
c000ba19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba1c:	83 e2 9f             	and    edx,0xffffff9f
c000ba1f:	09 ca                	or     edx,ecx
c000ba21:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba28:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2b:	83 ca 80             	or     edx,0xffffff80
c000ba2e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba31:	90                   	nop
c000ba32:	83 c4 04             	add    esp,0x4
c000ba35:	c3                   	ret    

c000ba36 <IDTEntry::setOffset(unsigned int)>:
c000ba36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3e:	66 89 02             	mov    WORD PTR [edx],ax
c000ba41:	c1 e8 10             	shr    eax,0x10
c000ba44:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <IDT::IDT()>:
c000ba4a:	90                   	nop
c000ba4b:	c3                   	ret    

c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba50:	83 c0 30             	add    eax,0x30
c000ba53:	c3                   	ret    

c000ba54 <IDT::addEntry(IDTEntry, int)>:
c000ba54:	53                   	push   ebx
c000ba55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba65:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba68:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba6c:	5b                   	pop    ebx
c000ba6d:	c3                   	ret    

c000ba6e <IDT::addEntry(int, void (*)(), bool)>:
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 10             	sub    esp,0x10
c000ba72:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba77:	50                   	push   eax
c000ba78:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba7c:	53                   	push   ebx
c000ba7d:	e8 46 ff ff ff       	call   c000b9c8 <IDTEntry::IDTEntry(bool)>
c000ba82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba86:	53                   	push   ebx
c000ba87:	e8 aa ff ff ff       	call   c000ba36 <IDTEntry::setOffset(unsigned int)>
c000ba8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba9c:	e8 b3 ff ff ff       	call   c000ba54 <IDT::addEntry(IDTEntry, int)>
c000baa1:	83 c4 30             	add    esp,0x30
c000baa4:	5b                   	pop    ebx
c000baa5:	c3                   	ret    

c000baa6 <IDT::flush()>:
c000baa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baaa:	66 c7 05 98 47 02 c0 ff 07 	mov    WORD PTR ds:0xc0024798,0x7ff
c000bab3:	a3 9a 47 02 c0       	mov    ds:0xc002479a,eax
c000bab8:	0f 01 1d 98 47 02 c0 	lidtd  ds:0xc0024798
c000babf:	c3                   	ret    

c000bac0 <IDT::setup()>:
c000bac0:	57                   	push   edi
c000bac1:	56                   	push   esi
c000bac2:	53                   	push   ebx
c000bac3:	83 ec 10             	sub    esp,0x10
c000bac6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000baca:	6a 00                	push   0x0
c000bacc:	68 05 04 00 c0       	push   0xc0000405
c000bad1:	6a 00                	push   0x0
c000bad3:	53                   	push   ebx
c000bad4:	e8 95 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bad9:	6a 00                	push   0x0
c000badb:	68 15 04 00 c0       	push   0xc0000415
c000bae0:	6a 01                	push   0x1
c000bae2:	53                   	push   ebx
c000bae3:	e8 86 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bae8:	83 c4 20             	add    esp,0x20
c000baeb:	6a 00                	push   0x0
c000baed:	68 1f 04 00 c0       	push   0xc000041f
c000baf2:	6a 02                	push   0x2
c000baf4:	53                   	push   ebx
c000baf5:	e8 74 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bafa:	6a 00                	push   0x0
c000bafc:	68 29 04 00 c0       	push   0xc0000429
c000bb01:	6a 03                	push   0x3
c000bb03:	53                   	push   ebx
c000bb04:	e8 65 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb09:	83 c4 20             	add    esp,0x20
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 33 04 00 c0       	push   0xc0000433
c000bb13:	6a 04                	push   0x4
c000bb15:	53                   	push   ebx
c000bb16:	e8 53 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	6a 00                	push   0x0
c000bb1d:	68 3d 04 00 c0       	push   0xc000043d
c000bb22:	6a 05                	push   0x5
c000bb24:	53                   	push   ebx
c000bb25:	e8 44 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb2a:	83 c4 20             	add    esp,0x20
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 47 04 00 c0       	push   0xc0000447
c000bb34:	6a 06                	push   0x6
c000bb36:	53                   	push   ebx
c000bb37:	e8 32 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	6a 00                	push   0x0
c000bb3e:	68 51 04 00 c0       	push   0xc0000451
c000bb43:	6a 07                	push   0x7
c000bb45:	53                   	push   ebx
c000bb46:	e8 23 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb4b:	83 c4 20             	add    esp,0x20
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 5b 04 00 c0       	push   0xc000045b
c000bb55:	6a 08                	push   0x8
c000bb57:	53                   	push   ebx
c000bb58:	e8 11 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	6a 00                	push   0x0
c000bb5f:	68 63 04 00 c0       	push   0xc0000463
c000bb64:	6a 09                	push   0x9
c000bb66:	53                   	push   ebx
c000bb67:	e8 02 ff ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb6c:	83 c4 20             	add    esp,0x20
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 6d 04 00 c0       	push   0xc000046d
c000bb76:	6a 0a                	push   0xa
c000bb78:	53                   	push   ebx
c000bb79:	e8 f0 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	6a 00                	push   0x0
c000bb80:	68 75 04 00 c0       	push   0xc0000475
c000bb85:	6a 0b                	push   0xb
c000bb87:	53                   	push   ebx
c000bb88:	e8 e1 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb8d:	83 c4 20             	add    esp,0x20
c000bb90:	6a 00                	push   0x0
c000bb92:	68 7d 04 00 c0       	push   0xc000047d
c000bb97:	6a 0c                	push   0xc
c000bb99:	53                   	push   ebx
c000bb9a:	e8 cf fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	6a 00                	push   0x0
c000bba1:	68 85 04 00 c0       	push   0xc0000485
c000bba6:	6a 0d                	push   0xd
c000bba8:	53                   	push   ebx
c000bba9:	e8 c0 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbae:	83 c4 20             	add    esp,0x20
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 8d 04 00 c0       	push   0xc000048d
c000bbb8:	6a 0e                	push   0xe
c000bbba:	53                   	push   ebx
c000bbbb:	e8 ae fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	6a 00                	push   0x0
c000bbc2:	68 95 04 00 c0       	push   0xc0000495
c000bbc7:	6a 0f                	push   0xf
c000bbc9:	53                   	push   ebx
c000bbca:	e8 9f fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbcf:	83 c4 20             	add    esp,0x20
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 9f 04 00 c0       	push   0xc000049f
c000bbd9:	6a 10                	push   0x10
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 8d fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	6a 00                	push   0x0
c000bbe3:	68 a9 04 00 c0       	push   0xc00004a9
c000bbe8:	6a 11                	push   0x11
c000bbea:	53                   	push   ebx
c000bbeb:	e8 7e fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bbf0:	83 c4 20             	add    esp,0x20
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 b3 04 00 c0       	push   0xc00004b3
c000bbfa:	6a 12                	push   0x12
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 6c fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	6a 01                	push   0x1
c000bc04:	68 bd 04 00 c0       	push   0xc00004bd
c000bc09:	6a 60                	push   0x60
c000bc0b:	53                   	push   ebx
c000bc0c:	e8 5d fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc11:	83 c4 20             	add    esp,0x20
c000bc14:	6a 00                	push   0x0
c000bc16:	68 c7 04 00 c0       	push   0xc00004c7
c000bc1b:	6a 20                	push   0x20
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 4b fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	6a 00                	push   0x0
c000bc25:	68 d1 04 00 c0       	push   0xc00004d1
c000bc2a:	6a 21                	push   0x21
c000bc2c:	53                   	push   ebx
c000bc2d:	e8 3c fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc32:	83 c4 20             	add    esp,0x20
c000bc35:	6a 00                	push   0x0
c000bc37:	68 db 04 00 c0       	push   0xc00004db
c000bc3c:	6a 22                	push   0x22
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 2a fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	6a 00                	push   0x0
c000bc46:	68 e5 04 00 c0       	push   0xc00004e5
c000bc4b:	6a 23                	push   0x23
c000bc4d:	53                   	push   ebx
c000bc4e:	e8 1b fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc53:	83 c4 20             	add    esp,0x20
c000bc56:	6a 00                	push   0x0
c000bc58:	68 ef 04 00 c0       	push   0xc00004ef
c000bc5d:	6a 24                	push   0x24
c000bc5f:	53                   	push   ebx
c000bc60:	e8 09 fe ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	6a 00                	push   0x0
c000bc67:	68 f9 04 00 c0       	push   0xc00004f9
c000bc6c:	6a 25                	push   0x25
c000bc6e:	53                   	push   ebx
c000bc6f:	e8 fa fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc74:	83 c4 20             	add    esp,0x20
c000bc77:	6a 00                	push   0x0
c000bc79:	68 03 05 00 c0       	push   0xc0000503
c000bc7e:	6a 26                	push   0x26
c000bc80:	53                   	push   ebx
c000bc81:	e8 e8 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	6a 00                	push   0x0
c000bc88:	68 0d 05 00 c0       	push   0xc000050d
c000bc8d:	6a 27                	push   0x27
c000bc8f:	53                   	push   ebx
c000bc90:	e8 d9 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bc95:	83 c4 20             	add    esp,0x20
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 17 05 00 c0       	push   0xc0000517
c000bc9f:	6a 28                	push   0x28
c000bca1:	53                   	push   ebx
c000bca2:	e8 c7 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	6a 00                	push   0x0
c000bca9:	68 21 05 00 c0       	push   0xc0000521
c000bcae:	6a 29                	push   0x29
c000bcb0:	53                   	push   ebx
c000bcb1:	e8 b8 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcb6:	83 c4 20             	add    esp,0x20
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 2b 05 00 c0       	push   0xc000052b
c000bcc0:	6a 2a                	push   0x2a
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 a6 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	6a 00                	push   0x0
c000bcca:	68 35 05 00 c0       	push   0xc0000535
c000bccf:	6a 2b                	push   0x2b
c000bcd1:	53                   	push   ebx
c000bcd2:	e8 97 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcd7:	83 c4 20             	add    esp,0x20
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 3f 05 00 c0       	push   0xc000053f
c000bce1:	6a 2c                	push   0x2c
c000bce3:	53                   	push   ebx
c000bce4:	e8 85 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	6a 00                	push   0x0
c000bceb:	68 49 05 00 c0       	push   0xc0000549
c000bcf0:	6a 2d                	push   0x2d
c000bcf2:	53                   	push   ebx
c000bcf3:	e8 76 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bcf8:	83 c4 20             	add    esp,0x20
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 53 05 00 c0       	push   0xc0000553
c000bd02:	6a 2e                	push   0x2e
c000bd04:	53                   	push   ebx
c000bd05:	e8 64 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	6a 00                	push   0x0
c000bd0c:	68 5d 05 00 c0       	push   0xc000055d
c000bd11:	6a 2f                	push   0x2f
c000bd13:	53                   	push   ebx
c000bd14:	e8 55 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd19:	83 c4 20             	add    esp,0x20
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 67 05 00 c0       	push   0xc0000567
c000bd23:	6a 30                	push   0x30
c000bd25:	53                   	push   ebx
c000bd26:	e8 43 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	6a 00                	push   0x0
c000bd2d:	68 71 05 00 c0       	push   0xc0000571
c000bd32:	6a 31                	push   0x31
c000bd34:	53                   	push   ebx
c000bd35:	e8 34 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd3a:	83 c4 20             	add    esp,0x20
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 7b 05 00 c0       	push   0xc000057b
c000bd44:	6a 32                	push   0x32
c000bd46:	53                   	push   ebx
c000bd47:	e8 22 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	6a 00                	push   0x0
c000bd4e:	68 85 05 00 c0       	push   0xc0000585
c000bd53:	6a 33                	push   0x33
c000bd55:	53                   	push   ebx
c000bd56:	e8 13 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd5b:	83 c4 20             	add    esp,0x20
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 8f 05 00 c0       	push   0xc000058f
c000bd65:	6a 34                	push   0x34
c000bd67:	53                   	push   ebx
c000bd68:	e8 01 fd ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	6a 00                	push   0x0
c000bd6f:	68 99 05 00 c0       	push   0xc0000599
c000bd74:	6a 35                	push   0x35
c000bd76:	53                   	push   ebx
c000bd77:	e8 f2 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd7c:	83 c4 20             	add    esp,0x20
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 a3 05 00 c0       	push   0xc00005a3
c000bd86:	6a 36                	push   0x36
c000bd88:	53                   	push   ebx
c000bd89:	e8 e0 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	6a 00                	push   0x0
c000bd90:	68 ad 05 00 c0       	push   0xc00005ad
c000bd95:	6a 37                	push   0x37
c000bd97:	53                   	push   ebx
c000bd98:	e8 d1 fc ff ff       	call   c000ba6e <IDT::addEntry(int, void (*)(), bool)>
c000bd9d:	83 c4 20             	add    esp,0x20
c000bda0:	e8 d8 25 00 00       	call   c000e37d <Virt::getAKernelVAS()>
c000bda5:	52                   	push   edx
c000bda6:	6a 03                	push   0x3
c000bda8:	6a 02                	push   0x2
c000bdaa:	50                   	push   eax
c000bdab:	e8 0e 2c 00 00       	call   c000e9be <VAS::allocatePages(int, int)>
c000bdb0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdb7:	89 c6                	mov    esi,eax
c000bdb9:	e8 18 33 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000bdbe:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdc4:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdc7:	89 c7                	mov    edi,eax
c000bdc9:	e8 ee 1c 00 00       	call   c000dabc <TSS::TSS()>
c000bdce:	83 c4 0c             	add    esp,0xc
c000bdd1:	68 5b 04 00 c0       	push   0xc000045b
c000bdd6:	56                   	push   esi
c000bdd7:	57                   	push   edi
c000bdd8:	e8 1f 1d 00 00       	call   c000dafc <TSS::setup(unsigned long, unsigned long)>
c000bddd:	59                   	pop    ecx
c000bdde:	89 c6                	mov    esi,eax
c000bde0:	5f                   	pop    edi
c000bde1:	6a 00                	push   0x0
c000bde3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bde7:	50                   	push   eax
c000bde8:	e8 db fb ff ff       	call   c000b9c8 <IDTEntry::IDTEntry(bool)>
c000bded:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdf1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdf6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bdfc:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be03:	80 ce 05             	or     dh,0x5
c000be06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be0a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be0e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be15:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be1b:	e8 86 fc ff ff       	call   c000baa6 <IDT::flush()>
c000be20:	83 c4 20             	add    esp,0x20
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	c3                   	ret    

c000be27 <sbrk>:
c000be27:	55                   	push   ebp
c000be28:	57                   	push   edi
c000be29:	56                   	push   esi
c000be2a:	53                   	push   ebx
c000be2b:	83 ec 1c             	sub    esp,0x1c
c000be2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be32:	85 db                	test   ebx,ebx
c000be34:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c000be39:	0f 84 e4 00 00 00    	je     c000bf23 <sbrk+0xfc>
c000be3f:	78 3d                	js     c000be7e <sbrk+0x57>
c000be41:	e8 88 8a 00 00       	call   c00148ce <thisCPU()>
c000be46:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be4c:	83 e0 01             	and    eax,0x1
c000be4f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be53:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c000be58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be5c:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be62:	89 d8                	mov    eax,ebx
c000be64:	c1 f8 1f             	sar    eax,0x1f
c000be67:	25 ff 0f 00 00       	and    eax,0xfff
c000be6c:	01 c3                	add    ebx,eax
c000be6e:	c1 fb 0c             	sar    ebx,0xc
c000be71:	89 df                	mov    edi,ebx
c000be73:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be77:	be 00 00 00 00       	mov    esi,0x0
c000be7c:	eb 2a                	jmp    c000bea8 <sbrk+0x81>
c000be7e:	83 ec 08             	sub    esp,0x8
c000be81:	53                   	push   ebx
c000be82:	68 c4 12 02 c0       	push   0xc00212c4
c000be87:	e8 7f 33 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000be8c:	83 c4 10             	add    esp,0x10
c000be8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be94:	e9 8a 00 00 00       	jmp    c000bf23 <sbrk+0xfc>
c000be99:	81 05 a0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023ba0,0x1000
c000bea3:	46                   	inc    esi
c000bea4:	39 f7                	cmp    edi,esi
c000bea6:	74 34                	je     c000bedc <sbrk+0xb5>
c000bea8:	e8 d0 24 00 00       	call   c000e37d <Virt::getAKernelVAS()>
c000bead:	89 c3                	mov    ebx,eax
c000beaf:	8b 2d a0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023ba0
c000beb5:	e8 f5 06 00 00       	call   c000c5af <Phys::allocatePage()>
c000beba:	68 01 04 00 00       	push   0x401
c000bebf:	55                   	push   ebp
c000bec0:	50                   	push   eax
c000bec1:	53                   	push   ebx
c000bec2:	e8 f5 29 00 00       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000becf:	74 c8                	je     c000be99 <sbrk+0x72>
c000bed1:	8b 1d a0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ba0
c000bed7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beda:	eb bd                	jmp    c000be99 <sbrk+0x72>
c000bedc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee1:	74 48                	je     c000bf2b <sbrk+0x104>
c000bee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bee7:	89 d3                	mov    ebx,edx
c000bee9:	c1 eb 0a             	shr    ebx,0xa
c000beec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bef2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bef8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000befc:	c1 e0 0c             	shl    eax,0xc
c000beff:	01 d0                	add    eax,edx
c000bf01:	c1 e8 0a             	shr    eax,0xa
c000bf04:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf09:	2d 00 00 40 00       	sub    eax,0x400000
c000bf0e:	39 c3                	cmp    ebx,eax
c000bf10:	77 0d                	ja     c000bf1f <sbrk+0xf8>
c000bf12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf15:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf1b:	39 d8                	cmp    eax,ebx
c000bf1d:	73 f3                	jae    c000bf12 <sbrk+0xeb>
c000bf1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf23:	83 c4 1c             	add    esp,0x1c
c000bf26:	5b                   	pop    ebx
c000bf27:	5e                   	pop    esi
c000bf28:	5f                   	pop    edi
c000bf29:	5d                   	pop    ebp
c000bf2a:	c3                   	ret    
c000bf2b:	e8 a5 38 01 00       	call   c001f7d5 <CPU::readCR3()>
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	50                   	push   eax
c000bf34:	e8 ae 38 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	eb e1                	jmp    c000bf1f <sbrk+0xf8>

c000bf3e <mmap>:
c000bf3e:	83 ec 18             	sub    esp,0x18
c000bf41:	68 f4 12 02 c0       	push   0xc00212f4
c000bf46:	e8 ef 9a 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000bf4b:	b8 00 00 00 00       	mov    eax,0x0
c000bf50:	83 c4 1c             	add    esp,0x1c
c000bf53:	c3                   	ret    

c000bf54 <munmap>:
c000bf54:	83 ec 18             	sub    esp,0x18
c000bf57:	68 f9 12 02 c0       	push   0xc00212f9
c000bf5c:	e8 d9 9a 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000bf61:	b8 00 00 00 00       	mov    eax,0x0
c000bf66:	83 c4 1c             	add    esp,0x1c
c000bf69:	c3                   	ret    

c000bf6a <liballoc_lock()>:
c000bf6a:	83 ec 0c             	sub    esp,0xc
c000bf6d:	e8 d1 ca 00 00       	call   c0018a43 <lockScheduler()>
c000bf72:	b8 00 00 00 00       	mov    eax,0x0
c000bf77:	83 c4 0c             	add    esp,0xc
c000bf7a:	c3                   	ret    

c000bf7b <liballoc_unlock()>:
c000bf7b:	83 ec 0c             	sub    esp,0xc
c000bf7e:	e8 c2 ca 00 00       	call   c0018a45 <unlockScheduler()>
c000bf83:	b8 00 00 00 00       	mov    eax,0x0
c000bf88:	83 c4 0c             	add    esp,0xc
c000bf8b:	c3                   	ret    

c000bf8c <liballoc_alloc(int)>:
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	e8 e9 23 00 00       	call   c000e37d <Virt::getAKernelVAS()>
c000bf94:	83 ec 04             	sub    esp,0x4
c000bf97:	6a 01                	push   0x1
c000bf99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf9d:	50                   	push   eax
c000bf9e:	e8 1b 2a 00 00       	call   c000e9be <VAS::allocatePages(int, int)>
c000bfa3:	83 c4 1c             	add    esp,0x1c
c000bfa6:	c3                   	ret    

c000bfa7 <liballoc_free(void*, int)>:
c000bfa7:	83 ec 0c             	sub    esp,0xc
c000bfaa:	e8 ce 23 00 00       	call   c000e37d <Virt::getAKernelVAS()>
c000bfaf:	83 ec 08             	sub    esp,0x8
c000bfb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb6:	50                   	push   eax
c000bfb7:	e8 a2 26 00 00       	call   c000e65e <VAS::freeAllocatedPages(unsigned long)>
c000bfbc:	b8 00 00 00 00       	mov    eax,0x0
c000bfc1:	83 c4 1c             	add    esp,0x1c
c000bfc4:	c3                   	ret    

c000bfc5 <realloc>:
c000bfc5:	83 ec 14             	sub    esp,0x14
c000bfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd0:	e8 63 54 ff ff       	call   c0001438 <dlrealloc>
c000bfd5:	83 c4 1c             	add    esp,0x1c
c000bfd8:	c3                   	ret    

c000bfd9 <malloc>:
c000bfd9:	83 ec 18             	sub    esp,0x18
c000bfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe0:	e8 16 4f ff ff       	call   c0000efb <dlmalloc>
c000bfe5:	83 c4 1c             	add    esp,0x1c
c000bfe8:	c3                   	ret    

c000bfe9 <free>:
c000bfe9:	83 ec 18             	sub    esp,0x18
c000bfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff0:	e8 a8 4b ff ff       	call   c0000b9d <dlfree>
c000bff5:	83 c4 1c             	add    esp,0x1c
c000bff8:	c3                   	ret    

c000bff9 <rfree>:
c000bff9:	83 ec 18             	sub    esp,0x18
c000bffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c000:	e8 e4 ff ff ff       	call   c000bfe9 <free>
c000c005:	83 c4 1c             	add    esp,0x1c
c000c008:	c3                   	ret    

c000c009 <calloc>:
c000c009:	56                   	push   esi
c000c00a:	53                   	push   ebx
c000c00b:	83 ec 10             	sub    esp,0x10
c000c00e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c012:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c017:	53                   	push   ebx
c000c018:	e8 bc ff ff ff       	call   c000bfd9 <malloc>
c000c01d:	89 c6                	mov    esi,eax
c000c01f:	83 c4 0c             	add    esp,0xc
c000c022:	53                   	push   ebx
c000c023:	6a 00                	push   0x0
c000c025:	50                   	push   eax
c000c026:	e8 8f 46 ff ff       	call   c00006ba <memset>
c000c02b:	89 f0                	mov    eax,esi
c000c02d:	83 c4 14             	add    esp,0x14
c000c030:	5b                   	pop    ebx
c000c031:	5e                   	pop    esi
c000c032:	c3                   	ret    

c000c033 <hwTextMode_loadInData(VgaText*)>:
c000c033:	57                   	push   edi
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c03a:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c040:	85 c0                	test   eax,eax
c000c042:	7e 30                	jle    c000c074 <hwTextMode_loadInData(VgaText*)+0x41>
c000c044:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c047:	31 f6                	xor    esi,esi
c000c049:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c04c:	31 c0                	xor    eax,eax
c000c04e:	c1 e1 05             	shl    ecx,0x5
c000c051:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c057:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c05b:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c05f:	40                   	inc    eax
c000c060:	83 f8 50             	cmp    eax,0x50
c000c063:	75 f2                	jne    c000c057 <hwTextMode_loadInData(VgaText*)+0x24>
c000c065:	46                   	inc    esi
c000c066:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c06c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c072:	7f d5                	jg     c000c049 <hwTextMode_loadInData(VgaText*)+0x16>
c000c074:	5b                   	pop    ebx
c000c075:	5e                   	pop    esi
c000c076:	5f                   	pop    edi
c000c077:	c3                   	ret    

c000c078 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c078:	56                   	push   esi
c000c079:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c07e:	53                   	push   ebx
c000c07f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c083:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c087:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c08d:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c093:	c1 e0 04             	shl    eax,0x4
c000c096:	83 e6 0f             	and    esi,0xf
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	83 c2 02             	add    edx,0x2
c000c0a1:	09 f0                	or     eax,esi
c000c0a3:	41                   	inc    ecx
c000c0a4:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0a8:	c1 e0 08             	shl    eax,0x8
c000c0ab:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0b1:	09 f0                	or     eax,esi
c000c0b3:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0b7:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0bd:	75 c8                	jne    c000c087 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0bf:	5b                   	pop    ebx
c000c0c0:	5e                   	pop    esi
c000c0c1:	c3                   	ret    

c000c0c2 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0c2:	56                   	push   esi
c000c0c3:	53                   	push   ebx
c000c0c4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0c9:	74 38                	je     c000c103 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0cb:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0d0:	b0 0a                	mov    al,0xa
c000c0d2:	89 da                	mov    edx,ebx
c000c0d4:	ee                   	out    dx,al
c000c0d5:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0da:	89 ca                	mov    edx,ecx
c000c0dc:	ec                   	in     al,dx
c000c0dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0e1:	b2 0f                	mov    dl,0xf
c000c0e3:	83 e0 c0             	and    eax,0xffffffc0
c000c0e6:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0ec:	09 d0                	or     eax,edx
c000c0ee:	89 ca                	mov    edx,ecx
c000c0f0:	ee                   	out    dx,al
c000c0f1:	b0 0b                	mov    al,0xb
c000c0f3:	89 da                	mov    edx,ebx
c000c0f5:	ee                   	out    dx,al
c000c0f6:	89 ca                	mov    edx,ecx
c000c0f8:	ec                   	in     al,dx
c000c0f9:	83 e0 e0             	and    eax,0xffffffe0
c000c0fc:	83 c8 0f             	or     eax,0xf
c000c0ff:	ee                   	out    dx,al
c000c100:	5b                   	pop    ebx
c000c101:	5e                   	pop    esi
c000c102:	c3                   	ret    
c000c103:	b0 0a                	mov    al,0xa
c000c105:	ba d4 03 00 00       	mov    edx,0x3d4
c000c10a:	ee                   	out    dx,al
c000c10b:	b0 20                	mov    al,0x20
c000c10d:	ba d5 03 00 00       	mov    edx,0x3d5
c000c112:	ee                   	out    dx,al
c000c113:	5b                   	pop    ebx
c000c114:	5e                   	pop    esi
c000c115:	c3                   	ret    

c000c116 <hwTextMode_update(VgaText*)>:
c000c116:	c3                   	ret    

c000c117 <hwTextMode_updateCursor(VgaText*)>:
c000c117:	56                   	push   esi
c000c118:	b9 19 00 00 00       	mov    ecx,0x19
c000c11d:	53                   	push   ebx
c000c11e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c122:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c128:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c12e:	29 d1                	sub    ecx,edx
c000c130:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c136:	01 d9                	add    ecx,ebx
c000c138:	b0 0f                	mov    al,0xf
c000c13a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c13d:	c1 e1 04             	shl    ecx,0x4
c000c140:	01 f1                	add    ecx,esi
c000c142:	be d4 03 00 00       	mov    esi,0x3d4
c000c147:	89 f2                	mov    edx,esi
c000c149:	ee                   	out    dx,al
c000c14a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c14f:	88 c8                	mov    al,cl
c000c151:	89 da                	mov    edx,ebx
c000c153:	ee                   	out    dx,al
c000c154:	b0 0e                	mov    al,0xe
c000c156:	89 f2                	mov    edx,esi
c000c158:	ee                   	out    dx,al
c000c159:	89 c8                	mov    eax,ecx
c000c15b:	89 da                	mov    edx,ebx
c000c15d:	66 c1 e8 08          	shr    ax,0x8
c000c161:	ee                   	out    dx,al
c000c162:	5b                   	pop    ebx
c000c163:	5e                   	pop    esi
c000c164:	c3                   	ret    

c000c165 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c165:	ba da 03 00 00       	mov    edx,0x3da
c000c16a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c16f:	75 18                	jne    c000c189 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c171:	ec                   	in     al,dx
c000c172:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c177:	b0 30                	mov    al,0x30
c000c179:	89 ca                	mov    edx,ecx
c000c17b:	ee                   	out    dx,al
c000c17c:	ba c1 03 00 00       	mov    edx,0x3c1
c000c181:	ec                   	in     al,dx
c000c182:	83 c8 08             	or     eax,0x8
c000c185:	89 ca                	mov    edx,ecx
c000c187:	ee                   	out    dx,al
c000c188:	c3                   	ret    
c000c189:	ec                   	in     al,dx
c000c18a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c18f:	b0 30                	mov    al,0x30
c000c191:	89 ca                	mov    edx,ecx
c000c193:	ee                   	out    dx,al
c000c194:	ba c1 03 00 00       	mov    edx,0x3c1
c000c199:	ec                   	in     al,dx
c000c19a:	83 e0 f7             	and    eax,0xfffffff7
c000c19d:	89 ca                	mov    edx,ecx
c000c19f:	ee                   	out    dx,al
c000c1a0:	c3                   	ret    

c000c1a1 <hwTextMode_scrollScreen(VgaText*)>:
c000c1a1:	55                   	push   ebp
c000c1a2:	bd 02 00 00 00       	mov    ebp,0x2
c000c1a7:	57                   	push   edi
c000c1a8:	56                   	push   esi
c000c1a9:	53                   	push   ebx
c000c1aa:	83 ec 1c             	sub    esp,0x1c
c000c1ad:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1b9:	31 c0                	xor    eax,eax
c000c1bb:	eb 0b                	jmp    c000c1c8 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1bd:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1c3:	74 58                	je     c000c21d <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1c5:	43                   	inc    ebx
c000c1c6:	89 f0                	mov    eax,esi
c000c1c8:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1ce:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1d4:	88 13                	mov    BYTE PTR [ebx],dl
c000c1d6:	8d 70 01             	lea    esi,[eax+0x1]
c000c1d9:	83 fd 18             	cmp    ebp,0x18
c000c1dc:	75 df                	jne    c000c1bd <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1de:	a8 01                	test   al,0x1
c000c1e0:	75 13                	jne    c000c1f5 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1e2:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1e5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1eb:	75 d8                	jne    c000c1c5 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1ed:	83 c4 1c             	add    esp,0x1c
c000c1f0:	5b                   	pop    ebx
c000c1f1:	5e                   	pop    esi
c000c1f2:	5f                   	pop    edi
c000c1f3:	5d                   	pop    ebp
c000c1f4:	c3                   	ret    
c000c1f5:	52                   	push   edx
c000c1f6:	31 c0                	xor    eax,eax
c000c1f8:	52                   	push   edx
c000c1f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c1fd:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c203:	50                   	push   eax
c000c204:	31 c0                	xor    eax,eax
c000c206:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c20a:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c210:	50                   	push   eax
c000c211:	e8 84 0b 00 00       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	88 07                	mov    BYTE PTR [edi],al
c000c21b:	eb c8                	jmp    c000c1e5 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c21d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c221:	45                   	inc    ebp
c000c222:	05 a0 00 00 00       	add    eax,0xa0
c000c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c22b:	eb 88                	jmp    c000c1b5 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c22d <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c22d:	56                   	push   esi
c000c22e:	31 c0                	xor    eax,eax
c000c230:	53                   	push   ebx
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c238:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c23c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c240:	50                   	push   eax
c000c241:	31 c0                	xor    eax,eax
c000c243:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c247:	50                   	push   eax
c000c248:	e8 4d 0b 00 00       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000c24d:	5a                   	pop    edx
c000c24e:	25 ff 00 00 00       	and    eax,0xff
c000c253:	59                   	pop    ecx
c000c254:	50                   	push   eax
c000c255:	89 f0                	mov    eax,esi
c000c257:	0f be f0             	movsx  esi,al
c000c25a:	56                   	push   esi
c000c25b:	e8 e0 0b 00 00       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000c260:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c264:	ba 19 00 00 00       	mov    edx,0x19
c000c269:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c26f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c272:	29 f2                	sub    edx,esi
c000c274:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c278:	c1 e1 04             	shl    ecx,0x4
c000c27b:	8d 14 92             	lea    edx,[edx+edx*4]
c000c27e:	01 d9                	add    ecx,ebx
c000c280:	c1 e2 04             	shl    edx,0x4
c000c283:	01 ca                	add    edx,ecx
c000c285:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c28d:	83 c4 14             	add    esp,0x14
c000c290:	5b                   	pop    ebx
c000c291:	5e                   	pop    esi
c000c292:	c3                   	ret    

c000c293 <setupTextMode()>:
c000c293:	c7 05 38 48 02 c0 65 c1 00 c0 	mov    DWORD PTR ds:0xc0024838,0xc000c165
c000c29d:	c7 05 24 48 02 c0 33 c0 00 c0 	mov    DWORD PTR ds:0xc0024824,0xc000c033
c000c2a7:	c7 05 20 48 02 c0 78 c0 00 c0 	mov    DWORD PTR ds:0xc0024820,0xc000c078
c000c2b1:	c7 05 2c 48 02 c0 a1 c1 00 c0 	mov    DWORD PTR ds:0xc002482c,0xc000c1a1
c000c2bb:	c7 05 34 48 02 c0 c2 c0 00 c0 	mov    DWORD PTR ds:0xc0024834,0xc000c0c2
c000c2c5:	c7 05 28 48 02 c0 16 c1 00 c0 	mov    DWORD PTR ds:0xc0024828,0xc000c116
c000c2cf:	c7 05 30 48 02 c0 17 c1 00 c0 	mov    DWORD PTR ds:0xc0024830,0xc000c117
c000c2d9:	c7 05 3c 48 02 c0 2d c2 00 c0 	mov    DWORD PTR ds:0xc002483c,0xc000c22d
c000c2e3:	c3                   	ret    

c000c2e4 <kernel_main>:
c000c2e4:	57                   	push   edi
c000c2e5:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2ea:	56                   	push   esi
c000c2eb:	31 f6                	xor    esi,esi
c000c2ed:	53                   	push   ebx
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	e8 fe 08 00 00       	call   c000cbf4 <installVgaTextImplementation()>
c000c2f6:	e8 98 ff ff ff       	call   c000c293 <setupTextMode()>
c000c2fb:	89 f0                	mov    eax,esi
c000c2fd:	89 fa                	mov    edx,edi
c000c2ff:	ee                   	out    dx,al
c000c300:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c305:	b0 80                	mov    al,0x80
c000c307:	89 da                	mov    edx,ebx
c000c309:	ee                   	out    dx,al
c000c30a:	b1 03                	mov    cl,0x3
c000c30c:	ba f8 03 00 00       	mov    edx,0x3f8
c000c311:	88 c8                	mov    al,cl
c000c313:	ee                   	out    dx,al
c000c314:	89 f0                	mov    eax,esi
c000c316:	89 fa                	mov    edx,edi
c000c318:	ee                   	out    dx,al
c000c319:	88 c8                	mov    al,cl
c000c31b:	89 da                	mov    edx,ebx
c000c31d:	ee                   	out    dx,al
c000c31e:	b0 c7                	mov    al,0xc7
c000c320:	ba fa 03 00 00       	mov    edx,0x3fa
c000c325:	ee                   	out    dx,al
c000c326:	b0 0b                	mov    al,0xb
c000c328:	ba fc 03 00 00       	mov    edx,0x3fc
c000c32d:	ee                   	out    dx,al
c000c32e:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c333:	83 ec 0c             	sub    esp,0xc
c000c336:	05 ff 0f 00 00       	add    eax,0xfff
c000c33b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c340:	50                   	push   eax
c000c341:	e8 6d 03 00 00       	call   c000c6b3 <Phys::physicalMemorySetup(unsigned int)>
c000c346:	e8 b6 1f 00 00       	call   c000e301 <Virt::virtualMemorySetup()>
c000c34b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c35a:	75 0e                	jne    c000c36a <kernel_main+0x86>
c000c35c:	89 d8                	mov    eax,ebx
c000c35e:	25 48 03 00 00       	and    eax,0x348
c000c363:	3d 00 03 00 00       	cmp    eax,0x300
c000c368:	74 10                	je     c000c37a <kernel_main+0x96>
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	68 a7 28 02 c0       	push   0xc00228a7
c000c372:	e8 c3 96 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000c377:	83 c4 10             	add    esp,0x10
c000c37a:	83 ec 0c             	sub    esp,0xc
c000c37d:	89 1d a0 47 02 c0    	mov    DWORD PTR ds:0xc00247a0,ebx
c000c383:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c387:	53                   	push   ebx
c000c388:	e8 11 21 00 00       	call   c000e49e <VAS::VAS()>
c000c38d:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000c393:	e8 88 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c398:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c39f:	e8 32 2d 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000c3a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3a7:	89 c6                	mov    esi,eax
c000c3a9:	e8 78 ea ff ff       	call   c000ae26 <Computer::Computer()>
c000c3ae:	6a 00                	push   0x0
c000c3b0:	6a 00                	push   0x0
c000c3b2:	89 35 88 47 02 c0    	mov    DWORD PTR ds:0xc0024788,esi
c000c3b8:	6a 00                	push   0x0
c000c3ba:	56                   	push   esi
c000c3bb:	e8 5a f2 ff ff       	call   c000b61a <Computer::open(int, int, void*)>
c000c3c0:	83 c4 14             	add    esp,0x14
c000c3c3:	53                   	push   ebx
c000c3c4:	e8 87 23 00 00       	call   c000e750 <VAS::~VAS()>
c000c3c9:	c7 04 24 00 13 02 c0 	mov    DWORD PTR [esp],0xc0021300
c000c3d0:	e8 65 96 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000c3d5:	83 c4 20             	add    esp,0x20
c000c3d8:	5b                   	pop    ebx
c000c3d9:	5e                   	pop    esi
c000c3da:	5f                   	pop    edi
c000c3db:	c3                   	ret    

c000c3dc <Phys::allocateDMA(unsigned long)>:
c000c3dc:	57                   	push   edi
c000c3dd:	31 d2                	xor    edx,edx
c000c3df:	56                   	push   esi
c000c3e0:	31 ff                	xor    edi,edi
c000c3e2:	53                   	push   ebx
c000c3e3:	31 c9                	xor    ecx,ecx
c000c3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e9:	31 f6                	xor    esi,esi
c000c3eb:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f0:	c1 e8 0c             	shr    eax,0xc
c000c3f3:	eb 17                	jmp    c000c40c <Phys::allocateDMA(unsigned long)+0x30>
c000c3f5:	85 c9                	test   ecx,ecx
c000c3f7:	75 04                	jne    c000c3fd <Phys::allocateDMA(unsigned long)+0x21>
c000c3f9:	89 d7                	mov    edi,edx
c000c3fb:	89 d6                	mov    esi,edx
c000c3fd:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c400:	39 d8                	cmp    eax,ebx
c000c402:	74 1f                	je     c000c423 <Phys::allocateDMA(unsigned long)+0x47>
c000c404:	42                   	inc    edx
c000c405:	89 d9                	mov    ecx,ebx
c000c407:	83 fa 2f             	cmp    edx,0x2f
c000c40a:	7f 11                	jg     c000c41d <Phys::allocateDMA(unsigned long)+0x41>
c000c40c:	80 ba e0 47 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb820],0x0
c000c413:	74 e0                	je     c000c3f5 <Phys::allocateDMA(unsigned long)+0x19>
c000c415:	31 c9                	xor    ecx,ecx
c000c417:	42                   	inc    edx
c000c418:	83 fa 2f             	cmp    edx,0x2f
c000c41b:	7e ef                	jle    c000c40c <Phys::allocateDMA(unsigned long)+0x30>
c000c41d:	5b                   	pop    ebx
c000c41e:	31 c0                	xor    eax,eax
c000c420:	5e                   	pop    esi
c000c421:	5f                   	pop    edi
c000c422:	c3                   	ret    
c000c423:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c427:	89 d3                	mov    ebx,edx
c000c429:	c1 fb 1f             	sar    ebx,0x1f
c000c42c:	83 e3 0f             	and    ebx,0xf
c000c42f:	01 d3                	add    ebx,edx
c000c431:	89 f2                	mov    edx,esi
c000c433:	c1 fb 04             	sar    ebx,0x4
c000c436:	c1 fa 04             	sar    edx,0x4
c000c439:	39 da                	cmp    edx,ebx
c000c43b:	75 30                	jne    c000c46d <Phys::allocateDMA(unsigned long)+0x91>
c000c43d:	85 c0                	test   eax,eax
c000c43f:	74 1b                	je     c000c45c <Phys::allocateDMA(unsigned long)+0x80>
c000c441:	bf e0 47 02 c0       	mov    edi,0xc00247e0
c000c446:	8d 96 e0 47 02 c0    	lea    edx,[esi-0x3ffdb820]
c000c44c:	83 f7 ff             	xor    edi,0xffffffff
c000c44f:	29 f7                	sub    edi,esi
c000c451:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c454:	42                   	inc    edx
c000c455:	8d 04 17             	lea    eax,[edi+edx*1]
c000c458:	39 c1                	cmp    ecx,eax
c000c45a:	7f f5                	jg     c000c451 <Phys::allocateDMA(unsigned long)+0x75>
c000c45c:	85 db                	test   ebx,ebx
c000c45e:	74 13                	je     c000c473 <Phys::allocateDMA(unsigned long)+0x97>
c000c460:	5b                   	pop    ebx
c000c461:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c467:	c1 e0 0c             	shl    eax,0xc
c000c46a:	5e                   	pop    esi
c000c46b:	5f                   	pop    edi
c000c46c:	c3                   	ret    
c000c46d:	89 fa                	mov    edx,edi
c000c46f:	31 c9                	xor    ecx,ecx
c000c471:	eb a4                	jmp    c000c417 <Phys::allocateDMA(unsigned long)+0x3b>
c000c473:	c1 e6 0c             	shl    esi,0xc
c000c476:	5b                   	pop    ebx
c000c477:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c47d:	5e                   	pop    esi
c000c47e:	5f                   	pop    edi
c000c47f:	c3                   	ret    

c000c480 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c480:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c488:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c48e:	c1 e9 0c             	shr    ecx,0xc
c000c491:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c496:	76 25                	jbe    c000c4bd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c498:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c49d:	c1 e8 0c             	shr    eax,0xc
c000c4a0:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a3:	85 c9                	test   ecx,ecx
c000c4a5:	74 15                	je     c000c4bc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4a7:	8d 82 e0 47 02 c0    	lea    eax,[edx-0x3ffdb820]
c000c4ad:	8d 94 11 e0 47 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb820]
c000c4b4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4b7:	40                   	inc    eax
c000c4b8:	39 d0                	cmp    eax,edx
c000c4ba:	75 f8                	jne    c000c4b4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4bc:	c3                   	ret    
c000c4bd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4c3:	c1 ea 0c             	shr    edx,0xc
c000c4c6:	eb db                	jmp    c000c4a3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4c8 <Phys::setPageState(unsigned long, bool)>:
c000c4c8:	56                   	push   esi
c000c4c9:	ba 01 00 00 00       	mov    edx,0x1
c000c4ce:	53                   	push   ebx
c000c4cf:	8b 35 a4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023ba4
c000c4d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4dd:	89 c8                	mov    eax,ecx
c000c4df:	83 e1 07             	and    ecx,0x7
c000c4e2:	c1 e8 03             	shr    eax,0x3
c000c4e5:	01 c6                	add    esi,eax
c000c4e7:	d3 e2                	shl    edx,cl
c000c4e9:	83 f2 ff             	xor    edx,0xffffffff
c000c4ec:	20 16                	and    BYTE PTR [esi],dl
c000c4ee:	8b 15 a4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023ba4
c000c4f4:	01 d0                	add    eax,edx
c000c4f6:	d3 e3                	shl    ebx,cl
c000c4f8:	8a 08                	mov    cl,BYTE PTR [eax]
c000c4fa:	09 d9                	or     ecx,ebx
c000c4fc:	88 08                	mov    BYTE PTR [eax],cl
c000c4fe:	5b                   	pop    ebx
c000c4ff:	5e                   	pop    esi
c000c500:	c3                   	ret    

c000c501 <Phys::getPageState(unsigned long)>:
c000c501:	53                   	push   ebx
c000c502:	8b 15 a4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023ba4
c000c508:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c50c:	31 db                	xor    ebx,ebx
c000c50e:	89 c8                	mov    eax,ecx
c000c510:	83 e1 07             	and    ecx,0x7
c000c513:	c1 e8 03             	shr    eax,0x3
c000c516:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c519:	89 d8                	mov    eax,ebx
c000c51b:	5b                   	pop    ebx
c000c51c:	d3 f8                	sar    eax,cl
c000c51e:	83 e0 01             	and    eax,0x1
c000c521:	c3                   	ret    

c000c522 <Phys::freePage(unsigned long)>:
c000c522:	53                   	push   ebx
c000c523:	83 ec 08             	sub    esp,0x8
c000c526:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c52a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c530:	76 5a                	jbe    c000c58c <Phys::freePage(unsigned long)+0x6a>
c000c532:	c1 eb 0c             	shr    ebx,0xc
c000c535:	53                   	push   ebx
c000c536:	e8 c6 ff ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c53b:	5a                   	pop    edx
c000c53c:	84 c0                	test   al,al
c000c53e:	74 5e                	je     c000c59e <Phys::freePage(unsigned long)+0x7c>
c000c540:	a1 cc 47 02 c0       	mov    eax,ds:0xc00247cc
c000c545:	48                   	dec    eax
c000c546:	a3 cc 47 02 c0       	mov    ds:0xc00247cc,eax
c000c54b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c54e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c551:	c1 e0 02             	shl    eax,0x2
c000c554:	89 c2                	mov    edx,eax
c000c556:	c1 fa 1f             	sar    edx,0x1f
c000c559:	f7 3d d0 47 02 c0    	idiv   DWORD PTR ds:0xc00247d0
c000c55f:	39 05 c8 47 02 c0    	cmp    DWORD PTR ds:0xc00247c8,eax
c000c565:	75 12                	jne    c000c579 <Phys::freePage(unsigned long)+0x57>
c000c567:	51                   	push   ecx
c000c568:	51                   	push   ecx
c000c569:	6a 00                	push   0x0
c000c56b:	53                   	push   ebx
c000c56c:	e8 57 ff ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	83 c4 08             	add    esp,0x8
c000c577:	5b                   	pop    ebx
c000c578:	c3                   	ret    
c000c579:	83 ec 0c             	sub    esp,0xc
c000c57c:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c000c581:	50                   	push   eax
c000c582:	e8 01 0a 00 00       	call   c000cf88 <VgaText::updateRAMUsageDisplay(int)>
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	eb db                	jmp    c000c567 <Phys::freePage(unsigned long)+0x45>
c000c58c:	68 00 10 00 00       	push   0x1000
c000c591:	53                   	push   ebx
c000c592:	e8 e9 fe ff ff       	call   c000c480 <Phys::freeDMA(unsigned long, unsigned long)>
c000c597:	59                   	pop    ecx
c000c598:	5b                   	pop    ebx
c000c599:	83 c4 08             	add    esp,0x8
c000c59c:	5b                   	pop    ebx
c000c59d:	c3                   	ret    
c000c59e:	c7 44 24 10 1b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002131b
c000c5a6:	83 c4 08             	add    esp,0x8
c000c5a9:	5b                   	pop    ebx
c000c5aa:	e9 8b 94 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>

c000c5af <Phys::allocatePage()>:
c000c5af:	56                   	push   esi
c000c5b0:	53                   	push   ebx
c000c5b1:	51                   	push   ecx
c000c5b2:	8b 35 c0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247c0
c000c5b8:	89 f3                	mov    ebx,esi
c000c5ba:	eb 0a                	jmp    c000c5c6 <Phys::allocatePage()+0x17>
c000c5bc:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c5c2:	39 de                	cmp    esi,ebx
c000c5c4:	74 24                	je     c000c5ea <Phys::allocatePage()+0x3b>
c000c5c6:	53                   	push   ebx
c000c5c7:	e8 35 ff ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c5cc:	5a                   	pop    edx
c000c5cd:	84 c0                	test   al,al
c000c5cf:	74 5a                	je     c000c62b <Phys::allocatePage()+0x7c>
c000c5d1:	43                   	inc    ebx
c000c5d2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5d8:	75 e2                	jne    c000c5bc <Phys::allocatePage()+0xd>
c000c5da:	31 db                	xor    ebx,ebx
c000c5dc:	c7 05 c0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247c0,0x0
c000c5e6:	39 de                	cmp    esi,ebx
c000c5e8:	75 dc                	jne    c000c5c6 <Phys::allocatePage()+0x17>
c000c5ea:	83 ec 0c             	sub    esp,0xc
c000c5ed:	68 31 13 02 c0       	push   0xc0021331
c000c5f2:	e8 14 2c 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000c5f7:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c5fe:	e8 d9 fd ff ff       	call   c000c3dc <Phys::allocateDMA(unsigned long)>
c000c603:	83 c4 10             	add    esp,0x10
c000c606:	85 c0                	test   eax,eax
c000c608:	75 5a                	jne    c000c664 <Phys::allocatePage()+0xb5>
c000c60a:	83 ec 0c             	sub    esp,0xc
c000c60d:	68 42 13 02 c0       	push   0xc0021342
c000c612:	e8 23 94 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	8b 1d c0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247c0
c000c620:	53                   	push   ebx
c000c621:	e8 db fe ff ff       	call   c000c501 <Phys::getPageState(unsigned long)>
c000c626:	5a                   	pop    edx
c000c627:	84 c0                	test   al,al
c000c629:	75 a6                	jne    c000c5d1 <Phys::allocatePage()+0x22>
c000c62b:	6a 01                	push   0x1
c000c62d:	53                   	push   ebx
c000c62e:	e8 95 fe ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c633:	a1 cc 47 02 c0       	mov    eax,ds:0xc00247cc
c000c638:	59                   	pop    ecx
c000c639:	40                   	inc    eax
c000c63a:	5b                   	pop    ebx
c000c63b:	a3 cc 47 02 c0       	mov    ds:0xc00247cc,eax
c000c640:	8d 04 80             	lea    eax,[eax+eax*4]
c000c643:	8d 04 80             	lea    eax,[eax+eax*4]
c000c646:	c1 e0 02             	shl    eax,0x2
c000c649:	89 c2                	mov    edx,eax
c000c64b:	c1 fa 1f             	sar    edx,0x1f
c000c64e:	f7 3d d0 47 02 c0    	idiv   DWORD PTR ds:0xc00247d0
c000c654:	39 05 c8 47 02 c0    	cmp    DWORD PTR ds:0xc00247c8,eax
c000c65a:	75 0c                	jne    c000c668 <Phys::allocatePage()+0xb9>
c000c65c:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c000c661:	c1 e0 0c             	shl    eax,0xc
c000c664:	5a                   	pop    edx
c000c665:	5b                   	pop    ebx
c000c666:	5e                   	pop    esi
c000c667:	c3                   	ret    
c000c668:	83 ec 0c             	sub    esp,0xc
c000c66b:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c000c670:	50                   	push   eax
c000c671:	e8 12 09 00 00       	call   c000cf88 <VgaText::updateRAMUsageDisplay(int)>
c000c676:	83 c4 10             	add    esp,0x10
c000c679:	eb e1                	jmp    c000c65c <Phys::allocatePage()+0xad>

c000c67b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c67b:	56                   	push   esi
c000c67c:	53                   	push   ebx
c000c67d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c681:	39 1d c4 47 02 c0    	cmp    DWORD PTR ds:0xc00247c4,ebx
c000c687:	73 06                	jae    c000c68f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c689:	89 1d c4 47 02 c0    	mov    DWORD PTR ds:0xc00247c4,ebx
c000c68f:	c1 eb 0c             	shr    ebx,0xc
c000c692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c696:	c1 e8 0c             	shr    eax,0xc
c000c699:	39 d8                	cmp    eax,ebx
c000c69b:	73 13                	jae    c000c6b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c69d:	6a 00                	push   0x0
c000c69f:	8d 70 01             	lea    esi,[eax+0x1]
c000c6a2:	50                   	push   eax
c000c6a3:	e8 20 fe ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c6a8:	5a                   	pop    edx
c000c6a9:	89 f0                	mov    eax,esi
c000c6ab:	59                   	pop    ecx
c000c6ac:	39 f3                	cmp    ebx,esi
c000c6ae:	75 ed                	jne    c000c69d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6b0:	5b                   	pop    ebx
c000c6b1:	5e                   	pop    esi
c000c6b2:	c3                   	ret    

c000c6b3 <Phys::physicalMemorySetup(unsigned int)>:
c000c6b3:	55                   	push   ebp
c000c6b4:	57                   	push   edi
c000c6b5:	56                   	push   esi
c000c6b6:	53                   	push   ebx
c000c6b7:	31 db                	xor    ebx,ebx
c000c6b9:	83 ec 40             	sub    esp,0x40
c000c6bc:	6a 30                	push   0x30
c000c6be:	6a 00                	push   0x0
c000c6c0:	68 e0 47 02 c0       	push   0xc00247e0
c000c6c5:	e8 f0 3f ff ff       	call   c00006ba <memset>
c000c6ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6d3:	05 00 10 00 00       	add    eax,0x1000
c000c6d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6dc:	83 c4 10             	add    esp,0x10
c000c6df:	56                   	push   esi
c000c6e0:	56                   	push   esi
c000c6e1:	6a 01                	push   0x1
c000c6e3:	53                   	push   ebx
c000c6e4:	43                   	inc    ebx
c000c6e5:	e8 de fd ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c6ea:	83 c4 10             	add    esp,0x10
c000c6ed:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6f3:	75 ea                	jne    c000c6df <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6f5:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c6fb:	66 85 c0             	test   ax,ax
c000c6fe:	0f 84 3b 01 00 00    	je     c000c83f <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c704:	89 c7                	mov    edi,eax
c000c706:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c70e:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c714:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c719:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c71d:	eb 6d                	jmp    c000c78c <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c71f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c723:	89 c1                	mov    ecx,eax
c000c725:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c729:	0f 83 bc 00 00 00    	jae    c000c7eb <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c72f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c733:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c738:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c73c:	39 f2                	cmp    edx,esi
c000c73e:	19 f8                	sbb    eax,edi
c000c740:	73 07                	jae    c000c749 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c742:	be 00 00 0a 00       	mov    esi,0xa0000
c000c747:	31 ff                	xor    edi,edi
c000c749:	89 f2                	mov    edx,esi
c000c74b:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c750:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c756:	89 f9                	mov    ecx,edi
c000c758:	83 d1 ff             	adc    ecx,0xffffffff
c000c75b:	39 d0                	cmp    eax,edx
c000c75d:	b8 00 00 00 00       	mov    eax,0x0
c000c762:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c766:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c76a:	19 c8                	sbb    eax,ecx
c000c76c:	0f 82 0d 01 00 00    	jb     c000c87f <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c772:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c776:	83 c3 18             	add    ebx,0x18
c000c779:	41                   	inc    ecx
c000c77a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c77e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c782:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c786:	0f 84 c3 00 00 00    	je     c000c84f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c78c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c78e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c791:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c794:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c798:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c79b:	01 f0                	add    eax,esi
c000c79d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7a8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7ac:	11 fa                	adc    edx,edi
c000c7ae:	55                   	push   ebp
c000c7af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7bb:	51                   	push   ecx
c000c7bc:	56                   	push   esi
c000c7bd:	68 7c 13 02 c0       	push   0xc002137c
c000c7c2:	e8 44 2a 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000c7c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	09 f8                	or     eax,edi
c000c7d0:	75 7d                	jne    c000c84f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7d2:	83 fd 01             	cmp    ebp,0x1
c000c7d5:	75 11                	jne    c000c7e8 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7d7:	ba 00 00 08 00       	mov    edx,0x80000
c000c7dc:	89 c1                	mov    ecx,eax
c000c7de:	39 f2                	cmp    edx,esi
c000c7e0:	19 f9                	sbb    ecx,edi
c000c7e2:	0f 83 37 ff ff ff    	jae    c000c71f <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7e8:	4d                   	dec    ebp
c000c7e9:	75 87                	jne    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7ef:	31 d2                	xor    edx,edx
c000c7f1:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7f5:	89 c8                	mov    eax,ecx
c000c7f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7fb:	19 d1                	sbb    ecx,edx
c000c7fd:	0f 82 6f ff ff ff    	jb     c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c803:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c808:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c80c:	b9 00 00 00 00       	mov    ecx,0x0
c000c811:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c815:	0f 83 57 ff ff ff    	jae    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c81b:	39 c6                	cmp    esi,eax
c000c81d:	19 d7                	sbb    edi,edx
c000c81f:	73 6a                	jae    c000c88b <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c821:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c825:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c829:	29 c7                	sub    edi,eax
c000c82b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c82f:	19 d5                	sbb    ebp,edx
c000c831:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c835:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83d:	eb 4c                	jmp    c000c88b <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c83f:	83 ec 0c             	sub    esp,0xc
c000c842:	68 50 13 02 c0       	push   0xc0021350
c000c847:	e8 ee 91 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	bb 40 01 00 00       	mov    ebx,0x140
c000c854:	50                   	push   eax
c000c855:	50                   	push   eax
c000c856:	6a 00                	push   0x0
c000c858:	53                   	push   ebx
c000c859:	e8 6a fc ff ff       	call   c000c4c8 <Phys::setPageState(unsigned long, bool)>
c000c85e:	8b 15 d0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247d0
c000c864:	43                   	inc    ebx
c000c865:	42                   	inc    edx
c000c866:	83 c4 10             	add    esp,0x10
c000c869:	89 15 d0 47 02 c0    	mov    DWORD PTR ds:0xc00247d0,edx
c000c86f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c875:	75 dd                	jne    c000c854 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c877:	83 c4 3c             	add    esp,0x3c
c000c87a:	5b                   	pop    ebx
c000c87b:	5e                   	pop    esi
c000c87c:	5f                   	pop    edi
c000c87d:	5d                   	pop    ebp
c000c87e:	c3                   	ret    
c000c87f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c883:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c88b:	56                   	push   esi
c000c88c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c890:	56                   	push   esi
c000c891:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c895:	57                   	push   edi
c000c896:	68 a0 13 02 c0       	push   0xc00213a0
c000c89b:	e8 6b 29 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000c8a0:	5d                   	pop    ebp
c000c8a1:	58                   	pop    eax
c000c8a2:	56                   	push   esi
c000c8a3:	57                   	push   edi
c000c8a4:	e8 d2 fd ff ff       	call   c000c67b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8b5:	8b 15 d0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247d0
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	01 d0                	add    eax,edx
c000c8c0:	a3 d0 47 02 c0       	mov    ds:0xc00247d0,eax
c000c8c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8cc:	52                   	push   edx
c000c8cd:	50                   	push   eax
c000c8ce:	68 5e 13 02 c0       	push   0xc002135e
c000c8d3:	e8 33 29 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000c8d8:	83 c4 10             	add    esp,0x10
c000c8db:	e9 92 fe ff ff       	jmp    c000c772 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8e0 <Pipe::isAtty()>:
c000c8e0:	31 c0                	xor    eax,eax
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <Pipe::~Pipe()>:
c000c8e4:	83 ec 0c             	sub    esp,0xc
c000c8e7:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f0:	89 10                	mov    DWORD PTR [eax],edx
c000c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	50                   	push   eax
c000c8fa:	e8 5d 16 00 00       	call   c000df5c <UnixFile::~UnixFile()>
c000c8ff:	83 c4 10             	add    esp,0x10
c000c902:	90                   	nop
c000c903:	83 c4 0c             	add    esp,0xc
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Pipe::~Pipe()>:
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	83 ec 0c             	sub    esp,0xc
c000c90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c912:	e8 cd ff ff ff       	call   c000c8e4 <Pipe::~Pipe()>
c000c917:	83 c4 10             	add    esp,0x10
c000c91a:	83 ec 08             	sub    esp,0x8
c000c91d:	6a 20                	push   0x20
c000c91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c923:	e8 bd 27 00 00       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	83 c4 0c             	add    esp,0xc
c000c92e:	c3                   	ret    
c000c92f:	90                   	nop

c000c930 <Pipe::read(unsigned long long, void*, int*)>:
c000c930:	55                   	push   ebp
c000c931:	57                   	push   edi
c000c932:	56                   	push   esi
c000c933:	53                   	push   ebx
c000c934:	83 ec 1c             	sub    esp,0x1c
c000c937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c946:	89 c8                	mov    eax,ecx
c000c948:	99                   	cdq    
c000c949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c94d:	74 19                	je     c000c968 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c94f:	39 f9                	cmp    ecx,edi
c000c951:	89 d1                	mov    ecx,edx
c000c953:	19 f1                	sbb    ecx,esi
c000c955:	73 11                	jae    c000c968 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c957:	e8 e7 c0 00 00       	call   c0018a43 <lockScheduler()>
c000c95c:	e8 2b c4 00 00       	call   c0018d8c <schedule()>
c000c961:	e8 df c0 00 00       	call   c0018a45 <unlockScheduler()>
c000c966:	eb db                	jmp    c000c943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c968:	39 f8                	cmp    eax,edi
c000c96a:	89 d1                	mov    ecx,edx
c000c96c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c970:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c974:	19 f1                	sbb    ecx,esi
c000c976:	73 08                	jae    c000c980 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c97c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c980:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c983:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c986:	29 c6                	sub    esi,eax
c000c988:	89 f1                	mov    ecx,esi
c000c98a:	c1 f9 1f             	sar    ecx,0x1f
c000c98d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c991:	89 ca                	mov    edx,ecx
c000c993:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c997:	19 d1                	sbb    ecx,edx
c000c999:	73 04                	jae    c000c99f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c99b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c99f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9a3:	89 fd                	mov    ebp,edi
c000c9a5:	29 f5                	sub    ebp,esi
c000c9a7:	85 f6                	test   esi,esi
c000c9a9:	74 12                	je     c000c9bd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9ab:	52                   	push   edx
c000c9ac:	56                   	push   esi
c000c9ad:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9b0:	50                   	push   eax
c000c9b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9b5:	e8 ca 3c ff ff       	call   c0000684 <memcpy>
c000c9ba:	83 c4 10             	add    esp,0x10
c000c9bd:	85 ed                	test   ebp,ebp
c000c9bf:	74 12                	je     c000c9d3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9c1:	50                   	push   eax
c000c9c2:	55                   	push   ebp
c000c9c3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9c6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9ca:	56                   	push   esi
c000c9cb:	e8 b4 3c ff ff       	call   c0000684 <memcpy>
c000c9d0:	83 c4 10             	add    esp,0x10
c000c9d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9d6:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9d9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9dc:	99                   	cdq    
c000c9dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e1:	89 f7                	mov    edi,esi
c000c9e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9e7:	c1 ff 1f             	sar    edi,0x1f
c000c9ea:	57                   	push   edi
c000c9eb:	56                   	push   esi
c000c9ec:	52                   	push   edx
c000c9ed:	50                   	push   eax
c000c9ee:	e8 09 2c 01 00       	call   c001f5fc <__umoddi3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c9fe:	75 10                	jne    c000ca10 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca00:	83 ec 0c             	sub    esp,0xc
c000ca03:	68 c9 13 02 c0       	push   0xc00213c9
c000ca08:	e8 2d 90 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000ca0d:	83 c4 10             	add    esp,0x10
c000ca10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca18:	89 10                	mov    DWORD PTR [eax],edx
c000ca1a:	83 c4 1c             	add    esp,0x1c
c000ca1d:	31 c0                	xor    eax,eax
c000ca1f:	5b                   	pop    ebx
c000ca20:	5e                   	pop    esi
c000ca21:	5f                   	pop    edi
c000ca22:	5d                   	pop    ebp
c000ca23:	c3                   	ret    

c000ca24 <Pipe::write(unsigned long long, void*, int*)>:
c000ca24:	55                   	push   ebp
c000ca25:	57                   	push   edi
c000ca26:	56                   	push   esi
c000ca27:	53                   	push   ebx
c000ca28:	83 ec 1c             	sub    esp,0x1c
c000ca2b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca3a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca3d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca40:	89 de                	mov    esi,ebx
c000ca42:	89 df                	mov    edi,ebx
c000ca44:	c1 ff 1f             	sar    edi,0x1f
c000ca47:	01 c6                	add    esi,eax
c000ca49:	89 c8                	mov    eax,ecx
c000ca4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca4f:	11 d7                	adc    edi,edx
c000ca51:	99                   	cdq    
c000ca52:	89 d0                	mov    eax,edx
c000ca54:	39 f1                	cmp    ecx,esi
c000ca56:	19 f8                	sbb    eax,edi
c000ca58:	b8 01 00 00 00       	mov    eax,0x1
c000ca5d:	0f 82 80 00 00 00    	jb     c000cae3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca66:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca69:	01 d8                	add    eax,ebx
c000ca6b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca6f:	99                   	cdq    
c000ca70:	f7 f9                	idiv   ecx
c000ca72:	29 d1                	sub    ecx,edx
c000ca74:	89 d7                	mov    edi,edx
c000ca76:	89 c8                	mov    eax,ecx
c000ca78:	99                   	cdq    
c000ca79:	39 ce                	cmp    esi,ecx
c000ca7b:	19 d3                	sbb    ebx,edx
c000ca7d:	bb 00 00 00 00       	mov    ebx,0x0
c000ca82:	72 04                	jb     c000ca88 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca84:	89 f3                	mov    ebx,esi
c000ca86:	29 cb                	sub    ebx,ecx
c000ca88:	89 f1                	mov    ecx,esi
c000ca8a:	29 d9                	sub    ecx,ebx
c000ca8c:	74 1a                	je     c000caa8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca8e:	52                   	push   edx
c000ca8f:	51                   	push   ecx
c000ca90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca98:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ca9b:	57                   	push   edi
c000ca9c:	e8 e3 3b ff ff       	call   c0000684 <memcpy>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caa8:	85 db                	test   ebx,ebx
c000caaa:	74 12                	je     c000cabe <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caac:	50                   	push   eax
c000caad:	53                   	push   ebx
c000caae:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cab2:	51                   	push   ecx
c000cab3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cab6:	e8 c9 3b ff ff       	call   c0000684 <memcpy>
c000cabb:	83 c4 10             	add    esp,0x10
c000cabe:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cac1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cac6:	75 10                	jne    c000cad8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cac8:	83 ec 0c             	sub    esp,0xc
c000cacb:	68 e5 13 02 c0       	push   0xc00213e5
c000cad0:	e8 65 8f 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cadc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cadf:	89 38                	mov    DWORD PTR [eax],edi
c000cae1:	31 c0                	xor    eax,eax
c000cae3:	83 c4 1c             	add    esp,0x1c
c000cae6:	5b                   	pop    ebx
c000cae7:	5e                   	pop    esi
c000cae8:	5f                   	pop    edi
c000cae9:	5d                   	pop    ebp
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <Pipe::Pipe(int)>:
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf3:	83 ec 08             	sub    esp,0x8
c000caf6:	6a 00                	push   0x0
c000caf8:	50                   	push   eax
c000caf9:	e8 bc 12 00 00       	call   c000ddba <UnixFile::UnixFile(int)>
c000cafe:	83 c4 10             	add    esp,0x10
c000cb01:	ba 0c 14 02 c0       	mov    edx,0xc002140c
c000cb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0a:	89 10                	mov    DWORD PTR [eax],edx
c000cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb31:	83 ec 0c             	sub    esp,0xc
c000cb34:	50                   	push   eax
c000cb35:	e8 9f f4 ff ff       	call   c000bfd9 <malloc>
c000cb3a:	83 c4 10             	add    esp,0x10
c000cb3d:	89 c2                	mov    edx,eax
c000cb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb4e:	90                   	nop
c000cb4f:	83 c4 0c             	add    esp,0xc
c000cb52:	c3                   	ret    
c000cb53:	90                   	nop

c000cb54 <VgaText::isAtty()>:
c000cb54:	b0 01                	mov    al,0x1
c000cb56:	c3                   	ret    
c000cb57:	90                   	nop

c000cb58 <VgaText::~VgaText()>:
c000cb58:	83 ec 0c             	sub    esp,0xc
c000cb5b:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	89 10                	mov    DWORD PTR [eax],edx
c000cb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	50                   	push   eax
c000cb6e:	e8 e9 13 00 00       	call   c000df5c <UnixFile::~UnixFile()>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	90                   	nop
c000cb77:	83 c4 0c             	add    esp,0xc
c000cb7a:	c3                   	ret    
c000cb7b:	90                   	nop

c000cb7c <VgaText::~VgaText()>:
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	83 ec 0c             	sub    esp,0xc
c000cb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb86:	e8 cd ff ff ff       	call   c000cb58 <VgaText::~VgaText()>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	83 ec 08             	sub    esp,0x8
c000cb91:	68 60 12 00 00       	push   0x1260
c000cb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb9a:	e8 46 25 00 00       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000cb9f:	83 c4 10             	add    esp,0x10
c000cba2:	83 c4 0c             	add    esp,0xc
c000cba5:	c3                   	ret    

c000cba6 <VgaText::read(unsigned long long, void*, int*)>:
c000cba6:	83 ec 10             	sub    esp,0x10
c000cba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb5:	e8 69 58 00 00       	call   c0012423 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbbe:	89 02                	mov    DWORD PTR [edx],eax
c000cbc0:	31 c0                	xor    eax,eax
c000cbc2:	83 c4 1c             	add    esp,0x1c
c000cbc5:	c3                   	ret    

c000cbc6 <setTerminalScrollLock(bool)>:
c000cbc6:	c3                   	ret    

c000cbc7 <addToTerminalCycle(VgaText*)>:
c000cbc7:	8b 15 40 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024840
c000cbcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd1:	85 d2                	test   edx,edx
c000cbd3:	75 0c                	jne    c000cbe1 <addToTerminalCycle(VgaText*)+0x1a>
c000cbd5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbdb:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c000cbe0:	c3                   	ret    
c000cbe1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbe7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbed:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbf3:	c3                   	ret    

c000cbf4 <installVgaTextImplementation()>:
c000cbf4:	83 ec 10             	sub    esp,0x10
c000cbf7:	6a 20                	push   0x20
c000cbf9:	6a 00                	push   0x0
c000cbfb:	68 20 48 02 c0       	push   0xc0024820
c000cc00:	e8 b5 3a ff ff       	call   c00006ba <memset>
c000cc05:	83 c4 1c             	add    esp,0x1c
c000cc08:	c3                   	ret    

c000cc09 <scrollTerminalScrollLock(int)>:
c000cc09:	c3                   	ret    

c000cc0a <VgaText::load()>:
c000cc0a:	53                   	push   ebx
c000cc0b:	31 c0                	xor    eax,eax
c000cc0d:	83 ec 58             	sub    esp,0x58
c000cc10:	89 e2                	mov    edx,esp
c000cc12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc16:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc1a:	40                   	inc    eax
c000cc1b:	83 f8 50             	cmp    eax,0x50
c000cc1e:	75 f6                	jne    c000cc16 <VgaText::load()+0xc>
c000cc20:	31 c0                	xor    eax,eax
c000cc22:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc29:	84 c9                	test   cl,cl
c000cc2b:	74 06                	je     c000cc33 <VgaText::load()+0x29>
c000cc2d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc30:	40                   	inc    eax
c000cc31:	eb ef                	jmp    c000cc22 <VgaText::load()+0x18>
c000cc33:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc39:	85 c0                	test   eax,eax
c000cc3b:	74 09                	je     c000cc46 <VgaText::load()+0x3c>
c000cc3d:	51                   	push   ecx
c000cc3e:	51                   	push   ecx
c000cc3f:	52                   	push   edx
c000cc40:	53                   	push   ebx
c000cc41:	ff d0                	call   eax
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc4c:	85 c0                	test   eax,eax
c000cc4e:	74 09                	je     c000cc59 <VgaText::load()+0x4f>
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	53                   	push   ebx
c000cc54:	ff d0                	call   eax
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	83 c4 58             	add    esp,0x58
c000cc5c:	5b                   	pop    ebx
c000cc5d:	c3                   	ret    

c000cc5e <VgaText::updateCursor()>:
c000cc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc62:	39 05 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,eax
c000cc68:	75 0c                	jne    c000cc76 <VgaText::updateCursor()+0x18>
c000cc6a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc70:	85 c0                	test   eax,eax
c000cc72:	74 02                	je     c000cc76 <VgaText::updateCursor()+0x18>
c000cc74:	ff e0                	jmp    eax
c000cc76:	c3                   	ret    
c000cc77:	90                   	nop

c000cc78 <VgaText::showCursor(bool)>:
c000cc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc80:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc86:	c3                   	ret    
c000cc87:	90                   	nop

c000cc88 <VgaText::disableBlink(bool)>:
c000cc88:	56                   	push   esi
c000cc89:	53                   	push   ebx
c000cc8a:	51                   	push   ecx
c000cc8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc93:	39 1d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebx
c000cc99:	75 18                	jne    c000ccb3 <VgaText::disableBlink(bool)+0x2b>
c000cc9b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cca1:	85 c0                	test   eax,eax
c000cca3:	74 0e                	je     c000ccb3 <VgaText::disableBlink(bool)+0x2b>
c000cca5:	89 f1                	mov    ecx,esi
c000cca7:	52                   	push   edx
c000cca8:	52                   	push   edx
c000cca9:	0f b6 d1             	movzx  edx,cl
c000ccac:	52                   	push   edx
c000ccad:	53                   	push   ebx
c000ccae:	ff d0                	call   eax
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	89 f0                	mov    eax,esi
c000ccb5:	83 f0 01             	xor    eax,0x1
c000ccb8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccbe:	58                   	pop    eax
c000ccbf:	5b                   	pop    ebx
c000ccc0:	5e                   	pop    esi
c000ccc1:	c3                   	ret    

c000ccc2 <VgaText::doANSI_SGR(int)>:
c000ccc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccca:	85 d2                	test   edx,edx
c000cccc:	75 14                	jne    c000cce2 <VgaText::doANSI_SGR(int)+0x20>
c000ccce:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccd4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccda:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cce0:	eb 65                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000cce2:	83 fa 07             	cmp    edx,0x7
c000cce5:	75 14                	jne    c000ccfb <VgaText::doANSI_SGR(int)+0x39>
c000cce7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cced:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccf3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccf9:	eb 4c                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000ccfb:	83 fa 1b             	cmp    edx,0x1b
c000ccfe:	74 ce                	je     c000ccce <VgaText::doANSI_SGR(int)+0xc>
c000cd00:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd03:	83 f9 07             	cmp    ecx,0x7
c000cd06:	77 09                	ja     c000cd11 <VgaText::doANSI_SGR(int)+0x4f>
c000cd08:	8b 14 8d e0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc420]
c000cd0f:	eb 20                	jmp    c000cd31 <VgaText::doANSI_SGR(int)+0x6f>
c000cd11:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd14:	83 f9 07             	cmp    ecx,0x7
c000cd17:	77 09                	ja     c000cd22 <VgaText::doANSI_SGR(int)+0x60>
c000cd19:	8b 14 8d e0 3b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc420]
c000cd20:	eb 25                	jmp    c000cd47 <VgaText::doANSI_SGR(int)+0x85>
c000cd22:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd25:	83 f9 07             	cmp    ecx,0x7
c000cd28:	77 0e                	ja     c000cd38 <VgaText::doANSI_SGR(int)+0x76>
c000cd2a:	8b 14 95 98 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc568]
c000cd31:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd37:	c3                   	ret    
c000cd38:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd3b:	83 f9 07             	cmp    ecx,0x7
c000cd3e:	77 0d                	ja     c000cd4d <VgaText::doANSI_SGR(int)+0x8b>
c000cd40:	8b 14 95 70 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc590]
c000cd47:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd4d:	c3                   	ret    

c000cd4e <VgaText::setDefaultBgColour(VgaColour)>:
c000cd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd56:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd5c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd62:	c3                   	ret    
c000cd63:	90                   	nop

c000cd64 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd72:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd78:	c3                   	ret    
c000cd79:	90                   	nop

c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd7a:	53                   	push   ebx
c000cd7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd7f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd87:	51                   	push   ecx
c000cd88:	e8 c1 ff ff ff       	call   c000cd4e <VgaText::setDefaultBgColour(VgaColour)>
c000cd8d:	58                   	pop    eax
c000cd8e:	5a                   	pop    edx
c000cd8f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd97:	5b                   	pop    ebx
c000cd98:	eb ca                	jmp    c000cd64 <VgaText::setDefaultFgColour(VgaColour)>

c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000cd9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cd9f:	c1 e2 04             	shl    edx,0x4
c000cda2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cda6:	83 e0 0f             	and    eax,0xf
c000cda9:	09 d0                	or     eax,edx
c000cdab:	c3                   	ret    

c000cdac <VgaText::scrollScreen()>:
c000cdac:	57                   	push   edi
c000cdad:	56                   	push   esi
c000cdae:	be 01 00 00 00       	mov    esi,0x1
c000cdb3:	53                   	push   ebx
c000cdb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdbe:	31 ff                	xor    edi,edi
c000cdc0:	01 d9                	add    ecx,ebx
c000cdc2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdc5:	83 fe 17             	cmp    esi,0x17
c000cdc8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdce:	75 28                	jne    c000cdf8 <VgaText::scrollScreen()+0x4c>
c000cdd0:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdd6:	74 1c                	je     c000cdf4 <VgaText::scrollScreen()+0x48>
c000cdd8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cddf:	50                   	push   eax
c000cde0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cde7:	50                   	push   eax
c000cde8:	e8 ad ff ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cded:	5a                   	pop    edx
c000cdee:	5a                   	pop    edx
c000cdef:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdf2:	eb 04                	jmp    c000cdf8 <VgaText::scrollScreen()+0x4c>
c000cdf4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdf8:	47                   	inc    edi
c000cdf9:	41                   	inc    ecx
c000cdfa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce00:	75 c0                	jne    c000cdc2 <VgaText::scrollScreen()+0x16>
c000ce02:	46                   	inc    esi
c000ce03:	83 fe 18             	cmp    esi,0x18
c000ce06:	75 b0                	jne    c000cdb8 <VgaText::scrollScreen()+0xc>
c000ce08:	39 1d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebx
c000ce0e:	75 24                	jne    c000ce34 <VgaText::scrollScreen()+0x88>
c000ce10:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce17:	74 08                	je     c000ce21 <VgaText::scrollScreen()+0x75>
c000ce19:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce1f:	eb 13                	jmp    c000ce34 <VgaText::scrollScreen()+0x88>
c000ce21:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce27:	85 c0                	test   eax,eax
c000ce29:	74 09                	je     c000ce34 <VgaText::scrollScreen()+0x88>
c000ce2b:	83 ec 0c             	sub    esp,0xc
c000ce2e:	53                   	push   ebx
c000ce2f:	ff d0                	call   eax
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce38:	5b                   	pop    ebx
c000ce39:	5e                   	pop    esi
c000ce3a:	5f                   	pop    edi
c000ce3b:	e9 1e fe ff ff       	jmp    c000cc5e <VgaText::updateCursor()>

c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce45:	c1 e0 08             	shl    eax,0x8
c000ce48:	89 c2                	mov    edx,eax
c000ce4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce4f:	09 d0                	or     eax,edx
c000ce51:	c3                   	ret    

c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce52:	53                   	push   ebx
c000ce53:	83 ec 08             	sub    esp,0x8
c000ce56:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce5f:	50                   	push   eax
c000ce60:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce65:	50                   	push   eax
c000ce66:	e8 2f ff ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ce6b:	5a                   	pop    edx
c000ce6c:	5b                   	pop    ebx
c000ce6d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce72:	0f b6 c0             	movzx  eax,al
c000ce75:	50                   	push   eax
c000ce76:	53                   	push   ebx
c000ce77:	e8 c4 ff ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce7c:	5a                   	pop    edx
c000ce7d:	5a                   	pop    edx
c000ce7e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce84:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce88:	0f b7 d2             	movzx  edx,dx
c000ce8b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce90:	39 0d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ecx
c000ce96:	75 14                	jne    c000ceac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce98:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce9e:	85 c0                	test   eax,eax
c000cea0:	74 0a                	je     c000ceac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cea6:	83 c4 08             	add    esp,0x8
c000cea9:	5b                   	pop    ebx
c000ceaa:	ff e0                	jmp    eax
c000ceac:	83 c4 08             	add    esp,0x8
c000ceaf:	5b                   	pop    ebx
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <VgaText::getCursorX()>:
c000ceb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceb6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cebc:	c3                   	ret    
c000cebd:	90                   	nop

c000cebe <VgaText::getCursorY()>:
c000cebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cec8:	c3                   	ret    
c000cec9:	90                   	nop

c000ceca <VgaText::setCursor(int, int)>:
c000ceca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ced8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cedc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cee2:	e9 77 fd ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000cee7:	90                   	nop

c000cee8 <VgaText::setCursorX(int)>:
c000cee8:	83 ec 10             	sub    esp,0x10
c000ceeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ceef:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef9:	50                   	push   eax
c000cefa:	e8 cb ff ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000ceff:	83 c4 1c             	add    esp,0x1c
c000cf02:	c3                   	ret    
c000cf03:	90                   	nop

c000cf04 <VgaText::setCursorY(int)>:
c000cf04:	83 ec 10             	sub    esp,0x10
c000cf07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf0f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf15:	50                   	push   eax
c000cf16:	e8 af ff ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000cf1b:	83 c4 1c             	add    esp,0x1c
c000cf1e:	c3                   	ret    
c000cf1f:	90                   	nop

c000cf20 <VgaText::incrementCursor(bool)>:
c000cf20:	56                   	push   esi
c000cf21:	53                   	push   ebx
c000cf22:	51                   	push   ecx
c000cf23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf2b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf31:	40                   	inc    eax
c000cf32:	83 f8 50             	cmp    eax,0x50
c000cf35:	74 08                	je     c000cf3f <VgaText::incrementCursor(bool)+0x1f>
c000cf37:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf3d:	eb 33                	jmp    c000cf72 <VgaText::incrementCursor(bool)+0x52>
c000cf3f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf45:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf4f:	8d 50 01             	lea    edx,[eax+0x1]
c000cf52:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf58:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf5e:	75 12                	jne    c000cf72 <VgaText::incrementCursor(bool)+0x52>
c000cf60:	83 ec 0c             	sub    esp,0xc
c000cf63:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf69:	53                   	push   ebx
c000cf6a:	e8 3d fe ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	89 f0                	mov    eax,esi
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0c                	je     c000cf84 <VgaText::incrementCursor(bool)+0x64>
c000cf78:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf7c:	5a                   	pop    edx
c000cf7d:	5b                   	pop    ebx
c000cf7e:	5e                   	pop    esi
c000cf7f:	e9 da fc ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000cf84:	58                   	pop    eax
c000cf85:	5b                   	pop    ebx
c000cf86:	5e                   	pop    esi
c000cf87:	c3                   	ret    

c000cf88 <VgaText::updateRAMUsageDisplay(int)>:
c000cf88:	53                   	push   ebx
c000cf89:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf8e:	6a 0f                	push   0xf
c000cf90:	6a 00                	push   0x0
c000cf92:	e8 03 fe ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cf97:	5a                   	pop    edx
c000cf98:	59                   	pop    ecx
c000cf99:	0f b6 c8             	movzx  ecx,al
c000cf9c:	51                   	push   ecx
c000cf9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfa1:	99                   	cdq    
c000cfa2:	f7 fb                	idiv   ebx
c000cfa4:	83 c0 30             	add    eax,0x30
c000cfa7:	89 d3                	mov    ebx,edx
c000cfa9:	0f be c0             	movsx  eax,al
c000cfac:	50                   	push   eax
c000cfad:	e8 8e fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfb2:	5a                   	pop    edx
c000cfb3:	83 c3 30             	add    ebx,0x30
c000cfb6:	5a                   	pop    edx
c000cfb7:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfbd:	0f b6 db             	movzx  ebx,bl
c000cfc0:	51                   	push   ecx
c000cfc1:	53                   	push   ebx
c000cfc2:	e8 79 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc7:	5b                   	pop    ebx
c000cfc8:	5a                   	pop    edx
c000cfc9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfcf:	51                   	push   ecx
c000cfd0:	6a 25                	push   0x25
c000cfd2:	e8 69 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd7:	59                   	pop    ecx
c000cfd8:	5b                   	pop    ebx
c000cfd9:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfdf:	5b                   	pop    ebx
c000cfe0:	c3                   	ret    
c000cfe1:	90                   	nop

c000cfe2 <VgaText::updateDiskUsage()>:
c000cfe2:	55                   	push   ebp
c000cfe3:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfe8:	57                   	push   edi
c000cfe9:	56                   	push   esi
c000cfea:	53                   	push   ebx
c000cfeb:	6a 0f                	push   0xf
c000cfed:	6a 00                	push   0x0
c000cfef:	e8 a6 fd ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000cff4:	0f b6 d8             	movzx  ebx,al
c000cff7:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000cffc:	5a                   	pop    edx
c000cffd:	99                   	cdq    
c000cffe:	f7 fd                	idiv   ebp
c000d000:	59                   	pop    ecx
c000d001:	b9 0a 00 00 00       	mov    ecx,0xa
c000d006:	99                   	cdq    
c000d007:	f7 f9                	idiv   ecx
c000d009:	53                   	push   ebx
c000d00a:	8d 42 30             	lea    eax,[edx+0x30]
c000d00d:	0f b6 c0             	movzx  eax,al
c000d010:	50                   	push   eax
c000d011:	e8 2a fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d016:	5e                   	pop    esi
c000d017:	5f                   	pop    edi
c000d018:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d01e:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d023:	bf e8 03 00 00       	mov    edi,0x3e8
c000d028:	99                   	cdq    
c000d029:	f7 ff                	idiv   edi
c000d02b:	99                   	cdq    
c000d02c:	f7 f9                	idiv   ecx
c000d02e:	53                   	push   ebx
c000d02f:	8d 42 30             	lea    eax,[edx+0x30]
c000d032:	0f b6 c0             	movzx  eax,al
c000d035:	50                   	push   eax
c000d036:	e8 05 fe ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d03b:	5a                   	pop    edx
c000d03c:	5e                   	pop    esi
c000d03d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d043:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d048:	be 64 00 00 00       	mov    esi,0x64
c000d04d:	99                   	cdq    
c000d04e:	f7 fe                	idiv   esi
c000d050:	99                   	cdq    
c000d051:	f7 f9                	idiv   ecx
c000d053:	53                   	push   ebx
c000d054:	8d 42 30             	lea    eax,[edx+0x30]
c000d057:	0f b6 c0             	movzx  eax,al
c000d05a:	50                   	push   eax
c000d05b:	e8 e0 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d060:	5a                   	pop    edx
c000d061:	5a                   	pop    edx
c000d062:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d068:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d06d:	53                   	push   ebx
c000d06e:	99                   	cdq    
c000d06f:	f7 f9                	idiv   ecx
c000d071:	99                   	cdq    
c000d072:	f7 f9                	idiv   ecx
c000d074:	8d 42 30             	lea    eax,[edx+0x30]
c000d077:	0f b6 c0             	movzx  eax,al
c000d07a:	50                   	push   eax
c000d07b:	e8 c0 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d080:	5a                   	pop    edx
c000d081:	5a                   	pop    edx
c000d082:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d088:	a1 24 65 02 c0       	mov    eax,ds:0xc0026524
c000d08d:	53                   	push   ebx
c000d08e:	99                   	cdq    
c000d08f:	f7 f9                	idiv   ecx
c000d091:	8d 42 30             	lea    eax,[edx+0x30]
c000d094:	0f b6 c0             	movzx  eax,al
c000d097:	50                   	push   eax
c000d098:	e8 a3 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d09d:	5a                   	pop    edx
c000d09e:	5a                   	pop    edx
c000d09f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0a5:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0aa:	53                   	push   ebx
c000d0ab:	99                   	cdq    
c000d0ac:	f7 fd                	idiv   ebp
c000d0ae:	99                   	cdq    
c000d0af:	f7 f9                	idiv   ecx
c000d0b1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b4:	0f b6 c0             	movzx  eax,al
c000d0b7:	50                   	push   eax
c000d0b8:	e8 83 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0bd:	5d                   	pop    ebp
c000d0be:	5a                   	pop    edx
c000d0bf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0c5:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0ca:	53                   	push   ebx
c000d0cb:	99                   	cdq    
c000d0cc:	f7 ff                	idiv   edi
c000d0ce:	99                   	cdq    
c000d0cf:	f7 f9                	idiv   ecx
c000d0d1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d4:	0f b6 c0             	movzx  eax,al
c000d0d7:	50                   	push   eax
c000d0d8:	e8 63 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0dd:	5f                   	pop    edi
c000d0de:	5d                   	pop    ebp
c000d0df:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0e5:	53                   	push   ebx
c000d0e6:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d0eb:	99                   	cdq    
c000d0ec:	f7 fe                	idiv   esi
c000d0ee:	99                   	cdq    
c000d0ef:	f7 f9                	idiv   ecx
c000d0f1:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f4:	0f b6 c0             	movzx  eax,al
c000d0f7:	50                   	push   eax
c000d0f8:	e8 43 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0fd:	5a                   	pop    edx
c000d0fe:	5e                   	pop    esi
c000d0ff:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d105:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d10a:	53                   	push   ebx
c000d10b:	99                   	cdq    
c000d10c:	f7 f9                	idiv   ecx
c000d10e:	99                   	cdq    
c000d10f:	f7 f9                	idiv   ecx
c000d111:	8d 42 30             	lea    eax,[edx+0x30]
c000d114:	0f b6 c0             	movzx  eax,al
c000d117:	50                   	push   eax
c000d118:	e8 23 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d11d:	5f                   	pop    edi
c000d11e:	5d                   	pop    ebp
c000d11f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d125:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c000d12a:	53                   	push   ebx
c000d12b:	99                   	cdq    
c000d12c:	f7 f9                	idiv   ecx
c000d12e:	83 c2 30             	add    edx,0x30
c000d131:	0f b6 d2             	movzx  edx,dl
c000d134:	52                   	push   edx
c000d135:	e8 06 fd ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d13a:	5a                   	pop    edx
c000d13b:	59                   	pop    ecx
c000d13c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d142:	5b                   	pop    ebx
c000d143:	5e                   	pop    esi
c000d144:	5f                   	pop    edi
c000d145:	5d                   	pop    ebp
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <VgaText::updateTitle()>:
c000d148:	53                   	push   ebx
c000d149:	31 c0                	xor    eax,eax
c000d14b:	83 ec 58             	sub    esp,0x58
c000d14e:	89 e1                	mov    ecx,esp
c000d150:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d154:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d158:	40                   	inc    eax
c000d159:	83 f8 50             	cmp    eax,0x50
c000d15c:	75 f6                	jne    c000d154 <VgaText::updateTitle()+0xc>
c000d15e:	31 c0                	xor    eax,eax
c000d160:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d167:	84 db                	test   bl,bl
c000d169:	74 06                	je     c000d171 <VgaText::updateTitle()+0x29>
c000d16b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d16e:	40                   	inc    eax
c000d16f:	eb ef                	jmp    c000d160 <VgaText::updateTitle()+0x18>
c000d171:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d177:	85 c0                	test   eax,eax
c000d179:	74 09                	je     c000d184 <VgaText::updateTitle()+0x3c>
c000d17b:	53                   	push   ebx
c000d17c:	53                   	push   ebx
c000d17d:	51                   	push   ecx
c000d17e:	52                   	push   edx
c000d17f:	ff d0                	call   eax
c000d181:	83 c4 10             	add    esp,0x10
c000d184:	e8 59 fe ff ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c000d189:	83 c4 58             	add    esp,0x58
c000d18c:	5b                   	pop    ebx
c000d18d:	c3                   	ret    

c000d18e <VgaText::setTitleTextColour(VgaColour)>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d196:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d19c:	eb aa                	jmp    c000d148 <VgaText::updateTitle()>

c000d19e <VgaText::setTitleColour(VgaColour)>:
c000d19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1ac:	eb 9a                	jmp    c000d148 <VgaText::updateTitle()>

c000d1ae <VgaText::setTitle(char*)>:
c000d1ae:	53                   	push   ebx
c000d1af:	83 ec 10             	sub    esp,0x10
c000d1b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1ba:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1c0:	50                   	push   eax
c000d1c1:	e8 93 35 ff ff       	call   c0000759 <strcpy>
c000d1c6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1ca:	83 c4 18             	add    esp,0x18
c000d1cd:	5b                   	pop    ebx
c000d1ce:	e9 75 ff ff ff       	jmp    c000d148 <VgaText::updateTitle()>
c000d1d3:	90                   	nop

c000d1d4 <VgaText::decrementCursor(bool)>:
c000d1d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1dc:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1e2:	85 c0                	test   eax,eax
c000d1e4:	74 07                	je     c000d1ed <VgaText::decrementCursor(bool)+0x19>
c000d1e6:	48                   	dec    eax
c000d1e7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1ed:	84 c9                	test   cl,cl
c000d1ef:	74 09                	je     c000d1fa <VgaText::decrementCursor(bool)+0x26>
c000d1f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1f5:	e9 64 fa ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000d1fa:	c3                   	ret    
c000d1fb:	90                   	nop

c000d1fc <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d1fc:	53                   	push   ebx
c000d1fd:	83 ec 08             	sub    esp,0x8
c000d200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d208:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d20c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d210:	3c 07                	cmp    al,0x7
c000d212:	75 2a                	jne    c000d23e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d214:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000d219:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d221:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d229:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d235:	83 c4 08             	add    esp,0x8
c000d238:	5b                   	pop    ebx
c000d239:	e9 c0 2d 00 00       	jmp    c000fffe <Buzzer::beep(int, int, bool)>
c000d23e:	3c 0d                	cmp    al,0xd
c000d240:	75 0c                	jne    c000d24e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d242:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d24c:	eb 3b                	jmp    c000d289 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d24e:	3c 0a                	cmp    al,0xa
c000d250:	75 40                	jne    c000d292 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d252:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d258:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d262:	8d 50 01             	lea    edx,[eax+0x1]
c000d265:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d26b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d271:	75 12                	jne    c000d285 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d273:	83 ec 0c             	sub    esp,0xc
c000d276:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d27c:	53                   	push   ebx
c000d27d:	e8 2a fb ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d289:	83 c4 08             	add    esp,0x8
c000d28c:	5b                   	pop    ebx
c000d28d:	e9 cc f9 ff ff       	jmp    c000cc5e <VgaText::updateCursor()>
c000d292:	3c 08                	cmp    al,0x8
c000d294:	75 31                	jne    c000d2c7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d296:	50                   	push   eax
c000d297:	50                   	push   eax
c000d298:	6a 01                	push   0x1
c000d29a:	53                   	push   ebx
c000d29b:	e8 34 ff ff ff       	call   c000d1d4 <VgaText::decrementCursor(bool)>
c000d2a0:	5a                   	pop    edx
c000d2a1:	59                   	pop    ecx
c000d2a2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2a8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ae:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2b4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2ba:	6a 20                	push   0x20
c000d2bc:	53                   	push   ebx
c000d2bd:	e8 90 fb ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2c2:	83 c4 28             	add    esp,0x28
c000d2c5:	5b                   	pop    ebx
c000d2c6:	c3                   	ret    
c000d2c7:	83 ec 08             	sub    esp,0x8
c000d2ca:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2d6:	0f be c0             	movsx  eax,al
c000d2d9:	51                   	push   ecx
c000d2da:	52                   	push   edx
c000d2db:	50                   	push   eax
c000d2dc:	53                   	push   ebx
c000d2dd:	e8 70 fb ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2e6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2ee:	83 c4 28             	add    esp,0x28
c000d2f1:	5b                   	pop    ebx
c000d2f2:	e9 29 fc ff ff       	jmp    c000cf20 <VgaText::incrementCursor(bool)>
c000d2f7:	90                   	nop

c000d2f8 <VgaText::isShowingCursor()>:
c000d2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2fc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <VgaText::isBlinkDisabled()>:
c000d304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d308:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d30e:	83 f0 01             	xor    eax,0x1
c000d311:	c3                   	ret    

c000d312 <VgaText::setCursorHeight(int)>:
c000d312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d31a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d320:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d327:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d32b:	e9 48 f9 ff ff       	jmp    c000cc78 <VgaText::showCursor(bool)>

c000d330 <VgaText::getCursorHeight()>:
c000d330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d334:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d33a:	c3                   	ret    

c000d33b <setActiveTerminal(VgaText*)>:
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 08             	sub    esp,0x8
c000d33f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d343:	85 db                	test   ebx,ebx
c000d345:	75 11                	jne    c000d358 <setActiveTerminal(VgaText*)+0x1d>
c000d347:	c7 44 24 10 20 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021420
c000d34f:	83 c4 08             	add    esp,0x8
c000d352:	5b                   	pop    ebx
c000d353:	e9 e2 86 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c000d358:	50                   	push   eax
c000d359:	50                   	push   eax
c000d35a:	53                   	push   ebx
c000d35b:	68 2e 14 02 c0       	push   0xc002142e
c000d360:	e8 a6 1e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000d365:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	85 c0                	test   eax,eax
c000d36f:	74 0c                	je     c000d37d <setActiveTerminal(VgaText*)+0x42>
c000d371:	83 ec 0c             	sub    esp,0xc
c000d374:	50                   	push   eax
c000d375:	e8 e4 f8 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	51                   	push   ecx
c000d37e:	89 1d 44 48 02 c0    	mov    DWORD PTR ds:0xc0024844,ebx
c000d384:	51                   	push   ecx
c000d385:	53                   	push   ebx
c000d386:	68 46 14 02 c0       	push   0xc0021446
c000d38b:	e8 7b 1e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000d390:	83 c4 0c             	add    esp,0xc
c000d393:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d399:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d39f:	53                   	push   ebx
c000d3a0:	e8 25 fb ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d3a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3a8:	e8 57 ff ff ff       	call   c000d304 <VgaText::isBlinkDisabled()>
c000d3ad:	5a                   	pop    edx
c000d3ae:	59                   	pop    ecx
c000d3af:	0f b6 c0             	movzx  eax,al
c000d3b2:	50                   	push   eax
c000d3b3:	53                   	push   ebx
c000d3b4:	e8 cf f8 ff ff       	call   c000cc88 <VgaText::disableBlink(bool)>
c000d3b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3bc:	e8 6f ff ff ff       	call   c000d330 <VgaText::getCursorHeight()>
c000d3c1:	5a                   	pop    edx
c000d3c2:	59                   	pop    ecx
c000d3c3:	50                   	push   eax
c000d3c4:	53                   	push   ebx
c000d3c5:	e8 48 ff ff ff       	call   c000d312 <VgaText::setCursorHeight(int)>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3d4:	75 0a                	jne    c000d3e0 <setActiveTerminal(VgaText*)+0xa5>
c000d3d6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3e4:	83 c4 08             	add    esp,0x8
c000d3e7:	5b                   	pop    ebx
c000d3e8:	e9 1d f8 ff ff       	jmp    c000cc0a <VgaText::load()>

c000d3ed <doTerminalCycle()>:
c000d3ed:	83 ec 18             	sub    esp,0x18
c000d3f0:	a1 40 48 02 c0       	mov    eax,ds:0xc0024840
c000d3f5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d3fb:	50                   	push   eax
c000d3fc:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c000d401:	e8 35 ff ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c000d406:	83 c4 1c             	add    esp,0x1c
c000d409:	c3                   	ret    

c000d40a <VgaText::doUpdate()>:
c000d40a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d40e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d414:	85 c0                	test   eax,eax
c000d416:	74 02                	je     c000d41a <VgaText::doUpdate()+0x10>
c000d418:	ff e0                	jmp    eax
c000d41a:	c3                   	ret    
c000d41b:	90                   	nop

c000d41c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d41c:	55                   	push   ebp
c000d41d:	57                   	push   edi
c000d41e:	56                   	push   esi
c000d41f:	53                   	push   ebx
c000d420:	83 ec 1c             	sub    esp,0x1c
c000d423:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d427:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d42c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d433:	50                   	push   eax
c000d434:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d439:	50                   	push   eax
c000d43a:	e8 5b f9 ff ff       	call   c000cd9a <VgaText::combineColours(unsigned char, unsigned char)>
c000d43f:	59                   	pop    ecx
c000d440:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d443:	5b                   	pop    ebx
c000d444:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d44c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d452:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d456:	0f b7 db             	movzx  ebx,bx
c000d459:	01 db                	add    ebx,ebx
c000d45b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d45f:	01 fb                	add    ebx,edi
c000d461:	31 c0                	xor    eax,eax
c000d463:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d466:	84 c9                	test   cl,cl
c000d468:	0f 84 3d 01 00 00    	je     c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d46e:	80 f9 0d             	cmp    cl,0xd
c000d471:	75 0f                	jne    c000d482 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d473:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d47d:	e9 23 01 00 00       	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d482:	80 f9 0a             	cmp    cl,0xa
c000d485:	75 5b                	jne    c000d4e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d487:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d48d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d497:	8d 48 01             	lea    ecx,[eax+0x1]
c000d49a:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4a0:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4a6:	75 12                	jne    c000d4ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b1:	55                   	push   ebp
c000d4b2:	e8 f5 f8 ff ff       	call   c000cdac <VgaText::scrollScreen()>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	55                   	push   ebp
c000d4be:	e8 9b f7 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d4c3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4cb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d1:	83 c4 10             	add    esp,0x10
c000d4d4:	0f b7 db             	movzx  ebx,bx
c000d4d7:	01 db                	add    ebx,ebx
c000d4d9:	31 c0                	xor    eax,eax
c000d4db:	01 fb                	add    ebx,edi
c000d4dd:	e9 c3 00 00 00       	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4e2:	80 f9 08             	cmp    cl,0x8
c000d4e5:	75 4e                	jne    c000d535 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4eb:	50                   	push   eax
c000d4ec:	50                   	push   eax
c000d4ed:	6a 01                	push   0x1
c000d4ef:	55                   	push   ebp
c000d4f0:	e8 df fc ff ff       	call   c000d1d4 <VgaText::decrementCursor(bool)>
c000d4f5:	58                   	pop    eax
c000d4f6:	5a                   	pop    edx
c000d4f7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4fd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d503:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d509:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d50f:	6a 20                	push   0x20
c000d511:	55                   	push   ebp
c000d512:	e8 3b f9 ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d517:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d51f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d525:	83 c4 20             	add    esp,0x20
c000d528:	0f b7 db             	movzx  ebx,bx
c000d52b:	01 db                	add    ebx,ebx
c000d52d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d531:	01 fb                	add    ebx,edi
c000d533:	eb 70                	jmp    c000d5a5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d535:	50                   	push   eax
c000d536:	50                   	push   eax
c000d537:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d53c:	50                   	push   eax
c000d53d:	51                   	push   ecx
c000d53e:	e8 fd f8 ff ff       	call   c000ce40 <VgaText::combineCharAndColour(char, unsigned char)>
c000d543:	66 89 03             	mov    WORD PTR [ebx],ax
c000d546:	83 c4 10             	add    esp,0x10
c000d549:	39 2d 44 48 02 c0    	cmp    DWORD PTR ds:0xc0024844,ebp
c000d54f:	75 2a                	jne    c000d57b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d551:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d557:	85 c0                	test   eax,eax
c000d559:	74 20                	je     c000d57b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d55b:	52                   	push   edx
c000d55c:	52                   	push   edx
c000d55d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d563:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d569:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d571:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d574:	51                   	push   ecx
c000d575:	55                   	push   ebp
c000d576:	ff d0                	call   eax
c000d578:	83 c4 20             	add    esp,0x20
c000d57b:	50                   	push   eax
c000d57c:	83 c3 02             	add    ebx,0x2
c000d57f:	50                   	push   eax
c000d580:	6a 00                	push   0x0
c000d582:	55                   	push   ebp
c000d583:	e8 98 f9 ff ff       	call   c000cf20 <VgaText::incrementCursor(bool)>
c000d588:	83 c4 10             	add    esp,0x10
c000d58b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d592:	75 0f                	jne    c000d5a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d594:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d59c:	0f b7 db             	movzx  ebx,bx
c000d59f:	01 db                	add    ebx,ebx
c000d5a1:	01 fb                	add    ebx,edi
c000d5a3:	b0 01                	mov    al,0x1
c000d5a5:	46                   	inc    esi
c000d5a6:	e9 b8 fe ff ff       	jmp    c000d463 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5ab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5af:	83 ec 0c             	sub    esp,0xc
c000d5b2:	55                   	push   ebp
c000d5b3:	e8 a6 f6 ff ff       	call   c000cc5e <VgaText::updateCursor()>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5bf:	84 c0                	test   al,al
c000d5c1:	74 0c                	je     c000d5cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5c3:	83 ec 0c             	sub    esp,0xc
c000d5c6:	55                   	push   ebp
c000d5c7:	e8 3e fe ff ff       	call   c000d40a <VgaText::doUpdate()>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5d6:	83 c4 1c             	add    esp,0x1c
c000d5d9:	5b                   	pop    ebx
c000d5da:	5e                   	pop    esi
c000d5db:	5f                   	pop    edi
c000d5dc:	5d                   	pop    ebp
c000d5dd:	c3                   	ret    

c000d5de <VgaText::clearScreen()>:
c000d5de:	57                   	push   edi
c000d5df:	56                   	push   esi
c000d5e0:	31 f6                	xor    esi,esi
c000d5e2:	53                   	push   ebx
c000d5e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5e7:	52                   	push   edx
c000d5e8:	6a 00                	push   0x0
c000d5ea:	6a 00                	push   0x0
c000d5ec:	53                   	push   ebx
c000d5ed:	e8 d8 f8 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d5f2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d602:	7e 26                	jle    c000d62a <VgaText::clearScreen()+0x4c>
c000d604:	31 ff                	xor    edi,edi
c000d606:	50                   	push   eax
c000d607:	50                   	push   eax
c000d608:	56                   	push   esi
c000d609:	57                   	push   edi
c000d60a:	47                   	inc    edi
c000d60b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d611:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d617:	6a 20                	push   0x20
c000d619:	53                   	push   ebx
c000d61a:	e8 33 f8 ff ff       	call   c000ce52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d61f:	83 c4 20             	add    esp,0x20
c000d622:	83 ff 50             	cmp    edi,0x50
c000d625:	75 df                	jne    c000d606 <VgaText::clearScreen()+0x28>
c000d627:	46                   	inc    esi
c000d628:	eb d2                	jmp    c000d5fc <VgaText::clearScreen()+0x1e>
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	53                   	push   ebx
c000d62e:	e8 d7 fd ff ff       	call   c000d40a <VgaText::doUpdate()>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d63d:	5b                   	pop    ebx
c000d63e:	5e                   	pop    esi
c000d63f:	5f                   	pop    edi
c000d640:	c3                   	ret    
c000d641:	90                   	nop

c000d642 <VgaText::putchar(char)>:
c000d642:	56                   	push   esi
c000d643:	53                   	push   ebx
c000d644:	83 ec 14             	sub    esp,0x14
c000d647:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d64b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d64f:	3c 5b                	cmp    al,0x5b
c000d651:	75 21                	jne    c000d674 <VgaText::putchar(char)+0x32>
c000d653:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d65a:	74 28                	je     c000d684 <VgaText::putchar(char)+0x42>
c000d65c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d665:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d66f:	e9 e2 00 00 00       	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d674:	3c 1b                	cmp    al,0x1b
c000d676:	75 0c                	jne    c000d684 <VgaText::putchar(char)+0x42>
c000d678:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d67f:	e9 d2 00 00 00       	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d684:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d68a:	84 c9                	test   cl,cl
c000d68c:	0f 84 ab 00 00 00    	je     c000d73d <VgaText::putchar(char)+0xfb>
c000d692:	8d 50 c0             	lea    edx,[eax-0x40]
c000d695:	80 fa 3e             	cmp    dl,0x3e
c000d698:	0f 87 82 00 00 00    	ja     c000d720 <VgaText::putchar(char)+0xde>
c000d69e:	3c 6d                	cmp    al,0x6d
c000d6a0:	75 4d                	jne    c000d6ef <VgaText::putchar(char)+0xad>
c000d6a2:	31 f6                	xor    esi,esi
c000d6a4:	31 d2                	xor    edx,edx
c000d6a6:	31 c0                	xor    eax,eax
c000d6a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6ae:	7e 30                	jle    c000d6e0 <VgaText::putchar(char)+0x9e>
c000d6b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6b8:	80 fa 3b             	cmp    dl,0x3b
c000d6bb:	75 17                	jne    c000d6d4 <VgaText::putchar(char)+0x92>
c000d6bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6c1:	50                   	push   eax
c000d6c2:	53                   	push   ebx
c000d6c3:	e8 fa f5 ff ff       	call   c000ccc2 <VgaText::doANSI_SGR(int)>
c000d6c8:	59                   	pop    ecx
c000d6c9:	31 d2                	xor    edx,edx
c000d6cb:	58                   	pop    eax
c000d6cc:	31 c0                	xor    eax,eax
c000d6ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6d2:	eb 09                	jmp    c000d6dd <VgaText::putchar(char)+0x9b>
c000d6d4:	6b c0 0a             	imul   eax,eax,0xa
c000d6d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6db:	88 ca                	mov    dl,cl
c000d6dd:	46                   	inc    esi
c000d6de:	eb c8                	jmp    c000d6a8 <VgaText::putchar(char)+0x66>
c000d6e0:	84 d2                	test   dl,dl
c000d6e2:	74 31                	je     c000d715 <VgaText::putchar(char)+0xd3>
c000d6e4:	50                   	push   eax
c000d6e5:	53                   	push   ebx
c000d6e6:	e8 d7 f5 ff ff       	call   c000ccc2 <VgaText::doANSI_SGR(int)>
c000d6eb:	58                   	pop    eax
c000d6ec:	5a                   	pop    edx
c000d6ed:	eb 26                	jmp    c000d715 <VgaText::putchar(char)+0xd3>
c000d6ef:	3c 4a                	cmp    al,0x4a
c000d6f1:	75 22                	jne    c000d715 <VgaText::putchar(char)+0xd3>
c000d6f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d6fa:	75 19                	jne    c000d715 <VgaText::putchar(char)+0xd3>
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	53                   	push   ebx
c000d700:	e8 d9 fe ff ff       	call   c000d5de <VgaText::clearScreen()>
c000d705:	83 c4 0c             	add    esp,0xc
c000d708:	6a 00                	push   0x0
c000d70a:	6a 00                	push   0x0
c000d70c:	53                   	push   ebx
c000d70d:	e8 b8 f7 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d71e:	eb 36                	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d720:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d726:	83 fa 0e             	cmp    edx,0xe
c000d729:	7f 2b                	jg     c000d756 <VgaText::putchar(char)+0x114>
c000d72b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d72e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d734:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d73b:	eb 19                	jmp    c000d756 <VgaText::putchar(char)+0x114>
c000d73d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d743:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d749:	0f be c0             	movsx  eax,al
c000d74c:	50                   	push   eax
c000d74d:	53                   	push   ebx
c000d74e:	e8 a9 fa ff ff       	call   c000d1fc <VgaText::putchar(char, VgaColour, VgaColour)>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 c4 14             	add    esp,0x14
c000d759:	5b                   	pop    ebx
c000d75a:	5e                   	pop    esi
c000d75b:	c3                   	ret    

c000d75c <VgaText::puts(char const*)>:
c000d75c:	53                   	push   ebx
c000d75d:	83 ec 08             	sub    esp,0x8
c000d760:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d764:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d767:	84 c0                	test   al,al
c000d769:	74 12                	je     c000d77d <VgaText::puts(char const*)+0x21>
c000d76b:	51                   	push   ecx
c000d76c:	43                   	inc    ebx
c000d76d:	51                   	push   ecx
c000d76e:	50                   	push   eax
c000d76f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d773:	e8 ca fe ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d778:	83 c4 10             	add    esp,0x10
c000d77b:	eb e7                	jmp    c000d764 <VgaText::puts(char const*)+0x8>
c000d77d:	83 c4 08             	add    esp,0x8
c000d780:	5b                   	pop    ebx
c000d781:	c3                   	ret    

c000d782 <VgaText::putx(unsigned int)>:
c000d782:	57                   	push   edi
c000d783:	b9 11 00 00 00       	mov    ecx,0x11
c000d788:	56                   	push   esi
c000d789:	be 62 14 02 c0       	mov    esi,0xc0021462
c000d78e:	53                   	push   ebx
c000d78f:	83 ec 20             	sub    esp,0x20
c000d792:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d796:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d79a:	fc                   	cld    
c000d79b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d79d:	be 08 00 00 00       	mov    esi,0x8
c000d7a2:	50                   	push   eax
c000d7a3:	50                   	push   eax
c000d7a4:	89 d8                	mov    eax,ebx
c000d7a6:	c1 e8 1c             	shr    eax,0x1c
c000d7a9:	c1 e3 04             	shl    ebx,0x4
c000d7ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7b1:	50                   	push   eax
c000d7b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7b6:	e8 87 fe ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	4e                   	dec    esi
c000d7bf:	75 e1                	jne    c000d7a2 <VgaText::putx(unsigned int)+0x20>
c000d7c1:	83 c4 20             	add    esp,0x20
c000d7c4:	5b                   	pop    ebx
c000d7c5:	5e                   	pop    esi
c000d7c6:	5f                   	pop    edi
c000d7c7:	c3                   	ret    

c000d7c8 <VgaText::VgaText(char const*)>:
c000d7c8:	57                   	push   edi
c000d7c9:	56                   	push   esi
c000d7ca:	53                   	push   ebx
c000d7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cf:	83 ec 08             	sub    esp,0x8
c000d7d2:	6a 00                	push   0x0
c000d7d4:	50                   	push   eax
c000d7d5:	e8 e0 05 00 00       	call   c000ddba <UnixFile::UnixFile(int)>
c000d7da:	83 c4 10             	add    esp,0x10
c000d7dd:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000d7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e6:	89 10                	mov    DWORD PTR [eax],edx
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d813:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d845:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d850:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d856:	bb 20 48 02 c0       	mov    ebx,0xc0024820
c000d85b:	b8 08 00 00 00       	mov    eax,0x8
c000d860:	fc                   	cld    
c000d861:	89 d7                	mov    edi,edx
c000d863:	89 de                	mov    esi,ebx
c000d865:	89 c1                	mov    ecx,eax
c000d867:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	05 1e 10 00 00       	add    eax,0x101e
c000d872:	83 ec 08             	sub    esp,0x8
c000d875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d879:	50                   	push   eax
c000d87a:	e8 da 2e ff ff       	call   c0000759 <strcpy>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d886:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d894:	83 c0 0c             	add    eax,0xc
c000d897:	83 ec 04             	sub    esp,0x4
c000d89a:	68 00 0f 00 00       	push   0xf00
c000d89f:	6a 00                	push   0x0
c000d8a1:	50                   	push   eax
c000d8a2:	e8 13 2e ff ff       	call   c00006ba <memset>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	83 ec 04             	sub    esp,0x4
c000d8ad:	6a 00                	push   0x0
c000d8af:	6a 07                	push   0x7
c000d8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b5:	e8 c0 f4 ff ff       	call   c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	83 ec 08             	sub    esp,0x8
c000d8c0:	6a 02                	push   0x2
c000d8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c6:	e8 47 fa ff ff       	call   c000d312 <VgaText::setCursorHeight(int)>
c000d8cb:	83 c4 10             	add    esp,0x10
c000d8ce:	83 ec 04             	sub    esp,0x4
c000d8d1:	6a 00                	push   0x0
c000d8d3:	6a 00                	push   0x0
c000d8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d9:	e8 ec f5 ff ff       	call   c000ceca <VgaText::setCursor(int, int)>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	83 ec 08             	sub    esp,0x8
c000d8e4:	6a 01                	push   0x1
c000d8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ea:	e8 89 f3 ff ff       	call   c000cc78 <VgaText::showCursor(bool)>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	6a 01                	push   0x1
c000d8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fb:	e8 88 f3 ff ff       	call   c000cc88 <VgaText::disableBlink(bool)>
c000d900:	83 c4 10             	add    esp,0x10
c000d903:	83 ec 0c             	sub    esp,0xc
c000d906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90a:	e8 cf fc ff ff       	call   c000d5de <VgaText::clearScreen()>
c000d90f:	83 c4 10             	add    esp,0x10
c000d912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d916:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d921:	05 9e 10 00 00       	add    eax,0x109e
c000d926:	83 ec 04             	sub    esp,0x4
c000d929:	68 96 00 00 00       	push   0x96
c000d92e:	6a 00                	push   0x0
c000d930:	50                   	push   eax
c000d931:	e8 84 2d ff ff       	call   c00006ba <memset>
c000d936:	83 c4 10             	add    esp,0x10
c000d939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93d:	05 34 11 00 00       	add    eax,0x1134
c000d942:	83 ec 04             	sub    esp,0x4
c000d945:	68 2c 01 00 00       	push   0x12c
c000d94a:	6a 00                	push   0x0
c000d94c:	50                   	push   eax
c000d94d:	e8 68 2d ff ff       	call   c00006ba <memset>
c000d952:	83 c4 10             	add    esp,0x10
c000d955:	90                   	nop
c000d956:	5b                   	pop    ebx
c000d957:	5e                   	pop    esi
c000d958:	5f                   	pop    edi
c000d959:	c3                   	ret    

c000d95a <VgaText::receiveKey(unsigned char)>:
c000d95a:	55                   	push   ebp
c000d95b:	57                   	push   edi
c000d95c:	56                   	push   esi
c000d95d:	53                   	push   ebx
c000d95e:	83 ec 1c             	sub    esp,0x1c
c000d961:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d965:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d969:	84 db                	test   bl,bl
c000d96b:	0f 84 c9 00 00 00    	je     c000da3a <VgaText::receiveKey(unsigned char)+0xe0>
c000d971:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d977:	80 fb 08             	cmp    bl,0x8
c000d97a:	75 2c                	jne    c000d9a8 <VgaText::receiveKey(unsigned char)+0x4e>
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	57                   	push   edi
c000d980:	e8 52 2d ff ff       	call   c00006d7 <strlen>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	85 c0                	test   eax,eax
c000d98a:	74 41                	je     c000d9cd <VgaText::receiveKey(unsigned char)+0x73>
c000d98c:	50                   	push   eax
c000d98d:	50                   	push   eax
c000d98e:	6a 08                	push   0x8
c000d990:	56                   	push   esi
c000d991:	e8 ac fc ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d996:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d999:	e8 39 2d ff ff       	call   c00006d7 <strlen>
c000d99e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9a6:	eb 22                	jmp    c000d9ca <VgaText::receiveKey(unsigned char)+0x70>
c000d9a8:	52                   	push   edx
c000d9a9:	52                   	push   edx
c000d9aa:	0f be c3             	movsx  eax,bl
c000d9ad:	50                   	push   eax
c000d9ae:	56                   	push   esi
c000d9af:	e8 8e fc ff ff       	call   c000d642 <VgaText::putchar(char)>
c000d9b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9bd:	59                   	pop    ecx
c000d9be:	5d                   	pop    ebp
c000d9bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9c3:	50                   	push   eax
c000d9c4:	57                   	push   edi
c000d9c5:	e8 46 2e ff ff       	call   c0000810 <strcat>
c000d9ca:	83 c4 10             	add    esp,0x10
c000d9cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9d4:	75 05                	jne    c000d9db <VgaText::receiveKey(unsigned char)+0x81>
c000d9d6:	80 fb 0a             	cmp    bl,0xa
c000d9d9:	75 53                	jne    c000da2e <VgaText::receiveKey(unsigned char)+0xd4>
c000d9db:	83 ec 0c             	sub    esp,0xc
c000d9de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9e4:	53                   	push   ebx
c000d9e5:	e8 ed 2c ff ff       	call   c00006d7 <strlen>
c000d9ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ed:	89 c5                	mov    ebp,eax
c000d9ef:	e8 e3 2c ff ff       	call   c00006d7 <strlen>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d9fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da00:	76 10                	jbe    c000da12 <VgaText::receiveKey(unsigned char)+0xb8>
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	68 73 14 02 c0       	push   0xc0021473
c000da0a:	e8 2b 80 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	50                   	push   eax
c000da13:	50                   	push   eax
c000da14:	57                   	push   edi
c000da15:	53                   	push   ebx
c000da16:	e8 f5 2d ff ff       	call   c0000810 <strcat>
c000da1b:	83 c4 0c             	add    esp,0xc
c000da1e:	68 96 00 00 00       	push   0x96
c000da23:	6a 00                	push   0x0
c000da25:	57                   	push   edi
c000da26:	e8 8f 2c ff ff       	call   c00006ba <memset>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	56                   	push   esi
c000da32:	e8 d3 f9 ff ff       	call   c000d40a <VgaText::doUpdate()>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	83 c4 1c             	add    esp,0x1c
c000da3d:	5b                   	pop    ebx
c000da3e:	5e                   	pop    esi
c000da3f:	5f                   	pop    edi
c000da40:	5d                   	pop    ebp
c000da41:	c3                   	ret    

c000da42 <VgaText::write(unsigned long long, void*, int*)>:
c000da42:	55                   	push   ebp
c000da43:	57                   	push   edi
c000da44:	56                   	push   esi
c000da45:	53                   	push   ebx
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da4d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da55:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da5c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da5f:	39 eb                	cmp    ebx,ebp
c000da61:	74 13                	je     c000da76 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da63:	50                   	push   eax
c000da64:	43                   	inc    ebx
c000da65:	50                   	push   eax
c000da66:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da6a:	50                   	push   eax
c000da6b:	56                   	push   esi
c000da6c:	e8 d1 fb ff ff       	call   c000d642 <VgaText::putchar(char)>
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	eb e9                	jmp    c000da5f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da76:	83 ec 0c             	sub    esp,0xc
c000da79:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da80:	56                   	push   esi
c000da81:	e8 84 f9 ff ff       	call   c000d40a <VgaText::doUpdate()>
c000da86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da8a:	89 38                	mov    DWORD PTR [eax],edi
c000da8c:	83 c4 1c             	add    esp,0x1c
c000da8f:	31 c0                	xor    eax,eax
c000da91:	5b                   	pop    ebx
c000da92:	5e                   	pop    esi
c000da93:	5f                   	pop    edi
c000da94:	5d                   	pop    ebp
c000da95:	c3                   	ret    

c000da96 <newTerminal(char*)>:
c000da96:	83 ec 28             	sub    esp,0x28
c000da99:	68 60 12 00 00       	push   0x1260
c000da9e:	e8 33 16 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000daa3:	5a                   	pop    edx
c000daa4:	59                   	pop    ecx
c000daa5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daa9:	50                   	push   eax
c000daaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daae:	e8 15 fd ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c000dab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab7:	83 c4 2c             	add    esp,0x2c
c000daba:	c3                   	ret    
c000dabb:	90                   	nop

c000dabc <TSS::TSS()>:
c000dabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dac7:	90                   	nop
c000dac8:	c3                   	ret    
c000dac9:	90                   	nop

c000daca <TSS::setESP(unsigned long)>:
c000daca:	55                   	push   ebp
c000dacb:	89 e5                	mov    ebp,esp
c000dacd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dad6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dad9:	90                   	nop
c000dada:	5d                   	pop    ebp
c000dadb:	c3                   	ret    

c000dadc <TSS::flush()>:
c000dadc:	55                   	push   ebp
c000dadd:	89 e5                	mov    ebp,esp
c000dadf:	83 ec 10             	sub    esp,0x10
c000dae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dae7:	83 c8 03             	or     eax,0x3
c000daea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daf2:	66 89 d0             	mov    ax,dx
c000daf5:	0f 00 d8             	ltr    ax
c000daf8:	90                   	nop
c000daf9:	c9                   	leave  
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <TSS::setup(unsigned long, unsigned long)>:
c000dafc:	55                   	push   ebp
c000dafd:	89 e5                	mov    ebp,esp
c000daff:	53                   	push   ebx
c000db00:	83 ec 14             	sub    esp,0x14
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	6a 68                	push   0x68
c000db08:	e8 cc e4 ff ff       	call   c000bfd9 <malloc>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	89 c2                	mov    edx,eax
c000db12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db1e:	83 ec 04             	sub    esp,0x4
c000db21:	6a 68                	push   0x68
c000db23:	6a 00                	push   0x0
c000db25:	50                   	push   eax
c000db26:	e8 8f 2b ff ff       	call   c00006ba <memset>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db34:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db40:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db58:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db64:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db70:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7c:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db88:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db8b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba0:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaa:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbad:	e8 23 1c 01 00       	call   c001f7d5 <CPU::readCR3()>
c000dbb2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbbb:	83 ec 08             	sub    esp,0x8
c000dbbe:	50                   	push   eax
c000dbbf:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbc2:	50                   	push   eax
c000dbc3:	e8 e8 db ff ff       	call   c000b7b0 <GDTEntry::setBase(unsigned int)>
c000dbc8:	83 c4 10             	add    esp,0x10
c000dbcb:	83 ec 08             	sub    esp,0x8
c000dbce:	6a 68                	push   0x68
c000dbd0:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd3:	50                   	push   eax
c000dbd4:	e8 f3 db ff ff       	call   c000b7cc <GDTEntry::setLimit(unsigned int)>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbe0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe3:	83 e0 0f             	and    eax,0xf
c000dbe6:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbe9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbec:	83 c8 40             	or     eax,0x40
c000dbef:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf2:	e8 d7 6c 00 00       	call   c00148ce <thisCPU()>
c000dbf7:	05 78 01 00 00       	add    eax,0x178
c000dbfc:	83 ec 04             	sub    esp,0x4
c000dbff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc02:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc05:	50                   	push   eax
c000dc06:	e8 f5 db ff ff       	call   c000b800 <GDT::addEntry(GDTEntry)>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	89 c2                	mov    edx,eax
c000dc10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc13:	89 10                	mov    DWORD PTR [eax],edx
c000dc15:	e8 b4 6c 00 00       	call   c00148ce <thisCPU()>
c000dc1a:	05 78 01 00 00       	add    eax,0x178
c000dc1f:	83 ec 0c             	sub    esp,0xc
c000dc22:	50                   	push   eax
c000dc23:	e8 1c dc ff ff       	call   c000b844 <GDT::flush()>
c000dc28:	83 c4 10             	add    esp,0x10
c000dc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc30:	83 ec 08             	sub    esp,0x8
c000dc33:	50                   	push   eax
c000dc34:	68 dc 14 02 c0       	push   0xc00214dc
c000dc39:	e8 cd 15 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000dc3e:	83 c4 10             	add    esp,0x10
c000dc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc44:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc49:	c9                   	leave  
c000dc4a:	c3                   	ret    
c000dc4b:	90                   	nop

c000dc4c <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc4c:	55                   	push   ebp
c000dc4d:	57                   	push   edi
c000dc4e:	56                   	push   esi
c000dc4f:	53                   	push   ebx
c000dc50:	83 ec 0c             	sub    esp,0xc
c000dc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc5b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc6a:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc6f:	75 08                	jne    c000dc79 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc71:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc77:	eb 5e                	jmp    c000dcd7 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc7e:	75 3d                	jne    c000dcbd <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc80:	83 ec 0c             	sub    esp,0xc
c000dc83:	68 fa 14 02 c0       	push   0xc00214fa
c000dc88:	e8 7e 15 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000dc8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc95:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc9b:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc9d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dca1:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dca5:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dca9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcb4:	83 c4 1c             	add    esp,0x1c
c000dcb7:	5b                   	pop    ebx
c000dcb8:	5e                   	pop    esi
c000dcb9:	5f                   	pop    edi
c000dcba:	5d                   	pop    ebp
c000dcbb:	ff e0                	jmp    eax
c000dcbd:	89 c2                	mov    edx,eax
c000dcbf:	83 e2 fd             	and    edx,0xfffffffd
c000dcc2:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcc8:	74 a7                	je     c000dc71 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcca:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dccf:	83 e0 ef             	and    eax,0xffffffef
c000dcd2:	83 f8 08             	cmp    eax,0x8
c000dcd5:	76 9a                	jbe    c000dc71 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcd7:	83 c4 0c             	add    esp,0xc
c000dcda:	31 c0                	xor    eax,eax
c000dcdc:	5b                   	pop    ebx
c000dcdd:	5e                   	pop    esi
c000dcde:	5f                   	pop    edi
c000dcdf:	5d                   	pop    ebp
c000dce0:	c3                   	ret    
c000dce1:	90                   	nop

c000dce2 <ReservedFilename::isAtty()>:
c000dce2:	83 ec 18             	sub    esp,0x18
c000dce5:	68 07 15 02 c0       	push   0xc0021507
c000dcea:	e8 1c 15 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000dcef:	83 c4 10             	add    esp,0x10
c000dcf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcf6:	31 c0                	xor    eax,eax
c000dcf8:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dcff:	75 12                	jne    c000dd13 <ReservedFilename::isAtty()+0x31>
c000dd01:	83 ec 0c             	sub    esp,0xc
c000dd04:	68 1d 15 02 c0       	push   0xc002151d
c000dd09:	e8 fd 14 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	b0 01                	mov    al,0x1
c000dd13:	83 c4 0c             	add    esp,0xc
c000dd16:	c3                   	ret    
c000dd17:	90                   	nop

c000dd18 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd18:	55                   	push   ebp
c000dd19:	57                   	push   edi
c000dd1a:	56                   	push   esi
c000dd1b:	53                   	push   ebx
c000dd1c:	83 ec 0c             	sub    esp,0xc
c000dd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd23:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd27:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd32:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd36:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd3b:	75 08                	jne    c000dd45 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd3d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd43:	eb 63                	jmp    c000dda8 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd45:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd4a:	75 3d                	jne    c000dd89 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd4c:	83 ec 0c             	sub    esp,0xc
c000dd4f:	68 30 15 02 c0       	push   0xc0021530
c000dd54:	e8 b2 14 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000dd59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd67:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd69:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd6d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd71:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd75:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd7d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd80:	83 c4 1c             	add    esp,0x1c
c000dd83:	5b                   	pop    ebx
c000dd84:	5e                   	pop    esi
c000dd85:	5f                   	pop    edi
c000dd86:	5d                   	pop    ebp
c000dd87:	ff e0                	jmp    eax
c000dd89:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd8e:	75 04                	jne    c000dd94 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd90:	89 33                	mov    DWORD PTR [ebx],esi
c000dd92:	eb 14                	jmp    c000dda8 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd94:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd99:	74 a2                	je     c000dd3d <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dd9b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dda0:	83 e0 ef             	and    eax,0xffffffef
c000dda3:	83 f8 08             	cmp    eax,0x8
c000dda6:	76 95                	jbe    c000dd3d <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dda8:	83 c4 0c             	add    esp,0xc
c000ddab:	31 c0                	xor    eax,eax
c000ddad:	5b                   	pop    ebx
c000ddae:	5e                   	pop    esi
c000ddaf:	5f                   	pop    edi
c000ddb0:	5d                   	pop    ebp
c000ddb1:	c3                   	ret    

c000ddb2 <UnixFile::getFileDescriptor()>:
c000ddb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddb9:	c3                   	ret    

c000ddba <UnixFile::UnixFile(int)>:
c000ddba:	53                   	push   ebx
c000ddbb:	83 ec 18             	sub    esp,0x18
c000ddbe:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000ddc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc7:	89 10                	mov    DWORD PTR [eax],edx
c000ddc9:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddd1:	0f 8f 4d 01 00 00    	jg     c000df24 <UnixFile::UnixFile(int)+0x16a>
c000ddd7:	a1 20 3c 02 c0       	mov    eax,ds:0xc0023c20
c000dddc:	8d 50 01             	lea    edx,[eax+0x1]
c000dddf:	89 15 20 3c 02 c0    	mov    DWORD PTR ds:0xc0023c20,edx
c000dde5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dde9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddec:	83 ec 08             	sub    esp,0x8
c000ddef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddf3:	68 d8 48 02 c0       	push   0xc00248d8
c000ddf8:	e8 4d 1a 01 00       	call   c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ddfd:	83 c4 10             	add    esp,0x10
c000de00:	a0 d4 48 02 c0       	mov    al,ds:0xc00248d4
c000de05:	83 f0 01             	xor    eax,0x1
c000de08:	84 c0                	test   al,al
c000de0a:	0f 84 15 01 00 00    	je     c000df25 <UnixFile::UnixFile(int)+0x16b>
c000de10:	c6 05 d4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248d4,0x1
c000de17:	83 ec 0c             	sub    esp,0xc
c000de1a:	6a 0c                	push   0xc
c000de1c:	e8 b5 12 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000de21:	83 c4 10             	add    esp,0x10
c000de24:	89 c3                	mov    ebx,eax
c000de26:	83 ec 08             	sub    esp,0x8
c000de29:	68 03 ff ff 0f       	push   0xfffff03
c000de2e:	53                   	push   ebx
c000de2f:	e8 f6 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000de34:	83 c4 10             	add    esp,0x10
c000de37:	89 1d cc 48 02 c0    	mov    DWORD PTR ds:0xc00248cc,ebx
c000de3d:	83 ec 0c             	sub    esp,0xc
c000de40:	6a 0c                	push   0xc
c000de42:	e8 8f 12 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000de47:	83 c4 10             	add    esp,0x10
c000de4a:	89 c3                	mov    ebx,eax
c000de4c:	83 ec 08             	sub    esp,0x8
c000de4f:	68 01 ff ff 0f       	push   0xfffff01
c000de54:	53                   	push   ebx
c000de55:	e8 d0 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 1d d0 48 02 c0    	mov    DWORD PTR ds:0xc00248d0,ebx
c000de63:	83 ec 0c             	sub    esp,0xc
c000de66:	6a 0c                	push   0xc
c000de68:	e8 69 12 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	89 c3                	mov    ebx,eax
c000de72:	83 ec 08             	sub    esp,0x8
c000de75:	68 00 ff ff 0f       	push   0xfffff00
c000de7a:	53                   	push   ebx
c000de7b:	e8 aa 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000de80:	83 c4 10             	add    esp,0x10
c000de83:	89 1d c4 48 02 c0    	mov    DWORD PTR ds:0xc00248c4,ebx
c000de89:	83 ec 0c             	sub    esp,0xc
c000de8c:	6a 0c                	push   0xc
c000de8e:	e8 43 12 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000de93:	83 c4 10             	add    esp,0x10
c000de96:	89 c3                	mov    ebx,eax
c000de98:	83 ec 08             	sub    esp,0x8
c000de9b:	68 02 ff ff 0f       	push   0xfffff02
c000dea0:	53                   	push   ebx
c000dea1:	e8 84 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	89 1d c8 48 02 c0    	mov    DWORD PTR ds:0xc00248c8,ebx
c000deaf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000deb7:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000debc:	7f 67                	jg     c000df25 <UnixFile::UnixFile(int)+0x16b>
c000debe:	83 ec 0c             	sub    esp,0xc
c000dec1:	6a 0c                	push   0xc
c000dec3:	e8 0e 12 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000dec8:	83 c4 10             	add    esp,0x10
c000decb:	89 c3                	mov    ebx,eax
c000decd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded1:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ded6:	83 ec 08             	sub    esp,0x8
c000ded9:	50                   	push   eax
c000deda:	53                   	push   ebx
c000dedb:	e8 4a 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dee7:	89 1c 85 a0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb760],ebx
c000deee:	83 ec 0c             	sub    esp,0xc
c000def1:	6a 0c                	push   0xc
c000def3:	e8 de 11 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000def8:	83 c4 10             	add    esp,0x10
c000defb:	89 c3                	mov    ebx,eax
c000defd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df01:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df06:	83 ec 08             	sub    esp,0x8
c000df09:	50                   	push   eax
c000df0a:	53                   	push   ebx
c000df0b:	e8 1a 00 00 00       	call   c000df2a <ReservedFilename::ReservedFilename(int)>
c000df10:	83 c4 10             	add    esp,0x10
c000df13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df17:	89 1c 85 60 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7a0],ebx
c000df1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df22:	eb 93                	jmp    c000deb7 <UnixFile::UnixFile(int)+0xfd>
c000df24:	90                   	nop
c000df25:	83 c4 18             	add    esp,0x18
c000df28:	5b                   	pop    ebx
c000df29:	c3                   	ret    

c000df2a <ReservedFilename::ReservedFilename(int)>:
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df31:	83 ec 08             	sub    esp,0x8
c000df34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df38:	50                   	push   eax
c000df39:	e8 7c fe ff ff       	call   c000ddba <UnixFile::UnixFile(int)>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000df46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4a:	89 10                	mov    DWORD PTR [eax],edx
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df57:	90                   	nop
c000df58:	83 c4 0c             	add    esp,0xc
c000df5b:	c3                   	ret    

c000df5c <UnixFile::~UnixFile()>:
c000df5c:	83 ec 1c             	sub    esp,0x1c
c000df5f:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df68:	89 10                	mov    DWORD PTR [eax],edx
c000df6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df71:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df76:	7f 73                	jg     c000dfeb <UnixFile::~UnixFile()+0x8f>
c000df78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	68 d8 48 02 c0       	push   0xc00248d8
c000df88:	e8 91 19 01 00       	call   c001f91e <LinkedList<UnixFile>::getFirstElement()>
c000df8d:	83 c4 10             	add    esp,0x10
c000df90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	68 d8 48 02 c0       	push   0xc00248d8
c000df9c:	e8 85 19 01 00       	call   c001f926 <LinkedList<UnixFile>::removeFirst()>
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfa8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfac:	74 40                	je     c000dfee <UnixFile::~UnixFile()+0x92>
c000dfae:	83 ec 08             	sub    esp,0x8
c000dfb1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfb5:	68 d8 48 02 c0       	push   0xc00248d8
c000dfba:	e8 8b 18 01 00       	call   c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfc6:	8d 50 01             	lea    edx,[eax+0x1]
c000dfc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfcd:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfd2:	0f 94 c0             	sete   al
c000dfd5:	84 c0                	test   al,al
c000dfd7:	74 a7                	je     c000df80 <UnixFile::~UnixFile()+0x24>
c000dfd9:	83 ec 0c             	sub    esp,0xc
c000dfdc:	68 24 16 02 c0       	push   0xc0021624
c000dfe1:	e8 54 7a 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000dfe6:	83 c4 10             	add    esp,0x10
c000dfe9:	eb 95                	jmp    c000df80 <UnixFile::~UnixFile()+0x24>
c000dfeb:	90                   	nop
c000dfec:	eb 01                	jmp    c000dfef <UnixFile::~UnixFile()+0x93>
c000dfee:	90                   	nop
c000dfef:	90                   	nop
c000dff0:	83 c4 1c             	add    esp,0x1c
c000dff3:	c3                   	ret    

c000dff4 <UnixFile::~UnixFile()>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	83 ec 0c             	sub    esp,0xc
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 59 ff ff ff       	call   c000df5c <UnixFile::~UnixFile()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	83 ec 08             	sub    esp,0x8
c000e009:	6a 0c                	push   0xc
c000e00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00f:	e8 d1 10 00 00       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000e014:	83 c4 10             	add    esp,0x10
c000e017:	83 c4 0c             	add    esp,0xc
c000e01a:	c3                   	ret    
c000e01b:	90                   	nop

c000e01c <ReservedFilename::~ReservedFilename()>:
c000e01c:	83 ec 0c             	sub    esp,0xc
c000e01f:	ba 68 16 02 c0       	mov    edx,0xc0021668
c000e024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e028:	89 10                	mov    DWORD PTR [eax],edx
c000e02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	50                   	push   eax
c000e032:	e8 25 ff ff ff       	call   c000df5c <UnixFile::~UnixFile()>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	90                   	nop
c000e03b:	83 c4 0c             	add    esp,0xc
c000e03e:	c3                   	ret    
c000e03f:	90                   	nop

c000e040 <ReservedFilename::~ReservedFilename()>:
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	83 ec 0c             	sub    esp,0xc
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	e8 cd ff ff ff       	call   c000e01c <ReservedFilename::~ReservedFilename()>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	83 ec 08             	sub    esp,0x8
c000e055:	6a 0c                	push   0xc
c000e057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05b:	e8 85 10 00 00       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	83 c4 0c             	add    esp,0xc
c000e066:	c3                   	ret    

c000e067 <getFromFileDescriptor(int)>:
c000e067:	53                   	push   ebx
c000e068:	83 ec 08             	sub    esp,0x8
c000e06b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e06f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e075:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e07b:	7f 33                	jg     c000e0b0 <getFromFileDescriptor(int)+0x49>
c000e07d:	83 ec 0c             	sub    esp,0xc
c000e080:	68 d8 48 02 c0       	push   0xc00248d8
c000e085:	e8 94 18 01 00       	call   c001f91e <LinkedList<UnixFile>::getFirstElement()>
c000e08a:	83 c4 10             	add    esp,0x10
c000e08d:	85 c0                	test   eax,eax
c000e08f:	75 07                	jne    c000e098 <getFromFileDescriptor(int)+0x31>
c000e091:	31 c0                	xor    eax,eax
c000e093:	e9 98 00 00 00       	jmp    c000e130 <getFromFileDescriptor(int)+0xc9>
c000e098:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e09b:	0f 84 8f 00 00 00    	je     c000e130 <getFromFileDescriptor(int)+0xc9>
c000e0a1:	52                   	push   edx
c000e0a2:	52                   	push   edx
c000e0a3:	50                   	push   eax
c000e0a4:	68 d8 48 02 c0       	push   0xc00248d8
c000e0a9:	e8 1a 19 01 00       	call   c001f9c8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0ae:	eb da                	jmp    c000e08a <getFromFileDescriptor(int)+0x23>
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	68 3d 15 02 c0       	push   0xc002153d
c000e0b8:	e8 4e 11 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	a1 cc 48 02 c0       	mov    eax,ds:0xc00248cc
c000e0c5:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0cb:	74 63                	je     c000e130 <getFromFileDescriptor(int)+0xc9>
c000e0cd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0d3:	75 17                	jne    c000e0ec <getFromFileDescriptor(int)+0x85>
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	68 64 15 02 c0       	push   0xc0021564
c000e0dd:	e8 29 11 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e0e2:	a1 d0 48 02 c0       	mov    eax,ds:0xc00248d0
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	eb 44                	jmp    c000e130 <getFromFileDescriptor(int)+0xc9>
c000e0ec:	a1 c8 48 02 c0       	mov    eax,ds:0xc00248c8
c000e0f1:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e0f7:	74 37                	je     c000e130 <getFromFileDescriptor(int)+0xc9>
c000e0f9:	a1 c4 48 02 c0       	mov    eax,ds:0xc00248c4
c000e0fe:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e104:	74 2a                	je     c000e130 <getFromFileDescriptor(int)+0xc9>
c000e106:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e10c:	83 f8 08             	cmp    eax,0x8
c000e10f:	77 09                	ja     c000e11a <getFromFileDescriptor(int)+0xb3>
c000e111:	8b 04 85 a0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb760]
c000e118:	eb 16                	jmp    c000e130 <getFromFileDescriptor(int)+0xc9>
c000e11a:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e120:	83 fb 08             	cmp    ebx,0x8
c000e123:	0f 87 68 ff ff ff    	ja     c000e091 <getFromFileDescriptor(int)+0x2a>
c000e129:	8b 04 9d 60 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7a0]
c000e130:	83 c4 08             	add    esp,0x8
c000e133:	5b                   	pop    ebx
c000e134:	c3                   	ret    

c000e135 <__static_initialization_and_destruction_0(int, int)>:
c000e135:	83 ec 0c             	sub    esp,0xc
c000e138:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e13d:	75 34                	jne    c000e173 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e13f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e147:	75 2a                	jne    c000e173 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e149:	83 ec 0c             	sub    esp,0xc
c000e14c:	68 d8 48 02 c0       	push   0xc00248d8
c000e151:	e8 9c 16 01 00       	call   c001f7f2 <LinkedList<UnixFile>::LinkedList()>
c000e156:	83 c4 10             	add    esp,0x10
c000e159:	83 ec 04             	sub    esp,0x4
c000e15c:	68 9c 3b 02 c0       	push   0xc0023b9c
c000e161:	68 d8 48 02 c0       	push   0xc00248d8
c000e166:	68 f0 f7 01 c0       	push   0xc001f7f0
c000e16b:	e8 f1 0e 00 00       	call   c000f061 <__cxa_atexit>
c000e170:	83 c4 10             	add    esp,0x10
c000e173:	90                   	nop
c000e174:	83 c4 0c             	add    esp,0xc
c000e177:	c3                   	ret    

c000e178 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	83 ec 08             	sub    esp,0x8
c000e17e:	68 ff ff 00 00       	push   0xffff
c000e183:	6a 01                	push   0x1
c000e185:	e8 ab ff ff ff       	call   c000e135 <__static_initialization_and_destruction_0(int, int)>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	83 c4 0c             	add    esp,0xc
c000e190:	c3                   	ret    
c000e191:	90                   	nop

c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e192:	53                   	push   ebx
c000e193:	8b 15 28 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c28
c000e199:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1a1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1a7:	89 c8                	mov    eax,ecx
c000e1a9:	d1 e8                	shr    eax,1
c000e1ab:	01 d0                	add    eax,edx
c000e1ad:	83 e1 01             	and    ecx,0x1
c000e1b0:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1b2:	75 09                	jne    c000e1bd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1b4:	83 e2 f0             	and    edx,0xfffffff0
c000e1b7:	09 da                	or     edx,ebx
c000e1b9:	88 10                	mov    BYTE PTR [eax],dl
c000e1bb:	5b                   	pop    ebx
c000e1bc:	c3                   	ret    
c000e1bd:	c1 e3 04             	shl    ebx,0x4
c000e1c0:	83 e2 0f             	and    edx,0xf
c000e1c3:	09 da                	or     edx,ebx
c000e1c5:	88 10                	mov    BYTE PTR [eax],dl
c000e1c7:	5b                   	pop    ebx
c000e1c8:	c3                   	ret    

c000e1c9 <Virt::getPageState(unsigned long)>:
c000e1c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1cd:	8b 0d 28 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c28
c000e1d3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1d9:	89 d0                	mov    eax,edx
c000e1db:	d1 e8                	shr    eax,1
c000e1dd:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1e0:	88 c8                	mov    al,cl
c000e1e2:	c0 e8 04             	shr    al,0x4
c000e1e5:	83 e2 01             	and    edx,0x1
c000e1e8:	75 05                	jne    c000e1ef <Virt::getPageState(unsigned long)+0x26>
c000e1ea:	88 c8                	mov    al,cl
c000e1ec:	83 e0 0f             	and    eax,0xf
c000e1ef:	c3                   	ret    

c000e1f0 <Virt::allocateKernelVirtualPages(int)>:
c000e1f0:	55                   	push   ebp
c000e1f1:	31 ed                	xor    ebp,ebp
c000e1f3:	57                   	push   edi
c000e1f4:	56                   	push   esi
c000e1f5:	53                   	push   ebx
c000e1f6:	31 db                	xor    ebx,ebx
c000e1f8:	83 ec 1c             	sub    esp,0x1c
c000e1fb:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c000e201:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e205:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e20a:	57                   	push   edi
c000e20b:	e8 b9 ff ff ff       	call   c000e1c9 <Virt::getPageState(unsigned long)>
c000e210:	5a                   	pop    edx
c000e211:	84 c0                	test   al,al
c000e213:	75 3a                	jne    c000e24f <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e215:	85 db                	test   ebx,ebx
c000e217:	75 02                	jne    c000e21b <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e219:	89 fd                	mov    ebp,edi
c000e21b:	43                   	inc    ebx
c000e21c:	39 f3                	cmp    ebx,esi
c000e21e:	74 5a                	je     c000e27a <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e220:	47                   	inc    edi
c000e221:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e227:	76 31                	jbe    c000e25a <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e229:	c7 05 24 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c24,0xc8000
c000e233:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e238:	75 28                	jne    c000e262 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e23a:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e23f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e244:	57                   	push   edi
c000e245:	e8 7f ff ff ff       	call   c000e1c9 <Virt::getPageState(unsigned long)>
c000e24a:	5a                   	pop    edx
c000e24b:	84 c0                	test   al,al
c000e24d:	74 c6                	je     c000e215 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e24f:	47                   	inc    edi
c000e250:	31 db                	xor    ebx,ebx
c000e252:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e258:	77 cf                	ja     c000e229 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e25a:	89 3d 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edi
c000e260:	eb a8                	jmp    c000e20a <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e262:	83 ec 0c             	sub    esp,0xc
c000e265:	68 7c 16 02 c0       	push   0xc002167c
c000e26a:	e8 cb 77 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e26f:	8b 3d 24 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c24
c000e275:	83 c4 10             	add    esp,0x10
c000e278:	eb 90                	jmp    c000e20a <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e27a:	89 2d 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,ebp
c000e280:	4b                   	dec    ebx
c000e281:	74 5f                	je     c000e2e2 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e283:	85 f6                	test   esi,esi
c000e285:	74 3d                	je     c000e2c4 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e287:	89 e8                	mov    eax,ebp
c000e289:	31 db                	xor    ebx,ebx
c000e28b:	8d 7e ff             	lea    edi,[esi-0x1]
c000e28e:	eb 14                	jmp    c000e2a4 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e290:	6a 01                	push   0x1
c000e292:	43                   	inc    ebx
c000e293:	50                   	push   eax
c000e294:	e8 f9 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e299:	58                   	pop    eax
c000e29a:	39 f3                	cmp    ebx,esi
c000e29c:	5a                   	pop    edx
c000e29d:	74 25                	je     c000e2c4 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e29f:	a1 24 3c 02 c0       	mov    eax,ds:0xc0023c24
c000e2a4:	8d 50 01             	lea    edx,[eax+0x1]
c000e2a7:	85 db                	test   ebx,ebx
c000e2a9:	89 15 24 3c 02 c0    	mov    DWORD PTR ds:0xc0023c24,edx
c000e2af:	74 20                	je     c000e2d1 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2b1:	39 df                	cmp    edi,ebx
c000e2b3:	75 db                	jne    c000e290 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2b5:	6a 03                	push   0x3
c000e2b7:	43                   	inc    ebx
c000e2b8:	50                   	push   eax
c000e2b9:	e8 d4 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2be:	59                   	pop    ecx
c000e2bf:	39 f3                	cmp    ebx,esi
c000e2c1:	58                   	pop    eax
c000e2c2:	75 db                	jne    c000e29f <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2c4:	83 c4 1c             	add    esp,0x1c
c000e2c7:	89 e8                	mov    eax,ebp
c000e2c9:	c1 e0 0c             	shl    eax,0xc
c000e2cc:	5b                   	pop    ebx
c000e2cd:	5e                   	pop    esi
c000e2ce:	5f                   	pop    edi
c000e2cf:	5d                   	pop    ebp
c000e2d0:	c3                   	ret    
c000e2d1:	6a 02                	push   0x2
c000e2d3:	bb 01 00 00 00       	mov    ebx,0x1
c000e2d8:	50                   	push   eax
c000e2d9:	e8 b4 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2de:	58                   	pop    eax
c000e2df:	5a                   	pop    edx
c000e2e0:	eb bd                	jmp    c000e29f <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2e2:	6a 04                	push   0x4
c000e2e4:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2e7:	55                   	push   ebp
c000e2e8:	a3 24 3c 02 c0       	mov    ds:0xc0023c24,eax
c000e2ed:	e8 a0 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2f2:	59                   	pop    ecx
c000e2f3:	5b                   	pop    ebx
c000e2f4:	89 e8                	mov    eax,ebp
c000e2f6:	c1 e0 0c             	shl    eax,0xc
c000e2f9:	83 c4 1c             	add    esp,0x1c
c000e2fc:	5b                   	pop    ebx
c000e2fd:	5e                   	pop    esi
c000e2fe:	5f                   	pop    edi
c000e2ff:	5d                   	pop    ebp
c000e300:	c3                   	ret    

c000e301 <Virt::virtualMemorySetup()>:
c000e301:	53                   	push   ebx
c000e302:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e307:	83 ec 08             	sub    esp,0x8
c000e30a:	6a 0f                	push   0xf
c000e30c:	53                   	push   ebx
c000e30d:	43                   	inc    ebx
c000e30e:	e8 7f fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e313:	59                   	pop    ecx
c000e314:	58                   	pop    eax
c000e315:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e31b:	75 ed                	jne    c000e30a <Virt::virtualMemorySetup()+0x9>
c000e31d:	50                   	push   eax
c000e31e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e323:	50                   	push   eax
c000e324:	68 00 00 00 c8       	push   0xc8000000
c000e329:	68 03 18 02 c0       	push   0xc0021803
c000e32e:	e8 d8 0e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e333:	58                   	pop    eax
c000e334:	5a                   	pop    edx
c000e335:	68 00 f0 ff ef       	push   0xeffff000
c000e33a:	68 17 18 02 c0       	push   0xc0021817
c000e33f:	e8 c7 0e 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e344:	83 c4 10             	add    esp,0x10
c000e347:	50                   	push   eax
c000e348:	50                   	push   eax
c000e349:	6a 00                	push   0x0
c000e34b:	53                   	push   ebx
c000e34c:	43                   	inc    ebx
c000e34d:	e8 40 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e352:	83 c4 10             	add    esp,0x10
c000e355:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e35b:	75 ea                	jne    c000e347 <Virt::virtualMemorySetup()+0x46>
c000e35d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e362:	51                   	push   ecx
c000e363:	51                   	push   ecx
c000e364:	6a 0f                	push   0xf
c000e366:	53                   	push   ebx
c000e367:	43                   	inc    ebx
c000e368:	e8 25 fe ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e36d:	83 c4 10             	add    esp,0x10
c000e370:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e376:	75 ea                	jne    c000e362 <Virt::virtualMemorySetup()+0x61>
c000e378:	83 c4 08             	add    esp,0x8
c000e37b:	5b                   	pop    ebx
c000e37c:	c3                   	ret    

c000e37d <Virt::getAKernelVAS()>:
c000e37d:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e382:	c3                   	ret    

c000e383 <Virt::setupPageSwapping(int)>:
c000e383:	57                   	push   edi
c000e384:	56                   	push   esi
c000e385:	53                   	push   ebx
c000e386:	83 ec 1c             	sub    esp,0x1c
c000e389:	68 14 01 00 00       	push   0x114
c000e38e:	e8 43 0d 00 00       	call   c000f0d6 <operator new(unsigned long)>
c000e393:	83 c4 0c             	add    esp,0xc
c000e396:	8b 3d d4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bd4
c000e39c:	89 c6                	mov    esi,eax
c000e39e:	57                   	push   edi
c000e39f:	68 2b 18 02 c0       	push   0xc002182b
c000e3a4:	50                   	push   eax
c000e3a5:	e8 98 13 00 00       	call   c000f742 <File::File(char const*, Process*)>
c000e3aa:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3ad:	e8 6c 15 00 00       	call   c000f91e <File::unlink()>
c000e3b2:	58                   	pop    eax
c000e3b3:	5a                   	pop    edx
c000e3b4:	6a 12                	push   0x12
c000e3b6:	56                   	push   esi
c000e3b7:	e8 ea 13 00 00       	call   c000f7a6 <File::open(FileOpenMode)>
c000e3bc:	83 c4 10             	add    esp,0x10
c000e3bf:	85 c0                	test   eax,eax
c000e3c1:	0f 85 b6 00 00 00    	jne    c000e47d <Virt::setupPageSwapping(int)+0xfa>
c000e3c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3d3:	c1 e3 08             	shl    ebx,0x8
c000e3d6:	83 ec 0c             	sub    esp,0xc
c000e3d9:	c1 fb 04             	sar    ebx,0x4
c000e3dc:	68 00 00 01 00       	push   0x10000
c000e3e1:	e8 f3 db ff ff       	call   c000bfd9 <malloc>
c000e3e6:	83 c4 0c             	add    esp,0xc
c000e3e9:	89 c7                	mov    edi,eax
c000e3eb:	68 00 00 01 00       	push   0x10000
c000e3f0:	6a 00                	push   0x0
c000e3f2:	50                   	push   eax
c000e3f3:	e8 c2 22 ff ff       	call   c00006ba <memset>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	4b                   	dec    ebx
c000e3fc:	83 fb ff             	cmp    ebx,0xffffffff
c000e3ff:	74 4a                	je     c000e44b <Virt::setupPageSwapping(int)+0xc8>
c000e401:	83 ec 0c             	sub    esp,0xc
c000e404:	8b 06                	mov    eax,DWORD PTR [esi]
c000e406:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e40a:	52                   	push   edx
c000e40b:	57                   	push   edi
c000e40c:	6a 00                	push   0x0
c000e40e:	68 00 00 01 00       	push   0x10000
c000e413:	56                   	push   esi
c000e414:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e417:	83 c4 20             	add    esp,0x20
c000e41a:	85 c0                	test   eax,eax
c000e41c:	75 4d                	jne    c000e46b <Virt::setupPageSwapping(int)+0xe8>
c000e41e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e422:	3d 00 00 01 00       	cmp    eax,0x10000
c000e427:	74 d2                	je     c000e3fb <Virt::setupPageSwapping(int)+0x78>
c000e429:	52                   	push   edx
c000e42a:	4b                   	dec    ebx
c000e42b:	52                   	push   edx
c000e42c:	50                   	push   eax
c000e42d:	68 7e 18 02 c0       	push   0xc002187e
c000e432:	e8 d4 0d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e437:	c7 04 24 87 18 02 c0 	mov    DWORD PTR [esp],0xc0021887
c000e43e:	e8 f7 75 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e443:	83 c4 10             	add    esp,0x10
c000e446:	83 fb ff             	cmp    ebx,0xffffffff
c000e449:	75 b6                	jne    c000e401 <Virt::setupPageSwapping(int)+0x7e>
c000e44b:	83 ec 0c             	sub    esp,0xc
c000e44e:	56                   	push   esi
c000e44f:	e8 b0 13 00 00       	call   c000f804 <File::close()>
c000e454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e457:	e8 9d db ff ff       	call   c000bff9 <rfree>
c000e45c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e45e:	89 34 24             	mov    DWORD PTR [esp],esi
c000e461:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e464:	83 c4 20             	add    esp,0x20
c000e467:	5b                   	pop    ebx
c000e468:	5e                   	pop    esi
c000e469:	5f                   	pop    edi
c000e46a:	c3                   	ret    
c000e46b:	51                   	push   ecx
c000e46c:	51                   	push   ecx
c000e46d:	50                   	push   eax
c000e46e:	68 66 18 02 c0       	push   0xc0021866
c000e473:	e8 93 0d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	eb a1                	jmp    c000e41e <Virt::setupPageSwapping(int)+0x9b>
c000e47d:	53                   	push   ebx
c000e47e:	53                   	push   ebx
c000e47f:	50                   	push   eax
c000e480:	68 42 18 02 c0       	push   0xc0021842
c000e485:	e8 81 0d 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e48a:	c7 04 24 4b 18 02 c0 	mov    DWORD PTR [esp],0xc002184b
c000e491:	e8 a4 75 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e496:	83 c4 10             	add    esp,0x10
c000e499:	e9 29 ff ff ff       	jmp    c000e3c7 <Virt::setupPageSwapping(int)+0x44>

c000e49e <VAS::VAS()>:
c000e49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ad:	a3 e4 48 02 c0       	mov    ds:0xc00248e4,eax
c000e4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b6:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4be:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c5:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4cc:	90                   	nop
c000e4cd:	c3                   	ret    

c000e4ce <VAS::VAS(VAS*)>:
c000e4ce:	83 ec 0c             	sub    esp,0xc
c000e4d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4dc:	83 ec 0c             	sub    esp,0xc
c000e4df:	68 9c 16 02 c0       	push   0xc002169c
c000e4e4:	e8 51 75 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e4e9:	83 c4 10             	add    esp,0x10
c000e4ec:	90                   	nop
c000e4ed:	83 c4 0c             	add    esp,0xc
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f6:	89 c2                	mov    edx,eax
c000e4f8:	c1 ea 16             	shr    edx,0x16
c000e4fb:	c1 e8 0a             	shr    eax,0xa
c000e4fe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e503:	19 c9                	sbb    ecx,ecx
c000e505:	25 fc 0f 00 00       	and    eax,0xffc
c000e50a:	c1 e2 0c             	shl    edx,0xc
c000e50d:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e513:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e51a:	01 d0                	add    eax,edx
c000e51c:	c3                   	ret    
c000e51d:	90                   	nop

c000e51e <VAS::getPageTableEntry(unsigned long)>:
c000e51e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e522:	89 ca                	mov    edx,ecx
c000e524:	c1 ea 16             	shr    edx,0x16
c000e527:	c1 e9 0a             	shr    ecx,0xa
c000e52a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e530:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e536:	c1 e0 0c             	shl    eax,0xc
c000e539:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e53c:	c3                   	ret    

c000e53d <Virt::freeKernelVirtualPages(unsigned long)>:
c000e53d:	57                   	push   edi
c000e53e:	56                   	push   esi
c000e53f:	be 01 00 00 00       	mov    esi,0x1
c000e544:	53                   	push   ebx
c000e545:	83 ec 10             	sub    esp,0x10
c000e548:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e54c:	c1 eb 0c             	shr    ebx,0xc
c000e54f:	eb 3e                	jmp    c000e58f <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e551:	e8 27 fe ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c000e556:	51                   	push   ecx
c000e557:	51                   	push   ecx
c000e558:	57                   	push   edi
c000e559:	50                   	push   eax
c000e55a:	e8 bf ff ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e566:	8b 00                	mov    eax,DWORD PTR [eax]
c000e568:	f6 c4 04             	test   ah,0x4
c000e56b:	75 5f                	jne    c000e5cc <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e56d:	80 fa 04             	cmp    dl,0x4
c000e570:	74 78                	je     c000e5ea <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e572:	80 fa 02             	cmp    dl,0x2
c000e575:	0f 84 88 00 00 00    	je     c000e603 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e57b:	80 fa 03             	cmp    dl,0x3
c000e57e:	0f 84 ac 00 00 00    	je     c000e630 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e584:	fe ca                	dec    dl
c000e586:	0f 84 92 00 00 00    	je     c000e61e <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e58c:	43                   	inc    ebx
c000e58d:	31 f6                	xor    esi,esi
c000e58f:	53                   	push   ebx
c000e590:	e8 34 fc ff ff       	call   c000e1c9 <Virt::getPageState(unsigned long)>
c000e595:	5f                   	pop    edi
c000e596:	89 df                	mov    edi,ebx
c000e598:	c1 e7 0c             	shl    edi,0xc
c000e59b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e59f:	84 c0                	test   al,al
c000e5a1:	75 ae                	jne    c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5a3:	83 ec 0c             	sub    esp,0xc
c000e5a6:	68 8d 18 02 c0       	push   0xc002188d
c000e5ab:	e8 8a 74 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e5b0:	e8 c8 fd ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c000e5b5:	5a                   	pop    edx
c000e5b6:	59                   	pop    ecx
c000e5b7:	57                   	push   edi
c000e5b8:	50                   	push   eax
c000e5b9:	e8 60 ff ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c000e5be:	83 c4 10             	add    esp,0x10
c000e5c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5c7:	f6 c4 04             	test   ah,0x4
c000e5ca:	74 c0                	je     c000e58c <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5cc:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5d0:	83 ec 0c             	sub    esp,0xc
c000e5d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5d8:	50                   	push   eax
c000e5d9:	e8 44 df ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e5de:	83 c4 10             	add    esp,0x10
c000e5e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5e5:	80 fa 04             	cmp    dl,0x4
c000e5e8:	75 88                	jne    c000e572 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5ea:	89 f0                	mov    eax,esi
c000e5ec:	84 c0                	test   al,al
c000e5ee:	75 46                	jne    c000e636 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5f0:	c7 44 24 20 c0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216c0
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	5b                   	pop    ebx
c000e5fc:	5e                   	pop    esi
c000e5fd:	5f                   	pop    edi
c000e5fe:	e9 37 74 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c000e603:	89 f0                	mov    eax,esi
c000e605:	84 c0                	test   al,al
c000e607:	75 15                	jne    c000e61e <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e609:	83 ec 0c             	sub    esp,0xc
c000e60c:	68 a9 18 02 c0       	push   0xc00218a9
c000e611:	e8 24 74 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e616:	83 c4 10             	add    esp,0x10
c000e619:	e9 6e ff ff ff       	jmp    c000e58c <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e61e:	50                   	push   eax
c000e61f:	50                   	push   eax
c000e620:	6a 00                	push   0x0
c000e622:	53                   	push   ebx
c000e623:	e8 6a fb ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e628:	83 c4 10             	add    esp,0x10
c000e62b:	e9 5c ff ff ff       	jmp    c000e58c <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e630:	89 f0                	mov    eax,esi
c000e632:	84 c0                	test   al,al
c000e634:	75 14                	jne    c000e64a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e636:	52                   	push   edx
c000e637:	52                   	push   edx
c000e638:	6a 00                	push   0x0
c000e63a:	53                   	push   ebx
c000e63b:	e8 52 fb ff ff       	call   c000e192 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e640:	83 c4 10             	add    esp,0x10
c000e643:	83 c4 10             	add    esp,0x10
c000e646:	5b                   	pop    ebx
c000e647:	5e                   	pop    esi
c000e648:	5f                   	pop    edi
c000e649:	c3                   	ret    
c000e64a:	c7 44 24 20 c5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218c5
c000e652:	83 c4 10             	add    esp,0x10
c000e655:	5b                   	pop    ebx
c000e656:	5e                   	pop    esi
c000e657:	5f                   	pop    edi
c000e658:	e9 dd 73 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c000e65d:	90                   	nop

c000e65e <VAS::freeAllocatedPages(unsigned long)>:
c000e65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e662:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e666:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e66a:	74 09                	je     c000e675 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e66c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e670:	e9 c8 fe ff ff       	jmp    c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c000e675:	c7 44 24 04 e4 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216e4
c000e67d:	e9 89 0b 00 00       	jmp    c000f20b <Dbg::kprintf(char const*, ...)>

c000e682 <VAS::virtualToPhysical(unsigned long)>:
c000e682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e686:	50                   	push   eax
c000e687:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e68b:	52                   	push   edx
c000e68c:	e8 8d fe ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c000e691:	59                   	pop    ecx
c000e692:	8b 00                	mov    eax,DWORD PTR [eax]
c000e694:	5a                   	pop    edx
c000e695:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e69a:	c3                   	ret    
c000e69b:	90                   	nop

c000e69c <VAS::reflagRange(unsigned long, int, int, int)>:
c000e69c:	55                   	push   ebp
c000e69d:	57                   	push   edi
c000e69e:	56                   	push   esi
c000e69f:	53                   	push   ebx
c000e6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6a8:	89 c3                	mov    ebx,eax
c000e6aa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6ae:	c1 e3 0c             	shl    ebx,0xc
c000e6b1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6b5:	01 f3                	add    ebx,esi
c000e6b7:	85 c0                	test   eax,eax
c000e6b9:	7e 1f                	jle    c000e6da <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6bb:	56                   	push   esi
c000e6bc:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6c2:	55                   	push   ebp
c000e6c3:	e8 56 fe ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c000e6c8:	5a                   	pop    edx
c000e6c9:	59                   	pop    ecx
c000e6ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6cc:	21 f9                	and    ecx,edi
c000e6ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6d2:	09 d1                	or     ecx,edx
c000e6d4:	39 f3                	cmp    ebx,esi
c000e6d6:	89 08                	mov    DWORD PTR [eax],ecx
c000e6d8:	75 e1                	jne    c000e6bb <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6da:	5b                   	pop    ebx
c000e6db:	5e                   	pop    esi
c000e6dc:	5f                   	pop    edi
c000e6dd:	5d                   	pop    ebp
c000e6de:	c3                   	ret    
c000e6df:	90                   	nop

c000e6e0 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	e8 e6 61 00 00       	call   c00148ce <thisCPU()>
c000e6e8:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6ef:	75 04                	jne    c000e6f5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6f1:	83 c4 0c             	add    esp,0xc
c000e6f4:	c3                   	ret    
c000e6f5:	83 ec 0c             	sub    esp,0xc
c000e6f8:	68 80 00 00 00       	push   0x80
c000e6fd:	6a ff                	push   0xffffffff
c000e6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e703:	50                   	push   eax
c000e704:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e708:	52                   	push   edx
c000e709:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e70d:	51                   	push   ecx
c000e70e:	e8 89 ff ff ff       	call   c000e69c <VAS::reflagRange(unsigned long, int, int, int)>
c000e713:	83 c4 20             	add    esp,0x20
c000e716:	83 c4 0c             	add    esp,0xc
c000e719:	c3                   	ret    

c000e71a <VAS::mapOtherVASIn(bool, VAS*)>:
c000e71a:	83 ec 0c             	sub    esp,0xc
c000e71d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e721:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e726:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e72d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e730:	19 c0                	sbb    eax,eax
c000e732:	83 ca 03             	or     edx,0x3
c000e735:	83 e0 fc             	and    eax,0xfffffffc
c000e738:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e73f:	e8 91 10 01 00       	call   c001f7d5 <CPU::readCR3()>
c000e744:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e748:	83 c4 0c             	add    esp,0xc
c000e74b:	e9 97 10 01 00       	jmp    c001f7e7 <CPU::writeCR3(unsigned long)>

c000e750 <VAS::~VAS()>:
c000e750:	83 ec 2c             	sub    esp,0x2c
c000e753:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e75b:	e8 e3 a2 00 00       	call   c0018a43 <lockScheduler()>
c000e760:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e765:	8b 00                	mov    eax,DWORD PTR [eax]
c000e767:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e76a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e770:	83 ec 04             	sub    esp,0x4
c000e773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e777:	6a 01                	push   0x1
c000e779:	50                   	push   eax
c000e77a:	e8 9b ff ff ff       	call   c000e71a <VAS::mapOtherVASIn(bool, VAS*)>
c000e77f:	83 c4 10             	add    esp,0x10
c000e782:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e78a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e792:	0f 8f d7 00 00 00    	jg     c000e86f <VAS::~VAS()+0x11f>
c000e798:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e79c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e79f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7a3:	c1 e2 02             	shl    edx,0x2
c000e7a6:	01 d0                	add    eax,edx
c000e7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b2:	83 e0 01             	and    eax,0x1
c000e7b5:	0f 84 ab 00 00 00    	je     c000e866 <VAS::~VAS()+0x116>
c000e7bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7c3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7cb:	7f 75                	jg     c000e842 <VAS::~VAS()+0xf2>
c000e7cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7d1:	c1 e0 0a             	shl    eax,0xa
c000e7d4:	89 c2                	mov    edx,eax
c000e7d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7da:	01 d0                	add    eax,edx
c000e7dc:	c1 e0 0c             	shl    eax,0xc
c000e7df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7ed:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7f3:	83 ec 04             	sub    esp,0x4
c000e7f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e7fa:	6a 01                	push   0x1
c000e7fc:	50                   	push   eax
c000e7fd:	e8 f0 fc ff ff       	call   c000e4f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e802:	83 c4 10             	add    esp,0x10
c000e805:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e809:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e80d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e80f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e817:	25 01 04 00 00       	and    eax,0x401
c000e81c:	3d 01 04 00 00       	cmp    eax,0x401
c000e821:	75 19                	jne    c000e83c <VAS::~VAS()+0xec>
c000e823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e827:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	50                   	push   eax
c000e830:	e8 ed dc ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e83c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e840:	eb 81                	jmp    c000e7c3 <VAS::~VAS()+0x73>
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	25 00 04 00 00       	and    eax,0x400
c000e84b:	74 19                	je     c000e866 <VAS::~VAS()+0x116>
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	50                   	push   eax
c000e85a:	e8 c3 dc ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e866:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e86a:	e9 1b ff ff ff       	jmp    c000e78a <VAS::~VAS()+0x3a>
c000e86f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e873:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	50                   	push   eax
c000e87a:	e8 be fc ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e886:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e889:	83 ec 0c             	sub    esp,0xc
c000e88c:	50                   	push   eax
c000e88d:	e8 90 dc ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e89d:	c1 e0 02             	shl    eax,0x2
c000e8a0:	83 ec 08             	sub    esp,0x8
c000e8a3:	50                   	push   eax
c000e8a4:	68 08 17 02 c0       	push   0xc0021708
c000e8a9:	e8 5d 09 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e8ae:	83 c4 10             	add    esp,0x10
c000e8b1:	e8 8f a1 00 00       	call   c0018a45 <unlockScheduler()>
c000e8b6:	90                   	nop
c000e8b7:	83 c4 2c             	add    esp,0x2c
c000e8ba:	c3                   	ret    
c000e8bb:	90                   	nop

c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8bc:	55                   	push   ebp
c000e8bd:	57                   	push   edi
c000e8be:	56                   	push   esi
c000e8bf:	53                   	push   ebx
c000e8c0:	83 ec 1c             	sub    esp,0x1c
c000e8c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8cb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8d1:	77 08                	ja     c000e8db <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8d3:	0f 20 d8             	mov    eax,cr3
c000e8d6:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8d9:	75 49                	jne    c000e924 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8df:	09 d8                	or     eax,ebx
c000e8e1:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8e6:	75 59                	jne    c000e941 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8e8:	89 de                	mov    esi,ebx
c000e8ea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8ed:	c1 ee 16             	shr    esi,0x16
c000e8f0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e8f7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e8fb:	74 56                	je     c000e953 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e8fd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e903:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e907:	c1 eb 0a             	shr    ebx,0xa
c000e90a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e90e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e914:	09 d0                	or     eax,edx
c000e916:	c1 e6 0c             	shl    esi,0xc
c000e919:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e91c:	83 c4 1c             	add    esp,0x1c
c000e91f:	5b                   	pop    ebx
c000e920:	5e                   	pop    esi
c000e921:	5f                   	pop    edi
c000e922:	5d                   	pop    ebp
c000e923:	c3                   	ret    
c000e924:	83 ec 0c             	sub    esp,0xc
c000e927:	68 28 17 02 c0       	push   0xc0021728
c000e92c:	e8 da 08 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e938:	09 d8                	or     eax,ebx
c000e93a:	a9 ff 0f 00 00       	test   eax,0xfff
c000e93f:	74 a7                	je     c000e8e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e941:	83 ec 0c             	sub    esp,0xc
c000e944:	68 90 17 02 c0       	push   0xc0021790
c000e949:	e8 ec 70 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000e94e:	83 c4 10             	add    esp,0x10
c000e951:	eb 95                	jmp    c000e8e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e957:	e8 53 dc ff ff       	call   c000c5af <Phys::allocatePage()>
c000e95c:	89 c5                	mov    ebp,eax
c000e95e:	e8 1a fa ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c000e963:	83 ec 0c             	sub    esp,0xc
c000e966:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e96a:	6a 01                	push   0x1
c000e96c:	e8 7f f8 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c000e971:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e978:	6a 01                	push   0x1
c000e97a:	50                   	push   eax
c000e97b:	55                   	push   ebp
c000e97c:	81 cd 07 04 00 00    	or     ebp,0x407
c000e982:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e986:	51                   	push   ecx
c000e987:	e8 22 02 00 00       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e98c:	83 c4 1c             	add    esp,0x1c
c000e98f:	68 00 10 00 00       	push   0x1000
c000e994:	6a 00                	push   0x0
c000e996:	50                   	push   eax
c000e997:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e99b:	e8 1a 1d ff ff       	call   c00006ba <memset>
c000e9a0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9a4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9a7:	e8 91 fb ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c000e9ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9b0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b3:	83 c4 10             	add    esp,0x10
c000e9b6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9b9:	e9 3f ff ff ff       	jmp    c000e8fd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9be <VAS::allocatePages(int, int)>:
c000e9be:	55                   	push   ebp
c000e9bf:	57                   	push   edi
c000e9c0:	56                   	push   esi
c000e9c1:	53                   	push   ebx
c000e9c2:	83 ec 1c             	sub    esp,0x1c
c000e9c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9c9:	e8 00 5f 00 00       	call   c00148ce <thisCPU()>
c000e9ce:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9d4:	83 e0 01             	and    eax,0x1
c000e9d7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9db:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9df:	0f 85 d5 00 00 00    	jne    c000eaba <VAS::allocatePages(int, int)+0xfc>
c000e9e5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ec:	85 c0                	test   eax,eax
c000e9ee:	0f 84 aa 00 00 00    	je     c000ea9e <VAS::allocatePages(int, int)+0xe0>
c000e9f4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e9f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9fc:	c1 e6 0c             	shl    esi,0xc
c000e9ff:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea03:	01 de                	add    esi,ebx
c000ea05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea09:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea0f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea12:	85 c0                	test   eax,eax
c000ea14:	7e 25                	jle    c000ea3b <VAS::allocatePages(int, int)+0x7d>
c000ea16:	e8 94 db ff ff       	call   c000c5af <Phys::allocatePage()>
c000ea1b:	55                   	push   ebp
c000ea1c:	53                   	push   ebx
c000ea1d:	50                   	push   eax
c000ea1e:	57                   	push   edi
c000ea1f:	e8 98 fe ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea24:	83 c4 10             	add    esp,0x10
c000ea27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea2c:	74 03                	je     c000ea31 <VAS::allocatePages(int, int)+0x73>
c000ea2e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea31:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea37:	39 de                	cmp    esi,ebx
c000ea39:	75 db                	jne    c000ea16 <VAS::allocatePages(int, int)+0x58>
c000ea3b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea40:	74 3f                	je     c000ea81 <VAS::allocatePages(int, int)+0xc3>
c000ea42:	c1 ee 0a             	shr    esi,0xa
c000ea45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea49:	c1 eb 0a             	shr    ebx,0xa
c000ea4c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea52:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea58:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea5e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea64:	39 f3                	cmp    ebx,esi
c000ea66:	77 0d                	ja     c000ea75 <VAS::allocatePages(int, int)+0xb7>
c000ea68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea71:	39 de                	cmp    esi,ebx
c000ea73:	73 f3                	jae    c000ea68 <VAS::allocatePages(int, int)+0xaa>
c000ea75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea79:	83 c4 1c             	add    esp,0x1c
c000ea7c:	5b                   	pop    ebx
c000ea7d:	5e                   	pop    esi
c000ea7e:	5f                   	pop    edi
c000ea7f:	5d                   	pop    ebp
c000ea80:	c3                   	ret    
c000ea81:	e8 4f 0d 01 00       	call   c001f7d5 <CPU::readCR3()>
c000ea86:	83 ec 0c             	sub    esp,0xc
c000ea89:	50                   	push   eax
c000ea8a:	e8 58 0d 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea96:	83 c4 1c             	add    esp,0x1c
c000ea99:	5b                   	pop    ebx
c000ea9a:	5e                   	pop    esi
c000ea9b:	5f                   	pop    edi
c000ea9c:	5d                   	pop    ebp
c000ea9d:	c3                   	ret    
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	68 b4 17 02 c0       	push   0xc00217b4
c000eaa6:	e8 8f 6f 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000eaab:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eaae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	e9 3a ff ff ff       	jmp    c000e9f4 <VAS::allocatePages(int, int)+0x36>
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eac1:	53                   	push   ebx
c000eac2:	e8 29 f7 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c000eac7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ead3:	0f 87 94 00 00 00    	ja     c000eb6d <VAS::allocatePages(int, int)+0x1af>
c000ead9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eadd:	85 d2                	test   edx,edx
c000eadf:	7e 3c                	jle    c000eb1d <VAS::allocatePages(int, int)+0x15f>
c000eae1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eae5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eae9:	c1 e5 0c             	shl    ebp,0xc
c000eaec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eaf0:	81 ce 00 04 00 00    	or     esi,0x400
c000eaf6:	01 dd                	add    ebp,ebx
c000eaf8:	e8 b2 da ff ff       	call   c000c5af <Phys::allocatePage()>
c000eafd:	56                   	push   esi
c000eafe:	53                   	push   ebx
c000eaff:	50                   	push   eax
c000eb00:	57                   	push   edi
c000eb01:	e8 b6 fd ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb06:	83 c4 10             	add    esp,0x10
c000eb09:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb0e:	74 03                	je     c000eb13 <VAS::allocatePages(int, int)+0x155>
c000eb10:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb13:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb19:	39 dd                	cmp    ebp,ebx
c000eb1b:	75 db                	jne    c000eaf8 <VAS::allocatePages(int, int)+0x13a>
c000eb1d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb22:	0f 84 59 ff ff ff    	je     c000ea81 <VAS::allocatePages(int, int)+0xc3>
c000eb28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb30:	c1 e0 0c             	shl    eax,0xc
c000eb33:	89 d3                	mov    ebx,edx
c000eb35:	c1 eb 0a             	shr    ebx,0xa
c000eb38:	01 d0                	add    eax,edx
c000eb3a:	c1 e8 0a             	shr    eax,0xa
c000eb3d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb43:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb48:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000eb53:	39 c3                	cmp    ebx,eax
c000eb55:	0f 87 1a ff ff ff    	ja     c000ea75 <VAS::allocatePages(int, int)+0xb7>
c000eb5b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb5e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb64:	39 d8                	cmp    eax,ebx
c000eb66:	73 f3                	jae    c000eb5b <VAS::allocatePages(int, int)+0x19d>
c000eb68:	e9 08 ff ff ff       	jmp    c000ea75 <VAS::allocatePages(int, int)+0xb7>
c000eb6d:	e8 5c 5d 00 00       	call   c00148ce <thisCPU()>
c000eb72:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb79:	0f 84 5a ff ff ff    	je     c000ead9 <VAS::allocatePages(int, int)+0x11b>
c000eb7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb83:	80 cd 01             	or     ch,0x1
c000eb86:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb8a:	e9 4a ff ff ff       	jmp    c000ead9 <VAS::allocatePages(int, int)+0x11b>
c000eb8f:	90                   	nop

c000eb90 <VAS::setCPUSpecific(unsigned long)>:
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	6a 05                	push   0x5
c000eb95:	68 00 00 40 c2       	push   0xc2400000
c000eb9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb9e:	50                   	push   eax
c000eb9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eba3:	52                   	push   edx
c000eba4:	e8 13 fd ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000eba9:	83 c4 1c             	add    esp,0x1c
c000ebac:	c3                   	ret    
c000ebad:	90                   	nop

c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebae:	55                   	push   ebp
c000ebaf:	57                   	push   edi
c000ebb0:	56                   	push   esi
c000ebb1:	53                   	push   ebx
c000ebb2:	83 ec 1c             	sub    esp,0x1c
c000ebb5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebb9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebbd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebc1:	e8 08 5d 00 00       	call   c00148ce <thisCPU()>
c000ebc6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebcc:	83 e0 01             	and    eax,0x1
c000ebcf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd7:	85 c0                	test   eax,eax
c000ebd9:	7e 39                	jle    c000ec14 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebdb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebdf:	89 f3                	mov    ebx,esi
c000ebe1:	c1 e0 0c             	shl    eax,0xc
c000ebe4:	01 f0                	add    eax,esi
c000ebe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebea:	55                   	push   ebp
c000ebeb:	53                   	push   ebx
c000ebec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf0:	29 f0                	sub    eax,esi
c000ebf2:	01 d8                	add    eax,ebx
c000ebf4:	50                   	push   eax
c000ebf5:	57                   	push   edi
c000ebf6:	e8 c1 fc ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebfb:	83 c4 10             	add    esp,0x10
c000ebfe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec03:	74 03                	je     c000ec08 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec05:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec08:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec0e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec12:	75 d6                	jne    c000ebea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec14:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec19:	74 42                	je     c000ec5d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec1f:	89 f3                	mov    ebx,esi
c000ec21:	c1 e0 0c             	shl    eax,0xc
c000ec24:	c1 eb 0a             	shr    ebx,0xa
c000ec27:	01 f0                	add    eax,esi
c000ec29:	c1 e8 0a             	shr    eax,0xa
c000ec2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec32:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec3d:	2d 00 00 40 00       	sub    eax,0x400000
c000ec42:	39 c3                	cmp    ebx,eax
c000ec44:	77 0d                	ja     c000ec53 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec49:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec4f:	39 d8                	cmp    eax,ebx
c000ec51:	73 f3                	jae    c000ec46 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec53:	83 c4 1c             	add    esp,0x1c
c000ec56:	89 f0                	mov    eax,esi
c000ec58:	5b                   	pop    ebx
c000ec59:	5e                   	pop    esi
c000ec5a:	5f                   	pop    edi
c000ec5b:	5d                   	pop    ebp
c000ec5c:	c3                   	ret    
c000ec5d:	e8 73 0b 01 00       	call   c001f7d5 <CPU::readCR3()>
c000ec62:	83 ec 0c             	sub    esp,0xc
c000ec65:	50                   	push   eax
c000ec66:	e8 7c 0b 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	89 f0                	mov    eax,esi
c000ec70:	83 c4 1c             	add    esp,0x1c
c000ec73:	5b                   	pop    ebx
c000ec74:	5e                   	pop    esi
c000ec75:	5f                   	pop    edi
c000ec76:	5d                   	pop    ebp
c000ec77:	c3                   	ret    

c000ec78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec78:	55                   	push   ebp
c000ec79:	57                   	push   edi
c000ec7a:	56                   	push   esi
c000ec7b:	53                   	push   ebx
c000ec7c:	83 ec 1c             	sub    esp,0x1c
c000ec7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec83:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec87:	09 f0                	or     eax,esi
c000ec89:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec8d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec91:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec96:	75 4c                	jne    c000ece4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ec98:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec9c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec9f:	c1 eb 16             	shr    ebx,0x16
c000eca2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eca9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecad:	74 4f                	je     c000ecfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecb3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecb7:	c1 e8 0a             	shr    eax,0xa
c000ecba:	80 fa 01             	cmp    dl,0x1
c000ecbd:	19 d2                	sbb    edx,edx
c000ecbf:	25 fc 0f 00 00       	and    eax,0xffc
c000ecc4:	c1 e3 0c             	shl    ebx,0xc
c000ecc7:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eccd:	01 d8                	add    eax,ebx
c000eccf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecd3:	09 d9                	or     ecx,ebx
c000ecd5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ecdc:	83 c4 1c             	add    esp,0x1c
c000ecdf:	5b                   	pop    ebx
c000ece0:	5e                   	pop    esi
c000ece1:	5f                   	pop    edi
c000ece2:	5d                   	pop    ebp
c000ece3:	c3                   	ret    
c000ece4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	68 e0 17 02 c0       	push   0xc00217e0
c000ecf0:	e8 45 6d 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000ecf5:	83 c4 10             	add    esp,0x10
c000ecf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecfc:	eb 9a                	jmp    c000ec98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ecfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed02:	e8 a8 d8 ff ff       	call   c000c5af <Phys::allocatePage()>
c000ed07:	89 c5                	mov    ebp,eax
c000ed09:	e8 6f f6 ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed15:	6a 01                	push   0x1
c000ed17:	e8 d4 f4 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c000ed1c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed23:	6a 01                	push   0x1
c000ed25:	50                   	push   eax
c000ed26:	55                   	push   ebp
c000ed27:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed2d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed31:	51                   	push   ecx
c000ed32:	e8 77 fe ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed37:	83 c4 1c             	add    esp,0x1c
c000ed3a:	68 00 10 00 00       	push   0x1000
c000ed3f:	6a 00                	push   0x0
c000ed41:	50                   	push   eax
c000ed42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed46:	e8 6f 19 ff ff       	call   c00006ba <memset>
c000ed4b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed52:	e8 e6 f7 ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c000ed57:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed5a:	83 c4 10             	add    esp,0x10
c000ed5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed61:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed64:	e9 46 ff ff ff       	jmp    c000ecaf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed69:	90                   	nop

c000ed6a <VAS::VAS(bool)>:
c000ed6a:	53                   	push   ebx
c000ed6b:	83 ec 28             	sub    esp,0x28
c000ed6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed72:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed85:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed89:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed8c:	e8 1e d8 ff ff       	call   c000c5af <Phys::allocatePage()>
c000ed91:	89 c2                	mov    edx,eax
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ed9a:	e8 de f5 ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c000ed9f:	89 c3                	mov    ebx,eax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	6a 01                	push   0x1
c000eda6:	e8 45 f4 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	89 c2                	mov    edx,eax
c000edb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edb7:	83 ec 0c             	sub    esp,0xc
c000edba:	6a 03                	push   0x3
c000edbc:	6a 01                	push   0x1
c000edbe:	52                   	push   edx
c000edbf:	50                   	push   eax
c000edc0:	53                   	push   ebx
c000edc1:	e8 e8 fd ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edc6:	83 c4 20             	add    esp,0x20
c000edc9:	89 c2                	mov    edx,eax
c000edcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edd2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edda:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ede2:	7f 1c                	jg     c000ee00 <VAS::VAS(bool)+0x96>
c000ede4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edef:	c1 e2 02             	shl    edx,0x2
c000edf2:	01 d0                	add    eax,edx
c000edf4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edfa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000edfe:	eb da                	jmp    c000edda <VAS::VAS(bool)+0x70>
c000ee00:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee08:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee10:	7f 71                	jg     c000ee83 <VAS::VAS(bool)+0x119>
c000ee12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee16:	2d 00 02 00 00       	sub    eax,0x200
c000ee1b:	c1 e0 0c             	shl    eax,0xc
c000ee1e:	83 c8 03             	or     eax,0x3
c000ee21:	89 c3                	mov    ebx,eax
c000ee23:	e8 a6 5a 00 00       	call   c00148ce <thisCPU()>
c000ee28:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee2e:	83 e0 10             	and    eax,0x10
c000ee31:	84 c0                	test   al,al
c000ee33:	74 07                	je     c000ee3c <VAS::VAS(bool)+0xd2>
c000ee35:	b8 00 01 00 00       	mov    eax,0x100
c000ee3a:	eb 05                	jmp    c000ee41 <VAS::VAS(bool)+0xd7>
c000ee3c:	b8 00 00 00 00       	mov    eax,0x0
c000ee41:	09 d8                	or     eax,ebx
c000ee43:	89 c1                	mov    ecx,eax
c000ee45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee50:	c1 e2 02             	shl    edx,0x2
c000ee53:	01 d0                	add    eax,edx
c000ee55:	89 ca                	mov    edx,ecx
c000ee57:	89 10                	mov    DWORD PTR [eax],edx
c000ee59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee5d:	2d 40 03 00 00       	sub    eax,0x340
c000ee62:	83 f8 7f             	cmp    eax,0x7f
c000ee65:	77 16                	ja     c000ee7d <VAS::VAS(bool)+0x113>
c000ee67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee72:	c1 e2 02             	shl    edx,0x2
c000ee75:	01 d0                	add    eax,edx
c000ee77:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee7d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee81:	eb 85                	jmp    c000ee08 <VAS::VAS(bool)+0x9e>
c000ee83:	e8 46 5a 00 00       	call   c00148ce <thisCPU()>
c000ee88:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee8e:	83 e0 10             	and    eax,0x10
c000ee91:	84 c0                	test   al,al
c000ee93:	74 07                	je     c000ee9c <VAS::VAS(bool)+0x132>
c000ee95:	b8 03 41 00 00       	mov    eax,0x4103
c000ee9a:	eb 05                	jmp    c000eea1 <VAS::VAS(bool)+0x137>
c000ee9c:	b8 03 40 00 00       	mov    eax,0x4003
c000eea1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eea5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eea8:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eeae:	89 02                	mov    DWORD PTR [edx],eax
c000eeb0:	e8 19 5a 00 00       	call   c00148ce <thisCPU()>
c000eeb5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eebb:	83 ec 08             	sub    esp,0x8
c000eebe:	50                   	push   eax
c000eebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eec3:	e8 c8 fc ff ff       	call   c000eb90 <VAS::setCPUSpecific(unsigned long)>
c000eec8:	83 c4 10             	add    esp,0x10
c000eecb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eecf:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eed2:	e8 f7 59 00 00       	call   c00148ce <thisCPU()>
c000eed7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eedd:	83 e0 10             	and    eax,0x10
c000eee0:	84 c0                	test   al,al
c000eee2:	74 07                	je     c000eeeb <VAS::VAS(bool)+0x181>
c000eee4:	b8 00 01 00 00       	mov    eax,0x100
c000eee9:	eb 05                	jmp    c000eef0 <VAS::VAS(bool)+0x186>
c000eeeb:	b8 00 00 00 00       	mov    eax,0x0
c000eef0:	09 d8                	or     eax,ebx
c000eef2:	89 c2                	mov    edx,eax
c000eef4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eefb:	05 fc 0f 00 00       	add    eax,0xffc
c000ef00:	83 ca 03             	or     edx,0x3
c000ef03:	89 10                	mov    DWORD PTR [eax],edx
c000ef05:	e8 c4 59 00 00       	call   c00148ce <thisCPU()>
c000ef0a:	83 ec 0c             	sub    esp,0xc
c000ef0d:	50                   	push   eax
c000ef0e:	e8 ef 19 00 00       	call   c0010902 <Device::getName()>
c000ef13:	83 c4 10             	add    esp,0x10
c000ef16:	83 ec 08             	sub    esp,0x8
c000ef19:	68 df 18 02 c0       	push   0xc00218df
c000ef1e:	50                   	push   eax
c000ef1f:	e8 86 18 ff ff       	call   c00007aa <strcmp>
c000ef24:	83 c4 10             	add    esp,0x10
c000ef27:	85 c0                	test   eax,eax
c000ef29:	0f 94 c0             	sete   al
c000ef2c:	84 c0                	test   al,al
c000ef2e:	74 64                	je     c000ef94 <VAS::VAS(bool)+0x22a>
c000ef30:	e8 ec 9a 00 00       	call   c0018a21 <disableIRQs()>
c000ef35:	e8 94 59 00 00       	call   c00148ce <thisCPU()>
c000ef3a:	05 7c 09 00 00       	add    eax,0x97c
c000ef3f:	83 ec 0c             	sub    esp,0xc
c000ef42:	50                   	push   eax
c000ef43:	e8 04 cb ff ff       	call   c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef48:	83 c4 10             	add    esp,0x10
c000ef4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef50:	89 c3                	mov    ebx,eax
c000ef52:	e8 77 59 00 00       	call   c00148ce <thisCPU()>
c000ef57:	05 7c 09 00 00       	add    eax,0x97c
c000ef5c:	83 ec 0c             	sub    esp,0xc
c000ef5f:	50                   	push   eax
c000ef60:	e8 e7 ca ff ff       	call   c000ba4c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef65:	83 c4 10             	add    esp,0x10
c000ef68:	83 ec 08             	sub    esp,0x8
c000ef6b:	50                   	push   eax
c000ef6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef70:	e8 a9 f5 ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef7f:	6a 11                	push   0x11
c000ef81:	53                   	push   ebx
c000ef82:	50                   	push   eax
c000ef83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef87:	e8 30 f9 ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	e8 a0 9a 00 00       	call   c0018a34 <enableIRQs()>
c000ef94:	90                   	nop
c000ef95:	83 c4 28             	add    esp,0x28
c000ef98:	5b                   	pop    ebx
c000ef99:	c3                   	ret    

c000ef9a <mapVASFirstTime>:
c000ef9a:	55                   	push   ebp
c000ef9b:	57                   	push   edi
c000ef9c:	56                   	push   esi
c000ef9d:	53                   	push   ebx
c000ef9e:	83 ec 0c             	sub    esp,0xc
c000efa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efa6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efa9:	4a                   	dec    edx
c000efaa:	0f 84 99 00 00 00    	je     c000f049 <mapVASFirstTime+0xaf>
c000efb0:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efb3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efb6:	c1 e5 15             	shl    ebp,0x15
c000efb9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efbe:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efc3:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efc9:	29 eb                	sub    ebx,ebp
c000efcb:	29 ee                	sub    esi,ebp
c000efcd:	e8 dd d5 ff ff       	call   c000c5af <Phys::allocatePage()>
c000efd2:	83 ec 0c             	sub    esp,0xc
c000efd5:	68 03 04 00 00       	push   0x403
c000efda:	6a 01                	push   0x1
c000efdc:	53                   	push   ebx
c000efdd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efe3:	50                   	push   eax
c000efe4:	57                   	push   edi
c000efe5:	e8 c4 fb ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efea:	83 c4 20             	add    esp,0x20
c000efed:	39 f3                	cmp    ebx,esi
c000efef:	75 dc                	jne    c000efcd <mapVASFirstTime+0x33>
c000eff1:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000eff6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000effb:	29 e8                	sub    eax,ebp
c000effd:	29 ee                	sub    esi,ebp
c000efff:	89 c5                	mov    ebp,eax
c000f001:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f005:	19 db                	sbb    ebx,ebx
c000f007:	e8 a3 d5 ff ff       	call   c000c5af <Phys::allocatePage()>
c000f00c:	83 e3 04             	and    ebx,0x4
c000f00f:	83 ec 0c             	sub    esp,0xc
c000f012:	81 c3 03 04 00 00    	add    ebx,0x403
c000f018:	53                   	push   ebx
c000f019:	6a 01                	push   0x1
c000f01b:	56                   	push   esi
c000f01c:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f022:	50                   	push   eax
c000f023:	57                   	push   edi
c000f024:	e8 85 fb ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f029:	83 c4 20             	add    esp,0x20
c000f02c:	39 f5                	cmp    ebp,esi
c000f02e:	75 d1                	jne    c000f001 <mapVASFirstTime+0x67>
c000f030:	e8 a0 07 01 00       	call   c001f7d5 <CPU::readCR3()>
c000f035:	83 ec 0c             	sub    esp,0xc
c000f038:	50                   	push   eax
c000f039:	e8 a9 07 01 00       	call   c001f7e7 <CPU::writeCR3(unsigned long)>
c000f03e:	83 c4 10             	add    esp,0x10
c000f041:	83 c4 0c             	add    esp,0xc
c000f044:	5b                   	pop    ebx
c000f045:	5e                   	pop    esi
c000f046:	5f                   	pop    edi
c000f047:	5d                   	pop    ebp
c000f048:	c3                   	ret    
c000f049:	83 ec 0c             	sub    esp,0xc
c000f04c:	68 ed 18 02 c0       	push   0xc00218ed
c000f051:	e8 b5 01 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	83 c4 0c             	add    esp,0xc
c000f05c:	5b                   	pop    ebx
c000f05d:	5e                   	pop    esi
c000f05e:	5f                   	pop    edi
c000f05f:	5d                   	pop    ebp
c000f060:	c3                   	ret    

c000f061 <__cxa_atexit>:
c000f061:	31 c0                	xor    eax,eax
c000f063:	c3                   	ret    

c000f064 <__cxa_finalize>:
c000f064:	c3                   	ret    

c000f065 <__stack_chk_fail>:
c000f065:	55                   	push   ebp
c000f066:	89 e5                	mov    ebp,esp
c000f068:	83 ec 10             	sub    esp,0x10
c000f06b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f06e:	68 06 19 02 c0       	push   0xc0021906
c000f073:	e8 93 01 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000f078:	58                   	pop    eax
c000f079:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f07c:	5a                   	pop    edx
c000f07d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f080:	68 06 19 02 c0       	push   0xc0021906
c000f085:	e8 81 01 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000f08a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f08d:	59                   	pop    ecx
c000f08e:	5a                   	pop    edx
c000f08f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f091:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f094:	68 06 19 02 c0       	push   0xc0021906
c000f099:	e8 6d 01 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000f09e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a1:	59                   	pop    ecx
c000f0a2:	5a                   	pop    edx
c000f0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0aa:	68 06 19 02 c0       	push   0xc0021906
c000f0af:	e8 57 01 00 00       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c000f0b4:	c7 04 24 0e 19 02 c0 	mov    DWORD PTR [esp],0xc002190e
c000f0bb:	e8 7a 69 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000f0c0:	83 c4 10             	add    esp,0x10
c000f0c3:	c9                   	leave  
c000f0c4:	c3                   	ret    

c000f0c5 <__cxa_pure_virtual>:
c000f0c5:	83 ec 18             	sub    esp,0x18
c000f0c8:	68 26 19 02 c0       	push   0xc0021926
c000f0cd:	e8 68 69 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c000f0d2:	83 c4 1c             	add    esp,0x1c
c000f0d5:	c3                   	ret    

c000f0d6 <operator new(unsigned long)>:
c000f0d6:	e9 fe ce ff ff       	jmp    c000bfd9 <malloc>

c000f0db <operator new[](unsigned long)>:
c000f0db:	e9 f9 ce ff ff       	jmp    c000bfd9 <malloc>

c000f0e0 <operator delete(void*)>:
c000f0e0:	e9 14 cf ff ff       	jmp    c000bff9 <rfree>

c000f0e5 <operator delete(void*, unsigned long)>:
c000f0e5:	e9 0f cf ff ff       	jmp    c000bff9 <rfree>

c000f0ea <operator delete[](void*)>:
c000f0ea:	e9 0a cf ff ff       	jmp    c000bff9 <rfree>

c000f0ef <operator delete[](void*, unsigned long)>:
c000f0ef:	e9 05 cf ff ff       	jmp    c000bff9 <rfree>

c000f0f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0f4:	57                   	push   edi
c000f0f5:	56                   	push   esi
c000f0f6:	be 3d 19 02 c0       	mov    esi,0xc002193d
c000f0fb:	53                   	push   ebx
c000f0fc:	83 ec 40             	sub    esp,0x40
c000f0ff:	a0 3c 19 02 c0       	mov    al,ds:0xc002193c
c000f104:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f108:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f10c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f110:	b8 3e 00 00 00       	mov    eax,0x3e
c000f115:	f7 c7 02 00 00 00    	test   edi,0x2
c000f11b:	75 69                	jne    c000f186 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f11d:	89 c1                	mov    ecx,eax
c000f11f:	c1 e9 02             	shr    ecx,0x2
c000f122:	fc                   	cld    
c000f123:	31 d2                	xor    edx,edx
c000f125:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f127:	a8 02                	test   al,0x2
c000f129:	74 0b                	je     c000f136 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f12b:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f12e:	66 89 17             	mov    WORD PTR [edi],dx
c000f131:	ba 02 00 00 00       	mov    edx,0x2
c000f136:	a8 01                	test   al,0x1
c000f138:	74 06                	je     c000f140 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f13a:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f13d:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f140:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f144:	83 f9 3e             	cmp    ecx,0x3e
c000f147:	7e 05                	jle    c000f14e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f149:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f14e:	89 df                	mov    edi,ebx
c000f150:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f154:	eb 02                	jmp    c000f158 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f156:	89 c7                	mov    edi,eax
c000f158:	31 d2                	xor    edx,edx
c000f15a:	89 f8                	mov    eax,edi
c000f15c:	46                   	inc    esi
c000f15d:	f7 f1                	div    ecx
c000f15f:	39 cf                	cmp    edi,ecx
c000f161:	73 f3                	jae    c000f156 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f163:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f166:	eb 02                	jmp    c000f16a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f168:	89 c3                	mov    ebx,eax
c000f16a:	31 d2                	xor    edx,edx
c000f16c:	89 d8                	mov    eax,ebx
c000f16e:	f7 f1                	div    ecx
c000f170:	4e                   	dec    esi
c000f171:	39 cb                	cmp    ebx,ecx
c000f173:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f177:	88 16                	mov    BYTE PTR [esi],dl
c000f179:	73 ed                	jae    c000f168 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f17b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f17f:	83 c4 40             	add    esp,0x40
c000f182:	5b                   	pop    ebx
c000f183:	5e                   	pop    esi
c000f184:	5f                   	pop    edi
c000f185:	c3                   	ret    
c000f186:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f189:	83 c7 02             	add    edi,0x2
c000f18c:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f190:	83 c6 02             	add    esi,0x2
c000f193:	83 e8 02             	sub    eax,0x2
c000f196:	eb 85                	jmp    c000f11d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f198 <Dbg::logc(char)>:
c000f198:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f19c:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1a1:	ec                   	in     al,dx
c000f1a2:	a8 20                	test   al,0x20
c000f1a4:	74 fb                	je     c000f1a1 <Dbg::logc(char)+0x9>
c000f1a6:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1ab:	88 c8                	mov    al,cl
c000f1ad:	ee                   	out    dx,al
c000f1ae:	c3                   	ret    

c000f1af <Dbg::logs(char*)>:
c000f1af:	53                   	push   ebx
c000f1b0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1b4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1b7:	84 c0                	test   al,al
c000f1b9:	74 0f                	je     c000f1ca <Dbg::logs(char*)+0x1b>
c000f1bb:	43                   	inc    ebx
c000f1bc:	50                   	push   eax
c000f1bd:	e8 d6 ff ff ff       	call   c000f198 <Dbg::logc(char)>
c000f1c2:	5a                   	pop    edx
c000f1c3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1c6:	84 c0                	test   al,al
c000f1c8:	75 f1                	jne    c000f1bb <Dbg::logs(char*)+0xc>
c000f1ca:	5b                   	pop    ebx
c000f1cb:	c3                   	ret    

c000f1cc <Dbg::logWriteInt(unsigned int)>:
c000f1cc:	83 ec 10             	sub    esp,0x10
c000f1cf:	6a 0a                	push   0xa
c000f1d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1d5:	50                   	push   eax
c000f1d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1da:	50                   	push   eax
c000f1db:	e8 14 ff ff ff       	call   c000f0f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1e0:	50                   	push   eax
c000f1e1:	e8 c9 ff ff ff       	call   c000f1af <Dbg::logs(char*)>
c000f1e6:	83 c4 20             	add    esp,0x20
c000f1e9:	c3                   	ret    

c000f1ea <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1ea:	83 ec 10             	sub    esp,0x10
c000f1ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1f1:	50                   	push   eax
c000f1f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1f6:	50                   	push   eax
c000f1f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1fb:	52                   	push   edx
c000f1fc:	e8 f3 fe ff ff       	call   c000f0f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f201:	50                   	push   eax
c000f202:	e8 a8 ff ff ff       	call   c000f1af <Dbg::logs(char*)>
c000f207:	83 c4 20             	add    esp,0x20
c000f20a:	c3                   	ret    

c000f20b <Dbg::kprintf(char const*, ...)>:
c000f20b:	55                   	push   ebp
c000f20c:	57                   	push   edi
c000f20d:	56                   	push   esi
c000f20e:	53                   	push   ebx
c000f20f:	83 ec 0c             	sub    esp,0xc
c000f212:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f216:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f21e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f221:	84 c0                	test   al,al
c000f223:	74 4d                	je     c000f272 <Dbg::kprintf(char const*, ...)+0x67>
c000f225:	31 ff                	xor    edi,edi
c000f227:	8d 77 01             	lea    esi,[edi+0x1]
c000f22a:	3c 25                	cmp    al,0x25
c000f22c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f22f:	0f 85 ec 00 00 00    	jne    c000f321 <Dbg::kprintf(char const*, ...)+0x116>
c000f235:	83 c7 02             	add    edi,0x2
c000f238:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f23b:	83 e8 25             	sub    eax,0x25
c000f23e:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f241:	3c 53                	cmp    al,0x53
c000f243:	0f 87 c0 00 00 00    	ja     c000f309 <Dbg::kprintf(char const*, ...)+0xfe>
c000f249:	25 ff 00 00 00       	and    eax,0xff
c000f24e:	ff 24 85 7c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde684]
c000f255:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f259:	89 c8                	mov    eax,ecx
c000f25b:	83 c1 04             	add    ecx,0x4
c000f25e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f262:	8b 00                	mov    eax,DWORD PTR [eax]
c000f264:	50                   	push   eax
c000f265:	e8 45 ff ff ff       	call   c000f1af <Dbg::logs(char*)>
c000f26a:	58                   	pop    eax
c000f26b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f26e:	84 c0                	test   al,al
c000f270:	75 b5                	jne    c000f227 <Dbg::kprintf(char const*, ...)+0x1c>
c000f272:	83 c4 0c             	add    esp,0xc
c000f275:	5b                   	pop    ebx
c000f276:	5e                   	pop    esi
c000f277:	5f                   	pop    edi
c000f278:	5d                   	pop    ebp
c000f279:	c3                   	ret    
c000f27a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f27e:	89 d0                	mov    eax,edx
c000f280:	83 c2 04             	add    edx,0x4
c000f283:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f287:	8b 00                	mov    eax,DWORD PTR [eax]
c000f289:	50                   	push   eax
c000f28a:	e8 3d ff ff ff       	call   c000f1cc <Dbg::logWriteInt(unsigned int)>
c000f28f:	58                   	pop    eax
c000f290:	eb d9                	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f292:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f296:	89 d0                	mov    eax,edx
c000f298:	83 c2 04             	add    edx,0x4
c000f29b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f29f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2a2:	50                   	push   eax
c000f2a3:	e8 f0 fe ff ff       	call   c000f198 <Dbg::logc(char)>
c000f2a8:	58                   	pop    eax
c000f2a9:	eb c0                	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f2ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2af:	89 c8                	mov    eax,ecx
c000f2b1:	83 c1 04             	add    ecx,0x4
c000f2b4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2ba:	55                   	push   ebp
c000f2bb:	e8 0c ff ff ff       	call   c000f1cc <Dbg::logWriteInt(unsigned int)>
c000f2c0:	58                   	pop    eax
c000f2c1:	eb a8                	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f2c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2c7:	89 c8                	mov    eax,ecx
c000f2c9:	83 c1 04             	add    ecx,0x4
c000f2cc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d0:	6a 10                	push   0x10
c000f2d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2d4:	51                   	push   ecx
c000f2d5:	e8 10 ff ff ff       	call   c000f1ea <Dbg::logWriteIntBase(unsigned int, int)>
c000f2da:	5d                   	pop    ebp
c000f2db:	58                   	pop    eax
c000f2dc:	eb 8d                	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f2de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2e2:	89 d0                	mov    eax,edx
c000f2e4:	83 c2 08             	add    edx,0x8
c000f2e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2eb:	6a 10                	push   0x10
c000f2ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2ef:	50                   	push   eax
c000f2f0:	e8 f5 fe ff ff       	call   c000f1ea <Dbg::logWriteIntBase(unsigned int, int)>
c000f2f5:	58                   	pop    eax
c000f2f6:	5a                   	pop    edx
c000f2f7:	e9 6f ff ff ff       	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f2fc:	6a 25                	push   0x25
c000f2fe:	e8 95 fe ff ff       	call   c000f198 <Dbg::logc(char)>
c000f303:	5a                   	pop    edx
c000f304:	e9 62 ff ff ff       	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f309:	6a 25                	push   0x25
c000f30b:	e8 88 fe ff ff       	call   c000f198 <Dbg::logc(char)>
c000f310:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f314:	50                   	push   eax
c000f315:	e8 7e fe ff ff       	call   c000f198 <Dbg::logc(char)>
c000f31a:	5a                   	pop    edx
c000f31b:	59                   	pop    ecx
c000f31c:	e9 4a ff ff ff       	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f321:	50                   	push   eax
c000f322:	89 f7                	mov    edi,esi
c000f324:	e8 6f fe ff ff       	call   c000f198 <Dbg::logc(char)>
c000f329:	89 ee                	mov    esi,ebp
c000f32b:	58                   	pop    eax
c000f32c:	e9 3a ff ff ff       	jmp    c000f26b <Dbg::kprintf(char const*, ...)+0x60>
c000f331:	90                   	nop

c000f332 <File::read(unsigned long long, void*, int*)>:
c000f332:	53                   	push   ebx
c000f333:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f337:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f33b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f342:	3c 19                	cmp    al,0x19
c000f344:	77 35                	ja     c000f37b <File::read(unsigned long long, void*, int*)+0x49>
c000f346:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f34d:	85 c0                	test   eax,eax
c000f34f:	74 2a                	je     c000f37b <File::read(unsigned long long, void*, int*)+0x49>
c000f351:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f357:	85 c0                	test   eax,eax
c000f359:	74 20                	je     c000f37b <File::read(unsigned long long, void*, int*)+0x49>
c000f35b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f35f:	74 21                	je     c000f382 <File::read(unsigned long long, void*, int*)+0x50>
c000f361:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f363:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f367:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f36d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f371:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f375:	5b                   	pop    ebx
c000f376:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f379:	ff e0                	jmp    eax
c000f37b:	b8 0b 00 00 00       	mov    eax,0xb
c000f380:	eb 05                	jmp    c000f387 <File::read(unsigned long long, void*, int*)+0x55>
c000f382:	b8 05 00 00 00       	mov    eax,0x5
c000f387:	5b                   	pop    ebx
c000f388:	c3                   	ret    
c000f389:	90                   	nop

c000f38a <File::write(unsigned long long, void*, int*)>:
c000f38a:	53                   	push   ebx
c000f38b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f38f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f393:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f39a:	3c 19                	cmp    al,0x19
c000f39c:	77 35                	ja     c000f3d3 <File::write(unsigned long long, void*, int*)+0x49>
c000f39e:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f3a5:	85 c0                	test   eax,eax
c000f3a7:	74 2a                	je     c000f3d3 <File::write(unsigned long long, void*, int*)+0x49>
c000f3a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3af:	85 c0                	test   eax,eax
c000f3b1:	74 20                	je     c000f3d3 <File::write(unsigned long long, void*, int*)+0x49>
c000f3b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3b7:	74 21                	je     c000f3da <File::write(unsigned long long, void*, int*)+0x50>
c000f3b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3bf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3cd:	5b                   	pop    ebx
c000f3ce:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3d1:	ff e0                	jmp    eax
c000f3d3:	b8 0b 00 00 00       	mov    eax,0xb
c000f3d8:	eb 05                	jmp    c000f3df <File::write(unsigned long long, void*, int*)+0x55>
c000f3da:	b8 05 00 00 00       	mov    eax,0x5
c000f3df:	5b                   	pop    ebx
c000f3e0:	c3                   	ret    
c000f3e1:	90                   	nop

c000f3e2 <Directory::read(unsigned long long, void*, int*)>:
c000f3e2:	53                   	push   ebx
c000f3e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3f2:	3c 19                	cmp    al,0x19
c000f3f4:	77 35                	ja     c000f42b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3f6:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c000f3fd:	85 c0                	test   eax,eax
c000f3ff:	74 2a                	je     c000f42b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f401:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f407:	85 c0                	test   eax,eax
c000f409:	74 20                	je     c000f42b <Directory::read(unsigned long long, void*, int*)+0x49>
c000f40b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f40f:	74 21                	je     c000f432 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f411:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f413:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f417:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f41d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f425:	5b                   	pop    ebx
c000f426:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f429:	ff e0                	jmp    eax
c000f42b:	b8 0b 00 00 00       	mov    eax,0xb
c000f430:	eb 05                	jmp    c000f437 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f432:	b8 05 00 00 00       	mov    eax,0x5
c000f437:	5b                   	pop    ebx
c000f438:	c3                   	ret    
c000f439:	90                   	nop

c000f43a <Directory::write(unsigned long long, void*, int*)>:
c000f43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f43e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f445:	b8 0b 00 00 00       	mov    eax,0xb
c000f44a:	80 fa 19             	cmp    dl,0x19
c000f44d:	77 18                	ja     c000f467 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f44f:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f456:	85 d2                	test   edx,edx
c000f458:	74 0d                	je     c000f467 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f45a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f461:	19 c0                	sbb    eax,eax
c000f463:	83 e0 0a             	and    eax,0xa
c000f466:	40                   	inc    eax
c000f467:	c3                   	ret    

c000f468 <File::isAtty()>:
c000f468:	31 c0                	xor    eax,eax
c000f46a:	c3                   	ret    
c000f46b:	90                   	nop

c000f46c <Directory::isAtty()>:
c000f46c:	31 c0                	xor    eax,eax
c000f46e:	c3                   	ret    
c000f46f:	90                   	nop

c000f470 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f470:	b8 0a 00 00 00       	mov    eax,0xa
c000f475:	c3                   	ret    

c000f476 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f476:	b8 0a 00 00 00       	mov    eax,0xa
c000f47b:	c3                   	ret    

c000f47c <File::~File()>:
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f488:	89 10                	mov    DWORD PTR [eax],edx
c000f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	50                   	push   eax
c000f492:	e8 c5 ea ff ff       	call   c000df5c <UnixFile::~UnixFile()>
c000f497:	83 c4 10             	add    esp,0x10
c000f49a:	90                   	nop
c000f49b:	83 c4 0c             	add    esp,0xc
c000f49e:	c3                   	ret    
c000f49f:	90                   	nop

c000f4a0 <File::~File()>:
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	83 ec 0c             	sub    esp,0xc
c000f4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4aa:	e8 cd ff ff ff       	call   c000f47c <File::~File()>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	83 ec 08             	sub    esp,0x8
c000f4b5:	68 14 01 00 00       	push   0x114
c000f4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4be:	e8 22 fc ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	83 c4 0c             	add    esp,0xc
c000f4c9:	c3                   	ret    

c000f4ca <Directory::~Directory()>:
c000f4ca:	83 ec 0c             	sub    esp,0xc
c000f4cd:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000f4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d6:	89 10                	mov    DWORD PTR [eax],edx
c000f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4dc:	83 ec 0c             	sub    esp,0xc
c000f4df:	50                   	push   eax
c000f4e0:	e8 77 ea ff ff       	call   c000df5c <UnixFile::~UnixFile()>
c000f4e5:	83 c4 10             	add    esp,0x10
c000f4e8:	90                   	nop
c000f4e9:	83 c4 0c             	add    esp,0xc
c000f4ec:	c3                   	ret    
c000f4ed:	90                   	nop

c000f4ee <Directory::~Directory()>:
c000f4ee:	83 ec 0c             	sub    esp,0xc
c000f4f1:	83 ec 0c             	sub    esp,0xc
c000f4f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f8:	e8 cd ff ff ff       	call   c000f4ca <Directory::~Directory()>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	83 ec 08             	sub    esp,0x8
c000f503:	68 14 01 00 00       	push   0x114
c000f508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f50c:	e8 d4 fb ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	83 c4 0c             	add    esp,0xc
c000f517:	c3                   	ret    

c000f518 <Filesystem::Filesystem()>:
c000f518:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f51d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f521:	89 10                	mov    DWORD PTR [eax],edx
c000f523:	8b 15 e8 48 02 c0    	mov    edx,DWORD PTR ds:0xc00248e8
c000f529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f52d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f534:	a3 e8 48 02 c0       	mov    ds:0xc00248e8,eax
c000f539:	90                   	nop
c000f53a:	c3                   	ret    
c000f53b:	90                   	nop

c000f53c <Filesystem::~Filesystem()>:
c000f53c:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000f541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f545:	89 10                	mov    DWORD PTR [eax],edx
c000f547:	90                   	nop
c000f548:	c3                   	ret    
c000f549:	90                   	nop

c000f54a <Filesystem::~Filesystem()>:
c000f54a:	83 ec 0c             	sub    esp,0xc
c000f54d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f551:	e8 e6 ff ff ff       	call   c000f53c <Filesystem::~Filesystem()>
c000f556:	83 c4 04             	add    esp,0x4
c000f559:	83 ec 08             	sub    esp,0x8
c000f55c:	6a 08                	push   0x8
c000f55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f562:	e8 7e fb ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000f567:	83 c4 10             	add    esp,0x10
c000f56a:	83 c4 0c             	add    esp,0xc
c000f56d:	c3                   	ret    

c000f56e <initVFS()>:
c000f56e:	83 ec 18             	sub    esp,0x18
c000f571:	6a 08                	push   0x8
c000f573:	e8 5e fb ff ff       	call   c000f0d6 <operator new(unsigned long)>
c000f578:	89 04 24             	mov    DWORD PTR [esp],eax
c000f57b:	e8 da b3 00 00       	call   c001a95a <FAT::FAT()>
c000f580:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f587:	e8 4a fb ff ff       	call   c000f0d6 <operator new(unsigned long)>
c000f58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f58f:	e8 66 c6 00 00       	call   c001bbfa <ISO9660::ISO9660()>
c000f594:	83 c4 1c             	add    esp,0x1c
c000f597:	c3                   	ret    

c000f598 <standardiseFiles(char*, char const*, char const*)>:
c000f598:	55                   	push   ebp
c000f599:	57                   	push   edi
c000f59a:	56                   	push   esi
c000f59b:	53                   	push   ebx
c000f59c:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5a2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5a9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5b0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5b7:	68 00 04 00 00       	push   0x400
c000f5bc:	6a 00                	push   0x0
c000f5be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5c2:	56                   	push   esi
c000f5c3:	e8 f2 10 ff ff       	call   c00006ba <memset>
c000f5c8:	83 c4 10             	add    esp,0x10
c000f5cb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5cf:	75 0b                	jne    c000f5dc <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5d1:	50                   	push   eax
c000f5d2:	50                   	push   eax
c000f5d3:	57                   	push   edi
c000f5d4:	56                   	push   esi
c000f5d5:	e8 7f 11 ff ff       	call   c0000759 <strcpy>
c000f5da:	eb 41                	jmp    c000f61d <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5dc:	8a 07                	mov    al,BYTE PTR [edi]
c000f5de:	3c 5c                	cmp    al,0x5c
c000f5e0:	74 04                	je     c000f5e6 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5e2:	3c 2f                	cmp    al,0x2f
c000f5e4:	75 18                	jne    c000f5fe <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5e6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5e9:	3c 60                	cmp    al,0x60
c000f5eb:	7e 03                	jle    c000f5f0 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5ed:	83 e8 20             	sub    eax,0x20
c000f5f0:	88 04 24             	mov    BYTE PTR [esp],al
c000f5f3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f5fa:	50                   	push   eax
c000f5fb:	50                   	push   eax
c000f5fc:	eb 18                	jmp    c000f616 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f5fe:	50                   	push   eax
c000f5ff:	50                   	push   eax
c000f600:	55                   	push   ebp
c000f601:	56                   	push   esi
c000f602:	e8 52 11 ff ff       	call   c0000759 <strcpy>
c000f607:	5a                   	pop    edx
c000f608:	59                   	pop    ecx
c000f609:	68 34 2e 02 c0       	push   0xc0022e34
c000f60e:	56                   	push   esi
c000f60f:	e8 fc 11 ff ff       	call   c0000810 <strcat>
c000f614:	5d                   	pop    ebp
c000f615:	58                   	pop    eax
c000f616:	57                   	push   edi
c000f617:	56                   	push   esi
c000f618:	e8 f3 11 ff ff       	call   c0000810 <strcat>
c000f61d:	83 c4 10             	add    esp,0x10
c000f620:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f623:	3c 60                	cmp    al,0x60
c000f625:	7e 03                	jle    c000f62a <standardiseFiles(char*, char const*, char const*)+0x92>
c000f627:	83 e8 20             	sub    eax,0x20
c000f62a:	88 04 24             	mov    BYTE PTR [esp],al
c000f62d:	88 03                	mov    BYTE PTR [ebx],al
c000f62f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f636:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f63c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f640:	bf 03 00 00 00       	mov    edi,0x3
c000f645:	b8 03 00 00 00       	mov    eax,0x3
c000f64a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f64d:	84 d2                	test   dl,dl
c000f64f:	0f 84 91 00 00 00    	je     c000f6e6 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f655:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f658:	80 fa 2f             	cmp    dl,0x2f
c000f65b:	74 05                	je     c000f662 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f65d:	80 fa 5c             	cmp    dl,0x5c
c000f660:	75 12                	jne    c000f674 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f662:	89 c5                	mov    ebp,eax
c000f664:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f669:	74 09                	je     c000f674 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f66b:	40                   	inc    eax
c000f66c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f670:	89 cf                	mov    edi,ecx
c000f672:	eb d6                	jmp    c000f64a <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f674:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f679:	75 5b                	jne    c000f6d6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f67b:	80 fa 2e             	cmp    dl,0x2e
c000f67e:	75 56                	jne    c000f6d6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f680:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f684:	74 19                	je     c000f69f <standardiseFiles(char*, char const*, char const*)+0x107>
c000f686:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f68b:	74 53                	je     c000f6e0 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f68d:	89 f9                	mov    ecx,edi
c000f68f:	41                   	inc    ecx
c000f690:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f693:	80 fa 5c             	cmp    dl,0x5c
c000f696:	74 f7                	je     c000f68f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f698:	80 fa 2f             	cmp    dl,0x2f
c000f69b:	74 f2                	je     c000f68f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f69d:	eb d1                	jmp    c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f69f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6a4:	74 3a                	je     c000f6e0 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6a6:	83 f8 03             	cmp    eax,0x3
c000f6a9:	74 c5                	je     c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ab:	41                   	inc    ecx
c000f6ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6af:	80 fa 2f             	cmp    dl,0x2f
c000f6b2:	74 f7                	je     c000f6ab <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6b4:	80 fa 5c             	cmp    dl,0x5c
c000f6b7:	74 f2                	je     c000f6ab <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6b9:	48                   	dec    eax
c000f6ba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6be:	75 06                	jne    c000f6c6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6c0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6c4:	eb f3                	jmp    c000f6b9 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6ca:	74 07                	je     c000f6d3 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6d0:	48                   	dec    eax
c000f6d1:	eb f3                	jmp    c000f6c6 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6d3:	40                   	inc    eax
c000f6d4:	eb 9a                	jmp    c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6d6:	80 fa 2f             	cmp    dl,0x2f
c000f6d9:	74 95                	je     c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6db:	80 fa 5c             	cmp    dl,0x5c
c000f6de:	74 90                	je     c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6e3:	40                   	inc    eax
c000f6e4:	eb 8a                	jmp    c000f670 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ea:	83 ec 0c             	sub    esp,0xc
c000f6ed:	53                   	push   ebx
c000f6ee:	e8 e4 0f ff ff       	call   c00006d7 <strlen>
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f6fb:	75 26                	jne    c000f723 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f6fd:	83 ec 0c             	sub    esp,0xc
c000f700:	53                   	push   ebx
c000f701:	e8 d1 0f ff ff       	call   c00006d7 <strlen>
c000f706:	83 c4 10             	add    esp,0x10
c000f709:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f70e:	74 26                	je     c000f736 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f710:	83 ec 0c             	sub    esp,0xc
c000f713:	53                   	push   ebx
c000f714:	e8 be 0f ff ff       	call   c00006d7 <strlen>
c000f719:	83 c4 10             	add    esp,0x10
c000f71c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f721:	eb c7                	jmp    c000f6ea <standardiseFiles(char*, char const*, char const*)+0x152>
c000f723:	83 ec 0c             	sub    esp,0xc
c000f726:	53                   	push   ebx
c000f727:	e8 ab 0f ff ff       	call   c00006d7 <strlen>
c000f72c:	83 c4 10             	add    esp,0x10
c000f72f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f734:	74 c7                	je     c000f6fd <standardiseFiles(char*, char const*, char const*)+0x165>
c000f736:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f73c:	5b                   	pop    ebx
c000f73d:	5e                   	pop    esi
c000f73e:	5f                   	pop    edi
c000f73f:	5d                   	pop    ebp
c000f740:	c3                   	ret    
c000f741:	90                   	nop

c000f742 <File::File(char const*, Process*)>:
c000f742:	83 ec 0c             	sub    esp,0xc
c000f745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f749:	83 ec 08             	sub    esp,0x8
c000f74c:	6a 00                	push   0x0
c000f74e:	50                   	push   eax
c000f74f:	e8 66 e6 ff ff       	call   c000ddba <UnixFile::UnixFile(int)>
c000f754:	83 c4 10             	add    esp,0x10
c000f757:	ba 38 1b 02 c0       	mov    edx,0xc0021b38
c000f75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f760:	89 10                	mov    DWORD PTR [eax],edx
c000f762:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f766:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f770:	83 c0 0d             	add    eax,0xd
c000f773:	83 ec 04             	sub    esp,0x4
c000f776:	52                   	push   edx
c000f777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f77b:	50                   	push   eax
c000f77c:	e8 17 fe ff ff       	call   c000f598 <standardiseFiles(char*, char const*, char const*)>
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f788:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f78b:	8d 50 bf             	lea    edx,[eax-0x41]
c000f78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f792:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7a0:	90                   	nop
c000f7a1:	83 c4 0c             	add    esp,0xc
c000f7a4:	c3                   	ret    
c000f7a5:	90                   	nop

c000f7a6 <File::open(FileOpenMode)>:
c000f7a6:	53                   	push   ebx
c000f7a7:	b8 0b 00 00 00       	mov    eax,0xb
c000f7ac:	83 ec 08             	sub    esp,0x8
c000f7af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7ba:	80 fa 19             	cmp    dl,0x19
c000f7bd:	77 40                	ja     c000f7ff <File::open(FileOpenMode)+0x59>
c000f7bf:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f7c6:	85 d2                	test   edx,edx
c000f7c8:	74 35                	je     c000f7ff <File::open(FileOpenMode)+0x59>
c000f7ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d0:	85 d2                	test   edx,edx
c000f7d2:	74 2b                	je     c000f7ff <File::open(FileOpenMode)+0x59>
c000f7d4:	b8 06 00 00 00       	mov    eax,0x6
c000f7d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7dd:	75 20                	jne    c000f7ff <File::open(FileOpenMode)+0x59>
c000f7df:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7eb:	51                   	push   ecx
c000f7ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7ef:	51                   	push   ecx
c000f7f0:	52                   	push   edx
c000f7f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7f4:	83 c4 10             	add    esp,0x10
c000f7f7:	85 c0                	test   eax,eax
c000f7f9:	75 04                	jne    c000f7ff <File::open(FileOpenMode)+0x59>
c000f7fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f7ff:	83 c4 08             	add    esp,0x8
c000f802:	5b                   	pop    ebx
c000f803:	c3                   	ret    

c000f804 <File::close()>:
c000f804:	53                   	push   ebx
c000f805:	b8 0b 00 00 00       	mov    eax,0xb
c000f80a:	83 ec 08             	sub    esp,0x8
c000f80d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f811:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f818:	80 fa 19             	cmp    dl,0x19
c000f81b:	77 41                	ja     c000f85e <File::close()+0x5a>
c000f81d:	8b 1c 95 80 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb280]
c000f824:	85 db                	test   ebx,ebx
c000f826:	74 36                	je     c000f85e <File::close()+0x5a>
c000f828:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f82f:	74 2d                	je     c000f85e <File::close()+0x5a>
c000f831:	b8 05 00 00 00       	mov    eax,0x5
c000f836:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83a:	74 22                	je     c000f85e <File::close()+0x5a>
c000f83c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f840:	8b 04 95 80 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb280]
c000f847:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f84d:	53                   	push   ebx
c000f84e:	53                   	push   ebx
c000f84f:	8b 10                	mov    edx,DWORD PTR [eax]
c000f851:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f857:	50                   	push   eax
c000f858:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f85b:	83 c4 10             	add    esp,0x10
c000f85e:	83 c4 08             	add    esp,0x8
c000f861:	5b                   	pop    ebx
c000f862:	c3                   	ret    
c000f863:	90                   	nop

c000f864 <File::seek(unsigned long long)>:
c000f864:	56                   	push   esi
c000f865:	b8 0b 00 00 00       	mov    eax,0xb
c000f86a:	53                   	push   ebx
c000f86b:	51                   	push   ecx
c000f86c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f870:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f874:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f878:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f87f:	80 fa 19             	cmp    dl,0x19
c000f882:	77 31                	ja     c000f8b5 <File::seek(unsigned long long)+0x51>
c000f884:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f88b:	85 d2                	test   edx,edx
c000f88d:	74 26                	je     c000f8b5 <File::seek(unsigned long long)+0x51>
c000f88f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f895:	85 d2                	test   edx,edx
c000f897:	74 1c                	je     c000f8b5 <File::seek(unsigned long long)+0x51>
c000f899:	b8 05 00 00 00       	mov    eax,0x5
c000f89e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8a2:	74 11                	je     c000f8b5 <File::seek(unsigned long long)+0x51>
c000f8a4:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8a6:	53                   	push   ebx
c000f8a7:	51                   	push   ecx
c000f8a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8ae:	52                   	push   edx
c000f8af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8b2:	83 c4 10             	add    esp,0x10
c000f8b5:	5a                   	pop    edx
c000f8b6:	5b                   	pop    ebx
c000f8b7:	5e                   	pop    esi
c000f8b8:	c3                   	ret    
c000f8b9:	90                   	nop

c000f8ba <File::tell(unsigned long long*)>:
c000f8ba:	83 ec 0c             	sub    esp,0xc
c000f8bd:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8cd:	80 fa 19             	cmp    dl,0x19
c000f8d0:	77 34                	ja     c000f906 <File::tell(unsigned long long*)+0x4c>
c000f8d2:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000f8d9:	85 d2                	test   edx,edx
c000f8db:	74 29                	je     c000f906 <File::tell(unsigned long long*)+0x4c>
c000f8dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8e3:	85 d2                	test   edx,edx
c000f8e5:	74 1f                	je     c000f906 <File::tell(unsigned long long*)+0x4c>
c000f8e7:	b8 05 00 00 00       	mov    eax,0x5
c000f8ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8f0:	74 14                	je     c000f906 <File::tell(unsigned long long*)+0x4c>
c000f8f2:	50                   	push   eax
c000f8f3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f8ff:	52                   	push   edx
c000f900:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f903:	83 c4 10             	add    esp,0x10
c000f906:	83 c4 0c             	add    esp,0xc
c000f909:	c3                   	ret    

c000f90a <File::rewind()>:
c000f90a:	83 ec 10             	sub    esp,0x10
c000f90d:	6a 00                	push   0x0
c000f90f:	6a 00                	push   0x0
c000f911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f915:	e8 4a ff ff ff       	call   c000f864 <File::seek(unsigned long long)>
c000f91a:	83 c4 1c             	add    esp,0x1c
c000f91d:	c3                   	ret    

c000f91e <File::unlink()>:
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	b8 0b 00 00 00       	mov    eax,0xb
c000f926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f92a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f931:	80 f9 19             	cmp    cl,0x19
c000f934:	77 2f                	ja     c000f965 <File::unlink()+0x47>
c000f936:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f93d:	85 c9                	test   ecx,ecx
c000f93f:	74 24                	je     c000f965 <File::unlink()+0x47>
c000f941:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f947:	85 c9                	test   ecx,ecx
c000f949:	74 1a                	je     c000f965 <File::unlink()+0x47>
c000f94b:	b8 06 00 00 00       	mov    eax,0x6
c000f950:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f954:	75 0f                	jne    c000f965 <File::unlink()+0x47>
c000f956:	50                   	push   eax
c000f957:	83 c2 0d             	add    edx,0xd
c000f95a:	50                   	push   eax
c000f95b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f95d:	52                   	push   edx
c000f95e:	51                   	push   ecx
c000f95f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f962:	83 c4 10             	add    esp,0x10
c000f965:	83 c4 0c             	add    esp,0xc
c000f968:	c3                   	ret    
c000f969:	90                   	nop

c000f96a <File::rename(char const*)>:
c000f96a:	83 ec 0c             	sub    esp,0xc
c000f96d:	b8 0b 00 00 00       	mov    eax,0xb
c000f972:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f976:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f97d:	80 f9 19             	cmp    cl,0x19
c000f980:	77 32                	ja     c000f9b4 <File::rename(char const*)+0x4a>
c000f982:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f989:	85 c9                	test   ecx,ecx
c000f98b:	74 27                	je     c000f9b4 <File::rename(char const*)+0x4a>
c000f98d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f993:	85 c9                	test   ecx,ecx
c000f995:	74 1d                	je     c000f9b4 <File::rename(char const*)+0x4a>
c000f997:	b8 06 00 00 00       	mov    eax,0x6
c000f99c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9a0:	75 12                	jne    c000f9b4 <File::rename(char const*)+0x4a>
c000f9a2:	50                   	push   eax
c000f9a3:	83 c2 0d             	add    edx,0xd
c000f9a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9ac:	52                   	push   edx
c000f9ad:	51                   	push   ecx
c000f9ae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	83 c4 0c             	add    esp,0xc
c000f9b7:	c3                   	ret    

c000f9b8 <File::chfatattr(unsigned char, unsigned char)>:
c000f9b8:	57                   	push   edi
c000f9b9:	b8 0b 00 00 00       	mov    eax,0xb
c000f9be:	56                   	push   esi
c000f9bf:	53                   	push   ebx
c000f9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9d3:	80 f9 19             	cmp    cl,0x19
c000f9d6:	77 37                	ja     c000fa0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9d8:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000f9df:	85 c9                	test   ecx,ecx
c000f9e1:	74 2c                	je     c000fa0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9e9:	85 c9                	test   ecx,ecx
c000f9eb:	74 22                	je     c000fa0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9ed:	b8 06 00 00 00       	mov    eax,0x6
c000f9f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9f6:	75 17                	jne    c000fa0f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f8:	89 f0                	mov    eax,esi
c000f9fa:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f9fc:	0f b6 f0             	movzx  esi,al
c000f9ff:	56                   	push   esi
c000fa00:	83 c2 0d             	add    edx,0xd
c000fa03:	0f b6 db             	movzx  ebx,bl
c000fa06:	53                   	push   ebx
c000fa07:	52                   	push   edx
c000fa08:	51                   	push   ecx
c000fa09:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	5b                   	pop    ebx
c000fa10:	5e                   	pop    esi
c000fa11:	5f                   	pop    edi
c000fa12:	c3                   	ret    
c000fa13:	90                   	nop

c000fa14 <File::exists()>:
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	31 c0                	xor    eax,eax
c000fa19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa1d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa24:	80 f9 19             	cmp    cl,0x19
c000fa27:	77 24                	ja     c000fa4d <File::exists()+0x39>
c000fa29:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fa30:	85 c9                	test   ecx,ecx
c000fa32:	74 19                	je     c000fa4d <File::exists()+0x39>
c000fa34:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa3a:	85 c9                	test   ecx,ecx
c000fa3c:	74 0f                	je     c000fa4d <File::exists()+0x39>
c000fa3e:	50                   	push   eax
c000fa3f:	83 c2 0d             	add    edx,0xd
c000fa42:	50                   	push   eax
c000fa43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa45:	52                   	push   edx
c000fa46:	51                   	push   ecx
c000fa47:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa4a:	83 c4 10             	add    esp,0x10
c000fa4d:	83 c4 0c             	add    esp,0xc
c000fa50:	c3                   	ret    
c000fa51:	90                   	nop

c000fa52 <File::stat(unsigned long long*, bool*)>:
c000fa52:	56                   	push   esi
c000fa53:	53                   	push   ebx
c000fa54:	50                   	push   eax
c000fa55:	b8 0b 00 00 00       	mov    eax,0xb
c000fa5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa6d:	80 f9 19             	cmp    cl,0x19
c000fa70:	77 3d                	ja     c000faaf <File::stat(unsigned long long*, bool*)+0x5d>
c000fa72:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fa79:	85 c9                	test   ecx,ecx
c000fa7b:	74 32                	je     c000faaf <File::stat(unsigned long long*, bool*)+0x5d>
c000fa7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa83:	85 c9                	test   ecx,ecx
c000fa85:	74 28                	je     c000faaf <File::stat(unsigned long long*, bool*)+0x5d>
c000fa87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa89:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa8d:	74 13                	je     c000faa2 <File::stat(unsigned long long*, bool*)+0x50>
c000fa8f:	83 ec 04             	sub    esp,0x4
c000fa92:	56                   	push   esi
c000fa93:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fa99:	51                   	push   ecx
c000fa9a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000fa9d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000faa0:	eb 0a                	jmp    c000faac <File::stat(unsigned long long*, bool*)+0x5a>
c000faa2:	53                   	push   ebx
c000faa3:	83 c2 0d             	add    edx,0xd
c000faa6:	56                   	push   esi
c000faa7:	52                   	push   edx
c000faa8:	51                   	push   ecx
c000faa9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000faac:	83 c4 10             	add    esp,0x10
c000faaf:	5a                   	pop    edx
c000fab0:	5b                   	pop    ebx
c000fab1:	5e                   	pop    esi
c000fab2:	c3                   	ret    

c000fab3 <getcwd(Process*, char*, int)>:
c000fab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fab7:	31 c0                	xor    eax,eax
c000fab9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fabc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fac0:	7d 15                	jge    c000fad7 <getcwd(Process*, char*, int)+0x24>
c000fac2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fac6:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000facd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fad0:	84 c9                	test   cl,cl
c000fad2:	74 06                	je     c000fada <getcwd(Process*, char*, int)+0x27>
c000fad4:	40                   	inc    eax
c000fad5:	eb e2                	jmp    c000fab9 <getcwd(Process*, char*, int)+0x6>
c000fad7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fada:	31 c0                	xor    eax,eax
c000fadc:	c3                   	ret    

c000fadd <setcwd(Process*, char*)>:
c000fadd:	55                   	push   ebp
c000fade:	57                   	push   edi
c000fadf:	56                   	push   esi
c000fae0:	53                   	push   ebx
c000fae1:	81 ec 20 02 00 00    	sub    esp,0x220
c000fae7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000faee:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000faf4:	57                   	push   edi
c000faf5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fafc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb00:	56                   	push   esi
c000fb01:	e8 92 fa ff ff       	call   c000f598 <standardiseFiles(char*, char const*, char const*)>
c000fb06:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb09:	e8 c9 0b ff ff       	call   c00006d7 <strlen>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	83 f8 02             	cmp    eax,0x2
c000fb14:	77 17                	ja     c000fb2d <setcwd(Process*, char*)+0x50>
c000fb16:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb1b:	83 e8 41             	sub    eax,0x41
c000fb1e:	83 f8 19             	cmp    eax,0x19
c000fb21:	76 24                	jbe    c000fb47 <setcwd(Process*, char*)+0x6a>
c000fb23:	b8 03 00 00 00       	mov    eax,0x3
c000fb28:	e9 cb 00 00 00       	jmp    c000fbf8 <setcwd(Process*, char*)+0x11b>
c000fb2d:	83 ec 0c             	sub    esp,0xc
c000fb30:	56                   	push   esi
c000fb31:	e8 a1 0b ff ff       	call   c00006d7 <strlen>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	83 f8 03             	cmp    eax,0x3
c000fb3c:	75 33                	jne    c000fb71 <setcwd(Process*, char*)+0x94>
c000fb3e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb43:	75 2c                	jne    c000fb71 <setcwd(Process*, char*)+0x94>
c000fb45:	eb cf                	jmp    c000fb16 <setcwd(Process*, char*)+0x39>
c000fb47:	8b 14 85 80 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb280]
c000fb4e:	b8 05 00 00 00       	mov    eax,0x5
c000fb53:	85 d2                	test   edx,edx
c000fb55:	0f 84 9d 00 00 00    	je     c000fbf8 <setcwd(Process*, char*)+0x11b>
c000fb5b:	b8 06 00 00 00       	mov    eax,0x6
c000fb60:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb67:	0f 84 8b 00 00 00    	je     c000fbf8 <setcwd(Process*, char*)+0x11b>
c000fb6d:	51                   	push   ecx
c000fb6e:	51                   	push   ecx
c000fb6f:	eb 7b                	jmp    c000fbec <setcwd(Process*, char*)+0x10f>
c000fb71:	83 ec 0c             	sub    esp,0xc
c000fb74:	68 14 01 00 00       	push   0x114
c000fb79:	e8 58 f5 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c000fb7e:	83 c4 0c             	add    esp,0xc
c000fb81:	89 c3                	mov    ebx,eax
c000fb83:	55                   	push   ebp
c000fb84:	56                   	push   esi
c000fb85:	50                   	push   eax
c000fb86:	e8 b7 fb ff ff       	call   c000f742 <File::File(char const*, Process*)>
c000fb8b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb90:	83 c4 0c             	add    esp,0xc
c000fb93:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb97:	50                   	push   eax
c000fb98:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fb9c:	50                   	push   eax
c000fb9d:	53                   	push   ebx
c000fb9e:	e8 af fe ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c000fba3:	83 c4 10             	add    esp,0x10
c000fba6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fba8:	83 f8 02             	cmp    eax,0x2
c000fbab:	75 09                	jne    c000fbb6 <setcwd(Process*, char*)+0xd9>
c000fbad:	83 ec 0c             	sub    esp,0xc
c000fbb0:	53                   	push   ebx
c000fbb1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbb4:	eb 0d                	jmp    c000fbc3 <setcwd(Process*, char*)+0xe6>
c000fbb6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbb9:	85 c0                	test   eax,eax
c000fbbb:	74 10                	je     c000fbcd <setcwd(Process*, char*)+0xf0>
c000fbbd:	83 ec 0c             	sub    esp,0xc
c000fbc0:	53                   	push   ebx
c000fbc1:	ff d2                	call   edx
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	b8 01 00 00 00       	mov    eax,0x1
c000fbcb:	eb 2b                	jmp    c000fbf8 <setcwd(Process*, char*)+0x11b>
c000fbcd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbd2:	75 10                	jne    c000fbe4 <setcwd(Process*, char*)+0x107>
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	53                   	push   ebx
c000fbd8:	ff d2                	call   edx
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	b8 02 00 00 00       	mov    eax,0x2
c000fbe2:	eb 14                	jmp    c000fbf8 <setcwd(Process*, char*)+0x11b>
c000fbe4:	83 ec 0c             	sub    esp,0xc
c000fbe7:	53                   	push   ebx
c000fbe8:	ff d2                	call   edx
c000fbea:	58                   	pop    eax
c000fbeb:	5a                   	pop    edx
c000fbec:	56                   	push   esi
c000fbed:	57                   	push   edi
c000fbee:	e8 66 0b ff ff       	call   c0000759 <strcpy>
c000fbf3:	83 c4 10             	add    esp,0x10
c000fbf6:	31 c0                	xor    eax,eax
c000fbf8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fbfe:	5b                   	pop    ebx
c000fbff:	5e                   	pop    esi
c000fc00:	5f                   	pop    edi
c000fc01:	5d                   	pop    ebp
c000fc02:	c3                   	ret    
c000fc03:	90                   	nop

c000fc04 <Directory::Directory(char const*, Process*)>:
c000fc04:	83 ec 0c             	sub    esp,0xc
c000fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0b:	83 ec 08             	sub    esp,0x8
c000fc0e:	6a 00                	push   0x0
c000fc10:	50                   	push   eax
c000fc11:	e8 a4 e1 ff ff       	call   c000ddba <UnixFile::UnixFile(int)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	ba 54 1b 02 c0       	mov    edx,0xc0021b54
c000fc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc22:	89 10                	mov    DWORD PTR [eax],edx
c000fc24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc28:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc32:	83 c0 0d             	add    eax,0xd
c000fc35:	83 ec 04             	sub    esp,0x4
c000fc38:	52                   	push   edx
c000fc39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc3d:	50                   	push   eax
c000fc3e:	e8 55 f9 ff ff       	call   c000f598 <standardiseFiles(char*, char const*, char const*)>
c000fc43:	83 c4 10             	add    esp,0x10
c000fc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc4d:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc54:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc62:	90                   	nop
c000fc63:	83 c4 0c             	add    esp,0xc
c000fc66:	c3                   	ret    
c000fc67:	90                   	nop

c000fc68 <Directory::open()>:
c000fc68:	53                   	push   ebx
c000fc69:	b8 0b 00 00 00       	mov    eax,0xb
c000fc6e:	83 ec 08             	sub    esp,0x8
c000fc71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc75:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc7c:	80 fa 19             	cmp    dl,0x19
c000fc7f:	77 3d                	ja     c000fcbe <Directory::open()+0x56>
c000fc81:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000fc88:	85 d2                	test   edx,edx
c000fc8a:	74 32                	je     c000fcbe <Directory::open()+0x56>
c000fc8c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc92:	85 d2                	test   edx,edx
c000fc94:	74 28                	je     c000fcbe <Directory::open()+0x56>
c000fc96:	b8 06 00 00 00       	mov    eax,0x6
c000fc9b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fc9f:	75 1d                	jne    c000fcbe <Directory::open()+0x56>
c000fca1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fca7:	50                   	push   eax
c000fca8:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcaa:	51                   	push   ecx
c000fcab:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcae:	51                   	push   ecx
c000fcaf:	52                   	push   edx
c000fcb0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	85 c0                	test   eax,eax
c000fcb8:	75 04                	jne    c000fcbe <Directory::open()+0x56>
c000fcba:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcbe:	83 c4 08             	add    esp,0x8
c000fcc1:	5b                   	pop    ebx
c000fcc2:	c3                   	ret    
c000fcc3:	90                   	nop

c000fcc4 <Directory::close()>:
c000fcc4:	53                   	push   ebx
c000fcc5:	b8 0b 00 00 00       	mov    eax,0xb
c000fcca:	83 ec 08             	sub    esp,0x8
c000fccd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcd1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcd8:	80 fa 19             	cmp    dl,0x19
c000fcdb:	77 41                	ja     c000fd1e <Directory::close()+0x5a>
c000fcdd:	8b 1c 95 80 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb280]
c000fce4:	85 db                	test   ebx,ebx
c000fce6:	74 36                	je     c000fd1e <Directory::close()+0x5a>
c000fce8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fcef:	74 2d                	je     c000fd1e <Directory::close()+0x5a>
c000fcf1:	b8 05 00 00 00       	mov    eax,0x5
c000fcf6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fcfa:	74 22                	je     c000fd1e <Directory::close()+0x5a>
c000fcfc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd00:	8b 04 95 80 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb280]
c000fd07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd0d:	53                   	push   ebx
c000fd0e:	53                   	push   ebx
c000fd0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd11:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd17:	50                   	push   eax
c000fd18:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	83 c4 08             	add    esp,0x8
c000fd21:	5b                   	pop    ebx
c000fd22:	c3                   	ret    
c000fd23:	90                   	nop

c000fd24 <Directory::unlink()>:
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	b8 0b 00 00 00       	mov    eax,0xb
c000fd2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd37:	80 f9 19             	cmp    cl,0x19
c000fd3a:	77 2f                	ja     c000fd6b <Directory::unlink()+0x47>
c000fd3c:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fd43:	85 c9                	test   ecx,ecx
c000fd45:	74 24                	je     c000fd6b <Directory::unlink()+0x47>
c000fd47:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd4d:	85 c9                	test   ecx,ecx
c000fd4f:	74 1a                	je     c000fd6b <Directory::unlink()+0x47>
c000fd51:	b8 06 00 00 00       	mov    eax,0x6
c000fd56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd5a:	75 0f                	jne    c000fd6b <Directory::unlink()+0x47>
c000fd5c:	50                   	push   eax
c000fd5d:	83 c2 0d             	add    edx,0xd
c000fd60:	50                   	push   eax
c000fd61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd63:	52                   	push   edx
c000fd64:	51                   	push   ecx
c000fd65:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd68:	83 c4 10             	add    esp,0x10
c000fd6b:	83 c4 0c             	add    esp,0xc
c000fd6e:	c3                   	ret    
c000fd6f:	90                   	nop

c000fd70 <Directory::rename(char const*)>:
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	b8 0b 00 00 00       	mov    eax,0xb
c000fd78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd83:	80 f9 19             	cmp    cl,0x19
c000fd86:	77 32                	ja     c000fdba <Directory::rename(char const*)+0x4a>
c000fd88:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fd8f:	85 c9                	test   ecx,ecx
c000fd91:	74 27                	je     c000fdba <Directory::rename(char const*)+0x4a>
c000fd93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd99:	85 c9                	test   ecx,ecx
c000fd9b:	74 1d                	je     c000fdba <Directory::rename(char const*)+0x4a>
c000fd9d:	b8 06 00 00 00       	mov    eax,0x6
c000fda2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fda6:	75 12                	jne    c000fdba <Directory::rename(char const*)+0x4a>
c000fda8:	50                   	push   eax
c000fda9:	83 c2 0d             	add    edx,0xd
c000fdac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdb2:	52                   	push   edx
c000fdb3:	51                   	push   ecx
c000fdb4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	83 c4 0c             	add    esp,0xc
c000fdbd:	c3                   	ret    

c000fdbe <Directory::exists()>:
c000fdbe:	83 ec 0c             	sub    esp,0xc
c000fdc1:	31 c0                	xor    eax,eax
c000fdc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdc7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdce:	80 f9 19             	cmp    cl,0x19
c000fdd1:	77 24                	ja     c000fdf7 <Directory::exists()+0x39>
c000fdd3:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fdda:	85 c9                	test   ecx,ecx
c000fddc:	74 19                	je     c000fdf7 <Directory::exists()+0x39>
c000fdde:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fde4:	85 c9                	test   ecx,ecx
c000fde6:	74 0f                	je     c000fdf7 <Directory::exists()+0x39>
c000fde8:	50                   	push   eax
c000fde9:	83 c2 0d             	add    edx,0xd
c000fdec:	50                   	push   eax
c000fded:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdef:	52                   	push   edx
c000fdf0:	51                   	push   ecx
c000fdf1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	83 c4 0c             	add    esp,0xc
c000fdfa:	c3                   	ret    
c000fdfb:	90                   	nop

c000fdfc <Directory::read(dirent*)>:
c000fdfc:	83 ec 1c             	sub    esp,0x1c
c000fdff:	b8 0b 00 00 00       	mov    eax,0xb
c000fe04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe08:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe0f:	80 fa 19             	cmp    dl,0x19
c000fe12:	77 30                	ja     c000fe44 <Directory::read(dirent*)+0x48>
c000fe14:	8b 14 95 80 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb280]
c000fe1b:	85 d2                	test   edx,edx
c000fe1d:	74 25                	je     c000fe44 <Directory::read(dirent*)+0x48>
c000fe1f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe26:	74 1c                	je     c000fe44 <Directory::read(dirent*)+0x48>
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe2d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe31:	52                   	push   edx
c000fe32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe36:	6a 00                	push   0x0
c000fe38:	68 10 01 00 00       	push   0x110
c000fe3d:	51                   	push   ecx
c000fe3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe41:	83 c4 20             	add    esp,0x20
c000fe44:	83 c4 1c             	add    esp,0x1c
c000fe47:	c3                   	ret    

c000fe48 <Directory::create()>:
c000fe48:	83 ec 0c             	sub    esp,0xc
c000fe4b:	b8 0b 00 00 00       	mov    eax,0xb
c000fe50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe54:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe5b:	80 f9 19             	cmp    cl,0x19
c000fe5e:	77 2f                	ja     c000fe8f <Directory::create()+0x47>
c000fe60:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000fe67:	85 c9                	test   ecx,ecx
c000fe69:	74 24                	je     c000fe8f <Directory::create()+0x47>
c000fe6b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe71:	85 c9                	test   ecx,ecx
c000fe73:	74 1a                	je     c000fe8f <Directory::create()+0x47>
c000fe75:	b8 06 00 00 00       	mov    eax,0x6
c000fe7a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe7e:	75 0f                	jne    c000fe8f <Directory::create()+0x47>
c000fe80:	50                   	push   eax
c000fe81:	83 c2 0d             	add    edx,0xd
c000fe84:	50                   	push   eax
c000fe85:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe87:	52                   	push   edx
c000fe88:	51                   	push   ecx
c000fe89:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	83 c4 0c             	add    esp,0xc
c000fe92:	c3                   	ret    
c000fe93:	90                   	nop

c000fe94 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe94:	b8 0a 00 00 00       	mov    eax,0xa
c000fe99:	c3                   	ret    

c000fe9a <Bus::Bus(char const*)>:
c000fe9a:	83 ec 0c             	sub    esp,0xc
c000fe9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea1:	83 ec 08             	sub    esp,0x8
c000fea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea8:	50                   	push   eax
c000fea9:	e8 62 09 00 00       	call   c0010810 <Device::Device(char const*)>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000feb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feba:	89 10                	mov    DWORD PTR [eax],edx
c000febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000feca:	90                   	nop
c000fecb:	83 c4 0c             	add    esp,0xc
c000fece:	c3                   	ret    
c000fecf:	90                   	nop

c000fed0 <Bus::~Bus()>:
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fedc:	89 10                	mov    DWORD PTR [eax],edx
c000fede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee2:	83 ec 0c             	sub    esp,0xc
c000fee5:	50                   	push   eax
c000fee6:	e8 db 05 00 00       	call   c00104c6 <Device::~Device()>
c000feeb:	83 c4 10             	add    esp,0x10
c000feee:	90                   	nop
c000feef:	83 c4 0c             	add    esp,0xc
c000fef2:	c3                   	ret    
c000fef3:	90                   	nop

c000fef4 <Bus::~Bus()>:
c000fef4:	83 ec 0c             	sub    esp,0xc
c000fef7:	83 ec 0c             	sub    esp,0xc
c000fefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefe:	e8 cd ff ff ff       	call   c000fed0 <Bus::~Bus()>
c000ff03:	83 c4 10             	add    esp,0x10
c000ff06:	83 ec 08             	sub    esp,0x8
c000ff09:	68 58 01 00 00       	push   0x158
c000ff0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff12:	e8 ce f1 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	83 c4 0c             	add    esp,0xc
c000ff1d:	c3                   	ret    

c000ff1e <Buzzer::Buzzer(char const*)>:
c000ff1e:	83 ec 0c             	sub    esp,0xc
c000ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff25:	83 ec 08             	sub    esp,0x8
c000ff28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff2c:	50                   	push   eax
c000ff2d:	e8 de 08 00 00       	call   c0010810 <Device::Device(char const*)>
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3e:	89 10                	mov    DWORD PTR [eax],edx
c000ff40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff44:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff52:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff5c:	90                   	nop
c000ff5d:	83 c4 0c             	add    esp,0xc
c000ff60:	c3                   	ret    
c000ff61:	90                   	nop

c000ff62 <Buzzer::~Buzzer()>:
c000ff62:	83 ec 0c             	sub    esp,0xc
c000ff65:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6e:	89 10                	mov    DWORD PTR [eax],edx
c000ff70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff74:	83 ec 0c             	sub    esp,0xc
c000ff77:	50                   	push   eax
c000ff78:	e8 49 05 00 00       	call   c00104c6 <Device::~Device()>
c000ff7d:	83 c4 10             	add    esp,0x10
c000ff80:	90                   	nop
c000ff81:	83 c4 0c             	add    esp,0xc
c000ff84:	c3                   	ret    
c000ff85:	90                   	nop

c000ff86 <Buzzer::~Buzzer()>:
c000ff86:	83 ec 0c             	sub    esp,0xc
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff90:	e8 cd ff ff ff       	call   c000ff62 <Buzzer::~Buzzer()>
c000ff95:	83 c4 10             	add    esp,0x10
c000ff98:	83 ec 08             	sub    esp,0x8
c000ff9b:	68 5c 01 00 00       	push   0x15c
c000ffa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa4:	e8 3c f1 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c000ffa9:	83 c4 10             	add    esp,0x10
c000ffac:	83 c4 0c             	add    esp,0xc
c000ffaf:	c3                   	ret    

c000ffb0 <Buzzer::stop()>:
c000ffb0:	83 ec 14             	sub    esp,0x14
c000ffb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffb7:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffb9:	6a 00                	push   0x0
c000ffbb:	50                   	push   eax
c000ffbc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffbf:	83 c4 1c             	add    esp,0x1c
c000ffc2:	c3                   	ret    

c000ffc3 <beepThread(void*)>:
c000ffc3:	53                   	push   ebx
c000ffc4:	83 ec 08             	sub    esp,0x8
c000ffc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffcb:	e8 75 8a 00 00       	call   c0018a45 <unlockScheduler()>
c000ffd0:	52                   	push   edx
c000ffd1:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffd6:	52                   	push   edx
c000ffd7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffdd:	52                   	push   edx
c000ffde:	50                   	push   eax
c000ffdf:	e8 bd 8f 00 00       	call   c0018fa1 <nanoSleep(unsigned long long)>
c000ffe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe7:	e8 c4 ff ff ff       	call   c000ffb0 <Buzzer::stop()>
c000ffec:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fff4:	83 c4 18             	add    esp,0x18
c000fff7:	5b                   	pop    ebx
c000fff8:	e9 e8 8e 00 00       	jmp    c0018ee5 <blockTask(TaskState)>
c000fffd:	90                   	nop

c000fffe <Buzzer::beep(int, int, bool)>:
c000fffe:	57                   	push   edi
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010005:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001000d:	52                   	push   edx
c001000e:	52                   	push   edx
c001000f:	8b 06                	mov    eax,DWORD PTR [esi]
c0010011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010015:	56                   	push   esi
c0010016:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010019:	89 f8                	mov    eax,edi
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	84 c0                	test   al,al
c0010020:	74 1f                	je     c0010041 <Buzzer::beep(int, int, bool)+0x43>
c0010022:	50                   	push   eax
c0010023:	50                   	push   eax
c0010024:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001002a:	99                   	cdq    
c001002b:	52                   	push   edx
c001002c:	50                   	push   eax
c001002d:	e8 6f 8f 00 00       	call   c0018fa1 <nanoSleep(unsigned long long)>
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010039:	5b                   	pop    ebx
c001003a:	5e                   	pop    esi
c001003b:	5f                   	pop    edi
c001003c:	e9 6f ff ff ff       	jmp    c000ffb0 <Buzzer::stop()>
c0010041:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0010047:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001004c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0010054:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010058:	c7 44 24 14 c3 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffc3
c0010060:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010064:	5b                   	pop    ebx
c0010065:	5e                   	pop    esi
c0010066:	5f                   	pop    edi
c0010067:	e9 0c 8b 00 00       	jmp    c0018b78 <Process::createThread(void (*)(void*), void*, int)>

c001006c <loadClockSettings()>:
c001006c:	c7 05 f4 48 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00248f4,0xa
c0010076:	c6 05 f1 48 02 c0 00 	mov    BYTE PTR ds:0xc00248f1,0x0
c001007d:	c6 05 f0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f0,0x1
c0010084:	c3                   	ret    
c0010085:	90                   	nop

c0010086 <Clock::Clock(char const*)>:
c0010086:	83 ec 0c             	sub    esp,0xc
c0010089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008d:	83 ec 08             	sub    esp,0x8
c0010090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010094:	50                   	push   eax
c0010095:	e8 76 07 00 00       	call   c0010810 <Device::Device(char const*)>
c001009a:	83 c4 10             	add    esp,0x10
c001009d:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00100a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a6:	89 10                	mov    DWORD PTR [eax],edx
c00100a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ac:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100b6:	90                   	nop
c00100b7:	83 c4 0c             	add    esp,0xc
c00100ba:	c3                   	ret    
c00100bb:	90                   	nop

c00100bc <Clock::~Clock()>:
c00100bc:	83 ec 0c             	sub    esp,0xc
c00100bf:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c00100c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c8:	89 10                	mov    DWORD PTR [eax],edx
c00100ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	50                   	push   eax
c00100d2:	e8 ef 03 00 00       	call   c00104c6 <Device::~Device()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	90                   	nop
c00100db:	83 c4 0c             	add    esp,0xc
c00100de:	c3                   	ret    
c00100df:	90                   	nop

c00100e0 <Clock::~Clock()>:
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	83 ec 0c             	sub    esp,0xc
c00100e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ea:	e8 cd ff ff ff       	call   c00100bc <Clock::~Clock()>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	83 ec 08             	sub    esp,0x8
c00100f5:	68 58 01 00 00       	push   0x158
c00100fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100fe:	e8 e2 ef ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0010103:	83 c4 10             	add    esp,0x10
c0010106:	83 c4 0c             	add    esp,0xc
c0010109:	c3                   	ret    

c001010a <Clock::timeInSecondsLocal()>:
c001010a:	53                   	push   ebx
c001010b:	83 ec 14             	sub    esp,0x14
c001010e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010112:	8b 10                	mov    edx,DWORD PTR [eax]
c0010114:	50                   	push   eax
c0010115:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010118:	0f b6 0d f0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248f0
c001011f:	03 0d f4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248f4
c0010125:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001012b:	89 cb                	mov    ebx,ecx
c001012d:	c1 fb 1f             	sar    ebx,0x1f
c0010130:	01 c8                	add    eax,ecx
c0010132:	11 da                	adc    edx,ebx
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	31 c9                	xor    ecx,ecx
c0010139:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c0010140:	74 05                	je     c0010147 <Clock::timeInSecondsLocal()+0x3d>
c0010142:	b9 08 07 00 00       	mov    ecx,0x708
c0010147:	31 db                	xor    ebx,ebx
c0010149:	01 c8                	add    eax,ecx
c001014b:	11 da                	adc    edx,ebx
c001014d:	83 c4 08             	add    esp,0x8
c0010150:	5b                   	pop    ebx
c0010151:	c3                   	ret    

c0010152 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010152:	57                   	push   edi
c0010153:	56                   	push   esi
c0010154:	53                   	push   ebx
c0010155:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010159:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001015d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010161:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010163:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010166:	0f b6 05 f0 48 02 c0 	movzx  eax,BYTE PTR ds:0xc00248f0
c001016d:	03 05 f4 48 02 c0    	add    eax,DWORD PTR ds:0xc00248f4
c0010173:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010179:	99                   	cdq    
c001017a:	29 c6                	sub    esi,eax
c001017c:	19 d7                	sbb    edi,edx
c001017e:	89 f0                	mov    eax,esi
c0010180:	89 fa                	mov    edx,edi
c0010182:	31 f6                	xor    esi,esi
c0010184:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c001018b:	74 05                	je     c0010192 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001018d:	be 08 07 00 00       	mov    esi,0x708
c0010192:	31 ff                	xor    edi,edi
c0010194:	29 f0                	sub    eax,esi
c0010196:	19 fa                	sbb    edx,edi
c0010198:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001019c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101a4:	89 d8                	mov    eax,ebx
c00101a6:	5b                   	pop    ebx
c00101a7:	5e                   	pop    esi
c00101a8:	5f                   	pop    edi
c00101a9:	ff e0                	jmp    eax

c00101ab <datetimeToSeconds(datetime_t)>:
c00101ab:	55                   	push   ebp
c00101ac:	57                   	push   edi
c00101ad:	56                   	push   esi
c00101ae:	53                   	push   ebx
c00101af:	83 ec 14             	sub    esp,0x14
c00101b2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101ba:	0f b6 f5             	movzx  esi,ch
c00101bd:	6b f6 3c             	imul   esi,esi,0x3c
c00101c0:	89 cf                	mov    edi,ecx
c00101c2:	89 d3                	mov    ebx,edx
c00101c4:	0f b6 c9             	movzx  ecx,cl
c00101c7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101cd:	0f b6 c6             	movzx  eax,dh
c00101d0:	c1 ef 10             	shr    edi,0x10
c00101d3:	48                   	dec    eax
c00101d4:	c1 eb 10             	shr    ebx,0x10
c00101d7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101db:	89 f8                	mov    eax,edi
c00101dd:	0f b6 f8             	movzx  edi,al
c00101e0:	01 fe                	add    esi,edi
c00101e2:	01 f1                	add    ecx,esi
c00101e4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101e8:	c1 f9 1f             	sar    ecx,0x1f
c00101eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101ef:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101f4:	0f b6 d2             	movzx  edx,dl
c00101f7:	66 81 eb 6c 07       	sub    bx,0x76c
c00101fc:	8b 0c 8d 00 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde400]
c0010203:	0f b7 f3             	movzx  esi,bx
c0010206:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001020a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001020f:	76 29                	jbe    c001023a <datetimeToSeconds(datetime_t)+0x8f>
c0010211:	f6 c3 03             	test   bl,0x3
c0010214:	75 24                	jne    c001023a <datetimeToSeconds(datetime_t)+0x8f>
c0010216:	31 d2                	xor    edx,edx
c0010218:	bf 64 00 00 00       	mov    edi,0x64
c001021d:	89 d8                	mov    eax,ebx
c001021f:	66 f7 f7             	div    di
c0010222:	66 85 d2             	test   dx,dx
c0010225:	75 12                	jne    c0010239 <datetimeToSeconds(datetime_t)+0x8e>
c0010227:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001022d:	bf 90 01 00 00       	mov    edi,0x190
c0010232:	99                   	cdq    
c0010233:	f7 ff                	idiv   edi
c0010235:	85 d2                	test   edx,edx
c0010237:	75 01                	jne    c001023a <datetimeToSeconds(datetime_t)+0x8f>
c0010239:	41                   	inc    ecx
c001023a:	66 83 fb 46          	cmp    bx,0x46
c001023e:	76 45                	jbe    c0010285 <datetimeToSeconds(datetime_t)+0xda>
c0010240:	bb 46 00 00 00       	mov    ebx,0x46
c0010245:	bf 64 00 00 00       	mov    edi,0x64
c001024a:	bd 90 01 00 00       	mov    ebp,0x190
c001024f:	b8 6d 01 00 00       	mov    eax,0x16d
c0010254:	f6 c3 03             	test   bl,0x3
c0010257:	75 23                	jne    c001027c <datetimeToSeconds(datetime_t)+0xd1>
c0010259:	89 d8                	mov    eax,ebx
c001025b:	99                   	cdq    
c001025c:	f7 ff                	idiv   edi
c001025e:	85 d2                	test   edx,edx
c0010260:	b8 6e 01 00 00       	mov    eax,0x16e
c0010265:	75 15                	jne    c001027c <datetimeToSeconds(datetime_t)+0xd1>
c0010267:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001026d:	99                   	cdq    
c001026e:	f7 fd                	idiv   ebp
c0010270:	31 c0                	xor    eax,eax
c0010272:	85 d2                	test   edx,edx
c0010274:	0f 94 c0             	sete   al
c0010277:	05 6d 01 00 00       	add    eax,0x16d
c001027c:	43                   	inc    ebx
c001027d:	01 c1                	add    ecx,eax
c001027f:	39 f3                	cmp    ebx,esi
c0010281:	7c cc                	jl     c001024f <datetimeToSeconds(datetime_t)+0xa4>
c0010283:	eb 3b                	jmp    c00102c0 <datetimeToSeconds(datetime_t)+0x115>
c0010285:	74 39                	je     c00102c0 <datetimeToSeconds(datetime_t)+0x115>
c0010287:	b8 45 00 00 00       	mov    eax,0x45
c001028c:	89 c2                	mov    edx,eax
c001028e:	83 e2 03             	and    edx,0x3
c0010291:	39 f0                	cmp    eax,esi
c0010293:	7e 13                	jle    c00102a8 <datetimeToSeconds(datetime_t)+0xfd>
c0010295:	85 d2                	test   edx,edx
c0010297:	0f 94 c2             	sete   dl
c001029a:	0f b6 d2             	movzx  edx,dl
c001029d:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102a3:	48                   	dec    eax
c00102a4:	29 d1                	sub    ecx,edx
c00102a6:	eb e4                	jmp    c001028c <datetimeToSeconds(datetime_t)+0xe1>
c00102a8:	b8 6d 01 00 00       	mov    eax,0x16d
c00102ad:	85 d2                	test   edx,edx
c00102af:	75 0d                	jne    c00102be <datetimeToSeconds(datetime_t)+0x113>
c00102b1:	31 c0                	xor    eax,eax
c00102b3:	66 85 db             	test   bx,bx
c00102b6:	0f 95 c0             	setne  al
c00102b9:	05 6d 01 00 00       	add    eax,0x16d
c00102be:	29 c1                	sub    ecx,eax
c00102c0:	b8 80 51 01 00       	mov    eax,0x15180
c00102c5:	f7 e9                	imul   ecx
c00102c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102cf:	83 c4 14             	add    esp,0x14
c00102d2:	5b                   	pop    ebx
c00102d3:	5e                   	pop    esi
c00102d4:	5f                   	pop    edi
c00102d5:	5d                   	pop    ebp
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102d8:	57                   	push   edi
c00102d9:	56                   	push   esi
c00102da:	53                   	push   ebx
c00102db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102df:	8b 06                	mov    eax,DWORD PTR [esi]
c00102e1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ec:	e8 ba fe ff ff       	call   c00101ab <datetimeToSeconds(datetime_t)>
c00102f1:	59                   	pop    ecx
c00102f2:	0f b6 0d f0 48 02 c0 	movzx  ecx,BYTE PTR ds:0xc00248f0
c00102f9:	03 0d f4 48 02 c0    	add    ecx,DWORD PTR ds:0xc00248f4
c00102ff:	5b                   	pop    ebx
c0010300:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010306:	89 cb                	mov    ebx,ecx
c0010308:	c1 fb 1f             	sar    ebx,0x1f
c001030b:	29 c8                	sub    eax,ecx
c001030d:	19 da                	sbb    edx,ebx
c001030f:	31 c9                	xor    ecx,ecx
c0010311:	80 3d f1 48 02 c0 00 	cmp    BYTE PTR ds:0xc00248f1,0x0
c0010318:	74 05                	je     c001031f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001031a:	b9 08 07 00 00       	mov    ecx,0x708
c001031f:	31 db                	xor    ebx,ebx
c0010321:	29 c8                	sub    eax,ecx
c0010323:	19 da                	sbb    edx,ebx
c0010325:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010329:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001032d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010331:	5b                   	pop    ebx
c0010332:	89 f8                	mov    eax,edi
c0010334:	5e                   	pop    esi
c0010335:	5f                   	pop    edi
c0010336:	ff e0                	jmp    eax

c0010338 <secondsToDatetime(unsigned long long)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001034b:	6a 00                	push   0x0
c001034d:	68 80 51 01 00       	push   0x15180
c0010352:	55                   	push   ebp
c0010353:	57                   	push   edi
c0010354:	e8 a3 f1 00 00       	call   c001f4fc <__udivdi3>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010360:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010366:	6a 00                	push   0x0
c0010368:	68 80 51 01 00       	push   0x15180
c001036d:	55                   	push   ebp
c001036e:	57                   	push   edi
c001036f:	e8 88 f2 00 00       	call   c001f5fc <__umoddi3>
c0010374:	bf 10 0e 00 00       	mov    edi,0xe10
c0010379:	83 c4 10             	add    esp,0x10
c001037c:	99                   	cdq    
c001037d:	f7 ff                	idiv   edi
c001037f:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010382:	89 d0                	mov    eax,edx
c0010384:	99                   	cdq    
c0010385:	bf 3c 00 00 00       	mov    edi,0x3c
c001038a:	f7 ff                	idiv   edi
c001038c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001038f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010392:	85 db                	test   ebx,ebx
c0010394:	79 11                	jns    c00103a7 <secondsToDatetime(unsigned long long)+0x6f>
c0010396:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001039a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103a0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103a5:	eb 07                	jmp    c00103ae <secondsToDatetime(unsigned long long)+0x76>
c00103a7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103ac:	89 d8                	mov    eax,ebx
c00103ae:	99                   	cdq    
c00103af:	f7 f9                	idiv   ecx
c00103b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103b5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103ba:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103c2:	01 c3                	add    ebx,eax
c00103c4:	31 d2                	xor    edx,edx
c00103c6:	89 d8                	mov    eax,ebx
c00103c8:	bf b4 05 00 00       	mov    edi,0x5b4
c00103cd:	f7 f1                	div    ecx
c00103cf:	31 d2                	xor    edx,edx
c00103d1:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103d6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103d9:	89 d8                	mov    eax,ebx
c00103db:	f7 f7                	div    edi
c00103dd:	29 c1                	sub    ecx,eax
c00103df:	31 d2                	xor    edx,edx
c00103e1:	89 d8                	mov    eax,ebx
c00103e3:	f7 f5                	div    ebp
c00103e5:	29 c1                	sub    ecx,eax
c00103e7:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103ec:	89 c8                	mov    eax,ecx
c00103ee:	31 d2                	xor    edx,edx
c00103f0:	f7 f5                	div    ebp
c00103f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00103fb:	89 c8                	mov    eax,ecx
c00103fd:	31 d2                	xor    edx,edx
c00103ff:	f7 f5                	div    ebp
c0010401:	01 c3                	add    ebx,eax
c0010403:	31 d2                	xor    edx,edx
c0010405:	89 c8                	mov    eax,ecx
c0010407:	f7 f7                	div    edi
c0010409:	29 c3                	sub    ebx,eax
c001040b:	bf 99 00 00 00       	mov    edi,0x99
c0010410:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010418:	29 c3                	sub    ebx,eax
c001041a:	31 d2                	xor    edx,edx
c001041c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001041f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010422:	83 c1 02             	add    ecx,0x2
c0010425:	bb 05 00 00 00       	mov    ebx,0x5
c001042a:	89 c8                	mov    eax,ecx
c001042c:	f7 f7                	div    edi
c001042e:	89 c7                	mov    edi,eax
c0010430:	31 d2                	xor    edx,edx
c0010432:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010438:	83 c0 02             	add    eax,0x2
c001043b:	f7 f3                	div    ebx
c001043d:	89 eb                	mov    ebx,ebp
c001043f:	29 c3                	sub    ebx,eax
c0010441:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010447:	19 c0                	sbb    eax,eax
c0010449:	31 d2                	xor    edx,edx
c001044b:	83 e0 0c             	and    eax,0xc
c001044e:	88 1e                	mov    BYTE PTR [esi],bl
c0010450:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010454:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001045c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010460:	83 f9 01             	cmp    ecx,0x1
c0010463:	0f 96 c2             	setbe  dl
c0010466:	01 d0                	add    eax,edx
c0010468:	41                   	inc    ecx
c0010469:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001046d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010470:	83 c4 1c             	add    esp,0x1c
c0010473:	89 f0                	mov    eax,esi
c0010475:	5b                   	pop    ebx
c0010476:	5e                   	pop    esi
c0010477:	5f                   	pop    edi
c0010478:	5d                   	pop    ebp
c0010479:	c2 04 00             	ret    0x4

c001047c <Clock::timeInDatetimeLocal()>:
c001047c:	53                   	push   ebx
c001047d:	83 ec 14             	sub    esp,0x14
c0010480:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010484:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010488:	e8 7d fc ff ff       	call   c001010a <Clock::timeInSecondsLocal()>
c001048d:	83 c4 0c             	add    esp,0xc
c0010490:	52                   	push   edx
c0010491:	50                   	push   eax
c0010492:	53                   	push   ebx
c0010493:	e8 a0 fe ff ff       	call   c0010338 <secondsToDatetime(unsigned long long)>
c0010498:	83 c4 14             	add    esp,0x14
c001049b:	89 d8                	mov    eax,ebx
c001049d:	5b                   	pop    ebx
c001049e:	c2 04 00             	ret    0x4
c00104a1:	90                   	nop

c00104a2 <Device::hibernate()>:
c00104a2:	c3                   	ret    
c00104a3:	90                   	nop

c00104a4 <Device::wake()>:
c00104a4:	c3                   	ret    
c00104a5:	90                   	nop

c00104a6 <Device::detect()>:
c00104a6:	c3                   	ret    
c00104a7:	90                   	nop

c00104a8 <Device::disableLegacy()>:
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <Device::powerSaving(PowerSavingLevel)>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <DriverlessDevice::close(int, int, void*)>:
c00104ac:	31 c0                	xor    eax,eax
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <DriverlessDevice::detect()>:
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <DriverlessDevice::open(int, int, void*)>:
c00104b2:	83 ec 18             	sub    esp,0x18
c00104b5:	68 30 1c 02 c0       	push   0xc0021c30
c00104ba:	e8 7b 55 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c00104bf:	83 c8 ff             	or     eax,0xffffffff
c00104c2:	83 c4 1c             	add    esp,0x1c
c00104c5:	c3                   	ret    

c00104c6 <Device::~Device()>:
c00104c6:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c00104cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104cf:	89 10                	mov    DWORD PTR [eax],edx
c00104d1:	90                   	nop
c00104d2:	c3                   	ret    
c00104d3:	90                   	nop

c00104d4 <Device::~Device()>:
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104db:	e8 e6 ff ff ff       	call   c00104c6 <Device::~Device()>
c00104e0:	83 c4 04             	add    esp,0x4
c00104e3:	83 ec 08             	sub    esp,0x8
c00104e6:	68 58 01 00 00       	push   0x158
c00104eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ef:	e8 f1 eb ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00104f4:	83 c4 10             	add    esp,0x10
c00104f7:	83 c4 0c             	add    esp,0xc
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <Device::findAndLoadDriver()>:
c00104fc:	c3                   	ret    
c00104fd:	90                   	nop

c00104fe <Device::preOpenPCI(PCIDeviceInfo)>:
c00104fe:	57                   	push   edi
c00104ff:	b9 09 00 00 00       	mov    ecx,0x9
c0010504:	56                   	push   esi
c0010505:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010509:	81 c7 18 01 00 00    	add    edi,0x118
c001050f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010513:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c001051a:	fc                   	cld    
c001051b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001051d:	5e                   	pop    esi
c001051e:	5f                   	pop    edi
c001051f:	c3                   	ret    

c0010520 <Device::preOpenACPI(void*, char*, char*)>:
c0010520:	56                   	push   esi
c0010521:	53                   	push   ebx
c0010522:	83 ec 08             	sub    esp,0x8
c0010525:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010529:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001052d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010531:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010537:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010541:	6a 1e                	push   0x1e
c0010543:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010549:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001054d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010553:	50                   	push   eax
c0010554:	e8 2b 01 ff ff       	call   c0000684 <memcpy>
c0010559:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001055d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010561:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010569:	83 c4 14             	add    esp,0x14
c001056c:	5b                   	pop    ebx
c001056d:	5e                   	pop    esi
c001056e:	e9 11 01 ff ff       	jmp    c0000684 <memcpy>
c0010573:	90                   	nop

c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010574:	55                   	push   ebp
c0010575:	57                   	push   edi
c0010576:	56                   	push   esi
c0010577:	53                   	push   ebx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001057f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010583:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010587:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001058b:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010590:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010597:	75 0b                	jne    c00105a4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010599:	8b 00                	mov    eax,DWORD PTR [eax]
c001059b:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001059f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105a2:	eb 24                	jmp    c00105c8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105a4:	e8 25 43 00 00       	call   c00148ce <thisCPU()>
c00105a9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105af:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105b5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105b9:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105bd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105c5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105c8:	83 c4 0c             	add    esp,0xc
c00105cb:	5b                   	pop    ebx
c00105cc:	5e                   	pop    esi
c00105cd:	5f                   	pop    edi
c00105ce:	5d                   	pop    ebp
c00105cf:	ff e0                	jmp    eax
c00105d1:	90                   	nop

c00105d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105d2:	57                   	push   edi
c00105d3:	56                   	push   esi
c00105d4:	53                   	push   ebx
c00105d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105e1:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105e6:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105ed:	75 0b                	jne    c00105fa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00105f1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105f5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00105f8:	eb 20                	jmp    c001061a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00105fa:	e8 cf 42 00 00       	call   c00148ce <thisCPU()>
c00105ff:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010605:	8b 10                	mov    edx,DWORD PTR [eax]
c0010607:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001060b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001060f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010617:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001061a:	5b                   	pop    ebx
c001061b:	5e                   	pop    esi
c001061c:	5f                   	pop    edi
c001061d:	ff e0                	jmp    eax
c001061f:	90                   	nop

c0010620 <Device::addChild(Device*)>:
c0010620:	53                   	push   ebx
c0010621:	83 ec 08             	sub    esp,0x8
c0010624:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001062c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010632:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010638:	8b 13                	mov    edx,DWORD PTR [ebx]
c001063a:	85 d2                	test   edx,edx
c001063c:	74 04                	je     c0010642 <Device::addChild(Device*)+0x22>
c001063e:	89 d3                	mov    ebx,edx
c0010640:	eb f6                	jmp    c0010638 <Device::addChild(Device*)+0x18>
c0010642:	83 ec 0c             	sub    esp,0xc
c0010645:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010648:	6a 08                	push   0x8
c001064a:	e8 87 ea ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001064f:	89 03                	mov    DWORD PTR [ebx],eax
c0010651:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010657:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001065e:	83 c4 18             	add    esp,0x18
c0010661:	5b                   	pop    ebx
c0010662:	c3                   	ret    
c0010663:	90                   	nop

c0010664 <Device::removeAllChildren()>:
c0010664:	56                   	push   esi
c0010665:	53                   	push   ebx
c0010666:	52                   	push   edx
c0010667:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001066b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010671:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010674:	74 17                	je     c001068d <Device::removeAllChildren()+0x29>
c0010676:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010679:	85 c0                	test   eax,eax
c001067b:	74 0c                	je     c0010689 <Device::removeAllChildren()+0x25>
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	8b 10                	mov    edx,DWORD PTR [eax]
c0010682:	50                   	push   eax
c0010683:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010686:	83 c4 10             	add    esp,0x10
c0010689:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001068b:	eb e4                	jmp    c0010671 <Device::removeAllChildren()+0xd>
c001068d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010693:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010699:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001069f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106a6:	58                   	pop    eax
c00106a7:	5b                   	pop    ebx
c00106a8:	5e                   	pop    esi
c00106a9:	c3                   	ret    

c00106aa <Device::hibernateAll()>:
c00106aa:	53                   	push   ebx
c00106ab:	83 ec 14             	sub    esp,0x14
c00106ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106b4:	53                   	push   ebx
c00106b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106c4:	74 0f                	je     c00106d5 <Device::hibernateAll()+0x2b>
c00106c6:	83 ec 0c             	sub    esp,0xc
c00106c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106cc:	e8 d9 ff ff ff       	call   c00106aa <Device::hibernateAll()>
c00106d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106d3:	eb e9                	jmp    c00106be <Device::hibernateAll()+0x14>
c00106d5:	83 c4 08             	add    esp,0x8
c00106d8:	5b                   	pop    ebx
c00106d9:	c3                   	ret    

c00106da <Device::wakeAll()>:
c00106da:	53                   	push   ebx
c00106db:	83 ec 14             	sub    esp,0x14
c00106de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106e4:	53                   	push   ebx
c00106e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106f4:	74 0f                	je     c0010705 <Device::wakeAll()+0x2b>
c00106f6:	83 ec 0c             	sub    esp,0xc
c00106f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106fc:	e8 d9 ff ff ff       	call   c00106da <Device::wakeAll()>
c0010701:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010703:	eb e9                	jmp    c00106ee <Device::wakeAll()+0x14>
c0010705:	83 c4 08             	add    esp,0x8
c0010708:	5b                   	pop    ebx
c0010709:	c3                   	ret    

c001070a <Device::detectAll()>:
c001070a:	53                   	push   ebx
c001070b:	83 ec 14             	sub    esp,0x14
c001070e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010712:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010714:	53                   	push   ebx
c0010715:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010718:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010724:	74 0f                	je     c0010735 <Device::detectAll()+0x2b>
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001072c:	e8 d9 ff ff ff       	call   c001070a <Device::detectAll()>
c0010731:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010733:	eb e9                	jmp    c001071e <Device::detectAll()+0x14>
c0010735:	83 c4 08             	add    esp,0x8
c0010738:	5b                   	pop    ebx
c0010739:	c3                   	ret    

c001073a <Device::disableLegacyAll()>:
c001073a:	53                   	push   ebx
c001073b:	83 ec 14             	sub    esp,0x14
c001073e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010742:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010744:	53                   	push   ebx
c0010745:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010748:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001074e:	83 c4 10             	add    esp,0x10
c0010751:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010754:	74 0f                	je     c0010765 <Device::disableLegacyAll()+0x2b>
c0010756:	83 ec 0c             	sub    esp,0xc
c0010759:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001075c:	e8 d9 ff ff ff       	call   c001073a <Device::disableLegacyAll()>
c0010761:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010763:	eb e9                	jmp    c001074e <Device::disableLegacyAll()+0x14>
c0010765:	83 c4 08             	add    esp,0x8
c0010768:	5b                   	pop    ebx
c0010769:	c3                   	ret    

c001076a <Device::loadDriversForAll()>:
c001076a:	53                   	push   ebx
c001076b:	83 ec 08             	sub    esp,0x8
c001076e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010772:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010778:	8b 18                	mov    ebx,DWORD PTR [eax]
c001077a:	85 db                	test   ebx,ebx
c001077c:	74 12                	je     c0010790 <Device::loadDriversForAll()+0x26>
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010784:	e8 e1 ff ff ff       	call   c001076a <Device::loadDriversForAll()>
c0010789:	83 c4 10             	add    esp,0x10
c001078c:	89 d8                	mov    eax,ebx
c001078e:	eb e8                	jmp    c0010778 <Device::loadDriversForAll()+0xe>
c0010790:	83 c4 08             	add    esp,0x8
c0010793:	5b                   	pop    ebx
c0010794:	c3                   	ret    
c0010795:	90                   	nop

c0010796 <Device::closeAll()>:
c0010796:	53                   	push   ebx
c0010797:	83 ec 08             	sub    esp,0x8
c001079a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001079e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a0:	6a 00                	push   0x0
c00107a2:	6a 00                	push   0x0
c00107a4:	6a 00                	push   0x0
c00107a6:	53                   	push   ebx
c00107a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107b0:	83 c4 10             	add    esp,0x10
c00107b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107b6:	74 0f                	je     c00107c7 <Device::closeAll()+0x31>
c00107b8:	83 ec 0c             	sub    esp,0xc
c00107bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107be:	e8 d3 ff ff ff       	call   c0010796 <Device::closeAll()>
c00107c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107c5:	eb e9                	jmp    c00107b0 <Device::closeAll()+0x1a>
c00107c7:	83 c4 08             	add    esp,0x8
c00107ca:	5b                   	pop    ebx
c00107cb:	c3                   	ret    

c00107cc <Device::powerSavingAll(PowerSavingLevel)>:
c00107cc:	56                   	push   esi
c00107cd:	53                   	push   ebx
c00107ce:	83 ec 0c             	sub    esp,0xc
c00107d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107db:	56                   	push   esi
c00107dc:	53                   	push   ebx
c00107dd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107e6:	83 c4 10             	add    esp,0x10
c00107e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107ec:	74 0f                	je     c00107fd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107ee:	52                   	push   edx
c00107ef:	52                   	push   edx
c00107f0:	56                   	push   esi
c00107f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107f4:	e8 d3 ff ff ff       	call   c00107cc <Device::powerSavingAll(PowerSavingLevel)>
c00107f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107fb:	eb e9                	jmp    c00107e6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00107fd:	58                   	pop    eax
c00107fe:	5b                   	pop    ebx
c00107ff:	5e                   	pop    esi
c0010800:	c3                   	ret    
c0010801:	90                   	nop

c0010802 <Device::setName(char const*)>:
c0010802:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001080a:	e9 4a ff fe ff       	jmp    c0000759 <strcpy>
c001080f:	90                   	nop

c0010810 <Device::Device(char const*)>:
c0010810:	83 ec 0c             	sub    esp,0xc
c0010813:	ba 58 1c 02 c0       	mov    edx,0xc0021c58
c0010818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081c:	89 10                	mov    DWORD PTR [eax],edx
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001082c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010830:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010856:	83 ec 08             	sub    esp,0x8
c0010859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001085d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010861:	e8 9c ff ff ff       	call   c0010802 <Device::setName(char const*)>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	83 ec 0c             	sub    esp,0xc
c001086c:	6a 08                	push   0x8
c001086e:	e8 63 e8 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010873:	83 c4 10             	add    esp,0x10
c0010876:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001087c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010887:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001088d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010891:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010897:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001089d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00108fc:	90                   	nop
c00108fd:	83 c4 0c             	add    esp,0xc
c0010900:	c3                   	ret    
c0010901:	90                   	nop

c0010902 <Device::getName()>:
c0010902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010906:	05 d0 00 00 00       	add    eax,0xd0
c001090b:	c3                   	ret    

c001090c <DriverlessDevice::DriverlessDevice(char const*)>:
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010913:	83 ec 08             	sub    esp,0x8
c0010916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091a:	50                   	push   eax
c001091b:	e8 f0 fe ff ff       	call   c0010810 <Device::Device(char const*)>
c0010920:	83 c4 10             	add    esp,0x10
c0010923:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c0010928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092c:	89 10                	mov    DWORD PTR [eax],edx
c001092e:	90                   	nop
c001092f:	83 c4 0c             	add    esp,0xc
c0010932:	c3                   	ret    
c0010933:	90                   	nop

c0010934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010934:	57                   	push   edi
c0010935:	56                   	push   esi
c0010936:	53                   	push   ebx
c0010937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001093b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001093f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010943:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010949:	75 0c                	jne    c0010957 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001094b:	52                   	push   edx
c001094c:	52                   	push   edx
c001094d:	53                   	push   ebx
c001094e:	56                   	push   esi
c001094f:	e8 c0 f0 00 00       	call   c001fa14 <LinkedList<Device>::addElement(Device*)>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001095d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010960:	74 12                	je     c0010974 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010962:	50                   	push   eax
c0010963:	57                   	push   edi
c0010964:	56                   	push   esi
c0010965:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010968:	e8 c7 ff ff ff       	call   c0010934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001096d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	eb e9                	jmp    c001095d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010974:	5b                   	pop    ebx
c0010975:	5e                   	pop    esi
c0010976:	5f                   	pop    edi
c0010977:	c3                   	ret    

c0010978 <getDevicesOfType(DeviceType)>:
c0010978:	53                   	push   ebx
c0010979:	83 ec 14             	sub    esp,0x14
c001097c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010980:	53                   	push   ebx
c0010981:	e8 6a f1 00 00       	call   c001faf0 <LinkedList<Device>::LinkedList()>
c0010986:	83 c4 0c             	add    esp,0xc
c0010989:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001098d:	53                   	push   ebx
c001098e:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0010994:	e8 9b ff ff ff       	call   c0010934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010999:	83 c4 18             	add    esp,0x18
c001099c:	89 d8                	mov    eax,ebx
c001099e:	5b                   	pop    ebx
c001099f:	c2 04 00             	ret    0x4

c00109a2 <HardDiskController::HardDiskController(char const*)>:
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a9:	83 ec 08             	sub    esp,0x8
c00109ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b0:	50                   	push   eax
c00109b1:	e8 5a fe ff ff       	call   c0010810 <Device::Device(char const*)>
c00109b6:	83 c4 10             	add    esp,0x10
c00109b9:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c2:	89 10                	mov    DWORD PTR [eax],edx
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109d2:	90                   	nop
c00109d3:	83 c4 0c             	add    esp,0xc
c00109d6:	c3                   	ret    
c00109d7:	90                   	nop

c00109d8 <HardDiskController::~HardDiskController()>:
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	ba b0 1c 02 c0       	mov    edx,0xc0021cb0
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	89 10                	mov    DWORD PTR [eax],edx
c00109e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	50                   	push   eax
c00109ee:	e8 d3 fa ff ff       	call   c00104c6 <Device::~Device()>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	90                   	nop
c00109f7:	83 c4 0c             	add    esp,0xc
c00109fa:	c3                   	ret    
c00109fb:	90                   	nop

c00109fc <HardDiskController::~HardDiskController()>:
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	83 ec 0c             	sub    esp,0xc
c0010a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a06:	e8 cd ff ff ff       	call   c00109d8 <HardDiskController::~HardDiskController()>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	83 ec 08             	sub    esp,0x8
c0010a11:	68 58 01 00 00       	push   0x158
c0010a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1a:	e8 c6 e6 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	83 c4 0c             	add    esp,0xc
c0010a25:	c3                   	ret    

c0010a26 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2d:	83 ec 08             	sub    esp,0x8
c0010a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a34:	50                   	push   eax
c0010a35:	e8 d6 fd ff ff       	call   c0010810 <Device::Device(char const*)>
c0010a3a:	83 c4 10             	add    esp,0x10
c0010a3d:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a46:	89 10                	mov    DWORD PTR [eax],edx
c0010a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a57:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a62:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a74:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a88:	90                   	nop
c0010a89:	83 c4 0c             	add    esp,0xc
c0010a8c:	c3                   	ret    
c0010a8d:	90                   	nop

c0010a8e <PhysicalDisk::startCache()>:
c0010a8e:	56                   	push   esi
c0010a8f:	53                   	push   ebx
c0010a90:	83 ec 10             	sub    esp,0x10
c0010a93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a97:	6a 30                	push   0x30
c0010a99:	e8 38 e6 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010a9e:	89 c6                	mov    esi,eax
c0010aa0:	58                   	pop    eax
c0010aa1:	5a                   	pop    edx
c0010aa2:	53                   	push   ebx
c0010aa3:	56                   	push   esi
c0010aa4:	e8 3b 25 00 00       	call   c0012fe4 <VCache::VCache(PhysicalDisk*)>
c0010aa9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010aaf:	83 c4 14             	add    esp,0x14
c0010ab2:	5b                   	pop    ebx
c0010ab3:	5e                   	pop    esi
c0010ab4:	c3                   	ret    
c0010ab5:	90                   	nop

c0010ab6 <PhysicalDisk::~PhysicalDisk()>:
c0010ab6:	83 ec 0c             	sub    esp,0xc
c0010ab9:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c0010abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac2:	89 10                	mov    DWORD PTR [eax],edx
c0010ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	50                   	push   eax
c0010acc:	e8 f5 f9 ff ff       	call   c00104c6 <Device::~Device()>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	90                   	nop
c0010ad5:	83 c4 0c             	add    esp,0xc
c0010ad8:	c3                   	ret    
c0010ad9:	90                   	nop

c0010ada <PhysicalDisk::~PhysicalDisk()>:
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae4:	e8 cd ff ff ff       	call   c0010ab6 <PhysicalDisk::~PhysicalDisk()>
c0010ae9:	83 c4 10             	add    esp,0x10
c0010aec:	83 ec 08             	sub    esp,0x8
c0010aef:	68 6c 01 00 00       	push   0x16c
c0010af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af8:	e8 e8 e5 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0010afd:	83 c4 10             	add    esp,0x10
c0010b00:	83 c4 0c             	add    esp,0xc
c0010b03:	c3                   	ret    

c0010b04 <FPU::FPU(char const*)>:
c0010b04:	83 ec 0c             	sub    esp,0xc
c0010b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0b:	83 ec 08             	sub    esp,0x8
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	50                   	push   eax
c0010b13:	e8 f8 fc ff ff       	call   c0010810 <Device::Device(char const*)>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b24:	89 10                	mov    DWORD PTR [eax],edx
c0010b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b34:	90                   	nop
c0010b35:	83 c4 0c             	add    esp,0xc
c0010b38:	c3                   	ret    
c0010b39:	90                   	nop

c0010b3a <FPU::~FPU()>:
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c0010b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b46:	89 10                	mov    DWORD PTR [eax],edx
c0010b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	50                   	push   eax
c0010b50:	e8 71 f9 ff ff       	call   c00104c6 <Device::~Device()>
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	90                   	nop
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <FPU::~FPU()>:
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b68:	e8 cd ff ff ff       	call   c0010b3a <FPU::~FPU()>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	83 ec 08             	sub    esp,0x8
c0010b73:	68 58 01 00 00       	push   0x158
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	e8 64 e5 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0010b81:	83 c4 10             	add    esp,0x10
c0010b84:	83 c4 0c             	add    esp,0xc
c0010b87:	c3                   	ret    

c0010b88 <setupFPU()>:
c0010b88:	53                   	push   ebx
c0010b89:	83 ec 08             	sub    esp,0x8
c0010b8c:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0010b91:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010b98:	74 19                	je     c0010bb3 <setupFPU()+0x2b>
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	68 58 01 00 00       	push   0x158
c0010ba2:	e8 2f e5 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010ba7:	89 c3                	mov    ebx,eax
c0010ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bac:	e8 97 d5 00 00       	call   c001e148 <AVX::AVX()>
c0010bb1:	eb 5b                	jmp    c0010c0e <setupFPU()+0x86>
c0010bb3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bb9:	84 c0                	test   al,al
c0010bbb:	79 19                	jns    c0010bd6 <setupFPU()+0x4e>
c0010bbd:	83 ec 0c             	sub    esp,0xc
c0010bc0:	68 58 01 00 00       	push   0x158
c0010bc5:	e8 0c e5 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010bca:	89 c3                	mov    ebx,eax
c0010bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bcf:	e8 9a d6 00 00       	call   c001e26e <SSE::SSE()>
c0010bd4:	eb 38                	jmp    c0010c0e <setupFPU()+0x86>
c0010bd6:	a8 20                	test   al,0x20
c0010bd8:	74 19                	je     c0010bf3 <setupFPU()+0x6b>
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	68 58 01 00 00       	push   0x158
c0010be2:	e8 ef e4 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010be7:	89 c3                	mov    ebx,eax
c0010be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bec:	e8 e7 d5 00 00       	call   c001e1d8 <MMX::MMX()>
c0010bf1:	eb 1b                	jmp    c0010c0e <setupFPU()+0x86>
c0010bf3:	a8 10                	test   al,0x10
c0010bf5:	74 1c                	je     c0010c13 <setupFPU()+0x8b>
c0010bf7:	83 ec 0c             	sub    esp,0xc
c0010bfa:	68 58 01 00 00       	push   0x158
c0010bff:	e8 d2 e4 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0010c04:	89 c3                	mov    ebx,eax
c0010c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c09:	e8 ee d6 00 00       	call   c001e2fc <x87::x87()>
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	eb 2c                	jmp    c0010c3f <setupFPU()+0xb7>
c0010c13:	83 ec 0c             	sub    esp,0xc
c0010c16:	31 db                	xor    ebx,ebx
c0010c18:	68 08 1d 02 c0       	push   0xc0021d08
c0010c1d:	e8 e9 e5 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0010c22:	e8 a7 3c 00 00       	call   c00148ce <thisCPU()>
c0010c27:	e8 a2 3c 00 00       	call   c00148ce <thisCPU()>
c0010c2c:	e8 17 ef 00 00       	call   c001fb48 <CPU::readCR0()>
c0010c31:	83 c8 04             	or     eax,0x4
c0010c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c37:	e8 1e ef 00 00       	call   c001fb5a <CPU::writeCR0(unsigned long)>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	83 c4 08             	add    esp,0x8
c0010c42:	89 d8                	mov    eax,ebx
c0010c44:	5b                   	pop    ebx
c0010c45:	c3                   	ret    

c0010c46 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c4e:	c1 e0 04             	shl    eax,0x4
c0010c51:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c55:	8d 50 10             	lea    edx,[eax+0x10]
c0010c58:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c5e:	74 08                	je     c0010c68 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c60:	83 c0 04             	add    eax,0x4
c0010c63:	39 d0                	cmp    eax,edx
c0010c65:	75 f1                	jne    c0010c58 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c67:	c3                   	ret    
c0010c68:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c72:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c7c:	eb e2                	jmp    c0010c60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c7e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c7e:	57                   	push   edi
c0010c7f:	31 c0                	xor    eax,eax
c0010c81:	56                   	push   esi
c0010c82:	53                   	push   ebx
c0010c83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c8f:	89 da                	mov    edx,ebx
c0010c91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c95:	c1 e2 04             	shl    edx,0x4
c0010c98:	01 ca                	add    edx,ecx
c0010c9a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010ca2:	74 16                	je     c0010cba <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010ca4:	40                   	inc    eax
c0010ca5:	83 f8 04             	cmp    eax,0x4
c0010ca8:	75 f0                	jne    c0010c9a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010caa:	c7 44 24 10 4c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d4c
c0010cb2:	5b                   	pop    ebx
c0010cb3:	5e                   	pop    esi
c0010cb4:	5f                   	pop    edi
c0010cb5:	e9 80 4d 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c0010cba:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cbd:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cc0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cc6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010ccc:	5b                   	pop    ebx
c0010ccd:	5e                   	pop    esi
c0010cce:	5f                   	pop    edi
c0010ccf:	c3                   	ret    

c0010cd0 <doubleFault(regs*, void*)>:
c0010cd0:	55                   	push   ebp
c0010cd1:	89 e5                	mov    ebp,esp
c0010cd3:	83 ec 08             	sub    esp,0x8
c0010cd6:	83 ec 0c             	sub    esp,0xc
c0010cd9:	68 87 1d 02 c0       	push   0xc0021d87
c0010cde:	e8 57 4d 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0010ce3:	83 c4 10             	add    esp,0x10
c0010ce6:	90                   	nop
c0010ce7:	c9                   	leave  
c0010ce8:	c3                   	ret    
c0010ce9:	90                   	nop

c0010cea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cea:	56                   	push   esi
c0010ceb:	53                   	push   ebx
c0010cec:	50                   	push   eax
c0010ced:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cf5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010cfa:	75 35                	jne    c0010d31 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010cfc:	8d 43 20             	lea    eax,[ebx+0x20]
c0010cff:	31 d2                	xor    edx,edx
c0010d01:	89 c1                	mov    ecx,eax
c0010d03:	c1 e1 04             	shl    ecx,0x4
c0010d06:	01 f1                	add    ecx,esi
c0010d08:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d10:	74 3e                	je     c0010d50 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d12:	42                   	inc    edx
c0010d13:	83 fa 04             	cmp    edx,0x4
c0010d16:	75 f0                	jne    c0010d08 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d18:	83 ec 0c             	sub    esp,0xc
c0010d1b:	68 cc 1d 02 c0       	push   0xc0021dcc
c0010d20:	e8 15 4d 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0010d25:	83 c4 10             	add    esp,0x10
c0010d28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d2d:	5a                   	pop    edx
c0010d2e:	5b                   	pop    ebx
c0010d2f:	5e                   	pop    esi
c0010d30:	c3                   	ret    
c0010d31:	83 ec 0c             	sub    esp,0xc
c0010d34:	56                   	push   esi
c0010d35:	e8 c8 fb ff ff       	call   c0010902 <Device::getName()>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d40:	75 ba                	jne    c0010cfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d42:	83 fb 0f             	cmp    ebx,0xf
c0010d45:	7f 29                	jg     c0010d70 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d47:	0f b6 9b e0 3e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc120]
c0010d4e:	eb ac                	jmp    c0010cfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d50:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d57:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d5a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d64:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d6a:	89 d8                	mov    eax,ebx
c0010d6c:	5a                   	pop    edx
c0010d6d:	5b                   	pop    ebx
c0010d6e:	5e                   	pop    esi
c0010d6f:	c3                   	ret    
c0010d70:	83 ec 0c             	sub    esp,0xc
c0010d73:	68 94 1d 02 c0       	push   0xc0021d94
c0010d78:	e8 bd 4c 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0010d7d:	83 c4 10             	add    esp,0x10
c0010d80:	e9 77 ff ff ff       	jmp    c0010cfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d85:	90                   	nop

c0010d86 <InterruptController::clearAllHandlers(int, bool)>:
c0010d86:	56                   	push   esi
c0010d87:	53                   	push   ebx
c0010d88:	52                   	push   edx
c0010d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d91:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d96:	75 61                	jne    c0010df9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010d98:	8d 46 20             	lea    eax,[esi+0x20]
c0010d9b:	c1 e6 04             	shl    esi,0x4
c0010d9e:	c1 e0 04             	shl    eax,0x4
c0010da1:	01 de                	add    esi,ebx
c0010da3:	01 d8                	add    eax,ebx
c0010da5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010daf:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010db9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dc3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dcd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010dd7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010de1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010deb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010df5:	58                   	pop    eax
c0010df6:	5b                   	pop    ebx
c0010df7:	5e                   	pop    esi
c0010df8:	c3                   	ret    
c0010df9:	83 ec 0c             	sub    esp,0xc
c0010dfc:	53                   	push   ebx
c0010dfd:	e8 00 fb ff ff       	call   c0010902 <Device::getName()>
c0010e02:	83 c4 10             	add    esp,0x10
c0010e05:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e08:	75 8e                	jne    c0010d98 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e0a:	83 fe 0f             	cmp    esi,0xf
c0010e0d:	7f 09                	jg     c0010e18 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e0f:	0f b6 b6 e0 3e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc120]
c0010e16:	eb 80                	jmp    c0010d98 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	68 08 1e 02 c0       	push   0xc0021e08
c0010e20:	e8 15 4c 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	e9 6b ff ff ff       	jmp    c0010d98 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e2d:	90                   	nop

c0010e2e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e2e:	56                   	push   esi
c0010e2f:	53                   	push   ebx
c0010e30:	52                   	push   edx
c0010e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e39:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e3e:	75 3a                	jne    c0010e7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e44:	8d 50 20             	lea    edx,[eax+0x20]
c0010e47:	c1 e2 04             	shl    edx,0x4
c0010e4a:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e4d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e51:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e57:	74 0b                	je     c0010e64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e59:	83 c0 04             	add    eax,0x4
c0010e5c:	39 d0                	cmp    eax,edx
c0010e5e:	75 f1                	jne    c0010e51 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e60:	58                   	pop    eax
c0010e61:	5b                   	pop    ebx
c0010e62:	5e                   	pop    esi
c0010e63:	c3                   	ret    
c0010e64:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e6e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e78:	eb df                	jmp    c0010e59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e7a:	83 ec 0c             	sub    esp,0xc
c0010e7d:	56                   	push   esi
c0010e7e:	e8 7f fa ff ff       	call   c0010902 <Device::getName()>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e89:	75 b5                	jne    c0010e40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e8b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e90:	7f 11                	jg     c0010ea3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e96:	0f b6 80 e0 3e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc120]
c0010e9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ea1:	eb 9d                	jmp    c0010e40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ea3:	83 ec 0c             	sub    esp,0xc
c0010ea6:	68 08 1e 02 c0       	push   0xc0021e08
c0010eab:	e8 8a 4b 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0010eb0:	83 c4 10             	add    esp,0x10
c0010eb3:	eb 8b                	jmp    c0010e40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010eb5 <nmiHandler(regs*, void*)>:
c0010eb5:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0010eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ebe:	e9 5b a8 ff ff       	jmp    c000b71e <Computer::handleNMI()>

c0010ec3 <int_handler>:
c0010ec3:	55                   	push   ebp
c0010ec4:	57                   	push   edi
c0010ec5:	56                   	push   esi
c0010ec6:	53                   	push   ebx
c0010ec7:	83 ec 0c             	sub    esp,0xc
c0010eca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ece:	80 3d d4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251d4,0x0
c0010ed5:	74 0b                	je     c0010ee2 <int_handler+0x1f>
c0010ed7:	fa                   	cli    
c0010ed8:	f4                   	hlt    
c0010ed9:	80 3d d4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251d4,0x0
c0010ee0:	75 f5                	jne    c0010ed7 <int_handler+0x14>
c0010ee2:	e8 e7 39 00 00       	call   c00148ce <thisCPU()>
c0010ee7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010eea:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010ef0:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ef3:	83 f8 17             	cmp    eax,0x17
c0010ef6:	77 13                	ja     c0010f0b <int_handler+0x48>
c0010ef8:	83 ec 08             	sub    esp,0x8
c0010efb:	8b 17                	mov    edx,DWORD PTR [edi]
c0010efd:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f00:	0f b6 c0             	movzx  eax,al
c0010f03:	50                   	push   eax
c0010f04:	57                   	push   edi
c0010f05:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	83 c3 15             	add    ebx,0x15
c0010f0e:	c1 e3 04             	shl    ebx,0x4
c0010f11:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f15:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f1c:	31 db                	xor    ebx,ebx
c0010f1e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f22:	85 c0                	test   eax,eax
c0010f24:	74 13                	je     c0010f39 <int_handler+0x76>
c0010f26:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f29:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f2d:	74 1c                	je     c0010f4b <int_handler+0x88>
c0010f2f:	83 ec 08             	sub    esp,0x8
c0010f32:	52                   	push   edx
c0010f33:	56                   	push   esi
c0010f34:	ff d0                	call   eax
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	43                   	inc    ebx
c0010f3a:	83 fb 04             	cmp    ebx,0x4
c0010f3d:	75 df                	jne    c0010f1e <int_handler+0x5b>
c0010f3f:	83 c4 0c             	add    esp,0xc
c0010f42:	31 c0                	xor    eax,eax
c0010f44:	5b                   	pop    ebx
c0010f45:	31 d2                	xor    edx,edx
c0010f47:	5e                   	pop    esi
c0010f48:	5f                   	pop    edi
c0010f49:	5d                   	pop    ebp
c0010f4a:	c3                   	ret    
c0010f4b:	83 ec 08             	sub    esp,0x8
c0010f4e:	52                   	push   edx
c0010f4f:	56                   	push   esi
c0010f50:	ff d0                	call   eax
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	83 c4 0c             	add    esp,0xc
c0010f58:	5b                   	pop    ebx
c0010f59:	5e                   	pop    esi
c0010f5a:	5f                   	pop    edi
c0010f5b:	5d                   	pop    ebp
c0010f5c:	c3                   	ret    
c0010f5d:	90                   	nop

c0010f5e <InterruptController::InterruptController(char const*)>:
c0010f5e:	83 ec 1c             	sub    esp,0x1c
c0010f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f65:	83 ec 08             	sub    esp,0x8
c0010f68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f6c:	50                   	push   eax
c0010f6d:	e8 9e f8 ff ff       	call   c0010810 <Device::Device(char const*)>
c0010f72:	83 c4 10             	add    esp,0x10
c0010f75:	ba 44 20 02 c0       	mov    edx,0xc0022044
c0010f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7e:	89 10                	mov    DWORD PTR [eax],edx
c0010f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f84:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f96:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010f9e:	7f 5e                	jg     c0010ffe <InterruptController::InterruptController(char const*)+0xa0>
c0010fa0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fa8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fad:	7f 49                	jg     c0010ff8 <InterruptController::InterruptController(char const*)+0x9a>
c0010faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fb7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fc2:	01 ca                	add    edx,ecx
c0010fc4:	83 c2 54             	add    edx,0x54
c0010fc7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fd7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe2:	01 ca                	add    edx,ecx
c0010fe4:	81 c2 54 04 00 00    	add    edx,0x454
c0010fea:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ff2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ff6:	eb b0                	jmp    c0010fa8 <InterruptController::InterruptController(char const*)+0x4a>
c0010ff8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010ffc:	eb 98                	jmp    c0010f96 <InterruptController::InterruptController(char const*)+0x38>
c0010ffe:	90                   	nop
c0010fff:	83 c4 1c             	add    esp,0x1c
c0011002:	c3                   	ret    
c0011003:	90                   	nop

c0011004 <InterruptController::~InterruptController()>:
c0011004:	83 ec 0c             	sub    esp,0xc
c0011007:	ba 44 20 02 c0       	mov    edx,0xc0022044
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	89 10                	mov    DWORD PTR [eax],edx
c0011012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	50                   	push   eax
c001101a:	e8 a7 f4 ff ff       	call   c00104c6 <Device::~Device()>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	90                   	nop
c0011023:	83 c4 0c             	add    esp,0xc
c0011026:	c3                   	ret    
c0011027:	90                   	nop

c0011028 <InterruptController::~InterruptController()>:
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	83 ec 0c             	sub    esp,0xc
c001102e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011032:	e8 cd ff ff ff       	call   c0011004 <InterruptController::~InterruptController()>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	83 ec 08             	sub    esp,0x8
c001103d:	68 58 21 00 00       	push   0x2158
c0011042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011046:	e8 9a e0 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	83 c4 0c             	add    esp,0xc
c0011051:	c3                   	ret    

c0011052 <displayDebugInfo(regs*)>:
c0011052:	55                   	push   ebp
c0011053:	57                   	push   edi
c0011054:	56                   	push   esi
c0011055:	53                   	push   ebx
c0011056:	83 ec 24             	sub    esp,0x24
c0011059:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001105d:	0f 20 c2             	mov    edx,cr0
c0011060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0011064:	0f 20 d7             	mov    edi,cr2
c0011067:	0f 20 de             	mov    esi,cr3
c001106a:	0f 20 e5             	mov    ebp,cr4
c001106d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011070:	68 42 1e 02 c0       	push   0xc0021e42
c0011075:	e8 91 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001107a:	58                   	pop    eax
c001107b:	5a                   	pop    edx
c001107c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001107f:	68 4d 1e 02 c0       	push   0xc0021e4d
c0011084:	e8 82 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011089:	59                   	pop    ecx
c001108a:	58                   	pop    eax
c001108b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001108e:	68 58 1e 02 c0       	push   0xc0021e58
c0011093:	e8 73 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011098:	58                   	pop    eax
c0011099:	5a                   	pop    edx
c001109a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001109d:	68 63 1e 02 c0       	push   0xc0021e63
c00110a2:	e8 64 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110a7:	59                   	pop    ecx
c00110a8:	58                   	pop    eax
c00110a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110ac:	68 6e 1e 02 c0       	push   0xc0021e6e
c00110b1:	e8 55 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110b6:	58                   	pop    eax
c00110b7:	5a                   	pop    edx
c00110b8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110bb:	68 79 1e 02 c0       	push   0xc0021e79
c00110c0:	e8 46 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110c5:	59                   	pop    ecx
c00110c6:	58                   	pop    eax
c00110c7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110ca:	68 84 1e 02 c0       	push   0xc0021e84
c00110cf:	e8 37 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110d4:	58                   	pop    eax
c00110d5:	5a                   	pop    edx
c00110d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110d9:	68 8f 1e 02 c0       	push   0xc0021e8f
c00110de:	e8 28 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110e3:	59                   	pop    ecx
c00110e4:	58                   	pop    eax
c00110e5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110e8:	68 9a 1e 02 c0       	push   0xc0021e9a
c00110ed:	e8 19 e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00110f2:	58                   	pop    eax
c00110f3:	5a                   	pop    edx
c00110f4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110f7:	68 a9 1e 02 c0       	push   0xc0021ea9
c00110fc:	e8 0a e1 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011101:	59                   	pop    ecx
c0011102:	58                   	pop    eax
c0011103:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011106:	68 b4 1e 02 c0       	push   0xc0021eb4
c001110b:	e8 fb e0 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011110:	58                   	pop    eax
c0011111:	5a                   	pop    edx
c0011112:	57                   	push   edi
c0011113:	68 bf 1e 02 c0       	push   0xc0021ebf
c0011118:	e8 ee e0 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001111d:	59                   	pop    ecx
c001111e:	58                   	pop    eax
c001111f:	56                   	push   esi
c0011120:	68 ca 1e 02 c0       	push   0xc0021eca
c0011125:	e8 e1 e0 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001112a:	58                   	pop    eax
c001112b:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011130:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011136:	e8 00 c2 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c001113b:	58                   	pop    eax
c001113c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001113f:	5a                   	pop    edx
c0011140:	c1 e0 05             	shl    eax,0x5
c0011143:	05 40 3c 02 c0       	add    eax,0xc0023c40
c0011148:	50                   	push   eax
c0011149:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001114e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011154:	e8 03 c6 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011159:	59                   	pop    ecx
c001115a:	58                   	pop    eax
c001115b:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011160:	68 d5 1e 02 c0       	push   0xc0021ed5
c0011165:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001116b:	e8 ec c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011170:	58                   	pop    eax
c0011171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011176:	5a                   	pop    edx
c0011177:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001117a:	83 c0 0c             	add    eax,0xc
c001117d:	50                   	push   eax
c001117e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011189:	e8 ce c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c001118e:	59                   	pop    ecx
c001118f:	58                   	pop    eax
c0011190:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011195:	68 de 1e 02 c0       	push   0xc0021ede
c001119a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a0:	e8 b7 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00111a5:	58                   	pop    eax
c00111a6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111ab:	5a                   	pop    edx
c00111ac:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b5:	e8 c8 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00111ba:	59                   	pop    ecx
c00111bb:	58                   	pop    eax
c00111bc:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111c1:	68 e6 1e 02 c0       	push   0xc0021ee6
c00111c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111cc:	e8 8b c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00111d1:	58                   	pop    eax
c00111d2:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111d7:	5a                   	pop    edx
c00111d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e1:	e8 9c c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00111e6:	59                   	pop    ecx
c00111e7:	58                   	pop    eax
c00111e8:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00111ed:	68 ee 1e 02 c0       	push   0xc0021eee
c00111f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f8:	e8 5f c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00111fd:	58                   	pop    eax
c00111fe:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011203:	5a                   	pop    edx
c0011204:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120d:	e8 70 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011212:	59                   	pop    ecx
c0011213:	58                   	pop    eax
c0011214:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011219:	68 f6 1e 02 c0       	push   0xc0021ef6
c001121e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011224:	e8 33 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011229:	58                   	pop    eax
c001122a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001122f:	5a                   	pop    edx
c0011230:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011233:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011239:	e8 44 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001123e:	59                   	pop    ecx
c001123f:	58                   	pop    eax
c0011240:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011245:	68 fe 1e 02 c0       	push   0xc0021efe
c001124a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011250:	e8 07 c5 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011255:	58                   	pop    eax
c0011256:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001125b:	5a                   	pop    edx
c001125c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001125f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011265:	e8 18 c5 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c001126a:	59                   	pop    ecx
c001126b:	58                   	pop    eax
c001126c:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011271:	68 06 1f 02 c0       	push   0xc0021f06
c0011276:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001127c:	e8 db c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011281:	58                   	pop    eax
c0011282:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011287:	5a                   	pop    edx
c0011288:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001128b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011291:	e8 ec c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011296:	59                   	pop    ecx
c0011297:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001129c:	5b                   	pop    ebx
c001129d:	68 0e 1f 02 c0       	push   0xc0021f0e
c00112a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a8:	e8 af c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00112ad:	58                   	pop    eax
c00112ae:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112b3:	5a                   	pop    edx
c00112b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112b8:	52                   	push   edx
c00112b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112bf:	e8 be c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00112c4:	59                   	pop    ecx
c00112c5:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112ca:	5b                   	pop    ebx
c00112cb:	68 17 1f 02 c0       	push   0xc0021f17
c00112d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d6:	e8 81 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00112db:	58                   	pop    eax
c00112dc:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112e1:	5a                   	pop    edx
c00112e2:	57                   	push   edi
c00112e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112e9:	e8 94 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00112ee:	59                   	pop    ecx
c00112ef:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00112f4:	5b                   	pop    ebx
c00112f5:	68 1f 1f 02 c0       	push   0xc0021f1f
c00112fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011300:	e8 57 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011305:	5f                   	pop    edi
c0011306:	58                   	pop    eax
c0011307:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001130c:	56                   	push   esi
c001130d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011313:	e8 6a c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011318:	58                   	pop    eax
c0011319:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001131e:	5a                   	pop    edx
c001131f:	68 27 1f 02 c0       	push   0xc0021f27
c0011324:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001132a:	e8 2d c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c001132f:	59                   	pop    ecx
c0011330:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011335:	5b                   	pop    ebx
c0011336:	55                   	push   ebp
c0011337:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001133d:	e8 40 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011342:	5e                   	pop    esi
c0011343:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011348:	5f                   	pop    edi
c0011349:	68 2f 1f 02 c0       	push   0xc0021f2f
c001134e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011354:	e8 03 c4 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011359:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001135e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011364:	e8 fa e7 00 00       	call   c001fb63 <CPU::readDR0()>
c0011369:	5d                   	pop    ebp
c001136a:	5a                   	pop    edx
c001136b:	50                   	push   eax
c001136c:	53                   	push   ebx
c001136d:	e8 10 c4 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011372:	59                   	pop    ecx
c0011373:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011378:	5b                   	pop    ebx
c0011379:	68 38 1f 02 c0       	push   0xc0021f38
c001137e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011384:	e8 d3 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011389:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001138e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011394:	e8 dc e7 00 00       	call   c001fb75 <CPU::readDR1()>
c0011399:	5e                   	pop    esi
c001139a:	5f                   	pop    edi
c001139b:	50                   	push   eax
c001139c:	53                   	push   ebx
c001139d:	e8 e0 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00113a2:	5d                   	pop    ebp
c00113a3:	58                   	pop    eax
c00113a4:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113a9:	68 40 1f 02 c0       	push   0xc0021f40
c00113ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113b4:	e8 a3 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00113b9:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113be:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113c4:	e8 be e7 00 00       	call   c001fb87 <CPU::readDR2()>
c00113c9:	5a                   	pop    edx
c00113ca:	59                   	pop    ecx
c00113cb:	50                   	push   eax
c00113cc:	53                   	push   ebx
c00113cd:	e8 b0 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c00113d2:	5b                   	pop    ebx
c00113d3:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113d8:	5e                   	pop    esi
c00113d9:	68 48 1f 02 c0       	push   0xc0021f48
c00113de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113e4:	e8 73 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c00113e9:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00113ee:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113f4:	e8 a0 e7 00 00       	call   c001fb99 <CPU::readDR3()>
c00113f9:	5f                   	pop    edi
c00113fa:	5d                   	pop    ebp
c00113fb:	50                   	push   eax
c00113fc:	53                   	push   ebx
c00113fd:	e8 80 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011402:	58                   	pop    eax
c0011403:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011408:	5a                   	pop    edx
c0011409:	68 50 1f 02 c0       	push   0xc0021f50
c001140e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011414:	e8 43 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011419:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001141e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011424:	e8 82 e7 00 00       	call   c001fbab <CPU::readDR6()>
c0011429:	59                   	pop    ecx
c001142a:	5e                   	pop    esi
c001142b:	50                   	push   eax
c001142c:	53                   	push   ebx
c001142d:	e8 50 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011432:	5f                   	pop    edi
c0011433:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0011438:	5d                   	pop    ebp
c0011439:	68 58 1f 02 c0       	push   0xc0021f58
c001143e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011444:	e8 13 c3 ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0011449:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c001144e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011454:	e8 64 e7 00 00       	call   c001fbbd <CPU::readDR7()>
c0011459:	5a                   	pop    edx
c001145a:	59                   	pop    ecx
c001145b:	50                   	push   eax
c001145c:	53                   	push   ebx
c001145d:	e8 20 c3 ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0011462:	fa                   	cli    
c0011463:	f4                   	hlt    
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	eb fe                	jmp    c0011467 <displayDebugInfo(regs*)+0x415>

c0011469 <x87EmulHandler(regs*, void*)>:
c0011469:	53                   	push   ebx
c001146a:	83 ec 08             	sub    esp,0x8
c001146d:	a1 14 49 02 c0       	mov    eax,ds:0xc0024914
c0011472:	85 c0                	test   eax,eax
c0011474:	74 15                	je     c001148b <x87EmulHandler(regs*, void*)+0x22>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147d:	ff d0                	call   eax
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	84 c0                	test   al,al
c0011484:	74 2f                	je     c00114b5 <x87EmulHandler(regs*, void*)+0x4c>
c0011486:	83 c4 08             	add    esp,0x8
c0011489:	5b                   	pop    ebx
c001148a:	c3                   	ret    
c001148b:	83 ec 08             	sub    esp,0x8
c001148e:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0011494:	6a 01                	push   0x1
c0011496:	68 60 1f 02 c0       	push   0xc0021f60
c001149b:	e8 bd 6f 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c00114a0:	5a                   	pop    edx
c00114a1:	59                   	pop    ecx
c00114a2:	53                   	push   ebx
c00114a3:	50                   	push   eax
c00114a4:	e8 7a 71 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c00114a9:	a1 14 49 02 c0       	mov    eax,ds:0xc0024914
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	85 c0                	test   eax,eax
c00114b3:	75 c1                	jne    c0011476 <x87EmulHandler(regs*, void*)+0xd>
c00114b5:	83 ec 0c             	sub    esp,0xc
c00114b8:	68 7d 1f 02 c0       	push   0xc0021f7d
c00114bd:	e8 49 dd ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00114c2:	58                   	pop    eax
c00114c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c7:	e8 86 fb ff ff       	call   c0011052 <displayDebugInfo(regs*)>

c00114cc <gpFault(regs*, void*)>:
c00114cc:	53                   	push   ebx
c00114cd:	83 ec 14             	sub    esp,0x14
c00114d0:	c7 05 10 49 02 c0 d5 98 01 c0 	mov    DWORD PTR ds:0xc0024910,0xc00198d5
c00114da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114de:	53                   	push   ebx
c00114df:	e8 f1 83 00 00       	call   c00198d5 <Vm::faultHandler(regs*)>
c00114e4:	83 c4 10             	add    esp,0x10
c00114e7:	84 c0                	test   al,al
c00114e9:	74 05                	je     c00114f0 <gpFault(regs*, void*)+0x24>
c00114eb:	83 c4 08             	add    esp,0x8
c00114ee:	5b                   	pop    ebx
c00114ef:	c3                   	ret    
c00114f0:	83 ec 0c             	sub    esp,0xc
c00114f3:	68 7d 1f 02 c0       	push   0xc0021f7d
c00114f8:	e8 0e dd ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00114fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011500:	e8 4d fb ff ff       	call   c0011052 <displayDebugInfo(regs*)>

c0011505 <pgFault(regs*, void*)>:
c0011505:	83 ec 18             	sub    esp,0x18
c0011508:	68 98 1f 02 c0       	push   0xc0021f98
c001150d:	e8 f9 dc ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011512:	58                   	pop    eax
c0011513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011517:	e8 36 fb ff ff       	call   c0011052 <displayDebugInfo(regs*)>

c001151c <otherISRHandler(regs*, void*)>:
c001151c:	53                   	push   ebx
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011524:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011527:	50                   	push   eax
c0011528:	50                   	push   eax
c0011529:	68 a5 1f 02 c0       	push   0xc0021fa5
c001152e:	e8 d8 dc ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011533:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011536:	e8 17 fb ff ff       	call   c0011052 <displayDebugInfo(regs*)>

c001153b <opcodeFault(regs*, void*)>:
c001153b:	55                   	push   ebp
c001153c:	89 e5                	mov    ebp,esp
c001153e:	56                   	push   esi
c001153f:	53                   	push   ebx
c0011540:	83 ec 40             	sub    esp,0x40
c0011543:	e8 86 33 00 00       	call   c00148ce <thisCPU()>
c0011548:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001154e:	84 c0                	test   al,al
c0011550:	74 24                	je     c0011576 <opcodeFault(regs*, void*)+0x3b>
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	68 c4 1f 02 c0       	push   0xc0021fc4
c001155a:	e8 ac dc ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011565:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011568:	8d 50 19             	lea    edx,[eax+0x19]
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011571:	e9 77 05 00 00       	jmp    c0011aed <opcodeFault(regs*, void*)+0x5b2>
c0011576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011579:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001157c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001157f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011583:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001158d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011593:	8a 00                	mov    al,BYTE PTR [eax]
c0011595:	3c f0                	cmp    al,0xf0
c0011597:	75 17                	jne    c00115b0 <opcodeFault(regs*, void*)+0x75>
c0011599:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001159c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a2:	8d 50 01             	lea    edx,[eax+0x1]
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115ab:	e9 da 00 00 00       	jmp    c001168a <opcodeFault(regs*, void*)+0x14f>
c00115b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b3:	8a 00                	mov    al,BYTE PTR [eax]
c00115b5:	3c f2                	cmp    al,0xf2
c00115b7:	74 09                	je     c00115c2 <opcodeFault(regs*, void*)+0x87>
c00115b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bc:	8a 00                	mov    al,BYTE PTR [eax]
c00115be:	3c f3                	cmp    al,0xf3
c00115c0:	75 1b                	jne    c00115dd <opcodeFault(regs*, void*)+0xa2>
c00115c2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115cf:	8d 50 01             	lea    edx,[eax+0x1]
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115d8:	e9 ad 00 00 00       	jmp    c001168a <opcodeFault(regs*, void*)+0x14f>
c00115dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e0:	8a 00                	mov    al,BYTE PTR [eax]
c00115e2:	3c 66                	cmp    al,0x66
c00115e4:	75 1f                	jne    c0011605 <opcodeFault(regs*, void*)+0xca>
c00115e6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115ea:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115ee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115f7:	8d 50 01             	lea    edx,[eax+0x1]
c00115fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011600:	e9 85 00 00 00       	jmp    c001168a <opcodeFault(regs*, void*)+0x14f>
c0011605:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011608:	8a 00                	mov    al,BYTE PTR [eax]
c001160a:	3c 67                	cmp    al,0x67
c001160c:	75 18                	jne    c0011626 <opcodeFault(regs*, void*)+0xeb>
c001160e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011612:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011618:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001161b:	8d 50 01             	lea    edx,[eax+0x1]
c001161e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011621:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011624:	eb 64                	jmp    c001168a <opcodeFault(regs*, void*)+0x14f>
c0011626:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011629:	8a 00                	mov    al,BYTE PTR [eax]
c001162b:	3c 2e                	cmp    al,0x2e
c001162d:	74 09                	je     c0011638 <opcodeFault(regs*, void*)+0xfd>
c001162f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011632:	8a 00                	mov    al,BYTE PTR [eax]
c0011634:	3c 3e                	cmp    al,0x3e
c0011636:	75 18                	jne    c0011650 <opcodeFault(regs*, void*)+0x115>
c0011638:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001163c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001163f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011642:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011645:	8d 50 01             	lea    edx,[eax+0x1]
c0011648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001164e:	eb 3a                	jmp    c001168a <opcodeFault(regs*, void*)+0x14f>
c0011650:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011653:	8a 00                	mov    al,BYTE PTR [eax]
c0011655:	3c 36                	cmp    al,0x36
c0011657:	74 1b                	je     c0011674 <opcodeFault(regs*, void*)+0x139>
c0011659:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001165c:	8a 00                	mov    al,BYTE PTR [eax]
c001165e:	3c 26                	cmp    al,0x26
c0011660:	74 12                	je     c0011674 <opcodeFault(regs*, void*)+0x139>
c0011662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011665:	8a 00                	mov    al,BYTE PTR [eax]
c0011667:	3c 64                	cmp    al,0x64
c0011669:	74 09                	je     c0011674 <opcodeFault(regs*, void*)+0x139>
c001166b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166e:	8a 00                	mov    al,BYTE PTR [eax]
c0011670:	3c 65                	cmp    al,0x65
c0011672:	75 16                	jne    c001168a <opcodeFault(regs*, void*)+0x14f>
c0011674:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011678:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001167b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011681:	8d 50 01             	lea    edx,[eax+0x1]
c0011684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011687:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001168a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001168d:	8a 00                	mov    al,BYTE PTR [eax]
c001168f:	3c 0f                	cmp    al,0xf
c0011691:	0f 85 ad 00 00 00    	jne    c0011744 <opcodeFault(regs*, void*)+0x209>
c0011697:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001169a:	40                   	inc    eax
c001169b:	8a 00                	mov    al,BYTE PTR [eax]
c001169d:	3c c2                	cmp    al,0xc2
c001169f:	74 0e                	je     c00116af <opcodeFault(regs*, void*)+0x174>
c00116a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a4:	40                   	inc    eax
c00116a5:	8a 00                	mov    al,BYTE PTR [eax]
c00116a7:	3c c3                	cmp    al,0xc3
c00116a9:	0f 85 95 00 00 00    	jne    c0011744 <opcodeFault(regs*, void*)+0x209>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	68 e7 1f 02 c0       	push   0xc0021fe7
c00116b7:	e8 4f db ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00116bc:	83 c4 10             	add    esp,0x10
c00116bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116c5:	8d 50 01             	lea    edx,[eax+0x1]
c00116c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116d4:	8a 00                	mov    al,BYTE PTR [eax]
c00116d6:	8d 50 fe             	lea    edx,[eax-0x2]
c00116d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116dc:	88 10                	mov    BYTE PTR [eax],dl
c00116de:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116e1:	50                   	push   eax
c00116e2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116e5:	50                   	push   eax
c00116e6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116e9:	50                   	push   eax
c00116ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116ed:	e8 48 41 00 00       	call   c001583a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116fb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00116fe:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011701:	01 d0                	add    eax,edx
c0011703:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011709:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001170c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001170f:	48                   	dec    eax
c0011710:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011716:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011719:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001171c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171f:	83 ec 04             	sub    esp,0x4
c0011722:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011725:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011728:	50                   	push   eax
c0011729:	e8 22 ea fe ff       	call   c0000150 <voodooXADD>
c001172e:	83 c4 10             	add    esp,0x10
c0011731:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011734:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011737:	01 c2                	add    edx,eax
c0011739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001173c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001173f:	e9 a9 03 00 00       	jmp    c0011aed <opcodeFault(regs*, void*)+0x5b2>
c0011744:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011747:	8a 00                	mov    al,BYTE PTR [eax]
c0011749:	3c 0f                	cmp    al,0xf
c001174b:	0f 85 8b 01 00 00    	jne    c00118dc <opcodeFault(regs*, void*)+0x3a1>
c0011751:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011754:	40                   	inc    eax
c0011755:	8a 00                	mov    al,BYTE PTR [eax]
c0011757:	3c c7                	cmp    al,0xc7
c0011759:	0f 86 7d 01 00 00    	jbe    c00118dc <opcodeFault(regs*, void*)+0x3a1>
c001175f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011762:	40                   	inc    eax
c0011763:	8a 00                	mov    al,BYTE PTR [eax]
c0011765:	3c cf                	cmp    al,0xcf
c0011767:	0f 87 6f 01 00 00    	ja     c00118dc <opcodeFault(regs*, void*)+0x3a1>
c001176d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011770:	40                   	inc    eax
c0011771:	8a 00                	mov    al,BYTE PTR [eax]
c0011773:	83 c0 38             	add    eax,0x38
c0011776:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011779:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001177d:	75 0b                	jne    c001178a <opcodeFault(regs*, void*)+0x24f>
c001177f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011782:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011785:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011788:	eb 75                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c001178a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001178e:	75 0b                	jne    c001179b <opcodeFault(regs*, void*)+0x260>
c0011790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011793:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011796:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011799:	eb 64                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c001179b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001179f:	75 0b                	jne    c00117ac <opcodeFault(regs*, void*)+0x271>
c00117a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117aa:	eb 53                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117ac:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117b0:	75 0b                	jne    c00117bd <opcodeFault(regs*, void*)+0x282>
c00117b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117bb:	eb 42                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117bd:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117c1:	75 0b                	jne    c00117ce <opcodeFault(regs*, void*)+0x293>
c00117c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117cc:	eb 31                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117ce:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117d2:	75 0b                	jne    c00117df <opcodeFault(regs*, void*)+0x2a4>
c00117d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117dd:	eb 20                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117df:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117e3:	75 0b                	jne    c00117f0 <opcodeFault(regs*, void*)+0x2b5>
c00117e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ee:	eb 0f                	jmp    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117f0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117f4:	75 09                	jne    c00117ff <opcodeFault(regs*, void*)+0x2c4>
c00117f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00117fc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ff:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011803:	74 10                	je     c0011815 <opcodeFault(regs*, void*)+0x2da>
c0011805:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001180c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011813:	eb 2d                	jmp    c0011842 <opcodeFault(regs*, void*)+0x307>
c0011815:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011818:	c1 e0 18             	shl    eax,0x18
c001181b:	89 c2                	mov    edx,eax
c001181d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011820:	c1 e0 08             	shl    eax,0x8
c0011823:	25 00 00 ff 00       	and    eax,0xff0000
c0011828:	09 c2                	or     edx,eax
c001182a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001182d:	c1 e8 08             	shr    eax,0x8
c0011830:	25 00 ff 00 00       	and    eax,0xff00
c0011835:	09 c2                	or     edx,eax
c0011837:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001183a:	c1 e8 18             	shr    eax,0x18
c001183d:	09 d0                	or     eax,edx
c001183f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011842:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011846:	75 0b                	jne    c0011853 <opcodeFault(regs*, void*)+0x318>
c0011848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001184e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011851:	eb 75                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c0011853:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011857:	75 0b                	jne    c0011864 <opcodeFault(regs*, void*)+0x329>
c0011859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001185f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011862:	eb 64                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c0011864:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011868:	75 0b                	jne    c0011875 <opcodeFault(regs*, void*)+0x33a>
c001186a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011870:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011873:	eb 53                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c0011875:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011879:	75 0b                	jne    c0011886 <opcodeFault(regs*, void*)+0x34b>
c001187b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011881:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011884:	eb 42                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c0011886:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001188a:	75 0b                	jne    c0011897 <opcodeFault(regs*, void*)+0x35c>
c001188c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001188f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011892:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0011895:	eb 31                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c0011897:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001189b:	75 0b                	jne    c00118a8 <opcodeFault(regs*, void*)+0x36d>
c001189d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118a6:	eb 20                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c00118a8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118ac:	75 0b                	jne    c00118b9 <opcodeFault(regs*, void*)+0x37e>
c00118ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118b7:	eb 0f                	jmp    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c00118b9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118bd:	75 09                	jne    c00118c8 <opcodeFault(regs*, void*)+0x38d>
c00118bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118c5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118ce:	8d 50 02             	lea    edx,[eax+0x2]
c00118d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118d7:	e9 11 02 00 00       	jmp    c0011aed <opcodeFault(regs*, void*)+0x5b2>
c00118dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118df:	8a 00                	mov    al,BYTE PTR [eax]
c00118e1:	3c 0f                	cmp    al,0xf
c00118e3:	0f 85 76 01 00 00    	jne    c0011a5f <opcodeFault(regs*, void*)+0x524>
c00118e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118ec:	40                   	inc    eax
c00118ed:	8a 00                	mov    al,BYTE PTR [eax]
c00118ef:	3c c7                	cmp    al,0xc7
c00118f1:	0f 85 68 01 00 00    	jne    c0011a5f <opcodeFault(regs*, void*)+0x524>
c00118f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00118fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011900:	8d 50 01             	lea    edx,[eax+0x1]
c0011903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011906:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011909:	8d 45 ba             	lea    eax,[ebp-0x46]
c001190c:	50                   	push   eax
c001190d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011910:	50                   	push   eax
c0011911:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011914:	50                   	push   eax
c0011915:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011918:	e8 1d 3f 00 00       	call   c001583a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011923:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011926:	83 f0 01             	xor    eax,0x1
c0011929:	84 c0                	test   al,al
c001192b:	0f 84 2e 01 00 00    	je     c0011a5f <opcodeFault(regs*, void*)+0x524>
c0011931:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011934:	3c 01                	cmp    al,0x1
c0011936:	0f 85 23 01 00 00    	jne    c0011a5f <opcodeFault(regs*, void*)+0x524>
c001193c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001193f:	83 f0 01             	xor    eax,0x1
c0011942:	84 c0                	test   al,al
c0011944:	0f 84 15 01 00 00    	je     c0011a5f <opcodeFault(regs*, void*)+0x524>
c001194a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011950:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011953:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001195a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001195d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011960:	89 c2                	mov    edx,eax
c0011962:	b8 00 00 00 00       	mov    eax,0x0
c0011967:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001196a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011970:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011973:	ba 00 00 00 00       	mov    edx,0x0
c0011978:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001197b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001197e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011981:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011984:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011987:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001198e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011991:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011994:	89 c2                	mov    edx,eax
c0011996:	b8 00 00 00 00       	mov    eax,0x0
c001199b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001199e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119a7:	ba 00 00 00 00       	mov    edx,0x0
c00119ac:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119af:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119b2:	e8 8c 70 00 00       	call   c0018a43 <lockScheduler()>
c00119b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00119bf:	89 c1                	mov    ecx,eax
c00119c1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119c4:	89 cb                	mov    ebx,ecx
c00119c6:	89 d0                	mov    eax,edx
c00119c8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119cb:	89 c6                	mov    esi,eax
c00119cd:	89 f0                	mov    eax,esi
c00119cf:	09 d8                	or     eax,ebx
c00119d1:	85 c0                	test   eax,eax
c00119d3:	75 21                	jne    c00119f6 <opcodeFault(regs*, void*)+0x4bb>
c00119d5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119d8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119db:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119de:	89 01                	mov    DWORD PTR [ecx],eax
c00119e0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e9:	83 c8 40             	or     eax,0x40
c00119ec:	89 c2                	mov    edx,eax
c00119ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119f4:	eb 3e                	jmp    c0011a34 <opcodeFault(regs*, void*)+0x4f9>
c00119f6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119f9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00119fe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a01:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a04:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a10:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a13:	89 d0                	mov    eax,edx
c0011a15:	31 d2                	xor    edx,edx
c0011a17:	89 c3                	mov    ebx,eax
c0011a19:	89 d6                	mov    esi,edx
c0011a1b:	89 da                	mov    edx,ebx
c0011a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a20:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a29:	83 e0 bf             	and    eax,0xffffffbf
c0011a2c:	89 c2                	mov    edx,eax
c0011a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a31:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a34:	e8 0c 70 00 00       	call   c0018a45 <unlockScheduler()>
c0011a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a3f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a42:	01 c2                	add    edx,eax
c0011a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a4a:	83 ec 0c             	sub    esp,0xc
c0011a4d:	68 f6 1f 02 c0       	push   0xc0021ff6
c0011a52:	e8 b4 d7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	e9 8e 00 00 00       	jmp    c0011aed <opcodeFault(regs*, void*)+0x5b2>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 09 20 02 c0       	push   0xc0022009
c0011a67:	e8 9f d7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a72:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a7b:	c1 e0 04             	shl    eax,0x4
c0011a7e:	01 d0                	add    eax,edx
c0011a80:	83 c0 03             	add    eax,0x3
c0011a83:	8a 00                	mov    al,BYTE PTR [eax]
c0011a85:	0f b6 d8             	movzx  ebx,al
c0011a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a94:	c1 e0 04             	shl    eax,0x4
c0011a97:	01 d0                	add    eax,edx
c0011a99:	83 c0 02             	add    eax,0x2
c0011a9c:	8a 00                	mov    al,BYTE PTR [eax]
c0011a9e:	0f b6 c8             	movzx  ecx,al
c0011aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aad:	c1 e0 04             	shl    eax,0x4
c0011ab0:	01 d0                	add    eax,edx
c0011ab2:	40                   	inc    eax
c0011ab3:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab5:	0f b6 d0             	movzx  edx,al
c0011ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abb:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac4:	c1 e0 04             	shl    eax,0x4
c0011ac7:	01 f0                	add    eax,esi
c0011ac9:	8a 00                	mov    al,BYTE PTR [eax]
c0011acb:	0f b6 c0             	movzx  eax,al
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	53                   	push   ebx
c0011ad2:	51                   	push   ecx
c0011ad3:	52                   	push   edx
c0011ad4:	50                   	push   eax
c0011ad5:	68 1c 20 02 c0       	push   0xc002201c
c0011ada:	e8 2c d7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011adf:	83 c4 20             	add    esp,0x20
c0011ae2:	83 ec 0c             	sub    esp,0xc
c0011ae5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011ae8:	e8 65 f5 ff ff       	call   c0011052 <displayDebugInfo(regs*)>
c0011aed:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011af0:	5b                   	pop    ebx
c0011af1:	5e                   	pop    esi
c0011af2:	5d                   	pop    ebp
c0011af3:	c3                   	ret    

c0011af4 <displayProgramFault(char const*)>:
c0011af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011af9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011afc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b02:	85 c0                	test   eax,eax
c0011b04:	74 15                	je     c0011b1b <displayProgramFault(char const*)+0x27>
c0011b06:	83 ec 0c             	sub    esp,0xc
c0011b09:	6a 04                	push   0x4
c0011b0b:	6a 0f                	push   0xf
c0011b0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b11:	50                   	push   eax
c0011b12:	e8 05 b9 ff ff       	call   c000d41c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b17:	83 c4 1c             	add    esp,0x1c
c0011b1a:	c3                   	ret    
c0011b1b:	c3                   	ret    

c0011b1c <setupInterruptController()>:
c0011b1c:	55                   	push   ebp
c0011b1d:	89 e5                	mov    ebp,esp
c0011b1f:	53                   	push   ebx
c0011b20:	83 ec 14             	sub    esp,0x14
c0011b23:	e8 a3 2d 00 00       	call   c00148cb <getCPUNumber()>
c0011b28:	85 c0                	test   eax,eax
c0011b2a:	0f 95 c0             	setne  al
c0011b2d:	84 c0                	test   al,al
c0011b2f:	74 56                	je     c0011b87 <setupInterruptController()+0x6b>
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	68 58 21 00 00       	push   0x2158
c0011b39:	e8 98 d5 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	89 c3                	mov    ebx,eax
c0011b43:	83 ec 0c             	sub    esp,0xc
c0011b46:	53                   	push   ebx
c0011b47:	e8 6a c9 00 00       	call   c001e4b6 <APIC::APIC()>
c0011b4c:	83 c4 10             	add    esp,0x10
c0011b4f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b52:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5a:	83 c0 08             	add    eax,0x8
c0011b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5f:	6a 00                	push   0x0
c0011b61:	6a 00                	push   0x0
c0011b63:	6a 00                	push   0x0
c0011b65:	52                   	push   edx
c0011b66:	ff d0                	call   eax
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011b70:	83 ec 08             	sub    esp,0x8
c0011b73:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b76:	50                   	push   eax
c0011b77:	e8 a4 ea ff ff       	call   c0010620 <Device::addChild(Device*)>
c0011b7c:	83 c4 10             	add    esp,0x10
c0011b7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b82:	e9 48 03 00 00       	jmp    c0011ecf <setupInterruptController()+0x3b3>
c0011b87:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011b8c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b92:	83 e0 01             	and    eax,0x1
c0011b95:	84 c0                	test   al,al
c0011b97:	0f 95 c0             	setne  al
c0011b9a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011b9d:	83 ec 0c             	sub    esp,0xc
c0011ba0:	68 58 21 00 00       	push   0x2158
c0011ba5:	e8 2c d5 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	89 c3                	mov    ebx,eax
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	53                   	push   ebx
c0011bb3:	e8 f8 cd 00 00       	call   c001e9b0 <PIC::PIC()>
c0011bb8:	83 c4 10             	add    esp,0x10
c0011bbb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bbe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc6:	83 c0 08             	add    eax,0x8
c0011bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcb:	6a 00                	push   0x0
c0011bcd:	6a 00                	push   0x0
c0011bcf:	6a 00                	push   0x0
c0011bd1:	52                   	push   edx
c0011bd2:	ff d0                	call   eax
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bdb:	74 6e                	je     c0011c4b <setupInterruptController()+0x12f>
c0011bdd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011be0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be5:	83 c0 0c             	add    eax,0xc
c0011be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bea:	6a 00                	push   0x0
c0011bec:	6a 00                	push   0x0
c0011bee:	6a 00                	push   0x0
c0011bf0:	52                   	push   edx
c0011bf1:	ff d0                	call   eax
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011bfa:	74 15                	je     c0011c11 <setupInterruptController()+0xf5>
c0011bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c01:	83 c0 04             	add    eax,0x4
c0011c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c0c:	ff d0                	call   eax
c0011c0e:	83 c4 10             	add    esp,0x10
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 58 21 00 00       	push   0x2158
c0011c19:	e8 b8 d4 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0011c1e:	83 c4 10             	add    esp,0x10
c0011c21:	89 c3                	mov    ebx,eax
c0011c23:	83 ec 0c             	sub    esp,0xc
c0011c26:	53                   	push   ebx
c0011c27:	e8 8a c8 00 00       	call   c001e4b6 <APIC::APIC()>
c0011c2c:	83 c4 10             	add    esp,0x10
c0011c2f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c32:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3a:	83 c0 08             	add    eax,0x8
c0011c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3f:	6a 00                	push   0x0
c0011c41:	6a 00                	push   0x0
c0011c43:	6a 00                	push   0x0
c0011c45:	52                   	push   edx
c0011c46:	ff d0                	call   eax
c0011c48:	83 c4 10             	add    esp,0x10
c0011c4b:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0011c50:	83 ec 08             	sub    esp,0x8
c0011c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c56:	50                   	push   eax
c0011c57:	e8 c4 e9 ff ff       	call   c0010620 <Device::addChild(Device*)>
c0011c5c:	83 c4 10             	add    esp,0x10
c0011c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c64:	83 c0 24             	add    eax,0x24
c0011c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c69:	6a 00                	push   0x0
c0011c6b:	68 1c 15 01 c0       	push   0xc001151c
c0011c70:	6a 00                	push   0x0
c0011c72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c75:	ff d0                	call   eax
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7f:	83 c0 24             	add    eax,0x24
c0011c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c84:	6a 00                	push   0x0
c0011c86:	68 1c 15 01 c0       	push   0xc001151c
c0011c8b:	6a 01                	push   0x1
c0011c8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c90:	ff d0                	call   eax
c0011c92:	83 c4 10             	add    esp,0x10
c0011c95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9a:	83 c0 24             	add    eax,0x24
c0011c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9f:	6a 00                	push   0x0
c0011ca1:	68 b5 0e 01 c0       	push   0xc0010eb5
c0011ca6:	6a 02                	push   0x2
c0011ca8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cab:	ff d0                	call   eax
c0011cad:	83 c4 10             	add    esp,0x10
c0011cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb5:	83 c0 24             	add    eax,0x24
c0011cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cba:	6a 00                	push   0x0
c0011cbc:	68 1c 15 01 c0       	push   0xc001151c
c0011cc1:	6a 03                	push   0x3
c0011cc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cc6:	ff d0                	call   eax
c0011cc8:	83 c4 10             	add    esp,0x10
c0011ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd0:	83 c0 24             	add    eax,0x24
c0011cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd5:	6a 00                	push   0x0
c0011cd7:	68 1c 15 01 c0       	push   0xc001151c
c0011cdc:	6a 04                	push   0x4
c0011cde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ce1:	ff d0                	call   eax
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ceb:	83 c0 24             	add    eax,0x24
c0011cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf0:	6a 00                	push   0x0
c0011cf2:	68 1c 15 01 c0       	push   0xc001151c
c0011cf7:	6a 05                	push   0x5
c0011cf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cfc:	ff d0                	call   eax
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d06:	83 c0 24             	add    eax,0x24
c0011d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0b:	6a 00                	push   0x0
c0011d0d:	68 3b 15 01 c0       	push   0xc001153b
c0011d12:	6a 06                	push   0x6
c0011d14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d17:	ff d0                	call   eax
c0011d19:	83 c4 10             	add    esp,0x10
c0011d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d21:	83 c0 24             	add    eax,0x24
c0011d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d26:	6a 00                	push   0x0
c0011d28:	68 69 14 01 c0       	push   0xc0011469
c0011d2d:	6a 07                	push   0x7
c0011d2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d32:	ff d0                	call   eax
c0011d34:	83 c4 10             	add    esp,0x10
c0011d37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3c:	83 c0 24             	add    eax,0x24
c0011d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d41:	6a 00                	push   0x0
c0011d43:	68 d0 0c 01 c0       	push   0xc0010cd0
c0011d48:	6a 08                	push   0x8
c0011d4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d4d:	ff d0                	call   eax
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d57:	83 c0 24             	add    eax,0x24
c0011d5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5c:	6a 00                	push   0x0
c0011d5e:	68 1c 15 01 c0       	push   0xc001151c
c0011d63:	6a 09                	push   0x9
c0011d65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d68:	ff d0                	call   eax
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d72:	83 c0 24             	add    eax,0x24
c0011d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d77:	6a 00                	push   0x0
c0011d79:	68 1c 15 01 c0       	push   0xc001151c
c0011d7e:	6a 0a                	push   0xa
c0011d80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d83:	ff d0                	call   eax
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8d:	83 c0 24             	add    eax,0x24
c0011d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d92:	6a 00                	push   0x0
c0011d94:	68 1c 15 01 c0       	push   0xc001151c
c0011d99:	6a 0b                	push   0xb
c0011d9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d9e:	ff d0                	call   eax
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da8:	83 c0 24             	add    eax,0x24
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	6a 00                	push   0x0
c0011daf:	68 1c 15 01 c0       	push   0xc001151c
c0011db4:	6a 0c                	push   0xc
c0011db6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db9:	ff d0                	call   eax
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc3:	83 c0 24             	add    eax,0x24
c0011dc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc8:	6a 00                	push   0x0
c0011dca:	68 cc 14 01 c0       	push   0xc00114cc
c0011dcf:	6a 0d                	push   0xd
c0011dd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd4:	ff d0                	call   eax
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dde:	83 c0 24             	add    eax,0x24
c0011de1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de3:	6a 00                	push   0x0
c0011de5:	68 05 15 01 c0       	push   0xc0011505
c0011dea:	6a 0e                	push   0xe
c0011dec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011def:	ff d0                	call   eax
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df9:	83 c0 24             	add    eax,0x24
c0011dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dfe:	6a 00                	push   0x0
c0011e00:	68 1c 15 01 c0       	push   0xc001151c
c0011e05:	6a 0f                	push   0xf
c0011e07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e0a:	ff d0                	call   eax
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e14:	83 c0 24             	add    eax,0x24
c0011e17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e19:	6a 00                	push   0x0
c0011e1b:	68 1c 15 01 c0       	push   0xc001151c
c0011e20:	6a 10                	push   0x10
c0011e22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e25:	ff d0                	call   eax
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2f:	83 c0 24             	add    eax,0x24
c0011e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e34:	6a 00                	push   0x0
c0011e36:	68 1c 15 01 c0       	push   0xc001151c
c0011e3b:	6a 11                	push   0x11
c0011e3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e40:	ff d0                	call   eax
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e4a:	83 c0 24             	add    eax,0x24
c0011e4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e4f:	6a 00                	push   0x0
c0011e51:	68 1c 15 01 c0       	push   0xc001151c
c0011e56:	6a 12                	push   0x12
c0011e58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e5b:	ff d0                	call   eax
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	83 c0 24             	add    eax,0x24
c0011e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6a:	6a 00                	push   0x0
c0011e6c:	68 1c 15 01 c0       	push   0xc001151c
c0011e71:	6a 13                	push   0x13
c0011e73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e76:	ff d0                	call   eax
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e80:	83 c0 24             	add    eax,0x24
c0011e83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e85:	6a 00                	push   0x0
c0011e87:	68 1c 15 01 c0       	push   0xc001151c
c0011e8c:	6a 14                	push   0x14
c0011e8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e91:	ff d0                	call   eax
c0011e93:	83 c4 10             	add    esp,0x10
c0011e96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9b:	83 c0 24             	add    eax,0x24
c0011e9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea0:	6a 00                	push   0x0
c0011ea2:	68 1c 15 01 c0       	push   0xc001151c
c0011ea7:	6a 1e                	push   0x1e
c0011ea9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011eac:	ff d0                	call   eax
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb6:	83 c0 24             	add    eax,0x24
c0011eb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 4a 74 01 c0       	push   0xc001744a
c0011ec2:	6a 60                	push   0x60
c0011ec4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ec7:	ff d0                	call   eax
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ecf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ed2:	c9                   	leave  
c0011ed3:	c3                   	ret    

c0011ed4 <InterruptController::convertLegacyIRQNumber(int)>:
c0011ed4:	55                   	push   ebp
c0011ed5:	89 e5                	mov    ebp,esp
c0011ed7:	83 ec 08             	sub    esp,0x8
c0011eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011edd:	83 ec 0c             	sub    esp,0xc
c0011ee0:	50                   	push   eax
c0011ee1:	e8 1c ea ff ff       	call   c0010902 <Device::getName()>
c0011ee6:	83 c4 10             	add    esp,0x10
c0011ee9:	8a 00                	mov    al,BYTE PTR [eax]
c0011eeb:	3c 41                	cmp    al,0x41
c0011eed:	0f 94 c0             	sete   al
c0011ef0:	84 c0                	test   al,al
c0011ef2:	74 28                	je     c0011f1c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011ef4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011ef8:	7f 12                	jg     c0011f0c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011efa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011efd:	05 e0 3e 02 c0       	add    eax,0xc0023ee0
c0011f02:	8a 00                	mov    al,BYTE PTR [eax]
c0011f04:	0f b6 c0             	movzx  eax,al
c0011f07:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f0a:	eb 10                	jmp    c0011f1c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f0c:	83 ec 0c             	sub    esp,0xc
c0011f0f:	68 94 1d 02 c0       	push   0xc0021d94
c0011f14:	e8 21 3b 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f1f:	c9                   	leave  
c0011f20:	c3                   	ret    
c0011f21:	90                   	nop

c0011f22 <startGUI(void*)>:
c0011f22:	55                   	push   ebp
c0011f23:	89 e5                	mov    ebp,esp
c0011f25:	53                   	push   ebx
c0011f26:	83 ec 04             	sub    esp,0x4
c0011f29:	e8 17 6b 00 00       	call   c0018a45 <unlockScheduler()>
c0011f2e:	e8 fb 6a 00 00       	call   c0018a2e <getIRQNestingLevel()>
c0011f33:	83 ec 08             	sub    esp,0x8
c0011f36:	50                   	push   eax
c0011f37:	68 84 20 02 c0       	push   0xc0022084
c0011f3c:	e8 ca d2 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0011f4a:	83 ec 08             	sub    esp,0x8
c0011f4d:	6a 01                	push   0x1
c0011f4f:	68 9e 20 02 c0       	push   0xc002209e
c0011f54:	e8 04 65 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	83 ec 08             	sub    esp,0x8
c0011f5f:	53                   	push   ebx
c0011f60:	50                   	push   eax
c0011f61:	e8 bd 66 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0011f6f:	83 ec 08             	sub    esp,0x8
c0011f72:	6a 01                	push   0x1
c0011f74:	68 b8 20 02 c0       	push   0xc00220b8
c0011f79:	e8 df 64 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	83 ec 08             	sub    esp,0x8
c0011f84:	53                   	push   ebx
c0011f85:	50                   	push   eax
c0011f86:	e8 98 66 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	90                   	nop
c0011f8f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f92:	c9                   	leave  
c0011f93:	c3                   	ret    

c0011f94 <sendKeyToTerminal(unsigned char)>:
c0011f94:	55                   	push   ebp
c0011f95:	89 e5                	mov    ebp,esp
c0011f97:	83 ec 28             	sub    esp,0x28
c0011f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f9d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fa0:	8b 15 44 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024844
c0011fa6:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fa9:	25 ff 00 00 00       	and    eax,0xff
c0011fae:	83 ec 08             	sub    esp,0x8
c0011fb1:	50                   	push   eax
c0011fb2:	52                   	push   edx
c0011fb3:	e8 a2 b9 ff ff       	call   c000d95a <VgaText::receiveKey(unsigned char)>
c0011fb8:	83 c4 10             	add    esp,0x10
c0011fbb:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fbf:	75 41                	jne    c0012002 <sendKeyToTerminal(unsigned char)+0x6e>
c0011fc1:	e8 a4 6a 00 00       	call   c0018a6a <lockStuff()>
c0011fc6:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c0011fcb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fce:	c7 05 20 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024920,0x0
c0011fd8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fdc:	74 1f                	je     c0011ffd <sendKeyToTerminal(unsigned char)+0x69>
c0011fde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fe1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fe4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fe7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fed:	83 ec 0c             	sub    esp,0xc
c0011ff0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ff3:	e8 6f 70 00 00       	call   c0019067 <unblockTask(ThreadControlBlock*)>
c0011ff8:	83 c4 10             	add    esp,0x10
c0011ffb:	eb db                	jmp    c0011fd8 <sendKeyToTerminal(unsigned char)+0x44>
c0011ffd:	e8 0f 6e 00 00       	call   c0018e11 <unlockStuff()>
c0012002:	90                   	nop
c0012003:	c9                   	leave  
c0012004:	c3                   	ret    

c0012005 <sendKeyboardToken(KeyboardToken)>:
c0012005:	55                   	push   ebp
c0012006:	89 e5                	mov    ebp,esp
c0012008:	83 ec 18             	sub    esp,0x18
c001200b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001200e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012011:	25 ff ff 00 00       	and    eax,0xffff
c0012016:	83 f2 01             	xor    edx,0x1
c0012019:	88 90 40 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6c0],dl
c001201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012022:	66 3d 03 02          	cmp    ax,0x203
c0012026:	75 07                	jne    c001202f <sendKeyboardToken(KeyboardToken)+0x2a>
c0012028:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c001202d:	84 c0                	test   al,al
c001202f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0012033:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0012036:	a0 48 4d 02 c0       	mov    al,ds:0xc0024d48
c001203b:	38 c2                	cmp    dl,al
c001203d:	74 1e                	je     c001205d <sendKeyboardToken(KeyboardToken)+0x58>
c001203f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0012042:	a2 48 4d 02 c0       	mov    ds:0xc0024d48,al
c0012047:	a0 48 4d 02 c0       	mov    al,ds:0xc0024d48
c001204c:	25 ff 00 00 00       	and    eax,0xff
c0012051:	83 ec 0c             	sub    esp,0xc
c0012054:	50                   	push   eax
c0012055:	e8 6c ab ff ff       	call   c000cbc6 <setTerminalScrollLock(bool)>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012060:	84 c0                	test   al,al
c0012062:	0f 84 ae 00 00 00    	je     c0012116 <sendKeyboardToken(KeyboardToken)+0x111>
c0012068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001206b:	66 3d 10 03          	cmp    ax,0x310
c001206f:	75 06                	jne    c0012077 <sendKeyboardToken(KeyboardToken)+0x72>
c0012071:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0012077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207a:	66 3d 11 03          	cmp    ax,0x311
c001207e:	75 06                	jne    c0012086 <sendKeyboardToken(KeyboardToken)+0x81>
c0012080:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0012086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012089:	66 3d 12 03          	cmp    ax,0x312
c001208d:	75 06                	jne    c0012095 <sendKeyboardToken(KeyboardToken)+0x90>
c001208f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0012095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012098:	66 3d 13 03          	cmp    ax,0x313
c001209c:	75 06                	jne    c00120a4 <sendKeyboardToken(KeyboardToken)+0x9f>
c001209e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a7:	66 3d 14 03          	cmp    ax,0x314
c00120ab:	75 06                	jne    c00120b3 <sendKeyboardToken(KeyboardToken)+0xae>
c00120ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b6:	66 3d 15 03          	cmp    ax,0x315
c00120ba:	75 06                	jne    c00120c2 <sendKeyboardToken(KeyboardToken)+0xbd>
c00120bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c5:	66 3d 16 03          	cmp    ax,0x316
c00120c9:	75 06                	jne    c00120d1 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120cb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d4:	66 3d 17 03          	cmp    ax,0x317
c00120d8:	75 06                	jne    c00120e0 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120da:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e3:	66 3d 18 03          	cmp    ax,0x318
c00120e7:	75 06                	jne    c00120ef <sendKeyboardToken(KeyboardToken)+0xea>
c00120e9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f2:	66 3d 19 03          	cmp    ax,0x319
c00120f6:	75 06                	jne    c00120fe <sendKeyboardToken(KeyboardToken)+0xf9>
c00120f8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00120fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012101:	66 3d 1a 03          	cmp    ax,0x31a
c0012105:	0f 85 c9 00 00 00    	jne    c00121d4 <sendKeyboardToken(KeyboardToken)+0x1cf>
c001210b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012111:	e9 be 00 00 00       	jmp    c00121d4 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012119:	66 3d 10 03          	cmp    ax,0x310
c001211d:	75 0a                	jne    c0012129 <sendKeyboardToken(KeyboardToken)+0x124>
c001211f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012125:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001212c:	66 3d 11 03          	cmp    ax,0x311
c0012130:	75 0a                	jne    c001213c <sendKeyboardToken(KeyboardToken)+0x137>
c0012132:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012138:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001213c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001213f:	66 3d 12 03          	cmp    ax,0x312
c0012143:	75 0a                	jne    c001214f <sendKeyboardToken(KeyboardToken)+0x14a>
c0012145:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001214b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001214f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012152:	66 3d 13 03          	cmp    ax,0x313
c0012156:	75 0a                	jne    c0012162 <sendKeyboardToken(KeyboardToken)+0x15d>
c0012158:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001215e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012165:	66 3d 14 03          	cmp    ax,0x314
c0012169:	75 0a                	jne    c0012175 <sendKeyboardToken(KeyboardToken)+0x170>
c001216b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012171:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012178:	66 3d 15 03          	cmp    ax,0x315
c001217c:	75 0a                	jne    c0012188 <sendKeyboardToken(KeyboardToken)+0x183>
c001217e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012184:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001218b:	66 3d 16 03          	cmp    ax,0x316
c001218f:	75 0a                	jne    c001219b <sendKeyboardToken(KeyboardToken)+0x196>
c0012191:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0012197:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001219b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001219e:	66 3d 17 03          	cmp    ax,0x317
c00121a2:	75 0a                	jne    c00121ae <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121a4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b1:	66 3d 18 03          	cmp    ax,0x318
c00121b5:	75 0a                	jne    c00121c1 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121b7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c4:	66 3d 19 03          	cmp    ax,0x319
c00121c8:	75 0a                	jne    c00121d4 <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121ca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121d7:	66 3d 00 02          	cmp    ax,0x200
c00121db:	75 2a                	jne    c0012207 <sendKeyboardToken(KeyboardToken)+0x202>
c00121dd:	a0 40 4d 02 c0       	mov    al,ds:0xc0024d40
c00121e2:	83 f0 01             	xor    eax,0x1
c00121e5:	84 c0                	test   al,al
c00121e7:	74 1e                	je     c0012207 <sendKeyboardToken(KeyboardToken)+0x202>
c00121e9:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00121ee:	6a 01                	push   0x1
c00121f0:	6a 00                	push   0x0
c00121f2:	68 22 1f 01 c0       	push   0xc0011f22
c00121f7:	50                   	push   eax
c00121f8:	e8 7b 69 00 00       	call   c0018b78 <Process::createThread(void (*)(void*), void*, int)>
c00121fd:	83 c4 10             	add    esp,0x10
c0012200:	c6 05 40 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d40,0x1
c0012207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001220a:	66 3d 1d 03          	cmp    ax,0x31d
c001220e:	75 06                	jne    c0012216 <sendKeyboardToken(KeyboardToken)+0x211>
c0012210:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012219:	66 3d 1c 03          	cmp    ax,0x31c
c001221d:	75 06                	jne    c0012225 <sendKeyboardToken(KeyboardToken)+0x220>
c001221f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012228:	66 3d 1b 03          	cmp    ax,0x31b
c001222c:	75 06                	jne    c0012234 <sendKeyboardToken(KeyboardToken)+0x22f>
c001222e:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012237:	66 3d 1e 03          	cmp    ax,0x31e
c001223b:	75 06                	jne    c0012243 <sendKeyboardToken(KeyboardToken)+0x23e>
c001223d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012246:	66 3d 1f 03          	cmp    ax,0x31f
c001224a:	75 06                	jne    c0012252 <sendKeyboardToken(KeyboardToken)+0x24d>
c001224c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012255:	66 3d 1a 03          	cmp    ax,0x31a
c0012259:	75 06                	jne    c0012261 <sendKeyboardToken(KeyboardToken)+0x25c>
c001225b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012261:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012265:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012268:	83 f0 01             	xor    eax,0x1
c001226b:	84 c0                	test   al,al
c001226d:	74 7b                	je     c00122ea <sendKeyboardToken(KeyboardToken)+0x2e5>
c001226f:	a0 41 4a 02 c0       	mov    al,ds:0xc0024a41
c0012274:	84 c0                	test   al,al
c0012276:	74 43                	je     c00122bb <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012278:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001227c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012280:	74 2d                	je     c00122af <sendKeyboardToken(KeyboardToken)+0x2aa>
c0012282:	8b 15 44 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d44
c0012288:	89 d0                	mov    eax,edx
c001228a:	c1 e0 02             	shl    eax,0x2
c001228d:	01 d0                	add    eax,edx
c001228f:	01 c0                	add    eax,eax
c0012291:	a3 44 4d 02 c0       	mov    ds:0xc0024d44,eax
c0012296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012299:	25 ff ff 00 00       	and    eax,0xffff
c001229e:	8d 50 d0             	lea    edx,[eax-0x30]
c00122a1:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122a6:	01 d0                	add    eax,edx
c00122a8:	a3 44 4d 02 c0       	mov    ds:0xc0024d44,eax
c00122ad:	eb 71                	jmp    c0012320 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122af:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c00122b9:	eb 65                	jmp    c0012320 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122bb:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122c0:	85 c0                	test   eax,eax
c00122c2:	74 1a                	je     c00122de <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122c4:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122c9:	25 ff 00 00 00       	and    eax,0xff
c00122ce:	83 ec 0c             	sub    esp,0xc
c00122d1:	50                   	push   eax
c00122d2:	e8 bd fc ff ff       	call   c0011f94 <sendKeyToTerminal(unsigned char)>
c00122d7:	83 c4 10             	add    esp,0x10
c00122da:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122de:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c00122e8:	eb 36                	jmp    c0012320 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ed:	66 3d 01 01          	cmp    ax,0x101
c00122f1:	75 2d                	jne    c0012320 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122f3:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c00122f8:	85 c0                	test   eax,eax
c00122fa:	74 1a                	je     c0012316 <sendKeyboardToken(KeyboardToken)+0x311>
c00122fc:	a1 44 4d 02 c0       	mov    eax,ds:0xc0024d44
c0012301:	25 ff 00 00 00       	and    eax,0xff
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	50                   	push   eax
c001230a:	e8 85 fc ff ff       	call   c0011f94 <sendKeyToTerminal(unsigned char)>
c001230f:	83 c4 10             	add    esp,0x10
c0012312:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012316:	c7 05 44 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d44,0x0
c0012320:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012323:	83 f0 01             	xor    eax,0x1
c0012326:	84 c0                	test   al,al
c0012328:	74 4e                	je     c0012378 <sendKeyboardToken(KeyboardToken)+0x373>
c001232a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001232d:	83 f0 01             	xor    eax,0x1
c0012330:	84 c0                	test   al,al
c0012332:	74 44                	je     c0012378 <sendKeyboardToken(KeyboardToken)+0x373>
c0012334:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c0012339:	83 f0 01             	xor    eax,0x1
c001233c:	84 c0                	test   al,al
c001233e:	74 38                	je     c0012378 <sendKeyboardToken(KeyboardToken)+0x373>
c0012340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012343:	66 83 f8 1f          	cmp    ax,0x1f
c0012347:	76 09                	jbe    c0012352 <sendKeyboardToken(KeyboardToken)+0x34d>
c0012349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234c:	66 83 f8 7e          	cmp    ax,0x7e
c0012350:	76 12                	jbe    c0012364 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012355:	66 83 f8 0a          	cmp    ax,0xa
c0012359:	74 09                	je     c0012364 <sendKeyboardToken(KeyboardToken)+0x35f>
c001235b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235e:	66 83 f8 08          	cmp    ax,0x8
c0012362:	75 14                	jne    c0012378 <sendKeyboardToken(KeyboardToken)+0x373>
c0012364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012367:	25 ff 00 00 00       	and    eax,0xff
c001236c:	83 ec 0c             	sub    esp,0xc
c001236f:	50                   	push   eax
c0012370:	e8 1f fc ff ff       	call   c0011f94 <sendKeyToTerminal(unsigned char)>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001237b:	83 f0 01             	xor    eax,0x1
c001237e:	84 c0                	test   al,al
c0012380:	74 51                	je     c00123d3 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012382:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012385:	83 f0 01             	xor    eax,0x1
c0012388:	84 c0                	test   al,al
c001238a:	74 47                	je     c00123d3 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001238c:	a0 40 4a 02 c0       	mov    al,ds:0xc0024a40
c0012391:	84 c0                	test   al,al
c0012393:	74 3e                	je     c00123d3 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012398:	66 83 f8 3f          	cmp    ax,0x3f
c001239c:	76 35                	jbe    c00123d3 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a1:	66 83 f8 7f          	cmp    ax,0x7f
c00123a5:	77 2c                	ja     c00123d3 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123aa:	88 c2                	mov    dl,al
c00123ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123af:	66 83 f8 5f          	cmp    ax,0x5f
c00123b3:	76 04                	jbe    c00123b9 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123b5:	b0 20                	mov    al,0x20
c00123b7:	eb 02                	jmp    c00123bb <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123b9:	b0 00                	mov    al,0x0
c00123bb:	29 c2                	sub    edx,eax
c00123bd:	88 d0                	mov    al,dl
c00123bf:	83 e8 40             	sub    eax,0x40
c00123c2:	25 ff 00 00 00       	and    eax,0xff
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	50                   	push   eax
c00123cb:	e8 c4 fb ff ff       	call   c0011f94 <sendKeyToTerminal(unsigned char)>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123d6:	66 3d 00 03          	cmp    ax,0x300
c00123da:	75 0f                	jne    c00123eb <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123df:	83 f0 01             	xor    eax,0x1
c00123e2:	84 c0                	test   al,al
c00123e4:	74 05                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123e6:	e8 02 b0 ff ff       	call   c000d3ed <doTerminalCycle()>
c00123eb:	90                   	nop
c00123ec:	c9                   	leave  
c00123ed:	c3                   	ret    

c00123ee <clearInternalKeybuffer(VgaText*)>:
c00123ee:	55                   	push   ebp
c00123ef:	89 e5                	mov    ebp,esp
c00123f1:	83 ec 08             	sub    esp,0x8
c00123f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123f7:	05 34 11 00 00       	add    eax,0x1134
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	50                   	push   eax
c0012400:	e8 d2 e2 fe ff       	call   c00006d7 <strlen>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001240b:	81 c2 34 11 00 00    	add    edx,0x1134
c0012411:	83 ec 04             	sub    esp,0x4
c0012414:	50                   	push   eax
c0012415:	6a 00                	push   0x0
c0012417:	52                   	push   edx
c0012418:	e8 9d e2 fe ff       	call   c00006ba <memset>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	90                   	nop
c0012421:	c9                   	leave  
c0012422:	c3                   	ret    

c0012423 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012423:	55                   	push   ebp
c0012424:	89 e5                	mov    ebp,esp
c0012426:	83 ec 18             	sub    esp,0x18
c0012429:	fb                   	sti    
c001242a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012431:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012435:	74 77                	je     c00124ae <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001243a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012440:	84 c0                	test   al,al
c0012442:	75 02                	jne    c0012446 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012444:	eb f1                	jmp    c0012437 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012446:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012449:	8d 50 01             	lea    edx,[eax+0x1]
c001244c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001244f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012452:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012458:	88 10                	mov    BYTE PTR [eax],dl
c001245a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001245d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012463:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012469:	05 34 11 00 00       	add    eax,0x1134
c001246e:	83 ec 0c             	sub    esp,0xc
c0012471:	50                   	push   eax
c0012472:	e8 60 e2 fe ff       	call   c00006d7 <strlen>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001247d:	81 c2 34 11 00 00    	add    edx,0x1134
c0012483:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012486:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012489:	81 c2 34 11 00 00    	add    edx,0x1134
c001248f:	83 ec 04             	sub    esp,0x4
c0012492:	50                   	push   eax
c0012493:	51                   	push   ecx
c0012494:	52                   	push   edx
c0012495:	e8 b2 e1 fe ff       	call   c000064c <memmove>
c001249a:	83 c4 10             	add    esp,0x10
c001249d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124a3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124a7:	75 88                	jne    c0012431 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124ac:	eb 03                	jmp    c00124b1 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b1:	c9                   	leave  
c00124b2:	c3                   	ret    
c00124b3:	90                   	nop

c00124b4 <Keyboard::Keyboard(char const*)>:
c00124b4:	83 ec 0c             	sub    esp,0xc
c00124b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124bb:	83 ec 08             	sub    esp,0x8
c00124be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c2:	50                   	push   eax
c00124c3:	e8 48 e3 ff ff       	call   c0010810 <Device::Device(char const*)>
c00124c8:	83 c4 10             	add    esp,0x10
c00124cb:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c00124d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d4:	89 10                	mov    DWORD PTR [eax],edx
c00124d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124da:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124e4:	c6 05 24 49 02 c0 01 	mov    BYTE PTR ds:0xc0024924,0x1
c00124eb:	90                   	nop
c00124ec:	83 c4 0c             	add    esp,0xc
c00124ef:	c3                   	ret    

c00124f0 <Keyboard::~Keyboard()>:
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c00124f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124fc:	89 10                	mov    DWORD PTR [eax],edx
c00124fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	50                   	push   eax
c0012506:	e8 bb df ff ff       	call   c00104c6 <Device::~Device()>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	90                   	nop
c001250f:	83 c4 0c             	add    esp,0xc
c0012512:	c3                   	ret    
c0012513:	90                   	nop

c0012514 <Keyboard::~Keyboard()>:
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001251e:	e8 cd ff ff ff       	call   c00124f0 <Keyboard::~Keyboard()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	83 ec 08             	sub    esp,0x8
c0012529:	68 5c 01 00 00       	push   0x15c
c001252e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012532:	e8 ae cb ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	83 c4 0c             	add    esp,0xc
c001253d:	c3                   	ret    

c001253e <LogicalDisk::close(int, int, void*)>:
c001253e:	83 c8 ff             	or     eax,0xffffffff
c0012541:	c3                   	ret    

c0012542 <LogicalDisk::~LogicalDisk()>:
c0012542:	83 ec 0c             	sub    esp,0xc
c0012545:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c001254a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001254e:	89 10                	mov    DWORD PTR [eax],edx
c0012550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	50                   	push   eax
c0012558:	e8 69 df ff ff       	call   c00104c6 <Device::~Device()>
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	90                   	nop
c0012561:	83 c4 0c             	add    esp,0xc
c0012564:	c3                   	ret    
c0012565:	90                   	nop

c0012566 <LogicalDisk::~LogicalDisk()>:
c0012566:	83 ec 0c             	sub    esp,0xc
c0012569:	83 ec 0c             	sub    esp,0xc
c001256c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012570:	e8 cd ff ff ff       	call   c0012542 <LogicalDisk::~LogicalDisk()>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	83 ec 08             	sub    esp,0x8
c001257b:	68 74 01 00 00       	push   0x174
c0012580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012584:	e8 5c cb ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0012589:	83 c4 10             	add    esp,0x10
c001258c:	83 c4 0c             	add    esp,0xc
c001258f:	c3                   	ret    

c0012590 <LogicalDisk::open(int, int, void*)>:
c0012590:	83 ec 18             	sub    esp,0x18
c0012593:	68 08 21 02 c0       	push   0xc0022108
c0012598:	e8 9d 34 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c001259d:	83 c8 ff             	or     eax,0xffffffff
c00125a0:	83 c4 1c             	add    esp,0x1c
c00125a3:	c3                   	ret    

c00125a4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125a4:	53                   	push   ebx
c00125a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125b1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125b7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125bd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125c3:	77 10                	ja     c00125d5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125c5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125cb:	89 d3                	mov    ebx,edx
c00125cd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125d3:	72 05                	jb     c00125da <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125d5:	83 c8 ff             	or     eax,0xffffffff
c00125d8:	89 c2                	mov    edx,eax
c00125da:	5b                   	pop    ebx
c00125db:	c3                   	ret    

c00125dc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125dc:	56                   	push   esi
c00125dd:	83 c8 ff             	or     eax,0xffffffff
c00125e0:	53                   	push   ebx
c00125e1:	89 c2                	mov    edx,eax
c00125e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125f5:	77 27                	ja     c001261e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125f7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00125fd:	89 d8                	mov    eax,ebx
c00125ff:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012605:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001260a:	89 c2                	mov    edx,eax
c001260c:	73 10                	jae    c001261e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001260e:	89 c8                	mov    eax,ecx
c0012610:	89 da                	mov    edx,ebx
c0012612:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012618:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001261e:	5b                   	pop    ebx
c001261f:	5e                   	pop    esi
c0012620:	c3                   	ret    
c0012621:	90                   	nop

c0012622 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012622:	83 ec 1c             	sub    esp,0x1c
c0012625:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001262d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012635:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012639:	89 04 24             	mov    DWORD PTR [esp],eax
c001263c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012640:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012648:	83 ec 08             	sub    esp,0x8
c001264b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001264f:	50                   	push   eax
c0012650:	e8 bb e1 ff ff       	call   c0010810 <Device::Device(char const*)>
c0012655:	83 c4 10             	add    esp,0x10
c0012658:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c001265d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012661:	89 10                	mov    DWORD PTR [eax],edx
c0012663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012667:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001266e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012672:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012687:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001268b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001268f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012693:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0012699:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001269f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126aa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126b0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126be:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126d2:	90                   	nop
c00126d3:	83 c4 1c             	add    esp,0x1c
c00126d6:	c3                   	ret    
c00126d7:	90                   	nop

c00126d8 <LogicalDisk::assignDriveLetter()>:
c00126d8:	55                   	push   ebp
c00126d9:	57                   	push   edi
c00126da:	56                   	push   esi
c00126db:	53                   	push   ebx
c00126dc:	83 ec 14             	sub    esp,0x14
c00126df:	8b 3d 60 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d60
c00126e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126ed:	8b 3d 64 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d64
c00126f3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00126f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00126fd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012703:	3c 01                	cmp    al,0x1
c0012705:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012709:	19 c0                	sbb    eax,eax
c001270b:	83 e0 02             	and    eax,0x2
c001270e:	83 c0 41             	add    eax,0x41
c0012711:	0f be e8             	movsx  ebp,al
c0012714:	3c 43                	cmp    al,0x43
c0012716:	75 10                	jne    c0012728 <LogicalDisk::assignDriveLetter()+0x50>
c0012718:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001271f:	75 5d                	jne    c001277e <LogicalDisk::assignDriveLetter()+0xa6>
c0012721:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012726:	75 56                	jne    c001277e <LogicalDisk::assignDriveLetter()+0xa6>
c0012728:	8d 75 bf             	lea    esi,[ebp-0x41]
c001272b:	ba 01 00 00 00       	mov    edx,0x1
c0012730:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012734:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012738:	d3 e2                	shl    edx,cl
c001273a:	89 d7                	mov    edi,edx
c001273c:	89 d6                	mov    esi,edx
c001273e:	c1 ff 1f             	sar    edi,0x1f
c0012741:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012749:	21 f9                	and    ecx,edi
c001274b:	09 d1                	or     ecx,edx
c001274d:	75 2f                	jne    c001277e <LogicalDisk::assignDriveLetter()+0xa6>
c001274f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012753:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012757:	09 f2                	or     edx,esi
c0012759:	89 15 60 4d 02 c0    	mov    DWORD PTR ds:0xc0024d60,edx
c001275f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012763:	09 fa                	or     edx,edi
c0012765:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012769:	89 15 64 4d 02 c0    	mov    DWORD PTR ds:0xc0024d64,edx
c001276f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012775:	89 1c bd 80 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb280],ebx
c001277c:	eb 08                	jmp    c0012786 <LogicalDisk::assignDriveLetter()+0xae>
c001277e:	40                   	inc    eax
c001277f:	45                   	inc    ebp
c0012780:	3c 5b                	cmp    al,0x5b
c0012782:	75 90                	jne    c0012714 <LogicalDisk::assignDriveLetter()+0x3c>
c0012784:	31 c0                	xor    eax,eax
c0012786:	83 c4 14             	add    esp,0x14
c0012789:	5b                   	pop    ebx
c001278a:	5e                   	pop    esi
c001278b:	5f                   	pop    edi
c001278c:	5d                   	pop    ebp
c001278d:	c3                   	ret    

c001278e <LogicalDisk::mount()>:
c001278e:	56                   	push   esi
c001278f:	53                   	push   ebx
c0012790:	51                   	push   ecx
c0012791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012795:	8b 1d e8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248e8
c001279b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127a5:	85 db                	test   ebx,ebx
c00127a7:	74 50                	je     c00127f9 <LogicalDisk::mount()+0x6b>
c00127a9:	e8 80 62 00 00       	call   c0018a2e <getIRQNestingLevel()>
c00127ae:	52                   	push   edx
c00127af:	52                   	push   edx
c00127b0:	50                   	push   eax
c00127b1:	68 2c 21 02 c0       	push   0xc002212c
c00127b6:	e8 50 ca ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00127bb:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127c2:	83 c4 0c             	add    esp,0xc
c00127c5:	83 e8 41             	sub    eax,0x41
c00127c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127ca:	50                   	push   eax
c00127cb:	56                   	push   esi
c00127cc:	53                   	push   ebx
c00127cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	84 c0                	test   al,al
c00127d5:	74 08                	je     c00127df <LogicalDisk::mount()+0x51>
c00127d7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127dd:	eb 1c                	jmp    c00127fb <LogicalDisk::mount()+0x6d>
c00127df:	e8 4a 62 00 00       	call   c0018a2e <getIRQNestingLevel()>
c00127e4:	51                   	push   ecx
c00127e5:	51                   	push   ecx
c00127e6:	50                   	push   eax
c00127e7:	68 47 21 02 c0       	push   0xc0022147
c00127ec:	e8 1a ca ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00127f1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127f4:	83 c4 10             	add    esp,0x10
c00127f7:	eb ac                	jmp    c00127a5 <LogicalDisk::mount()+0x17>
c00127f9:	31 c0                	xor    eax,eax
c00127fb:	5a                   	pop    edx
c00127fc:	5b                   	pop    ebx
c00127fd:	5e                   	pop    esi
c00127fe:	c3                   	ret    
c00127ff:	90                   	nop

c0012800 <LogicalDisk::unmount()>:
c0012800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012804:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001280e:	c3                   	ret    
c001280f:	90                   	nop

c0012810 <LogicalDisk::unassignDriveLetter()>:
c0012810:	57                   	push   edi
c0012811:	56                   	push   esi
c0012812:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012816:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001281d:	84 c9                	test   cl,cl
c001281f:	75 0f                	jne    c0012830 <LogicalDisk::unassignDriveLetter()+0x20>
c0012821:	c7 44 24 0c 62 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022162
c0012829:	5e                   	pop    esi
c001282a:	5f                   	pop    edi
c001282b:	e9 0a 32 00 00       	jmp    c0015a3a <Krnl::panic(char const*)>
c0012830:	83 e9 41             	sub    ecx,0x41
c0012833:	b8 01 00 00 00       	mov    eax,0x1
c0012838:	d3 e0                	shl    eax,cl
c001283a:	89 c7                	mov    edi,eax
c001283c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012843:	c1 ff 1f             	sar    edi,0x1f
c0012846:	c7 04 8d 80 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb280],0x0
c0012851:	89 fe                	mov    esi,edi
c0012853:	f7 d6                	not    esi
c0012855:	f7 d0                	not    eax
c0012857:	21 35 64 4d 02 c0    	and    DWORD PTR ds:0xc0024d64,esi
c001285d:	5e                   	pop    esi
c001285e:	21 05 60 4d 02 c0    	and    DWORD PTR ds:0xc0024d60,eax
c0012864:	5f                   	pop    edi
c0012865:	c3                   	ret    

c0012866 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012866:	57                   	push   edi
c0012867:	56                   	push   esi
c0012868:	53                   	push   ebx
c0012869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001286d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012871:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012875:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012879:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001287f:	77 41                	ja     c00128c2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012881:	99                   	cdq    
c0012882:	01 c8                	add    eax,ecx
c0012884:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001288a:	11 da                	adc    edx,ebx
c001288c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012892:	19 d7                	sbb    edi,edx
c0012894:	72 33                	jb     c00128c9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012896:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001289c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128ba:	5b                   	pop    ebx
c00128bb:	5e                   	pop    esi
c00128bc:	5f                   	pop    edi
c00128bd:	e9 9a 09 00 00       	jmp    c001325c <VCache::read(unsigned long long, int, void*)>
c00128c2:	b8 05 00 00 00       	mov    eax,0x5
c00128c7:	eb 05                	jmp    c00128ce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128c9:	b8 07 00 00 00       	mov    eax,0x7
c00128ce:	5b                   	pop    ebx
c00128cf:	5e                   	pop    esi
c00128d0:	5f                   	pop    edi
c00128d1:	c3                   	ret    

c00128d2 <LogicalDisk::write(unsigned long long, int, void*)>:
c00128d2:	57                   	push   edi
c00128d3:	56                   	push   esi
c00128d4:	53                   	push   ebx
c00128d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128eb:	77 41                	ja     c001292e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128ed:	99                   	cdq    
c00128ee:	01 c8                	add    eax,ecx
c00128f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128f6:	11 da                	adc    edx,ebx
c00128f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128fe:	19 d7                	sbb    edi,edx
c0012900:	72 33                	jb     c0012935 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012902:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012908:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001290e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012912:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012916:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001291c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012922:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012926:	5b                   	pop    ebx
c0012927:	5e                   	pop    esi
c0012928:	5f                   	pop    edi
c0012929:	e9 4a 08 00 00       	jmp    c0013178 <VCache::write(unsigned long long, int, void*)>
c001292e:	b8 05 00 00 00       	mov    eax,0x5
c0012933:	eb 05                	jmp    c001293a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012935:	b8 07 00 00 00       	mov    eax,0x7
c001293a:	5b                   	pop    ebx
c001293b:	5e                   	pop    esi
c001293c:	5f                   	pop    edi
c001293d:	c3                   	ret    

c001293e <Mouse::Mouse(char const*)>:
c001293e:	83 ec 0c             	sub    esp,0xc
c0012941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012945:	83 ec 08             	sub    esp,0x8
c0012948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001294c:	50                   	push   eax
c001294d:	e8 be de ff ff       	call   c0010810 <Device::Device(char const*)>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295e:	89 10                	mov    DWORD PTR [eax],edx
c0012960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012964:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001296e:	90                   	nop
c001296f:	83 c4 0c             	add    esp,0xc
c0012972:	c3                   	ret    
c0012973:	90                   	nop

c0012974 <Mouse::~Mouse()>:
c0012974:	83 ec 0c             	sub    esp,0xc
c0012977:	ba b8 21 02 c0       	mov    edx,0xc00221b8
c001297c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012980:	89 10                	mov    DWORD PTR [eax],edx
c0012982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	50                   	push   eax
c001298a:	e8 37 db ff ff       	call   c00104c6 <Device::~Device()>
c001298f:	83 c4 10             	add    esp,0x10
c0012992:	90                   	nop
c0012993:	83 c4 0c             	add    esp,0xc
c0012996:	c3                   	ret    
c0012997:	90                   	nop

c0012998 <Mouse::~Mouse()>:
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	83 ec 0c             	sub    esp,0xc
c001299e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a2:	e8 cd ff ff ff       	call   c0012974 <Mouse::~Mouse()>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	83 ec 08             	sub    esp,0x8
c00129ad:	68 58 01 00 00       	push   0x158
c00129b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b6:	e8 2a c7 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	83 c4 0c             	add    esp,0xc
c00129c1:	c3                   	ret    

c00129c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129c2:	55                   	push   ebp
c00129c3:	57                   	push   edi
c00129c4:	56                   	push   esi
c00129c5:	53                   	push   ebx
c00129c6:	81 ec 28 01 00 00    	sub    esp,0x128
c00129cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129d3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129da:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129e1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129f7:	e8 06 df ff ff       	call   c0010902 <Device::getName()>
c00129fc:	5a                   	pop    edx
c00129fd:	59                   	pop    ecx
c00129fe:	50                   	push   eax
c00129ff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a03:	55                   	push   ebp
c0012a04:	e8 50 dd fe ff       	call   c0000759 <strcpy>
c0012a09:	5b                   	pop    ebx
c0012a0a:	58                   	pop    eax
c0012a0b:	68 dc 21 02 c0       	push   0xc00221dc
c0012a10:	55                   	push   ebp
c0012a11:	e8 fa dd fe ff       	call   c0000810 <strcat>
c0012a16:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a1d:	e8 b4 c6 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0012a22:	83 c4 0c             	add    esp,0xc
c0012a25:	89 c3                	mov    ebx,eax
c0012a27:	57                   	push   edi
c0012a28:	56                   	push   esi
c0012a29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a31:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a38:	55                   	push   ebp
c0012a39:	50                   	push   eax
c0012a3a:	e8 e3 fb ff ff       	call   c0012622 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a3f:	83 c4 14             	add    esp,0x14
c0012a42:	53                   	push   ebx
c0012a43:	e8 90 fc ff ff       	call   c00126d8 <LogicalDisk::assignDriveLetter()>
c0012a48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a4b:	e8 3e fd ff ff       	call   c001278e <LogicalDisk::mount()>
c0012a50:	58                   	pop    eax
c0012a51:	5a                   	pop    edx
c0012a52:	53                   	push   ebx
c0012a53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a5a:	e8 c1 db ff ff       	call   c0010620 <Device::addChild(Device*)>
c0012a5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a65:	5b                   	pop    ebx
c0012a66:	5e                   	pop    esi
c0012a67:	5f                   	pop    edi
c0012a68:	5d                   	pop    ebp
c0012a69:	c3                   	ret    

c0012a6a <createPartitionsForDisk(PhysicalDisk*)>:
c0012a6a:	55                   	push   ebp
c0012a6b:	57                   	push   edi
c0012a6c:	56                   	push   esi
c0012a6d:	53                   	push   ebx
c0012a6e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a74:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a7b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a81:	3d 00 02 00 00       	cmp    eax,0x200
c0012a86:	74 27                	je     c0012aaf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a88:	83 ec 10             	sub    esp,0x10
c0012a8b:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a91:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a97:	99                   	cdq    
c0012a98:	52                   	push   edx
c0012a99:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012a9d:	50                   	push   eax
c0012a9e:	89 fd                	mov    ebp,edi
c0012aa0:	c1 e6 0a             	shl    esi,0xa
c0012aa3:	55                   	push   ebp
c0012aa4:	56                   	push   esi
c0012aa5:	e8 52 ca 00 00       	call   c001f4fc <__udivdi3>
c0012aaa:	e9 b1 00 00 00       	jmp    c0012b60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012aaf:	83 ec 0c             	sub    esp,0xc
c0012ab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ab4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012ab8:	56                   	push   esi
c0012ab9:	6a 01                	push   0x1
c0012abb:	6a 00                	push   0x0
c0012abd:	6a 00                	push   0x0
c0012abf:	53                   	push   ebx
c0012ac0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ac3:	83 c4 20             	add    esp,0x20
c0012ac6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ace:	75 0a                	jne    c0012ada <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ad0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012ad8:	74 2c                	je     c0012b06 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ada:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012ae0:	83 ec 10             	sub    esp,0x10
c0012ae3:	89 f7                	mov    edi,esi
c0012ae5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012aeb:	c1 ff 1f             	sar    edi,0x1f
c0012aee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012af4:	57                   	push   edi
c0012af5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012af9:	c1 e0 0a             	shl    eax,0xa
c0012afc:	56                   	push   esi
c0012afd:	52                   	push   edx
c0012afe:	50                   	push   eax
c0012aff:	e8 f8 c9 00 00       	call   c001f4fc <__udivdi3>
c0012b04:	eb 5a                	jmp    c0012b60 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b06:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b0d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b14:	83 e0 7f             	and    eax,0x7f
c0012b17:	83 e1 7f             	and    ecx,0x7f
c0012b1a:	01 c1                	add    ecx,eax
c0012b1c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b23:	83 e0 7f             	and    eax,0x7f
c0012b26:	01 c1                	add    ecx,eax
c0012b28:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b2f:	83 e0 7f             	and    eax,0x7f
c0012b32:	00 c1                	add    cl,al
c0012b34:	74 41                	je     c0012b77 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b3c:	83 ec 10             	sub    esp,0x10
c0012b3f:	89 f7                	mov    edi,esi
c0012b41:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b47:	c1 ff 1f             	sar    edi,0x1f
c0012b4a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b50:	57                   	push   edi
c0012b51:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b55:	c1 e0 0a             	shl    eax,0xa
c0012b58:	56                   	push   esi
c0012b59:	52                   	push   edx
c0012b5a:	50                   	push   eax
c0012b5b:	e8 9c c9 00 00       	call   c001f4fc <__udivdi3>
c0012b60:	83 c4 14             	add    esp,0x14
c0012b63:	52                   	push   edx
c0012b64:	50                   	push   eax
c0012b65:	6a 00                	push   0x0
c0012b67:	6a 00                	push   0x0
c0012b69:	53                   	push   ebx
c0012b6a:	e8 53 fe ff ff       	call   c00129c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b6f:	83 c4 20             	add    esp,0x20
c0012b72:	e9 79 01 00 00       	jmp    c0012cf0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b77:	89 f0                	mov    eax,esi
c0012b79:	31 f6                	xor    esi,esi
c0012b7b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b82:	75 02                	jne    c0012b86 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b84:	89 f1                	mov    ecx,esi
c0012b86:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b8d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b94:	c1 e2 08             	shl    edx,0x8
c0012b97:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012b9f:	c1 e7 10             	shl    edi,0x10
c0012ba2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012baa:	09 fa                	or     edx,edi
c0012bac:	83 c0 10             	add    eax,0x10
c0012baf:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bb6:	09 fa                	or     edx,edi
c0012bb8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bbf:	c1 e7 18             	shl    edi,0x18
c0012bc2:	09 fa                	or     edx,edi
c0012bc4:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bc8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bcf:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bd6:	c1 e7 10             	shl    edi,0x10
c0012bd9:	c1 e2 08             	shl    edx,0x8
c0012bdc:	09 fa                	or     edx,edi
c0012bde:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012be5:	09 fa                	or     edx,edi
c0012be7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012bee:	c1 e7 18             	shl    edi,0x18
c0012bf1:	09 fa                	or     edx,edi
c0012bf3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012bf7:	46                   	inc    esi
c0012bf8:	83 fe 04             	cmp    esi,0x4
c0012bfb:	0f 85 7a ff ff ff    	jne    c0012b7b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c05:	83 f0 01             	xor    eax,0x1
c0012c08:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c0c:	75 57                	jne    c0012c65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c12:	83 f0 01             	xor    eax,0x1
c0012c15:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c19:	75 4a                	jne    c0012c65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c1b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c21:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c25:	89 f7                	mov    edi,esi
c0012c27:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c2f:	c1 ff 1f             	sar    edi,0x1f
c0012c32:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c46:	57                   	push   edi
c0012c47:	56                   	push   esi
c0012c48:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c4c:	c1 e0 0a             	shl    eax,0xa
c0012c4f:	52                   	push   edx
c0012c50:	50                   	push   eax
c0012c51:	e8 a6 c8 00 00       	call   c001f4fc <__udivdi3>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c61:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c65:	84 c9                	test   cl,cl
c0012c67:	74 53                	je     c0012cbc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c69:	0f b6 c9             	movzx  ecx,cl
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c7c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c80:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c94:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c98:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012c9c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012ca0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012ca4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012ca8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cb0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cb4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cb8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cbc:	31 ed                	xor    ebp,ebp
c0012cbe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cc2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cc6:	89 f8                	mov    eax,edi
c0012cc8:	09 f0                	or     eax,esi
c0012cca:	74 1e                	je     c0012cea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ccc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cd0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cd4:	89 d1                	mov    ecx,edx
c0012cd6:	09 c1                	or     ecx,eax
c0012cd8:	74 10                	je     c0012cea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cda:	83 ec 0c             	sub    esp,0xc
c0012cdd:	57                   	push   edi
c0012cde:	56                   	push   esi
c0012cdf:	52                   	push   edx
c0012ce0:	50                   	push   eax
c0012ce1:	53                   	push   ebx
c0012ce2:	e8 db fc ff ff       	call   c00129c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012ce7:	83 c4 20             	add    esp,0x20
c0012cea:	45                   	inc    ebp
c0012ceb:	83 fd 04             	cmp    ebp,0x4
c0012cee:	75 ce                	jne    c0012cbe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cf0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	5d                   	pop    ebp
c0012cfa:	c3                   	ret    
c0012cfb:	90                   	nop

c0012cfc <Timer::Timer(char const*)>:
c0012cfc:	83 ec 0c             	sub    esp,0xc
c0012cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d03:	83 ec 08             	sub    esp,0x8
c0012d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0a:	50                   	push   eax
c0012d0b:	e8 00 db ff ff       	call   c0010810 <Device::Device(char const*)>
c0012d10:	83 c4 10             	add    esp,0x10
c0012d13:	ba f0 21 02 c0       	mov    edx,0xc00221f0
c0012d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1c:	89 10                	mov    DWORD PTR [eax],edx
c0012d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d22:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d2c:	90                   	nop
c0012d2d:	83 c4 0c             	add    esp,0xc
c0012d30:	c3                   	ret    
c0012d31:	90                   	nop

c0012d32 <Timer::~Timer()>:
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ba f0 21 02 c0       	mov    edx,0xc00221f0
c0012d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3e:	89 10                	mov    DWORD PTR [eax],edx
c0012d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	50                   	push   eax
c0012d48:	e8 79 d7 ff ff       	call   c00104c6 <Device::~Device()>
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	90                   	nop
c0012d51:	83 c4 0c             	add    esp,0xc
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop

c0012d56 <Timer::~Timer()>:
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	83 ec 0c             	sub    esp,0xc
c0012d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d60:	e8 cd ff ff ff       	call   c0012d32 <Timer::~Timer()>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	83 ec 08             	sub    esp,0x8
c0012d6b:	68 5c 01 00 00       	push   0x15c
c0012d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d74:	e8 6c c3 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	83 c4 0c             	add    esp,0xc
c0012d7f:	c3                   	ret    

c0012d80 <Timer::read()>:
c0012d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d84:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d8a:	c3                   	ret    

c0012d8b <timerHandler(unsigned long long)>:
c0012d8b:	55                   	push   ebp
c0012d8c:	57                   	push   edi
c0012d8d:	56                   	push   esi
c0012d8e:	53                   	push   ebx
c0012d8f:	83 ec 0c             	sub    esp,0xc
c0012d92:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d96:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012d9a:	01 35 f0 4d 02 c0    	add    DWORD PTR ds:0xc0024df0,esi
c0012da0:	11 3d f4 4d 02 c0    	adc    DWORD PTR ds:0xc0024df4,edi
c0012da6:	80 3d 8d 47 02 c0 00 	cmp    BYTE PTR ds:0xc002478d,0x0
c0012dad:	0f 84 07 01 00 00    	je     c0012eba <timerHandler(unsigned long long)+0x12f>
c0012db3:	e8 b2 5c 00 00       	call   c0018a6a <lockStuff()>
c0012db8:	83 ec 0c             	sub    esp,0xc
c0012dbb:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012dc0:	e8 0b ce 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dc5:	c7 04 24 bc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bbc
c0012dcc:	89 c3                	mov    ebx,eax
c0012dce:	e8 05 ce 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	84 c0                	test   al,al
c0012dd8:	74 60                	je     c0012e3a <timerHandler(unsigned long long)+0xaf>
c0012dda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012de0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012de3:	85 c0                	test   eax,eax
c0012de5:	0f 85 91 00 00 00    	jne    c0012e7c <timerHandler(unsigned long long)+0xf1>
c0012deb:	e9 be 00 00 00       	jmp    c0012eae <timerHandler(unsigned long long)+0x123>
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	55                   	push   ebp
c0012df4:	e8 6e 62 00 00       	call   c0019067 <unblockTask(ThreadControlBlock*)>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	39 eb                	cmp    ebx,ebp
c0012dfe:	75 12                	jne    c0012e12 <timerHandler(unsigned long long)+0x87>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e08:	e8 c3 cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e0d:	89 c3                	mov    ebx,eax
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	83 ec 0c             	sub    esp,0xc
c0012e15:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e1a:	e8 b9 cd 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e1f:	83 c4 10             	add    esp,0x10
c0012e22:	84 c0                	test   al,al
c0012e24:	75 b4                	jne    c0012dda <timerHandler(unsigned long long)+0x4f>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e2e:	e8 9d cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e33:	83 c4 10             	add    esp,0x10
c0012e36:	39 d8                	cmp    eax,ebx
c0012e38:	74 a0                	je     c0012dda <timerHandler(unsigned long long)+0x4f>
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e42:	e8 89 cd 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e47:	89 c5                	mov    ebp,eax
c0012e49:	c7 04 24 bc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bbc
c0012e50:	e8 9f cd 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e55:	83 c4 10             	add    esp,0x10
c0012e58:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e5b:	a1 f4 4d 02 c0       	mov    eax,ds:0xc0024df4
c0012e60:	39 15 f0 4d 02 c0    	cmp    DWORD PTR ds:0xc0024df0,edx
c0012e66:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e69:	19 c8                	sbb    eax,ecx
c0012e6b:	73 83                	jae    c0012df0 <timerHandler(unsigned long long)+0x65>
c0012e6d:	50                   	push   eax
c0012e6e:	50                   	push   eax
c0012e6f:	55                   	push   ebp
c0012e70:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012e75:	e8 28 ce 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e7a:	eb 93                	jmp    c0012e0f <timerHandler(unsigned long long)+0x84>
c0012e7c:	80 3d 8c 47 02 c0 00 	cmp    BYTE PTR ds:0xc002478c,0x0
c0012e83:	74 29                	je     c0012eae <timerHandler(unsigned long long)+0x123>
c0012e85:	39 c6                	cmp    esi,eax
c0012e87:	bb 00 00 00 00       	mov    ebx,0x0
c0012e8c:	19 df                	sbb    edi,ebx
c0012e8e:	72 19                	jb     c0012ea9 <timerHandler(unsigned long long)+0x11e>
c0012e90:	e8 ae 5b 00 00       	call   c0018a43 <lockScheduler()>
c0012e95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e9a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012e9d:	e8 ea 5e 00 00       	call   c0018d8c <schedule()>
c0012ea2:	e8 9e 5b 00 00       	call   c0018a45 <unlockScheduler()>
c0012ea7:	eb 05                	jmp    c0012eae <timerHandler(unsigned long long)+0x123>
c0012ea9:	29 f0                	sub    eax,esi
c0012eab:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012eae:	83 c4 0c             	add    esp,0xc
c0012eb1:	5b                   	pop    ebx
c0012eb2:	5e                   	pop    esi
c0012eb3:	5f                   	pop    edi
c0012eb4:	5d                   	pop    ebp
c0012eb5:	e9 57 5f 00 00       	jmp    c0018e11 <unlockStuff()>
c0012eba:	83 c4 0c             	add    esp,0xc
c0012ebd:	5b                   	pop    ebx
c0012ebe:	5e                   	pop    esi
c0012ebf:	5f                   	pop    edi
c0012ec0:	5d                   	pop    ebp
c0012ec1:	c3                   	ret    

c0012ec2 <setupTimer(int)>:
c0012ec2:	57                   	push   edi
c0012ec3:	56                   	push   esi
c0012ec4:	53                   	push   ebx
c0012ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ec9:	e8 fd 19 00 00       	call   c00148cb <getCPUNumber()>
c0012ece:	85 c0                	test   eax,eax
c0012ed0:	74 32                	je     c0012f04 <setupTimer(int)+0x42>
c0012ed2:	83 ec 0c             	sub    esp,0xc
c0012ed5:	68 60 01 00 00       	push   0x160
c0012eda:	e8 f7 c1 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0012edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee2:	89 c3                	mov    ebx,eax
c0012ee4:	e8 a7 c0 00 00       	call   c001ef90 <APICTimer::APICTimer()>
c0012ee9:	6a 00                	push   0x0
c0012eeb:	6a 00                	push   0x0
c0012eed:	56                   	push   esi
c0012eee:	53                   	push   ebx
c0012eef:	e8 96 bf 00 00       	call   c001ee8a <APICTimer::open(int, int, void*)>
c0012ef4:	83 c4 20             	add    esp,0x20
c0012ef7:	e8 d2 19 00 00       	call   c00148ce <thisCPU()>
c0012efc:	56                   	push   esi
c0012efd:	56                   	push   esi
c0012efe:	53                   	push   ebx
c0012eff:	e9 96 00 00 00       	jmp    c0012f9a <setupTimer(int)+0xd8>
c0012f04:	e8 c5 19 00 00       	call   c00148ce <thisCPU()>
c0012f09:	83 ec 0c             	sub    esp,0xc
c0012f0c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f12:	e8 eb d9 ff ff       	call   c0010902 <Device::getName()>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f1d:	0f 85 87 00 00 00    	jne    c0012faa <setupTimer(int)+0xe8>
c0012f23:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0012f28:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f2f:	74 79                	je     c0012faa <setupTimer(int)+0xe8>
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	68 5c 01 00 00       	push   0x15c
c0012f39:	e8 98 c1 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0012f3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f41:	89 c3                	mov    ebx,eax
c0012f43:	e8 a4 c1 00 00       	call   c001f0ec <PIT::PIT()>
c0012f48:	59                   	pop    ecx
c0012f49:	5f                   	pop    edi
c0012f4a:	53                   	push   ebx
c0012f4b:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0012f51:	e8 ca d6 ff ff       	call   c0010620 <Device::addChild(Device*)>
c0012f56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f58:	6a 00                	push   0x0
c0012f5a:	6a 00                	push   0x0
c0012f5c:	56                   	push   esi
c0012f5d:	53                   	push   ebx
c0012f5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f61:	83 c4 14             	add    esp,0x14
c0012f64:	68 60 01 00 00       	push   0x160
c0012f69:	e8 68 c1 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0012f6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f71:	89 c7                	mov    edi,eax
c0012f73:	e8 18 c0 00 00       	call   c001ef90 <APICTimer::APICTimer()>
c0012f78:	6a 00                	push   0x0
c0012f7a:	6a 00                	push   0x0
c0012f7c:	56                   	push   esi
c0012f7d:	57                   	push   edi
c0012f7e:	e8 07 bf 00 00       	call   c001ee8a <APICTimer::open(int, int, void*)>
c0012f83:	83 c4 20             	add    esp,0x20
c0012f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f88:	6a 00                	push   0x0
c0012f8a:	6a 00                	push   0x0
c0012f8c:	6a 00                	push   0x0
c0012f8e:	53                   	push   ebx
c0012f8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f92:	e8 37 19 00 00       	call   c00148ce <thisCPU()>
c0012f97:	5a                   	pop    edx
c0012f98:	59                   	pop    ecx
c0012f99:	57                   	push   edi
c0012f9a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fa0:	e8 7b d6 ff ff       	call   c0010620 <Device::addChild(Device*)>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	eb 33                	jmp    c0012fdd <setupTimer(int)+0x11b>
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	68 5c 01 00 00       	push   0x15c
c0012fb2:	e8 1f c1 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0012fb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fba:	89 c3                	mov    ebx,eax
c0012fbc:	e8 2b c1 00 00       	call   c001f0ec <PIT::PIT()>
c0012fc1:	58                   	pop    eax
c0012fc2:	5a                   	pop    edx
c0012fc3:	53                   	push   ebx
c0012fc4:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0012fca:	e8 51 d6 ff ff       	call   c0010620 <Device::addChild(Device*)>
c0012fcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fd1:	6a 00                	push   0x0
c0012fd3:	6a 00                	push   0x0
c0012fd5:	56                   	push   esi
c0012fd6:	53                   	push   ebx
c0012fd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fda:	83 c4 20             	add    esp,0x20
c0012fdd:	89 d8                	mov    eax,ebx
c0012fdf:	5b                   	pop    ebx
c0012fe0:	5e                   	pop    esi
c0012fe1:	5f                   	pop    edi
c0012fe2:	c3                   	ret    
c0012fe3:	90                   	nop

c0012fe4 <VCache::VCache(PhysicalDisk*)>:
c0012fe4:	53                   	push   ebx
c0012fe5:	83 ec 08             	sub    esp,0x8
c0012fe8:	ba 20 22 02 c0       	mov    edx,0xc0022220
c0012fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff1:	89 10                	mov    DWORD PTR [eax],edx
c0012ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013002:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0013009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0013014:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001301b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0013026:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001302d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013031:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013040:	83 ec 0c             	sub    esp,0xc
c0013043:	6a 10                	push   0x10
c0013045:	e8 8c c0 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001304a:	83 c4 10             	add    esp,0x10
c001304d:	89 c3                	mov    ebx,eax
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	53                   	push   ebx
c0013053:	e8 0e 5b 00 00       	call   c0018b66 <Mutex::Mutex()>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013066:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001306a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001306d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013071:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013078:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001307c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0013082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013086:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001308d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0013093:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013099:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001309d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130a0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130b5:	c1 e0 06             	shl    eax,0x6
c00130b8:	83 ec 0c             	sub    esp,0xc
c00130bb:	50                   	push   eax
c00130bc:	e8 18 8f ff ff       	call   c000bfd9 <malloc>
c00130c1:	83 c4 10             	add    esp,0x10
c00130c4:	89 c2                	mov    edx,eax
c00130c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130cd:	90                   	nop
c00130ce:	83 c4 08             	add    esp,0x8
c00130d1:	5b                   	pop    ebx
c00130d2:	c3                   	ret    
c00130d3:	90                   	nop

c00130d4 <VCache::writeWriteBuffer()>:
c00130d4:	53                   	push   ebx
c00130d5:	83 ec 14             	sub    esp,0x14
c00130d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130df:	8b 10                	mov    edx,DWORD PTR [eax]
c00130e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130ed:	50                   	push   eax
c00130ee:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130f1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00130f8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00130ff:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013103:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001310a:	83 c4 28             	add    esp,0x28
c001310d:	5b                   	pop    ebx
c001310e:	c3                   	ret    
c001310f:	90                   	nop

c0013110 <VCache::~VCache()>:
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	ba 20 22 02 c0       	mov    edx,0xc0022220
c0013118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311c:	89 10                	mov    DWORD PTR [eax],edx
c001311e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013122:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013125:	84 c0                	test   al,al
c0013127:	74 0f                	je     c0013138 <VCache::~VCache()+0x28>
c0013129:	83 ec 0c             	sub    esp,0xc
c001312c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013130:	e8 9f ff ff ff       	call   c00130d4 <VCache::writeWriteBuffer()>
c0013135:	83 c4 10             	add    esp,0x10
c0013138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001313f:	83 ec 0c             	sub    esp,0xc
c0013142:	50                   	push   eax
c0013143:	e8 a1 8e ff ff       	call   c000bfe9 <free>
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	90                   	nop
c001314c:	83 c4 0c             	add    esp,0xc
c001314f:	c3                   	ret    

c0013150 <VCache::~VCache()>:
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	83 ec 0c             	sub    esp,0xc
c0013156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001315a:	e8 b1 ff ff ff       	call   c0013110 <VCache::~VCache()>
c001315f:	83 c4 10             	add    esp,0x10
c0013162:	83 ec 08             	sub    esp,0x8
c0013165:	6a 30                	push   0x30
c0013167:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316b:	e8 75 bf ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	83 c4 0c             	add    esp,0xc
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <VCache::write(unsigned long long, int, void*)>:
c0013178:	55                   	push   ebp
c0013179:	57                   	push   edi
c001317a:	56                   	push   esi
c001317b:	53                   	push   ebx
c001317c:	83 ec 28             	sub    esp,0x28
c001317f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013183:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013187:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001318b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001318f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013192:	e8 3d 5e 00 00       	call   c0018fd4 <Semaphore::acquire()>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001319e:	74 66                	je     c0013206 <VCache::write(unsigned long long, int, void*)+0x8e>
c00131a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131a3:	99                   	cdq    
c00131a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131a8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131ab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131ae:	89 c1                	mov    ecx,eax
c00131b0:	31 f1                	xor    ecx,esi
c00131b2:	89 d0                	mov    eax,edx
c00131b4:	31 f8                	xor    eax,edi
c00131b6:	89 ca                	mov    edx,ecx
c00131b8:	09 c2                	or     edx,eax
c00131ba:	75 3e                	jne    c00131fa <VCache::write(unsigned long long, int, void*)+0x82>
c00131bc:	83 fd 01             	cmp    ebp,0x1
c00131bf:	75 39                	jne    c00131fa <VCache::write(unsigned long long, int, void*)+0x82>
c00131c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131ca:	51                   	push   ecx
c00131cb:	50                   	push   eax
c00131cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131d0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131d4:	0f af c8             	imul   ecx,eax
c00131d7:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131da:	51                   	push   ecx
c00131db:	e8 a4 d4 fe ff       	call   c0000684 <memcpy>
c00131e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	40                   	inc    eax
c00131e7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131ea:	83 f8 40             	cmp    eax,0x40
c00131ed:	75 57                	jne    c0013246 <VCache::write(unsigned long long, int, void*)+0xce>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	53                   	push   ebx
c00131f3:	e8 dc fe ff ff       	call   c00130d4 <VCache::writeWriteBuffer()>
c00131f8:	eb 34                	jmp    c001322e <VCache::write(unsigned long long, int, void*)+0xb6>
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	53                   	push   ebx
c00131fe:	e8 d1 fe ff ff       	call   c00130d4 <VCache::writeWriteBuffer()>
c0013203:	83 c4 10             	add    esp,0x10
c0013206:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013209:	83 fd 3f             	cmp    ebp,0x3f
c001320c:	7f 25                	jg     c0013233 <VCache::write(unsigned long long, int, void*)+0xbb>
c001320e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013211:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013214:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013217:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001321b:	52                   	push   edx
c001321c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013222:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013226:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013229:	e8 56 d4 fe ff       	call   c0000684 <memcpy>
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	eb 13                	jmp    c0013246 <VCache::write(unsigned long long, int, void*)+0xce>
c0013233:	83 ec 0c             	sub    esp,0xc
c0013236:	8b 10                	mov    edx,DWORD PTR [eax]
c0013238:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001323c:	55                   	push   ebp
c001323d:	57                   	push   edi
c001323e:	56                   	push   esi
c001323f:	50                   	push   eax
c0013240:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013243:	83 c4 20             	add    esp,0x20
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001324c:	e8 0f 63 00 00       	call   c0019560 <Semaphore::release()>
c0013251:	83 c4 2c             	add    esp,0x2c
c0013254:	5b                   	pop    ebx
c0013255:	31 c0                	xor    eax,eax
c0013257:	5e                   	pop    esi
c0013258:	5f                   	pop    edi
c0013259:	5d                   	pop    ebp
c001325a:	c3                   	ret    
c001325b:	90                   	nop

c001325c <VCache::read(unsigned long long, int, void*)>:
c001325c:	57                   	push   edi
c001325d:	56                   	push   esi
c001325e:	53                   	push   ebx
c001325f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013263:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013267:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001326b:	83 ec 0c             	sub    esp,0xc
c001326e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013271:	e8 5e 5d 00 00       	call   c0018fd4 <Semaphore::acquire()>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001327d:	74 0c                	je     c001328b <VCache::read(unsigned long long, int, void*)+0x2f>
c001327f:	83 ec 0c             	sub    esp,0xc
c0013282:	53                   	push   ebx
c0013283:	e8 4c fe ff ff       	call   c00130d4 <VCache::writeWriteBuffer()>
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	8b 10                	mov    edx,DWORD PTR [eax]
c0013293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001329b:	57                   	push   edi
c001329c:	56                   	push   esi
c001329d:	50                   	push   eax
c001329e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132a1:	83 c4 14             	add    esp,0x14
c00132a4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132a7:	e8 b4 62 00 00       	call   c0019560 <Semaphore::release()>
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	5b                   	pop    ebx
c00132b0:	31 c0                	xor    eax,eax
c00132b2:	5e                   	pop    esi
c00132b3:	5f                   	pop    edi
c00132b4:	c3                   	ret    
c00132b5:	90                   	nop

c00132b6 <Video::putrect(int, int, int, int, unsigned int)>:
c00132b6:	55                   	push   ebp
c00132b7:	57                   	push   edi
c00132b8:	56                   	push   esi
c00132b9:	53                   	push   ebx
c00132ba:	83 ec 1c             	sub    esp,0x1c
c00132bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132c9:	01 e8                	add    eax,ebp
c00132cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132d7:	01 df                	add    edi,ebx
c00132d9:	39 fb                	cmp    ebx,edi
c00132db:	7d 1b                	jge    c00132f8 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132dd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132e1:	7d 12                	jge    c00132f5 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132e3:	8b 16                	mov    edx,DWORD PTR [esi]
c00132e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132e9:	53                   	push   ebx
c00132ea:	55                   	push   ebp
c00132eb:	45                   	inc    ebp
c00132ec:	56                   	push   esi
c00132ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	eb e8                	jmp    c00132dd <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132f5:	43                   	inc    ebx
c00132f6:	eb e1                	jmp    c00132d9 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00132f8:	83 c4 1c             	add    esp,0x1c
c00132fb:	5b                   	pop    ebx
c00132fc:	5e                   	pop    esi
c00132fd:	5f                   	pop    edi
c00132fe:	5d                   	pop    ebp
c00132ff:	c3                   	ret    

c0013300 <Video::blit(unsigned int*, int, int, int, int)>:
c0013300:	55                   	push   ebp
c0013301:	57                   	push   edi
c0013302:	56                   	push   esi
c0013303:	53                   	push   ebx
c0013304:	83 ec 1c             	sub    esp,0x1c
c0013307:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001330b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001330f:	85 c0                	test   eax,eax
c0013311:	79 02                	jns    c0013315 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013313:	31 c0                	xor    eax,eax
c0013315:	c1 e0 02             	shl    eax,0x2
c0013318:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001331c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013320:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013324:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013328:	39 d8                	cmp    eax,ebx
c001332a:	7e 49                	jle    c0013375 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001332c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013332:	7c 41                	jl     c0013375 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013334:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013338:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001333c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013340:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013344:	39 f9                	cmp    ecx,edi
c0013346:	7e 22                	jle    c001336a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013348:	83 c5 04             	add    ebp,0x4
c001334b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013351:	7c 14                	jl     c0013367 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013353:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013355:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013358:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001335c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013360:	56                   	push   esi
c0013361:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	47                   	inc    edi
c0013368:	eb d2                	jmp    c001333c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001336a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001336e:	43                   	inc    ebx
c001336f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013373:	eb ab                	jmp    c0013320 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013375:	83 c4 1c             	add    esp,0x1c
c0013378:	5b                   	pop    ebx
c0013379:	5e                   	pop    esi
c001337a:	5f                   	pop    edi
c001337b:	5d                   	pop    ebp
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <Video::clearScreen(unsigned int)>:
c001337e:	57                   	push   edi
c001337f:	56                   	push   esi
c0013380:	53                   	push   ebx
c0013381:	31 db                	xor    ebx,ebx
c0013383:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013387:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001338d:	7e 1f                	jle    c00133ae <Video::clearScreen(unsigned int)+0x30>
c001338f:	31 ff                	xor    edi,edi
c0013391:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013397:	7e 12                	jle    c00133ab <Video::clearScreen(unsigned int)+0x2d>
c0013399:	8b 06                	mov    eax,DWORD PTR [esi]
c001339b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001339f:	53                   	push   ebx
c00133a0:	57                   	push   edi
c00133a1:	47                   	inc    edi
c00133a2:	56                   	push   esi
c00133a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	eb e6                	jmp    c0013391 <Video::clearScreen(unsigned int)+0x13>
c00133ab:	43                   	inc    ebx
c00133ac:	eb d9                	jmp    c0013387 <Video::clearScreen(unsigned int)+0x9>
c00133ae:	5b                   	pop    ebx
c00133af:	5e                   	pop    esi
c00133b0:	5f                   	pop    edi
c00133b1:	c3                   	ret    

c00133b2 <Video::putpixel(int, int, unsigned int)>:
c00133b2:	c7 44 24 04 28 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022228
c00133ba:	e9 4c be ff ff       	jmp    c000f20b <Dbg::kprintf(char const*, ...)>
c00133bf:	90                   	nop

c00133c0 <Video::Video(char const*)>:
c00133c0:	83 ec 0c             	sub    esp,0xc
c00133c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c7:	83 ec 08             	sub    esp,0x8
c00133ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ce:	50                   	push   eax
c00133cf:	e8 3c d4 ff ff       	call   c0010810 <Device::Device(char const*)>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	ba 40 22 02 c0       	mov    edx,0xc0022240
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	89 10                	mov    DWORD PTR [eax],edx
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133f0:	90                   	nop
c00133f1:	83 c4 0c             	add    esp,0xc
c00133f4:	c3                   	ret    
c00133f5:	90                   	nop

c00133f6 <Video::~Video()>:
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	ba 40 22 02 c0       	mov    edx,0xc0022240
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	89 10                	mov    DWORD PTR [eax],edx
c0013404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	50                   	push   eax
c001340c:	e8 b5 d0 ff ff       	call   c00104c6 <Device::~Device()>
c0013411:	83 c4 10             	add    esp,0x10
c0013414:	90                   	nop
c0013415:	83 c4 0c             	add    esp,0xc
c0013418:	c3                   	ret    
c0013419:	90                   	nop

c001341a <Video::~Video()>:
c001341a:	83 ec 0c             	sub    esp,0xc
c001341d:	83 ec 0c             	sub    esp,0xc
c0013420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013424:	e8 cd ff ff ff       	call   c00133f6 <Video::~Video()>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	83 ec 08             	sub    esp,0x8
c001342f:	68 64 01 00 00       	push   0x164
c0013434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013438:	e8 a8 bc ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	83 c4 0c             	add    esp,0xc
c0013443:	c3                   	ret    

c0013444 <Video::isMonochrome()>:
c0013444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013448:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001344e:	c3                   	ret    
c001344f:	90                   	nop

c0013450 <Video::getWidth()>:
c0013450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013454:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001345a:	c3                   	ret    
c001345b:	90                   	nop

c001345c <Video::getHeight()>:
c001345c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013460:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013468:	55                   	push   ebp
c0013469:	57                   	push   edi
c001346a:	56                   	push   esi
c001346b:	53                   	push   ebx
c001346c:	83 ec 2c             	sub    esp,0x2c
c001346f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013473:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013477:	83 f8 01             	cmp    eax,0x1
c001347a:	19 c9                	sbb    ecx,ecx
c001347c:	31 db                	xor    ebx,ebx
c001347e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013482:	89 cd                	mov    ebp,ecx
c0013484:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001348c:	f7 d5                	not    ebp
c001348e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0013494:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013498:	01 d8                	add    eax,ebx
c001349a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001349e:	56                   	push   esi
c001349f:	e8 b8 ff ff ff       	call   c001345c <Video::getHeight()>
c00134a4:	59                   	pop    ecx
c00134a5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134a9:	7e 70                	jle    c001351b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134b3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134be:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c9:	89 f8                	mov    eax,edi
c00134cb:	83 c0 20             	add    eax,0x20
c00134ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d2:	56                   	push   esi
c00134d3:	e8 78 ff ff ff       	call   c0013450 <Video::getWidth()>
c00134d8:	5a                   	pop    edx
c00134d9:	39 c7                	cmp    edi,eax
c00134db:	7d 34                	jge    c0013511 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134dd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134e2:	74 05                	je     c00134e9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00134e6:	55                   	push   ebp
c00134e7:	eb 0d                	jmp    c00134f6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134e9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134ee:	74 12                	je     c0013502 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00134f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134fa:	57                   	push   edi
c00134fb:	56                   	push   esi
c00134fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	47                   	inc    edi
c0013503:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013507:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001350b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001350f:	75 c1                	jne    c00134d2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013511:	43                   	inc    ebx
c0013512:	83 fb 20             	cmp    ebx,0x20
c0013515:	0f 85 79 ff ff ff    	jne    c0013494 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001351b:	83 c4 2c             	add    esp,0x2c
c001351e:	5b                   	pop    ebx
c001351f:	5e                   	pop    esi
c0013520:	5f                   	pop    edi
c0013521:	5d                   	pop    ebp
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <ACPI::close(int, int, void*)>:
c0013524:	83 ec 1c             	sub    esp,0x1c
c0013527:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001352f:	74 0a                	je     c001353b <ACPI::close(int, int, void*)+0x17>
c0013531:	b8 00 00 00 00       	mov    eax,0x0
c0013536:	e9 9e 00 00 00       	jmp    c00135d9 <ACPI::close(int, int, void*)+0xb5>
c001353b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013540:	75 37                	jne    c0013579 <ACPI::close(int, int, void*)+0x55>
c0013542:	83 ec 0c             	sub    esp,0xc
c0013545:	68 78 22 02 c0       	push   0xc0022278
c001354a:	e8 bc bc ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	a1 08 4e 02 c0       	mov    eax,ds:0xc0024e08
c0013557:	85 c0                	test   eax,eax
c0013559:	74 07                	je     c0013562 <ACPI::close(int, int, void*)+0x3e>
c001355b:	a1 08 4e 02 c0       	mov    eax,ds:0xc0024e08
c0013560:	ff d0                	call   eax
c0013562:	83 ec 0c             	sub    esp,0xc
c0013565:	68 4c 23 02 c0       	push   0xc002234c
c001356a:	e8 cb 24 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013577:	eb 60                	jmp    c00135d9 <ACPI::close(int, int, void*)+0xb5>
c0013579:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001357e:	75 54                	jne    c00135d4 <ACPI::close(int, int, void*)+0xb0>
c0013580:	a1 04 4e 02 c0       	mov    eax,ds:0xc0024e04
c0013585:	85 c0                	test   eax,eax
c0013587:	74 07                	je     c0013590 <ACPI::close(int, int, void*)+0x6c>
c0013589:	a1 04 4e 02 c0       	mov    eax,ds:0xc0024e04
c001358e:	ff d0                	call   eax
c0013590:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0013595:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013599:	25 ff 00 00 00       	and    eax,0xff
c001359e:	83 e0 02             	and    eax,0x2
c00135a1:	74 1c                	je     c00135bf <ACPI::close(int, int, void*)+0x9b>
c00135a3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135ae:	89 c2                	mov    edx,eax
c00135b0:	ec                   	in     al,dx
c00135b1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135b5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135bd:	eb d6                	jmp    c0013595 <ACPI::close(int, int, void*)+0x71>
c00135bf:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135c6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135cb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135d3:	ee                   	out    dx,al
c00135d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135d9:	83 c4 1c             	add    esp,0x1c
c00135dc:	c3                   	ret    

c00135dd <findRSDP()>:
c00135dd:	83 ec 1c             	sub    esp,0x1c
c00135e0:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c00135e5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135eb:	83 e0 04             	and    eax,0x4
c00135ee:	84 c0                	test   al,al
c00135f0:	75 07                	jne    c00135f9 <findRSDP()+0x1c>
c00135f2:	b8 00 00 00 00       	mov    eax,0x0
c00135f7:	eb 6a                	jmp    c0013663 <findRSDP()+0x86>
c00135f9:	a1 d0 47 02 c0       	mov    eax,ds:0xc00247d0
c00135fe:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013603:	7f 1b                	jg     c0013620 <findRSDP()+0x43>
c0013605:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001360a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013610:	83 e2 fb             	and    edx,0xfffffffb
c0013613:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013619:	b8 00 00 00 00       	mov    eax,0x0
c001361e:	eb 43                	jmp    c0013663 <findRSDP()+0x86>
c0013620:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013628:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013630:	77 2c                	ja     c001365e <findRSDP()+0x81>
c0013632:	83 ec 04             	sub    esp,0x4
c0013635:	6a 08                	push   0x8
c0013637:	68 85 22 02 c0       	push   0xc0022285
c001363c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013640:	e8 dc cf fe ff       	call   c0000621 <memcmp>
c0013645:	83 c4 10             	add    esp,0x10
c0013648:	85 c0                	test   eax,eax
c001364a:	0f 94 c0             	sete   al
c001364d:	84 c0                	test   al,al
c001364f:	74 06                	je     c0013657 <findRSDP()+0x7a>
c0013651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013655:	eb 0c                	jmp    c0013663 <findRSDP()+0x86>
c0013657:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001365c:	eb ca                	jmp    c0013628 <findRSDP()+0x4b>
c001365e:	b8 00 00 00 00       	mov    eax,0x0
c0013663:	83 c4 1c             	add    esp,0x1c
c0013666:	c3                   	ret    

c0013667 <loadACPITables(unsigned char*)>:
c0013667:	56                   	push   esi
c0013668:	53                   	push   ebx
c0013669:	83 ec 44             	sub    esp,0x44
c001366c:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013671:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013677:	83 e0 04             	and    eax,0x4
c001367a:	84 c0                	test   al,al
c001367c:	0f 84 05 02 00 00    	je     c0013887 <loadACPITables(unsigned char*)+0x220>
c0013682:	a0 20 50 02 c0       	mov    al,ds:0xc0025020
c0013687:	84 c0                	test   al,al
c0013689:	74 75                	je     c0013700 <loadACPITables(unsigned char*)+0x99>
c001368b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001368f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013697:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001369a:	83 e8 24             	sub    eax,0x24
c001369d:	c1 e8 03             	shr    eax,0x3
c00136a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136a4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136b0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136b4:	0f 8d b2 00 00 00    	jge    c001376c <loadACPITables(unsigned char*)+0x105>
c00136ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136be:	83 c0 24             	add    eax,0x24
c00136c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136d1:	c1 e0 03             	shl    eax,0x3
c00136d4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136df:	8b 00                	mov    eax,DWORD PTR [eax]
c00136e1:	89 c1                	mov    ecx,eax
c00136e3:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c00136e8:	8d 50 01             	lea    edx,[eax+0x1]
c00136eb:	89 15 0c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e0c,edx
c00136f1:	89 ca                	mov    edx,ecx
c00136f3:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c00136fa:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00136fe:	eb ac                	jmp    c00136ac <loadACPITables(unsigned char*)+0x45>
c0013700:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013704:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001370c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001370f:	83 e8 24             	sub    eax,0x24
c0013712:	c1 e8 02             	shr    eax,0x2
c0013715:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013719:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013721:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013725:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013729:	7d 41                	jge    c001376c <loadACPITables(unsigned char*)+0x105>
c001372b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001372f:	83 c0 24             	add    eax,0x24
c0013732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001373a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001373e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013742:	c1 e0 02             	shl    eax,0x2
c0013745:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013749:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001374d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001374f:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c0013754:	8d 50 01             	lea    edx,[eax+0x1]
c0013757:	89 15 0c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e0c,edx
c001375d:	89 ca                	mov    edx,ecx
c001375f:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c0013766:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001376a:	eb b5                	jmp    c0013721 <loadACPITables(unsigned char*)+0xba>
c001376c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013774:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c0013779:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001377d:	0f 8d 05 01 00 00    	jge    c0013888 <loadACPITables(unsigned char*)+0x221>
c0013783:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013787:	8b 04 c5 24 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1dc]
c001378e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013796:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001379a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379e:	25 ff 0f 00 00       	and    eax,0xfff
c00137a3:	89 c6                	mov    esi,eax
c00137a5:	e8 d3 ab ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c00137aa:	89 c3                	mov    ebx,eax
c00137ac:	83 ec 0c             	sub    esp,0xc
c00137af:	6a 01                	push   0x1
c00137b1:	e8 3a aa ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c00137b6:	83 c4 10             	add    esp,0x10
c00137b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137bd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137c3:	83 ec 0c             	sub    esp,0xc
c00137c6:	6a 01                	push   0x1
c00137c8:	6a 01                	push   0x1
c00137ca:	50                   	push   eax
c00137cb:	52                   	push   edx
c00137cc:	53                   	push   ebx
c00137cd:	e8 dc b3 ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137d2:	83 c4 20             	add    esp,0x20
c00137d5:	09 f0                	or     eax,esi
c00137d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137df:	c1 e0 03             	shl    eax,0x3
c00137e2:	05 20 4e 02 c0       	add    eax,0xc0024e20
c00137e7:	83 ec 04             	sub    esp,0x4
c00137ea:	6a 04                	push   0x4
c00137ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f0:	50                   	push   eax
c00137f1:	e8 8e ce fe ff       	call   c0000684 <memcpy>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013808:	05 00 10 00 00       	add    eax,0x1000
c001380d:	c1 e8 0c             	shr    eax,0xc
c0013810:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013818:	89 04 24             	mov    DWORD PTR [esp],eax
c001381b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381f:	25 ff 0f 00 00       	and    eax,0xfff
c0013824:	89 c6                	mov    esi,eax
c0013826:	e8 52 ab ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c001382b:	89 c3                	mov    ebx,eax
c001382d:	83 ec 0c             	sub    esp,0xc
c0013830:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013834:	e8 b7 a9 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013840:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013846:	83 ec 0c             	sub    esp,0xc
c0013849:	6a 01                	push   0x1
c001384b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001384f:	50                   	push   eax
c0013850:	52                   	push   edx
c0013851:	53                   	push   ebx
c0013852:	e8 57 b3 ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013857:	83 c4 20             	add    esp,0x20
c001385a:	09 f0                	or     eax,esi
c001385c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013860:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013863:	83 ec 0c             	sub    esp,0xc
c0013866:	50                   	push   eax
c0013867:	e8 d1 ac ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c001386c:	83 c4 10             	add    esp,0x10
c001386f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013873:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013877:	89 14 c5 24 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1dc],edx
c001387e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013882:	e9 ed fe ff ff       	jmp    c0013774 <loadACPITables(unsigned char*)+0x10d>
c0013887:	90                   	nop
c0013888:	83 c4 44             	add    esp,0x44
c001388b:	5b                   	pop    ebx
c001388c:	5e                   	pop    esi
c001388d:	c3                   	ret    

c001388e <findRSDT(unsigned char*)>:
c001388e:	56                   	push   esi
c001388f:	53                   	push   ebx
c0013890:	83 ec 44             	sub    esp,0x44
c0013893:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013898:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001389e:	83 e0 04             	and    eax,0x4
c00138a1:	84 c0                	test   al,al
c00138a3:	75 0a                	jne    c00138af <findRSDT(unsigned char*)+0x21>
c00138a5:	b8 00 00 00 00       	mov    eax,0x0
c00138aa:	e9 f7 00 00 00       	jmp    c00139a6 <findRSDT(unsigned char*)+0x118>
c00138af:	83 ec 04             	sub    esp,0x4
c00138b2:	6a 24                	push   0x24
c00138b4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138bc:	50                   	push   eax
c00138bd:	e8 c2 cd fe ff       	call   c0000684 <memcpy>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138c9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138cd:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138dd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138ed:	25 ff 0f 00 00       	and    eax,0xfff
c00138f2:	89 c6                	mov    esi,eax
c00138f4:	e8 84 aa ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c00138f9:	89 c3                	mov    ebx,eax
c00138fb:	83 ec 0c             	sub    esp,0xc
c00138fe:	6a 02                	push   0x2
c0013900:	e8 eb a8 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c0013905:	83 c4 10             	add    esp,0x10
c0013908:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001390c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	6a 01                	push   0x1
c0013917:	6a 02                	push   0x2
c0013919:	50                   	push   eax
c001391a:	52                   	push   edx
c001391b:	53                   	push   ebx
c001391c:	e8 8d b2 ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013921:	83 c4 20             	add    esp,0x20
c0013924:	09 f0                	or     eax,esi
c0013926:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001392a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001392e:	25 ff 0f 00 00       	and    eax,0xfff
c0013933:	89 c6                	mov    esi,eax
c0013935:	e8 43 aa ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c001393a:	89 c3                	mov    ebx,eax
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	6a 02                	push   0x2
c0013941:	e8 aa a8 ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001394d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013953:	83 ec 0c             	sub    esp,0xc
c0013956:	6a 01                	push   0x1
c0013958:	6a 02                	push   0x2
c001395a:	50                   	push   eax
c001395b:	52                   	push   edx
c001395c:	53                   	push   ebx
c001395d:	e8 4c b2 ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013962:	83 c4 20             	add    esp,0x20
c0013965:	09 f0                	or     eax,esi
c0013967:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001396b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013970:	75 11                	jne    c0013983 <findRSDT(unsigned char*)+0xf5>
c0013972:	c6 05 20 50 02 c0 00 	mov    BYTE PTR ds:0xc0025020,0x0
c0013979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001397d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013981:	eb 1f                	jmp    c00139a2 <findRSDT(unsigned char*)+0x114>
c0013983:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013988:	75 11                	jne    c001399b <findRSDT(unsigned char*)+0x10d>
c001398a:	c6 05 20 50 02 c0 01 	mov    BYTE PTR ds:0xc0025020,0x1
c0013991:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013995:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013999:	eb 07                	jmp    c00139a2 <findRSDT(unsigned char*)+0x114>
c001399b:	b8 00 00 00 00       	mov    eax,0x0
c00139a0:	eb 04                	jmp    c00139a6 <findRSDT(unsigned char*)+0x118>
c00139a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139a6:	83 c4 44             	add    esp,0x44
c00139a9:	5b                   	pop    ebx
c00139aa:	5e                   	pop    esi
c00139ab:	c3                   	ret    

c00139ac <findDataTable(unsigned char*, char*)>:
c00139ac:	83 ec 1c             	sub    esp,0x1c
c00139af:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c00139b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139ba:	83 e0 04             	and    eax,0x4
c00139bd:	84 c0                	test   al,al
c00139bf:	75 07                	jne    c00139c8 <findDataTable(unsigned char*, char*)+0x1c>
c00139c1:	b8 00 00 00 00       	mov    eax,0x0
c00139c6:	eb 7c                	jmp    c0013a44 <findDataTable(unsigned char*, char*)+0x98>
c00139c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139d0:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c00139d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139d9:	7d 3a                	jge    c0013a15 <findDataTable(unsigned char*, char*)+0x69>
c00139db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139df:	c1 e0 03             	shl    eax,0x3
c00139e2:	05 20 4e 02 c0       	add    eax,0xc0024e20
c00139e7:	83 ec 04             	sub    esp,0x4
c00139ea:	6a 04                	push   0x4
c00139ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f0:	50                   	push   eax
c00139f1:	e8 2b cc fe ff       	call   c0000621 <memcmp>
c00139f6:	83 c4 10             	add    esp,0x10
c00139f9:	85 c0                	test   eax,eax
c00139fb:	0f 94 c0             	sete   al
c00139fe:	84 c0                	test   al,al
c0013a00:	74 0d                	je     c0013a0f <findDataTable(unsigned char*, char*)+0x63>
c0013a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a06:	8b 04 c5 24 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1dc]
c0013a0d:	eb 35                	jmp    c0013a44 <findDataTable(unsigned char*, char*)+0x98>
c0013a0f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a13:	eb bb                	jmp    c00139d0 <findDataTable(unsigned char*, char*)+0x24>
c0013a15:	a0 20 50 02 c0       	mov    al,ds:0xc0025020
c0013a1a:	84 c0                	test   al,al
c0013a1c:	74 07                	je     c0013a25 <findDataTable(unsigned char*, char*)+0x79>
c0013a1e:	b8 58 00 00 00       	mov    eax,0x58
c0013a23:	eb 05                	jmp    c0013a2a <findDataTable(unsigned char*, char*)+0x7e>
c0013a25:	b8 52 00 00 00       	mov    eax,0x52
c0013a2a:	83 ec 04             	sub    esp,0x4
c0013a2d:	50                   	push   eax
c0013a2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a32:	68 70 23 02 c0       	push   0xc0022370
c0013a37:	e8 cf b7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	b8 00 00 00 00       	mov    eax,0x0
c0013a44:	83 c4 1c             	add    esp,0x1c
c0013a47:	c3                   	ret    

c0013a48 <scanMADT()>:
c0013a48:	83 ec 2c             	sub    esp,0x2c
c0013a4b:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013a50:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a56:	83 e0 04             	and    eax,0x4
c0013a59:	84 c0                	test   al,al
c0013a5b:	0f 84 9a 03 00 00    	je     c0013dfb <scanMADT()+0x3b3>
c0013a61:	e8 77 fb ff ff       	call   c00135dd <findRSDP()>
c0013a66:	a3 2c 50 02 c0       	mov    ds:0xc002502c,eax
c0013a6b:	a1 2c 50 02 c0       	mov    eax,ds:0xc002502c
c0013a70:	85 c0                	test   eax,eax
c0013a72:	75 19                	jne    c0013a8d <scanMADT()+0x45>
c0013a74:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013a79:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a7f:	83 e2 fb             	and    edx,0xfffffffb
c0013a82:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a88:	e9 72 03 00 00       	jmp    c0013dff <scanMADT()+0x3b7>
c0013a8d:	a1 2c 50 02 c0       	mov    eax,ds:0xc002502c
c0013a92:	83 ec 0c             	sub    esp,0xc
c0013a95:	50                   	push   eax
c0013a96:	e8 f3 fd ff ff       	call   c001388e <findRSDT(unsigned char*)>
c0013a9b:	83 c4 10             	add    esp,0x10
c0013a9e:	a3 28 50 02 c0       	mov    ds:0xc0025028,eax
c0013aa3:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013aa8:	85 c0                	test   eax,eax
c0013aaa:	75 19                	jne    c0013ac5 <scanMADT()+0x7d>
c0013aac:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013ab1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013ab7:	83 e2 fb             	and    edx,0xfffffffb
c0013aba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ac0:	e9 3a 03 00 00       	jmp    c0013dff <scanMADT()+0x3b7>
c0013ac5:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	50                   	push   eax
c0013ace:	e8 94 fb ff ff       	call   c0013667 <loadACPITables(unsigned char*)>
c0013ad3:	83 c4 10             	add    esp,0x10
c0013ad6:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c0013adb:	83 ec 08             	sub    esp,0x8
c0013ade:	68 8e 22 02 c0       	push   0xc002228e
c0013ae3:	50                   	push   eax
c0013ae4:	e8 c3 fe ff ff       	call   c00139ac <findDataTable(unsigned char*, char*)>
c0013ae9:	83 c4 10             	add    esp,0x10
c0013aec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013af0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013af5:	75 19                	jne    c0013b10 <scanMADT()+0xc8>
c0013af7:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0013afc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b02:	83 e2 fe             	and    edx,0xfffffffe
c0013b05:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b0b:	e9 ef 02 00 00       	jmp    c0013dff <scanMADT()+0x3b7>
c0013b10:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b1f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b23:	0f 87 d6 02 00 00    	ja     c0013dff <scanMADT()+0x3b7>
c0013b29:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b31:	0f 87 c8 02 00 00    	ja     c0013dff <scanMADT()+0x3b7>
c0013b37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b43:	8d 50 01             	lea    edx,[eax+0x1]
c0013b46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b52:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b5a:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b69:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b6d:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b72:	0f 86 86 02 00 00    	jbe    c0013dfe <scanMADT()+0x3b6>
c0013b78:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b7d:	75 5b                	jne    c0013bda <scanMADT()+0x192>
c0013b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b83:	8d 50 01             	lea    edx,[eax+0x1]
c0013b86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b8a:	8a 15 60 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025160
c0013b90:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b96:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b9a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b9e:	88 82 a0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae60],al
c0013ba4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ba8:	8d 42 01             	lea    eax,[edx+0x1]
c0013bab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013baf:	a0 60 51 02 c0       	mov    al,ds:0xc0025160
c0013bb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bb7:	88 0d 60 51 02 c0    	mov    BYTE PTR ds:0xc0025160,cl
c0013bbd:	25 ff 00 00 00       	and    eax,0xff
c0013bc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bc6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bca:	88 90 80 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae80],dl
c0013bd0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bd5:	e9 0a 02 00 00       	jmp    c0013de4 <scanMADT()+0x39c>
c0013bda:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bdf:	0f 85 29 01 00 00    	jne    c0013d0e <scanMADT()+0x2c6>
c0013be5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be9:	8d 50 01             	lea    edx,[eax+0x1]
c0013bec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bf0:	8a 15 30 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025030
c0013bf6:	81 e2 ff 00 00 00    	and    edx,0xff
c0013bfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c00:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c04:	88 82 40 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafc0],al
c0013c0a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c16:	01 d0                	add    eax,edx
c0013c18:	83 c0 2c             	add    eax,0x2c
c0013c1b:	8a 00                	mov    al,BYTE PTR [eax]
c0013c1d:	31 d2                	xor    edx,edx
c0013c1f:	88 c2                	mov    dl,al
c0013c21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c25:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c2c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c30:	25 ff 00 00 00       	and    eax,0xff
c0013c35:	c1 e0 08             	shl    eax,0x8
c0013c38:	89 d1                	mov    ecx,edx
c0013c3a:	09 c1                	or     ecx,eax
c0013c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c40:	8d 50 02             	lea    edx,[eax+0x2]
c0013c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c4b:	25 ff 00 00 00       	and    eax,0xff
c0013c50:	c1 e0 10             	shl    eax,0x10
c0013c53:	09 c1                	or     ecx,eax
c0013c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c59:	8d 50 03             	lea    edx,[eax+0x3]
c0013c5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c60:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c64:	25 ff 00 00 00       	and    eax,0xff
c0013c69:	c1 e0 18             	shl    eax,0x18
c0013c6c:	09 c1                	or     ecx,eax
c0013c6e:	89 ca                	mov    edx,ecx
c0013c70:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013c75:	25 ff 00 00 00       	and    eax,0xff
c0013c7a:	89 14 85 60 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafa0],edx
c0013c81:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c8e:	01 d0                	add    eax,edx
c0013c90:	83 c0 2c             	add    eax,0x2c
c0013c93:	8a 00                	mov    al,BYTE PTR [eax]
c0013c95:	31 d2                	xor    edx,edx
c0013c97:	88 c2                	mov    dl,al
c0013c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ca0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013ca8:	25 ff 00 00 00       	and    eax,0xff
c0013cad:	c1 e0 08             	shl    eax,0x8
c0013cb0:	89 d1                	mov    ecx,edx
c0013cb2:	09 c1                	or     ecx,eax
c0013cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb8:	8d 50 02             	lea    edx,[eax+0x2]
c0013cbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cbf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cc3:	25 ff 00 00 00       	and    eax,0xff
c0013cc8:	c1 e0 10             	shl    eax,0x10
c0013ccb:	09 c1                	or     ecx,eax
c0013ccd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd1:	8d 50 03             	lea    edx,[eax+0x3]
c0013cd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cdc:	25 ff 00 00 00       	and    eax,0xff
c0013ce1:	c1 e0 18             	shl    eax,0x18
c0013ce4:	09 c1                	or     ecx,eax
c0013ce6:	89 ca                	mov    edx,ecx
c0013ce8:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013ced:	25 ff 00 00 00       	and    eax,0xff
c0013cf2:	89 14 85 e0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf20],edx
c0013cf9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cfe:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c0013d03:	40                   	inc    eax
c0013d04:	a2 30 50 02 c0       	mov    ds:0xc0025030,al
c0013d09:	e9 d6 00 00 00       	jmp    c0013de4 <scanMADT()+0x39c>
c0013d0e:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d13:	0f 85 b1 00 00 00    	jne    c0013dca <scanMADT()+0x382>
c0013d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1d:	8d 50 01             	lea    edx,[eax+0x1]
c0013d20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d28:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d2c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d34:	8d 50 01             	lea    edx,[eax+0x1]
c0013d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d3f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d43:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d4f:	01 d0                	add    eax,edx
c0013d51:	83 c0 2c             	add    eax,0x2c
c0013d54:	8a 00                	mov    al,BYTE PTR [eax]
c0013d56:	31 d2                	xor    edx,edx
c0013d58:	88 c2                	mov    dl,al
c0013d5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d5e:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d69:	25 ff 00 00 00       	and    eax,0xff
c0013d6e:	c1 e0 08             	shl    eax,0x8
c0013d71:	89 d1                	mov    ecx,edx
c0013d73:	09 c1                	or     ecx,eax
c0013d75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d79:	8d 50 02             	lea    edx,[eax+0x2]
c0013d7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d80:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d84:	25 ff 00 00 00       	and    eax,0xff
c0013d89:	c1 e0 10             	shl    eax,0x10
c0013d8c:	09 c1                	or     ecx,eax
c0013d8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d92:	8d 50 03             	lea    edx,[eax+0x3]
c0013d95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d99:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d9d:	25 ff 00 00 00       	and    eax,0xff
c0013da2:	c1 e0 18             	shl    eax,0x18
c0013da5:	09 c8                	or     eax,ecx
c0013da7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dab:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013db0:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013db5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013db9:	25 ff 00 00 00       	and    eax,0xff
c0013dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dc2:	88 90 e0 3e 02 c0    	mov    BYTE PTR [eax-0x3ffdc120],dl
c0013dc8:	eb 1a                	jmp    c0013de4 <scanMADT()+0x39c>
c0013dca:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dcf:	75 07                	jne    c0013dd8 <scanMADT()+0x390>
c0013dd1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dd6:	eb 0c                	jmp    c0013de4 <scanMADT()+0x39c>
c0013dd8:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013ddd:	75 05                	jne    c0013de4 <scanMADT()+0x39c>
c0013ddf:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013de4:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013de8:	31 d2                	xor    edx,edx
c0013dea:	88 c2                	mov    dl,al
c0013dec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df0:	01 d0                	add    eax,edx
c0013df2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013df6:	e9 1d fd ff ff       	jmp    c0013b18 <scanMADT()+0xd0>
c0013dfb:	90                   	nop
c0013dfc:	eb 01                	jmp    c0013dff <scanMADT()+0x3b7>
c0013dfe:	90                   	nop
c0013dff:	83 c4 2c             	add    esp,0x2c
c0013e02:	c3                   	ret    
c0013e03:	90                   	nop

c0013e04 <ACPI::ACPI()>:
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0b:	83 ec 08             	sub    esp,0x8
c0013e0e:	68 93 22 02 c0       	push   0xc0022293
c0013e13:	50                   	push   eax
c0013e14:	e8 f7 c9 ff ff       	call   c0010810 <Device::Device(char const*)>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c0013e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e25:	89 10                	mov    DWORD PTR [eax],edx
c0013e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e36:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e44:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e52:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e59:	e8 ea fb ff ff       	call   c0013a48 <scanMADT()>
c0013e5e:	90                   	nop
c0013e5f:	83 c4 0c             	add    esp,0xc
c0013e62:	c3                   	ret    
c0013e63:	90                   	nop

c0013e64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e64:	83 ec 2c             	sub    esp,0x2c
c0013e67:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e6f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e73:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e77:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e7c:	88 d0                	mov    al,dl
c0013e7e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e93:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e99:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013e9d:	0f 8d 97 00 00 00    	jge    c0013f3a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ea7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eab:	83 c2 2a             	add    edx,0x2a
c0013eae:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eb2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013eb7:	75 78                	jne    c0013f31 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013eb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ebd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ec1:	83 c2 2a             	add    edx,0x2a
c0013ec4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ec8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ecc:	75 63                	jne    c0013f31 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ece:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ed3:	74 3a                	je     c0013f0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ed5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ed9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013edd:	83 c2 2a             	add    edx,0x2a
c0013ee0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013eeb:	39 c2                	cmp    edx,eax
c0013eed:	74 10                	je     c0013eff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 a0 23 02 c0       	push   0xc00223a0
c0013ef7:	e8 3e 1b 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	68 98 22 02 c0       	push   0xc0022298
c0013f07:	e8 2e 1b 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c0013f0c:	83 c4 10             	add    esp,0x10
c0013f0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f1b:	83 c2 2a             	add    edx,0x2a
c0013f1e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f22:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f24:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f27:	89 01                	mov    DWORD PTR [ecx],eax
c0013f29:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f2c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f31:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f35:	e9 55 ff ff ff       	jmp    c0013e8f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f3a:	90                   	nop
c0013f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f3f:	83 c4 2c             	add    esp,0x2c
c0013f42:	c2 04 00             	ret    0x4
c0013f45:	90                   	nop

c0013f46 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f46:	56                   	push   esi
c0013f47:	53                   	push   ebx
c0013f48:	83 ec 14             	sub    esp,0x14
c0013f4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f57:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f5c:	88 c8                	mov    al,cl
c0013f5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f62:	88 d0                	mov    al,dl
c0013f64:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f76:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f80:	31 c9                	xor    ecx,ecx
c0013f82:	88 c1                	mov    cl,al
c0013f84:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f88:	31 d2                	xor    edx,edx
c0013f8a:	88 c2                	mov    dl,al
c0013f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f90:	25 ff ff 00 00       	and    eax,0xffff
c0013f95:	83 ec 04             	sub    esp,0x4
c0013f98:	56                   	push   esi
c0013f99:	53                   	push   ebx
c0013f9a:	51                   	push   ecx
c0013f9b:	52                   	push   edx
c0013f9c:	50                   	push   eax
c0013f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fa1:	68 d0 23 02 c0       	push   0xc00223d0
c0013fa6:	e8 60 b2 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0013fab:	83 c4 20             	add    esp,0x20
c0013fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fbf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fc3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fd5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fdc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013feb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013fef:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff6:	83 c2 2a             	add    edx,0x2a
c0013ff9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013ffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014001:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001400e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014012:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0014016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014020:	8d 50 01             	lea    edx,[eax+0x1]
c0014023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014027:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001402d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014031:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014037:	3d 00 08 00 00       	cmp    eax,0x800
c001403c:	75 10                	jne    c001404e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	68 a7 22 02 c0       	push   0xc00222a7
c0014046:	e8 ef 19 00 00       	call   c0015a3a <Krnl::panic(char const*)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	90                   	nop
c001404f:	83 c4 14             	add    esp,0x14
c0014052:	5b                   	pop    ebx
c0014053:	5e                   	pop    esi
c0014054:	c3                   	ret    
c0014055:	90                   	nop

c0014056 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0014056:	b8 00 00 00 00       	mov    eax,0x0
c001405b:	c3                   	ret    

c001405c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001405c:	83 ec 1c             	sub    esp,0x1c
c001405f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014063:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0014066:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001406a:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c0014070:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014074:	25 ff 00 00 00       	and    eax,0xff
c0014079:	83 ec 08             	sub    esp,0x8
c001407c:	50                   	push   eax
c001407d:	52                   	push   edx
c001407e:	e8 63 75 ff ff       	call   c000b5e6 <Computer::readCMOS(unsigned char)>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001408a:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c0014090:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014094:	25 ff 00 00 00       	and    eax,0xff
c0014099:	83 ec 04             	sub    esp,0x4
c001409c:	6a 01                	push   0x1
c001409e:	50                   	push   eax
c001409f:	52                   	push   edx
c00140a0:	e8 59 76 ff ff       	call   c000b6fe <Computer::writeCMOS(unsigned char, unsigned char)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	90                   	nop
c00140a9:	83 c4 1c             	add    esp,0x1c
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <ACPI::open(int, int, void*)>:
c00140ae:	53                   	push   ebx
c00140af:	83 ec 18             	sub    esp,0x18
c00140b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b6:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c1:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140c7:	84 c0                	test   al,al
c00140c9:	74 60                	je     c001412b <ACPI::open(int, int, void*)+0x7d>
c00140cb:	83 ec 0c             	sub    esp,0xc
c00140ce:	68 58 01 00 00       	push   0x158
c00140d3:	e8 fe af ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	89 c3                	mov    ebx,eax
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	53                   	push   ebx
c00140e1:	e8 a8 80 00 00       	call   c001c18e <PCI::PCI()>
c00140e6:	83 c4 10             	add    esp,0x10
c00140e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f1:	83 ec 08             	sub    esp,0x8
c00140f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140f8:	50                   	push   eax
c00140f9:	e8 22 c5 ff ff       	call   c0010620 <Device::addChild(Device*)>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014105:	8b 00                	mov    eax,DWORD PTR [eax]
c0014107:	83 c0 08             	add    eax,0x8
c001410a:	8b 00                	mov    eax,DWORD PTR [eax]
c001410c:	6a 00                	push   0x0
c001410e:	6a 00                	push   0x0
c0014110:	6a 00                	push   0x0
c0014112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014116:	ff d0                	call   eax
c0014118:	83 c4 10             	add    esp,0x10
c001411b:	83 ec 0c             	sub    esp,0xc
c001411e:	68 c4 22 02 c0       	push   0xc00222c4
c0014123:	e8 e3 b0 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014128:	83 c4 10             	add    esp,0x10
c001412b:	83 ec 0c             	sub    esp,0xc
c001412e:	68 cf 22 02 c0       	push   0xc00222cf
c0014133:	e8 43 38 00 00       	call   c001797b <Thr::loadKernelSymbolTable(char const*)>
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0014141:	83 ec 08             	sub    esp,0x8
c0014144:	6a 01                	push   0x1
c0014146:	68 ed 22 02 c0       	push   0xc00222ed
c001414b:	e8 0d 43 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	83 ec 08             	sub    esp,0x8
c0014156:	53                   	push   ebx
c0014157:	50                   	push   eax
c0014158:	e8 c6 44 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c001415d:	83 c4 10             	add    esp,0x10
c0014160:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c0014166:	83 ec 08             	sub    esp,0x8
c0014169:	6a 01                	push   0x1
c001416b:	68 0a 23 02 c0       	push   0xc002230a
c0014170:	e8 e8 42 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	83 ec 08             	sub    esp,0x8
c001417b:	53                   	push   ebx
c001417c:	50                   	push   eax
c001417d:	e8 a1 44 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001418a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014190:	83 e0 04             	and    eax,0x4
c0014193:	84 c0                	test   al,al
c0014195:	0f 84 cf 00 00 00    	je     c001426a <ACPI::open(int, int, void*)+0x1bc>
c001419b:	83 ec 0c             	sub    esp,0xc
c001419e:	68 14 01 00 00       	push   0x114
c00141a3:	e8 2e af ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00141a8:	83 c4 10             	add    esp,0x10
c00141ab:	89 c3                	mov    ebx,eax
c00141ad:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c00141b2:	83 ec 04             	sub    esp,0x4
c00141b5:	50                   	push   eax
c00141b6:	68 27 23 02 c0       	push   0xc0022327
c00141bb:	53                   	push   ebx
c00141bc:	e8 81 b5 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141cd:	74 17                	je     c00141e6 <ACPI::open(int, int, void*)+0x138>
c00141cf:	83 ec 0c             	sub    esp,0xc
c00141d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141d6:	e8 39 b8 ff ff       	call   c000fa14 <File::exists()>
c00141db:	83 c4 10             	add    esp,0x10
c00141de:	84 c0                	test   al,al
c00141e0:	74 04                	je     c00141e6 <ACPI::open(int, int, void*)+0x138>
c00141e2:	b0 01                	mov    al,0x1
c00141e4:	eb 02                	jmp    c00141e8 <ACPI::open(int, int, void*)+0x13a>
c00141e6:	b0 00                	mov    al,0x0
c00141e8:	84 c0                	test   al,al
c00141ea:	74 25                	je     c0014211 <ACPI::open(int, int, void*)+0x163>
c00141ec:	8b 1d 88 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024788
c00141f2:	83 ec 08             	sub    esp,0x8
c00141f5:	6a 01                	push   0x1
c00141f7:	68 27 23 02 c0       	push   0xc0022327
c00141fc:	e8 5c 42 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0014201:	83 c4 10             	add    esp,0x10
c0014204:	83 ec 08             	sub    esp,0x8
c0014207:	53                   	push   ebx
c0014208:	50                   	push   eax
c0014209:	e8 15 44 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c001420e:	83 c4 10             	add    esp,0x10
c0014211:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014216:	74 1e                	je     c0014236 <ACPI::open(int, int, void*)+0x188>
c0014218:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001421d:	74 17                	je     c0014236 <ACPI::open(int, int, void*)+0x188>
c001421f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014223:	8b 00                	mov    eax,DWORD PTR [eax]
c0014225:	83 c0 08             	add    eax,0x8
c0014228:	8b 00                	mov    eax,DWORD PTR [eax]
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014231:	ff d0                	call   eax
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	a1 28 50 02 c0       	mov    eax,ds:0xc0025028
c001423b:	83 ec 08             	sub    esp,0x8
c001423e:	68 44 23 02 c0       	push   0xc0022344
c0014243:	50                   	push   eax
c0014244:	e8 63 f7 ff ff       	call   c00139ac <findDataTable(unsigned char*, char*)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014250:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014255:	74 13                	je     c001426a <ACPI::open(int, int, void*)+0x1bc>
c0014257:	83 ec 08             	sub    esp,0x8
c001425a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001425e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014262:	e8 f5 fd ff ff       	call   c001405c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	b8 00 00 00 00       	mov    eax,0x0
c001426f:	83 c4 18             	add    esp,0x18
c0014272:	5b                   	pop    ebx
c0014273:	c3                   	ret    

c0014274 <ACPI::sleep()>:
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c001427c:	85 c0                	test   eax,eax
c001427e:	74 07                	je     c0014287 <ACPI::sleep()+0x13>
c0014280:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c0014285:	ff d0                	call   eax
c0014287:	90                   	nop
c0014288:	83 c4 0c             	add    esp,0xc
c001428b:	c3                   	ret    

c001428c <CPU::close(int, int, void*)>:
c001428c:	31 c0                	xor    eax,eax
c001428e:	c3                   	ret    

c001428f <lookupAMDCPUName(unsigned char, unsigned char)>:
c001428f:	55                   	push   ebp
c0014290:	57                   	push   edi
c0014291:	56                   	push   esi
c0014292:	53                   	push   ebx
c0014293:	51                   	push   ecx
c0014294:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014298:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001429c:	89 d6                	mov    esi,edx
c001429e:	89 cd                	mov    ebp,ecx
c00142a0:	80 fa 04             	cmp    dl,0x4
c00142a3:	75 28                	jne    c00142cd <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142a5:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142a8:	3c 03                	cmp    al,0x3
c00142aa:	0f 86 64 01 00 00    	jbe    c0014414 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142b0:	80 f9 03             	cmp    cl,0x3
c00142b3:	0f 84 5b 01 00 00    	je     c0014414 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142b9:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142bc:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00142c1:	89 fb                	mov    ebx,edi
c00142c3:	80 fb 01             	cmp    bl,0x1
c00142c6:	77 4e                	ja     c0014316 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142c8:	e9 61 01 00 00       	jmp    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142cd:	80 fa 05             	cmp    dl,0x5
c00142d0:	75 4d                	jne    c001431f <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142d2:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c00142d7:	80 f9 03             	cmp    cl,0x3
c00142da:	0f 86 4e 01 00 00    	jbe    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e0:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142e3:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142e8:	89 fb                	mov    ebx,edi
c00142ea:	80 fb 01             	cmp    bl,0x1
c00142ed:	0f 86 3b 01 00 00    	jbe    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f3:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142f8:	80 f9 08             	cmp    cl,0x8
c00142fb:	0f 84 2d 01 00 00    	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014301:	89 cf                	mov    edi,ecx
c0014303:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c0014308:	83 e7 fb             	and    edi,0xfffffffb
c001430b:	89 fb                	mov    ebx,edi
c001430d:	80 fb 09             	cmp    bl,0x9
c0014310:	0f 84 18 01 00 00    	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014316:	31 c0                	xor    eax,eax
c0014318:	89 eb                	mov    ebx,ebp
c001431a:	0f b6 fb             	movzx  edi,bl
c001431d:	eb 30                	jmp    c001434f <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c001431f:	31 c0                	xor    eax,eax
c0014321:	80 fa 06             	cmp    dl,0x6
c0014324:	75 f2                	jne    c0014318 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014326:	80 f9 0a             	cmp    cl,0xa
c0014329:	77 ed                	ja     c0014318 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001432b:	bf de 05 00 00       	mov    edi,0x5de
c0014330:	0f a3 cf             	bt     edi,ecx
c0014333:	73 e3                	jae    c0014318 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014335:	b8 00 41 02 c0       	mov    eax,0xc0024100
c001433a:	e9 ef 00 00 00       	jmp    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001433f:	39 c7                	cmp    edi,eax
c0014341:	0f 84 d4 00 00 00    	je     c001441b <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014347:	40                   	inc    eax
c0014348:	3d d0 00 00 00       	cmp    eax,0xd0
c001434d:	74 09                	je     c0014358 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c001434f:	89 f3                	mov    ebx,esi
c0014351:	80 fb 0f             	cmp    bl,0xf
c0014354:	75 f1                	jne    c0014347 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014356:	eb e7                	jmp    c001433f <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014358:	80 fa 10             	cmp    dl,0x10
c001435b:	75 19                	jne    c0014376 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c001435d:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014360:	83 e0 fb             	and    eax,0xfffffffb
c0014363:	3c 02                	cmp    al,0x2
c0014365:	0f 86 b7 00 00 00    	jbe    c0014422 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001436b:	80 f9 02             	cmp    cl,0x2
c001436e:	0f 84 ae 00 00 00    	je     c0014422 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014374:	eb 13                	jmp    c0014389 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014376:	80 fa 11             	cmp    dl,0x11
c0014379:	75 0e                	jne    c0014389 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001437b:	b8 10 41 02 c0       	mov    eax,0xc0024110
c0014380:	80 f9 03             	cmp    cl,0x3
c0014383:	0f 84 a5 00 00 00    	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014389:	80 fa 12             	cmp    dl,0x12
c001438c:	75 0e                	jne    c001439c <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c001438e:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014393:	80 f9 01             	cmp    cl,0x1
c0014396:	0f 84 92 00 00 00    	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001439c:	80 fa 14             	cmp    dl,0x14
c001439f:	be 01 00 00 00       	mov    esi,0x1
c00143a4:	0f 94 c3             	sete   bl
c00143a7:	80 f9 13             	cmp    cl,0x13
c00143aa:	77 0c                	ja     c00143b8 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143ac:	be 04 00 09 00       	mov    esi,0x90004
c00143b1:	d3 ee                	shr    esi,cl
c00143b3:	f7 d6                	not    esi
c00143b5:	83 e6 01             	and    esi,0x1
c00143b8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143bb:	3c 01                	cmp    al,0x1
c00143bd:	b8 30 41 02 c0       	mov    eax,0xc0024130
c00143c2:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143c7:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143cb:	75 61                	jne    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143cd:	80 fa 15             	cmp    dl,0x15
c00143d0:	75 1f                	jne    c00143f1 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143d2:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143d7:	80 f9 01             	cmp    cl,0x1
c00143da:	74 52                	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143dc:	89 f3                	mov    ebx,esi
c00143de:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143e3:	84 db                	test   bl,bl
c00143e5:	74 47                	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e7:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143ec:	80 f9 30             	cmp    cl,0x30
c00143ef:	74 3d                	je     c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f1:	80 fa 16             	cmp    dl,0x16
c00143f4:	0f 94 c2             	sete   dl
c00143f7:	84 c9                	test   cl,cl
c00143f9:	75 09                	jne    c0014404 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c00143fb:	b8 70 41 02 c0       	mov    eax,0xc0024170
c0014400:	84 d2                	test   dl,dl
c0014402:	75 2a                	jne    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014404:	80 f9 30             	cmp    cl,0x30
c0014407:	75 20                	jne    c0014429 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014409:	b8 80 41 02 c0       	mov    eax,0xc0024180
c001440e:	84 d2                	test   dl,dl
c0014410:	75 1c                	jne    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014412:	eb 15                	jmp    c0014429 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014414:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c0014419:	eb 13                	jmp    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441b:	b8 10 41 02 c0       	mov    eax,0xc0024110
c0014420:	eb 0c                	jmp    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014422:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014427:	eb 05                	jmp    c001442e <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014429:	b8 52 27 02 c0       	mov    eax,0xc0022752
c001442e:	5a                   	pop    edx
c001442f:	5b                   	pop    ebx
c0014430:	5e                   	pop    esi
c0014431:	5f                   	pop    edi
c0014432:	5d                   	pop    ebp
c0014433:	c3                   	ret    

c0014434 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014434:	53                   	push   ebx
c0014435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014439:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001443d:	80 f9 04             	cmp    cl,0x4
c0014440:	75 6a                	jne    c00144ac <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014442:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014447:	80 fa 01             	cmp    dl,0x1
c001444a:	0f 86 9b 02 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014450:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c0014455:	80 fa 02             	cmp    dl,0x2
c0014458:	0f 84 8d 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001445e:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014463:	80 fa 03             	cmp    dl,0x3
c0014466:	0f 84 7f 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001446c:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c0014471:	80 fa 04             	cmp    dl,0x4
c0014474:	0f 84 71 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001447a:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c001447f:	80 fa 05             	cmp    dl,0x5
c0014482:	0f 84 63 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014488:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001448d:	80 fa 07             	cmp    dl,0x7
c0014490:	0f 84 55 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014496:	8d 5a f8             	lea    ebx,[edx-0x8]
c0014499:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c001449e:	80 fb 01             	cmp    bl,0x1
c00144a1:	0f 87 e0 01 00 00    	ja     c0014687 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144a7:	e9 3f 02 00 00       	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ac:	80 f9 05             	cmp    cl,0x5
c00144af:	75 3e                	jne    c00144ef <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144b1:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144b4:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00144b9:	80 fb 02             	cmp    bl,0x2
c00144bc:	0f 86 29 02 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c2:	80 fa 04             	cmp    dl,0x4
c00144c5:	0f 84 f1 01 00 00    	je     c00146bc <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144cb:	80 fa 07             	cmp    dl,0x7
c00144ce:	0f 84 17 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d4:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144d9:	80 fa 08             	cmp    dl,0x8
c00144dc:	0f 84 09 02 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e2:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144e7:	80 fa 09             	cmp    dl,0x9
c00144ea:	e9 96 01 00 00       	jmp    c0014685 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144ef:	80 f9 06             	cmp    cl,0x6
c00144f2:	0f 85 80 01 00 00    	jne    c0014678 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00144f8:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144fd:	80 fa 01             	cmp    dl,0x1
c0014500:	0f 84 e5 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014506:	8d 42 fb             	lea    eax,[edx-0x5]
c0014509:	3c 01                	cmp    al,0x1
c001450b:	0f 86 b2 01 00 00    	jbe    c00146c3 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014511:	80 fa 03             	cmp    dl,0x3
c0014514:	0f 84 a9 01 00 00    	je     c00146c3 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001451a:	8d 5a f9             	lea    ebx,[edx-0x7]
c001451d:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014522:	80 fb 01             	cmp    bl,0x1
c0014525:	0f 86 c0 01 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001452b:	80 fa 09             	cmp    dl,0x9
c001452e:	0f 84 96 01 00 00    	je     c00146ca <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014534:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014537:	80 fb 01             	cmp    bl,0x1
c001453a:	0f 86 ab 01 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014540:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0014545:	80 fa 0d             	cmp    dl,0xd
c0014548:	0f 84 9d 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001454e:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0014553:	80 fa 0e             	cmp    dl,0xe
c0014556:	0f 84 8f 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001455c:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014561:	80 fa 0f             	cmp    dl,0xf
c0014564:	0f 84 81 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001456a:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c001456f:	80 fa 15             	cmp    dl,0x15
c0014572:	0f 84 73 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014578:	8d 5a ea             	lea    ebx,[edx-0x16]
c001457b:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014580:	80 fb 01             	cmp    bl,0x1
c0014583:	0f 86 62 01 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014589:	80 fa 1a             	cmp    dl,0x1a
c001458c:	0f 84 3f 01 00 00    	je     c00146d1 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0014592:	80 fa 1c             	cmp    dl,0x1c
c0014595:	0f 84 3d 01 00 00    	je     c00146d8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c001459b:	80 fa 1d             	cmp    dl,0x1d
c001459e:	0f 84 47 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a4:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145a9:	80 fa 25             	cmp    dl,0x25
c00145ac:	0f 84 39 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b2:	8d 5a da             	lea    ebx,[edx-0x26]
c00145b5:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00145ba:	80 fb 01             	cmp    bl,0x1
c00145bd:	0f 86 28 01 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c3:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145c8:	80 fa 2a             	cmp    dl,0x2a
c00145cb:	0f 84 1a 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d1:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145d6:	80 fa 2c             	cmp    dl,0x2c
c00145d9:	0f 84 0c 01 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145df:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145e4:	80 fa 2d             	cmp    dl,0x2d
c00145e7:	0f 84 fe 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ed:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00145f2:	80 fa 2e             	cmp    dl,0x2e
c00145f5:	0f 84 f0 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145fb:	b8 10 40 02 c0       	mov    eax,0xc0024010
c0014600:	80 fa 2f             	cmp    dl,0x2f
c0014603:	0f 84 e2 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014609:	8d 5a cb             	lea    ebx,[edx-0x35]
c001460c:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014611:	80 fb 01             	cmp    bl,0x1
c0014614:	0f 86 d1 00 00 00    	jbe    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001461a:	b8 30 40 02 c0       	mov    eax,0xc0024030
c001461f:	80 fa 37             	cmp    dl,0x37
c0014622:	0f 84 c3 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014628:	b8 40 40 02 c0       	mov    eax,0xc0024040
c001462d:	80 fa 3a             	cmp    dl,0x3a
c0014630:	0f 84 b5 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014636:	b8 50 40 02 c0       	mov    eax,0xc0024050
c001463b:	80 fa 3c             	cmp    dl,0x3c
c001463e:	0f 84 a7 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014644:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014649:	80 fa 3d             	cmp    dl,0x3d
c001464c:	0f 84 99 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014652:	b8 40 40 02 c0       	mov    eax,0xc0024040
c0014657:	80 fa 3e             	cmp    dl,0x3e
c001465a:	0f 84 8b 00 00 00    	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014660:	8d 42 bb             	lea    eax,[edx-0x45]
c0014663:	3c 01                	cmp    al,0x1
c0014665:	76 78                	jbe    c00146df <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014667:	80 fa 3f             	cmp    dl,0x3f
c001466a:	74 73                	je     c00146df <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001466c:	80 fa 4a             	cmp    dl,0x4a
c001466f:	74 75                	je     c00146e6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014671:	80 fa 4d             	cmp    dl,0x4d
c0014674:	75 11                	jne    c0014687 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014676:	eb 6e                	jmp    c00146e6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014678:	80 f9 0b             	cmp    cl,0xb
c001467b:	75 0a                	jne    c0014687 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001467d:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0014682:	80 fa 01             	cmp    dl,0x1
c0014685:	74 64                	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014687:	80 f9 0f             	cmp    cl,0xf
c001468a:	b8 80 40 02 c0       	mov    eax,0xc0024080
c001468f:	0f 94 c1             	sete   cl
c0014692:	80 fa 02             	cmp    dl,0x2
c0014695:	0f 96 c3             	setbe  bl
c0014698:	84 cb                	test   bl,cl
c001469a:	75 4f                	jne    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001469c:	8d 42 fd             	lea    eax,[edx-0x3]
c001469f:	3c 01                	cmp    al,0x1
c00146a1:	0f 96 c0             	setbe  al
c00146a4:	80 fa 06             	cmp    dl,0x6
c00146a7:	0f 94 c2             	sete   dl
c00146aa:	09 c2                	or     edx,eax
c00146ac:	b8 52 27 02 c0       	mov    eax,0xc0022752
c00146b1:	84 ca                	test   dl,cl
c00146b3:	74 36                	je     c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b5:	b8 90 40 02 c0       	mov    eax,0xc0024090
c00146ba:	eb 2f                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146bc:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00146c1:	eb 28                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c3:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00146c8:	eb 21                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ca:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146cf:	eb 1a                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d1:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c00146d6:	eb 13                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d8:	b8 00 40 02 c0       	mov    eax,0xc0024000
c00146dd:	eb 0c                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146df:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146e4:	eb 05                	jmp    c00146eb <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e6:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00146eb:	5b                   	pop    ebx
c00146ec:	c3                   	ret    

c00146ed <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146ed:	60                   	pusha  
c00146ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146fa:	9c                   	pushf  
c00146fb:	fa                   	cli    
c00146fc:	0f 09                	wbinvd 
c00146fe:	0f 30                	wrmsr  
c0014700:	9d                   	popf   
c0014701:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014705:	89 02                	mov    DWORD PTR [edx],eax
c0014707:	61                   	popa   
c0014708:	c3                   	ret    

c0014709 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014709:	60                   	pusha  
c001470a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001470e:	9c                   	pushf  
c001470f:	fa                   	cli    
c0014710:	0f 09                	wbinvd 
c0014712:	31 c0                	xor    eax,eax
c0014714:	31 d2                	xor    edx,edx
c0014716:	0f 32                	rdmsr  
c0014718:	9d                   	popf   
c0014719:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001471d:	89 02                	mov    DWORD PTR [edx],eax
c001471f:	61                   	popa   
c0014720:	c3                   	ret    

c0014721 <AMD_K6_writeback(int, int, int)>:
c0014721:	56                   	push   esi
c0014722:	53                   	push   ebx
c0014723:	83 ec 10             	sub    esp,0x10
c0014726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001472a:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001472f:	75 5d                	jne    c001478e <AMD_K6_writeback(int, int, int)+0x6d>
c0014731:	83 f8 08             	cmp    eax,0x8
c0014734:	75 09                	jne    c001473f <AMD_K6_writeback(int, int, int)+0x1e>
c0014736:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001473b:	7e 13                	jle    c0014750 <AMD_K6_writeback(int, int, int)+0x2f>
c001473d:	eb 30                	jmp    c001476f <AMD_K6_writeback(int, int, int)+0x4e>
c001473f:	83 f8 06             	cmp    eax,0x6
c0014742:	7c 4a                	jl     c001478e <AMD_K6_writeback(int, int, int)+0x6d>
c0014744:	83 f8 07             	cmp    eax,0x7
c0014747:	7e 07                	jle    c0014750 <AMD_K6_writeback(int, int, int)+0x2f>
c0014749:	83 f8 09             	cmp    eax,0x9
c001474c:	74 21                	je     c001476f <AMD_K6_writeback(int, int, int)+0x4e>
c001474e:	eb 3e                	jmp    c001478e <AMD_K6_writeback(int, int, int)+0x6d>
c0014750:	89 e6                	mov    esi,esp
c0014752:	8b 1d c4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247c4
c0014758:	c1 eb 15             	shr    ebx,0x15
c001475b:	56                   	push   esi
c001475c:	68 82 00 00 c0       	push   0xc0000082
c0014761:	e8 a3 ff ff ff       	call   c0014709 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014766:	56                   	push   esi
c0014767:	83 e3 7e             	and    ebx,0x7e
c001476a:	6a 00                	push   0x0
c001476c:	53                   	push   ebx
c001476d:	eb 12                	jmp    c0014781 <AMD_K6_writeback(int, int, int)+0x60>
c001476f:	89 e3                	mov    ebx,esp
c0014771:	53                   	push   ebx
c0014772:	68 82 00 00 c0       	push   0xc0000082
c0014777:	e8 8d ff ff ff       	call   c0014709 <AMD_K6_read_msr(unsigned int, REGS*)>
c001477c:	53                   	push   ebx
c001477d:	6a 00                	push   0x0
c001477f:	6a 00                	push   0x0
c0014781:	68 82 00 00 c0       	push   0xc0000082
c0014786:	e8 62 ff ff ff       	call   c00146ed <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001478b:	83 c4 18             	add    esp,0x18
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	5b                   	pop    ebx
c0014792:	5e                   	pop    esi
c0014793:	c3                   	ret    

c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014794:	55                   	push   ebp
c0014795:	57                   	push   edi
c0014796:	56                   	push   esi
c0014797:	53                   	push   ebx
c0014798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001479c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147a0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147a4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147a8:	39 05 a0 41 02 c0    	cmp    DWORD PTR ds:0xc00241a0,eax
c00147ae:	75 23                	jne    c00147d3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147b0:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c00147b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147b9:	89 06                	mov    DWORD PTR [esi],eax
c00147bb:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00147c0:	89 07                	mov    DWORD PTR [edi],eax
c00147c2:	a1 c4 51 02 c0       	mov    eax,ds:0xc00251c4
c00147c7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147ca:	a1 c0 51 02 c0       	mov    eax,ds:0xc00251c0
c00147cf:	89 02                	mov    DWORD PTR [edx],eax
c00147d1:	eb 3f                	jmp    c0014812 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147d3:	31 c9                	xor    ecx,ecx
c00147d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147d9:	0f a2                	cpuid  
c00147db:	89 06                	mov    DWORD PTR [esi],eax
c00147dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147e1:	89 1f                	mov    DWORD PTR [edi],ebx
c00147e3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147e6:	89 10                	mov    DWORD PTR [eax],edx
c00147e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ec:	a3 a0 41 02 c0       	mov    ds:0xc00241a0,eax
c00147f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00147f3:	a3 cc 51 02 c0       	mov    ds:0xc00251cc,eax
c00147f8:	8b 07                	mov    eax,DWORD PTR [edi]
c00147fa:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00147ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014802:	a3 c4 51 02 c0       	mov    ds:0xc00251c4,eax
c0014807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001480b:	8b 00                	mov    eax,DWORD PTR [eax]
c001480d:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014812:	5b                   	pop    ebx
c0014813:	5e                   	pop    esi
c0014814:	5f                   	pop    edi
c0014815:	5d                   	pop    ebp
c0014816:	c3                   	ret    

c0014817 <cpuidCheckEDX(unsigned int)>:
c0014817:	83 ec 10             	sub    esp,0x10
c001481a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001481e:	50                   	push   eax
c001481f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014823:	50                   	push   eax
c0014824:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014828:	50                   	push   eax
c0014829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001482d:	50                   	push   eax
c001482e:	6a 01                	push   0x1
c0014830:	e8 5f ff ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014839:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001483d:	0f 95 c0             	setne  al
c0014840:	83 c4 24             	add    esp,0x24
c0014843:	c3                   	ret    

c0014844 <cpuidCheckECX(unsigned int)>:
c0014844:	83 ec 10             	sub    esp,0x10
c0014847:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001484b:	50                   	push   eax
c001484c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014850:	50                   	push   eax
c0014851:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014855:	50                   	push   eax
c0014856:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485a:	50                   	push   eax
c001485b:	6a 01                	push   0x1
c001485d:	e8 32 ff ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014862:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014866:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001486a:	0f 95 c0             	setne  al
c001486d:	83 c4 24             	add    esp,0x24
c0014870:	c3                   	ret    

c0014871 <cpuidCheckExtendedEBX(unsigned int)>:
c0014871:	83 ec 10             	sub    esp,0x10
c0014874:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014878:	50                   	push   eax
c0014879:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001487d:	50                   	push   eax
c001487e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014882:	50                   	push   eax
c0014883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014887:	50                   	push   eax
c0014888:	6a 07                	push   0x7
c001488a:	e8 05 ff ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001488f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014893:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014897:	0f 95 c0             	setne  al
c001489a:	83 c4 24             	add    esp,0x24
c001489d:	c3                   	ret    

c001489e <cpuidCheckExtendedECX(unsigned int)>:
c001489e:	83 ec 10             	sub    esp,0x10
c00148a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148a5:	50                   	push   eax
c00148a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148aa:	50                   	push   eax
c00148ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148af:	50                   	push   eax
c00148b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b4:	50                   	push   eax
c00148b5:	6a 07                	push   0x7
c00148b7:	e8 d8 fe ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148c4:	0f 95 c0             	setne  al
c00148c7:	83 c4 24             	add    esp,0x24
c00148ca:	c3                   	ret    

c00148cb <getCPUNumber()>:
c00148cb:	31 c0                	xor    eax,eax
c00148cd:	c3                   	ret    

c00148ce <thisCPU()>:
c00148ce:	e8 f8 ff ff ff       	call   c00148cb <getCPUNumber()>
c00148d3:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c00148d9:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148e0:	c3                   	ret    
c00148e1:	90                   	nop

c00148e2 <CPU::CPU()>:
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e9:	83 ec 08             	sub    esp,0x8
c00148ec:	68 52 27 02 c0       	push   0xc0022752
c00148f1:	50                   	push   eax
c00148f2:	e8 19 bf ff ff       	call   c0010810 <Device::Device(char const*)>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c00148ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014903:	89 10                	mov    DWORD PTR [eax],edx
c0014905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014909:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014917:	05 78 01 00 00       	add    eax,0x178
c001491c:	83 ec 0c             	sub    esp,0xc
c001491f:	50                   	push   eax
c0014920:	e8 c5 6e ff ff       	call   c000b7ea <GDT::GDT()>
c0014925:	83 c4 10             	add    esp,0x10
c0014928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492c:	05 7c 09 00 00       	add    eax,0x97c
c0014931:	83 ec 0c             	sub    esp,0xc
c0014934:	50                   	push   eax
c0014935:	e8 10 71 ff ff       	call   c000ba4a <IDT::IDT()>
c001493a:	83 c4 10             	add    esp,0x10
c001493d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014941:	05 7c 11 00 00       	add    eax,0x117c
c0014946:	83 ec 0c             	sub    esp,0xc
c0014949:	50                   	push   eax
c001494a:	e8 6d 91 ff ff       	call   c000dabc <TSS::TSS()>
c001494f:	83 c4 10             	add    esp,0x10
c0014952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014956:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001495d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014961:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001496b:	90                   	nop
c001496c:	83 c4 0c             	add    esp,0xc
c001496f:	c3                   	ret    

c0014970 <CPU::displayFeatures()>:
c0014970:	53                   	push   ebx
c0014971:	83 ec 10             	sub    esp,0x10
c0014974:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014978:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001497e:	68 60 24 02 c0       	push   0xc0022460
c0014983:	e8 83 a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014988:	59                   	pop    ecx
c0014989:	58                   	pop    eax
c001498a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014990:	50                   	push   eax
c0014991:	68 71 24 02 c0       	push   0xc0022471
c0014996:	e8 70 a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001499b:	58                   	pop    eax
c001499c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149a2:	c1 e8 0e             	shr    eax,0xe
c00149a5:	5a                   	pop    edx
c00149a6:	0f b6 c0             	movzx  eax,al
c00149a9:	50                   	push   eax
c00149aa:	68 82 24 02 c0       	push   0xc0022482
c00149af:	e8 57 a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00149b4:	59                   	pop    ecx
c00149b5:	58                   	pop    eax
c00149b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149bc:	66 c1 e8 06          	shr    ax,0x6
c00149c0:	0f b6 c0             	movzx  eax,al
c00149c3:	50                   	push   eax
c00149c4:	68 93 24 02 c0       	push   0xc0022493
c00149c9:	e8 3d a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00149ce:	c7 04 24 a6 28 02 c0 	mov    DWORD PTR [esp],0xc00228a6
c00149d5:	e8 31 a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c00149e2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149e9:	74 05                	je     c00149f0 <CPU::displayFeatures()+0x80>
c00149eb:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c00149f0:	52                   	push   edx
c00149f1:	52                   	push   edx
c00149f2:	50                   	push   eax
c00149f3:	68 a4 24 02 c0       	push   0xc00224a4
c00149f8:	e8 0e a8 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a05:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a0c:	78 05                	js     c0014a13 <CPU::displayFeatures()+0xa3>
c0014a0e:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a13:	51                   	push   ecx
c0014a14:	51                   	push   ecx
c0014a15:	50                   	push   eax
c0014a16:	68 bb 24 02 c0       	push   0xc00224bb
c0014a1b:	e8 eb a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014a20:	83 c4 10             	add    esp,0x10
c0014a23:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a28:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a2f:	75 05                	jne    c0014a36 <CPU::displayFeatures()+0xc6>
c0014a31:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a36:	52                   	push   edx
c0014a37:	52                   	push   edx
c0014a38:	50                   	push   eax
c0014a39:	68 d2 24 02 c0       	push   0xc00224d2
c0014a3e:	e8 c8 a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a4b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a52:	75 05                	jne    c0014a59 <CPU::displayFeatures()+0xe9>
c0014a54:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a59:	51                   	push   ecx
c0014a5a:	51                   	push   ecx
c0014a5b:	50                   	push   eax
c0014a5c:	68 e9 24 02 c0       	push   0xc00224e9
c0014a61:	e8 a5 a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a6e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a75:	75 05                	jne    c0014a7c <CPU::displayFeatures()+0x10c>
c0014a77:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a7c:	52                   	push   edx
c0014a7d:	52                   	push   edx
c0014a7e:	50                   	push   eax
c0014a7f:	68 00 25 02 c0       	push   0xc0022500
c0014a84:	e8 82 a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014a91:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a98:	75 05                	jne    c0014a9f <CPU::displayFeatures()+0x12f>
c0014a9a:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014a9f:	51                   	push   ecx
c0014aa0:	51                   	push   ecx
c0014aa1:	50                   	push   eax
c0014aa2:	68 17 25 02 c0       	push   0xc0022517
c0014aa7:	e8 5f a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014aac:	83 c4 10             	add    esp,0x10
c0014aaf:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ab4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014abb:	75 05                	jne    c0014ac2 <CPU::displayFeatures()+0x152>
c0014abd:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014ac2:	52                   	push   edx
c0014ac3:	52                   	push   edx
c0014ac4:	50                   	push   eax
c0014ac5:	68 2e 25 02 c0       	push   0xc002252e
c0014aca:	e8 3c a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ad7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ade:	75 05                	jne    c0014ae5 <CPU::displayFeatures()+0x175>
c0014ae0:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014ae5:	51                   	push   ecx
c0014ae6:	51                   	push   ecx
c0014ae7:	50                   	push   eax
c0014ae8:	68 45 25 02 c0       	push   0xc0022545
c0014aed:	e8 19 a7 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014afa:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b01:	75 05                	jne    c0014b08 <CPU::displayFeatures()+0x198>
c0014b03:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b08:	52                   	push   edx
c0014b09:	52                   	push   edx
c0014b0a:	50                   	push   eax
c0014b0b:	68 5c 25 02 c0       	push   0xc002255c
c0014b10:	e8 f6 a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014b15:	83 c4 10             	add    esp,0x10
c0014b18:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b1d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b24:	75 05                	jne    c0014b2b <CPU::displayFeatures()+0x1bb>
c0014b26:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b2b:	51                   	push   ecx
c0014b2c:	51                   	push   ecx
c0014b2d:	50                   	push   eax
c0014b2e:	68 73 25 02 c0       	push   0xc0022573
c0014b33:	e8 d3 a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b40:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b47:	75 05                	jne    c0014b4e <CPU::displayFeatures()+0x1de>
c0014b49:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b4e:	52                   	push   edx
c0014b4f:	52                   	push   edx
c0014b50:	50                   	push   eax
c0014b51:	68 8a 25 02 c0       	push   0xc002258a
c0014b56:	e8 b0 a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b63:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b6a:	75 05                	jne    c0014b71 <CPU::displayFeatures()+0x201>
c0014b6c:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b71:	51                   	push   ecx
c0014b72:	51                   	push   ecx
c0014b73:	50                   	push   eax
c0014b74:	68 a1 25 02 c0       	push   0xc00225a1
c0014b79:	e8 8d a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014b86:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b8d:	75 05                	jne    c0014b94 <CPU::displayFeatures()+0x224>
c0014b8f:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014b94:	52                   	push   edx
c0014b95:	52                   	push   edx
c0014b96:	50                   	push   eax
c0014b97:	68 b8 25 02 c0       	push   0xc00225b8
c0014b9c:	e8 6a a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014ba9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bb0:	78 05                	js     c0014bb7 <CPU::displayFeatures()+0x247>
c0014bb2:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014bb7:	51                   	push   ecx
c0014bb8:	51                   	push   ecx
c0014bb9:	50                   	push   eax
c0014bba:	68 cf 25 02 c0       	push   0xc00225cf
c0014bbf:	e8 47 a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	b8 ee 10 02 c0       	mov    eax,0xc00210ee
c0014bcc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bd3:	75 05                	jne    c0014bda <CPU::displayFeatures()+0x26a>
c0014bd5:	b8 f2 10 02 c0       	mov    eax,0xc00210f2
c0014bda:	52                   	push   edx
c0014bdb:	52                   	push   edx
c0014bdc:	50                   	push   eax
c0014bdd:	68 e6 25 02 c0       	push   0xc00225e6
c0014be2:	e8 24 a6 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0014be7:	83 c4 18             	add    esp,0x18
c0014bea:	5b                   	pop    ebx
c0014beb:	c3                   	ret    

c0014bec <CPU::detectFeatures()>:
c0014bec:	55                   	push   ebp
c0014bed:	57                   	push   edi
c0014bee:	56                   	push   esi
c0014bef:	53                   	push   ebx
c0014bf0:	83 ec 50             	sub    esp,0x50
c0014bf3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014bf7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c01:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c08:	6a 0d                	push   0xd
c0014c0a:	6a 00                	push   0x0
c0014c0c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c12:	57                   	push   edi
c0014c13:	e8 a2 ba fe ff       	call   c00006ba <memset>
c0014c18:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0014c1d:	83 c4 10             	add    esp,0x10
c0014c20:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c27:	0f 84 04 09 00 00    	je     c0015531 <CPU::detectFeatures()+0x945>
c0014c2d:	83 ec 0c             	sub    esp,0xc
c0014c30:	6a 10                	push   0x10
c0014c32:	e8 e0 fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014c37:	83 e0 01             	and    eax,0x1
c0014c3a:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c3d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c43:	83 e0 fd             	and    eax,0xfffffffd
c0014c46:	09 d0                	or     eax,edx
c0014c48:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c4e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c55:	e8 bd fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014c5a:	83 e0 01             	and    eax,0x1
c0014c5d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c64:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c6a:	83 e0 fb             	and    eax,0xfffffffb
c0014c6d:	09 d0                	or     eax,edx
c0014c6f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c75:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c7c:	e8 96 fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014c81:	83 e0 01             	and    eax,0x1
c0014c84:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c91:	83 e0 f7             	and    eax,0xfffffff7
c0014c94:	09 d0                	or     eax,edx
c0014c96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c9c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014ca3:	e8 6f fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014ca8:	83 e0 01             	and    eax,0x1
c0014cab:	c1 e0 04             	shl    eax,0x4
c0014cae:	88 c2                	mov    dl,al
c0014cb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cb6:	83 e0 ef             	and    eax,0xffffffef
c0014cb9:	09 d0                	or     eax,edx
c0014cbb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cc1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cc8:	e8 4a fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014ccd:	83 e0 01             	and    eax,0x1
c0014cd0:	c1 e0 05             	shl    eax,0x5
c0014cd3:	88 c2                	mov    dl,al
c0014cd5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cdb:	83 e0 df             	and    eax,0xffffffdf
c0014cde:	09 d0                	or     eax,edx
c0014ce0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ce6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014ced:	e8 25 fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014cf2:	83 e0 01             	and    eax,0x1
c0014cf5:	8d 14 00             	lea    edx,[eax+eax*1]
c0014cf8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014cfe:	83 e0 fd             	and    eax,0xfffffffd
c0014d01:	09 d0                	or     eax,edx
c0014d03:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d09:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d10:	e8 02 fb ff ff       	call   c0014817 <cpuidCheckEDX(unsigned int)>
c0014d15:	83 e0 01             	and    eax,0x1
c0014d18:	c1 e0 06             	shl    eax,0x6
c0014d1b:	88 c2                	mov    dl,al
c0014d1d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d23:	83 e0 bf             	and    eax,0xffffffbf
c0014d26:	09 d0                	or     eax,edx
c0014d28:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d2e:	58                   	pop    eax
c0014d2f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d33:	56                   	push   esi
c0014d34:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d38:	55                   	push   ebp
c0014d39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d3d:	50                   	push   eax
c0014d3e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d42:	52                   	push   edx
c0014d43:	6a 00                	push   0x0
c0014d45:	e8 4a fa ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d4a:	83 c4 1c             	add    esp,0x1c
c0014d4d:	6a 04                	push   0x4
c0014d4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d53:	50                   	push   eax
c0014d54:	57                   	push   edi
c0014d55:	e8 2a b9 fe ff       	call   c0000684 <memcpy>
c0014d5a:	83 c4 0c             	add    esp,0xc
c0014d5d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d63:	6a 04                	push   0x4
c0014d65:	56                   	push   esi
c0014d66:	50                   	push   eax
c0014d67:	e8 18 b9 fe ff       	call   c0000684 <memcpy>
c0014d6c:	83 c4 0c             	add    esp,0xc
c0014d6f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d75:	6a 04                	push   0x4
c0014d77:	55                   	push   ebp
c0014d78:	50                   	push   eax
c0014d79:	e8 06 b9 fe ff       	call   c0000684 <memcpy>
c0014d7e:	58                   	pop    eax
c0014d7f:	5a                   	pop    edx
c0014d80:	68 fd 25 02 c0       	push   0xc00225fd
c0014d85:	57                   	push   edi
c0014d86:	e8 1f ba fe ff       	call   c00007aa <strcmp>
c0014d8b:	83 c4 10             	add    esp,0x10
c0014d8e:	85 c0                	test   eax,eax
c0014d90:	75 0f                	jne    c0014da1 <CPU::detectFeatures()+0x1b5>
c0014d92:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014d9c:	e9 22 02 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014da1:	50                   	push   eax
c0014da2:	50                   	push   eax
c0014da3:	68 0a 26 02 c0       	push   0xc002260a
c0014da8:	57                   	push   edi
c0014da9:	e8 fc b9 fe ff       	call   c00007aa <strcmp>
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	85 c0                	test   eax,eax
c0014db3:	74 dd                	je     c0014d92 <CPU::detectFeatures()+0x1a6>
c0014db5:	51                   	push   ecx
c0014db6:	51                   	push   ecx
c0014db7:	68 17 26 02 c0       	push   0xc0022617
c0014dbc:	57                   	push   edi
c0014dbd:	e8 e8 b9 fe ff       	call   c00007aa <strcmp>
c0014dc2:	83 c4 10             	add    esp,0x10
c0014dc5:	85 c0                	test   eax,eax
c0014dc7:	74 2a                	je     c0014df3 <CPU::detectFeatures()+0x207>
c0014dc9:	52                   	push   edx
c0014dca:	52                   	push   edx
c0014dcb:	68 24 26 02 c0       	push   0xc0022624
c0014dd0:	57                   	push   edi
c0014dd1:	e8 d4 b9 fe ff       	call   c00007aa <strcmp>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	85 c0                	test   eax,eax
c0014ddb:	74 16                	je     c0014df3 <CPU::detectFeatures()+0x207>
c0014ddd:	50                   	push   eax
c0014dde:	50                   	push   eax
c0014ddf:	68 31 26 02 c0       	push   0xc0022631
c0014de4:	57                   	push   edi
c0014de5:	e8 c0 b9 fe ff       	call   c00007aa <strcmp>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	85 c0                	test   eax,eax
c0014def:	74 48                	je     c0014e39 <CPU::detectFeatures()+0x24d>
c0014df1:	eb 0f                	jmp    c0014e02 <CPU::detectFeatures()+0x216>
c0014df3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014dfd:	e9 c1 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014e02:	50                   	push   eax
c0014e03:	50                   	push   eax
c0014e04:	68 3e 26 02 c0       	push   0xc002263e
c0014e09:	57                   	push   edi
c0014e0a:	e8 9b b9 fe ff       	call   c00007aa <strcmp>
c0014e0f:	83 c4 10             	add    esp,0x10
c0014e12:	85 c0                	test   eax,eax
c0014e14:	74 23                	je     c0014e39 <CPU::detectFeatures()+0x24d>
c0014e16:	50                   	push   eax
c0014e17:	50                   	push   eax
c0014e18:	68 4b 26 02 c0       	push   0xc002264b
c0014e1d:	57                   	push   edi
c0014e1e:	e8 87 b9 fe ff       	call   c00007aa <strcmp>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	85 c0                	test   eax,eax
c0014e28:	75 1e                	jne    c0014e48 <CPU::detectFeatures()+0x25c>
c0014e2a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e34:	e9 8a 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014e39:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e43:	e9 7b 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014e48:	50                   	push   eax
c0014e49:	50                   	push   eax
c0014e4a:	68 58 26 02 c0       	push   0xc0022658
c0014e4f:	57                   	push   edi
c0014e50:	e8 55 b9 fe ff       	call   c00007aa <strcmp>
c0014e55:	83 c4 10             	add    esp,0x10
c0014e58:	85 c0                	test   eax,eax
c0014e5a:	75 0f                	jne    c0014e6b <CPU::detectFeatures()+0x27f>
c0014e5c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e66:	e9 58 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014e6b:	50                   	push   eax
c0014e6c:	50                   	push   eax
c0014e6d:	68 17 26 02 c0       	push   0xc0022617
c0014e72:	57                   	push   edi
c0014e73:	e8 32 b9 fe ff       	call   c00007aa <strcmp>
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	85 c0                	test   eax,eax
c0014e7d:	75 0f                	jne    c0014e8e <CPU::detectFeatures()+0x2a2>
c0014e7f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e89:	e9 35 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014e8e:	50                   	push   eax
c0014e8f:	50                   	push   eax
c0014e90:	68 65 26 02 c0       	push   0xc0022665
c0014e95:	57                   	push   edi
c0014e96:	e8 0f b9 fe ff       	call   c00007aa <strcmp>
c0014e9b:	83 c4 10             	add    esp,0x10
c0014e9e:	85 c0                	test   eax,eax
c0014ea0:	75 0f                	jne    c0014eb1 <CPU::detectFeatures()+0x2c5>
c0014ea2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014eac:	e9 12 01 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014eb1:	51                   	push   ecx
c0014eb2:	51                   	push   ecx
c0014eb3:	68 72 26 02 c0       	push   0xc0022672
c0014eb8:	57                   	push   edi
c0014eb9:	e8 ec b8 fe ff       	call   c00007aa <strcmp>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	85 c0                	test   eax,eax
c0014ec3:	75 0f                	jne    c0014ed4 <CPU::detectFeatures()+0x2e8>
c0014ec5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ecf:	e9 ef 00 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014ed4:	52                   	push   edx
c0014ed5:	52                   	push   edx
c0014ed6:	68 7f 26 02 c0       	push   0xc002267f
c0014edb:	57                   	push   edi
c0014edc:	e8 c9 b8 fe ff       	call   c00007aa <strcmp>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	85 c0                	test   eax,eax
c0014ee6:	75 0f                	jne    c0014ef7 <CPU::detectFeatures()+0x30b>
c0014ee8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014ef2:	e9 cc 00 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014ef7:	50                   	push   eax
c0014ef8:	50                   	push   eax
c0014ef9:	68 8c 26 02 c0       	push   0xc002268c
c0014efe:	57                   	push   edi
c0014eff:	e8 a6 b8 fe ff       	call   c00007aa <strcmp>
c0014f04:	83 c4 10             	add    esp,0x10
c0014f07:	85 c0                	test   eax,eax
c0014f09:	75 0f                	jne    c0014f1a <CPU::detectFeatures()+0x32e>
c0014f0b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f15:	e9 a9 00 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014f1a:	50                   	push   eax
c0014f1b:	50                   	push   eax
c0014f1c:	68 99 26 02 c0       	push   0xc0022699
c0014f21:	57                   	push   edi
c0014f22:	e8 83 b8 fe ff       	call   c00007aa <strcmp>
c0014f27:	83 c4 10             	add    esp,0x10
c0014f2a:	85 c0                	test   eax,eax
c0014f2c:	75 0f                	jne    c0014f3d <CPU::detectFeatures()+0x351>
c0014f2e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f38:	e9 86 00 00 00       	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014f3d:	50                   	push   eax
c0014f3e:	50                   	push   eax
c0014f3f:	68 a6 26 02 c0       	push   0xc00226a6
c0014f44:	57                   	push   edi
c0014f45:	e8 60 b8 fe ff       	call   c00007aa <strcmp>
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	85 c0                	test   eax,eax
c0014f4f:	75 0c                	jne    c0014f5d <CPU::detectFeatures()+0x371>
c0014f51:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f5b:	eb 66                	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014f5d:	50                   	push   eax
c0014f5e:	50                   	push   eax
c0014f5f:	68 b3 26 02 c0       	push   0xc00226b3
c0014f64:	57                   	push   edi
c0014f65:	e8 40 b8 fe ff       	call   c00007aa <strcmp>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	85 c0                	test   eax,eax
c0014f6f:	75 0c                	jne    c0014f7d <CPU::detectFeatures()+0x391>
c0014f71:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f7b:	eb 46                	jmp    c0014fc3 <CPU::detectFeatures()+0x3d7>
c0014f7d:	50                   	push   eax
c0014f7e:	50                   	push   eax
c0014f7f:	68 c0 26 02 c0       	push   0xc00226c0
c0014f84:	57                   	push   edi
c0014f85:	e8 20 b8 fe ff       	call   c00007aa <strcmp>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	85 c0                	test   eax,eax
c0014f8f:	74 e0                	je     c0014f71 <CPU::detectFeatures()+0x385>
c0014f91:	50                   	push   eax
c0014f92:	50                   	push   eax
c0014f93:	68 cd 26 02 c0       	push   0xc00226cd
c0014f98:	57                   	push   edi
c0014f99:	e8 0c b8 fe ff       	call   c00007aa <strcmp>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	85 c0                	test   eax,eax
c0014fa3:	74 cc                	je     c0014f71 <CPU::detectFeatures()+0x385>
c0014fa5:	51                   	push   ecx
c0014fa6:	51                   	push   ecx
c0014fa7:	68 da 26 02 c0       	push   0xc00226da
c0014fac:	57                   	push   edi
c0014fad:	e8 f8 b7 fe ff       	call   c00007aa <strcmp>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	85 c0                	test   eax,eax
c0014fb7:	74 b8                	je     c0014f71 <CPU::detectFeatures()+0x385>
c0014fb9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fc3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fc8:	0f 86 be 00 00 00    	jbe    c001508c <CPU::detectFeatures()+0x4a0>
c0014fce:	83 ec 0c             	sub    esp,0xc
c0014fd1:	68 80 00 00 00       	push   0x80
c0014fd6:	e8 96 f8 ff ff       	call   c0014871 <cpuidCheckExtendedEBX(unsigned int)>
c0014fdb:	83 e0 01             	and    eax,0x1
c0014fde:	c1 e0 06             	shl    eax,0x6
c0014fe1:	88 c2                	mov    dl,al
c0014fe3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014fe9:	83 e0 bf             	and    eax,0xffffffbf
c0014fec:	09 d0                	or     eax,edx
c0014fee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ff4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014ffb:	e8 71 f8 ff ff       	call   c0014871 <cpuidCheckExtendedEBX(unsigned int)>
c0015000:	83 e0 01             	and    eax,0x1
c0015003:	c1 e0 04             	shl    eax,0x4
c0015006:	88 c2                	mov    dl,al
c0015008:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001500e:	83 e0 ef             	and    eax,0xffffffef
c0015011:	09 d0                	or     eax,edx
c0015013:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015019:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015020:	e8 4c f8 ff ff       	call   c0014871 <cpuidCheckExtendedEBX(unsigned int)>
c0015025:	c1 e0 07             	shl    eax,0x7
c0015028:	88 c2                	mov    dl,al
c001502a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015030:	83 e0 7f             	and    eax,0x7f
c0015033:	09 d0                	or     eax,edx
c0015035:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001503b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015042:	e8 57 f8 ff ff       	call   c001489e <cpuidCheckExtendedECX(unsigned int)>
c0015047:	83 e0 01             	and    eax,0x1
c001504a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015051:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015057:	83 e0 f7             	and    eax,0xfffffff7
c001505a:	09 d0                	or     eax,edx
c001505c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015062:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015069:	e8 30 f8 ff ff       	call   c001489e <cpuidCheckExtendedECX(unsigned int)>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	83 e0 01             	and    eax,0x1
c0015074:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001507b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015081:	83 e0 fb             	and    eax,0xfffffffb
c0015084:	09 d0                	or     eax,edx
c0015086:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001508c:	83 ec 0c             	sub    esp,0xc
c001508f:	56                   	push   esi
c0015090:	55                   	push   ebp
c0015091:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0015095:	57                   	push   edi
c0015096:	8d 44 24 28          	lea    eax,[esp+0x28]
c001509a:	50                   	push   eax
c001509b:	6a 01                	push   0x1
c001509d:	e8 f2 f6 ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150ac:	88 c1                	mov    cl,al
c00150ae:	83 e2 f0             	and    edx,0xfffffff0
c00150b1:	83 e1 0f             	and    ecx,0xf
c00150b4:	09 ca                	or     edx,ecx
c00150b6:	88 c1                	mov    cl,al
c00150b8:	c0 e9 04             	shr    cl,0x4
c00150bb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150c1:	0f b6 d1             	movzx  edx,cl
c00150c4:	c1 e2 06             	shl    edx,0x6
c00150c7:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150cb:	89 d5                	mov    ebp,edx
c00150cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150d3:	66 81 e2 3f c0       	and    dx,0xc03f
c00150d8:	83 c4 20             	add    esp,0x20
c00150db:	09 ea                	or     edx,ebp
c00150dd:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150e4:	89 c2                	mov    edx,eax
c00150e6:	c1 ea 08             	shr    edx,0x8
c00150e9:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150ef:	83 e2 0f             	and    edx,0xf
c00150f2:	83 e1 3f             	and    ecx,0x3f
c00150f5:	89 d5                	mov    ebp,edx
c00150f7:	c1 e5 06             	shl    ebp,0x6
c00150fa:	09 cd                	or     ebp,ecx
c00150fc:	89 e9                	mov    ecx,ebp
c00150fe:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015104:	88 d1                	mov    cl,dl
c0015106:	c0 e9 02             	shr    cl,0x2
c0015109:	89 cd                	mov    ebp,ecx
c001510b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015111:	83 e1 c0             	and    ecx,0xffffffc0
c0015114:	09 cd                	or     ebp,ecx
c0015116:	89 e9                	mov    ecx,ebp
c0015118:	89 c5                	mov    ebp,eax
c001511a:	c1 ed 0c             	shr    ebp,0xc
c001511d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015123:	83 e5 03             	and    ebp,0x3
c0015126:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001512c:	c1 e5 04             	shl    ebp,0x4
c001512f:	83 e1 cf             	and    ecx,0xffffffcf
c0015132:	09 cd                	or     ebp,ecx
c0015134:	80 fa 06             	cmp    dl,0x6
c0015137:	89 e9                	mov    ecx,ebp
c0015139:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001513f:	74 05                	je     c0015146 <CPU::detectFeatures()+0x55a>
c0015141:	80 fa 0f             	cmp    dl,0xf
c0015144:	75 5d                	jne    c00151a3 <CPU::detectFeatures()+0x5b7>
c0015146:	89 c5                	mov    ebp,eax
c0015148:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001514c:	c1 ed 10             	shr    ebp,0x10
c001514f:	c1 e5 04             	shl    ebp,0x4
c0015152:	09 e9                	or     ecx,ebp
c0015154:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001515a:	0f b6 c9             	movzx  ecx,cl
c001515d:	c1 e1 06             	shl    ecx,0x6
c0015160:	66 81 e5 3f c0       	and    bp,0xc03f
c0015165:	09 e9                	or     ecx,ebp
c0015167:	80 fa 0f             	cmp    dl,0xf
c001516a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015171:	75 30                	jne    c00151a3 <CPU::detectFeatures()+0x5b7>
c0015173:	c1 e8 14             	shr    eax,0x14
c0015176:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001517c:	83 c0 0f             	add    eax,0xf
c001517f:	83 e2 3f             	and    edx,0x3f
c0015182:	88 c1                	mov    cl,al
c0015184:	c1 e1 06             	shl    ecx,0x6
c0015187:	c0 e8 02             	shr    al,0x2
c001518a:	09 ca                	or     edx,ecx
c001518c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0015192:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0015198:	83 e2 c0             	and    edx,0xffffffc0
c001519b:	09 d0                	or     eax,edx
c001519d:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151a3:	83 ec 0c             	sub    esp,0xc
c00151a6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151ad:	56                   	push   esi
c00151ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151b2:	50                   	push   eax
c00151b3:	57                   	push   edi
c00151b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151b8:	55                   	push   ebp
c00151b9:	68 00 00 00 80       	push   0x80000000
c00151be:	e8 d1 f5 ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151c3:	83 c4 20             	add    esp,0x20
c00151c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151d2:	76 1e                	jbe    c00151f2 <CPU::detectFeatures()+0x606>
c00151d4:	83 ec 0c             	sub    esp,0xc
c00151d7:	56                   	push   esi
c00151d8:	50                   	push   eax
c00151d9:	57                   	push   edi
c00151da:	55                   	push   ebp
c00151db:	68 01 00 00 80       	push   0x80000001
c00151e0:	e8 af f5 ff ff       	call   c0014794 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151ef:	83 c4 20             	add    esp,0x20
c00151f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00151f8:	83 f8 01             	cmp    eax,0x1
c00151fb:	75 6f                	jne    c001526c <CPU::detectFeatures()+0x680>
c00151fd:	51                   	push   ecx
c00151fe:	51                   	push   ecx
c00151ff:	68 e6 26 02 c0       	push   0xc00226e6
c0015204:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015208:	56                   	push   esi
c0015209:	e8 4b b5 fe ff       	call   c0000759 <strcpy>
c001520e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015214:	5f                   	pop    edi
c0015215:	66 c1 e8 06          	shr    ax,0x6
c0015219:	5d                   	pop    ebp
c001521a:	0f b6 c0             	movzx  eax,al
c001521d:	50                   	push   eax
c001521e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015224:	c1 e8 0e             	shr    eax,0xe
c0015227:	0f b6 c0             	movzx  eax,al
c001522a:	50                   	push   eax
c001522b:	e8 04 f2 ff ff       	call   c0014434 <lookupIntelCPUName(unsigned char, unsigned char)>
c0015230:	5a                   	pop    edx
c0015231:	59                   	pop    ecx
c0015232:	50                   	push   eax
c0015233:	56                   	push   esi
c0015234:	e8 d7 b5 fe ff       	call   c0000810 <strcat>
c0015239:	5f                   	pop    edi
c001523a:	5d                   	pop    ebp
c001523b:	56                   	push   esi
c001523c:	53                   	push   ebx
c001523d:	e8 c0 b5 ff ff       	call   c0010802 <Device::setName(char const*)>
c0015242:	58                   	pop    eax
c0015243:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015249:	5a                   	pop    edx
c001524a:	68 ed 26 02 c0       	push   0xc00226ed
c001524f:	50                   	push   eax
c0015250:	e8 55 b5 fe ff       	call   c00007aa <strcmp>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	85 c0                	test   eax,eax
c001525a:	0f 85 53 03 00 00    	jne    c00155b3 <CPU::detectFeatures()+0x9c7>
c0015260:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015267:	e9 47 03 00 00       	jmp    c00155b3 <CPU::detectFeatures()+0x9c7>
c001526c:	83 f8 02             	cmp    eax,0x2
c001526f:	0f 85 b5 00 00 00    	jne    c001532a <CPU::detectFeatures()+0x73e>
c0015275:	57                   	push   edi
c0015276:	57                   	push   edi
c0015277:	68 ff 26 02 c0       	push   0xc00226ff
c001527c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015280:	56                   	push   esi
c0015281:	e8 d3 b4 fe ff       	call   c0000759 <strcpy>
c0015286:	5d                   	pop    ebp
c0015287:	58                   	pop    eax
c0015288:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001528e:	66 c1 e8 06          	shr    ax,0x6
c0015292:	0f b6 c0             	movzx  eax,al
c0015295:	50                   	push   eax
c0015296:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001529c:	c1 e8 0e             	shr    eax,0xe
c001529f:	0f b6 c0             	movzx  eax,al
c00152a2:	50                   	push   eax
c00152a3:	e8 e7 ef ff ff       	call   c001428f <lookupAMDCPUName(unsigned char, unsigned char)>
c00152a8:	5a                   	pop    edx
c00152a9:	59                   	pop    ecx
c00152aa:	50                   	push   eax
c00152ab:	56                   	push   esi
c00152ac:	e8 5f b5 fe ff       	call   c0000810 <strcat>
c00152b1:	5f                   	pop    edi
c00152b2:	5d                   	pop    ebp
c00152b3:	56                   	push   esi
c00152b4:	53                   	push   ebx
c00152b5:	e8 48 b5 ff ff       	call   c0010802 <Device::setName(char const*)>
c00152ba:	58                   	pop    eax
c00152bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152c1:	5a                   	pop    edx
c00152c2:	68 04 27 02 c0       	push   0xc0022704
c00152c7:	50                   	push   eax
c00152c8:	e8 dd b4 fe ff       	call   c00007aa <strcmp>
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	85 c0                	test   eax,eax
c00152d2:	75 20                	jne    c00152f4 <CPU::detectFeatures()+0x708>
c00152d4:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c00152da:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152e0:	a8 01                	test   al,0x1
c00152e2:	74 10                	je     c00152f4 <CPU::detectFeatures()+0x708>
c00152e4:	83 e0 fe             	and    eax,0xfffffffe
c00152e7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152ed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152fa:	c1 e8 0e             	shr    eax,0xe
c00152fd:	3c 05                	cmp    al,0x5
c00152ff:	0f 85 ae 02 00 00    	jne    c00155b3 <CPU::detectFeatures()+0x9c7>
c0015305:	56                   	push   esi
c0015306:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001530c:	83 e0 0f             	and    eax,0xf
c001530f:	50                   	push   eax
c0015310:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015316:	66 c1 e8 06          	shr    ax,0x6
c001531a:	0f b6 c0             	movzx  eax,al
c001531d:	50                   	push   eax
c001531e:	6a 05                	push   0x5
c0015320:	e8 fc f3 ff ff       	call   c0014721 <AMD_K6_writeback(int, int, int)>
c0015325:	e9 ff 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x93d>
c001532a:	89 c1                	mov    ecx,eax
c001532c:	83 e1 fd             	and    ecx,0xfffffffd
c001532f:	83 f9 04             	cmp    ecx,0x4
c0015332:	74 09                	je     c001533d <CPU::detectFeatures()+0x751>
c0015334:	83 f8 03             	cmp    eax,0x3
c0015337:	0f 85 6f 01 00 00    	jne    c00154ac <CPU::detectFeatures()+0x8c0>
c001533d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015343:	c1 ea 0e             	shr    edx,0xe
c0015346:	80 fa 05             	cmp    dl,0x5
c0015349:	75 62                	jne    c00153ad <CPU::detectFeatures()+0x7c1>
c001534b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015351:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015356:	66 81 fa 00 01       	cmp    dx,0x100
c001535b:	75 0c                	jne    c0015369 <CPU::detectFeatures()+0x77d>
c001535d:	51                   	push   ecx
c001535e:	51                   	push   ecx
c001535f:	68 0b 27 02 c0       	push   0xc002270b
c0015364:	e9 ba 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c0015369:	66 81 fa 00 02       	cmp    dx,0x200
c001536e:	75 0c                	jne    c001537c <CPU::detectFeatures()+0x790>
c0015370:	52                   	push   edx
c0015371:	52                   	push   edx
c0015372:	68 1e 27 02 c0       	push   0xc002271e
c0015377:	e9 a7 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001537c:	66 81 fa 40 02       	cmp    dx,0x240
c0015381:	75 0c                	jne    c001538f <CPU::detectFeatures()+0x7a3>
c0015383:	50                   	push   eax
c0015384:	50                   	push   eax
c0015385:	68 30 27 02 c0       	push   0xc0022730
c001538a:	e9 94 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001538f:	83 f8 06             	cmp    eax,0x6
c0015392:	0f 84 ee 00 00 00    	je     c0015486 <CPU::detectFeatures()+0x89a>
c0015398:	83 f9 04             	cmp    ecx,0x4
c001539b:	0f 84 f6 00 00 00    	je     c0015497 <CPU::detectFeatures()+0x8ab>
c00153a1:	50                   	push   eax
c00153a2:	50                   	push   eax
c00153a3:	68 56 27 02 c0       	push   0xc0022756
c00153a8:	e9 76 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00153ad:	80 fa 06             	cmp    dl,0x6
c00153b0:	0f 85 cb 00 00 00    	jne    c0015481 <CPU::detectFeatures()+0x895>
c00153b6:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153bc:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153c1:	66 81 fa 80 01       	cmp    dx,0x180
c00153c6:	75 0c                	jne    c00153d4 <CPU::detectFeatures()+0x7e8>
c00153c8:	50                   	push   eax
c00153c9:	50                   	push   eax
c00153ca:	68 61 27 02 c0       	push   0xc0022761
c00153cf:	e9 4f 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00153d4:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153d9:	74 07                	je     c00153e2 <CPU::detectFeatures()+0x7f6>
c00153db:	66 81 fa 00 02       	cmp    dx,0x200
c00153e0:	75 0c                	jne    c00153ee <CPU::detectFeatures()+0x802>
c00153e2:	50                   	push   eax
c00153e3:	50                   	push   eax
c00153e4:	68 71 27 02 c0       	push   0xc0022771
c00153e9:	e9 35 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00153ee:	66 81 fa 40 02       	cmp    dx,0x240
c00153f3:	75 0c                	jne    c0015401 <CPU::detectFeatures()+0x815>
c00153f5:	50                   	push   eax
c00153f6:	50                   	push   eax
c00153f7:	68 78 27 02 c0       	push   0xc0022778
c00153fc:	e9 22 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c0015401:	66 81 fa 80 02       	cmp    dx,0x280
c0015406:	74 07                	je     c001540f <CPU::detectFeatures()+0x823>
c0015408:	66 81 fa 40 03       	cmp    dx,0x340
c001540d:	75 0c                	jne    c001541b <CPU::detectFeatures()+0x82f>
c001540f:	50                   	push   eax
c0015410:	50                   	push   eax
c0015411:	68 81 27 02 c0       	push   0xc0022781
c0015416:	e9 08 01 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001541b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015420:	75 0c                	jne    c001542e <CPU::detectFeatures()+0x842>
c0015422:	55                   	push   ebp
c0015423:	55                   	push   ebp
c0015424:	68 88 27 02 c0       	push   0xc0022788
c0015429:	e9 f5 00 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001542e:	83 f8 06             	cmp    eax,0x6
c0015431:	74 53                	je     c0015486 <CPU::detectFeatures()+0x89a>
c0015433:	83 f9 04             	cmp    ecx,0x4
c0015436:	74 5f                	je     c0015497 <CPU::detectFeatures()+0x8ab>
c0015438:	57                   	push   edi
c0015439:	57                   	push   edi
c001543a:	68 91 27 02 c0       	push   0xc0022791
c001543f:	53                   	push   ebx
c0015440:	e8 bd b3 ff ff       	call   c0010802 <Device::setName(char const*)>
c0015445:	b1 c1                	mov    cl,0xc1
c0015447:	88 c8                	mov    al,cl
c0015449:	e6 22                	out    0x22,al
c001544b:	e4 23                	in     al,0x23
c001544d:	88 c2                	mov    dl,al
c001544f:	88 c8                	mov    al,cl
c0015451:	e6 22                	out    0x22,al
c0015453:	88 d0                	mov    al,dl
c0015455:	83 c8 10             	or     eax,0x10
c0015458:	e6 23                	out    0x23,al
c001545a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015461:	89 d0                	mov    eax,edx
c0015463:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015466:	40                   	inc    eax
c0015467:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001546d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015471:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015477:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001547c:	e9 a8 00 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x93d>
c0015481:	83 f8 06             	cmp    eax,0x6
c0015484:	75 0c                	jne    c0015492 <CPU::detectFeatures()+0x8a6>
c0015486:	56                   	push   esi
c0015487:	56                   	push   esi
c0015488:	68 42 27 02 c0       	push   0xc0022742
c001548d:	e9 91 00 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c0015492:	83 f9 04             	cmp    ecx,0x4
c0015495:	75 0c                	jne    c00154a3 <CPU::detectFeatures()+0x8b7>
c0015497:	51                   	push   ecx
c0015498:	51                   	push   ecx
c0015499:	68 4e 27 02 c0       	push   0xc002274e
c001549e:	e9 80 00 00 00       	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154a3:	52                   	push   edx
c00154a4:	52                   	push   edx
c00154a5:	68 9c 27 02 c0       	push   0xc002279c
c00154aa:	eb 77                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154ac:	83 f8 07             	cmp    eax,0x7
c00154af:	75 09                	jne    c00154ba <CPU::detectFeatures()+0x8ce>
c00154b1:	50                   	push   eax
c00154b2:	50                   	push   eax
c00154b3:	68 a6 27 02 c0       	push   0xc00227a6
c00154b8:	eb 69                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154ba:	83 f8 0a             	cmp    eax,0xa
c00154bd:	75 09                	jne    c00154c8 <CPU::detectFeatures()+0x8dc>
c00154bf:	50                   	push   eax
c00154c0:	50                   	push   eax
c00154c1:	68 b1 27 02 c0       	push   0xc00227b1
c00154c6:	eb 5b                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154c8:	83 f8 0b             	cmp    eax,0xb
c00154cb:	75 09                	jne    c00154d6 <CPU::detectFeatures()+0x8ea>
c00154cd:	50                   	push   eax
c00154ce:	50                   	push   eax
c00154cf:	68 b9 27 02 c0       	push   0xc00227b9
c00154d4:	eb 4d                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154d6:	83 f8 08             	cmp    eax,0x8
c00154d9:	75 09                	jne    c00154e4 <CPU::detectFeatures()+0x8f8>
c00154db:	50                   	push   eax
c00154dc:	50                   	push   eax
c00154dd:	68 c2 27 02 c0       	push   0xc00227c2
c00154e2:	eb 3f                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154e4:	83 f8 09             	cmp    eax,0x9
c00154e7:	75 09                	jne    c00154f2 <CPU::detectFeatures()+0x906>
c00154e9:	50                   	push   eax
c00154ea:	50                   	push   eax
c00154eb:	68 ca 27 02 c0       	push   0xc00227ca
c00154f0:	eb 31                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c00154f2:	83 f8 05             	cmp    eax,0x5
c00154f5:	75 09                	jne    c0015500 <CPU::detectFeatures()+0x914>
c00154f7:	50                   	push   eax
c00154f8:	50                   	push   eax
c00154f9:	68 d2 27 02 c0       	push   0xc00227d2
c00154fe:	eb 23                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c0015500:	83 f8 0c             	cmp    eax,0xc
c0015503:	75 09                	jne    c001550e <CPU::detectFeatures()+0x922>
c0015505:	55                   	push   ebp
c0015506:	55                   	push   ebp
c0015507:	68 e0 27 02 c0       	push   0xc00227e0
c001550c:	eb 15                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001550e:	83 f8 0d             	cmp    eax,0xd
c0015511:	75 09                	jne    c001551c <CPU::detectFeatures()+0x930>
c0015513:	57                   	push   edi
c0015514:	57                   	push   edi
c0015515:	68 eb 27 02 c0       	push   0xc00227eb
c001551a:	eb 07                	jmp    c0015523 <CPU::detectFeatures()+0x937>
c001551c:	56                   	push   esi
c001551d:	56                   	push   esi
c001551e:	68 ff 27 02 c0       	push   0xc00227ff
c0015523:	53                   	push   ebx
c0015524:	e8 d9 b2 ff ff       	call   c0010802 <Device::setName(char const*)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	e9 82 00 00 00       	jmp    c00155b3 <CPU::detectFeatures()+0x9c7>
c0015531:	51                   	push   ecx
c0015532:	51                   	push   ecx
c0015533:	68 4b 26 02 c0       	push   0xc002264b
c0015538:	57                   	push   edi
c0015539:	e8 1b b2 fe ff       	call   c0000759 <strcpy>
c001553e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015548:	e8 df ac fe ff       	call   c000022c <is486>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	85 c0                	test   eax,eax
c0015552:	74 2d                	je     c0015581 <CPU::detectFeatures()+0x995>
c0015554:	52                   	push   edx
c0015555:	52                   	push   edx
c0015556:	68 0b 28 02 c0       	push   0xc002280b
c001555b:	53                   	push   ebx
c001555c:	e8 a1 b2 ff ff       	call   c0010802 <Device::setName(char const*)>
c0015561:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015568:	e8 db a5 00 00       	call   c001fb48 <CPU::readCR0()>
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	83 e0 14             	and    eax,0x14
c0015573:	83 f8 04             	cmp    eax,0x4
c0015576:	75 1f                	jne    c0015597 <CPU::detectFeatures()+0x9ab>
c0015578:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001557f:	eb 32                	jmp    c00155b3 <CPU::detectFeatures()+0x9c7>
c0015581:	50                   	push   eax
c0015582:	50                   	push   eax
c0015583:	68 16 28 02 c0       	push   0xc0022816
c0015588:	53                   	push   ebx
c0015589:	e8 74 b2 ff ff       	call   c0010802 <Device::setName(char const*)>
c001558e:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015595:	eb d1                	jmp    c0015568 <CPU::detectFeatures()+0x97c>
c0015597:	e8 6b ac fe ff       	call   c0000207 <hasLegacyFPU>
c001559c:	83 e0 01             	and    eax,0x1
c001559f:	8d 14 00             	lea    edx,[eax+eax*1]
c00155a2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155a8:	83 e0 fd             	and    eax,0xfffffffd
c00155ab:	09 d0                	or     eax,edx
c00155ad:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155b3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155ba:	83 c4 4c             	add    esp,0x4c
c00155bd:	5b                   	pop    ebx
c00155be:	5e                   	pop    esi
c00155bf:	5f                   	pop    edi
c00155c0:	5d                   	pop    ebp
c00155c1:	c3                   	ret    

c00155c2 <CPU::setupSMEP()>:
c00155c2:	83 ec 0c             	sub    esp,0xc
c00155c5:	e8 48 a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155ca:	0d 00 00 10 00       	or     eax,0x100000
c00155cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155d3:	83 c4 0c             	add    esp,0xc
c00155d6:	e9 52 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c00155db:	90                   	nop

c00155dc <CPU::setupUMIP()>:
c00155dc:	83 ec 0c             	sub    esp,0xc
c00155df:	e8 2e a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155e4:	80 cc 08             	or     ah,0x8
c00155e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155eb:	83 c4 0c             	add    esp,0xc
c00155ee:	e9 3a a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c00155f3:	90                   	nop

c00155f4 <CPU::setupTSC()>:
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	e8 16 a8 00 00       	call   c001fe12 <CPU::readCR4()>
c00155fc:	83 c8 04             	or     eax,0x4
c00155ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015603:	83 c4 0c             	add    esp,0xc
c0015606:	e9 22 a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c001560b:	90                   	nop

c001560c <CPU::setupLargePages()>:
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	e8 fe a7 00 00       	call   c001fe12 <CPU::readCR4()>
c0015614:	83 c8 10             	or     eax,0x10
c0015617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001561b:	83 c4 0c             	add    esp,0xc
c001561e:	e9 0a a8 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>
c0015623:	90                   	nop

c0015624 <CPU::setupPAT()>:
c0015624:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0015629:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015630:	74 2c                	je     c001565e <CPU::setupPAT()+0x3a>
c0015632:	53                   	push   ebx
c0015633:	83 ec 10             	sub    esp,0x10
c0015636:	68 77 02 00 00       	push   0x277
c001563b:	50                   	push   eax
c001563c:	e8 35 5f ff ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c0015641:	83 e2 f8             	and    edx,0xfffffff8
c0015644:	83 ca 01             	or     edx,0x1
c0015647:	52                   	push   edx
c0015648:	50                   	push   eax
c0015649:	68 77 02 00 00       	push   0x277
c001564e:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c0015654:	e8 49 5f ff ff       	call   c000b5a2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015659:	83 c4 28             	add    esp,0x28
c001565c:	5b                   	pop    ebx
c001565d:	c3                   	ret    
c001565e:	c3                   	ret    
c001565f:	90                   	nop

c0015660 <CPU::setupMTRR()>:
c0015660:	c3                   	ret    
c0015661:	90                   	nop

c0015662 <CPU::setupGlobalPages()>:
c0015662:	83 ec 0c             	sub    esp,0xc
c0015665:	e8 a8 a7 00 00       	call   c001fe12 <CPU::readCR4()>
c001566a:	0c 80                	or     al,0x80
c001566c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015670:	83 c4 0c             	add    esp,0xc
c0015673:	e9 b5 a7 00 00       	jmp    c001fe2d <CPU::writeCR4(unsigned long)>

c0015678 <CPU::allowUsermodeDataAccess()>:
c0015678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001567c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015683:	74 03                	je     c0015688 <CPU::allowUsermodeDataAccess()+0x10>
c0015685:	0f 01 cb             	stac   
c0015688:	c3                   	ret    
c0015689:	90                   	nop

c001568a <CPU::prohibitUsermodeDataAccess()>:
c001568a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001568e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015695:	74 03                	je     c001569a <CPU::prohibitUsermodeDataAccess()+0x10>
c0015697:	0f 01 ca             	clac   
c001569a:	c3                   	ret    
c001569b:	90                   	nop

c001569c <CPU::setupSMAP()>:
c001569c:	53                   	push   ebx
c001569d:	83 ec 08             	sub    esp,0x8
c00156a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156a4:	e8 69 a7 00 00       	call   c001fe12 <CPU::readCR4()>
c00156a9:	83 ec 0c             	sub    esp,0xc
c00156ac:	0d 00 00 20 00       	or     eax,0x200000
c00156b1:	50                   	push   eax
c00156b2:	e8 76 a7 00 00       	call   c001fe2d <CPU::writeCR4(unsigned long)>
c00156b7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156bb:	83 c4 18             	add    esp,0x18
c00156be:	5b                   	pop    ebx
c00156bf:	eb c9                	jmp    c001568a <CPU::prohibitUsermodeDataAccess()>
c00156c1:	90                   	nop

c00156c2 <CPU::setupFeatures()>:
c00156c2:	53                   	push   ebx
c00156c3:	83 ec 08             	sub    esp,0x8
c00156c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156ca:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156d1:	74 0c                	je     c00156df <CPU::setupFeatures()+0x1d>
c00156d3:	83 ec 0c             	sub    esp,0xc
c00156d6:	53                   	push   ebx
c00156d7:	e8 e6 fe ff ff       	call   c00155c2 <CPU::setupSMEP()>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156e6:	74 0c                	je     c00156f4 <CPU::setupFeatures()+0x32>
c00156e8:	83 ec 0c             	sub    esp,0xc
c00156eb:	53                   	push   ebx
c00156ec:	e8 ab ff ff ff       	call   c001569c <CPU::setupSMAP()>
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00156fb:	74 0c                	je     c0015709 <CPU::setupFeatures()+0x47>
c00156fd:	83 ec 0c             	sub    esp,0xc
c0015700:	53                   	push   ebx
c0015701:	e8 d6 fe ff ff       	call   c00155dc <CPU::setupUMIP()>
c0015706:	83 c4 10             	add    esp,0x10
c0015709:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015710:	74 0c                	je     c001571e <CPU::setupFeatures()+0x5c>
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	53                   	push   ebx
c0015716:	e8 d9 fe ff ff       	call   c00155f4 <CPU::setupTSC()>
c001571b:	83 c4 10             	add    esp,0x10
c001571e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015725:	74 0c                	je     c0015733 <CPU::setupFeatures()+0x71>
c0015727:	83 ec 0c             	sub    esp,0xc
c001572a:	53                   	push   ebx
c001572b:	e8 dc fe ff ff       	call   c001560c <CPU::setupLargePages()>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001573a:	74 0c                	je     c0015748 <CPU::setupFeatures()+0x86>
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	53                   	push   ebx
c0015740:	e8 1d ff ff ff       	call   c0015662 <CPU::setupGlobalPages()>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001574f:	74 0d                	je     c001575e <CPU::setupFeatures()+0x9c>
c0015751:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015755:	83 c4 08             	add    esp,0x8
c0015758:	5b                   	pop    ebx
c0015759:	e9 c6 fe ff ff       	jmp    c0015624 <CPU::setupPAT()>
c001575e:	83 c4 08             	add    esp,0x8
c0015761:	5b                   	pop    ebx
c0015762:	c3                   	ret    
c0015763:	90                   	nop

c0015764 <CPU::open(int, int, void*)>:
c0015764:	57                   	push   edi
c0015765:	56                   	push   esi
c0015766:	53                   	push   ebx
c0015767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001576b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001576f:	83 ec 0c             	sub    esp,0xc
c0015772:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015778:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001577e:	50                   	push   eax
c001577f:	e8 e2 60 ff ff       	call   c000b866 <GDT::setup()>
c0015784:	83 c4 0c             	add    esp,0xc
c0015787:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001578d:	6a 00                	push   0x0
c001578f:	68 ef be ad de       	push   0xdeadbeef
c0015794:	57                   	push   edi
c0015795:	e8 62 83 ff ff       	call   c000dafc <TSS::setup(unsigned long, unsigned long)>
c001579a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001579d:	e8 3a 83 ff ff       	call   c000dadc <TSS::flush()>
c00157a2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00157ab:	e8 10 63 ff ff       	call   c000bac0 <IDT::setup()>
c00157b0:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157b7:	e8 68 a6 00 00       	call   c001fe24 <CPU::writeDR7(unsigned long)>
c00157bc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157c6:	e8 e4 6d ff ff       	call   c000c5af <Phys::allocatePage()>
c00157cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157d1:	89 30                	mov    DWORD PTR [eax],esi
c00157d3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157d9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157dc:	58                   	pop    eax
c00157dd:	5a                   	pop    edx
c00157de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157e8:	e8 a3 93 ff ff       	call   c000eb90 <VAS::setCPUSpecific(unsigned long)>
c00157ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f0:	e8 f7 f3 ff ff       	call   c0014bec <CPU::detectFeatures()>
c00157f5:	e8 22 c3 ff ff       	call   c0011b1c <setupInterruptController()>
c00157fa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015800:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c0015805:	83 e0 10             	and    eax,0x10
c0015808:	83 f8 01             	cmp    eax,0x1
c001580b:	19 c0                	sbb    eax,eax
c001580d:	83 e0 46             	and    eax,0x46
c0015810:	83 c0 1e             	add    eax,0x1e
c0015813:	89 04 24             	mov    DWORD PTR [esp],eax
c0015816:	e8 a7 d6 ff ff       	call   c0012ec2 <setupTimer(int)>
c001581b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015821:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015824:	e8 99 fe ff ff       	call   c00156c2 <CPU::setupFeatures()>
c0015829:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001582c:	e8 3f f1 ff ff       	call   c0014970 <CPU::displayFeatures()>
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	5b                   	pop    ebx
c0015835:	31 c0                	xor    eax,eax
c0015837:	5e                   	pop    esi
c0015838:	5f                   	pop    edi
c0015839:	c3                   	ret    

c001583a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001583a:	56                   	push   esi
c001583b:	53                   	push   ebx
c001583c:	51                   	push   ecx
c001583d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015841:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015845:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015848:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001584b:	88 c1                	mov    cl,al
c001584d:	c0 e9 06             	shr    cl,0x6
c0015850:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015853:	88 c1                	mov    cl,al
c0015855:	66 c1 e8 03          	shr    ax,0x3
c0015859:	83 e1 07             	and    ecx,0x7
c001585c:	83 e0 07             	and    eax,0x7
c001585f:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015863:	88 06                	mov    BYTE PTR [esi],al
c0015865:	74 7f                	je     c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015867:	80 f9 04             	cmp    cl,0x4
c001586a:	74 7a                	je     c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001586c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015870:	75 05                	jne    c0015877 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015872:	80 f9 05             	cmp    cl,0x5
c0015875:	74 6f                	je     c00158e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015877:	84 c9                	test   cl,cl
c0015879:	75 05                	jne    c0015880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001587b:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001587e:	eb 3c                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015880:	80 f9 01             	cmp    cl,0x1
c0015883:	75 05                	jne    c001588a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015885:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015888:	eb 32                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001588a:	80 f9 02             	cmp    cl,0x2
c001588d:	75 05                	jne    c0015894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c001588f:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015892:	eb 28                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015894:	31 c0                	xor    eax,eax
c0015896:	80 f9 03             	cmp    cl,0x3
c0015899:	75 05                	jne    c00158a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c001589b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001589e:	eb 1c                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a0:	80 f9 05             	cmp    cl,0x5
c00158a3:	75 05                	jne    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158a5:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158a8:	eb 12                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158aa:	80 f9 06             	cmp    cl,0x6
c00158ad:	75 05                	jne    c00158b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158af:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158b2:	eb 08                	jmp    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b4:	80 f9 07             	cmp    cl,0x7
c00158b7:	75 03                	jne    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b9:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158bc:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158c0:	75 10                	jne    c00158d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158c2:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158c6:	b9 03 00 00 00       	mov    ecx,0x3
c00158cb:	01 d0                	add    eax,edx
c00158cd:	e9 42 01 00 00       	jmp    c0015a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158d2:	b9 02 00 00 00       	mov    ecx,0x2
c00158d7:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158db:	0f 85 33 01 00 00    	jne    c0015a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158e1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158e4:	eb 18                	jmp    c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158e6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158ea:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158ef:	80 f9 05             	cmp    cl,0x5
c00158f2:	0f 94 c0             	sete   al
c00158f5:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00158f9:	74 0d                	je     c0015908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00158fb:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00158fe:	b9 06 00 00 00       	mov    ecx,0x6
c0015903:	e9 0c 01 00 00       	jmp    c0015a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015908:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001590c:	0f 84 06 01 00 00    	je     c0015a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015912:	80 f9 04             	cmp    cl,0x4
c0015915:	0f 85 06 01 00 00    	jne    c0015a21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001591b:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c001591e:	89 c6                	mov    esi,eax
c0015920:	88 c1                	mov    cl,al
c0015922:	66 c1 ee 03          	shr    si,0x3
c0015926:	c0 e9 06             	shr    cl,0x6
c0015929:	83 e6 07             	and    esi,0x7
c001592c:	24 07                	and    al,0x7
c001592e:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015932:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015936:	89 f1                	mov    ecx,esi
c0015938:	75 05                	jne    c001593f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c001593a:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001593d:	eb 4b                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001593f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015944:	75 05                	jne    c001594b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015946:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015949:	eb 3f                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001594b:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015950:	75 05                	jne    c0015957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015952:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015955:	eb 33                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015957:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001595c:	75 05                	jne    c0015963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c001595e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015961:	eb 27                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015963:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015968:	75 05                	jne    c001596f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001596a:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001596d:	eb 1b                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001596f:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015974:	75 05                	jne    c001597b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015976:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015979:	eb 0f                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001597b:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015980:	75 05                	jne    c0015987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015982:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015985:	eb 03                	jmp    c001598a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015987:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001598a:	84 c9                	test   cl,cl
c001598c:	75 05                	jne    c0015993 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001598e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015991:	eb 3c                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015993:	80 f9 01             	cmp    cl,0x1
c0015996:	75 05                	jne    c001599d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0015998:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001599b:	eb 32                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001599d:	80 f9 02             	cmp    cl,0x2
c00159a0:	75 05                	jne    c00159a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159a2:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159a5:	eb 28                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a7:	80 f9 03             	cmp    cl,0x3
c00159aa:	75 05                	jne    c00159b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159ac:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159af:	eb 1e                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b1:	31 c0                	xor    eax,eax
c00159b3:	80 f9 04             	cmp    cl,0x4
c00159b6:	74 17                	je     c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b8:	80 f9 05             	cmp    cl,0x5
c00159bb:	75 05                	jne    c00159c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159bd:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159c0:	eb 0d                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c2:	80 f9 06             	cmp    cl,0x6
c00159c5:	75 05                	jne    c00159cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159c7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159ca:	eb 03                	jmp    c00159cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159cc:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159cf:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159d4:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159d8:	0f 94 c2             	sete   dl
c00159db:	d3 e0                	shl    eax,cl
c00159dd:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159e1:	74 07                	je     c00159ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159e3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159e6:	31 d2                	xor    edx,edx
c00159e8:	eb 23                	jmp    c0015a0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159ea:	01 f0                	add    eax,esi
c00159ec:	b9 03 00 00 00       	mov    ecx,0x3
c00159f1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159f5:	74 33                	je     c0015a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159f7:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00159fb:	75 0d                	jne    c0015a0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00159fd:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a01:	01 c8                	add    eax,ecx
c0015a03:	b9 04 00 00 00       	mov    ecx,0x4
c0015a08:	eb 20                	jmp    c0015a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a0a:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a0d:	b9 07 00 00 00       	mov    ecx,0x7
c0015a12:	eb 16                	jmp    c0015a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a14:	31 d2                	xor    edx,edx
c0015a16:	eb 12                	jmp    c0015a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a18:	b9 02 00 00 00       	mov    ecx,0x2
c0015a1d:	b2 01                	mov    dl,0x1
c0015a1f:	eb 07                	jmp    c0015a28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a21:	31 d2                	xor    edx,edx
c0015a23:	b9 02 00 00 00       	mov    ecx,0x2
c0015a28:	31 c0                	xor    eax,eax
c0015a2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a2e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a30:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a34:	88 11                	mov    BYTE PTR [ecx],dl
c0015a36:	5a                   	pop    edx
c0015a37:	5b                   	pop    ebx
c0015a38:	5e                   	pop    esi
c0015a39:	c3                   	ret    

c0015a3a <Krnl::panic(char const*)>:
c0015a3a:	55                   	push   ebp
c0015a3b:	89 e5                	mov    ebp,esp
c0015a3d:	53                   	push   ebx
c0015a3e:	51                   	push   ecx
c0015a3f:	a1 d0 51 02 c0       	mov    eax,ds:0xc00251d0
c0015a44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a47:	85 c0                	test   eax,eax
c0015a49:	74 02                	je     c0015a4d <Krnl::panic(char const*)+0x13>
c0015a4b:	ff d0                	call   eax
c0015a4d:	fa                   	cli    
c0015a4e:	50                   	push   eax
c0015a4f:	c6 05 d4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251d4,0x1
c0015a56:	50                   	push   eax
c0015a57:	c6 05 c0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023bc0,0x0
c0015a5e:	53                   	push   ebx
c0015a5f:	68 50 28 02 c0       	push   0xc0022850
c0015a64:	e8 a2 97 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0015a69:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a6e:	5a                   	pop    edx
c0015a6f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a75:	51                   	push   ecx
c0015a76:	e8 c0 78 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c0015a7b:	83 c4 0c             	add    esp,0xc
c0015a7e:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a83:	6a 01                	push   0x1
c0015a85:	6a 0f                	push   0xf
c0015a87:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a8d:	50                   	push   eax
c0015a8e:	e8 e7 72 ff ff       	call   c000cd7a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a93:	58                   	pop    eax
c0015a94:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015a99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a9f:	50                   	push   eax
c0015aa0:	e8 39 7b ff ff       	call   c000d5de <VgaText::clearScreen()>
c0015aa5:	58                   	pop    eax
c0015aa6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015aab:	5a                   	pop    edx
c0015aac:	68 69 28 02 c0       	push   0xc0022869
c0015ab1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ab7:	51                   	push   ecx
c0015ab8:	e8 9f 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015abd:	58                   	pop    eax
c0015abe:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015ac3:	5a                   	pop    edx
c0015ac4:	68 10 29 02 c0       	push   0xc0022910
c0015ac9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015acf:	51                   	push   ecx
c0015ad0:	e8 87 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015adb:	5a                   	pop    edx
c0015adc:	68 85 28 02 c0       	push   0xc0022885
c0015ae1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae7:	51                   	push   ecx
c0015ae8:	e8 6f 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015aed:	58                   	pop    eax
c0015aee:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015af3:	5a                   	pop    edx
c0015af4:	53                   	push   ebx
c0015af5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015afb:	51                   	push   ecx
c0015afc:	e8 5b 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b01:	5b                   	pop    ebx
c0015b02:	58                   	pop    eax
c0015b03:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b08:	68 a5 28 02 c0       	push   0xc00228a5
c0015b0d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b13:	50                   	push   eax
c0015b14:	e8 43 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b19:	58                   	pop    eax
c0015b1a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b1f:	5a                   	pop    edx
c0015b20:	68 4c 29 02 c0       	push   0xc002294c
c0015b25:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b2b:	51                   	push   ecx
c0015b2c:	e8 2b 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b31:	5b                   	pop    ebx
c0015b32:	58                   	pop    eax
c0015b33:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b38:	68 85 28 02 c0       	push   0xc0022885
c0015b3d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b43:	50                   	push   eax
c0015b44:	e8 13 7c ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b49:	58                   	pop    eax
c0015b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b4f:	5a                   	pop    edx
c0015b50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b53:	83 c0 0c             	add    eax,0xc
c0015b56:	50                   	push   eax
c0015b57:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b5c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b62:	51                   	push   ecx
c0015b63:	e8 f4 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b68:	5b                   	pop    ebx
c0015b69:	58                   	pop    eax
c0015b6a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b6f:	68 a4 28 02 c0       	push   0xc00228a4
c0015b74:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b7a:	50                   	push   eax
c0015b7b:	e8 dc 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b80:	58                   	pop    eax
c0015b81:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b86:	5a                   	pop    edx
c0015b87:	68 78 29 02 c0       	push   0xc0022978
c0015b8c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b92:	51                   	push   ecx
c0015b93:	e8 c4 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015b98:	5b                   	pop    ebx
c0015b99:	58                   	pop    eax
c0015b9a:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015b9f:	68 b8 29 02 c0       	push   0xc00229b8
c0015ba4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015baa:	50                   	push   eax
c0015bab:	e8 ac 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015bb0:	58                   	pop    eax
c0015bb1:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015bb6:	5a                   	pop    edx
c0015bb7:	68 90 28 02 c0       	push   0xc0022890
c0015bbc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bc2:	51                   	push   ecx
c0015bc3:	e8 94 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015bc8:	5b                   	pop    ebx
c0015bc9:	58                   	pop    eax
c0015bca:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bcd:	50                   	push   eax
c0015bce:	68 a8 28 02 c0       	push   0xc00228a8
c0015bd3:	e8 33 96 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0015bd8:	58                   	pop    eax
c0015bd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bdc:	5a                   	pop    edx
c0015bdd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015be0:	51                   	push   ecx
c0015be1:	68 b1 28 02 c0       	push   0xc00228b1
c0015be6:	e8 20 96 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0015beb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bee:	5b                   	pop    ebx
c0015bef:	5a                   	pop    edx
c0015bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bf5:	51                   	push   ecx
c0015bf6:	68 ba 28 02 c0       	push   0xc00228ba
c0015bfb:	e8 0b 96 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0015c00:	5b                   	pop    ebx
c0015c01:	58                   	pop    eax
c0015c02:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c07:	68 fc 29 02 c0       	push   0xc00229fc
c0015c0c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c12:	50                   	push   eax
c0015c13:	e8 44 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c18:	58                   	pop    eax
c0015c19:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c1e:	5a                   	pop    edx
c0015c1f:	68 c3 28 02 c0       	push   0xc00228c3
c0015c24:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c2a:	51                   	push   ecx
c0015c2b:	e8 2c 7b ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c30:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c35:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c3b:	e8 08 9f 00 00       	call   c001fb48 <CPU::readCR0()>
c0015c40:	5a                   	pop    edx
c0015c41:	59                   	pop    ecx
c0015c42:	50                   	push   eax
c0015c43:	53                   	push   ebx
c0015c44:	e8 39 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015c49:	5b                   	pop    ebx
c0015c4a:	58                   	pop    eax
c0015c4b:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c50:	68 cd 28 02 c0       	push   0xc00228cd
c0015c55:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c5b:	50                   	push   eax
c0015c5c:	e8 fb 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c61:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c66:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c6c:	e8 c5 a1 00 00       	call   c001fe36 <CPU::readCR2()>
c0015c71:	5a                   	pop    edx
c0015c72:	59                   	pop    ecx
c0015c73:	50                   	push   eax
c0015c74:	53                   	push   ebx
c0015c75:	e8 08 7b ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015c7a:	5b                   	pop    ebx
c0015c7b:	58                   	pop    eax
c0015c7c:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c81:	68 d7 28 02 c0       	push   0xc00228d7
c0015c86:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c8c:	50                   	push   eax
c0015c8d:	e8 ca 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015c92:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015c97:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c9d:	e8 33 9b 00 00       	call   c001f7d5 <CPU::readCR3()>
c0015ca2:	5a                   	pop    edx
c0015ca3:	59                   	pop    ecx
c0015ca4:	50                   	push   eax
c0015ca5:	53                   	push   ebx
c0015ca6:	e8 d7 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015cab:	5b                   	pop    ebx
c0015cac:	58                   	pop    eax
c0015cad:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cb2:	68 ea 28 02 c0       	push   0xc00228ea
c0015cb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cbd:	50                   	push   eax
c0015cbe:	e8 99 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015cc3:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cc8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cce:	e8 3f a1 00 00       	call   c001fe12 <CPU::readCR4()>
c0015cd3:	5a                   	pop    edx
c0015cd4:	59                   	pop    ecx
c0015cd5:	50                   	push   eax
c0015cd6:	53                   	push   ebx
c0015cd7:	e8 a6 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015cdc:	5b                   	pop    ebx
c0015cdd:	58                   	pop    eax
c0015cde:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015ce3:	68 f4 28 02 c0       	push   0xc00228f4
c0015ce8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cee:	50                   	push   eax
c0015cef:	e8 68 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015cf4:	5a                   	pop    edx
c0015cf5:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015cfa:	59                   	pop    ecx
c0015cfb:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015cfe:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d04:	53                   	push   ebx
c0015d05:	50                   	push   eax
c0015d06:	e8 77 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015d0b:	58                   	pop    eax
c0015d0c:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d11:	5a                   	pop    edx
c0015d12:	68 0b 29 02 c0       	push   0xc002290b
c0015d17:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d1d:	51                   	push   ecx
c0015d1e:	e8 39 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015d23:	5b                   	pop    ebx
c0015d24:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d29:	5a                   	pop    edx
c0015d2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d33:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d36:	51                   	push   ecx
c0015d37:	50                   	push   eax
c0015d38:	e8 45 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015d3d:	5b                   	pop    ebx
c0015d3e:	58                   	pop    eax
c0015d3f:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d44:	68 0b 29 02 c0       	push   0xc002290b
c0015d49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d4f:	50                   	push   eax
c0015d50:	e8 07 7a ff ff       	call   c000d75c <VgaText::puts(char const*)>
c0015d55:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d58:	59                   	pop    ecx
c0015d59:	a1 d4 5b 02 c0       	mov    eax,ds:0xc0025bd4
c0015d5e:	5b                   	pop    ebx
c0015d5f:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d67:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d6a:	52                   	push   edx
c0015d6b:	50                   	push   eax
c0015d6c:	e8 11 7a ff ff       	call   c000d782 <VgaText::putx(unsigned int)>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	b2 fe                	mov    dl,0xfe
c0015d76:	e4 60                	in     al,0x60
c0015d78:	3c 1c                	cmp    al,0x1c
c0015d7a:	74 04                	je     c0015d80 <Krnl::panic(char const*)+0x346>
c0015d7c:	3c 5a                	cmp    al,0x5a
c0015d7e:	75 f6                	jne    c0015d76 <Krnl::panic(char const*)+0x33c>
c0015d80:	e4 64                	in     al,0x64
c0015d82:	a8 02                	test   al,0x2
c0015d84:	75 fa                	jne    c0015d80 <Krnl::panic(char const*)+0x346>
c0015d86:	88 d0                	mov    al,dl
c0015d88:	e6 64                	out    0x64,al
c0015d8a:	fa                   	cli    
c0015d8b:	f4                   	hlt    
c0015d8c:	eb e8                	jmp    c0015d76 <Krnl::panic(char const*)+0x33c>

c0015d8e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d8e:	55                   	push   ebp
c0015d8f:	57                   	push   edi
c0015d90:	56                   	push   esi
c0015d91:	53                   	push   ebx
c0015d92:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d98:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015d9f:	8d 46 01             	lea    eax,[esi+0x1]
c0015da2:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015da4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015da8:	80 fb 40             	cmp    bl,0x40
c0015dab:	75 19                	jne    c0015dc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015dad:	8a 06                	mov    al,BYTE PTR [esi]
c0015daf:	84 c0                	test   al,al
c0015db1:	74 07                	je     c0015dba <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015db3:	3c 3a                	cmp    al,0x3a
c0015db5:	74 03                	je     c0015dba <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015db7:	46                   	inc    esi
c0015db8:	eb f3                	jmp    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dba:	84 c0                	test   al,al
c0015dbc:	0f 84 1f 01 00 00    	je     c0015ee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dc2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dc5:	46                   	inc    esi
c0015dc6:	50                   	push   eax
c0015dc7:	6a 40                	push   0x40
c0015dc9:	6a 00                	push   0x0
c0015dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dcf:	50                   	push   eax
c0015dd0:	e8 e5 a8 fe ff       	call   c00006ba <memset>
c0015dd5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015ddc:	31 d2                	xor    edx,edx
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	8a 07                	mov    al,BYTE PTR [edi]
c0015de3:	84 c0                	test   al,al
c0015de5:	0f 84 f6 00 00 00    	je     c0015ee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015deb:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015df1:	0f 8f ea 00 00 00    	jg     c0015ee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015df7:	3c 0a                	cmp    al,0xa
c0015df9:	0f 85 d3 00 00 00    	jne    c0015ed2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015dff:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e04:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e08:	f6 c1 df             	test   cl,0xdf
c0015e0b:	0f 94 c2             	sete   dl
c0015e0e:	80 f9 23             	cmp    cl,0x23
c0015e11:	0f 94 c0             	sete   al
c0015e14:	08 c2                	or     dl,al
c0015e16:	75 47                	jne    c0015e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e18:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e1b:	3c 01                	cmp    al,0x1
c0015e1d:	76 40                	jbe    c0015e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e1f:	80 f9 5b             	cmp    cl,0x5b
c0015e22:	75 3f                	jne    c0015e63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e24:	80 fb 40             	cmp    bl,0x40
c0015e27:	75 36                	jne    c0015e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e29:	83 ec 0c             	sub    esp,0xc
c0015e2c:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e30:	55                   	push   ebp
c0015e31:	e8 a1 a8 fe ff       	call   c00006d7 <strlen>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	83 f8 3f             	cmp    eax,0x3f
c0015e3c:	0f 87 9f 00 00 00    	ja     c0015ee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e42:	50                   	push   eax
c0015e43:	50                   	push   eax
c0015e44:	55                   	push   ebp
c0015e45:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e49:	55                   	push   ebp
c0015e4a:	e8 0a a9 fe ff       	call   c0000759 <strcpy>
c0015e4f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e52:	e8 80 a8 fe ff       	call   c00006d7 <strlen>
c0015e57:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e5c:	83 c4 10             	add    esp,0x10
c0015e5f:	31 c9                	xor    ecx,ecx
c0015e61:	eb 76                	jmp    c0015ed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e63:	80 fb 40             	cmp    bl,0x40
c0015e66:	74 06                	je     c0015e6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e68:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e6c:	eb 19                	jmp    c0015e87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e6e:	51                   	push   ecx
c0015e6f:	51                   	push   ecx
c0015e70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e74:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e78:	50                   	push   eax
c0015e79:	e8 2c a9 fe ff       	call   c00007aa <strcmp>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	85 c0                	test   eax,eax
c0015e83:	75 da                	jne    c0015e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e85:	eb e1                	jmp    c0015e68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e87:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e8a:	84 c0                	test   al,al
c0015e8c:	0f 94 c1             	sete   cl
c0015e8f:	3c 3d                	cmp    al,0x3d
c0015e91:	0f 94 c2             	sete   dl
c0015e94:	08 d1                	or     cl,dl
c0015e96:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015e9a:	75 03                	jne    c0015e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015e9c:	45                   	inc    ebp
c0015e9d:	eb e8                	jmp    c0015e87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e9f:	84 c0                	test   al,al
c0015ea1:	74 3e                	je     c0015ee1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ea3:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015ea7:	52                   	push   edx
c0015ea8:	52                   	push   edx
c0015ea9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ead:	50                   	push   eax
c0015eae:	56                   	push   esi
c0015eaf:	e8 f6 a8 fe ff       	call   c00007aa <strcmp>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	85 c0                	test   eax,eax
c0015eb9:	75 a4                	jne    c0015e5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ebb:	50                   	push   eax
c0015ebc:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ebf:	50                   	push   eax
c0015ec0:	52                   	push   edx
c0015ec1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ec8:	e8 8c a8 fe ff       	call   c0000759 <strcpy>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	eb 14                	jmp    c0015ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ed2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ed5:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ed9:	47                   	inc    edi
c0015eda:	89 ca                	mov    edx,ecx
c0015edc:	e9 00 ff ff ff       	jmp    c0015de1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ee1:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ee6:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015eea:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015ef0:	5b                   	pop    ebx
c0015ef1:	5e                   	pop    esi
c0015ef2:	5f                   	pop    edi
c0015ef3:	5d                   	pop    ebp
c0015ef4:	c3                   	ret    

c0015ef5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ef5:	57                   	push   edi
c0015ef6:	56                   	push   esi
c0015ef7:	53                   	push   ebx
c0015ef8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015efe:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f05:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f0c:	53                   	push   ebx
c0015f0d:	e8 c5 a7 fe ff       	call   c00006d7 <strlen>
c0015f12:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f15:	89 c7                	mov    edi,eax
c0015f17:	e8 bb a7 fe ff       	call   c00006d7 <strlen>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f23:	31 ff                	xor    edi,edi
c0015f25:	3d ff 00 00 00       	cmp    eax,0xff
c0015f2a:	0f 87 18 01 00 00    	ja     c0016048 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f30:	51                   	push   ecx
c0015f31:	51                   	push   ecx
c0015f32:	56                   	push   esi
c0015f33:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f37:	56                   	push   esi
c0015f38:	e8 1c a8 fe ff       	call   c0000759 <strcpy>
c0015f3d:	58                   	pop    eax
c0015f3e:	5a                   	pop    edx
c0015f3f:	68 34 2e 02 c0       	push   0xc0022e34
c0015f44:	56                   	push   esi
c0015f45:	e8 c6 a8 fe ff       	call   c0000810 <strcat>
c0015f4a:	59                   	pop    ecx
c0015f4b:	58                   	pop    eax
c0015f4c:	53                   	push   ebx
c0015f4d:	56                   	push   esi
c0015f4e:	e8 bd a8 fe ff       	call   c0000810 <strcat>
c0015f53:	58                   	pop    eax
c0015f54:	5a                   	pop    edx
c0015f55:	68 22 2a 02 c0       	push   0xc0022a22
c0015f5a:	56                   	push   esi
c0015f5b:	e8 b0 a8 fe ff       	call   c0000810 <strcat>
c0015f60:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f67:	e8 6a 91 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0015f6c:	83 c4 0c             	add    esp,0xc
c0015f6f:	89 c3                	mov    ebx,eax
c0015f71:	ff 35 d4 5b 02 c0    	push   DWORD PTR ds:0xc0025bd4
c0015f77:	56                   	push   esi
c0015f78:	50                   	push   eax
c0015f79:	e8 c4 97 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0015f7e:	59                   	pop    ecx
c0015f7f:	5e                   	pop    esi
c0015f80:	6a 01                	push   0x1
c0015f82:	53                   	push   ebx
c0015f83:	e8 1e 98 ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c0015f88:	83 c4 10             	add    esp,0x10
c0015f8b:	85 c0                	test   eax,eax
c0015f8d:	74 08                	je     c0015f97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f8f:	83 ec 0c             	sub    esp,0xc
c0015f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f94:	53                   	push   ebx
c0015f95:	eb 2e                	jmp    c0015fc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015f97:	52                   	push   edx
c0015f98:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015f9c:	50                   	push   eax
c0015f9d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fa1:	50                   	push   eax
c0015fa2:	53                   	push   ebx
c0015fa3:	e8 aa 9a ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c0015fa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	89 c1                	mov    ecx,eax
c0015fb1:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fb5:	75 13                	jne    c0015fca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fb7:	83 ec 0c             	sub    esp,0xc
c0015fba:	53                   	push   ebx
c0015fbb:	e8 44 98 ff ff       	call   c000f804 <File::close()>
c0015fc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fc8:	eb 7b                	jmp    c0016045 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fca:	83 ec 0c             	sub    esp,0xc
c0015fcd:	50                   	push   eax
c0015fce:	e8 06 60 ff ff       	call   c000bfd9 <malloc>
c0015fd3:	89 c6                	mov    esi,eax
c0015fd5:	58                   	pop    eax
c0015fd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fd8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fdc:	52                   	push   edx
c0015fdd:	56                   	push   esi
c0015fde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe6:	53                   	push   ebx
c0015fe7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fea:	83 c4 20             	add    esp,0x20
c0015fed:	85 c0                	test   eax,eax
c0015fef:	75 0a                	jne    c0015ffb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ff5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015ff9:	74 18                	je     c0016013 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015ffb:	83 ec 0c             	sub    esp,0xc
c0015ffe:	31 ff                	xor    edi,edi
c0016000:	53                   	push   ebx
c0016001:	e8 fe 97 ff ff       	call   c000f804 <File::close()>
c0016006:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016008:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001600b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001600e:	83 c4 10             	add    esp,0x10
c0016011:	eb 35                	jmp    c0016048 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0016013:	83 ec 0c             	sub    esp,0xc
c0016016:	53                   	push   ebx
c0016017:	e8 e8 97 ff ff       	call   c000f804 <File::close()>
c001601c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001601e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016021:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016024:	83 c4 0c             	add    esp,0xc
c0016027:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001602e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016035:	56                   	push   esi
c0016036:	e8 53 fd ff ff       	call   c0015d8e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001603b:	89 34 24             	mov    DWORD PTR [esp],esi
c001603e:	89 c7                	mov    edi,eax
c0016040:	e8 a4 5f ff ff       	call   c000bfe9 <free>
c0016045:	83 c4 10             	add    esp,0x10
c0016048:	81 c4 10 01 00 00    	add    esp,0x110
c001604e:	89 f8                	mov    eax,edi
c0016050:	5b                   	pop    ebx
c0016051:	5e                   	pop    esi
c0016052:	5f                   	pop    edi
c0016053:	c3                   	ret    

c0016054 <Reg::getLine(char*, char*, char*)>:
c0016054:	57                   	push   edi
c0016055:	56                   	push   esi
c0016056:	53                   	push   ebx
c0016057:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001605b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001605f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016063:	57                   	push   edi
c0016064:	56                   	push   esi
c0016065:	53                   	push   ebx
c0016066:	68 27 2a 02 c0       	push   0xc0022a27
c001606b:	e8 85 fe ff ff       	call   c0015ef5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016070:	83 c4 10             	add    esp,0x10
c0016073:	84 c0                	test   al,al
c0016075:	75 10                	jne    c0016087 <Reg::getLine(char*, char*, char*)+0x33>
c0016077:	57                   	push   edi
c0016078:	56                   	push   esi
c0016079:	53                   	push   ebx
c001607a:	68 4c 2a 02 c0       	push   0xc0022a4c
c001607f:	e8 71 fe ff ff       	call   c0015ef5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016084:	83 c4 10             	add    esp,0x10
c0016087:	5b                   	pop    ebx
c0016088:	5e                   	pop    esi
c0016089:	5f                   	pop    edi
c001608a:	c3                   	ret    

c001608b <Reg::readInt(char*, char*, int*)>:
c001608b:	55                   	push   ebp
c001608c:	57                   	push   edi
c001608d:	56                   	push   esi
c001608e:	53                   	push   ebx
c001608f:	81 ec f0 00 00 00    	sub    esp,0xf0
c0016095:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016099:	57                   	push   edi
c001609a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160a8:	e8 a7 ff ff ff       	call   c0016054 <Reg::getLine(char*, char*, char*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	84 c0                	test   al,al
c00160b2:	0f 84 b2 00 00 00    	je     c001616a <Reg::readInt(char*, char*, int*)+0xdf>
c00160b8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160bc:	80 fa 2b             	cmp    dl,0x2b
c00160bf:	74 0c                	je     c00160cd <Reg::readInt(char*, char*, int*)+0x42>
c00160c1:	80 fa 2d             	cmp    dl,0x2d
c00160c4:	75 0e                	jne    c00160d4 <Reg::readInt(char*, char*, int*)+0x49>
c00160c6:	ba 01 00 00 00       	mov    edx,0x1
c00160cb:	eb 0b                	jmp    c00160d8 <Reg::readInt(char*, char*, int*)+0x4d>
c00160cd:	ba 01 00 00 00       	mov    edx,0x1
c00160d2:	eb 02                	jmp    c00160d6 <Reg::readInt(char*, char*, int*)+0x4b>
c00160d4:	31 d2                	xor    edx,edx
c00160d6:	31 c0                	xor    eax,eax
c00160d8:	be 0a 00 00 00       	mov    esi,0xa
c00160dd:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160e2:	75 20                	jne    c0016104 <Reg::readInt(char*, char*, int*)+0x79>
c00160e4:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160e8:	80 f9 78             	cmp    cl,0x78
c00160eb:	75 0a                	jne    c00160f7 <Reg::readInt(char*, char*, int*)+0x6c>
c00160ed:	83 c2 02             	add    edx,0x2
c00160f0:	be 10 00 00 00       	mov    esi,0x10
c00160f5:	eb 0d                	jmp    c0016104 <Reg::readInt(char*, char*, int*)+0x79>
c00160f7:	80 f9 62             	cmp    cl,0x62
c00160fa:	75 08                	jne    c0016104 <Reg::readInt(char*, char*, int*)+0x79>
c00160fc:	83 c2 02             	add    edx,0x2
c00160ff:	be 02 00 00 00       	mov    esi,0x2
c0016104:	01 d7                	add    edi,edx
c0016106:	31 d2                	xor    edx,edx
c0016108:	8a 1f                	mov    bl,BYTE PTR [edi]
c001610a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001610e:	84 db                	test   bl,bl
c0016110:	0f 94 c3             	sete   bl
c0016113:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016118:	0f 94 c1             	sete   cl
c001611b:	08 cb                	or     bl,cl
c001611d:	75 3a                	jne    c0016159 <Reg::readInt(char*, char*, int*)+0xce>
c001611f:	0f af d6             	imul   edx,esi
c0016122:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016127:	83 fe 10             	cmp    esi,0x10
c001612a:	75 26                	jne    c0016152 <Reg::readInt(char*, char*, int*)+0xc7>
c001612c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016130:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016133:	89 e9                	mov    ecx,ebp
c0016135:	80 f9 05             	cmp    cl,0x5
c0016138:	77 06                	ja     c0016140 <Reg::readInt(char*, char*, int*)+0xb5>
c001613a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001613e:	eb 16                	jmp    c0016156 <Reg::readInt(char*, char*, int*)+0xcb>
c0016140:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016144:	83 e9 61             	sub    ecx,0x61
c0016147:	80 f9 05             	cmp    cl,0x5
c001614a:	77 06                	ja     c0016152 <Reg::readInt(char*, char*, int*)+0xc7>
c001614c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016150:	eb 04                	jmp    c0016156 <Reg::readInt(char*, char*, int*)+0xcb>
c0016152:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016156:	47                   	inc    edi
c0016157:	eb af                	jmp    c0016108 <Reg::readInt(char*, char*, int*)+0x7d>
c0016159:	84 c0                	test   al,al
c001615b:	74 02                	je     c001615f <Reg::readInt(char*, char*, int*)+0xd4>
c001615d:	f7 da                	neg    edx
c001615f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016166:	89 10                	mov    DWORD PTR [eax],edx
c0016168:	88 d8                	mov    al,bl
c001616a:	81 c4 ec 00 00 00    	add    esp,0xec
c0016170:	5b                   	pop    ebx
c0016171:	5e                   	pop    esi
c0016172:	5f                   	pop    edi
c0016173:	5d                   	pop    ebp
c0016174:	c3                   	ret    

c0016175 <Reg::readString(char*, char*, char*, int)>:
c0016175:	57                   	push   edi
c0016176:	56                   	push   esi
c0016177:	53                   	push   ebx
c0016178:	81 ec d4 00 00 00    	sub    esp,0xd4
c001617e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016182:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016189:	57                   	push   edi
c001618a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016191:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016198:	e8 b7 fe ff ff       	call   c0016054 <Reg::getLine(char*, char*, char*)>
c001619d:	83 c4 10             	add    esp,0x10
c00161a0:	89 c6                	mov    esi,eax
c00161a2:	84 c0                	test   al,al
c00161a4:	74 44                	je     c00161ea <Reg::readString(char*, char*, char*, int)+0x75>
c00161a6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161ad:	31 c0                	xor    eax,eax
c00161af:	4a                   	dec    edx
c00161b0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161b3:	84 c9                	test   cl,cl
c00161b5:	74 0f                	je     c00161c6 <Reg::readString(char*, char*, char*, int)+0x51>
c00161b7:	39 c2                	cmp    edx,eax
c00161b9:	7e 0b                	jle    c00161c6 <Reg::readString(char*, char*, char*, int)+0x51>
c00161bb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161be:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161c3:	40                   	inc    eax
c00161c4:	eb ea                	jmp    c00161b0 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161c6:	83 ec 0c             	sub    esp,0xc
c00161c9:	53                   	push   ebx
c00161ca:	e8 08 a5 fe ff       	call   c00006d7 <strlen>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161d7:	75 11                	jne    c00161ea <Reg::readString(char*, char*, char*, int)+0x75>
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	53                   	push   ebx
c00161dd:	e8 f5 a4 fe ff       	call   c00006d7 <strlen>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161ea:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161f0:	89 f0                	mov    eax,esi
c00161f2:	5b                   	pop    ebx
c00161f3:	5e                   	pop    esi
c00161f4:	5f                   	pop    edi
c00161f5:	c3                   	ret    

c00161f6 <Reg::readBool(char*, char*, bool*)>:
c00161f6:	83 ec 20             	sub    esp,0x20
c00161f9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00161fd:	50                   	push   eax
c00161fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016202:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016206:	e8 80 fe ff ff       	call   c001608b <Reg::readInt(char*, char*, int*)>
c001620b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001620f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016214:	0f 95 02             	setne  BYTE PTR [edx]
c0016217:	83 c4 2c             	add    esp,0x2c
c001621a:	c3                   	ret    

c001621b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001621b:	53                   	push   ebx
c001621c:	83 ec 1c             	sub    esp,0x1c
c001621f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016223:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016227:	50                   	push   eax
c0016228:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001622c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016230:	e8 c1 ff ff ff       	call   c00161f6 <Reg::readBool(char*, char*, bool*)>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	84 c0                	test   al,al
c001623a:	74 04                	je     c0016240 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001623c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016240:	83 c4 18             	add    esp,0x18
c0016243:	88 d8                	mov    al,bl
c0016245:	5b                   	pop    ebx
c0016246:	c3                   	ret    

c0016247 <Reg::readIntWithDefault(char*, char*, int)>:
c0016247:	53                   	push   ebx
c0016248:	83 ec 1c             	sub    esp,0x1c
c001624b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001624f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016253:	50                   	push   eax
c0016254:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016258:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001625c:	e8 2a fe ff ff       	call   c001608b <Reg::readInt(char*, char*, int*)>
c0016261:	83 c4 10             	add    esp,0x10
c0016264:	84 c0                	test   al,al
c0016266:	74 04                	je     c001626c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016268:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001626c:	83 c4 18             	add    esp,0x18
c001626f:	89 d8                	mov    eax,ebx
c0016271:	5b                   	pop    ebx
c0016272:	c3                   	ret    

c0016273 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016273:	56                   	push   esi
c0016274:	53                   	push   ebx
c0016275:	51                   	push   ecx
c0016276:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001627a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001627e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016282:	56                   	push   esi
c0016283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628b:	e8 e5 fe ff ff       	call   c0016175 <Reg::readString(char*, char*, char*, int)>
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	84 c0                	test   al,al
c0016295:	74 02                	je     c0016299 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016297:	89 f3                	mov    ebx,esi
c0016299:	5a                   	pop    edx
c001629a:	89 d8                	mov    eax,ebx
c001629c:	5b                   	pop    ebx
c001629d:	5e                   	pop    esi
c001629e:	c3                   	ret    

c001629f <Sys::exit(regs*)>:
c001629f:	83 ec 18             	sub    esp,0x18
c00162a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162a6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162a9:	e8 c2 31 00 00       	call   c0019470 <terminateTask(int)>
c00162ae:	83 c8 ff             	or     eax,0xffffffff
c00162b1:	89 c2                	mov    edx,eax
c00162b3:	83 c4 1c             	add    esp,0x1c
c00162b6:	c3                   	ret    

c00162b7 <Sys::loadDLL(regs*)>:
c00162b7:	56                   	push   esi
c00162b8:	31 d2                	xor    edx,edx
c00162ba:	53                   	push   ebx
c00162bb:	b8 01 00 00 00       	mov    eax,0x1
c00162c0:	51                   	push   ecx
c00162c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162c9:	74 7d                	je     c0016348 <Sys::loadDLL(regs*)+0x91>
c00162cb:	83 ec 0c             	sub    esp,0xc
c00162ce:	68 14 01 00 00       	push   0x114
c00162d3:	e8 fe 8d ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00162d8:	89 c3                	mov    ebx,eax
c00162da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162df:	83 c4 0c             	add    esp,0xc
c00162e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162e8:	53                   	push   ebx
c00162e9:	e8 54 94 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c00162ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162f1:	e8 1e 97 ff ff       	call   c000fa14 <File::exists()>
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	84 c0                	test   al,al
c00162fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162fd:	75 11                	jne    c0016310 <Sys::loadDLL(regs*)+0x59>
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	53                   	push   ebx
c0016303:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	b8 03 00 00 00       	mov    eax,0x3
c001630e:	eb 36                	jmp    c0016346 <Sys::loadDLL(regs*)+0x8f>
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	53                   	push   ebx
c0016314:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016317:	58                   	pop    eax
c0016318:	5a                   	pop    edx
c0016319:	6a 00                	push   0x0
c001631b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001631e:	e8 3a 21 00 00       	call   c001845d <Thr::loadDLL(char const*, bool)>
c0016323:	83 c4 10             	add    esp,0x10
c0016326:	89 c1                	mov    ecx,eax
c0016328:	31 d2                	xor    edx,edx
c001632a:	b8 04 00 00 00       	mov    eax,0x4
c001632f:	85 c9                	test   ecx,ecx
c0016331:	74 15                	je     c0016348 <Sys::loadDLL(regs*)+0x91>
c0016333:	53                   	push   ebx
c0016334:	53                   	push   ebx
c0016335:	ff 35 88 47 02 c0    	push   DWORD PTR ds:0xc0024788
c001633b:	51                   	push   ecx
c001633c:	e8 e2 22 00 00       	call   c0018623 <Thr::executeDLL(unsigned long, void*)>
c0016341:	83 c4 10             	add    esp,0x10
c0016344:	31 c0                	xor    eax,eax
c0016346:	31 d2                	xor    edx,edx
c0016348:	59                   	pop    ecx
c0016349:	5b                   	pop    ebx
c001634a:	5e                   	pop    esi
c001634b:	c3                   	ret    

c001634c <Sys::read(regs*)>:
c001634c:	57                   	push   edi
c001634d:	56                   	push   esi
c001634e:	53                   	push   ebx
c001634f:	83 ec 10             	sub    esp,0x10
c0016352:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016356:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016359:	83 f8 02             	cmp    eax,0x2
c001635c:	77 10                	ja     c001636e <Sys::read(regs*)+0x22>
c001635e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016363:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016366:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001636c:	eb 0e                	jmp    c001637c <Sys::read(regs*)+0x30>
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	50                   	push   eax
c0016372:	e8 f0 7c ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	89 c1                	mov    ecx,eax
c001637c:	83 c8 ff             	or     eax,0xffffffff
c001637f:	85 c9                	test   ecx,ecx
c0016381:	89 c2                	mov    edx,eax
c0016383:	74 28                	je     c00163ad <Sys::read(regs*)+0x61>
c0016385:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001638d:	83 ec 0c             	sub    esp,0xc
c0016390:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016392:	31 ff                	xor    edi,edi
c0016394:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016398:	52                   	push   edx
c0016399:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001639c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001639f:	57                   	push   edi
c00163a0:	56                   	push   esi
c00163a1:	51                   	push   ecx
c00163a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163a9:	83 c4 20             	add    esp,0x20
c00163ac:	99                   	cdq    
c00163ad:	83 c4 10             	add    esp,0x10
c00163b0:	5b                   	pop    ebx
c00163b1:	5e                   	pop    esi
c00163b2:	5f                   	pop    edi
c00163b3:	c3                   	ret    

c00163b4 <Sys::sbrk(regs*)>:
c00163b4:	56                   	push   esi
c00163b5:	53                   	push   ebx
c00163b6:	50                   	push   eax
c00163b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163c3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163c6:	85 db                	test   ebx,ebx
c00163c8:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163ce:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163d1:	74 02                	je     c00163d5 <Sys::sbrk(regs*)+0x21>
c00163d3:	79 06                	jns    c00163db <Sys::sbrk(regs*)+0x27>
c00163d5:	89 f0                	mov    eax,esi
c00163d7:	31 d2                	xor    edx,edx
c00163d9:	eb 2a                	jmp    c0016405 <Sys::sbrk(regs*)+0x51>
c00163db:	83 c8 ff             	or     eax,0xffffffff
c00163de:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163e4:	89 c2                	mov    edx,eax
c00163e6:	77 1d                	ja     c0016405 <Sys::sbrk(regs*)+0x51>
c00163e8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163ee:	50                   	push   eax
c00163ef:	c1 ea 0c             	shr    edx,0xc
c00163f2:	68 07 04 00 00       	push   0x407
c00163f7:	52                   	push   edx
c00163f8:	51                   	push   ecx
c00163f9:	e8 c0 85 ff ff       	call   c000e9be <VAS::allocatePages(int, int)>
c00163fe:	89 f0                	mov    eax,esi
c0016400:	31 d2                	xor    edx,edx
c0016402:	83 c4 10             	add    esp,0x10
c0016405:	59                   	pop    ecx
c0016406:	5b                   	pop    ebx
c0016407:	5e                   	pop    esi
c0016408:	c3                   	ret    

c0016409 <Sys::write(regs*)>:
c0016409:	57                   	push   edi
c001640a:	56                   	push   esi
c001640b:	53                   	push   ebx
c001640c:	83 ec 18             	sub    esp,0x18
c001640f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016413:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016416:	68 67 2a 02 c0       	push   0xc0022a67
c001641b:	e8 eb 8d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016420:	83 c4 10             	add    esp,0x10
c0016423:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0016427:	77 10                	ja     c0016439 <Sys::write(regs*)+0x30>
c0016429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001642e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016431:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016437:	eb 1b                	jmp    c0016454 <Sys::write(regs*)+0x4b>
c0016439:	83 ec 0c             	sub    esp,0xc
c001643c:	68 86 2a 02 c0       	push   0xc0022a86
c0016441:	e8 c5 8d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016446:	58                   	pop    eax
c0016447:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001644a:	e8 18 7c ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	89 c1                	mov    ecx,eax
c0016454:	83 c8 ff             	or     eax,0xffffffff
c0016457:	85 c9                	test   ecx,ecx
c0016459:	89 c2                	mov    edx,eax
c001645b:	74 28                	je     c0016485 <Sys::write(regs*)+0x7c>
c001645d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016465:	83 ec 0c             	sub    esp,0xc
c0016468:	8b 01                	mov    eax,DWORD PTR [ecx]
c001646a:	31 ff                	xor    edi,edi
c001646c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016470:	52                   	push   edx
c0016471:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016474:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016477:	57                   	push   edi
c0016478:	56                   	push   esi
c0016479:	51                   	push   ecx
c001647a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001647d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016481:	83 c4 20             	add    esp,0x20
c0016484:	99                   	cdq    
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	5b                   	pop    ebx
c0016489:	5e                   	pop    esi
c001648a:	5f                   	pop    edi
c001648b:	c3                   	ret    

c001648c <Sys::yield(regs*)>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	e8 af 25 00 00       	call   c0018a43 <lockScheduler()>
c0016494:	e8 f3 28 00 00       	call   c0018d8c <schedule()>
c0016499:	e8 a7 25 00 00       	call   c0018a45 <unlockScheduler()>
c001649e:	31 c0                	xor    eax,eax
c00164a0:	31 d2                	xor    edx,edx
c00164a2:	83 c4 0c             	add    esp,0xc
c00164a5:	c3                   	ret    

c00164a6 <sysCallGetPID(regs*)>:
c00164a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00164b0:	89 c2                	mov    edx,eax
c00164b2:	c1 fa 1f             	sar    edx,0x1f
c00164b5:	c3                   	ret    

c00164b6 <sysCallSeekDir(regs*)>:
c00164b6:	31 c0                	xor    eax,eax
c00164b8:	31 d2                	xor    edx,edx
c00164ba:	c3                   	ret    

c00164bb <sysCallTellDir(regs*)>:
c00164bb:	31 c0                	xor    eax,eax
c00164bd:	31 d2                	xor    edx,edx
c00164bf:	c3                   	ret    

c00164c0 <sysCallVerify(regs*)>:
c00164c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164c4:	31 d2                	xor    edx,edx
c00164c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164c9:	c3                   	ret    

c00164ca <sysCallFork(regs*)>:
c00164ca:	83 c8 ff             	or     eax,0xffffffff
c00164cd:	83 ca ff             	or     edx,0xffffffff
c00164d0:	c3                   	ret    

c00164d1 <sysCallExecve(regs*)>:
c00164d1:	83 c8 ff             	or     eax,0xffffffff
c00164d4:	83 ca ff             	or     edx,0xffffffff
c00164d7:	c3                   	ret    

c00164d8 <sysCallGetArgc(regs*)>:
c00164d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164e0:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164e6:	89 c2                	mov    edx,eax
c00164e8:	c1 fa 1f             	sar    edx,0x1f
c00164eb:	c3                   	ret    

c00164ec <sysFormatDisk(regs*)>:
c00164ec:	56                   	push   esi
c00164ed:	53                   	push   ebx
c00164ee:	50                   	push   eax
c00164ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f3:	8b 1d e8 48 02 c0    	mov    ebx,DWORD PTR ds:0xc00248e8
c00164f9:	eb 2a                	jmp    c0016525 <sysFormatDisk(regs*)+0x39>
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016501:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016504:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016506:	51                   	push   ecx
c0016507:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001650a:	51                   	push   ecx
c001650b:	50                   	push   eax
c001650c:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c0016513:	50                   	push   eax
c0016514:	53                   	push   ebx
c0016515:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016518:	83 c4 20             	add    esp,0x20
c001651b:	89 c1                	mov    ecx,eax
c001651d:	83 f8 08             	cmp    eax,0x8
c0016520:	75 12                	jne    c0016534 <sysFormatDisk(regs*)+0x48>
c0016522:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016525:	85 db                	test   ebx,ebx
c0016527:	75 d2                	jne    c00164fb <sysFormatDisk(regs*)+0xf>
c0016529:	b8 03 00 00 00       	mov    eax,0x3
c001652e:	31 d2                	xor    edx,edx
c0016530:	59                   	pop    ecx
c0016531:	5b                   	pop    ebx
c0016532:	5e                   	pop    esi
c0016533:	c3                   	ret    
c0016534:	85 c0                	test   eax,eax
c0016536:	74 13                	je     c001654b <sysFormatDisk(regs*)+0x5f>
c0016538:	31 d2                	xor    edx,edx
c001653a:	b8 01 00 00 00       	mov    eax,0x1
c001653f:	83 f9 09             	cmp    ecx,0x9
c0016542:	74 ec                	je     c0016530 <sysFormatDisk(regs*)+0x44>
c0016544:	b8 02 00 00 00       	mov    eax,0x2
c0016549:	eb e3                	jmp    c001652e <sysFormatDisk(regs*)+0x42>
c001654b:	31 c0                	xor    eax,eax
c001654d:	eb df                	jmp    c001652e <sysFormatDisk(regs*)+0x42>

c001654f <sysSetDiskVolumeLabel(regs*)>:
c001654f:	56                   	push   esi
c0016550:	53                   	push   ebx
c0016551:	53                   	push   ebx
c0016552:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016556:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016559:	83 f8 19             	cmp    eax,0x19
c001655c:	77 2d                	ja     c001658b <sysSetDiskVolumeLabel(regs*)+0x3c>
c001655e:	8b 0c 85 80 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb280]
c0016565:	85 c9                	test   ecx,ecx
c0016567:	74 22                	je     c001658b <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016569:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001656c:	85 d2                	test   edx,edx
c001656e:	74 1b                	je     c001658b <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016570:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016576:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016578:	52                   	push   edx
c0016579:	50                   	push   eax
c001657a:	51                   	push   ecx
c001657b:	53                   	push   ebx
c001657c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001657f:	83 c4 10             	add    esp,0x10
c0016582:	89 c2                	mov    edx,eax
c0016584:	c1 fa 1f             	sar    edx,0x1f
c0016587:	59                   	pop    ecx
c0016588:	5b                   	pop    ebx
c0016589:	5e                   	pop    esi
c001658a:	c3                   	ret    
c001658b:	59                   	pop    ecx
c001658c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016591:	5b                   	pop    ebx
c0016592:	83 ca ff             	or     edx,0xffffffff
c0016595:	5e                   	pop    esi
c0016596:	c3                   	ret    

c0016597 <sysGetDiskVolumeLabel(regs*)>:
c0016597:	57                   	push   edi
c0016598:	56                   	push   esi
c0016599:	53                   	push   ebx
c001659a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165a1:	83 fa 19             	cmp    edx,0x19
c00165a4:	77 38                	ja     c00165de <sysGetDiskVolumeLabel(regs*)+0x47>
c00165a6:	8b 0c 95 80 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb280]
c00165ad:	85 c9                	test   ecx,ecx
c00165af:	74 2d                	je     c00165de <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165b4:	85 db                	test   ebx,ebx
c00165b6:	74 26                	je     c00165de <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165bb:	85 c0                	test   eax,eax
c00165bd:	74 1f                	je     c00165de <sysGetDiskVolumeLabel(regs*)+0x47>
c00165bf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165c5:	83 ec 0c             	sub    esp,0xc
c00165c8:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165ca:	50                   	push   eax
c00165cb:	53                   	push   ebx
c00165cc:	52                   	push   edx
c00165cd:	51                   	push   ecx
c00165ce:	56                   	push   esi
c00165cf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165d2:	83 c4 20             	add    esp,0x20
c00165d5:	89 c2                	mov    edx,eax
c00165d7:	c1 fa 1f             	sar    edx,0x1f
c00165da:	5b                   	pop    ebx
c00165db:	5e                   	pop    esi
c00165dc:	5f                   	pop    edi
c00165dd:	c3                   	ret    
c00165de:	5b                   	pop    ebx
c00165df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165e4:	5e                   	pop    esi
c00165e5:	83 ca ff             	or     edx,0xffffffff
c00165e8:	5f                   	pop    edi
c00165e9:	c3                   	ret    

c00165ea <sysShutdown(regs*)>:
c00165ea:	57                   	push   edi
c00165eb:	56                   	push   esi
c00165ec:	56                   	push   esi
c00165ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165f4:	85 c0                	test   eax,eax
c00165f6:	74 18                	je     c0016610 <sysShutdown(regs*)+0x26>
c00165f8:	83 f8 01             	cmp    eax,0x1
c00165fb:	74 51                	je     c001664e <sysShutdown(regs*)+0x64>
c00165fd:	83 ce ff             	or     esi,0xffffffff
c0016600:	83 cf ff             	or     edi,0xffffffff
c0016603:	83 f8 02             	cmp    eax,0x2
c0016606:	74 2a                	je     c0016632 <sysShutdown(regs*)+0x48>
c0016608:	59                   	pop    ecx
c0016609:	89 f0                	mov    eax,esi
c001660b:	5e                   	pop    esi
c001660c:	89 fa                	mov    edx,edi
c001660e:	5f                   	pop    edi
c001660f:	c3                   	ret    
c0016610:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0016615:	83 ce ff             	or     esi,0xffffffff
c0016618:	83 cf ff             	or     edi,0xffffffff
c001661b:	8b 10                	mov    edx,DWORD PTR [eax]
c001661d:	6a 00                	push   0x0
c001661f:	6a 00                	push   0x0
c0016621:	6a 00                	push   0x0
c0016623:	50                   	push   eax
c0016624:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	89 f0                	mov    eax,esi
c001662c:	89 fa                	mov    edx,edi
c001662e:	59                   	pop    ecx
c001662f:	5e                   	pop    esi
c0016630:	5f                   	pop    edi
c0016631:	c3                   	ret    
c0016632:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0016637:	8b 10                	mov    edx,DWORD PTR [eax]
c0016639:	6a 00                	push   0x0
c001663b:	6a 00                	push   0x0
c001663d:	6a 01                	push   0x1
c001663f:	50                   	push   eax
c0016640:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	89 f0                	mov    eax,esi
c0016648:	89 fa                	mov    edx,edi
c001664a:	59                   	pop    ecx
c001664b:	5e                   	pop    esi
c001664c:	5f                   	pop    edi
c001664d:	c3                   	ret    
c001664e:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c0016653:	85 c0                	test   eax,eax
c0016655:	74 02                	je     c0016659 <sysShutdown(regs*)+0x6f>
c0016657:	ff d0                	call   eax
c0016659:	31 f6                	xor    esi,esi
c001665b:	59                   	pop    ecx
c001665c:	31 ff                	xor    edi,edi
c001665e:	89 f0                	mov    eax,esi
c0016660:	5e                   	pop    esi
c0016661:	89 fa                	mov    edx,edi
c0016663:	5f                   	pop    edi
c0016664:	c3                   	ret    

c0016665 <sysCallGetCwd(regs*)>:
c0016665:	83 ec 10             	sub    esp,0x10
c0016668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001666c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001666f:	52                   	push   edx
c0016670:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016673:	51                   	push   ecx
c0016674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001667c:	50                   	push   eax
c001667d:	e8 31 94 ff ff       	call   c000fab3 <getcwd(Process*, char*, int)>
c0016682:	89 c2                	mov    edx,eax
c0016684:	83 c4 1c             	add    esp,0x1c
c0016687:	c1 fa 1f             	sar    edx,0x1f
c001668a:	c3                   	ret    

c001668b <sysCallSetCwd(regs*)>:
c001668b:	83 ec 14             	sub    esp,0x14
c001668e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016692:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016695:	50                   	push   eax
c0016696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001669e:	52                   	push   edx
c001669f:	e8 39 94 ff ff       	call   c000fadd <setcwd(Process*, char*)>
c00166a4:	89 c2                	mov    edx,eax
c00166a6:	83 c4 1c             	add    esp,0x1c
c00166a9:	c1 fa 1f             	sar    edx,0x1f
c00166ac:	c3                   	ret    

c00166ad <sysCallRealpath(regs*)>:
c00166ad:	53                   	push   ebx
c00166ae:	83 ec 08             	sub    esp,0x8
c00166b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166b8:	85 c9                	test   ecx,ecx
c00166ba:	74 35                	je     c00166f1 <sysCallRealpath(regs*)+0x44>
c00166bc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166bf:	31 d2                	xor    edx,edx
c00166c1:	b8 01 00 00 00       	mov    eax,0x1
c00166c6:	85 db                	test   ebx,ebx
c00166c8:	75 05                	jne    c00166cf <sysCallRealpath(regs*)+0x22>
c00166ca:	83 c4 08             	add    esp,0x8
c00166cd:	5b                   	pop    ebx
c00166ce:	c3                   	ret    
c00166cf:	50                   	push   eax
c00166d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166d8:	05 0c 01 00 00       	add    eax,0x10c
c00166dd:	50                   	push   eax
c00166de:	51                   	push   ecx
c00166df:	53                   	push   ebx
c00166e0:	e8 b3 8e ff ff       	call   c000f598 <standardiseFiles(char*, char const*, char const*)>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	31 c0                	xor    eax,eax
c00166ea:	31 d2                	xor    edx,edx
c00166ec:	83 c4 08             	add    esp,0x8
c00166ef:	5b                   	pop    ebx
c00166f0:	c3                   	ret    
c00166f1:	b8 01 00 00 00       	mov    eax,0x1
c00166f6:	31 d2                	xor    edx,edx
c00166f8:	eb f2                	jmp    c00166ec <sysCallRealpath(regs*)+0x3f>

c00166fa <sysCallReadDir(regs*)>:
c00166fa:	53                   	push   ebx
c00166fb:	83 ec 18             	sub    esp,0x18
c00166fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016702:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016705:	83 f8 02             	cmp    eax,0x2
c0016708:	76 56                	jbe    c0016760 <sysCallReadDir(regs*)+0x66>
c001670a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001670d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016713:	77 57                	ja     c001676c <sysCallReadDir(regs*)+0x72>
c0016715:	83 ec 0c             	sub    esp,0xc
c0016718:	50                   	push   eax
c0016719:	e8 49 79 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	85 c0                	test   eax,eax
c0016723:	74 57                	je     c001677c <sysCallReadDir(regs*)+0x82>
c0016725:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001672d:	83 ec 0c             	sub    esp,0xc
c0016730:	8b 10                	mov    edx,DWORD PTR [eax]
c0016732:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016736:	51                   	push   ecx
c0016737:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001673a:	51                   	push   ecx
c001673b:	6a 00                	push   0x0
c001673d:	68 10 01 00 00       	push   0x110
c0016742:	50                   	push   eax
c0016743:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016746:	83 c4 20             	add    esp,0x20
c0016749:	89 c1                	mov    ecx,eax
c001674b:	85 c0                	test   eax,eax
c001674d:	74 38                	je     c0016787 <sysCallReadDir(regs*)+0x8d>
c001674f:	31 d2                	xor    edx,edx
c0016751:	b8 02 00 00 00       	mov    eax,0x2
c0016756:	83 f9 07             	cmp    ecx,0x7
c0016759:	74 05                	je     c0016760 <sysCallReadDir(regs*)+0x66>
c001675b:	83 c4 18             	add    esp,0x18
c001675e:	5b                   	pop    ebx
c001675f:	c3                   	ret    
c0016760:	b8 01 00 00 00       	mov    eax,0x1
c0016765:	31 d2                	xor    edx,edx
c0016767:	83 c4 18             	add    esp,0x18
c001676a:	5b                   	pop    ebx
c001676b:	c3                   	ret    
c001676c:	53                   	push   ebx
c001676d:	53                   	push   ebx
c001676e:	52                   	push   edx
c001676f:	68 a8 2a 02 c0       	push   0xc0022aa8
c0016774:	e8 92 8a ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	83 c4 18             	add    esp,0x18
c001677f:	83 c8 ff             	or     eax,0xffffffff
c0016782:	83 ca ff             	or     edx,0xffffffff
c0016785:	5b                   	pop    ebx
c0016786:	c3                   	ret    
c0016787:	31 c0                	xor    eax,eax
c0016789:	31 d2                	xor    edx,edx
c001678b:	eb da                	jmp    c0016767 <sysCallReadDir(regs*)+0x6d>

c001678d <sysCallIsATTY(regs*)>:
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016794:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016797:	83 f8 02             	cmp    eax,0x2
c001679a:	76 07                	jbe    c00167a3 <sysCallIsATTY(regs*)+0x16>
c001679c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167a1:	75 28                	jne    c00167cb <sysCallIsATTY(regs*)+0x3e>
c00167a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167b1:	85 c0                	test   eax,eax
c00167b3:	74 26                	je     c00167db <sysCallIsATTY(regs*)+0x4e>
c00167b5:	83 ec 0c             	sub    esp,0xc
c00167b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00167ba:	50                   	push   eax
c00167bb:	ff 12                	call   DWORD PTR [edx]
c00167bd:	83 c4 10             	add    esp,0x10
c00167c0:	25 ff 00 00 00       	and    eax,0xff
c00167c5:	31 d2                	xor    edx,edx
c00167c7:	83 c4 0c             	add    esp,0xc
c00167ca:	c3                   	ret    
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	50                   	push   eax
c00167cf:	e8 93 78 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	85 c0                	test   eax,eax
c00167d9:	75 da                	jne    c00167b5 <sysCallIsATTY(regs*)+0x28>
c00167db:	83 c8 ff             	or     eax,0xffffffff
c00167de:	83 ca ff             	or     edx,0xffffffff
c00167e1:	83 c4 0c             	add    esp,0xc
c00167e4:	c3                   	ret    

c00167e5 <sysCallSeek(regs*)>:
c00167e5:	53                   	push   ebx
c00167e6:	83 ec 08             	sub    esp,0x8
c00167e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167f0:	83 f8 02             	cmp    eax,0x2
c00167f3:	76 4b                	jbe    c0016840 <sysCallSeek(regs*)+0x5b>
c00167f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167fa:	77 34                	ja     c0016830 <sysCallSeek(regs*)+0x4b>
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	50                   	push   eax
c0016800:	e8 62 78 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016805:	83 c4 0c             	add    esp,0xc
c0016808:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001680b:	31 db                	xor    ebx,ebx
c001680d:	53                   	push   ebx
c001680e:	51                   	push   ecx
c001680f:	50                   	push   eax
c0016810:	e8 4f 90 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	85 c0                	test   eax,eax
c001681a:	0f 95 c0             	setne  al
c001681d:	25 ff 00 00 00       	and    eax,0xff
c0016822:	31 d2                	xor    edx,edx
c0016824:	f7 d8                	neg    eax
c0016826:	83 d2 00             	adc    edx,0x0
c0016829:	83 c4 08             	add    esp,0x8
c001682c:	f7 da                	neg    edx
c001682e:	5b                   	pop    ebx
c001682f:	c3                   	ret    
c0016830:	52                   	push   edx
c0016831:	52                   	push   edx
c0016832:	50                   	push   eax
c0016833:	68 64 2b 02 c0       	push   0xc0022b64
c0016838:	e8 ce 89 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	83 c4 08             	add    esp,0x8
c0016843:	83 c8 ff             	or     eax,0xffffffff
c0016846:	83 ca ff             	or     edx,0xffffffff
c0016849:	5b                   	pop    ebx
c001684a:	c3                   	ret    

c001684b <sysCallTell(regs*)>:
c001684b:	53                   	push   ebx
c001684c:	83 ec 08             	sub    esp,0x8
c001684f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016853:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016856:	83 f8 02             	cmp    eax,0x2
c0016859:	76 60                	jbe    c00168bb <sysCallTell(regs*)+0x70>
c001685b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016860:	77 30                	ja     c0016892 <sysCallTell(regs*)+0x47>
c0016862:	83 ec 0c             	sub    esp,0xc
c0016865:	50                   	push   eax
c0016866:	e8 fc 77 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c001686b:	5a                   	pop    edx
c001686c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001686f:	59                   	pop    ecx
c0016870:	53                   	push   ebx
c0016871:	50                   	push   eax
c0016872:	e8 43 90 ff ff       	call   c000f8ba <File::tell(unsigned long long*)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	85 c0                	test   eax,eax
c001687c:	0f 95 c0             	setne  al
c001687f:	25 ff 00 00 00       	and    eax,0xff
c0016884:	31 d2                	xor    edx,edx
c0016886:	f7 d8                	neg    eax
c0016888:	83 d2 00             	adc    edx,0x0
c001688b:	83 c4 08             	add    esp,0x8
c001688e:	f7 da                	neg    edx
c0016890:	5b                   	pop    ebx
c0016891:	c3                   	ret    
c0016892:	52                   	push   edx
c0016893:	52                   	push   edx
c0016894:	50                   	push   eax
c0016895:	68 7e 2b 02 c0       	push   0xc0022b7e
c001689a:	e8 6c 89 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001689f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168a2:	83 c4 10             	add    esp,0x10
c00168a5:	31 d2                	xor    edx,edx
c00168a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168b4:	83 c4 08             	add    esp,0x8
c00168b7:	31 c0                	xor    eax,eax
c00168b9:	5b                   	pop    ebx
c00168ba:	c3                   	ret    
c00168bb:	83 c4 08             	add    esp,0x8
c00168be:	83 c8 ff             	or     eax,0xffffffff
c00168c1:	83 ca ff             	or     edx,0xffffffff
c00168c4:	5b                   	pop    ebx
c00168c5:	c3                   	ret    

c00168c6 <sysCallSizeFromFilename(regs*)>:
c00168c6:	57                   	push   edi
c00168c7:	56                   	push   esi
c00168c8:	53                   	push   ebx
c00168c9:	83 ec 10             	sub    esp,0x10
c00168cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168d0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168d3:	83 fb 02             	cmp    ebx,0x2
c00168d6:	0f 86 8b 00 00 00    	jbe    c0016967 <sysCallSizeFromFilename(regs*)+0xa1>
c00168dc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168e2:	77 58                	ja     c001693c <sysCallSizeFromFilename(regs*)+0x76>
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	68 14 01 00 00       	push   0x114
c00168ec:	e8 e5 87 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00168f1:	89 c7                	mov    edi,eax
c00168f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168f8:	83 c4 0c             	add    esp,0xc
c00168fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168fe:	50                   	push   eax
c00168ff:	53                   	push   ebx
c0016900:	57                   	push   edi
c0016901:	e8 3c 8e ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0016906:	83 c4 0c             	add    esp,0xc
c0016909:	8d 44 24 13          	lea    eax,[esp+0x13]
c001690d:	50                   	push   eax
c001690e:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016911:	52                   	push   edx
c0016912:	57                   	push   edi
c0016913:	e8 3a 91 ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c0016918:	89 c3                	mov    ebx,eax
c001691a:	8b 07                	mov    eax,DWORD PTR [edi]
c001691c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001691f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016922:	31 c0                	xor    eax,eax
c0016924:	83 c4 10             	add    esp,0x10
c0016927:	85 db                	test   ebx,ebx
c0016929:	0f 95 c0             	setne  al
c001692c:	31 d2                	xor    edx,edx
c001692e:	f7 d8                	neg    eax
c0016930:	83 d2 00             	adc    edx,0x0
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	f7 da                	neg    edx
c0016938:	5b                   	pop    ebx
c0016939:	5e                   	pop    esi
c001693a:	5f                   	pop    edi
c001693b:	c3                   	ret    
c001693c:	51                   	push   ecx
c001693d:	51                   	push   ecx
c001693e:	53                   	push   ebx
c001693f:	68 98 2b 02 c0       	push   0xc0022b98
c0016944:	e8 c2 88 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016949:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	31 d2                	xor    edx,edx
c0016951:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016957:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	31 c0                	xor    eax,eax
c0016963:	5b                   	pop    ebx
c0016964:	5e                   	pop    esi
c0016965:	5f                   	pop    edi
c0016966:	c3                   	ret    
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	83 c8 ff             	or     eax,0xffffffff
c001696d:	83 ca ff             	or     edx,0xffffffff
c0016970:	5b                   	pop    ebx
c0016971:	5e                   	pop    esi
c0016972:	5f                   	pop    edi
c0016973:	c3                   	ret    

c0016974 <sysCallSize(regs*)>:
c0016974:	53                   	push   ebx
c0016975:	83 ec 18             	sub    esp,0x18
c0016978:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001697c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001697f:	83 f8 02             	cmp    eax,0x2
c0016982:	76 66                	jbe    c00169ea <sysCallSize(regs*)+0x76>
c0016984:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016989:	77 36                	ja     c00169c1 <sysCallSize(regs*)+0x4d>
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	50                   	push   eax
c001698f:	e8 d3 76 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016994:	83 c4 0c             	add    esp,0xc
c0016997:	8d 54 24 13          	lea    edx,[esp+0x13]
c001699b:	52                   	push   edx
c001699c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001699f:	52                   	push   edx
c00169a0:	50                   	push   eax
c00169a1:	e8 ac 90 ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	85 c0                	test   eax,eax
c00169ab:	0f 95 c0             	setne  al
c00169ae:	25 ff 00 00 00       	and    eax,0xff
c00169b3:	31 d2                	xor    edx,edx
c00169b5:	f7 d8                	neg    eax
c00169b7:	83 d2 00             	adc    edx,0x0
c00169ba:	83 c4 18             	add    esp,0x18
c00169bd:	f7 da                	neg    edx
c00169bf:	5b                   	pop    ebx
c00169c0:	c3                   	ret    
c00169c1:	51                   	push   ecx
c00169c2:	51                   	push   ecx
c00169c3:	50                   	push   eax
c00169c4:	68 98 2b 02 c0       	push   0xc0022b98
c00169c9:	e8 3d 88 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00169ce:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	31 d2                	xor    edx,edx
c00169d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169e3:	83 c4 18             	add    esp,0x18
c00169e6:	31 c0                	xor    eax,eax
c00169e8:	5b                   	pop    ebx
c00169e9:	c3                   	ret    
c00169ea:	83 c4 18             	add    esp,0x18
c00169ed:	83 c8 ff             	or     eax,0xffffffff
c00169f0:	83 ca ff             	or     edx,0xffffffff
c00169f3:	5b                   	pop    ebx
c00169f4:	c3                   	ret    

c00169f5 <sysCallClose(regs*)>:
c00169f5:	53                   	push   ebx
c00169f6:	83 ec 08             	sub    esp,0x8
c00169f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a00:	83 f8 02             	cmp    eax,0x2
c0016a03:	76 4f                	jbe    c0016a54 <sysCallClose(regs*)+0x5f>
c0016a05:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a0a:	74 53                	je     c0016a5f <sysCallClose(regs*)+0x6a>
c0016a0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a11:	74 5b                	je     c0016a6e <sysCallClose(regs*)+0x79>
c0016a13:	77 2f                	ja     c0016a44 <sysCallClose(regs*)+0x4f>
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	50                   	push   eax
c0016a19:	e8 49 76 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016a1e:	89 c3                	mov    ebx,eax
c0016a20:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a23:	e8 dc 8d ff ff       	call   c000f804 <File::close()>
c0016a28:	83 c4 10             	add    esp,0x10
c0016a2b:	85 db                	test   ebx,ebx
c0016a2d:	74 0c                	je     c0016a3b <sysCallClose(regs*)+0x46>
c0016a2f:	83 ec 0c             	sub    esp,0xc
c0016a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a34:	53                   	push   ebx
c0016a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a38:	83 c4 10             	add    esp,0x10
c0016a3b:	83 c4 08             	add    esp,0x8
c0016a3e:	31 c0                	xor    eax,eax
c0016a40:	31 d2                	xor    edx,edx
c0016a42:	5b                   	pop    ebx
c0016a43:	c3                   	ret    
c0016a44:	52                   	push   edx
c0016a45:	52                   	push   edx
c0016a46:	50                   	push   eax
c0016a47:	68 cc 2a 02 c0       	push   0xc0022acc
c0016a4c:	e8 ba 87 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016a51:	83 c4 10             	add    esp,0x10
c0016a54:	83 c4 08             	add    esp,0x8
c0016a57:	83 c8 ff             	or     eax,0xffffffff
c0016a5a:	83 ca ff             	or     edx,0xffffffff
c0016a5d:	5b                   	pop    ebx
c0016a5e:	c3                   	ret    
c0016a5f:	83 ec 0c             	sub    esp,0xc
c0016a62:	68 b3 2b 02 c0       	push   0xc0022bb3
c0016a67:	e8 9f 87 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016a6c:	eb ca                	jmp    c0016a38 <sysCallClose(regs*)+0x43>
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	68 c1 2b 02 c0       	push   0xc0022bc1
c0016a76:	eb ef                	jmp    c0016a67 <sysCallClose(regs*)+0x72>

c0016a78 <sysCallOpenDir(regs*)>:
c0016a78:	56                   	push   esi
c0016a79:	53                   	push   ebx
c0016a7a:	50                   	push   eax
c0016a7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a82:	85 c0                	test   eax,eax
c0016a84:	74 53                	je     c0016ad9 <sysCallOpenDir(regs*)+0x61>
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	68 14 01 00 00       	push   0x114
c0016a8e:	e8 43 86 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016a93:	89 c6                	mov    esi,eax
c0016a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a9a:	83 c4 0c             	add    esp,0xc
c0016a9d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aa0:	50                   	push   eax
c0016aa1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aa4:	50                   	push   eax
c0016aa5:	56                   	push   esi
c0016aa6:	e8 59 91 ff ff       	call   c000fc04 <Directory::Directory(char const*, Process*)>
c0016aab:	89 34 24             	mov    DWORD PTR [esp],esi
c0016aae:	e8 b5 91 ff ff       	call   c000fc68 <Directory::open()>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	85 c0                	test   eax,eax
c0016ab8:	75 1f                	jne    c0016ad9 <sysCallOpenDir(regs*)+0x61>
c0016aba:	83 ec 0c             	sub    esp,0xc
c0016abd:	56                   	push   esi
c0016abe:	e8 ef 72 ff ff       	call   c000ddb2 <UnixFile::getFileDescriptor()>
c0016ac3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ac6:	83 c4 10             	add    esp,0x10
c0016ac9:	89 02                	mov    DWORD PTR [edx],eax
c0016acb:	c1 f8 1f             	sar    eax,0x1f
c0016ace:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ad1:	31 c0                	xor    eax,eax
c0016ad3:	59                   	pop    ecx
c0016ad4:	31 d2                	xor    edx,edx
c0016ad6:	5b                   	pop    ebx
c0016ad7:	5e                   	pop    esi
c0016ad8:	c3                   	ret    
c0016ad9:	59                   	pop    ecx
c0016ada:	83 c8 ff             	or     eax,0xffffffff
c0016add:	5b                   	pop    ebx
c0016ade:	83 ca ff             	or     edx,0xffffffff
c0016ae1:	5e                   	pop    esi
c0016ae2:	c3                   	ret    

c0016ae3 <sysCallMakeDir(regs*)>:
c0016ae3:	56                   	push   esi
c0016ae4:	53                   	push   ebx
c0016ae5:	83 ec 10             	sub    esp,0x10
c0016ae8:	68 14 01 00 00       	push   0x114
c0016aed:	e8 e4 85 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016af2:	89 c3                	mov    ebx,eax
c0016af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016af9:	83 c4 0c             	add    esp,0xc
c0016afc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aff:	50                   	push   eax
c0016b00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b04:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b07:	52                   	push   edx
c0016b08:	53                   	push   ebx
c0016b09:	e8 f6 90 ff ff       	call   c000fc04 <Directory::Directory(char const*, Process*)>
c0016b0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b11:	e8 32 93 ff ff       	call   c000fe48 <Directory::create()>
c0016b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b19:	89 c6                	mov    esi,eax
c0016b1b:	e8 a4 91 ff ff       	call   c000fcc4 <Directory::close()>
c0016b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b28:	31 c0                	xor    eax,eax
c0016b2a:	85 f6                	test   esi,esi
c0016b2c:	0f 95 c0             	setne  al
c0016b2f:	31 d2                	xor    edx,edx
c0016b31:	f7 d8                	neg    eax
c0016b33:	83 d2 00             	adc    edx,0x0
c0016b36:	83 c4 14             	add    esp,0x14
c0016b39:	f7 da                	neg    edx
c0016b3b:	5b                   	pop    ebx
c0016b3c:	5e                   	pop    esi
c0016b3d:	c3                   	ret    

c0016b3e <sysCallCloseDir(regs*)>:
c0016b3e:	53                   	push   ebx
c0016b3f:	83 ec 08             	sub    esp,0x8
c0016b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b49:	83 f8 02             	cmp    eax,0x2
c0016b4c:	76 46                	jbe    c0016b94 <sysCallCloseDir(regs*)+0x56>
c0016b4e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b53:	77 2f                	ja     c0016b84 <sysCallCloseDir(regs*)+0x46>
c0016b55:	83 ec 0c             	sub    esp,0xc
c0016b58:	50                   	push   eax
c0016b59:	e8 09 75 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016b5e:	89 c3                	mov    ebx,eax
c0016b60:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b63:	e8 5c 91 ff ff       	call   c000fcc4 <Directory::close()>
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	85 db                	test   ebx,ebx
c0016b6d:	74 0c                	je     c0016b7b <sysCallCloseDir(regs*)+0x3d>
c0016b6f:	83 ec 0c             	sub    esp,0xc
c0016b72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b74:	53                   	push   ebx
c0016b75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b78:	83 c4 10             	add    esp,0x10
c0016b7b:	83 c4 08             	add    esp,0x8
c0016b7e:	31 c0                	xor    eax,eax
c0016b80:	31 d2                	xor    edx,edx
c0016b82:	5b                   	pop    ebx
c0016b83:	c3                   	ret    
c0016b84:	52                   	push   edx
c0016b85:	52                   	push   edx
c0016b86:	50                   	push   eax
c0016b87:	68 f4 2a 02 c0       	push   0xc0022af4
c0016b8c:	e8 7a 86 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	83 c4 08             	add    esp,0x8
c0016b97:	83 c8 ff             	or     eax,0xffffffff
c0016b9a:	83 ca ff             	or     edx,0xffffffff
c0016b9d:	5b                   	pop    ebx
c0016b9e:	c3                   	ret    

c0016b9f <sysCallWait(regs*)>:
c0016b9f:	83 ec 10             	sub    esp,0x10
c0016ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ba6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016ba9:	52                   	push   edx
c0016baa:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bad:	51                   	push   ecx
c0016bae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bb1:	50                   	push   eax
c0016bb2:	e8 4f 23 00 00       	call   c0018f06 <waitTask(int, int*, int)>
c0016bb7:	89 c2                	mov    edx,eax
c0016bb9:	83 c4 1c             	add    esp,0x1c
c0016bbc:	c1 fa 1f             	sar    edx,0x1f
c0016bbf:	c3                   	ret    

c0016bc0 <sysCallRmdir(regs*)>:
c0016bc0:	56                   	push   esi
c0016bc1:	53                   	push   ebx
c0016bc2:	83 ec 10             	sub    esp,0x10
c0016bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bc9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bcc:	68 14 01 00 00       	push   0x114
c0016bd1:	e8 00 85 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016bd6:	83 c4 0c             	add    esp,0xc
c0016bd9:	89 c3                	mov    ebx,eax
c0016bdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016be3:	50                   	push   eax
c0016be4:	56                   	push   esi
c0016be5:	53                   	push   ebx
c0016be6:	e8 57 8b ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0016beb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bee:	e8 2b 8d ff ff       	call   c000f91e <File::unlink()>
c0016bf3:	89 c6                	mov    esi,eax
c0016bf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bfd:	31 c0                	xor    eax,eax
c0016bff:	85 f6                	test   esi,esi
c0016c01:	0f 95 c0             	setne  al
c0016c04:	31 d2                	xor    edx,edx
c0016c06:	f7 d8                	neg    eax
c0016c08:	83 d2 00             	adc    edx,0x0
c0016c0b:	83 c4 14             	add    esp,0x14
c0016c0e:	f7 da                	neg    edx
c0016c10:	5b                   	pop    ebx
c0016c11:	5e                   	pop    esi
c0016c12:	c3                   	ret    

c0016c13 <sysCallUnlink(regs*)>:
c0016c13:	56                   	push   esi
c0016c14:	53                   	push   ebx
c0016c15:	83 ec 10             	sub    esp,0x10
c0016c18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c1f:	68 14 01 00 00       	push   0x114
c0016c24:	e8 ad 84 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016c29:	83 c4 0c             	add    esp,0xc
c0016c2c:	89 c3                	mov    ebx,eax
c0016c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c36:	50                   	push   eax
c0016c37:	56                   	push   esi
c0016c38:	53                   	push   ebx
c0016c39:	e8 04 8b ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0016c3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c41:	e8 d8 8c ff ff       	call   c000f91e <File::unlink()>
c0016c46:	89 c6                	mov    esi,eax
c0016c48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c50:	31 c0                	xor    eax,eax
c0016c52:	85 f6                	test   esi,esi
c0016c54:	0f 95 c0             	setne  al
c0016c57:	31 d2                	xor    edx,edx
c0016c59:	f7 d8                	neg    eax
c0016c5b:	83 d2 00             	adc    edx,0x0
c0016c5e:	83 c4 14             	add    esp,0x14
c0016c61:	f7 da                	neg    edx
c0016c63:	5b                   	pop    ebx
c0016c64:	5e                   	pop    esi
c0016c65:	c3                   	ret    

c0016c66 <sysCallGetArgv(regs*)>:
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c6d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c70:	85 c0                	test   eax,eax
c0016c72:	78 2b                	js     c0016c9f <sysCallGetArgv(regs*)+0x39>
c0016c74:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c7a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c7d:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c83:	7d 1a                	jge    c0016c9f <sysCallGetArgv(regs*)+0x39>
c0016c85:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c8c:	85 c0                	test   eax,eax
c0016c8e:	74 17                	je     c0016ca7 <sysCallGetArgv(regs*)+0x41>
c0016c90:	51                   	push   ecx
c0016c91:	51                   	push   ecx
c0016c92:	50                   	push   eax
c0016c93:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016c96:	50                   	push   eax
c0016c97:	e8 bd 9a fe ff       	call   c0000759 <strcpy>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	31 c0                	xor    eax,eax
c0016ca1:	31 d2                	xor    edx,edx
c0016ca3:	83 c4 0c             	add    esp,0xc
c0016ca6:	c3                   	ret    
c0016ca7:	b8 01 00 00 00       	mov    eax,0x1
c0016cac:	31 d2                	xor    edx,edx
c0016cae:	83 c4 0c             	add    esp,0xc
c0016cb1:	c3                   	ret    

c0016cb2 <sysCallTTYName(regs*)>:
c0016cb2:	56                   	push   esi
c0016cb3:	53                   	push   ebx
c0016cb4:	50                   	push   eax
c0016cb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cb9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cbc:	85 c0                	test   eax,eax
c0016cbe:	74 4d                	je     c0016d0d <sysCallTTYName(regs*)+0x5b>
c0016cc0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cc3:	83 f8 02             	cmp    eax,0x2
c0016cc6:	76 07                	jbe    c0016ccf <sysCallTTYName(regs*)+0x1d>
c0016cc8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ccd:	75 54                	jne    c0016d23 <sysCallTTYName(regs*)+0x71>
c0016ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cd7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016cdd:	85 db                	test   ebx,ebx
c0016cdf:	74 2c                	je     c0016d0d <sysCallTTYName(regs*)+0x5b>
c0016ce1:	83 ec 0c             	sub    esp,0xc
c0016ce4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ce6:	53                   	push   ebx
c0016ce7:	ff 10                	call   DWORD PTR [eax]
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	84 c0                	test   al,al
c0016cee:	74 28                	je     c0016d18 <sysCallTTYName(regs*)+0x66>
c0016cf0:	50                   	push   eax
c0016cf1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016cf7:	50                   	push   eax
c0016cf8:	53                   	push   ebx
c0016cf9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cfc:	50                   	push   eax
c0016cfd:	e8 57 9a fe ff       	call   c0000759 <strcpy>
c0016d02:	83 c4 10             	add    esp,0x10
c0016d05:	31 c0                	xor    eax,eax
c0016d07:	31 d2                	xor    edx,edx
c0016d09:	59                   	pop    ecx
c0016d0a:	5b                   	pop    ebx
c0016d0b:	5e                   	pop    esi
c0016d0c:	c3                   	ret    
c0016d0d:	59                   	pop    ecx
c0016d0e:	b8 01 00 00 00       	mov    eax,0x1
c0016d13:	5b                   	pop    ebx
c0016d14:	31 d2                	xor    edx,edx
c0016d16:	5e                   	pop    esi
c0016d17:	c3                   	ret    
c0016d18:	59                   	pop    ecx
c0016d19:	b8 02 00 00 00       	mov    eax,0x2
c0016d1e:	5b                   	pop    ebx
c0016d1f:	31 d2                	xor    edx,edx
c0016d21:	5e                   	pop    esi
c0016d22:	c3                   	ret    
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	50                   	push   eax
c0016d27:	e8 3b 73 ff ff       	call   c000e067 <getFromFileDescriptor(int)>
c0016d2c:	83 c4 10             	add    esp,0x10
c0016d2f:	89 c3                	mov    ebx,eax
c0016d31:	eb aa                	jmp    c0016cdd <sysCallTTYName(regs*)+0x2b>

c0016d33 <sysCallGetEnv(regs*)>:
c0016d33:	83 ec 0c             	sub    esp,0xc
c0016d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d3d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d40:	85 d2                	test   edx,edx
c0016d42:	75 22                	jne    c0016d66 <sysCallGetEnv(regs*)+0x33>
c0016d44:	31 c0                	xor    eax,eax
c0016d46:	31 d2                	xor    edx,edx
c0016d48:	85 c9                	test   ecx,ecx
c0016d4a:	74 04                	je     c0016d50 <sysCallGetEnv(regs*)+0x1d>
c0016d4c:	83 c4 0c             	add    esp,0xc
c0016d4f:	c3                   	ret    
c0016d50:	83 ec 0c             	sub    esp,0xc
c0016d53:	68 18 2b 02 c0       	push   0xc0022b18
c0016d58:	e8 7a 99 fe ff       	call   c00006d7 <strlen>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	31 d2                	xor    edx,edx
c0016d62:	83 c4 0c             	add    esp,0xc
c0016d65:	c3                   	ret    
c0016d66:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d69:	85 c9                	test   ecx,ecx
c0016d6b:	74 0b                	je     c0016d78 <sysCallGetEnv(regs*)+0x45>
c0016d6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d70:	31 c0                	xor    eax,eax
c0016d72:	31 d2                	xor    edx,edx
c0016d74:	83 c4 0c             	add    esp,0xc
c0016d77:	c3                   	ret    
c0016d78:	52                   	push   edx
c0016d79:	52                   	push   edx
c0016d7a:	68 18 2b 02 c0       	push   0xc0022b18
c0016d7f:	50                   	push   eax
c0016d80:	e8 d4 99 fe ff       	call   c0000759 <strcpy>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	eb e6                	jmp    c0016d70 <sysCallGetEnv(regs*)+0x3d>

c0016d8a <sysCallUSleep(regs*)>:
c0016d8a:	57                   	push   edi
c0016d8b:	56                   	push   esi
c0016d8c:	53                   	push   ebx
c0016d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d91:	52                   	push   edx
c0016d92:	52                   	push   edx
c0016d93:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016d96:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d99:	89 c8                	mov    eax,ecx
c0016d9b:	89 da                	mov    edx,ebx
c0016d9d:	0f a4 c2 05          	shld   edx,eax,0x5
c0016da1:	c1 e0 05             	shl    eax,0x5
c0016da4:	29 c8                	sub    eax,ecx
c0016da6:	19 da                	sbb    edx,ebx
c0016da8:	0f a4 c2 02          	shld   edx,eax,0x2
c0016dac:	c1 e0 02             	shl    eax,0x2
c0016daf:	01 c8                	add    eax,ecx
c0016db1:	11 da                	adc    edx,ebx
c0016db3:	0f a4 c2 03          	shld   edx,eax,0x3
c0016db7:	c1 e0 03             	shl    eax,0x3
c0016dba:	52                   	push   edx
c0016dbb:	50                   	push   eax
c0016dbc:	e8 e0 21 00 00       	call   c0018fa1 <nanoSleep(unsigned long long)>
c0016dc1:	83 c4 10             	add    esp,0x10
c0016dc4:	31 c0                	xor    eax,eax
c0016dc6:	31 d2                	xor    edx,edx
c0016dc8:	5b                   	pop    ebx
c0016dc9:	5e                   	pop    esi
c0016dca:	5f                   	pop    edi
c0016dcb:	c3                   	ret    

c0016dcc <sysCallSpawn(regs*)>:
c0016dcc:	56                   	push   esi
c0016dcd:	53                   	push   ebx
c0016dce:	50                   	push   eax
c0016dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dd3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dd6:	85 c0                	test   eax,eax
c0016dd8:	75 08                	jne    c0016de2 <sysCallSpawn(regs*)+0x16>
c0016dda:	59                   	pop    ecx
c0016ddb:	31 c0                	xor    eax,eax
c0016ddd:	5b                   	pop    ebx
c0016dde:	31 d2                	xor    edx,edx
c0016de0:	5e                   	pop    esi
c0016de1:	c3                   	ret    
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	68 3b 07 00 00       	push   0x73b
c0016dea:	e8 e7 82 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016def:	89 c6                	mov    esi,eax
c0016df1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016df4:	50                   	push   eax
c0016df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016dfd:	50                   	push   eax
c0016dfe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e01:	50                   	push   eax
c0016e02:	56                   	push   esi
c0016e03:	e8 d6 18 00 00       	call   c00186de <Process::Process(char const*, Process*, char**)>
c0016e08:	83 c4 20             	add    esp,0x20
c0016e0b:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e12:	75 c6                	jne    c0016dda <sysCallSpawn(regs*)+0xe>
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	56                   	push   esi
c0016e18:	e8 3d 1e 00 00       	call   c0018c5a <Process::createUserThread()>
c0016e1d:	83 c4 10             	add    esp,0x10
c0016e20:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e22:	89 c2                	mov    edx,eax
c0016e24:	c1 fa 1f             	sar    edx,0x1f
c0016e27:	59                   	pop    ecx
c0016e28:	5b                   	pop    ebx
c0016e29:	5e                   	pop    esi
c0016e2a:	c3                   	ret    

c0016e2b <sysAppSettings(regs*)>:
c0016e2b:	53                   	push   ebx
c0016e2c:	31 d2                	xor    edx,edx
c0016e2e:	83 ec 08             	sub    esp,0x8
c0016e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e35:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e38:	b8 01 00 00 00       	mov    eax,0x1
c0016e3d:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e43:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e49:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e4e:	75 30                	jne    c0016e80 <sysAppSettings(regs*)+0x55>
c0016e50:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e56:	83 e0 1f             	and    eax,0x1f
c0016e59:	3c 01                	cmp    al,0x1
c0016e5b:	74 28                	je     c0016e85 <sysAppSettings(regs*)+0x5a>
c0016e5d:	3c 07                	cmp    al,0x7
c0016e5f:	0f 84 be 00 00 00    	je     c0016f23 <sysAppSettings(regs*)+0xf8>
c0016e65:	84 c0                	test   al,al
c0016e67:	0f 84 da 00 00 00    	je     c0016f47 <sysAppSettings(regs*)+0x11c>
c0016e6d:	3c 08                	cmp    al,0x8
c0016e6f:	74 6d                	je     c0016ede <sysAppSettings(regs*)+0xb3>
c0016e71:	25 ff 00 00 00       	and    eax,0xff
c0016e76:	05 e8 03 00 00       	add    eax,0x3e8
c0016e7b:	89 c2                	mov    edx,eax
c0016e7d:	c1 fa 1f             	sar    edx,0x1f
c0016e80:	83 c4 08             	add    esp,0x8
c0016e83:	5b                   	pop    ebx
c0016e84:	c3                   	ret    
c0016e85:	50                   	push   eax
c0016e86:	68 00 01 00 00       	push   0x100
c0016e8b:	6a 00                	push   0x0
c0016e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e95:	83 c0 0c             	add    eax,0xc
c0016e98:	50                   	push   eax
c0016e99:	e8 1c 98 fe ff       	call   c00006ba <memset>
c0016e9e:	83 c4 0c             	add    esp,0xc
c0016ea1:	68 ff 00 00 00       	push   0xff
c0016ea6:	53                   	push   ebx
c0016ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eaf:	83 c0 0c             	add    eax,0xc
c0016eb2:	50                   	push   eax
c0016eb3:	e8 cc 97 fe ff       	call   c0000684 <memcpy>
c0016eb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebd:	5a                   	pop    edx
c0016ebe:	59                   	pop    ecx
c0016ebf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec2:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ec5:	52                   	push   edx
c0016ec6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ecc:	53                   	push   ebx
c0016ecd:	e8 dc 62 ff ff       	call   c000d1ae <VgaText::setTitle(char*)>
c0016ed2:	83 c4 10             	add    esp,0x10
c0016ed5:	31 c0                	xor    eax,eax
c0016ed7:	31 d2                	xor    edx,edx
c0016ed9:	83 c4 08             	add    esp,0x8
c0016edc:	5b                   	pop    ebx
c0016edd:	c3                   	ret    
c0016ede:	50                   	push   eax
c0016edf:	50                   	push   eax
c0016ee0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ee6:	83 e0 0f             	and    eax,0xf
c0016ee9:	50                   	push   eax
c0016eea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ef2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016ef8:	50                   	push   eax
c0016ef9:	e8 a0 62 ff ff       	call   c000d19e <VgaText::setTitleColour(VgaColour)>
c0016efe:	58                   	pop    eax
c0016eff:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f05:	c1 e8 04             	shr    eax,0x4
c0016f08:	5a                   	pop    edx
c0016f09:	83 e0 0f             	and    eax,0xf
c0016f0c:	50                   	push   eax
c0016f0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f15:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f1b:	51                   	push   ecx
c0016f1c:	e8 6d 62 ff ff       	call   c000d18e <VgaText::setTitleTextColour(VgaColour)>
c0016f21:	eb af                	jmp    c0016ed2 <sysAppSettings(regs*)+0xa7>
c0016f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f2b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f31:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f37:	c0 e8 06             	shr    al,0x6
c0016f3a:	83 e0 01             	and    eax,0x1
c0016f3d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f43:	31 c0                	xor    eax,eax
c0016f45:	eb 90                	jmp    c0016ed7 <sysAppSettings(regs*)+0xac>
c0016f47:	b8 02 00 00 00       	mov    eax,0x2
c0016f4c:	31 d2                	xor    edx,edx
c0016f4e:	eb 89                	jmp    c0016ed9 <sysAppSettings(regs*)+0xae>

c0016f50 <sysSetFatAttrib(regs*)>:
c0016f50:	57                   	push   edi
c0016f51:	56                   	push   esi
c0016f52:	53                   	push   ebx
c0016f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f57:	83 ec 0c             	sub    esp,0xc
c0016f5a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f5d:	68 14 01 00 00       	push   0x114
c0016f62:	e8 6f 81 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016f67:	83 c4 0c             	add    esp,0xc
c0016f6a:	89 c3                	mov    ebx,eax
c0016f6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f74:	50                   	push   eax
c0016f75:	57                   	push   edi
c0016f76:	53                   	push   ebx
c0016f77:	e8 c6 87 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0016f7c:	83 c4 0c             	add    esp,0xc
c0016f7f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f82:	0f b6 d4             	movzx  edx,ah
c0016f85:	52                   	push   edx
c0016f86:	25 ff 00 00 00       	and    eax,0xff
c0016f8b:	50                   	push   eax
c0016f8c:	53                   	push   ebx
c0016f8d:	e8 26 8a ff ff       	call   c000f9b8 <File::chfatattr(unsigned char, unsigned char)>
c0016f92:	89 c6                	mov    esi,eax
c0016f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f9c:	83 c4 10             	add    esp,0x10
c0016f9f:	31 c0                	xor    eax,eax
c0016fa1:	85 f6                	test   esi,esi
c0016fa3:	0f 95 c0             	setne  al
c0016fa6:	5b                   	pop    ebx
c0016fa7:	31 d2                	xor    edx,edx
c0016fa9:	f7 d8                	neg    eax
c0016fab:	83 d2 00             	adc    edx,0x0
c0016fae:	5e                   	pop    esi
c0016faf:	f7 da                	neg    edx
c0016fb1:	5f                   	pop    edi
c0016fb2:	c3                   	ret    

c0016fb3 <sysPanic(regs*)>:
c0016fb3:	83 ec 18             	sub    esp,0x18
c0016fb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fbd:	50                   	push   eax
c0016fbe:	e8 77 ea ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0016fc3:	c7 04 24 cf 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bcf
c0016fca:	e8 6b ea ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0016fcf:	b8 01 00 00 00       	mov    eax,0x1
c0016fd4:	31 d2                	xor    edx,edx
c0016fd6:	83 c4 1c             	add    esp,0x1c
c0016fd9:	c3                   	ret    

c0016fda <sysPipe(regs*)>:
c0016fda:	57                   	push   edi
c0016fdb:	56                   	push   esi
c0016fdc:	53                   	push   ebx
c0016fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fe7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016fea:	6a 20                	push   0x20
c0016fec:	e8 e5 80 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0016ff1:	89 c3                	mov    ebx,eax
c0016ff3:	58                   	pop    eax
c0016ff4:	5a                   	pop    edx
c0016ff5:	68 00 50 00 00       	push   0x5000
c0016ffa:	53                   	push   ebx
c0016ffb:	e8 ec 5a ff ff       	call   c000caec <Pipe::Pipe(int)>
c0017000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017003:	e8 aa 6d ff ff       	call   c000ddb2 <UnixFile::getFileDescriptor()>
c0017008:	89 07                	mov    DWORD PTR [edi],eax
c001700a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001700d:	e8 a0 6d ff ff       	call   c000ddb2 <UnixFile::getFileDescriptor()>
c0017012:	83 c4 10             	add    esp,0x10
c0017015:	89 06                	mov    DWORD PTR [esi],eax
c0017017:	31 d2                	xor    edx,edx
c0017019:	5b                   	pop    ebx
c001701a:	31 c0                	xor    eax,eax
c001701c:	5e                   	pop    esi
c001701d:	5f                   	pop    edi
c001701e:	c3                   	ret    

c001701f <sysGetUnixTime(regs*)>:
c001701f:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c0017024:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001702a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001702e:	e9 d7 90 ff ff       	jmp    c001010a <Clock::timeInSecondsLocal()>

c0017033 <string_ends_with(char const*, char const*)>:
c0017033:	57                   	push   edi
c0017034:	56                   	push   esi
c0017035:	53                   	push   ebx
c0017036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001703a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001703e:	83 ec 0c             	sub    esp,0xc
c0017041:	53                   	push   ebx
c0017042:	e8 90 96 fe ff       	call   c00006d7 <strlen>
c0017047:	89 3c 24             	mov    DWORD PTR [esp],edi
c001704a:	89 c6                	mov    esi,eax
c001704c:	e8 86 96 fe ff       	call   c00006d7 <strlen>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	31 d2                	xor    edx,edx
c0017056:	39 c6                	cmp    esi,eax
c0017058:	7d 06                	jge    c0017060 <string_ends_with(char const*, char const*)+0x2d>
c001705a:	5b                   	pop    ebx
c001705b:	89 d0                	mov    eax,edx
c001705d:	5e                   	pop    esi
c001705e:	5f                   	pop    edi
c001705f:	c3                   	ret    
c0017060:	52                   	push   edx
c0017061:	29 c6                	sub    esi,eax
c0017063:	52                   	push   edx
c0017064:	01 f3                	add    ebx,esi
c0017066:	57                   	push   edi
c0017067:	53                   	push   ebx
c0017068:	e8 3d 97 fe ff       	call   c00007aa <strcmp>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	31 d2                	xor    edx,edx
c0017072:	85 c0                	test   eax,eax
c0017074:	5b                   	pop    ebx
c0017075:	0f 94 c2             	sete   dl
c0017078:	5e                   	pop    esi
c0017079:	89 d0                	mov    eax,edx
c001707b:	5f                   	pop    edi
c001707c:	c3                   	ret    

c001707d <sysCallOpen(regs*)>:
c001707d:	56                   	push   esi
c001707e:	53                   	push   ebx
c001707f:	81 ec 04 01 00 00    	sub    esp,0x104
c0017085:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001708c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001708f:	85 c9                	test   ecx,ecx
c0017091:	0f 84 bb 00 00 00    	je     c0017152 <sysCallOpen(regs*)+0xd5>
c0017097:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001709a:	85 c0                	test   eax,eax
c001709c:	0f 84 b0 00 00 00    	je     c0017152 <sysCallOpen(regs*)+0xd5>
c00170a2:	52                   	push   edx
c00170a3:	68 de 2b 02 c0       	push   0xc0022bde
c00170a8:	50                   	push   eax
c00170a9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170ad:	56                   	push   esi
c00170ae:	e8 e5 84 ff ff       	call   c000f598 <standardiseFiles(char*, char const*, char const*)>
c00170b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00170b6:	e8 1c 96 fe ff       	call   c00006d7 <strlen>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	48                   	dec    eax
c00170bf:	74 25                	je     c00170e6 <sysCallOpen(regs*)+0x69>
c00170c1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170c4:	80 fa 2e             	cmp    dl,0x2e
c00170c7:	74 19                	je     c00170e2 <sysCallOpen(regs*)+0x65>
c00170c9:	80 fa 3a             	cmp    dl,0x3a
c00170cc:	74 14                	je     c00170e2 <sysCallOpen(regs*)+0x65>
c00170ce:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170d2:	48                   	dec    eax
c00170d3:	74 11                	je     c00170e6 <sysCallOpen(regs*)+0x69>
c00170d5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170d8:	80 fa 3a             	cmp    dl,0x3a
c00170db:	74 05                	je     c00170e2 <sysCallOpen(regs*)+0x65>
c00170dd:	80 fa 2e             	cmp    dl,0x2e
c00170e0:	75 ec                	jne    c00170ce <sysCallOpen(regs*)+0x51>
c00170e2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170e6:	51                   	push   ecx
c00170e7:	51                   	push   ecx
c00170e8:	68 e2 2b 02 c0       	push   0xc0022be2
c00170ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170f0:	50                   	push   eax
c00170f1:	e8 3d ff ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c00170f6:	83 c4 10             	add    esp,0x10
c00170f9:	85 c0                	test   eax,eax
c00170fb:	75 17                	jne    c0017114 <sysCallOpen(regs*)+0x97>
c00170fd:	50                   	push   eax
c00170fe:	50                   	push   eax
c00170ff:	68 03 2c 02 c0       	push   0xc0022c03
c0017104:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017107:	50                   	push   eax
c0017108:	e8 26 ff ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c001710d:	83 c4 10             	add    esp,0x10
c0017110:	85 c0                	test   eax,eax
c0017112:	74 4d                	je     c0017161 <sysCallOpen(regs*)+0xe4>
c0017114:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017117:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001711d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017124:	50                   	push   eax
c0017125:	50                   	push   eax
c0017126:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017129:	8b 10                	mov    edx,DWORD PTR [eax]
c001712b:	52                   	push   edx
c001712c:	68 e7 2b 02 c0       	push   0xc0022be7
c0017131:	e8 d5 80 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017136:	c7 04 24 f6 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bf6
c001713d:	e8 c9 80 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017142:	83 c4 10             	add    esp,0x10
c0017145:	81 c4 04 01 00 00    	add    esp,0x104
c001714b:	31 c0                	xor    eax,eax
c001714d:	31 d2                	xor    edx,edx
c001714f:	5b                   	pop    ebx
c0017150:	5e                   	pop    esi
c0017151:	c3                   	ret    
c0017152:	81 c4 04 01 00 00    	add    esp,0x104
c0017158:	83 c8 ff             	or     eax,0xffffffff
c001715b:	83 ca ff             	or     edx,0xffffffff
c001715e:	5b                   	pop    ebx
c001715f:	5e                   	pop    esi
c0017160:	c3                   	ret    
c0017161:	50                   	push   eax
c0017162:	50                   	push   eax
c0017163:	68 e3 2b 02 c0       	push   0xc0022be3
c0017168:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001716b:	50                   	push   eax
c001716c:	e8 39 96 fe ff       	call   c00007aa <strcmp>
c0017171:	83 c4 10             	add    esp,0x10
c0017174:	85 c0                	test   eax,eax
c0017176:	74 9c                	je     c0017114 <sysCallOpen(regs*)+0x97>
c0017178:	50                   	push   eax
c0017179:	50                   	push   eax
c001717a:	68 e2 2b 02 c0       	push   0xc0022be2
c001717f:	56                   	push   esi
c0017180:	e8 ae fe ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c0017185:	83 c4 10             	add    esp,0x10
c0017188:	85 c0                	test   eax,eax
c001718a:	75 88                	jne    c0017114 <sysCallOpen(regs*)+0x97>
c001718c:	52                   	push   edx
c001718d:	52                   	push   edx
c001718e:	68 08 2c 02 c0       	push   0xc0022c08
c0017193:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0017196:	51                   	push   ecx
c0017197:	e8 97 fe ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c001719c:	83 c4 10             	add    esp,0x10
c001719f:	85 c0                	test   eax,eax
c00171a1:	0f 85 d5 00 00 00    	jne    c001727c <sysCallOpen(regs*)+0x1ff>
c00171a7:	50                   	push   eax
c00171a8:	50                   	push   eax
c00171a9:	68 0d 2c 02 c0       	push   0xc0022c0d
c00171ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171b1:	50                   	push   eax
c00171b2:	e8 7c fe ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c00171b7:	83 c4 10             	add    esp,0x10
c00171ba:	85 c0                	test   eax,eax
c00171bc:	0f 85 ba 00 00 00    	jne    c001727c <sysCallOpen(regs*)+0x1ff>
c00171c2:	50                   	push   eax
c00171c3:	50                   	push   eax
c00171c4:	68 09 2c 02 c0       	push   0xc0022c09
c00171c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171cc:	50                   	push   eax
c00171cd:	e8 d8 95 fe ff       	call   c00007aa <strcmp>
c00171d2:	83 c4 10             	add    esp,0x10
c00171d5:	85 c0                	test   eax,eax
c00171d7:	0f 84 9f 00 00 00    	je     c001727c <sysCallOpen(regs*)+0x1ff>
c00171dd:	50                   	push   eax
c00171de:	50                   	push   eax
c00171df:	68 08 2c 02 c0       	push   0xc0022c08
c00171e4:	56                   	push   esi
c00171e5:	e8 49 fe ff ff       	call   c0017033 <string_ends_with(char const*, char const*)>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	85 c0                	test   eax,eax
c00171ef:	0f 85 87 00 00 00    	jne    c001727c <sysCallOpen(regs*)+0x1ff>
c00171f5:	83 ec 0c             	sub    esp,0xc
c00171f8:	68 14 01 00 00       	push   0x114
c00171fd:	e8 d4 7e ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0017202:	89 c6                	mov    esi,eax
c0017204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017209:	83 c4 0c             	add    esp,0xc
c001720c:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c001720f:	51                   	push   ecx
c0017210:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017213:	50                   	push   eax
c0017214:	56                   	push   esi
c0017215:	e8 28 85 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c001721a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	89 d0                	mov    eax,edx
c0017222:	25 ff 00 00 00       	and    eax,0xff
c0017227:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001722a:	89 d0                	mov    eax,edx
c001722c:	83 e0 01             	and    eax,0x1
c001722f:	f6 c2 02             	test   dl,0x2
c0017232:	74 03                	je     c0017237 <sysCallOpen(regs*)+0x1ba>
c0017234:	83 c8 02             	or     eax,0x2
c0017237:	f6 c2 04             	test   dl,0x4
c001723a:	74 03                	je     c001723f <sysCallOpen(regs*)+0x1c2>
c001723c:	83 c8 04             	or     eax,0x4
c001723f:	f6 c2 08             	test   dl,0x8
c0017242:	74 03                	je     c0017247 <sysCallOpen(regs*)+0x1ca>
c0017244:	83 c8 0a             	or     eax,0xa
c0017247:	83 e2 10             	and    edx,0x10
c001724a:	74 03                	je     c001724f <sysCallOpen(regs*)+0x1d2>
c001724c:	83 c8 12             	or     eax,0x12
c001724f:	52                   	push   edx
c0017250:	52                   	push   edx
c0017251:	50                   	push   eax
c0017252:	56                   	push   esi
c0017253:	e8 4e 85 ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	85 c0                	test   eax,eax
c001725d:	0f 85 ef fe ff ff    	jne    c0017152 <sysCallOpen(regs*)+0xd5>
c0017263:	83 ec 0c             	sub    esp,0xc
c0017266:	56                   	push   esi
c0017267:	e8 46 6b ff ff       	call   c000ddb2 <UnixFile::getFileDescriptor()>
c001726c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001726f:	89 02                	mov    DWORD PTR [edx],eax
c0017271:	c1 f8 1f             	sar    eax,0x1f
c0017274:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017277:	e9 c6 fe ff ff       	jmp    c0017142 <sysCallOpen(regs*)+0xc5>
c001727c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001727f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017285:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001728c:	e9 b4 fe ff ff       	jmp    c0017145 <sysCallOpen(regs*)+0xc8>

c0017291 <setupSystemCalls()>:
c0017291:	c7 05 e0 51 02 c0 8c 64 01 c0 	mov    DWORD PTR ds:0xc00251e0,0xc001648c
c001729b:	c7 05 e4 51 02 c0 9f 62 01 c0 	mov    DWORD PTR ds:0xc00251e4,0xc001629f
c00172a5:	c7 05 e8 51 02 c0 b4 63 01 c0 	mov    DWORD PTR ds:0xc00251e8,0xc00163b4
c00172af:	c7 05 ec 51 02 c0 09 64 01 c0 	mov    DWORD PTR ds:0xc00251ec,0xc0016409
c00172b9:	c7 05 f0 51 02 c0 4c 63 01 c0 	mov    DWORD PTR ds:0xc00251f0,0xc001634c
c00172c3:	c7 05 f4 51 02 c0 a6 64 01 c0 	mov    DWORD PTR ds:0xc00251f4,0xc00164a6
c00172cd:	c7 05 f8 51 02 c0 65 66 01 c0 	mov    DWORD PTR ds:0xc00251f8,0xc0016665
c00172d7:	c7 05 fc 51 02 c0 8b 66 01 c0 	mov    DWORD PTR ds:0xc00251fc,0xc001668b
c00172e1:	c7 05 04 52 02 c0 f5 69 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00169f5
c00172eb:	c7 05 00 52 02 c0 7d 70 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc001707d
c00172f5:	c7 05 08 52 02 c0 78 6a 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0016a78
c00172ff:	c7 05 0c 52 02 c0 fa 66 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc00166fa
c0017309:	c7 05 10 52 02 c0 b6 64 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc00164b6
c0017313:	c7 05 14 52 02 c0 bb 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164bb
c001731d:	c7 05 18 52 02 c0 e3 6a 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc0016ae3
c0017327:	c7 05 1c 52 02 c0 3e 6b 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc0016b3e
c0017331:	c7 05 20 52 02 c0 e5 67 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc00167e5
c001733b:	c7 05 24 52 02 c0 4b 68 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc001684b
c0017345:	c7 05 28 52 02 c0 74 69 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016974
c001734f:	c7 05 2c 52 02 c0 c0 64 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc00164c0
c0017359:	c7 05 30 52 02 c0 9f 6b 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc0016b9f
c0017363:	c7 05 34 52 02 c0 ca 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164ca
c001736d:	c7 05 38 52 02 c0 d1 64 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc00164d1
c0017377:	c7 05 3c 52 02 c0 c0 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016bc0
c0017381:	c7 05 40 52 02 c0 13 6c 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc0016c13
c001738b:	c7 05 44 52 02 c0 d8 64 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc00164d8
c0017395:	c7 05 48 52 02 c0 66 6c 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0016c66
c001739f:	c7 05 4c 52 02 c0 ad 66 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00166ad
c00173a9:	c7 05 50 52 02 c0 b2 6c 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016cb2
c00173b3:	c7 05 54 52 02 c0 8d 67 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc001678d
c00173bd:	c7 05 58 52 02 c0 8a 6d 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc0016d8a
c00173c7:	c7 05 5c 52 02 c0 c6 68 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc00168c6
c00173d1:	c7 05 60 52 02 c0 cc 6d 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016dcc
c00173db:	c7 05 64 52 02 c0 33 6d 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc0016d33
c00173e5:	c7 05 68 52 02 c0 2b 6e 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016e2b
c00173ef:	c7 05 6c 52 02 c0 ec 64 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00164ec
c00173f9:	c7 05 70 52 02 c0 4f 65 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc001654f
c0017403:	c7 05 74 52 02 c0 97 65 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc0016597
c001740d:	c7 05 78 52 02 c0 50 6f 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016f50
c0017417:	c7 05 7c 52 02 c0 b3 6f 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc0016fb3
c0017421:	c7 05 80 52 02 c0 ea 65 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc00165ea
c001742b:	c7 05 84 52 02 c0 da 6f 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016fda
c0017435:	c7 05 88 52 02 c0 1f 70 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc001701f
c001743f:	c7 05 8c 52 02 c0 b7 62 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00162b7
c0017449:	c3                   	ret    

c001744a <systemCall(regs*, void*)>:
c001744a:	53                   	push   ebx
c001744b:	83 ec 08             	sub    esp,0x8
c001744e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017452:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017455:	83 f8 7f             	cmp    eax,0x7f
c0017458:	77 16                	ja     c0017470 <systemCall(regs*, void*)+0x26>
c001745a:	8b 14 85 e0 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae20]
c0017461:	85 d2                	test   edx,edx
c0017463:	74 0b                	je     c0017470 <systemCall(regs*, void*)+0x26>
c0017465:	83 ec 0c             	sub    esp,0xc
c0017468:	53                   	push   ebx
c0017469:	ff d2                	call   edx
c001746b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001746e:	eb 0d                	jmp    c001747d <systemCall(regs*, void*)+0x33>
c0017470:	52                   	push   edx
c0017471:	52                   	push   edx
c0017472:	50                   	push   eax
c0017473:	68 12 2c 02 c0       	push   0xc0022c12
c0017478:	e8 8e 7d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017485:	83 c4 08             	add    esp,0x8
c0017488:	31 d2                	xor    edx,edx
c001748a:	5b                   	pop    ebx
c001748b:	c3                   	ret    

c001748c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001748c:	55                   	push   ebp
c001748d:	89 e5                	mov    ebp,esp
c001748f:	57                   	push   edi
c0017490:	56                   	push   esi
c0017491:	53                   	push   ebx
c0017492:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017498:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001749b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001749e:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174a5:	74 27                	je     c00174ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174a7:	85 c0                	test   eax,eax
c00174a9:	74 23                	je     c00174ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174af:	75 1d                	jne    c00174ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b1:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174b4:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174ba:	89 d1                	mov    ecx,edx
c00174bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174c2:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174c8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174cb:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174ce:	83 ec 0c             	sub    esp,0xc
c00174d1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174d4:	05 ff 0f 00 00       	add    eax,0xfff
c00174d9:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174df:	6a 01                	push   0x1
c00174e1:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174e7:	e8 04 6d ff ff       	call   c000e1f0 <Virt::allocateKernelVirtualPages(int)>
c00174ec:	83 c4 10             	add    esp,0x10
c00174ef:	89 c6                	mov    esi,eax
c00174f1:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00174f7:	0f 86 21 01 00 00    	jbe    c001761e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c00174fd:	c1 eb 0c             	shr    ebx,0xc
c0017500:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001750a:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017510:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017513:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017516:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001751c:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001751f:	29 d8                	sub    eax,ebx
c0017521:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017527:	0f 83 f4 00 00 00    	jae    c0017621 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c001752d:	83 ec 0c             	sub    esp,0xc
c0017530:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017533:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017539:	3d 00 10 00 00       	cmp    eax,0x1000
c001753e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017540:	52                   	push   edx
c0017541:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017547:	52                   	push   edx
c0017548:	76 05                	jbe    c001754f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001754a:	b8 00 10 00 00       	mov    eax,0x1000
c001754f:	31 d2                	xor    edx,edx
c0017551:	52                   	push   edx
c0017552:	50                   	push   eax
c0017553:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017556:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017559:	83 c4 20             	add    esp,0x20
c001755c:	85 c0                	test   eax,eax
c001755e:	74 1f                	je     c001757f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017560:	51                   	push   ecx
c0017561:	51                   	push   ecx
c0017562:	50                   	push   eax
c0017563:	68 26 2c 02 c0       	push   0xc0022c26
c0017568:	e8 9e 7c ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001756d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017570:	e8 c8 6f ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c0017575:	83 c4 10             	add    esp,0x10
c0017578:	31 c0                	xor    eax,eax
c001757a:	e9 7c 01 00 00       	jmp    c00176fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c001757f:	e8 bf 14 00 00       	call   c0018a43 <lockScheduler()>
c0017584:	e8 26 50 ff ff       	call   c000c5af <Phys::allocatePage()>
c0017589:	6a 07                	push   0x7
c001758b:	56                   	push   esi
c001758c:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017592:	50                   	push   eax
c0017593:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017599:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001759c:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175a2:	e8 15 73 ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c00175a7:	83 c4 0c             	add    esp,0xc
c00175aa:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175b0:	6a 00                	push   0x0
c00175b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b8:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175bb:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175c1:	e8 54 71 ff ff       	call   c000e71a <VAS::mapOtherVASIn(bool, VAS*)>
c00175c6:	58                   	pop    eax
c00175c7:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175cd:	5a                   	pop    edx
c00175ce:	68 07 04 00 00       	push   0x407
c00175d3:	53                   	push   ebx
c00175d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175da:	50                   	push   eax
c00175db:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175e1:	6a 00                	push   0x0
c00175e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175eb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175f1:	e8 82 76 ff ff       	call   c000ec78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175f6:	83 c4 1c             	add    esp,0x1c
c00175f9:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c00175ff:	68 00 10 00 00       	push   0x1000
c0017604:	50                   	push   eax
c0017605:	56                   	push   esi
c0017606:	e8 79 90 fe ff       	call   c0000684 <memcpy>
c001760b:	e8 35 14 00 00       	call   c0018a45 <unlockScheduler()>
c0017610:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	e9 f5 fe ff ff       	jmp    c0017513 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c001761e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017621:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001762b:	0f 86 bc 00 00 00    	jbe    c00176ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017631:	e8 0d 14 00 00       	call   c0018a43 <lockScheduler()>
c0017636:	51                   	push   ecx
c0017637:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001763d:	6a 00                	push   0x0
c001763f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017644:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017647:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001764d:	e8 c8 70 ff ff       	call   c000e71a <VAS::mapOtherVASIn(bool, VAS*)>
c0017652:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017658:	c1 e8 0c             	shr    eax,0xc
c001765b:	83 c4 10             	add    esp,0x10
c001765e:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017664:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001766e:	e8 3c 4f ff ff       	call   c000c5af <Phys::allocatePage()>
c0017673:	6a 07                	push   0x7
c0017675:	56                   	push   esi
c0017676:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001767c:	50                   	push   eax
c001767d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017683:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017686:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001768c:	e8 2b 72 ff ff       	call   c000e8bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0017691:	58                   	pop    eax
c0017692:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0017698:	5a                   	pop    edx
c0017699:	68 07 04 00 00       	push   0x407
c001769e:	53                   	push   ebx
c001769f:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176a5:	50                   	push   eax
c00176a6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176ac:	6a 00                	push   0x0
c00176ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176bc:	e8 b7 75 ff ff       	call   c000ec78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176c1:	83 c4 1c             	add    esp,0x1c
c00176c4:	68 00 10 00 00       	push   0x1000
c00176c9:	6a 00                	push   0x0
c00176cb:	56                   	push   esi
c00176cc:	e8 e9 8f fe ff       	call   c00006ba <memset>
c00176d1:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176e0:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176e6:	77 86                	ja     c001766e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176e8:	e8 58 13 00 00       	call   c0018a45 <unlockScheduler()>
c00176ed:	83 ec 0c             	sub    esp,0xc
c00176f0:	56                   	push   esi
c00176f1:	e8 47 6e ff ff       	call   c000e53d <Virt::freeKernelVirtualPages(unsigned long)>
c00176f6:	83 c4 10             	add    esp,0x10
c00176f9:	b0 01                	mov    al,0x1
c00176fb:	8d 65 f4             	lea    esp,[ebp-0xc]
c00176fe:	5b                   	pop    ebx
c00176ff:	5e                   	pop    esi
c0017700:	5f                   	pop    edi
c0017701:	5d                   	pop    ebp
c0017702:	c3                   	ret    

c0017703 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017703:	55                   	push   ebp
c0017704:	57                   	push   edi
c0017705:	56                   	push   esi
c0017706:	53                   	push   ebx
c0017707:	83 ec 48             	sub    esp,0x48
c001770a:	68 14 01 00 00       	push   0x114
c001770f:	e8 c2 79 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0017714:	83 c4 0c             	add    esp,0xc
c0017717:	89 c6                	mov    esi,eax
c0017719:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001771d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017721:	50                   	push   eax
c0017722:	e8 1b 80 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0017727:	58                   	pop    eax
c0017728:	5a                   	pop    edx
c0017729:	6a 01                	push   0x1
c001772b:	56                   	push   esi
c001772c:	e8 75 80 ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c0017731:	83 c4 10             	add    esp,0x10
c0017734:	85 c0                	test   eax,eax
c0017736:	0f 85 47 01 00 00    	jne    c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001773c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017744:	83 ec 0c             	sub    esp,0xc
c0017747:	6a 34                	push   0x34
c0017749:	e8 8b 48 ff ff       	call   c000bfd9 <malloc>
c001774e:	89 c3                	mov    ebx,eax
c0017750:	58                   	pop    eax
c0017751:	8b 06                	mov    eax,DWORD PTR [esi]
c0017753:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017757:	57                   	push   edi
c0017758:	53                   	push   ebx
c0017759:	6a 00                	push   0x0
c001775b:	6a 34                	push   0x34
c001775d:	56                   	push   esi
c001775e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017761:	83 c4 20             	add    esp,0x20
c0017764:	85 c0                	test   eax,eax
c0017766:	0f 85 17 01 00 00    	jne    c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001776c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017772:	0f 85 0b 01 00 00    	jne    c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017778:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001777b:	85 c0                	test   eax,eax
c001777d:	0f 84 00 01 00 00    	je     c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017783:	31 d2                	xor    edx,edx
c0017785:	55                   	push   ebp
c0017786:	52                   	push   edx
c0017787:	50                   	push   eax
c0017788:	56                   	push   esi
c0017789:	e8 d6 80 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c001778e:	83 c4 10             	add    esp,0x10
c0017791:	85 c0                	test   eax,eax
c0017793:	0f 85 ea 00 00 00    	jne    c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017799:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177a3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177a7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177ab:	0f af c2             	imul   eax,edx
c00177ae:	50                   	push   eax
c00177af:	e8 25 48 ff ff       	call   c000bfd9 <malloc>
c00177b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177bf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177c3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177c7:	0f af c2             	imul   eax,edx
c00177ca:	99                   	cdq    
c00177cb:	52                   	push   edx
c00177cc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177ce:	50                   	push   eax
c00177cf:	56                   	push   esi
c00177d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177d3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177d6:	83 c4 20             	add    esp,0x20
c00177d9:	85 c0                	test   eax,eax
c00177db:	0f 84 a2 00 00 00    	je     c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177e1:	31 d2                	xor    edx,edx
c00177e3:	51                   	push   ecx
c00177e4:	52                   	push   edx
c00177e5:	50                   	push   eax
c00177e6:	56                   	push   esi
c00177e7:	e8 78 80 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	85 c0                	test   eax,eax
c00177f1:	0f 85 8c 00 00 00    	jne    c0017883 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177f7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00177fb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00177ff:	0f af c2             	imul   eax,edx
c0017802:	83 ec 0c             	sub    esp,0xc
c0017805:	31 ed                	xor    ebp,ebp
c0017807:	50                   	push   eax
c0017808:	e8 cc 47 ff ff       	call   c000bfd9 <malloc>
c001780d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017811:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017818:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001781c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017820:	0f af c2             	imul   eax,edx
c0017823:	99                   	cdq    
c0017824:	52                   	push   edx
c0017825:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017827:	50                   	push   eax
c0017828:	56                   	push   esi
c0017829:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001782c:	83 c4 20             	add    esp,0x20
c001782f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017837:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001783b:	0f 86 80 00 00 00    	jbe    c00178c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017841:	0f b7 fd             	movzx  edi,bp
c0017844:	c1 e7 05             	shl    edi,0x5
c0017847:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001784b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001784e:	75 6b                	jne    c00178bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017850:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017857:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001785a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001785e:	52                   	push   edx
c001785f:	31 d2                	xor    edx,edx
c0017861:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017864:	52                   	push   edx
c0017865:	50                   	push   eax
c0017866:	56                   	push   esi
c0017867:	e8 f8 7f ff ff       	call   c000f864 <File::seek(unsigned long long)>
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	85 c0                	test   eax,eax
c0017871:	74 17                	je     c001788a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017873:	83 ec 0c             	sub    esp,0xc
c0017876:	68 51 2c 02 c0       	push   0xc0022c51
c001787b:	e8 8b 79 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	31 c0                	xor    eax,eax
c0017885:	e9 87 00 00 00       	jmp    c0017911 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001788a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001788d:	83 ec 0c             	sub    esp,0xc
c0017890:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017893:	50                   	push   eax
c0017894:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017898:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001789c:	56                   	push   esi
c001789d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178a1:	e8 e6 fb ff ff       	call   c001748c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178aa:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178ae:	83 c4 20             	add    esp,0x20
c00178b1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178b5:	73 04                	jae    c00178bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178bb:	45                   	inc    ebp
c00178bc:	e9 76 ff ff ff       	jmp    c0017837 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178c1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178db:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178e1:	05 00 10 00 00       	add    eax,0x1000
c00178e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ed:	e8 f7 46 ff ff       	call   c000bfe9 <free>
c00178f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178f5:	e8 ef 46 ff ff       	call   c000bfe9 <free>
c00178fa:	58                   	pop    eax
c00178fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ff:	e8 e5 46 ff ff       	call   c000bfe9 <free>
c0017904:	89 34 24             	mov    DWORD PTR [esp],esi
c0017907:	e8 f8 7e ff ff       	call   c000f804 <File::close()>
c001790c:	83 c4 10             	add    esp,0x10
c001790f:	b0 01                	mov    al,0x1
c0017911:	83 c4 3c             	add    esp,0x3c
c0017914:	5b                   	pop    ebx
c0017915:	5e                   	pop    esi
c0017916:	5f                   	pop    edi
c0017917:	5d                   	pop    ebp
c0017918:	c3                   	ret    

c0017919 <Thr::runtimeReferenceHelper()>:
c0017919:	83 ec 18             	sub    esp,0x18
c001791c:	68 59 2c 02 c0       	push   0xc0022c59
c0017921:	e8 e5 78 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017926:	fa                   	cli    
c0017927:	83 c4 10             	add    esp,0x10
c001792a:	eb fe                	jmp    c001792a <Thr::runtimeReferenceHelper()+0x11>

c001792c <Thr::getAddressOfKernelSymbol(char const*)>:
c001792c:	57                   	push   edi
c001792d:	56                   	push   esi
c001792e:	53                   	push   ebx
c001792f:	31 db                	xor    ebx,ebx
c0017931:	39 1d 80 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b80,ebx
c0017937:	7e 3c                	jle    c0017975 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017939:	8b 34 9d 00 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda500]
c0017940:	31 ff                	xor    edi,edi
c0017942:	39 3c 9d 00 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda600],edi
c0017949:	7e 27                	jle    c0017972 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001794b:	50                   	push   eax
c001794c:	50                   	push   eax
c001794d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017951:	8b 06                	mov    eax,DWORD PTR [esi]
c0017953:	03 04 9d 80 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda580]
c001795a:	50                   	push   eax
c001795b:	e8 4a 8e fe ff       	call   c00007aa <strcmp>
c0017960:	83 c4 10             	add    esp,0x10
c0017963:	85 c0                	test   eax,eax
c0017965:	75 05                	jne    c001796c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017967:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001796a:	eb 0b                	jmp    c0017977 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001796c:	83 c6 10             	add    esi,0x10
c001796f:	47                   	inc    edi
c0017970:	eb d0                	jmp    c0017942 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017972:	43                   	inc    ebx
c0017973:	eb bc                	jmp    c0017931 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017975:	31 c0                	xor    eax,eax
c0017977:	5b                   	pop    ebx
c0017978:	5e                   	pop    esi
c0017979:	5f                   	pop    edi
c001797a:	c3                   	ret    

c001797b <Thr::loadKernelSymbolTable(char const*)>:
c001797b:	55                   	push   ebp
c001797c:	57                   	push   edi
c001797d:	56                   	push   esi
c001797e:	53                   	push   ebx
c001797f:	83 ec 68             	sub    esp,0x68
c0017982:	8b 35 d4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bd4
c0017988:	68 14 01 00 00       	push   0x114
c001798d:	e8 44 77 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0017992:	83 c4 0c             	add    esp,0xc
c0017995:	89 c3                	mov    ebx,eax
c0017997:	56                   	push   esi
c0017998:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001799c:	50                   	push   eax
c001799d:	e8 a0 7d ff ff       	call   c000f742 <File::File(char const*, Process*)>
c00179a2:	5e                   	pop    esi
c00179a3:	5f                   	pop    edi
c00179a4:	6a 01                	push   0x1
c00179a6:	53                   	push   ebx
c00179a7:	e8 fa 7d ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c00179ac:	83 c4 10             	add    esp,0x10
c00179af:	31 d2                	xor    edx,edx
c00179b1:	85 c0                	test   eax,eax
c00179b3:	0f 85 79 02 00 00    	jne    c0017c32 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179b9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	6a 34                	push   0x34
c00179c6:	e8 0e 46 ff ff       	call   c000bfd9 <malloc>
c00179cb:	59                   	pop    ecx
c00179cc:	89 c7                	mov    edi,eax
c00179ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179d0:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179d4:	56                   	push   esi
c00179d5:	57                   	push   edi
c00179d6:	6a 00                	push   0x0
c00179d8:	6a 34                	push   0x34
c00179da:	53                   	push   ebx
c00179db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179de:	83 c4 20             	add    esp,0x20
c00179e1:	85 c0                	test   eax,eax
c00179e3:	74 17                	je     c00179fc <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179e5:	83 ec 0c             	sub    esp,0xc
c00179e8:	68 7b 2c 02 c0       	push   0xc0022c7b
c00179ed:	e8 48 e0 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c00179f2:	83 c4 10             	add    esp,0x10
c00179f5:	31 d2                	xor    edx,edx
c00179f7:	e9 36 02 00 00       	jmp    c0017c32 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179fc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a02:	75 e1                	jne    c00179e5 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a04:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a07:	85 c0                	test   eax,eax
c0017a09:	74 da                	je     c00179e5 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a0b:	52                   	push   edx
c0017a0c:	31 d2                	xor    edx,edx
c0017a0e:	52                   	push   edx
c0017a0f:	50                   	push   eax
c0017a10:	53                   	push   ebx
c0017a11:	e8 4e 7e ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	85 c0                	test   eax,eax
c0017a1b:	75 c8                	jne    c00179e5 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a1d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a25:	0f af c2             	imul   eax,edx
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	31 ed                	xor    ebp,ebp
c0017a2d:	50                   	push   eax
c0017a2e:	e8 a6 45 ff ff       	call   c000bfd9 <malloc>
c0017a33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a3e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a42:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a46:	0f af c2             	imul   eax,edx
c0017a49:	99                   	cdq    
c0017a4a:	52                   	push   edx
c0017a4b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a4d:	50                   	push   eax
c0017a4e:	53                   	push   ebx
c0017a4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a52:	83 c4 20             	add    esp,0x20
c0017a55:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a6d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a75:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a79:	0f 86 aa 00 00 00    	jbe    c0017b29 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a7f:	0f b7 f5             	movzx  esi,bp
c0017a82:	6b f6 28             	imul   esi,esi,0x28
c0017a85:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a89:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a90:	50                   	push   eax
c0017a91:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a95:	6b c0 28             	imul   eax,eax,0x28
c0017a98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017a9c:	8b 16                	mov    edx,DWORD PTR [esi]
c0017a9e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aa2:	89 d0                	mov    eax,edx
c0017aa4:	31 d2                	xor    edx,edx
c0017aa6:	52                   	push   edx
c0017aa7:	50                   	push   eax
c0017aa8:	53                   	push   ebx
c0017aa9:	e8 b6 7d ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017aae:	83 c4 0c             	add    esp,0xc
c0017ab1:	6a 20                	push   0x20
c0017ab3:	6a 00                	push   0x0
c0017ab5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ab9:	52                   	push   edx
c0017aba:	e8 fb 8b fe ff       	call   c00006ba <memset>
c0017abf:	58                   	pop    eax
c0017ac0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ac2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ac6:	51                   	push   ecx
c0017ac7:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017acb:	52                   	push   edx
c0017acc:	6a 00                	push   0x0
c0017ace:	6a 1f                	push   0x1f
c0017ad0:	53                   	push   ebx
c0017ad1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ad4:	83 c4 18             	add    esp,0x18
c0017ad7:	68 92 2c 02 c0       	push   0xc0022c92
c0017adc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ae0:	52                   	push   edx
c0017ae1:	e8 c4 8c fe ff       	call   c00007aa <strcmp>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	85 c0                	test   eax,eax
c0017aeb:	75 0f                	jne    c0017afc <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017aed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017af0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017af4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017afc:	50                   	push   eax
c0017afd:	50                   	push   eax
c0017afe:	68 9a 2c 02 c0       	push   0xc0022c9a
c0017b03:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b07:	50                   	push   eax
c0017b08:	e8 9d 8c fe ff       	call   c00007aa <strcmp>
c0017b0d:	83 c4 10             	add    esp,0x10
c0017b10:	85 c0                	test   eax,eax
c0017b12:	75 0f                	jne    c0017b23 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b14:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b23:	45                   	inc    ebp
c0017b24:	e9 4c ff ff ff       	jmp    c0017a75 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b29:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b2e:	75 10                	jne    c0017b40 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	68 a2 2c 02 c0       	push   0xc0022ca2
c0017b38:	e8 fd de ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b45:	75 10                	jne    c0017b57 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	68 a2 2c 02 c0       	push   0xc0022ca2
c0017b4f:	e8 e6 de ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0017b54:	83 c4 10             	add    esp,0x10
c0017b57:	31 d2                	xor    edx,edx
c0017b59:	50                   	push   eax
c0017b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b5e:	52                   	push   edx
c0017b5f:	50                   	push   eax
c0017b60:	53                   	push   ebx
c0017b61:	e8 fe 7c ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017b66:	5a                   	pop    edx
c0017b67:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b6b:	e8 69 44 ff ff       	call   c000bfd9 <malloc>
c0017b70:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b78:	89 c1                	mov    ecx,eax
c0017b7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b82:	5e                   	pop    esi
c0017b83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b85:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b89:	55                   	push   ebp
c0017b8a:	51                   	push   ecx
c0017b8b:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b97:	53                   	push   ebx
c0017b98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b9b:	83 c4 14             	add    esp,0x14
c0017b9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ba2:	e8 32 44 ff ff       	call   c000bfd9 <malloc>
c0017ba7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017baa:	89 c6                	mov    esi,eax
c0017bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bae:	56                   	push   esi
c0017baf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bb3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bb7:	53                   	push   ebx
c0017bb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bbf:	8b 15 80 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b80
c0017bc5:	c1 e8 04             	shr    eax,0x4
c0017bc8:	83 c4 1c             	add    esp,0x1c
c0017bcb:	89 04 95 00 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda600],eax
c0017bd2:	31 d2                	xor    edx,edx
c0017bd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bd8:	52                   	push   edx
c0017bd9:	50                   	push   eax
c0017bda:	53                   	push   ebx
c0017bdb:	e8 84 7c ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017be0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017be3:	31 d2                	xor    edx,edx
c0017be5:	56                   	push   esi
c0017be6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bea:	52                   	push   edx
c0017beb:	50                   	push   eax
c0017bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bee:	53                   	push   ebx
c0017bef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bf2:	83 c4 14             	add    esp,0x14
c0017bf5:	53                   	push   ebx
c0017bf6:	e8 09 7c ff ff       	call   c000f804 <File::close()>
c0017bfb:	5d                   	pop    ebp
c0017bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c00:	e8 e4 43 ff ff       	call   c000bfe9 <free>
c0017c05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c08:	e8 dc 43 ff ff       	call   c000bfe9 <free>
c0017c0d:	a1 80 5b 02 c0       	mov    eax,ds:0xc0025b80
c0017c12:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c16:	8d 50 01             	lea    edx,[eax+0x1]
c0017c19:	89 15 80 5b 02 c0    	mov    DWORD PTR ds:0xc0025b80,edx
c0017c1f:	89 0c 85 00 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda500],ecx
c0017c26:	89 34 85 80 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda580],esi
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	b2 01                	mov    dl,0x1
c0017c32:	83 c4 5c             	add    esp,0x5c
c0017c35:	88 d0                	mov    al,dl
c0017c37:	5b                   	pop    ebx
c0017c38:	5e                   	pop    esi
c0017c39:	5f                   	pop    edi
c0017c3a:	5d                   	pop    ebp
c0017c3b:	c3                   	ret    

c0017c3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c3c:	55                   	push   ebp
c0017c3d:	57                   	push   edi
c0017c3e:	56                   	push   esi
c0017c3f:	53                   	push   ebx
c0017c40:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c46:	8b 1d d4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bd4
c0017c4c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c53:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c57:	68 14 01 00 00       	push   0x114
c0017c5c:	e8 75 74 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0017c61:	83 c4 0c             	add    esp,0xc
c0017c64:	53                   	push   ebx
c0017c65:	89 c7                	mov    edi,eax
c0017c67:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c6e:	50                   	push   eax
c0017c6f:	e8 ce 7a ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0017c74:	5e                   	pop    esi
c0017c75:	5d                   	pop    ebp
c0017c76:	6a 01                	push   0x1
c0017c78:	57                   	push   edi
c0017c79:	e8 28 7b ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	85 c0                	test   eax,eax
c0017c83:	0f 85 10 07 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c89:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c91:	83 ec 0c             	sub    esp,0xc
c0017c94:	6a 34                	push   0x34
c0017c96:	e8 3e 43 ff ff       	call   c000bfd9 <malloc>
c0017c9b:	5b                   	pop    ebx
c0017c9c:	89 c5                	mov    ebp,eax
c0017c9e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ca0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ca4:	53                   	push   ebx
c0017ca5:	55                   	push   ebp
c0017ca6:	6a 00                	push   0x0
c0017ca8:	6a 34                	push   0x34
c0017caa:	57                   	push   edi
c0017cab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cae:	83 c4 20             	add    esp,0x20
c0017cb1:	85 c0                	test   eax,eax
c0017cb3:	0f 85 e0 06 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cb9:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cc0:	0f 85 d3 06 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cc6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017cc9:	85 c0                	test   eax,eax
c0017ccb:	0f 84 c8 06 00 00    	je     c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd1:	31 d2                	xor    edx,edx
c0017cd3:	51                   	push   ecx
c0017cd4:	52                   	push   edx
c0017cd5:	50                   	push   eax
c0017cd6:	57                   	push   edi
c0017cd7:	e8 88 7b ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017cdc:	83 c4 10             	add    esp,0x10
c0017cdf:	85 c0                	test   eax,eax
c0017ce1:	0f 85 b2 06 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cea:	83 ec 0c             	sub    esp,0xc
c0017ced:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cf1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cf5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017cf9:	0f af c2             	imul   eax,edx
c0017cfc:	50                   	push   eax
c0017cfd:	e8 d7 42 ff ff       	call   c000bfd9 <malloc>
c0017d02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d0d:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d11:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d15:	0f af c2             	imul   eax,edx
c0017d18:	99                   	cdq    
c0017d19:	52                   	push   edx
c0017d1a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d1c:	50                   	push   eax
c0017d1d:	57                   	push   edi
c0017d1e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d21:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d24:	83 c4 20             	add    esp,0x20
c0017d27:	85 c0                	test   eax,eax
c0017d29:	0f 84 6a 06 00 00    	je     c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d2f:	52                   	push   edx
c0017d30:	31 d2                	xor    edx,edx
c0017d32:	52                   	push   edx
c0017d33:	50                   	push   eax
c0017d34:	57                   	push   edi
c0017d35:	e8 2a 7b ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017d3a:	83 c4 10             	add    esp,0x10
c0017d3d:	85 c0                	test   eax,eax
c0017d3f:	0f 85 54 06 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d45:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d49:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d4d:	0f af c2             	imul   eax,edx
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	31 f6                	xor    esi,esi
c0017d55:	50                   	push   eax
c0017d56:	e8 7e 42 ff ff       	call   c000bfd9 <malloc>
c0017d5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d66:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d6a:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d6e:	0f af c2             	imul   eax,edx
c0017d71:	99                   	cdq    
c0017d72:	52                   	push   edx
c0017d73:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d75:	50                   	push   eax
c0017d76:	57                   	push   edi
c0017d77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d7a:	83 c4 20             	add    esp,0x20
c0017d7d:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d81:	0f 86 af 00 00 00    	jbe    c0017e36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d87:	0f b7 de             	movzx  ebx,si
c0017d8a:	c1 e3 05             	shl    ebx,0x5
c0017d8d:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d91:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d94:	0f 85 96 00 00 00    	jne    c0017e30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017d9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017d9d:	31 d2                	xor    edx,edx
c0017d9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017da3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017da6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017daa:	50                   	push   eax
c0017dab:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017dae:	52                   	push   edx
c0017daf:	50                   	push   eax
c0017db0:	57                   	push   edi
c0017db1:	e8 ae 7a ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017db6:	83 c4 10             	add    esp,0x10
c0017db9:	85 c0                	test   eax,eax
c0017dbb:	0f 85 d8 05 00 00    	jne    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dc1:	52                   	push   edx
c0017dc2:	52                   	push   edx
c0017dc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dc7:	68 bc 2c 02 c0       	push   0xc0022cbc
c0017dcc:	e8 3a 74 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017dd1:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017dd8:	31 d2                	xor    edx,edx
c0017dda:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017dde:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017de2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017de6:	59                   	pop    ecx
c0017de7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017de9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017df0:	50                   	push   eax
c0017df1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017df9:	52                   	push   edx
c0017dfa:	50                   	push   eax
c0017dfb:	57                   	push   edi
c0017dfc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017dff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e02:	83 c4 18             	add    esp,0x18
c0017e05:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e08:	50                   	push   eax
c0017e09:	68 e0 2c 02 c0       	push   0xc0022ce0
c0017e0e:	e8 f8 73 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0017e13:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e16:	83 c4 0c             	add    esp,0xc
c0017e19:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e1c:	50                   	push   eax
c0017e1d:	6a 00                	push   0x0
c0017e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e23:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e27:	50                   	push   eax
c0017e28:	e8 8d 88 fe ff       	call   c00006ba <memset>
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	46                   	inc    esi
c0017e31:	e9 47 ff ff ff       	jmp    c0017d7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e36:	50                   	push   eax
c0017e37:	31 db                	xor    ebx,ebx
c0017e39:	68 00 01 00 00       	push   0x100
c0017e3e:	6a 00                	push   0x0
c0017e40:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e44:	50                   	push   eax
c0017e45:	e8 70 88 fe ff       	call   c00006ba <memset>
c0017e4a:	83 c4 0c             	add    esp,0xc
c0017e4d:	68 00 01 00 00       	push   0x100
c0017e52:	6a 00                	push   0x0
c0017e54:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e5b:	50                   	push   eax
c0017e5c:	e8 59 88 fe ff       	call   c00006ba <memset>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e6c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e7c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e84:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e8c:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e90:	0f 86 2f 01 00 00    	jbe    c0017fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017e96:	0f b7 f3             	movzx  esi,bx
c0017e99:	6b f6 28             	imul   esi,esi,0x28
c0017e9c:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017ea0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ea7:	50                   	push   eax
c0017ea8:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017eac:	6b d2 28             	imul   edx,edx,0x28
c0017eaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0017eb5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017eb9:	31 d2                	xor    edx,edx
c0017ebb:	52                   	push   edx
c0017ebc:	50                   	push   eax
c0017ebd:	57                   	push   edi
c0017ebe:	e8 a1 79 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017ec3:	83 c4 0c             	add    esp,0xc
c0017ec6:	6a 20                	push   0x20
c0017ec8:	6a 00                	push   0x0
c0017eca:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ed1:	51                   	push   ecx
c0017ed2:	e8 e3 87 fe ff       	call   c00006ba <memset>
c0017ed7:	58                   	pop    eax
c0017ed8:	8b 07                	mov    eax,DWORD PTR [edi]
c0017eda:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ede:	52                   	push   edx
c0017edf:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ee6:	51                   	push   ecx
c0017ee7:	6a 00                	push   0x0
c0017ee9:	6a 1f                	push   0x1f
c0017eeb:	57                   	push   edi
c0017eec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017eef:	83 c4 1c             	add    esp,0x1c
c0017ef2:	6a 09                	push   0x9
c0017ef4:	68 fd 2c 02 c0       	push   0xc0022cfd
c0017ef9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f00:	51                   	push   ecx
c0017f01:	e8 1b 87 fe ff       	call   c0000621 <memcmp>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	85 c0                	test   eax,eax
c0017f0b:	75 21                	jne    c0017f2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f19:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f20:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f27:	89 c8                	mov    eax,ecx
c0017f29:	40                   	inc    eax
c0017f2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f2e:	50                   	push   eax
c0017f2f:	6a 09                	push   0x9
c0017f31:	68 07 2d 02 c0       	push   0xc0022d07
c0017f36:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f3d:	50                   	push   eax
c0017f3e:	e8 de 86 fe ff       	call   c0000621 <memcmp>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	85 c0                	test   eax,eax
c0017f48:	75 21                	jne    c0017f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f56:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f5d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f64:	89 c8                	mov    eax,ecx
c0017f66:	40                   	inc    eax
c0017f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f6b:	50                   	push   eax
c0017f6c:	50                   	push   eax
c0017f6d:	68 92 2c 02 c0       	push   0xc0022c92
c0017f72:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f79:	50                   	push   eax
c0017f7a:	e8 2b 88 fe ff       	call   c00007aa <strcmp>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	85 c0                	test   eax,eax
c0017f84:	75 0f                	jne    c0017f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f86:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f95:	50                   	push   eax
c0017f96:	50                   	push   eax
c0017f97:	68 9a 2c 02 c0       	push   0xc0022c9a
c0017f9c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fa3:	50                   	push   eax
c0017fa4:	e8 01 88 fe ff       	call   c00007aa <strcmp>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	85 c0                	test   eax,eax
c0017fae:	75 0f                	jne    c0017fbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fb0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fbf:	43                   	inc    ebx
c0017fc0:	e9 c7 fe ff ff       	jmp    c0017e8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fc5:	31 d2                	xor    edx,edx
c0017fc7:	50                   	push   eax
c0017fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fcc:	52                   	push   edx
c0017fcd:	50                   	push   eax
c0017fce:	57                   	push   edi
c0017fcf:	e8 90 78 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c0017fd4:	5a                   	pop    edx
c0017fd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fd9:	e8 fb 3f ff ff       	call   c000bfd9 <malloc>
c0017fde:	31 d2                	xor    edx,edx
c0017fe0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fe4:	59                   	pop    ecx
c0017fe5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fe7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017feb:	53                   	push   ebx
c0017fec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ff0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff4:	52                   	push   edx
c0017ff5:	50                   	push   eax
c0017ff6:	57                   	push   edi
c0017ff7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ffa:	83 c4 14             	add    esp,0x14
c0017ffd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018001:	e8 d3 3f ff ff       	call   c000bfd9 <malloc>
c0018006:	31 d2                	xor    edx,edx
c0018008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001800c:	83 c4 0c             	add    esp,0xc
c001800f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018013:	52                   	push   edx
c0018014:	50                   	push   eax
c0018015:	57                   	push   edi
c0018016:	e8 49 78 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c001801b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001801e:	31 d2                	xor    edx,edx
c0018020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018028:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001802a:	52                   	push   edx
c001802b:	50                   	push   eax
c001802c:	57                   	push   edi
c001802d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018030:	83 c4 20             	add    esp,0x20
c0018033:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001803b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001803f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0018043:	0f 84 54 03 00 00    	je     c001839d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018049:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018050:	31 d2                	xor    edx,edx
c0018052:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018056:	c1 e8 03             	shr    eax,0x3
c0018059:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001805d:	50                   	push   eax
c001805e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018062:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018066:	52                   	push   edx
c0018067:	50                   	push   eax
c0018068:	57                   	push   edi
c0018069:	e8 f6 77 ff ff       	call   c000f864 <File::seek(unsigned long long)>
c001806e:	58                   	pop    eax
c001806f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018073:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001807a:	e8 5a 3f ff ff       	call   c000bfd9 <malloc>
c001807f:	31 d2                	xor    edx,edx
c0018081:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018085:	58                   	pop    eax
c0018086:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018088:	8d 44 24 58          	lea    eax,[esp+0x58]
c001808c:	50                   	push   eax
c001808d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018091:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018095:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001809c:	52                   	push   edx
c001809d:	50                   	push   eax
c001809e:	57                   	push   edi
c001809f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180a2:	83 c4 20             	add    esp,0x20
c00180a5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180ad:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180b1:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180b5:	0f 8d c6 02 00 00    	jge    c0018381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180c3:	31 db                	xor    ebx,ebx
c00180c5:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d0:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180d8:	c1 e8 08             	shr    eax,0x8
c00180db:	89 c6                	mov    esi,eax
c00180dd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180e1:	c1 e6 04             	shl    esi,0x4
c00180e4:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180ef:	85 c0                	test   eax,eax
c00180f1:	0f 85 17 01 00 00    	jne    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180f7:	83 ec 0c             	sub    esp,0xc
c00180fa:	b3 01                	mov    bl,0x1
c00180fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018100:	03 06                	add    eax,DWORD PTR [esi]
c0018102:	50                   	push   eax
c0018103:	e8 24 f8 ff ff       	call   c001792c <Thr::getAddressOfKernelSymbol(char const*)>
c0018108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018114:	0f 85 f4 00 00 00    	jne    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001811a:	50                   	push   eax
c001811b:	50                   	push   eax
c001811c:	68 11 2d 02 c0       	push   0xc0022d11
c0018121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018125:	03 06                	add    eax,DWORD PTR [esi]
c0018127:	50                   	push   eax
c0018128:	e8 7d 86 fe ff       	call   c00007aa <strcmp>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	85 c0                	test   eax,eax
c0018132:	75 0a                	jne    c001813e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018134:	b8 fc f4 01 c0       	mov    eax,0xc001f4fc
c0018139:	e9 ca 00 00 00       	jmp    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001813e:	50                   	push   eax
c001813f:	50                   	push   eax
c0018140:	68 1b 2d 02 c0       	push   0xc0022d1b
c0018145:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018149:	03 06                	add    eax,DWORD PTR [esi]
c001814b:	50                   	push   eax
c001814c:	e8 59 86 fe ff       	call   c00007aa <strcmp>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	85 c0                	test   eax,eax
c0018156:	75 0a                	jne    c0018162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018158:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c001815d:	e9 a6 00 00 00       	jmp    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018162:	53                   	push   ebx
c0018163:	53                   	push   ebx
c0018164:	68 24 2d 02 c0       	push   0xc0022d24
c0018169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001816d:	03 06                	add    eax,DWORD PTR [esi]
c001816f:	50                   	push   eax
c0018170:	e8 35 86 fe ff       	call   c00007aa <strcmp>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	85 c0                	test   eax,eax
c001817a:	75 0a                	jne    c0018186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001817c:	b8 fc f5 01 c0       	mov    eax,0xc001f5fc
c0018181:	e9 82 00 00 00       	jmp    c0018208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018186:	51                   	push   ecx
c0018187:	51                   	push   ecx
c0018188:	68 2e 2d 02 c0       	push   0xc0022d2e
c001818d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018191:	03 06                	add    eax,DWORD PTR [esi]
c0018193:	50                   	push   eax
c0018194:	e8 11 86 fe ff       	call   c00007aa <strcmp>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	85 c0                	test   eax,eax
c001819e:	74 63                	je     c0018203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181a0:	50                   	push   eax
c00181a1:	50                   	push   eax
c00181a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181a6:	03 06                	add    eax,DWORD PTR [esi]
c00181a8:	50                   	push   eax
c00181a9:	68 37 2d 02 c0       	push   0xc0022d37
c00181ae:	e8 58 70 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00181b3:	58                   	pop    eax
c00181b4:	5a                   	pop    edx
c00181b5:	68 51 2d 02 c0       	push   0xc0022d51
c00181ba:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181c1:	53                   	push   ebx
c00181c2:	e8 92 85 fe ff       	call   c0000759 <strcpy>
c00181c7:	59                   	pop    ecx
c00181c8:	58                   	pop    eax
c00181c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181cd:	03 06                	add    eax,DWORD PTR [esi]
c00181cf:	50                   	push   eax
c00181d0:	53                   	push   ebx
c00181d1:	e8 3a 86 fe ff       	call   c0000810 <strcat>
c00181d6:	58                   	pop    eax
c00181d7:	5a                   	pop    edx
c00181d8:	68 e7 2d 02 c0       	push   0xc0022de7
c00181dd:	53                   	push   ebx
c00181de:	e8 2d 86 fe ff       	call   c0000810 <strcat>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181eb:	0f 84 4b 01 00 00    	je     c001833c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	53                   	push   ebx
c00181f5:	e8 40 d8 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c00181fa:	83 c4 10             	add    esp,0x10
c00181fd:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018201:	eb 0b                	jmp    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018203:	b8 7c f3 01 c0       	mov    eax,0xc001f37c
c0018208:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001820c:	b3 01                	mov    bl,0x1
c001820e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018213:	0f 85 80 00 00 00    	jne    c0018299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018219:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018220:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018224:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018228:	01 ce                	add    esi,ecx
c001822a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018232:	0f 94 c2             	sete   dl
c0018235:	8b 06                	mov    eax,DWORD PTR [esi]
c0018237:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001823f:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018244:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018248:	84 db                	test   bl,bl
c001824a:	74 31                	je     c001827d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001824c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018250:	01 c3                	add    ebx,eax
c0018252:	84 d2                	test   dl,dl
c0018254:	75 0a                	jne    c0018260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018256:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001825a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001825e:	76 32                	jbe    c0018292 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018260:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018265:	0f 84 d1 00 00 00    	je     c001833c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001826b:	83 ec 0c             	sub    esp,0xc
c001826e:	68 68 2d 02 c0       	push   0xc0022d68
c0018273:	e8 c2 d7 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	eb 15                	jmp    c0018292 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001827d:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018280:	84 d2                	test   dl,dl
c0018282:	75 0e                	jne    c0018292 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018284:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018288:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001828c:	77 04                	ja     c0018292 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001828e:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018292:	89 1e                	mov    DWORD PTR [esi],ebx
c0018294:	e9 df 00 00 00       	jmp    c0018378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018299:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001829e:	75 6e                	jne    c001830e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182a0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182a7:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182ab:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182af:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182b7:	74 17                	je     c00182d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182b9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182c1:	74 0d                	je     c00182d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182c3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182c7:	83 e8 04             	sub    eax,0x4
c00182ca:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182ce:	76 17                	jbe    c00182e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182d0:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182d5:	74 65                	je     c001833c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182d7:	83 ec 0c             	sub    esp,0xc
c00182da:	68 84 2d 02 c0       	push   0xc0022d84
c00182df:	e8 56 d7 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	8b 16                	mov    edx,DWORD PTR [esi]
c00182e9:	84 db                	test   bl,bl
c00182eb:	74 13                	je     c0018300 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182f1:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00182f8:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00182fc:	01 d0                	add    eax,edx
c00182fe:	eb 06                	jmp    c0018306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018300:	89 d0                	mov    eax,edx
c0018302:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018306:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001830a:	89 06                	mov    DWORD PTR [esi],eax
c001830c:	eb 6a                	jmp    c0018378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001830e:	50                   	push   eax
c001830f:	50                   	push   eax
c0018310:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018315:	50                   	push   eax
c0018316:	68 a0 2d 02 c0       	push   0xc0022da0
c001831b:	e8 eb 6e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018328:	74 12                	je     c001833c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001832a:	83 ec 0c             	sub    esp,0xc
c001832d:	68 ab 2d 02 c0       	push   0xc0022dab
c0018332:	e8 03 d7 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	eb 3c                	jmp    c0018378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	57                   	push   edi
c0018340:	e8 bf 74 ff ff       	call   c000f804 <File::close()>
c0018345:	8b 07                	mov    eax,DWORD PTR [edi]
c0018347:	89 3c 24             	mov    DWORD PTR [esp],edi
c001834a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001834d:	59                   	pop    ecx
c001834e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018352:	e8 92 3c ff ff       	call   c000bfe9 <free>
c0018357:	5b                   	pop    ebx
c0018358:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001835c:	e8 88 3c ff ff       	call   c000bfe9 <free>
c0018361:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018364:	e8 80 3c ff ff       	call   c000bfe9 <free>
c0018369:	5e                   	pop    esi
c001836a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001836e:	e8 76 3c ff ff       	call   c000bfe9 <free>
c0018373:	83 c4 10             	add    esp,0x10
c0018376:	eb 21                	jmp    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018378:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001837c:	e9 2c fd ff ff       	jmp    c00180ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018388:	e8 5c 3c ff ff       	call   c000bfe9 <free>
c001838d:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018391:	83 c4 10             	add    esp,0x10
c0018394:	e9 a2 fc ff ff       	jmp    c001803b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0018399:	31 c0                	xor    eax,eax
c001839b:	eb 32                	jmp    c00183cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001839d:	83 ec 0c             	sub    esp,0xc
c00183a0:	57                   	push   edi
c00183a1:	e8 5e 74 ff ff       	call   c000f804 <File::close()>
c00183a6:	8b 07                	mov    eax,DWORD PTR [edi]
c00183a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183ae:	58                   	pop    eax
c00183af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183b3:	e8 31 3c ff ff       	call   c000bfe9 <free>
c00183b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183bb:	e8 29 3c ff ff       	call   c000bfe9 <free>
c00183c0:	5a                   	pop    edx
c00183c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183c5:	e8 1f 3c ff ff       	call   c000bfe9 <free>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	b0 01                	mov    al,0x1
c00183cf:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183d5:	5b                   	pop    ebx
c00183d6:	5e                   	pop    esi
c00183d7:	5f                   	pop    edi
c00183d8:	5d                   	pop    ebp
c00183d9:	c3                   	ret    

c00183da <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183da:	56                   	push   esi
c00183db:	31 d2                	xor    edx,edx
c00183dd:	53                   	push   ebx
c00183de:	8b 1d e0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253e0
c00183e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183e8:	39 d3                	cmp    ebx,edx
c00183ea:	7e 1b                	jle    c0018407 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183ec:	8b 04 95 00 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaa00]
c00183f3:	39 c8                	cmp    eax,ecx
c00183f5:	77 0d                	ja     c0018404 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00183f7:	8b 34 95 00 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdac00]
c00183fe:	01 c6                	add    esi,eax
c0018400:	39 ce                	cmp    esi,ecx
c0018402:	77 05                	ja     c0018409 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018404:	42                   	inc    edx
c0018405:	eb e1                	jmp    c00183e8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018407:	31 c0                	xor    eax,eax
c0018409:	5b                   	pop    ebx
c001840a:	5e                   	pop    esi
c001840b:	c3                   	ret    

c001840c <Thr::getDriverNameFromAddress(unsigned long)>:
c001840c:	53                   	push   ebx
c001840d:	31 c0                	xor    eax,eax
c001840f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018413:	8b 1d e0 53 02 c0    	mov    ebx,DWORD PTR ds:0xc00253e0
c0018419:	39 c3                	cmp    ebx,eax
c001841b:	7e 22                	jle    c001843f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001841d:	8b 14 85 00 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaa00]
c0018424:	39 ca                	cmp    edx,ecx
c0018426:	77 14                	ja     c001843c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018428:	03 14 85 00 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdac00]
c001842f:	39 ca                	cmp    edx,ecx
c0018431:	76 09                	jbe    c001843c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018433:	8b 04 85 00 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda800]
c001843a:	eb 05                	jmp    c0018441 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001843c:	40                   	inc    eax
c001843d:	eb da                	jmp    c0018419 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001843f:	31 c0                	xor    eax,eax
c0018441:	5b                   	pop    ebx
c0018442:	c3                   	ret    

c0018443 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018443:	53                   	push   ebx
c0018444:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018448:	53                   	push   ebx
c0018449:	e8 8c ff ff ff       	call   c00183da <Thr::getDriverBaseFromAddress(unsigned long)>
c001844e:	5a                   	pop    edx
c001844f:	31 d2                	xor    edx,edx
c0018451:	85 c0                	test   eax,eax
c0018453:	74 04                	je     c0018459 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018455:	89 da                	mov    edx,ebx
c0018457:	29 c2                	sub    edx,eax
c0018459:	89 d0                	mov    eax,edx
c001845b:	5b                   	pop    ebx
c001845c:	c3                   	ret    

c001845d <Thr::loadDLL(char const*, bool)>:
c001845d:	55                   	push   ebp
c001845e:	57                   	push   edi
c001845f:	56                   	push   esi
c0018460:	53                   	push   ebx
c0018461:	81 ec 34 01 00 00    	sub    esp,0x134
c0018467:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001846e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018475:	56                   	push   esi
c0018476:	68 c3 2d 02 c0       	push   0xc0022dc3
c001847b:	e8 8b 6d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0018480:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018487:	e8 4a 6c ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001848c:	83 c4 0c             	add    esp,0xc
c001848f:	89 c3                	mov    ebx,eax
c0018491:	ff 35 d4 5b 02 c0    	push   DWORD PTR ds:0xc0025bd4
c0018497:	56                   	push   esi
c0018498:	50                   	push   eax
c0018499:	e8 a4 72 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c001849e:	83 c4 0c             	add    esp,0xc
c00184a1:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184a5:	50                   	push   eax
c00184a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184aa:	50                   	push   eax
c00184ab:	53                   	push   ebx
c00184ac:	e8 a1 75 ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c00184b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184c1:	75 0a                	jne    c00184cd <Thr::loadDLL(char const*, bool)+0x70>
c00184c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184c7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184cb:	75 3c                	jne    c0018509 <Thr::loadDLL(char const*, bool)+0xac>
c00184cd:	89 e8                	mov    eax,ebp
c00184cf:	84 c0                	test   al,al
c00184d1:	0f 84 3d 01 00 00    	je     c0018614 <Thr::loadDLL(char const*, bool)+0x1b7>
c00184d7:	50                   	push   eax
c00184d8:	50                   	push   eax
c00184d9:	68 d4 2d 02 c0       	push   0xc0022dd4
c00184de:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184e2:	53                   	push   ebx
c00184e3:	e8 71 82 fe ff       	call   c0000759 <strcpy>
c00184e8:	58                   	pop    eax
c00184e9:	5a                   	pop    edx
c00184ea:	56                   	push   esi
c00184eb:	53                   	push   ebx
c00184ec:	e8 1f 83 fe ff       	call   c0000810 <strcat>
c00184f1:	59                   	pop    ecx
c00184f2:	5f                   	pop    edi
c00184f3:	68 e7 2d 02 c0       	push   0xc0022de7
c00184f8:	53                   	push   ebx
c00184f9:	e8 12 83 fe ff       	call   c0000810 <strcat>
c00184fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018501:	e8 34 d5 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	e8 6f 5e ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c001850e:	51                   	push   ecx
c001850f:	6a 03                	push   0x3
c0018511:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018515:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018519:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001851f:	83 d3 00             	adc    ebx,0x0
c0018522:	89 ca                	mov    edx,ecx
c0018524:	89 d1                	mov    ecx,edx
c0018526:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001852a:	51                   	push   ecx
c001852b:	50                   	push   eax
c001852c:	e8 8d 64 ff ff       	call   c000e9be <VAS::allocatePages(int, int)>
c0018531:	89 34 24             	mov    DWORD PTR [esp],esi
c0018534:	89 c3                	mov    ebx,eax
c0018536:	e8 9c 81 fe ff       	call   c00006d7 <strlen>
c001853b:	8b 3d e0 53 02 c0    	mov    edi,DWORD PTR ds:0xc00253e0
c0018541:	40                   	inc    eax
c0018542:	89 04 24             	mov    DWORD PTR [esp],eax
c0018545:	e8 8f 3a ff ff       	call   c000bfd9 <malloc>
c001854a:	89 04 bd 00 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda800],eax
c0018551:	5f                   	pop    edi
c0018552:	58                   	pop    eax
c0018553:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c0018558:	56                   	push   esi
c0018559:	ff 34 85 00 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda800]
c0018560:	e8 f4 81 fe ff       	call   c0000759 <strcpy>
c0018565:	a1 e0 53 02 c0       	mov    eax,ds:0xc00253e0
c001856a:	8d 50 01             	lea    edx,[eax+0x1]
c001856d:	89 1c 85 00 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa00],ebx
c0018574:	89 15 e0 53 02 c0    	mov    DWORD PTR ds:0xc00253e0,edx
c001857a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001857e:	83 c4 0c             	add    esp,0xc
c0018581:	89 14 85 00 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdac00],edx
c0018588:	6a 01                	push   0x1
c001858a:	53                   	push   ebx
c001858b:	56                   	push   esi
c001858c:	e8 ab f6 ff ff       	call   c0017c3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018591:	83 c4 10             	add    esp,0x10
c0018594:	89 c7                	mov    edi,eax
c0018596:	fe c8                	dec    al
c0018598:	74 16                	je     c00185b0 <Thr::loadDLL(char const*, bool)+0x153>
c001859a:	89 e8                	mov    eax,ebp
c001859c:	84 c0                	test   al,al
c001859e:	74 10                	je     c00185b0 <Thr::loadDLL(char const*, bool)+0x153>
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	68 e9 2d 02 c0       	push   0xc0022de9
c00185a8:	e8 8d d4 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c00185ad:	83 c4 10             	add    esp,0x10
c00185b0:	31 f6                	xor    esi,esi
c00185b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185ba:	05 ff 0f 00 00       	add    eax,0xfff
c00185bf:	83 d2 00             	adc    edx,0x0
c00185c2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185c6:	c1 ea 0c             	shr    edx,0xc
c00185c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185d1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185d5:	ba 00 00 00 00       	mov    edx,0x0
c00185da:	89 d0                	mov    eax,edx
c00185dc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185e0:	73 2c                	jae    c001860e <Thr::loadDLL(char const*, bool)+0x1b1>
c00185e2:	e8 96 5d ff ff       	call   c000e37d <Virt::getAKernelVAS()>
c00185e7:	89 f5                	mov    ebp,esi
c00185e9:	c1 e5 0c             	shl    ebp,0xc
c00185ec:	52                   	push   edx
c00185ed:	52                   	push   edx
c00185ee:	01 dd                	add    ebp,ebx
c00185f0:	55                   	push   ebp
c00185f1:	50                   	push   eax
c00185f2:	e8 27 5f ff ff       	call   c000e51e <VAS::getPageTableEntry(unsigned long)>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	f6 00 60             	test   BYTE PTR [eax],0x60
c00185fd:	75 0c                	jne    c001860b <Thr::loadDLL(char const*, bool)+0x1ae>
c00185ff:	83 ec 0c             	sub    esp,0xc
c0018602:	55                   	push   ebp
c0018603:	e8 1a 3f ff ff       	call   c000c522 <Phys::freePage(unsigned long)>
c0018608:	83 c4 10             	add    esp,0x10
c001860b:	46                   	inc    esi
c001860c:	eb a4                	jmp    c00185b2 <Thr::loadDLL(char const*, bool)+0x155>
c001860e:	89 f8                	mov    eax,edi
c0018610:	84 c0                	test   al,al
c0018612:	75 02                	jne    c0018616 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018614:	31 db                	xor    ebx,ebx
c0018616:	81 c4 2c 01 00 00    	add    esp,0x12c
c001861c:	89 d8                	mov    eax,ebx
c001861e:	5b                   	pop    ebx
c001861f:	5e                   	pop    esi
c0018620:	5f                   	pop    edi
c0018621:	5d                   	pop    ebp
c0018622:	c3                   	ret    

c0018623 <Thr::executeDLL(unsigned long, void*)>:
c0018623:	56                   	push   esi
c0018624:	53                   	push   ebx
c0018625:	51                   	push   ecx
c0018626:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001862a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001862e:	85 db                	test   ebx,ebx
c0018630:	75 10                	jne    c0018642 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	68 08 2e 02 c0       	push   0xc0022e08
c001863a:	e8 fb d3 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018646:	5a                   	pop    edx
c0018647:	89 d8                	mov    eax,ebx
c0018649:	5b                   	pop    ebx
c001864a:	5e                   	pop    esi
c001864b:	ff e0                	jmp    eax
c001864d:	90                   	nop

c001864e <changeTSS>:
c001864e:	83 ec 0c             	sub    esp,0xc
c0018651:	e8 78 c2 ff ff       	call   c00148ce <thisCPU()>
c0018656:	52                   	push   edx
c0018657:	05 7c 11 00 00       	add    eax,0x117c
c001865c:	52                   	push   edx
c001865d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018663:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018666:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001866b:	c1 e1 15             	shl    ecx,0x15
c001866e:	29 ca                	sub    edx,ecx
c0018670:	52                   	push   edx
c0018671:	50                   	push   eax
c0018672:	e8 53 54 ff ff       	call   c000daca <TSS::setESP(unsigned long)>
c0018677:	83 c4 1c             	add    esp,0x1c
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <Process::addArgs(char**)>:
c001867c:	57                   	push   edi
c001867d:	56                   	push   esi
c001867e:	53                   	push   ebx
c001867f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018683:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018687:	85 ff                	test   edi,edi
c0018689:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018693:	74 45                	je     c00186da <Process::addArgs(char**)+0x5e>
c0018695:	8b 07                	mov    eax,DWORD PTR [edi]
c0018697:	85 c0                	test   eax,eax
c0018699:	74 3f                	je     c00186da <Process::addArgs(char**)+0x5e>
c001869b:	31 db                	xor    ebx,ebx
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	50                   	push   eax
c00186a1:	e8 31 80 fe ff       	call   c00006d7 <strlen>
c00186a6:	40                   	inc    eax
c00186a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00186aa:	e8 2a 39 ff ff       	call   c000bfd9 <malloc>
c00186af:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186b6:	5a                   	pop    edx
c00186b7:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186ba:	59                   	pop    ecx
c00186bb:	43                   	inc    ebx
c00186bc:	52                   	push   edx
c00186bd:	50                   	push   eax
c00186be:	e8 96 80 fe ff       	call   c0000759 <strcpy>
c00186c3:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	41                   	inc    ecx
c00186cd:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186d3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186d6:	85 c0                	test   eax,eax
c00186d8:	75 c3                	jne    c001869d <Process::addArgs(char**)+0x21>
c00186da:	5b                   	pop    ebx
c00186db:	5e                   	pop    esi
c00186dc:	5f                   	pop    edi
c00186dd:	c3                   	ret    

c00186de <Process::Process(char const*, Process*, char**)>:
c00186de:	56                   	push   esi
c00186df:	53                   	push   ebx
c00186e0:	83 ec 14             	sub    esp,0x14
c00186e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e7:	05 0c 02 00 00       	add    eax,0x20c
c00186ec:	bb 07 00 00 00       	mov    ebx,0x7
c00186f1:	89 c6                	mov    esi,eax
c00186f3:	85 db                	test   ebx,ebx
c00186f5:	78 12                	js     c0018709 <Process::Process(char const*, Process*, char**)+0x2b>
c00186f7:	83 ec 0c             	sub    esp,0xc
c00186fa:	56                   	push   esi
c00186fb:	e8 4a 77 00 00       	call   c001fe4a <ThreadControlBlock::ThreadControlBlock()>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	83 c6 63             	add    esi,0x63
c0018706:	4b                   	dec    ebx
c0018707:	eb ea                	jmp    c00186f3 <Process::Process(char const*, Process*, char**)+0x15>
c0018709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870d:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018718:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018721:	a1 a4 41 02 c0       	mov    eax,ds:0xc00241a4
c0018726:	8d 50 01             	lea    edx,[eax+0x1]
c0018729:	89 15 a4 41 02 c0    	mov    DWORD PTR ds:0xc00241a4,edx
c001872f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018733:	89 02                	mov    DWORD PTR [edx],eax
c0018735:	83 ec 0c             	sub    esp,0xc
c0018738:	6a 10                	push   0x10
c001873a:	e8 97 69 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	89 c3                	mov    ebx,eax
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	6a 00                	push   0x0
c0018749:	53                   	push   ebx
c001874a:	e8 1b 66 ff ff       	call   c000ed6a <VAS::VAS(bool)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018756:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001875c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018760:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001876a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018772:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018782:	85 c0                	test   eax,eax
c0018784:	74 42                	je     c00187c8 <Process::Process(char const*, Process*, char**)+0xea>
c0018786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001878a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018790:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b4:	05 0c 01 00 00       	add    eax,0x10c
c00187b9:	83 ec 08             	sub    esp,0x8
c00187bc:	52                   	push   edx
c00187bd:	50                   	push   eax
c00187be:	e8 96 7f fe ff       	call   c0000759 <strcpy>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	eb 5c                	jmp    c0018824 <Process::Process(char const*, Process*, char**)+0x146>
c00187c8:	83 ec 0c             	sub    esp,0xc
c00187cb:	68 60 12 00 00       	push   0x1260
c00187d0:	e8 01 69 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	89 c3                	mov    ebx,eax
c00187da:	83 ec 08             	sub    esp,0x8
c00187dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e1:	53                   	push   ebx
c00187e2:	e8 e1 4f ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00187fe:	83 ec 0c             	sub    esp,0xc
c0018801:	50                   	push   eax
c0018802:	e8 c0 43 ff ff       	call   c000cbc7 <addToTerminalCycle(VgaText*)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880e:	05 0c 01 00 00       	add    eax,0x10c
c0018813:	83 ec 08             	sub    esp,0x8
c0018816:	68 32 2e 02 c0       	push   0xc0022e32
c001881b:	50                   	push   eax
c001881c:	e8 38 7f fe ff       	call   c0000759 <strcpy>
c0018821:	83 c4 10             	add    esp,0x10
c0018824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018828:	83 c0 0c             	add    eax,0xc
c001882b:	83 ec 08             	sub    esp,0x8
c001882e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018832:	50                   	push   eax
c0018833:	e8 21 7f fe ff       	call   c0000759 <strcpy>
c0018838:	83 c4 10             	add    esp,0x10
c001883b:	83 ec 08             	sub    esp,0x8
c001883e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018846:	e8 31 fe ff ff       	call   c001867c <Process::addArgs(char**)>
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	83 ec 08             	sub    esp,0x8
c0018851:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018859:	e8 a5 ee ff ff       	call   c0017703 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001885e:	83 c4 10             	add    esp,0x10
c0018861:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018865:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018869:	83 f0 01             	xor    eax,0x1
c001886c:	88 c2                	mov    dl,al
c001886e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018872:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018878:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001887c:	25 ff 00 00 00       	and    eax,0xff
c0018881:	83 ec 08             	sub    esp,0x8
c0018884:	50                   	push   eax
c0018885:	68 30 2f 02 c0       	push   0xc0022f30
c001888a:	e8 7c 69 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001888f:	83 c4 10             	add    esp,0x10
c0018892:	90                   	nop
c0018893:	83 c4 14             	add    esp,0x14
c0018896:	5b                   	pop    ebx
c0018897:	5e                   	pop    esi
c0018898:	c3                   	ret    
c0018899:	90                   	nop

c001889a <Process::Process(bool, char const*, Process*, char**)>:
c001889a:	56                   	push   esi
c001889b:	53                   	push   ebx
c001889c:	83 ec 14             	sub    esp,0x14
c001889f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ab:	05 0c 02 00 00       	add    eax,0x20c
c00188b0:	bb 07 00 00 00       	mov    ebx,0x7
c00188b5:	89 c6                	mov    esi,eax
c00188b7:	85 db                	test   ebx,ebx
c00188b9:	78 12                	js     c00188cd <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188bb:	83 ec 0c             	sub    esp,0xc
c00188be:	56                   	push   esi
c00188bf:	e8 86 75 00 00       	call   c001fe4a <ThreadControlBlock::ThreadControlBlock()>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	83 c6 63             	add    esi,0x63
c00188ca:	4b                   	dec    ebx
c00188cb:	eb ea                	jmp    c00188b7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188dc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188e5:	a1 a4 41 02 c0       	mov    eax,ds:0xc00241a4
c00188ea:	8d 50 01             	lea    edx,[eax+0x1]
c00188ed:	89 15 a4 41 02 c0    	mov    DWORD PTR ds:0xc00241a4,edx
c00188f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188f7:	89 02                	mov    DWORD PTR [edx],eax
c00188f9:	83 ec 0c             	sub    esp,0xc
c00188fc:	6a 10                	push   0x10
c00188fe:	e8 d3 67 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	89 c3                	mov    ebx,eax
c0018908:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001890c:	25 ff 00 00 00       	and    eax,0xff
c0018911:	83 ec 08             	sub    esp,0x8
c0018914:	50                   	push   eax
c0018915:	53                   	push   ebx
c0018916:	e8 4f 64 ff ff       	call   c000ed6a <VAS::VAS(bool)>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018922:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001892c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001893e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018948:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001894e:	85 c0                	test   eax,eax
c0018950:	74 42                	je     c0018994 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018956:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001895c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018966:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001896c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018970:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018976:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001897c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018980:	05 0c 01 00 00       	add    eax,0x10c
c0018985:	83 ec 08             	sub    esp,0x8
c0018988:	52                   	push   edx
c0018989:	50                   	push   eax
c001898a:	e8 ca 7d fe ff       	call   c0000759 <strcpy>
c001898f:	83 c4 10             	add    esp,0x10
c0018992:	eb 5c                	jmp    c00189f0 <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018994:	83 ec 0c             	sub    esp,0xc
c0018997:	68 60 12 00 00       	push   0x1260
c001899c:	e8 35 67 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	89 c3                	mov    ebx,eax
c00189a6:	83 ec 08             	sub    esp,0x8
c00189a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189ad:	53                   	push   ebx
c00189ae:	e8 15 4e ff ff       	call   c000d7c8 <VgaText::VgaText(char const*)>
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189ca:	83 ec 0c             	sub    esp,0xc
c00189cd:	50                   	push   eax
c00189ce:	e8 f4 41 ff ff       	call   c000cbc7 <addToTerminalCycle(VgaText*)>
c00189d3:	83 c4 10             	add    esp,0x10
c00189d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189da:	05 0c 01 00 00       	add    eax,0x10c
c00189df:	83 ec 08             	sub    esp,0x8
c00189e2:	68 32 2e 02 c0       	push   0xc0022e32
c00189e7:	50                   	push   eax
c00189e8:	e8 6c 7d fe ff       	call   c0000759 <strcpy>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f4:	83 c0 0c             	add    eax,0xc
c00189f7:	83 ec 08             	sub    esp,0x8
c00189fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189fe:	50                   	push   eax
c00189ff:	e8 55 7d fe ff       	call   c0000759 <strcpy>
c0018a04:	83 c4 10             	add    esp,0x10
c0018a07:	83 ec 08             	sub    esp,0x8
c0018a0a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a12:	e8 65 fc ff ff       	call   c001867c <Process::addArgs(char**)>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	90                   	nop
c0018a1b:	83 c4 14             	add    esp,0x14
c0018a1e:	5b                   	pop    ebx
c0018a1f:	5e                   	pop    esi
c0018a20:	c3                   	ret    

c0018a21 <disableIRQs()>:
c0018a21:	fa                   	cli    
c0018a22:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a27:	40                   	inc    eax
c0018a28:	a3 ac 5b 02 c0       	mov    ds:0xc0025bac,eax
c0018a2d:	c3                   	ret    

c0018a2e <getIRQNestingLevel()>:
c0018a2e:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a33:	c3                   	ret    

c0018a34 <enableIRQs()>:
c0018a34:	a1 ac 5b 02 c0       	mov    eax,ds:0xc0025bac
c0018a39:	48                   	dec    eax
c0018a3a:	a3 ac 5b 02 c0       	mov    ds:0xc0025bac,eax
c0018a3f:	75 01                	jne    c0018a42 <enableIRQs()+0xe>
c0018a41:	fb                   	sti    
c0018a42:	c3                   	ret    

c0018a43 <lockScheduler()>:
c0018a43:	eb dc                	jmp    c0018a21 <disableIRQs()>

c0018a45 <unlockScheduler()>:
c0018a45:	eb ed                	jmp    c0018a34 <enableIRQs()>

c0018a47 <userModeEntryPoint(void*)>:
c0018a47:	83 ec 0c             	sub    esp,0xc
c0018a4a:	e8 f6 ff ff ff       	call   c0018a45 <unlockScheduler()>
c0018a4f:	fb                   	sti    
c0018a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a58:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a62:	83 c4 0c             	add    esp,0xc
c0018a65:	e9 29 78 fe ff       	jmp    c0000293 <goToUsermode>

c0018a6a <lockStuff()>:
c0018a6a:	e8 b2 ff ff ff       	call   c0018a21 <disableIRQs()>
c0018a6f:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018a74:	40                   	inc    eax
c0018a75:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c0018a7a:	c3                   	ret    

c0018a7b <taskStartupFunction>:
c0018a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a80:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a83:	c3                   	ret    

c0018a84 <updateTimeUsed()>:
c0018a84:	57                   	push   edi
c0018a85:	56                   	push   esi
c0018a86:	53                   	push   ebx
c0018a87:	e8 42 be ff ff       	call   c00148ce <thisCPU()>
c0018a8c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a93:	74 49                	je     c0018ade <updateTimeUsed()+0x5a>
c0018a95:	0f 31                	rdtsc  
c0018a97:	89 c1                	mov    ecx,eax
c0018a99:	a3 e8 5b 02 c0       	mov    ds:0xc0025be8,eax
c0018a9e:	2b 0d d8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bd8
c0018aa4:	a3 d8 5b 02 c0       	mov    ds:0xc0025bd8,eax
c0018aa9:	89 0d e0 5b 02 c0    	mov    DWORD PTR ds:0xc0025be0,ecx
c0018aaf:	89 d3                	mov    ebx,edx
c0018ab1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab6:	89 15 ec 5b 02 c0    	mov    DWORD PTR ds:0xc0025bec,edx
c0018abc:	1b 1d dc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bdc
c0018ac2:	89 15 dc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bdc,edx
c0018ac8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018acb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ace:	01 f1                	add    ecx,esi
c0018ad0:	89 1d e4 5b 02 c0    	mov    DWORD PTR ds:0xc0025be4,ebx
c0018ad6:	11 fb                	adc    ebx,edi
c0018ad8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018adb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018ade:	5b                   	pop    ebx
c0018adf:	5e                   	pop    esi
c0018ae0:	5f                   	pop    edi
c0018ae1:	c3                   	ret    

c0018ae2 <switchToThread(ThreadControlBlock*)>:
c0018ae2:	53                   	push   ebx
c0018ae3:	83 ec 08             	sub    esp,0x8
c0018ae6:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018aeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018aef:	85 c0                	test   eax,eax
c0018af1:	75 36                	jne    c0018b29 <switchToThread(ThreadControlBlock*)+0x47>
c0018af3:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018af6:	80 fa ff             	cmp    dl,0xff
c0018af9:	74 2a                	je     c0018b25 <switchToThread(ThreadControlBlock*)+0x43>
c0018afb:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b01:	b8 84 03 00 00       	mov    eax,0x384
c0018b06:	29 d0                	sub    eax,edx
c0018b08:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b0b:	c1 e0 10             	shl    eax,0x10
c0018b0e:	01 c8                	add    eax,ecx
c0018b10:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b13:	e8 6c ff ff ff       	call   c0018a84 <updateTimeUsed()>
c0018b18:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b1c:	83 c4 08             	add    esp,0x8
c0018b1f:	5b                   	pop    ebx
c0018b20:	e9 ac 77 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018b25:	31 c0                	xor    eax,eax
c0018b27:	eb e7                	jmp    c0018b10 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b29:	c7 05 a4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x1
c0018b33:	83 c4 08             	add    esp,0x8
c0018b36:	5b                   	pop    ebx
c0018b37:	c3                   	ret    

c0018b38 <Semaphore::Semaphore(int)>:
c0018b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b40:	89 10                	mov    DWORD PTR [eax],edx
c0018b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b46:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b63:	90                   	nop
c0018b64:	c3                   	ret    
c0018b65:	90                   	nop

c0018b66 <Mutex::Mutex()>:
c0018b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6a:	6a 01                	push   0x1
c0018b6c:	50                   	push   eax
c0018b6d:	e8 c6 ff ff ff       	call   c0018b38 <Semaphore::Semaphore(int)>
c0018b72:	83 c4 08             	add    esp,0x8
c0018b75:	90                   	nop
c0018b76:	c3                   	ret    
c0018b77:	90                   	nop

c0018b78 <Process::createThread(void (*)(void*), void*, int)>:
c0018b78:	55                   	push   ebp
c0018b79:	31 c9                	xor    ecx,ecx
c0018b7b:	57                   	push   edi
c0018b7c:	56                   	push   esi
c0018b7d:	53                   	push   ebx
c0018b7e:	83 ec 1c             	sub    esp,0x1c
c0018b81:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b85:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b8c:	89 f2                	mov    edx,esi
c0018b8e:	31 c0                	xor    eax,eax
c0018b90:	66 89 d0             	mov    ax,dx
c0018b93:	83 e2 01             	and    edx,0x1
c0018b96:	74 14                	je     c0018bac <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018b98:	d1 f8                	sar    eax,1
c0018b9a:	41                   	inc    ecx
c0018b9b:	89 c2                	mov    edx,eax
c0018b9d:	83 f9 10             	cmp    ecx,0x10
c0018ba0:	75 ec                	jne    c0018b8e <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018ba2:	83 c4 1c             	add    esp,0x1c
c0018ba5:	31 c0                	xor    eax,eax
c0018ba7:	5b                   	pop    ebx
c0018ba8:	5e                   	pop    esi
c0018ba9:	5f                   	pop    edi
c0018baa:	5d                   	pop    ebp
c0018bab:	c3                   	ret    
c0018bac:	b8 01 00 00 00       	mov    eax,0x1
c0018bb1:	d3 e0                	shl    eax,cl
c0018bb3:	09 c6                	or     esi,eax
c0018bb5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bbb:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bc2:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bc5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bc8:	89 f0                	mov    eax,esi
c0018bca:	c1 e0 05             	shl    eax,0x5
c0018bcd:	01 c6                	add    esi,eax
c0018bcf:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bd2:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bdc:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018be2:	89 ca                	mov    edx,ecx
c0018be4:	f7 da                	neg    edx
c0018be6:	c1 e2 15             	shl    edx,0x15
c0018be9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018bef:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bf5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018bfb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c05:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c0b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c0f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c19:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c1f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c29:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c33:	52                   	push   edx
c0018c34:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c3b:	52                   	push   edx
c0018c3c:	50                   	push   eax
c0018c3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c41:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c46:	e8 57 70 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c52:	83 c4 1c             	add    esp,0x1c
c0018c55:	5b                   	pop    ebx
c0018c56:	5e                   	pop    esi
c0018c57:	5f                   	pop    edi
c0018c58:	5d                   	pop    ebp
c0018c59:	c3                   	ret    

c0018c5a <Process::createUserThread()>:
c0018c5a:	83 ec 0c             	sub    esp,0xc
c0018c5d:	68 80 00 00 00       	push   0x80
c0018c62:	6a 00                	push   0x0
c0018c64:	68 47 8a 01 c0       	push   0xc0018a47
c0018c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c6d:	50                   	push   eax
c0018c6e:	e8 05 ff ff ff       	call   c0018b78 <Process::createThread(void (*)(void*), void*, int)>
c0018c73:	83 c4 1c             	add    esp,0x1c
c0018c76:	c3                   	ret    

c0018c77 <setupMultitasking(void (*)())>:
c0018c77:	56                   	push   esi
c0018c78:	53                   	push   ebx
c0018c79:	51                   	push   ecx
c0018c7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c7e:	eb 10                	jmp    c0018c90 <setupMultitasking(void (*)())+0x19>
c0018c80:	83 ec 0c             	sub    esp,0xc
c0018c83:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c88:	e8 67 6f 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c8d:	83 c4 10             	add    esp,0x10
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018c98:	e8 3b 6f 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c9d:	83 c4 10             	add    esp,0x10
c0018ca0:	84 c0                	test   al,al
c0018ca2:	74 dc                	je     c0018c80 <setupMultitasking(void (*)())+0x9>
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	68 3b 07 00 00       	push   0x73b
c0018cac:	e8 25 64 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0018cb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cb8:	6a 00                	push   0x0
c0018cba:	68 36 2e 02 c0       	push   0xc0022e36
c0018cbf:	89 c3                	mov    ebx,eax
c0018cc1:	6a 01                	push   0x1
c0018cc3:	50                   	push   eax
c0018cc4:	e8 d1 fb ff ff       	call   c001889a <Process::Process(bool, char const*, Process*, char**)>
c0018cc9:	83 c4 18             	add    esp,0x18
c0018ccc:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cd2:	89 1d d4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bd4,ebx
c0018cd8:	50                   	push   eax
c0018cd9:	68 58 2f 02 c0       	push   0xc0022f58
c0018cde:	e8 28 65 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0018ce3:	5a                   	pop    edx
c0018ce4:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cea:	51                   	push   ecx
c0018ceb:	e8 4b 46 ff ff       	call   c000d33b <setActiveTerminal(VgaText*)>
c0018cf0:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018cf7:	83 c8 01             	or     eax,0x1
c0018cfa:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d01:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d0a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d14:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d1a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d24:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d2e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d34:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d3a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d44:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d4a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d54:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d5e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d64:	58                   	pop    eax
c0018d65:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d6b:	5a                   	pop    edx
c0018d6c:	68 32 2e 02 c0       	push   0xc0022e32
c0018d71:	50                   	push   eax
c0018d72:	e8 e2 79 fe ff       	call   c0000759 <strcpy>
c0018d77:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d7e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d82:	83 c4 14             	add    esp,0x14
c0018d85:	5b                   	pop    ebx
c0018d86:	5e                   	pop    esi
c0018d87:	e9 37 75 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018d8c <schedule()>:
c0018d8c:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018d91:	85 c0                	test   eax,eax
c0018d93:	74 0b                	je     c0018da0 <schedule()+0x14>
c0018d95:	c7 05 a4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x1
c0018d9f:	c3                   	ret    
c0018da0:	53                   	push   ebx
c0018da1:	83 ec 14             	sub    esp,0x14
c0018da4:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018da9:	e8 2a 6e 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018dae:	83 c4 10             	add    esp,0x10
c0018db1:	84 c0                	test   al,al
c0018db3:	75 38                	jne    c0018ded <schedule()+0x61>
c0018db5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dbd:	4a                   	dec    edx
c0018dbe:	74 32                	je     c0018df2 <schedule()+0x66>
c0018dc0:	83 ec 0c             	sub    esp,0xc
c0018dc3:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018dc8:	e8 03 6e 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dcd:	89 c3                	mov    ebx,eax
c0018dcf:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c0018dd6:	e8 19 6e 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ddb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018de2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018de5:	e8 f8 fc ff ff       	call   c0018ae2 <switchToThread(ThreadControlBlock*)>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	83 c4 08             	add    esp,0x8
c0018df0:	5b                   	pop    ebx
c0018df1:	c3                   	ret    
c0018df2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018df9:	51                   	push   ecx
c0018dfa:	51                   	push   ecx
c0018dfb:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e01:	53                   	push   ebx
c0018e02:	68 c8 5b 02 c0       	push   0xc0025bc8
c0018e07:	e8 96 6e 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	eb af                	jmp    c0018dc0 <schedule()+0x34>

c0018e11 <unlockStuff()>:
c0018e11:	a1 a8 5b 02 c0       	mov    eax,ds:0xc0025ba8
c0018e16:	48                   	dec    eax
c0018e17:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c0018e1c:	75 09                	jne    c0018e27 <unlockStuff()+0x16>
c0018e1e:	a1 a4 5b 02 c0       	mov    eax,ds:0xc0025ba4
c0018e23:	85 c0                	test   eax,eax
c0018e25:	75 05                	jne    c0018e2c <unlockStuff()+0x1b>
c0018e27:	e9 08 fc ff ff       	jmp    c0018a34 <enableIRQs()>
c0018e2c:	83 ec 0c             	sub    esp,0xc
c0018e2f:	c7 05 a4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ba4,0x0
c0018e39:	e8 4e ff ff ff       	call   c0018d8c <schedule()>
c0018e3e:	83 c4 0c             	add    esp,0xc
c0018e41:	e9 ee fb ff ff       	jmp    c0018a34 <enableIRQs()>

c0018e46 <Semaphore::tryAcquire()>:
c0018e46:	83 ec 0c             	sub    esp,0xc
c0018e49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e4d:	e8 18 fc ff ff       	call   c0018a6a <lockStuff()>
c0018e52:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e55:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e57:	7c 0b                	jl     c0018e64 <Semaphore::tryAcquire()+0x1e>
c0018e59:	e8 b3 ff ff ff       	call   c0018e11 <unlockStuff()>
c0018e5e:	31 c0                	xor    eax,eax
c0018e60:	83 c4 0c             	add    esp,0xc
c0018e63:	c3                   	ret    
c0018e64:	40                   	inc    eax
c0018e65:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e68:	e8 a4 ff ff ff       	call   c0018e11 <unlockStuff()>
c0018e6d:	b0 01                	mov    al,0x1
c0018e6f:	83 c4 0c             	add    esp,0xc
c0018e72:	c3                   	ret    
c0018e73:	90                   	nop

c0018e74 <Semaphore::assertLocked(char const*)>:
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e7f:	e8 e6 fb ff ff       	call   c0018a6a <lockStuff()>
c0018e84:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e86:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e89:	7c 05                	jl     c0018e90 <Semaphore::assertLocked(char const*)+0x1c>
c0018e8b:	83 c4 0c             	add    esp,0xc
c0018e8e:	eb 81                	jmp    c0018e11 <unlockStuff()>
c0018e90:	83 ec 0c             	sub    esp,0xc
c0018e93:	51                   	push   ecx
c0018e94:	e8 a1 cb ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0018e99:	83 c4 10             	add    esp,0x10
c0018e9c:	83 c4 0c             	add    esp,0xc
c0018e9f:	e9 6d ff ff ff       	jmp    c0018e11 <unlockStuff()>

c0018ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ea4:	83 ec 0c             	sub    esp,0xc
c0018ea7:	e8 82 fb ff ff       	call   c0018a2e <getIRQNestingLevel()>
c0018eac:	52                   	push   edx
c0018ead:	52                   	push   edx
c0018eae:	50                   	push   eax
c0018eaf:	68 8c 2f 02 c0       	push   0xc0022f8c
c0018eb4:	e8 52 63 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0018eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ebe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ec2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ec5:	e8 c2 fe ff ff       	call   c0018d8c <schedule()>
c0018eca:	e8 76 fb ff ff       	call   c0018a45 <unlockScheduler()>
c0018ecf:	e8 5a fb ff ff       	call   c0018a2e <getIRQNestingLevel()>
c0018ed4:	59                   	pop    ecx
c0018ed5:	5a                   	pop    edx
c0018ed6:	50                   	push   eax
c0018ed7:	68 c0 2f 02 c0       	push   0xc0022fc0
c0018edc:	e8 2a 63 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0018ee1:	83 c4 1c             	add    esp,0x1c
c0018ee4:	c3                   	ret    

c0018ee5 <blockTask(TaskState)>:
c0018ee5:	83 ec 0c             	sub    esp,0xc
c0018ee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018eec:	e8 52 fb ff ff       	call   c0018a43 <lockScheduler()>
c0018ef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ef6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ef9:	e8 8e fe ff ff       	call   c0018d8c <schedule()>
c0018efe:	83 c4 0c             	add    esp,0xc
c0018f01:	e9 3f fb ff ff       	jmp    c0018a45 <unlockScheduler()>

c0018f06 <waitTask(int, int*, int)>:
c0018f06:	83 ec 18             	sub    esp,0x18
c0018f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f12:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f1e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f21:	6a 07                	push   0x7
c0018f23:	e8 bd ff ff ff       	call   c0018ee5 <blockTask(TaskState)>
c0018f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	85 d2                	test   edx,edx
c0018f35:	74 0a                	je     c0018f41 <waitTask(int, int*, int)+0x3b>
c0018f37:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f3a:	89 02                	mov    DWORD PTR [edx],eax
c0018f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f41:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f44:	83 c4 0c             	add    esp,0xc
c0018f47:	c3                   	ret    

c0018f48 <nanoSleepUntil(unsigned long long)>:
c0018f48:	53                   	push   ebx
c0018f49:	83 ec 08             	sub    esp,0x8
c0018f4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f54:	3b 0d f0 4d 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024df0
c0018f5a:	89 d8                	mov    eax,ebx
c0018f5c:	1b 05 f4 4d 02 c0    	sbb    eax,DWORD PTR ds:0xc0024df4
c0018f62:	73 05                	jae    c0018f69 <nanoSleepUntil(unsigned long long)+0x21>
c0018f64:	83 c4 08             	add    esp,0x8
c0018f67:	5b                   	pop    ebx
c0018f68:	c3                   	ret    
c0018f69:	e8 fc fa ff ff       	call   c0018a6a <lockStuff()>
c0018f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f73:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f76:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f79:	51                   	push   ecx
c0018f7a:	51                   	push   ecx
c0018f7b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f81:	53                   	push   ebx
c0018f82:	68 bc 5b 02 c0       	push   0xc0025bbc
c0018f87:	e8 16 6d 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f8c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f93:	e8 4d ff ff ff       	call   c0018ee5 <blockTask(TaskState)>
c0018f98:	83 c4 18             	add    esp,0x18
c0018f9b:	5b                   	pop    ebx
c0018f9c:	e9 70 fe ff ff       	jmp    c0018e11 <unlockStuff()>

c0018fa1 <nanoSleep(unsigned long long)>:
c0018fa1:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c0018fa6:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c0018fac:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fb0:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fb4:	eb 92                	jmp    c0018f48 <nanoSleepUntil(unsigned long long)>

c0018fb6 <sleep(unsigned long long)>:
c0018fb6:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fbb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fc3:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fc7:	01 ca                	add    edx,ecx
c0018fc9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fcd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fd1:	eb ce                	jmp    c0018fa1 <nanoSleep(unsigned long long)>
c0018fd3:	90                   	nop

c0018fd4 <Semaphore::acquire()>:
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fdb:	e8 8a fa ff ff       	call   c0018a6a <lockStuff()>
c0018fe0:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fe3:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018fe5:	7d 0c                	jge    c0018ff3 <Semaphore::acquire()+0x1f>
c0018fe7:	40                   	inc    eax
c0018fe8:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018feb:	83 c4 0c             	add    esp,0xc
c0018fee:	e9 1e fe ff ff       	jmp    c0018e11 <unlockStuff()>
c0018ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ff8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018fff:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019002:	85 c0                	test   eax,eax
c0019004:	74 29                	je     c001902f <Semaphore::acquire()+0x5b>
c0019006:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019009:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001900f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019012:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019017:	83 ec 0c             	sub    esp,0xc
c001901a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001901d:	6a 05                	push   0x5
c001901f:	e8 c1 fe ff ff       	call   c0018ee5 <blockTask(TaskState)>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	83 c4 0c             	add    esp,0xc
c001902a:	e9 e2 fd ff ff       	jmp    c0018e11 <unlockStuff()>
c001902f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019034:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019037:	eb d9                	jmp    c0019012 <Semaphore::acquire()+0x3e>

c0019039 <taskReturned>:
c0019039:	83 ec 18             	sub    esp,0x18
c001903c:	68 f4 2f 02 c0       	push   0xc0022ff4
c0019041:	e8 f4 c9 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	83 ec 0c             	sub    esp,0xc
c001904c:	6a 02                	push   0x2
c001904e:	e8 92 fe ff ff       	call   c0018ee5 <blockTask(TaskState)>
c0019053:	e8 eb f9 ff ff       	call   c0018a43 <lockScheduler()>
c0019058:	e8 2f fd ff ff       	call   c0018d8c <schedule()>
c001905d:	e8 e3 f9 ff ff       	call   c0018a45 <unlockScheduler()>
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	eb e2                	jmp    c0019049 <taskReturned+0x10>

c0019067 <unblockTask(ThreadControlBlock*)>:
c0019067:	53                   	push   ebx
c0019068:	83 ec 08             	sub    esp,0x8
c001906b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001906f:	e8 cf f9 ff ff       	call   c0018a43 <lockScheduler()>
c0019074:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019077:	85 c0                	test   eax,eax
c0019079:	74 5b                	je     c00190d6 <unblockTask(ThreadControlBlock*)+0x6f>
c001907b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001907e:	48                   	dec    eax
c001907f:	74 30                	je     c00190b1 <unblockTask(ThreadControlBlock*)+0x4a>
c0019081:	83 ec 0c             	sub    esp,0xc
c0019084:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019089:	e8 42 6b 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001908e:	83 c4 10             	add    esp,0x10
c0019091:	85 c0                	test   eax,eax
c0019093:	75 16                	jne    c00190ab <unblockTask(ThreadControlBlock*)+0x44>
c0019095:	eb 64                	jmp    c00190fb <unblockTask(ThreadControlBlock*)+0x94>
c0019097:	52                   	push   edx
c0019098:	52                   	push   edx
c0019099:	50                   	push   eax
c001909a:	68 c8 5b 02 c0       	push   0xc0025bc8
c001909f:	e8 3c 6e 00 00       	call   c001fee0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190a4:	83 c4 10             	add    esp,0x10
c00190a7:	85 c0                	test   eax,eax
c00190a9:	74 50                	je     c00190fb <unblockTask(ThreadControlBlock*)+0x94>
c00190ab:	39 c3                	cmp    ebx,eax
c00190ad:	75 e8                	jne    c0019097 <unblockTask(ThreadControlBlock*)+0x30>
c00190af:	eb 1c                	jmp    c00190cd <unblockTask(ThreadControlBlock*)+0x66>
c00190b1:	83 ec 0c             	sub    esp,0xc
c00190b4:	68 e4 30 02 c0       	push   0xc00230e4
c00190b9:	e8 4d 61 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00190be:	c7 04 24 70 30 02 c0 	mov    DWORD PTR [esp],0xc0023070
c00190c5:	e8 41 61 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	83 c4 08             	add    esp,0x8
c00190d0:	5b                   	pop    ebx
c00190d1:	e9 6f f9 ff ff       	jmp    c0018a45 <unlockScheduler()>
c00190d6:	83 ec 0c             	sub    esp,0xc
c00190d9:	68 28 30 02 c0       	push   0xc0023028
c00190de:	e8 28 61 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00190e3:	c7 04 24 70 30 02 c0 	mov    DWORD PTR [esp],0xc0023070
c00190ea:	e8 1c 61 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	83 c4 08             	add    esp,0x8
c00190f5:	5b                   	pop    ebx
c00190f6:	e9 4a f9 ff ff       	jmp    c0018a45 <unlockScheduler()>
c00190fb:	50                   	push   eax
c00190fc:	50                   	push   eax
c00190fd:	53                   	push   ebx
c00190fe:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019103:	e8 9a 6b 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	83 c4 08             	add    esp,0x8
c001910e:	5b                   	pop    ebx
c001910f:	e9 31 f9 ff ff       	jmp    c0018a45 <unlockScheduler()>

c0019114 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019114:	55                   	push   ebp
c0019115:	57                   	push   edi
c0019116:	56                   	push   esi
c0019117:	53                   	push   ebx
c0019118:	83 ec 1c             	sub    esp,0x1c
c001911b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001911f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019122:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019128:	85 ed                	test   ebp,ebp
c001912a:	7e 21                	jle    c001914d <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001912c:	31 f6                	xor    esi,esi
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019138:	46                   	inc    esi
c0019139:	57                   	push   edi
c001913a:	e8 aa 2e ff ff       	call   c000bfe9 <free>
c001913f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019142:	83 c4 10             	add    esp,0x10
c0019145:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001914b:	7f e1                	jg     c001912e <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001914d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019157:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001915c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001915f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019162:	d3 c0                	rol    eax,cl
c0019164:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001916b:	21 c1                	and    ecx,eax
c001916d:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019174:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019177:	89 f7                	mov    edi,esi
c0019179:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019181:	0f 85 4f 01 00 00    	jne    c00192d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019187:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001918d:	85 c0                	test   eax,eax
c001918f:	0f 84 aa 00 00 00    	je     c001923f <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0019195:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0019198:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001919c:	31 c9                	xor    ecx,ecx
c001919e:	eb 10                	jmp    c00191b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191a0:	41                   	inc    ecx
c00191a1:	83 f9 10             	cmp    ecx,0x10
c00191a4:	0f 84 95 00 00 00    	je     c001923f <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191aa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191b0:	31 d2                	xor    edx,edx
c00191b2:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191b9:	d3 fa                	sar    edx,cl
c00191bb:	83 e2 01             	and    edx,0x1
c00191be:	74 e0                	je     c00191a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191c0:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191c3:	89 d5                	mov    ebp,edx
c00191c5:	c1 e5 05             	shl    ebp,0x5
c00191c8:	01 ea                	add    edx,ebp
c00191ca:	01 d0                	add    eax,edx
c00191cc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191d2:	83 fd 07             	cmp    ebp,0x7
c00191d5:	75 c9                	jne    c00191a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191d7:	05 40 02 00 00       	add    eax,0x240
c00191dc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191df:	83 fd ff             	cmp    ebp,0xffffffff
c00191e2:	0f 8c 07 01 00 00    	jl     c00192ef <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191e8:	0f 84 b4 01 00 00    	je     c00193a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191ee:	85 ed                	test   ebp,ebp
c00191f0:	0f 84 9b 01 00 00    	je     c0019391 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00191f6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00191f8:	75 a6                	jne    c00191a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191fa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019200:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019204:	01 d0                	add    eax,edx
c0019206:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001920a:	83 ec 0c             	sub    esp,0xc
c001920d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019213:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019216:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001921c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019223:	50                   	push   eax
c0019224:	e8 3e fe ff ff       	call   c0019067 <unblockTask(ThreadControlBlock*)>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019230:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019233:	41                   	inc    ecx
c0019234:	89 f7                	mov    edi,esi
c0019236:	83 f9 10             	cmp    ecx,0x10
c0019239:	0f 85 6b ff ff ff    	jne    c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c001923f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019245:	85 c0                	test   eax,eax
c0019247:	74 5d                	je     c00192a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019249:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001924f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019255:	74 4f                	je     c00192a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	68 c8 5b 02 c0       	push   0xc0025bc8
c001925f:	e8 6c 69 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019264:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c001926b:	89 c7                	mov    edi,eax
c001926d:	e8 66 69 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	84 c0                	test   al,al
c0019277:	0f 84 e2 00 00 00    	je     c001935f <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c001927d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019280:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019286:	85 d2                	test   edx,edx
c0019288:	74 0f                	je     c0019299 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001928a:	83 ec 0c             	sub    esp,0xc
c001928d:	8b 02                	mov    eax,DWORD PTR [edx]
c001928f:	52                   	push   edx
c0019290:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019293:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019296:	83 c4 10             	add    esp,0x10
c0019299:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192a3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192a6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192ac:	85 db                	test   ebx,ebx
c00192ae:	74 16                	je     c00192c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	53                   	push   ebx
c00192b4:	e8 97 54 ff ff       	call   c000e750 <VAS::~VAS()>
c00192b9:	5a                   	pop    edx
c00192ba:	59                   	pop    ecx
c00192bb:	6a 10                	push   0x10
c00192bd:	53                   	push   ebx
c00192be:	e8 22 5e ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	83 ec 0c             	sub    esp,0xc
c00192c9:	68 3d 2e 02 c0       	push   0xc0022e3d
c00192ce:	e8 38 5f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00192d3:	83 c4 10             	add    esp,0x10
c00192d6:	50                   	push   eax
c00192d7:	50                   	push   eax
c00192d8:	68 3b 07 00 00       	push   0x73b
c00192dd:	68 4b 2e 02 c0       	push   0xc0022e4b
c00192e2:	e8 24 5f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00192e7:	83 c4 2c             	add    esp,0x2c
c00192ea:	5b                   	pop    ebx
c00192eb:	5e                   	pop    esi
c00192ec:	5f                   	pop    edi
c00192ed:	5d                   	pop    ebp
c00192ee:	c3                   	ret    
c00192ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192f3:	83 ec 0c             	sub    esp,0xc
c00192f6:	68 28 31 02 c0       	push   0xc0023128
c00192fb:	e8 3a c7 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019306:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001930a:	89 f7                	mov    edi,esi
c001930c:	e9 8f fe ff ff       	jmp    c00191a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019311:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019317:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001931d:	75 1c                	jne    c001933b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001931f:	83 ec 0c             	sub    esp,0xc
c0019322:	68 90 31 02 c0       	push   0xc0023190
c0019327:	e8 df 5e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001932c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019333:	e8 ad fb ff ff       	call   c0018ee5 <blockTask(TaskState)>
c0019338:	83 c4 10             	add    esp,0x10
c001933b:	55                   	push   ebp
c001933c:	55                   	push   ebp
c001933d:	56                   	push   esi
c001933e:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019343:	e8 5a 69 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019348:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c001934f:	e8 7c 68 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019354:	83 c4 10             	add    esp,0x10
c0019357:	39 f8                	cmp    eax,edi
c0019359:	0f 84 1e ff ff ff    	je     c001927d <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c001935f:	83 ec 0c             	sub    esp,0xc
c0019362:	68 c8 5b 02 c0       	push   0xc0025bc8
c0019367:	e8 64 68 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001936c:	89 c6                	mov    esi,eax
c001936e:	c7 04 24 c8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc8
c0019375:	e8 7a 68 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	39 f3                	cmp    ebx,esi
c001937f:	74 ba                	je     c001933b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019381:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019384:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019387:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001938d:	75 ac                	jne    c001933b <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001938f:	eb 80                	jmp    c0019311 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0019391:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019395:	83 ec 0c             	sub    esp,0xc
c0019398:	68 5c 31 02 c0       	push   0xc002315c
c001939d:	e9 59 ff ff ff       	jmp    c00192fb <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193a2:	8b 36                	mov    esi,DWORD PTR [esi]
c00193a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193a8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193ae:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193b4:	01 d7                	add    edi,edx
c00193b6:	89 f8                	mov    eax,edi
c00193b8:	e9 49 fe ff ff       	jmp    c0019206 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193bd <cleanerTaskFunction(void*)>:
c00193bd:	53                   	push   ebx
c00193be:	83 ec 08             	sub    esp,0x8
c00193c1:	e8 7f f6 ff ff       	call   c0018a45 <unlockScheduler()>
c00193c6:	e8 78 f6 ff ff       	call   c0018a43 <lockScheduler()>
c00193cb:	80 3d 8c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b8c,0x0
c00193d2:	0f 85 8e 00 00 00    	jne    c0019466 <cleanerTaskFunction(void*)+0xa9>
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	6a 02                	push   0x2
c00193dd:	e8 c2 fa ff ff       	call   c0018ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	c6 05 8c 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025b8c,0x0
c00193ec:	e8 79 f6 ff ff       	call   c0018a6a <lockStuff()>
c00193f1:	e8 4d f6 ff ff       	call   c0018a43 <lockScheduler()>
c00193f6:	83 ec 0c             	sub    esp,0xc
c00193f9:	68 b0 5b 02 c0       	push   0xc0025bb0
c00193fe:	e8 d5 67 00 00       	call   c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	84 c0                	test   al,al
c0019408:	75 40                	jne    c001944a <cleanerTaskFunction(void*)+0x8d>
c001940a:	83 ec 0c             	sub    esp,0xc
c001940d:	68 b0 5b 02 c0       	push   0xc0025bb0
c0019412:	e8 b9 67 00 00       	call   c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019417:	89 c3                	mov    ebx,eax
c0019419:	c7 04 24 b0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bb0
c0019420:	e8 cf 67 00 00       	call   c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019425:	c7 04 24 61 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e61
c001942c:	e8 da 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0019431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019434:	e8 db fc ff ff       	call   c0019114 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019439:	c7 04 24 7a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e7a
c0019440:	e8 c6 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	eb ac                	jmp    c00193f6 <cleanerTaskFunction(void*)+0x39>
c001944a:	e8 f6 f5 ff ff       	call   c0018a45 <unlockScheduler()>
c001944f:	e8 bd f9 ff ff       	call   c0018e11 <unlockStuff()>
c0019454:	e8 ea f5 ff ff       	call   c0018a43 <lockScheduler()>
c0019459:	80 3d 8c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b8c,0x0
c0019460:	0f 84 72 ff ff ff    	je     c00193d8 <cleanerTaskFunction(void*)+0x1b>
c0019466:	e8 da f5 ff ff       	call   c0018a45 <unlockScheduler()>
c001946b:	e9 75 ff ff ff       	jmp    c00193e5 <cleanerTaskFunction(void*)+0x28>

c0019470 <terminateTask(int)>:
c0019470:	83 ec 14             	sub    esp,0x14
c0019473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019478:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001947b:	83 c0 0c             	add    eax,0xc
c001947e:	50                   	push   eax
c001947f:	68 b8 31 02 c0       	push   0xc00231b8
c0019484:	e8 82 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0019489:	e8 dc f5 ff ff       	call   c0018a6a <lockStuff()>
c001948e:	e8 b0 f5 ff ff       	call   c0018a43 <lockScheduler()>
c0019493:	c7 04 24 8d 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e8d
c001949a:	e8 6c 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001949f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194a8:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b0:	59                   	pop    ecx
c00194b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194b4:	5a                   	pop    edx
c00194b5:	50                   	push   eax
c00194b6:	68 b0 5b 02 c0       	push   0xc0025bb0
c00194bb:	e8 e2 67 00 00       	call   c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194cc:	c7 04 24 a7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea7
c00194d3:	e8 33 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00194d8:	8b 0d 88 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025b88
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	85 c9                	test   ecx,ecx
c00194e3:	74 5b                	je     c0019540 <terminateTask(int)+0xd0>
c00194e5:	83 ec 0c             	sub    esp,0xc
c00194e8:	68 c1 2e 02 c0       	push   0xc0022ec1
c00194ed:	e8 19 5d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c00194f2:	58                   	pop    eax
c00194f3:	8b 15 88 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b88
c00194f9:	52                   	push   edx
c00194fa:	c6 05 8c 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025b8c,0x1
c0019501:	e8 61 fb ff ff       	call   c0019067 <unblockTask(ThreadControlBlock*)>
c0019506:	c7 04 24 db 2e 02 c0 	mov    DWORD PTR [esp],0xc0022edb
c001950d:	e8 f9 5c ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	e8 2b f5 ff ff       	call   c0018a45 <unlockScheduler()>
c001951a:	e8 f2 f8 ff ff       	call   c0018e11 <unlockStuff()>
c001951f:	83 ec 0c             	sub    esp,0xc
c0019522:	68 13 2f 02 c0       	push   0xc0022f13
c0019527:	e8 df 5c ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	e8 0f f5 ff ff       	call   c0018a43 <lockScheduler()>
c0019534:	e8 53 f8 ff ff       	call   c0018d8c <schedule()>
c0019539:	e8 07 f5 ff ff       	call   c0018a45 <unlockScheduler()>
c001953e:	eb ef                	jmp    c001952f <terminateTask(int)+0xbf>
c0019540:	83 ec 0c             	sub    esp,0xc
c0019543:	68 f5 2e 02 c0       	push   0xc0022ef5
c0019548:	e8 be 5c ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001954d:	83 c4 10             	add    esp,0x10
c0019550:	eb c3                	jmp    c0019515 <terminateTask(int)+0xa5>

c0019552 <Thr::terminateFromIRQ(int)>:
c0019552:	83 ec 18             	sub    esp,0x18
c0019555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019559:	50                   	push   eax
c001955a:	e8 11 ff ff ff       	call   c0019470 <terminateTask(int)>
c001955f:	90                   	nop

c0019560 <Semaphore::release()>:
c0019560:	83 ec 0c             	sub    esp,0xc
c0019563:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019567:	e8 fe f4 ff ff       	call   c0018a6a <lockStuff()>
c001956c:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001956f:	85 c0                	test   eax,eax
c0019571:	74 1a                	je     c001958d <Semaphore::release()+0x2d>
c0019573:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019576:	83 ec 0c             	sub    esp,0xc
c0019579:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c001957c:	50                   	push   eax
c001957d:	e8 e5 fa ff ff       	call   c0019067 <unblockTask(ThreadControlBlock*)>
c0019582:	83 c4 10             	add    esp,0x10
c0019585:	83 c4 0c             	add    esp,0xc
c0019588:	e9 84 f8 ff ff       	jmp    c0018e11 <unlockStuff()>
c001958d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019590:	48                   	dec    eax
c0019591:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019594:	83 c4 0c             	add    esp,0xc
c0019597:	e9 75 f8 ff ff       	jmp    c0018e11 <unlockStuff()>

c001959c <__static_initialization_and_destruction_0(int, int)>:
c001959c:	83 ec 0c             	sub    esp,0xc
c001959f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195a4:	0f 85 88 00 00 00    	jne    c0019632 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195b2:	75 7e                	jne    c0019632 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	68 c8 5b 02 c0       	push   0xc0025bc8
c00195bc:	e8 c7 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	83 ec 04             	sub    esp,0x4
c00195c7:	68 9c 3b 02 c0       	push   0xc0023b9c
c00195cc:	68 c8 5b 02 c0       	push   0xc0025bc8
c00195d1:	68 48 fe 01 c0       	push   0xc001fe48
c00195d6:	e8 86 5a ff ff       	call   c000f061 <__cxa_atexit>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	83 ec 0c             	sub    esp,0xc
c00195e1:	68 bc 5b 02 c0       	push   0xc0025bbc
c00195e6:	e8 9d 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	83 ec 04             	sub    esp,0x4
c00195f1:	68 9c 3b 02 c0       	push   0xc0023b9c
c00195f6:	68 bc 5b 02 c0       	push   0xc0025bbc
c00195fb:	68 48 fe 01 c0       	push   0xc001fe48
c0019600:	e8 5c 5a ff ff       	call   c000f061 <__cxa_atexit>
c0019605:	83 c4 10             	add    esp,0x10
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	68 b0 5b 02 c0       	push   0xc0025bb0
c0019610:	e8 73 68 00 00       	call   c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019615:	83 c4 10             	add    esp,0x10
c0019618:	83 ec 04             	sub    esp,0x4
c001961b:	68 9c 3b 02 c0       	push   0xc0023b9c
c0019620:	68 b0 5b 02 c0       	push   0xc0025bb0
c0019625:	68 48 fe 01 c0       	push   0xc001fe48
c001962a:	e8 32 5a ff ff       	call   c000f061 <__cxa_atexit>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	90                   	nop
c0019633:	83 c4 0c             	add    esp,0xc
c0019636:	c3                   	ret    

c0019637 <_GLOBAL__sub_I_kernelProcess>:
c0019637:	83 ec 0c             	sub    esp,0xc
c001963a:	83 ec 08             	sub    esp,0x8
c001963d:	68 ff ff 00 00       	push   0xffff
c0019642:	6a 01                	push   0x1
c0019644:	e8 53 ff ff ff       	call   c001959c <__static_initialization_and_destruction_0(int, int)>
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	83 c4 0c             	add    esp,0xc
c001964f:	c3                   	ret    

c0019650 <Vm::vm8086EntryPoint(void*)>:
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	e8 ed f3 ff ff       	call   c0018a45 <unlockScheduler()>
c0019658:	fb                   	sti    
c0019659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001965e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019662:	52                   	push   edx
c0019663:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019667:	52                   	push   edx
c0019668:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001966c:	52                   	push   edx
c001966d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019671:	50                   	push   eax
c0019672:	e8 eb 6b fe ff       	call   c0000262 <goToVM86>
c0019677:	83 c4 1c             	add    esp,0x1c
c001967a:	c3                   	ret    

c001967b <Vm::inbv(unsigned short)>:
c001967b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001967f:	ec                   	in     al,dx
c0019680:	c3                   	ret    

c0019681 <Vm::outbv(unsigned short, unsigned char)>:
c0019681:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019689:	ee                   	out    dx,al
c001968a:	c3                   	ret    

c001968b <Vm::realToLinear(unsigned short, unsigned short)>:
c001968b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019690:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019695:	c1 e0 04             	shl    eax,0x4
c0019698:	01 d0                	add    eax,edx
c001969a:	c3                   	ret    

c001969b <Vm::getSegment(unsigned int)>:
c001969b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001969f:	c1 e8 10             	shr    eax,0x10
c00196a2:	c3                   	ret    

c00196a3 <Vm::getOffset(unsigned int)>:
c00196a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a7:	c3                   	ret    

c00196a8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196a8:	55                   	push   ebp
c00196a9:	57                   	push   edi
c00196aa:	56                   	push   esi
c00196ab:	53                   	push   ebx
c00196ac:	83 ec 2c             	sub    esp,0x2c
c00196af:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196b3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196bf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196c3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196c7:	e8 77 f3 ff ff       	call   c0018a43 <lockScheduler()>
c00196cc:	68 80 00 00 00       	push   0x80
c00196d1:	6a 00                	push   0x0
c00196d3:	68 50 96 01 c0       	push   0xc0019650
c00196d8:	55                   	push   ebp
c00196d9:	e8 9a f4 ff ff       	call   c0018b78 <Process::createThread(void (*)(void*), void*, int)>
c00196de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e2:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196e6:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196ea:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196ee:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196f2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00196f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00196fd:	e8 d4 59 ff ff       	call   c000f0d6 <operator new(unsigned long)>
c0019702:	83 c4 0c             	add    esp,0xc
c0019705:	55                   	push   ebp
c0019706:	89 c3                	mov    ebx,eax
c0019708:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001970c:	50                   	push   eax
c001970d:	e8 30 60 ff ff       	call   c000f742 <File::File(char const*, Process*)>
c0019712:	83 c4 0c             	add    esp,0xc
c0019715:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019719:	50                   	push   eax
c001971a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001971e:	50                   	push   eax
c001971f:	53                   	push   ebx
c0019720:	e8 2d 63 ff ff       	call   c000fa52 <File::stat(unsigned long long*, bool*)>
c0019725:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	84 d2                	test   dl,dl
c001972e:	74 1c                	je     c001974c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019730:	83 ec 0c             	sub    esp,0xc
c0019733:	68 d7 31 02 c0       	push   0xc00231d7
c0019738:	e8 fd c2 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001973d:	e8 03 f3 ff ff       	call   c0018a45 <unlockScheduler()>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	31 d2                	xor    edx,edx
c0019747:	e9 81 00 00 00       	jmp    c00197cd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001974c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019750:	51                   	push   ecx
c0019751:	51                   	push   ecx
c0019752:	6a 01                	push   0x1
c0019754:	53                   	push   ebx
c0019755:	e8 4c 60 ff ff       	call   c000f7a6 <File::open(FileOpenMode)>
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	85 c0                	test   eax,eax
c001975f:	74 1b                	je     c001977c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019761:	83 ec 0c             	sub    esp,0xc
c0019764:	68 f0 31 02 c0       	push   0xc00231f0
c0019769:	e8 cc c2 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001976e:	e8 d2 f2 ff ff       	call   c0018a45 <unlockScheduler()>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001977a:	eb 51                	jmp    c00197cd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001977c:	83 ec 0c             	sub    esp,0xc
c001977f:	0f b7 ff             	movzx  edi,di
c0019782:	6a 07                	push   0x7
c0019784:	68 00 01 00 00       	push   0x100
c0019789:	6a 00                	push   0x0
c001978b:	6a 00                	push   0x0
c001978d:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019793:	e8 16 54 ff ff       	call   c000ebae <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019798:	83 c4 18             	add    esp,0x18
c001979b:	0f b7 f6             	movzx  esi,si
c001979e:	57                   	push   edi
c001979f:	56                   	push   esi
c00197a0:	e8 e6 fe ff ff       	call   c001968b <Vm::realToLinear(unsigned short, unsigned short)>
c00197a5:	5a                   	pop    edx
c00197a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197a8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197ac:	51                   	push   ecx
c00197ad:	50                   	push   eax
c00197ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b6:	53                   	push   ebx
c00197b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197ba:	83 c4 14             	add    esp,0x14
c00197bd:	53                   	push   ebx
c00197be:	e8 41 60 ff ff       	call   c000f804 <File::close()>
c00197c3:	e8 7d f2 ff ff       	call   c0018a45 <unlockScheduler()>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	b2 01                	mov    dl,0x1
c00197cd:	83 c4 2c             	add    esp,0x2c
c00197d0:	88 d0                	mov    al,dl
c00197d2:	5b                   	pop    ebx
c00197d3:	5e                   	pop    esi
c00197d4:	5f                   	pop    edi
c00197d5:	5d                   	pop    ebp
c00197d6:	c3                   	ret    

c00197d7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197d7:	57                   	push   edi
c00197d8:	56                   	push   esi
c00197d9:	53                   	push   ebx
c00197da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197e2:	83 e8 06             	sub    eax,0x6
c00197e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197e9:	0f b7 c0             	movzx  eax,ax
c00197ec:	50                   	push   eax
c00197ed:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197f2:	50                   	push   eax
c00197f3:	e8 93 fe ff ff       	call   c001968b <Vm::realToLinear(unsigned short, unsigned short)>
c00197f8:	5a                   	pop    edx
c00197f9:	5e                   	pop    esi
c00197fa:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00197fd:	8d 56 fa             	lea    edx,[esi-0x6]
c0019800:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019806:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019809:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001980c:	83 c2 02             	add    edx,0x2
c001980f:	66 89 10             	mov    WORD PTR [eax],dx
c0019812:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019815:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019819:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001981c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019820:	89 d6                	mov    esi,edx
c0019822:	66 81 e6 ff fd       	and    si,0xfdff
c0019827:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001982d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019831:	74 07                	je     c001983a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019833:	89 d6                	mov    esi,edx
c0019835:	66 81 ce 00 02       	or     si,0x200
c001983a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001983e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019843:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019847:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001984f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019852:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001985a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001985d:	5b                   	pop    ebx
c001985e:	5e                   	pop    esi
c001985f:	5f                   	pop    edi
c0019860:	c3                   	ret    

c0019861 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019861:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019866:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001986b:	c1 e0 04             	shl    eax,0x4
c001986e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019871:	c3                   	ret    

c0019872 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019872:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019877:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001987c:	c1 e0 04             	shl    eax,0x4
c001987f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019883:	c3                   	ret    

c0019884 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019884:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019889:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001988e:	c1 e0 04             	shl    eax,0x4
c0019891:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019894:	c3                   	ret    

c0019895 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019895:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001989a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001989f:	c1 e0 04             	shl    eax,0x4
c00198a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198a6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198a9:	c3                   	ret    

c00198aa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b4:	c1 e0 04             	shl    eax,0x4
c00198b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198bb:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198bf:	c3                   	ret    

c00198c0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198ca:	c1 e0 04             	shl    eax,0x4
c00198cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198d1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198d4:	c3                   	ret    

c00198d5 <Vm::faultHandler(regs*)>:
c00198d5:	55                   	push   ebp
c00198d6:	57                   	push   edi
c00198d7:	56                   	push   esi
c00198d8:	53                   	push   ebx
c00198d9:	83 ec 1c             	sub    esp,0x1c
c00198dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198e0:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198e7:	52                   	push   edx
c00198e8:	0f b7 f0             	movzx  esi,ax
c00198eb:	0f b7 c0             	movzx  eax,ax
c00198ee:	50                   	push   eax
c00198ef:	e8 97 fd ff ff       	call   c001968b <Vm::realToLinear(unsigned short, unsigned short)>
c00198f4:	5a                   	pop    edx
c00198f5:	89 c7                	mov    edi,eax
c00198f7:	59                   	pop    ecx
c00198f8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00198fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198ff:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019902:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019907:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001990b:	0f b7 c5             	movzx  eax,bp
c001990e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019912:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019916:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001991a:	e8 6c fd ff ff       	call   c001968b <Vm::realToLinear(unsigned short, unsigned short)>
c001991f:	5a                   	pop    edx
c0019920:	59                   	pop    ecx
c0019921:	b1 06                	mov    cl,0x6
c0019923:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019928:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001992d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019930:	80 fa 9d             	cmp    dl,0x9d
c0019933:	0f 84 1d 02 00 00    	je     c0019b56 <Vm::faultHandler(regs*)+0x281>
c0019939:	0f 87 8e 00 00 00    	ja     c00199cd <Vm::faultHandler(regs*)+0xf8>
c001993f:	80 fa 66             	cmp    dl,0x66
c0019942:	0f 84 89 01 00 00    	je     c0019ad1 <Vm::faultHandler(regs*)+0x1fc>
c0019948:	77 44                	ja     c001998e <Vm::faultHandler(regs*)+0xb9>
c001994a:	80 fa 36             	cmp    dl,0x36
c001994d:	0f 84 74 01 00 00    	je     c0019ac7 <Vm::faultHandler(regs*)+0x1f2>
c0019953:	77 1a                	ja     c001996f <Vm::faultHandler(regs*)+0x9a>
c0019955:	80 fa 26             	cmp    dl,0x26
c0019958:	0f 84 4b 01 00 00    	je     c0019aa9 <Vm::faultHandler(regs*)+0x1d4>
c001995e:	80 fa 2e             	cmp    dl,0x2e
c0019961:	0f 85 4a 05 00 00    	jne    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c0019967:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001996a:	31 c9                	xor    ecx,ecx
c001996c:	47                   	inc    edi
c001996d:	eb be                	jmp    c001992d <Vm::faultHandler(regs*)+0x58>
c001996f:	80 fa 64             	cmp    dl,0x64
c0019972:	0f 84 3b 01 00 00    	je     c0019ab3 <Vm::faultHandler(regs*)+0x1de>
c0019978:	0f 87 3f 01 00 00    	ja     c0019abd <Vm::faultHandler(regs*)+0x1e8>
c001997e:	80 fa 3e             	cmp    dl,0x3e
c0019981:	0f 85 2a 05 00 00    	jne    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c0019987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001998a:	b1 01                	mov    cl,0x1
c001998c:	eb de                	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c001998e:	80 fa 6d             	cmp    dl,0x6d
c0019991:	0f 84 bf 02 00 00    	je     c0019c56 <Vm::faultHandler(regs*)+0x381>
c0019997:	77 17                	ja     c00199b0 <Vm::faultHandler(regs*)+0xdb>
c0019999:	80 fa 67             	cmp    dl,0x67
c001999c:	0f 84 3c 01 00 00    	je     c0019ade <Vm::faultHandler(regs*)+0x209>
c00199a2:	80 fa 6c             	cmp    dl,0x6c
c00199a5:	0f 84 5d 02 00 00    	je     c0019c08 <Vm::faultHandler(regs*)+0x333>
c00199ab:	e9 01 05 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c00199b0:	80 fa 6f             	cmp    dl,0x6f
c00199b3:	0f 84 8b 03 00 00    	je     c0019d44 <Vm::faultHandler(regs*)+0x46f>
c00199b9:	0f 82 0f 03 00 00    	jb     c0019cce <Vm::faultHandler(regs*)+0x3f9>
c00199bf:	80 fa 9c             	cmp    dl,0x9c
c00199c2:	0f 84 23 01 00 00    	je     c0019aeb <Vm::faultHandler(regs*)+0x216>
c00199c8:	e9 e4 04 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c00199cd:	80 fa ec             	cmp    dl,0xec
c00199d0:	0f 84 7f 04 00 00    	je     c0019e55 <Vm::faultHandler(regs*)+0x580>
c00199d6:	77 7b                	ja     c0019a53 <Vm::faultHandler(regs*)+0x17e>
c00199d8:	80 fa e4             	cmp    dl,0xe4
c00199db:	0f 84 fe 03 00 00    	je     c0019ddf <Vm::faultHandler(regs*)+0x50a>
c00199e1:	77 53                	ja     c0019a36 <Vm::faultHandler(regs*)+0x161>
c00199e3:	80 fa cd             	cmp    dl,0xcd
c00199e6:	0f 84 cd 01 00 00    	je     c0019bb9 <Vm::faultHandler(regs*)+0x2e4>
c00199ec:	80 fa cf             	cmp    dl,0xcf
c00199ef:	0f 85 bc 04 00 00    	jne    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c00199f5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00199f8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00199fb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00199ff:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a02:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a06:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a0c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a0f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a13:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a19:	66 c1 e8 09          	shr    ax,0x9
c0019a1d:	83 e0 01             	and    eax,0x1
c0019a20:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a23:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a26:	83 c0 06             	add    eax,0x6
c0019a29:	25 ff ff 00 00       	and    eax,0xffff
c0019a2e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a31:	e9 77 04 00 00       	jmp    c0019ead <Vm::faultHandler(regs*)+0x5d8>
c0019a36:	80 fa e6             	cmp    dl,0xe6
c0019a39:	0f 84 ea 03 00 00    	je     c0019e29 <Vm::faultHandler(regs*)+0x554>
c0019a3f:	0f 82 b6 03 00 00    	jb     c0019dfb <Vm::faultHandler(regs*)+0x526>
c0019a45:	80 fa e7             	cmp    dl,0xe7
c0019a48:	0f 84 f2 03 00 00    	je     c0019e40 <Vm::faultHandler(regs*)+0x56b>
c0019a4e:	e9 5e 04 00 00       	jmp    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c0019a53:	80 fa ef             	cmp    dl,0xef
c0019a56:	0f 84 3c 04 00 00    	je     c0019e98 <Vm::faultHandler(regs*)+0x5c3>
c0019a5c:	77 28                	ja     c0019a86 <Vm::faultHandler(regs*)+0x1b1>
c0019a5e:	80 fa ed             	cmp    dl,0xed
c0019a61:	0f 84 0a 04 00 00    	je     c0019e71 <Vm::faultHandler(regs*)+0x59c>
c0019a67:	80 fa ee             	cmp    dl,0xee
c0019a6a:	0f 85 41 04 00 00    	jne    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c0019a70:	50                   	push   eax
c0019a71:	50                   	push   eax
c0019a72:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a76:	50                   	push   eax
c0019a77:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a7b:	50                   	push   eax
c0019a7c:	e8 00 fc ff ff       	call   c0019681 <Vm::outbv(unsigned short, unsigned char)>
c0019a81:	e9 0a 04 00 00       	jmp    c0019e90 <Vm::faultHandler(regs*)+0x5bb>
c0019a86:	80 fa fa             	cmp    dl,0xfa
c0019a89:	0f 84 5d 01 00 00    	je     c0019bec <Vm::faultHandler(regs*)+0x317>
c0019a8f:	80 fa fb             	cmp    dl,0xfb
c0019a92:	0f 84 62 01 00 00    	je     c0019bfa <Vm::faultHandler(regs*)+0x325>
c0019a98:	80 fa f3             	cmp    dl,0xf3
c0019a9b:	0f 85 10 04 00 00    	jne    c0019eb1 <Vm::faultHandler(regs*)+0x5dc>
c0019aa1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aa4:	e9 c3 fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019aa9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aac:	b1 02                	mov    cl,0x2
c0019aae:	e9 b9 fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019ab3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab6:	b1 03                	mov    cl,0x3
c0019ab8:	e9 af fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019abd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac0:	b1 04                	mov    cl,0x4
c0019ac2:	e9 a5 fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019ac7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aca:	b1 05                	mov    cl,0x5
c0019acc:	e9 9b fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019ad1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019ad9:	e9 8e fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019ade:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019ae6:	e9 81 fe ff ff       	jmp    c001996c <Vm::faultHandler(regs*)+0x97>
c0019aeb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019aee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019af2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019af7:	74 30                	je     c0019b29 <Vm::faultHandler(regs*)+0x254>
c0019af9:	83 e9 04             	sub    ecx,0x4
c0019afc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b02:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b08:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b0b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b0e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b14:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b18:	0f 84 8c 03 00 00    	je     c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019b1e:	80 ce 02             	or     dh,0x2
c0019b21:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b24:	e9 81 03 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019b29:	83 e9 02             	sub    ecx,0x2
c0019b2c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b32:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b35:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b39:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b3f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b43:	74 05                	je     c0019b4a <Vm::faultHandler(regs*)+0x275>
c0019b45:	80 ce 02             	or     dh,0x2
c0019b48:	eb 03                	jmp    c0019b4d <Vm::faultHandler(regs*)+0x278>
c0019b4a:	80 e6 fd             	and    dh,0xfd
c0019b4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b51:	e9 54 03 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019b56:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b5b:	74 2a                	je     c0019b87 <Vm::faultHandler(regs*)+0x2b2>
c0019b5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b5f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b65:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b6b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b70:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b76:	c1 e8 09             	shr    eax,0x9
c0019b79:	83 e0 01             	and    eax,0x1
c0019b7c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b7f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b82:	83 c0 04             	add    eax,0x4
c0019b85:	eb 25                	jmp    c0019bac <Vm::faultHandler(regs*)+0x2d7>
c0019b87:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b8a:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b90:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b93:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019b96:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b9c:	66 c1 e8 09          	shr    ax,0x9
c0019ba0:	83 e0 01             	and    eax,0x1
c0019ba3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019ba6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ba9:	83 c0 02             	add    eax,0x2
c0019bac:	25 ff ff 00 00       	and    eax,0xffff
c0019bb1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bb4:	e9 f1 02 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019bb9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bbd:	3c ff                	cmp    al,0xff
c0019bbf:	75 10                	jne    c0019bd1 <Vm::faultHandler(regs*)+0x2fc>
c0019bc1:	83 ec 0c             	sub    esp,0xc
c0019bc4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bc7:	e8 86 f9 ff ff       	call   c0019552 <Thr::terminateFromIRQ(int)>
c0019bcc:	e9 c2 02 00 00       	jmp    c0019e93 <Vm::faultHandler(regs*)+0x5be>
c0019bd1:	83 ec 0c             	sub    esp,0xc
c0019bd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bdc:	57                   	push   edi
c0019bdd:	50                   	push   eax
c0019bde:	53                   	push   ebx
c0019bdf:	e8 f3 fb ff ff       	call   c00197d7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019be4:	83 c4 20             	add    esp,0x20
c0019be7:	e9 c1 02 00 00       	jmp    c0019ead <Vm::faultHandler(regs*)+0x5d8>
c0019bec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bf1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019bf5:	e9 b0 02 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019bfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bff:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c03:	e9 a2 02 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019c08:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c0d:	74 0d                	je     c0019c1c <Vm::faultHandler(regs*)+0x347>
c0019c0f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c16:	0f 87 e9 02 00 00    	ja     c0019f05 <Vm::faultHandler(regs*)+0x630>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c22:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c26:	50                   	push   eax
c0019c27:	e8 4f fa ff ff       	call   c001967b <Vm::inbv(unsigned short)>
c0019c2c:	83 c4 0c             	add    esp,0xc
c0019c2f:	0f b6 c0             	movzx  eax,al
c0019c32:	50                   	push   eax
c0019c33:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c37:	0f b7 c9             	movzx  ecx,cx
c0019c3a:	50                   	push   eax
c0019c3b:	51                   	push   ecx
c0019c3c:	e8 54 fc ff ff       	call   c0019895 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c41:	83 c4 10             	add    esp,0x10
c0019c44:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c47:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c4b:	74 03                	je     c0019c50 <Vm::faultHandler(regs*)+0x37b>
c0019c4d:	48                   	dec    eax
c0019c4e:	eb 01                	jmp    c0019c51 <Vm::faultHandler(regs*)+0x37c>
c0019c50:	40                   	inc    eax
c0019c51:	0f b7 c0             	movzx  eax,ax
c0019c54:	eb 70                	jmp    c0019cc6 <Vm::faultHandler(regs*)+0x3f1>
c0019c56:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c5c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c61:	74 0c                	je     c0019c6f <Vm::faultHandler(regs*)+0x39a>
c0019c63:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c69:	0f 87 96 02 00 00    	ja     c0019f05 <Vm::faultHandler(regs*)+0x630>
c0019c6f:	0f b7 c9             	movzx  ecx,cx
c0019c72:	0f b7 f6             	movzx  esi,si
c0019c75:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c78:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c7d:	74 20                	je     c0019c9f <Vm::faultHandler(regs*)+0x3ca>
c0019c7f:	ed                   	in     eax,dx
c0019c80:	55                   	push   ebp
c0019c81:	50                   	push   eax
c0019c82:	51                   	push   ecx
c0019c83:	56                   	push   esi
c0019c84:	e8 37 fc ff ff       	call   c00198c0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c89:	83 c4 10             	add    esp,0x10
c0019c8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c8f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c93:	74 05                	je     c0019c9a <Vm::faultHandler(regs*)+0x3c5>
c0019c95:	83 e8 04             	sub    eax,0x4
c0019c98:	eb 27                	jmp    c0019cc1 <Vm::faultHandler(regs*)+0x3ec>
c0019c9a:	83 c0 04             	add    eax,0x4
c0019c9d:	eb 22                	jmp    c0019cc1 <Vm::faultHandler(regs*)+0x3ec>
c0019c9f:	66 ed                	in     ax,dx
c0019ca1:	0f b7 c0             	movzx  eax,ax
c0019ca4:	57                   	push   edi
c0019ca5:	50                   	push   eax
c0019ca6:	51                   	push   ecx
c0019ca7:	56                   	push   esi
c0019ca8:	e8 fd fb ff ff       	call   c00198aa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cad:	83 c4 10             	add    esp,0x10
c0019cb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cb3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cb7:	74 05                	je     c0019cbe <Vm::faultHandler(regs*)+0x3e9>
c0019cb9:	83 e8 02             	sub    eax,0x2
c0019cbc:	eb 03                	jmp    c0019cc1 <Vm::faultHandler(regs*)+0x3ec>
c0019cbe:	83 c0 02             	add    eax,0x2
c0019cc1:	25 ff ff 00 00       	and    eax,0xffff
c0019cc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019cc9:	e9 dc 01 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019cce:	49                   	dec    ecx
c0019ccf:	80 f9 05             	cmp    cl,0x5
c0019cd2:	77 24                	ja     c0019cf8 <Vm::faultHandler(regs*)+0x423>
c0019cd4:	0f b6 c9             	movzx  ecx,cl
c0019cd7:	ff 24 8d 38 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdc8]
c0019cde:	0f b7 f5             	movzx  esi,bp
c0019ce1:	eb 15                	jmp    c0019cf8 <Vm::faultHandler(regs*)+0x423>
c0019ce3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ce7:	eb 0f                	jmp    c0019cf8 <Vm::faultHandler(regs*)+0x423>
c0019ce9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019ced:	eb 09                	jmp    c0019cf8 <Vm::faultHandler(regs*)+0x423>
c0019cef:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019cf3:	eb 03                	jmp    c0019cf8 <Vm::faultHandler(regs*)+0x423>
c0019cf5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019cf8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019cfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d00:	74 0b                	je     c0019d0d <Vm::faultHandler(regs*)+0x438>
c0019d02:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d07:	0f 87 f8 01 00 00    	ja     c0019f05 <Vm::faultHandler(regs*)+0x630>
c0019d0d:	52                   	push   edx
c0019d0e:	52                   	push   edx
c0019d0f:	0f b7 c0             	movzx  eax,ax
c0019d12:	50                   	push   eax
c0019d13:	56                   	push   esi
c0019d14:	e8 48 fb ff ff       	call   c0019861 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d19:	59                   	pop    ecx
c0019d1a:	5e                   	pop    esi
c0019d1b:	0f b6 c0             	movzx  eax,al
c0019d1e:	50                   	push   eax
c0019d1f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d23:	50                   	push   eax
c0019d24:	e8 58 f9 ff ff       	call   c0019681 <Vm::outbv(unsigned short, unsigned char)>
c0019d29:	83 c4 10             	add    esp,0x10
c0019d2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d2f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d33:	74 03                	je     c0019d38 <Vm::faultHandler(regs*)+0x463>
c0019d35:	48                   	dec    eax
c0019d36:	eb 01                	jmp    c0019d39 <Vm::faultHandler(regs*)+0x464>
c0019d38:	40                   	inc    eax
c0019d39:	0f b7 c0             	movzx  eax,ax
c0019d3c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d3f:	e9 66 01 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019d44:	49                   	dec    ecx
c0019d45:	80 f9 05             	cmp    cl,0x5
c0019d48:	77 1f                	ja     c0019d69 <Vm::faultHandler(regs*)+0x494>
c0019d4a:	0f b6 c9             	movzx  ecx,cl
c0019d4d:	ff 24 8d 50 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcdb0]
c0019d54:	89 ee                	mov    esi,ebp
c0019d56:	eb 11                	jmp    c0019d69 <Vm::faultHandler(regs*)+0x494>
c0019d58:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d5b:	eb 0c                	jmp    c0019d69 <Vm::faultHandler(regs*)+0x494>
c0019d5d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d60:	eb 07                	jmp    c0019d69 <Vm::faultHandler(regs*)+0x494>
c0019d62:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d65:	eb 02                	jmp    c0019d69 <Vm::faultHandler(regs*)+0x494>
c0019d67:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d69:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d6c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d71:	74 0c                	je     c0019d7f <Vm::faultHandler(regs*)+0x4aa>
c0019d73:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d79:	0f 87 86 01 00 00    	ja     c0019f05 <Vm::faultHandler(regs*)+0x630>
c0019d7f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d82:	0f b7 d6             	movzx  edx,si
c0019d85:	81 e7 00 04 00 00    	and    edi,0x400
c0019d8b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d8e:	0f b7 c1             	movzx  eax,cx
c0019d91:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d96:	74 1d                	je     c0019db5 <Vm::faultHandler(regs*)+0x4e0>
c0019d98:	55                   	push   ebp
c0019d99:	55                   	push   ebp
c0019d9a:	50                   	push   eax
c0019d9b:	52                   	push   edx
c0019d9c:	e8 e3 fa ff ff       	call   c0019884 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	89 f2                	mov    edx,esi
c0019da6:	ef                   	out    dx,eax
c0019da7:	85 ff                	test   edi,edi
c0019da9:	74 05                	je     c0019db0 <Vm::faultHandler(regs*)+0x4db>
c0019dab:	83 e9 04             	sub    ecx,0x4
c0019dae:	eb 21                	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x4fc>
c0019db0:	83 c1 04             	add    ecx,0x4
c0019db3:	eb 1c                	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x4fc>
c0019db5:	55                   	push   ebp
c0019db6:	55                   	push   ebp
c0019db7:	50                   	push   eax
c0019db8:	52                   	push   edx
c0019db9:	e8 b4 fa ff ff       	call   c0019872 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	89 f2                	mov    edx,esi
c0019dc3:	66 ef                	out    dx,ax
c0019dc5:	85 ff                	test   edi,edi
c0019dc7:	74 05                	je     c0019dce <Vm::faultHandler(regs*)+0x4f9>
c0019dc9:	83 e9 02             	sub    ecx,0x2
c0019dcc:	eb 03                	jmp    c0019dd1 <Vm::faultHandler(regs*)+0x4fc>
c0019dce:	83 c1 02             	add    ecx,0x2
c0019dd1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019dd7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019dda:	e9 cb 00 00 00       	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019ddf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ded:	50                   	push   eax
c0019dee:	e8 88 f8 ff ff       	call   c001967b <Vm::inbv(unsigned short)>
c0019df3:	0f b6 c0             	movzx  eax,al
c0019df6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019df9:	eb 3f                	jmp    c0019e3a <Vm::faultHandler(regs*)+0x565>
c0019dfb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e00:	74 07                	je     c0019e09 <Vm::faultHandler(regs*)+0x534>
c0019e02:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e06:	ed                   	in     eax,dx
c0019e07:	eb 14                	jmp    c0019e1d <Vm::faultHandler(regs*)+0x548>
c0019e09:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e0c:	66 31 c9             	xor    cx,cx
c0019e0f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e12:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e16:	66 ed                	in     ax,dx
c0019e18:	0f b7 c0             	movzx  eax,ax
c0019e1b:	09 c8                	or     eax,ecx
c0019e1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e20:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e24:	e9 84 00 00 00       	jmp    c0019ead <Vm::faultHandler(regs*)+0x5d8>
c0019e29:	52                   	push   edx
c0019e2a:	52                   	push   edx
c0019e2b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e2f:	50                   	push   eax
c0019e30:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e34:	50                   	push   eax
c0019e35:	e8 47 f8 ff ff       	call   c0019681 <Vm::outbv(unsigned short, unsigned char)>
c0019e3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e3e:	eb 53                	jmp    c0019e93 <Vm::faultHandler(regs*)+0x5be>
c0019e40:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e43:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e4c:	74 03                	je     c0019e51 <Vm::faultHandler(regs*)+0x57c>
c0019e4e:	ef                   	out    dx,eax
c0019e4f:	eb cf                	jmp    c0019e20 <Vm::faultHandler(regs*)+0x54b>
c0019e51:	66 ef                	out    dx,ax
c0019e53:	eb cb                	jmp    c0019e20 <Vm::faultHandler(regs*)+0x54b>
c0019e55:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e63:	50                   	push   eax
c0019e64:	e8 12 f8 ff ff       	call   c001967b <Vm::inbv(unsigned short)>
c0019e69:	0f b6 c0             	movzx  eax,al
c0019e6c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e6f:	eb 1f                	jmp    c0019e90 <Vm::faultHandler(regs*)+0x5bb>
c0019e71:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e74:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e79:	74 03                	je     c0019e7e <Vm::faultHandler(regs*)+0x5a9>
c0019e7b:	ed                   	in     eax,dx
c0019e7c:	eb 0d                	jmp    c0019e8b <Vm::faultHandler(regs*)+0x5b6>
c0019e7e:	66 ed                	in     ax,dx
c0019e80:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e83:	66 31 d2             	xor    dx,dx
c0019e86:	0f b7 c0             	movzx  eax,ax
c0019e89:	09 d0                	or     eax,edx
c0019e8b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e8e:	eb 1a                	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019e90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e93:	83 c4 10             	add    esp,0x10
c0019e96:	eb 15                	jmp    c0019ead <Vm::faultHandler(regs*)+0x5d8>
c0019e98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ea3:	74 03                	je     c0019ea8 <Vm::faultHandler(regs*)+0x5d3>
c0019ea5:	ef                   	out    dx,eax
c0019ea6:	eb 02                	jmp    c0019eaa <Vm::faultHandler(regs*)+0x5d5>
c0019ea8:	66 ef                	out    dx,ax
c0019eaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ead:	b0 01                	mov    al,0x1
c0019eaf:	eb 56                	jmp    c0019f07 <Vm::faultHandler(regs*)+0x632>
c0019eb1:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019eb5:	50                   	push   eax
c0019eb6:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019eba:	50                   	push   eax
c0019ebb:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ebf:	50                   	push   eax
c0019ec0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ec4:	50                   	push   eax
c0019ec5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ec9:	50                   	push   eax
c0019eca:	52                   	push   edx
c0019ecb:	52                   	push   edx
c0019ecc:	68 09 32 02 c0       	push   0xc0023209
c0019ed1:	e8 35 53 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c0019ed6:	83 c4 20             	add    esp,0x20
c0019ed9:	83 ec 0c             	sub    esp,0xc
c0019edc:	6a 60                	push   0x60
c0019ede:	e8 98 f7 ff ff       	call   c001967b <Vm::inbv(unsigned short)>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	3c 1c                	cmp    al,0x1c
c0019ee8:	74 04                	je     c0019eee <Vm::faultHandler(regs*)+0x619>
c0019eea:	3c 5a                	cmp    al,0x5a
c0019eec:	75 eb                	jne    c0019ed9 <Vm::faultHandler(regs*)+0x604>
c0019eee:	3c 1c                	cmp    al,0x1c
c0019ef0:	74 04                	je     c0019ef6 <Vm::faultHandler(regs*)+0x621>
c0019ef2:	3c 5a                	cmp    al,0x5a
c0019ef4:	75 0f                	jne    c0019f05 <Vm::faultHandler(regs*)+0x630>
c0019ef6:	83 ec 0c             	sub    esp,0xc
c0019ef9:	6a 60                	push   0x60
c0019efb:	e8 7b f7 ff ff       	call   c001967b <Vm::inbv(unsigned short)>
c0019f00:	83 c4 10             	add    esp,0x10
c0019f03:	eb e9                	jmp    c0019eee <Vm::faultHandler(regs*)+0x619>
c0019f05:	31 c0                	xor    eax,eax
c0019f07:	83 c4 1c             	add    esp,0x1c
c0019f0a:	5b                   	pop    ebx
c0019f0b:	5e                   	pop    esi
c0019f0c:	5f                   	pop    edi
c0019f0d:	5d                   	pop    ebp
c0019f0e:	c3                   	ret    
c0019f0f:	90                   	nop

c0019f10 <FAT::getName()>:
c0019f10:	b8 68 32 02 c0       	mov    eax,0xc0023268
c0019f15:	c3                   	ret    

c0019f16 <FAT::tell(void*, unsigned long long*)>:
c0019f16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f1b:	75 06                	jne    c0019f23 <FAT::tell(void*, unsigned long long*)+0xd>
c0019f1d:	b8 04 00 00 00       	mov    eax,0x4
c0019f22:	c3                   	ret    
c0019f23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f28:	75 06                	jne    c0019f30 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f2a:	b8 04 00 00 00       	mov    eax,0x4
c0019f2f:	c3                   	ret    
c0019f30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f34:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f37:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f3e:	89 01                	mov    DWORD PTR [ecx],eax
c0019f40:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f43:	b8 00 00 00 00       	mov    eax,0x0
c0019f48:	c3                   	ret    
c0019f49:	90                   	nop

c0019f4a <FAT::stat(void*, unsigned long long*)>:
c0019f4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f4f:	75 06                	jne    c0019f57 <FAT::stat(void*, unsigned long long*)+0xd>
c0019f51:	b8 04 00 00 00       	mov    eax,0x4
c0019f56:	c3                   	ret    
c0019f57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f5c:	75 06                	jne    c0019f64 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f5e:	b8 04 00 00 00       	mov    eax,0x4
c0019f63:	c3                   	ret    
c0019f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f72:	89 01                	mov    DWORD PTR [ecx],eax
c0019f74:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f77:	b8 00 00 00 00       	mov    eax,0x0
c0019f7c:	c3                   	ret    
c0019f7d:	90                   	nop

c0019f7e <FAT::~FAT()>:
c0019f7e:	83 ec 0c             	sub    esp,0xc
c0019f81:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c0019f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8a:	89 10                	mov    DWORD PTR [eax],edx
c0019f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	50                   	push   eax
c0019f94:	e8 a3 55 ff ff       	call   c000f53c <Filesystem::~Filesystem()>
c0019f99:	83 c4 10             	add    esp,0x10
c0019f9c:	90                   	nop
c0019f9d:	83 c4 0c             	add    esp,0xc
c0019fa0:	c3                   	ret    
c0019fa1:	90                   	nop

c0019fa2 <FAT::~FAT()>:
c0019fa2:	83 ec 0c             	sub    esp,0xc
c0019fa5:	83 ec 0c             	sub    esp,0xc
c0019fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fac:	e8 cd ff ff ff       	call   c0019f7e <FAT::~FAT()>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	83 ec 08             	sub    esp,0x8
c0019fb7:	6a 08                	push   0x8
c0019fb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fbd:	e8 23 51 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	83 c4 0c             	add    esp,0xc
c0019fc8:	c3                   	ret    
c0019fc9:	90                   	nop

c0019fca <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fca:	83 ec 1c             	sub    esp,0x1c
c0019fcd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fd4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fdd:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c0019fe4:	83 f8 ff             	cmp    eax,0xffffffff
c0019fe7:	75 34                	jne    c001a01d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019fe9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019fed:	88 c2                	mov    dl,al
c0019fef:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c0019ff4:	01 d0                	add    eax,edx
c0019ff6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ffa:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a004:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a00b:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a010:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a014:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a01b:	eb 17                	jmp    c001a034 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a01d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a021:	88 c2                	mov    dl,al
c001a023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a027:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a02e:	01 d0                	add    eax,edx
c001a030:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a034:	83 ec 04             	sub    esp,0x4
c001a037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a03b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a03f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a043:	50                   	push   eax
c001a044:	e8 84 ca fe ff       	call   c0006acd <f_getlabel>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a050:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a055:	75 07                	jne    c001a05e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a057:	b8 00 00 00 00       	mov    eax,0x0
c001a05c:	eb 05                	jmp    c001a063 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a05e:	b8 01 00 00 00       	mov    eax,0x1
c001a063:	83 c4 1c             	add    esp,0x1c
c001a066:	c3                   	ret    
c001a067:	90                   	nop

c001a068 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a068:	57                   	push   edi
c001a069:	83 ec 58             	sub    esp,0x58
c001a06c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a074:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a078:	b8 00 00 00 00       	mov    eax,0x0
c001a07d:	b9 0f 00 00 00       	mov    ecx,0xf
c001a082:	fc                   	cld    
c001a083:	89 d7                	mov    edi,edx
c001a085:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a087:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a08b:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a092:	83 f8 ff             	cmp    eax,0xffffffff
c001a095:	75 34                	jne    c001a0cb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a097:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a09b:	88 c2                	mov    dl,al
c001a09d:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a0a2:	01 d0                	add    eax,edx
c001a0a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0a8:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a0ae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0b2:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a0b9:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a0be:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0c2:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a0c9:	eb 17                	jmp    c001a0e2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0cf:	88 c2                	mov    dl,al
c001a0d1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0d5:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a0dc:	01 d0                	add    eax,edx
c001a0de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0e2:	83 ec 08             	sub    esp,0x8
c001a0e5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0ed:	50                   	push   eax
c001a0ee:	e8 1d 67 fe ff       	call   c0000810 <strcat>
c001a0f3:	83 c4 10             	add    esp,0x10
c001a0f6:	83 ec 0c             	sub    esp,0xc
c001a0f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0fd:	50                   	push   eax
c001a0fe:	e8 be cb fe ff       	call   c0006cc1 <f_setlabel>
c001a103:	83 c4 10             	add    esp,0x10
c001a106:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a10a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a10f:	75 07                	jne    c001a118 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a111:	b8 00 00 00 00       	mov    eax,0x0
c001a116:	eb 05                	jmp    c001a11d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a118:	b8 01 00 00 00       	mov    eax,0x1
c001a11d:	83 c4 58             	add    esp,0x58
c001a120:	5f                   	pop    edi
c001a121:	c3                   	ret    

c001a122 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a122:	83 ec 2c             	sub    esp,0x2c
c001a125:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a12d:	83 ec 08             	sub    esp,0x8
c001a130:	68 8c 32 02 c0       	push   0xc002328c
c001a135:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a139:	e8 6c 66 fe ff       	call   c00007aa <strcmp>
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	85 c0                	test   eax,eax
c001a143:	0f 94 c0             	sete   al
c001a146:	84 c0                	test   al,al
c001a148:	74 0d                	je     c001a157 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a14a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a152:	e9 a6 00 00 00       	jmp    c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a157:	83 ec 08             	sub    esp,0x8
c001a15a:	68 7e 32 02 c0       	push   0xc002327e
c001a15f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a163:	e8 42 66 fe ff       	call   c00007aa <strcmp>
c001a168:	83 c4 10             	add    esp,0x10
c001a16b:	85 c0                	test   eax,eax
c001a16d:	0f 94 c0             	sete   al
c001a170:	84 c0                	test   al,al
c001a172:	74 0a                	je     c001a17e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a174:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a17c:	eb 7f                	jmp    c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a17e:	83 ec 08             	sub    esp,0x8
c001a181:	68 84 32 02 c0       	push   0xc0023284
c001a186:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a18a:	e8 1b 66 fe ff       	call   c00007aa <strcmp>
c001a18f:	83 c4 10             	add    esp,0x10
c001a192:	85 c0                	test   eax,eax
c001a194:	0f 94 c0             	sete   al
c001a197:	84 c0                	test   al,al
c001a199:	74 0a                	je     c001a1a5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a19b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1a3:	eb 58                	jmp    c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1a5:	83 ec 08             	sub    esp,0x8
c001a1a8:	68 4c 05 02 c0       	push   0xc002054c
c001a1ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1b1:	e8 f4 65 fe ff       	call   c00007aa <strcmp>
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	85 c0                	test   eax,eax
c001a1bb:	0f 94 c0             	sete   al
c001a1be:	84 c0                	test   al,al
c001a1c0:	74 0a                	je     c001a1cc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1c2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1ca:	eb 31                	jmp    c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1cc:	83 ec 08             	sub    esp,0x8
c001a1cf:	68 8a 32 02 c0       	push   0xc002328a
c001a1d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1d8:	e8 cd 65 fe ff       	call   c00007aa <strcmp>
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	85 c0                	test   eax,eax
c001a1e2:	0f 94 c0             	sete   al
c001a1e5:	84 c0                	test   al,al
c001a1e7:	74 0a                	je     c001a1f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1e9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1f1:	eb 0a                	jmp    c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1f3:	b8 08 00 00 00       	mov    eax,0x8
c001a1f8:	e9 04 01 00 00       	jmp    c001a301 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1fd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a204:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a209:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a20d:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a214:	83 f8 ff             	cmp    eax,0xffffffff
c001a217:	75 34                	jne    c001a24d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a219:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a21d:	88 c2                	mov    dl,al
c001a21f:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a224:	01 d0                	add    eax,edx
c001a226:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a22a:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a230:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a234:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a23b:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a240:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a244:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a24b:	eb 17                	jmp    c001a264 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a24d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a251:	88 c2                	mov    dl,al
c001a253:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a257:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a25e:	01 d0                	add    eax,edx
c001a260:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a268:	88 04 24             	mov    BYTE PTR [esp],al
c001a26b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a26f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a273:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a27b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a280:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a288:	83 ec 0c             	sub    esp,0xc
c001a28b:	68 00 20 00 00       	push   0x2000
c001a290:	e8 44 1d ff ff       	call   c000bfd9 <malloc>
c001a295:	83 c4 10             	add    esp,0x10
c001a298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a29c:	68 00 20 00 00       	push   0x2000
c001a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2a9:	50                   	push   eax
c001a2aa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2ae:	50                   	push   eax
c001a2af:	e8 58 ce fe ff       	call   c000710c <f_mkfs>
c001a2b4:	83 c4 10             	add    esp,0x10
c001a2b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2c0:	75 07                	jne    c001a2c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2c2:	b8 00 00 00 00       	mov    eax,0x0
c001a2c7:	eb 38                	jmp    c001a301 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2c9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2ce:	75 17                	jne    c001a2e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2d0:	83 ec 0c             	sub    esp,0xc
c001a2d3:	68 bc 32 02 c0       	push   0xc00232bc
c001a2d8:	e8 2e 4f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001a2dd:	83 c4 10             	add    esp,0x10
c001a2e0:	b8 09 00 00 00       	mov    eax,0x9
c001a2e5:	eb 1a                	jmp    c001a301 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2eb:	83 ec 08             	sub    esp,0x8
c001a2ee:	50                   	push   eax
c001a2ef:	68 90 32 02 c0       	push   0xc0023290
c001a2f4:	e8 12 4f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001a2f9:	83 c4 10             	add    esp,0x10
c001a2fc:	b8 01 00 00 00       	mov    eax,0x1
c001a301:	83 c4 2c             	add    esp,0x2c
c001a304:	c3                   	ret    
c001a305:	90                   	nop

c001a306 <FAT::tryMount(LogicalDisk*, int)>:
c001a306:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a30c:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a311:	83 f8 14             	cmp    eax,0x14
c001a314:	75 17                	jne    c001a32d <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a316:	83 ec 0c             	sub    esp,0xc
c001a319:	68 a2 32 02 c0       	push   0xc00232a2
c001a31e:	e8 17 b7 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	b0 00                	mov    al,0x0
c001a328:	e9 d7 01 00 00       	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a32d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a334:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a33a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a340:	3d 00 02 00 00       	cmp    eax,0x200
c001a345:	74 07                	je     c001a34e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a347:	b0 00                	mov    al,0x0
c001a349:	e9 b6 01 00 00       	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a34e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a356:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a35d:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a364:	83 f8 ff             	cmp    eax,0xffffffff
c001a367:	74 07                	je     c001a370 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a369:	b0 01                	mov    al,0x1
c001a36b:	e9 94 01 00 00       	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a370:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a37a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a382:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a389:	88 c2                	mov    dl,al
c001a38b:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a390:	01 d0                	add    eax,edx
c001a392:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a399:	8b 15 00 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c00
c001a39f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3a6:	89 14 85 20 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3e0],edx
c001a3ad:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a3b2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3b9:	89 14 85 a0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda360],edx
c001a3c0:	83 ec 0c             	sub    esp,0xc
c001a3c3:	68 54 02 00 00       	push   0x254
c001a3c8:	e8 0c 1c ff ff       	call   c000bfd9 <malloc>
c001a3cd:	83 c4 10             	add    esp,0x10
c001a3d0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3d7:	83 ec 04             	sub    esp,0x4
c001a3da:	6a 00                	push   0x0
c001a3dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3e3:	50                   	push   eax
c001a3e4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3eb:	e8 0b a9 fe ff       	call   c0004cfb <f_mount>
c001a3f0:	83 c4 10             	add    esp,0x10
c001a3f3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3fa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a402:	74 19                	je     c001a41d <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a404:	83 ec 0c             	sub    esp,0xc
c001a407:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a40e:	e8 e6 1b ff ff       	call   c000bff9 <rfree>
c001a413:	83 c4 10             	add    esp,0x10
c001a416:	b0 00                	mov    al,0x0
c001a418:	e9 e7 00 00 00       	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a41d:	83 ec 04             	sub    esp,0x4
c001a420:	68 00 01 00 00       	push   0x100
c001a425:	6a 00                	push   0x0
c001a427:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a42e:	50                   	push   eax
c001a42f:	e8 86 62 fe ff       	call   c00006ba <memset>
c001a434:	83 c4 10             	add    esp,0x10
c001a437:	83 ec 08             	sub    esp,0x8
c001a43a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a441:	50                   	push   eax
c001a442:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a449:	50                   	push   eax
c001a44a:	e8 c1 63 fe ff       	call   c0000810 <strcat>
c001a44f:	83 c4 10             	add    esp,0x10
c001a452:	83 ec 08             	sub    esp,0x8
c001a455:	68 b0 32 02 c0       	push   0xc00232b0
c001a45a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a461:	50                   	push   eax
c001a462:	e8 a9 63 fe ff       	call   c0000810 <strcat>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	83 ec 04             	sub    esp,0x4
c001a46d:	6a 01                	push   0x1
c001a46f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a476:	50                   	push   eax
c001a477:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a47b:	50                   	push   eax
c001a47c:	e8 dc a8 fe ff       	call   c0004d5d <f_open>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a48b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a492:	85 c0                	test   eax,eax
c001a494:	74 0a                	je     c001a4a0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a496:	78 2d                	js     c001a4c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a498:	83 e8 04             	sub    eax,0x4
c001a49b:	83 f8 01             	cmp    eax,0x1
c001a49e:	77 25                	ja     c001a4c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4a0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4a8:	83 ec 0c             	sub    esp,0xc
c001a4ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4af:	50                   	push   eax
c001a4b0:	e8 fa b3 fe ff       	call   c00058af <f_close>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	90                   	nop
c001a4b9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4c1:	74 3a                	je     c001a4fd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4c3:	eb 2d                	jmp    c001a4f2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4c5:	83 ec 0c             	sub    esp,0xc
c001a4c8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4cf:	e8 25 1b ff ff       	call   c000bff9 <rfree>
c001a4d4:	83 c4 10             	add    esp,0x10
c001a4d7:	83 ec 04             	sub    esp,0x4
c001a4da:	6a 00                	push   0x0
c001a4dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4e3:	50                   	push   eax
c001a4e4:	6a 00                	push   0x0
c001a4e6:	e8 10 a8 fe ff       	call   c0004cfb <f_mount>
c001a4eb:	83 c4 10             	add    esp,0x10
c001a4ee:	b0 00                	mov    al,0x0
c001a4f0:	eb 12                	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4f2:	a1 00 5c 02 c0       	mov    eax,ds:0xc0025c00
c001a4f7:	40                   	inc    eax
c001a4f8:	a3 00 5c 02 c0       	mov    ds:0xc0025c00,eax
c001a4fd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a504:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a50a:	c3                   	ret    
c001a50b:	90                   	nop

c001a50c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a50c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a512:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a51a:	74 0a                	je     c001a526 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a51c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a524:	75 0a                	jne    c001a530 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a526:	b8 04 00 00 00       	mov    eax,0x4
c001a52b:	e9 dd 00 00 00       	jmp    c001a60d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a530:	83 ec 08             	sub    esp,0x8
c001a533:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a53a:	50                   	push   eax
c001a53b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a542:	e8 20 b9 fe ff       	call   c0005e67 <f_readdir>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a551:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a561:	83 c0 1a             	add    eax,0x1a
c001a564:	50                   	push   eax
c001a565:	e8 6d 61 fe ff       	call   c00006d7 <strlen>
c001a56a:	83 c4 10             	add    esp,0x10
c001a56d:	ba 00 00 00 00       	mov    edx,0x0
c001a572:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a576:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a57a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a581:	25 ff 00 00 00       	and    eax,0xff
c001a586:	83 e0 10             	and    eax,0x10
c001a589:	74 07                	je     c001a592 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a58b:	b8 02 00 00 00       	mov    eax,0x2
c001a590:	eb 05                	jmp    c001a597 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a592:	b8 01 00 00 00       	mov    eax,0x1
c001a597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a59b:	83 ec 08             	sub    esp,0x8
c001a59e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5a5:	83 c0 1a             	add    eax,0x1a
c001a5a8:	50                   	push   eax
c001a5a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5ad:	83 c0 10             	add    eax,0x10
c001a5b0:	50                   	push   eax
c001a5b1:	e8 a3 61 fe ff       	call   c0000759 <strcpy>
c001a5b6:	83 c4 10             	add    esp,0x10
c001a5b9:	83 ec 04             	sub    esp,0x4
c001a5bc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5c7:	50                   	push   eax
c001a5c8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5cf:	e8 b0 60 fe ff       	call   c0000684 <memcpy>
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5de:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5e4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5eb:	84 c0                	test   al,al
c001a5ed:	75 07                	jne    c001a5f6 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5ef:	b8 07 00 00 00       	mov    eax,0x7
c001a5f4:	eb 17                	jmp    c001a60d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5f6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a5fd:	85 c0                	test   eax,eax
c001a5ff:	75 07                	jne    c001a608 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a601:	b8 00 00 00 00       	mov    eax,0x0
c001a606:	eb 05                	jmp    c001a60d <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a608:	b8 01 00 00 00       	mov    eax,0x1
c001a60d:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a613:	c3                   	ret    

c001a614 <FAT::read(void*, unsigned long, void*, int*)>:
c001a614:	83 ec 1c             	sub    esp,0x1c
c001a617:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a61c:	74 07                	je     c001a625 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a61e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a623:	75 07                	jne    c001a62c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a625:	b8 04 00 00 00       	mov    eax,0x4
c001a62a:	eb 3d                	jmp    c001a669 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a62c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a630:	50                   	push   eax
c001a631:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a635:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a639:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a63d:	e8 57 ab fe ff       	call   c0005199 <f_read>
c001a642:	83 c4 10             	add    esp,0x10
c001a645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a649:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a64d:	89 c2                	mov    edx,eax
c001a64f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a653:	89 10                	mov    DWORD PTR [eax],edx
c001a655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a659:	85 c0                	test   eax,eax
c001a65b:	75 07                	jne    c001a664 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a65d:	b8 00 00 00 00       	mov    eax,0x0
c001a662:	eb 05                	jmp    c001a669 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a664:	b8 01 00 00 00       	mov    eax,0x1
c001a669:	83 c4 1c             	add    esp,0x1c
c001a66c:	c3                   	ret    
c001a66d:	90                   	nop

c001a66e <FAT::write(void*, unsigned long, void*, int*)>:
c001a66e:	83 ec 1c             	sub    esp,0x1c
c001a671:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a676:	74 07                	je     c001a67f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a678:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a67d:	75 07                	jne    c001a686 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a67f:	b8 04 00 00 00       	mov    eax,0x4
c001a684:	eb 3d                	jmp    c001a6c3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a686:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a68a:	50                   	push   eax
c001a68b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a693:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a697:	e8 7d ad fe ff       	call   c0005419 <f_write>
c001a69c:	83 c4 10             	add    esp,0x10
c001a69f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6a7:	89 c2                	mov    edx,eax
c001a6a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6ad:	89 10                	mov    DWORD PTR [eax],edx
c001a6af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6b3:	85 c0                	test   eax,eax
c001a6b5:	75 07                	jne    c001a6be <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6b7:	b8 00 00 00 00       	mov    eax,0x0
c001a6bc:	eb 05                	jmp    c001a6c3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6be:	b8 01 00 00 00       	mov    eax,0x1
c001a6c3:	83 c4 1c             	add    esp,0x1c
c001a6c6:	c3                   	ret    
c001a6c7:	90                   	nop

c001a6c8 <FAT::close(void*)>:
c001a6c8:	83 ec 1c             	sub    esp,0x1c
c001a6cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6d0:	75 07                	jne    c001a6d9 <FAT::close(void*)+0x11>
c001a6d2:	b8 04 00 00 00       	mov    eax,0x4
c001a6d7:	eb 36                	jmp    c001a70f <FAT::close(void*)+0x47>
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6e0:	e8 ca b1 fe ff       	call   c00058af <f_close>
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6ec:	83 ec 0c             	sub    esp,0xc
c001a6ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f3:	e8 f1 18 ff ff       	call   c000bfe9 <free>
c001a6f8:	83 c4 10             	add    esp,0x10
c001a6fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6ff:	85 c0                	test   eax,eax
c001a701:	75 07                	jne    c001a70a <FAT::close(void*)+0x42>
c001a703:	b8 00 00 00 00       	mov    eax,0x0
c001a708:	eb 05                	jmp    c001a70f <FAT::close(void*)+0x47>
c001a70a:	b8 01 00 00 00       	mov    eax,0x1
c001a70f:	83 c4 1c             	add    esp,0x1c
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <FAT::closeDir(void*)>:
c001a714:	83 ec 1c             	sub    esp,0x1c
c001a717:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a71c:	75 07                	jne    c001a725 <FAT::closeDir(void*)+0x11>
c001a71e:	b8 04 00 00 00       	mov    eax,0x4
c001a723:	eb 36                	jmp    c001a75b <FAT::closeDir(void*)+0x47>
c001a725:	83 ec 0c             	sub    esp,0xc
c001a728:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a72c:	e8 14 b7 fe ff       	call   c0005e45 <f_closedir>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a738:	83 ec 0c             	sub    esp,0xc
c001a73b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a73f:	e8 a5 18 ff ff       	call   c000bfe9 <free>
c001a744:	83 c4 10             	add    esp,0x10
c001a747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a74b:	85 c0                	test   eax,eax
c001a74d:	75 07                	jne    c001a756 <FAT::closeDir(void*)+0x42>
c001a74f:	b8 00 00 00 00       	mov    eax,0x0
c001a754:	eb 05                	jmp    c001a75b <FAT::closeDir(void*)+0x47>
c001a756:	b8 01 00 00 00       	mov    eax,0x1
c001a75b:	83 c4 1c             	add    esp,0x1c
c001a75e:	c3                   	ret    
c001a75f:	90                   	nop

c001a760 <FAT::seek(void*, unsigned long long)>:
c001a760:	83 ec 2c             	sub    esp,0x2c
c001a763:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a76b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a76f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a773:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a778:	75 07                	jne    c001a781 <FAT::seek(void*, unsigned long long)+0x21>
c001a77a:	b8 04 00 00 00       	mov    eax,0x4
c001a77f:	eb 2f                	jmp    c001a7b0 <FAT::seek(void*, unsigned long long)+0x50>
c001a781:	83 ec 04             	sub    esp,0x4
c001a784:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a78c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a790:	e8 49 b1 fe ff       	call   c00058de <f_lseek>
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a79c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7a0:	85 c0                	test   eax,eax
c001a7a2:	75 07                	jne    c001a7ab <FAT::seek(void*, unsigned long long)+0x4b>
c001a7a4:	b8 00 00 00 00       	mov    eax,0x0
c001a7a9:	eb 05                	jmp    c001a7b0 <FAT::seek(void*, unsigned long long)+0x50>
c001a7ab:	b8 01 00 00 00       	mov    eax,0x1
c001a7b0:	83 c4 2c             	add    esp,0x2c
c001a7b3:	c3                   	ret    

c001a7b4 <fatWrapperReadDisk>:
c001a7b4:	83 ec 1c             	sub    esp,0x1c
c001a7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7ce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7d2:	25 ff 00 00 00       	and    eax,0xff
c001a7d7:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a7de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7e2:	83 ec 0c             	sub    esp,0xc
c001a7e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e9:	52                   	push   edx
c001a7ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f2:	50                   	push   eax
c001a7f3:	e8 6e 80 ff ff       	call   c0012866 <LogicalDisk::read(unsigned long long, int, void*)>
c001a7f8:	83 c4 20             	add    esp,0x20
c001a7fb:	83 c4 1c             	add    esp,0x1c
c001a7fe:	c3                   	ret    

c001a7ff <fatWrapperWriteDisk>:
c001a7ff:	83 ec 1c             	sub    esp,0x1c
c001a802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a806:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a80a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a80e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a811:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a815:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a819:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a81d:	25 ff 00 00 00       	and    eax,0xff
c001a822:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a829:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a82d:	83 ec 0c             	sub    esp,0xc
c001a830:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a834:	52                   	push   edx
c001a835:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a83d:	50                   	push   eax
c001a83e:	e8 8f 80 ff ff       	call   c00128d2 <LogicalDisk::write(unsigned long long, int, void*)>
c001a843:	83 c4 20             	add    esp,0x20
c001a846:	83 c4 1c             	add    esp,0x1c
c001a849:	c3                   	ret    

c001a84a <fatWrapperIoctl>:
c001a84a:	53                   	push   ebx
c001a84b:	83 ec 28             	sub    esp,0x28
c001a84e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a852:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a856:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a85a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a85e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a863:	75 35                	jne    c001a89a <fatWrapperIoctl+0x50>
c001a865:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a869:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a86d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a871:	25 ff 00 00 00       	and    eax,0xff
c001a876:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a87d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a883:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a889:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a88d:	66 89 02             	mov    WORD PTR [edx],ax
c001a890:	b8 00 00 00 00       	mov    eax,0x0
c001a895:	e9 bb 00 00 00       	jmp    c001a955 <fatWrapperIoctl+0x10b>
c001a89a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a89f:	75 73                	jne    c001a914 <fatWrapperIoctl+0xca>
c001a8a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8a9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8ad:	25 ff 00 00 00       	and    eax,0xff
c001a8b2:	8b 04 85 80 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb280]
c001a8b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8bf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8c5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8cb:	89 c8                	mov    eax,ecx
c001a8cd:	89 da                	mov    edx,ebx
c001a8cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8d3:	c1 e0 0a             	shl    eax,0xa
c001a8d6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8da:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8e0:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c001a8e7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8ed:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8f3:	89 cb                	mov    ebx,ecx
c001a8f5:	c1 fb 1f             	sar    ebx,0x1f
c001a8f8:	53                   	push   ebx
c001a8f9:	51                   	push   ecx
c001a8fa:	52                   	push   edx
c001a8fb:	50                   	push   eax
c001a8fc:	e8 fb 4b 00 00       	call   c001f4fc <__udivdi3>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a908:	89 01                	mov    DWORD PTR [ecx],eax
c001a90a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a90d:	b8 00 00 00 00       	mov    eax,0x0
c001a912:	eb 41                	jmp    c001a955 <fatWrapperIoctl+0x10b>
c001a914:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a919:	75 07                	jne    c001a922 <fatWrapperIoctl+0xd8>
c001a91b:	b8 00 00 00 00       	mov    eax,0x0
c001a920:	eb 33                	jmp    c001a955 <fatWrapperIoctl+0x10b>
c001a922:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a927:	75 19                	jne    c001a942 <fatWrapperIoctl+0xf8>
c001a929:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a92d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a935:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a93b:	b8 00 00 00 00       	mov    eax,0x0
c001a940:	eb 13                	jmp    c001a955 <fatWrapperIoctl+0x10b>
c001a942:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a947:	75 07                	jne    c001a950 <fatWrapperIoctl+0x106>
c001a949:	b8 00 00 00 00       	mov    eax,0x0
c001a94e:	eb 05                	jmp    c001a955 <fatWrapperIoctl+0x10b>
c001a950:	b8 04 00 00 00       	mov    eax,0x4
c001a955:	83 c4 28             	add    esp,0x28
c001a958:	5b                   	pop    ebx
c001a959:	c3                   	ret    

c001a95a <FAT::FAT()>:
c001a95a:	83 ec 1c             	sub    esp,0x1c
c001a95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	50                   	push   eax
c001a965:	e8 ae 4b ff ff       	call   c000f518 <Filesystem::Filesystem()>
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001a972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a976:	89 10                	mov    DWORD PTR [eax],edx
c001a978:	c7 05 00 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c00,0x0
c001a982:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a98a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a98f:	7f 15                	jg     c001a9a6 <FAT::FAT()+0x4c>
c001a991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a995:	c7 04 85 20 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3e0],0xffffffff
c001a9a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9a4:	eb e4                	jmp    c001a98a <FAT::FAT()+0x30>
c001a9a6:	90                   	nop
c001a9a7:	83 c4 1c             	add    esp,0x1c
c001a9aa:	c3                   	ret    
c001a9ab:	90                   	nop

c001a9ac <FAT::fixFilepath(char*)>:
c001a9ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b0:	8a 00                	mov    al,BYTE PTR [eax]
c001a9b2:	3c 40                	cmp    al,0x40
c001a9b4:	7e 2c                	jle    c001a9e2 <FAT::fixFilepath(char*)+0x36>
c001a9b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ba:	8a 00                	mov    al,BYTE PTR [eax]
c001a9bc:	83 e8 41             	sub    eax,0x41
c001a9bf:	88 c2                	mov    dl,al
c001a9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c5:	88 10                	mov    BYTE PTR [eax],dl
c001a9c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cb:	8a 00                	mov    al,BYTE PTR [eax]
c001a9cd:	0f be c0             	movsx  eax,al
c001a9d0:	8b 04 85 20 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3e0]
c001a9d7:	83 c0 30             	add    eax,0x30
c001a9da:	88 c2                	mov    dl,al
c001a9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e0:	88 10                	mov    BYTE PTR [eax],dl
c001a9e2:	90                   	nop
c001a9e3:	c3                   	ret    

c001a9e4 <FAT::open(char const*, void**, FileOpenMode)>:
c001a9e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9f2:	74 0a                	je     c001a9fe <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a9fc:	75 0a                	jne    c001aa08 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a9fe:	b8 04 00 00 00       	mov    eax,0x4
c001aa03:	e9 00 01 00 00       	jmp    c001ab08 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa08:	83 ec 08             	sub    esp,0x8
c001aa0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa16:	50                   	push   eax
c001aa17:	e8 3d 5d fe ff       	call   c0000759 <strcpy>
c001aa1c:	83 c4 10             	add    esp,0x10
c001aa1f:	83 ec 08             	sub    esp,0x8
c001aa22:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa26:	50                   	push   eax
c001aa27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2e:	e8 79 ff ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa3e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa45:	83 e0 01             	and    eax,0x1
c001aa48:	74 08                	je     c001aa52 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa4a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa52:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa59:	83 e0 04             	and    eax,0x4
c001aa5c:	74 10                	je     c001aa6e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa5e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa66:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa6e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa75:	83 e0 02             	and    eax,0x2
c001aa78:	74 08                	je     c001aa82 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa7a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa82:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa89:	83 e0 08             	and    eax,0x8
c001aa8c:	74 08                	je     c001aa96 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa8e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aa96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa9d:	83 e0 10             	and    eax,0x10
c001aaa0:	74 08                	je     c001aaaa <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaa2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aaaa:	83 ec 0c             	sub    esp,0xc
c001aaad:	68 50 02 00 00       	push   0x250
c001aab2:	e8 22 15 ff ff       	call   c000bfd9 <malloc>
c001aab7:	83 c4 10             	add    esp,0x10
c001aaba:	89 c2                	mov    edx,eax
c001aabc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aac3:	89 10                	mov    DWORD PTR [eax],edx
c001aac5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aacc:	31 d2                	xor    edx,edx
c001aace:	88 c2                	mov    dl,al
c001aad0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aad7:	8b 00                	mov    eax,DWORD PTR [eax]
c001aad9:	83 ec 04             	sub    esp,0x4
c001aadc:	52                   	push   edx
c001aadd:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aae1:	52                   	push   edx
c001aae2:	50                   	push   eax
c001aae3:	e8 75 a2 fe ff       	call   c0004d5d <f_open>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aaf2:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aafa:	74 07                	je     c001ab03 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001aafc:	b8 01 00 00 00       	mov    eax,0x1
c001ab01:	eb 05                	jmp    c001ab08 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab03:	b8 00 00 00 00       	mov    eax,0x0
c001ab08:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab0e:	c3                   	ret    
c001ab0f:	90                   	nop

c001ab10 <FAT::openDir(char const*, void**)>:
c001ab10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab1e:	74 0a                	je     c001ab2a <FAT::openDir(char const*, void**)+0x1a>
c001ab20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab28:	75 07                	jne    c001ab31 <FAT::openDir(char const*, void**)+0x21>
c001ab2a:	b8 04 00 00 00       	mov    eax,0x4
c001ab2f:	eb 7d                	jmp    c001abae <FAT::openDir(char const*, void**)+0x9e>
c001ab31:	83 ec 08             	sub    esp,0x8
c001ab34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab3f:	50                   	push   eax
c001ab40:	e8 14 5c fe ff       	call   c0000759 <strcpy>
c001ab45:	83 c4 10             	add    esp,0x10
c001ab48:	83 ec 08             	sub    esp,0x8
c001ab4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab4f:	50                   	push   eax
c001ab50:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab57:	e8 50 fe ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001ab5c:	83 c4 10             	add    esp,0x10
c001ab5f:	83 ec 0c             	sub    esp,0xc
c001ab62:	6a 4c                	push   0x4c
c001ab64:	e8 70 14 ff ff       	call   c000bfd9 <malloc>
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	89 c2                	mov    edx,eax
c001ab6e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab75:	89 10                	mov    DWORD PTR [eax],edx
c001ab77:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab80:	83 ec 08             	sub    esp,0x8
c001ab83:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab87:	52                   	push   edx
c001ab88:	50                   	push   eax
c001ab89:	e8 b5 b1 fe ff       	call   c0005d43 <f_opendir>
c001ab8e:	83 c4 10             	add    esp,0x10
c001ab91:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab98:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aba0:	74 07                	je     c001aba9 <FAT::openDir(char const*, void**)+0x99>
c001aba2:	b8 01 00 00 00       	mov    eax,0x1
c001aba7:	eb 05                	jmp    c001abae <FAT::openDir(char const*, void**)+0x9e>
c001aba9:	b8 00 00 00 00       	mov    eax,0x0
c001abae:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abb4:	c3                   	ret    
c001abb5:	90                   	nop

c001abb6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abb6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abbc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abc4:	75 0a                	jne    c001abd0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abc6:	b8 04 00 00 00       	mov    eax,0x4
c001abcb:	e9 cb 00 00 00       	jmp    c001ac9b <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abd0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abd8:	75 0a                	jne    c001abe4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abda:	b8 04 00 00 00       	mov    eax,0x4
c001abdf:	e9 b7 00 00 00       	jmp    c001ac9b <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abec:	75 0a                	jne    c001abf8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abee:	b8 04 00 00 00       	mov    eax,0x4
c001abf3:	e9 a3 00 00 00       	jmp    c001ac9b <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abf8:	83 ec 08             	sub    esp,0x8
c001abfb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac02:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac09:	50                   	push   eax
c001ac0a:	e8 4a 5b fe ff       	call   c0000759 <strcpy>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	83 ec 08             	sub    esp,0x8
c001ac15:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac1c:	50                   	push   eax
c001ac1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac24:	e8 83 fd ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001ac29:	83 c4 10             	add    esp,0x10
c001ac2c:	83 ec 08             	sub    esp,0x8
c001ac2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac33:	50                   	push   eax
c001ac34:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac3b:	50                   	push   eax
c001ac3c:	e8 c1 b2 fe ff       	call   c0005f02 <f_stat>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac4b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac52:	85 c0                	test   eax,eax
c001ac54:	74 07                	je     c001ac5d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac56:	83 f8 04             	cmp    eax,0x4
c001ac59:	74 34                	je     c001ac8f <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac5b:	eb 39                	jmp    c001ac96 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac5d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac61:	25 ff 00 00 00       	and    eax,0xff
c001ac66:	83 e0 10             	and    eax,0x10
c001ac69:	0f 95 c2             	setne  dl
c001ac6c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac73:	88 10                	mov    BYTE PTR [eax],dl
c001ac75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac7c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac83:	89 01                	mov    DWORD PTR [ecx],eax
c001ac85:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac88:	b8 00 00 00 00       	mov    eax,0x0
c001ac8d:	eb 0c                	jmp    c001ac9b <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac8f:	b8 02 00 00 00       	mov    eax,0x2
c001ac94:	eb 05                	jmp    c001ac9b <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac96:	b8 01 00 00 00       	mov    eax,0x1
c001ac9b:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aca1:	c3                   	ret    

c001aca2 <FAT::unlink(char const*)>:
c001aca2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aca8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acb0:	75 07                	jne    c001acb9 <FAT::unlink(char const*)+0x17>
c001acb2:	b8 04 00 00 00       	mov    eax,0x4
c001acb7:	eb 5c                	jmp    c001ad15 <FAT::unlink(char const*)+0x73>
c001acb9:	83 ec 08             	sub    esp,0x8
c001acbc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acc7:	50                   	push   eax
c001acc8:	e8 8c 5a fe ff       	call   c0000759 <strcpy>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	83 ec 08             	sub    esp,0x8
c001acd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acd7:	50                   	push   eax
c001acd8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acdf:	e8 c8 fc ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001ace4:	83 c4 10             	add    esp,0x10
c001ace7:	83 ec 0c             	sub    esp,0xc
c001acea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acee:	50                   	push   eax
c001acef:	e8 7d b5 fe ff       	call   c0006271 <f_unlink>
c001acf4:	83 c4 10             	add    esp,0x10
c001acf7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001acfe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad05:	85 c0                	test   eax,eax
c001ad07:	75 07                	jne    c001ad10 <FAT::unlink(char const*)+0x6e>
c001ad09:	b8 00 00 00 00       	mov    eax,0x0
c001ad0e:	eb 05                	jmp    c001ad15 <FAT::unlink(char const*)+0x73>
c001ad10:	b8 01 00 00 00       	mov    eax,0x1
c001ad15:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad1b:	c3                   	ret    

c001ad1c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad22:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad29:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad30:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad34:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad38:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad40:	75 0a                	jne    c001ad4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad42:	b8 04 00 00 00       	mov    eax,0x4
c001ad47:	e9 43 01 00 00       	jmp    c001ae8f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad4c:	83 ec 08             	sub    esp,0x8
c001ad4f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad56:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad5a:	50                   	push   eax
c001ad5b:	e8 f9 59 fe ff       	call   c0000759 <strcpy>
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	83 ec 08             	sub    esp,0x8
c001ad66:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad6a:	50                   	push   eax
c001ad6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad72:	e8 35 fc ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad82:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad8a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad8e:	25 ff 00 00 00       	and    eax,0xff
c001ad93:	83 e0 01             	and    eax,0x1
c001ad96:	74 08                	je     c001ada0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ad98:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ada0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada4:	25 ff 00 00 00       	and    eax,0xff
c001ada9:	83 e0 02             	and    eax,0x2
c001adac:	74 08                	je     c001adb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adae:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adb6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adba:	25 ff 00 00 00       	and    eax,0xff
c001adbf:	83 e0 04             	and    eax,0x4
c001adc2:	74 08                	je     c001adcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adc4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001adcc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001add0:	25 ff 00 00 00       	and    eax,0xff
c001add5:	83 e0 08             	and    eax,0x8
c001add8:	74 08                	je     c001ade2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adda:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ade2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ade6:	25 ff 00 00 00       	and    eax,0xff
c001adeb:	83 e0 01             	and    eax,0x1
c001adee:	74 08                	je     c001adf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adf0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001adf8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adfc:	25 ff 00 00 00       	and    eax,0xff
c001ae01:	83 e0 02             	and    eax,0x2
c001ae04:	74 08                	je     c001ae0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae06:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae0e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae12:	25 ff 00 00 00       	and    eax,0xff
c001ae17:	83 e0 04             	and    eax,0x4
c001ae1a:	74 08                	je     c001ae24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae1c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae24:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae28:	25 ff 00 00 00       	and    eax,0xff
c001ae2d:	83 e0 08             	and    eax,0x8
c001ae30:	74 08                	je     c001ae3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae32:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae3a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae41:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae48:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae4f:	31 d2                	xor    edx,edx
c001ae51:	88 c2                	mov    dl,al
c001ae53:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae5a:	25 ff 00 00 00       	and    eax,0xff
c001ae5f:	83 ec 04             	sub    esp,0x4
c001ae62:	52                   	push   edx
c001ae63:	50                   	push   eax
c001ae64:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae68:	50                   	push   eax
c001ae69:	e8 a3 ba fe ff       	call   c0006911 <f_chmod>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae78:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae7f:	85 c0                	test   eax,eax
c001ae81:	75 07                	jne    c001ae8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae83:	b8 00 00 00 00       	mov    eax,0x0
c001ae88:	eb 05                	jmp    c001ae8f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae8a:	b8 01 00 00 00       	mov    eax,0x1
c001ae8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae95:	c3                   	ret    

c001ae96 <FAT::rename(char const*, char const*)>:
c001ae96:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ae9c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aea4:	74 0a                	je     c001aeb0 <FAT::rename(char const*, char const*)+0x1a>
c001aea6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aeae:	75 0a                	jne    c001aeba <FAT::rename(char const*, char const*)+0x24>
c001aeb0:	b8 04 00 00 00       	mov    eax,0x4
c001aeb5:	e9 98 00 00 00       	jmp    c001af52 <FAT::rename(char const*, char const*)+0xbc>
c001aeba:	83 ec 08             	sub    esp,0x8
c001aebd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aec4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aecb:	50                   	push   eax
c001aecc:	e8 88 58 fe ff       	call   c0000759 <strcpy>
c001aed1:	83 c4 10             	add    esp,0x10
c001aed4:	83 ec 08             	sub    esp,0x8
c001aed7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aede:	50                   	push   eax
c001aedf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aee6:	e8 c1 fa ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	83 ec 08             	sub    esp,0x8
c001aef1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aef8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aefc:	50                   	push   eax
c001aefd:	e8 57 58 fe ff       	call   c0000759 <strcpy>
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	83 ec 08             	sub    esp,0x8
c001af08:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af0c:	50                   	push   eax
c001af0d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af14:	e8 93 fa ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	83 ec 08             	sub    esp,0x8
c001af1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af23:	50                   	push   eax
c001af24:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af2b:	50                   	push   eax
c001af2c:	e8 ed b6 fe ff       	call   c000661e <f_rename>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af3b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af42:	85 c0                	test   eax,eax
c001af44:	75 07                	jne    c001af4d <FAT::rename(char const*, char const*)+0xb7>
c001af46:	b8 00 00 00 00       	mov    eax,0x0
c001af4b:	eb 05                	jmp    c001af52 <FAT::rename(char const*, char const*)+0xbc>
c001af4d:	b8 01 00 00 00       	mov    eax,0x1
c001af52:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af58:	c3                   	ret    
c001af59:	90                   	nop

c001af5a <FAT::mkdir(char const*)>:
c001af5a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af60:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af68:	75 07                	jne    c001af71 <FAT::mkdir(char const*)+0x17>
c001af6a:	b8 04 00 00 00       	mov    eax,0x4
c001af6f:	eb 5c                	jmp    c001afcd <FAT::mkdir(char const*)+0x73>
c001af71:	83 ec 08             	sub    esp,0x8
c001af74:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af7f:	50                   	push   eax
c001af80:	e8 d4 57 fe ff       	call   c0000759 <strcpy>
c001af85:	83 c4 10             	add    esp,0x10
c001af88:	83 ec 08             	sub    esp,0x8
c001af8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af8f:	50                   	push   eax
c001af90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af97:	e8 10 fa ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	83 ec 0c             	sub    esp,0xc
c001afa2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afa6:	50                   	push   eax
c001afa7:	e8 46 b4 fe ff       	call   c00063f2 <f_mkdir>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afb6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afbd:	85 c0                	test   eax,eax
c001afbf:	75 07                	jne    c001afc8 <FAT::mkdir(char const*)+0x6e>
c001afc1:	b8 00 00 00 00       	mov    eax,0x0
c001afc6:	eb 05                	jmp    c001afcd <FAT::mkdir(char const*)+0x73>
c001afc8:	b8 01 00 00 00       	mov    eax,0x1
c001afcd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afd3:	c3                   	ret    

c001afd4 <FAT::exists(char const*)>:
c001afd4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afda:	83 ec 08             	sub    esp,0x8
c001afdd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afe4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afe8:	50                   	push   eax
c001afe9:	e8 6b 57 fe ff       	call   c0000759 <strcpy>
c001afee:	83 c4 10             	add    esp,0x10
c001aff1:	83 ec 08             	sub    esp,0x8
c001aff4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aff8:	50                   	push   eax
c001aff9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b000:	e8 a7 f9 ff ff       	call   c001a9ac <FAT::fixFilepath(char*)>
c001b005:	83 c4 10             	add    esp,0x10
c001b008:	83 ec 08             	sub    esp,0x8
c001b00b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b012:	50                   	push   eax
c001b013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b017:	50                   	push   eax
c001b018:	e8 e5 ae fe ff       	call   c0005f02 <f_stat>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b027:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b02e:	85 c0                	test   eax,eax
c001b030:	75 04                	jne    c001b036 <FAT::exists(char const*)+0x62>
c001b032:	b0 01                	mov    al,0x1
c001b034:	eb 02                	jmp    c001b038 <FAT::exists(char const*)+0x64>
c001b036:	b0 00                	mov    al,0x0
c001b038:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b03e:	c3                   	ret    
c001b03f:	90                   	nop

c001b040 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b040:	b8 08 00 00 00       	mov    eax,0x8
c001b045:	c3                   	ret    

c001b046 <ISO9660::seek(void*, unsigned long long)>:
c001b046:	53                   	push   ebx
c001b047:	b8 04 00 00 00       	mov    eax,0x4
c001b04c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b050:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b054:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b058:	85 d2                	test   edx,edx
c001b05a:	74 17                	je     c001b073 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b05c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b05f:	89 c8                	mov    eax,ecx
c001b061:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b064:	b8 01 00 00 00       	mov    eax,0x1
c001b069:	73 08                	jae    c001b073 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b06b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b06e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b071:	31 c0                	xor    eax,eax
c001b073:	5b                   	pop    ebx
c001b074:	c3                   	ret    
c001b075:	90                   	nop

c001b076 <ISO9660::tell(void*, unsigned long long*)>:
c001b076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b07e:	85 d2                	test   edx,edx
c001b080:	74 12                	je     c001b094 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b082:	85 c0                	test   eax,eax
c001b084:	74 0e                	je     c001b094 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b086:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b089:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b08c:	89 10                	mov    DWORD PTR [eax],edx
c001b08e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b091:	31 c0                	xor    eax,eax
c001b093:	c3                   	ret    
c001b094:	b8 04 00 00 00       	mov    eax,0x4
c001b099:	c3                   	ret    

c001b09a <ISO9660::getName()>:
c001b09a:	b8 48 33 02 c0       	mov    eax,0xc0023348
c001b09f:	c3                   	ret    

c001b0a0 <ISO9660::stat(void*, unsigned long long*)>:
c001b0a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0a8:	85 d2                	test   edx,edx
c001b0aa:	74 12                	je     c001b0be <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0ac:	85 c0                	test   eax,eax
c001b0ae:	74 0e                	je     c001b0be <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0b3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0b6:	89 10                	mov    DWORD PTR [eax],edx
c001b0b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0bb:	31 c0                	xor    eax,eax
c001b0bd:	c3                   	ret    
c001b0be:	b8 04 00 00 00       	mov    eax,0x4
c001b0c3:	c3                   	ret    

c001b0c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0c4:	b8 01 00 00 00       	mov    eax,0x1
c001b0c9:	c3                   	ret    

c001b0ca <ISO9660::unlink(char const*)>:
c001b0ca:	b8 01 00 00 00       	mov    eax,0x1
c001b0cf:	c3                   	ret    

c001b0d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0d0:	b8 01 00 00 00       	mov    eax,0x1
c001b0d5:	c3                   	ret    

c001b0d6 <ISO9660::rename(char const*, char const*)>:
c001b0d6:	b8 01 00 00 00       	mov    eax,0x1
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::mkdir(char const*)>:
c001b0dc:	b8 01 00 00 00       	mov    eax,0x1
c001b0e1:	c3                   	ret    

c001b0e2 <ISO9660::close(void*)>:
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	b8 04 00 00 00       	mov    eax,0x4
c001b0ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0ee:	85 d2                	test   edx,edx
c001b0f0:	74 0e                	je     c001b100 <ISO9660::close(void*)+0x1e>
c001b0f2:	83 ec 0c             	sub    esp,0xc
c001b0f5:	52                   	push   edx
c001b0f6:	e8 ee 0e ff ff       	call   c000bfe9 <free>
c001b0fb:	83 c4 10             	add    esp,0x10
c001b0fe:	31 c0                	xor    eax,eax
c001b100:	83 c4 0c             	add    esp,0xc
c001b103:	c3                   	ret    

c001b104 <ISO9660::closeDir(void*)>:
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	b8 04 00 00 00       	mov    eax,0x4
c001b10c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b110:	85 d2                	test   edx,edx
c001b112:	74 0e                	je     c001b122 <ISO9660::closeDir(void*)+0x1e>
c001b114:	83 ec 0c             	sub    esp,0xc
c001b117:	52                   	push   edx
c001b118:	e8 cc 0e ff ff       	call   c000bfe9 <free>
c001b11d:	83 c4 10             	add    esp,0x10
c001b120:	31 c0                	xor    eax,eax
c001b122:	83 c4 0c             	add    esp,0xc
c001b125:	c3                   	ret    

c001b126 <ISO9660::~ISO9660()>:
c001b126:	83 ec 0c             	sub    esp,0xc
c001b129:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001b12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b132:	89 10                	mov    DWORD PTR [eax],edx
c001b134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b138:	83 ec 0c             	sub    esp,0xc
c001b13b:	50                   	push   eax
c001b13c:	e8 fb 43 ff ff       	call   c000f53c <Filesystem::~Filesystem()>
c001b141:	83 c4 10             	add    esp,0x10
c001b144:	90                   	nop
c001b145:	83 c4 0c             	add    esp,0xc
c001b148:	c3                   	ret    
c001b149:	90                   	nop

c001b14a <ISO9660::~ISO9660()>:
c001b14a:	83 ec 0c             	sub    esp,0xc
c001b14d:	83 ec 0c             	sub    esp,0xc
c001b150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b154:	e8 cd ff ff ff       	call   c001b126 <ISO9660::~ISO9660()>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	83 ec 08             	sub    esp,0x8
c001b15f:	6a 08                	push   0x8
c001b161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b165:	e8 7b 3f ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	83 c4 0c             	add    esp,0xc
c001b170:	c3                   	ret    

c001b171 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b171:	55                   	push   ebp
c001b172:	31 c9                	xor    ecx,ecx
c001b174:	57                   	push   edi
c001b175:	56                   	push   esi
c001b176:	53                   	push   ebx
c001b177:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b17b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b17f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b183:	89 eb                	mov    ebx,ebp
c001b185:	39 ce                	cmp    esi,ecx
c001b187:	7e 17                	jle    c001b1a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b189:	31 d2                	xor    edx,edx
c001b18b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b18f:	7d 13                	jge    c001b1a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b191:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b195:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b198:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b19b:	75 0d                	jne    c001b1aa <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b19d:	42                   	inc    edx
c001b19e:	eb eb                	jmp    c001b18b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1a0:	31 c0                	xor    eax,eax
c001b1a2:	eb 0a                	jmp    c001b1ae <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1a4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1a8:	eb 04                	jmp    c001b1ae <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1aa:	41                   	inc    ecx
c001b1ab:	43                   	inc    ebx
c001b1ac:	eb d7                	jmp    c001b185 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1ae:	5b                   	pop    ebx
c001b1af:	5e                   	pop    esi
c001b1b0:	5f                   	pop    edi
c001b1b1:	5d                   	pop    ebp
c001b1b2:	c3                   	ret    

c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1b3:	56                   	push   esi
c001b1b4:	53                   	push   ebx
c001b1b5:	52                   	push   edx
c001b1b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1c2:	39 0d 00 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d00,ecx
c001b1c8:	75 08                	jne    c001b1d2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1ca:	38 05 a8 41 02 c0    	cmp    BYTE PTR ds:0xc00241a8,al
c001b1d0:	74 2b                	je     c001b1fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1d2:	83 ec 0c             	sub    esp,0xc
c001b1d5:	31 db                	xor    ebx,ebx
c001b1d7:	a2 a8 41 02 c0       	mov    ds:0xc00241a8,al
c001b1dc:	89 0d 00 5d 02 c0    	mov    DWORD PTR ds:0xc0025d00,ecx
c001b1e2:	68 20 5d 02 c0       	push   0xc0025d20
c001b1e7:	6a 01                	push   0x1
c001b1e9:	53                   	push   ebx
c001b1ea:	0f be c0             	movsx  eax,al
c001b1ed:	51                   	push   ecx
c001b1ee:	ff 34 85 7c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb384]
c001b1f5:	e8 6c 76 ff ff       	call   c0012866 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1fa:	83 c4 20             	add    esp,0x20
c001b1fd:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b205:	c7 44 24 14 20 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d20
c001b20d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b211:	58                   	pop    eax
c001b212:	5b                   	pop    ebx
c001b213:	5e                   	pop    esi
c001b214:	e9 6b 54 fe ff       	jmp    c0000684 <memcpy>
c001b219:	90                   	nop

c001b21a <ISO9660::tryMount(LogicalDisk*, int)>:
c001b21a:	81 ec 10 08 00 00    	sub    esp,0x810
c001b220:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b227:	83 c0 41             	add    eax,0x41
c001b22a:	0f be c0             	movsx  eax,al
c001b22d:	50                   	push   eax
c001b22e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b232:	50                   	push   eax
c001b233:	6a 10                	push   0x10
c001b235:	e8 79 ff ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b23a:	83 c4 10             	add    esp,0x10
c001b23d:	31 c0                	xor    eax,eax
c001b23f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b244:	75 1d                	jne    c001b263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b246:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b24b:	75 16                	jne    c001b263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b24d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b252:	75 0f                	jne    c001b263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b254:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b259:	75 08                	jne    c001b263 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b260:	0f 94 c0             	sete   al
c001b263:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b269:	c3                   	ret    

c001b26a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b26a:	55                   	push   ebp
c001b26b:	57                   	push   edi
c001b26c:	56                   	push   esi
c001b26d:	53                   	push   ebx
c001b26e:	81 ec 34 08 00 00    	sub    esp,0x834
c001b274:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b27b:	55                   	push   ebp
c001b27c:	68 63 33 02 c0       	push   0xc0023363
c001b281:	e8 85 3f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001b286:	83 c4 10             	add    esp,0x10
c001b289:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b291:	0f 84 06 02 00 00    	je     c001b49d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b297:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b29f:	0f 84 f8 01 00 00    	je     c001b49d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2a5:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2ac:	b8 01 00 00 00       	mov    eax,0x1
c001b2b1:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2b5:	0f 85 e7 01 00 00    	jne    c001b4a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2bb:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2be:	31 d2                	xor    edx,edx
c001b2c0:	89 e9                	mov    ecx,ebp
c001b2c2:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2c5:	01 f1                	add    ecx,esi
c001b2c7:	89 d3                	mov    ebx,edx
c001b2c9:	11 fb                	adc    ebx,edi
c001b2cb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2cf:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2d3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2da:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2dd:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2e4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2f0:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2f4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b2f8:	72 19                	jb     c001b313 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b2fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b302:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b306:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b30d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b311:	eb 13                	jmp    c001b326 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b317:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b31b:	29 f0                	sub    eax,esi
c001b31d:	19 fa                	sbb    edx,edi
c001b31f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b322:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b326:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b32d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b330:	8b 00                	mov    eax,DWORD PTR [eax]
c001b332:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b336:	c1 e0 0b             	shl    eax,0xb
c001b339:	53                   	push   ebx
c001b33a:	01 c6                	add    esi,eax
c001b33c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b343:	11 d7                	adc    edi,edx
c001b345:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b349:	50                   	push   eax
c001b34a:	89 fa                	mov    edx,edi
c001b34c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b350:	50                   	push   eax
c001b351:	89 f0                	mov    eax,esi
c001b353:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b357:	50                   	push   eax
c001b358:	e8 56 fe ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b35d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b364:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b368:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b36c:	83 c4 10             	add    esp,0x10
c001b36f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b372:	b8 00 08 00 00       	mov    eax,0x800
c001b377:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b37d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b381:	29 d0                	sub    eax,edx
c001b383:	39 c1                	cmp    ecx,eax
c001b385:	83 db 00             	sbb    ebx,0x0
c001b388:	7d 19                	jge    c001b3a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b38a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b38f:	75 16                	jne    c001b3a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b391:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b398:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b39e:	e9 f6 00 00 00       	jmp    c001b499 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3a3:	89 c5                	mov    ebp,eax
c001b3a5:	eb 03                	jmp    c001b3aa <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3a7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3aa:	51                   	push   ecx
c001b3ab:	55                   	push   ebp
c001b3ac:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3b0:	50                   	push   eax
c001b3b1:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3b8:	e8 c7 52 fe ff       	call   c0000684 <memcpy>
c001b3bd:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3c4:	01 e8                	add    eax,ebp
c001b3c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3ce:	89 e8                	mov    eax,ebp
c001b3d0:	99                   	cdq    
c001b3d1:	01 ee                	add    esi,ebp
c001b3d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3d7:	11 d7                	adc    edi,edx
c001b3d9:	29 e9                	sub    ecx,ebp
c001b3db:	19 d3                	sbb    ebx,edx
c001b3dd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3e1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3ed:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3f0:	b8 00 00 00 00       	mov    eax,0x0
c001b3f5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b3f9:	7d 3f                	jge    c001b43a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b3fb:	52                   	push   edx
c001b3fc:	89 fa                	mov    edx,edi
c001b3fe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b405:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b409:	50                   	push   eax
c001b40a:	89 f0                	mov    eax,esi
c001b40c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b410:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b414:	50                   	push   eax
c001b415:	e8 99 fd ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b41a:	81 c6 00 08 00 00    	add    esi,0x800
c001b420:	83 d7 00             	adc    edi,0x0
c001b423:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b42b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b433:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b438:	eb ab                	jmp    c001b3e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b43e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b441:	74 34                	je     c001b477 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b443:	50                   	push   eax
c001b444:	89 fa                	mov    edx,edi
c001b446:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b44d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b451:	50                   	push   eax
c001b452:	89 f0                	mov    eax,esi
c001b454:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b458:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b45c:	55                   	push   ebp
c001b45d:	50                   	push   eax
c001b45e:	e8 50 fd ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b463:	83 c4 0c             	add    esp,0xc
c001b466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b46a:	55                   	push   ebp
c001b46b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b46f:	e8 10 52 fe ff       	call   c0000684 <memcpy>
c001b474:	83 c4 10             	add    esp,0x10
c001b477:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b47e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b482:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b486:	89 38                	mov    DWORD PTR [eax],edi
c001b488:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b48f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b493:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b496:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b499:	31 c0                	xor    eax,eax
c001b49b:	eb 05                	jmp    c001b4a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b49d:	b8 04 00 00 00       	mov    eax,0x4
c001b4a2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4a8:	5b                   	pop    ebx
c001b4a9:	5e                   	pop    esi
c001b4aa:	5f                   	pop    edi
c001b4ab:	5d                   	pop    ebp
c001b4ac:	c3                   	ret    
c001b4ad:	90                   	nop

c001b4ae <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4ae:	55                   	push   ebp
c001b4af:	57                   	push   edi
c001b4b0:	56                   	push   esi
c001b4b1:	53                   	push   ebx
c001b4b2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4b8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4bf:	85 f6                	test   esi,esi
c001b4c1:	0f 84 62 02 00 00    	je     c001b729 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4c7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4cf:	0f 84 54 02 00 00    	je     c001b729 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4d5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4d8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4db:	75 0a                	jne    c001b4e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4dd:	b8 07 00 00 00       	mov    eax,0x7
c001b4e2:	e9 47 02 00 00       	jmp    c001b72e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4e7:	50                   	push   eax
c001b4e8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4ec:	50                   	push   eax
c001b4ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4f4:	53                   	push   ebx
c001b4f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4f7:	c1 e0 0b             	shl    eax,0xb
c001b4fa:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b4fd:	c1 e8 0b             	shr    eax,0xb
c001b500:	50                   	push   eax
c001b501:	e8 ad fc ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b506:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b509:	83 c4 10             	add    esp,0x10
c001b50c:	89 c1                	mov    ecx,eax
c001b50e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b511:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b517:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b51a:	84 db                	test   bl,bl
c001b51c:	0f 85 90 00 00 00    	jne    c001b5b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b522:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b528:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b52e:	29 c7                	sub    edi,eax
c001b530:	89 fb                	mov    ebx,edi
c001b532:	c1 fb 1f             	sar    ebx,0x1f
c001b535:	01 f8                	add    eax,edi
c001b537:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b53b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b53e:	11 da                	adc    edx,ebx
c001b540:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b543:	89 04 24             	mov    DWORD PTR [esp],eax
c001b546:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b54a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b54d:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b550:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b553:	89 d8                	mov    eax,ebx
c001b555:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b559:	ba 00 00 00 00       	mov    edx,0x0
c001b55e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b562:	b8 00 00 00 00       	mov    eax,0x0
c001b567:	73 0b                	jae    c001b574 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b569:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b56c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b570:	29 f8                	sub    eax,edi
c001b572:	19 da                	sbb    edx,ebx
c001b574:	89 d3                	mov    ebx,edx
c001b576:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b579:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b57c:	09 c3                	or     ebx,eax
c001b57e:	0f 84 59 ff ff ff    	je     c001b4dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b584:	55                   	push   ebp
c001b585:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b589:	50                   	push   eax
c001b58a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b591:	53                   	push   ebx
c001b592:	8b 06                	mov    eax,DWORD PTR [esi]
c001b594:	c1 e0 0b             	shl    eax,0xb
c001b597:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b59b:	c1 e8 0b             	shr    eax,0xb
c001b59e:	50                   	push   eax
c001b59f:	e8 0f fc ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	25 ff 07 00 00       	and    eax,0x7ff
c001b5af:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5b2:	57                   	push   edi
c001b5b3:	6a 28                	push   0x28
c001b5b5:	6a 00                	push   0x0
c001b5b7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5bb:	50                   	push   eax
c001b5bc:	e8 f9 50 fe ff       	call   c00006ba <memset>
c001b5c1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5c4:	31 d2                	xor    edx,edx
c001b5c6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5cc:	89 f8                	mov    eax,edi
c001b5ce:	83 c0 21             	add    eax,0x21
c001b5d1:	83 d2 00             	adc    edx,0x0
c001b5d4:	89 c7                	mov    edi,eax
c001b5d6:	89 d5                	mov    ebp,edx
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	31 c9                	xor    ecx,ecx
c001b5dd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5e4:	83 f9 28             	cmp    ecx,0x28
c001b5e7:	0f 94 c2             	sete   dl
c001b5ea:	88 04 24             	mov    BYTE PTR [esp],al
c001b5ed:	88 d0                	mov    al,dl
c001b5ef:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5f4:	39 fa                	cmp    edx,edi
c001b5f6:	ba 00 00 00 00       	mov    edx,0x0
c001b5fb:	19 ea                	sbb    edx,ebp
c001b5fd:	0f 92 c2             	setb   dl
c001b600:	09 c2                	or     edx,eax
c001b602:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b606:	0f 94 c0             	sete   al
c001b609:	08 d0                	or     al,dl
c001b60b:	75 16                	jne    c001b623 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b60d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b611:	74 10                	je     c001b623 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b613:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b616:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b61a:	41                   	inc    ecx
c001b61b:	83 c7 01             	add    edi,0x1
c001b61e:	83 d5 00             	adc    ebp,0x0
c001b621:	eb ba                	jmp    c001b5dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b623:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b62a:	83 ec 0c             	sub    esp,0xc
c001b62d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b631:	57                   	push   edi
c001b632:	e8 a0 50 fe ff       	call   c00006d7 <strlen>
c001b637:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b63b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b63e:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b645:	25 ff 07 00 00       	and    eax,0x7ff
c001b64a:	01 c8                	add    eax,ecx
c001b64c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b654:	5a                   	pop    edx
c001b655:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b65c:	59                   	pop    ecx
c001b65d:	0f 95 c0             	setne  al
c001b660:	0f b6 c0             	movzx  eax,al
c001b663:	40                   	inc    eax
c001b664:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b668:	57                   	push   edi
c001b669:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b66d:	50                   	push   eax
c001b66e:	e8 e6 50 fe ff       	call   c0000759 <strcpy>
c001b673:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	84 c0                	test   al,al
c001b67c:	75 21                	jne    c001b69f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b67e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b686:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b68e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b696:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b69d:	eb 28                	jmp    c001b6c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b69f:	fe c8                	dec    al
c001b6a1:	75 24                	jne    c001b6c7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6ab:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6b3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6bb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6c2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6c7:	50                   	push   eax
c001b6c8:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6cf:	0f b6 fb             	movzx  edi,bl
c001b6d2:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6d6:	31 db                	xor    ebx,ebx
c001b6d8:	50                   	push   eax
c001b6d9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6e0:	e8 9f 4f fe ff       	call   c0000684 <memcpy>
c001b6e5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6ec:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6f2:	89 f9                	mov    ecx,edi
c001b6f4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b6f7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b6fa:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b6fd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	39 c7                	cmp    edi,eax
c001b705:	89 df                	mov    edi,ebx
c001b707:	19 d7                	sbb    edi,edx
c001b709:	72 10                	jb     c001b71b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b70b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b712:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b719:	eb 0a                	jmp    c001b725 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b71b:	29 c8                	sub    eax,ecx
c001b71d:	19 da                	sbb    edx,ebx
c001b71f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b722:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b725:	31 c0                	xor    eax,eax
c001b727:	eb 05                	jmp    c001b72e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b729:	b8 04 00 00 00       	mov    eax,0x4
c001b72e:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b734:	5b                   	pop    ebx
c001b735:	5e                   	pop    esi
c001b736:	5f                   	pop    edi
c001b737:	5d                   	pop    ebp
c001b738:	c3                   	ret    

c001b739 <readRoot(unsigned int*, unsigned int*, char)>:
c001b739:	81 ec 40 08 00 00    	sub    esp,0x840
c001b73f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b747:	50                   	push   eax
c001b748:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b74c:	50                   	push   eax
c001b74d:	6a 10                	push   0x10
c001b74f:	e8 5f fa ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b754:	83 c4 0c             	add    esp,0xc
c001b757:	6a 22                	push   0x22
c001b759:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b760:	50                   	push   eax
c001b761:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b765:	50                   	push   eax
c001b766:	e8 19 4f fe ff       	call   c0000684 <memcpy>
c001b76b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b772:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b776:	89 10                	mov    DWORD PTR [eax],edx
c001b778:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b77f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b783:	89 10                	mov    DWORD PTR [eax],edx
c001b785:	b0 01                	mov    al,0x1
c001b787:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b78d:	c3                   	ret    

c001b78e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b78e:	55                   	push   ebp
c001b78f:	57                   	push   edi
c001b790:	56                   	push   esi
c001b791:	53                   	push   ebx
c001b792:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b798:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b79f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7aa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7b2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7b6:	75 03                	jne    c001b7bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7b8:	83 c3 02             	add    ebx,0x2
c001b7bb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7be:	75 03                	jne    c001b7c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7c0:	43                   	inc    ebx
c001b7c1:	eb f8                	jmp    c001b7bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7c3:	51                   	push   ecx
c001b7c4:	68 00 01 00 00       	push   0x100
c001b7c9:	6a 00                	push   0x0
c001b7cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7cf:	50                   	push   eax
c001b7d0:	e8 e5 4e fe ff       	call   c00006ba <memset>
c001b7d5:	83 c4 10             	add    esp,0x10
c001b7d8:	31 d2                	xor    edx,edx
c001b7da:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7dd:	84 c0                	test   al,al
c001b7df:	74 21                	je     c001b802 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7e1:	3c 2f                	cmp    al,0x2f
c001b7e3:	75 0b                	jne    c001b7f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7e5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7e9:	bd 01 00 00 00       	mov    ebp,0x1
c001b7ee:	eb 14                	jmp    c001b804 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7f0:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7f3:	80 f9 19             	cmp    cl,0x19
c001b7f6:	77 03                	ja     c001b7fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b7f8:	83 e8 20             	sub    eax,0x20
c001b7fb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b7ff:	42                   	inc    edx
c001b800:	eb d8                	jmp    c001b7da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b802:	31 ed                	xor    ebp,ebp
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b80e:	e8 c6 07 ff ff       	call   c000bfd9 <malloc>
c001b813:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b81a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b820:	89 c6                	mov    esi,eax
c001b822:	c1 ef 0b             	shr    edi,0xb
c001b825:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b82c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b838:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b83c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b843:	74 28                	je     c001b86d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b845:	52                   	push   edx
c001b846:	57                   	push   edi
c001b847:	50                   	push   eax
c001b848:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b84c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b853:	e8 5b f9 ff ff       	call   c001b1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b858:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b85c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b863:	05 00 08 00 00       	add    eax,0x800
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	eb cb                	jmp    c001b838 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b86d:	83 ec 0c             	sub    esp,0xc
c001b870:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b874:	57                   	push   edi
c001b875:	e8 5d 4e fe ff       	call   c00006d7 <strlen>
c001b87a:	50                   	push   eax
c001b87b:	57                   	push   edi
c001b87c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b883:	56                   	push   esi
c001b884:	e8 e8 f8 ff ff       	call   c001b171 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b889:	83 c4 20             	add    esp,0x20
c001b88c:	85 c0                	test   eax,eax
c001b88e:	75 13                	jne    c001b8a3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b890:	83 ec 0c             	sub    esp,0xc
c001b893:	56                   	push   esi
c001b894:	e8 50 07 ff ff       	call   c000bfe9 <free>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	31 c0                	xor    eax,eax
c001b89e:	e9 b3 00 00 00       	jmp    c001b956 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8a3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8a7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8ab:	c1 e7 08             	shl    edi,0x8
c001b8ae:	c1 e2 10             	shl    edx,0x10
c001b8b1:	09 d7                	or     edi,edx
c001b8b3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8b7:	09 d7                	or     edi,edx
c001b8b9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8bd:	c1 e2 18             	shl    edx,0x18
c001b8c0:	09 d7                	or     edi,edx
c001b8c2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8c6:	89 d1                	mov    ecx,edx
c001b8c8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8cc:	c1 e1 08             	shl    ecx,0x8
c001b8cf:	c1 e2 10             	shl    edx,0x10
c001b8d2:	09 ca                	or     edx,ecx
c001b8d4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8d8:	09 ca                	or     edx,ecx
c001b8da:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8de:	c1 e1 18             	shl    ecx,0x18
c001b8e1:	09 ca                	or     edx,ecx
c001b8e3:	89 e9                	mov    ecx,ebp
c001b8e5:	84 c9                	test   cl,cl
c001b8e7:	74 3c                	je     c001b925 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	56                   	push   esi
c001b8f1:	e8 f3 06 ff ff       	call   c000bfe9 <free>
c001b8f6:	83 c4 0c             	add    esp,0xc
c001b8f9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b900:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b905:	50                   	push   eax
c001b906:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b90d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b914:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b918:	52                   	push   edx
c001b919:	57                   	push   edi
c001b91a:	53                   	push   ebx
c001b91b:	e8 6e fe ff ff       	call   c001b78e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b920:	83 c4 20             	add    esp,0x20
c001b923:	eb 31                	jmp    c001b956 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b925:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b92c:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b92f:	d0 e8                	shr    al,1
c001b931:	83 ec 0c             	sub    esp,0xc
c001b934:	89 3b                	mov    DWORD PTR [ebx],edi
c001b936:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b93d:	83 e0 01             	and    eax,0x1
c001b940:	89 13                	mov    DWORD PTR [ebx],edx
c001b942:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b949:	89 03                	mov    DWORD PTR [ebx],eax
c001b94b:	56                   	push   esi
c001b94c:	e8 98 06 ff ff       	call   c000bfe9 <free>
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	b0 01                	mov    al,0x1
c001b956:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b95c:	5b                   	pop    ebx
c001b95d:	5e                   	pop    esi
c001b95e:	5f                   	pop    edi
c001b95f:	5d                   	pop    ebp
c001b960:	c3                   	ret    

c001b961 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b961:	55                   	push   ebp
c001b962:	57                   	push   edi
c001b963:	56                   	push   esi
c001b964:	53                   	push   ebx
c001b965:	83 ec 20             	sub    esp,0x20
c001b968:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b96c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b970:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b975:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b979:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b981:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b989:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b98f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b995:	57                   	push   edi
c001b996:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b99a:	50                   	push   eax
c001b99b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b99f:	50                   	push   eax
c001b9a0:	e8 94 fd ff ff       	call   c001b739 <readRoot(unsigned int*, unsigned int*, char)>
c001b9a5:	5a                   	pop    edx
c001b9a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9aa:	e8 28 4d fe ff       	call   c00006d7 <strlen>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	83 f8 03             	cmp    eax,0x3
c001b9b5:	77 17                	ja     c001b9ce <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9bb:	89 03                	mov    DWORD PTR [ebx],eax
c001b9bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c1:	89 06                	mov    DWORD PTR [esi],eax
c001b9c3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9ca:	b0 01                	mov    al,0x1
c001b9cc:	eb 19                	jmp    c001b9e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9ce:	50                   	push   eax
c001b9cf:	55                   	push   ebp
c001b9d0:	57                   	push   edi
c001b9d1:	56                   	push   esi
c001b9d2:	53                   	push   ebx
c001b9d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9df:	e8 aa fd ff ff       	call   c001b78e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9e4:	83 c4 20             	add    esp,0x20
c001b9e7:	83 c4 1c             	add    esp,0x1c
c001b9ea:	5b                   	pop    ebx
c001b9eb:	5e                   	pop    esi
c001b9ec:	5f                   	pop    edi
c001b9ed:	5d                   	pop    ebp
c001b9ee:	c3                   	ret    
c001b9ef:	90                   	nop

c001b9f0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9f0:	57                   	push   edi
c001b9f1:	56                   	push   esi
c001b9f2:	53                   	push   ebx
c001b9f3:	83 ec 10             	sub    esp,0x10
c001b9f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b9fa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b9fe:	85 f6                	test   esi,esi
c001ba00:	74 7b                	je     c001ba7d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba02:	85 ff                	test   edi,edi
c001ba04:	74 77                	je     c001ba7d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba06:	83 ec 0c             	sub    esp,0xc
c001ba09:	6a 1c                	push   0x1c
c001ba0b:	e8 c9 05 ff ff       	call   c000bfd9 <malloc>
c001ba10:	89 07                	mov    DWORD PTR [edi],eax
c001ba12:	89 c3                	mov    ebx,eax
c001ba14:	58                   	pop    eax
c001ba15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba19:	50                   	push   eax
c001ba1a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba1d:	50                   	push   eax
c001ba1e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba22:	50                   	push   eax
c001ba23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba27:	50                   	push   eax
c001ba28:	56                   	push   esi
c001ba29:	e8 33 ff ff ff       	call   c001b961 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba2e:	83 c4 20             	add    esp,0x20
c001ba31:	84 c0                	test   al,al
c001ba33:	74 07                	je     c001ba3c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba3a:	74 0b                	je     c001ba47 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba3c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba40:	b8 01 00 00 00       	mov    eax,0x1
c001ba45:	eb 3b                	jmp    c001ba82 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba4f:	89 03                	mov    DWORD PTR [ebx],eax
c001ba51:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba5c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba63:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba74:	8a 06                	mov    al,BYTE PTR [esi]
c001ba76:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba79:	31 c0                	xor    eax,eax
c001ba7b:	eb 05                	jmp    c001ba82 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba7d:	b8 04 00 00 00       	mov    eax,0x4
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	5b                   	pop    ebx
c001ba86:	5e                   	pop    esi
c001ba87:	5f                   	pop    edi
c001ba88:	c3                   	ret    
c001ba89:	90                   	nop

c001ba8a <ISO9660::exists(char const*)>:
c001ba8a:	83 ec 28             	sub    esp,0x28
c001ba8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba91:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba95:	52                   	push   edx
c001ba96:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ba99:	52                   	push   edx
c001ba9a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ba9e:	52                   	push   edx
c001ba9f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa3:	52                   	push   edx
c001baa4:	50                   	push   eax
c001baa5:	e8 b7 fe ff ff       	call   c001b961 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baaa:	83 c4 3c             	add    esp,0x3c
c001baad:	c3                   	ret    

c001baae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001baae:	56                   	push   esi
c001baaf:	53                   	push   ebx
c001bab0:	83 ec 14             	sub    esp,0x14
c001bab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bab7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001babb:	85 db                	test   ebx,ebx
c001babd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bac1:	0f 94 c2             	sete   dl
c001bac4:	85 f6                	test   esi,esi
c001bac6:	0f 94 c0             	sete   al
c001bac9:	08 c2                	or     dl,al
c001bacb:	75 68                	jne    c001bb35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bacd:	85 c9                	test   ecx,ecx
c001bacf:	74 64                	je     c001bb35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bad7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001badd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bae4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bae8:	50                   	push   eax
c001bae9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001baec:	50                   	push   eax
c001baed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf1:	50                   	push   eax
c001baf2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf6:	50                   	push   eax
c001baf7:	51                   	push   ecx
c001baf8:	e8 64 fe ff ff       	call   c001b961 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bafd:	83 c4 20             	add    esp,0x20
c001bb00:	ba 01 00 00 00       	mov    edx,0x1
c001bb05:	84 c0                	test   al,al
c001bb07:	74 31                	je     c001bb3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb0d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb14:	89 03                	mov    DWORD PTR [ebx],eax
c001bb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb1a:	85 c0                	test   eax,eax
c001bb1c:	ba 00 00 00 00       	mov    edx,0x0
c001bb21:	0f 95 06             	setne  BYTE PTR [esi]
c001bb24:	74 14                	je     c001bb3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb26:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb2c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb33:	eb 05                	jmp    c001bb3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb35:	ba 04 00 00 00       	mov    edx,0x4
c001bb3a:	83 c4 14             	add    esp,0x14
c001bb3d:	89 d0                	mov    eax,edx
c001bb3f:	5b                   	pop    ebx
c001bb40:	5e                   	pop    esi
c001bb41:	c3                   	ret    

c001bb42 <ISO9660::openDir(char const*, void**)>:
c001bb42:	57                   	push   edi
c001bb43:	56                   	push   esi
c001bb44:	53                   	push   ebx
c001bb45:	83 ec 10             	sub    esp,0x10
c001bb48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb4c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb50:	85 f6                	test   esi,esi
c001bb52:	0f 84 95 00 00 00    	je     c001bbed <ISO9660::openDir(char const*, void**)+0xab>
c001bb58:	85 ff                	test   edi,edi
c001bb5a:	0f 84 8d 00 00 00    	je     c001bbed <ISO9660::openDir(char const*, void**)+0xab>
c001bb60:	83 ec 0c             	sub    esp,0xc
c001bb63:	6a 1c                	push   0x1c
c001bb65:	e8 6f 04 ff ff       	call   c000bfd9 <malloc>
c001bb6a:	89 07                	mov    DWORD PTR [edi],eax
c001bb6c:	89 c3                	mov    ebx,eax
c001bb6e:	59                   	pop    ecx
c001bb6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb73:	50                   	push   eax
c001bb74:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb77:	50                   	push   eax
c001bb78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb7c:	50                   	push   eax
c001bb7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb81:	50                   	push   eax
c001bb82:	56                   	push   esi
c001bb83:	e8 d9 fd ff ff       	call   c001b961 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb88:	83 c4 20             	add    esp,0x20
c001bb8b:	84 c0                	test   al,al
c001bb8d:	74 07                	je     c001bb96 <ISO9660::openDir(char const*, void**)+0x54>
c001bb8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb94:	75 21                	jne    c001bbb7 <ISO9660::openDir(char const*, void**)+0x75>
c001bb96:	52                   	push   edx
c001bb97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb9b:	0f b6 c0             	movzx  eax,al
c001bb9e:	50                   	push   eax
c001bb9f:	68 76 33 02 c0       	push   0xc0023376
c001bba4:	e8 62 36 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001bba9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	b8 01 00 00 00       	mov    eax,0x1
c001bbb5:	eb 3b                	jmp    c001bbf2 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbbb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbbf:	89 03                	mov    DWORD PTR [ebx],eax
c001bbc1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbcc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbda:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbdd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbe4:	8a 06                	mov    al,BYTE PTR [esi]
c001bbe6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbe9:	31 c0                	xor    eax,eax
c001bbeb:	eb 05                	jmp    c001bbf2 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbed:	b8 04 00 00 00       	mov    eax,0x4
c001bbf2:	83 c4 10             	add    esp,0x10
c001bbf5:	5b                   	pop    ebx
c001bbf6:	5e                   	pop    esi
c001bbf7:	5f                   	pop    edi
c001bbf8:	c3                   	ret    
c001bbf9:	90                   	nop

c001bbfa <ISO9660::ISO9660()>:
c001bbfa:	83 ec 0c             	sub    esp,0xc
c001bbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc01:	83 ec 0c             	sub    esp,0xc
c001bc04:	50                   	push   eax
c001bc05:	e8 0e 39 ff ff       	call   c000f518 <Filesystem::Filesystem()>
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001bc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc16:	89 10                	mov    DWORD PTR [eax],edx
c001bc18:	90                   	nop
c001bc19:	83 c4 0c             	add    esp,0xc
c001bc1c:	c3                   	ret    
c001bc1d:	90                   	nop

c001bc1e <SoundChannel::~SoundChannel()>:
c001bc1e:	83 ec 0c             	sub    esp,0xc
c001bc21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	50                   	push   eax
c001bc2c:	e8 b8 03 ff ff       	call   c000bfe9 <free>
c001bc31:	83 c4 10             	add    esp,0x10
c001bc34:	90                   	nop
c001bc35:	83 c4 0c             	add    esp,0xc
c001bc38:	c3                   	ret    
c001bc39:	90                   	nop

c001bc3a <SoundChannel::setSpeed(float)>:
c001bc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc3e:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc42:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc45:	c3                   	ret    

c001bc46 <SoundChannel::getSpeed()>:
c001bc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc4a:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc4d:	c3                   	ret    

c001bc4e <SoundChannel::setVolume(int)>:
c001bc4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc52:	83 f8 64             	cmp    eax,0x64
c001bc55:	7e 05                	jle    c001bc5c <SoundChannel::setVolume(int)+0xe>
c001bc57:	b8 64 00 00 00       	mov    eax,0x64
c001bc5c:	85 c0                	test   eax,eax
c001bc5e:	79 02                	jns    c001bc62 <SoundChannel::setVolume(int)+0x14>
c001bc60:	31 c0                	xor    eax,eax
c001bc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc66:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc69:	c3                   	ret    

c001bc6a <SoundChannel::getVolume()>:
c001bc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc6e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc71:	c3                   	ret    

c001bc72 <SoundChannel::pause()>:
c001bc72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc76:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc7a:	c3                   	ret    
c001bc7b:	90                   	nop

c001bc7c <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc7c:	83 ec 1c             	sub    esp,0x1c
c001bc7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc83:	e8 ea ff ff ff       	call   c001bc72 <SoundChannel::pause()>
c001bc88:	83 c4 04             	add    esp,0x4
c001bc8b:	6a 50                	push   0x50
c001bc8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc91:	e8 b8 ff ff ff       	call   c001bc4e <SoundChannel::setVolume(int)>
c001bc96:	83 c4 08             	add    esp,0x8
c001bc99:	d9 e8                	fld1   
c001bc9b:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bc9f:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bca6:	e8 8f ff ff ff       	call   c001bc3a <SoundChannel::setSpeed(float)>
c001bcab:	83 c4 08             	add    esp,0x8
c001bcae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcb6:	89 10                	mov    DWORD PTR [eax],edx
c001bcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcce:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bcd3:	75 26                	jne    c001bcfb <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bcd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd9:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bce2:	0f af c2             	imul   eax,edx
c001bce5:	89 c2                	mov    edx,eax
c001bce7:	c1 fa 1f             	sar    edx,0x1f
c001bcea:	83 e2 03             	and    edx,0x3
c001bced:	01 d0                	add    eax,edx
c001bcef:	c1 f8 02             	sar    eax,0x2
c001bcf2:	05 a0 0f 00 00       	add    eax,0xfa0
c001bcf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bcfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd03:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd0a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd15:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd23:	c1 e0 02             	shl    eax,0x2
c001bd26:	83 ec 0c             	sub    esp,0xc
c001bd29:	50                   	push   eax
c001bd2a:	e8 aa 02 ff ff       	call   c000bfd9 <malloc>
c001bd2f:	83 c4 10             	add    esp,0x10
c001bd32:	89 c2                	mov    edx,eax
c001bd34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd38:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd3b:	83 ec 04             	sub    esp,0x4
c001bd3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd42:	50                   	push   eax
c001bd43:	6a 01                	push   0x1
c001bd45:	6a 04                	push   0x4
c001bd47:	e8 96 cb fe ff       	call   c00088e2 <src_new>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	89 c2                	mov    edx,eax
c001bd51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd5c:	85 c0                	test   eax,eax
c001bd5e:	74 10                	je     c001bd70 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd60:	83 ec 0c             	sub    esp,0xc
c001bd63:	68 f8 33 02 c0       	push   0xc00233f8
c001bd68:	e8 cd 9c ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001bd6d:	83 c4 10             	add    esp,0x10
c001bd70:	90                   	nop
c001bd71:	83 c4 1c             	add    esp,0x1c
c001bd74:	c3                   	ret    
c001bd75:	90                   	nop

c001bd76 <SoundChannel::play()>:
c001bd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd7e:	c3                   	ret    
c001bd7f:	90                   	nop

c001bd80 <SoundChannel::paused()>:
c001bd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd84:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd87:	c3                   	ret    

c001bd88 <SoundChannel::getSampleRate()>:
c001bd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd8e:	c3                   	ret    
c001bd8f:	90                   	nop

c001bd90 <SoundChannel::getBits()>:
c001bd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd97:	c3                   	ret    

c001bd98 <SoundChannel::getBufferUsed()>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bd9f:	c3                   	ret    

c001bda0 <SoundChannel::getBufferSize()>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bda7:	c3                   	ret    

c001bda8 <SoundChannel::unbuffer(float*, int, int)>:
c001bda8:	53                   	push   ebx
c001bda9:	83 ec 40             	sub    esp,0x40
c001bdac:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdb0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdb8:	db 03                	fild   DWORD PTR [ebx]
c001bdba:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdc5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdcc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdd0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bddc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bde0:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bde3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bde7:	50                   	push   eax
c001bde8:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdeb:	e8 ac c7 fe ff       	call   c000859c <src_process>
c001bdf0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bdf7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bdfa:	83 c4 0c             	add    esp,0xc
c001bdfd:	29 d0                	sub    eax,edx
c001bdff:	c1 e0 02             	shl    eax,0x2
c001be02:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be05:	50                   	push   eax
c001be06:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be09:	50                   	push   eax
c001be0a:	51                   	push   ecx
c001be0b:	e8 3c 48 fe ff       	call   c000064c <memmove>
c001be10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be14:	83 c4 48             	add    esp,0x48
c001be17:	5b                   	pop    ebx
c001be18:	c3                   	ret    
c001be19:	90                   	nop

c001be1a <SoundChannel::buffer8(unsigned char*, int)>:
c001be1a:	53                   	push   ebx
c001be1b:	31 c0                	xor    eax,eax
c001be1d:	83 ec 08             	sub    esp,0x8
c001be20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be24:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be27:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be2a:	74 35                	je     c001be61 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be2c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be30:	7d 2f                	jge    c001be61 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be32:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be36:	d9 05 14 34 02 c0    	fld    DWORD PTR ds:0xc0023414
c001be3c:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be40:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be45:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be48:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be4c:	40                   	inc    eax
c001be4d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be50:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be53:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be56:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be59:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be5c:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be5f:	eb c9                	jmp    c001be2a <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be61:	83 c4 08             	add    esp,0x8
c001be64:	5b                   	pop    ebx
c001be65:	c3                   	ret    

c001be66 <SoundDevice::SoundDevice(char const*)>:
c001be66:	83 ec 1c             	sub    esp,0x1c
c001be69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be6d:	83 ec 08             	sub    esp,0x8
c001be70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be74:	50                   	push   eax
c001be75:	e8 96 49 ff ff       	call   c0010810 <Device::Device(char const*)>
c001be7a:	83 c4 10             	add    esp,0x10
c001be7d:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001be82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be86:	89 10                	mov    DWORD PTR [eax],edx
c001be88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be8c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001be96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be9a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bea4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beac:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001beb1:	7f 19                	jg     c001becc <SoundDevice::SoundDevice(char const*)+0x66>
c001beb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bebb:	83 c2 54             	add    edx,0x54
c001bebe:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bec6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001beca:	eb e0                	jmp    c001beac <SoundDevice::SoundDevice(char const*)+0x46>
c001becc:	90                   	nop
c001becd:	83 c4 1c             	add    esp,0x1c
c001bed0:	c3                   	ret    
c001bed1:	90                   	nop

c001bed2 <SoundDevice::~SoundDevice()>:
c001bed2:	53                   	push   ebx
c001bed3:	83 ec 18             	sub    esp,0x18
c001bed6:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001bedb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bedf:	89 10                	mov    DWORD PTR [eax],edx
c001bee1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bee9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001beee:	7f 46                	jg     c001bf36 <SoundDevice::~SoundDevice()+0x64>
c001bef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bef8:	83 c2 54             	add    edx,0x54
c001befb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001beff:	85 c0                	test   eax,eax
c001bf01:	74 2d                	je     c001bf30 <SoundDevice::~SoundDevice()+0x5e>
c001bf03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf0b:	83 c2 54             	add    edx,0x54
c001bf0e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf12:	85 db                	test   ebx,ebx
c001bf14:	74 1a                	je     c001bf30 <SoundDevice::~SoundDevice()+0x5e>
c001bf16:	83 ec 0c             	sub    esp,0xc
c001bf19:	53                   	push   ebx
c001bf1a:	e8 ff fc ff ff       	call   c001bc1e <SoundChannel::~SoundChannel()>
c001bf1f:	83 c4 10             	add    esp,0x10
c001bf22:	83 ec 08             	sub    esp,0x8
c001bf25:	6a 2c                	push   0x2c
c001bf27:	53                   	push   ebx
c001bf28:	e8 b8 31 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf34:	eb b3                	jmp    c001bee9 <SoundDevice::~SoundDevice()+0x17>
c001bf36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	50                   	push   eax
c001bf3e:	e8 83 45 ff ff       	call   c00104c6 <Device::~Device()>
c001bf43:	83 c4 10             	add    esp,0x10
c001bf46:	90                   	nop
c001bf47:	83 c4 18             	add    esp,0x18
c001bf4a:	5b                   	pop    ebx
c001bf4b:	c3                   	ret    

c001bf4c <SoundDevice::~SoundDevice()>:
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	83 ec 0c             	sub    esp,0xc
c001bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf56:	e8 77 ff ff ff       	call   c001bed2 <SoundDevice::~SoundDevice()>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	83 ec 08             	sub    esp,0x8
c001bf61:	68 e4 01 00 00       	push   0x1e4
c001bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf6a:	e8 76 31 ff ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	83 c4 0c             	add    esp,0xc
c001bf75:	c3                   	ret    

c001bf76 <SoundDevice::getFreeChannelNum()>:
c001bf76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf7a:	31 c0                	xor    eax,eax
c001bf7c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf84:	74 09                	je     c001bf8f <SoundDevice::getFreeChannelNum()+0x19>
c001bf86:	40                   	inc    eax
c001bf87:	83 f8 20             	cmp    eax,0x20
c001bf8a:	75 f0                	jne    c001bf7c <SoundDevice::getFreeChannelNum()+0x6>
c001bf8c:	83 c8 ff             	or     eax,0xffffffff
c001bf8f:	c3                   	ret    

c001bf90 <SoundDevice::addChannel(SoundChannel*)>:
c001bf90:	56                   	push   esi
c001bf91:	53                   	push   ebx
c001bf92:	51                   	push   ecx
c001bf93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bf9b:	53                   	push   ebx
c001bf9c:	e8 d5 ff ff ff       	call   c001bf76 <SoundDevice::getFreeChannelNum()>
c001bfa1:	5a                   	pop    edx
c001bfa2:	83 f8 ff             	cmp    eax,0xffffffff
c001bfa5:	74 51                	je     c001bff8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfa7:	85 f6                	test   esi,esi
c001bfa9:	74 4d                	je     c001bff8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfab:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfb2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfb9:	75 30                	jne    c001bfeb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfbb:	83 ec 0c             	sub    esp,0xc
c001bfbe:	56                   	push   esi
c001bfbf:	e8 c4 fd ff ff       	call   c001bd88 <SoundChannel::getSampleRate()>
c001bfc4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfca:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfcd:	e8 be fd ff ff       	call   c001bd90 <SoundChannel::getBits()>
c001bfd2:	83 c4 0c             	add    esp,0xc
c001bfd5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfdb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfdd:	50                   	push   eax
c001bfde:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfe4:	53                   	push   ebx
c001bfe5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bfe8:	83 c4 10             	add    esp,0x10
c001bfeb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bff1:	b8 01 00 00 00       	mov    eax,0x1
c001bff6:	eb 03                	jmp    c001bffb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bff8:	83 c8 ff             	or     eax,0xffffffff
c001bffb:	5a                   	pop    edx
c001bffc:	5b                   	pop    ebx
c001bffd:	5e                   	pop    esi
c001bffe:	c3                   	ret    
c001bfff:	90                   	nop

c001c000 <SoundDevice::removeChannel(int)>:
c001c000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c008:	83 fa 1f             	cmp    edx,0x1f
c001c00b:	77 23                	ja     c001c030 <SoundDevice::removeChannel(int)+0x30>
c001c00d:	8d 14 90             	lea    edx,[eax+edx*4]
c001c010:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c017:	74 17                	je     c001c030 <SoundDevice::removeChannel(int)+0x30>
c001c019:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c023:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c029:	75 05                	jne    c001c030 <SoundDevice::removeChannel(int)+0x30>
c001c02b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c02d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c030:	c3                   	ret    
c001c031:	90                   	nop

c001c032 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c032:	56                   	push   esi
c001c033:	53                   	push   ebx
c001c034:	31 db                	xor    ebx,ebx
c001c036:	83 ec 14             	sub    esp,0x14
c001c039:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c03d:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c041:	7d 55                	jge    c001c098 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c047:	d9 e8                	fld1   
c001c049:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c04c:	d8 0d 50 34 02 c0    	fmul   DWORD PTR ds:0xc0023450
c001c052:	d8 0d 54 34 02 c0    	fmul   DWORD PTR ds:0xc0023454
c001c058:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c05c:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c060:	d8 15 58 34 02 c0    	fcom   DWORD PTR ds:0xc0023458
c001c066:	df e0                	fnstsw ax
c001c068:	9e                   	sahf   
c001c069:	72 08                	jb     c001c073 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c06b:	dd d8                	fstp   st(0)
c001c06d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c071:	eb 22                	jmp    c001c095 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c073:	d9 ee                	fldz   
c001c075:	d8 d9                	fcomp  st(1)
c001c077:	df e0                	fnstsw ax
c001c079:	9e                   	sahf   
c001c07a:	72 08                	jb     c001c084 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c07c:	dd d8                	fstp   st(0)
c001c07e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c082:	eb 11                	jmp    c001c095 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c084:	83 ec 10             	sub    esp,0x10
c001c087:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c08a:	e8 bd 36 00 00       	call   c001f74c <lrintf>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c095:	43                   	inc    ebx
c001c096:	eb a5                	jmp    c001c03d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c098:	83 c4 14             	add    esp,0x14
c001c09b:	5b                   	pop    ebx
c001c09c:	5e                   	pop    esi
c001c09d:	c3                   	ret    

c001c09e <SoundDevice::getAudio(int, float*, float*)>:
c001c09e:	55                   	push   ebp
c001c09f:	57                   	push   edi
c001c0a0:	56                   	push   esi
c001c0a1:	53                   	push   ebx
c001c0a2:	31 db                	xor    ebx,ebx
c001c0a4:	83 ec 20             	sub    esp,0x20
c001c0a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0af:	c1 e0 02             	shl    eax,0x2
c001c0b2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0b6:	50                   	push   eax
c001c0b7:	6a 00                	push   0x0
c001c0b9:	55                   	push   ebp
c001c0ba:	e8 fb 45 fe ff       	call   c00006ba <memset>
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0c6:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0cd:	85 c0                	test   eax,eax
c001c0cf:	0f 84 8c 00 00 00    	je     c001c161 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0d5:	83 ec 0c             	sub    esp,0xc
c001c0d8:	50                   	push   eax
c001c0d9:	e8 a2 fc ff ff       	call   c001bd80 <SoundChannel::paused()>
c001c0de:	83 c4 10             	add    esp,0x10
c001c0e1:	84 c0                	test   al,al
c001c0e3:	75 7c                	jne    c001c161 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0e5:	83 ec 0c             	sub    esp,0xc
c001c0e8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0ef:	e8 76 fb ff ff       	call   c001bc6a <SoundChannel::getVolume()>
c001c0f4:	83 c4 10             	add    esp,0x10
c001c0f7:	85 c0                	test   eax,eax
c001c0f9:	74 66                	je     c001c161 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c105:	e8 60 fb ff ff       	call   c001bc6a <SoundChannel::getVolume()>
c001c10a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c10e:	d9 05 5c 34 02 c0    	fld    DWORD PTR ds:0xc002345c
c001c114:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c118:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c11c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c120:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c126:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c12a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c131:	e8 72 fc ff ff       	call   c001bda8 <SoundChannel::unbuffer(float*, int, int)>
c001c136:	83 c4 20             	add    esp,0x20
c001c139:	31 d2                	xor    edx,edx
c001c13b:	39 c2                	cmp    edx,eax
c001c13d:	7d 1c                	jge    c001c15b <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c13f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c143:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c147:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c14a:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c150:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c154:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c158:	42                   	inc    edx
c001c159:	eb e0                	jmp    c001c13b <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c15b:	39 c7                	cmp    edi,eax
c001c15d:	7e 02                	jle    c001c161 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c15f:	89 c7                	mov    edi,eax
c001c161:	43                   	inc    ebx
c001c162:	83 fb 20             	cmp    ebx,0x20
c001c165:	0f 85 5b ff ff ff    	jne    c001c0c6 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c16b:	83 c4 1c             	add    esp,0x1c
c001c16e:	89 f8                	mov    eax,edi
c001c170:	5b                   	pop    ebx
c001c171:	5e                   	pop    esi
c001c172:	5f                   	pop    edi
c001c173:	5d                   	pop    ebp
c001c174:	c3                   	ret    
c001c175:	90                   	nop

c001c176 <PCI::open(int, int, void*)>:
c001c176:	83 ec 18             	sub    esp,0x18
c001c179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c17d:	8b 10                	mov    edx,DWORD PTR [eax]
c001c17f:	50                   	push   eax
c001c180:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c183:	31 c0                	xor    eax,eax
c001c185:	83 c4 1c             	add    esp,0x1c
c001c188:	c3                   	ret    
c001c189:	90                   	nop

c001c18a <PCI::close(int, int, void*)>:
c001c18a:	31 c0                	xor    eax,eax
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <PCI::PCI()>:
c001c18e:	83 ec 0c             	sub    esp,0xc
c001c191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c195:	83 ec 08             	sub    esp,0x8
c001c198:	68 60 34 02 c0       	push   0xc0023460
c001c19d:	50                   	push   eax
c001c19e:	e8 f7 3c ff ff       	call   c000fe9a <Bus::Bus(char const*)>
c001c1a3:	83 c4 10             	add    esp,0x10
c001c1a6:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001c1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1af:	89 10                	mov    DWORD PTR [eax],edx
c001c1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1bb:	31 d2                	xor    edx,edx
c001c1bd:	88 c2                	mov    dl,al
c001c1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1d4:	31 d2                	xor    edx,edx
c001c1d6:	88 c2                	mov    dl,al
c001c1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1dc:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1eb:	8d 50 01             	lea    edx,[eax+0x1]
c001c1ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1f2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c1f8:	31 d2                	xor    edx,edx
c001c1fa:	88 c2                	mov    dl,al
c001c1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c200:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c204:	83 c9 c0             	or     ecx,0xffffffc0
c001c207:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c20b:	90                   	nop
c001c20c:	83 c4 0c             	add    esp,0xc
c001c20f:	c3                   	ret    

c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c210:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c214:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c219:	c1 e0 10             	shl    eax,0x10
c001c21c:	89 ca                	mov    edx,ecx
c001c21e:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c224:	09 d0                	or     eax,edx
c001c226:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c22b:	c1 e2 08             	shl    edx,0x8
c001c22e:	09 d0                	or     eax,edx
c001c230:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c235:	c1 e2 0b             	shl    edx,0xb
c001c238:	09 d0                	or     eax,edx
c001c23a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c23f:	0d 00 00 00 80       	or     eax,0x80000000
c001c244:	ef                   	out    dx,eax
c001c245:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c24a:	ed                   	in     eax,dx
c001c24b:	83 e1 02             	and    ecx,0x2
c001c24e:	0f b6 c9             	movzx  ecx,cl
c001c251:	c1 e1 03             	shl    ecx,0x3
c001c254:	d3 e8                	shr    eax,cl
c001c256:	c3                   	ret    
c001c257:	90                   	nop

c001c258 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c258:	6a 00                	push   0x0
c001c25a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c25f:	50                   	push   eax
c001c260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c265:	50                   	push   eax
c001c266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26b:	50                   	push   eax
c001c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c270:	e8 9b ff ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c275:	83 c4 14             	add    esp,0x14
c001c278:	c3                   	ret    
c001c279:	90                   	nop

c001c27a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c27a:	6a 0e                	push   0xe
c001c27c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c281:	50                   	push   eax
c001c282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c287:	50                   	push   eax
c001c288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c28d:	50                   	push   eax
c001c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c292:	e8 79 ff ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c297:	83 c4 14             	add    esp,0x14
c001c29a:	0f b6 c0             	movzx  eax,al
c001c29d:	c3                   	ret    

c001c29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c29e:	55                   	push   ebp
c001c29f:	57                   	push   edi
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2a7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2ac:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2b1:	6a 0a                	push   0xa
c001c2b3:	56                   	push   esi
c001c2b4:	55                   	push   ebp
c001c2b5:	57                   	push   edi
c001c2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2ba:	e8 51 ff ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2bf:	6a 0a                	push   0xa
c001c2c1:	89 c3                	mov    ebx,eax
c001c2c3:	56                   	push   esi
c001c2c4:	55                   	push   ebp
c001c2c5:	57                   	push   edi
c001c2c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2ca:	e8 41 ff ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2cf:	83 c4 28             	add    esp,0x28
c001c2d2:	0f b6 db             	movzx  ebx,bl
c001c2d5:	25 00 ff 00 00       	and    eax,0xff00
c001c2da:	09 d8                	or     eax,ebx
c001c2dc:	5b                   	pop    ebx
c001c2dd:	5e                   	pop    esi
c001c2de:	5f                   	pop    edi
c001c2df:	5d                   	pop    ebp
c001c2e0:	c3                   	ret    
c001c2e1:	90                   	nop

c001c2e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2e2:	6a 08                	push   0x8
c001c2e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2e9:	50                   	push   eax
c001c2ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2ef:	50                   	push   eax
c001c2f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f5:	50                   	push   eax
c001c2f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2fa:	e8 11 ff ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2ff:	83 c4 14             	add    esp,0x14
c001c302:	0f b6 c4             	movzx  eax,ah
c001c305:	c3                   	ret    

c001c306 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c306:	6a 08                	push   0x8
c001c308:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c30d:	50                   	push   eax
c001c30e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c313:	50                   	push   eax
c001c314:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c319:	50                   	push   eax
c001c31a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c31e:	e8 ed fe ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c323:	83 c4 14             	add    esp,0x14
c001c326:	c3                   	ret    
c001c327:	90                   	nop

c001c328 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c328:	6a 3c                	push   0x3c
c001c32a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c32f:	50                   	push   eax
c001c330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c335:	50                   	push   eax
c001c336:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c33b:	50                   	push   eax
c001c33c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c340:	e8 cb fe ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c345:	83 c4 14             	add    esp,0x14
c001c348:	c3                   	ret    
c001c349:	90                   	nop

c001c34a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c34a:	6a 18                	push   0x18
c001c34c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c351:	50                   	push   eax
c001c352:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c357:	50                   	push   eax
c001c358:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c35d:	50                   	push   eax
c001c35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c362:	e8 a9 fe ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c367:	83 c4 14             	add    esp,0x14
c001c36a:	0f b6 c4             	movzx  eax,ah
c001c36d:	c3                   	ret    

c001c36e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c36e:	55                   	push   ebp
c001c36f:	57                   	push   edi
c001c370:	56                   	push   esi
c001c371:	53                   	push   ebx
c001c372:	50                   	push   eax
c001c373:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c377:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c37c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c383:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c388:	8d 43 12             	lea    eax,[ebx+0x12]
c001c38b:	83 c3 10             	add    ebx,0x10
c001c38e:	0f b6 c0             	movzx  eax,al
c001c391:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c396:	50                   	push   eax
c001c397:	51                   	push   ecx
c001c398:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c39c:	57                   	push   edi
c001c39d:	55                   	push   ebp
c001c39e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3a2:	e8 69 fe ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3a7:	0f b6 db             	movzx  ebx,bl
c001c3aa:	53                   	push   ebx
c001c3ab:	89 c6                	mov    esi,eax
c001c3ad:	c1 e6 10             	shl    esi,0x10
c001c3b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3b4:	51                   	push   ecx
c001c3b5:	57                   	push   edi
c001c3b6:	55                   	push   ebp
c001c3b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3bb:	e8 50 fe ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3c0:	83 c4 2c             	add    esp,0x2c
c001c3c3:	0f b7 c0             	movzx  eax,ax
c001c3c6:	5b                   	pop    ebx
c001c3c7:	09 f0                	or     eax,esi
c001c3c9:	5e                   	pop    esi
c001c3ca:	5f                   	pop    edi
c001c3cb:	5d                   	pop    ebp
c001c3cc:	c3                   	ret    
c001c3cd:	90                   	nop

c001c3ce <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3ce:	53                   	push   ebx
c001c3cf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3d4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3d9:	c1 e1 10             	shl    ecx,0x10
c001c3dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3e0:	25 fc 00 00 00       	and    eax,0xfc
c001c3e5:	09 c1                	or     ecx,eax
c001c3e7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3ec:	c1 e0 08             	shl    eax,0x8
c001c3ef:	09 c1                	or     ecx,eax
c001c3f1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c3f6:	c1 e0 0b             	shl    eax,0xb
c001c3f9:	09 c1                	or     ecx,eax
c001c3fb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c401:	89 c8                	mov    eax,ecx
c001c403:	ef                   	out    dx,eax
c001c404:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c409:	ed                   	in     eax,dx
c001c40a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c40f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c414:	74 0a                	je     c001c420 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c416:	0f b7 d8             	movzx  ebx,ax
c001c419:	89 d0                	mov    eax,edx
c001c41b:	c1 e0 10             	shl    eax,0x10
c001c41e:	eb 05                	jmp    c001c425 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c420:	66 31 c0             	xor    ax,ax
c001c423:	89 d3                	mov    ebx,edx
c001c425:	09 c3                	or     ebx,eax
c001c427:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c42c:	89 c8                	mov    eax,ecx
c001c42e:	ef                   	out    dx,eax
c001c42f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c434:	89 d8                	mov    eax,ebx
c001c436:	ef                   	out    dx,eax
c001c437:	5b                   	pop    ebx
c001c438:	c3                   	ret    
c001c439:	90                   	nop

c001c43a <PCI::checkBus(unsigned char)>:
c001c43a:	56                   	push   esi
c001c43b:	31 f6                	xor    esi,esi
c001c43d:	53                   	push   ebx
c001c43e:	51                   	push   ecx
c001c43f:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c443:	52                   	push   edx
c001c444:	56                   	push   esi
c001c445:	46                   	inc    esi
c001c446:	0f b6 c3             	movzx  eax,bl
c001c449:	50                   	push   eax
c001c44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c44e:	e8 4d 03 00 00       	call   c001c7a0 <PCI::checkDevice(unsigned char, unsigned char)>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	83 fe 20             	cmp    esi,0x20
c001c459:	75 e8                	jne    c001c443 <PCI::checkBus(unsigned char)+0x9>
c001c45b:	58                   	pop    eax
c001c45c:	5b                   	pop    ebx
c001c45d:	5e                   	pop    esi
c001c45e:	c3                   	ret    
c001c45f:	90                   	nop

c001c460 <PCI::foundDevice(PCIDeviceInfo)>:
c001c460:	55                   	push   ebp
c001c461:	57                   	push   edi
c001c462:	56                   	push   esi
c001c463:	53                   	push   ebx
c001c464:	83 ec 1c             	sub    esp,0x1c
c001c467:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c46b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c471:	0f 84 51 01 00 00    	je     c001c5c8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c477:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c47b:	66 81 f9 06 04       	cmp    cx,0x406
c001c480:	75 2c                	jne    c001c4ae <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c482:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c487:	50                   	push   eax
c001c488:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c48d:	50                   	push   eax
c001c48e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c493:	50                   	push   eax
c001c494:	56                   	push   esi
c001c495:	e8 b0 fe ff ff       	call   c001c34a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c49a:	0f b6 c0             	movzx  eax,al
c001c49d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4a1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4a5:	83 c4 2c             	add    esp,0x2c
c001c4a8:	5b                   	pop    ebx
c001c4a9:	5e                   	pop    esi
c001c4aa:	5f                   	pop    edi
c001c4ab:	5d                   	pop    ebp
c001c4ac:	eb 8c                	jmp    c001c43a <PCI::checkBus(unsigned char)>
c001c4ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4b2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4bc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4c0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4c4:	88 d3                	mov    bl,dl
c001c4c6:	85 c0                	test   eax,eax
c001c4c8:	74 33                	je     c001c4fd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4cd:	85 d2                	test   edx,edx
c001c4cf:	74 28                	je     c001c4f9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4d1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4d7:	31 ef                	xor    edi,ebp
c001c4d9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4df:	75 18                	jne    c001c4f9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4e5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4eb:	75 0c                	jne    c001c4f9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4ed:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4f3:	0f 84 cf 00 00 00    	je     c001c5c8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c4f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4fb:	eb c9                	jmp    c001c4c6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c4fd:	66 81 f9 01 06       	cmp    cx,0x601
c001c502:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c506:	75 18                	jne    c001c520 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	68 58 01 00 00       	push   0x158
c001c510:	e8 c1 2b ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001c515:	59                   	pop    ecx
c001c516:	89 c5                	mov    ebp,eax
c001c518:	5f                   	pop    edi
c001c519:	68 68 34 02 c0       	push   0xc0023468
c001c51e:	eb 7d                	jmp    c001c59d <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c520:	66 81 f9 01 01       	cmp    cx,0x101
c001c525:	75 60                	jne    c001c587 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c527:	83 ec 0c             	sub    esp,0xc
c001c52a:	68 70 02 00 00       	push   0x270
c001c52f:	e8 a2 2b ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001c534:	89 04 24             	mov    DWORD PTR [esp],eax
c001c537:	89 c5                	mov    ebp,eax
c001c539:	e8 26 03 00 00       	call   c001c864 <IDE::IDE()>
c001c53e:	58                   	pop    eax
c001c53f:	5a                   	pop    edx
c001c540:	55                   	push   ebp
c001c541:	56                   	push   esi
c001c542:	e8 d9 40 ff ff       	call   c0010620 <Device::addChild(Device*)>
c001c547:	83 ec 1c             	sub    esp,0x1c
c001c54a:	b9 09 00 00 00       	mov    ecx,0x9
c001c54f:	fc                   	cld    
c001c550:	89 e7                	mov    edi,esp
c001c552:	89 de                	mov    esi,ebx
c001c554:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c556:	55                   	push   ebp
c001c557:	e8 a2 3f ff ff       	call   c00104fe <Device::preOpenPCI(PCIDeviceInfo)>
c001c55c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c55f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c563:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c56b:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c573:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c57b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57e:	83 c4 4c             	add    esp,0x4c
c001c581:	5b                   	pop    ebx
c001c582:	5e                   	pop    esi
c001c583:	5f                   	pop    edi
c001c584:	5d                   	pop    ebp
c001c585:	ff e0                	jmp    eax
c001c587:	83 ec 0c             	sub    esp,0xc
c001c58a:	68 58 01 00 00       	push   0x158
c001c58f:	e8 42 2b ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001c594:	59                   	pop    ecx
c001c595:	89 c5                	mov    ebp,eax
c001c597:	5f                   	pop    edi
c001c598:	68 87 34 02 c0       	push   0xc0023487
c001c59d:	55                   	push   ebp
c001c59e:	e8 69 43 ff ff       	call   c001090c <DriverlessDevice::DriverlessDevice(char const*)>
c001c5a3:	58                   	pop    eax
c001c5a4:	5a                   	pop    edx
c001c5a5:	55                   	push   ebp
c001c5a6:	56                   	push   esi
c001c5a7:	e8 74 40 ff ff       	call   c0010620 <Device::addChild(Device*)>
c001c5ac:	b9 09 00 00 00       	mov    ecx,0x9
c001c5b1:	fc                   	cld    
c001c5b2:	89 df                	mov    edi,ebx
c001c5b4:	89 de                	mov    esi,ebx
c001c5b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5b8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5bc:	83 c4 2c             	add    esp,0x2c
c001c5bf:	5b                   	pop    ebx
c001c5c0:	5e                   	pop    esi
c001c5c1:	5f                   	pop    edi
c001c5c2:	5d                   	pop    ebp
c001c5c3:	e9 36 3f ff ff       	jmp    c00104fe <Device::preOpenPCI(PCIDeviceInfo)>
c001c5c8:	83 c4 1c             	add    esp,0x1c
c001c5cb:	5b                   	pop    ebx
c001c5cc:	5e                   	pop    esi
c001c5cd:	5f                   	pop    edi
c001c5ce:	5d                   	pop    ebp
c001c5cf:	c3                   	ret    

c001c5d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5d0:	55                   	push   ebp
c001c5d1:	57                   	push   edi
c001c5d2:	56                   	push   esi
c001c5d3:	53                   	push   ebx
c001c5d4:	83 ec 5c             	sub    esp,0x5c
c001c5d7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5df:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5e7:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5ef:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5f4:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c5f9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c5fe:	6a 0c                	push   0xc
c001c600:	55                   	push   ebp
c001c601:	53                   	push   ebx
c001c602:	57                   	push   edi
c001c603:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c60a:	e8 01 fc ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c60f:	83 c4 0c             	add    esp,0xc
c001c612:	6a 00                	push   0x0
c001c614:	68 a1 34 02 c0       	push   0xc00234a1
c001c619:	e8 ed 2b ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001c61e:	55                   	push   ebp
c001c61f:	53                   	push   ebx
c001c620:	57                   	push   edi
c001c621:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c628:	e8 71 fc ff ff       	call   c001c29e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c62d:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c632:	83 c4 20             	add    esp,0x20
c001c635:	55                   	push   ebp
c001c636:	53                   	push   ebx
c001c637:	57                   	push   edi
c001c638:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c63c:	e8 e7 fc ff ff       	call   c001c328 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c641:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c648:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c64c:	55                   	push   ebp
c001c64d:	53                   	push   ebx
c001c64e:	57                   	push   edi
c001c64f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c656:	e8 b5 fb ff ff       	call   c001c210 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c65b:	0f b6 c4             	movzx  eax,ah
c001c65e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c662:	83 c4 18             	add    esp,0x18
c001c665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c669:	68 b5 34 02 c0       	push   0xc00234b5
c001c66e:	e8 98 2b ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001c673:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c677:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c67b:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001c680:	83 c4 10             	add    esp,0x10
c001c683:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c689:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c690:	74 6c                	je     c001c6fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c692:	31 f6                	xor    esi,esi
c001c694:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001c69a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6a0:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6a6:	7e 56                	jle    c001c6fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6a8:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6ab:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6b2:	39 cb                	cmp    ebx,ecx
c001c6b4:	75 45                	jne    c001c6fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6b6:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6bd:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6c1:	75 38                	jne    c001c6fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6c3:	83 ec 0c             	sub    esp,0xc
c001c6c6:	68 c4 34 02 c0       	push   0xc00234c4
c001c6cb:	e8 3b 2b ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001c6d0:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001c6d6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6dc:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6e4:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6e8:	52                   	push   edx
c001c6e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6ed:	53                   	push   ebx
c001c6ee:	68 e9 34 02 c0       	push   0xc00234e9
c001c6f3:	e8 13 2b ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001c6f8:	83 c4 20             	add    esp,0x20
c001c6fb:	46                   	inc    esi
c001c6fc:	eb 96                	jmp    c001c694 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c6fe:	31 d2                	xor    edx,edx
c001c700:	83 ec 0c             	sub    esp,0xc
c001c703:	55                   	push   ebp
c001c704:	53                   	push   ebx
c001c705:	57                   	push   edi
c001c706:	52                   	push   edx
c001c707:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c70b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c712:	e8 57 fc ff ff       	call   c001c36e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c717:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c71b:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c71f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c723:	42                   	inc    edx
c001c724:	83 c4 20             	add    esp,0x20
c001c727:	83 fa 06             	cmp    edx,0x6
c001c72a:	75 d4                	jne    c001c700 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c72c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c730:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c734:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c738:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c73c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c740:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c744:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c749:	86 e0                	xchg   al,ah
c001c74b:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c750:	55                   	push   ebp
c001c751:	53                   	push   ebx
c001c752:	57                   	push   edi
c001c753:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c757:	e8 86 fb ff ff       	call   c001c2e2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c75c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c760:	55                   	push   ebp
c001c761:	53                   	push   ebx
c001c762:	57                   	push   edi
c001c763:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c76a:	e8 e9 fa ff ff       	call   c001c258 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c777:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c77b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c77f:	b9 09 00 00 00       	mov    ecx,0x9
c001c784:	fc                   	cld    
c001c785:	89 e7                	mov    edi,esp
c001c787:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c789:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c790:	e8 cb fc ff ff       	call   c001c460 <PCI::foundDevice(PCIDeviceInfo)>
c001c795:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c79b:	5b                   	pop    ebx
c001c79c:	5e                   	pop    esi
c001c79d:	5f                   	pop    edi
c001c79e:	5d                   	pop    ebp
c001c79f:	c3                   	ret    

c001c7a0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7a0:	55                   	push   ebp
c001c7a1:	57                   	push   edi
c001c7a2:	56                   	push   esi
c001c7a3:	53                   	push   ebx
c001c7a4:	83 ec 0c             	sub    esp,0xc
c001c7a7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7b5:	6a 00                	push   0x0
c001c7b7:	56                   	push   esi
c001c7b8:	57                   	push   edi
c001c7b9:	55                   	push   ebp
c001c7ba:	e8 99 fa ff ff       	call   c001c258 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7bf:	6a 00                	push   0x0
c001c7c1:	56                   	push   esi
c001c7c2:	57                   	push   edi
c001c7c3:	55                   	push   ebp
c001c7c4:	e8 07 fe ff ff       	call   c001c5d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7c9:	83 c4 20             	add    esp,0x20
c001c7cc:	6a 00                	push   0x0
c001c7ce:	56                   	push   esi
c001c7cf:	57                   	push   edi
c001c7d0:	55                   	push   ebp
c001c7d1:	e8 a4 fa ff ff       	call   c001c27a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7d6:	83 c4 10             	add    esp,0x10
c001c7d9:	84 c0                	test   al,al
c001c7db:	79 27                	jns    c001c804 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7dd:	bb 01 00 00 00       	mov    ebx,0x1
c001c7e2:	53                   	push   ebx
c001c7e3:	56                   	push   esi
c001c7e4:	57                   	push   edi
c001c7e5:	55                   	push   ebp
c001c7e6:	e8 6d fa ff ff       	call   c001c258 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	66 40                	inc    ax
c001c7f0:	74 0c                	je     c001c7fe <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7f2:	53                   	push   ebx
c001c7f3:	56                   	push   esi
c001c7f4:	57                   	push   edi
c001c7f5:	55                   	push   ebp
c001c7f6:	e8 d5 fd ff ff       	call   c001c5d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	43                   	inc    ebx
c001c7ff:	83 fb 08             	cmp    ebx,0x8
c001c802:	75 de                	jne    c001c7e2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c804:	83 c4 0c             	add    esp,0xc
c001c807:	5b                   	pop    ebx
c001c808:	5e                   	pop    esi
c001c809:	5f                   	pop    edi
c001c80a:	5d                   	pop    ebp
c001c80b:	c3                   	ret    

c001c80c <PCI::detect()>:
c001c80c:	56                   	push   esi
c001c80d:	53                   	push   ebx
c001c80e:	53                   	push   ebx
c001c80f:	31 db                	xor    ebx,ebx
c001c811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c815:	6a 00                	push   0x0
c001c817:	6a 00                	push   0x0
c001c819:	6a 00                	push   0x0
c001c81b:	56                   	push   esi
c001c81c:	e8 59 fa ff ff       	call   c001c27a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	a8 80                	test   al,0x80
c001c826:	75 21                	jne    c001c849 <PCI::detect()+0x3d>
c001c828:	51                   	push   ecx
c001c829:	51                   	push   ecx
c001c82a:	6a 00                	push   0x0
c001c82c:	56                   	push   esi
c001c82d:	e8 08 fc ff ff       	call   c001c43a <PCI::checkBus(unsigned char)>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	eb 24                	jmp    c001c85b <PCI::detect()+0x4f>
c001c837:	52                   	push   edx
c001c838:	52                   	push   edx
c001c839:	53                   	push   ebx
c001c83a:	43                   	inc    ebx
c001c83b:	56                   	push   esi
c001c83c:	e8 f9 fb ff ff       	call   c001c43a <PCI::checkBus(unsigned char)>
c001c841:	83 c4 10             	add    esp,0x10
c001c844:	83 fb 08             	cmp    ebx,0x8
c001c847:	74 12                	je     c001c85b <PCI::detect()+0x4f>
c001c849:	53                   	push   ebx
c001c84a:	6a 00                	push   0x0
c001c84c:	6a 00                	push   0x0
c001c84e:	56                   	push   esi
c001c84f:	e8 04 fa ff ff       	call   c001c258 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	66 40                	inc    ax
c001c859:	74 dc                	je     c001c837 <PCI::detect()+0x2b>
c001c85b:	58                   	pop    eax
c001c85c:	5b                   	pop    ebx
c001c85d:	5e                   	pop    esi
c001c85e:	c3                   	ret    
c001c85f:	90                   	nop

c001c860 <IDE::close(int, int, void*)>:
c001c860:	83 c8 ff             	or     eax,0xffffffff
c001c863:	c3                   	ret    

c001c864 <IDE::IDE()>:
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86b:	83 ec 08             	sub    esp,0x8
c001c86e:	68 30 35 02 c0       	push   0xc0023530
c001c873:	50                   	push   eax
c001c874:	e8 29 41 ff ff       	call   c00109a2 <HardDiskController::HardDiskController(char const*)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001c881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c885:	89 10                	mov    DWORD PTR [eax],edx
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c892:	90                   	nop
c001c893:	83 c4 0c             	add    esp,0xc
c001c896:	c3                   	ret    
c001c897:	90                   	nop

c001c898 <IDE::prepareInterrupt(unsigned char)>:
c001c898:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c89d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8a1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8a9:	c3                   	ret    

c001c8aa <selectDrive(unsigned char, unsigned char)>:
c001c8aa:	c3                   	ret    
c001c8ab:	90                   	nop

c001c8ac <IDE::getBase(unsigned char)>:
c001c8ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8b5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8bd:	c3                   	ret    

c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8be:	55                   	push   ebp
c001c8bf:	57                   	push   edi
c001c8c0:	56                   	push   esi
c001c8c1:	53                   	push   ebx
c001c8c2:	83 ec 1c             	sub    esp,0x1c
c001c8c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8d5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8d8:	80 f9 03             	cmp    cl,0x3
c001c8db:	77 51                	ja     c001c92e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8dd:	0f b6 f2             	movzx  esi,dl
c001c8e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8e4:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8e7:	0f b6 db             	movzx  ebx,bl
c001c8ea:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8ee:	83 ca 80             	or     edx,0xffffff80
c001c8f1:	0f b6 d2             	movzx  edx,dl
c001c8f4:	52                   	push   edx
c001c8f5:	6a 0c                	push   0xc
c001c8f7:	56                   	push   esi
c001c8f8:	57                   	push   edi
c001c8f9:	e8 c0 ff ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c903:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c907:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c90b:	ee                   	out    dx,al
c001c90c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c911:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c915:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c919:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c91d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c925:	83 c4 2c             	add    esp,0x2c
c001c928:	5b                   	pop    ebx
c001c929:	5e                   	pop    esi
c001c92a:	5f                   	pop    edi
c001c92b:	5d                   	pop    ebp
c001c92c:	eb 90                	jmp    c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92e:	80 fb 07             	cmp    bl,0x7
c001c931:	77 12                	ja     c001c945 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c933:	0f b6 d2             	movzx  edx,dl
c001c936:	0f b6 db             	movzx  ebx,bl
c001c939:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c941:	89 da                	mov    edx,ebx
c001c943:	eb 2f                	jmp    c001c974 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c945:	80 fb 0d             	cmp    bl,0xd
c001c948:	77 13                	ja     c001c95d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c94a:	0f b6 d2             	movzx  edx,dl
c001c94d:	0f b6 db             	movzx  ebx,bl
c001c950:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c957:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c95b:	eb 17                	jmp    c001c974 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c95d:	80 fb 15             	cmp    bl,0x15
c001c960:	77 13                	ja     c001c975 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c962:	0f b6 d2             	movzx  edx,dl
c001c965:	0f b6 db             	movzx  ebx,bl
c001c968:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c970:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c974:	ee                   	out    dx,al
c001c975:	83 c4 1c             	add    esp,0x1c
c001c978:	5b                   	pop    ebx
c001c979:	5e                   	pop    esi
c001c97a:	5f                   	pop    edi
c001c97b:	5d                   	pop    ebp
c001c97c:	c3                   	ret    
c001c97d:	90                   	nop

c001c97e <IDE::read(unsigned char, unsigned char)>:
c001c97e:	55                   	push   ebp
c001c97f:	57                   	push   edi
c001c980:	56                   	push   esi
c001c981:	53                   	push   ebx
c001c982:	83 ec 1c             	sub    esp,0x1c
c001c985:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c989:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c98d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c991:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c994:	3c 03                	cmp    al,0x3
c001c996:	77 43                	ja     c001c9db <IDE::read(unsigned char, unsigned char)+0x5d>
c001c998:	0f b6 f2             	movzx  esi,dl
c001c99b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c99e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9a2:	83 c8 80             	or     eax,0xffffff80
c001c9a5:	0f b6 c0             	movzx  eax,al
c001c9a8:	50                   	push   eax
c001c9a9:	6a 0c                	push   0xc
c001c9ab:	56                   	push   esi
c001c9ac:	57                   	push   edi
c001c9ad:	e8 0c ff ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9b7:	0f b6 c3             	movzx  eax,bl
c001c9ba:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9be:	ec                   	in     al,dx
c001c9bf:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9c8:	52                   	push   edx
c001c9c9:	6a 0c                	push   0xc
c001c9cb:	56                   	push   esi
c001c9cc:	57                   	push   edi
c001c9cd:	e8 ec fe ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d2:	83 c4 20             	add    esp,0x20
c001c9d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9d9:	eb 49                	jmp    c001ca24 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9db:	80 fb 07             	cmp    bl,0x7
c001c9de:	77 12                	ja     c001c9f2 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9e0:	0f b6 d2             	movzx  edx,dl
c001c9e3:	0f b6 c3             	movzx  eax,bl
c001c9e6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9ee:	89 c2                	mov    edx,eax
c001c9f0:	eb 31                	jmp    c001ca23 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9f2:	80 fb 0d             	cmp    bl,0xd
c001c9f5:	77 13                	ja     c001ca0a <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9f7:	0f b6 d2             	movzx  edx,dl
c001c9fa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca01:	0f b6 d3             	movzx  edx,bl
c001ca04:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca08:	eb 19                	jmp    c001ca23 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca0a:	31 c0                	xor    eax,eax
c001ca0c:	80 fb 15             	cmp    bl,0x15
c001ca0f:	77 13                	ja     c001ca24 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca11:	0f b6 d2             	movzx  edx,dl
c001ca14:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca1c:	0f b6 d3             	movzx  edx,bl
c001ca1f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca23:	ec                   	in     al,dx
c001ca24:	83 c4 1c             	add    esp,0x1c
c001ca27:	5b                   	pop    ebx
c001ca28:	5e                   	pop    esi
c001ca29:	5f                   	pop    edi
c001ca2a:	5d                   	pop    ebp
c001ca2b:	c3                   	ret    

c001ca2c <IDE::waitInterrupt(unsigned char)>:
c001ca2c:	57                   	push   edi
c001ca2d:	56                   	push   esi
c001ca2e:	31 f6                	xor    esi,esi
c001ca30:	53                   	push   ebx
c001ca31:	83 ec 10             	sub    esp,0x10
c001ca34:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca3c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca45:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca4c:	84 db                	test   bl,bl
c001ca4e:	75 37                	jne    c001ca87 <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca50:	52                   	push   edx
c001ca51:	6a 0c                	push   0xc
c001ca53:	50                   	push   eax
c001ca54:	57                   	push   edi
c001ca55:	e8 24 ff ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	a8 01                	test   al,0x1
c001ca5f:	75 2e                	jne    c001ca8f <IDE::waitInterrupt(unsigned char)+0x63>
c001ca61:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca67:	75 16                	jne    c001ca7f <IDE::waitInterrupt(unsigned char)+0x53>
c001ca69:	83 fe 32             	cmp    esi,0x32
c001ca6c:	7e 11                	jle    c001ca7f <IDE::waitInterrupt(unsigned char)+0x53>
c001ca6e:	50                   	push   eax
c001ca6f:	50                   	push   eax
c001ca70:	6a 00                	push   0x0
c001ca72:	68 80 96 98 00       	push   0x989680
c001ca77:	e8 25 c5 ff ff       	call   c0018fa1 <nanoSleep(unsigned long long)>
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	83 fe 3c             	cmp    esi,0x3c
c001ca82:	74 0b                	je     c001ca8f <IDE::waitInterrupt(unsigned char)+0x63>
c001ca84:	46                   	inc    esi
c001ca85:	eb b9                	jmp    c001ca40 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca87:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	88 d8                	mov    al,bl
c001ca94:	5b                   	pop    ebx
c001ca95:	5e                   	pop    esi
c001ca96:	5f                   	pop    edi
c001ca97:	c3                   	ret    

c001ca98 <ideChannel0IRQHandler(regs*, void*)>:
c001ca98:	83 ec 10             	sub    esp,0x10
c001ca9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca9f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001caa6:	6a 07                	push   0x7
c001caa8:	6a 00                	push   0x0
c001caaa:	50                   	push   eax
c001caab:	e8 ce fe ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001cab0:	83 c4 1c             	add    esp,0x1c
c001cab3:	c3                   	ret    

c001cab4 <ideChannel1IRQHandler(regs*, void*)>:
c001cab4:	83 ec 10             	sub    esp,0x10
c001cab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cabb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cac2:	6a 07                	push   0x7
c001cac4:	6a 01                	push   0x1
c001cac6:	50                   	push   eax
c001cac7:	e8 b2 fe ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001cacc:	83 c4 1c             	add    esp,0x1c
c001cacf:	c3                   	ret    

c001cad0 <IDE::enableIRQs(unsigned char, bool)>:
c001cad0:	57                   	push   edi
c001cad1:	56                   	push   esi
c001cad2:	be 04 00 00 00       	mov    esi,0x4
c001cad7:	53                   	push   ebx
c001cad8:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cadd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cae2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cae6:	0f 94 c0             	sete   al
c001cae9:	01 c0                	add    eax,eax
c001caeb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001caf2:	0f b6 c0             	movzx  eax,al
c001caf5:	50                   	push   eax
c001caf6:	6a 0c                	push   0xc
c001caf8:	57                   	push   edi
c001caf9:	53                   	push   ebx
c001cafa:	e8 bf fd ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	50                   	push   eax
c001cb03:	6a 0c                	push   0xc
c001cb05:	57                   	push   edi
c001cb06:	53                   	push   ebx
c001cb07:	e8 72 fe ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001cb0c:	83 c4 10             	add    esp,0x10
c001cb0f:	4e                   	dec    esi
c001cb10:	75 f0                	jne    c001cb02 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb12:	5b                   	pop    ebx
c001cb13:	5e                   	pop    esi
c001cb14:	5f                   	pop    edi
c001cb15:	c3                   	ret    

c001cb16 <IDE::open(int, int, void*)>:
c001cb16:	55                   	push   ebp
c001cb17:	57                   	push   edi
c001cb18:	56                   	push   esi
c001cb19:	53                   	push   ebx
c001cb1a:	83 ec 1c             	sub    esp,0x1c
c001cb1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb21:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb2a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb33:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb3a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb41:	0f 85 b2 02 00 00    	jne    c001cdf9 <IDE::open(int, int, void*)+0x2e3>
c001cb47:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb4d:	88 04 24             	mov    BYTE PTR [esp],al
c001cb50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb53:	83 e0 7f             	and    eax,0x7f
c001cb56:	83 f8 05             	cmp    eax,0x5
c001cb59:	74 05                	je     c001cb60 <IDE::open(int, int, void*)+0x4a>
c001cb5b:	83 f8 0f             	cmp    eax,0xf
c001cb5e:	75 32                	jne    c001cb92 <IDE::open(int, int, void*)+0x7c>
c001cb60:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb66:	83 e0 fc             	and    eax,0xfffffffc
c001cb69:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb70:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb76:	83 e0 fc             	and    eax,0xfffffffc
c001cb79:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb80:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb86:	83 e0 fc             	and    eax,0xfffffffc
c001cb89:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb90:	eb 14                	jmp    c001cba6 <IDE::open(int, int, void*)+0x90>
c001cb92:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb9c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cba6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbad:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbb8:	89 c6                	mov    esi,eax
c001cbba:	89 e8                	mov    eax,ebp
c001cbbc:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbc1:	c1 e6 10             	shl    esi,0x10
c001cbc4:	89 fa                	mov    edx,edi
c001cbc6:	c1 e0 0b             	shl    eax,0xb
c001cbc9:	09 f0                	or     eax,esi
c001cbcb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbd2:	c1 e6 08             	shl    esi,0x8
c001cbd5:	09 c6                	or     esi,eax
c001cbd7:	89 f0                	mov    eax,esi
c001cbd9:	0d 08 00 00 80       	or     eax,0x80000008
c001cbde:	ef                   	out    dx,eax
c001cbdf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbe4:	89 ca                	mov    edx,ecx
c001cbe6:	ed                   	in     eax,dx
c001cbe7:	c1 e8 10             	shr    eax,0x10
c001cbea:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbef:	0f 84 f3 00 00 00    	je     c001cce8 <IDE::open(int, int, void*)+0x1d2>
c001cbf5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cbfb:	89 fa                	mov    edx,edi
c001cbfd:	89 f0                	mov    eax,esi
c001cbff:	ef                   	out    dx,eax
c001cc00:	b0 fe                	mov    al,0xfe
c001cc02:	89 ca                	mov    edx,ecx
c001cc04:	ee                   	out    dx,al
c001cc05:	89 f0                	mov    eax,esi
c001cc07:	89 fa                	mov    edx,edi
c001cc09:	ef                   	out    dx,eax
c001cc0a:	89 ca                	mov    edx,ecx
c001cc0c:	ed                   	in     eax,dx
c001cc0d:	3c fe                	cmp    al,0xfe
c001cc0f:	0f 85 a9 00 00 00    	jne    c001ccbe <IDE::open(int, int, void*)+0x1a8>
c001cc15:	8b 15 88 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024788
c001cc1b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc22:	74 33                	je     c001cc57 <IDE::open(int, int, void*)+0x141>
c001cc24:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc2a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc2e:	40                   	inc    eax
c001cc2f:	83 ec 0c             	sub    esp,0xc
c001cc32:	0f b6 c0             	movzx  eax,al
c001cc35:	50                   	push   eax
c001cc36:	55                   	push   ebp
c001cc37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc3b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc41:	51                   	push   ecx
c001cc42:	e8 1d 72 ff ff       	call   c0013e64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc47:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc4c:	83 c4 1c             	add    esp,0x1c
c001cc4f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc55:	eb 0a                	jmp    c001cc61 <IDE::open(int, int, void*)+0x14b>
c001cc57:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc61:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc68:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc6f:	c1 e1 10             	shl    ecx,0x10
c001cc72:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc77:	c1 e0 08             	shl    eax,0x8
c001cc7a:	89 fa                	mov    edx,edi
c001cc7c:	09 c1                	or     ecx,eax
c001cc7e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc85:	c1 e0 0b             	shl    eax,0xb
c001cc88:	09 c1                	or     ecx,eax
c001cc8a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc90:	89 c8                	mov    eax,ecx
c001cc92:	ef                   	out    dx,eax
c001cc93:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc98:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cc9e:	89 f2                	mov    edx,esi
c001cca0:	ee                   	out    dx,al
c001cca1:	89 c8                	mov    eax,ecx
c001cca3:	89 fa                	mov    edx,edi
c001cca5:	ef                   	out    dx,eax
c001cca6:	89 f2                	mov    edx,esi
c001cca8:	ed                   	in     eax,dx
c001cca9:	0f b6 c0             	movzx  eax,al
c001ccac:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccb2:	74 44                	je     c001ccf8 <IDE::open(int, int, void*)+0x1e2>
c001ccb4:	83 ec 0c             	sub    esp,0xc
c001ccb7:	68 48 35 02 c0       	push   0xc0023548
c001ccbc:	eb 32                	jmp    c001ccf0 <IDE::open(int, int, void*)+0x1da>
c001ccbe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccc7:	75 15                	jne    c001ccde <IDE::open(int, int, void*)+0x1c8>
c001ccc9:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cccd:	74 06                	je     c001ccd5 <IDE::open(int, int, void*)+0x1bf>
c001cccf:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001ccd3:	75 09                	jne    c001ccde <IDE::open(int, int, void*)+0x1c8>
c001ccd5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccdc:	eb 1a                	jmp    c001ccf8 <IDE::open(int, int, void*)+0x1e2>
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	68 50 35 02 c0       	push   0xc0023550
c001cce6:	eb 08                	jmp    c001ccf0 <IDE::open(int, int, void*)+0x1da>
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	68 81 35 02 c0       	push   0xc0023581
c001ccf0:	e8 45 8d ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001ccf5:	83 c4 10             	add    esp,0x10
c001ccf8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ccff:	79 1a                	jns    c001cd1b <IDE::open(int, int, void*)+0x205>
c001cd01:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd07:	83 e0 fc             	and    eax,0xfffffffc
c001cd0a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd11:	83 c0 08             	add    eax,0x8
c001cd14:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd1b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd21:	89 c2                	mov    edx,eax
c001cd23:	83 e2 0f             	and    edx,0xf
c001cd26:	66 83 fa 08          	cmp    dx,0x8
c001cd2a:	75 0a                	jne    c001cd36 <IDE::open(int, int, void*)+0x220>
c001cd2c:	83 e8 02             	sub    eax,0x2
c001cd2f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd36:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd3c:	89 c2                	mov    edx,eax
c001cd3e:	83 e2 0f             	and    edx,0xf
c001cd41:	66 83 fa 08          	cmp    dx,0x8
c001cd45:	75 0a                	jne    c001cd51 <IDE::open(int, int, void*)+0x23b>
c001cd47:	83 e8 02             	sub    eax,0x2
c001cd4a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd51:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd58:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd5f:	89 d0                	mov    eax,edx
c001cd61:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd64:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd68:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd6c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd6f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd74:	0f b6 c9             	movzx  ecx,cl
c001cd77:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd7e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd81:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd85:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd89:	8d 50 02             	lea    edx,[eax+0x2]
c001cd8c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd91:	0f b6 d2             	movzx  edx,dl
c001cd94:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd9a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd9d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cda1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cda5:	8d 48 03             	lea    ecx,[eax+0x3]
c001cda8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdad:	0f b6 c9             	movzx  ecx,cl
c001cdb0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdb6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdb9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdbd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdc1:	8d 50 04             	lea    edx,[eax+0x4]
c001cdc4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdca:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdcf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdd6:	66 85 f6             	test   si,si
c001cdd9:	74 3e                	je     c001ce19 <IDE::open(int, int, void*)+0x303>
c001cddb:	0f b6 d2             	movzx  edx,dl
c001cdde:	83 c0 05             	add    eax,0x5
c001cde1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cde4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cde8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdf2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdf7:	eb 20                	jmp    c001ce19 <IDE::open(int, int, void*)+0x303>
c001cdf9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce03:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce0d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce14:	e9 02 ff ff ff       	jmp    c001cd1b <IDE::open(int, int, void*)+0x205>
c001ce19:	52                   	push   edx
c001ce1a:	52                   	push   edx
c001ce1b:	6a 00                	push   0x0
c001ce1d:	53                   	push   ebx
c001ce1e:	e8 75 fa ff ff       	call   c001c898 <IDE::prepareInterrupt(unsigned char)>
c001ce23:	59                   	pop    ecx
c001ce24:	5e                   	pop    esi
c001ce25:	6a 01                	push   0x1
c001ce27:	53                   	push   ebx
c001ce28:	e8 6b fa ff ff       	call   c001c898 <IDE::prepareInterrupt(unsigned char)>
c001ce2d:	83 c4 0c             	add    esp,0xc
c001ce30:	6a 00                	push   0x0
c001ce32:	6a 00                	push   0x0
c001ce34:	53                   	push   ebx
c001ce35:	e8 96 fc ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001ce3a:	83 c4 0c             	add    esp,0xc
c001ce3d:	6a 00                	push   0x0
c001ce3f:	6a 01                	push   0x1
c001ce41:	53                   	push   ebx
c001ce42:	e8 89 fc ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce51:	74 40                	je     c001ce93 <IDE::open(int, int, void*)+0x37d>
c001ce53:	83 ec 0c             	sub    esp,0xc
c001ce56:	68 ab 35 02 c0       	push   0xc00235ab
c001ce5b:	e8 ab 23 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001ce60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce63:	6a 01                	push   0x1
c001ce65:	68 98 ca 01 c0       	push   0xc001ca98
c001ce6a:	6a 0e                	push   0xe
c001ce6c:	53                   	push   ebx
c001ce6d:	e8 02 37 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce72:	83 c4 14             	add    esp,0x14
c001ce75:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce7b:	53                   	push   ebx
c001ce7c:	6a 01                	push   0x1
c001ce7e:	68 b4 ca 01 c0       	push   0xc001cab4
c001ce83:	6a 0f                	push   0xf
c001ce85:	53                   	push   ebx
c001ce86:	e8 e9 36 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce8b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce91:	eb 4a                	jmp    c001cedd <IDE::open(int, int, void*)+0x3c7>
c001ce93:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ce9d:	50                   	push   eax
c001ce9e:	6a 0f                	push   0xf
c001cea0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cea6:	68 c7 35 02 c0       	push   0xc00235c7
c001ceab:	e8 5b 23 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001ceb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb3:	6a 00                	push   0x0
c001ceb5:	68 98 ca 01 c0       	push   0xc001ca98
c001ceba:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cec0:	53                   	push   ebx
c001cec1:	e8 ae 36 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cec6:	83 c4 14             	add    esp,0x14
c001cec9:	53                   	push   ebx
c001ceca:	6a 00                	push   0x0
c001cecc:	68 b4 ca 01 c0       	push   0xc001cab4
c001ced1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ced7:	53                   	push   ebx
c001ced8:	e8 97 36 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cedd:	83 c4 20             	add    esp,0x20
c001cee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee2:	83 ec 0c             	sub    esp,0xc
c001cee5:	53                   	push   ebx
c001cee6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cee9:	83 c4 0c             	add    esp,0xc
c001ceec:	6a 07                	push   0x7
c001ceee:	6a 00                	push   0x0
c001cef0:	53                   	push   ebx
c001cef1:	e8 88 fa ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001cef6:	83 c4 0c             	add    esp,0xc
c001cef9:	6a 07                	push   0x7
c001cefb:	6a 01                	push   0x1
c001cefd:	53                   	push   ebx
c001cefe:	e8 7b fa ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001cf03:	83 c4 0c             	add    esp,0xc
c001cf06:	6a 01                	push   0x1
c001cf08:	6a 00                	push   0x0
c001cf0a:	53                   	push   ebx
c001cf0b:	e8 c0 fb ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001cf10:	83 c4 0c             	add    esp,0xc
c001cf13:	6a 01                	push   0x1
c001cf15:	6a 01                	push   0x1
c001cf17:	53                   	push   ebx
c001cf18:	e8 b3 fb ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001cf1d:	83 c4 2c             	add    esp,0x2c
c001cf20:	31 c0                	xor    eax,eax
c001cf22:	5b                   	pop    ebx
c001cf23:	5e                   	pop    esi
c001cf24:	5f                   	pop    edi
c001cf25:	5d                   	pop    ebp
c001cf26:	c3                   	ret    
c001cf27:	90                   	nop

c001cf28 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf28:	55                   	push   ebp
c001cf29:	57                   	push   edi
c001cf2a:	56                   	push   esi
c001cf2b:	53                   	push   ebx
c001cf2c:	83 ec 1c             	sub    esp,0x1c
c001cf2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf3f:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf42:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf46:	80 fa 03             	cmp    dl,0x3
c001cf49:	77 5d                	ja     c001cfa8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf4b:	0f b6 db             	movzx  ebx,bl
c001cf4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf56:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf59:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf5d:	83 ca 80             	or     edx,0xffffff80
c001cf60:	0f b6 d2             	movzx  edx,dl
c001cf63:	52                   	push   edx
c001cf64:	6a 0c                	push   0xc
c001cf66:	53                   	push   ebx
c001cf67:	56                   	push   esi
c001cf68:	e8 51 f9 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf71:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf76:	0f b6 c0             	movzx  eax,al
c001cf79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf7d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf81:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf83:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf88:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf8c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf94:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cf9c:	83 c4 2c             	add    esp,0x2c
c001cf9f:	5b                   	pop    ebx
c001cfa0:	5e                   	pop    esi
c001cfa1:	5f                   	pop    edi
c001cfa2:	5d                   	pop    ebp
c001cfa3:	e9 16 f9 ff ff       	jmp    c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfa8:	3c 07                	cmp    al,0x7
c001cfaa:	77 10                	ja     c001cfbc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfac:	0f b6 db             	movzx  ebx,bl
c001cfaf:	0f b6 d0             	movzx  edx,al
c001cfb2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfba:	eb 2d                	jmp    c001cfe9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfbc:	3c 0d                	cmp    al,0xd
c001cfbe:	77 13                	ja     c001cfd3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfc0:	0f b6 db             	movzx  ebx,bl
c001cfc3:	0f b6 c0             	movzx  eax,al
c001cfc6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfcd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfd1:	eb 16                	jmp    c001cfe9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfd3:	3c 15                	cmp    al,0x15
c001cfd5:	77 14                	ja     c001cfeb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfd7:	0f b6 db             	movzx  ebx,bl
c001cfda:	0f b6 c0             	movzx  eax,al
c001cfdd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfe5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfe9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cfeb:	83 c4 1c             	add    esp,0x1c
c001cfee:	5b                   	pop    ebx
c001cfef:	5e                   	pop    esi
c001cff0:	5f                   	pop    edi
c001cff1:	5d                   	pop    ebp
c001cff2:	c3                   	ret    
c001cff3:	90                   	nop

c001cff4 <IDE::detect()>:
c001cff4:	55                   	push   ebp
c001cff5:	57                   	push   edi
c001cff6:	56                   	push   esi
c001cff7:	53                   	push   ebx
c001cff8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cffe:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d005:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d00c:	0f 85 c0 02 00 00    	jne    c001d2d2 <IDE::detect()+0x2de>
c001d012:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d019:	31 f6                	xor    esi,esi
c001d01b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d023:	31 ed                	xor    ebp,ebp
c001d025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d029:	c1 e0 06             	shl    eax,0x6
c001d02c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d034:	89 e8                	mov    eax,ebp
c001d036:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d03a:	c1 e0 04             	shl    eax,0x4
c001d03d:	83 c8 a0             	or     eax,0xffffffa0
c001d040:	0f b6 c0             	movzx  eax,al
c001d043:	50                   	push   eax
c001d044:	6a 06                	push   0x6
c001d046:	56                   	push   esi
c001d047:	53                   	push   ebx
c001d048:	e8 71 f8 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d04d:	83 c4 0c             	add    esp,0xc
c001d050:	6a 0c                	push   0xc
c001d052:	56                   	push   esi
c001d053:	53                   	push   ebx
c001d054:	e8 25 f9 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d059:	83 c4 0c             	add    esp,0xc
c001d05c:	6a 0c                	push   0xc
c001d05e:	56                   	push   esi
c001d05f:	53                   	push   ebx
c001d060:	e8 19 f9 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	6a 0c                	push   0xc
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	e8 0d f9 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d071:	83 c4 0c             	add    esp,0xc
c001d074:	6a 0c                	push   0xc
c001d076:	56                   	push   esi
c001d077:	53                   	push   ebx
c001d078:	e8 01 f9 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d07d:	68 ec 00 00 00       	push   0xec
c001d082:	6a 07                	push   0x7
c001d084:	56                   	push   esi
c001d085:	53                   	push   ebx
c001d086:	e8 33 f8 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d08b:	83 c4 1c             	add    esp,0x1c
c001d08e:	6a 0c                	push   0xc
c001d090:	56                   	push   esi
c001d091:	53                   	push   ebx
c001d092:	e8 e7 f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d097:	83 c4 0c             	add    esp,0xc
c001d09a:	6a 0c                	push   0xc
c001d09c:	56                   	push   esi
c001d09d:	53                   	push   ebx
c001d09e:	e8 db f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d0a3:	83 c4 0c             	add    esp,0xc
c001d0a6:	6a 0c                	push   0xc
c001d0a8:	56                   	push   esi
c001d0a9:	53                   	push   ebx
c001d0aa:	e8 cf f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d0af:	83 c4 0c             	add    esp,0xc
c001d0b2:	6a 0c                	push   0xc
c001d0b4:	56                   	push   esi
c001d0b5:	53                   	push   ebx
c001d0b6:	e8 c3 f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d0bb:	83 c4 0c             	add    esp,0xc
c001d0be:	6a 0c                	push   0xc
c001d0c0:	56                   	push   esi
c001d0c1:	53                   	push   ebx
c001d0c2:	e8 b7 f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	84 c0                	test   al,al
c001d0cc:	0f 84 8b 01 00 00    	je     c001d25d <IDE::detect()+0x269>
c001d0d2:	31 ff                	xor    edi,edi
c001d0d4:	50                   	push   eax
c001d0d5:	6a 0c                	push   0xc
c001d0d7:	56                   	push   esi
c001d0d8:	53                   	push   ebx
c001d0d9:	e8 a0 f8 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	a8 01                	test   al,0x1
c001d0e3:	0f 85 8e 01 00 00    	jne    c001d277 <IDE::detect()+0x283>
c001d0e9:	84 c0                	test   al,al
c001d0eb:	78 04                	js     c001d0f1 <IDE::detect()+0xfd>
c001d0ed:	a8 08                	test   al,0x8
c001d0ef:	75 27                	jne    c001d118 <IDE::detect()+0x124>
c001d0f1:	47                   	inc    edi
c001d0f2:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0f8:	7e da                	jle    c001d0d4 <IDE::detect()+0xe0>
c001d0fa:	50                   	push   eax
c001d0fb:	50                   	push   eax
c001d0fc:	6a 00                	push   0x0
c001d0fe:	68 40 4b 4c 00       	push   0x4c4b40
c001d103:	e8 99 be ff ff       	call   c0018fa1 <nanoSleep(unsigned long long)>
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d111:	75 c1                	jne    c001d0d4 <IDE::detect()+0xe0>
c001d113:	e9 5f 01 00 00       	jmp    c001d277 <IDE::detect()+0x283>
c001d118:	31 c9                	xor    ecx,ecx
c001d11a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d11e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d122:	83 ec 0c             	sub    esp,0xc
c001d125:	68 80 00 00 00       	push   0x80
c001d12a:	57                   	push   edi
c001d12b:	6a 00                	push   0x0
c001d12d:	56                   	push   esi
c001d12e:	53                   	push   ebx
c001d12f:	e8 f4 fd ff ff       	call   c001cf28 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d134:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d138:	c1 e0 06             	shl    eax,0x6
c001d13b:	01 d8                	add    eax,ebx
c001d13d:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d142:	89 d1                	mov    ecx,edx
c001d144:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d14b:	89 f2                	mov    edx,esi
c001d14d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d154:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d15a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d15e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d164:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d168:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d16f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d177:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d17e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d186:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d18c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d193:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d199:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d19d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1a1:	83 c4 20             	add    esp,0x20
c001d1a4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1a7:	83 c7 02             	add    edi,0x2
c001d1aa:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1b0:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1b3:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1b9:	83 c0 02             	add    eax,0x2
c001d1bc:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1c0:	75 e2                	jne    c001d1a4 <IDE::detect()+0x1b0>
c001d1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1c6:	c1 e0 06             	shl    eax,0x6
c001d1c9:	01 d8                	add    eax,ebx
c001d1cb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1d1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1d8:	66 c1 ea 09          	shr    dx,0x9
c001d1dc:	83 e2 01             	and    edx,0x1
c001d1df:	84 c9                	test   cl,cl
c001d1e1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1e7:	75 2f                	jne    c001d218 <IDE::detect()+0x224>
c001d1e9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1ef:	85 c0                	test   eax,eax
c001d1f1:	74 66                	je     c001d259 <IDE::detect()+0x265>
c001d1f3:	50                   	push   eax
c001d1f4:	55                   	push   ebp
c001d1f5:	56                   	push   esi
c001d1f6:	68 e3 35 02 c0       	push   0xc00235e3
c001d1fb:	e8 0b 20 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d200:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d207:	e8 ca 1e ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001d20c:	89 c7                	mov    edi,eax
c001d20e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d211:	e8 f4 02 00 00       	call   c001d50a <ATA::ATA()>
c001d216:	eb 28                	jmp    c001d240 <IDE::detect()+0x24c>
c001d218:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d21e:	55                   	push   ebp
c001d21f:	56                   	push   esi
c001d220:	68 12 36 02 c0       	push   0xc0023612
c001d225:	e8 e1 1f ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d22a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d231:	e8 a0 1e ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001d236:	89 c7                	mov    edi,eax
c001d238:	89 04 24             	mov    DWORD PTR [esp],eax
c001d23b:	e8 1e 09 00 00       	call   c001db5e <ATAPI::ATAPI()>
c001d240:	5a                   	pop    edx
c001d241:	59                   	pop    ecx
c001d242:	57                   	push   edi
c001d243:	53                   	push   ebx
c001d244:	e8 d7 33 ff ff       	call   c0010620 <Device::addChild(Device*)>
c001d249:	8b 07                	mov    eax,DWORD PTR [edi]
c001d24b:	53                   	push   ebx
c001d24c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d250:	6a 00                	push   0x0
c001d252:	57                   	push   edi
c001d253:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d256:	83 c4 20             	add    esp,0x20
c001d259:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d25d:	4d                   	dec    ebp
c001d25e:	74 0a                	je     c001d26a <IDE::detect()+0x276>
c001d260:	bd 01 00 00 00       	mov    ebp,0x1
c001d265:	e9 bb fd ff ff       	jmp    c001d025 <IDE::detect()+0x31>
c001d26a:	4e                   	dec    esi
c001d26b:	74 65                	je     c001d2d2 <IDE::detect()+0x2de>
c001d26d:	be 01 00 00 00       	mov    esi,0x1
c001d272:	e9 ac fd ff ff       	jmp    c001d023 <IDE::detect()+0x2f>
c001d277:	50                   	push   eax
c001d278:	6a 04                	push   0x4
c001d27a:	56                   	push   esi
c001d27b:	53                   	push   ebx
c001d27c:	e8 fd f6 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d281:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d285:	83 c4 0c             	add    esp,0xc
c001d288:	6a 05                	push   0x5
c001d28a:	56                   	push   esi
c001d28b:	53                   	push   ebx
c001d28c:	e8 ed f6 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d291:	83 c4 10             	add    esp,0x10
c001d294:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d298:	80 fa 14             	cmp    dl,0x14
c001d29b:	74 2f                	je     c001d2cc <IDE::detect()+0x2d8>
c001d29d:	80 fa 69             	cmp    dl,0x69
c001d2a0:	75 bb                	jne    c001d25d <IDE::detect()+0x269>
c001d2a2:	3c 96                	cmp    al,0x96
c001d2a4:	75 b7                	jne    c001d25d <IDE::detect()+0x269>
c001d2a6:	68 a1 00 00 00       	push   0xa1
c001d2ab:	6a 07                	push   0x7
c001d2ad:	56                   	push   esi
c001d2ae:	53                   	push   ebx
c001d2af:	e8 0a f6 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2b4:	5f                   	pop    edi
c001d2b5:	58                   	pop    eax
c001d2b6:	6a 00                	push   0x0
c001d2b8:	68 40 42 0f 00       	push   0xf4240
c001d2bd:	e8 df bc ff ff       	call   c0018fa1 <nanoSleep(unsigned long long)>
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	b1 01                	mov    cl,0x1
c001d2c7:	e9 4e fe ff ff       	jmp    c001d11a <IDE::detect()+0x126>
c001d2cc:	3c eb                	cmp    al,0xeb
c001d2ce:	75 cd                	jne    c001d29d <IDE::detect()+0x2a9>
c001d2d0:	eb d4                	jmp    c001d2a6 <IDE::detect()+0x2b2>
c001d2d2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2d8:	5b                   	pop    ebx
c001d2d9:	5e                   	pop    esi
c001d2da:	5f                   	pop    edi
c001d2db:	5d                   	pop    ebp
c001d2dc:	c3                   	ret    
c001d2dd:	90                   	nop

c001d2de <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2de:	55                   	push   ebp
c001d2df:	57                   	push   edi
c001d2e0:	56                   	push   esi
c001d2e1:	53                   	push   ebx
c001d2e2:	83 ec 1c             	sub    esp,0x1c
c001d2e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2f1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2f5:	88 c3                	mov    bl,al
c001d2f7:	84 c0                	test   al,al
c001d2f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2fd:	0f 84 67 01 00 00    	je     c001d46a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d303:	83 ec 0c             	sub    esp,0xc
c001d306:	68 43 36 02 c0       	push   0xc0023643
c001d30b:	e8 fb 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d310:	83 c4 10             	add    esp,0x10
c001d313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d317:	3c 01                	cmp    al,0x1
c001d319:	75 17                	jne    c001d332 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	b3 13                	mov    bl,0x13
c001d320:	68 4f 36 02 c0       	push   0xc002364f
c001d325:	e8 e1 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d32a:	83 c4 10             	add    esp,0x10
c001d32d:	e9 25 01 00 00       	jmp    c001d457 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d332:	3c 02                	cmp    al,0x2
c001d334:	0f 85 ef 00 00 00    	jne    c001d429 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d33a:	01 f6                	add    esi,esi
c001d33c:	52                   	push   edx
c001d33d:	09 ee                	or     esi,ebp
c001d33f:	6a 01                	push   0x1
c001d341:	89 f0                	mov    eax,esi
c001d343:	0f b6 f0             	movzx  esi,al
c001d346:	c1 e6 06             	shl    esi,0x6
c001d349:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d351:	50                   	push   eax
c001d352:	57                   	push   edi
c001d353:	e8 26 f6 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d358:	83 c4 10             	add    esp,0x10
c001d35b:	89 c6                	mov    esi,eax
c001d35d:	a8 01                	test   al,0x1
c001d35f:	74 12                	je     c001d373 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d361:	83 ec 0c             	sub    esp,0xc
c001d364:	b3 07                	mov    bl,0x7
c001d366:	68 64 36 02 c0       	push   0xc0023664
c001d36b:	e8 9b 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	f7 c6 02 00 00 00    	test   esi,0x2
c001d379:	74 12                	je     c001d38d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d37b:	83 ec 0c             	sub    esp,0xc
c001d37e:	b3 03                	mov    bl,0x3
c001d380:	68 82 36 02 c0       	push   0xc0023682
c001d385:	e8 81 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	f7 c6 04 00 00 00    	test   esi,0x4
c001d393:	74 12                	je     c001d3a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d395:	83 ec 0c             	sub    esp,0xc
c001d398:	b3 14                	mov    bl,0x14
c001d39a:	68 a2 36 02 c0       	push   0xc00236a2
c001d39f:	e8 67 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3ad:	74 12                	je     c001d3c1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3af:	83 ec 0c             	sub    esp,0xc
c001d3b2:	b3 03                	mov    bl,0x3
c001d3b4:	68 82 36 02 c0       	push   0xc0023682
c001d3b9:	e8 4d 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d3be:	83 c4 10             	add    esp,0x10
c001d3c1:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3c7:	74 12                	je     c001d3db <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	b3 15                	mov    bl,0x15
c001d3ce:	68 ba 36 02 c0       	push   0xc00236ba
c001d3d3:	e8 33 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3e1:	74 12                	je     c001d3f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3e3:	83 ec 0c             	sub    esp,0xc
c001d3e6:	b3 03                	mov    bl,0x3
c001d3e8:	68 82 36 02 c0       	push   0xc0023682
c001d3ed:	e8 19 1e ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d3f2:	83 c4 10             	add    esp,0x10
c001d3f5:	f7 c6 40 00 00 00    	test   esi,0x40
c001d3fb:	74 12                	je     c001d40f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d3fd:	83 ec 0c             	sub    esp,0xc
c001d400:	b3 16                	mov    bl,0x16
c001d402:	68 d4 36 02 c0       	push   0xc00236d4
c001d407:	e8 ff 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	89 f0                	mov    eax,esi
c001d411:	84 c0                	test   al,al
c001d413:	79 42                	jns    c001d457 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	b3 0d                	mov    bl,0xd
c001d41a:	68 f5 36 02 c0       	push   0xc00236f5
c001d41f:	e8 e7 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	eb 2e                	jmp    c001d457 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d429:	3c 03                	cmp    al,0x3
c001d42b:	75 14                	jne    c001d441 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	b3 17                	mov    bl,0x17
c001d432:	68 09 37 02 c0       	push   0xc0023709
c001d437:	e8 cf 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	eb 16                	jmp    c001d457 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d441:	3c 04                	cmp    al,0x4
c001d443:	75 12                	jne    c001d457 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	b3 08                	mov    bl,0x8
c001d44a:	68 1f 37 02 c0       	push   0xc002371f
c001d44f:	e8 b7 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	50                   	push   eax
c001d458:	50                   	push   eax
c001d459:	0f b6 c3             	movzx  eax,bl
c001d45c:	50                   	push   eax
c001d45d:	68 37 37 02 c0       	push   0xc0023737
c001d462:	e8 a4 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	83 c4 1c             	add    esp,0x1c
c001d46d:	88 d8                	mov    al,bl
c001d46f:	5b                   	pop    ebx
c001d470:	5e                   	pop    esi
c001d471:	5f                   	pop    edi
c001d472:	5d                   	pop    ebp
c001d473:	c3                   	ret    

c001d474 <IDE::polling(unsigned char, unsigned int)>:
c001d474:	55                   	push   ebp
c001d475:	bd 04 00 00 00       	mov    ebp,0x4
c001d47a:	57                   	push   edi
c001d47b:	56                   	push   esi
c001d47c:	53                   	push   ebx
c001d47d:	83 ec 0c             	sub    esp,0xc
c001d480:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d484:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d488:	52                   	push   edx
c001d489:	6a 0c                	push   0xc
c001d48b:	0f b6 f3             	movzx  esi,bl
c001d48e:	56                   	push   esi
c001d48f:	57                   	push   edi
c001d490:	e8 e9 f4 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	4d                   	dec    ebp
c001d499:	75 ed                	jne    c001d488 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d49b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4a0:	50                   	push   eax
c001d4a1:	6a 0c                	push   0xc
c001d4a3:	56                   	push   esi
c001d4a4:	57                   	push   edi
c001d4a5:	e8 d4 f4 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d4aa:	83 c4 10             	add    esp,0x10
c001d4ad:	a8 01                	test   al,0x1
c001d4af:	74 12                	je     c001d4c3 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4b1:	83 ec 0c             	sub    esp,0xc
c001d4b4:	68 51 37 02 c0       	push   0xc0023751
c001d4b9:	e8 4d 1d ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001d4be:	83 c4 10             	add    esp,0x10
c001d4c1:	eb 17                	jmp    c001d4da <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4c3:	a8 20                	test   al,0x20
c001d4c5:	75 0f                	jne    c001d4d6 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4c7:	4b                   	dec    ebx
c001d4c8:	74 10                	je     c001d4da <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4ca:	84 c0                	test   al,al
c001d4cc:	78 d2                	js     c001d4a0 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4ce:	a8 08                	test   al,0x8
c001d4d0:	74 ce                	je     c001d4a0 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d2:	31 c0                	xor    eax,eax
c001d4d4:	eb 06                	jmp    c001d4dc <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4d6:	b0 01                	mov    al,0x1
c001d4d8:	eb 02                	jmp    c001d4dc <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4da:	b0 02                	mov    al,0x2
c001d4dc:	83 c4 0c             	add    esp,0xc
c001d4df:	5b                   	pop    ebx
c001d4e0:	5e                   	pop    esi
c001d4e1:	5f                   	pop    edi
c001d4e2:	5d                   	pop    ebp
c001d4e3:	c3                   	ret    

c001d4e4 <ATA::close(int, int, void*)>:
c001d4e4:	83 ec 0c             	sub    esp,0xc
c001d4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4f1:	85 c0                	test   eax,eax
c001d4f3:	74 0c                	je     c001d501 <ATA::close(int, int, void*)+0x1d>
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4fa:	50                   	push   eax
c001d4fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4fe:	83 c4 10             	add    esp,0x10
c001d501:	31 c0                	xor    eax,eax
c001d503:	83 c4 0c             	add    esp,0xc
c001d506:	c3                   	ret    
c001d507:	90                   	nop

c001d508 <ATA::powerSaving(PowerSavingLevel)>:
c001d508:	c3                   	ret    
c001d509:	90                   	nop

c001d50a <ATA::ATA()>:
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d511:	83 ec 04             	sub    esp,0x4
c001d514:	68 00 02 00 00       	push   0x200
c001d519:	68 94 37 02 c0       	push   0xc0023794
c001d51e:	50                   	push   eax
c001d51f:	e8 02 35 ff ff       	call   c0010a26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d524:	83 c4 10             	add    esp,0x10
c001d527:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001d52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d530:	89 10                	mov    DWORD PTR [eax],edx
c001d532:	90                   	nop
c001d533:	83 c4 0c             	add    esp,0xc
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <ATA::flush(bool)>:
c001d538:	53                   	push   ebx
c001d539:	83 ec 08             	sub    esp,0x8
c001d53c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d541:	19 c0                	sbb    eax,eax
c001d543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d547:	83 e0 fd             	and    eax,0xfffffffd
c001d54a:	05 ea 00 00 00       	add    eax,0xea
c001d54f:	50                   	push   eax
c001d550:	6a 07                	push   0x7
c001d552:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d559:	50                   	push   eax
c001d55a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d560:	e8 59 f3 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d565:	83 c4 0c             	add    esp,0xc
c001d568:	6a 00                	push   0x0
c001d56a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d571:	50                   	push   eax
c001d572:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d578:	e8 f7 fe ff ff       	call   c001d474 <IDE::polling(unsigned char, unsigned int)>
c001d57d:	83 c4 18             	add    esp,0x18
c001d580:	5b                   	pop    ebx
c001d581:	c3                   	ret    

c001d582 <ATA::readyForCommand()>:
c001d582:	56                   	push   esi
c001d583:	53                   	push   ebx
c001d584:	31 db                	xor    ebx,ebx
c001d586:	50                   	push   eax
c001d587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d58b:	50                   	push   eax
c001d58c:	6a 0c                	push   0xc
c001d58e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d595:	50                   	push   eax
c001d596:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d59c:	e8 dd f3 ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	a8 88                	test   al,0x88
c001d5a6:	74 23                	je     c001d5cb <ATA::readyForCommand()+0x49>
c001d5a8:	43                   	inc    ebx
c001d5a9:	83 fb 63             	cmp    ebx,0x63
c001d5ac:	7e dd                	jle    c001d58b <ATA::readyForCommand()+0x9>
c001d5ae:	51                   	push   ecx
c001d5af:	51                   	push   ecx
c001d5b0:	6a 00                	push   0x0
c001d5b2:	68 40 42 0f 00       	push   0xf4240
c001d5b7:	e8 e5 b9 ff ff       	call   c0018fa1 <nanoSleep(unsigned long long)>
c001d5bc:	83 c4 10             	add    esp,0x10
c001d5bf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5c5:	75 c4                	jne    c001d58b <ATA::readyForCommand()+0x9>
c001d5c7:	31 c0                	xor    eax,eax
c001d5c9:	eb 02                	jmp    c001d5cd <ATA::readyForCommand()+0x4b>
c001d5cb:	b0 01                	mov    al,0x1
c001d5cd:	5a                   	pop    edx
c001d5ce:	5b                   	pop    ebx
c001d5cf:	5e                   	pop    esi
c001d5d0:	c3                   	ret    
c001d5d1:	90                   	nop

c001d5d2 <ATA::access(unsigned long long, int, void*, bool)>:
c001d5d2:	55                   	push   ebp
c001d5d3:	57                   	push   edi
c001d5d4:	56                   	push   esi
c001d5d5:	53                   	push   ebx
c001d5d6:	83 ec 2c             	sub    esp,0x2c
c001d5d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5e4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5e8:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5ef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5f3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d5f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d603:	c1 e0 06             	shl    eax,0x6
c001d606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d60a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d612:	74 5d                	je     c001d671 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d614:	89 fa                	mov    edx,edi
c001d616:	89 f0                	mov    eax,esi
c001d618:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d61c:	c1 ea 1c             	shr    edx,0x1c
c001d61f:	89 d1                	mov    ecx,edx
c001d621:	09 c1                	or     ecx,eax
c001d623:	74 25                	je     c001d64a <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d625:	31 ed                	xor    ebp,ebp
c001d627:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d62e:	89 fa                	mov    edx,edi
c001d630:	89 f0                	mov    eax,esi
c001d632:	0f ad d0             	shrd   eax,edx,cl
c001d635:	d3 ea                	shr    edx,cl
c001d637:	f6 c1 20             	test   cl,0x20
c001d63a:	74 02                	je     c001d63e <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d63c:	89 d0                	mov    eax,edx
c001d63e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d642:	45                   	inc    ebp
c001d643:	83 fd 06             	cmp    ebp,0x6
c001d646:	75 df                	jne    c001d627 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d648:	eb 73                	jmp    c001d6bd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d64a:	89 f0                	mov    eax,esi
c001d64c:	89 fa                	mov    edx,edi
c001d64e:	0f ac d0 10          	shrd   eax,edx,0x10
c001d652:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d657:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d65b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d662:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d667:	c1 ee 18             	shr    esi,0x18
c001d66a:	bf 01 00 00 00       	mov    edi,0x1
c001d66f:	eb 53                	jmp    c001d6c4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d671:	6a 00                	push   0x0
c001d673:	6a 3f                	push   0x3f
c001d675:	57                   	push   edi
c001d676:	56                   	push   esi
c001d677:	e8 80 1f 00 00       	call   c001f5fc <__umoddi3>
c001d67c:	83 c4 10             	add    esp,0x10
c001d67f:	40                   	inc    eax
c001d680:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d684:	6a 00                	push   0x0
c001d686:	68 f0 03 00 00       	push   0x3f0
c001d68b:	57                   	push   edi
c001d68c:	56                   	push   esi
c001d68d:	e8 6a 1e 00 00       	call   c001f4fc <__udivdi3>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d69a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6a6:	6a 00                	push   0x0
c001d6a8:	6a 3f                	push   0x3f
c001d6aa:	57                   	push   edi
c001d6ab:	31 ff                	xor    edi,edi
c001d6ad:	56                   	push   esi
c001d6ae:	e8 49 1e 00 00       	call   c001f4fc <__udivdi3>
c001d6b3:	89 c6                	mov    esi,eax
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	83 e6 0f             	and    esi,0xf
c001d6bb:	eb 07                	jmp    c001d6c4 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6bd:	31 f6                	xor    esi,esi
c001d6bf:	bf 02 00 00 00       	mov    edi,0x2
c001d6c4:	50                   	push   eax
c001d6c5:	6a 00                	push   0x0
c001d6c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6ce:	50                   	push   eax
c001d6cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6d3:	e8 f8 f3 ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001d6d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6db:	e8 a2 fe ff ff       	call   c001d582 <ATA::readyForCommand()>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	84 c0                	test   al,al
c001d6e5:	75 0a                	jne    c001d6f1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6e7:	be 01 00 00 00       	mov    esi,0x1
c001d6ec:	e9 79 02 00 00       	jmp    c001d96a <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6f1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d6f7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6fd:	c1 e0 04             	shl    eax,0x4
c001d700:	09 c6                	or     esi,eax
c001d702:	89 f8                	mov    eax,edi
c001d704:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d70b:	84 c0                	test   al,al
c001d70d:	75 05                	jne    c001d714 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d70f:	83 ce a0             	or     esi,0xffffffa0
c001d712:	eb 03                	jmp    c001d717 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d714:	83 ce e0             	or     esi,0xffffffe0
c001d717:	89 f0                	mov    eax,esi
c001d719:	0f b6 f0             	movzx  esi,al
c001d71c:	56                   	push   esi
c001d71d:	6a 06                	push   0x6
c001d71f:	51                   	push   ecx
c001d720:	52                   	push   edx
c001d721:	e8 98 f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d726:	83 c4 10             	add    esp,0x10
c001d729:	6a 00                	push   0x0
c001d72b:	6a 01                	push   0x1
c001d72d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d734:	50                   	push   eax
c001d735:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d73b:	e8 7e f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d740:	89 f8                	mov    eax,edi
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	3c 02                	cmp    al,0x2
c001d747:	75 6e                	jne    c001d7b7 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d749:	6a 00                	push   0x0
c001d74b:	6a 08                	push   0x8
c001d74d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d754:	50                   	push   eax
c001d755:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d75b:	e8 5e f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d760:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d765:	50                   	push   eax
c001d766:	6a 09                	push   0x9
c001d768:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d76f:	50                   	push   eax
c001d770:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d776:	e8 43 f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77b:	83 c4 20             	add    esp,0x20
c001d77e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d783:	50                   	push   eax
c001d784:	6a 0a                	push   0xa
c001d786:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d78d:	50                   	push   eax
c001d78e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d794:	e8 25 f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d799:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d79e:	50                   	push   eax
c001d79f:	6a 0b                	push   0xb
c001d7a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7a8:	50                   	push   eax
c001d7a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7af:	e8 0a f1 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b4:	83 c4 20             	add    esp,0x20
c001d7b7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7bc:	50                   	push   eax
c001d7bd:	6a 02                	push   0x2
c001d7bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7c6:	50                   	push   eax
c001d7c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7cd:	e8 ec f0 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7d7:	50                   	push   eax
c001d7d8:	6a 03                	push   0x3
c001d7da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7e1:	50                   	push   eax
c001d7e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7e8:	e8 d1 f0 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ed:	83 c4 20             	add    esp,0x20
c001d7f0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7f5:	50                   	push   eax
c001d7f6:	6a 04                	push   0x4
c001d7f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ff:	50                   	push   eax
c001d800:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d806:	e8 b3 f0 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d80b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d810:	50                   	push   eax
c001d811:	6a 05                	push   0x5
c001d813:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d81a:	50                   	push   eax
c001d81b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d821:	e8 98 f0 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d826:	83 c4 20             	add    esp,0x20
c001d829:	89 f8                	mov    eax,edi
c001d82b:	3c 02                	cmp    al,0x2
c001d82d:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d832:	75 06                	jne    c001d83a <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d834:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d838:	75 40                	jne    c001d87a <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d83a:	89 f8                	mov    eax,edi
c001d83c:	3c 02                	cmp    al,0x2
c001d83e:	0f 95 c1             	setne  cl
c001d841:	74 0b                	je     c001d84e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d843:	b8 30 00 00 00       	mov    eax,0x30
c001d848:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d84c:	75 31                	jne    c001d87f <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d84e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d851:	83 f2 01             	xor    edx,0x1
c001d854:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d859:	74 09                	je     c001d864 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d85b:	b8 24 00 00 00       	mov    eax,0x24
c001d860:	84 d2                	test   dl,dl
c001d862:	75 1b                	jne    c001d87f <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d864:	84 c9                	test   cl,cl
c001d866:	0f 84 7b fe ff ff    	je     c001d6e7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d86c:	b8 20 00 00 00       	mov    eax,0x20
c001d871:	84 d2                	test   dl,dl
c001d873:	75 0a                	jne    c001d87f <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d875:	e9 6d fe ff ff       	jmp    c001d6e7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d87a:	b8 34 00 00 00       	mov    eax,0x34
c001d87f:	50                   	push   eax
c001d880:	6a 07                	push   0x7
c001d882:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d889:	50                   	push   eax
c001d88a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d890:	e8 29 f0 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d895:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d899:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d89d:	83 c4 10             	add    esp,0x10
c001d8a0:	85 f6                	test   esi,esi
c001d8a2:	0f 84 a9 00 00 00    	je     c001d951 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8a8:	50                   	push   eax
c001d8a9:	6a 01                	push   0x1
c001d8ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8b2:	50                   	push   eax
c001d8b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b9:	e8 b6 fb ff ff       	call   c001d474 <IDE::polling(unsigned char, unsigned int)>
c001d8be:	83 c4 10             	add    esp,0x10
c001d8c1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8c7:	84 c0                	test   al,al
c001d8c9:	74 1d                	je     c001d8e8 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8cb:	0f b6 f0             	movzx  esi,al
c001d8ce:	56                   	push   esi
c001d8cf:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8d6:	0f b6 d2             	movzx  edx,dl
c001d8d9:	50                   	push   eax
c001d8da:	52                   	push   edx
c001d8db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e1:	e8 f8 f9 ff ff       	call   c001d2de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8e6:	eb 7f                	jmp    c001d967 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8e8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8ed:	74 41                	je     c001d930 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8ef:	31 c9                	xor    ecx,ecx
c001d8f1:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8f9:	50                   	push   eax
c001d8fa:	50                   	push   eax
c001d8fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d902:	50                   	push   eax
c001d903:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d909:	e8 9e ef ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001d90e:	89 c2                	mov    edx,eax
c001d910:	89 e8                	mov    eax,ebp
c001d912:	66 ef                	out    dx,ax
c001d914:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d918:	83 c4 10             	add    esp,0x10
c001d91b:	41                   	inc    ecx
c001d91c:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d922:	75 cd                	jne    c001d8f1 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d924:	4e                   	dec    esi
c001d925:	81 c7 00 02 00 00    	add    edi,0x200
c001d92b:	e9 70 ff ff ff       	jmp    c001d8a0 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d930:	51                   	push   ecx
c001d931:	51                   	push   ecx
c001d932:	0f b6 d2             	movzx  edx,dl
c001d935:	52                   	push   edx
c001d936:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d93c:	e8 6b ef ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001d941:	b9 00 01 00 00       	mov    ecx,0x100
c001d946:	89 c2                	mov    edx,eax
c001d948:	fc                   	cld    
c001d949:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d94c:	83 c4 10             	add    esp,0x10
c001d94f:	eb d3                	jmp    c001d924 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d951:	31 f6                	xor    esi,esi
c001d953:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d957:	74 11                	je     c001d96a <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d959:	50                   	push   eax
c001d95a:	50                   	push   eax
c001d95b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d960:	50                   	push   eax
c001d961:	53                   	push   ebx
c001d962:	e8 d1 fb ff ff       	call   c001d538 <ATA::flush(bool)>
c001d967:	83 c4 10             	add    esp,0x10
c001d96a:	83 c4 2c             	add    esp,0x2c
c001d96d:	89 f0                	mov    eax,esi
c001d96f:	5b                   	pop    ebx
c001d970:	5e                   	pop    esi
c001d971:	5f                   	pop    edi
c001d972:	5d                   	pop    ebp
c001d973:	c3                   	ret    

c001d974 <ATA::read(unsigned long long, int, void*)>:
c001d974:	57                   	push   edi
c001d975:	b8 04 00 00 00       	mov    eax,0x4
c001d97a:	56                   	push   esi
c001d97b:	53                   	push   ebx
c001d97c:	83 ec 10             	sub    esp,0x10
c001d97f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d983:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d987:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d98b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d98f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d992:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d998:	77 3b                	ja     c001d9d5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d99a:	b8 06 00 00 00       	mov    eax,0x6
c001d99f:	85 d2                	test   edx,edx
c001d9a1:	74 32                	je     c001d9d5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9a3:	50                   	push   eax
c001d9a4:	50                   	push   eax
c001d9a5:	6a 00                	push   0x0
c001d9a7:	52                   	push   edx
c001d9a8:	53                   	push   ebx
c001d9a9:	57                   	push   edi
c001d9aa:	56                   	push   esi
c001d9ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9af:	e8 1e fc ff ff       	call   c001d5d2 <ATA::access(unsigned long long, int, void*, bool)>
c001d9b4:	83 c4 20             	add    esp,0x20
c001d9b7:	85 c0                	test   eax,eax
c001d9b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9bd:	75 11                	jne    c001d9d0 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9bf:	01 1d 24 65 02 c0    	add    DWORD PTR ds:0xc0026524,ebx
c001d9c5:	e8 18 f6 fe ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c001d9ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9ce:	eb 05                	jmp    c001d9d5 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9d0:	b8 01 00 00 00       	mov    eax,0x1
c001d9d5:	83 c4 10             	add    esp,0x10
c001d9d8:	5b                   	pop    ebx
c001d9d9:	5e                   	pop    esi
c001d9da:	5f                   	pop    edi
c001d9db:	c3                   	ret    

c001d9dc <ATA::write(unsigned long long, int, void*)>:
c001d9dc:	57                   	push   edi
c001d9dd:	b8 04 00 00 00       	mov    eax,0x4
c001d9e2:	56                   	push   esi
c001d9e3:	53                   	push   ebx
c001d9e4:	83 ec 10             	sub    esp,0x10
c001d9e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9eb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9ef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9f7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9fa:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da00:	77 3b                	ja     c001da3d <ATA::write(unsigned long long, int, void*)+0x61>
c001da02:	b8 06 00 00 00       	mov    eax,0x6
c001da07:	85 d2                	test   edx,edx
c001da09:	74 32                	je     c001da3d <ATA::write(unsigned long long, int, void*)+0x61>
c001da0b:	50                   	push   eax
c001da0c:	50                   	push   eax
c001da0d:	6a 01                	push   0x1
c001da0f:	52                   	push   edx
c001da10:	53                   	push   ebx
c001da11:	57                   	push   edi
c001da12:	56                   	push   esi
c001da13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da17:	e8 b6 fb ff ff       	call   c001d5d2 <ATA::access(unsigned long long, int, void*, bool)>
c001da1c:	83 c4 20             	add    esp,0x20
c001da1f:	85 c0                	test   eax,eax
c001da21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da25:	75 11                	jne    c001da38 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da27:	01 1d 20 65 02 c0    	add    DWORD PTR ds:0xc0026520,ebx
c001da2d:	e8 b0 f5 fe ff       	call   c000cfe2 <VgaText::updateDiskUsage()>
c001da32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da36:	eb 05                	jmp    c001da3d <ATA::write(unsigned long long, int, void*)+0x61>
c001da38:	b8 01 00 00 00       	mov    eax,0x1
c001da3d:	83 c4 10             	add    esp,0x10
c001da40:	5b                   	pop    ebx
c001da41:	5e                   	pop    esi
c001da42:	5f                   	pop    edi
c001da43:	c3                   	ret    

c001da44 <ATA::detectCHS()>:
c001da44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da48:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da4e:	c1 e0 06             	shl    eax,0x6
c001da51:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da57:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da61:	c7 44 24 04 a3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237a3
c001da69:	e9 cc 7f ff ff       	jmp    c0015a3a <Krnl::panic(char const*)>

c001da6e <ATA::open(int, int, void*)>:
c001da6e:	53                   	push   ebx
c001da6f:	83 ec 08             	sub    esp,0x8
c001da72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da7e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da84:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da8a:	c1 e0 06             	shl    eax,0x6
c001da8d:	01 d0                	add    eax,edx
c001da8f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001da96:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001da9c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001daa3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001daad:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dab3:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001daba:	75 0c                	jne    c001dac8 <ATA::open(int, int, void*)+0x5a>
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	53                   	push   ebx
c001dac0:	e8 7f ff ff ff       	call   c001da44 <ATA::detectCHS()>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dace:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dad4:	c1 e0 06             	shl    eax,0x6
c001dad7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dade:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dae8:	d1 e8                	shr    eax,1
c001daea:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001daf0:	6a 04                	push   0x4
c001daf2:	6a 0c                	push   0xc
c001daf4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dafb:	50                   	push   eax
c001dafc:	52                   	push   edx
c001dafd:	e8 bc ed ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db02:	90                   	nop
c001db03:	90                   	nop
c001db04:	6a 00                	push   0x0
c001db06:	6a 0c                	push   0xc
c001db08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db0f:	50                   	push   eax
c001db10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db16:	e8 a3 ed ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1b:	83 c4 14             	add    esp,0x14
c001db1e:	53                   	push   ebx
c001db1f:	e8 6a 2f ff ff       	call   c0010a8e <PhysicalDisk::startCache()>
c001db24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db27:	e8 3e 4f ff ff       	call   c0012a6a <createPartitionsForDisk(PhysicalDisk*)>
c001db2c:	83 c4 18             	add    esp,0x18
c001db2f:	31 c0                	xor    eax,eax
c001db31:	5b                   	pop    ebx
c001db32:	c3                   	ret    
c001db33:	90                   	nop

c001db34 <ATAPI::write(unsigned long long, int, void*)>:
c001db34:	b8 03 00 00 00       	mov    eax,0x3
c001db39:	c3                   	ret    

c001db3a <ATAPI::close(int, int, void*)>:
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db47:	85 c0                	test   eax,eax
c001db49:	74 0c                	je     c001db57 <ATAPI::close(int, int, void*)+0x1d>
c001db4b:	83 ec 0c             	sub    esp,0xc
c001db4e:	8b 10                	mov    edx,DWORD PTR [eax]
c001db50:	50                   	push   eax
c001db51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db54:	83 c4 10             	add    esp,0x10
c001db57:	31 c0                	xor    eax,eax
c001db59:	83 c4 0c             	add    esp,0xc
c001db5c:	c3                   	ret    
c001db5d:	90                   	nop

c001db5e <ATAPI::ATAPI()>:
c001db5e:	83 ec 0c             	sub    esp,0xc
c001db61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db65:	83 ec 04             	sub    esp,0x4
c001db68:	68 00 08 00 00       	push   0x800
c001db6d:	68 ec 37 02 c0       	push   0xc00237ec
c001db72:	50                   	push   eax
c001db73:	e8 ae 2e ff ff       	call   c0010a26 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db78:	83 c4 10             	add    esp,0x10
c001db7b:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c001db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db84:	89 10                	mov    DWORD PTR [eax],edx
c001db86:	90                   	nop
c001db87:	83 c4 0c             	add    esp,0xc
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <ATAPI::readyForCommand()>:
c001db8c:	56                   	push   esi
c001db8d:	53                   	push   ebx
c001db8e:	31 db                	xor    ebx,ebx
c001db90:	50                   	push   eax
c001db91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db95:	50                   	push   eax
c001db96:	6a 0c                	push   0xc
c001db98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001db9f:	50                   	push   eax
c001dba0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dba6:	e8 d3 ed ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001dbab:	83 c4 10             	add    esp,0x10
c001dbae:	a8 88                	test   al,0x88
c001dbb0:	74 23                	je     c001dbd5 <ATAPI::readyForCommand()+0x49>
c001dbb2:	43                   	inc    ebx
c001dbb3:	83 fb 63             	cmp    ebx,0x63
c001dbb6:	7e dd                	jle    c001db95 <ATAPI::readyForCommand()+0x9>
c001dbb8:	51                   	push   ecx
c001dbb9:	51                   	push   ecx
c001dbba:	6a 00                	push   0x0
c001dbbc:	68 40 42 0f 00       	push   0xf4240
c001dbc1:	e8 db b3 ff ff       	call   c0018fa1 <nanoSleep(unsigned long long)>
c001dbc6:	83 c4 10             	add    esp,0x10
c001dbc9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbcf:	75 c4                	jne    c001db95 <ATAPI::readyForCommand()+0x9>
c001dbd1:	31 c0                	xor    eax,eax
c001dbd3:	eb 02                	jmp    c001dbd7 <ATAPI::readyForCommand()+0x4b>
c001dbd5:	b0 01                	mov    al,0x1
c001dbd7:	5a                   	pop    edx
c001dbd8:	5b                   	pop    ebx
c001dbd9:	5e                   	pop    esi
c001dbda:	c3                   	ret    
c001dbdb:	90                   	nop

c001dbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbdc:	55                   	push   ebp
c001dbdd:	57                   	push   edi
c001dbde:	56                   	push   esi
c001dbdf:	53                   	push   ebx
c001dbe0:	83 ec 20             	sub    esp,0x20
c001dbe3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbe7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbeb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbf3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbf7:	6a 01                	push   0x1
c001dbf9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc00:	50                   	push   eax
c001dc01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc07:	e8 c4 ee ff ff       	call   c001cad0 <IDE::enableIRQs(unsigned char, bool)>
c001dc0c:	5e                   	pop    esi
c001dc0d:	58                   	pop    eax
c001dc0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc15:	50                   	push   eax
c001dc16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc1c:	e8 77 ec ff ff       	call   c001c898 <IDE::prepareInterrupt(unsigned char)>
c001dc21:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc24:	e8 63 ff ff ff       	call   c001db8c <ATAPI::readyForCommand()>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	84 c0                	test   al,al
c001dc2e:	75 0a                	jne    c001dc3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc30:	bb 01 00 00 00       	mov    ebx,0x1
c001dc35:	e9 57 02 00 00       	jmp    c001de91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc3a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc40:	c1 e0 04             	shl    eax,0x4
c001dc43:	0f b6 c0             	movzx  eax,al
c001dc46:	50                   	push   eax
c001dc47:	6a 06                	push   0x6
c001dc49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc50:	50                   	push   eax
c001dc51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc57:	e8 62 ec ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc5c:	6a 00                	push   0x0
c001dc5e:	6a 01                	push   0x1
c001dc60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc67:	50                   	push   eax
c001dc68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc6e:	e8 4b ec ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc73:	83 c4 20             	add    esp,0x20
c001dc76:	0f b6 c3             	movzx  eax,bl
c001dc79:	50                   	push   eax
c001dc7a:	6a 04                	push   0x4
c001dc7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc83:	50                   	push   eax
c001dc84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc8a:	0f b6 df             	movzx  ebx,bh
c001dc8d:	e8 2c ec ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc92:	53                   	push   ebx
c001dc93:	6a 05                	push   0x5
c001dc95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc9c:	50                   	push   eax
c001dc9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca3:	e8 16 ec ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dca8:	83 c4 20             	add    esp,0x20
c001dcab:	68 a0 00 00 00       	push   0xa0
c001dcb0:	6a 07                	push   0x7
c001dcb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcb9:	50                   	push   eax
c001dcba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcc0:	e8 f9 eb ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc5:	83 c4 0c             	add    esp,0xc
c001dcc8:	6a 01                	push   0x1
c001dcca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcd1:	50                   	push   eax
c001dcd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcd8:	e8 97 f7 ff ff       	call   c001d474 <IDE::polling(unsigned char, unsigned int)>
c001dcdd:	83 c4 10             	add    esp,0x10
c001dce0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dce6:	84 c0                	test   al,al
c001dce8:	74 23                	je     c001dd0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcea:	0f b6 d8             	movzx  ebx,al
c001dced:	53                   	push   ebx
c001dcee:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dcf5:	0f b6 d2             	movzx  edx,dl
c001dcf8:	50                   	push   eax
c001dcf9:	52                   	push   edx
c001dcfa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd00:	e8 d9 f5 ff ff       	call   c001d2de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd05:	83 c4 10             	add    esp,0x10
c001dd08:	e9 84 01 00 00       	jmp    c001de91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd0d:	53                   	push   ebx
c001dd0e:	53                   	push   ebx
c001dd0f:	0f b6 d2             	movzx  edx,dl
c001dd12:	52                   	push   edx
c001dd13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd19:	e8 8e eb ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001dd1e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd22:	b9 06 00 00 00       	mov    ecx,0x6
c001dd27:	89 c2                	mov    edx,eax
c001dd29:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd2c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd39:	85 db                	test   ebx,ebx
c001dd3b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd42:	0f 84 ec 00 00 00    	je     c001de34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd48:	51                   	push   ecx
c001dd49:	51                   	push   ecx
c001dd4a:	52                   	push   edx
c001dd4b:	50                   	push   eax
c001dd4c:	e8 db ec ff ff       	call   c001ca2c <IDE::waitInterrupt(unsigned char)>
c001dd51:	83 c4 10             	add    esp,0x10
c001dd54:	84 c0                	test   al,al
c001dd56:	0f 84 d4 fe ff ff    	je     c001dc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd5c:	56                   	push   esi
c001dd5d:	56                   	push   esi
c001dd5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd65:	50                   	push   eax
c001dd66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd6c:	e8 27 eb ff ff       	call   c001c898 <IDE::prepareInterrupt(unsigned char)>
c001dd71:	83 c4 0c             	add    esp,0xc
c001dd74:	6a 04                	push   0x4
c001dd76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd7d:	50                   	push   eax
c001dd7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd84:	e8 f5 eb ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001dd89:	83 c4 0c             	add    esp,0xc
c001dd8c:	6a 05                	push   0x5
c001dd8e:	89 c6                	mov    esi,eax
c001dd90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd97:	50                   	push   eax
c001dd98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd9e:	e8 db eb ff ff       	call   c001c97e <IDE::read(unsigned char, unsigned char)>
c001dda3:	89 f1                	mov    ecx,esi
c001dda5:	0f b6 c0             	movzx  eax,al
c001dda8:	c1 e0 08             	shl    eax,0x8
c001ddab:	0f b6 f1             	movzx  esi,cl
c001ddae:	09 c6                	or     esi,eax
c001ddb0:	d1 fe                	sar    esi,1
c001ddb2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddb6:	83 c4 10             	add    esp,0x10
c001ddb9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddbe:	74 41                	je     c001de01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddc0:	31 c9                	xor    ecx,ecx
c001ddc2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddc8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddcc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddd3:	75 0a                	jne    c001dddf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ddd5:	01 c9                	add    ecx,ecx
c001ddd7:	01 cd                	add    ebp,ecx
c001ddd9:	4b                   	dec    ebx
c001ddda:	e9 54 ff ff ff       	jmp    c001dd33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dddf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dde4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dde8:	51                   	push   ecx
c001dde9:	51                   	push   ecx
c001ddea:	52                   	push   edx
c001ddeb:	50                   	push   eax
c001ddec:	e8 bb ea ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001ddf1:	89 c2                	mov    edx,eax
c001ddf3:	89 f0                	mov    eax,esi
c001ddf5:	66 ef                	out    dx,ax
c001ddf7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ddfb:	83 c4 10             	add    esp,0x10
c001ddfe:	41                   	inc    ecx
c001ddff:	eb c1                	jmp    c001ddc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de01:	31 f6                	xor    esi,esi
c001de03:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de09:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de0d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de14:	75 06                	jne    c001de1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de16:	01 f6                	add    esi,esi
c001de18:	01 f5                	add    ebp,esi
c001de1a:	eb bd                	jmp    c001ddd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de1c:	51                   	push   ecx
c001de1d:	51                   	push   ecx
c001de1e:	52                   	push   edx
c001de1f:	50                   	push   eax
c001de20:	e8 87 ea ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001de25:	89 c2                	mov    edx,eax
c001de27:	66 ed                	in     ax,dx
c001de29:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	46                   	inc    esi
c001de32:	eb cf                	jmp    c001de03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de34:	51                   	push   ecx
c001de35:	51                   	push   ecx
c001de36:	52                   	push   edx
c001de37:	50                   	push   eax
c001de38:	e8 ef eb ff ff       	call   c001ca2c <IDE::waitInterrupt(unsigned char)>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	84 c0                	test   al,al
c001de42:	0f 84 e8 fd ff ff    	je     c001dc30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de48:	52                   	push   edx
c001de49:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de4e:	52                   	push   edx
c001de4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de56:	50                   	push   eax
c001de57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de5d:	e8 36 ea ff ff       	call   c001c898 <IDE::prepareInterrupt(unsigned char)>
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	50                   	push   eax
c001de66:	50                   	push   eax
c001de67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de6e:	50                   	push   eax
c001de6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de75:	e8 32 ea ff ff       	call   c001c8ac <IDE::getBase(unsigned char)>
c001de7a:	8d 50 07             	lea    edx,[eax+0x7]
c001de7d:	ec                   	in     al,dx
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	a8 88                	test   al,0x88
c001de83:	74 0a                	je     c001de8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de85:	4b                   	dec    ebx
c001de86:	75 dd                	jne    c001de65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de88:	bb 02 00 00 00       	mov    ebx,0x2
c001de8d:	eb 02                	jmp    c001de91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de8f:	31 db                	xor    ebx,ebx
c001de91:	83 c4 1c             	add    esp,0x1c
c001de94:	89 d8                	mov    eax,ebx
c001de96:	5b                   	pop    ebx
c001de97:	5e                   	pop    esi
c001de98:	5f                   	pop    edi
c001de99:	5d                   	pop    ebp
c001de9a:	c3                   	ret    
c001de9b:	90                   	nop

c001de9c <ATAPI::diskRemoved()>:
c001de9c:	83 ec 18             	sub    esp,0x18
c001de9f:	68 f7 37 02 c0       	push   0xc00237f7
c001dea4:	e8 62 13 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001dea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dead:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001deb4:	83 c4 1c             	add    esp,0x1c
c001deb7:	c3                   	ret    

c001deb8 <ATAPI::eject()>:
c001deb8:	57                   	push   edi
c001deb9:	b9 03 00 00 00       	mov    ecx,0x3
c001debe:	53                   	push   ebx
c001debf:	83 ec 14             	sub    esp,0x14
c001dec2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dec6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001deca:	fc                   	cld    
c001decb:	31 c0                	xor    eax,eax
c001decd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001decf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ded4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ded9:	50                   	push   eax
c001deda:	50                   	push   eax
c001dedb:	6a 00                	push   0x0
c001dedd:	6a 00                	push   0x0
c001dedf:	6a 00                	push   0x0
c001dee1:	6a 02                	push   0x2
c001dee3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dee7:	50                   	push   eax
c001dee8:	53                   	push   ebx
c001dee9:	e8 ee fc ff ff       	call   c001dbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001deee:	83 c4 14             	add    esp,0x14
c001def1:	53                   	push   ebx
c001def2:	e8 a5 ff ff ff       	call   c001de9c <ATAPI::diskRemoved()>
c001def7:	83 c4 24             	add    esp,0x24
c001defa:	5b                   	pop    ebx
c001defb:	5f                   	pop    edi
c001defc:	c3                   	ret    
c001defd:	90                   	nop

c001defe <ATAPI::diskInserted()>:
c001defe:	53                   	push   ebx
c001deff:	83 ec 14             	sub    esp,0x14
c001df02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df06:	68 0d 38 02 c0       	push   0xc002380d
c001df0b:	e8 fb 12 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001df10:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df1a:	e8 6f 2b ff ff       	call   c0010a8e <PhysicalDisk::startCache()>
c001df1f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df23:	83 c4 18             	add    esp,0x18
c001df26:	5b                   	pop    ebx
c001df27:	e9 3e 4b ff ff       	jmp    c0012a6a <createPartitionsForDisk(PhysicalDisk*)>

c001df2c <ATAPI::detectMedia()>:
c001df2c:	56                   	push   esi
c001df2d:	53                   	push   ebx
c001df2e:	83 ec 28             	sub    esp,0x28
c001df31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df35:	6a 0c                	push   0xc
c001df37:	6a 00                	push   0x0
c001df39:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df3d:	56                   	push   esi
c001df3e:	e8 77 27 fe ff       	call   c00006ba <memset>
c001df43:	58                   	pop    eax
c001df44:	5a                   	pop    edx
c001df45:	6a 00                	push   0x0
c001df47:	6a 00                	push   0x0
c001df49:	6a 00                	push   0x0
c001df4b:	6a 00                	push   0x0
c001df4d:	56                   	push   esi
c001df4e:	53                   	push   ebx
c001df4f:	e8 88 fc ff ff       	call   c001dbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df54:	83 c4 1c             	add    esp,0x1c
c001df57:	6a 0c                	push   0xc
c001df59:	6a 00                	push   0x0
c001df5b:	56                   	push   esi
c001df5c:	e8 59 27 fe ff       	call   c00006ba <memset>
c001df61:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df66:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df6b:	59                   	pop    ecx
c001df6c:	58                   	pop    eax
c001df6d:	6a 01                	push   0x1
c001df6f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df73:	50                   	push   eax
c001df74:	6a 00                	push   0x0
c001df76:	6a 12                	push   0x12
c001df78:	56                   	push   esi
c001df79:	53                   	push   ebx
c001df7a:	e8 5d fc ff ff       	call   c001dbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df7f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df83:	83 c4 20             	add    esp,0x20
c001df86:	83 e0 7f             	and    eax,0x7f
c001df89:	3c 70                	cmp    al,0x70
c001df8b:	74 15                	je     c001dfa2 <ATAPI::detectMedia()+0x76>
c001df8d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df94:	75 0c                	jne    c001dfa2 <ATAPI::detectMedia()+0x76>
c001df96:	83 ec 0c             	sub    esp,0xc
c001df99:	53                   	push   ebx
c001df9a:	e8 5f ff ff ff       	call   c001defe <ATAPI::diskInserted()>
c001df9f:	83 c4 10             	add    esp,0x10
c001dfa2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfa6:	83 e0 0f             	and    eax,0xf
c001dfa9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfae:	75 18                	jne    c001dfc8 <ATAPI::detectMedia()+0x9c>
c001dfb0:	3c 02                	cmp    al,0x2
c001dfb2:	75 14                	jne    c001dfc8 <ATAPI::detectMedia()+0x9c>
c001dfb4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfbb:	74 24                	je     c001dfe1 <ATAPI::detectMedia()+0xb5>
c001dfbd:	83 ec 0c             	sub    esp,0xc
c001dfc0:	53                   	push   ebx
c001dfc1:	e8 d6 fe ff ff       	call   c001de9c <ATAPI::diskRemoved()>
c001dfc6:	eb 16                	jmp    c001dfde <ATAPI::detectMedia()+0xb2>
c001dfc8:	84 c0                	test   al,al
c001dfca:	75 15                	jne    c001dfe1 <ATAPI::detectMedia()+0xb5>
c001dfcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfd3:	75 0c                	jne    c001dfe1 <ATAPI::detectMedia()+0xb5>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	53                   	push   ebx
c001dfd9:	e8 20 ff ff ff       	call   c001defe <ATAPI::diskInserted()>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	83 c4 24             	add    esp,0x24
c001dfe4:	5b                   	pop    ebx
c001dfe5:	5e                   	pop    esi
c001dfe6:	c3                   	ret    
c001dfe7:	90                   	nop

c001dfe8 <ATAPI::open(int, int, void*)>:
c001dfe8:	53                   	push   ebx
c001dfe9:	83 ec 08             	sub    esp,0x8
c001dfec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dff4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dff8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dffe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e004:	c1 e0 06             	shl    eax,0x6
c001e007:	01 d0                	add    eax,edx
c001e009:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e010:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e016:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e01d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e027:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e02d:	6a 04                	push   0x4
c001e02f:	6a 0c                	push   0xc
c001e031:	51                   	push   ecx
c001e032:	52                   	push   edx
c001e033:	e8 86 e8 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e038:	90                   	nop
c001e039:	90                   	nop
c001e03a:	6a 00                	push   0x0
c001e03c:	6a 0c                	push   0xc
c001e03e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e045:	50                   	push   eax
c001e046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e04c:	e8 6d e8 ff ff       	call   c001c8be <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e051:	83 c4 14             	add    esp,0x14
c001e054:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e05b:	53                   	push   ebx
c001e05c:	e8 cb fe ff ff       	call   c001df2c <ATAPI::detectMedia()>
c001e061:	83 c4 18             	add    esp,0x18
c001e064:	31 c0                	xor    eax,eax
c001e066:	5b                   	pop    ebx
c001e067:	c3                   	ret    

c001e068 <ATAPI::read(unsigned long long, int, void*)>:
c001e068:	55                   	push   ebp
c001e069:	57                   	push   edi
c001e06a:	56                   	push   esi
c001e06b:	53                   	push   ebx
c001e06c:	83 ec 1c             	sub    esp,0x1c
c001e06f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e073:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e077:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e07b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e082:	74 3c                	je     c001e0c0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e084:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e088:	b9 03 00 00 00       	mov    ecx,0x3
c001e08d:	fc                   	cld    
c001e08e:	31 c0                	xor    eax,eax
c001e090:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e092:	0f ce                	bswap  esi
c001e094:	89 e8                	mov    eax,ebp
c001e096:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e09b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e09f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0a3:	50                   	push   eax
c001e0a4:	50                   	push   eax
c001e0a5:	55                   	push   ebp
c001e0a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0aa:	c1 e5 0b             	shl    ebp,0xb
c001e0ad:	6a 00                	push   0x0
c001e0af:	55                   	push   ebp
c001e0b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0b4:	50                   	push   eax
c001e0b5:	53                   	push   ebx
c001e0b6:	e8 21 fb ff ff       	call   c001dbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0bb:	83 c4 20             	add    esp,0x20
c001e0be:	eb 1a                	jmp    c001e0da <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	53                   	push   ebx
c001e0c4:	e8 63 fe ff ff       	call   c001df2c <ATAPI::detectMedia()>
c001e0c9:	83 c4 10             	add    esp,0x10
c001e0cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0d3:	75 af                	jne    c001e084 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0d5:	b8 02 00 00 00       	mov    eax,0x2
c001e0da:	83 c4 1c             	add    esp,0x1c
c001e0dd:	5b                   	pop    ebx
c001e0de:	5e                   	pop    esi
c001e0df:	5f                   	pop    edi
c001e0e0:	5d                   	pop    ebp
c001e0e1:	c3                   	ret    

c001e0e2 <AVX::open(int, int, void*)>:
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	e8 8e 10 00 00       	call   c001f178 <avxInit>
c001e0ea:	b8 00 00 00 00       	mov    eax,0x0
c001e0ef:	83 c4 0c             	add    esp,0xc
c001e0f2:	c3                   	ret    
c001e0f3:	90                   	nop

c001e0f4 <AVX::close(int, int, void*)>:
c001e0f4:	83 ec 0c             	sub    esp,0xc
c001e0f7:	e8 7d 10 00 00       	call   c001f179 <avxClose>
c001e0fc:	b8 00 00 00 00       	mov    eax,0x0
c001e101:	83 c4 0c             	add    esp,0xc
c001e104:	c3                   	ret    
c001e105:	90                   	nop

c001e106 <AVX::available()>:
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	e8 62 10 00 00       	call   c001f170 <avxDetect>
c001e10e:	85 c0                	test   eax,eax
c001e110:	0f 95 c0             	setne  al
c001e113:	83 c4 0c             	add    esp,0xc
c001e116:	c3                   	ret    
c001e117:	90                   	nop

c001e118 <AVX::save(void*)>:
c001e118:	83 ec 0c             	sub    esp,0xc
c001e11b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	50                   	push   eax
c001e123:	e8 4e 10 00 00       	call   c001f176 <avxSave>
c001e128:	83 c4 10             	add    esp,0x10
c001e12b:	90                   	nop
c001e12c:	83 c4 0c             	add    esp,0xc
c001e12f:	c3                   	ret    

c001e130 <AVX::load(void*)>:
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e137:	83 ec 0c             	sub    esp,0xc
c001e13a:	50                   	push   eax
c001e13b:	e8 37 10 00 00       	call   c001f177 <avxLoad>
c001e140:	83 c4 10             	add    esp,0x10
c001e143:	90                   	nop
c001e144:	83 c4 0c             	add    esp,0xc
c001e147:	c3                   	ret    

c001e148 <AVX::AVX()>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14f:	83 ec 08             	sub    esp,0x8
c001e152:	68 58 38 02 c0       	push   0xc0023858
c001e157:	50                   	push   eax
c001e158:	e8 a7 29 ff ff       	call   c0010b04 <FPU::FPU(char const*)>
c001e15d:	83 c4 10             	add    esp,0x10
c001e160:	ba 68 38 02 c0       	mov    edx,0xc0023868
c001e165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e169:	89 10                	mov    DWORD PTR [eax],edx
c001e16b:	90                   	nop
c001e16c:	83 c4 0c             	add    esp,0xc
c001e16f:	c3                   	ret    

c001e170 <MMX::available()>:
c001e170:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e175:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e17b:	83 e0 20             	and    eax,0x20
c001e17e:	84 c0                	test   al,al
c001e180:	0f 95 c0             	setne  al
c001e183:	c3                   	ret    

c001e184 <MMX::open(int, int, void*)>:
c001e184:	83 ec 0c             	sub    esp,0xc
c001e187:	e8 60 10 00 00       	call   c001f1ec <x87Init>
c001e18c:	b8 00 00 00 00       	mov    eax,0x0
c001e191:	83 c4 0c             	add    esp,0xc
c001e194:	c3                   	ret    
c001e195:	90                   	nop

c001e196 <MMX::close(int, int, void*)>:
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	e8 68 10 00 00       	call   c001f206 <x87Close>
c001e19e:	b8 00 00 00 00       	mov    eax,0x0
c001e1a3:	83 c4 0c             	add    esp,0xc
c001e1a6:	c3                   	ret    
c001e1a7:	90                   	nop

c001e1a8 <MMX::save(void*)>:
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1af:	83 ec 0c             	sub    esp,0xc
c001e1b2:	50                   	push   eax
c001e1b3:	e8 29 10 00 00       	call   c001f1e1 <x87Save>
c001e1b8:	83 c4 10             	add    esp,0x10
c001e1bb:	90                   	nop
c001e1bc:	83 c4 0c             	add    esp,0xc
c001e1bf:	c3                   	ret    

c001e1c0 <MMX::load(void*)>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	50                   	push   eax
c001e1cb:	e8 17 10 00 00       	call   c001f1e7 <x87Load>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	90                   	nop
c001e1d4:	83 c4 0c             	add    esp,0xc
c001e1d7:	c3                   	ret    

c001e1d8 <MMX::MMX()>:
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	68 98 38 02 c0       	push   0xc0023898
c001e1e7:	50                   	push   eax
c001e1e8:	e8 17 29 ff ff       	call   c0010b04 <FPU::FPU(char const*)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	ba a8 38 02 c0       	mov    edx,0xc00238a8
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	89 10                	mov    DWORD PTR [eax],edx
c001e1fb:	90                   	nop
c001e1fc:	83 c4 0c             	add    esp,0xc
c001e1ff:	c3                   	ret    

c001e200 <SSE::open(int, int, void*)>:
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	e8 9f 0f 00 00       	call   c001f1a7 <sseInit>
c001e208:	b8 00 00 00 00       	mov    eax,0x0
c001e20d:	83 c4 0c             	add    esp,0xc
c001e210:	c3                   	ret    
c001e211:	90                   	nop

c001e212 <SSE::close(int, int, void*)>:
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	e8 9d 0f 00 00       	call   c001f1b7 <sseClose>
c001e21a:	b8 00 00 00 00       	mov    eax,0x0
c001e21f:	83 c4 0c             	add    esp,0xc
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <SSE::available()>:
c001e224:	83 ec 1c             	sub    esp,0x1c
c001e227:	e8 54 0f 00 00       	call   c001f180 <sseDetect>
c001e22c:	85 c0                	test   eax,eax
c001e22e:	0f 95 c0             	setne  al
c001e231:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e235:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e239:	83 c4 1c             	add    esp,0x1c
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <SSE::save(void*)>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e245:	83 ec 0c             	sub    esp,0xc
c001e248:	50                   	push   eax
c001e249:	e8 4d 0f 00 00       	call   c001f19b <sseSave>
c001e24e:	83 c4 10             	add    esp,0x10
c001e251:	90                   	nop
c001e252:	83 c4 0c             	add    esp,0xc
c001e255:	c3                   	ret    

c001e256 <SSE::load(void*)>:
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	50                   	push   eax
c001e261:	e8 3b 0f 00 00       	call   c001f1a1 <sseLoad>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	90                   	nop
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

c001e26e <SSE::SSE()>:
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e275:	83 ec 08             	sub    esp,0x8
c001e278:	68 d8 38 02 c0       	push   0xc00238d8
c001e27d:	50                   	push   eax
c001e27e:	e8 81 28 ff ff       	call   c0010b04 <FPU::FPU(char const*)>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c001e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28f:	89 10                	mov    DWORD PTR [eax],edx
c001e291:	90                   	nop
c001e292:	83 c4 0c             	add    esp,0xc
c001e295:	c3                   	ret    

c001e296 <x87::open(int, int, void*)>:
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	e8 4e 0f 00 00       	call   c001f1ec <x87Init>
c001e29e:	b8 00 00 00 00       	mov    eax,0x0
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <x87::close(int, int, void*)>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	e8 56 0f 00 00       	call   c001f206 <x87Close>
c001e2b0:	b8 00 00 00 00       	mov    eax,0x0
c001e2b5:	83 c4 0c             	add    esp,0xc
c001e2b8:	c3                   	ret    
c001e2b9:	90                   	nop

c001e2ba <x87::available()>:
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	e8 04 0f 00 00       	call   c001f1c6 <x87Detect>
c001e2c2:	85 c0                	test   eax,eax
c001e2c4:	0f 95 c0             	setne  al
c001e2c7:	83 c4 0c             	add    esp,0xc
c001e2ca:	c3                   	ret    
c001e2cb:	90                   	nop

c001e2cc <x87::save(void*)>:
c001e2cc:	83 ec 0c             	sub    esp,0xc
c001e2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	50                   	push   eax
c001e2d7:	e8 05 0f 00 00       	call   c001f1e1 <x87Save>
c001e2dc:	83 c4 10             	add    esp,0x10
c001e2df:	90                   	nop
c001e2e0:	83 c4 0c             	add    esp,0xc
c001e2e3:	c3                   	ret    

c001e2e4 <x87::load(void*)>:
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2eb:	83 ec 0c             	sub    esp,0xc
c001e2ee:	50                   	push   eax
c001e2ef:	e8 f3 0e 00 00       	call   c001f1e7 <x87Load>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	90                   	nop
c001e2f8:	83 c4 0c             	add    esp,0xc
c001e2fb:	c3                   	ret    

c001e2fc <x87::x87()>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e303:	83 ec 08             	sub    esp,0x8
c001e306:	68 18 39 02 c0       	push   0xc0023918
c001e30b:	50                   	push   eax
c001e30c:	e8 f3 27 ff ff       	call   c0010b04 <FPU::FPU(char const*)>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	ba 28 39 02 c0       	mov    edx,0xc0023928
c001e319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31d:	89 10                	mov    DWORD PTR [eax],edx
c001e31f:	90                   	nop
c001e320:	83 c4 0c             	add    esp,0xc
c001e323:	c3                   	ret    

c001e324 <APIC::disable()>:
c001e324:	90                   	nop
c001e325:	c3                   	ret    

c001e326 <APIC::close(int, int, void*)>:
c001e326:	55                   	push   ebp
c001e327:	89 e5                	mov    ebp,esp
c001e329:	83 ec 08             	sub    esp,0x8
c001e32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e32f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e331:	83 c0 3c             	add    eax,0x3c
c001e334:	8b 00                	mov    eax,DWORD PTR [eax]
c001e336:	83 ec 0c             	sub    esp,0xc
c001e339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e33c:	ff d0                	call   eax
c001e33e:	83 c4 10             	add    esp,0x10
c001e341:	b8 00 00 00 00       	mov    eax,0x0
c001e346:	c9                   	leave  
c001e347:	c3                   	ret    

c001e348 <IOAPIC::close(int, int, void*)>:
c001e348:	b8 00 00 00 00       	mov    eax,0x0
c001e34d:	c3                   	ret    

c001e34e <APIC::io_wait()>:
c001e34e:	eb 00                	jmp    c001e350 <APIC::io_wait()+0x2>
c001e350:	eb 00                	jmp    c001e352 <APIC::io_wait()+0x4>
c001e352:	90                   	nop
c001e353:	c3                   	ret    

c001e354 <APIC::getBase()>:
c001e354:	55                   	push   ebp
c001e355:	89 e5                	mov    ebp,esp
c001e357:	83 ec 18             	sub    esp,0x18
c001e35a:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e35f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e365:	83 e0 08             	and    eax,0x8
c001e368:	84 c0                	test   al,al
c001e36a:	75 07                	jne    c001e373 <APIC::getBase()+0x1f>
c001e36c:	b8 00 00 00 00       	mov    eax,0x0
c001e371:	eb 21                	jmp    c001e394 <APIC::getBase()+0x40>
c001e373:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e378:	83 ec 08             	sub    esp,0x8
c001e37b:	6a 1b                	push   0x1b
c001e37d:	50                   	push   eax
c001e37e:	e8 f3 d1 fe ff       	call   c000b576 <Computer::rdmsr(unsigned int)>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e389:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e38c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e38f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e394:	c9                   	leave  
c001e395:	c3                   	ret    

c001e396 <APIC::eoi(unsigned char)>:
c001e396:	55                   	push   ebp
c001e397:	89 e5                	mov    ebp,esp
c001e399:	83 ec 28             	sub    esp,0x28
c001e39c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e39f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3a8:	e8 a7 ff ff ff       	call   c001e354 <APIC::getBase()>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	05 b0 00 00 00       	add    eax,0xb0
c001e3b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3bb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3c1:	90                   	nop
c001e3c2:	c9                   	leave  
c001e3c3:	c3                   	ret    

c001e3c4 <APIC::open(int, int, void*)>:
c001e3c4:	55                   	push   ebp
c001e3c5:	89 e5                	mov    ebp,esp
c001e3c7:	57                   	push   edi
c001e3c8:	56                   	push   esi
c001e3c9:	53                   	push   ebx
c001e3ca:	83 ec 1c             	sub    esp,0x1c
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d3:	e8 7c ff ff ff       	call   c001e354 <APIC::getBase()>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	05 f0 00 00 00       	add    eax,0xf0
c001e3e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3e3:	83 ec 0c             	sub    esp,0xc
c001e3e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3e9:	e8 66 ff ff ff       	call   c001e354 <APIC::getBase()>
c001e3ee:	83 c4 10             	add    esp,0x10
c001e3f1:	89 c2                	mov    edx,eax
c001e3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3fc:	89 c7                	mov    edi,eax
c001e3fe:	81 e7 ff 00 00 00    	and    edi,0xff
c001e404:	89 d0                	mov    eax,edx
c001e406:	ba 00 00 00 00       	mov    edx,0x0
c001e40b:	89 c1                	mov    ecx,eax
c001e40d:	80 e5 ff             	and    ch,0xff
c001e410:	89 cb                	mov    ebx,ecx
c001e412:	89 d0                	mov    eax,edx
c001e414:	25 ff 00 00 00       	and    eax,0xff
c001e419:	89 c6                	mov    esi,eax
c001e41b:	89 d8                	mov    eax,ebx
c001e41d:	89 f2                	mov    edx,esi
c001e41f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e422:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e425:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e429:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e42d:	83 e0 00             	and    eax,0x0
c001e430:	09 d0                	or     eax,edx
c001e432:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e439:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e43f:	8d 50 01             	lea    edx,[eax+0x1]
c001e442:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e445:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e44b:	31 d2                	xor    edx,edx
c001e44d:	88 c2                	mov    dl,al
c001e44f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e452:	83 c2 08             	add    edx,0x8
c001e455:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e459:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e45f:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e465:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e469:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e46c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e46e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e471:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e478:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e47b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e47e:	89 10                	mov    DWORD PTR [eax],edx
c001e480:	b8 00 00 00 00       	mov    eax,0x0
c001e485:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e488:	5b                   	pop    ebx
c001e489:	5e                   	pop    esi
c001e48a:	5f                   	pop    edi
c001e48b:	5d                   	pop    ebp
c001e48c:	c3                   	ret    
c001e48d:	90                   	nop

c001e48e <IOAPIC::IOAPIC()>:
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e495:	83 ec 08             	sub    esp,0x8
c001e498:	68 58 39 02 c0       	push   0xc0023958
c001e49d:	50                   	push   eax
c001e49e:	e8 6d 23 ff ff       	call   c0010810 <Device::Device(char const*)>
c001e4a3:	83 c4 10             	add    esp,0x10
c001e4a6:	ba 80 3a 02 c0       	mov    edx,0xc0023a80
c001e4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4af:	89 10                	mov    DWORD PTR [eax],edx
c001e4b1:	90                   	nop
c001e4b2:	83 c4 0c             	add    esp,0xc
c001e4b5:	c3                   	ret    

c001e4b6 <APIC::APIC()>:
c001e4b6:	53                   	push   ebx
c001e4b7:	83 ec 18             	sub    esp,0x18
c001e4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4be:	83 ec 08             	sub    esp,0x8
c001e4c1:	68 60 39 02 c0       	push   0xc0023960
c001e4c6:	50                   	push   eax
c001e4c7:	e8 92 2a ff ff       	call   c0010f5e <InterruptController::InterruptController(char const*)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c001e4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d8:	89 10                	mov    DWORD PTR [eax],edx
c001e4da:	a0 80 65 02 c0       	mov    al,ds:0xc0026580
c001e4df:	83 f0 01             	xor    eax,0x1
c001e4e2:	84 c0                	test   al,al
c001e4e4:	0f 84 a2 00 00 00    	je     c001e58c <APIC::APIC()+0xd6>
c001e4ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4ef:	a0 30 50 02 c0       	mov    al,ds:0xc0025030
c001e4f4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e4f8:	0f 83 87 00 00 00    	jae    c001e585 <APIC::APIC()+0xcf>
c001e4fe:	83 ec 0c             	sub    esp,0xc
c001e501:	68 68 01 00 00       	push   0x168
c001e506:	e8 cb 0b ff ff       	call   c000f0d6 <operator new(unsigned long)>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	89 c3                	mov    ebx,eax
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	53                   	push   ebx
c001e514:	e8 75 ff ff ff       	call   c001e48e <IOAPIC::IOAPIC()>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e520:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e524:	25 ff 00 00 00       	and    eax,0xff
c001e529:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e52d:	89 14 85 60 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9aa0],edx
c001e534:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e539:	40                   	inc    eax
c001e53a:	a3 40 65 02 c0       	mov    ds:0xc0026540,eax
c001e53f:	a1 88 47 02 c0       	mov    eax,ds:0xc0024788
c001e544:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e54a:	83 ec 08             	sub    esp,0x8
c001e54d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e551:	50                   	push   eax
c001e552:	e8 c9 20 ff ff       	call   c0010620 <Device::addChild(Device*)>
c001e557:	83 c4 10             	add    esp,0x10
c001e55a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e55e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e560:	83 c0 08             	add    eax,0x8
c001e563:	8b 10                	mov    edx,DWORD PTR [eax]
c001e565:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e569:	25 ff 00 00 00       	and    eax,0xff
c001e56e:	6a 00                	push   0x0
c001e570:	6a 00                	push   0x0
c001e572:	50                   	push   eax
c001e573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e577:	ff d2                	call   edx
c001e579:	83 c4 10             	add    esp,0x10
c001e57c:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e580:	e9 6a ff ff ff       	jmp    c001e4ef <APIC::APIC()+0x39>
c001e585:	c6 05 80 65 02 c0 01 	mov    BYTE PTR ds:0xc0026580,0x1
c001e58c:	90                   	nop
c001e58d:	83 c4 18             	add    esp,0x18
c001e590:	5b                   	pop    ebx
c001e591:	c3                   	ret    

c001e592 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e592:	55                   	push   ebp
c001e593:	89 e5                	mov    ebp,esp
c001e595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e598:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e59e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a1:	72 1d                	jb     c001e5c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5af:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5b5:	01 d0                	add    eax,edx
c001e5b7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5ba:	73 04                	jae    c001e5c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5bc:	b0 01                	mov    al,0x1
c001e5be:	eb 02                	jmp    c001e5c2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5c0:	b0 00                	mov    al,0x0
c001e5c2:	5d                   	pop    ebp
c001e5c3:	c3                   	ret    

c001e5c4 <IOAPIC::read(int)>:
c001e5c4:	55                   	push   ebp
c001e5c5:	89 e5                	mov    ebp,esp
c001e5c7:	83 ec 10             	sub    esp,0x10
c001e5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5d9:	31 d2                	xor    edx,edx
c001e5db:	88 c2                	mov    dl,al
c001e5dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5e0:	89 10                	mov    DWORD PTR [eax],edx
c001e5e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5e5:	83 c0 10             	add    eax,0x10
c001e5e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5ea:	c9                   	leave  
c001e5eb:	c3                   	ret    

c001e5ec <IOAPIC::open(int, int, void*)>:
c001e5ec:	55                   	push   ebp
c001e5ed:	89 e5                	mov    ebp,esp
c001e5ef:	57                   	push   edi
c001e5f0:	56                   	push   esi
c001e5f1:	53                   	push   ebx
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	68 8b 39 02 c0       	push   0xc002398b
c001e5fd:	e8 09 0c ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e608:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e60b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e614:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e61a:	8b 14 85 60 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafa0]
c001e621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e624:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e62a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e633:	8b 14 85 e0 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf20]
c001e63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e646:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e655:	89 c7                	mov    edi,eax
c001e657:	81 e7 ff 00 00 00    	and    edi,0xff
c001e65d:	89 d0                	mov    eax,edx
c001e65f:	ba 00 00 00 00       	mov    edx,0x0
c001e664:	89 c1                	mov    ecx,eax
c001e666:	80 e5 ff             	and    ch,0xff
c001e669:	89 cb                	mov    ebx,ecx
c001e66b:	89 d0                	mov    eax,edx
c001e66d:	25 ff 00 00 00       	and    eax,0xff
c001e672:	89 c6                	mov    esi,eax
c001e674:	89 d8                	mov    eax,ebx
c001e676:	89 f2                	mov    edx,esi
c001e678:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e67b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e67e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e682:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e686:	83 e0 00             	and    eax,0x0
c001e689:	09 d0                	or     eax,edx
c001e68b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e692:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e698:	8d 50 01             	lea    edx,[eax+0x1]
c001e69b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e69e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6a4:	31 d2                	xor    edx,edx
c001e6a6:	88 c2                	mov    dl,al
c001e6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ab:	83 c2 08             	add    edx,0x8
c001e6ae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6b2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6b8:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6be:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6c2:	83 ec 08             	sub    esp,0x8
c001e6c5:	6a 01                	push   0x1
c001e6c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6ca:	e8 f5 fe ff ff       	call   c001e5c4 <IOAPIC::read(int)>
c001e6cf:	83 c4 10             	add    esp,0x10
c001e6d2:	c1 f8 10             	sar    eax,0x10
c001e6d5:	25 ff 00 00 00       	and    eax,0xff
c001e6da:	8d 50 01             	lea    edx,[eax+0x1]
c001e6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e0:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6e6:	b8 00 00 00 00       	mov    eax,0x0
c001e6eb:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6ee:	5b                   	pop    ebx
c001e6ef:	5e                   	pop    esi
c001e6f0:	5f                   	pop    edi
c001e6f1:	5d                   	pop    ebp
c001e6f2:	c3                   	ret    
c001e6f3:	90                   	nop

c001e6f4 <IOAPIC::write(int, int)>:
c001e6f4:	55                   	push   ebp
c001e6f5:	89 e5                	mov    ebp,esp
c001e6f7:	83 ec 10             	sub    esp,0x10
c001e6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e703:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e706:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e709:	31 d2                	xor    edx,edx
c001e70b:	88 c2                	mov    dl,al
c001e70d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e710:	89 10                	mov    DWORD PTR [eax],edx
c001e712:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e715:	8d 50 10             	lea    edx,[eax+0x10]
c001e718:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e71b:	89 02                	mov    DWORD PTR [edx],eax
c001e71d:	90                   	nop
c001e71e:	c9                   	leave  
c001e71f:	c3                   	ret    

c001e720 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e720:	55                   	push   ebp
c001e721:	89 e5                	mov    ebp,esp
c001e723:	83 ec 20             	sub    esp,0x20
c001e726:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e729:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e72c:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e72f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e732:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e735:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e738:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e73b:	88 d0                	mov    al,dl
c001e73d:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e740:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e743:	25 ff 00 00 00       	and    eax,0xff
c001e748:	83 c0 08             	add    eax,0x8
c001e74b:	01 c0                	add    eax,eax
c001e74d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e750:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e753:	25 ff 00 00 00       	and    eax,0xff
c001e758:	83 c0 08             	add    eax,0x8
c001e75b:	01 c0                	add    eax,eax
c001e75d:	40                   	inc    eax
c001e75e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e761:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e764:	50                   	push   eax
c001e765:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e768:	e8 57 fe ff ff       	call   c001e5c4 <IOAPIC::read(int)>
c001e76d:	83 c4 08             	add    esp,0x8
c001e770:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e773:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e77a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e77d:	c1 e0 18             	shl    eax,0x18
c001e780:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e783:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e786:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e789:	52                   	push   edx
c001e78a:	50                   	push   eax
c001e78b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e78e:	e8 61 ff ff ff       	call   c001e6f4 <IOAPIC::write(int, int)>
c001e793:	83 c4 0c             	add    esp,0xc
c001e796:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e799:	50                   	push   eax
c001e79a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e79d:	e8 22 fe ff ff       	call   c001e5c4 <IOAPIC::read(int)>
c001e7a2:	83 c4 08             	add    esp,0x8
c001e7a5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7a8:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7af:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7b6:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7bd:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7c4:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7c7:	25 ff 00 00 00       	and    eax,0xff
c001e7cc:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7cf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7d2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7d5:	52                   	push   edx
c001e7d6:	50                   	push   eax
c001e7d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7da:	e8 15 ff ff ff       	call   c001e6f4 <IOAPIC::write(int, int)>
c001e7df:	83 c4 0c             	add    esp,0xc
c001e7e2:	90                   	nop
c001e7e3:	c9                   	leave  
c001e7e4:	c3                   	ret    
c001e7e5:	90                   	nop

c001e7e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7e6:	55                   	push   ebp
c001e7e7:	89 e5                	mov    ebp,esp
c001e7e9:	56                   	push   esi
c001e7ea:	53                   	push   ebx
c001e7eb:	83 ec 20             	sub    esp,0x20
c001e7ee:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7f4:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e7f8:	74 2a                	je     c001e824 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e7fa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e7fe:	7f 14                	jg     c001e814 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e803:	05 e0 3e 02 c0       	add    eax,0xc0023ee0
c001e808:	8a 00                	mov    al,BYTE PTR [eax]
c001e80a:	25 ff 00 00 00       	and    eax,0xff
c001e80f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e812:	eb 10                	jmp    c001e824 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e814:	83 ec 0c             	sub    esp,0xc
c001e817:	68 9c 39 02 c0       	push   0xc002399c
c001e81c:	e8 19 72 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001e821:	83 c4 10             	add    esp,0x10
c001e824:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e828:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e82d:	83 ec 08             	sub    esp,0x8
c001e830:	50                   	push   eax
c001e831:	68 d4 39 02 c0       	push   0xc00239d4
c001e836:	e8 d0 09 ff ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001e83b:	83 c4 10             	add    esp,0x10
c001e83e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e845:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c001e84a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e84d:	7d 64                	jge    c001e8b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e84f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e852:	8b 04 85 60 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9aa0]
c001e859:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e85c:	83 ec 08             	sub    esp,0x8
c001e85f:	52                   	push   edx
c001e860:	50                   	push   eax
c001e861:	e8 2c fd ff ff       	call   c001e592 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e866:	83 c4 10             	add    esp,0x10
c001e869:	84 c0                	test   al,al
c001e86b:	74 41                	je     c001e8ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e86d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e870:	8b 1c 85 60 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9aa0]
c001e877:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e87a:	83 c0 20             	add    eax,0x20
c001e87d:	89 c6                	mov    esi,eax
c001e87f:	81 e6 ff 00 00 00    	and    esi,0xff
c001e885:	e8 41 60 ff ff       	call   c00148cb <getCPUNumber()>
c001e88a:	89 c2                	mov    edx,eax
c001e88c:	c1 fa 1f             	sar    edx,0x1f
c001e88f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e892:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	56                   	push   esi
c001e89c:	52                   	push   edx
c001e89d:	50                   	push   eax
c001e89e:	51                   	push   ecx
c001e89f:	53                   	push   ebx
c001e8a0:	e8 7b fe ff ff       	call   c001e720 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8a5:	83 c4 20             	add    esp,0x20
c001e8a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8ac:	eb 05                	jmp    c001e8b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8ae:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8b1:	eb 92                	jmp    c001e845 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8b3:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8b6:	83 f0 01             	xor    eax,0x1
c001e8b9:	84 c0                	test   al,al
c001e8bb:	74 10                	je     c001e8cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8bd:	83 ec 0c             	sub    esp,0xc
c001e8c0:	68 eb 39 02 c0       	push   0xc00239eb
c001e8c5:	e8 70 71 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001e8ca:	83 c4 10             	add    esp,0x10
c001e8cd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8d1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8d8:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8dc:	7f 65                	jg     c001e943 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8e4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8ee:	01 ca                	add    edx,ecx
c001e8f0:	83 c2 54             	add    edx,0x54
c001e8f3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e8f7:	85 c0                	test   eax,eax
c001e8f9:	75 43                	jne    c001e93e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e901:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e908:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e90b:	01 ca                	add    edx,ecx
c001e90d:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e910:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e913:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e91a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e91d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e924:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e927:	01 ca                	add    edx,ecx
c001e929:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e92f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e932:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e936:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e939:	83 e8 20             	sub    eax,0x20
c001e93c:	eb 1a                	jmp    c001e958 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e93e:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e941:	eb 95                	jmp    c001e8d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e943:	83 ec 0c             	sub    esp,0xc
c001e946:	68 f8 39 02 c0       	push   0xc00239f8
c001e94b:	e8 ea 70 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e958:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e95b:	5b                   	pop    ebx
c001e95c:	5e                   	pop    esi
c001e95d:	5d                   	pop    ebp
c001e95e:	c3                   	ret    
c001e95f:	90                   	nop

c001e960 <PIC::disable()>:
c001e960:	55                   	push   ebp
c001e961:	89 e5                	mov    ebp,esp
c001e963:	83 ec 10             	sub    esp,0x10
c001e966:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e96c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e970:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e973:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e977:	ee                   	out    dx,al
c001e978:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e97e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e982:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e985:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e989:	ee                   	out    dx,al
c001e98a:	90                   	nop
c001e98b:	c9                   	leave  
c001e98c:	c3                   	ret    
c001e98d:	90                   	nop

c001e98e <PIC::close(int, int, void*)>:
c001e98e:	55                   	push   ebp
c001e98f:	89 e5                	mov    ebp,esp
c001e991:	83 ec 08             	sub    esp,0x8
c001e994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e997:	8b 00                	mov    eax,DWORD PTR [eax]
c001e999:	83 c0 3c             	add    eax,0x3c
c001e99c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99e:	83 ec 0c             	sub    esp,0xc
c001e9a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9a4:	ff d0                	call   eax
c001e9a6:	83 c4 10             	add    esp,0x10
c001e9a9:	b8 00 00 00 00       	mov    eax,0x0
c001e9ae:	c9                   	leave  
c001e9af:	c3                   	ret    

c001e9b0 <PIC::PIC()>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	83 ec 08             	sub    esp,0x8
c001e9ba:	68 a4 3a 02 c0       	push   0xc0023aa4
c001e9bf:	50                   	push   eax
c001e9c0:	e8 99 25 ff ff       	call   c0010f5e <InterruptController::InterruptController(char const*)>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	89 10                	mov    DWORD PTR [eax],edx
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9dd:	31 d2                	xor    edx,edx
c001e9df:	88 c2                	mov    dl,al
c001e9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e5:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f6:	31 d2                	xor    edx,edx
c001e9f8:	88 c2                	mov    dl,al
c001e9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fe:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ea10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea14:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea1a:	31 d2                	xor    edx,edx
c001ea1c:	88 c2                	mov    dl,al
c001ea1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea22:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea26:	83 e1 3f             	and    ecx,0x3f
c001ea29:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea31:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea37:	31 d2                	xor    edx,edx
c001ea39:	88 c2                	mov    dl,al
c001ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea50:	31 d2                	xor    edx,edx
c001ea52:	88 c2                	mov    dl,al
c001ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea58:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea67:	8d 50 01             	lea    edx,[eax+0x1]
c001ea6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea74:	31 d2                	xor    edx,edx
c001ea76:	88 c2                	mov    dl,al
c001ea78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea80:	83 e1 3f             	and    ecx,0x3f
c001ea83:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea87:	90                   	nop
c001ea88:	83 c4 0c             	add    esp,0xc
c001ea8b:	c3                   	ret    

c001ea8c <PIC::ioWait()>:
c001ea8c:	eb 00                	jmp    c001ea8e <PIC::ioWait()+0x2>
c001ea8e:	eb 00                	jmp    c001ea90 <PIC::ioWait()+0x4>
c001ea90:	90                   	nop
c001ea91:	c3                   	ret    

c001ea92 <PIC::getIRQReg(int)>:
c001ea92:	55                   	push   ebp
c001ea93:	89 e5                	mov    ebp,esp
c001ea95:	83 ec 10             	sub    esp,0x10
c001ea98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea9b:	25 ff 00 00 00       	and    eax,0xff
c001eaa0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eaa6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eaa9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eaac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eab0:	ee                   	out    dx,al
c001eab1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eab4:	25 ff 00 00 00       	and    eax,0xff
c001eab9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eabf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eac2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eac5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eac9:	ee                   	out    dx,al
c001eaca:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001ead0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001ead4:	89 c2                	mov    edx,eax
c001ead6:	ec                   	in     al,dx
c001ead7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eada:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eadd:	25 ff 00 00 00       	and    eax,0xff
c001eae2:	c1 e0 08             	shl    eax,0x8
c001eae5:	89 c1                	mov    ecx,eax
c001eae7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eaed:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eaf1:	89 c2                	mov    edx,eax
c001eaf3:	ec                   	in     al,dx
c001eaf4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eaf7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eafa:	25 ff 00 00 00       	and    eax,0xff
c001eaff:	09 c8                	or     eax,ecx
c001eb01:	c9                   	leave  
c001eb02:	c3                   	ret    
c001eb03:	90                   	nop

c001eb04 <PIC::eoi(unsigned char)>:
c001eb04:	55                   	push   ebp
c001eb05:	89 e5                	mov    ebp,esp
c001eb07:	83 ec 14             	sub    esp,0x14
c001eb0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb0d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb10:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb14:	75 23                	jne    c001eb39 <PIC::eoi(unsigned char)+0x35>
c001eb16:	6a 0b                	push   0xb
c001eb18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb1b:	e8 72 ff ff ff       	call   c001ea92 <PIC::getIRQReg(int)>
c001eb20:	83 c4 08             	add    esp,0x8
c001eb23:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb27:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb2b:	25 ff ff 00 00       	and    eax,0xffff
c001eb30:	25 80 00 00 00       	and    eax,0x80
c001eb35:	85 c0                	test   eax,eax
c001eb37:	74 5f                	je     c001eb98 <PIC::eoi(unsigned char)+0x94>
c001eb39:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb3d:	75 2d                	jne    c001eb6c <PIC::eoi(unsigned char)+0x68>
c001eb3f:	6a 0b                	push   0xb
c001eb41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb44:	e8 49 ff ff ff       	call   c001ea92 <PIC::getIRQReg(int)>
c001eb49:	83 c4 08             	add    esp,0x8
c001eb4c:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb53:	66 85 c0             	test   ax,ax
c001eb56:	78 14                	js     c001eb6c <PIC::eoi(unsigned char)+0x68>
c001eb58:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb5e:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb62:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb65:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb69:	ee                   	out    dx,al
c001eb6a:	eb 2d                	jmp    c001eb99 <PIC::eoi(unsigned char)+0x95>
c001eb6c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb70:	76 12                	jbe    c001eb84 <PIC::eoi(unsigned char)+0x80>
c001eb72:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb78:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb7c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb7f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb83:	ee                   	out    dx,al
c001eb84:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb8a:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb8e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb91:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb95:	ee                   	out    dx,al
c001eb96:	eb 01                	jmp    c001eb99 <PIC::eoi(unsigned char)+0x95>
c001eb98:	90                   	nop
c001eb99:	c9                   	leave  
c001eb9a:	c3                   	ret    
c001eb9b:	90                   	nop

c001eb9c <PIC::remap()>:
c001eb9c:	55                   	push   ebp
c001eb9d:	89 e5                	mov    ebp,esp
c001eb9f:	83 ec 48             	sub    esp,0x48
c001eba2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001eba9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebb0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebb6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebb9:	89 c2                	mov    edx,eax
c001ebbb:	ec                   	in     al,dx
c001ebbc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebbf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebc2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebc5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebcb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebce:	89 c2                	mov    edx,eax
c001ebd0:	ec                   	in     al,dx
c001ebd1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebd4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebd7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebda:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebe0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebe4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebe7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebea:	ee                   	out    dx,al
c001ebeb:	83 ec 0c             	sub    esp,0xc
c001ebee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebf1:	e8 96 fe ff ff       	call   c001ea8c <PIC::ioWait()>
c001ebf6:	83 c4 10             	add    esp,0x10
c001ebf9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ebff:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec03:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec06:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec09:	ee                   	out    dx,al
c001ec0a:	83 ec 0c             	sub    esp,0xc
c001ec0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec10:	e8 77 fe ff ff       	call   c001ea8c <PIC::ioWait()>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec1b:	25 ff 00 00 00       	and    eax,0xff
c001ec20:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec26:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec29:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec2c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec2f:	ee                   	out    dx,al
c001ec30:	83 ec 0c             	sub    esp,0xc
c001ec33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec36:	e8 51 fe ff ff       	call   c001ea8c <PIC::ioWait()>
c001ec3b:	83 c4 10             	add    esp,0x10
c001ec3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec41:	25 ff 00 00 00       	and    eax,0xff
c001ec46:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec4c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec4f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec52:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec55:	ee                   	out    dx,al
c001ec56:	83 ec 0c             	sub    esp,0xc
c001ec59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec5c:	e8 2b fe ff ff       	call   c001ea8c <PIC::ioWait()>
c001ec61:	83 c4 10             	add    esp,0x10
c001ec64:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec6a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec6e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec71:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec74:	ee                   	out    dx,al
c001ec75:	83 ec 0c             	sub    esp,0xc
c001ec78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec7b:	e8 0c fe ff ff       	call   c001ea8c <PIC::ioWait()>
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec89:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec8d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec90:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec93:	ee                   	out    dx,al
c001ec94:	83 ec 0c             	sub    esp,0xc
c001ec97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec9a:	e8 ed fd ff ff       	call   c001ea8c <PIC::ioWait()>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001eca8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecac:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecaf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecb2:	ee                   	out    dx,al
c001ecb3:	83 ec 0c             	sub    esp,0xc
c001ecb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb9:	e8 ce fd ff ff       	call   c001ea8c <PIC::ioWait()>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecc7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001eccb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ecd1:	ee                   	out    dx,al
c001ecd2:	83 ec 0c             	sub    esp,0xc
c001ecd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd8:	e8 af fd ff ff       	call   c001ea8c <PIC::ioWait()>
c001ecdd:	83 c4 10             	add    esp,0x10
c001ece0:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ece3:	25 ff 00 00 00       	and    eax,0xff
c001ece8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ecee:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ecf1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ecf4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecf7:	ee                   	out    dx,al
c001ecf8:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ecfb:	25 ff 00 00 00       	and    eax,0xff
c001ed00:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed06:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed09:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed0c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed0f:	ee                   	out    dx,al
c001ed10:	90                   	nop
c001ed11:	c9                   	leave  
c001ed12:	c3                   	ret    
c001ed13:	90                   	nop

c001ed14 <PIC::open(int, int, void*)>:
c001ed14:	55                   	push   ebp
c001ed15:	89 e5                	mov    ebp,esp
c001ed17:	83 ec 18             	sub    esp,0x18
c001ed1a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed20:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed24:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed27:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed2b:	ee                   	out    dx,al
c001ed2c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed32:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed36:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed39:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed3d:	ee                   	out    dx,al
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed44:	e8 53 fe ff ff       	call   c001eb9c <PIC::remap()>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	b8 00 00 00 00       	mov    eax,0x0
c001ed51:	c9                   	leave  
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <APICTimer::close(int, int, void*)>:
c001ed54:	b8 00 00 00 00       	mov    eax,0x0
c001ed59:	c3                   	ret    

c001ed5a <apicTimerHandler(regs*, void*)>:
c001ed5a:	83 ec 0c             	sub    esp,0xc
c001ed5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed61:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed63:	89 c2                	mov    edx,eax
c001ed65:	c1 fa 1f             	sar    edx,0x1f
c001ed68:	52                   	push   edx
c001ed69:	50                   	push   eax
c001ed6a:	6a 00                	push   0x0
c001ed6c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed71:	e8 86 07 00 00       	call   c001f4fc <__udivdi3>
c001ed76:	83 c4 10             	add    esp,0x10
c001ed79:	83 ec 08             	sub    esp,0x8
c001ed7c:	52                   	push   edx
c001ed7d:	50                   	push   eax
c001ed7e:	e8 08 40 ff ff       	call   c0012d8b <timerHandler(unsigned long long)>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	90                   	nop
c001ed87:	83 c4 0c             	add    esp,0xc
c001ed8a:	c3                   	ret    
c001ed8b:	90                   	nop

c001ed8c <APICTimer::write(int)>:
c001ed8c:	53                   	push   ebx
c001ed8d:	83 ec 28             	sub    esp,0x28
c001ed90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed94:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed98:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed9e:	e8 2b 5b ff ff       	call   c00148ce <thisCPU()>
c001eda3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eda9:	83 ec 0c             	sub    esp,0xc
c001edac:	50                   	push   eax
c001edad:	e8 a2 f5 ff ff       	call   c001e354 <APIC::getBase()>
c001edb2:	83 c4 10             	add    esp,0x10
c001edb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edb9:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c001edbe:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c001edc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edc8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edd0:	05 e0 03 00 00       	add    eax,0x3e0
c001edd5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eddf:	05 80 03 00 00       	add    eax,0x380
c001ede4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edea:	fb                   	sti    
c001edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edf3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001edf8:	83 d2 00             	adc    edx,0x0
c001edfb:	89 c1                	mov    ecx,eax
c001edfd:	89 d3                	mov    ebx,edx
c001edff:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c001ee04:	8b 15 f4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024df4
c001ee0a:	39 c8                	cmp    eax,ecx
c001ee0c:	89 d0                	mov    eax,edx
c001ee0e:	19 d8                	sbb    eax,ebx
c001ee10:	73 02                	jae    c001ee14 <APICTimer::write(int)+0x88>
c001ee12:	eb d7                	jmp    c001edeb <APICTimer::write(int)+0x5f>
c001ee14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee18:	05 20 03 00 00       	add    eax,0x320
c001ee1d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee27:	05 90 03 00 00       	add    eax,0x390
c001ee2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee2e:	f7 d0                	not    eax
c001ee30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee3c:	ba 00 00 00 00       	mov    edx,0x0
c001ee41:	f7 f3                	div    ebx
c001ee43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee51:	0d 00 00 02 00       	or     eax,0x20000
c001ee56:	89 c2                	mov    edx,eax
c001ee58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee5c:	05 20 03 00 00       	add    eax,0x320
c001ee61:	89 10                	mov    DWORD PTR [eax],edx
c001ee63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee67:	05 e0 03 00 00       	add    eax,0x3e0
c001ee6c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee76:	05 80 03 00 00       	add    eax,0x380
c001ee7b:	89 c2                	mov    edx,eax
c001ee7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee81:	89 02                	mov    DWORD PTR [edx],eax
c001ee83:	90                   	nop
c001ee84:	83 c4 28             	add    esp,0x28
c001ee87:	5b                   	pop    ebx
c001ee88:	c3                   	ret    
c001ee89:	90                   	nop

c001ee8a <APICTimer::open(int, int, void*)>:
c001ee8a:	57                   	push   edi
c001ee8b:	56                   	push   esi
c001ee8c:	53                   	push   ebx
c001ee8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee91:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee93:	83 c0 24             	add    eax,0x24
c001ee96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee98:	83 ec 08             	sub    esp,0x8
c001ee9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea3:	ff d0                	call   eax
c001eea5:	83 c4 10             	add    esp,0x10
c001eea8:	e8 21 5a ff ff       	call   c00148ce <thisCPU()>
c001eead:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	50                   	push   eax
c001eeb7:	e8 98 f4 ff ff       	call   c001e354 <APIC::getBase()>
c001eebc:	83 c4 10             	add    esp,0x10
c001eebf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eecf:	89 c7                	mov    edi,eax
c001eed1:	81 e7 ff 00 00 00    	and    edi,0xff
c001eed7:	89 d0                	mov    eax,edx
c001eed9:	ba 00 00 00 00       	mov    edx,0x0
c001eede:	89 c1                	mov    ecx,eax
c001eee0:	80 e5 ff             	and    ch,0xff
c001eee3:	89 cb                	mov    ebx,ecx
c001eee5:	89 d0                	mov    eax,edx
c001eee7:	25 ff 00 00 00       	and    eax,0xff
c001eeec:	89 c6                	mov    esi,eax
c001eeee:	89 d8                	mov    eax,ebx
c001eef0:	89 f2                	mov    edx,esi
c001eef2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eef6:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eef9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eefd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef01:	83 e0 00             	and    eax,0x0
c001ef04:	09 d0                	or     eax,edx
c001ef06:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef14:	8d 50 01             	lea    edx,[eax+0x1]
c001ef17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef1b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef21:	31 d2                	xor    edx,edx
c001ef23:	88 c2                	mov    dl,al
c001ef25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef29:	83 c2 08             	add    edx,0x8
c001ef2c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef30:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef36:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef3c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef48:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef56:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef60:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	51                   	push   ecx
c001ef6a:	6a 01                	push   0x1
c001ef6c:	68 5a ed 01 c0       	push   0xc001ed5a
c001ef71:	52                   	push   edx
c001ef72:	50                   	push   eax
c001ef73:	e8 fc 15 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef78:	83 c4 20             	add    esp,0x20
c001ef7b:	89 c2                	mov    edx,eax
c001ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef81:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef87:	b8 00 00 00 00       	mov    eax,0x0
c001ef8c:	5b                   	pop    ebx
c001ef8d:	5e                   	pop    esi
c001ef8e:	5f                   	pop    edi
c001ef8f:	c3                   	ret    

c001ef90 <APICTimer::APICTimer()>:
c001ef90:	83 ec 0c             	sub    esp,0xc
c001ef93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef97:	83 ec 08             	sub    esp,0x8
c001ef9a:	68 10 3b 02 c0       	push   0xc0023b10
c001ef9f:	50                   	push   eax
c001efa0:	e8 57 3d ff ff       	call   c0012cfc <Timer::Timer(char const*)>
c001efa5:	83 c4 10             	add    esp,0x10
c001efa8:	ba 24 3b 02 c0       	mov    edx,0xc0023b24
c001efad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb1:	89 10                	mov    DWORD PTR [eax],edx
c001efb3:	90                   	nop
c001efb4:	83 c4 0c             	add    esp,0xc
c001efb7:	c3                   	ret    

c001efb8 <PIT::write(int)>:
c001efb8:	83 ec 10             	sub    esp,0x10
c001efbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efc3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efcd:	a3 84 65 02 c0       	mov    ds:0xc0026584,eax
c001efd2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efd7:	89 c2                	mov    edx,eax
c001efd9:	c1 fa 1f             	sar    edx,0x1f
c001efdc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efe4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efeb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eff0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eff4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eff9:	ee                   	out    dx,al
c001effa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001effe:	25 ff 00 00 00       	and    eax,0xff
c001f003:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f00a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f00e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f012:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f017:	ee                   	out    dx,al
c001f018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f01c:	c1 f8 08             	sar    eax,0x8
c001f01f:	25 ff 00 00 00       	and    eax,0xff
c001f024:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f02b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f02f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f033:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f038:	ee                   	out    dx,al
c001f039:	90                   	nop
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	c3                   	ret    

c001f03e <pitHandler(regs*, void*)>:
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c001f046:	89 c2                	mov    edx,eax
c001f048:	c1 fa 1f             	sar    edx,0x1f
c001f04b:	52                   	push   edx
c001f04c:	50                   	push   eax
c001f04d:	6a 00                	push   0x0
c001f04f:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f054:	e8 a3 04 00 00       	call   c001f4fc <__udivdi3>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	83 ec 08             	sub    esp,0x8
c001f05f:	52                   	push   edx
c001f060:	50                   	push   eax
c001f061:	e8 25 3d ff ff       	call   c0012d8b <timerHandler(unsigned long long)>
c001f066:	83 c4 10             	add    esp,0x10
c001f069:	90                   	nop
c001f06a:	83 c4 0c             	add    esp,0xc
c001f06d:	c3                   	ret    

c001f06e <PIT::open(int, int, void*)>:
c001f06e:	83 ec 0c             	sub    esp,0xc
c001f071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f075:	8b 00                	mov    eax,DWORD PTR [eax]
c001f077:	83 c0 24             	add    eax,0x24
c001f07a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f07c:	83 ec 08             	sub    esp,0x8
c001f07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f087:	ff d0                	call   eax
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	6a 00                	push   0x0
c001f095:	6a 01                	push   0x1
c001f097:	68 3e f0 01 c0       	push   0xc001f03e
c001f09c:	6a 00                	push   0x0
c001f09e:	50                   	push   eax
c001f09f:	e8 d0 14 ff ff       	call   c0010574 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0a4:	83 c4 20             	add    esp,0x20
c001f0a7:	89 c2                	mov    edx,eax
c001f0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ad:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0b3:	b8 00 00 00 00       	mov    eax,0x0
c001f0b8:	83 c4 0c             	add    esp,0xc
c001f0bb:	c3                   	ret    

c001f0bc <PIT::close(int, int, void*)>:
c001f0bc:	83 ec 0c             	sub    esp,0xc
c001f0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d1:	6a 01                	push   0x1
c001f0d3:	68 3e f0 01 c0       	push   0xc001f03e
c001f0d8:	6a 00                	push   0x0
c001f0da:	50                   	push   eax
c001f0db:	e8 f2 14 ff ff       	call   c00105d2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0e0:	83 c4 10             	add    esp,0x10
c001f0e3:	b8 00 00 00 00       	mov    eax,0x0
c001f0e8:	83 c4 0c             	add    esp,0xc
c001f0eb:	c3                   	ret    

c001f0ec <PIT::PIT()>:
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f3:	83 ec 08             	sub    esp,0x8
c001f0f6:	68 4c 3b 02 c0       	push   0xc0023b4c
c001f0fb:	50                   	push   eax
c001f0fc:	e8 fb 3b ff ff       	call   c0012cfc <Timer::Timer(char const*)>
c001f101:	83 c4 10             	add    esp,0x10
c001f104:	ba 74 3b 02 c0       	mov    edx,0xc0023b74
c001f109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10d:	89 10                	mov    DWORD PTR [eax],edx
c001f10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f113:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f119:	31 d2                	xor    edx,edx
c001f11b:	88 c2                	mov    dl,al
c001f11d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f121:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f132:	31 d2                	xor    edx,edx
c001f134:	88 c2                	mov    dl,al
c001f136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f143:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f149:	8d 50 01             	lea    edx,[eax+0x1]
c001f14c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f150:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f156:	31 d2                	xor    edx,edx
c001f158:	88 c2                	mov    dl,al
c001f15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f162:	83 e1 3f             	and    ecx,0x3f
c001f165:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f169:	90                   	nop
c001f16a:	83 c4 0c             	add    esp,0xc
c001f16d:	c3                   	ret    
c001f16e:	66 90                	xchg   ax,ax

c001f170 <avxDetect>:
c001f170:	b8 00 00 00 00       	mov    eax,0x0
c001f175:	c3                   	ret    

c001f176 <avxSave>:
c001f176:	c3                   	ret    

c001f177 <avxLoad>:
c001f177:	c3                   	ret    

c001f178 <avxInit>:
c001f178:	c3                   	ret    

c001f179 <avxClose>:
c001f179:	c3                   	ret    
c001f17a:	66 90                	xchg   ax,ax
c001f17c:	66 90                	xchg   ax,ax
c001f17e:	66 90                	xchg   ax,ax

c001f180 <sseDetect>:
c001f180:	b8 01 00 00 00       	mov    eax,0x1
c001f185:	0f a2                	cpuid  
c001f187:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f18d:	74 06                	je     c001f195 <sseDetect.noSSE>
c001f18f:	b8 01 00 00 00       	mov    eax,0x1
c001f194:	c3                   	ret    

c001f195 <sseDetect.noSSE>:
c001f195:	b8 00 00 00 00       	mov    eax,0x0
c001f19a:	c3                   	ret    

c001f19b <sseSave>:
c001f19b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1a0:	c3                   	ret    

c001f1a1 <sseLoad>:
c001f1a1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1a6:	c3                   	ret    

c001f1a7 <sseInit>:
c001f1a7:	e8 40 00 00 00       	call   c001f1ec <x87Init>
c001f1ac:	0f 20 e0             	mov    eax,cr4
c001f1af:	66 0d 00 06          	or     ax,0x600
c001f1b3:	0f 22 e0             	mov    cr4,eax
c001f1b6:	c3                   	ret    

c001f1b7 <sseClose>:
c001f1b7:	c3                   	ret    
c001f1b8:	66 90                	xchg   ax,ax
c001f1ba:	66 90                	xchg   ax,ax
c001f1bc:	66 90                	xchg   ax,ax
c001f1be:	66 90                	xchg   ax,ax

c001f1c0 <value_37F>:
c001f1c0:	7f 03                	jg     c001f1c5 <value_37A+0x1>

c001f1c2 <value_37E>:
c001f1c2:	7e 03                	jle    c001f1c7 <x87Detect+0x1>

c001f1c4 <value_37A>:
c001f1c4:	7a 03                	jp     c001f1c9 <x87Detect+0x3>

c001f1c6 <x87Detect>:
c001f1c6:	b8 01 00 00 00       	mov    eax,0x1
c001f1cb:	0f a2                	cpuid  
c001f1cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1d3:	74 06                	je     c001f1db <x87Detect.nox87>
c001f1d5:	b8 01 00 00 00       	mov    eax,0x1
c001f1da:	c3                   	ret    

c001f1db <x87Detect.nox87>:
c001f1db:	b8 00 00 00 00       	mov    eax,0x0
c001f1e0:	c3                   	ret    

c001f1e1 <x87Save>:
c001f1e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1e6:	c3                   	ret    

c001f1e7 <x87Load>:
c001f1e7:	dd 64 24 08          	frstor [esp+0x8]
c001f1eb:	c3                   	ret    

c001f1ec <x87Init>:
c001f1ec:	9b db e3             	finit  
c001f1ef:	0f 20 c0             	mov    eax,cr0
c001f1f2:	66 25 fb ff          	and    ax,0xfffb
c001f1f6:	66 0d 22 00          	or     ax,0x22
c001f1fa:	0f 22 c0             	mov    cr0,eax
c001f1fd:	0f 06                	clts   
c001f1ff:	d9 2d c4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1c4
c001f205:	c3                   	ret    

c001f206 <x87Close>:
c001f206:	c3                   	ret    
c001f207:	90                   	nop

c001f208 <__do_global_ctors_aux>:
c001f208:	a1 e8 02 02 c0       	mov    eax,ds:0xc00202e8
c001f20d:	83 f8 ff             	cmp    eax,0xffffffff
c001f210:	74 1a                	je     c001f22c <__do_global_ctors_aux+0x24>
c001f212:	55                   	push   ebp
c001f213:	89 e5                	mov    ebp,esp
c001f215:	53                   	push   ebx
c001f216:	52                   	push   edx
c001f217:	bb e8 02 02 c0       	mov    ebx,0xc00202e8
c001f21c:	ff d0                	call   eax
c001f21e:	83 eb 04             	sub    ebx,0x4
c001f221:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f223:	83 f8 ff             	cmp    eax,0xffffffff
c001f226:	75 f4                	jne    c001f21c <__do_global_ctors_aux+0x14>
c001f228:	58                   	pop    eax
c001f229:	5b                   	pop    ebx
c001f22a:	5d                   	pop    ebp
c001f22b:	c3                   	ret    
c001f22c:	c3                   	ret    
c001f22d:	66 90                	xchg   ax,ax
c001f22f:	90                   	nop

c001f230 <__divdi3>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 1c             	sub    esp,0x1c
c001f237:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f23b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f23f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f242:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f246:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f24a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f24e:	85 db                	test   ebx,ebx
c001f250:	0f 88 8e 00 00 00    	js     c001f2e4 <__divdi3+0xb4>
c001f256:	89 dd                	mov    ebp,ebx
c001f258:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f260:	89 d3                	mov    ebx,edx
c001f262:	85 d2                	test   edx,edx
c001f264:	79 0d                	jns    c001f273 <__divdi3+0x43>
c001f266:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f26a:	f7 d8                	neg    eax
c001f26c:	83 d2 00             	adc    edx,0x0
c001f26f:	f7 da                	neg    edx
c001f271:	89 d3                	mov    ebx,edx
c001f273:	89 c7                	mov    edi,eax
c001f275:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f278:	85 db                	test   ebx,ebx
c001f27a:	75 48                	jne    c001f2c4 <__divdi3+0x94>
c001f27c:	39 ef                	cmp    edi,ebp
c001f27e:	76 24                	jbe    c001f2a4 <__divdi3+0x74>
c001f280:	89 ea                	mov    edx,ebp
c001f282:	f7 f7                	div    edi
c001f284:	89 c1                	mov    ecx,eax
c001f286:	31 f6                	xor    esi,esi
c001f288:	89 c8                	mov    eax,ecx
c001f28a:	89 f2                	mov    edx,esi
c001f28c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f290:	85 c9                	test   ecx,ecx
c001f292:	74 07                	je     c001f29b <__divdi3+0x6b>
c001f294:	f7 d8                	neg    eax
c001f296:	83 d2 00             	adc    edx,0x0
c001f299:	f7 da                	neg    edx
c001f29b:	83 c4 1c             	add    esp,0x1c
c001f29e:	5b                   	pop    ebx
c001f29f:	5e                   	pop    esi
c001f2a0:	5f                   	pop    edi
c001f2a1:	5d                   	pop    ebp
c001f2a2:	c3                   	ret    
c001f2a3:	90                   	nop
c001f2a4:	85 ff                	test   edi,edi
c001f2a6:	75 0b                	jne    c001f2b3 <__divdi3+0x83>
c001f2a8:	b8 01 00 00 00       	mov    eax,0x1
c001f2ad:	31 d2                	xor    edx,edx
c001f2af:	f7 f3                	div    ebx
c001f2b1:	89 c7                	mov    edi,eax
c001f2b3:	31 d2                	xor    edx,edx
c001f2b5:	89 e8                	mov    eax,ebp
c001f2b7:	f7 f7                	div    edi
c001f2b9:	89 c6                	mov    esi,eax
c001f2bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2be:	f7 f7                	div    edi
c001f2c0:	89 c1                	mov    ecx,eax
c001f2c2:	eb c4                	jmp    c001f288 <__divdi3+0x58>
c001f2c4:	39 eb                	cmp    ebx,ebp
c001f2c6:	77 3c                	ja     c001f304 <__divdi3+0xd4>
c001f2c8:	0f bd f3             	bsr    esi,ebx
c001f2cb:	83 f6 1f             	xor    esi,0x1f
c001f2ce:	75 40                	jne    c001f310 <__divdi3+0xe0>
c001f2d0:	39 eb                	cmp    ebx,ebp
c001f2d2:	72 09                	jb     c001f2dd <__divdi3+0xad>
c001f2d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2d7:	0f 87 97 00 00 00    	ja     c001f374 <__divdi3+0x144>
c001f2dd:	b9 01 00 00 00       	mov    ecx,0x1
c001f2e2:	eb a4                	jmp    c001f288 <__divdi3+0x58>
c001f2e4:	f7 d9                	neg    ecx
c001f2e6:	83 d3 00             	adc    ebx,0x0
c001f2e9:	f7 db                	neg    ebx
c001f2eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f2f2:	89 dd                	mov    ebp,ebx
c001f2f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f2fc:	e9 5f ff ff ff       	jmp    c001f260 <__divdi3+0x30>
c001f301:	8d 76 00             	lea    esi,[esi+0x0]
c001f304:	31 f6                	xor    esi,esi
c001f306:	31 c9                	xor    ecx,ecx
c001f308:	e9 7b ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f30d:	8d 76 00             	lea    esi,[esi+0x0]
c001f310:	b8 20 00 00 00       	mov    eax,0x20
c001f315:	29 f0                	sub    eax,esi
c001f317:	89 f1                	mov    ecx,esi
c001f319:	d3 e3                	shl    ebx,cl
c001f31b:	89 fa                	mov    edx,edi
c001f31d:	88 c1                	mov    cl,al
c001f31f:	d3 ea                	shr    edx,cl
c001f321:	09 da                	or     edx,ebx
c001f323:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e7                	shl    edi,cl
c001f32b:	89 eb                	mov    ebx,ebp
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 eb                	shr    ebx,cl
c001f331:	89 f1                	mov    ecx,esi
c001f333:	d3 e5                	shl    ebp,cl
c001f335:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f338:	88 c1                	mov    cl,al
c001f33a:	d3 ea                	shr    edx,cl
c001f33c:	09 d5                	or     ebp,edx
c001f33e:	89 e8                	mov    eax,ebp
c001f340:	89 da                	mov    edx,ebx
c001f342:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f346:	89 d3                	mov    ebx,edx
c001f348:	89 c5                	mov    ebp,eax
c001f34a:	f7 e7                	mul    edi
c001f34c:	39 d3                	cmp    ebx,edx
c001f34e:	72 18                	jb     c001f368 <__divdi3+0x138>
c001f350:	74 0a                	je     c001f35c <__divdi3+0x12c>
c001f352:	89 e9                	mov    ecx,ebp
c001f354:	31 f6                	xor    esi,esi
c001f356:	e9 2d ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f35b:	90                   	nop
c001f35c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f35f:	89 f1                	mov    ecx,esi
c001f361:	d3 e7                	shl    edi,cl
c001f363:	39 c7                	cmp    edi,eax
c001f365:	73 eb                	jae    c001f352 <__divdi3+0x122>
c001f367:	90                   	nop
c001f368:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f36b:	31 f6                	xor    esi,esi
c001f36d:	e9 16 ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f372:	66 90                	xchg   ax,ax
c001f374:	31 c9                	xor    ecx,ecx
c001f376:	e9 0d ff ff ff       	jmp    c001f288 <__divdi3+0x58>
c001f37b:	90                   	nop

c001f37c <__moddi3>:
c001f37c:	55                   	push   ebp
c001f37d:	57                   	push   edi
c001f37e:	56                   	push   esi
c001f37f:	53                   	push   ebx
c001f380:	83 ec 2c             	sub    esp,0x2c
c001f383:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f387:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f38b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f38f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f393:	85 db                	test   ebx,ebx
c001f395:	0f 88 85 00 00 00    	js     c001f420 <__moddi3+0xa4>
c001f39b:	89 de                	mov    esi,ebx
c001f39d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3a5:	89 d7                	mov    edi,edx
c001f3a7:	85 d2                	test   edx,edx
c001f3a9:	79 09                	jns    c001f3b4 <__moddi3+0x38>
c001f3ab:	f7 d8                	neg    eax
c001f3ad:	83 d2 00             	adc    edx,0x0
c001f3b0:	f7 da                	neg    edx
c001f3b2:	89 d7                	mov    edi,edx
c001f3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3b8:	89 cd                	mov    ebp,ecx
c001f3ba:	85 ff                	test   edi,edi
c001f3bc:	75 52                	jne    c001f410 <__moddi3+0x94>
c001f3be:	89 c3                	mov    ebx,eax
c001f3c0:	39 f0                	cmp    eax,esi
c001f3c2:	76 24                	jbe    c001f3e8 <__moddi3+0x6c>
c001f3c4:	89 c8                	mov    eax,ecx
c001f3c6:	89 f2                	mov    edx,esi
c001f3c8:	f7 f3                	div    ebx
c001f3ca:	89 d6                	mov    esi,edx
c001f3cc:	89 f0                	mov    eax,esi
c001f3ce:	31 d2                	xor    edx,edx
c001f3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3d4:	85 c9                	test   ecx,ecx
c001f3d6:	74 07                	je     c001f3df <__moddi3+0x63>
c001f3d8:	f7 d8                	neg    eax
c001f3da:	83 d2 00             	adc    edx,0x0
c001f3dd:	f7 da                	neg    edx
c001f3df:	83 c4 2c             	add    esp,0x2c
c001f3e2:	5b                   	pop    ebx
c001f3e3:	5e                   	pop    esi
c001f3e4:	5f                   	pop    edi
c001f3e5:	5d                   	pop    ebp
c001f3e6:	c3                   	ret    
c001f3e7:	90                   	nop
c001f3e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3ec:	85 db                	test   ebx,ebx
c001f3ee:	75 0d                	jne    c001f3fd <__moddi3+0x81>
c001f3f0:	b8 01 00 00 00       	mov    eax,0x1
c001f3f5:	31 d2                	xor    edx,edx
c001f3f7:	f7 f7                	div    edi
c001f3f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3fd:	89 f0                	mov    eax,esi
c001f3ff:	31 d2                	xor    edx,edx
c001f401:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f405:	f7 f7                	div    edi
c001f407:	89 e8                	mov    eax,ebp
c001f409:	f7 f7                	div    edi
c001f40b:	89 d6                	mov    esi,edx
c001f40d:	eb bd                	jmp    c001f3cc <__moddi3+0x50>
c001f40f:	90                   	nop
c001f410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f414:	39 f7                	cmp    edi,esi
c001f416:	76 20                	jbe    c001f438 <__moddi3+0xbc>
c001f418:	89 c8                	mov    eax,ecx
c001f41a:	89 f2                	mov    edx,esi
c001f41c:	eb b2                	jmp    c001f3d0 <__moddi3+0x54>
c001f41e:	66 90                	xchg   ax,ax
c001f420:	f7 d9                	neg    ecx
c001f422:	83 d3 00             	adc    ebx,0x0
c001f425:	f7 db                	neg    ebx
c001f427:	89 de                	mov    esi,ebx
c001f429:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f431:	e9 6f ff ff ff       	jmp    c001f3a5 <__moddi3+0x29>
c001f436:	66 90                	xchg   ax,ax
c001f438:	0f bd c7             	bsr    eax,edi
c001f43b:	83 f0 1f             	xor    eax,0x1f
c001f43e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f442:	75 24                	jne    c001f468 <__moddi3+0xec>
c001f444:	39 f7                	cmp    edi,esi
c001f446:	72 06                	jb     c001f44e <__moddi3+0xd2>
c001f448:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f44c:	77 0c                	ja     c001f45a <__moddi3+0xde>
c001f44e:	89 e9                	mov    ecx,ebp
c001f450:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f454:	19 fe                	sbb    esi,edi
c001f456:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f45a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f45e:	89 f2                	mov    edx,esi
c001f460:	e9 6b ff ff ff       	jmp    c001f3d0 <__moddi3+0x54>
c001f465:	8d 76 00             	lea    esi,[esi+0x0]
c001f468:	b8 20 00 00 00       	mov    eax,0x20
c001f46d:	89 c2                	mov    edx,eax
c001f46f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f473:	29 da                	sub    edx,ebx
c001f475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f479:	88 d9                	mov    cl,bl
c001f47b:	d3 e7                	shl    edi,cl
c001f47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f481:	88 d1                	mov    cl,dl
c001f483:	d3 e8                	shr    eax,cl
c001f485:	09 c7                	or     edi,eax
c001f487:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f48b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f48f:	89 d8                	mov    eax,ebx
c001f491:	88 d9                	mov    cl,bl
c001f493:	d3 e7                	shl    edi,cl
c001f495:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f499:	89 f3                	mov    ebx,esi
c001f49b:	88 d1                	mov    cl,dl
c001f49d:	d3 eb                	shr    ebx,cl
c001f49f:	89 c7                	mov    edi,eax
c001f4a1:	88 c1                	mov    cl,al
c001f4a3:	d3 e6                	shl    esi,cl
c001f4a5:	89 e8                	mov    eax,ebp
c001f4a7:	88 d1                	mov    cl,dl
c001f4a9:	d3 e8                	shr    eax,cl
c001f4ab:	09 f0                	or     eax,esi
c001f4ad:	89 f9                	mov    ecx,edi
c001f4af:	d3 e5                	shl    ebp,cl
c001f4b1:	89 da                	mov    edx,ebx
c001f4b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4b7:	89 d3                	mov    ebx,edx
c001f4b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4bd:	89 c6                	mov    esi,eax
c001f4bf:	89 d1                	mov    ecx,edx
c001f4c1:	39 d3                	cmp    ebx,edx
c001f4c3:	72 27                	jb     c001f4ec <__moddi3+0x170>
c001f4c5:	74 21                	je     c001f4e8 <__moddi3+0x16c>
c001f4c7:	29 f5                	sub    ebp,esi
c001f4c9:	19 cb                	sbb    ebx,ecx
c001f4cb:	89 de                	mov    esi,ebx
c001f4cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4d1:	d3 e6                	shl    esi,cl
c001f4d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4d7:	89 f9                	mov    ecx,edi
c001f4d9:	d3 ed                	shr    ebp,cl
c001f4db:	09 ee                	or     esi,ebp
c001f4dd:	89 f0                	mov    eax,esi
c001f4df:	d3 eb                	shr    ebx,cl
c001f4e1:	89 da                	mov    edx,ebx
c001f4e3:	e9 e8 fe ff ff       	jmp    c001f3d0 <__moddi3+0x54>
c001f4e8:	39 c5                	cmp    ebp,eax
c001f4ea:	73 db                	jae    c001f4c7 <__moddi3+0x14b>
c001f4ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f4f4:	89 d1                	mov    ecx,edx
c001f4f6:	89 c6                	mov    esi,eax
c001f4f8:	eb cd                	jmp    c001f4c7 <__moddi3+0x14b>
c001f4fa:	66 90                	xchg   ax,ax

c001f4fc <__udivdi3>:
c001f4fc:	55                   	push   ebp
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	53                   	push   ebx
c001f500:	83 ec 1c             	sub    esp,0x1c
c001f503:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f507:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f50b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f50f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f513:	85 d2                	test   edx,edx
c001f515:	75 41                	jne    c001f558 <__udivdi3+0x5c>
c001f517:	39 f7                	cmp    edi,esi
c001f519:	76 15                	jbe    c001f530 <__udivdi3+0x34>
c001f51b:	89 e8                	mov    eax,ebp
c001f51d:	89 f2                	mov    edx,esi
c001f51f:	f7 f7                	div    edi
c001f521:	31 db                	xor    ebx,ebx
c001f523:	89 da                	mov    edx,ebx
c001f525:	83 c4 1c             	add    esp,0x1c
c001f528:	5b                   	pop    ebx
c001f529:	5e                   	pop    esi
c001f52a:	5f                   	pop    edi
c001f52b:	5d                   	pop    ebp
c001f52c:	c3                   	ret    
c001f52d:	8d 76 00             	lea    esi,[esi+0x0]
c001f530:	89 f9                	mov    ecx,edi
c001f532:	85 ff                	test   edi,edi
c001f534:	75 0b                	jne    c001f541 <__udivdi3+0x45>
c001f536:	b8 01 00 00 00       	mov    eax,0x1
c001f53b:	31 d2                	xor    edx,edx
c001f53d:	f7 f7                	div    edi
c001f53f:	89 c1                	mov    ecx,eax
c001f541:	31 d2                	xor    edx,edx
c001f543:	89 f0                	mov    eax,esi
c001f545:	f7 f1                	div    ecx
c001f547:	89 c3                	mov    ebx,eax
c001f549:	89 e8                	mov    eax,ebp
c001f54b:	f7 f1                	div    ecx
c001f54d:	89 da                	mov    edx,ebx
c001f54f:	83 c4 1c             	add    esp,0x1c
c001f552:	5b                   	pop    ebx
c001f553:	5e                   	pop    esi
c001f554:	5f                   	pop    edi
c001f555:	5d                   	pop    ebp
c001f556:	c3                   	ret    
c001f557:	90                   	nop
c001f558:	39 f2                	cmp    edx,esi
c001f55a:	77 1c                	ja     c001f578 <__udivdi3+0x7c>
c001f55c:	0f bd da             	bsr    ebx,edx
c001f55f:	83 f3 1f             	xor    ebx,0x1f
c001f562:	75 24                	jne    c001f588 <__udivdi3+0x8c>
c001f564:	39 f2                	cmp    edx,esi
c001f566:	72 08                	jb     c001f570 <__udivdi3+0x74>
c001f568:	39 ef                	cmp    edi,ebp
c001f56a:	0f 87 84 00 00 00    	ja     c001f5f4 <__udivdi3+0xf8>
c001f570:	b8 01 00 00 00       	mov    eax,0x1
c001f575:	eb ac                	jmp    c001f523 <__udivdi3+0x27>
c001f577:	90                   	nop
c001f578:	31 db                	xor    ebx,ebx
c001f57a:	31 c0                	xor    eax,eax
c001f57c:	89 da                	mov    edx,ebx
c001f57e:	83 c4 1c             	add    esp,0x1c
c001f581:	5b                   	pop    ebx
c001f582:	5e                   	pop    esi
c001f583:	5f                   	pop    edi
c001f584:	5d                   	pop    ebp
c001f585:	c3                   	ret    
c001f586:	66 90                	xchg   ax,ax
c001f588:	b8 20 00 00 00       	mov    eax,0x20
c001f58d:	29 d8                	sub    eax,ebx
c001f58f:	88 d9                	mov    cl,bl
c001f591:	d3 e2                	shl    edx,cl
c001f593:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f597:	89 fa                	mov    edx,edi
c001f599:	88 c1                	mov    cl,al
c001f59b:	d3 ea                	shr    edx,cl
c001f59d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5a1:	09 d1                	or     ecx,edx
c001f5a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5a7:	88 d9                	mov    cl,bl
c001f5a9:	d3 e7                	shl    edi,cl
c001f5ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5af:	89 f7                	mov    edi,esi
c001f5b1:	88 c1                	mov    cl,al
c001f5b3:	d3 ef                	shr    edi,cl
c001f5b5:	88 d9                	mov    cl,bl
c001f5b7:	d3 e6                	shl    esi,cl
c001f5b9:	89 ea                	mov    edx,ebp
c001f5bb:	88 c1                	mov    cl,al
c001f5bd:	d3 ea                	shr    edx,cl
c001f5bf:	09 d6                	or     esi,edx
c001f5c1:	89 f0                	mov    eax,esi
c001f5c3:	89 fa                	mov    edx,edi
c001f5c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5c9:	89 d7                	mov    edi,edx
c001f5cb:	89 c6                	mov    esi,eax
c001f5cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5d1:	39 d7                	cmp    edi,edx
c001f5d3:	72 13                	jb     c001f5e8 <__udivdi3+0xec>
c001f5d5:	74 09                	je     c001f5e0 <__udivdi3+0xe4>
c001f5d7:	89 f0                	mov    eax,esi
c001f5d9:	31 db                	xor    ebx,ebx
c001f5db:	e9 43 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5e0:	88 d9                	mov    cl,bl
c001f5e2:	d3 e5                	shl    ebp,cl
c001f5e4:	39 c5                	cmp    ebp,eax
c001f5e6:	73 ef                	jae    c001f5d7 <__udivdi3+0xdb>
c001f5e8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5eb:	31 db                	xor    ebx,ebx
c001f5ed:	e9 31 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5f2:	66 90                	xchg   ax,ax
c001f5f4:	31 c0                	xor    eax,eax
c001f5f6:	e9 28 ff ff ff       	jmp    c001f523 <__udivdi3+0x27>
c001f5fb:	90                   	nop

c001f5fc <__umoddi3>:
c001f5fc:	55                   	push   ebp
c001f5fd:	57                   	push   edi
c001f5fe:	56                   	push   esi
c001f5ff:	53                   	push   ebx
c001f600:	83 ec 1c             	sub    esp,0x1c
c001f603:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f607:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f60b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f60f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f613:	89 da                	mov    edx,ebx
c001f615:	85 c0                	test   eax,eax
c001f617:	75 37                	jne    c001f650 <__umoddi3+0x54>
c001f619:	39 df                	cmp    edi,ebx
c001f61b:	76 13                	jbe    c001f630 <__umoddi3+0x34>
c001f61d:	89 f0                	mov    eax,esi
c001f61f:	f7 f7                	div    edi
c001f621:	89 d0                	mov    eax,edx
c001f623:	31 d2                	xor    edx,edx
c001f625:	83 c4 1c             	add    esp,0x1c
c001f628:	5b                   	pop    ebx
c001f629:	5e                   	pop    esi
c001f62a:	5f                   	pop    edi
c001f62b:	5d                   	pop    ebp
c001f62c:	c3                   	ret    
c001f62d:	8d 76 00             	lea    esi,[esi+0x0]
c001f630:	89 fd                	mov    ebp,edi
c001f632:	85 ff                	test   edi,edi
c001f634:	75 0b                	jne    c001f641 <__umoddi3+0x45>
c001f636:	b8 01 00 00 00       	mov    eax,0x1
c001f63b:	31 d2                	xor    edx,edx
c001f63d:	f7 f7                	div    edi
c001f63f:	89 c5                	mov    ebp,eax
c001f641:	89 d8                	mov    eax,ebx
c001f643:	31 d2                	xor    edx,edx
c001f645:	f7 f5                	div    ebp
c001f647:	89 f0                	mov    eax,esi
c001f649:	f7 f5                	div    ebp
c001f64b:	89 d0                	mov    eax,edx
c001f64d:	eb d4                	jmp    c001f623 <__umoddi3+0x27>
c001f64f:	90                   	nop
c001f650:	89 f1                	mov    ecx,esi
c001f652:	39 d8                	cmp    eax,ebx
c001f654:	76 0a                	jbe    c001f660 <__umoddi3+0x64>
c001f656:	89 f0                	mov    eax,esi
c001f658:	83 c4 1c             	add    esp,0x1c
c001f65b:	5b                   	pop    ebx
c001f65c:	5e                   	pop    esi
c001f65d:	5f                   	pop    edi
c001f65e:	5d                   	pop    ebp
c001f65f:	c3                   	ret    
c001f660:	0f bd e8             	bsr    ebp,eax
c001f663:	83 f5 1f             	xor    ebp,0x1f
c001f666:	75 1c                	jne    c001f684 <__umoddi3+0x88>
c001f668:	39 d8                	cmp    eax,ebx
c001f66a:	72 04                	jb     c001f670 <__umoddi3+0x74>
c001f66c:	39 f7                	cmp    edi,esi
c001f66e:	77 08                	ja     c001f678 <__umoddi3+0x7c>
c001f670:	89 da                	mov    edx,ebx
c001f672:	29 fe                	sub    esi,edi
c001f674:	19 c2                	sbb    edx,eax
c001f676:	89 f1                	mov    ecx,esi
c001f678:	89 c8                	mov    eax,ecx
c001f67a:	83 c4 1c             	add    esp,0x1c
c001f67d:	5b                   	pop    ebx
c001f67e:	5e                   	pop    esi
c001f67f:	5f                   	pop    edi
c001f680:	5d                   	pop    ebp
c001f681:	c3                   	ret    
c001f682:	66 90                	xchg   ax,ax
c001f684:	ba 20 00 00 00       	mov    edx,0x20
c001f689:	29 ea                	sub    edx,ebp
c001f68b:	89 e9                	mov    ecx,ebp
c001f68d:	d3 e0                	shl    eax,cl
c001f68f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f693:	89 f8                	mov    eax,edi
c001f695:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f699:	88 d1                	mov    cl,dl
c001f69b:	d3 e8                	shr    eax,cl
c001f69d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6a1:	09 c1                	or     ecx,eax
c001f6a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6a7:	89 e9                	mov    ecx,ebp
c001f6a9:	d3 e7                	shl    edi,cl
c001f6ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6af:	89 d8                	mov    eax,ebx
c001f6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6b5:	88 d1                	mov    cl,dl
c001f6b7:	d3 e8                	shr    eax,cl
c001f6b9:	89 c7                	mov    edi,eax
c001f6bb:	89 e9                	mov    ecx,ebp
c001f6bd:	d3 e3                	shl    ebx,cl
c001f6bf:	89 f0                	mov    eax,esi
c001f6c1:	88 d1                	mov    cl,dl
c001f6c3:	d3 e8                	shr    eax,cl
c001f6c5:	09 d8                	or     eax,ebx
c001f6c7:	89 e9                	mov    ecx,ebp
c001f6c9:	d3 e6                	shl    esi,cl
c001f6cb:	89 f3                	mov    ebx,esi
c001f6cd:	89 fa                	mov    edx,edi
c001f6cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6d3:	89 d1                	mov    ecx,edx
c001f6d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6d9:	89 c6                	mov    esi,eax
c001f6db:	89 d7                	mov    edi,edx
c001f6dd:	39 d1                	cmp    ecx,edx
c001f6df:	72 27                	jb     c001f708 <__umoddi3+0x10c>
c001f6e1:	74 21                	je     c001f704 <__umoddi3+0x108>
c001f6e3:	89 ca                	mov    edx,ecx
c001f6e5:	29 f3                	sub    ebx,esi
c001f6e7:	19 fa                	sbb    edx,edi
c001f6e9:	89 d0                	mov    eax,edx
c001f6eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ef:	d3 e0                	shl    eax,cl
c001f6f1:	89 e9                	mov    ecx,ebp
c001f6f3:	d3 eb                	shr    ebx,cl
c001f6f5:	09 d8                	or     eax,ebx
c001f6f7:	d3 ea                	shr    edx,cl
c001f6f9:	83 c4 1c             	add    esp,0x1c
c001f6fc:	5b                   	pop    ebx
c001f6fd:	5e                   	pop    esi
c001f6fe:	5f                   	pop    edi
c001f6ff:	5d                   	pop    ebp
c001f700:	c3                   	ret    
c001f701:	8d 76 00             	lea    esi,[esi+0x0]
c001f704:	39 c3                	cmp    ebx,eax
c001f706:	73 db                	jae    c001f6e3 <__umoddi3+0xe7>
c001f708:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f70c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f710:	89 d7                	mov    edi,edx
c001f712:	89 c6                	mov    esi,eax
c001f714:	eb cd                	jmp    c001f6e3 <__umoddi3+0xe7>
c001f716:	66 90                	xchg   ax,ax
c001f718:	66 90                	xchg   ax,ax
c001f71a:	66 90                	xchg   ax,ax
c001f71c:	66 90                	xchg   ax,ax
c001f71e:	66 90                	xchg   ax,ax

c001f720 <fabs>:
c001f720:	83 ec 0c             	sub    esp,0xc
c001f723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f727:	89 04 24             	mov    DWORD PTR [esp],eax
c001f72a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f72e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f737:	dd 04 24             	fld    QWORD PTR [esp]
c001f73a:	83 c4 0c             	add    esp,0xc
c001f73d:	c3                   	ret    
c001f73e:	66 90                	xchg   ax,ax

c001f740 <lrint>:
c001f740:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f744:	83 ec 04             	sub    esp,0x4
c001f747:	db 1c 24             	fistp  DWORD PTR [esp]
c001f74a:	58                   	pop    eax
c001f74b:	c3                   	ret    

c001f74c <lrintf>:
c001f74c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f750:	83 ec 04             	sub    esp,0x4
c001f753:	db 1c 24             	fistp  DWORD PTR [esp]
c001f756:	58                   	pop    eax
c001f757:	c3                   	ret    

Disassembly of section .init:

c001f758 <_init>:
c001f758:	55                   	push   ebp
c001f759:	89 e5                	mov    ebp,esp
c001f75b:	e8 b8 09 fe ff       	call   c0000118 <frame_dummy>
c001f760:	e8 a3 fa ff ff       	call   c001f208 <__do_global_ctors_aux>
c001f765:	5d                   	pop    ebp
c001f766:	c3                   	ret    

Disassembly of section .fini:

c001f767 <_fini>:
c001f767:	55                   	push   ebp
c001f768:	89 e5                	mov    ebp,esp
c001f76a:	e8 39 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f76f:	5d                   	pop    ebp
c001f770:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f772 <Computer::~Computer()>:
c001f772:	83 ec 0c             	sub    esp,0xc
c001f775:	ba 84 12 02 c0       	mov    edx,0xc0021284
c001f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77e:	89 10                	mov    DWORD PTR [eax],edx
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	83 ec 0c             	sub    esp,0xc
c001f787:	50                   	push   eax
c001f788:	e8 39 0d ff ff       	call   c00104c6 <Device::~Device()>
c001f78d:	83 c4 10             	add    esp,0x10
c001f790:	90                   	nop
c001f791:	83 c4 0c             	add    esp,0xc
c001f794:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f796 <Computer::~Computer()>:
c001f796:	83 ec 0c             	sub    esp,0xc
c001f799:	83 ec 0c             	sub    esp,0xc
c001f79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a0:	e8 cd ff ff ff       	call   c001f772 <Computer::~Computer()>
c001f7a5:	83 c4 10             	add    esp,0x10
c001f7a8:	83 ec 08             	sub    esp,0x8
c001f7ab:	68 ec 01 00 00       	push   0x1ec
c001f7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b4:	e8 2c f9 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001f7b9:	83 c4 10             	add    esp,0x10
c001f7bc:	83 c4 0c             	add    esp,0xc
c001f7bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7c0 <idleCommon()>:
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	e8 7b 92 ff ff       	call   c0018a43 <lockScheduler()>
c001f7c8:	e8 bf 95 ff ff       	call   c0018d8c <schedule()>
c001f7cd:	83 c4 0c             	add    esp,0xc
c001f7d0:	e9 70 92 ff ff       	jmp    c0018a45 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7d5 <CPU::readCR3()>:
c001f7d5:	83 ec 10             	sub    esp,0x10
c001f7d8:	0f 20 d8             	mov    eax,cr3
c001f7db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e3:	83 c4 10             	add    esp,0x10
c001f7e6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7e7 <CPU::writeCR3(unsigned long)>:
c001f7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7eb:	0f 22 d8             	mov    cr3,eax
c001f7ee:	90                   	nop
c001f7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f7f0 <LinkedList<UnixFile>::~LinkedList()>:
c001f7f0:	90                   	nop
c001f7f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f7f2 <LinkedList<UnixFile>::LinkedList()>:
c001f7f2:	83 ec 0c             	sub    esp,0xc
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f835:	83 ec 0c             	sub    esp,0xc
c001f838:	68 7d 15 02 c0       	push   0xc002157d
c001f83d:	e8 c9 f9 fe ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001f842:	83 c4 10             	add    esp,0x10
c001f845:	90                   	nop
c001f846:	83 c4 0c             	add    esp,0xc
c001f849:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f84a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f852:	75 10                	jne    c001f864 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	68 98 15 02 c0       	push   0xc0021598
c001f85c:	e8 d9 61 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f861:	83 c4 10             	add    esp,0x10
c001f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f868:	8b 00                	mov    eax,DWORD PTR [eax]
c001f86a:	85 c0                	test   eax,eax
c001f86c:	74 34                	je     c001f8a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f875:	85 c0                	test   eax,eax
c001f877:	74 29                	je     c001f8a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f880:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f884:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f88f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f899:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8a0:	eb 65                	jmp    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a8:	85 c0                	test   eax,eax
c001f8aa:	75 4b                	jne    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b3:	85 c0                	test   eax,eax
c001f8b5:	75 40                	jne    c001f8f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8bf:	89 10                	mov    DWORD PTR [eax],edx
c001f8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8e1:	85 c0                	test   eax,eax
c001f8e3:	74 22                	je     c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8e5:	83 ec 0c             	sub    esp,0xc
c001f8e8:	68 ba 15 02 c0       	push   0xc00215ba
c001f8ed:	e8 48 61 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f8f2:	83 c4 10             	add    esp,0x10
c001f8f5:	eb 10                	jmp    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f7:	83 ec 0c             	sub    esp,0xc
c001f8fa:	68 c4 15 02 c0       	push   0xc00215c4
c001f8ff:	e8 36 61 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f904:	83 c4 10             	add    esp,0x10
c001f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f90e:	8d 50 01             	lea    edx,[eax+0x1]
c001f911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f915:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f918:	90                   	nop
c001f919:	83 c4 0c             	add    esp,0xc
c001f91c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f91e <LinkedList<UnixFile>::getFirstElement()>:
c001f91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f922:	8b 00                	mov    eax,DWORD PTR [eax]
c001f924:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f926 <LinkedList<UnixFile>::removeFirst()>:
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92f:	85 c0                	test   eax,eax
c001f931:	75 12                	jne    c001f945 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	68 d0 15 02 c0       	push   0xc00215d0
c001f93b:	e8 fa 60 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	eb 7e                	jmp    c001f9c3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f949:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f94f:	85 c0                	test   eax,eax
c001f951:	74 10                	je     c001f963 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	68 1b 16 02 c0       	push   0xc002161b
c001f95b:	e8 da 60 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f967:	8b 00                	mov    eax,DWORD PTR [eax]
c001f969:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96c:	85 c0                	test   eax,eax
c001f96e:	75 33                	jne    c001f9a3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f989:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98c:	83 f8 01             	cmp    eax,0x1
c001f98f:	74 21                	je     c001f9b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f991:	83 ec 0c             	sub    esp,0xc
c001f994:	68 f4 15 02 c0       	push   0xc00215f4
c001f999:	e8 9c 60 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001f99e:	83 c4 10             	add    esp,0x10
c001f9a1:	eb 0f                	jmp    c001f9b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	89 10                	mov    DWORD PTR [eax],edx
c001f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9b9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9c3:	83 c4 0c             	add    esp,0xc
c001f9c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9c8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9d0 <DriverlessDevice::~DriverlessDevice()>:
c001f9d0:	ba 84 1c 02 c0       	mov    edx,0xc0021c84
c001f9d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d9:	89 10                	mov    DWORD PTR [eax],edx
c001f9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9df:	50                   	push   eax
c001f9e0:	e8 e1 0a ff ff       	call   c00104c6 <Device::~Device()>
c001f9e5:	83 c4 04             	add    esp,0x4
c001f9e8:	90                   	nop
c001f9e9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9ea <DriverlessDevice::~DriverlessDevice()>:
c001f9ea:	83 ec 0c             	sub    esp,0xc
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f4:	e8 d7 ff ff ff       	call   c001f9d0 <DriverlessDevice::~DriverlessDevice()>
c001f9f9:	83 c4 10             	add    esp,0x10
c001f9fc:	83 ec 08             	sub    esp,0x8
c001f9ff:	68 58 01 00 00       	push   0x158
c001fa04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa08:	e8 d8 f6 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001fa0d:	83 c4 10             	add    esp,0x10
c001fa10:	83 c4 0c             	add    esp,0xc
c001fa13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa14 <LinkedList<Device>::addElement(Device*)>:
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa1c:	75 10                	jne    c001fa2e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa1e:	83 ec 0c             	sub    esp,0xc
c001fa21:	68 98 15 02 c0       	push   0xc0021598
c001fa26:	e8 0f 60 ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fa2b:	83 c4 10             	add    esp,0x10
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa34:	85 c0                	test   eax,eax
c001fa36:	74 3a                	je     c001fa72 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa3f:	85 c0                	test   eax,eax
c001fa41:	74 2f                	je     c001fa72 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa4e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa66:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa70:	eb 68                	jmp    c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa76:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa78:	85 c0                	test   eax,eax
c001fa7a:	75 4e                	jne    c001faca <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa83:	85 c0                	test   eax,eax
c001fa85:	75 43                	jne    c001faca <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8f:	89 10                	mov    DWORD PTR [eax],edx
c001fa91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa99:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001faad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fab4:	85 c0                	test   eax,eax
c001fab6:	74 22                	je     c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	68 ba 15 02 c0       	push   0xc00215ba
c001fac0:	e8 75 5f ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fac5:	83 c4 10             	add    esp,0x10
c001fac8:	eb 10                	jmp    c001fada <LinkedList<Device>::addElement(Device*)+0xc6>
c001faca:	83 ec 0c             	sub    esp,0xc
c001facd:	68 c4 15 02 c0       	push   0xc00215c4
c001fad2:	e8 63 5f ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fad7:	83 c4 10             	add    esp,0x10
c001fada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fade:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fae1:	8d 50 01             	lea    edx,[eax+0x1]
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faeb:	90                   	nop
c001faec:	83 c4 0c             	add    esp,0xc
c001faef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001faf0 <LinkedList<Device>::LinkedList()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	68 7d 15 02 c0       	push   0xc002157d
c001fb3b:	e8 cb f6 fe ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	90                   	nop
c001fb44:	83 c4 0c             	add    esp,0xc
c001fb47:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb48 <CPU::readCR0()>:
c001fb48:	83 ec 10             	sub    esp,0x10
c001fb4b:	0f 20 c0             	mov    eax,cr0
c001fb4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb56:	83 c4 10             	add    esp,0x10
c001fb59:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb5a <CPU::writeCR0(unsigned long)>:
c001fb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5e:	0f 22 c0             	mov    cr0,eax
c001fb61:	90                   	nop
c001fb62:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb63 <CPU::readDR0()>:
c001fb63:	83 ec 10             	sub    esp,0x10
c001fb66:	0f 21 c0             	mov    eax,db0
c001fb69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb75 <CPU::readDR1()>:
c001fb75:	83 ec 10             	sub    esp,0x10
c001fb78:	0f 21 c8             	mov    eax,db1
c001fb7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb83:	83 c4 10             	add    esp,0x10
c001fb86:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb87 <CPU::readDR2()>:
c001fb87:	83 ec 10             	sub    esp,0x10
c001fb8a:	0f 21 d0             	mov    eax,db2
c001fb8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb95:	83 c4 10             	add    esp,0x10
c001fb98:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fb99 <CPU::readDR3()>:
c001fb99:	83 ec 10             	sub    esp,0x10
c001fb9c:	0f 21 d8             	mov    eax,db3
c001fb9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbab <CPU::readDR6()>:
c001fbab:	83 ec 10             	sub    esp,0x10
c001fbae:	0f 21 f0             	mov    eax,db6
c001fbb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbbd <CPU::readDR7()>:
c001fbbd:	83 ec 10             	sub    esp,0x10
c001fbc0:	0f 21 f8             	mov    eax,db7
c001fbc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbd8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbde:	85 c0                	test   eax,eax
c001fbe0:	75 0e                	jne    c001fbf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe9:	85 c0                	test   eax,eax
c001fbeb:	75 03                	jne    c001fbf0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbed:	b0 01                	mov    al,0x1
c001fbef:	c3                   	ret    
c001fbf0:	b0 00                	mov    al,0x0
c001fbf2:	90                   	nop
c001fbf3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fbf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbfd:	85 c0                	test   eax,eax
c001fbff:	75 15                	jne    c001fc16 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	68 d0 15 02 c0       	push   0xc00215d0
c001fc09:	e8 2c 5e ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fc0e:	83 c4 10             	add    esp,0x10
c001fc11:	e9 88 00 00 00       	jmp    c001fc9e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc20:	85 c0                	test   eax,eax
c001fc22:	0f 95 c0             	setne  al
c001fc25:	84 c0                	test   al,al
c001fc27:	74 10                	je     c001fc39 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc29:	83 ec 0c             	sub    esp,0xc
c001fc2c:	68 1b 16 02 c0       	push   0xc002161b
c001fc31:	e8 04 5e ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fc36:	83 c4 10             	add    esp,0x10
c001fc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc42:	85 c0                	test   eax,eax
c001fc44:	0f 94 c0             	sete   al
c001fc47:	84 c0                	test   al,al
c001fc49:	74 33                	je     c001fc7e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc67:	83 f8 01             	cmp    eax,0x1
c001fc6a:	74 21                	je     c001fc8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	68 f4 15 02 c0       	push   0xc00215f4
c001fc74:	e8 c1 5d ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	eb 0f                	jmp    c001fc8d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8b:	89 10                	mov    DWORD PTR [eax],edx
c001fc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc94:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc9e:	83 c4 0c             	add    esp,0xc
c001fca1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fca2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcaa:	75 10                	jne    c001fcbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	68 98 15 02 c0       	push   0xc0021598
c001fcb4:	e8 81 5d ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcc2:	85 c0                	test   eax,eax
c001fcc4:	74 34                	je     c001fcfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fccd:	85 c0                	test   eax,eax
c001fccf:	74 29                	je     c001fcfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcdc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fce7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fcf8:	eb 65                	jmp    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd00:	85 c0                	test   eax,eax
c001fd02:	75 4b                	jne    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd0b:	85 c0                	test   eax,eax
c001fd0d:	75 40                	jne    c001fd4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd17:	89 10                	mov    DWORD PTR [eax],edx
c001fd19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd39:	85 c0                	test   eax,eax
c001fd3b:	74 22                	je     c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd3d:	83 ec 0c             	sub    esp,0xc
c001fd40:	68 ba 15 02 c0       	push   0xc00215ba
c001fd45:	e8 f0 5c ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fd4a:	83 c4 10             	add    esp,0x10
c001fd4d:	eb 10                	jmp    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4f:	83 ec 0c             	sub    esp,0xc
c001fd52:	68 c4 15 02 c0       	push   0xc00215c4
c001fd57:	e8 de 5c ff ff       	call   c0015a3a <Krnl::panic(char const*)>
c001fd5c:	83 c4 10             	add    esp,0x10
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd66:	8d 50 01             	lea    edx,[eax+0x1]
c001fd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd70:	90                   	nop
c001fd71:	83 c4 0c             	add    esp,0xc
c001fd74:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd76 <ACPI::~ACPI()>:
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	ba 3c 24 02 c0       	mov    edx,0xc002243c
c001fd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd82:	89 10                	mov    DWORD PTR [eax],edx
c001fd84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	50                   	push   eax
c001fd8c:	e8 35 07 ff ff       	call   c00104c6 <Device::~Device()>
c001fd91:	83 c4 10             	add    esp,0x10
c001fd94:	90                   	nop
c001fd95:	83 c4 0c             	add    esp,0xc
c001fd98:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fd9a <ACPI::~ACPI()>:
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	83 ec 0c             	sub    esp,0xc
c001fda0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda4:	e8 cd ff ff ff       	call   c001fd76 <ACPI::~ACPI()>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	83 ec 08             	sub    esp,0x8
c001fdaf:	68 68 22 00 00       	push   0x2268
c001fdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb8:	e8 28 f3 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	83 c4 0c             	add    esp,0xc
c001fdc3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdc4 <CPU::~CPU()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	89 10                	mov    DWORD PTR [eax],edx
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	50                   	push   eax
c001fdda:	e8 e7 06 ff ff       	call   c00104c6 <Device::~Device()>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	90                   	nop
c001fde3:	83 c4 0c             	add    esp,0xc
c001fde6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fde8 <CPU::~CPU()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	83 ec 0c             	sub    esp,0xc
c001fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf2:	e8 cd ff ff ff       	call   c001fdc4 <CPU::~CPU()>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	83 ec 08             	sub    esp,0x8
c001fdfd:	68 98 11 00 00       	push   0x1198
c001fe02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe06:	e8 da f2 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	83 c4 0c             	add    esp,0xc
c001fe11:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe12 <CPU::readCR4()>:
c001fe12:	83 ec 10             	sub    esp,0x10
c001fe15:	0f 20 e0             	mov    eax,cr4
c001fe18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe20:	83 c4 10             	add    esp,0x10
c001fe23:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe24 <CPU::writeDR7(unsigned long)>:
c001fe24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe28:	0f 23 f8             	mov    db7,eax
c001fe2b:	90                   	nop
c001fe2c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe2d <CPU::writeCR4(unsigned long)>:
c001fe2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe31:	0f 22 e0             	mov    cr4,eax
c001fe34:	90                   	nop
c001fe35:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe36 <CPU::readCR2()>:
c001fe36:	83 ec 10             	sub    esp,0x10
c001fe39:	0f 20 d0             	mov    eax,cr2
c001fe3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe44:	83 c4 10             	add    esp,0x10
c001fe47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe48:	90                   	nop
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe4a <ThreadControlBlock::ThreadControlBlock()>:
c001fe4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe64:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe82:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe86:	90                   	nop
c001fe87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001feab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fecb:	83 ec 0c             	sub    esp,0xc
c001fece:	68 7d 15 02 c0       	push   0xc002157d
c001fed3:	e8 33 f3 fe ff       	call   c000f20b <Dbg::kprintf(char const*, ...)>
c001fed8:	83 c4 10             	add    esp,0x10
c001fedb:	90                   	nop
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fee0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fee4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fee7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fee8 <PCI::~PCI()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	ba 0c 35 02 c0       	mov    edx,0xc002350c
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	89 10                	mov    DWORD PTR [eax],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	50                   	push   eax
c001fefe:	e8 cd ff fe ff       	call   c000fed0 <Bus::~Bus()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	90                   	nop
c001ff07:	83 c4 0c             	add    esp,0xc
c001ff0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff0c <PCI::~PCI()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff16:	e8 cd ff ff ff       	call   c001fee8 <PCI::~PCI()>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 58 01 00 00       	push   0x158
c001ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2a:	e8 b6 f1 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff36 <IDE::~IDE()>:
c001ff36:	83 ec 0c             	sub    esp,0xc
c001ff39:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	89 10                	mov    DWORD PTR [eax],edx
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	83 ec 0c             	sub    esp,0xc
c001ff4b:	50                   	push   eax
c001ff4c:	e8 87 0a ff ff       	call   c00109d8 <HardDiskController::~HardDiskController()>
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	90                   	nop
c001ff55:	83 c4 0c             	add    esp,0xc
c001ff58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff5a <IDE::~IDE()>:
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	83 ec 0c             	sub    esp,0xc
c001ff60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff64:	e8 cd ff ff ff       	call   c001ff36 <IDE::~IDE()>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	83 ec 08             	sub    esp,0x8
c001ff6f:	68 70 02 00 00       	push   0x270
c001ff74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff78:	e8 68 f1 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001ff7d:	83 c4 10             	add    esp,0x10
c001ff80:	83 c4 0c             	add    esp,0xc
c001ff83:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff84 <ATA::~ATA()>:
c001ff84:	83 ec 0c             	sub    esp,0xc
c001ff87:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	89 10                	mov    DWORD PTR [eax],edx
c001ff92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff96:	83 ec 0c             	sub    esp,0xc
c001ff99:	50                   	push   eax
c001ff9a:	e8 17 0b ff ff       	call   c0010ab6 <PhysicalDisk::~PhysicalDisk()>
c001ff9f:	83 c4 10             	add    esp,0x10
c001ffa2:	90                   	nop
c001ffa3:	83 c4 0c             	add    esp,0xc
c001ffa6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffa8 <ATA::~ATA()>:
c001ffa8:	83 ec 0c             	sub    esp,0xc
c001ffab:	83 ec 0c             	sub    esp,0xc
c001ffae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffb2:	e8 cd ff ff ff       	call   c001ff84 <ATA::~ATA()>
c001ffb7:	83 c4 10             	add    esp,0x10
c001ffba:	83 ec 08             	sub    esp,0x8
c001ffbd:	68 7c 01 00 00       	push   0x17c
c001ffc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc6:	e8 1a f1 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c001ffcb:	83 c4 10             	add    esp,0x10
c001ffce:	83 c4 0c             	add    esp,0xc
c001ffd1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffd2 <ATAPI::~ATAPI()>:
c001ffd2:	83 ec 0c             	sub    esp,0xc
c001ffd5:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	89 10                	mov    DWORD PTR [eax],edx
c001ffe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe4:	83 ec 0c             	sub    esp,0xc
c001ffe7:	50                   	push   eax
c001ffe8:	e8 c9 0a ff ff       	call   c0010ab6 <PhysicalDisk::~PhysicalDisk()>
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	90                   	nop
c001fff1:	83 c4 0c             	add    esp,0xc
c001fff4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fff6 <ATAPI::~ATAPI()>:
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	83 ec 0c             	sub    esp,0xc
c001fffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020000:	e8 cd ff ff ff       	call   c001ffd2 <ATAPI::~ATAPI()>
c0020005:	83 c4 10             	add    esp,0x10
c0020008:	83 ec 08             	sub    esp,0x8
c002000b:	68 80 01 00 00       	push   0x180
c0020010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020014:	e8 cc f0 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0020019:	83 c4 10             	add    esp,0x10
c002001c:	83 c4 0c             	add    esp,0xc
c002001f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020020 <AVX::~AVX()>:
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	ba 68 38 02 c0       	mov    edx,0xc0023868
c0020028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002c:	89 10                	mov    DWORD PTR [eax],edx
c002002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020032:	83 ec 0c             	sub    esp,0xc
c0020035:	50                   	push   eax
c0020036:	e8 ff 0a ff ff       	call   c0010b3a <FPU::~FPU()>
c002003b:	83 c4 10             	add    esp,0x10
c002003e:	90                   	nop
c002003f:	83 c4 0c             	add    esp,0xc
c0020042:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020044 <AVX::~AVX()>:
c0020044:	83 ec 0c             	sub    esp,0xc
c0020047:	83 ec 0c             	sub    esp,0xc
c002004a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002004e:	e8 cd ff ff ff       	call   c0020020 <AVX::~AVX()>
c0020053:	83 c4 10             	add    esp,0x10
c0020056:	83 ec 08             	sub    esp,0x8
c0020059:	68 58 01 00 00       	push   0x158
c002005e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020062:	e8 7e f0 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0020067:	83 c4 10             	add    esp,0x10
c002006a:	83 c4 0c             	add    esp,0xc
c002006d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002006e <MMX::~MMX()>:
c002006e:	83 ec 0c             	sub    esp,0xc
c0020071:	ba a8 38 02 c0       	mov    edx,0xc00238a8
c0020076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007a:	89 10                	mov    DWORD PTR [eax],edx
c002007c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020080:	83 ec 0c             	sub    esp,0xc
c0020083:	50                   	push   eax
c0020084:	e8 b1 0a ff ff       	call   c0010b3a <FPU::~FPU()>
c0020089:	83 c4 10             	add    esp,0x10
c002008c:	90                   	nop
c002008d:	83 c4 0c             	add    esp,0xc
c0020090:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0020092 <MMX::~MMX()>:
c0020092:	83 ec 0c             	sub    esp,0xc
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009c:	e8 cd ff ff ff       	call   c002006e <MMX::~MMX()>
c00200a1:	83 c4 10             	add    esp,0x10
c00200a4:	83 ec 08             	sub    esp,0x8
c00200a7:	68 58 01 00 00       	push   0x158
c00200ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b0:	e8 30 f0 fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00200b5:	83 c4 10             	add    esp,0x10
c00200b8:	83 c4 0c             	add    esp,0xc
c00200bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200bc <SSE::~SSE()>:
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	ba e8 38 02 c0       	mov    edx,0xc00238e8
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	89 10                	mov    DWORD PTR [eax],edx
c00200ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	50                   	push   eax
c00200d2:	e8 63 0a ff ff       	call   c0010b3a <FPU::~FPU()>
c00200d7:	83 c4 10             	add    esp,0x10
c00200da:	90                   	nop
c00200db:	83 c4 0c             	add    esp,0xc
c00200de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200e0 <SSE::~SSE()>:
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	83 ec 0c             	sub    esp,0xc
c00200e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ea:	e8 cd ff ff ff       	call   c00200bc <SSE::~SSE()>
c00200ef:	83 c4 10             	add    esp,0x10
c00200f2:	83 ec 08             	sub    esp,0x8
c00200f5:	68 58 01 00 00       	push   0x158
c00200fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fe:	e8 e2 ef fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	83 c4 0c             	add    esp,0xc
c0020109:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002010a <x87::~x87()>:
c002010a:	83 ec 0c             	sub    esp,0xc
c002010d:	ba 28 39 02 c0       	mov    edx,0xc0023928
c0020112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020116:	89 10                	mov    DWORD PTR [eax],edx
c0020118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011c:	83 ec 0c             	sub    esp,0xc
c002011f:	50                   	push   eax
c0020120:	e8 15 0a ff ff       	call   c0010b3a <FPU::~FPU()>
c0020125:	83 c4 10             	add    esp,0x10
c0020128:	90                   	nop
c0020129:	83 c4 0c             	add    esp,0xc
c002012c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002012e <x87::~x87()>:
c002012e:	83 ec 0c             	sub    esp,0xc
c0020131:	83 ec 0c             	sub    esp,0xc
c0020134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020138:	e8 cd ff ff ff       	call   c002010a <x87::~x87()>
c002013d:	83 c4 10             	add    esp,0x10
c0020140:	83 ec 08             	sub    esp,0x8
c0020143:	68 58 01 00 00       	push   0x158
c0020148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014c:	e8 94 ef fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	83 c4 0c             	add    esp,0xc
c0020157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020158 <IOAPIC::~IOAPIC()>:
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	ba 80 3a 02 c0       	mov    edx,0xc0023a80
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	89 10                	mov    DWORD PTR [eax],edx
c0020166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	50                   	push   eax
c002016e:	e8 53 03 ff ff       	call   c00104c6 <Device::~Device()>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	90                   	nop
c0020177:	83 c4 0c             	add    esp,0xc
c002017a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002017c <IOAPIC::~IOAPIC()>:
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020186:	e8 cd ff ff ff       	call   c0020158 <IOAPIC::~IOAPIC()>
c002018b:	83 c4 10             	add    esp,0x10
c002018e:	83 ec 08             	sub    esp,0x8
c0020191:	68 68 01 00 00       	push   0x168
c0020196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019a:	e8 46 ef fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	83 c4 0c             	add    esp,0xc
c00201a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201a6 <APIC::~APIC()>:
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c00201ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b2:	89 10                	mov    DWORD PTR [eax],edx
c00201b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	50                   	push   eax
c00201bc:	e8 43 0e ff ff       	call   c0011004 <InterruptController::~InterruptController()>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	90                   	nop
c00201c5:	83 c4 0c             	add    esp,0xc
c00201c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201ca <APIC::~APIC()>:
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d4:	e8 cd ff ff ff       	call   c00201a6 <APIC::~APIC()>
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	83 ec 08             	sub    esp,0x8
c00201df:	68 58 21 00 00       	push   0x2158
c00201e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e8:	e8 f8 ee fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	83 c4 0c             	add    esp,0xc
c00201f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00201f4 <PIC::~PIC()>:
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c00201fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020200:	89 10                	mov    DWORD PTR [eax],edx
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	50                   	push   eax
c002020a:	e8 f5 0d ff ff       	call   c0011004 <InterruptController::~InterruptController()>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	90                   	nop
c0020213:	83 c4 0c             	add    esp,0xc
c0020216:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020218 <PIC::~PIC()>:
c0020218:	83 ec 0c             	sub    esp,0xc
c002021b:	83 ec 0c             	sub    esp,0xc
c002021e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020222:	e8 cd ff ff ff       	call   c00201f4 <PIC::~PIC()>
c0020227:	83 c4 10             	add    esp,0x10
c002022a:	83 ec 08             	sub    esp,0x8
c002022d:	68 58 21 00 00       	push   0x2158
c0020232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020236:	e8 aa ee fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	83 c4 0c             	add    esp,0xc
c0020241:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020242 <APICTimer::~APICTimer()>:
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	ba 24 3b 02 c0       	mov    edx,0xc0023b24
c002024a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024e:	89 10                	mov    DWORD PTR [eax],edx
c0020250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	50                   	push   eax
c0020258:	e8 d5 2a ff ff       	call   c0012d32 <Timer::~Timer()>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	90                   	nop
c0020261:	83 c4 0c             	add    esp,0xc
c0020264:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020266 <APICTimer::~APICTimer()>:
c0020266:	83 ec 0c             	sub    esp,0xc
c0020269:	83 ec 0c             	sub    esp,0xc
c002026c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020270:	e8 cd ff ff ff       	call   c0020242 <APICTimer::~APICTimer()>
c0020275:	83 c4 10             	add    esp,0x10
c0020278:	83 ec 08             	sub    esp,0x8
c002027b:	68 60 01 00 00       	push   0x160
c0020280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020284:	e8 5c ee fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	83 c4 0c             	add    esp,0xc
c002028f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020290 <PIT::~PIT()>:
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	ba 74 3b 02 c0       	mov    edx,0xc0023b74
c0020298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029c:	89 10                	mov    DWORD PTR [eax],edx
c002029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a2:	83 ec 0c             	sub    esp,0xc
c00202a5:	50                   	push   eax
c00202a6:	e8 87 2a ff ff       	call   c0012d32 <Timer::~Timer()>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	90                   	nop
c00202af:	83 c4 0c             	add    esp,0xc
c00202b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202b4 <PIT::~PIT()>:
c00202b4:	83 ec 0c             	sub    esp,0xc
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202be:	e8 cd ff ff ff       	call   c0020290 <PIT::~PIT()>
c00202c3:	83 c4 10             	add    esp,0x10
c00202c6:	83 ec 08             	sub    esp,0x8
c00202c9:	68 5c 01 00 00       	push   0x15c
c00202ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d2:	e8 0e ee fe ff       	call   c000f0e5 <operator delete(void*, unsigned long)>
c00202d7:	83 c4 10             	add    esp,0x10
c00202da:	83 c4 0c             	add    esp,0xc
c00202dd:	c3                   	ret    
